/*
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for license information.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */

import { BaseResource, CloudError } from "@azure/ms-rest-azure-js";
import * as msRest from "@azure/ms-rest-js";

export { BaseResource, CloudError };

/**
 * An interface representing PoolUsageMetrics.
 * @summary Usage metrics for a pool across an aggregation interval.
 */
export interface PoolUsageMetrics {
  /**
   * The ID of the pool whose metrics are aggregated in this entry.
   */
  poolId: string;
  /**
   * The start time of the aggregation interval covered by this entry.
   */
  startTime: Date;
  /**
   * The end time of the aggregation interval covered by this entry.
   */
  endTime: Date;
  /**
   * The size of virtual machines in the pool. All VMs in a pool are the same size. For information
   * about available sizes of virtual machines in pools, see Choose a VM size for compute nodes in
   * an Azure Batch pool (https://docs.microsoft.com/azure/batch/batch-pool-vm-sizes).
   */
  vmSize: string;
  /**
   * The total core hours used in the pool during this aggregation interval.
   */
  totalCoreHours: number;
}

/**
 * An interface representing ImageReference.
 * @summary A reference to an Azure Virtual Machines Marketplace image or a custom Azure Virtual
 * Machine image. To get the list of all Azure Marketplace image references verified by Azure
 * Batch, see the 'List node agent SKUs' operation.
 */
export interface ImageReference {
  /**
   * The publisher of the Azure Virtual Machines Marketplace image. For example, Canonical or
   * MicrosoftWindowsServer.
   */
  publisher?: string;
  /**
   * The offer type of the Azure Virtual Machines Marketplace image. For example, UbuntuServer or
   * WindowsServer.
   */
  offer?: string;
  /**
   * The SKU of the Azure Virtual Machines Marketplace image. For example, 14.04.0-LTS or
   * 2012-R2-Datacenter.
   */
  sku?: string;
  /**
   * The version of the Azure Virtual Machines Marketplace image. A value of 'latest' can be
   * specified to select the latest version of an image. If omitted, the default is 'latest'.
   */
  version?: string;
  /**
   * The ARM resource identifier of the virtual machine image. Computes nodes of the pool will be
   * created using this custom image. This is of the form
   * /subscriptions/{subscriptionId}/resourceGroups/{resourceGroup}/providers/Microsoft.Compute/images/{imageName}.
   * This property is mutually exclusive with other ImageReference properties. The virtual machine
   * image must be in the same region and subscription as the Azure Batch account. For more
   * details, see https://docs.microsoft.com/azure/batch/batch-custom-images.
   */
  virtualMachineImageId?: string;
}

/**
 * The Batch node agent is a program that runs on each node in the pool, and provides the
 * command-and-control interface between the node and the Batch service. There are different
 * implementations of the node agent, known as SKUs, for different operating systems.
 * @summary A node agent SKU supported by the Batch service.
 */
export interface NodeAgentSku {
  /**
   * The ID of the node agent SKU.
   */
  id?: string;
  /**
   * The list of Azure Marketplace images verified to be compatible with this node agent SKU. This
   * collection is not exhaustive (the node agent may be compatible with other images).
   */
  verifiedImageReferences?: ImageReference[];
  /**
   * The type of operating system (e.g. Windows or Linux) compatible with the node agent SKU.
   * Possible values include: 'linux', 'windows'
   */
  osType?: OSType;
}

/**
 * An interface representing AuthenticationTokenSettings.
 * @summary The settings for an authentication token that the task can use to perform Batch service
 * operations.
 */
export interface AuthenticationTokenSettings {
  /**
   * The Batch resources to which the token grants access. The authentication token grants access
   * to a limited set of Batch service operations. Currently the only supported value for the
   * access property is 'job', which grants access to all operations related to the job which
   * contains the task.
   */
  access?: AccessScope[];
}

/**
 * An interface representing UsageStatistics.
 * @summary Statistics related to pool usage information.
 */
export interface UsageStatistics {
  /**
   * The start time of the time range covered by the statistics.
   */
  startTime: Date;
  /**
   * The time at which the statistics were last updated. All statistics are limited to the range
   * between startTime and lastUpdateTime.
   */
  lastUpdateTime: Date;
  /**
   * The aggregated wall-clock time of the dedicated compute node cores being part of the pool.
   */
  dedicatedCoreTime: string;
}

/**
 * An interface representing ResourceStatistics.
 * @summary Statistics related to resource consumption by compute nodes in a pool.
 */
export interface ResourceStatistics {
  /**
   * The start time of the time range covered by the statistics.
   */
  startTime: Date;
  /**
   * The time at which the statistics were last updated. All statistics are limited to the range
   * between startTime and lastUpdateTime.
   */
  lastUpdateTime: Date;
  /**
   * The average CPU usage across all nodes in the pool (percentage per node).
   */
  avgCPUPercentage: number;
  /**
   * The average memory usage in GiB across all nodes in the pool.
   */
  avgMemoryGiB: number;
  /**
   * The peak memory usage in GiB across all nodes in the pool.
   */
  peakMemoryGiB: number;
  /**
   * The average used disk space in GiB across all nodes in the pool.
   */
  avgDiskGiB: number;
  /**
   * The peak used disk space in GiB across all nodes in the pool.
   */
  peakDiskGiB: number;
  /**
   * The total number of disk read operations across all nodes in the pool.
   */
  diskReadIOps: number;
  /**
   * The total number of disk write operations across all nodes in the pool.
   */
  diskWriteIOps: number;
  /**
   * The total amount of data in GiB of disk reads across all nodes in the pool.
   */
  diskReadGiB: number;
  /**
   * The total amount of data in GiB of disk writes across all nodes in the pool.
   */
  diskWriteGiB: number;
  /**
   * The total amount of data in GiB of network reads across all nodes in the pool.
   */
  networkReadGiB: number;
  /**
   * The total amount of data in GiB of network writes across all nodes in the pool.
   */
  networkWriteGiB: number;
}

/**
 * An interface representing PoolStatistics.
 * @summary Contains utilization and resource usage statistics for the lifetime of a pool.
 */
export interface PoolStatistics {
  /**
   * The URL for the statistics.
   */
  url: string;
  /**
   * The start time of the time range covered by the statistics.
   */
  startTime: Date;
  /**
   * The time at which the statistics were last updated. All statistics are limited to the range
   * between startTime and lastUpdateTime.
   */
  lastUpdateTime: Date;
  /**
   * Statistics related to pool usage, such as the amount of core-time used.
   */
  usageStats?: UsageStatistics;
  /**
   * Statistics related to resource consumption by compute nodes in the pool.
   */
  resourceStats?: ResourceStatistics;
}

/**
 * An interface representing JobStatistics.
 * @summary Resource usage statistics for a job.
 */
export interface JobStatistics {
  /**
   * The URL of the statistics.
   */
  url: string;
  /**
   * The start time of the time range covered by the statistics.
   */
  startTime: Date;
  /**
   * The time at which the statistics were last updated. All statistics are limited to the range
   * between startTime and lastUpdateTime.
   */
  lastUpdateTime: Date;
  /**
   * The total user mode CPU time (summed across all cores and all compute nodes) consumed by all
   * tasks in the job.
   */
  userCPUTime: string;
  /**
   * The total kernel mode CPU time (summed across all cores and all compute nodes) consumed by all
   * tasks in the job.
   */
  kernelCPUTime: string;
  /**
   * The total wall clock time of all tasks in the job.  The wall clock time is the elapsed time
   * from when the task started running on a compute node to when it finished (or to the last time
   * the statistics were updated, if the task had not finished by then). If a task was retried,
   * this includes the wall clock time of all the task retries.
   */
  wallClockTime: string;
  /**
   * The total number of disk read operations made by all tasks in the job.
   */
  readIOps: number;
  /**
   * The total number of disk write operations made by all tasks in the job.
   */
  writeIOps: number;
  /**
   * The total amount of data in GiB read from disk by all tasks in the job.
   */
  readIOGiB: number;
  /**
   * The total amount of data in GiB written to disk by all tasks in the job.
   */
  writeIOGiB: number;
  /**
   * The total number of tasks successfully completed in the job during the given time range. A
   * task completes successfully if it returns exit code 0.
   */
  numSucceededTasks: number;
  /**
   * The total number of tasks in the job that failed during the given time range. A task fails if
   * it exhausts its maximum retry count without returning exit code 0.
   */
  numFailedTasks: number;
  /**
   * The total number of retries on all the tasks in the job during the given time range.
   */
  numTaskRetries: number;
  /**
   * The total wait time of all tasks in the job. The wait time for a task is defined as the
   * elapsed time between the creation of the task and the start of task execution. (If the task is
   * retried due to failures, the wait time is the time to the most recent task execution.) This
   * value is only reported in the account lifetime statistics; it is not included in the job
   * statistics.
   */
  waitTime: string;
}

/**
 * An interface representing NameValuePair.
 * @summary Represents a name-value pair.
 */
export interface NameValuePair {
  /**
   * The name in the name-value pair.
   */
  name?: string;
  /**
   * The value in the name-value pair.
   */
  value?: string;
}

/**
 * An interface representing DeleteCertificateError.
 * @summary An error encountered by the Batch service when deleting a certificate.
 */
export interface DeleteCertificateError {
  /**
   * An identifier for the certificate deletion error. Codes are invariant and are intended to be
   * consumed programmatically.
   */
  code?: string;
  /**
   * A message describing the certificate deletion error, intended to be suitable for display in a
   * user interface.
   */
  message?: string;
  /**
   * A list of additional error details related to the certificate deletion error. This list
   * includes details such as the active pools and nodes referencing this certificate. However, if
   * a large number of resources reference the certificate, the list contains only about the first
   * hundred.
   */
  values?: NameValuePair[];
}

/**
 * A certificate that can be installed on compute nodes and can be used to authenticate operations
 * on the machine.
 */
export interface Certificate {
  /**
   * The X.509 thumbprint of the certificate. This is a sequence of up to 40 hex digits.
   */
  thumbprint?: string;
  /**
   * The algorithm used to derive the thumbprint.
   */
  thumbprintAlgorithm?: string;
  /**
   * The URL of the certificate.
   */
  url?: string;
  /**
   * The current state of the certificate. Possible values include: 'active', 'deleting',
   * 'deleteFailed'
   */
  state?: CertificateState;
  /**
   * The time at which the certificate entered its current state.
   */
  stateTransitionTime?: Date;
  /**
   * The previous state of the certificate. This property is not set if the certificate is in its
   * initial active state. Possible values include: 'active', 'deleting', 'deleteFailed'
   */
  previousState?: CertificateState;
  /**
   * The time at which the certificate entered its previous state. This property is not set if the
   * certificate is in its initial Active state.
   */
  previousStateTransitionTime?: Date;
  /**
   * The public part of the certificate as a base-64 encoded .cer file.
   */
  publicData?: string;
  /**
   * The error that occurred on the last attempt to delete this certificate. This property is set
   * only if the certificate is in the DeleteFailed state.
   */
  deleteCertificateError?: DeleteCertificateError;
}

/**
 * An interface representing ApplicationPackageReference.
 * @summary A reference to an application package to be deployed to compute nodes.
 */
export interface ApplicationPackageReference {
  /**
   * The ID of the application to deploy.
   */
  applicationId: string;
  /**
   * The version of the application to deploy. If omitted, the default version is deployed. If this
   * is omitted on a pool, and no default version is specified for this application, the request
   * fails with the error code InvalidApplicationPackageReferences and HTTP status code 409. If
   * this is omitted on a task, and no default version is specified for this application, the task
   * fails with a pre-processing error.
   */
  version?: string;
}

/**
 * An interface representing ApplicationSummary.
 * @summary Contains information about an application in an Azure Batch account.
 */
export interface ApplicationSummary {
  /**
   * A string that uniquely identifies the application within the account.
   */
  id: string;
  /**
   * The display name for the application.
   */
  displayName: string;
  /**
   * The list of available versions of the application.
   */
  versions: string[];
}

/**
 * An interface representing CertificateAddParameter.
 * @summary A certificate that can be installed on compute nodes and can be used to authenticate
 * operations on the machine.
 */
export interface CertificateAddParameter {
  /**
   * The X.509 thumbprint of the certificate. This is a sequence of up to 40 hex digits (it may
   * include spaces but these are removed).
   */
  thumbprint: string;
  /**
   * The algorithm used to derive the thumbprint. This must be sha1.
   */
  thumbprintAlgorithm: string;
  /**
   * The base64-encoded contents of the certificate. The maximum size is 10KB.
   */
  data: string;
  /**
   * The format of the certificate data. Possible values include: 'pfx', 'cer'
   */
  certificateFormat?: CertificateFormat;
  /**
   * The password to access the certificate's private key. This is required if the certificate
   * format is pfx. It should be omitted if the certificate format is cer.
   */
  password?: string;
}

/**
 * An interface representing FileProperties.
 * @summary The properties of a file on a compute node.
 */
export interface FileProperties {
  /**
   * The file creation time. The creation time is not returned for files on Linux compute nodes.
   */
  creationTime?: Date;
  /**
   * The time at which the file was last modified.
   */
  lastModified: Date;
  /**
   * The length of the file.
   */
  contentLength: number;
  /**
   * The content type of the file.
   */
  contentType?: string;
  /**
   * The file mode attribute in octal format. The file mode is returned only for files on Linux
   * compute nodes.
   */
  fileMode?: string;
}

/**
 * An interface representing NodeFile.
 * @summary Information about a file or directory on a compute node.
 */
export interface NodeFile {
  /**
   * The file path.
   */
  name?: string;
  /**
   * The URL of the file.
   */
  url?: string;
  /**
   * Whether the object represents a directory.
   */
  isDirectory?: boolean;
  /**
   * The file properties.
   */
  properties?: FileProperties;
}

/**
 * An interface representing Schedule.
 * @summary The schedule according to which jobs will be created
 */
export interface Schedule {
  /**
   * The earliest time at which any job may be created under this job schedule. If you do not
   * specify a doNotRunUntil time, the schedule becomes ready to create jobs immediately.
   */
  doNotRunUntil?: Date;
  /**
   * A time after which no job will be created under this job schedule. The schedule will move to
   * the completed state as soon as this deadline is past and there is no active job under this job
   * schedule. If you do not specify a doNotRunAfter time, and you are creating a recurring job
   * schedule, the job schedule will remain active until you explicitly terminate it.
   */
  doNotRunAfter?: Date;
  /**
   * The time interval, starting from the time at which the schedule indicates a job should be
   * created, within which a job must be created. If a job is not created within the startWindow
   * interval, then the 'opportunity' is lost; no job will be created until the next recurrence of
   * the schedule. If the schedule is recurring, and the startWindow is longer than the recurrence
   * interval, then this is equivalent to an infinite startWindow, because the job that is 'due' in
   * one recurrenceInterval is not carried forward into the next recurrence interval. The default
   * is infinite. The minimum value is 1 minute. If you specify a lower value, the Batch service
   * rejects the schedule with an error; if you are calling the REST API directly, the HTTP status
   * code is 400 (Bad Request).
   */
  startWindow?: string;
  /**
   * The time interval between the start times of two successive jobs under the job schedule. A job
   * schedule can have at most one active job under it at any given time. Because a job schedule
   * can have at most one active job under it at any given time, if it is time to create a new job
   * under a job schedule, but the previous job is still running, the Batch service will not create
   * the new job until the previous job finishes. If the previous job does not finish within the
   * startWindow period of the new recurrenceInterval, then no new job will be scheduled for that
   * interval. For recurring jobs, you should normally specify a jobManagerTask in the
   * jobSpecification. If you do not use jobManagerTask, you will need an external process to
   * monitor when jobs are created, add tasks to the jobs and terminate the jobs ready for the next
   * recurrence. The default is that the schedule does not recur: one job is created, within the
   * startWindow after the doNotRunUntil time, and the schedule is complete as soon as that job
   * finishes. The minimum value is 1 minute. If you specify a lower value, the Batch service
   * rejects the schedule with an error; if you are calling the REST API directly, the HTTP status
   * code is 400 (Bad Request).
   */
  recurrenceInterval?: string;
}

/**
 * An interface representing JobConstraints.
 * @summary The execution constraints for a job.
 */
export interface JobConstraints {
  /**
   * The maximum elapsed time that the job may run, measured from the time the job is created. If
   * the job does not complete within the time limit, the Batch service terminates it and any tasks
   * that are still running. In this case, the termination reason will be MaxWallClockTimeExpiry.
   * If this property is not specified, there is no time limit on how long the job may run.
   */
  maxWallClockTime?: string;
  /**
   * The maximum number of times each task may be retried. The Batch service retries a task if its
   * exit code is nonzero. Note that this value specifically controls the number of retries. The
   * Batch service will try each task once, and may then retry up to this limit. For example, if
   * the maximum retry count is 3, Batch tries a task up to 4 times (one initial try and 3
   * retries). If the maximum retry count is 0, the Batch service does not retry tasks. If the
   * maximum retry count is -1, the Batch service retries tasks without limit. The default value is
   * 0 (no retries).
   */
  maxTaskRetryCount?: number;
}

/**
 * An interface representing JobNetworkConfiguration.
 * @summary The network configuration for the job.
 */
export interface JobNetworkConfiguration {
  /**
   * The ARM resource identifier of the virtual network subnet which nodes running tasks from the
   * job will join for the duration of the task. This is only supported for jobs running on
   * VirtualMachineConfiguration pools. This is of the form
   * /subscriptions/{subscription}/resourceGroups/{group}/providers/{provider}/virtualNetworks/{network}/subnets/{subnet}.
   * The virtual network must be in the same region and subscription as the Azure Batch account.
   * The specified subnet should have enough free IP addresses to accommodate the number of nodes
   * which will run tasks from the job. For more details, see
   * https://docs.microsoft.com/en-us/azure/batch/batch-api-basics#virtual-network-vnet-and-firewall-configuration.
   */
  subnetId: string;
}

/**
 * An interface representing ContainerRegistry.
 * @summary A private container registry.
 */
export interface ContainerRegistry {
  /**
   * The registry URL. If omitted, the default is "docker.io".
   */
  registryServer?: string;
  /**
   * The user name to log into the registry server.
   */
  userName: string;
  /**
   * The password to log into the registry server.
   */
  password: string;
}

/**
 * An interface representing TaskContainerSettings.
 * @summary The container settings for a task.
 */
export interface TaskContainerSettings {
  /**
   * Additional options to the container create command. These additional options are supplied as
   * arguments to the "docker create" command, in addition to those controlled by the Batch
   * Service.
   */
  containerRunOptions?: string;
  /**
   * The image to use to create the container in which the task will run. This is the full image
   * reference, as would be specified to "docker pull". If no tag is provided as part of the image
   * name, the tag ":latest" is used as a default.
   */
  imageName: string;
  /**
   * The private registry which contains the container image. This setting can be omitted if was
   * already provided at pool creation.
   */
  registry?: ContainerRegistry;
}

/**
 * An interface representing ResourceFile.
 * @summary A single file or multiple files to be downloaded to a compute node.
 */
export interface ResourceFile {
  /**
   * The storage container name in the auto storage account. The autoStorageContainerName,
   * storageContainerUrl and httpUrl properties are mutually exclusive and one of them must be
   * specified.
   */
  autoStorageContainerName?: string;
  /**
   * The URL of the blob container within Azure Blob Storage. The autoStorageContainerName,
   * storageContainerUrl and httpUrl properties are mutually exclusive and one of them must be
   * specified. This URL must be readable and listable using anonymous access; that is, the Batch
   * service does not present any credentials when downloading blobs from the container. There are
   * two ways to get such a URL for a container in Azure storage: include a Shared Access Signature
   * (SAS) granting read and list permissions on the container, or set the ACL for the container to
   * allow public access.
   */
  storageContainerUrl?: string;
  /**
   * The URL of the file to download. The autoStorageContainerName, storageContainerUrl and httpUrl
   * properties are mutually exclusive and one of them must be specified. If the URL points to
   * Azure Blob Storage, it must be readable using anonymous access; that is, the Batch service
   * does not present any credentials when downloading the blob. There are two ways to get such a
   * URL for a blob in Azure storage: include a Shared Access Signature (SAS) granting read
   * permissions on the blob, or set the ACL for the blob or its container to allow public access.
   */
  httpUrl?: string;
  /**
   * The blob prefix to use when downloading blobs from an Azure Storage container. Only the blobs
   * whose names begin with the specified prefix will be downloaded. The property is valid only
   * when autoStorageContainerName or storageContainerUrl is used. This prefix can be a partial
   * filename or a subdirectory. If a prefix is not specified, all the files in the container will
   * be downloaded.
   */
  blobPrefix?: string;
  /**
   * The location on the compute node to which to download the file(s), relative to the task's
   * working directory. If the httpUrl property is specified, the filePath is required and
   * describes the path which the file will be downloaded to, including the filename. Otherwise, if
   * the autoStorageContainerName or storageContainerUrl property is specified, filePath is
   * optional and is the directory to download the files to. In the case where filePath is used as
   * a directory, any directory structure already associated with the input data will be retained
   * in full and appended to the specified filePath directory. The specified relative path cannot
   * break out of the task's working directory (for example by using '..').
   */
  filePath?: string;
  /**
   * The file permission mode attribute in octal format. This property applies only to files being
   * downloaded to Linux compute nodes. It will be ignored if it is specified for a resourceFile
   * which will be downloaded to a Windows node. If this property is not specified for a Linux
   * node, then a default value of 0770 is applied to the file.
   */
  fileMode?: string;
}

/**
 * An interface representing EnvironmentSetting.
 * @summary An environment variable to be set on a task process.
 */
export interface EnvironmentSetting {
  /**
   * The name of the environment variable.
   */
  name: string;
  /**
   * The value of the environment variable.
   */
  value?: string;
}

/**
 * An interface representing ExitOptions.
 * @summary Specifies how the Batch service responds to a particular exit condition.
 */
export interface ExitOptions {
  /**
   * An action to take on the job containing the task, if the task completes with the given exit
   * condition and the job's onTaskFailed property is 'performExitOptionsJobAction'. The default is
   * none for exit code 0 and terminate for all other exit conditions. If the job's onTaskFailed
   * property is noaction, then specifying this property returns an error and the add task request
   * fails with an invalid property value error; if you are calling the REST API directly, the HTTP
   * status code is 400 (Bad Request). Possible values include: 'none', 'disable', 'terminate'
   */
  jobAction?: JobAction;
  /**
   * An action that the Batch service performs on tasks that depend on this task. The default is
   * 'satisfy' for exit code 0, and 'block' for all other exit conditions. If the job's
   * usesTaskDependencies property is set to false, then specifying the dependencyAction property
   * returns an error and the add task request fails with an invalid property value error; if you
   * are calling the REST API directly, the HTTP status code is 400  (Bad Request). Possible values
   * include: 'satisfy', 'block'
   */
  dependencyAction?: DependencyAction;
}

/**
 * An interface representing ExitCodeMapping.
 * @summary How the Batch service should respond if a task exits with a particular exit code.
 */
export interface ExitCodeMapping {
  /**
   * A process exit code.
   */
  code: number;
  /**
   * How the Batch service should respond if the task exits with this exit code.
   */
  exitOptions: ExitOptions;
}

/**
 * An interface representing ExitCodeRangeMapping.
 * @summary A range of exit codes and how the Batch service should respond to exit codes within
 * that range.
 */
export interface ExitCodeRangeMapping {
  /**
   * The first exit code in the range.
   */
  start: number;
  /**
   * The last exit code in the range.
   */
  end: number;
  /**
   * How the Batch service should respond if the task exits with an exit code in the range start to
   * end (inclusive).
   */
  exitOptions: ExitOptions;
}

/**
 * An interface representing ExitConditions.
 * @summary Specifies how the Batch service should respond when the task completes.
 */
export interface ExitConditions {
  /**
   * A list of individual task exit codes and how the Batch service should respond to them.
   */
  exitCodes?: ExitCodeMapping[];
  /**
   * A list of task exit code ranges and how the Batch service should respond to them.
   */
  exitCodeRanges?: ExitCodeRangeMapping[];
  /**
   * How the Batch service should respond if the task fails to start due to an error.
   */
  preProcessingError?: ExitOptions;
  /**
   * How the Batch service should respond if a file upload error occurs. If the task exited with an
   * exit code that was specified via exitCodes or exitCodeRanges, and then encountered a file
   * upload error, then the action specified by the exit code takes precedence.
   */
  fileUploadError?: ExitOptions;
  /**
   * How the Batch service should respond if the task fails with an exit condition not covered by
   * any of the other properties. This value is used if the task exits with any nonzero exit code
   * not listed in the exitCodes or exitCodeRanges collection, with a pre-processing error if the
   * preProcessingError property is not present, or with a file upload error if the fileUploadError
   * property is not present. If you want non-default behavior on exit code 0, you must list it
   * explicitly using the exitCodes or exitCodeRanges collection.
   */
  default?: ExitOptions;
}

/**
 * An interface representing AutoUserSpecification.
 * @summary Specifies the parameters for the auto user that runs a task on the Batch service.
 */
export interface AutoUserSpecification {
  /**
   * The scope for the auto user. The default value is task. Possible values include: 'task',
   * 'pool'
   */
  scope?: AutoUserScope;
  /**
   * The elevation level of the auto user. The default value is nonAdmin. Possible values include:
   * 'nonAdmin', 'admin'
   */
  elevationLevel?: ElevationLevel;
}

/**
 * Specify either the userName or autoUser property, but not both.
 * @summary The definition of the user identity under which the task is run.
 */
export interface UserIdentity {
  /**
   * The name of the user identity under which the task is run. The userName and autoUser
   * properties are mutually exclusive; you must specify one but not both.
   */
  userName?: string;
  /**
   * The auto user under which the task is run. The userName and autoUser properties are mutually
   * exclusive; you must specify one but not both.
   */
  autoUser?: AutoUserSpecification;
}

/**
 * An interface representing LinuxUserConfiguration.
 * @summary Properties used to create a user account on a Linux node.
 */
export interface LinuxUserConfiguration {
  /**
   * The user ID of the user account. The uid and gid properties must be specified together or not
   * at all. If not specified the underlying operating system picks the uid.
   */
  uid?: number;
  /**
   * The group ID for the user account. The uid and gid properties must be specified together or
   * not at all. If not specified the underlying operating system picks the gid.
   */
  gid?: number;
  /**
   * The SSH private key for the user account. The private key must not be password protected. The
   * private key is used to automatically configure asymmetric-key based authentication for SSH
   * between nodes in a Linux pool when the pool's enableInterNodeCommunication property is true
   * (it is ignored if enableInterNodeCommunication is false). It does this by placing the key pair
   * into the user's .ssh directory. If not specified, password-less SSH is not configured between
   * nodes (no modification of the user's .ssh directory is done).
   */
  sshPrivateKey?: string;
}

/**
 * An interface representing WindowsUserConfiguration.
 * @summary Properties used to create a user account on a Windows node.
 */
export interface WindowsUserConfiguration {
  /**
   * The login mode for the user. The default value for VirtualMachineConfiguration pools is batch
   * and for CloudServiceConfiguration pools is interactive. Possible values include: 'batch',
   * 'interactive'
   */
  loginMode?: LoginMode;
}

/**
 * An interface representing UserAccount.
 * @summary Properties used to create a user used to execute tasks on an Azure Batch node.
 */
export interface UserAccount {
  /**
   * The name of the user account.
   */
  name: string;
  /**
   * The password for the user account.
   */
  password: string;
  /**
   * The elevation level of the user account. The default value is nonAdmin. Possible values
   * include: 'nonAdmin', 'admin'
   */
  elevationLevel?: ElevationLevel;
  /**
   * The Linux-specific user configuration for the user account. This property is ignored if
   * specified on a Windows pool. If not specified, the user is created with the default options.
   */
  linuxUserConfiguration?: LinuxUserConfiguration;
  /**
   * The Windows-specific user configuration for the user account. This property can only be
   * specified if the user is on a Windows pool. If not specified and on a Windows pool, the user
   * is created with the default options.
   */
  windowsUserConfiguration?: WindowsUserConfiguration;
}

/**
 * An interface representing TaskConstraints.
 * @summary Execution constraints to apply to a task.
 */
export interface TaskConstraints {
  /**
   * The maximum elapsed time that the task may run, measured from the time the task starts. If the
   * task does not complete within the time limit, the Batch service terminates it. If this is not
   * specified, there is no time limit on how long the task may run.
   */
  maxWallClockTime?: string;
  /**
   * The minimum time to retain the task directory on the compute node where it ran, from the time
   * it completes execution. After this time, the Batch service may delete the task directory and
   * all its contents. The default is 7 days, i.e. the task directory will be retained for 7 days
   * unless the compute node is removed or the job is deleted.
   */
  retentionTime?: string;
  /**
   * The maximum number of times the task may be retried. The Batch service retries a task if its
   * exit code is nonzero. Note that this value specifically controls the number of retries for the
   * task executable due to a nonzero exit code. The Batch service will try the task once, and may
   * then retry up to this limit. For example, if the maximum retry count is 3, Batch tries the
   * task up to 4 times (one initial try and 3 retries). If the maximum retry count is 0, the Batch
   * service does not retry the task after the first attempt. If the maximum retry count is -1, the
   * Batch service retries the task without limit.
   */
  maxTaskRetryCount?: number;
}

/**
 * An interface representing OutputFileBlobContainerDestination.
 * @summary Specifies a file upload destination within an Azure blob storage container.
 */
export interface OutputFileBlobContainerDestination {
  /**
   * The destination blob or virtual directory within the Azure Storage container. If filePattern
   * refers to a specific file (i.e. contains no wildcards), then path is the name of the blob to
   * which to upload that file. If filePattern contains one or more wildcards (and therefore may
   * match multiple files), then path is the name of the blob virtual directory (which is prepended
   * to each blob name) to which to upload the file(s). If omitted, file(s) are uploaded to the
   * root of the container with a blob name matching their file name.
   */
  path?: string;
  /**
   * The URL of the container within Azure Blob Storage to which to upload the file(s). The URL
   * must include a Shared Access Signature (SAS) granting write permissions to the container.
   */
  containerUrl: string;
}

/**
 * An interface representing OutputFileDestination.
 * @summary The destination to which a file should be uploaded.
 */
export interface OutputFileDestination {
  /**
   * A location in Azure blob storage to which files are uploaded.
   */
  container?: OutputFileBlobContainerDestination;
}

/**
 * An interface representing OutputFileUploadOptions.
 * @summary Details about an output file upload operation, including under what conditions to
 * perform the upload.
 */
export interface OutputFileUploadOptions {
  /**
   * The conditions under which the task output file or set of files should be uploaded. The
   * default is taskcompletion. Possible values include: 'taskSuccess', 'taskFailure',
   * 'taskCompletion'
   */
  uploadCondition: OutputFileUploadCondition;
}

/**
 * An interface representing OutputFile.
 * @summary A specification for uploading files from an Azure Batch node to another location after
 * the Batch service has finished executing the task process.
 */
export interface OutputFile {
  /**
   * A pattern indicating which file(s) to upload. Both relative and absolute paths are supported.
   * Relative paths are relative to the task working directory. The following wildcards are
   * supported: * matches 0 or more characters (for example pattern abc* would match abc or
   * abcdef), ** matches any directory, ? matches any single character, [abc] matches one character
   * in the brackets, and [a-c] matches one character in the range. Brackets can include a negation
   * to match any character not specified (for example [!abc] matches any character but a, b, or
   * c). If a file name starts with "." it is ignored by default but may be matched by specifying
   * it explicitly (for example *.gif will not match .a.gif, but .*.gif will). A simple example:
   * **\*.txt matches any file that does not start in '.' and ends with .txt in the task working
   * directory or any subdirectory. If the filename contains a wildcard character it can be escaped
   * using brackets (for example abc[*] would match a file named abc*). Note that both \ and / are
   * treated as directory separators on Windows, but only / is on Linux. Environment variables
   * (%var% on Windows or $var on Linux) are expanded prior to the pattern being applied.
   */
  filePattern: string;
  /**
   * The destination for the output file(s).
   */
  destination: OutputFileDestination;
  /**
   * Additional options for the upload operation, including under what conditions to perform the
   * upload.
   */
  uploadOptions: OutputFileUploadOptions;
}

/**
 * The Job Manager task is automatically started when the job is created. The Batch service tries
 * to schedule the Job Manager task before any other tasks in the job. When shrinking a pool, the
 * Batch service tries to preserve compute nodes where Job Manager tasks are running for as long as
 * possible (that is, nodes running 'normal' tasks are removed before nodes running Job Manager
 * tasks). When a Job Manager task fails and needs to be restarted, the system tries to schedule it
 * at the highest priority. If there are no idle nodes available, the system may terminate one of
 * the running tasks in the pool and return it to the queue in order to make room for the Job
 * Manager task to restart. Note that a Job Manager task in one job does not have priority over
 * tasks in other jobs. Across jobs, only job level priorities are observed. For example, if a Job
 * Manager in a priority 0 job needs to be restarted, it will not displace tasks of a priority 1
 * job. Batch will retry tasks when a recovery operation is triggered on a compute node. Examples
 * of recovery operations include (but are not limited to) when an unhealthy compute node is
 * rebooted or a compute node disappeared due to host failure. Retries due to recovery operations
 * are independent of and are not counted against the maxTaskRetryCount. Even if the
 * maxTaskRetryCount is 0, an internal retry due to a recovery operation may occur. Because of
 * this, all tasks should be idempotent. This means tasks need to tolerate being interrupted and
 * restarted without causing any corruption or duplicate data. The best practice for long running
 * tasks is to use some form of checkpointing.
 * @summary Specifies details of a Job Manager task.
 */
export interface JobManagerTask {
  /**
   * A string that uniquely identifies the Job Manager task within the job. The ID can contain any
   * combination of alphanumeric characters including hyphens and underscores and cannot contain
   * more than 64 characters.
   */
  id: string;
  /**
   * The display name of the Job Manager task. It need not be unique and can contain any Unicode
   * characters up to a maximum length of 1024.
   */
  displayName?: string;
  /**
   * The command line of the Job Manager task. The command line does not run under a shell, and
   * therefore cannot take advantage of shell features such as environment variable expansion. If
   * you want to take advantage of such features, you should invoke the shell in the command line,
   * for example using "cmd /c MyCommand" in Windows or "/bin/sh -c MyCommand" in Linux. If the
   * command line refers to file paths, it should use a relative path (relative to the task working
   * directory), or use the Batch provided environment variable
   * (https://docs.microsoft.com/en-us/azure/batch/batch-compute-node-environment-variables).
   */
  commandLine: string;
  /**
   * The settings for the container under which the Job Manager task runs. If the pool that will
   * run this task has containerConfiguration set, this must be set as well. If the pool that will
   * run this task doesn't have containerConfiguration set, this must not be set. When this is
   * specified, all directories recursively below the AZ_BATCH_NODE_ROOT_DIR (the root of Azure
   * Batch directories on the node) are mapped into the container, all task environment variables
   * are mapped into the container, and the task command line is executed in the container.
   */
  containerSettings?: TaskContainerSettings;
  /**
   * A list of files that the Batch service will download to the compute node before running the
   * command line. Files listed under this element are located in the task's working directory.
   * There is a maximum size for the list of resource files.  When the max size is exceeded, the
   * request will fail and the response error code will be RequestEntityTooLarge. If this occurs,
   * the collection of ResourceFiles must be reduced in size. This can be achieved using .zip
   * files, Application Packages, or Docker Containers.
   */
  resourceFiles?: ResourceFile[];
  /**
   * A list of files that the Batch service will upload from the compute node after running the
   * command line. For multi-instance tasks, the files will only be uploaded from the compute node
   * on which the primary task is executed.
   */
  outputFiles?: OutputFile[];
  /**
   * A list of environment variable settings for the Job Manager task.
   */
  environmentSettings?: EnvironmentSetting[];
  /**
   * Constraints that apply to the Job Manager task.
   */
  constraints?: TaskConstraints;
  /**
   * Whether completion of the Job Manager task signifies completion of the entire job. If true,
   * when the Job Manager task completes, the Batch service marks the job as complete. If any tasks
   * are still running at this time (other than Job Release), those tasks are terminated. If false,
   * the completion of the Job Manager task does not affect the job status. In this case, you
   * should either use the onAllTasksComplete attribute to terminate the job, or have a client or
   * user terminate the job explicitly. An example of this is if the Job Manager creates a set of
   * tasks but then takes no further role in their execution. The default value is true. If you are
   * using the onAllTasksComplete and onTaskFailure attributes to control job lifetime, and using
   * the Job Manager task only to create the tasks for the job (not to monitor progress), then it
   * is important to set killJobOnCompletion to false.
   */
  killJobOnCompletion?: boolean;
  /**
   * The user identity under which the Job Manager task runs. If omitted, the task runs as a
   * non-administrative user unique to the task.
   */
  userIdentity?: UserIdentity;
  /**
   * Whether the Job Manager task requires exclusive use of the compute node where it runs. If
   * true, no other tasks will run on the same compute node for as long as the Job Manager is
   * running. If false, other tasks can run simultaneously with the Job Manager on a compute node.
   * The Job Manager task counts normally against the node's concurrent task limit, so this is only
   * relevant if the node allows multiple concurrent tasks. The default value is true.
   */
  runExclusive?: boolean;
  /**
   * A list of application packages that the Batch service will deploy to the compute node before
   * running the command line. Application packages are downloaded and deployed to a shared
   * directory, not the task working directory. Therefore, if a referenced package is already on
   * the compute node, and is up to date, then it is not re-downloaded; the existing copy on the
   * compute node is used. If a referenced application package cannot be installed, for example
   * because the package has been deleted or because download failed, the task fails.
   */
  applicationPackageReferences?: ApplicationPackageReference[];
  /**
   * The settings for an authentication token that the task can use to perform Batch service
   * operations. If this property is set, the Batch service provides the task with an
   * authentication token which can be used to authenticate Batch service operations without
   * requiring an account access key. The token is provided via the AZ_BATCH_AUTHENTICATION_TOKEN
   * environment variable. The operations that the task can carry out using the token depend on the
   * settings. For example, a task can request job permissions in order to add other tasks to the
   * job, or check the status of the job or of other tasks under the job.
   */
  authenticationTokenSettings?: AuthenticationTokenSettings;
  /**
   * Whether the Job Manager task may run on a low-priority compute node. The default value is
   * true.
   */
  allowLowPriorityNode?: boolean;
}

/**
 * You can use Job Preparation to prepare a compute node to run tasks for the job. Activities
 * commonly performed in Job Preparation include: Downloading common resource files used by all the
 * tasks in the job. The Job Preparation task can download these common resource files to the
 * shared location on the compute node. (AZ_BATCH_NODE_ROOT_DIR\shared), or starting a local
 * service on the compute node so that all tasks of that job can communicate with it. If the Job
 * Preparation task fails (that is, exhausts its retry count before exiting with exit code 0),
 * Batch will not run tasks of this job on the compute node. The node remains ineligible to run
 * tasks of this job until it is reimaged. The node remains active and can be used for other jobs.
 * The Job Preparation task can run multiple times on the same compute node. Therefore, you should
 * write the Job Preparation task to handle re-execution. If the compute node is rebooted, the Job
 * Preparation task is run again on the node before scheduling any other task of the job, if
 * rerunOnNodeRebootAfterSuccess is true or if the Job Preparation task did not previously
 * complete. If the compute node is reimaged, the Job Preparation task is run again before
 * scheduling any task of the job. Batch will retry tasks when a recovery operation is triggered on
 * a compute node. Examples of recovery operations include (but are not limited to) when an
 * unhealthy compute node is rebooted or a compute node disappeared due to host failure. Retries
 * due to recovery operations are independent of and are not counted against the maxTaskRetryCount.
 * Even if the maxTaskRetryCount is 0, an internal retry due to a recovery operation may occur.
 * Because of this, all tasks should be idempotent. This means tasks need to tolerate being
 * interrupted and restarted without causing any corruption or duplicate data. The best practice
 * for long running tasks is to use some form of checkpointing.
 * @summary A Job Preparation task to run before any tasks of the job on any given compute node.
 */
export interface JobPreparationTask {
  /**
   * A string that uniquely identifies the Job Preparation task within the job. The ID can contain
   * any combination of alphanumeric characters including hyphens and underscores and cannot
   * contain more than 64 characters. If you do not specify this property, the Batch service
   * assigns a default value of 'jobpreparation'. No other task in the job can have the same ID as
   * the Job Preparation task. If you try to submit a task with the same id, the Batch service
   * rejects the request with error code TaskIdSameAsJobPreparationTask; if you are calling the
   * REST API directly, the HTTP status code is 409 (Conflict).
   */
  id?: string;
  /**
   * The command line of the Job Preparation task. The command line does not run under a shell, and
   * therefore cannot take advantage of shell features such as environment variable expansion. If
   * you want to take advantage of such features, you should invoke the shell in the command line,
   * for example using "cmd /c MyCommand" in Windows or "/bin/sh -c MyCommand" in Linux. If the
   * command line refers to file paths, it should use a relative path (relative to the task working
   * directory), or use the Batch provided environment variable
   * (https://docs.microsoft.com/en-us/azure/batch/batch-compute-node-environment-variables).
   */
  commandLine: string;
  /**
   * The settings for the container under which the Job Preparation task runs. When this is
   * specified, all directories recursively below the AZ_BATCH_NODE_ROOT_DIR (the root of Azure
   * Batch directories on the node) are mapped into the container, all task environment variables
   * are mapped into the container, and the task command line is executed in the container.
   */
  containerSettings?: TaskContainerSettings;
  /**
   * A list of files that the Batch service will download to the compute node before running the
   * command line. Files listed under this element are located in the task's working directory.
   * There is a maximum size for the list of resource files.  When the max size is exceeded, the
   * request will fail and the response error code will be RequestEntityTooLarge. If this occurs,
   * the collection of ResourceFiles must be reduced in size. This can be achieved using .zip
   * files, Application Packages, or Docker Containers.
   */
  resourceFiles?: ResourceFile[];
  /**
   * A list of environment variable settings for the Job Preparation task.
   */
  environmentSettings?: EnvironmentSetting[];
  /**
   * Constraints that apply to the Job Preparation task.
   */
  constraints?: TaskConstraints;
  /**
   * Whether the Batch service should wait for the Job Preparation task to complete successfully
   * before scheduling any other tasks of the job on the compute node. A Job Preparation task has
   * completed successfully if it exits with exit code 0. If true and the Job Preparation task
   * fails on a compute node, the Batch service retries the Job Preparation task up to its maximum
   * retry count (as specified in the constraints element). If the task has still not completed
   * successfully after all retries, then the Batch service will not schedule tasks of the job to
   * the compute node. The compute node remains active and eligible to run tasks of other jobs. If
   * false, the Batch service will not wait for the Job Preparation task to complete. In this case,
   * other tasks of the job can start executing on the compute node while the Job Preparation task
   * is still running; and even if the Job Preparation task fails, new tasks will continue to be
   * scheduled on the node. The default value is true.
   */
  waitForSuccess?: boolean;
  /**
   * The user identity under which the Job Preparation task runs. If omitted, the task runs as a
   * non-administrative user unique to the task on Windows nodes, or a non-administrative user
   * unique to the pool on Linux nodes.
   */
  userIdentity?: UserIdentity;
  /**
   * Whether the Batch service should rerun the Job Preparation task after a compute node reboots.
   * The Job Preparation task is always rerun if a compute node is reimaged, or if the Job
   * Preparation task did not complete (e.g. because the reboot occurred while the task was
   * running). Therefore, you should always write a Job Preparation task to be idempotent and to
   * behave correctly if run multiple times. The default value is true.
   */
  rerunOnNodeRebootAfterSuccess?: boolean;
}

/**
 * The Job Release task runs when the job ends, because of one of the following: The user calls the
 * Terminate Job API, or the Delete Job API while the job is still active, the job's maximum wall
 * clock time constraint is reached, and the job is still active, or the job's Job Manager task
 * completed, and the job is configured to terminate when the Job Manager completes. The Job
 * Release task runs on each compute node where tasks of the job have run and the Job Preparation
 * task ran and completed. If you reimage a compute node after it has run the Job Preparation task,
 * and the job ends without any further tasks of the job running on that compute node (and hence
 * the Job Preparation task does not re-run), then the Job Release task does not run on that node.
 * If a compute node reboots while the Job Release task is still running, the Job Release task runs
 * again when the compute node starts up. The job is not marked as complete until all Job Release
 * tasks have completed. The Job Release task runs in the background. It does not occupy a
 * scheduling slot; that is, it does not count towards the maxTasksPerNode limit specified on the
 * pool.
 * @summary A Job Release task to run on job completion on any compute node where the job has run.
 */
export interface JobReleaseTask {
  /**
   * A string that uniquely identifies the Job Release task within the job. The ID can contain any
   * combination of alphanumeric characters including hyphens and underscores and cannot contain
   * more than 64 characters. If you do not specify this property, the Batch service assigns a
   * default value of 'jobrelease'. No other task in the job can have the same ID as the Job
   * Release task. If you try to submit a task with the same id, the Batch service rejects the
   * request with error code TaskIdSameAsJobReleaseTask; if you are calling the REST API directly,
   * the HTTP status code is 409 (Conflict).
   */
  id?: string;
  /**
   * The command line of the Job Release task. The command line does not run under a shell, and
   * therefore cannot take advantage of shell features such as environment variable expansion. If
   * you want to take advantage of such features, you should invoke the shell in the command line,
   * for example using "cmd /c MyCommand" in Windows or "/bin/sh -c MyCommand" in Linux. If the
   * command line refers to file paths, it should use a relative path (relative to the task working
   * directory), or use the Batch provided environment variable
   * (https://docs.microsoft.com/en-us/azure/batch/batch-compute-node-environment-variables).
   */
  commandLine: string;
  /**
   * The settings for the container under which the Job Release task runs. When this is specified,
   * all directories recursively below the AZ_BATCH_NODE_ROOT_DIR (the root of Azure Batch
   * directories on the node) are mapped into the container, all task environment variables are
   * mapped into the container, and the task command line is executed in the container.
   */
  containerSettings?: TaskContainerSettings;
  /**
   * A list of files that the Batch service will download to the compute node before running the
   * command line.  There is a maximum size for the list of resource files.  When the max size is
   * exceeded, the request will fail and the response error code will be RequestEntityTooLarge. If
   * this occurs, the collection of ResourceFiles must be reduced in size. This can be achieved
   * using .zip files, Application Packages, or Docker Containers. Files listed under this element
   * are located in the task's working directory.
   */
  resourceFiles?: ResourceFile[];
  /**
   * A list of environment variable settings for the Job Release task.
   */
  environmentSettings?: EnvironmentSetting[];
  /**
   * The maximum elapsed time that the Job Release task may run on a given compute node, measured
   * from the time the task starts. If the task does not complete within the time limit, the Batch
   * service terminates it. The default value is 15 minutes. You may not specify a timeout longer
   * than 15 minutes. If you do, the Batch service rejects it with an error; if you are calling the
   * REST API directly, the HTTP status code is 400 (Bad Request).
   */
  maxWallClockTime?: string;
  /**
   * The minimum time to retain the task directory for the Job Release task on the compute node.
   * After this time, the Batch service may delete the task directory and all its contents. The
   * default is 7 days, i.e. the task directory will be retained for 7 days unless the compute node
   * is removed or the job is deleted.
   */
  retentionTime?: string;
  /**
   * The user identity under which the Job Release task runs. If omitted, the task runs as a
   * non-administrative user unique to the task.
   */
  userIdentity?: UserIdentity;
}

/**
 * An interface representing TaskSchedulingPolicy.
 * @summary Specifies how tasks should be distributed across compute nodes.
 */
export interface TaskSchedulingPolicy {
  /**
   * How tasks are distributed across compute nodes in a pool. Possible values include: 'spread',
   * 'pack'
   */
  nodeFillType: ComputeNodeFillType;
}

/**
 * Batch will retry tasks when a recovery operation is triggered on a compute node. Examples of
 * recovery operations include (but are not limited to) when an unhealthy compute node is rebooted
 * or a compute node disappeared due to host failure. Retries due to recovery operations are
 * independent of and are not counted against the maxTaskRetryCount. Even if the maxTaskRetryCount
 * is 0, an internal retry due to a recovery operation may occur. Because of this, all tasks should
 * be idempotent. This means tasks need to tolerate being interrupted and restarted without causing
 * any corruption or duplicate data. The best practice for long running tasks is to use some form
 * of checkpointing. In some cases the start task may be re-run even though the node was not
 * rebooted. Special care should be taken to avoid start tasks which create breakaway process or
 * install/launch services from the start task working directory, as this will block Batch from
 * being able to re-run the start task.
 * @summary A task which is run when a compute node joins a pool in the Azure Batch service, or
 * when the compute node is rebooted or reimaged.
 */
export interface StartTask {
  /**
   * The command line of the start task. The command line does not run under a shell, and therefore
   * cannot take advantage of shell features such as environment variable expansion. If you want to
   * take advantage of such features, you should invoke the shell in the command line, for example
   * using "cmd /c MyCommand" in Windows or "/bin/sh -c MyCommand" in Linux. If the command line
   * refers to file paths, it should use a relative path (relative to the task working directory),
   * or use the Batch provided environment variable
   * (https://docs.microsoft.com/en-us/azure/batch/batch-compute-node-environment-variables).
   */
  commandLine: string;
  /**
   * The settings for the container under which the start task runs. When this is specified, all
   * directories recursively below the AZ_BATCH_NODE_ROOT_DIR (the root of Azure Batch directories
   * on the node) are mapped into the container, all task environment variables are mapped into the
   * container, and the task command line is executed in the container.
   */
  containerSettings?: TaskContainerSettings;
  /**
   * A list of files that the Batch service will download to the compute node before running the
   * command line.  There is a maximum size for the list of resource files. When the max size is
   * exceeded, the request will fail and the response error code will be RequestEntityTooLarge. If
   * this occurs, the collection of ResourceFiles must be reduced in size. This can be achieved
   * using .zip files, Application Packages, or Docker Containers. Files listed under this element
   * are located in the task's working directory.
   */
  resourceFiles?: ResourceFile[];
  /**
   * A list of environment variable settings for the start task.
   */
  environmentSettings?: EnvironmentSetting[];
  /**
   * The user identity under which the start task runs. If omitted, the task runs as a
   * non-administrative user unique to the task.
   */
  userIdentity?: UserIdentity;
  /**
   * The maximum number of times the task may be retried. The Batch service retries a task if its
   * exit code is nonzero. Note that this value specifically controls the number of retries. The
   * Batch service will try the task once, and may then retry up to this limit. For example, if the
   * maximum retry count is 3, Batch tries the task up to 4 times (one initial try and 3 retries).
   * If the maximum retry count is 0, the Batch service does not retry the task. If the maximum
   * retry count is -1, the Batch service retries the task without limit.
   */
  maxTaskRetryCount?: number;
  /**
   * Whether the Batch service should wait for the start task to complete successfully (that is, to
   * exit with exit code 0) before scheduling any tasks on the compute node. If true and the start
   * task fails on a compute node, the Batch service retries the start task up to its maximum retry
   * count (maxTaskRetryCount). If the task has still not completed successfully after all retries,
   * then the Batch service marks the compute node unusable, and will not schedule tasks to it.
   * This condition can be detected via the node state and failure info details. If false, the
   * Batch service will not wait for the start task to complete. In this case, other tasks can
   * start executing on the compute node while the start task is still running; and even if the
   * start task fails, new tasks will continue to be scheduled on the node. The default is false.
   */
  waitForSuccess?: boolean;
}

/**
 * An interface representing CertificateReference.
 * @summary A reference to a certificate to be installed on compute nodes in a pool.
 */
export interface CertificateReference {
  /**
   * The thumbprint of the certificate.
   */
  thumbprint: string;
  /**
   * The algorithm with which the thumbprint is associated. This must be sha1.
   */
  thumbprintAlgorithm: string;
  /**
   * The location of the certificate store on the compute node into which to install the
   * certificate. The default value is currentuser. This property is applicable only for pools
   * configured with Windows nodes (that is, created with cloudServiceConfiguration, or with
   * virtualMachineConfiguration using a Windows image reference). For Linux compute nodes, the
   * certificates are stored in a directory inside the task working directory and an environment
   * variable AZ_BATCH_CERTIFICATES_DIR is supplied to the task to query for this location. For
   * certificates with visibility of 'remoteUser', a 'certs' directory is created in the user's
   * home directory (e.g., /home/{user-name}/certs) and certificates are placed in that directory.
   * Possible values include: 'currentUser', 'localMachine'
   */
  storeLocation?: CertificateStoreLocation;
  /**
   * The name of the certificate store on the compute node into which to install the certificate.
   * This property is applicable only for pools configured with Windows nodes (that is, created
   * with cloudServiceConfiguration, or with virtualMachineConfiguration using a Windows image
   * reference). Common store names include: My, Root, CA, Trust, Disallowed, TrustedPeople,
   * TrustedPublisher, AuthRoot, AddressBook, but any custom store name can also be used. The
   * default value is My.
   */
  storeName?: string;
  /**
   * Which user accounts on the compute node should have access to the private data of the
   * certificate. You can specify more than one visibility in this collection. The default is all
   * accounts.
   */
  visibility?: CertificateVisibility[];
}

/**
 * The Batch service does not assign any meaning to this metadata; it is solely for the use of user
 * code.
 * @summary A name-value pair associated with a Batch service resource.
 */
export interface MetadataItem {
  /**
   * The name of the metadata item.
   */
  name: string;
  /**
   * The value of the metadata item.
   */
  value: string;
}

/**
 * An interface representing CloudServiceConfiguration.
 * @summary The configuration for nodes in a pool based on the Azure Cloud Services platform.
 */
export interface CloudServiceConfiguration {
  /**
   * The Azure Guest OS family to be installed on the virtual machines in the pool. Possible values
   * are:
   * 2 - OS Family 2, equivalent to Windows Server 2008 R2 SP1.
   * 3 - OS Family 3, equivalent to Windows Server 2012.
   * 4 - OS Family 4, equivalent to Windows Server 2012 R2.
   * 5 - OS Family 5, equivalent to Windows Server 2016.
   * 6 - OS Family 6, equivalent to Windows Server 2019. For more information, see Azure Guest OS
   * Releases
   * (https://azure.microsoft.com/documentation/articles/cloud-services-guestos-update-matrix/#releases).
   */
  osFamily: string;
  /**
   * The Azure Guest OS version to be installed on the virtual machines in the pool. The default
   * value is * which specifies the latest operating system version for the specified OS family.
   */
  osVersion?: string;
}

/**
 * An interface representing WindowsConfiguration.
 * @summary Windows operating system settings to apply to the virtual machine.
 */
export interface WindowsConfiguration {
  /**
   * Whether automatic updates are enabled on the virtual machine. If omitted, the default value is
   * true.
   */
  enableAutomaticUpdates?: boolean;
}

/**
 * An interface representing DataDisk.
 * @summary Settings which will be used by the data disks associated to compute nodes in the pool.
 */
export interface DataDisk {
  /**
   * The logical unit number. The lun is used to uniquely identify each data disk. If attaching
   * multiple disks, each should have a distinct lun.
   */
  lun: number;
  /**
   * The type of caching to be enabled for the data disks. The default value for caching is
   * readwrite. For information about the caching options see:
   * https://blogs.msdn.microsoft.com/windowsazurestorage/2012/06/27/exploring-windows-azure-drives-disks-and-images/.
   * Possible values include: 'none', 'readOnly', 'readWrite'
   */
  caching?: CachingType;
  /**
   * The initial disk size in gigabytes.
   */
  diskSizeGB: number;
  /**
   * The storage account type to be used for the data disk. If omitted, the default is
   * "standard_lrs". Possible values include: 'StandardLRS', 'PremiumLRS'
   */
  storageAccountType?: StorageAccountType;
}

/**
 * An interface representing ContainerConfiguration.
 * @summary The configuration for container-enabled pools.
 */
export interface ContainerConfiguration {
  /**
   * The collection of container image names. This is the full image reference, as would be
   * specified to "docker pull". An image will be sourced from the default Docker registry unless
   * the image is fully qualified with an alternative registry.
   */
  containerImageNames?: string[];
  /**
   * Additional private registries from which containers can be pulled. If any images must be
   * downloaded from a private registry which requires credentials, then those credentials must be
   * provided here.
   */
  containerRegistries?: ContainerRegistry[];
}

/**
 * An interface representing VirtualMachineConfiguration.
 * @summary The configuration for compute nodes in a pool based on the Azure Virtual Machines
 * infrastructure.
 */
export interface VirtualMachineConfiguration {
  /**
   * A reference to the Azure Virtual Machines Marketplace image or the custom Virtual Machine
   * image to use.
   */
  imageReference: ImageReference;
  /**
   * The SKU of the Batch node agent to be provisioned on compute nodes in the pool. The Batch node
   * agent is a program that runs on each node in the pool, and provides the command-and-control
   * interface between the node and the Batch service. There are different implementations of the
   * node agent, known as SKUs, for different operating systems. You must specify a node agent SKU
   * which matches the selected image reference. To get the list of supported node agent SKUs along
   * with their list of verified image references, see the 'List supported node agent SKUs'
   * operation.
   */
  nodeAgentSKUId: string;
  /**
   * Windows operating system settings on the virtual machine. This property must not be specified
   * if the imageReference property specifies a Linux OS image.
   */
  windowsConfiguration?: WindowsConfiguration;
  /**
   * The configuration for data disks attached to the compute nodes in the pool. This property must
   * be specified if the compute nodes in the pool need to have empty data disks attached to them.
   * This cannot be updated. Each node gets its own disk (the disk is not a file share). Existing
   * disks cannot be attached, each attached disk is empty. When the node is removed from the pool,
   * the disk and all data associated with it is also deleted. The disk is not formatted after
   * being attached, it must be formatted before use - for more information see
   * https://docs.microsoft.com/en-us/azure/virtual-machines/linux/classic/attach-disk#initialize-a-new-data-disk-in-linux
   * and
   * https://docs.microsoft.com/en-us/azure/virtual-machines/windows/attach-disk-ps#add-an-empty-data-disk-to-a-virtual-machine.
   */
  dataDisks?: DataDisk[];
  /**
   * The type of on-premises license to be used when deploying the operating system. This only
   * applies to images that contain the Windows operating system, and should only be used when you
   * hold valid on-premises licenses for the nodes which will be deployed. If omitted, no
   * on-premises licensing discount is applied. Values are:
   *
   * Windows_Server - The on-premises license is for Windows Server.
   * Windows_Client - The on-premises license is for Windows Client.
   */
  licenseType?: string;
  /**
   * The container configuration for the pool. If specified, setup is performed on each node in the
   * pool to allow tasks to run in containers. All regular tasks and job manager tasks run on this
   * pool must specify the containerSettings property, and all other tasks may specify it.
   */
  containerConfiguration?: ContainerConfiguration;
}

/**
 * An interface representing NetworkSecurityGroupRule.
 * @summary A network security group rule to apply to an inbound endpoint.
 */
export interface NetworkSecurityGroupRule {
  /**
   * The priority for this rule. Priorities within a pool must be unique and are evaluated in order
   * of priority. The lower the number the higher the priority. For example, rules could be
   * specified with order numbers of 150, 250, and 350. The rule with the order number of 150 takes
   * precedence over the rule that has an order of 250. Allowed priorities are 150 to 3500. If any
   * reserved or duplicate values are provided the request fails with HTTP status code 400.
   */
  priority: number;
  /**
   * The action that should be taken for a specified IP address, subnet range or tag. Possible
   * values include: 'allow', 'deny'
   */
  access: NetworkSecurityGroupRuleAccess;
  /**
   * The source address prefix or tag to match for the rule. Valid values are a single IP address
   * (i.e. 10.10.10.10), IP subnet (i.e. 192.168.1.0/24), default tag, or * (for all addresses).
   * If any other values are provided the request fails with HTTP status code 400.
   */
  sourceAddressPrefix: string;
}

/**
 * An interface representing InboundNATPool.
 * @summary A inbound NAT pool that can be used to address specific ports on compute nodes in a
 * Batch pool externally.
 */
export interface InboundNATPool {
  /**
   * The name of the endpoint. The name must be unique within a Batch pool, can contain letters,
   * numbers, underscores, periods, and hyphens. Names must start with a letter or number, must end
   * with a letter, number, or underscore, and cannot exceed 77 characters.  If any invalid values
   * are provided the request fails with HTTP status code 400.
   */
  name: string;
  /**
   * The protocol of the endpoint. Possible values include: 'tcp', 'udp'
   */
  protocol: InboundEndpointProtocol;
  /**
   * The port number on the compute node. This must be unique within a Batch pool. Acceptable
   * values are between 1 and 65535 except for 22, 3389, 29876 and 29877 as these are reserved. If
   * any reserved values are provided the request fails with HTTP status code 400.
   */
  backendPort: number;
  /**
   * The first port number in the range of external ports that will be used to provide inbound
   * access to the backendPort on individual compute nodes. Acceptable values range between 1 and
   * 65534 except ports from 50000 to 55000 which are reserved. All ranges within a pool must be
   * distinct and cannot overlap. Each range must contain at least 40 ports. If any reserved or
   * overlapping values are provided the request fails with HTTP status code 400.
   */
  frontendPortRangeStart: number;
  /**
   * The last port number in the range of external ports that will be used to provide inbound
   * access to the backendPort on individual compute nodes. Acceptable values range between 1 and
   * 65534 except ports from 50000 to 55000 which are reserved by the Batch service. All ranges
   * within a pool must be distinct and cannot overlap. Each range must contain at least 40 ports.
   * If any reserved or overlapping values are provided the request fails with HTTP status code
   * 400.
   */
  frontendPortRangeEnd: number;
  /**
   * A list of network security group rules that will be applied to the endpoint. The maximum
   * number of rules that can be specified across all the endpoints on a Batch pool is 25. If no
   * network security group rules are specified, a default rule will be created to allow inbound
   * access to the specified backendPort. If the maximum number of network security group rules is
   * exceeded the request fails with HTTP status code 400.
   */
  networkSecurityGroupRules?: NetworkSecurityGroupRule[];
}

/**
 * An interface representing PoolEndpointConfiguration.
 * @summary The endpoint configuration for a pool.
 */
export interface PoolEndpointConfiguration {
  /**
   * A list of inbound NAT pools that can be used to address specific ports on an individual
   * compute node externally. The maximum number of inbound NAT pools per Batch pool is 5. If the
   * maximum number of inbound NAT pools is exceeded the request fails with HTTP status code 400.
   */
  inboundNATPools: InboundNATPool[];
}

/**
 * The network configuration for a pool.
 */
export interface NetworkConfiguration {
  /**
   * The ARM resource identifier of the virtual network subnet which the compute nodes of the pool
   * will join. This is of the form
   * /subscriptions/{subscription}/resourceGroups/{group}/providers/{provider}/virtualNetworks/{network}/subnets/{subnet}.
   * The virtual network must be in the same region and subscription as the Azure Batch account.
   * The specified subnet should have enough free IP addresses to accommodate the number of nodes
   * in the pool. If the subnet doesn't have enough free IP addresses, the pool will partially
   * allocate compute nodes, and a resize error will occur. For pools created with
   * virtualMachineConfiguration only ARM virtual networks ('Microsoft.Network/virtualNetworks')
   * are supported, but for pools created with cloudServiceConfiguration both ARM and classic
   * virtual networks are supported. For more details, see:
   * https://docs.microsoft.com/en-us/azure/batch/batch-api-basics#virtual-network-vnet-and-firewall-configuration
   */
  subnetId?: string;
  /**
   * The scope of dynamic vnet assignment. Possible values include: 'none', 'job'
   */
  dynamicVNetAssignmentScope?: DynamicVNetAssignmentScope;
  /**
   * The configuration for endpoints on compute nodes in the Batch pool. Pool endpoint
   * configuration is only supported on pools with the virtualMachineConfiguration property.
   */
  endpointConfiguration?: PoolEndpointConfiguration;
}

/**
 * An interface representing PoolSpecification.
 * @summary Specification for creating a new pool.
 */
export interface PoolSpecification {
  /**
   * The display name for the pool. The display name need not be unique and can contain any Unicode
   * characters up to a maximum length of 1024.
   */
  displayName?: string;
  /**
   * The size of the virtual machines in the pool. All virtual machines in a pool are the same
   * size. For information about available sizes of virtual machines in pools, see Choose a VM size
   * for compute nodes in an Azure Batch pool
   * (https://docs.microsoft.com/azure/batch/batch-pool-vm-sizes).
   */
  vmSize: string;
  /**
   * The cloud service configuration for the pool. This property must be specified if the pool
   * needs to be created with Azure PaaS VMs. This property and virtualMachineConfiguration are
   * mutually exclusive and one of the properties must be specified. If neither is specified then
   * the Batch service returns an error; if you are calling the REST API directly, the HTTP status
   * code is 400 (Bad Request). This property cannot be specified if the Batch account was created
   * with its poolAllocationMode property set to 'UserSubscription'.
   */
  cloudServiceConfiguration?: CloudServiceConfiguration;
  /**
   * The virtual machine configuration for the pool. This property must be specified if the pool
   * needs to be created with Azure IaaS VMs. This property and cloudServiceConfiguration are
   * mutually exclusive and one of the properties must be specified. If neither is specified then
   * the Batch service returns an error; if you are calling the REST API directly, the HTTP status
   * code is 400 (Bad Request).
   */
  virtualMachineConfiguration?: VirtualMachineConfiguration;
  /**
   * The maximum number of tasks that can run concurrently on a single compute node in the pool.
   * The default value is 1. The maximum value is the smaller of 4 times the number of cores of the
   * vmSize of the pool or 256.
   */
  maxTasksPerNode?: number;
  /**
   * How tasks are distributed across compute nodes in a pool. If not specified, the default is
   * spread.
   */
  taskSchedulingPolicy?: TaskSchedulingPolicy;
  /**
   * The timeout for allocation of compute nodes to the pool. This timeout applies only to manual
   * scaling; it has no effect when enableAutoScale is set to true. The default value is 15
   * minutes. The minimum value is 5 minutes. If you specify a value less than 5 minutes, the Batch
   * service rejects the request with an error; if you are calling the REST API directly, the HTTP
   * status code is 400 (Bad Request).
   */
  resizeTimeout?: string;
  /**
   * The desired number of dedicated compute nodes in the pool. This property must not be specified
   * if enableAutoScale is set to true. If enableAutoScale is set to false, then you must set
   * either targetDedicatedNodes, targetLowPriorityNodes, or both.
   */
  targetDedicatedNodes?: number;
  /**
   * The desired number of low-priority compute nodes in the pool. This property must not be
   * specified if enableAutoScale is set to true. If enableAutoScale is set to false, then you must
   * set either targetDedicatedNodes, targetLowPriorityNodes, or both.
   */
  targetLowPriorityNodes?: number;
  /**
   * Whether the pool size should automatically adjust over time. If false, at least one of
   * targetDedicateNodes and targetLowPriorityNodes must be specified. If true, the
   * autoScaleFormula element is required. The pool automatically resizes according to the formula.
   * The default value is false.
   */
  enableAutoScale?: boolean;
  /**
   * The formula for the desired number of compute nodes in the pool. This property must not be
   * specified if enableAutoScale is set to false. It is required if enableAutoScale is set to
   * true. The formula is checked for validity before the pool is created. If the formula is not
   * valid, the Batch service rejects the request with detailed error information.
   */
  autoScaleFormula?: string;
  /**
   * The time interval at which to automatically adjust the pool size according to the autoscale
   * formula. The default value is 15 minutes. The minimum and maximum value are 5 minutes and 168
   * hours respectively. If you specify a value less than 5 minutes or greater than 168 hours, the
   * Batch service rejects the request with an invalid property value error; if you are calling the
   * REST API directly, the HTTP status code is 400 (Bad Request).
   */
  autoScaleEvaluationInterval?: string;
  /**
   * Whether the pool permits direct communication between nodes. Enabling inter-node communication
   * limits the maximum size of the pool due to deployment restrictions on the nodes of the pool.
   * This may result in the pool not reaching its desired size. The default value is false.
   */
  enableInterNodeCommunication?: boolean;
  /**
   * The network configuration for the pool.
   */
  networkConfiguration?: NetworkConfiguration;
  /**
   * A task to run on each compute node as it joins the pool. The task runs when the node is added
   * to the pool or when the node is restarted.
   */
  startTask?: StartTask;
  /**
   * A list of certificates to be installed on each compute node in the pool. For Windows compute
   * nodes, the Batch service installs the certificates to the specified certificate store and
   * location. For Linux compute nodes, the certificates are stored in a directory inside the task
   * working directory and an environment variable AZ_BATCH_CERTIFICATES_DIR is supplied to the
   * task to query for this location. For certificates with visibility of 'remoteUser', a 'certs'
   * directory is created in the user's home directory (e.g., /home/{user-name}/certs) and
   * certificates are placed in that directory.
   */
  certificateReferences?: CertificateReference[];
  /**
   * The list of application packages to be installed on each compute node in the pool. Changes to
   * application package references affect all new compute nodes joining the pool, but do not
   * affect compute nodes that are already in the pool until they are rebooted or reimaged. There
   * is a maximum of 10 application package references on any given pool.
   */
  applicationPackageReferences?: ApplicationPackageReference[];
  /**
   * The list of application licenses the Batch service will make available on each compute node in
   * the pool. The list of application licenses must be a subset of available Batch service
   * application licenses. If a license is requested which is not supported, pool creation will
   * fail. The permitted licenses available on the pool are 'maya', 'vray', '3dsmax', 'arnold'. An
   * additional charge applies for each application license added to the pool.
   */
  applicationLicenses?: string[];
  /**
   * The list of user accounts to be created on each node in the pool.
   */
  userAccounts?: UserAccount[];
  /**
   * A list of name-value pairs associated with the pool as metadata. The Batch service does not
   * assign any meaning to metadata; it is solely for the use of user code.
   */
  metadata?: MetadataItem[];
}

/**
 * An interface representing AutoPoolSpecification.
 * @summary Specifies characteristics for a temporary 'auto pool'. The Batch service will create
 * this auto pool when the job is submitted.
 */
export interface AutoPoolSpecification {
  /**
   * A prefix to be added to the unique identifier when a pool is automatically created. The Batch
   * service assigns each auto pool a unique identifier on creation. To distinguish between pools
   * created for different purposes, you can specify this element to add a prefix to the ID that is
   * assigned. The prefix can be up to 20 characters long.
   */
  autoPoolIdPrefix?: string;
  /**
   * The minimum lifetime of created auto pools, and how multiple jobs on a schedule are assigned
   * to pools. Possible values include: 'jobSchedule', 'job'
   */
  poolLifetimeOption: PoolLifetimeOption;
  /**
   * Whether to keep an auto pool alive after its lifetime expires. If false, the Batch service
   * deletes the pool once its lifetime (as determined by the poolLifetimeOption setting) expires;
   * that is, when the job or job schedule completes. If true, the Batch service does not delete
   * the pool automatically. It is up to the user to delete auto pools created with this option.
   */
  keepAlive?: boolean;
  /**
   * The pool specification for the auto pool.
   */
  pool?: PoolSpecification;
}

/**
 * An interface representing PoolInformation.
 * @summary Specifies how a job should be assigned to a pool.
 */
export interface PoolInformation {
  /**
   * The ID of an existing pool. All the tasks of the job will run on the specified pool. You must
   * ensure that the pool referenced by this property exists. If the pool does not exist at the
   * time the Batch service tries to schedule a job, no tasks for the job will run until you create
   * a pool with that id. Note that the Batch service will not reject the job request; it will
   * simply not run tasks until the pool exists. You must specify either the pool ID or the auto
   * pool specification, but not both.
   */
  poolId?: string;
  /**
   * Characteristics for a temporary 'auto pool'. The Batch service will create this auto pool when
   * the job is submitted. If auto pool creation fails, the Batch service moves the job to a
   * completed state, and the pool creation error is set in the job's scheduling error property.
   * The Batch service manages the lifetime (both creation and, unless keepAlive is specified,
   * deletion) of the auto pool. Any user actions that affect the lifetime of the auto pool while
   * the job is active will result in unexpected behavior. You must specify either the pool ID or
   * the auto pool specification, but not both.
   */
  autoPoolSpecification?: AutoPoolSpecification;
}

/**
 * An interface representing JobSpecification.
 * @summary Specifies details of the jobs to be created on a schedule.
 */
export interface JobSpecification {
  /**
   * The priority of jobs created under this schedule. Priority values can range from -1000 to
   * 1000, with -1000 being the lowest priority and 1000 being the highest priority. The default
   * value is 0. This priority is used as the default for all jobs under the job schedule. You can
   * update a job's priority after it has been created using by using the update job API.
   */
  priority?: number;
  /**
   * The display name for jobs created under this schedule. The name need not be unique and can
   * contain any Unicode characters up to a maximum length of 1024.
   */
  displayName?: string;
  /**
   * Whether tasks in the job can define dependencies on each other. The default is false.
   */
  usesTaskDependencies?: boolean;
  /**
   * The action the Batch service should take when all tasks in a job created under this schedule
   * are in the completed state. Note that if a job contains no tasks, then all tasks are
   * considered complete. This option is therefore most commonly used with a Job Manager task; if
   * you want to use automatic job termination without a Job Manager, you should initially set
   * onAllTasksComplete to noaction and update the job properties to set onAllTasksComplete to
   * terminatejob once you have finished adding tasks. The default is noaction. Possible values
   * include: 'noAction', 'terminateJob'
   */
  onAllTasksComplete?: OnAllTasksComplete;
  /**
   * The action the Batch service should take when any task fails in a job created under this
   * schedule. A task is considered to have failed if it have failed if has a failureInfo. A
   * failureInfo is set if the task completes with a non-zero exit code after exhausting its retry
   * count, or if there was an error starting the task, for example due to a resource file download
   * error. The default is noaction. Possible values include: 'noAction',
   * 'performExitOptionsJobAction'
   */
  onTaskFailure?: OnTaskFailure;
  /**
   * The network configuration for the job.
   */
  networkConfiguration?: JobNetworkConfiguration;
  /**
   * The execution constraints for jobs created under this schedule.
   */
  constraints?: JobConstraints;
  /**
   * The details of a Job Manager task to be launched when a job is started under this schedule. If
   * the job does not specify a Job Manager task, the user must explicitly add tasks to the job
   * using the Task API. If the job does specify a Job Manager task, the Batch service creates the
   * Job Manager task when the job is created, and will try to schedule the Job Manager task before
   * scheduling other tasks in the job.
   */
  jobManagerTask?: JobManagerTask;
  /**
   * The Job Preparation task for jobs created under this schedule. If a job has a Job Preparation
   * task, the Batch service will run the Job Preparation task on a compute node before starting
   * any tasks of that job on that compute node.
   */
  jobPreparationTask?: JobPreparationTask;
  /**
   * The Job Release task for jobs created under this schedule. The primary purpose of the Job
   * Release task is to undo changes to compute nodes made by the Job Preparation task. Example
   * activities include deleting local files, or shutting down services that were started as part
   * of job preparation. A Job Release task cannot be specified without also specifying a Job
   * Preparation task for the job. The Batch service runs the Job Release task on the compute nodes
   * that have run the Job Preparation task.
   */
  jobReleaseTask?: JobReleaseTask;
  /**
   * A list of common environment variable settings. These environment variables are set for all
   * tasks in jobs created under this schedule (including the Job Manager, Job Preparation and Job
   * Release tasks). Individual tasks can override an environment setting specified here by
   * specifying the same setting name with a different value.
   */
  commonEnvironmentSettings?: EnvironmentSetting[];
  /**
   * The pool on which the Batch service runs the tasks of jobs created under this schedule.
   */
  poolInfo: PoolInformation;
  /**
   * A list of name-value pairs associated with each job created under this schedule as metadata.
   * The Batch service does not assign any meaning to metadata; it is solely for the use of user
   * code.
   */
  metadata?: MetadataItem[];
}

/**
 * An interface representing RecentJob.
 * @summary Information about the most recent job to run under the job schedule.
 */
export interface RecentJob {
  /**
   * The ID of the job.
   */
  id?: string;
  /**
   * The URL of the job.
   */
  url?: string;
}

/**
 * An interface representing JobScheduleExecutionInformation.
 * @summary Contains information about jobs that have been and will be run under a job schedule.
 */
export interface JobScheduleExecutionInformation {
  /**
   * The next time at which a job will be created under this schedule. This property is meaningful
   * only if the schedule is in the active state when the time comes around. For example, if the
   * schedule is disabled, no job will be created at nextRunTime unless the job is enabled before
   * then.
   */
  nextRunTime?: Date;
  /**
   * Information about the most recent job under the job schedule. This property is present only if
   * the at least one job has run under the schedule.
   */
  recentJob?: RecentJob;
  /**
   * The time at which the schedule ended. This property is set only if the job schedule is in the
   * completed state.
   */
  endTime?: Date;
}

/**
 * An interface representing JobScheduleStatistics.
 * @summary Resource usage statistics for a job schedule.
 */
export interface JobScheduleStatistics {
  /**
   * The URL of the statistics.
   */
  url: string;
  /**
   * The start time of the time range covered by the statistics.
   */
  startTime: Date;
  /**
   * The time at which the statistics were last updated. All statistics are limited to the range
   * between startTime and lastUpdateTime.
   */
  lastUpdateTime: Date;
  /**
   * The total user mode CPU time (summed across all cores and all compute nodes) consumed by all
   * tasks in all jobs created under the schedule.
   */
  userCPUTime: string;
  /**
   * The total kernel mode CPU time (summed across all cores and all compute nodes) consumed by all
   * tasks in all jobs created under the schedule.
   */
  kernelCPUTime: string;
  /**
   * The total wall clock time of all the tasks in all the jobs created under the schedule. The
   * wall clock time is the elapsed time from when the task started running on a compute node to
   * when it finished (or to the last time the statistics were updated, if the task had not
   * finished by then). If a task was retried, this includes the wall clock time of all the task
   * retries.
   */
  wallClockTime: string;
  /**
   * The total number of disk read operations made by all tasks in all jobs created under the
   * schedule.
   */
  readIOps: number;
  /**
   * The total number of disk write operations made by all tasks in all jobs created under the
   * schedule.
   */
  writeIOps: number;
  /**
   * The total gibibytes read from disk by all tasks in all jobs created under the schedule.
   */
  readIOGiB: number;
  /**
   * The total gibibytes written to disk by all tasks in all jobs created under the schedule.
   */
  writeIOGiB: number;
  /**
   * The total number of tasks successfully completed during the given time range in jobs created
   * under the schedule. A task completes successfully if it returns exit code 0.
   */
  numSucceededTasks: number;
  /**
   * The total number of tasks that failed during the given time range in jobs created under the
   * schedule. A task fails if it exhausts its maximum retry count without returning exit code 0.
   */
  numFailedTasks: number;
  /**
   * The total number of retries during the given time range on all tasks in all jobs created under
   * the schedule.
   */
  numTaskRetries: number;
  /**
   * The total wait time of all tasks in all jobs created under the schedule. The wait time for a
   * task is defined as the elapsed time between the creation of the task and the start of task
   * execution. (If the task is retried due to failures, the wait time is the time to the most
   * recent task execution.). This value is only reported in the account lifetime statistics; it is
   * not included in the job statistics.
   */
  waitTime: string;
}

/**
 * An interface representing CloudJobSchedule.
 * @summary A job schedule that allows recurring jobs by specifying when to run jobs and a
 * specification used to create each job.
 */
export interface CloudJobSchedule {
  /**
   * A string that uniquely identifies the schedule within the account.
   */
  id?: string;
  /**
   * The display name for the schedule.
   */
  displayName?: string;
  /**
   * The URL of the job schedule.
   */
  url?: string;
  /**
   * The ETag of the job schedule. This is an opaque string. You can use it to detect whether the
   * job schedule has changed between requests. In particular, you can be pass the ETag with an
   * Update Job Schedule request to specify that your changes should take effect only if nobody
   * else has modified the schedule in the meantime.
   */
  eTag?: string;
  /**
   * The last modified time of the job schedule. This is the last time at which the schedule level
   * data, such as the job specification or recurrence information, changed. It does not factor in
   * job-level changes such as new jobs being created or jobs changing state.
   */
  lastModified?: Date;
  /**
   * The creation time of the job schedule.
   */
  creationTime?: Date;
  /**
   * The current state of the job schedule. Possible values include: 'active', 'completed',
   * 'disabled', 'terminating', 'deleting'
   */
  state?: JobScheduleState;
  /**
   * The time at which the job schedule entered the current state.
   */
  stateTransitionTime?: Date;
  /**
   * The previous state of the job schedule. This property is not present if the job schedule is in
   * its initial active state. Possible values include: 'active', 'completed', 'disabled',
   * 'terminating', 'deleting'
   */
  previousState?: JobScheduleState;
  /**
   * The time at which the job schedule entered its previous state. This property is not present if
   * the job schedule is in its initial active state.
   */
  previousStateTransitionTime?: Date;
  /**
   * The schedule according to which jobs will be created.
   */
  schedule?: Schedule;
  /**
   * The details of the jobs to be created on this schedule.
   */
  jobSpecification?: JobSpecification;
  /**
   * Information about jobs that have been and will be run under this schedule.
   */
  executionInfo?: JobScheduleExecutionInformation;
  /**
   * A list of name-value pairs associated with the schedule as metadata. The Batch service does
   * not assign any meaning to metadata; it is solely for the use of user code.
   */
  metadata?: MetadataItem[];
  /**
   * The lifetime resource usage statistics for the job schedule. The statistics may not be
   * immediately available. The Batch service performs periodic roll-up of statistics. The typical
   * delay is about 30 minutes.
   */
  stats?: JobScheduleStatistics;
}

/**
 * An interface representing JobScheduleAddParameter.
 * @summary A job schedule that allows recurring jobs by specifying when to run jobs and a
 * specification used to create each job.
 */
export interface JobScheduleAddParameter {
  /**
   * A string that uniquely identifies the schedule within the account. The ID can contain any
   * combination of alphanumeric characters including hyphens and underscores, and cannot contain
   * more than 64 characters. The ID is case-preserving and case-insensitive (that is, you may not
   * have two IDs within an account that differ only by case).
   */
  id: string;
  /**
   * The display name for the schedule. The display name need not be unique and can contain any
   * Unicode characters up to a maximum length of 1024.
   */
  displayName?: string;
  /**
   * The schedule according to which jobs will be created.
   */
  schedule: Schedule;
  /**
   * The details of the jobs to be created on this schedule.
   */
  jobSpecification: JobSpecification;
  /**
   * A list of name-value pairs associated with the schedule as metadata. The Batch service does
   * not assign any meaning to metadata; it is solely for the use of user code.
   */
  metadata?: MetadataItem[];
}

/**
 * An interface representing JobSchedulingError.
 * @summary An error encountered by the Batch service when scheduling a job.
 */
export interface JobSchedulingError {
  /**
   * The category of the job scheduling error. Possible values include: 'userError', 'serverError'
   */
  category: ErrorCategory;
  /**
   * An identifier for the job scheduling error. Codes are invariant and are intended to be
   * consumed programmatically.
   */
  code?: string;
  /**
   * A message describing the job scheduling error, intended to be suitable for display in a user
   * interface.
   */
  message?: string;
  /**
   * A list of additional error details related to the scheduling error.
   */
  details?: NameValuePair[];
}

/**
 * An interface representing JobExecutionInformation.
 * @summary Contains information about the execution of a job in the Azure Batch service.
 */
export interface JobExecutionInformation {
  /**
   * The start time of the job. This is the time at which the job was created.
   */
  startTime: Date;
  /**
   * The completion time of the job. This property is set only if the job is in the completed
   * state.
   */
  endTime?: Date;
  /**
   * The ID of the pool to which this job is assigned. This element contains the actual pool where
   * the job is assigned. When you get job details from the service, they also contain a poolInfo
   * element, which contains the pool configuration data from when the job was added or updated.
   * That poolInfo element may also contain a poolId element. If it does, the two IDs are the same.
   * If it does not, it means the job ran on an auto pool, and this property contains the ID of
   * that auto pool.
   */
  poolId?: string;
  /**
   * Details of any error encountered by the service in starting the job. This property is not set
   * if there was no error starting the job.
   */
  schedulingError?: JobSchedulingError;
  /**
   * A string describing the reason the job ended. This property is set only if the job is in the
   * completed state. If the Batch service terminates the job, it sets the reason as follows:
   * JMComplete - the Job Manager task completed, and killJobOnCompletion was set to true.
   * MaxWallClockTimeExpiry - the job reached its maxWallClockTime constraint. TerminateJobSchedule
   * - the job ran as part of a schedule, and the schedule terminated. AllTasksComplete - the job's
   * onAllTasksComplete attribute is set to terminatejob, and all tasks in the job are complete.
   * TaskFailed - the job's onTaskFailure attribute is set to performExitOptionsJobAction, and a
   * task in the job failed with an exit condition that specified a jobAction of terminatejob. Any
   * other string is a user-defined reason specified in a call to the 'Terminate a job' operation.
   */
  terminateReason?: string;
}

/**
 * An interface representing CloudJob.
 * @summary An Azure Batch job.
 */
export interface CloudJob {
  /**
   * A string that uniquely identifies the job within the account. The ID is case-preserving and
   * case-insensitive (that is, you may not have two IDs within an account that differ only by
   * case).
   */
  id?: string;
  /**
   * The display name for the job.
   */
  displayName?: string;
  /**
   * Whether tasks in the job can define dependencies on each other. The default is false.
   */
  usesTaskDependencies?: boolean;
  /**
   * The URL of the job.
   */
  url?: string;
  /**
   * The ETag of the job. This is an opaque string. You can use it to detect whether the job has
   * changed between requests. In particular, you can be pass the ETag when updating a job to
   * specify that your changes should take effect only if nobody else has modified the job in the
   * meantime.
   */
  eTag?: string;
  /**
   * The last modified time of the job. This is the last time at which the job level data, such as
   * the job state or priority, changed. It does not factor in task-level changes such as adding
   * new tasks or tasks changing state.
   */
  lastModified?: Date;
  /**
   * The creation time of the job.
   */
  creationTime?: Date;
  /**
   * The current state of the job. Possible values include: 'active', 'disabling', 'disabled',
   * 'enabling', 'terminating', 'completed', 'deleting'
   */
  state?: JobState;
  /**
   * The time at which the job entered its current state.
   */
  stateTransitionTime?: Date;
  /**
   * The previous state of the job. This property is not set if the job is in its initial Active
   * state. Possible values include: 'active', 'disabling', 'disabled', 'enabling', 'terminating',
   * 'completed', 'deleting'
   */
  previousState?: JobState;
  /**
   * The time at which the job entered its previous state. This property is not set if the job is
   * in its initial Active state.
   */
  previousStateTransitionTime?: Date;
  /**
   * The priority of the job. Priority values can range from -1000 to 1000, with -1000 being the
   * lowest priority and 1000 being the highest priority. The default value is 0.
   */
  priority?: number;
  /**
   * The execution constraints for the job.
   */
  constraints?: JobConstraints;
  /**
   * Details of a Job Manager task to be launched when the job is started.
   */
  jobManagerTask?: JobManagerTask;
  /**
   * The Job Preparation task. The Job Preparation task is a special task run on each node before
   * any other task of the job.
   */
  jobPreparationTask?: JobPreparationTask;
  /**
   * The Job Release task. The Job Release task is a special task run at the end of the job on each
   * node that has run any other task of the job.
   */
  jobReleaseTask?: JobReleaseTask;
  /**
   * The list of common environment variable settings. These environment variables are set for all
   * tasks in the job (including the Job Manager, Job Preparation and Job Release tasks).
   * Individual tasks can override an environment setting specified here by specifying the same
   * setting name with a different value.
   */
  commonEnvironmentSettings?: EnvironmentSetting[];
  /**
   * The pool settings associated with the job.
   */
  poolInfo?: PoolInformation;
  /**
   * The action the Batch service should take when all tasks in the job are in the completed state.
   * The default is noaction. Possible values include: 'noAction', 'terminateJob'
   */
  onAllTasksComplete?: OnAllTasksComplete;
  /**
   * The action the Batch service should take when any task in the job fails. A task is considered
   * to have failed if has a failureInfo. A failureInfo is set if the task completes with a
   * non-zero exit code after exhausting its retry count, or if there was an error starting the
   * task, for example due to a resource file download error. The default is noaction. Possible
   * values include: 'noAction', 'performExitOptionsJobAction'
   */
  onTaskFailure?: OnTaskFailure;
  /**
   * The network configuration for the job.
   */
  networkConfiguration?: JobNetworkConfiguration;
  /**
   * A list of name-value pairs associated with the job as metadata. The Batch service does not
   * assign any meaning to metadata; it is solely for the use of user code.
   */
  metadata?: MetadataItem[];
  /**
   * The execution information for the job.
   */
  executionInfo?: JobExecutionInformation;
  /**
   * Resource usage statistics for the entire lifetime of the job. This property is populated only
   * if the CloudJob was retrieved with an expand clause including the 'stats' attribute; otherwise
   * it is null. The statistics may not be immediately available. The Batch service performs
   * periodic roll-up of statistics. The typical delay is about 30 minutes.
   */
  stats?: JobStatistics;
}

/**
 * An interface representing JobAddParameter.
 * @summary An Azure Batch job to add.
 */
export interface JobAddParameter {
  /**
   * A string that uniquely identifies the job within the account. The ID can contain any
   * combination of alphanumeric characters including hyphens and underscores, and cannot contain
   * more than 64 characters. The ID is case-preserving and case-insensitive (that is, you may not
   * have two IDs within an account that differ only by case).
   */
  id: string;
  /**
   * The display name for the job. The display name need not be unique and can contain any Unicode
   * characters up to a maximum length of 1024.
   */
  displayName?: string;
  /**
   * The priority of the job. Priority values can range from -1000 to 1000, with -1000 being the
   * lowest priority and 1000 being the highest priority. The default value is 0.
   */
  priority?: number;
  /**
   * The execution constraints for the job.
   */
  constraints?: JobConstraints;
  /**
   * Details of a Job Manager task to be launched when the job is started. If the job does not
   * specify a Job Manager task, the user must explicitly add tasks to the job. If the job does
   * specify a Job Manager task, the Batch service creates the Job Manager task when the job is
   * created, and will try to schedule the Job Manager task before scheduling other tasks in the
   * job. The Job Manager task's typical purpose is to control and/or monitor job execution, for
   * example by deciding what additional tasks to run, determining when the work is complete, etc.
   * (However, a Job Manager task is not restricted to these activities - it is a fully-fledged
   * task in the system and perform whatever actions are required for the job.) For example, a Job
   * Manager task might download a file specified as a parameter, analyze the contents of that file
   * and submit additional tasks based on those contents.
   */
  jobManagerTask?: JobManagerTask;
  /**
   * The Job Preparation task. If a job has a Job Preparation task, the Batch service will run the
   * Job Preparation task on a compute node before starting any tasks of that job on that compute
   * node.
   */
  jobPreparationTask?: JobPreparationTask;
  /**
   * The Job Release task. A Job Release task cannot be specified without also specifying a Job
   * Preparation task for the job. The Batch service runs the Job Release task on the compute nodes
   * that have run the Job Preparation task. The primary purpose of the Job Release task is to undo
   * changes to compute nodes made by the Job Preparation task. Example activities include deleting
   * local files, or shutting down services that were started as part of job preparation.
   */
  jobReleaseTask?: JobReleaseTask;
  /**
   * The list of common environment variable settings. These environment variables are set for all
   * tasks in the job (including the Job Manager, Job Preparation and Job Release tasks).
   * Individual tasks can override an environment setting specified here by specifying the same
   * setting name with a different value.
   */
  commonEnvironmentSettings?: EnvironmentSetting[];
  /**
   * The pool on which the Batch service runs the job's tasks.
   */
  poolInfo: PoolInformation;
  /**
   * The action the Batch service should take when all tasks in the job are in the completed state.
   * Note that if a job contains no tasks, then all tasks are considered complete. This option is
   * therefore most commonly used with a Job Manager task; if you want to use automatic job
   * termination without a Job Manager, you should initially set onAllTasksComplete to noaction and
   * update the job properties to set onAllTasksComplete to terminatejob once you have finished
   * adding tasks. The default is noaction. Possible values include: 'noAction', 'terminateJob'
   */
  onAllTasksComplete?: OnAllTasksComplete;
  /**
   * The action the Batch service should take when any task in the job fails. A task is considered
   * to have failed if has a failureInfo. A failureInfo is set if the task completes with a
   * non-zero exit code after exhausting its retry count, or if there was an error starting the
   * task, for example due to a resource file download error. The default is noaction. Possible
   * values include: 'noAction', 'performExitOptionsJobAction'
   */
  onTaskFailure?: OnTaskFailure;
  /**
   * A list of name-value pairs associated with the job as metadata. The Batch service does not
   * assign any meaning to metadata; it is solely for the use of user code.
   */
  metadata?: MetadataItem[];
  /**
   * Whether tasks in the job can define dependencies on each other. The default is false.
   */
  usesTaskDependencies?: boolean;
  /**
   * The network configuration for the job.
   */
  networkConfiguration?: JobNetworkConfiguration;
}

/**
 * An interface representing TaskContainerExecutionInformation.
 * @summary Contains information about the container which a task is executing.
 */
export interface TaskContainerExecutionInformation {
  /**
   * The ID of the container.
   */
  containerId?: string;
  /**
   * The state of the container. This is the state of the container according to the Docker
   * service. It is equivalent to the status field returned by "docker inspect".
   */
  state?: string;
  /**
   * Detailed error information about the container. This is the detailed error string from the
   * Docker service, if available. It is equivalent to the error field returned by "docker
   * inspect".
   */
  error?: string;
}

/**
 * An interface representing TaskFailureInformation.
 * @summary Information about a task failure.
 */
export interface TaskFailureInformation {
  /**
   * The category of the task error. Possible values include: 'userError', 'serverError'
   */
  category: ErrorCategory;
  /**
   * An identifier for the task error. Codes are invariant and are intended to be consumed
   * programmatically.
   */
  code?: string;
  /**
   * A message describing the task error, intended to be suitable for display in a user interface.
   */
  message?: string;
  /**
   * A list of additional details related to the error.
   */
  details?: NameValuePair[];
}

/**
 * An interface representing JobPreparationTaskExecutionInformation.
 * @summary Contains information about the execution of a Job Preparation task on a compute node.
 */
export interface JobPreparationTaskExecutionInformation {
  /**
   * The time at which the task started running. If the task has been restarted or retried, this is
   * the most recent time at which the task started running.
   */
  startTime: Date;
  /**
   * The time at which the Job Preparation task completed. This property is set only if the task is
   * in the Completed state.
   */
  endTime?: Date;
  /**
   * The current state of the Job Preparation task on the compute node. Possible values include:
   * 'running', 'completed'
   */
  state: JobPreparationTaskState;
  /**
   * The root directory of the Job Preparation task on the compute node. You can use this path to
   * retrieve files created by the task, such as log files.
   */
  taskRootDirectory?: string;
  /**
   * The URL to the root directory of the Job Preparation task on the compute node.
   */
  taskRootDirectoryUrl?: string;
  /**
   * The exit code of the program specified on the task command line. This parameter is returned
   * only if the task is in the completed state. The exit code for a process reflects the specific
   * convention implemented by the application developer for that process. If you use the exit code
   * value to make decisions in your code, be sure that you know the exit code convention used by
   * the application process. Note that the exit code may also be generated by the compute node
   * operating system, such as when a process is forcibly terminated.
   */
  exitCode?: number;
  /**
   * Information about the container under which the task is executing. This property is set only
   * if the task runs in a container context.
   */
  containerInfo?: TaskContainerExecutionInformation;
  /**
   * Information describing the task failure, if any. This property is set only if the task is in
   * the completed state and encountered a failure.
   */
  failureInfo?: TaskFailureInformation;
  /**
   * The number of times the task has been retried by the Batch service. Task application failures
   * (non-zero exit code) are retried, pre-processing errors (the task could not be run) and file
   * upload errors are not retried. The Batch service will retry the task up to the limit specified
   * by the constraints. Task application failures (non-zero exit code) are retried, pre-processing
   * errors (the task could not be run) and file upload errors are not retried. The Batch service
   * will retry the task up to the limit specified by the constraints.
   */
  retryCount: number;
  /**
   * The most recent time at which a retry of the Job Preparation task started running. This
   * property is set only if the task was retried (i.e. retryCount is nonzero). If present, this is
   * typically the same as startTime, but may be different if the task has been restarted for
   * reasons other than retry; for example, if the compute node was rebooted during a retry, then
   * the startTime is updated but the lastRetryTime is not.
   */
  lastRetryTime?: Date;
  /**
   * The result of the task execution. If the value is 'failed', then the details of the failure
   * can be found in the failureInfo property. Possible values include: 'success', 'failure'
   */
  result?: TaskExecutionResult;
}

/**
 * An interface representing JobReleaseTaskExecutionInformation.
 * @summary Contains information about the execution of a Job Release task on a compute node.
 */
export interface JobReleaseTaskExecutionInformation {
  /**
   * The time at which the task started running. If the task has been restarted or retried, this is
   * the most recent time at which the task started running.
   */
  startTime: Date;
  /**
   * The time at which the Job Release task completed. This property is set only if the task is in
   * the Completed state.
   */
  endTime?: Date;
  /**
   * The current state of the Job Release task on the compute node. Possible values include:
   * 'running', 'completed'
   */
  state: JobReleaseTaskState;
  /**
   * The root directory of the Job Release task on the compute node. You can use this path to
   * retrieve files created by the task, such as log files.
   */
  taskRootDirectory?: string;
  /**
   * The URL to the root directory of the Job Release task on the compute node.
   */
  taskRootDirectoryUrl?: string;
  /**
   * The exit code of the program specified on the task command line. This parameter is returned
   * only if the task is in the completed state. The exit code for a process reflects the specific
   * convention implemented by the application developer for that process. If you use the exit code
   * value to make decisions in your code, be sure that you know the exit code convention used by
   * the application process. Note that the exit code may also be generated by the compute node
   * operating system, such as when a process is forcibly terminated.
   */
  exitCode?: number;
  /**
   * Information about the container under which the task is executing. This property is set only
   * if the task runs in a container context.
   */
  containerInfo?: TaskContainerExecutionInformation;
  /**
   * Information describing the task failure, if any. This property is set only if the task is in
   * the completed state and encountered a failure.
   */
  failureInfo?: TaskFailureInformation;
  /**
   * The result of the task execution. If the value is 'failed', then the details of the failure
   * can be found in the failureInfo property. Possible values include: 'success', 'failure'
   */
  result?: TaskExecutionResult;
}

/**
 * An interface representing JobPreparationAndReleaseTaskExecutionInformation.
 * @summary The status of the Job Preparation and Job Release tasks on a compute node.
 */
export interface JobPreparationAndReleaseTaskExecutionInformation {
  /**
   * The ID of the pool containing the compute node to which this entry refers.
   */
  poolId?: string;
  /**
   * The ID of the compute node to which this entry refers.
   */
  nodeId?: string;
  /**
   * The URL of the compute node to which this entry refers.
   */
  nodeUrl?: string;
  /**
   * Information about the execution status of the Job Preparation task on this compute node.
   */
  jobPreparationTaskExecutionInfo?: JobPreparationTaskExecutionInformation;
  /**
   * Information about the execution status of the Job Release task on this compute node. This
   * property is set only if the Job Release task has run on the node.
   */
  jobReleaseTaskExecutionInfo?: JobReleaseTaskExecutionInformation;
}

/**
 * An interface representing TaskCounts.
 * @summary The task counts for a job.
 */
export interface TaskCounts {
  /**
   * The number of tasks in the active state.
   */
  active: number;
  /**
   * The number of tasks in the running or preparing state.
   */
  running: number;
  /**
   * The number of tasks in the completed state.
   */
  completed: number;
  /**
   * The number of tasks which succeeded. A task succeeds if its result (found in the executionInfo
   * property) is 'success'.
   */
  succeeded: number;
  /**
   * The number of tasks which failed. A task fails if its result (found in the executionInfo
   * property) is 'failure'.
   */
  failed: number;
}

/**
 * An interface representing AutoScaleRunError.
 * @summary An error that occurred when executing or evaluating a pool autoscale formula.
 */
export interface AutoScaleRunError {
  /**
   * An identifier for the autoscale error. Codes are invariant and are intended to be consumed
   * programmatically.
   */
  code?: string;
  /**
   * A message describing the autoscale error, intended to be suitable for display in a user
   * interface.
   */
  message?: string;
  /**
   * A list of additional error details related to the autoscale error.
   */
  values?: NameValuePair[];
}

/**
 * An interface representing AutoScaleRun.
 * @summary The results and errors from an execution of a pool autoscale formula.
 */
export interface AutoScaleRun {
  /**
   * The time at which the autoscale formula was last evaluated.
   */
  timestamp: Date;
  /**
   * The final values of all variables used in the evaluation of the autoscale formula. Each
   * variable value is returned in the form $variable=value, and variables are separated by
   * semicolons.
   */
  results?: string;
  /**
   * Details of the error encountered evaluating the autoscale formula on the pool, if the
   * evaluation was unsuccessful.
   */
  error?: AutoScaleRunError;
}

/**
 * An interface representing ResizeError.
 * @summary An error that occurred when resizing a pool.
 */
export interface ResizeError {
  /**
   * An identifier for the pool resize error. Codes are invariant and are intended to be consumed
   * programmatically.
   */
  code?: string;
  /**
   * A message describing the pool resize error, intended to be suitable for display in a user
   * interface.
   */
  message?: string;
  /**
   * A list of additional error details related to the pool resize error.
   */
  values?: NameValuePair[];
}

/**
 * An interface representing CloudPool.
 * @summary A pool in the Azure Batch service.
 */
export interface CloudPool {
  /**
   * A string that uniquely identifies the pool within the account. The ID can contain any
   * combination of alphanumeric characters including hyphens and underscores, and cannot contain
   * more than 64 characters. The ID is case-preserving and case-insensitive (that is, you may not
   * have two IDs within an account that differ only by case).
   */
  id?: string;
  /**
   * The display name for the pool. The display name need not be unique and can contain any Unicode
   * characters up to a maximum length of 1024.
   */
  displayName?: string;
  /**
   * The URL of the pool.
   */
  url?: string;
  /**
   * The ETag of the pool. This is an opaque string. You can use it to detect whether the pool has
   * changed between requests. In particular, you can be pass the ETag when updating a pool to
   * specify that your changes should take effect only if nobody else has modified the pool in the
   * meantime.
   */
  eTag?: string;
  /**
   * The last modified time of the pool. This is the last time at which the pool level data, such
   * as the targetDedicatedNodes or enableAutoscale settings, changed. It does not factor in
   * node-level changes such as a compute node changing state.
   */
  lastModified?: Date;
  /**
   * The creation time of the pool.
   */
  creationTime?: Date;
  /**
   * The current state of the pool. Possible values include: 'active', 'deleting'
   */
  state?: PoolState;
  /**
   * The time at which the pool entered its current state.
   */
  stateTransitionTime?: Date;
  /**
   * Whether the pool is resizing. Possible values include: 'steady', 'resizing', 'stopping'
   */
  allocationState?: AllocationState;
  /**
   * The time at which the pool entered its current allocation state.
   */
  allocationStateTransitionTime?: Date;
  /**
   * The size of virtual machines in the pool. All virtual machines in a pool are the same size.
   * For information about available sizes of virtual machines in pools, see Choose a VM size for
   * compute nodes in an Azure Batch pool
   * (https://docs.microsoft.com/azure/batch/batch-pool-vm-sizes).
   */
  vmSize?: string;
  /**
   * The cloud service configuration for the pool. This property and virtualMachineConfiguration
   * are mutually exclusive and one of the properties must be specified. This property cannot be
   * specified if the Batch account was created with its poolAllocationMode property set to
   * 'UserSubscription'.
   */
  cloudServiceConfiguration?: CloudServiceConfiguration;
  /**
   * The virtual machine configuration for the pool. This property and cloudServiceConfiguration
   * are mutually exclusive and one of the properties must be specified.
   */
  virtualMachineConfiguration?: VirtualMachineConfiguration;
  /**
   * The timeout for allocation of compute nodes to the pool. This is the timeout for the most
   * recent resize operation. (The initial sizing when the pool is created counts as a resize.) The
   * default value is 15 minutes.
   */
  resizeTimeout?: string;
  /**
   * A list of errors encountered while performing the last resize on the pool. This property is
   * set only if one or more errors occurred during the last pool resize, and only when the pool
   * allocationState is Steady.
   */
  resizeErrors?: ResizeError[];
  /**
   * The number of dedicated compute nodes currently in the pool.
   */
  currentDedicatedNodes?: number;
  /**
   * The number of low-priority compute nodes currently in the pool. Low-priority compute nodes
   * which have been preempted are included in this count.
   */
  currentLowPriorityNodes?: number;
  /**
   * The desired number of dedicated compute nodes in the pool.
   */
  targetDedicatedNodes?: number;
  /**
   * The desired number of low-priority compute nodes in the pool.
   */
  targetLowPriorityNodes?: number;
  /**
   * Whether the pool size should automatically adjust over time. If false, at least one of
   * targetDedicateNodes and targetLowPriorityNodes must be specified. If true, the
   * autoScaleFormula property is required and the pool automatically resizes according to the
   * formula. The default value is false.
   */
  enableAutoScale?: boolean;
  /**
   * A formula for the desired number of compute nodes in the pool. This property is set only if
   * the pool automatically scales, i.e. enableAutoScale is true.
   */
  autoScaleFormula?: string;
  /**
   * The time interval at which to automatically adjust the pool size according to the autoscale
   * formula. This property is set only if the pool automatically scales, i.e. enableAutoScale is
   * true.
   */
  autoScaleEvaluationInterval?: string;
  /**
   * The results and errors from the last execution of the autoscale formula. This property is set
   * only if the pool automatically scales, i.e. enableAutoScale is true.
   */
  autoScaleRun?: AutoScaleRun;
  /**
   * Whether the pool permits direct communication between nodes. This imposes restrictions on
   * which nodes can be assigned to the pool. Specifying this value can reduce the chance of the
   * requested number of nodes to be allocated in the pool.
   */
  enableInterNodeCommunication?: boolean;
  /**
   * The network configuration for the pool.
   */
  networkConfiguration?: NetworkConfiguration;
  /**
   * A task specified to run on each compute node as it joins the pool.
   */
  startTask?: StartTask;
  /**
   * The list of certificates to be installed on each compute node in the pool. For Windows compute
   * nodes, the Batch service installs the certificates to the specified certificate store and
   * location. For Linux compute nodes, the certificates are stored in a directory inside the task
   * working directory and an environment variable AZ_BATCH_CERTIFICATES_DIR is supplied to the
   * task to query for this location. For certificates with visibility of 'remoteUser', a 'certs'
   * directory is created in the user's home directory (e.g., /home/{user-name}/certs) and
   * certificates are placed in that directory.
   */
  certificateReferences?: CertificateReference[];
  /**
   * The list of application packages to be installed on each compute node in the pool. Changes to
   * application package references affect all new compute nodes joining the pool, but do not
   * affect compute nodes that are already in the pool until they are rebooted or reimaged. There
   * is a maximum of 10 application package references on any given pool.
   */
  applicationPackageReferences?: ApplicationPackageReference[];
  /**
   * The list of application licenses the Batch service will make available on each compute node in
   * the pool. The list of application licenses must be a subset of available Batch service
   * application licenses. If a license is requested which is not supported, pool creation will
   * fail.
   */
  applicationLicenses?: string[];
  /**
   * The maximum number of tasks that can run concurrently on a single compute node in the pool.
   * The default value is 1. The maximum value is the smaller of 4 times the number of cores of the
   * vmSize of the pool or 256.
   */
  maxTasksPerNode?: number;
  /**
   * How tasks are distributed across compute nodes in a pool. If not specified, the default is
   * spread.
   */
  taskSchedulingPolicy?: TaskSchedulingPolicy;
  /**
   * The list of user accounts to be created on each node in the pool.
   */
  userAccounts?: UserAccount[];
  /**
   * A list of name-value pairs associated with the pool as metadata.
   */
  metadata?: MetadataItem[];
  /**
   * Utilization and resource usage statistics for the entire lifetime of the pool. This property
   * is populated only if the CloudPool was retrieved with an expand clause including the 'stats'
   * attribute; otherwise it is null. The statistics may not be immediately available. The Batch
   * service performs periodic roll-up of statistics. The typical delay is about 30 minutes.
   */
  stats?: PoolStatistics;
}

/**
 * An interface representing PoolAddParameter.
 * @summary A pool in the Azure Batch service to add.
 */
export interface PoolAddParameter {
  /**
   * A string that uniquely identifies the pool within the account. The ID can contain any
   * combination of alphanumeric characters including hyphens and underscores, and cannot contain
   * more than 64 characters. The ID is case-preserving and case-insensitive (that is, you may not
   * have two pool IDs within an account that differ only by case).
   */
  id: string;
  /**
   * The display name for the pool. The display name need not be unique and can contain any Unicode
   * characters up to a maximum length of 1024.
   */
  displayName?: string;
  /**
   * The size of virtual machines in the pool. All virtual machines in a pool are the same size.
   * For information about available sizes of virtual machines for Cloud Services pools (pools
   * created with cloudServiceConfiguration), see Sizes for Cloud Services
   * (https://azure.microsoft.com/documentation/articles/cloud-services-sizes-specs/). Batch
   * supports all Cloud Services VM sizes except ExtraSmall, A1V2 and A2V2. For information about
   * available VM sizes for pools using images from the Virtual Machines Marketplace (pools created
   * with virtualMachineConfiguration) see Sizes for Virtual Machines (Linux)
   * (https://azure.microsoft.com/documentation/articles/virtual-machines-linux-sizes/) or Sizes
   * for Virtual Machines (Windows)
   * (https://azure.microsoft.com/documentation/articles/virtual-machines-windows-sizes/). Batch
   * supports all Azure VM sizes except STANDARD_A0 and those with premium storage (STANDARD_GS,
   * STANDARD_DS, and STANDARD_DSV2 series).
   */
  vmSize: string;
  /**
   * The cloud service configuration for the pool. This property and virtualMachineConfiguration
   * are mutually exclusive and one of the properties must be specified. This property cannot be
   * specified if the Batch account was created with its poolAllocationMode property set to
   * 'UserSubscription'.
   */
  cloudServiceConfiguration?: CloudServiceConfiguration;
  /**
   * The virtual machine configuration for the pool. This property and cloudServiceConfiguration
   * are mutually exclusive and one of the properties must be specified.
   */
  virtualMachineConfiguration?: VirtualMachineConfiguration;
  /**
   * The timeout for allocation of compute nodes to the pool. This timeout applies only to manual
   * scaling; it has no effect when enableAutoScale is set to true. The default value is 15
   * minutes. The minimum value is 5 minutes. If you specify a value less than 5 minutes, the Batch
   * service returns an error; if you are calling the REST API directly, the HTTP status code is
   * 400 (Bad Request).
   */
  resizeTimeout?: string;
  /**
   * The desired number of dedicated compute nodes in the pool. This property must not be specified
   * if enableAutoScale is set to true. If enableAutoScale is set to false, then you must set
   * either targetDedicatedNodes, targetLowPriorityNodes, or both.
   */
  targetDedicatedNodes?: number;
  /**
   * The desired number of low-priority compute nodes in the pool. This property must not be
   * specified if enableAutoScale is set to true. If enableAutoScale is set to false, then you must
   * set either targetDedicatedNodes, targetLowPriorityNodes, or both.
   */
  targetLowPriorityNodes?: number;
  /**
   * Whether the pool size should automatically adjust over time. If false, at least one of
   * targetDedicateNodes and targetLowPriorityNodes must be specified. If true, the
   * autoScaleFormula property is required and the pool automatically resizes according to the
   * formula. The default value is false.
   */
  enableAutoScale?: boolean;
  /**
   * A formula for the desired number of compute nodes in the pool. This property must not be
   * specified if enableAutoScale is set to false. It is required if enableAutoScale is set to
   * true. The formula is checked for validity before the pool is created. If the formula is not
   * valid, the Batch service rejects the request with detailed error information. For more
   * information about specifying this formula, see 'Automatically scale compute nodes in an Azure
   * Batch pool' (https://azure.microsoft.com/documentation/articles/batch-automatic-scaling/).
   */
  autoScaleFormula?: string;
  /**
   * The time interval at which to automatically adjust the pool size according to the autoscale
   * formula. The default value is 15 minutes. The minimum and maximum value are 5 minutes and 168
   * hours respectively. If you specify a value less than 5 minutes or greater than 168 hours, the
   * Batch service returns an error; if you are calling the REST API directly, the HTTP status code
   * is 400 (Bad Request).
   */
  autoScaleEvaluationInterval?: string;
  /**
   * Whether the pool permits direct communication between nodes. Enabling inter-node communication
   * limits the maximum size of the pool due to deployment restrictions on the nodes of the pool.
   * This may result in the pool not reaching its desired size. The default value is false.
   */
  enableInterNodeCommunication?: boolean;
  /**
   * The network configuration for the pool.
   */
  networkConfiguration?: NetworkConfiguration;
  /**
   * A task specified to run on each compute node as it joins the pool. The task runs when the node
   * is added to the pool or when the node is restarted.
   */
  startTask?: StartTask;
  /**
   * The list of certificates to be installed on each compute node in the pool. For Windows compute
   * nodes, the Batch service installs the certificates to the specified certificate store and
   * location. For Linux compute nodes, the certificates are stored in a directory inside the task
   * working directory and an environment variable AZ_BATCH_CERTIFICATES_DIR is supplied to the
   * task to query for this location. For certificates with visibility of 'remoteUser', a 'certs'
   * directory is created in the user's home directory (e.g., /home/{user-name}/certs) and
   * certificates are placed in that directory.
   */
  certificateReferences?: CertificateReference[];
  /**
   * The list of application packages to be installed on each compute node in the pool. Changes to
   * application package references affect all new compute nodes joining the pool, but do not
   * affect compute nodes that are already in the pool until they are rebooted or reimaged. There
   * is a maximum of 10 application package references on any given pool.
   */
  applicationPackageReferences?: ApplicationPackageReference[];
  /**
   * The list of application licenses the Batch service will make available on each compute node in
   * the pool. The list of application licenses must be a subset of available Batch service
   * application licenses. If a license is requested which is not supported, pool creation will
   * fail.
   */
  applicationLicenses?: string[];
  /**
   * The maximum number of tasks that can run concurrently on a single compute node in the pool.
   * The default value is 1. The maximum value is the smaller of 4 times the number of cores of the
   * vmSize of the pool or 256.
   */
  maxTasksPerNode?: number;
  /**
   * How tasks are distributed across compute nodes in a pool. If not specified, the default is
   * spread.
   */
  taskSchedulingPolicy?: TaskSchedulingPolicy;
  /**
   * The list of user accounts to be created on each node in the pool.
   */
  userAccounts?: UserAccount[];
  /**
   * A list of name-value pairs associated with the pool as metadata. The Batch service does not
   * assign any meaning to metadata; it is solely for the use of user code.
   */
  metadata?: MetadataItem[];
}

/**
 * An interface representing AffinityInformation.
 * @summary A locality hint that can be used by the Batch service to select a compute node on which
 * to start a task.
 */
export interface AffinityInformation {
  /**
   * An opaque string representing the location of a compute node or a task that has run
   * previously. You can pass the affinityId of a compute node to indicate that this task needs to
   * run on that compute node. Note that this is just a soft affinity. If the target node is busy
   * or unavailable at the time the task is scheduled, then the task will be scheduled elsewhere.
   */
  affinityId: string;
}

/**
 * An interface representing TaskExecutionInformation.
 * @summary Information about the execution of a task.
 */
export interface TaskExecutionInformation {
  /**
   * The time at which the task started running. 'Running' corresponds to the running state, so if
   * the task specifies resource files or application packages, then the start time reflects the
   * time at which the task started downloading or deploying these. If the task has been restarted
   * or retried, this is the most recent time at which the task started running. This property is
   * present only for tasks that are in the running or completed state.
   */
  startTime?: Date;
  /**
   * The time at which the task completed. This property is set only if the task is in the
   * Completed state.
   */
  endTime?: Date;
  /**
   * The exit code of the program specified on the task command line. This property is set only if
   * the task is in the completed state. In general, the exit code for a process reflects the
   * specific convention implemented by the application developer for that process. If you use the
   * exit code value to make decisions in your code, be sure that you know the exit code convention
   * used by the application process. However, if the Batch service terminates the task (due to
   * timeout, or user termination via the API) you may see an operating system-defined exit code.
   */
  exitCode?: number;
  /**
   * Information about the container under which the task is executing. This property is set only
   * if the task runs in a container context.
   */
  containerInfo?: TaskContainerExecutionInformation;
  /**
   * Information describing the task failure, if any. This property is set only if the task is in
   * the completed state and encountered a failure.
   */
  failureInfo?: TaskFailureInformation;
  /**
   * The number of times the task has been retried by the Batch service. Task application failures
   * (non-zero exit code) are retried, pre-processing errors (the task could not be run) and file
   * upload errors are not retried. The Batch service will retry the task up to the limit specified
   * by the constraints.
   */
  retryCount: number;
  /**
   * The most recent time at which a retry of the task started running. This element is present
   * only if the task was retried (i.e. retryCount is nonzero). If present, this is typically the
   * same as startTime, but may be different if the task has been restarted for reasons other than
   * retry; for example, if the compute node was rebooted during a retry, then the startTime is
   * updated but the lastRetryTime is not.
   */
  lastRetryTime?: Date;
  /**
   * The number of times the task has been requeued by the Batch service as the result of a user
   * request. When the user removes nodes from a pool (by resizing/shrinking the pool) or when the
   * job is being disabled, the user can specify that running tasks on the nodes be requeued for
   * execution. This count tracks how many times the task has been requeued for these reasons.
   */
  requeueCount: number;
  /**
   * The most recent time at which the task has been requeued by the Batch service as the result of
   * a user request. This property is set only if the requeueCount is nonzero.
   */
  lastRequeueTime?: Date;
  /**
   * The result of the task execution. If the value is 'failed', then the details of the failure
   * can be found in the failureInfo property. Possible values include: 'success', 'failure'
   */
  result?: TaskExecutionResult;
}

/**
 * An interface representing ComputeNodeInformation.
 * @summary Information about the compute node on which a task ran.
 */
export interface ComputeNodeInformation {
  /**
   * An identifier for the compute node on which the task ran, which can be passed when adding a
   * task to request that the task be scheduled on this compute node.
   */
  affinityId?: string;
  /**
   * The URL of the node on which the task ran. .
   */
  nodeUrl?: string;
  /**
   * The ID of the pool on which the task ran.
   */
  poolId?: string;
  /**
   * The ID of the node on which the task ran.
   */
  nodeId?: string;
  /**
   * The root directory of the task on the compute node.
   */
  taskRootDirectory?: string;
  /**
   * The URL to the root directory of the task on the compute node.
   */
  taskRootDirectoryUrl?: string;
}

/**
 * The Batch node agent is a program that runs on each node in the pool and provides Batch
 * capability on the compute node.
 * @summary Information about the node agent.
 */
export interface NodeAgentInformation {
  /**
   * The version of the Batch node agent running on the compute node. This version number can be
   * checked against the node agent release notes located at
   * https://github.com/Azure/Batch/blob/master/changelogs/nodeagent/CHANGELOG.md.
   */
  version: string;
  /**
   * The time when the node agent was updated on the compute node. This is the most recent time
   * that the node agent was updated to a new version.
   */
  lastUpdateTime: Date;
}

/**
 * Multi-instance tasks are commonly used to support MPI tasks. In the MPI case, if any of the
 * subtasks fail (for example due to exiting with a non-zero exit code) the entire multi-instance
 * task fails. The multi-instance task is then terminated and retried, up to its retry limit.
 * @summary Settings which specify how to run a multi-instance task.
 */
export interface MultiInstanceSettings {
  /**
   * The number of compute nodes required by the task. If omitted, the default is 1.
   */
  numberOfInstances?: number;
  /**
   * The command line to run on all the compute nodes to enable them to coordinate when the primary
   * runs the main task command. A typical coordination command line launches a background service
   * and verifies that the service is ready to process inter-node messages.
   */
  coordinationCommandLine: string;
  /**
   * A list of files that the Batch service will download before running the coordination command
   * line. The difference between common resource files and task resource files is that common
   * resource files are downloaded for all subtasks including the primary, whereas task resource
   * files are downloaded only for the primary. Also note that these resource files are not
   * downloaded to the task working directory, but instead are downloaded to the task root
   * directory (one directory above the working directory).  There is a maximum size for the list
   * of resource files.  When the max size is exceeded, the request will fail and the response
   * error code will be RequestEntityTooLarge. If this occurs, the collection of ResourceFiles must
   * be reduced in size. This can be achieved using .zip files, Application Packages, or Docker
   * Containers.
   */
  commonResourceFiles?: ResourceFile[];
}

/**
 * An interface representing TaskStatistics.
 * @summary Resource usage statistics for a task.
 */
export interface TaskStatistics {
  /**
   * The URL of the statistics.
   */
  url: string;
  /**
   * The start time of the time range covered by the statistics.
   */
  startTime: Date;
  /**
   * The time at which the statistics were last updated. All statistics are limited to the range
   * between startTime and lastUpdateTime.
   */
  lastUpdateTime: Date;
  /**
   * The total user mode CPU time (summed across all cores and all compute nodes) consumed by the
   * task.
   */
  userCPUTime: string;
  /**
   * The total kernel mode CPU time (summed across all cores and all compute nodes) consumed by the
   * task.
   */
  kernelCPUTime: string;
  /**
   * The total wall clock time of the task. The wall clock time is the elapsed time from when the
   * task started running on a compute node to when it finished (or to the last time the statistics
   * were updated, if the task had not finished by then). If the task was retried, this includes
   * the wall clock time of all the task retries.
   */
  wallClockTime: string;
  /**
   * The total number of disk read operations made by the task.
   */
  readIOps: number;
  /**
   * The total number of disk write operations made by the task.
   */
  writeIOps: number;
  /**
   * The total gibibytes read from disk by the task.
   */
  readIOGiB: number;
  /**
   * The total gibibytes written to disk by the task.
   */
  writeIOGiB: number;
  /**
   * The total wait time of the task. The wait time for a task is defined as the elapsed time
   * between the creation of the task and the start of task execution. (If the task is retried due
   * to failures, the wait time is the time to the most recent task execution.).
   */
  waitTime: string;
}

/**
 * The start and end of the range are inclusive. For example, if a range has start 9 and end 12,
 * then it represents tasks '9', '10', '11' and '12'.
 * @summary A range of task IDs that a task can depend on. All tasks with IDs in the range must
 * complete successfully before the dependent task can be scheduled.
 */
export interface TaskIdRange {
  /**
   * The first task ID in the range.
   */
  start: number;
  /**
   * The last task ID in the range.
   */
  end: number;
}

/**
 * An interface representing TaskDependencies.
 * @summary Specifies any dependencies of a task. Any task that is explicitly specified or within a
 * dependency range must complete before the dependant task will be scheduled.
 */
export interface TaskDependencies {
  /**
   * The list of task IDs that this task depends on. All tasks in this list must complete
   * successfully before the dependent task can be scheduled. The taskIds collection is limited to
   * 64000 characters total (i.e. the combined length of all task IDs). If the taskIds collection
   * exceeds the maximum length, the Add Task request fails with error code
   * TaskDependencyListTooLong. In this case consider using task ID ranges instead.
   */
  taskIds?: string[];
  /**
   * The list of task ID ranges that this task depends on. All tasks in all ranges must complete
   * successfully before the dependent task can be scheduled.
   */
  taskIdRanges?: TaskIdRange[];
}

/**
 * Batch will retry tasks when a recovery operation is triggered on a compute node. Examples of
 * recovery operations include (but are not limited to) when an unhealthy compute node is rebooted
 * or a compute node disappeared due to host failure. Retries due to recovery operations are
 * independent of and are not counted against the maxTaskRetryCount. Even if the maxTaskRetryCount
 * is 0, an internal retry due to a recovery operation may occur. Because of this, all tasks should
 * be idempotent. This means tasks need to tolerate being interrupted and restarted without causing
 * any corruption or duplicate data. The best practice for long running tasks is to use some form
 * of checkpointing.
 * @summary An Azure Batch task.
 */
export interface CloudTask {
  /**
   * A string that uniquely identifies the task within the job. The ID can contain any combination
   * of alphanumeric characters including hyphens and underscores, and cannot contain more than 64
   * characters.
   */
  id?: string;
  /**
   * A display name for the task. The display name need not be unique and can contain any Unicode
   * characters up to a maximum length of 1024.
   */
  displayName?: string;
  /**
   * The URL of the task.
   */
  url?: string;
  /**
   * The ETag of the task. This is an opaque string. You can use it to detect whether the task has
   * changed between requests. In particular, you can be pass the ETag when updating a task to
   * specify that your changes should take effect only if nobody else has modified the task in the
   * meantime.
   */
  eTag?: string;
  /**
   * The last modified time of the task.
   */
  lastModified?: Date;
  /**
   * The creation time of the task.
   */
  creationTime?: Date;
  /**
   * How the Batch service should respond when the task completes.
   */
  exitConditions?: ExitConditions;
  /**
   * The current state of the task. Possible values include: 'active', 'preparing', 'running',
   * 'completed'
   */
  state?: TaskState;
  /**
   * The time at which the task entered its current state.
   */
  stateTransitionTime?: Date;
  /**
   * The previous state of the task. This property is not set if the task is in its initial Active
   * state. Possible values include: 'active', 'preparing', 'running', 'completed'
   */
  previousState?: TaskState;
  /**
   * The time at which the task entered its previous state. This property is not set if the task is
   * in its initial Active state.
   */
  previousStateTransitionTime?: Date;
  /**
   * The command line of the task. For multi-instance tasks, the command line is executed as the
   * primary task, after the primary task and all subtasks have finished executing the coordination
   * command line. The command line does not run under a shell, and therefore cannot take advantage
   * of shell features such as environment variable expansion. If you want to take advantage of
   * such features, you should invoke the shell in the command line, for example using "cmd /c
   * MyCommand" in Windows or "/bin/sh -c MyCommand" in Linux. If the command line refers to file
   * paths, it should use a relative path (relative to the task working directory), or use the
   * Batch provided environment variable
   * (https://docs.microsoft.com/en-us/azure/batch/batch-compute-node-environment-variables).
   */
  commandLine?: string;
  /**
   * The settings for the container under which the task runs. If the pool that will run this task
   * has containerConfiguration set, this must be set as well. If the pool that will run this task
   * doesn't have containerConfiguration set, this must not be set. When this is specified, all
   * directories recursively below the AZ_BATCH_NODE_ROOT_DIR (the root of Azure Batch directories
   * on the node) are mapped into the container, all task environment variables are mapped into the
   * container, and the task command line is executed in the container.
   */
  containerSettings?: TaskContainerSettings;
  /**
   * A list of files that the Batch service will download to the compute node before running the
   * command line. For multi-instance tasks, the resource files will only be downloaded to the
   * compute node on which the primary task is executed. There is a maximum size for the list of
   * resource files.  When the max size is exceeded, the request will fail and the response error
   * code will be RequestEntityTooLarge. If this occurs, the collection of ResourceFiles must be
   * reduced in size. This can be achieved using .zip files, Application Packages, or Docker
   * Containers.
   */
  resourceFiles?: ResourceFile[];
  /**
   * A list of files that the Batch service will upload from the compute node after running the
   * command line. For multi-instance tasks, the files will only be uploaded from the compute node
   * on which the primary task is executed.
   */
  outputFiles?: OutputFile[];
  /**
   * A list of environment variable settings for the task.
   */
  environmentSettings?: EnvironmentSetting[];
  /**
   * A locality hint that can be used by the Batch service to select a compute node on which to
   * start the new task.
   */
  affinityInfo?: AffinityInformation;
  /**
   * The execution constraints that apply to this task.
   */
  constraints?: TaskConstraints;
  /**
   * The user identity under which the task runs. If omitted, the task runs as a non-administrative
   * user unique to the task.
   */
  userIdentity?: UserIdentity;
  /**
   * Information about the execution of the task.
   */
  executionInfo?: TaskExecutionInformation;
  /**
   * Information about the compute node on which the task ran.
   */
  nodeInfo?: ComputeNodeInformation;
  /**
   * An object that indicates that the task is a multi-instance task, and contains information
   * about how to run the multi-instance task.
   */
  multiInstanceSettings?: MultiInstanceSettings;
  /**
   * Resource usage statistics for the task.
   */
  stats?: TaskStatistics;
  /**
   * The tasks that this task depends on. This task will not be scheduled until all tasks that it
   * depends on have completed successfully. If any of those tasks fail and exhaust their retry
   * counts, this task will never be scheduled.
   */
  dependsOn?: TaskDependencies;
  /**
   * A list of application packages that the Batch service will deploy to the compute node before
   * running the command line. Application packages are downloaded and deployed to a shared
   * directory, not the task working directory. Therefore, if a referenced package is already on
   * the compute node, and is up to date, then it is not re-downloaded; the existing copy on the
   * compute node is used. If a referenced application package cannot be installed, for example
   * because the package has been deleted or because download failed, the task fails.
   */
  applicationPackageReferences?: ApplicationPackageReference[];
  /**
   * The settings for an authentication token that the task can use to perform Batch service
   * operations. If this property is set, the Batch service provides the task with an
   * authentication token which can be used to authenticate Batch service operations without
   * requiring an account access key. The token is provided via the AZ_BATCH_AUTHENTICATION_TOKEN
   * environment variable. The operations that the task can carry out using the token depend on the
   * settings. For example, a task can request job permissions in order to add other tasks to the
   * job, or check the status of the job or of other tasks under the job.
   */
  authenticationTokenSettings?: AuthenticationTokenSettings;
}

/**
 * Batch will retry tasks when a recovery operation is triggered on a compute node. Examples of
 * recovery operations include (but are not limited to) when an unhealthy compute node is rebooted
 * or a compute node disappeared due to host failure. Retries due to recovery operations are
 * independent of and are not counted against the maxTaskRetryCount. Even if the maxTaskRetryCount
 * is 0, an internal retry due to a recovery operation may occur. Because of this, all tasks should
 * be idempotent. This means tasks need to tolerate being interrupted and restarted without causing
 * any corruption or duplicate data. The best practice for long running tasks is to use some form
 * of checkpointing.
 * @summary An Azure Batch task to add.
 */
export interface TaskAddParameter {
  /**
   * A string that uniquely identifies the task within the job. The ID can contain any combination
   * of alphanumeric characters including hyphens and underscores, and cannot contain more than 64
   * characters. The ID is case-preserving and case-insensitive (that is, you may not have two IDs
   * within a job that differ only by case).
   */
  id: string;
  /**
   * A display name for the task. The display name need not be unique and can contain any Unicode
   * characters up to a maximum length of 1024.
   */
  displayName?: string;
  /**
   * The command line of the task. For multi-instance tasks, the command line is executed as the
   * primary task, after the primary task and all subtasks have finished executing the coordination
   * command line. The command line does not run under a shell, and therefore cannot take advantage
   * of shell features such as environment variable expansion. If you want to take advantage of
   * such features, you should invoke the shell in the command line, for example using "cmd /c
   * MyCommand" in Windows or "/bin/sh -c MyCommand" in Linux. If the command line refers to file
   * paths, it should use a relative path (relative to the task working directory), or use the
   * Batch provided environment variable
   * (https://docs.microsoft.com/en-us/azure/batch/batch-compute-node-environment-variables).
   */
  commandLine: string;
  /**
   * The settings for the container under which the task runs. If the pool that will run this task
   * has containerConfiguration set, this must be set as well. If the pool that will run this task
   * doesn't have containerConfiguration set, this must not be set. When this is specified, all
   * directories recursively below the AZ_BATCH_NODE_ROOT_DIR (the root of Azure Batch directories
   * on the node) are mapped into the container, all task environment variables are mapped into the
   * container, and the task command line is executed in the container.
   */
  containerSettings?: TaskContainerSettings;
  /**
   * How the Batch service should respond when the task completes.
   */
  exitConditions?: ExitConditions;
  /**
   * A list of files that the Batch service will download to the compute node before running the
   * command line. For multi-instance tasks, the resource files will only be downloaded to the
   * compute node on which the primary task is executed. There is a maximum size for the list of
   * resource files.  When the max size is exceeded, the request will fail and the response error
   * code will be RequestEntityTooLarge. If this occurs, the collection of ResourceFiles must be
   * reduced in size. This can be achieved using .zip files, Application Packages, or Docker
   * Containers.
   */
  resourceFiles?: ResourceFile[];
  /**
   * A list of files that the Batch service will upload from the compute node after running the
   * command line. For multi-instance tasks, the files will only be uploaded from the compute node
   * on which the primary task is executed.
   */
  outputFiles?: OutputFile[];
  /**
   * A list of environment variable settings for the task.
   */
  environmentSettings?: EnvironmentSetting[];
  /**
   * A locality hint that can be used by the Batch service to select a compute node on which to
   * start the new task.
   */
  affinityInfo?: AffinityInformation;
  /**
   * The execution constraints that apply to this task. If you do not specify constraints, the
   * maxTaskRetryCount is the maxTaskRetryCount specified for the job, the maxWallClockTime is
   * infinite, and the retentionTime is 7 days.
   */
  constraints?: TaskConstraints;
  /**
   * The user identity under which the task runs. If omitted, the task runs as a non-administrative
   * user unique to the task.
   */
  userIdentity?: UserIdentity;
  /**
   * An object that indicates that the task is a multi-instance task, and contains information
   * about how to run the multi-instance task.
   */
  multiInstanceSettings?: MultiInstanceSettings;
  /**
   * The tasks that this task depends on. This task will not be scheduled until all tasks that it
   * depends on have completed successfully. If any of those tasks fail and exhaust their retry
   * counts, this task will never be scheduled. If the job does not have usesTaskDependencies set
   * to true, and this element is present, the request fails with error code
   * TaskDependenciesNotSpecifiedOnJob.
   */
  dependsOn?: TaskDependencies;
  /**
   * A list of application packages that the Batch service will deploy to the compute node before
   * running the command line. Application packages are downloaded and deployed to a shared
   * directory, not the task working directory. Therefore, if a referenced package is already on
   * the compute node, and is up to date, then it is not re-downloaded; the existing copy on the
   * compute node is used. If a referenced application package cannot be installed, for example
   * because the package has been deleted or because download failed, the task fails.
   */
  applicationPackageReferences?: ApplicationPackageReference[];
  /**
   * The settings for an authentication token that the task can use to perform Batch service
   * operations. If this property is set, the Batch service provides the task with an
   * authentication token which can be used to authenticate Batch service operations without
   * requiring an account access key. The token is provided via the AZ_BATCH_AUTHENTICATION_TOKEN
   * environment variable. The operations that the task can carry out using the token depend on the
   * settings. For example, a task can request job permissions in order to add other tasks to the
   * job, or check the status of the job or of other tasks under the job.
   */
  authenticationTokenSettings?: AuthenticationTokenSettings;
}

/**
 * An interface representing TaskAddCollectionParameter.
 * @summary A collection of Azure Batch tasks to add.
 */
export interface TaskAddCollectionParameter {
  /**
   * The collection of tasks to add. The maximum count of tasks is 100. The total serialized size
   * of this collection must be less than 1MB. If it is greater than 1MB (for example if each task
   * has 100's of resource files or environment variables), the request will fail with code
   * 'RequestBodyTooLarge' and should be retried again with fewer tasks.
   */
  value: TaskAddParameter[];
}

/**
 * An interface representing ErrorMessage.
 * @summary An error message received in an Azure Batch error response.
 */
export interface ErrorMessage {
  /**
   * The language code of the error message.
   */
  lang?: string;
  /**
   * The text of the message.
   */
  value?: string;
}

/**
 * An interface representing BatchErrorDetail.
 * @summary An item of additional information included in an Azure Batch error response.
 */
export interface BatchErrorDetail {
  /**
   * An identifier specifying the meaning of the Value property.
   */
  key?: string;
  /**
   * The additional information included with the error response.
   */
  value?: string;
}

/**
 * An interface representing BatchError.
 * @summary An error response received from the Azure Batch service.
 */
export interface BatchError {
  /**
   * An identifier for the error. Codes are invariant and are intended to be consumed
   * programmatically.
   */
  code?: string;
  /**
   * A message describing the error, intended to be suitable for display in a user interface.
   */
  message?: ErrorMessage;
  /**
   * A collection of key-value pairs containing additional details about the error.
   */
  values?: BatchErrorDetail[];
}

/**
 * An interface representing TaskAddResult.
 * @summary Result for a single task added as part of an add task collection operation.
 */
export interface TaskAddResult {
  /**
   * The status of the add task request. Possible values include: 'success', 'clientError',
   * 'serverError'
   */
  status: TaskAddStatus;
  /**
   * The ID of the task for which this is the result.
   */
  taskId: string;
  /**
   * The ETag of the task, if the task was successfully added. You can use this to detect whether
   * the task has changed between requests. In particular, you can be pass the ETag with an Update
   * Task request to specify that your changes should take effect only if nobody else has modified
   * the job in the meantime.
   */
  eTag?: string;
  /**
   * The last modified time of the task.
   */
  lastModified?: Date;
  /**
   * The URL of the task, if the task was successfully added.
   */
  location?: string;
  /**
   * The error encountered while attempting to add the task.
   */
  error?: BatchError;
}

/**
 * An interface representing TaskAddCollectionResult.
 * @summary The result of adding a collection of tasks to a job.
 */
export interface TaskAddCollectionResult {
  /**
   * The results of the add task collection operation.
   */
  value?: TaskAddResult[];
}

/**
 * An interface representing SubtaskInformation.
 * @summary Information about an Azure Batch subtask.
 */
export interface SubtaskInformation {
  /**
   * The ID of the subtask.
   */
  id?: number;
  /**
   * Information about the compute node on which the subtask ran.
   */
  nodeInfo?: ComputeNodeInformation;
  /**
   * The time at which the subtask started running. If the subtask has been restarted or retried,
   * this is the most recent time at which the subtask started running.
   */
  startTime?: Date;
  /**
   * The time at which the subtask completed. This property is set only if the subtask is in the
   * Completed state.
   */
  endTime?: Date;
  /**
   * The exit code of the program specified on the subtask command line. This property is set only
   * if the subtask is in the completed state. In general, the exit code for a process reflects the
   * specific convention implemented by the application developer for that process. If you use the
   * exit code value to make decisions in your code, be sure that you know the exit code convention
   * used by the application process. However, if the Batch service terminates the subtask (due to
   * timeout, or user termination via the API) you may see an operating system-defined exit code.
   */
  exitCode?: number;
  /**
   * Information about the container under which the task is executing. This property is set only
   * if the task runs in a container context.
   */
  containerInfo?: TaskContainerExecutionInformation;
  /**
   * Information describing the task failure, if any. This property is set only if the task is in
   * the completed state and encountered a failure.
   */
  failureInfo?: TaskFailureInformation;
  /**
   * The current state of the subtask. Possible values include: 'preparing', 'running', 'completed'
   */
  state?: SubtaskState;
  /**
   * The time at which the subtask entered its current state.
   */
  stateTransitionTime?: Date;
  /**
   * The previous state of the subtask. This property is not set if the subtask is in its initial
   * running state. Possible values include: 'preparing', 'running', 'completed'
   */
  previousState?: SubtaskState;
  /**
   * The time at which the subtask entered its previous state. This property is not set if the
   * subtask is in its initial running state.
   */
  previousStateTransitionTime?: Date;
  /**
   * The result of the task execution. If the value is 'failed', then the details of the failure
   * can be found in the failureInfo property. Possible values include: 'success', 'failure'
   */
  result?: TaskExecutionResult;
}

/**
 * An interface representing CloudTaskListSubtasksResult.
 * @summary The result of listing the subtasks of a task.
 */
export interface CloudTaskListSubtasksResult {
  /**
   * The list of subtasks.
   */
  value?: SubtaskInformation[];
}

/**
 * An interface representing TaskInformation.
 * @summary Information about a task running on a compute node.
 */
export interface TaskInformation {
  /**
   * The URL of the task.
   */
  taskUrl?: string;
  /**
   * The ID of the job to which the task belongs.
   */
  jobId?: string;
  /**
   * The ID of the task.
   */
  taskId?: string;
  /**
   * The ID of the subtask if the task is a multi-instance task.
   */
  subtaskId?: number;
  /**
   * The current state of the task. Possible values include: 'active', 'preparing', 'running',
   * 'completed'
   */
  taskState: TaskState;
  /**
   * Information about the execution of the task.
   */
  executionInfo?: TaskExecutionInformation;
}

/**
 * An interface representing StartTaskInformation.
 * @summary Information about a start task running on a compute node.
 */
export interface StartTaskInformation {
  /**
   * The state of the start task on the compute node. Possible values include: 'running',
   * 'completed'
   */
  state: StartTaskState;
  /**
   * The time at which the start task started running. This value is reset every time the task is
   * restarted or retried (that is, this is the most recent time at which the start task started
   * running).
   */
  startTime: Date;
  /**
   * The time at which the start task stopped running. This is the end time of the most recent run
   * of the start task, if that run has completed (even if that run failed and a retry is pending).
   * This element is not present if the start task is currently running.
   */
  endTime?: Date;
  /**
   * The exit code of the program specified on the start task command line. This property is set
   * only if the start task is in the completed state. In general, the exit code for a process
   * reflects the specific convention implemented by the application developer for that process. If
   * you use the exit code value to make decisions in your code, be sure that you know the exit
   * code convention used by the application process. However, if the Batch service terminates the
   * start task (due to timeout, or user termination via the API) you may see an operating
   * system-defined exit code.
   */
  exitCode?: number;
  /**
   * Information about the container under which the task is executing. This property is set only
   * if the task runs in a container context.
   */
  containerInfo?: TaskContainerExecutionInformation;
  /**
   * Information describing the task failure, if any. This property is set only if the task is in
   * the completed state and encountered a failure.
   */
  failureInfo?: TaskFailureInformation;
  /**
   * The number of times the task has been retried by the Batch service. Task application failures
   * (non-zero exit code) are retried, pre-processing errors (the task could not be run) and file
   * upload errors are not retried. The Batch service will retry the task up to the limit specified
   * by the constraints.
   */
  retryCount: number;
  /**
   * The most recent time at which a retry of the task started running. This element is present
   * only if the task was retried (i.e. retryCount is nonzero). If present, this is typically the
   * same as startTime, but may be different if the task has been restarted for reasons other than
   * retry; for example, if the compute node was rebooted during a retry, then the startTime is
   * updated but the lastRetryTime is not.
   */
  lastRetryTime?: Date;
  /**
   * The result of the task execution. If the value is 'failed', then the details of the failure
   * can be found in the failureInfo property. Possible values include: 'success', 'failure'
   */
  result?: TaskExecutionResult;
}

/**
 * An interface representing ComputeNodeError.
 * @summary An error encountered by a compute node.
 */
export interface ComputeNodeError {
  /**
   * An identifier for the compute node error. Codes are invariant and are intended to be consumed
   * programmatically.
   */
  code?: string;
  /**
   * A message describing the compute node error, intended to be suitable for display in a user
   * interface.
   */
  message?: string;
  /**
   * The list of additional error details related to the compute node error.
   */
  errorDetails?: NameValuePair[];
}

/**
 * An interface representing InboundEndpoint.
 * @summary An inbound endpoint on a compute node.
 */
export interface InboundEndpoint {
  /**
   * The name of the endpoint.
   */
  name: string;
  /**
   * The protocol of the endpoint. Possible values include: 'tcp', 'udp'
   */
  protocol: InboundEndpointProtocol;
  /**
   * The public IP address of the compute node.
   */
  publicIPAddress: string;
  /**
   * The public fully qualified domain name for the compute node.
   */
  publicFQDN: string;
  /**
   * The public port number of the endpoint.
   */
  frontendPort: number;
  /**
   * The backend port number of the endpoint.
   */
  backendPort: number;
}

/**
 * An interface representing ComputeNodeEndpointConfiguration.
 * @summary The endpoint configuration for the compute node.
 */
export interface ComputeNodeEndpointConfiguration {
  /**
   * The list of inbound endpoints that are accessible on the compute node.
   */
  inboundEndpoints: InboundEndpoint[];
}

/**
 * An interface representing ComputeNode.
 * @summary A compute node in the Batch service.
 */
export interface ComputeNode {
  /**
   * The ID of the compute node. Every node that is added to a pool is assigned a unique ID.
   * Whenever a node is removed from a pool, all of its local files are deleted, and the ID is
   * reclaimed and could be reused for new nodes.
   */
  id?: string;
  /**
   * The URL of the compute node.
   */
  url?: string;
  /**
   * The current state of the compute node. The low-priority node has been preempted. Tasks which
   * were running on the node when it was preempted will be rescheduled when another node becomes
   * available. Possible values include: 'idle', 'rebooting', 'reimaging', 'running', 'unusable',
   * 'creating', 'starting', 'waitingForStartTask', 'startTaskFailed', 'unknown', 'leavingPool',
   * 'offline', 'preempted'
   */
  state?: ComputeNodeState;
  /**
   * Whether the compute node is available for task scheduling. Possible values include: 'enabled',
   * 'disabled'
   */
  schedulingState?: SchedulingState;
  /**
   * The time at which the compute node entered its current state.
   */
  stateTransitionTime?: Date;
  /**
   * The last time at which the compute node was started. This property may not be present if the
   * node state is unusable.
   */
  lastBootTime?: Date;
  /**
   * The time at which this compute node was allocated to the pool. This is the time when the node
   * was initially allocated and doesn't change once set. It is not updated when the node is
   * service healed or preempted.
   */
  allocationTime?: Date;
  /**
   * The IP address that other compute nodes can use to communicate with this compute node. Every
   * node that is added to a pool is assigned a unique IP address. Whenever a node is removed from
   * a pool, all of its local files are deleted, and the IP address is reclaimed and could be
   * reused for new nodes.
   */
  ipAddress?: string;
  /**
   * An identifier which can be passed when adding a task to request that the task be scheduled on
   * this node. Note that this is just a soft affinity. If the target node is busy or unavailable
   * at the time the task is scheduled, then the task will be scheduled elsewhere.
   */
  affinityId?: string;
  /**
   * The size of the virtual machine hosting the compute node. For information about available
   * sizes of virtual machines in pools, see Choose a VM size for compute nodes in an Azure Batch
   * pool (https://docs.microsoft.com/azure/batch/batch-pool-vm-sizes).
   */
  vmSize?: string;
  /**
   * The total number of job tasks completed on the compute node. This includes Job Manager tasks
   * and normal tasks, but not Job Preparation, Job Release or Start tasks.
   */
  totalTasksRun?: number;
  /**
   * The total number of currently running job tasks on the compute node. This includes Job Manager
   * tasks and normal tasks, but not Job Preparation, Job Release or Start tasks.
   */
  runningTasksCount?: number;
  /**
   * The total number of job tasks which completed successfully (with exitCode 0) on the compute
   * node. This includes Job Manager tasks and normal tasks, but not Job Preparation, Job Release
   * or Start tasks.
   */
  totalTasksSucceeded?: number;
  /**
   * A list of tasks whose state has recently changed. This property is present only if at least
   * one task has run on this node since it was assigned to the pool.
   */
  recentTasks?: TaskInformation[];
  /**
   * The task specified to run on the compute node as it joins the pool.
   */
  startTask?: StartTask;
  /**
   * Runtime information about the execution of the start task on the compute node.
   */
  startTaskInfo?: StartTaskInformation;
  /**
   * The list of certificates installed on the compute node. For Windows compute nodes, the Batch
   * service installs the certificates to the specified certificate store and location. For Linux
   * compute nodes, the certificates are stored in a directory inside the task working directory
   * and an environment variable AZ_BATCH_CERTIFICATES_DIR is supplied to the task to query for
   * this location. For certificates with visibility of 'remoteUser', a 'certs' directory is
   * created in the user's home directory (e.g., /home/{user-name}/certs) and certificates are
   * placed in that directory.
   */
  certificateReferences?: CertificateReference[];
  /**
   * The list of errors that are currently being encountered by the compute node.
   */
  errors?: ComputeNodeError[];
  /**
   * Whether this compute node is a dedicated node. If false, the node is a low-priority node.
   */
  isDedicated?: boolean;
  /**
   * The endpoint configuration for the compute node.
   */
  endpointConfiguration?: ComputeNodeEndpointConfiguration;
  /**
   * Information about the node agent version and the time the node upgraded to a new version.
   */
  nodeAgentInfo?: NodeAgentInformation;
}

/**
 * An interface representing ComputeNodeUser.
 * @summary A user account for RDP or SSH access on a compute node.
 */
export interface ComputeNodeUser {
  /**
   * The user name of the account.
   */
  name: string;
  /**
   * Whether the account should be an administrator on the compute node. The default value is
   * false.
   */
  isAdmin?: boolean;
  /**
   * The time at which the account should expire. If omitted, the default is 1 day from the current
   * time. For Linux compute nodes, the expiryTime has a precision up to a day.
   */
  expiryTime?: Date;
  /**
   * The password of the account. The password is required for Windows nodes (those created with
   * 'cloudServiceConfiguration', or created with 'virtualMachineConfiguration' using a Windows
   * image reference). For Linux compute nodes, the password can optionally be specified along with
   * the sshPublicKey property.
   */
  password?: string;
  /**
   * The SSH public key that can be used for remote login to the compute node. The public key
   * should be compatible with OpenSSH encoding and should be base 64 encoded. This property can be
   * specified only for Linux nodes. If this is specified for a Windows node, then the Batch
   * service rejects the request; if you are calling the REST API directly, the HTTP status code is
   * 400 (Bad Request).
   */
  sshPublicKey?: string;
}

/**
 * An interface representing ComputeNodeGetRemoteLoginSettingsResult.
 * @summary The remote login settings for a compute node.
 */
export interface ComputeNodeGetRemoteLoginSettingsResult {
  /**
   * The IP address used for remote login to the compute node.
   */
  remoteLoginIPAddress: string;
  /**
   * The port used for remote login to the compute node.
   */
  remoteLoginPort: number;
}

/**
 * An interface representing JobSchedulePatchParameter.
 * @summary The set of changes to be made to a job schedule.
 */
export interface JobSchedulePatchParameter {
  /**
   * The schedule according to which jobs will be created. If you do not specify this element, the
   * existing schedule is left unchanged.
   */
  schedule?: Schedule;
  /**
   * The details of the jobs to be created on this schedule. Updates affect only jobs that are
   * started after the update has taken place. Any currently active job continues with the older
   * specification.
   */
  jobSpecification?: JobSpecification;
  /**
   * A list of name-value pairs associated with the job schedule as metadata. If you do not specify
   * this element, existing metadata is left unchanged.
   */
  metadata?: MetadataItem[];
}

/**
 * An interface representing JobScheduleUpdateParameter.
 * @summary The set of changes to be made to a job schedule.
 */
export interface JobScheduleUpdateParameter {
  /**
   * The schedule according to which jobs will be created. If you do not specify this element, it
   * is equivalent to passing the default schedule: that is, a single job scheduled to run
   * immediately.
   */
  schedule: Schedule;
  /**
   * Details of the jobs to be created on this schedule. Updates affect only jobs that are started
   * after the update has taken place. Any currently active job continues with the older
   * specification.
   */
  jobSpecification: JobSpecification;
  /**
   * A list of name-value pairs associated with the job schedule as metadata. If you do not specify
   * this element, it takes the default value of an empty list; in effect, any existing metadata is
   * deleted.
   */
  metadata?: MetadataItem[];
}

/**
 * An interface representing JobDisableParameter.
 * @summary Options when disabling a job.
 */
export interface JobDisableParameter {
  /**
   * What to do with active tasks associated with the job. Possible values include: 'requeue',
   * 'terminate', 'wait'
   */
  disableTasks: DisableJobOption;
}

/**
 * An interface representing JobTerminateParameter.
 * @summary Options when terminating a job.
 */
export interface JobTerminateParameter {
  /**
   * The text you want to appear as the job's TerminateReason. The default is 'UserTerminate'.
   */
  terminateReason?: string;
}

/**
 * An interface representing JobPatchParameter.
 * @summary The set of changes to be made to a job.
 */
export interface JobPatchParameter {
  /**
   * The priority of the job. Priority values can range from -1000 to 1000, with -1000 being the
   * lowest priority and 1000 being the highest priority. If omitted, the priority of the job is
   * left unchanged.
   */
  priority?: number;
  /**
   * The action the Batch service should take when all tasks in the job are in the completed state.
   * If omitted, the completion behavior is left unchanged. You may not change the value from
   * terminatejob to noaction - that is, once you have engaged automatic job termination, you
   * cannot turn it off again. If you try to do this, the request fails with an 'invalid property
   * value' error response; if you are calling the REST API directly, the HTTP status code is 400
   * (Bad Request). Possible values include: 'noAction', 'terminateJob'
   */
  onAllTasksComplete?: OnAllTasksComplete;
  /**
   * The execution constraints for the job. If omitted, the existing execution constraints are left
   * unchanged.
   */
  constraints?: JobConstraints;
  /**
   * The pool on which the Batch service runs the job's tasks. You may change the pool for a job
   * only when the job is disabled. The Patch Job call will fail if you include the poolInfo
   * element and the job is not disabled. If you specify an autoPoolSpecification specification in
   * the poolInfo, only the keepAlive property can be updated, and then only if the auto pool has a
   * poolLifetimeOption of job. If omitted, the job continues to run on its current pool.
   */
  poolInfo?: PoolInformation;
  /**
   * A list of name-value pairs associated with the job as metadata. If omitted, the existing job
   * metadata is left unchanged.
   */
  metadata?: MetadataItem[];
}

/**
 * An interface representing JobUpdateParameter.
 * @summary The set of changes to be made to a job.
 */
export interface JobUpdateParameter {
  /**
   * The priority of the job. Priority values can range from -1000 to 1000, with -1000 being the
   * lowest priority and 1000 being the highest priority. If omitted, it is set to the default
   * value 0.
   */
  priority?: number;
  /**
   * The execution constraints for the job. If omitted, the constraints are cleared.
   */
  constraints?: JobConstraints;
  /**
   * The pool on which the Batch service runs the job's tasks. You may change the pool for a job
   * only when the job is disabled. The Update Job call will fail if you include the poolInfo
   * element and the job is not disabled. If you specify an autoPoolSpecification specification in
   * the poolInfo, only the keepAlive property can be updated, and then only if the auto pool has a
   * poolLifetimeOption of job.
   */
  poolInfo: PoolInformation;
  /**
   * A list of name-value pairs associated with the job as metadata. If omitted, it takes the
   * default value of an empty list; in effect, any existing metadata is deleted.
   */
  metadata?: MetadataItem[];
  /**
   * The action the Batch service should take when all tasks in the job are in the completed state.
   * If omitted, the completion behavior is set to noaction. If the current value is terminatejob,
   * this is an error because a job's completion behavior may not be changed from terminatejob to
   * noaction. You may not change the value from terminatejob to noaction - that is, once you have
   * engaged automatic job termination, you cannot turn it off again. If you try to do this, the
   * request fails and Batch returns status code 400 (Bad Request) and an 'invalid property value'
   * error response. If you do not specify this element in a PUT request, it is equivalent to
   * passing noaction. This is an error if the current value is terminatejob. Possible values
   * include: 'noAction', 'terminateJob'
   */
  onAllTasksComplete?: OnAllTasksComplete;
}

/**
 * An interface representing PoolEnableAutoScaleParameter.
 * @summary Options for enabling automatic scaling on a pool.
 */
export interface PoolEnableAutoScaleParameter {
  /**
   * The formula for the desired number of compute nodes in the pool. The formula is checked for
   * validity before it is applied to the pool. If the formula is not valid, the Batch service
   * rejects the request with detailed error information. For more information about specifying
   * this formula, see Automatically scale compute nodes in an Azure Batch pool
   * (https://azure.microsoft.com/en-us/documentation/articles/batch-automatic-scaling).
   */
  autoScaleFormula?: string;
  /**
   * The time interval at which to automatically adjust the pool size according to the autoscale
   * formula. The default value is 15 minutes. The minimum and maximum value are 5 minutes and 168
   * hours respectively. If you specify a value less than 5 minutes or greater than 168 hours, the
   * Batch service rejects the request with an invalid property value error; if you are calling the
   * REST API directly, the HTTP status code is 400 (Bad Request). If you specify a new interval,
   * then the existing autoscale evaluation schedule will be stopped and a new autoscale evaluation
   * schedule will be started, with its starting time being the time when this request was issued.
   */
  autoScaleEvaluationInterval?: string;
}

/**
 * An interface representing PoolEvaluateAutoScaleParameter.
 * @summary Options for evaluating an automatic scaling formula on a pool.
 */
export interface PoolEvaluateAutoScaleParameter {
  /**
   * The formula for the desired number of compute nodes in the pool. The formula is validated and
   * its results calculated, but it is not applied to the pool. To apply the formula to the pool,
   * 'Enable automatic scaling on a pool'. For more information about specifying this formula, see
   * Automatically scale compute nodes in an Azure Batch pool
   * (https://azure.microsoft.com/en-us/documentation/articles/batch-automatic-scaling).
   */
  autoScaleFormula: string;
}

/**
 * An interface representing PoolResizeParameter.
 * @summary Options for changing the size of a pool.
 */
export interface PoolResizeParameter {
  /**
   * The desired number of dedicated compute nodes in the pool.
   */
  targetDedicatedNodes?: number;
  /**
   * The desired number of low-priority compute nodes in the pool.
   */
  targetLowPriorityNodes?: number;
  /**
   * The timeout for allocation of compute nodes to the pool or removal of compute nodes from the
   * pool. The default value is 15 minutes. The minimum value is 5 minutes. If you specify a value
   * less than 5 minutes, the Batch service returns an error; if you are calling the REST API
   * directly, the HTTP status code is 400 (Bad Request).
   */
  resizeTimeout?: string;
  /**
   * Determines what to do with a node and its running task(s) if the pool size is decreasing. The
   * default value is requeue. Possible values include: 'requeue', 'terminate', 'taskCompletion',
   * 'retainedData'
   */
  nodeDeallocationOption?: ComputeNodeDeallocationOption;
}

/**
 * An interface representing PoolUpdatePropertiesParameter.
 * @summary The set of changes to be made to a pool.
 */
export interface PoolUpdatePropertiesParameter {
  /**
   * A task to run on each compute node as it joins the pool. The task runs when the node is added
   * to the pool or when the node is restarted. If this element is present, it overwrites any
   * existing start task. If omitted, any existing start task is removed from the pool.
   */
  startTask?: StartTask;
  /**
   * A list of certificates to be installed on each compute node in the pool. This list replaces
   * any existing certificate references configured on the pool. If you specify an empty
   * collection, any existing certificate references are removed from the pool. For Windows compute
   * nodes, the Batch service installs the certificates to the specified certificate store and
   * location. For Linux compute nodes, the certificates are stored in a directory inside the task
   * working directory and an environment variable AZ_BATCH_CERTIFICATES_DIR is supplied to the
   * task to query for this location. For certificates with visibility of 'remoteUser', a 'certs'
   * directory is created in the user's home directory (e.g., /home/{user-name}/certs) and
   * certificates are placed in that directory.
   */
  certificateReferences: CertificateReference[];
  /**
   * The list of application packages to be installed on each compute node in the pool. The list
   * replaces any existing application package references on the pool. Changes to application
   * package references affect all new compute nodes joining the pool, but do not affect compute
   * nodes that are already in the pool until they are rebooted or reimaged. There is a maximum of
   * 10 application package references on any given pool. If omitted, or if you specify an empty
   * collection, any existing application packages references are removed from the pool.
   */
  applicationPackageReferences: ApplicationPackageReference[];
  /**
   * A list of name-value pairs associated with the pool as metadata. This list replaces any
   * existing metadata configured on the pool. If omitted, or if you specify an empty collection,
   * any existing metadata is removed from the pool.
   */
  metadata: MetadataItem[];
}

/**
 * An interface representing PoolPatchParameter.
 * @summary The set of changes to be made to a pool.
 */
export interface PoolPatchParameter {
  /**
   * A task to run on each compute node as it joins the pool. The task runs when the node is added
   * to the pool or when the node is restarted. If this element is present, it overwrites any
   * existing start task. If omitted, any existing start task is left unchanged.
   */
  startTask?: StartTask;
  /**
   * A list of certificates to be installed on each compute node in the pool. If this element is
   * present, it replaces any existing certificate references configured on the pool. If omitted,
   * any existing certificate references are left unchanged. For Windows compute nodes, the Batch
   * service installs the certificates to the specified certificate store and location. For Linux
   * compute nodes, the certificates are stored in a directory inside the task working directory
   * and an environment variable AZ_BATCH_CERTIFICATES_DIR is supplied to the task to query for
   * this location. For certificates with visibility of 'remoteUser', a 'certs' directory is
   * created in the user's home directory (e.g., /home/{user-name}/certs) and certificates are
   * placed in that directory.
   */
  certificateReferences?: CertificateReference[];
  /**
   * The list of application packages to be installed on each compute node in the pool. The list
   * replaces any existing application package references on the pool. Changes to application
   * package references affect all new compute nodes joining the pool, but do not affect compute
   * nodes that are already in the pool until they are rebooted or reimaged. There is a maximum of
   * 10 application package references on any given pool. If omitted, any existing application
   * package references are left unchanged.
   */
  applicationPackageReferences?: ApplicationPackageReference[];
  /**
   * A list of name-value pairs associated with the pool as metadata. If this element is present,
   * it replaces any existing metadata configured on the pool. If you specify an empty collection,
   * any metadata is removed from the pool. If omitted, any existing metadata is left unchanged.
   */
  metadata?: MetadataItem[];
}

/**
 * An interface representing TaskUpdateParameter.
 * @summary The set of changes to be made to a task.
 */
export interface TaskUpdateParameter {
  /**
   * Constraints that apply to this task. If omitted, the task is given the default constraints.
   * For multi-instance tasks, updating the retention time applies only to the primary task and not
   * subtasks.
   */
  constraints?: TaskConstraints;
}

/**
 * An interface representing NodeUpdateUserParameter.
 * @summary The set of changes to be made to a user account on a node.
 */
export interface NodeUpdateUserParameter {
  /**
   * The password of the account. The password is required for Windows nodes (those created with
   * 'cloudServiceConfiguration', or created with 'virtualMachineConfiguration' using a Windows
   * image reference). For Linux compute nodes, the password can optionally be specified along with
   * the sshPublicKey property. If omitted, any existing password is removed.
   */
  password?: string;
  /**
   * The time at which the account should expire. If omitted, the default is 1 day from the current
   * time. For Linux compute nodes, the expiryTime has a precision up to a day.
   */
  expiryTime?: Date;
  /**
   * The SSH public key that can be used for remote login to the compute node. The public key
   * should be compatible with OpenSSH encoding and should be base 64 encoded. This property can be
   * specified only for Linux nodes. If this is specified for a Windows node, then the Batch
   * service rejects the request; if you are calling the REST API directly, the HTTP status code is
   * 400 (Bad Request). If omitted, any existing SSH public key is removed.
   */
  sshPublicKey?: string;
}

/**
 * An interface representing NodeRebootParameter.
 * @summary Options for rebooting a compute node.
 */
export interface NodeRebootParameter {
  /**
   * When to reboot the compute node and what to do with currently running tasks. The default value
   * is requeue. Possible values include: 'requeue', 'terminate', 'taskCompletion', 'retainedData'
   */
  nodeRebootOption?: ComputeNodeRebootOption;
}

/**
 * An interface representing NodeReimageParameter.
 * @summary Options for reimaging a compute node.
 */
export interface NodeReimageParameter {
  /**
   * When to reimage the compute node and what to do with currently running tasks. The default
   * value is requeue. Possible values include: 'requeue', 'terminate', 'taskCompletion',
   * 'retainedData'
   */
  nodeReimageOption?: ComputeNodeReimageOption;
}

/**
 * An interface representing NodeDisableSchedulingParameter.
 * @summary Options for disabling scheduling on a compute node.
 */
export interface NodeDisableSchedulingParameter {
  /**
   * What to do with currently running tasks when disabling task scheduling on the compute node.
   * The default value is requeue. Possible values include: 'requeue', 'terminate',
   * 'taskCompletion'
   */
  nodeDisableSchedulingOption?: DisableComputeNodeSchedulingOption;
}

/**
 * An interface representing NodeRemoveParameter.
 * @summary Options for removing compute nodes from a pool.
 */
export interface NodeRemoveParameter {
  /**
   * A list containing the IDs of the compute nodes to be removed from the specified pool.
   */
  nodeList: string[];
  /**
   * The timeout for removal of compute nodes to the pool. The default value is 15 minutes. The
   * minimum value is 5 minutes. If you specify a value less than 5 minutes, the Batch service
   * returns an error; if you are calling the REST API directly, the HTTP status code is 400 (Bad
   * Request).
   */
  resizeTimeout?: string;
  /**
   * Determines what to do with a node and its running task(s) after it has been selected for
   * deallocation. The default value is requeue. Possible values include: 'requeue', 'terminate',
   * 'taskCompletion', 'retainedData'
   */
  nodeDeallocationOption?: ComputeNodeDeallocationOption;
}

/**
 * An interface representing UploadBatchServiceLogsConfiguration.
 * @summary The Azure Batch service log files upload configuration for a compute node.
 */
export interface UploadBatchServiceLogsConfiguration {
  /**
   * The URL of the container within Azure Blob Storage to which to upload the Batch Service log
   * file(s). The URL must include a Shared Access Signature (SAS) granting write permissions to
   * the container. The SAS duration must allow enough time for the upload to finish. The start
   * time for SAS is optional and recommended to not be specified.
   */
  containerUrl: string;
  /**
   * The start of the time range from which to upload Batch Service log file(s). Any log file
   * containing a log message in the time range will be uploaded. This means that the operation
   * might retrieve more logs than have been requested since the entire log file is always
   * uploaded, but the operation should not retrieve fewer logs than have been requested.
   */
  startTime: Date;
  /**
   * The end of the time range from which to upload Batch Service log file(s). Any log file
   * containing a log message in the time range will be uploaded. This means that the operation
   * might retrieve more logs than have been requested since the entire log file is always
   * uploaded, but the operation should not retrieve fewer logs than have been requested. If
   * omitted, the default is to upload all logs available after the startTime.
   */
  endTime?: Date;
}

/**
 * An interface representing UploadBatchServiceLogsResult.
 * @summary The result of uploading Batch service log files from a specific compute node.
 */
export interface UploadBatchServiceLogsResult {
  /**
   * The virtual directory within Azure Blob Storage container to which the Batch Service log
   * file(s) will be uploaded. The virtual directory name is part of the blob name for each log
   * file uploaded, and it is built based poolId, nodeId and a unique identifier.
   */
  virtualDirectoryName: string;
  /**
   * The number of log files which will be uploaded.
   */
  numberOfFilesUploaded: number;
}

/**
 * An interface representing NodeCounts.
 * @summary The number of nodes in each node state.
 */
export interface NodeCounts {
  /**
   * The number of nodes in the creating state.
   */
  creating: number;
  /**
   * The number of nodes in the idle state.
   */
  idle: number;
  /**
   * The number of nodes in the offline state.
   */
  offline: number;
  /**
   * The number of nodes in the preempted state.
   */
  preempted: number;
  /**
   * The count of nodes in the rebooting state.
   */
  rebooting: number;
  /**
   * The number of nodes in the reimaging state.
   */
  reimaging: number;
  /**
   * The number of nodes in the running state.
   */
  running: number;
  /**
   * The number of nodes in the starting state.
   */
  starting: number;
  /**
   * The number of nodes in the startTaskFailed state.
   */
  startTaskFailed: number;
  /**
   * The number of nodes in the leavingPool state.
   */
  leavingPool: number;
  /**
   * The number of nodes in the unknown state.
   */
  unknown: number;
  /**
   * The number of nodes in the unusable state.
   */
  unusable: number;
  /**
   * The number of nodes in the waitingForStartTask state.
   */
  waitingForStartTask: number;
  /**
   * The total number of nodes.
   */
  total: number;
}

/**
 * An interface representing PoolNodeCounts.
 * @summary The number of nodes in each state for a pool.
 */
export interface PoolNodeCounts {
  /**
   * The ID of the pool.
   */
  poolId: string;
  /**
   * The number of dedicated nodes in each state.
   */
  dedicated?: NodeCounts;
  /**
   * The number of low priority nodes in each state.
   */
  lowPriority?: NodeCounts;
}

/**
 * Additional parameters for list operation.
 */
export interface ApplicationListOptions {
  /**
   * The maximum number of items to return in the response. A maximum of 1000 applications can be
   * returned. Default value: 1000.
   */
  maxResults?: number;
  /**
   * The maximum time that the server can spend processing the request, in seconds. The default is
   * 30 seconds. Default value: 30.
   */
  timeout?: number;
  /**
   * The caller-generated request identity, in the form of a GUID with no decoration such as curly
   * braces, e.g. 9C4D50EE-2D56-4CD3-8152-34347DC9F2B0.
   */
  clientRequestId?: string;
  /**
   * Whether the server should return the client-request-id in the response. Default value: false.
   */
  returnClientRequestId?: boolean;
  /**
   * The time the request was issued. Client libraries typically set this to the current system
   * clock time; set it explicitly if you are calling the REST API directly.
   */
  ocpDate?: Date;
}

/**
 * Additional parameters for get operation.
 */
export interface ApplicationGetOptions {
  /**
   * The maximum time that the server can spend processing the request, in seconds. The default is
   * 30 seconds. Default value: 30.
   */
  timeout?: number;
  /**
   * The caller-generated request identity, in the form of a GUID with no decoration such as curly
   * braces, e.g. 9C4D50EE-2D56-4CD3-8152-34347DC9F2B0.
   */
  clientRequestId?: string;
  /**
   * Whether the server should return the client-request-id in the response. Default value: false.
   */
  returnClientRequestId?: boolean;
  /**
   * The time the request was issued. Client libraries typically set this to the current system
   * clock time; set it explicitly if you are calling the REST API directly.
   */
  ocpDate?: Date;
}

/**
 * Additional parameters for listUsageMetrics operation.
 */
export interface PoolListUsageMetricsOptions {
  /**
   * The earliest time from which to include metrics. This must be at least two and a half hours
   * before the current time. If not specified this defaults to the start time of the last
   * aggregation interval currently available.
   */
  startTime?: Date;
  /**
   * The latest time from which to include metrics. This must be at least two hours before the
   * current time. If not specified this defaults to the end time of the last aggregation interval
   * currently available.
   */
  endTime?: Date;
  /**
   * An OData $filter clause. For more information on constructing this filter, see
   * https://docs.microsoft.com/en-us/rest/api/batchservice/odata-filters-in-batch#list-account-usage-metrics.
   */
  filter?: string;
  /**
   * The maximum number of items to return in the response. A maximum of 1000 results will be
   * returned. Default value: 1000.
   */
  maxResults?: number;
  /**
   * The maximum time that the server can spend processing the request, in seconds. The default is
   * 30 seconds. Default value: 30.
   */
  timeout?: number;
  /**
   * The caller-generated request identity, in the form of a GUID with no decoration such as curly
   * braces, e.g. 9C4D50EE-2D56-4CD3-8152-34347DC9F2B0.
   */
  clientRequestId?: string;
  /**
   * Whether the server should return the client-request-id in the response. Default value: false.
   */
  returnClientRequestId?: boolean;
  /**
   * The time the request was issued. Client libraries typically set this to the current system
   * clock time; set it explicitly if you are calling the REST API directly.
   */
  ocpDate?: Date;
}

/**
 * Additional parameters for getAllLifetimeStatistics operation.
 */
export interface PoolGetAllLifetimeStatisticsOptions {
  /**
   * The maximum time that the server can spend processing the request, in seconds. The default is
   * 30 seconds. Default value: 30.
   */
  timeout?: number;
  /**
   * The caller-generated request identity, in the form of a GUID with no decoration such as curly
   * braces, e.g. 9C4D50EE-2D56-4CD3-8152-34347DC9F2B0.
   */
  clientRequestId?: string;
  /**
   * Whether the server should return the client-request-id in the response. Default value: false.
   */
  returnClientRequestId?: boolean;
  /**
   * The time the request was issued. Client libraries typically set this to the current system
   * clock time; set it explicitly if you are calling the REST API directly.
   */
  ocpDate?: Date;
}

/**
 * Additional parameters for add operation.
 */
export interface PoolAddOptions {
  /**
   * The maximum time that the server can spend processing the request, in seconds. The default is
   * 30 seconds. Default value: 30.
   */
  timeout?: number;
  /**
   * The caller-generated request identity, in the form of a GUID with no decoration such as curly
   * braces, e.g. 9C4D50EE-2D56-4CD3-8152-34347DC9F2B0.
   */
  clientRequestId?: string;
  /**
   * Whether the server should return the client-request-id in the response. Default value: false.
   */
  returnClientRequestId?: boolean;
  /**
   * The time the request was issued. Client libraries typically set this to the current system
   * clock time; set it explicitly if you are calling the REST API directly.
   */
  ocpDate?: Date;
}

/**
 * Additional parameters for list operation.
 */
export interface PoolListOptions {
  /**
   * An OData $filter clause. For more information on constructing this filter, see
   * https://docs.microsoft.com/en-us/rest/api/batchservice/odata-filters-in-batch#list-pools.
   */
  filter?: string;
  /**
   * An OData $select clause.
   */
  select?: string;
  /**
   * An OData $expand clause.
   */
  expand?: string;
  /**
   * The maximum number of items to return in the response. A maximum of 1000 pools can be
   * returned. Default value: 1000.
   */
  maxResults?: number;
  /**
   * The maximum time that the server can spend processing the request, in seconds. The default is
   * 30 seconds. Default value: 30.
   */
  timeout?: number;
  /**
   * The caller-generated request identity, in the form of a GUID with no decoration such as curly
   * braces, e.g. 9C4D50EE-2D56-4CD3-8152-34347DC9F2B0.
   */
  clientRequestId?: string;
  /**
   * Whether the server should return the client-request-id in the response. Default value: false.
   */
  returnClientRequestId?: boolean;
  /**
   * The time the request was issued. Client libraries typically set this to the current system
   * clock time; set it explicitly if you are calling the REST API directly.
   */
  ocpDate?: Date;
}

/**
 * Additional parameters for deleteMethod operation.
 */
export interface PoolDeleteMethodOptions {
  /**
   * The maximum time that the server can spend processing the request, in seconds. The default is
   * 30 seconds. Default value: 30.
   */
  timeout?: number;
  /**
   * The caller-generated request identity, in the form of a GUID with no decoration such as curly
   * braces, e.g. 9C4D50EE-2D56-4CD3-8152-34347DC9F2B0.
   */
  clientRequestId?: string;
  /**
   * Whether the server should return the client-request-id in the response. Default value: false.
   */
  returnClientRequestId?: boolean;
  /**
   * The time the request was issued. Client libraries typically set this to the current system
   * clock time; set it explicitly if you are calling the REST API directly.
   */
  ocpDate?: Date;
  /**
   * An ETag value associated with the version of the resource known to the client. The operation
   * will be performed only if the resource's current ETag on the service exactly matches the value
   * specified by the client.
   */
  ifMatch?: string;
  /**
   * An ETag value associated with the version of the resource known to the client. The operation
   * will be performed only if the resource's current ETag on the service does not match the value
   * specified by the client.
   */
  ifNoneMatch?: string;
  /**
   * A timestamp indicating the last modified time of the resource known to the client. The
   * operation will be performed only if the resource on the service has been modified since the
   * specified time.
   */
  ifModifiedSince?: Date;
  /**
   * A timestamp indicating the last modified time of the resource known to the client. The
   * operation will be performed only if the resource on the service has not been modified since
   * the specified time.
   */
  ifUnmodifiedSince?: Date;
}

/**
 * Additional parameters for exists operation.
 */
export interface PoolExistsOptions {
  /**
   * The maximum time that the server can spend processing the request, in seconds. The default is
   * 30 seconds. Default value: 30.
   */
  timeout?: number;
  /**
   * The caller-generated request identity, in the form of a GUID with no decoration such as curly
   * braces, e.g. 9C4D50EE-2D56-4CD3-8152-34347DC9F2B0.
   */
  clientRequestId?: string;
  /**
   * Whether the server should return the client-request-id in the response. Default value: false.
   */
  returnClientRequestId?: boolean;
  /**
   * The time the request was issued. Client libraries typically set this to the current system
   * clock time; set it explicitly if you are calling the REST API directly.
   */
  ocpDate?: Date;
  /**
   * An ETag value associated with the version of the resource known to the client. The operation
   * will be performed only if the resource's current ETag on the service exactly matches the value
   * specified by the client.
   */
  ifMatch?: string;
  /**
   * An ETag value associated with the version of the resource known to the client. The operation
   * will be performed only if the resource's current ETag on the service does not match the value
   * specified by the client.
   */
  ifNoneMatch?: string;
  /**
   * A timestamp indicating the last modified time of the resource known to the client. The
   * operation will be performed only if the resource on the service has been modified since the
   * specified time.
   */
  ifModifiedSince?: Date;
  /**
   * A timestamp indicating the last modified time of the resource known to the client. The
   * operation will be performed only if the resource on the service has not been modified since
   * the specified time.
   */
  ifUnmodifiedSince?: Date;
}

/**
 * Additional parameters for get operation.
 */
export interface PoolGetOptions {
  /**
   * An OData $select clause.
   */
  select?: string;
  /**
   * An OData $expand clause.
   */
  expand?: string;
  /**
   * The maximum time that the server can spend processing the request, in seconds. The default is
   * 30 seconds. Default value: 30.
   */
  timeout?: number;
  /**
   * The caller-generated request identity, in the form of a GUID with no decoration such as curly
   * braces, e.g. 9C4D50EE-2D56-4CD3-8152-34347DC9F2B0.
   */
  clientRequestId?: string;
  /**
   * Whether the server should return the client-request-id in the response. Default value: false.
   */
  returnClientRequestId?: boolean;
  /**
   * The time the request was issued. Client libraries typically set this to the current system
   * clock time; set it explicitly if you are calling the REST API directly.
   */
  ocpDate?: Date;
  /**
   * An ETag value associated with the version of the resource known to the client. The operation
   * will be performed only if the resource's current ETag on the service exactly matches the value
   * specified by the client.
   */
  ifMatch?: string;
  /**
   * An ETag value associated with the version of the resource known to the client. The operation
   * will be performed only if the resource's current ETag on the service does not match the value
   * specified by the client.
   */
  ifNoneMatch?: string;
  /**
   * A timestamp indicating the last modified time of the resource known to the client. The
   * operation will be performed only if the resource on the service has been modified since the
   * specified time.
   */
  ifModifiedSince?: Date;
  /**
   * A timestamp indicating the last modified time of the resource known to the client. The
   * operation will be performed only if the resource on the service has not been modified since
   * the specified time.
   */
  ifUnmodifiedSince?: Date;
}

/**
 * Additional parameters for patch operation.
 */
export interface PoolPatchOptions {
  /**
   * The maximum time that the server can spend processing the request, in seconds. The default is
   * 30 seconds. Default value: 30.
   */
  timeout?: number;
  /**
   * The caller-generated request identity, in the form of a GUID with no decoration such as curly
   * braces, e.g. 9C4D50EE-2D56-4CD3-8152-34347DC9F2B0.
   */
  clientRequestId?: string;
  /**
   * Whether the server should return the client-request-id in the response. Default value: false.
   */
  returnClientRequestId?: boolean;
  /**
   * The time the request was issued. Client libraries typically set this to the current system
   * clock time; set it explicitly if you are calling the REST API directly.
   */
  ocpDate?: Date;
  /**
   * An ETag value associated with the version of the resource known to the client. The operation
   * will be performed only if the resource's current ETag on the service exactly matches the value
   * specified by the client.
   */
  ifMatch?: string;
  /**
   * An ETag value associated with the version of the resource known to the client. The operation
   * will be performed only if the resource's current ETag on the service does not match the value
   * specified by the client.
   */
  ifNoneMatch?: string;
  /**
   * A timestamp indicating the last modified time of the resource known to the client. The
   * operation will be performed only if the resource on the service has been modified since the
   * specified time.
   */
  ifModifiedSince?: Date;
  /**
   * A timestamp indicating the last modified time of the resource known to the client. The
   * operation will be performed only if the resource on the service has not been modified since
   * the specified time.
   */
  ifUnmodifiedSince?: Date;
}

/**
 * Additional parameters for disableAutoScale operation.
 */
export interface PoolDisableAutoScaleOptions {
  /**
   * The maximum time that the server can spend processing the request, in seconds. The default is
   * 30 seconds. Default value: 30.
   */
  timeout?: number;
  /**
   * The caller-generated request identity, in the form of a GUID with no decoration such as curly
   * braces, e.g. 9C4D50EE-2D56-4CD3-8152-34347DC9F2B0.
   */
  clientRequestId?: string;
  /**
   * Whether the server should return the client-request-id in the response. Default value: false.
   */
  returnClientRequestId?: boolean;
  /**
   * The time the request was issued. Client libraries typically set this to the current system
   * clock time; set it explicitly if you are calling the REST API directly.
   */
  ocpDate?: Date;
}

/**
 * Additional parameters for enableAutoScale operation.
 */
export interface PoolEnableAutoScaleOptions {
  /**
   * The maximum time that the server can spend processing the request, in seconds. The default is
   * 30 seconds. Default value: 30.
   */
  timeout?: number;
  /**
   * The caller-generated request identity, in the form of a GUID with no decoration such as curly
   * braces, e.g. 9C4D50EE-2D56-4CD3-8152-34347DC9F2B0.
   */
  clientRequestId?: string;
  /**
   * Whether the server should return the client-request-id in the response. Default value: false.
   */
  returnClientRequestId?: boolean;
  /**
   * The time the request was issued. Client libraries typically set this to the current system
   * clock time; set it explicitly if you are calling the REST API directly.
   */
  ocpDate?: Date;
  /**
   * An ETag value associated with the version of the resource known to the client. The operation
   * will be performed only if the resource's current ETag on the service exactly matches the value
   * specified by the client.
   */
  ifMatch?: string;
  /**
   * An ETag value associated with the version of the resource known to the client. The operation
   * will be performed only if the resource's current ETag on the service does not match the value
   * specified by the client.
   */
  ifNoneMatch?: string;
  /**
   * A timestamp indicating the last modified time of the resource known to the client. The
   * operation will be performed only if the resource on the service has been modified since the
   * specified time.
   */
  ifModifiedSince?: Date;
  /**
   * A timestamp indicating the last modified time of the resource known to the client. The
   * operation will be performed only if the resource on the service has not been modified since
   * the specified time.
   */
  ifUnmodifiedSince?: Date;
}

/**
 * Additional parameters for evaluateAutoScale operation.
 */
export interface PoolEvaluateAutoScaleOptions {
  /**
   * The maximum time that the server can spend processing the request, in seconds. The default is
   * 30 seconds. Default value: 30.
   */
  timeout?: number;
  /**
   * The caller-generated request identity, in the form of a GUID with no decoration such as curly
   * braces, e.g. 9C4D50EE-2D56-4CD3-8152-34347DC9F2B0.
   */
  clientRequestId?: string;
  /**
   * Whether the server should return the client-request-id in the response. Default value: false.
   */
  returnClientRequestId?: boolean;
  /**
   * The time the request was issued. Client libraries typically set this to the current system
   * clock time; set it explicitly if you are calling the REST API directly.
   */
  ocpDate?: Date;
}

/**
 * Additional parameters for resize operation.
 */
export interface PoolResizeOptions {
  /**
   * The maximum time that the server can spend processing the request, in seconds. The default is
   * 30 seconds. Default value: 30.
   */
  timeout?: number;
  /**
   * The caller-generated request identity, in the form of a GUID with no decoration such as curly
   * braces, e.g. 9C4D50EE-2D56-4CD3-8152-34347DC9F2B0.
   */
  clientRequestId?: string;
  /**
   * Whether the server should return the client-request-id in the response. Default value: false.
   */
  returnClientRequestId?: boolean;
  /**
   * The time the request was issued. Client libraries typically set this to the current system
   * clock time; set it explicitly if you are calling the REST API directly.
   */
  ocpDate?: Date;
  /**
   * An ETag value associated with the version of the resource known to the client. The operation
   * will be performed only if the resource's current ETag on the service exactly matches the value
   * specified by the client.
   */
  ifMatch?: string;
  /**
   * An ETag value associated with the version of the resource known to the client. The operation
   * will be performed only if the resource's current ETag on the service does not match the value
   * specified by the client.
   */
  ifNoneMatch?: string;
  /**
   * A timestamp indicating the last modified time of the resource known to the client. The
   * operation will be performed only if the resource on the service has been modified since the
   * specified time.
   */
  ifModifiedSince?: Date;
  /**
   * A timestamp indicating the last modified time of the resource known to the client. The
   * operation will be performed only if the resource on the service has not been modified since
   * the specified time.
   */
  ifUnmodifiedSince?: Date;
}

/**
 * Additional parameters for stopResize operation.
 */
export interface PoolStopResizeOptions {
  /**
   * The maximum time that the server can spend processing the request, in seconds. The default is
   * 30 seconds. Default value: 30.
   */
  timeout?: number;
  /**
   * The caller-generated request identity, in the form of a GUID with no decoration such as curly
   * braces, e.g. 9C4D50EE-2D56-4CD3-8152-34347DC9F2B0.
   */
  clientRequestId?: string;
  /**
   * Whether the server should return the client-request-id in the response. Default value: false.
   */
  returnClientRequestId?: boolean;
  /**
   * The time the request was issued. Client libraries typically set this to the current system
   * clock time; set it explicitly if you are calling the REST API directly.
   */
  ocpDate?: Date;
  /**
   * An ETag value associated with the version of the resource known to the client. The operation
   * will be performed only if the resource's current ETag on the service exactly matches the value
   * specified by the client.
   */
  ifMatch?: string;
  /**
   * An ETag value associated with the version of the resource known to the client. The operation
   * will be performed only if the resource's current ETag on the service does not match the value
   * specified by the client.
   */
  ifNoneMatch?: string;
  /**
   * A timestamp indicating the last modified time of the resource known to the client. The
   * operation will be performed only if the resource on the service has been modified since the
   * specified time.
   */
  ifModifiedSince?: Date;
  /**
   * A timestamp indicating the last modified time of the resource known to the client. The
   * operation will be performed only if the resource on the service has not been modified since
   * the specified time.
   */
  ifUnmodifiedSince?: Date;
}

/**
 * Additional parameters for updateProperties operation.
 */
export interface PoolUpdatePropertiesOptions {
  /**
   * The maximum time that the server can spend processing the request, in seconds. The default is
   * 30 seconds. Default value: 30.
   */
  timeout?: number;
  /**
   * The caller-generated request identity, in the form of a GUID with no decoration such as curly
   * braces, e.g. 9C4D50EE-2D56-4CD3-8152-34347DC9F2B0.
   */
  clientRequestId?: string;
  /**
   * Whether the server should return the client-request-id in the response. Default value: false.
   */
  returnClientRequestId?: boolean;
  /**
   * The time the request was issued. Client libraries typically set this to the current system
   * clock time; set it explicitly if you are calling the REST API directly.
   */
  ocpDate?: Date;
}

/**
 * Additional parameters for removeNodes operation.
 */
export interface PoolRemoveNodesOptions {
  /**
   * The maximum time that the server can spend processing the request, in seconds. The default is
   * 30 seconds. Default value: 30.
   */
  timeout?: number;
  /**
   * The caller-generated request identity, in the form of a GUID with no decoration such as curly
   * braces, e.g. 9C4D50EE-2D56-4CD3-8152-34347DC9F2B0.
   */
  clientRequestId?: string;
  /**
   * Whether the server should return the client-request-id in the response. Default value: false.
   */
  returnClientRequestId?: boolean;
  /**
   * The time the request was issued. Client libraries typically set this to the current system
   * clock time; set it explicitly if you are calling the REST API directly.
   */
  ocpDate?: Date;
  /**
   * An ETag value associated with the version of the resource known to the client. The operation
   * will be performed only if the resource's current ETag on the service exactly matches the value
   * specified by the client.
   */
  ifMatch?: string;
  /**
   * An ETag value associated with the version of the resource known to the client. The operation
   * will be performed only if the resource's current ETag on the service does not match the value
   * specified by the client.
   */
  ifNoneMatch?: string;
  /**
   * A timestamp indicating the last modified time of the resource known to the client. The
   * operation will be performed only if the resource on the service has been modified since the
   * specified time.
   */
  ifModifiedSince?: Date;
  /**
   * A timestamp indicating the last modified time of the resource known to the client. The
   * operation will be performed only if the resource on the service has not been modified since
   * the specified time.
   */
  ifUnmodifiedSince?: Date;
}

/**
 * Additional parameters for listNodeAgentSkus operation.
 */
export interface AccountListNodeAgentSkusOptions {
  /**
   * An OData $filter clause. For more information on constructing this filter, see
   * https://docs.microsoft.com/en-us/rest/api/batchservice/odata-filters-in-batch#list-node-agent-skus.
   */
  filter?: string;
  /**
   * The maximum number of items to return in the response. A maximum of 1000 results will be
   * returned. Default value: 1000.
   */
  maxResults?: number;
  /**
   * The maximum time that the server can spend processing the request, in seconds. The default is
   * 30 seconds. Default value: 30.
   */
  timeout?: number;
  /**
   * The caller-generated request identity, in the form of a GUID with no decoration such as curly
   * braces, e.g. 9C4D50EE-2D56-4CD3-8152-34347DC9F2B0.
   */
  clientRequestId?: string;
  /**
   * Whether the server should return the client-request-id in the response. Default value: false.
   */
  returnClientRequestId?: boolean;
  /**
   * The time the request was issued. Client libraries typically set this to the current system
   * clock time; set it explicitly if you are calling the REST API directly.
   */
  ocpDate?: Date;
}

/**
 * Additional parameters for listPoolNodeCounts operation.
 */
export interface AccountListPoolNodeCountsOptions {
  /**
   * An OData $filter clause. For more information on constructing this filter, see
   * https://docs.microsoft.com/en-us/rest/api/batchservice/odata-filters-in-batch.
   */
  filter?: string;
  /**
   * The maximum number of items to return in the response. Default value: 10.
   */
  maxResults?: number;
  /**
   * The maximum time that the server can spend processing the request, in seconds. The default is
   * 30 seconds. Default value: 30.
   */
  timeout?: number;
  /**
   * The caller-generated request identity, in the form of a GUID with no decoration such as curly
   * braces, e.g. 9C4D50EE-2D56-4CD3-8152-34347DC9F2B0.
   */
  clientRequestId?: string;
  /**
   * Whether the server should return the client-request-id in the response. Default value: false.
   */
  returnClientRequestId?: boolean;
  /**
   * The time the request was issued. Client libraries typically set this to the current system
   * clock time; set it explicitly if you are calling the REST API directly.
   */
  ocpDate?: Date;
}

/**
 * Additional parameters for getAllLifetimeStatistics operation.
 */
export interface JobGetAllLifetimeStatisticsOptions {
  /**
   * The maximum time that the server can spend processing the request, in seconds. The default is
   * 30 seconds. Default value: 30.
   */
  timeout?: number;
  /**
   * The caller-generated request identity, in the form of a GUID with no decoration such as curly
   * braces, e.g. 9C4D50EE-2D56-4CD3-8152-34347DC9F2B0.
   */
  clientRequestId?: string;
  /**
   * Whether the server should return the client-request-id in the response. Default value: false.
   */
  returnClientRequestId?: boolean;
  /**
   * The time the request was issued. Client libraries typically set this to the current system
   * clock time; set it explicitly if you are calling the REST API directly.
   */
  ocpDate?: Date;
}

/**
 * Additional parameters for deleteMethod operation.
 */
export interface JobDeleteMethodOptions {
  /**
   * The maximum time that the server can spend processing the request, in seconds. The default is
   * 30 seconds. Default value: 30.
   */
  timeout?: number;
  /**
   * The caller-generated request identity, in the form of a GUID with no decoration such as curly
   * braces, e.g. 9C4D50EE-2D56-4CD3-8152-34347DC9F2B0.
   */
  clientRequestId?: string;
  /**
   * Whether the server should return the client-request-id in the response. Default value: false.
   */
  returnClientRequestId?: boolean;
  /**
   * The time the request was issued. Client libraries typically set this to the current system
   * clock time; set it explicitly if you are calling the REST API directly.
   */
  ocpDate?: Date;
  /**
   * An ETag value associated with the version of the resource known to the client. The operation
   * will be performed only if the resource's current ETag on the service exactly matches the value
   * specified by the client.
   */
  ifMatch?: string;
  /**
   * An ETag value associated with the version of the resource known to the client. The operation
   * will be performed only if the resource's current ETag on the service does not match the value
   * specified by the client.
   */
  ifNoneMatch?: string;
  /**
   * A timestamp indicating the last modified time of the resource known to the client. The
   * operation will be performed only if the resource on the service has been modified since the
   * specified time.
   */
  ifModifiedSince?: Date;
  /**
   * A timestamp indicating the last modified time of the resource known to the client. The
   * operation will be performed only if the resource on the service has not been modified since
   * the specified time.
   */
  ifUnmodifiedSince?: Date;
}

/**
 * Additional parameters for get operation.
 */
export interface JobGetOptions {
  /**
   * An OData $select clause.
   */
  select?: string;
  /**
   * An OData $expand clause.
   */
  expand?: string;
  /**
   * The maximum time that the server can spend processing the request, in seconds. The default is
   * 30 seconds. Default value: 30.
   */
  timeout?: number;
  /**
   * The caller-generated request identity, in the form of a GUID with no decoration such as curly
   * braces, e.g. 9C4D50EE-2D56-4CD3-8152-34347DC9F2B0.
   */
  clientRequestId?: string;
  /**
   * Whether the server should return the client-request-id in the response. Default value: false.
   */
  returnClientRequestId?: boolean;
  /**
   * The time the request was issued. Client libraries typically set this to the current system
   * clock time; set it explicitly if you are calling the REST API directly.
   */
  ocpDate?: Date;
  /**
   * An ETag value associated with the version of the resource known to the client. The operation
   * will be performed only if the resource's current ETag on the service exactly matches the value
   * specified by the client.
   */
  ifMatch?: string;
  /**
   * An ETag value associated with the version of the resource known to the client. The operation
   * will be performed only if the resource's current ETag on the service does not match the value
   * specified by the client.
   */
  ifNoneMatch?: string;
  /**
   * A timestamp indicating the last modified time of the resource known to the client. The
   * operation will be performed only if the resource on the service has been modified since the
   * specified time.
   */
  ifModifiedSince?: Date;
  /**
   * A timestamp indicating the last modified time of the resource known to the client. The
   * operation will be performed only if the resource on the service has not been modified since
   * the specified time.
   */
  ifUnmodifiedSince?: Date;
}

/**
 * Additional parameters for patch operation.
 */
export interface JobPatchOptions {
  /**
   * The maximum time that the server can spend processing the request, in seconds. The default is
   * 30 seconds. Default value: 30.
   */
  timeout?: number;
  /**
   * The caller-generated request identity, in the form of a GUID with no decoration such as curly
   * braces, e.g. 9C4D50EE-2D56-4CD3-8152-34347DC9F2B0.
   */
  clientRequestId?: string;
  /**
   * Whether the server should return the client-request-id in the response. Default value: false.
   */
  returnClientRequestId?: boolean;
  /**
   * The time the request was issued. Client libraries typically set this to the current system
   * clock time; set it explicitly if you are calling the REST API directly.
   */
  ocpDate?: Date;
  /**
   * An ETag value associated with the version of the resource known to the client. The operation
   * will be performed only if the resource's current ETag on the service exactly matches the value
   * specified by the client.
   */
  ifMatch?: string;
  /**
   * An ETag value associated with the version of the resource known to the client. The operation
   * will be performed only if the resource's current ETag on the service does not match the value
   * specified by the client.
   */
  ifNoneMatch?: string;
  /**
   * A timestamp indicating the last modified time of the resource known to the client. The
   * operation will be performed only if the resource on the service has been modified since the
   * specified time.
   */
  ifModifiedSince?: Date;
  /**
   * A timestamp indicating the last modified time of the resource known to the client. The
   * operation will be performed only if the resource on the service has not been modified since
   * the specified time.
   */
  ifUnmodifiedSince?: Date;
}

/**
 * Additional parameters for update operation.
 */
export interface JobUpdateOptions {
  /**
   * The maximum time that the server can spend processing the request, in seconds. The default is
   * 30 seconds. Default value: 30.
   */
  timeout?: number;
  /**
   * The caller-generated request identity, in the form of a GUID with no decoration such as curly
   * braces, e.g. 9C4D50EE-2D56-4CD3-8152-34347DC9F2B0.
   */
  clientRequestId?: string;
  /**
   * Whether the server should return the client-request-id in the response. Default value: false.
   */
  returnClientRequestId?: boolean;
  /**
   * The time the request was issued. Client libraries typically set this to the current system
   * clock time; set it explicitly if you are calling the REST API directly.
   */
  ocpDate?: Date;
  /**
   * An ETag value associated with the version of the resource known to the client. The operation
   * will be performed only if the resource's current ETag on the service exactly matches the value
   * specified by the client.
   */
  ifMatch?: string;
  /**
   * An ETag value associated with the version of the resource known to the client. The operation
   * will be performed only if the resource's current ETag on the service does not match the value
   * specified by the client.
   */
  ifNoneMatch?: string;
  /**
   * A timestamp indicating the last modified time of the resource known to the client. The
   * operation will be performed only if the resource on the service has been modified since the
   * specified time.
   */
  ifModifiedSince?: Date;
  /**
   * A timestamp indicating the last modified time of the resource known to the client. The
   * operation will be performed only if the resource on the service has not been modified since
   * the specified time.
   */
  ifUnmodifiedSince?: Date;
}

/**
 * Additional parameters for disable operation.
 */
export interface JobDisableOptions {
  /**
   * The maximum time that the server can spend processing the request, in seconds. The default is
   * 30 seconds. Default value: 30.
   */
  timeout?: number;
  /**
   * The caller-generated request identity, in the form of a GUID with no decoration such as curly
   * braces, e.g. 9C4D50EE-2D56-4CD3-8152-34347DC9F2B0.
   */
  clientRequestId?: string;
  /**
   * Whether the server should return the client-request-id in the response. Default value: false.
   */
  returnClientRequestId?: boolean;
  /**
   * The time the request was issued. Client libraries typically set this to the current system
   * clock time; set it explicitly if you are calling the REST API directly.
   */
  ocpDate?: Date;
  /**
   * An ETag value associated with the version of the resource known to the client. The operation
   * will be performed only if the resource's current ETag on the service exactly matches the value
   * specified by the client.
   */
  ifMatch?: string;
  /**
   * An ETag value associated with the version of the resource known to the client. The operation
   * will be performed only if the resource's current ETag on the service does not match the value
   * specified by the client.
   */
  ifNoneMatch?: string;
  /**
   * A timestamp indicating the last modified time of the resource known to the client. The
   * operation will be performed only if the resource on the service has been modified since the
   * specified time.
   */
  ifModifiedSince?: Date;
  /**
   * A timestamp indicating the last modified time of the resource known to the client. The
   * operation will be performed only if the resource on the service has not been modified since
   * the specified time.
   */
  ifUnmodifiedSince?: Date;
}

/**
 * Additional parameters for enable operation.
 */
export interface JobEnableOptions {
  /**
   * The maximum time that the server can spend processing the request, in seconds. The default is
   * 30 seconds. Default value: 30.
   */
  timeout?: number;
  /**
   * The caller-generated request identity, in the form of a GUID with no decoration such as curly
   * braces, e.g. 9C4D50EE-2D56-4CD3-8152-34347DC9F2B0.
   */
  clientRequestId?: string;
  /**
   * Whether the server should return the client-request-id in the response. Default value: false.
   */
  returnClientRequestId?: boolean;
  /**
   * The time the request was issued. Client libraries typically set this to the current system
   * clock time; set it explicitly if you are calling the REST API directly.
   */
  ocpDate?: Date;
  /**
   * An ETag value associated with the version of the resource known to the client. The operation
   * will be performed only if the resource's current ETag on the service exactly matches the value
   * specified by the client.
   */
  ifMatch?: string;
  /**
   * An ETag value associated with the version of the resource known to the client. The operation
   * will be performed only if the resource's current ETag on the service does not match the value
   * specified by the client.
   */
  ifNoneMatch?: string;
  /**
   * A timestamp indicating the last modified time of the resource known to the client. The
   * operation will be performed only if the resource on the service has been modified since the
   * specified time.
   */
  ifModifiedSince?: Date;
  /**
   * A timestamp indicating the last modified time of the resource known to the client. The
   * operation will be performed only if the resource on the service has not been modified since
   * the specified time.
   */
  ifUnmodifiedSince?: Date;
}

/**
 * Additional parameters for terminate operation.
 */
export interface JobTerminateOptions {
  /**
   * The maximum time that the server can spend processing the request, in seconds. The default is
   * 30 seconds. Default value: 30.
   */
  timeout?: number;
  /**
   * The caller-generated request identity, in the form of a GUID with no decoration such as curly
   * braces, e.g. 9C4D50EE-2D56-4CD3-8152-34347DC9F2B0.
   */
  clientRequestId?: string;
  /**
   * Whether the server should return the client-request-id in the response. Default value: false.
   */
  returnClientRequestId?: boolean;
  /**
   * The time the request was issued. Client libraries typically set this to the current system
   * clock time; set it explicitly if you are calling the REST API directly.
   */
  ocpDate?: Date;
  /**
   * An ETag value associated with the version of the resource known to the client. The operation
   * will be performed only if the resource's current ETag on the service exactly matches the value
   * specified by the client.
   */
  ifMatch?: string;
  /**
   * An ETag value associated with the version of the resource known to the client. The operation
   * will be performed only if the resource's current ETag on the service does not match the value
   * specified by the client.
   */
  ifNoneMatch?: string;
  /**
   * A timestamp indicating the last modified time of the resource known to the client. The
   * operation will be performed only if the resource on the service has been modified since the
   * specified time.
   */
  ifModifiedSince?: Date;
  /**
   * A timestamp indicating the last modified time of the resource known to the client. The
   * operation will be performed only if the resource on the service has not been modified since
   * the specified time.
   */
  ifUnmodifiedSince?: Date;
}

/**
 * Additional parameters for add operation.
 */
export interface JobAddOptions {
  /**
   * The maximum time that the server can spend processing the request, in seconds. The default is
   * 30 seconds. Default value: 30.
   */
  timeout?: number;
  /**
   * The caller-generated request identity, in the form of a GUID with no decoration such as curly
   * braces, e.g. 9C4D50EE-2D56-4CD3-8152-34347DC9F2B0.
   */
  clientRequestId?: string;
  /**
   * Whether the server should return the client-request-id in the response. Default value: false.
   */
  returnClientRequestId?: boolean;
  /**
   * The time the request was issued. Client libraries typically set this to the current system
   * clock time; set it explicitly if you are calling the REST API directly.
   */
  ocpDate?: Date;
}

/**
 * Additional parameters for list operation.
 */
export interface JobListOptions {
  /**
   * An OData $filter clause. For more information on constructing this filter, see
   * https://docs.microsoft.com/en-us/rest/api/batchservice/odata-filters-in-batch#list-jobs.
   */
  filter?: string;
  /**
   * An OData $select clause.
   */
  select?: string;
  /**
   * An OData $expand clause.
   */
  expand?: string;
  /**
   * The maximum number of items to return in the response. A maximum of 1000 jobs can be returned.
   * Default value: 1000.
   */
  maxResults?: number;
  /**
   * The maximum time that the server can spend processing the request, in seconds. The default is
   * 30 seconds. Default value: 30.
   */
  timeout?: number;
  /**
   * The caller-generated request identity, in the form of a GUID with no decoration such as curly
   * braces, e.g. 9C4D50EE-2D56-4CD3-8152-34347DC9F2B0.
   */
  clientRequestId?: string;
  /**
   * Whether the server should return the client-request-id in the response. Default value: false.
   */
  returnClientRequestId?: boolean;
  /**
   * The time the request was issued. Client libraries typically set this to the current system
   * clock time; set it explicitly if you are calling the REST API directly.
   */
  ocpDate?: Date;
}

/**
 * Additional parameters for listFromJobSchedule operation.
 */
export interface JobListFromJobScheduleOptions {
  /**
   * An OData $filter clause. For more information on constructing this filter, see
   * https://docs.microsoft.com/en-us/rest/api/batchservice/odata-filters-in-batch#list-jobs-in-a-job-schedule.
   */
  filter?: string;
  /**
   * An OData $select clause.
   */
  select?: string;
  /**
   * An OData $expand clause.
   */
  expand?: string;
  /**
   * The maximum number of items to return in the response. A maximum of 1000 jobs can be returned.
   * Default value: 1000.
   */
  maxResults?: number;
  /**
   * The maximum time that the server can spend processing the request, in seconds. The default is
   * 30 seconds. Default value: 30.
   */
  timeout?: number;
  /**
   * The caller-generated request identity, in the form of a GUID with no decoration such as curly
   * braces, e.g. 9C4D50EE-2D56-4CD3-8152-34347DC9F2B0.
   */
  clientRequestId?: string;
  /**
   * Whether the server should return the client-request-id in the response. Default value: false.
   */
  returnClientRequestId?: boolean;
  /**
   * The time the request was issued. Client libraries typically set this to the current system
   * clock time; set it explicitly if you are calling the REST API directly.
   */
  ocpDate?: Date;
}

/**
 * Additional parameters for listPreparationAndReleaseTaskStatus operation.
 */
export interface JobListPreparationAndReleaseTaskStatusOptions {
  /**
   * An OData $filter clause. For more information on constructing this filter, see
   * https://docs.microsoft.com/en-us/rest/api/batchservice/odata-filters-in-batch#list-job-preparation-and-release-status.
   */
  filter?: string;
  /**
   * An OData $select clause.
   */
  select?: string;
  /**
   * The maximum number of items to return in the response. A maximum of 1000 tasks can be
   * returned. Default value: 1000.
   */
  maxResults?: number;
  /**
   * The maximum time that the server can spend processing the request, in seconds. The default is
   * 30 seconds. Default value: 30.
   */
  timeout?: number;
  /**
   * The caller-generated request identity, in the form of a GUID with no decoration such as curly
   * braces, e.g. 9C4D50EE-2D56-4CD3-8152-34347DC9F2B0.
   */
  clientRequestId?: string;
  /**
   * Whether the server should return the client-request-id in the response. Default value: false.
   */
  returnClientRequestId?: boolean;
  /**
   * The time the request was issued. Client libraries typically set this to the current system
   * clock time; set it explicitly if you are calling the REST API directly.
   */
  ocpDate?: Date;
}

/**
 * Additional parameters for getTaskCounts operation.
 */
export interface JobGetTaskCountsOptions {
  /**
   * The maximum time that the server can spend processing the request, in seconds. The default is
   * 30 seconds. Default value: 30.
   */
  timeout?: number;
  /**
   * The caller-generated request identity, in the form of a GUID with no decoration such as curly
   * braces, e.g. 9C4D50EE-2D56-4CD3-8152-34347DC9F2B0.
   */
  clientRequestId?: string;
  /**
   * Whether the server should return the client-request-id in the response. Default value: false.
   */
  returnClientRequestId?: boolean;
  /**
   * The time the request was issued. Client libraries typically set this to the current system
   * clock time; set it explicitly if you are calling the REST API directly.
   */
  ocpDate?: Date;
}

/**
 * Additional parameters for add operation.
 */
export interface CertificateAddOptions {
  /**
   * The maximum time that the server can spend processing the request, in seconds. The default is
   * 30 seconds. Default value: 30.
   */
  timeout?: number;
  /**
   * The caller-generated request identity, in the form of a GUID with no decoration such as curly
   * braces, e.g. 9C4D50EE-2D56-4CD3-8152-34347DC9F2B0.
   */
  clientRequestId?: string;
  /**
   * Whether the server should return the client-request-id in the response. Default value: false.
   */
  returnClientRequestId?: boolean;
  /**
   * The time the request was issued. Client libraries typically set this to the current system
   * clock time; set it explicitly if you are calling the REST API directly.
   */
  ocpDate?: Date;
}

/**
 * Additional parameters for list operation.
 */
export interface CertificateListOptions {
  /**
   * An OData $filter clause. For more information on constructing this filter, see
   * https://docs.microsoft.com/en-us/rest/api/batchservice/odata-filters-in-batch#list-certificates.
   */
  filter?: string;
  /**
   * An OData $select clause.
   */
  select?: string;
  /**
   * The maximum number of items to return in the response. A maximum of 1000 certificates can be
   * returned. Default value: 1000.
   */
  maxResults?: number;
  /**
   * The maximum time that the server can spend processing the request, in seconds. The default is
   * 30 seconds. Default value: 30.
   */
  timeout?: number;
  /**
   * The caller-generated request identity, in the form of a GUID with no decoration such as curly
   * braces, e.g. 9C4D50EE-2D56-4CD3-8152-34347DC9F2B0.
   */
  clientRequestId?: string;
  /**
   * Whether the server should return the client-request-id in the response. Default value: false.
   */
  returnClientRequestId?: boolean;
  /**
   * The time the request was issued. Client libraries typically set this to the current system
   * clock time; set it explicitly if you are calling the REST API directly.
   */
  ocpDate?: Date;
}

/**
 * Additional parameters for cancelDeletion operation.
 */
export interface CertificateCancelDeletionOptions {
  /**
   * The maximum time that the server can spend processing the request, in seconds. The default is
   * 30 seconds. Default value: 30.
   */
  timeout?: number;
  /**
   * The caller-generated request identity, in the form of a GUID with no decoration such as curly
   * braces, e.g. 9C4D50EE-2D56-4CD3-8152-34347DC9F2B0.
   */
  clientRequestId?: string;
  /**
   * Whether the server should return the client-request-id in the response. Default value: false.
   */
  returnClientRequestId?: boolean;
  /**
   * The time the request was issued. Client libraries typically set this to the current system
   * clock time; set it explicitly if you are calling the REST API directly.
   */
  ocpDate?: Date;
}

/**
 * Additional parameters for deleteMethod operation.
 */
export interface CertificateDeleteMethodOptions {
  /**
   * The maximum time that the server can spend processing the request, in seconds. The default is
   * 30 seconds. Default value: 30.
   */
  timeout?: number;
  /**
   * The caller-generated request identity, in the form of a GUID with no decoration such as curly
   * braces, e.g. 9C4D50EE-2D56-4CD3-8152-34347DC9F2B0.
   */
  clientRequestId?: string;
  /**
   * Whether the server should return the client-request-id in the response. Default value: false.
   */
  returnClientRequestId?: boolean;
  /**
   * The time the request was issued. Client libraries typically set this to the current system
   * clock time; set it explicitly if you are calling the REST API directly.
   */
  ocpDate?: Date;
}

/**
 * Additional parameters for get operation.
 */
export interface CertificateGetOptions {
  /**
   * An OData $select clause.
   */
  select?: string;
  /**
   * The maximum time that the server can spend processing the request, in seconds. The default is
   * 30 seconds. Default value: 30.
   */
  timeout?: number;
  /**
   * The caller-generated request identity, in the form of a GUID with no decoration such as curly
   * braces, e.g. 9C4D50EE-2D56-4CD3-8152-34347DC9F2B0.
   */
  clientRequestId?: string;
  /**
   * Whether the server should return the client-request-id in the response. Default value: false.
   */
  returnClientRequestId?: boolean;
  /**
   * The time the request was issued. Client libraries typically set this to the current system
   * clock time; set it explicitly if you are calling the REST API directly.
   */
  ocpDate?: Date;
}

/**
 * Additional parameters for deleteFromTask operation.
 */
export interface FileDeleteFromTaskOptions {
  /**
   * The maximum time that the server can spend processing the request, in seconds. The default is
   * 30 seconds. Default value: 30.
   */
  timeout?: number;
  /**
   * The caller-generated request identity, in the form of a GUID with no decoration such as curly
   * braces, e.g. 9C4D50EE-2D56-4CD3-8152-34347DC9F2B0.
   */
  clientRequestId?: string;
  /**
   * Whether the server should return the client-request-id in the response. Default value: false.
   */
  returnClientRequestId?: boolean;
  /**
   * The time the request was issued. Client libraries typically set this to the current system
   * clock time; set it explicitly if you are calling the REST API directly.
   */
  ocpDate?: Date;
}

/**
 * Additional parameters for getFromTask operation.
 */
export interface FileGetFromTaskOptions {
  /**
   * The maximum time that the server can spend processing the request, in seconds. The default is
   * 30 seconds. Default value: 30.
   */
  timeout?: number;
  /**
   * The caller-generated request identity, in the form of a GUID with no decoration such as curly
   * braces, e.g. 9C4D50EE-2D56-4CD3-8152-34347DC9F2B0.
   */
  clientRequestId?: string;
  /**
   * Whether the server should return the client-request-id in the response. Default value: false.
   */
  returnClientRequestId?: boolean;
  /**
   * The time the request was issued. Client libraries typically set this to the current system
   * clock time; set it explicitly if you are calling the REST API directly.
   */
  ocpDate?: Date;
  /**
   * The byte range to be retrieved. The default is to retrieve the entire file. The format is
   * bytes=startRange-endRange.
   */
  ocpRange?: string;
  /**
   * A timestamp indicating the last modified time of the resource known to the client. The
   * operation will be performed only if the resource on the service has been modified since the
   * specified time.
   */
  ifModifiedSince?: Date;
  /**
   * A timestamp indicating the last modified time of the resource known to the client. The
   * operation will be performed only if the resource on the service has not been modified since
   * the specified time.
   */
  ifUnmodifiedSince?: Date;
}

/**
 * Additional parameters for getPropertiesFromTask operation.
 */
export interface FileGetPropertiesFromTaskOptions {
  /**
   * The maximum time that the server can spend processing the request, in seconds. The default is
   * 30 seconds. Default value: 30.
   */
  timeout?: number;
  /**
   * The caller-generated request identity, in the form of a GUID with no decoration such as curly
   * braces, e.g. 9C4D50EE-2D56-4CD3-8152-34347DC9F2B0.
   */
  clientRequestId?: string;
  /**
   * Whether the server should return the client-request-id in the response. Default value: false.
   */
  returnClientRequestId?: boolean;
  /**
   * The time the request was issued. Client libraries typically set this to the current system
   * clock time; set it explicitly if you are calling the REST API directly.
   */
  ocpDate?: Date;
  /**
   * A timestamp indicating the last modified time of the resource known to the client. The
   * operation will be performed only if the resource on the service has been modified since the
   * specified time.
   */
  ifModifiedSince?: Date;
  /**
   * A timestamp indicating the last modified time of the resource known to the client. The
   * operation will be performed only if the resource on the service has not been modified since
   * the specified time.
   */
  ifUnmodifiedSince?: Date;
}

/**
 * Additional parameters for deleteFromComputeNode operation.
 */
export interface FileDeleteFromComputeNodeOptions {
  /**
   * The maximum time that the server can spend processing the request, in seconds. The default is
   * 30 seconds. Default value: 30.
   */
  timeout?: number;
  /**
   * The caller-generated request identity, in the form of a GUID with no decoration such as curly
   * braces, e.g. 9C4D50EE-2D56-4CD3-8152-34347DC9F2B0.
   */
  clientRequestId?: string;
  /**
   * Whether the server should return the client-request-id in the response. Default value: false.
   */
  returnClientRequestId?: boolean;
  /**
   * The time the request was issued. Client libraries typically set this to the current system
   * clock time; set it explicitly if you are calling the REST API directly.
   */
  ocpDate?: Date;
}

/**
 * Additional parameters for getFromComputeNode operation.
 */
export interface FileGetFromComputeNodeOptions {
  /**
   * The maximum time that the server can spend processing the request, in seconds. The default is
   * 30 seconds. Default value: 30.
   */
  timeout?: number;
  /**
   * The caller-generated request identity, in the form of a GUID with no decoration such as curly
   * braces, e.g. 9C4D50EE-2D56-4CD3-8152-34347DC9F2B0.
   */
  clientRequestId?: string;
  /**
   * Whether the server should return the client-request-id in the response. Default value: false.
   */
  returnClientRequestId?: boolean;
  /**
   * The time the request was issued. Client libraries typically set this to the current system
   * clock time; set it explicitly if you are calling the REST API directly.
   */
  ocpDate?: Date;
  /**
   * The byte range to be retrieved. The default is to retrieve the entire file. The format is
   * bytes=startRange-endRange.
   */
  ocpRange?: string;
  /**
   * A timestamp indicating the last modified time of the resource known to the client. The
   * operation will be performed only if the resource on the service has been modified since the
   * specified time.
   */
  ifModifiedSince?: Date;
  /**
   * A timestamp indicating the last modified time of the resource known to the client. The
   * operation will be performed only if the resource on the service has not been modified since
   * the specified time.
   */
  ifUnmodifiedSince?: Date;
}

/**
 * Additional parameters for getPropertiesFromComputeNode operation.
 */
export interface FileGetPropertiesFromComputeNodeOptions {
  /**
   * The maximum time that the server can spend processing the request, in seconds. The default is
   * 30 seconds. Default value: 30.
   */
  timeout?: number;
  /**
   * The caller-generated request identity, in the form of a GUID with no decoration such as curly
   * braces, e.g. 9C4D50EE-2D56-4CD3-8152-34347DC9F2B0.
   */
  clientRequestId?: string;
  /**
   * Whether the server should return the client-request-id in the response. Default value: false.
   */
  returnClientRequestId?: boolean;
  /**
   * The time the request was issued. Client libraries typically set this to the current system
   * clock time; set it explicitly if you are calling the REST API directly.
   */
  ocpDate?: Date;
  /**
   * A timestamp indicating the last modified time of the resource known to the client. The
   * operation will be performed only if the resource on the service has been modified since the
   * specified time.
   */
  ifModifiedSince?: Date;
  /**
   * A timestamp indicating the last modified time of the resource known to the client. The
   * operation will be performed only if the resource on the service has not been modified since
   * the specified time.
   */
  ifUnmodifiedSince?: Date;
}

/**
 * Additional parameters for listFromTask operation.
 */
export interface FileListFromTaskOptions {
  /**
   * An OData $filter clause. For more information on constructing this filter, see
   * https://docs.microsoft.com/en-us/rest/api/batchservice/odata-filters-in-batch#list-task-files.
   */
  filter?: string;
  /**
   * The maximum number of items to return in the response. A maximum of 1000 files can be
   * returned. Default value: 1000.
   */
  maxResults?: number;
  /**
   * The maximum time that the server can spend processing the request, in seconds. The default is
   * 30 seconds. Default value: 30.
   */
  timeout?: number;
  /**
   * The caller-generated request identity, in the form of a GUID with no decoration such as curly
   * braces, e.g. 9C4D50EE-2D56-4CD3-8152-34347DC9F2B0.
   */
  clientRequestId?: string;
  /**
   * Whether the server should return the client-request-id in the response. Default value: false.
   */
  returnClientRequestId?: boolean;
  /**
   * The time the request was issued. Client libraries typically set this to the current system
   * clock time; set it explicitly if you are calling the REST API directly.
   */
  ocpDate?: Date;
}

/**
 * Additional parameters for listFromComputeNode operation.
 */
export interface FileListFromComputeNodeOptions {
  /**
   * An OData $filter clause. For more information on constructing this filter, see
   * https://docs.microsoft.com/en-us/rest/api/batchservice/odata-filters-in-batch#list-compute-node-files.
   */
  filter?: string;
  /**
   * The maximum number of items to return in the response. A maximum of 1000 files can be
   * returned. Default value: 1000.
   */
  maxResults?: number;
  /**
   * The maximum time that the server can spend processing the request, in seconds. The default is
   * 30 seconds. Default value: 30.
   */
  timeout?: number;
  /**
   * The caller-generated request identity, in the form of a GUID with no decoration such as curly
   * braces, e.g. 9C4D50EE-2D56-4CD3-8152-34347DC9F2B0.
   */
  clientRequestId?: string;
  /**
   * Whether the server should return the client-request-id in the response. Default value: false.
   */
  returnClientRequestId?: boolean;
  /**
   * The time the request was issued. Client libraries typically set this to the current system
   * clock time; set it explicitly if you are calling the REST API directly.
   */
  ocpDate?: Date;
}

/**
 * Additional parameters for exists operation.
 */
export interface JobScheduleExistsOptions {
  /**
   * The maximum time that the server can spend processing the request, in seconds. The default is
   * 30 seconds. Default value: 30.
   */
  timeout?: number;
  /**
   * The caller-generated request identity, in the form of a GUID with no decoration such as curly
   * braces, e.g. 9C4D50EE-2D56-4CD3-8152-34347DC9F2B0.
   */
  clientRequestId?: string;
  /**
   * Whether the server should return the client-request-id in the response. Default value: false.
   */
  returnClientRequestId?: boolean;
  /**
   * The time the request was issued. Client libraries typically set this to the current system
   * clock time; set it explicitly if you are calling the REST API directly.
   */
  ocpDate?: Date;
  /**
   * An ETag value associated with the version of the resource known to the client. The operation
   * will be performed only if the resource's current ETag on the service exactly matches the value
   * specified by the client.
   */
  ifMatch?: string;
  /**
   * An ETag value associated with the version of the resource known to the client. The operation
   * will be performed only if the resource's current ETag on the service does not match the value
   * specified by the client.
   */
  ifNoneMatch?: string;
  /**
   * A timestamp indicating the last modified time of the resource known to the client. The
   * operation will be performed only if the resource on the service has been modified since the
   * specified time.
   */
  ifModifiedSince?: Date;
  /**
   * A timestamp indicating the last modified time of the resource known to the client. The
   * operation will be performed only if the resource on the service has not been modified since
   * the specified time.
   */
  ifUnmodifiedSince?: Date;
}

/**
 * Additional parameters for deleteMethod operation.
 */
export interface JobScheduleDeleteMethodOptions {
  /**
   * The maximum time that the server can spend processing the request, in seconds. The default is
   * 30 seconds. Default value: 30.
   */
  timeout?: number;
  /**
   * The caller-generated request identity, in the form of a GUID with no decoration such as curly
   * braces, e.g. 9C4D50EE-2D56-4CD3-8152-34347DC9F2B0.
   */
  clientRequestId?: string;
  /**
   * Whether the server should return the client-request-id in the response. Default value: false.
   */
  returnClientRequestId?: boolean;
  /**
   * The time the request was issued. Client libraries typically set this to the current system
   * clock time; set it explicitly if you are calling the REST API directly.
   */
  ocpDate?: Date;
  /**
   * An ETag value associated with the version of the resource known to the client. The operation
   * will be performed only if the resource's current ETag on the service exactly matches the value
   * specified by the client.
   */
  ifMatch?: string;
  /**
   * An ETag value associated with the version of the resource known to the client. The operation
   * will be performed only if the resource's current ETag on the service does not match the value
   * specified by the client.
   */
  ifNoneMatch?: string;
  /**
   * A timestamp indicating the last modified time of the resource known to the client. The
   * operation will be performed only if the resource on the service has been modified since the
   * specified time.
   */
  ifModifiedSince?: Date;
  /**
   * A timestamp indicating the last modified time of the resource known to the client. The
   * operation will be performed only if the resource on the service has not been modified since
   * the specified time.
   */
  ifUnmodifiedSince?: Date;
}

/**
 * Additional parameters for get operation.
 */
export interface JobScheduleGetOptions {
  /**
   * An OData $select clause.
   */
  select?: string;
  /**
   * An OData $expand clause.
   */
  expand?: string;
  /**
   * The maximum time that the server can spend processing the request, in seconds. The default is
   * 30 seconds. Default value: 30.
   */
  timeout?: number;
  /**
   * The caller-generated request identity, in the form of a GUID with no decoration such as curly
   * braces, e.g. 9C4D50EE-2D56-4CD3-8152-34347DC9F2B0.
   */
  clientRequestId?: string;
  /**
   * Whether the server should return the client-request-id in the response. Default value: false.
   */
  returnClientRequestId?: boolean;
  /**
   * The time the request was issued. Client libraries typically set this to the current system
   * clock time; set it explicitly if you are calling the REST API directly.
   */
  ocpDate?: Date;
  /**
   * An ETag value associated with the version of the resource known to the client. The operation
   * will be performed only if the resource's current ETag on the service exactly matches the value
   * specified by the client.
   */
  ifMatch?: string;
  /**
   * An ETag value associated with the version of the resource known to the client. The operation
   * will be performed only if the resource's current ETag on the service does not match the value
   * specified by the client.
   */
  ifNoneMatch?: string;
  /**
   * A timestamp indicating the last modified time of the resource known to the client. The
   * operation will be performed only if the resource on the service has been modified since the
   * specified time.
   */
  ifModifiedSince?: Date;
  /**
   * A timestamp indicating the last modified time of the resource known to the client. The
   * operation will be performed only if the resource on the service has not been modified since
   * the specified time.
   */
  ifUnmodifiedSince?: Date;
}

/**
 * Additional parameters for patch operation.
 */
export interface JobSchedulePatchOptions {
  /**
   * The maximum time that the server can spend processing the request, in seconds. The default is
   * 30 seconds. Default value: 30.
   */
  timeout?: number;
  /**
   * The caller-generated request identity, in the form of a GUID with no decoration such as curly
   * braces, e.g. 9C4D50EE-2D56-4CD3-8152-34347DC9F2B0.
   */
  clientRequestId?: string;
  /**
   * Whether the server should return the client-request-id in the response. Default value: false.
   */
  returnClientRequestId?: boolean;
  /**
   * The time the request was issued. Client libraries typically set this to the current system
   * clock time; set it explicitly if you are calling the REST API directly.
   */
  ocpDate?: Date;
  /**
   * An ETag value associated with the version of the resource known to the client. The operation
   * will be performed only if the resource's current ETag on the service exactly matches the value
   * specified by the client.
   */
  ifMatch?: string;
  /**
   * An ETag value associated with the version of the resource known to the client. The operation
   * will be performed only if the resource's current ETag on the service does not match the value
   * specified by the client.
   */
  ifNoneMatch?: string;
  /**
   * A timestamp indicating the last modified time of the resource known to the client. The
   * operation will be performed only if the resource on the service has been modified since the
   * specified time.
   */
  ifModifiedSince?: Date;
  /**
   * A timestamp indicating the last modified time of the resource known to the client. The
   * operation will be performed only if the resource on the service has not been modified since
   * the specified time.
   */
  ifUnmodifiedSince?: Date;
}

/**
 * Additional parameters for update operation.
 */
export interface JobScheduleUpdateOptions {
  /**
   * The maximum time that the server can spend processing the request, in seconds. The default is
   * 30 seconds. Default value: 30.
   */
  timeout?: number;
  /**
   * The caller-generated request identity, in the form of a GUID with no decoration such as curly
   * braces, e.g. 9C4D50EE-2D56-4CD3-8152-34347DC9F2B0.
   */
  clientRequestId?: string;
  /**
   * Whether the server should return the client-request-id in the response. Default value: false.
   */
  returnClientRequestId?: boolean;
  /**
   * The time the request was issued. Client libraries typically set this to the current system
   * clock time; set it explicitly if you are calling the REST API directly.
   */
  ocpDate?: Date;
  /**
   * An ETag value associated with the version of the resource known to the client. The operation
   * will be performed only if the resource's current ETag on the service exactly matches the value
   * specified by the client.
   */
  ifMatch?: string;
  /**
   * An ETag value associated with the version of the resource known to the client. The operation
   * will be performed only if the resource's current ETag on the service does not match the value
   * specified by the client.
   */
  ifNoneMatch?: string;
  /**
   * A timestamp indicating the last modified time of the resource known to the client. The
   * operation will be performed only if the resource on the service has been modified since the
   * specified time.
   */
  ifModifiedSince?: Date;
  /**
   * A timestamp indicating the last modified time of the resource known to the client. The
   * operation will be performed only if the resource on the service has not been modified since
   * the specified time.
   */
  ifUnmodifiedSince?: Date;
}

/**
 * Additional parameters for disable operation.
 */
export interface JobScheduleDisableOptions {
  /**
   * The maximum time that the server can spend processing the request, in seconds. The default is
   * 30 seconds. Default value: 30.
   */
  timeout?: number;
  /**
   * The caller-generated request identity, in the form of a GUID with no decoration such as curly
   * braces, e.g. 9C4D50EE-2D56-4CD3-8152-34347DC9F2B0.
   */
  clientRequestId?: string;
  /**
   * Whether the server should return the client-request-id in the response. Default value: false.
   */
  returnClientRequestId?: boolean;
  /**
   * The time the request was issued. Client libraries typically set this to the current system
   * clock time; set it explicitly if you are calling the REST API directly.
   */
  ocpDate?: Date;
  /**
   * An ETag value associated with the version of the resource known to the client. The operation
   * will be performed only if the resource's current ETag on the service exactly matches the value
   * specified by the client.
   */
  ifMatch?: string;
  /**
   * An ETag value associated with the version of the resource known to the client. The operation
   * will be performed only if the resource's current ETag on the service does not match the value
   * specified by the client.
   */
  ifNoneMatch?: string;
  /**
   * A timestamp indicating the last modified time of the resource known to the client. The
   * operation will be performed only if the resource on the service has been modified since the
   * specified time.
   */
  ifModifiedSince?: Date;
  /**
   * A timestamp indicating the last modified time of the resource known to the client. The
   * operation will be performed only if the resource on the service has not been modified since
   * the specified time.
   */
  ifUnmodifiedSince?: Date;
}

/**
 * Additional parameters for enable operation.
 */
export interface JobScheduleEnableOptions {
  /**
   * The maximum time that the server can spend processing the request, in seconds. The default is
   * 30 seconds. Default value: 30.
   */
  timeout?: number;
  /**
   * The caller-generated request identity, in the form of a GUID with no decoration such as curly
   * braces, e.g. 9C4D50EE-2D56-4CD3-8152-34347DC9F2B0.
   */
  clientRequestId?: string;
  /**
   * Whether the server should return the client-request-id in the response. Default value: false.
   */
  returnClientRequestId?: boolean;
  /**
   * The time the request was issued. Client libraries typically set this to the current system
   * clock time; set it explicitly if you are calling the REST API directly.
   */
  ocpDate?: Date;
  /**
   * An ETag value associated with the version of the resource known to the client. The operation
   * will be performed only if the resource's current ETag on the service exactly matches the value
   * specified by the client.
   */
  ifMatch?: string;
  /**
   * An ETag value associated with the version of the resource known to the client. The operation
   * will be performed only if the resource's current ETag on the service does not match the value
   * specified by the client.
   */
  ifNoneMatch?: string;
  /**
   * A timestamp indicating the last modified time of the resource known to the client. The
   * operation will be performed only if the resource on the service has been modified since the
   * specified time.
   */
  ifModifiedSince?: Date;
  /**
   * A timestamp indicating the last modified time of the resource known to the client. The
   * operation will be performed only if the resource on the service has not been modified since
   * the specified time.
   */
  ifUnmodifiedSince?: Date;
}

/**
 * Additional parameters for terminate operation.
 */
export interface JobScheduleTerminateOptions {
  /**
   * The maximum time that the server can spend processing the request, in seconds. The default is
   * 30 seconds. Default value: 30.
   */
  timeout?: number;
  /**
   * The caller-generated request identity, in the form of a GUID with no decoration such as curly
   * braces, e.g. 9C4D50EE-2D56-4CD3-8152-34347DC9F2B0.
   */
  clientRequestId?: string;
  /**
   * Whether the server should return the client-request-id in the response. Default value: false.
   */
  returnClientRequestId?: boolean;
  /**
   * The time the request was issued. Client libraries typically set this to the current system
   * clock time; set it explicitly if you are calling the REST API directly.
   */
  ocpDate?: Date;
  /**
   * An ETag value associated with the version of the resource known to the client. The operation
   * will be performed only if the resource's current ETag on the service exactly matches the value
   * specified by the client.
   */
  ifMatch?: string;
  /**
   * An ETag value associated with the version of the resource known to the client. The operation
   * will be performed only if the resource's current ETag on the service does not match the value
   * specified by the client.
   */
  ifNoneMatch?: string;
  /**
   * A timestamp indicating the last modified time of the resource known to the client. The
   * operation will be performed only if the resource on the service has been modified since the
   * specified time.
   */
  ifModifiedSince?: Date;
  /**
   * A timestamp indicating the last modified time of the resource known to the client. The
   * operation will be performed only if the resource on the service has not been modified since
   * the specified time.
   */
  ifUnmodifiedSince?: Date;
}

/**
 * Additional parameters for add operation.
 */
export interface JobScheduleAddOptions {
  /**
   * The maximum time that the server can spend processing the request, in seconds. The default is
   * 30 seconds. Default value: 30.
   */
  timeout?: number;
  /**
   * The caller-generated request identity, in the form of a GUID with no decoration such as curly
   * braces, e.g. 9C4D50EE-2D56-4CD3-8152-34347DC9F2B0.
   */
  clientRequestId?: string;
  /**
   * Whether the server should return the client-request-id in the response. Default value: false.
   */
  returnClientRequestId?: boolean;
  /**
   * The time the request was issued. Client libraries typically set this to the current system
   * clock time; set it explicitly if you are calling the REST API directly.
   */
  ocpDate?: Date;
}

/**
 * Additional parameters for list operation.
 */
export interface JobScheduleListOptions {
  /**
   * An OData $filter clause. For more information on constructing this filter, see
   * https://docs.microsoft.com/en-us/rest/api/batchservice/odata-filters-in-batch#list-job-schedules.
   */
  filter?: string;
  /**
   * An OData $select clause.
   */
  select?: string;
  /**
   * An OData $expand clause.
   */
  expand?: string;
  /**
   * The maximum number of items to return in the response. A maximum of 1000 job schedules can be
   * returned. Default value: 1000.
   */
  maxResults?: number;
  /**
   * The maximum time that the server can spend processing the request, in seconds. The default is
   * 30 seconds. Default value: 30.
   */
  timeout?: number;
  /**
   * The caller-generated request identity, in the form of a GUID with no decoration such as curly
   * braces, e.g. 9C4D50EE-2D56-4CD3-8152-34347DC9F2B0.
   */
  clientRequestId?: string;
  /**
   * Whether the server should return the client-request-id in the response. Default value: false.
   */
  returnClientRequestId?: boolean;
  /**
   * The time the request was issued. Client libraries typically set this to the current system
   * clock time; set it explicitly if you are calling the REST API directly.
   */
  ocpDate?: Date;
}

/**
 * Additional parameters for add operation.
 */
export interface TaskAddOptions {
  /**
   * The maximum time that the server can spend processing the request, in seconds. The default is
   * 30 seconds. Default value: 30.
   */
  timeout?: number;
  /**
   * The caller-generated request identity, in the form of a GUID with no decoration such as curly
   * braces, e.g. 9C4D50EE-2D56-4CD3-8152-34347DC9F2B0.
   */
  clientRequestId?: string;
  /**
   * Whether the server should return the client-request-id in the response. Default value: false.
   */
  returnClientRequestId?: boolean;
  /**
   * The time the request was issued. Client libraries typically set this to the current system
   * clock time; set it explicitly if you are calling the REST API directly.
   */
  ocpDate?: Date;
}

/**
 * Additional parameters for list operation.
 */
export interface TaskListOptions {
  /**
   * An OData $filter clause. For more information on constructing this filter, see
   * https://docs.microsoft.com/en-us/rest/api/batchservice/odata-filters-in-batch#list-tasks.
   */
  filter?: string;
  /**
   * An OData $select clause.
   */
  select?: string;
  /**
   * An OData $expand clause.
   */
  expand?: string;
  /**
   * The maximum number of items to return in the response. A maximum of 1000 tasks can be
   * returned. Default value: 1000.
   */
  maxResults?: number;
  /**
   * The maximum time that the server can spend processing the request, in seconds. The default is
   * 30 seconds. Default value: 30.
   */
  timeout?: number;
  /**
   * The caller-generated request identity, in the form of a GUID with no decoration such as curly
   * braces, e.g. 9C4D50EE-2D56-4CD3-8152-34347DC9F2B0.
   */
  clientRequestId?: string;
  /**
   * Whether the server should return the client-request-id in the response. Default value: false.
   */
  returnClientRequestId?: boolean;
  /**
   * The time the request was issued. Client libraries typically set this to the current system
   * clock time; set it explicitly if you are calling the REST API directly.
   */
  ocpDate?: Date;
}

/**
 * Additional parameters for addCollection operation.
 */
export interface TaskAddCollectionOptions {
  /**
   * The maximum time that the server can spend processing the request, in seconds. The default is
   * 30 seconds. Default value: 30.
   */
  timeout?: number;
  /**
   * The caller-generated request identity, in the form of a GUID with no decoration such as curly
   * braces, e.g. 9C4D50EE-2D56-4CD3-8152-34347DC9F2B0.
   */
  clientRequestId?: string;
  /**
   * Whether the server should return the client-request-id in the response. Default value: false.
   */
  returnClientRequestId?: boolean;
  /**
   * The time the request was issued. Client libraries typically set this to the current system
   * clock time; set it explicitly if you are calling the REST API directly.
   */
  ocpDate?: Date;
}

/**
 * Additional parameters for deleteMethod operation.
 */
export interface TaskDeleteMethodOptions {
  /**
   * The maximum time that the server can spend processing the request, in seconds. The default is
   * 30 seconds. Default value: 30.
   */
  timeout?: number;
  /**
   * The caller-generated request identity, in the form of a GUID with no decoration such as curly
   * braces, e.g. 9C4D50EE-2D56-4CD3-8152-34347DC9F2B0.
   */
  clientRequestId?: string;
  /**
   * Whether the server should return the client-request-id in the response. Default value: false.
   */
  returnClientRequestId?: boolean;
  /**
   * The time the request was issued. Client libraries typically set this to the current system
   * clock time; set it explicitly if you are calling the REST API directly.
   */
  ocpDate?: Date;
  /**
   * An ETag value associated with the version of the resource known to the client. The operation
   * will be performed only if the resource's current ETag on the service exactly matches the value
   * specified by the client.
   */
  ifMatch?: string;
  /**
   * An ETag value associated with the version of the resource known to the client. The operation
   * will be performed only if the resource's current ETag on the service does not match the value
   * specified by the client.
   */
  ifNoneMatch?: string;
  /**
   * A timestamp indicating the last modified time of the resource known to the client. The
   * operation will be performed only if the resource on the service has been modified since the
   * specified time.
   */
  ifModifiedSince?: Date;
  /**
   * A timestamp indicating the last modified time of the resource known to the client. The
   * operation will be performed only if the resource on the service has not been modified since
   * the specified time.
   */
  ifUnmodifiedSince?: Date;
}

/**
 * Additional parameters for get operation.
 */
export interface TaskGetOptions {
  /**
   * An OData $select clause.
   */
  select?: string;
  /**
   * An OData $expand clause.
   */
  expand?: string;
  /**
   * The maximum time that the server can spend processing the request, in seconds. The default is
   * 30 seconds. Default value: 30.
   */
  timeout?: number;
  /**
   * The caller-generated request identity, in the form of a GUID with no decoration such as curly
   * braces, e.g. 9C4D50EE-2D56-4CD3-8152-34347DC9F2B0.
   */
  clientRequestId?: string;
  /**
   * Whether the server should return the client-request-id in the response. Default value: false.
   */
  returnClientRequestId?: boolean;
  /**
   * The time the request was issued. Client libraries typically set this to the current system
   * clock time; set it explicitly if you are calling the REST API directly.
   */
  ocpDate?: Date;
  /**
   * An ETag value associated with the version of the resource known to the client. The operation
   * will be performed only if the resource's current ETag on the service exactly matches the value
   * specified by the client.
   */
  ifMatch?: string;
  /**
   * An ETag value associated with the version of the resource known to the client. The operation
   * will be performed only if the resource's current ETag on the service does not match the value
   * specified by the client.
   */
  ifNoneMatch?: string;
  /**
   * A timestamp indicating the last modified time of the resource known to the client. The
   * operation will be performed only if the resource on the service has been modified since the
   * specified time.
   */
  ifModifiedSince?: Date;
  /**
   * A timestamp indicating the last modified time of the resource known to the client. The
   * operation will be performed only if the resource on the service has not been modified since
   * the specified time.
   */
  ifUnmodifiedSince?: Date;
}

/**
 * Additional parameters for update operation.
 */
export interface TaskUpdateOptions {
  /**
   * The maximum time that the server can spend processing the request, in seconds. The default is
   * 30 seconds. Default value: 30.
   */
  timeout?: number;
  /**
   * The caller-generated request identity, in the form of a GUID with no decoration such as curly
   * braces, e.g. 9C4D50EE-2D56-4CD3-8152-34347DC9F2B0.
   */
  clientRequestId?: string;
  /**
   * Whether the server should return the client-request-id in the response. Default value: false.
   */
  returnClientRequestId?: boolean;
  /**
   * The time the request was issued. Client libraries typically set this to the current system
   * clock time; set it explicitly if you are calling the REST API directly.
   */
  ocpDate?: Date;
  /**
   * An ETag value associated with the version of the resource known to the client. The operation
   * will be performed only if the resource's current ETag on the service exactly matches the value
   * specified by the client.
   */
  ifMatch?: string;
  /**
   * An ETag value associated with the version of the resource known to the client. The operation
   * will be performed only if the resource's current ETag on the service does not match the value
   * specified by the client.
   */
  ifNoneMatch?: string;
  /**
   * A timestamp indicating the last modified time of the resource known to the client. The
   * operation will be performed only if the resource on the service has been modified since the
   * specified time.
   */
  ifModifiedSince?: Date;
  /**
   * A timestamp indicating the last modified time of the resource known to the client. The
   * operation will be performed only if the resource on the service has not been modified since
   * the specified time.
   */
  ifUnmodifiedSince?: Date;
}

/**
 * Additional parameters for listSubtasks operation.
 */
export interface TaskListSubtasksOptions {
  /**
   * An OData $select clause.
   */
  select?: string;
  /**
   * The maximum time that the server can spend processing the request, in seconds. The default is
   * 30 seconds. Default value: 30.
   */
  timeout?: number;
  /**
   * The caller-generated request identity, in the form of a GUID with no decoration such as curly
   * braces, e.g. 9C4D50EE-2D56-4CD3-8152-34347DC9F2B0.
   */
  clientRequestId?: string;
  /**
   * Whether the server should return the client-request-id in the response. Default value: false.
   */
  returnClientRequestId?: boolean;
  /**
   * The time the request was issued. Client libraries typically set this to the current system
   * clock time; set it explicitly if you are calling the REST API directly.
   */
  ocpDate?: Date;
}

/**
 * Additional parameters for terminate operation.
 */
export interface TaskTerminateOptions {
  /**
   * The maximum time that the server can spend processing the request, in seconds. The default is
   * 30 seconds. Default value: 30.
   */
  timeout?: number;
  /**
   * The caller-generated request identity, in the form of a GUID with no decoration such as curly
   * braces, e.g. 9C4D50EE-2D56-4CD3-8152-34347DC9F2B0.
   */
  clientRequestId?: string;
  /**
   * Whether the server should return the client-request-id in the response. Default value: false.
   */
  returnClientRequestId?: boolean;
  /**
   * The time the request was issued. Client libraries typically set this to the current system
   * clock time; set it explicitly if you are calling the REST API directly.
   */
  ocpDate?: Date;
  /**
   * An ETag value associated with the version of the resource known to the client. The operation
   * will be performed only if the resource's current ETag on the service exactly matches the value
   * specified by the client.
   */
  ifMatch?: string;
  /**
   * An ETag value associated with the version of the resource known to the client. The operation
   * will be performed only if the resource's current ETag on the service does not match the value
   * specified by the client.
   */
  ifNoneMatch?: string;
  /**
   * A timestamp indicating the last modified time of the resource known to the client. The
   * operation will be performed only if the resource on the service has been modified since the
   * specified time.
   */
  ifModifiedSince?: Date;
  /**
   * A timestamp indicating the last modified time of the resource known to the client. The
   * operation will be performed only if the resource on the service has not been modified since
   * the specified time.
   */
  ifUnmodifiedSince?: Date;
}

/**
 * Additional parameters for reactivate operation.
 */
export interface TaskReactivateOptions {
  /**
   * The maximum time that the server can spend processing the request, in seconds. The default is
   * 30 seconds. Default value: 30.
   */
  timeout?: number;
  /**
   * The caller-generated request identity, in the form of a GUID with no decoration such as curly
   * braces, e.g. 9C4D50EE-2D56-4CD3-8152-34347DC9F2B0.
   */
  clientRequestId?: string;
  /**
   * Whether the server should return the client-request-id in the response. Default value: false.
   */
  returnClientRequestId?: boolean;
  /**
   * The time the request was issued. Client libraries typically set this to the current system
   * clock time; set it explicitly if you are calling the REST API directly.
   */
  ocpDate?: Date;
  /**
   * An ETag value associated with the version of the resource known to the client. The operation
   * will be performed only if the resource's current ETag on the service exactly matches the value
   * specified by the client.
   */
  ifMatch?: string;
  /**
   * An ETag value associated with the version of the resource known to the client. The operation
   * will be performed only if the resource's current ETag on the service does not match the value
   * specified by the client.
   */
  ifNoneMatch?: string;
  /**
   * A timestamp indicating the last modified time of the resource known to the client. The
   * operation will be performed only if the resource on the service has been modified since the
   * specified time.
   */
  ifModifiedSince?: Date;
  /**
   * A timestamp indicating the last modified time of the resource known to the client. The
   * operation will be performed only if the resource on the service has not been modified since
   * the specified time.
   */
  ifUnmodifiedSince?: Date;
}

/**
 * Additional parameters for addUser operation.
 */
export interface ComputeNodeAddUserOptions {
  /**
   * The maximum time that the server can spend processing the request, in seconds. The default is
   * 30 seconds. Default value: 30.
   */
  timeout?: number;
  /**
   * The caller-generated request identity, in the form of a GUID with no decoration such as curly
   * braces, e.g. 9C4D50EE-2D56-4CD3-8152-34347DC9F2B0.
   */
  clientRequestId?: string;
  /**
   * Whether the server should return the client-request-id in the response. Default value: false.
   */
  returnClientRequestId?: boolean;
  /**
   * The time the request was issued. Client libraries typically set this to the current system
   * clock time; set it explicitly if you are calling the REST API directly.
   */
  ocpDate?: Date;
}

/**
 * Additional parameters for deleteUser operation.
 */
export interface ComputeNodeDeleteUserOptions {
  /**
   * The maximum time that the server can spend processing the request, in seconds. The default is
   * 30 seconds. Default value: 30.
   */
  timeout?: number;
  /**
   * The caller-generated request identity, in the form of a GUID with no decoration such as curly
   * braces, e.g. 9C4D50EE-2D56-4CD3-8152-34347DC9F2B0.
   */
  clientRequestId?: string;
  /**
   * Whether the server should return the client-request-id in the response. Default value: false.
   */
  returnClientRequestId?: boolean;
  /**
   * The time the request was issued. Client libraries typically set this to the current system
   * clock time; set it explicitly if you are calling the REST API directly.
   */
  ocpDate?: Date;
}

/**
 * Additional parameters for updateUser operation.
 */
export interface ComputeNodeUpdateUserOptions {
  /**
   * The maximum time that the server can spend processing the request, in seconds. The default is
   * 30 seconds. Default value: 30.
   */
  timeout?: number;
  /**
   * The caller-generated request identity, in the form of a GUID with no decoration such as curly
   * braces, e.g. 9C4D50EE-2D56-4CD3-8152-34347DC9F2B0.
   */
  clientRequestId?: string;
  /**
   * Whether the server should return the client-request-id in the response. Default value: false.
   */
  returnClientRequestId?: boolean;
  /**
   * The time the request was issued. Client libraries typically set this to the current system
   * clock time; set it explicitly if you are calling the REST API directly.
   */
  ocpDate?: Date;
}

/**
 * Additional parameters for get operation.
 */
export interface ComputeNodeGetOptions {
  /**
   * An OData $select clause.
   */
  select?: string;
  /**
   * The maximum time that the server can spend processing the request, in seconds. The default is
   * 30 seconds. Default value: 30.
   */
  timeout?: number;
  /**
   * The caller-generated request identity, in the form of a GUID with no decoration such as curly
   * braces, e.g. 9C4D50EE-2D56-4CD3-8152-34347DC9F2B0.
   */
  clientRequestId?: string;
  /**
   * Whether the server should return the client-request-id in the response. Default value: false.
   */
  returnClientRequestId?: boolean;
  /**
   * The time the request was issued. Client libraries typically set this to the current system
   * clock time; set it explicitly if you are calling the REST API directly.
   */
  ocpDate?: Date;
}

/**
 * Additional parameters for reboot operation.
 */
export interface ComputeNodeRebootOptions {
  /**
   * The maximum time that the server can spend processing the request, in seconds. The default is
   * 30 seconds. Default value: 30.
   */
  timeout?: number;
  /**
   * The caller-generated request identity, in the form of a GUID with no decoration such as curly
   * braces, e.g. 9C4D50EE-2D56-4CD3-8152-34347DC9F2B0.
   */
  clientRequestId?: string;
  /**
   * Whether the server should return the client-request-id in the response. Default value: false.
   */
  returnClientRequestId?: boolean;
  /**
   * The time the request was issued. Client libraries typically set this to the current system
   * clock time; set it explicitly if you are calling the REST API directly.
   */
  ocpDate?: Date;
}

/**
 * Additional parameters for reimage operation.
 */
export interface ComputeNodeReimageOptions {
  /**
   * The maximum time that the server can spend processing the request, in seconds. The default is
   * 30 seconds. Default value: 30.
   */
  timeout?: number;
  /**
   * The caller-generated request identity, in the form of a GUID with no decoration such as curly
   * braces, e.g. 9C4D50EE-2D56-4CD3-8152-34347DC9F2B0.
   */
  clientRequestId?: string;
  /**
   * Whether the server should return the client-request-id in the response. Default value: false.
   */
  returnClientRequestId?: boolean;
  /**
   * The time the request was issued. Client libraries typically set this to the current system
   * clock time; set it explicitly if you are calling the REST API directly.
   */
  ocpDate?: Date;
}

/**
 * Additional parameters for disableScheduling operation.
 */
export interface ComputeNodeDisableSchedulingOptions {
  /**
   * The maximum time that the server can spend processing the request, in seconds. The default is
   * 30 seconds. Default value: 30.
   */
  timeout?: number;
  /**
   * The caller-generated request identity, in the form of a GUID with no decoration such as curly
   * braces, e.g. 9C4D50EE-2D56-4CD3-8152-34347DC9F2B0.
   */
  clientRequestId?: string;
  /**
   * Whether the server should return the client-request-id in the response. Default value: false.
   */
  returnClientRequestId?: boolean;
  /**
   * The time the request was issued. Client libraries typically set this to the current system
   * clock time; set it explicitly if you are calling the REST API directly.
   */
  ocpDate?: Date;
}

/**
 * Additional parameters for enableScheduling operation.
 */
export interface ComputeNodeEnableSchedulingOptions {
  /**
   * The maximum time that the server can spend processing the request, in seconds. The default is
   * 30 seconds. Default value: 30.
   */
  timeout?: number;
  /**
   * The caller-generated request identity, in the form of a GUID with no decoration such as curly
   * braces, e.g. 9C4D50EE-2D56-4CD3-8152-34347DC9F2B0.
   */
  clientRequestId?: string;
  /**
   * Whether the server should return the client-request-id in the response. Default value: false.
   */
  returnClientRequestId?: boolean;
  /**
   * The time the request was issued. Client libraries typically set this to the current system
   * clock time; set it explicitly if you are calling the REST API directly.
   */
  ocpDate?: Date;
}

/**
 * Additional parameters for getRemoteLoginSettings operation.
 */
export interface ComputeNodeGetRemoteLoginSettingsOptions {
  /**
   * The maximum time that the server can spend processing the request, in seconds. The default is
   * 30 seconds. Default value: 30.
   */
  timeout?: number;
  /**
   * The caller-generated request identity, in the form of a GUID with no decoration such as curly
   * braces, e.g. 9C4D50EE-2D56-4CD3-8152-34347DC9F2B0.
   */
  clientRequestId?: string;
  /**
   * Whether the server should return the client-request-id in the response. Default value: false.
   */
  returnClientRequestId?: boolean;
  /**
   * The time the request was issued. Client libraries typically set this to the current system
   * clock time; set it explicitly if you are calling the REST API directly.
   */
  ocpDate?: Date;
}

/**
 * Additional parameters for getRemoteDesktop operation.
 */
export interface ComputeNodeGetRemoteDesktopOptions {
  /**
   * The maximum time that the server can spend processing the request, in seconds. The default is
   * 30 seconds. Default value: 30.
   */
  timeout?: number;
  /**
   * The caller-generated request identity, in the form of a GUID with no decoration such as curly
   * braces, e.g. 9C4D50EE-2D56-4CD3-8152-34347DC9F2B0.
   */
  clientRequestId?: string;
  /**
   * Whether the server should return the client-request-id in the response. Default value: false.
   */
  returnClientRequestId?: boolean;
  /**
   * The time the request was issued. Client libraries typically set this to the current system
   * clock time; set it explicitly if you are calling the REST API directly.
   */
  ocpDate?: Date;
}

/**
 * Additional parameters for uploadBatchServiceLogs operation.
 */
export interface ComputeNodeUploadBatchServiceLogsOptions {
  /**
   * The maximum time that the server can spend processing the request, in seconds. The default is
   * 30 seconds. Default value: 30.
   */
  timeout?: number;
  /**
   * The caller-generated request identity, in the form of a GUID with no decoration such as curly
   * braces, e.g. 9C4D50EE-2D56-4CD3-8152-34347DC9F2B0.
   */
  clientRequestId?: string;
  /**
   * Whether the server should return the client-request-id in the response. Default value: false.
   */
  returnClientRequestId?: boolean;
  /**
   * The time the request was issued. Client libraries typically set this to the current system
   * clock time; set it explicitly if you are calling the REST API directly.
   */
  ocpDate?: Date;
}

/**
 * Additional parameters for list operation.
 */
export interface ComputeNodeListOptions {
  /**
   * An OData $filter clause. For more information on constructing this filter, see
   * https://docs.microsoft.com/en-us/rest/api/batchservice/odata-filters-in-batch#list-nodes-in-a-pool.
   */
  filter?: string;
  /**
   * An OData $select clause.
   */
  select?: string;
  /**
   * The maximum number of items to return in the response. A maximum of 1000 nodes can be
   * returned. Default value: 1000.
   */
  maxResults?: number;
  /**
   * The maximum time that the server can spend processing the request, in seconds. The default is
   * 30 seconds. Default value: 30.
   */
  timeout?: number;
  /**
   * The caller-generated request identity, in the form of a GUID with no decoration such as curly
   * braces, e.g. 9C4D50EE-2D56-4CD3-8152-34347DC9F2B0.
   */
  clientRequestId?: string;
  /**
   * Whether the server should return the client-request-id in the response. Default value: false.
   */
  returnClientRequestId?: boolean;
  /**
   * The time the request was issued. Client libraries typically set this to the current system
   * clock time; set it explicitly if you are calling the REST API directly.
   */
  ocpDate?: Date;
}

/**
 * Additional parameters for listNext operation.
 */
export interface ApplicationListNextOptions {
  /**
   * The caller-generated request identity, in the form of a GUID with no decoration such as curly
   * braces, e.g. 9C4D50EE-2D56-4CD3-8152-34347DC9F2B0.
   */
  clientRequestId?: string;
  /**
   * Whether the server should return the client-request-id in the response. Default value: false.
   */
  returnClientRequestId?: boolean;
  /**
   * The time the request was issued. Client libraries typically set this to the current system
   * clock time; set it explicitly if you are calling the REST API directly.
   */
  ocpDate?: Date;
}

/**
 * Additional parameters for listUsageMetricsNext operation.
 */
export interface PoolListUsageMetricsNextOptions {
  /**
   * The caller-generated request identity, in the form of a GUID with no decoration such as curly
   * braces, e.g. 9C4D50EE-2D56-4CD3-8152-34347DC9F2B0.
   */
  clientRequestId?: string;
  /**
   * Whether the server should return the client-request-id in the response. Default value: false.
   */
  returnClientRequestId?: boolean;
  /**
   * The time the request was issued. Client libraries typically set this to the current system
   * clock time; set it explicitly if you are calling the REST API directly.
   */
  ocpDate?: Date;
}

/**
 * Additional parameters for listNext operation.
 */
export interface PoolListNextOptions {
  /**
   * The caller-generated request identity, in the form of a GUID with no decoration such as curly
   * braces, e.g. 9C4D50EE-2D56-4CD3-8152-34347DC9F2B0.
   */
  clientRequestId?: string;
  /**
   * Whether the server should return the client-request-id in the response. Default value: false.
   */
  returnClientRequestId?: boolean;
  /**
   * The time the request was issued. Client libraries typically set this to the current system
   * clock time; set it explicitly if you are calling the REST API directly.
   */
  ocpDate?: Date;
}

/**
 * Additional parameters for listNodeAgentSkusNext operation.
 */
export interface AccountListNodeAgentSkusNextOptions {
  /**
   * The caller-generated request identity, in the form of a GUID with no decoration such as curly
   * braces, e.g. 9C4D50EE-2D56-4CD3-8152-34347DC9F2B0.
   */
  clientRequestId?: string;
  /**
   * Whether the server should return the client-request-id in the response. Default value: false.
   */
  returnClientRequestId?: boolean;
  /**
   * The time the request was issued. Client libraries typically set this to the current system
   * clock time; set it explicitly if you are calling the REST API directly.
   */
  ocpDate?: Date;
}

/**
 * Additional parameters for listPoolNodeCountsNext operation.
 */
export interface AccountListPoolNodeCountsNextOptions {
  /**
   * The caller-generated request identity, in the form of a GUID with no decoration such as curly
   * braces, e.g. 9C4D50EE-2D56-4CD3-8152-34347DC9F2B0.
   */
  clientRequestId?: string;
  /**
   * Whether the server should return the client-request-id in the response. Default value: false.
   */
  returnClientRequestId?: boolean;
  /**
   * The time the request was issued. Client libraries typically set this to the current system
   * clock time; set it explicitly if you are calling the REST API directly.
   */
  ocpDate?: Date;
}

/**
 * Additional parameters for listNext operation.
 */
export interface JobListNextOptions {
  /**
   * The caller-generated request identity, in the form of a GUID with no decoration such as curly
   * braces, e.g. 9C4D50EE-2D56-4CD3-8152-34347DC9F2B0.
   */
  clientRequestId?: string;
  /**
   * Whether the server should return the client-request-id in the response. Default value: false.
   */
  returnClientRequestId?: boolean;
  /**
   * The time the request was issued. Client libraries typically set this to the current system
   * clock time; set it explicitly if you are calling the REST API directly.
   */
  ocpDate?: Date;
}

/**
 * Additional parameters for listFromJobScheduleNext operation.
 */
export interface JobListFromJobScheduleNextOptions {
  /**
   * The caller-generated request identity, in the form of a GUID with no decoration such as curly
   * braces, e.g. 9C4D50EE-2D56-4CD3-8152-34347DC9F2B0.
   */
  clientRequestId?: string;
  /**
   * Whether the server should return the client-request-id in the response. Default value: false.
   */
  returnClientRequestId?: boolean;
  /**
   * The time the request was issued. Client libraries typically set this to the current system
   * clock time; set it explicitly if you are calling the REST API directly.
   */
  ocpDate?: Date;
}

/**
 * Additional parameters for listPreparationAndReleaseTaskStatusNext operation.
 */
export interface JobListPreparationAndReleaseTaskStatusNextOptions {
  /**
   * The caller-generated request identity, in the form of a GUID with no decoration such as curly
   * braces, e.g. 9C4D50EE-2D56-4CD3-8152-34347DC9F2B0.
   */
  clientRequestId?: string;
  /**
   * Whether the server should return the client-request-id in the response. Default value: false.
   */
  returnClientRequestId?: boolean;
  /**
   * The time the request was issued. Client libraries typically set this to the current system
   * clock time; set it explicitly if you are calling the REST API directly.
   */
  ocpDate?: Date;
}

/**
 * Additional parameters for listNext operation.
 */
export interface CertificateListNextOptions {
  /**
   * The caller-generated request identity, in the form of a GUID with no decoration such as curly
   * braces, e.g. 9C4D50EE-2D56-4CD3-8152-34347DC9F2B0.
   */
  clientRequestId?: string;
  /**
   * Whether the server should return the client-request-id in the response. Default value: false.
   */
  returnClientRequestId?: boolean;
  /**
   * The time the request was issued. Client libraries typically set this to the current system
   * clock time; set it explicitly if you are calling the REST API directly.
   */
  ocpDate?: Date;
}

/**
 * Additional parameters for listFromTaskNext operation.
 */
export interface FileListFromTaskNextOptions {
  /**
   * The caller-generated request identity, in the form of a GUID with no decoration such as curly
   * braces, e.g. 9C4D50EE-2D56-4CD3-8152-34347DC9F2B0.
   */
  clientRequestId?: string;
  /**
   * Whether the server should return the client-request-id in the response. Default value: false.
   */
  returnClientRequestId?: boolean;
  /**
   * The time the request was issued. Client libraries typically set this to the current system
   * clock time; set it explicitly if you are calling the REST API directly.
   */
  ocpDate?: Date;
}

/**
 * Additional parameters for listFromComputeNodeNext operation.
 */
export interface FileListFromComputeNodeNextOptions {
  /**
   * The caller-generated request identity, in the form of a GUID with no decoration such as curly
   * braces, e.g. 9C4D50EE-2D56-4CD3-8152-34347DC9F2B0.
   */
  clientRequestId?: string;
  /**
   * Whether the server should return the client-request-id in the response. Default value: false.
   */
  returnClientRequestId?: boolean;
  /**
   * The time the request was issued. Client libraries typically set this to the current system
   * clock time; set it explicitly if you are calling the REST API directly.
   */
  ocpDate?: Date;
}

/**
 * Additional parameters for listNext operation.
 */
export interface JobScheduleListNextOptions {
  /**
   * The caller-generated request identity, in the form of a GUID with no decoration such as curly
   * braces, e.g. 9C4D50EE-2D56-4CD3-8152-34347DC9F2B0.
   */
  clientRequestId?: string;
  /**
   * Whether the server should return the client-request-id in the response. Default value: false.
   */
  returnClientRequestId?: boolean;
  /**
   * The time the request was issued. Client libraries typically set this to the current system
   * clock time; set it explicitly if you are calling the REST API directly.
   */
  ocpDate?: Date;
}

/**
 * Additional parameters for listNext operation.
 */
export interface TaskListNextOptions {
  /**
   * The caller-generated request identity, in the form of a GUID with no decoration such as curly
   * braces, e.g. 9C4D50EE-2D56-4CD3-8152-34347DC9F2B0.
   */
  clientRequestId?: string;
  /**
   * Whether the server should return the client-request-id in the response. Default value: false.
   */
  returnClientRequestId?: boolean;
  /**
   * The time the request was issued. Client libraries typically set this to the current system
   * clock time; set it explicitly if you are calling the REST API directly.
   */
  ocpDate?: Date;
}

/**
 * Additional parameters for listNext operation.
 */
export interface ComputeNodeListNextOptions {
  /**
   * The caller-generated request identity, in the form of a GUID with no decoration such as curly
   * braces, e.g. 9C4D50EE-2D56-4CD3-8152-34347DC9F2B0.
   */
  clientRequestId?: string;
  /**
   * Whether the server should return the client-request-id in the response. Default value: false.
   */
  returnClientRequestId?: boolean;
  /**
   * The time the request was issued. Client libraries typically set this to the current system
   * clock time; set it explicitly if you are calling the REST API directly.
   */
  ocpDate?: Date;
}

/**
 * Optional Parameters.
 */
export interface ApplicationListOptionalParams extends msRest.RequestOptionsBase {
  /**
   * Additional parameters for the operation
   */
  applicationListOptions?: ApplicationListOptions;
}

/**
 * Optional Parameters.
 */
export interface ApplicationGetOptionalParams extends msRest.RequestOptionsBase {
  /**
   * Additional parameters for the operation
   */
  applicationGetOptions?: ApplicationGetOptions;
}

/**
 * Optional Parameters.
 */
export interface ApplicationListNextOptionalParams extends msRest.RequestOptionsBase {
  /**
   * Additional parameters for the operation
   */
  applicationListNextOptions?: ApplicationListNextOptions;
}

/**
 * Optional Parameters.
 */
export interface PoolListUsageMetricsOptionalParams extends msRest.RequestOptionsBase {
  /**
   * Additional parameters for the operation
   */
  poolListUsageMetricsOptions?: PoolListUsageMetricsOptions;
}

/**
 * Optional Parameters.
 */
export interface PoolGetAllLifetimeStatisticsOptionalParams extends msRest.RequestOptionsBase {
  /**
   * Additional parameters for the operation
   */
  poolGetAllLifetimeStatisticsOptions?: PoolGetAllLifetimeStatisticsOptions;
}

/**
 * Optional Parameters.
 */
export interface PoolAddOptionalParams extends msRest.RequestOptionsBase {
  /**
   * Additional parameters for the operation
   */
  poolAddOptions?: PoolAddOptions;
}

/**
 * Optional Parameters.
 */
export interface PoolListOptionalParams extends msRest.RequestOptionsBase {
  /**
   * Additional parameters for the operation
   */
  poolListOptions?: PoolListOptions;
}

/**
 * Optional Parameters.
 */
export interface PoolDeleteMethodOptionalParams extends msRest.RequestOptionsBase {
  /**
   * Additional parameters for the operation
   */
  poolDeleteMethodOptions?: PoolDeleteMethodOptions;
}

/**
 * Optional Parameters.
 */
export interface PoolExistsOptionalParams extends msRest.RequestOptionsBase {
  /**
   * Additional parameters for the operation
   */
  poolExistsOptions?: PoolExistsOptions;
}

/**
 * Optional Parameters.
 */
export interface PoolGetOptionalParams extends msRest.RequestOptionsBase {
  /**
   * Additional parameters for the operation
   */
  poolGetOptions?: PoolGetOptions;
}

/**
 * Optional Parameters.
 */
export interface PoolPatchOptionalParams extends msRest.RequestOptionsBase {
  /**
   * Additional parameters for the operation
   */
  poolPatchOptions?: PoolPatchOptions;
}

/**
 * Optional Parameters.
 */
export interface PoolDisableAutoScaleOptionalParams extends msRest.RequestOptionsBase {
  /**
   * Additional parameters for the operation
   */
  poolDisableAutoScaleOptions?: PoolDisableAutoScaleOptions;
}

/**
 * Optional Parameters.
 */
export interface PoolEnableAutoScaleOptionalParams extends msRest.RequestOptionsBase {
  /**
   * Additional parameters for the operation
   */
  poolEnableAutoScaleOptions?: PoolEnableAutoScaleOptions;
}

/**
 * Optional Parameters.
 */
export interface PoolEvaluateAutoScaleOptionalParams extends msRest.RequestOptionsBase {
  /**
   * Additional parameters for the operation
   */
  poolEvaluateAutoScaleOptions?: PoolEvaluateAutoScaleOptions;
}

/**
 * Optional Parameters.
 */
export interface PoolResizeOptionalParams extends msRest.RequestOptionsBase {
  /**
   * Additional parameters for the operation
   */
  poolResizeOptions?: PoolResizeOptions;
}

/**
 * Optional Parameters.
 */
export interface PoolStopResizeOptionalParams extends msRest.RequestOptionsBase {
  /**
   * Additional parameters for the operation
   */
  poolStopResizeOptions?: PoolStopResizeOptions;
}

/**
 * Optional Parameters.
 */
export interface PoolUpdatePropertiesOptionalParams extends msRest.RequestOptionsBase {
  /**
   * Additional parameters for the operation
   */
  poolUpdatePropertiesOptions?: PoolUpdatePropertiesOptions;
}

/**
 * Optional Parameters.
 */
export interface PoolRemoveNodesOptionalParams extends msRest.RequestOptionsBase {
  /**
   * Additional parameters for the operation
   */
  poolRemoveNodesOptions?: PoolRemoveNodesOptions;
}

/**
 * Optional Parameters.
 */
export interface PoolListUsageMetricsNextOptionalParams extends msRest.RequestOptionsBase {
  /**
   * Additional parameters for the operation
   */
  poolListUsageMetricsNextOptions?: PoolListUsageMetricsNextOptions;
}

/**
 * Optional Parameters.
 */
export interface PoolListNextOptionalParams extends msRest.RequestOptionsBase {
  /**
   * Additional parameters for the operation
   */
  poolListNextOptions?: PoolListNextOptions;
}

/**
 * Optional Parameters.
 */
export interface AccountListNodeAgentSkusOptionalParams extends msRest.RequestOptionsBase {
  /**
   * Additional parameters for the operation
   */
  accountListNodeAgentSkusOptions?: AccountListNodeAgentSkusOptions;
}

/**
 * Optional Parameters.
 */
export interface AccountListPoolNodeCountsOptionalParams extends msRest.RequestOptionsBase {
  /**
   * Additional parameters for the operation
   */
  accountListPoolNodeCountsOptions?: AccountListPoolNodeCountsOptions;
}

/**
 * Optional Parameters.
 */
export interface AccountListNodeAgentSkusNextOptionalParams extends msRest.RequestOptionsBase {
  /**
   * Additional parameters for the operation
   */
  accountListNodeAgentSkusNextOptions?: AccountListNodeAgentSkusNextOptions;
}

/**
 * Optional Parameters.
 */
export interface AccountListPoolNodeCountsNextOptionalParams extends msRest.RequestOptionsBase {
  /**
   * Additional parameters for the operation
   */
  accountListPoolNodeCountsNextOptions?: AccountListPoolNodeCountsNextOptions;
}

/**
 * Optional Parameters.
 */
export interface JobGetAllLifetimeStatisticsOptionalParams extends msRest.RequestOptionsBase {
  /**
   * Additional parameters for the operation
   */
  jobGetAllLifetimeStatisticsOptions?: JobGetAllLifetimeStatisticsOptions;
}

/**
 * Optional Parameters.
 */
export interface JobDeleteMethodOptionalParams extends msRest.RequestOptionsBase {
  /**
   * Additional parameters for the operation
   */
  jobDeleteMethodOptions?: JobDeleteMethodOptions;
}

/**
 * Optional Parameters.
 */
export interface JobGetOptionalParams extends msRest.RequestOptionsBase {
  /**
   * Additional parameters for the operation
   */
  jobGetOptions?: JobGetOptions;
}

/**
 * Optional Parameters.
 */
export interface JobPatchOptionalParams extends msRest.RequestOptionsBase {
  /**
   * Additional parameters for the operation
   */
  jobPatchOptions?: JobPatchOptions;
}

/**
 * Optional Parameters.
 */
export interface JobUpdateOptionalParams extends msRest.RequestOptionsBase {
  /**
   * Additional parameters for the operation
   */
  jobUpdateOptions?: JobUpdateOptions;
}

/**
 * Optional Parameters.
 */
export interface JobDisableOptionalParams extends msRest.RequestOptionsBase {
  /**
   * Additional parameters for the operation
   */
  jobDisableOptions?: JobDisableOptions;
}

/**
 * Optional Parameters.
 */
export interface JobEnableOptionalParams extends msRest.RequestOptionsBase {
  /**
   * Additional parameters for the operation
   */
  jobEnableOptions?: JobEnableOptions;
}

/**
 * Optional Parameters.
 */
export interface JobTerminateOptionalParams extends msRest.RequestOptionsBase {
  /**
   * The text you want to appear as the job's TerminateReason. The default is 'UserTerminate'.
   */
  terminateReason?: string;
  /**
   * Additional parameters for the operation
   */
  jobTerminateOptions?: JobTerminateOptions;
}

/**
 * Optional Parameters.
 */
export interface JobAddOptionalParams extends msRest.RequestOptionsBase {
  /**
   * Additional parameters for the operation
   */
  jobAddOptions?: JobAddOptions;
}

/**
 * Optional Parameters.
 */
export interface JobListOptionalParams extends msRest.RequestOptionsBase {
  /**
   * Additional parameters for the operation
   */
  jobListOptions?: JobListOptions;
}

/**
 * Optional Parameters.
 */
export interface JobListFromJobScheduleOptionalParams extends msRest.RequestOptionsBase {
  /**
   * Additional parameters for the operation
   */
  jobListFromJobScheduleOptions?: JobListFromJobScheduleOptions;
}

/**
 * Optional Parameters.
 */
export interface JobListPreparationAndReleaseTaskStatusOptionalParams extends msRest.RequestOptionsBase {
  /**
   * Additional parameters for the operation
   */
  jobListPreparationAndReleaseTaskStatusOptions?: JobListPreparationAndReleaseTaskStatusOptions;
}

/**
 * Optional Parameters.
 */
export interface JobGetTaskCountsOptionalParams extends msRest.RequestOptionsBase {
  /**
   * Additional parameters for the operation
   */
  jobGetTaskCountsOptions?: JobGetTaskCountsOptions;
}

/**
 * Optional Parameters.
 */
export interface JobListNextOptionalParams extends msRest.RequestOptionsBase {
  /**
   * Additional parameters for the operation
   */
  jobListNextOptions?: JobListNextOptions;
}

/**
 * Optional Parameters.
 */
export interface JobListFromJobScheduleNextOptionalParams extends msRest.RequestOptionsBase {
  /**
   * Additional parameters for the operation
   */
  jobListFromJobScheduleNextOptions?: JobListFromJobScheduleNextOptions;
}

/**
 * Optional Parameters.
 */
export interface JobListPreparationAndReleaseTaskStatusNextOptionalParams extends msRest.RequestOptionsBase {
  /**
   * Additional parameters for the operation
   */
  jobListPreparationAndReleaseTaskStatusNextOptions?: JobListPreparationAndReleaseTaskStatusNextOptions;
}

/**
 * Optional Parameters.
 */
export interface CertificateAddOptionalParams extends msRest.RequestOptionsBase {
  /**
   * Additional parameters for the operation
   */
  certificateAddOptions?: CertificateAddOptions;
}

/**
 * Optional Parameters.
 */
export interface CertificateListOptionalParams extends msRest.RequestOptionsBase {
  /**
   * Additional parameters for the operation
   */
  certificateListOptions?: CertificateListOptions;
}

/**
 * Optional Parameters.
 */
export interface CertificateCancelDeletionOptionalParams extends msRest.RequestOptionsBase {
  /**
   * Additional parameters for the operation
   */
  certificateCancelDeletionOptions?: CertificateCancelDeletionOptions;
}

/**
 * Optional Parameters.
 */
export interface CertificateDeleteMethodOptionalParams extends msRest.RequestOptionsBase {
  /**
   * Additional parameters for the operation
   */
  certificateDeleteMethodOptions?: CertificateDeleteMethodOptions;
}

/**
 * Optional Parameters.
 */
export interface CertificateGetOptionalParams extends msRest.RequestOptionsBase {
  /**
   * Additional parameters for the operation
   */
  certificateGetOptions?: CertificateGetOptions;
}

/**
 * Optional Parameters.
 */
export interface CertificateListNextOptionalParams extends msRest.RequestOptionsBase {
  /**
   * Additional parameters for the operation
   */
  certificateListNextOptions?: CertificateListNextOptions;
}

/**
 * Optional Parameters.
 */
export interface FileDeleteFromTaskOptionalParams extends msRest.RequestOptionsBase {
  /**
   * Whether to delete children of a directory. If the filePath parameter represents a directory
   * instead of a file, you can set recursive to true to delete the directory and all of the files
   * and subdirectories in it. If recursive is false then the directory must be empty or deletion
   * will fail.
   */
  recursive?: boolean;
  /**
   * Additional parameters for the operation
   */
  fileDeleteFromTaskOptions?: FileDeleteFromTaskOptions;
}

/**
 * Optional Parameters.
 */
export interface FileGetFromTaskOptionalParams extends msRest.RequestOptionsBase {
  /**
   * Additional parameters for the operation
   */
  fileGetFromTaskOptions?: FileGetFromTaskOptions;
}

/**
 * Optional Parameters.
 */
export interface FileGetPropertiesFromTaskOptionalParams extends msRest.RequestOptionsBase {
  /**
   * Additional parameters for the operation
   */
  fileGetPropertiesFromTaskOptions?: FileGetPropertiesFromTaskOptions;
}

/**
 * Optional Parameters.
 */
export interface FileDeleteFromComputeNodeOptionalParams extends msRest.RequestOptionsBase {
  /**
   * Whether to delete children of a directory. If the filePath parameter represents a directory
   * instead of a file, you can set recursive to true to delete the directory and all of the files
   * and subdirectories in it. If recursive is false then the directory must be empty or deletion
   * will fail.
   */
  recursive?: boolean;
  /**
   * Additional parameters for the operation
   */
  fileDeleteFromComputeNodeOptions?: FileDeleteFromComputeNodeOptions;
}

/**
 * Optional Parameters.
 */
export interface FileGetFromComputeNodeOptionalParams extends msRest.RequestOptionsBase {
  /**
   * Additional parameters for the operation
   */
  fileGetFromComputeNodeOptions?: FileGetFromComputeNodeOptions;
}

/**
 * Optional Parameters.
 */
export interface FileGetPropertiesFromComputeNodeOptionalParams extends msRest.RequestOptionsBase {
  /**
   * Additional parameters for the operation
   */
  fileGetPropertiesFromComputeNodeOptions?: FileGetPropertiesFromComputeNodeOptions;
}

/**
 * Optional Parameters.
 */
export interface FileListFromTaskOptionalParams extends msRest.RequestOptionsBase {
  /**
   * Whether to list children of the task directory. This parameter can be used in combination with
   * the filter parameter to list specific type of files.
   */
  recursive?: boolean;
  /**
   * Additional parameters for the operation
   */
  fileListFromTaskOptions?: FileListFromTaskOptions;
}

/**
 * Optional Parameters.
 */
export interface FileListFromComputeNodeOptionalParams extends msRest.RequestOptionsBase {
  /**
   * Whether to list children of a directory.
   */
  recursive?: boolean;
  /**
   * Additional parameters for the operation
   */
  fileListFromComputeNodeOptions?: FileListFromComputeNodeOptions;
}

/**
 * Optional Parameters.
 */
export interface FileListFromTaskNextOptionalParams extends msRest.RequestOptionsBase {
  /**
   * Additional parameters for the operation
   */
  fileListFromTaskNextOptions?: FileListFromTaskNextOptions;
}

/**
 * Optional Parameters.
 */
export interface FileListFromComputeNodeNextOptionalParams extends msRest.RequestOptionsBase {
  /**
   * Additional parameters for the operation
   */
  fileListFromComputeNodeNextOptions?: FileListFromComputeNodeNextOptions;
}

/**
 * Optional Parameters.
 */
export interface JobScheduleExistsOptionalParams extends msRest.RequestOptionsBase {
  /**
   * Additional parameters for the operation
   */
  jobScheduleExistsOptions?: JobScheduleExistsOptions;
}

/**
 * Optional Parameters.
 */
export interface JobScheduleDeleteMethodOptionalParams extends msRest.RequestOptionsBase {
  /**
   * Additional parameters for the operation
   */
  jobScheduleDeleteMethodOptions?: JobScheduleDeleteMethodOptions;
}

/**
 * Optional Parameters.
 */
export interface JobScheduleGetOptionalParams extends msRest.RequestOptionsBase {
  /**
   * Additional parameters for the operation
   */
  jobScheduleGetOptions?: JobScheduleGetOptions;
}

/**
 * Optional Parameters.
 */
export interface JobSchedulePatchOptionalParams extends msRest.RequestOptionsBase {
  /**
   * Additional parameters for the operation
   */
  jobSchedulePatchOptions?: JobSchedulePatchOptions;
}

/**
 * Optional Parameters.
 */
export interface JobScheduleUpdateOptionalParams extends msRest.RequestOptionsBase {
  /**
   * Additional parameters for the operation
   */
  jobScheduleUpdateOptions?: JobScheduleUpdateOptions;
}

/**
 * Optional Parameters.
 */
export interface JobScheduleDisableOptionalParams extends msRest.RequestOptionsBase {
  /**
   * Additional parameters for the operation
   */
  jobScheduleDisableOptions?: JobScheduleDisableOptions;
}

/**
 * Optional Parameters.
 */
export interface JobScheduleEnableOptionalParams extends msRest.RequestOptionsBase {
  /**
   * Additional parameters for the operation
   */
  jobScheduleEnableOptions?: JobScheduleEnableOptions;
}

/**
 * Optional Parameters.
 */
export interface JobScheduleTerminateOptionalParams extends msRest.RequestOptionsBase {
  /**
   * Additional parameters for the operation
   */
  jobScheduleTerminateOptions?: JobScheduleTerminateOptions;
}

/**
 * Optional Parameters.
 */
export interface JobScheduleAddOptionalParams extends msRest.RequestOptionsBase {
  /**
   * Additional parameters for the operation
   */
  jobScheduleAddOptions?: JobScheduleAddOptions;
}

/**
 * Optional Parameters.
 */
export interface JobScheduleListOptionalParams extends msRest.RequestOptionsBase {
  /**
   * Additional parameters for the operation
   */
  jobScheduleListOptions?: JobScheduleListOptions;
}

/**
 * Optional Parameters.
 */
export interface JobScheduleListNextOptionalParams extends msRest.RequestOptionsBase {
  /**
   * Additional parameters for the operation
   */
  jobScheduleListNextOptions?: JobScheduleListNextOptions;
}

/**
 * Optional Parameters.
 */
export interface TaskAddOptionalParams extends msRest.RequestOptionsBase {
  /**
   * Additional parameters for the operation
   */
  taskAddOptions?: TaskAddOptions;
}

/**
 * Optional Parameters.
 */
export interface TaskListOptionalParams extends msRest.RequestOptionsBase {
  /**
   * Additional parameters for the operation
   */
  taskListOptions?: TaskListOptions;
}

/**
 * Optional Parameters.
 */
export interface TaskAddCollectionOptionalParams extends msRest.RequestOptionsBase {
  /**
   * Additional parameters for the operation
   */
  taskAddCollectionOptions?: TaskAddCollectionOptions;
}

/**
 * Optional Parameters.
 */
export interface TaskDeleteMethodOptionalParams extends msRest.RequestOptionsBase {
  /**
   * Additional parameters for the operation
   */
  taskDeleteMethodOptions?: TaskDeleteMethodOptions;
}

/**
 * Optional Parameters.
 */
export interface TaskGetOptionalParams extends msRest.RequestOptionsBase {
  /**
   * Additional parameters for the operation
   */
  taskGetOptions?: TaskGetOptions;
}

/**
 * Optional Parameters.
 */
export interface TaskUpdateOptionalParams extends msRest.RequestOptionsBase {
  /**
   * Constraints that apply to this task. If omitted, the task is given the default constraints.
   * For multi-instance tasks, updating the retention time applies only to the primary task and not
   * subtasks.
   */
  constraints?: TaskConstraints;
  /**
   * Additional parameters for the operation
   */
  taskUpdateOptions?: TaskUpdateOptions;
}

/**
 * Optional Parameters.
 */
export interface TaskListSubtasksOptionalParams extends msRest.RequestOptionsBase {
  /**
   * Additional parameters for the operation
   */
  taskListSubtasksOptions?: TaskListSubtasksOptions;
}

/**
 * Optional Parameters.
 */
export interface TaskTerminateOptionalParams extends msRest.RequestOptionsBase {
  /**
   * Additional parameters for the operation
   */
  taskTerminateOptions?: TaskTerminateOptions;
}

/**
 * Optional Parameters.
 */
export interface TaskReactivateOptionalParams extends msRest.RequestOptionsBase {
  /**
   * Additional parameters for the operation
   */
  taskReactivateOptions?: TaskReactivateOptions;
}

/**
 * Optional Parameters.
 */
export interface TaskListNextOptionalParams extends msRest.RequestOptionsBase {
  /**
   * Additional parameters for the operation
   */
  taskListNextOptions?: TaskListNextOptions;
}

/**
 * Optional Parameters.
 */
export interface ComputeNodeAddUserOptionalParams extends msRest.RequestOptionsBase {
  /**
   * Additional parameters for the operation
   */
  computeNodeAddUserOptions?: ComputeNodeAddUserOptions;
}

/**
 * Optional Parameters.
 */
export interface ComputeNodeDeleteUserOptionalParams extends msRest.RequestOptionsBase {
  /**
   * Additional parameters for the operation
   */
  computeNodeDeleteUserOptions?: ComputeNodeDeleteUserOptions;
}

/**
 * Optional Parameters.
 */
export interface ComputeNodeUpdateUserOptionalParams extends msRest.RequestOptionsBase {
  /**
   * Additional parameters for the operation
   */
  computeNodeUpdateUserOptions?: ComputeNodeUpdateUserOptions;
}

/**
 * Optional Parameters.
 */
export interface ComputeNodeGetOptionalParams extends msRest.RequestOptionsBase {
  /**
   * Additional parameters for the operation
   */
  computeNodeGetOptions?: ComputeNodeGetOptions;
}

/**
 * Optional Parameters.
 */
export interface ComputeNodeRebootOptionalParams extends msRest.RequestOptionsBase {
  /**
   * When to reboot the compute node and what to do with currently running tasks. The default value
   * is requeue. Possible values include: 'requeue', 'terminate', 'taskCompletion', 'retainedData'
   */
  nodeRebootOption?: ComputeNodeRebootOption;
  /**
   * Additional parameters for the operation
   */
  computeNodeRebootOptions?: ComputeNodeRebootOptions;
}

/**
 * Optional Parameters.
 */
export interface ComputeNodeReimageOptionalParams extends msRest.RequestOptionsBase {
  /**
   * When to reimage the compute node and what to do with currently running tasks. The default
   * value is requeue. Possible values include: 'requeue', 'terminate', 'taskCompletion',
   * 'retainedData'
   */
  nodeReimageOption?: ComputeNodeReimageOption;
  /**
   * Additional parameters for the operation
   */
  computeNodeReimageOptions?: ComputeNodeReimageOptions;
}

/**
 * Optional Parameters.
 */
export interface ComputeNodeDisableSchedulingOptionalParams extends msRest.RequestOptionsBase {
  /**
   * What to do with currently running tasks when disabling task scheduling on the compute node.
   * The default value is requeue. Possible values include: 'requeue', 'terminate',
   * 'taskCompletion'
   */
  nodeDisableSchedulingOption?: DisableComputeNodeSchedulingOption;
  /**
   * Additional parameters for the operation
   */
  computeNodeDisableSchedulingOptions?: ComputeNodeDisableSchedulingOptions;
}

/**
 * Optional Parameters.
 */
export interface ComputeNodeEnableSchedulingOptionalParams extends msRest.RequestOptionsBase {
  /**
   * Additional parameters for the operation
   */
  computeNodeEnableSchedulingOptions?: ComputeNodeEnableSchedulingOptions;
}

/**
 * Optional Parameters.
 */
export interface ComputeNodeGetRemoteLoginSettingsOptionalParams extends msRest.RequestOptionsBase {
  /**
   * Additional parameters for the operation
   */
  computeNodeGetRemoteLoginSettingsOptions?: ComputeNodeGetRemoteLoginSettingsOptions;
}

/**
 * Optional Parameters.
 */
export interface ComputeNodeGetRemoteDesktopOptionalParams extends msRest.RequestOptionsBase {
  /**
   * Additional parameters for the operation
   */
  computeNodeGetRemoteDesktopOptions?: ComputeNodeGetRemoteDesktopOptions;
}

/**
 * Optional Parameters.
 */
export interface ComputeNodeUploadBatchServiceLogsOptionalParams extends msRest.RequestOptionsBase {
  /**
   * Additional parameters for the operation
   */
  computeNodeUploadBatchServiceLogsOptions?: ComputeNodeUploadBatchServiceLogsOptions;
}

/**
 * Optional Parameters.
 */
export interface ComputeNodeListOptionalParams extends msRest.RequestOptionsBase {
  /**
   * Additional parameters for the operation
   */
  computeNodeListOptions?: ComputeNodeListOptions;
}

/**
 * Optional Parameters.
 */
export interface ComputeNodeListNextOptionalParams extends msRest.RequestOptionsBase {
  /**
   * Additional parameters for the operation
   */
  computeNodeListNextOptions?: ComputeNodeListNextOptions;
}

/**
 * Defines headers for List operation.
 */
export interface ApplicationListHeaders {
  /**
   * The client-request-id provided by the client during the request. This will be returned only if
   * the return-client-request-id parameter was set to true.
   */
  clientRequestId: string;
  /**
   * A unique identifier for the request that was made to the Batch service. If a request is
   * consistently failing and you have verified that the request is properly formulated, you may
   * use this value to report the error to Microsoft. In your report, include the value of this
   * request ID, the approximate time that the request was made, the Batch account against which
   * the request was made, and the region that account resides in.
   */
  requestId: string;
  /**
   * The ETag HTTP response header. This is an opaque string. You can use it to detect whether the
   * resource has changed between requests. In particular, you can pass the ETag to one of the
   * If-Modified-Since, If-Unmodified-Since, If-Match or If-None-Match headers.
   */
  eTag: string;
  /**
   * The time at which the resource was last modified.
   */
  lastModified: Date;
}

/**
 * Defines headers for Get operation.
 */
export interface ApplicationGetHeaders {
  /**
   * The client-request-id provided by the client during the request. This will be returned only if
   * the return-client-request-id parameter was set to true.
   */
  clientRequestId: string;
  /**
   * A unique identifier for the request that was made to the Batch service. If a request is
   * consistently failing and you have verified that the request is properly formulated, you may
   * use this value to report the error to Microsoft. In your report, include the value of this
   * request ID, the approximate time that the request was made, the Batch account against which
   * the request was made, and the region that account resides in.
   */
  requestId: string;
  /**
   * The ETag HTTP response header. This is an opaque string. You can use it to detect whether the
   * resource has changed between requests. In particular, you can pass the ETag to one of the
   * If-Modified-Since, If-Unmodified-Since, If-Match or If-None-Match headers.
   */
  eTag: string;
  /**
   * The time at which the resource was last modified.
   */
  lastModified: Date;
}

/**
 * Defines headers for ListUsageMetrics operation.
 */
export interface PoolListUsageMetricsHeaders {
  /**
   * The client-request-id provided by the client during the request. This will be returned only if
   * the return-client-request-id parameter was set to true.
   */
  clientRequestId: string;
  /**
   * A unique identifier for the request that was made to the Batch service. If a request is
   * consistently failing and you have verified that the request is properly formulated, you may
   * use this value to report the error to Microsoft. In your report, include the value of this
   * request ID, the approximate time that the request was made, the Batch account against which
   * the request was made, and the region that account resides in.
   */
  requestId: string;
  /**
   * The ETag HTTP response header. This is an opaque string. You can use it to detect whether the
   * resource has changed between requests. In particular, you can pass the ETag to one of the
   * If-Modified-Since, If-Unmodified-Since, If-Match or If-None-Match headers.
   */
  eTag: string;
  /**
   * The time at which the resource was last modified.
   */
  lastModified: Date;
}

/**
 * Defines headers for ListNodeAgentSkus operation.
 */
export interface AccountListNodeAgentSkusHeaders {
  /**
   * The client-request-id provided by the client during the request. This will be returned only if
   * the return-client-request-id parameter was set to true.
   */
  clientRequestId: string;
  /**
   * A unique identifier for the request that was made to the Batch service. If a request is
   * consistently failing and you have verified that the request is properly formulated, you may
   * use this value to report the error to Microsoft. In your report, include the value of this
   * request ID, the approximate time that the request was made, the Batch account against which
   * the request was made, and the region that account resides in.
   */
  requestId: string;
  /**
   * The ETag HTTP response header. This is an opaque string. You can use it to detect whether the
   * resource has changed between requests. In particular, you can pass the ETag to one of the
   * If-Modified-Since, If-Unmodified-Since, If-Match or If-None-Match headers.
   */
  eTag: string;
  /**
   * The time at which the resource was last modified.
   */
  lastModified: Date;
}

/**
 * Defines headers for ListPoolNodeCounts operation.
 */
export interface AccountListPoolNodeCountsHeaders {
  /**
   * The client-request-id provided by the client during the request. This will be returned only if
   * the return-client-request-id parameter was set to true.
   */
  clientRequestId: string;
  /**
   * A unique identifier for the request that was made to the Batch service. If a request is
   * consistently failing and you have verified that the request is properly formulated, you may
   * use this value to report the error to Microsoft. In your report, include the value of this
   * request ID, the approximate time that the request was made, the Batch account against which
   * the request was made, and the region that account resides in.
   */
  requestId: string;
}

/**
 * Defines headers for GetAllLifetimeStatistics operation.
 */
export interface PoolGetAllLifetimeStatisticsHeaders {
  /**
   * The client-request-id provided by the client during the request. This will be returned only if
   * the return-client-request-id parameter was set to true.
   */
  clientRequestId: string;
  /**
   * A unique identifier for the request that was made to the Batch service. If a request is
   * consistently failing and you have verified that the request is properly formulated, you may
   * use this value to report the error to Microsoft. In your report, include the value of this
   * request ID, the approximate time that the request was made, the Batch account against which
   * the request was made, and the region that account resides in.
   */
  requestId: string;
  /**
   * The ETag HTTP response header. This is an opaque string. You can use it to detect whether the
   * resource has changed between requests. In particular, you can pass the ETag to one of the
   * If-Modified-Since, If-Unmodified-Since, If-Match or If-None-Match headers.
   */
  eTag: string;
  /**
   * The time at which the resource was last modified.
   */
  lastModified: Date;
}

/**
 * Defines headers for GetAllLifetimeStatistics operation.
 */
export interface JobGetAllLifetimeStatisticsHeaders {
  /**
   * The client-request-id provided by the client during the request. This will be returned only if
   * the return-client-request-id parameter was set to true.
   */
  clientRequestId: string;
  /**
   * A unique identifier for the request that was made to the Batch service. If a request is
   * consistently failing and you have verified that the request is properly formulated, you may
   * use this value to report the error to Microsoft. In your report, include the value of this
   * request ID, the approximate time that the request was made, the Batch account against which
   * the request was made, and the region that account resides in.
   */
  requestId: string;
  /**
   * The ETag HTTP response header. This is an opaque string. You can use it to detect whether the
   * resource has changed between requests. In particular, you can pass the ETag to one of the
   * If-Modified-Since, If-Unmodified-Since, If-Match or If-None-Match headers.
   */
  eTag: string;
  /**
   * The time at which the resource was last modified.
   */
  lastModified: Date;
}

/**
 * Defines headers for Add operation.
 */
export interface CertificateAddHeaders {
  /**
   * The client-request-id provided by the client during the request. This will be returned only if
   * the return-client-request-id parameter was set to true.
   */
  clientRequestId: string;
  /**
   * A unique identifier for the request that was made to the Batch service. If a request is
   * consistently failing and you have verified that the request is properly formulated, you may
   * use this value to report the error to Microsoft. In your report, include the value of this
   * request ID, the approximate time that the request was made, the Batch account against which
   * the request was made, and the region that account resides in.
   */
  requestId: string;
  /**
   * The ETag HTTP response header. This is an opaque string. You can use it to detect whether the
   * resource has changed between requests. In particular, you can pass the ETag to one of the
   * If-Modified-Since, If-Unmodified-Since, If-Match or If-None-Match headers.
   */
  eTag: string;
  /**
   * The time at which the resource was last modified.
   */
  lastModified: Date;
  /**
   * The OData ID of the resource to which the request applied.
   */
  dataServiceId: string;
}

/**
 * Defines headers for List operation.
 */
export interface CertificateListHeaders {
  /**
   * The client-request-id provided by the client during the request. This will be returned only if
   * the return-client-request-id parameter was set to true.
   */
  clientRequestId: string;
  /**
   * A unique identifier for the request that was made to the Batch service. If a request is
   * consistently failing and you have verified that the request is properly formulated, you may
   * use this value to report the error to Microsoft. In your report, include the value of this
   * request ID, the approximate time that the request was made, the Batch account against which
   * the request was made, and the region that account resides in.
   */
  requestId: string;
  /**
   * The ETag HTTP response header. This is an opaque string. You can use it to detect whether the
   * resource has changed between requests. In particular, you can pass the ETag to one of the
   * If-Modified-Since, If-Unmodified-Since, If-Match or If-None-Match headers.
   */
  eTag: string;
  /**
   * The time at which the resource was last modified.
   */
  lastModified: Date;
}

/**
 * Defines headers for CancelDeletion operation.
 */
export interface CertificateCancelDeletionHeaders {
  /**
   * The client-request-id provided by the client during the request. This will be returned only if
   * the return-client-request-id parameter was set to true.
   */
  clientRequestId: string;
  /**
   * A unique identifier for the request that was made to the Batch service. If a request is
   * consistently failing and you have verified that the request is properly formulated, you may
   * use this value to report the error to Microsoft. In your report, include the value of this
   * request ID, the approximate time that the request was made, the Batch account against which
   * the request was made, and the region that account resides in.
   */
  requestId: string;
  /**
   * The ETag HTTP response header. This is an opaque string. You can use it to detect whether the
   * resource has changed between requests. In particular, you can pass the ETag to one of the
   * If-Modified-Since, If-Unmodified-Since, If-Match or If-None-Match headers.
   */
  eTag: string;
  /**
   * The time at which the resource was last modified.
   */
  lastModified: Date;
  /**
   * The OData ID of the resource to which the request applied.
   */
  dataServiceId: string;
}

/**
 * Defines headers for Delete operation.
 */
export interface CertificateDeleteHeaders {
  /**
   * The client-request-id provided by the client during the request. This will be returned only if
   * the return-client-request-id parameter was set to true.
   */
  clientRequestId: string;
  /**
   * A unique identifier for the request that was made to the Batch service. If a request is
   * consistently failing and you have verified that the request is properly formulated, you may
   * use this value to report the error to Microsoft. In your report, include the value of this
   * request ID, the approximate time that the request was made, the Batch account against which
   * the request was made, and the region that account resides in.
   */
  requestId: string;
  /**
   * The ETag HTTP response header. This is an opaque string. You can use it to detect whether the
   * resource has changed between requests. In particular, you can pass the ETag to one of the
   * If-Modified-Since, If-Unmodified-Since, If-Match or If-None-Match headers.
   */
  eTag: string;
  /**
   * The time at which the resource was last modified.
   */
  lastModified: Date;
}

/**
 * Defines headers for Get operation.
 */
export interface CertificateGetHeaders {
  /**
   * The client-request-id provided by the client during the request. This will be returned only if
   * the return-client-request-id parameter was set to true.
   */
  clientRequestId: string;
  /**
   * A unique identifier for the request that was made to the Batch service. If a request is
   * consistently failing and you have verified that the request is properly formulated, you may
   * use this value to report the error to Microsoft. In your report, include the value of this
   * request ID, the approximate time that the request was made, the Batch account against which
   * the request was made, and the region that account resides in.
   */
  requestId: string;
  /**
   * The ETag HTTP response header. This is an opaque string. You can use it to detect whether the
   * resource has changed between requests. In particular, you can pass the ETag to one of the
   * If-Modified-Since, If-Unmodified-Since, If-Match or If-None-Match headers.
   */
  eTag: string;
  /**
   * The time at which the resource was last modified.
   */
  lastModified: Date;
}

/**
 * Defines headers for DeleteFromTask operation.
 */
export interface FileDeleteFromTaskHeaders {
  /**
   * The client-request-id provided by the client during the request. This will be returned only if
   * the return-client-request-id parameter was set to true.
   */
  clientRequestId: string;
  /**
   * A unique identifier for the request that was made to the Batch service. If a request is
   * consistently failing and you have verified that the request is properly formulated, you may
   * use this value to report the error to Microsoft. In your report, include the value of this
   * request ID, the approximate time that the request was made, the Batch account against which
   * the request was made, and the region that account resides in.
   */
  requestId: string;
}

/**
 * Defines headers for GetFromTask operation.
 */
export interface FileGetFromTaskHeaders {
  /**
   * The client-request-id provided by the client during the request. This will be returned only if
   * the return-client-request-id parameter was set to true.
   */
  clientRequestId: string;
  /**
   * A unique identifier for the request that was made to the Batch service. If a request is
   * consistently failing and you have verified that the request is properly formulated, you may
   * use this value to report the error to Microsoft. In your report, include the value of this
   * request ID, the approximate time that the request was made, the Batch account against which
   * the request was made, and the region that account resides in.
   */
  requestId: string;
  /**
   * The ETag HTTP response header. This is an opaque string. You can use it to detect whether the
   * resource has changed between requests. In particular, you can pass the ETag to one of the
   * If-Modified-Since, If-Unmodified-Since, If-Match or If-None-Match headers.
   */
  eTag: string;
  /**
   * The time at which the resource was last modified.
   */
  lastModified: Date;
  /**
   * The file creation time.
   */
  ocpCreationTime: Date;
  /**
   * Whether the object represents a directory.
   */
  ocpBatchFileIsdirectory: boolean;
  /**
   * The URL of the file.
   */
  ocpBatchFileUrl: string;
  /**
   * The file mode attribute in octal format.
   */
  ocpBatchFileMode: string;
  /**
   * The content type of the file.
   */
  contentType: string;
  /**
   * The length of the file.
   */
  contentLength: number;
}

/**
 * Defines headers for GetPropertiesFromTask operation.
 */
export interface FileGetPropertiesFromTaskHeaders {
  /**
   * The client-request-id provided by the client during the request. This will be returned only if
   * the return-client-request-id parameter was set to true.
   */
  clientRequestId: string;
  /**
   * A unique identifier for the request that was made to the Batch service. If a request is
   * consistently failing and you have verified that the request is properly formulated, you may
   * use this value to report the error to Microsoft. In your report, include the value of this
   * request ID, the approximate time that the request was made, the Batch account against which
   * the request was made, and the region that account resides in.
   */
  requestId: string;
  /**
   * The ETag HTTP response header. This is an opaque string. You can use it to detect whether the
   * resource has changed between requests. In particular, you can pass the ETag to one of the
   * If-Modified-Since, If-Unmodified-Since, If-Match or If-None-Match headers.
   */
  eTag: string;
  /**
   * The time at which the resource was last modified.
   */
  lastModified: Date;
  /**
   * The file creation time.
   */
  ocpCreationTime: Date;
  /**
   * Whether the object represents a directory.
   */
  ocpBatchFileIsdirectory: boolean;
  /**
   * The URL of the file.
   */
  ocpBatchFileUrl: string;
  /**
   * The file mode attribute in octal format.
   */
  ocpBatchFileMode: string;
  /**
   * The content type of the file.
   */
  contentType: string;
  /**
   * The length of the file.
   */
  contentLength: number;
}

/**
 * Defines headers for DeleteFromComputeNode operation.
 */
export interface FileDeleteFromComputeNodeHeaders {
  /**
   * The client-request-id provided by the client during the request. This will be returned only if
   * the return-client-request-id parameter was set to true.
   */
  clientRequestId: string;
  /**
   * A unique identifier for the request that was made to the Batch service. If a request is
   * consistently failing and you have verified that the request is properly formulated, you may
   * use this value to report the error to Microsoft. In your report, include the value of this
   * request ID, the approximate time that the request was made, the Batch account against which
   * the request was made, and the region that account resides in.
   */
  requestId: string;
}

/**
 * Defines headers for GetFromComputeNode operation.
 */
export interface FileGetFromComputeNodeHeaders {
  /**
   * The client-request-id provided by the client during the request. This will be returned only if
   * the return-client-request-id parameter was set to true.
   */
  clientRequestId: string;
  /**
   * A unique identifier for the request that was made to the Batch service. If a request is
   * consistently failing and you have verified that the request is properly formulated, you may
   * use this value to report the error to Microsoft. In your report, include the value of this
   * request ID, the approximate time that the request was made, the Batch account against which
   * the request was made, and the region that account resides in.
   */
  requestId: string;
  /**
   * The ETag HTTP response header. This is an opaque string. You can use it to detect whether the
   * resource has changed between requests. In particular, you can pass the ETag to one of the
   * If-Modified-Since, If-Unmodified-Since, If-Match or If-None-Match headers.
   */
  eTag: string;
  /**
   * The time at which the resource was last modified.
   */
  lastModified: Date;
  /**
   * The file creation time.
   */
  ocpCreationTime: Date;
  /**
   * Whether the object represents a directory.
   */
  ocpBatchFileIsdirectory: boolean;
  /**
   * The URL of the file.
   */
  ocpBatchFileUrl: string;
  /**
   * The file mode attribute in octal format.
   */
  ocpBatchFileMode: string;
  /**
   * The content type of the file.
   */
  contentType: string;
  /**
   * The length of the file.
   */
  contentLength: number;
}

/**
 * Defines headers for GetPropertiesFromComputeNode operation.
 */
export interface FileGetPropertiesFromComputeNodeHeaders {
  /**
   * The client-request-id provided by the client during the request. This will be returned only if
   * the return-client-request-id parameter was set to true.
   */
  clientRequestId: string;
  /**
   * A unique identifier for the request that was made to the Batch service. If a request is
   * consistently failing and you have verified that the request is properly formulated, you may
   * use this value to report the error to Microsoft. In your report, include the value of this
   * request ID, the approximate time that the request was made, the Batch account against which
   * the request was made, and the region that account resides in.
   */
  requestId: string;
  /**
   * The ETag HTTP response header. This is an opaque string. You can use it to detect whether the
   * resource has changed between requests. In particular, you can pass the ETag to one of the
   * If-Modified-Since, If-Unmodified-Since, If-Match or If-None-Match headers.
   */
  eTag: string;
  /**
   * The time at which the resource was last modified.
   */
  lastModified: Date;
  /**
   * The file creation time.
   */
  ocpCreationTime: Date;
  /**
   * Whether the object represents a directory.
   */
  ocpBatchFileIsdirectory: boolean;
  /**
   * The URL of the file.
   */
  ocpBatchFileUrl: string;
  /**
   * The file mode attribute in octal format.
   */
  ocpBatchFileMode: string;
  /**
   * The content type of the file.
   */
  contentType: string;
  /**
   * The length of the file.
   */
  contentLength: number;
}

/**
 * Defines headers for ListFromTask operation.
 */
export interface FileListFromTaskHeaders {
  /**
   * The client-request-id provided by the client during the request. This will be returned only if
   * the return-client-request-id parameter was set to true.
   */
  clientRequestId: string;
  /**
   * A unique identifier for the request that was made to the Batch service. If a request is
   * consistently failing and you have verified that the request is properly formulated, you may
   * use this value to report the error to Microsoft. In your report, include the value of this
   * request ID, the approximate time that the request was made, the Batch account against which
   * the request was made, and the region that account resides in.
   */
  requestId: string;
  /**
   * The ETag HTTP response header. This is an opaque string. You can use it to detect whether the
   * resource has changed between requests. In particular, you can pass the ETag to one of the
   * If-Modified-Since, If-Unmodified-Since, If-Match or If-None-Match headers.
   */
  eTag: string;
  /**
   * The time at which the resource was last modified.
   */
  lastModified: Date;
}

/**
 * Defines headers for ListFromComputeNode operation.
 */
export interface FileListFromComputeNodeHeaders {
  /**
   * The client-request-id provided by the client during the request. This will be returned only if
   * the return-client-request-id parameter was set to true.
   */
  clientRequestId: string;
  /**
   * A unique identifier for the request that was made to the Batch service. If a request is
   * consistently failing and you have verified that the request is properly formulated, you may
   * use this value to report the error to Microsoft. In your report, include the value of this
   * request ID, the approximate time that the request was made, the Batch account against which
   * the request was made, and the region that account resides in.
   */
  requestId: string;
  /**
   * The ETag HTTP response header. This is an opaque string. You can use it to detect whether the
   * resource has changed between requests. In particular, you can pass the ETag to one of the
   * If-Modified-Since, If-Unmodified-Since, If-Match or If-None-Match headers.
   */
  eTag: string;
  /**
   * The time at which the resource was last modified.
   */
  lastModified: Date;
}

/**
 * Defines headers for Exists operation.
 */
export interface JobScheduleExistsHeaders {
  /**
   * The client-request-id provided by the client during the request. This will be returned only if
   * the return-client-request-id parameter was set to true.
   */
  clientRequestId: string;
  /**
   * A unique identifier for the request that was made to the Batch service. If a request is
   * consistently failing and you have verified that the request is properly formulated, you may
   * use this value to report the error to Microsoft. In your report, include the value of this
   * request ID, the approximate time that the request was made, the Batch account against which
   * the request was made, and the region that account resides in.
   */
  requestId: string;
  /**
   * The ETag HTTP response header. This is an opaque string. You can use it to detect whether the
   * resource has changed between requests. In particular, you can pass the ETag to one of the
   * If-Modified-Since, If-Unmodified-Since, If-Match or If-None-Match headers.
   */
  eTag: string;
  /**
   * The time at which the resource was last modified.
   */
  lastModified: Date;
}

/**
 * Defines headers for Delete operation.
 */
export interface JobScheduleDeleteHeaders {
  /**
   * The client-request-id provided by the client during the request. This will be returned only if
   * the return-client-request-id parameter was set to true.
   */
  clientRequestId: string;
  /**
   * A unique identifier for the request that was made to the Batch service. If a request is
   * consistently failing and you have verified that the request is properly formulated, you may
   * use this value to report the error to Microsoft. In your report, include the value of this
   * request ID, the approximate time that the request was made, the Batch account against which
   * the request was made, and the region that account resides in.
   */
  requestId: string;
}

/**
 * Defines headers for Get operation.
 */
export interface JobScheduleGetHeaders {
  /**
   * The client-request-id provided by the client during the request. This will be returned only if
   * the return-client-request-id parameter was set to true.
   */
  clientRequestId: string;
  /**
   * A unique identifier for the request that was made to the Batch service. If a request is
   * consistently failing and you have verified that the request is properly formulated, you may
   * use this value to report the error to Microsoft. In your report, include the value of this
   * request ID, the approximate time that the request was made, the Batch account against which
   * the request was made, and the region that account resides in.
   */
  requestId: string;
  /**
   * The ETag HTTP response header. This is an opaque string. You can use it to detect whether the
   * resource has changed between requests. In particular, you can pass the ETag to one of the
   * If-Modified-Since, If-Unmodified-Since, If-Match or If-None-Match headers.
   */
  eTagHeader: string;
  /**
   * The time at which the resource was last modified.
   */
  lastModifiedHeader: Date;
}

/**
 * Defines headers for Patch operation.
 */
export interface JobSchedulePatchHeaders {
  /**
   * The client-request-id provided by the client during the request. This will be returned only if
   * the return-client-request-id parameter was set to true.
   */
  clientRequestId: string;
  /**
   * A unique identifier for the request that was made to the Batch service. If a request is
   * consistently failing and you have verified that the request is properly formulated, you may
   * use this value to report the error to Microsoft. In your report, include the value of this
   * request ID, the approximate time that the request was made, the Batch account against which
   * the request was made, and the region that account resides in.
   */
  requestId: string;
  /**
   * The ETag HTTP response header. This is an opaque string. You can use it to detect whether the
   * resource has changed between requests. In particular, you can pass the ETag to one of the
   * If-Modified-Since, If-Unmodified-Since, If-Match or If-None-Match headers.
   */
  eTag: string;
  /**
   * The time at which the resource was last modified.
   */
  lastModified: Date;
  /**
   * The OData ID of the resource to which the request applied.
   */
  dataServiceId: string;
}

/**
 * Defines headers for Update operation.
 */
export interface JobScheduleUpdateHeaders {
  /**
   * The client-request-id provided by the client during the request. This will be returned only if
   * the return-client-request-id parameter was set to true.
   */
  clientRequestId: string;
  /**
   * A unique identifier for the request that was made to the Batch service. If a request is
   * consistently failing and you have verified that the request is properly formulated, you may
   * use this value to report the error to Microsoft. In your report, include the value of this
   * request ID, the approximate time that the request was made, the Batch account against which
   * the request was made, and the region that account resides in.
   */
  requestId: string;
  /**
   * The ETag HTTP response header. This is an opaque string. You can use it to detect whether the
   * resource has changed between requests. In particular, you can pass the ETag to one of the
   * If-Modified-Since, If-Unmodified-Since, If-Match or If-None-Match headers.
   */
  eTag: string;
  /**
   * The time at which the resource was last modified.
   */
  lastModified: Date;
  /**
   * The OData ID of the resource to which the request applied.
   */
  dataServiceId: string;
}

/**
 * Defines headers for Disable operation.
 */
export interface JobScheduleDisableHeaders {
  /**
   * The client-request-id provided by the client during the request. This will be returned only if
   * the return-client-request-id parameter was set to true.
   */
  clientRequestId: string;
  /**
   * A unique identifier for the request that was made to the Batch service. If a request is
   * consistently failing and you have verified that the request is properly formulated, you may
   * use this value to report the error to Microsoft. In your report, include the value of this
   * request ID, the approximate time that the request was made, the Batch account against which
   * the request was made, and the region that account resides in.
   */
  requestId: string;
  /**
   * The ETag HTTP response header. This is an opaque string. You can use it to detect whether the
   * resource has changed between requests. In particular, you can pass the ETag to one of the
   * If-Modified-Since, If-Unmodified-Since, If-Match or If-None-Match headers.
   */
  eTag: string;
  /**
   * The time at which the resource was last modified.
   */
  lastModified: Date;
  /**
   * The OData ID of the resource to which the request applied.
   */
  dataServiceId: string;
}

/**
 * Defines headers for Enable operation.
 */
export interface JobScheduleEnableHeaders {
  /**
   * The client-request-id provided by the client during the request. This will be returned only if
   * the return-client-request-id parameter was set to true.
   */
  clientRequestId: string;
  /**
   * A unique identifier for the request that was made to the Batch service. If a request is
   * consistently failing and you have verified that the request is properly formulated, you may
   * use this value to report the error to Microsoft. In your report, include the value of this
   * request ID, the approximate time that the request was made, the Batch account against which
   * the request was made, and the region that account resides in.
   */
  requestId: string;
  /**
   * The ETag HTTP response header. This is an opaque string. You can use it to detect whether the
   * resource has changed between requests. In particular, you can pass the ETag to one of the
   * If-Modified-Since, If-Unmodified-Since, If-Match or If-None-Match headers.
   */
  eTag: string;
  /**
   * The time at which the resource was last modified.
   */
  lastModified: Date;
  /**
   * The OData ID of the resource to which the request applied.
   */
  dataServiceId: string;
}

/**
 * Defines headers for Terminate operation.
 */
export interface JobScheduleTerminateHeaders {
  /**
   * The client-request-id provided by the client during the request. This will be returned only if
   * the return-client-request-id parameter was set to true.
   */
  clientRequestId: string;
  /**
   * A unique identifier for the request that was made to the Batch service. If a request is
   * consistently failing and you have verified that the request is properly formulated, you may
   * use this value to report the error to Microsoft. In your report, include the value of this
   * request ID, the approximate time that the request was made, the Batch account against which
   * the request was made, and the region that account resides in.
   */
  requestId: string;
  /**
   * The ETag HTTP response header. This is an opaque string. You can use it to detect whether the
   * resource has changed between requests. In particular, you can pass the ETag to one of the
   * If-Modified-Since, If-Unmodified-Since, If-Match or If-None-Match headers.
   */
  eTag: string;
  /**
   * The time at which the resource was last modified.
   */
  lastModified: Date;
  /**
   * The OData ID of the resource to which the request applied.
   */
  dataServiceId: string;
}

/**
 * Defines headers for Add operation.
 */
export interface JobScheduleAddHeaders {
  /**
   * The client-request-id provided by the client during the request. This will be returned only if
   * the return-client-request-id parameter was set to true.
   */
  clientRequestId: string;
  /**
   * A unique identifier for the request that was made to the Batch service. If a request is
   * consistently failing and you have verified that the request is properly formulated, you may
   * use this value to report the error to Microsoft. In your report, include the value of this
   * request ID, the approximate time that the request was made, the Batch account against which
   * the request was made, and the region that account resides in.
   */
  requestId: string;
  /**
   * The ETag HTTP response header. This is an opaque string. You can use it to detect whether the
   * resource has changed between requests. In particular, you can pass the ETag to one of the
   * If-Modified-Since, If-Unmodified-Since, If-Match or If-None-Match headers.
   */
  eTag: string;
  /**
   * The time at which the resource was last modified.
   */
  lastModified: Date;
  /**
   * The OData ID of the resource to which the request applied.
   */
  dataServiceId: string;
}

/**
 * Defines headers for List operation.
 */
export interface JobScheduleListHeaders {
  /**
   * The client-request-id provided by the client during the request. This will be returned only if
   * the return-client-request-id parameter was set to true.
   */
  clientRequestId: string;
  /**
   * A unique identifier for the request that was made to the Batch service. If a request is
   * consistently failing and you have verified that the request is properly formulated, you may
   * use this value to report the error to Microsoft. In your report, include the value of this
   * request ID, the approximate time that the request was made, the Batch account against which
   * the request was made, and the region that account resides in.
   */
  requestId: string;
  /**
   * The ETag HTTP response header. This is an opaque string. You can use it to detect whether the
   * resource has changed between requests. In particular, you can pass the ETag to one of the
   * If-Modified-Since, If-Unmodified-Since, If-Match or If-None-Match headers.
   */
  eTag: string;
  /**
   * The time at which the resource was last modified.
   */
  lastModified: Date;
}

/**
 * Defines headers for Delete operation.
 */
export interface JobDeleteHeaders {
  /**
   * The client-request-id provided by the client during the request. This will be returned only if
   * the return-client-request-id parameter was set to true.
   */
  clientRequestId: string;
  /**
   * A unique identifier for the request that was made to the Batch service. If a request is
   * consistently failing and you have verified that the request is properly formulated, you may
   * use this value to report the error to Microsoft. In your report, include the value of this
   * request ID, the approximate time that the request was made, the Batch account against which
   * the request was made, and the region that account resides in.
   */
  requestId: string;
}

/**
 * Defines headers for Get operation.
 */
export interface JobGetHeaders {
  /**
   * The client-request-id provided by the client during the request. This will be returned only if
   * the return-client-request-id parameter was set to true.
   */
  clientRequestId: string;
  /**
   * A unique identifier for the request that was made to the Batch service. If a request is
   * consistently failing and you have verified that the request is properly formulated, you may
   * use this value to report the error to Microsoft. In your report, include the value of this
   * request ID, the approximate time that the request was made, the Batch account against which
   * the request was made, and the region that account resides in.
   */
  requestId: string;
  /**
   * The ETag HTTP response header. This is an opaque string. You can use it to detect whether the
   * resource has changed between requests. In particular, you can pass the ETag to one of the
   * If-Modified-Since, If-Unmodified-Since, If-Match or If-None-Match headers.
   */
  eTagHeader: string;
  /**
   * The time at which the resource was last modified.
   */
  lastModifiedHeader: Date;
}

/**
 * Defines headers for Patch operation.
 */
export interface JobPatchHeaders {
  /**
   * The client-request-id provided by the client during the request. This will be returned only if
   * the return-client-request-id parameter was set to true.
   */
  clientRequestId: string;
  /**
   * A unique identifier for the request that was made to the Batch service. If a request is
   * consistently failing and you have verified that the request is properly formulated, you may
   * use this value to report the error to Microsoft. In your report, include the value of this
   * request ID, the approximate time that the request was made, the Batch account against which
   * the request was made, and the region that account resides in.
   */
  requestId: string;
  /**
   * The ETag HTTP response header. This is an opaque string. You can use it to detect whether the
   * resource has changed between requests. In particular, you can pass the ETag to one of the
   * If-Modified-Since, If-Unmodified-Since, If-Match or If-None-Match headers.
   */
  eTag: string;
  /**
   * The time at which the resource was last modified.
   */
  lastModified: Date;
  /**
   * The OData ID of the resource to which the request applied.
   */
  dataServiceId: string;
}

/**
 * Defines headers for Update operation.
 */
export interface JobUpdateHeaders {
  /**
   * The client-request-id provided by the client during the request. This will be returned only if
   * the return-client-request-id parameter was set to true.
   */
  clientRequestId: string;
  /**
   * A unique identifier for the request that was made to the Batch service. If a request is
   * consistently failing and you have verified that the request is properly formulated, you may
   * use this value to report the error to Microsoft. In your report, include the value of this
   * request ID, the approximate time that the request was made, the Batch account against which
   * the request was made, and the region that account resides in.
   */
  requestId: string;
  /**
   * The ETag HTTP response header. This is an opaque string. You can use it to detect whether the
   * resource has changed between requests. In particular, you can pass the ETag to one of the
   * If-Modified-Since, If-Unmodified-Since, If-Match or If-None-Match headers.
   */
  eTag: string;
  /**
   * The time at which the resource was last modified.
   */
  lastModified: Date;
  /**
   * The OData ID of the resource to which the request applied.
   */
  dataServiceId: string;
}

/**
 * Defines headers for Disable operation.
 */
export interface JobDisableHeaders {
  /**
   * The client-request-id provided by the client during the request. This will be returned only if
   * the return-client-request-id parameter was set to true.
   */
  clientRequestId: string;
  /**
   * A unique identifier for the request that was made to the Batch service. If a request is
   * consistently failing and you have verified that the request is properly formulated, you may
   * use this value to report the error to Microsoft. In your report, include the value of this
   * request ID, the approximate time that the request was made, the Batch account against which
   * the request was made, and the region that account resides in.
   */
  requestId: string;
  /**
   * The ETag HTTP response header. This is an opaque string. You can use it to detect whether the
   * resource has changed between requests. In particular, you can pass the ETag to one of the
   * If-Modified-Since, If-Unmodified-Since, If-Match or If-None-Match headers.
   */
  eTag: string;
  /**
   * The time at which the resource was last modified.
   */
  lastModified: Date;
  /**
   * The OData ID of the resource to which the request applied.
   */
  dataServiceId: string;
}

/**
 * Defines headers for Enable operation.
 */
export interface JobEnableHeaders {
  /**
   * The client-request-id provided by the client during the request. This will be returned only if
   * the return-client-request-id parameter was set to true.
   */
  clientRequestId: string;
  /**
   * A unique identifier for the request that was made to the Batch service. If a request is
   * consistently failing and you have verified that the request is properly formulated, you may
   * use this value to report the error to Microsoft. In your report, include the value of this
   * request ID, the approximate time that the request was made, the Batch account against which
   * the request was made, and the region that account resides in.
   */
  requestId: string;
  /**
   * The ETag HTTP response header. This is an opaque string. You can use it to detect whether the
   * resource has changed between requests. In particular, you can pass the ETag to one of the
   * If-Modified-Since, If-Unmodified-Since, If-Match or If-None-Match headers.
   */
  eTag: string;
  /**
   * The time at which the resource was last modified.
   */
  lastModified: Date;
  /**
   * The OData ID of the resource to which the request applied.
   */
  dataServiceId: string;
}

/**
 * Defines headers for Terminate operation.
 */
export interface JobTerminateHeaders {
  /**
   * The client-request-id provided by the client during the request. This will be returned only if
   * the return-client-request-id parameter was set to true.
   */
  clientRequestId: string;
  /**
   * A unique identifier for the request that was made to the Batch service. If a request is
   * consistently failing and you have verified that the request is properly formulated, you may
   * use this value to report the error to Microsoft. In your report, include the value of this
   * request ID, the approximate time that the request was made, the Batch account against which
   * the request was made, and the region that account resides in.
   */
  requestId: string;
  /**
   * The ETag HTTP response header. This is an opaque string. You can use it to detect whether the
   * resource has changed between requests. In particular, you can pass the ETag to one of the
   * If-Modified-Since, If-Unmodified-Since, If-Match or If-None-Match headers.
   */
  eTag: string;
  /**
   * The time at which the resource was last modified.
   */
  lastModified: Date;
  /**
   * The OData ID of the resource to which the request applied.
   */
  dataServiceId: string;
}

/**
 * Defines headers for Add operation.
 */
export interface JobAddHeaders {
  /**
   * The client-request-id provided by the client during the request. This will be returned only if
   * the return-client-request-id parameter was set to true.
   */
  clientRequestId: string;
  /**
   * A unique identifier for the request that was made to the Batch service. If a request is
   * consistently failing and you have verified that the request is properly formulated, you may
   * use this value to report the error to Microsoft. In your report, include the value of this
   * request ID, the approximate time that the request was made, the Batch account against which
   * the request was made, and the region that account resides in.
   */
  requestId: string;
  /**
   * The ETag HTTP response header. This is an opaque string. You can use it to detect whether the
   * resource has changed between requests. In particular, you can pass the ETag to one of the
   * If-Modified-Since, If-Unmodified-Since, If-Match or If-None-Match headers.
   */
  eTag: string;
  /**
   * The time at which the resource was last modified.
   */
  lastModified: Date;
  /**
   * The OData ID of the resource to which the request applied.
   */
  dataServiceId: string;
}

/**
 * Defines headers for List operation.
 */
export interface JobListHeaders {
  /**
   * The client-request-id provided by the client during the request. This will be returned only if
   * the return-client-request-id parameter was set to true.
   */
  clientRequestId: string;
  /**
   * A unique identifier for the request that was made to the Batch service. If a request is
   * consistently failing and you have verified that the request is properly formulated, you may
   * use this value to report the error to Microsoft. In your report, include the value of this
   * request ID, the approximate time that the request was made, the Batch account against which
   * the request was made, and the region that account resides in.
   */
  requestId: string;
  /**
   * The ETag HTTP response header. This is an opaque string. You can use it to detect whether the
   * resource has changed between requests. In particular, you can pass the ETag to one of the
   * If-Modified-Since, If-Unmodified-Since, If-Match or If-None-Match headers.
   */
  eTag: string;
  /**
   * The time at which the resource was last modified.
   */
  lastModified: Date;
}

/**
 * Defines headers for ListFromJobSchedule operation.
 */
export interface JobListFromJobScheduleHeaders {
  /**
   * The client-request-id provided by the client during the request. This will be returned only if
   * the return-client-request-id parameter was set to true.
   */
  clientRequestId: string;
  /**
   * A unique identifier for the request that was made to the Batch service. If a request is
   * consistently failing and you have verified that the request is properly formulated, you may
   * use this value to report the error to Microsoft. In your report, include the value of this
   * request ID, the approximate time that the request was made, the Batch account against which
   * the request was made, and the region that account resides in.
   */
  requestId: string;
  /**
   * The ETag HTTP response header. This is an opaque string. You can use it to detect whether the
   * resource has changed between requests. In particular, you can pass the ETag to one of the
   * If-Modified-Since, If-Unmodified-Since, If-Match or If-None-Match headers.
   */
  eTag: string;
  /**
   * The time at which the resource was last modified.
   */
  lastModified: Date;
}

/**
 * Defines headers for ListPreparationAndReleaseTaskStatus operation.
 */
export interface JobListPreparationAndReleaseTaskStatusHeaders {
  /**
   * The client-request-id provided by the client during the request. This will be returned only if
   * the return-client-request-id parameter was set to true.
   */
  clientRequestId: string;
  /**
   * A unique identifier for the request that was made to the Batch service. If a request is
   * consistently failing and you have verified that the request is properly formulated, you may
   * use this value to report the error to Microsoft. In your report, include the value of this
   * request ID, the approximate time that the request was made, the Batch account against which
   * the request was made, and the region that account resides in.
   */
  requestId: string;
  /**
   * The ETag HTTP response header. This is an opaque string. You can use it to detect whether the
   * resource has changed between requests. In particular, you can pass the ETag to one of the
   * If-Modified-Since, If-Unmodified-Since, If-Match or If-None-Match headers.
   */
  eTag: string;
  /**
   * The time at which the resource was last modified.
   */
  lastModified: Date;
}

/**
 * Defines headers for GetTaskCounts operation.
 */
export interface JobGetTaskCountsHeaders {
  /**
   * The client-request-id provided by the client during the request. This will be returned only if
   * the return-client-request-id parameter was set to true.
   */
  clientRequestId: string;
  /**
   * A unique identifier for the request that was made to the Batch service. If a request is
   * consistently failing and you have verified that the request is properly formulated, you may
   * use this value to report the error to Microsoft. In your report, include the value of this
   * request ID, the approximate time that the request was made, the Batch account against which
   * the request was made, and the region that account resides in.
   */
  requestId: string;
}

/**
 * Defines headers for Add operation.
 */
export interface PoolAddHeaders {
  /**
   * The client-request-id provided by the client during the request. This will be returned only if
   * the return-client-request-id parameter was set to true.
   */
  clientRequestId: string;
  /**
   * A unique identifier for the request that was made to the Batch service. If a request is
   * consistently failing and you have verified that the request is properly formulated, you may
   * use this value to report the error to Microsoft. In your report, include the value of this
   * request ID, the approximate time that the request was made, the Batch account against which
   * the request was made, and the region that account resides in.
   */
  requestId: string;
  /**
   * The ETag HTTP response header. This is an opaque string. You can use it to detect whether the
   * resource has changed between requests. In particular, you can pass the ETag to one of the
   * If-Modified-Since, If-Unmodified-Since, If-Match or If-None-Match headers.
   */
  eTag: string;
  /**
   * The time at which the resource was last modified.
   */
  lastModified: Date;
  /**
   * The OData ID of the resource to which the request applied.
   */
  dataServiceId: string;
}

/**
 * Defines headers for List operation.
 */
export interface PoolListHeaders {
  /**
   * The client-request-id provided by the client during the request. This will be returned only if
   * the return-client-request-id parameter was set to true.
   */
  clientRequestId: string;
  /**
   * A unique identifier for the request that was made to the Batch service. If a request is
   * consistently failing and you have verified that the request is properly formulated, you may
   * use this value to report the error to Microsoft. In your report, include the value of this
   * request ID, the approximate time that the request was made, the Batch account against which
   * the request was made, and the region that account resides in.
   */
  requestId: string;
  /**
   * The ETag HTTP response header. This is an opaque string. You can use it to detect whether the
   * resource has changed between requests. In particular, you can pass the ETag to one of the
   * If-Modified-Since, If-Unmodified-Since, If-Match or If-None-Match headers.
   */
  eTag: string;
  /**
   * The time at which the resource was last modified.
   */
  lastModified: Date;
}

/**
 * Defines headers for Delete operation.
 */
export interface PoolDeleteHeaders {
  /**
   * The client-request-id provided by the client during the request. This will be returned only if
   * the return-client-request-id parameter was set to true.
   */
  clientRequestId: string;
  /**
   * A unique identifier for the request that was made to the Batch service. If a request is
   * consistently failing and you have verified that the request is properly formulated, you may
   * use this value to report the error to Microsoft. In your report, include the value of this
   * request ID, the approximate time that the request was made, the Batch account against which
   * the request was made, and the region that account resides in.
   */
  requestId: string;
}

/**
 * Defines headers for Exists operation.
 */
export interface PoolExistsHeaders {
  /**
   * The client-request-id provided by the client during the request. This will be returned only if
   * the return-client-request-id parameter was set to true.
   */
  clientRequestId: string;
  /**
   * A unique identifier for the request that was made to the Batch service. If a request is
   * consistently failing and you have verified that the request is properly formulated, you may
   * use this value to report the error to Microsoft. In your report, include the value of this
   * request ID, the approximate time that the request was made, the Batch account against which
   * the request was made, and the region that account resides in.
   */
  requestId: string;
  /**
   * The ETag HTTP response header. This is an opaque string. You can use it to detect whether the
   * resource has changed between requests. In particular, you can pass the ETag to one of the
   * If-Modified-Since, If-Unmodified-Since, If-Match or If-None-Match headers.
   */
  eTag: string;
  /**
   * The time at which the resource was last modified.
   */
  lastModified: Date;
}

/**
 * Defines headers for Get operation.
 */
export interface PoolGetHeaders {
  /**
   * The client-request-id provided by the client during the request. This will be returned only if
   * the return-client-request-id parameter was set to true.
   */
  clientRequestId: string;
  /**
   * A unique identifier for the request that was made to the Batch service. If a request is
   * consistently failing and you have verified that the request is properly formulated, you may
   * use this value to report the error to Microsoft. In your report, include the value of this
   * request ID, the approximate time that the request was made, the Batch account against which
   * the request was made, and the region that account resides in.
   */
  requestId: string;
  /**
   * The ETag HTTP response header. This is an opaque string. You can use it to detect whether the
   * resource has changed between requests. In particular, you can pass the ETag to one of the
   * If-Modified-Since, If-Unmodified-Since, If-Match or If-None-Match headers.
   */
  eTagHeader: string;
  /**
   * The time at which the resource was last modified.
   */
  lastModifiedHeader: Date;
}

/**
 * Defines headers for Patch operation.
 */
export interface PoolPatchHeaders {
  /**
   * The client-request-id provided by the client during the request. This will be returned only if
   * the return-client-request-id parameter was set to true.
   */
  clientRequestId: string;
  /**
   * A unique identifier for the request that was made to the Batch service. If a request is
   * consistently failing and you have verified that the request is properly formulated, you may
   * use this value to report the error to Microsoft. In your report, include the value of this
   * request ID, the approximate time that the request was made, the Batch account against which
   * the request was made, and the region that account resides in.
   */
  requestId: string;
  /**
   * The ETag HTTP response header. This is an opaque string. You can use it to detect whether the
   * resource has changed between requests. In particular, you can pass the ETag to one of the
   * If-Modified-Since, If-Unmodified-Since, If-Match or If-None-Match headers.
   */
  eTag: string;
  /**
   * The time at which the resource was last modified.
   */
  lastModified: Date;
  /**
   * The OData ID of the resource to which the request applied.
   */
  dataServiceId: string;
}

/**
 * Defines headers for DisableAutoScale operation.
 */
export interface PoolDisableAutoScaleHeaders {
  /**
   * The client-request-id provided by the client during the request. This will be returned only if
   * the return-client-request-id parameter was set to true.
   */
  clientRequestId: string;
  /**
   * A unique identifier for the request that was made to the Batch service. If a request is
   * consistently failing and you have verified that the request is properly formulated, you may
   * use this value to report the error to Microsoft. In your report, include the value of this
   * request ID, the approximate time that the request was made, the Batch account against which
   * the request was made, and the region that account resides in.
   */
  requestId: string;
  /**
   * The ETag HTTP response header. This is an opaque string. You can use it to detect whether the
   * resource has changed between requests. In particular, you can pass the ETag to one of the
   * If-Modified-Since, If-Unmodified-Since, If-Match or If-None-Match headers.
   */
  eTag: string;
  /**
   * The time at which the resource was last modified.
   */
  lastModified: Date;
  /**
   * The OData ID of the resource to which the request applied.
   */
  dataServiceId: string;
}

/**
 * Defines headers for EnableAutoScale operation.
 */
export interface PoolEnableAutoScaleHeaders {
  /**
   * The client-request-id provided by the client during the request. This will be returned only if
   * the return-client-request-id parameter was set to true.
   */
  clientRequestId: string;
  /**
   * A unique identifier for the request that was made to the Batch service. If a request is
   * consistently failing and you have verified that the request is properly formulated, you may
   * use this value to report the error to Microsoft. In your report, include the value of this
   * request ID, the approximate time that the request was made, the Batch account against which
   * the request was made, and the region that account resides in.
   */
  requestId: string;
  /**
   * The ETag HTTP response header. This is an opaque string. You can use it to detect whether the
   * resource has changed between requests. In particular, you can pass the ETag to one of the
   * If-Modified-Since, If-Unmodified-Since, If-Match or If-None-Match headers.
   */
  eTag: string;
  /**
   * The time at which the resource was last modified.
   */
  lastModified: Date;
  /**
   * The OData ID of the resource to which the request applied.
   */
  dataServiceId: string;
}

/**
 * Defines headers for EvaluateAutoScale operation.
 */
export interface PoolEvaluateAutoScaleHeaders {
  /**
   * The client-request-id provided by the client during the request. This will be returned only if
   * the return-client-request-id parameter was set to true.
   */
  clientRequestId: string;
  /**
   * A unique identifier for the request that was made to the Batch service. If a request is
   * consistently failing and you have verified that the request is properly formulated, you may
   * use this value to report the error to Microsoft. In your report, include the value of this
   * request ID, the approximate time that the request was made, the Batch account against which
   * the request was made, and the region that account resides in.
   */
  requestId: string;
  /**
   * The ETag HTTP response header. This is an opaque string. You can use it to detect whether the
   * resource has changed between requests. In particular, you can pass the ETag to one of the
   * If-Modified-Since, If-Unmodified-Since, If-Match or If-None-Match headers.
   */
  eTag: string;
  /**
   * The time at which the resource was last modified.
   */
  lastModified: Date;
  /**
   * The OData ID of the resource to which the request applied.
   */
  dataServiceId: string;
}

/**
 * Defines headers for Resize operation.
 */
export interface PoolResizeHeaders {
  /**
   * The client-request-id provided by the client during the request. This will be returned only if
   * the return-client-request-id parameter was set to true.
   */
  clientRequestId: string;
  /**
   * A unique identifier for the request that was made to the Batch service. If a request is
   * consistently failing and you have verified that the request is properly formulated, you may
   * use this value to report the error to Microsoft. In your report, include the value of this
   * request ID, the approximate time that the request was made, the Batch account against which
   * the request was made, and the region that account resides in.
   */
  requestId: string;
  /**
   * The ETag HTTP response header. This is an opaque string. You can use it to detect whether the
   * resource has changed between requests. In particular, you can pass the ETag to one of the
   * If-Modified-Since, If-Unmodified-Since, If-Match or If-None-Match headers.
   */
  eTag: string;
  /**
   * The time at which the resource was last modified.
   */
  lastModified: Date;
  /**
   * The OData ID of the resource to which the request applied.
   */
  dataServiceId: string;
}

/**
 * Defines headers for StopResize operation.
 */
export interface PoolStopResizeHeaders {
  /**
   * The client-request-id provided by the client during the request. This will be returned only if
   * the return-client-request-id parameter was set to true.
   */
  clientRequestId: string;
  /**
   * A unique identifier for the request that was made to the Batch service. If a request is
   * consistently failing and you have verified that the request is properly formulated, you may
   * use this value to report the error to Microsoft. In your report, include the value of this
   * request ID, the approximate time that the request was made, the Batch account against which
   * the request was made, and the region that account resides in.
   */
  requestId: string;
  /**
   * The ETag HTTP response header. This is an opaque string. You can use it to detect whether the
   * resource has changed between requests. In particular, you can pass the ETag to one of the
   * If-Modified-Since, If-Unmodified-Since, If-Match or If-None-Match headers.
   */
  eTag: string;
  /**
   * The time at which the resource was last modified.
   */
  lastModified: Date;
  /**
   * The OData ID of the resource to which the request applied.
   */
  dataServiceId: string;
}

/**
 * Defines headers for UpdateProperties operation.
 */
export interface PoolUpdatePropertiesHeaders {
  /**
   * The client-request-id provided by the client during the request. This will be returned only if
   * the return-client-request-id parameter was set to true.
   */
  clientRequestId: string;
  /**
   * A unique identifier for the request that was made to the Batch service. If a request is
   * consistently failing and you have verified that the request is properly formulated, you may
   * use this value to report the error to Microsoft. In your report, include the value of this
   * request ID, the approximate time that the request was made, the Batch account against which
   * the request was made, and the region that account resides in.
   */
  requestId: string;
  /**
   * The ETag HTTP response header. This is an opaque string. You can use it to detect whether the
   * resource has changed between requests. In particular, you can pass the ETag to one of the
   * If-Modified-Since, If-Unmodified-Since, If-Match or If-None-Match headers.
   */
  eTag: string;
  /**
   * The time at which the resource was last modified.
   */
  lastModified: Date;
  /**
   * The OData ID of the resource to which the request applied.
   */
  dataServiceId: string;
}

/**
 * Defines headers for RemoveNodes operation.
 */
export interface PoolRemoveNodesHeaders {
  /**
   * The client-request-id provided by the client during the request. This will be returned only if
   * the return-client-request-id parameter was set to true.
   */
  clientRequestId: string;
  /**
   * A unique identifier for the request that was made to the Batch service. If a request is
   * consistently failing and you have verified that the request is properly formulated, you may
   * use this value to report the error to Microsoft. In your report, include the value of this
   * request ID, the approximate time that the request was made, the Batch account against which
   * the request was made, and the region that account resides in.
   */
  requestId: string;
  /**
   * The ETag HTTP response header. This is an opaque string. You can use it to detect whether the
   * resource has changed between requests. In particular, you can pass the ETag to one of the
   * If-Modified-Since, If-Unmodified-Since, If-Match or If-None-Match headers.
   */
  eTag: string;
  /**
   * The time at which the resource was last modified.
   */
  lastModified: Date;
  /**
   * The OData ID of the resource to which the request applied.
   */
  dataServiceId: string;
}

/**
 * Defines headers for Add operation.
 */
export interface TaskAddHeaders {
  /**
   * The client-request-id provided by the client during the request. This will be returned only if
   * the return-client-request-id parameter was set to true.
   */
  clientRequestId: string;
  /**
   * A unique identifier for the request that was made to the Batch service. If a request is
   * consistently failing and you have verified that the request is properly formulated, you may
   * use this value to report the error to Microsoft. In your report, include the value of this
   * request ID, the approximate time that the request was made, the Batch account against which
   * the request was made, and the region that account resides in.
   */
  requestId: string;
  /**
   * The ETag HTTP response header. This is an opaque string. You can use it to detect whether the
   * resource has changed between requests. In particular, you can pass the ETag to one of the
   * If-Modified-Since, If-Unmodified-Since, If-Match or If-None-Match headers.
   */
  eTag: string;
  /**
   * The time at which the resource was last modified.
   */
  lastModified: Date;
  /**
   * The OData ID of the resource to which the request applied.
   */
  dataServiceId: string;
}

/**
 * Defines headers for List operation.
 */
export interface TaskListHeaders {
  /**
   * The client-request-id provided by the client during the request. This will be returned only if
   * the return-client-request-id parameter was set to true.
   */
  clientRequestId: string;
  /**
   * A unique identifier for the request that was made to the Batch service. If a request is
   * consistently failing and you have verified that the request is properly formulated, you may
   * use this value to report the error to Microsoft. In your report, include the value of this
   * request ID, the approximate time that the request was made, the Batch account against which
   * the request was made, and the region that account resides in.
   */
  requestId: string;
  /**
   * The ETag HTTP response header. This is an opaque string. You can use it to detect whether the
   * resource has changed between requests. In particular, you can pass the ETag to one of the
   * If-Modified-Since, If-Unmodified-Since, If-Match or If-None-Match headers.
   */
  eTag: string;
  /**
   * The time at which the resource was last modified.
   */
  lastModified: Date;
}

/**
 * Defines headers for AddCollection operation.
 */
export interface TaskAddCollectionHeaders {
  /**
   * The client-request-id provided by the client during the request. This will be returned only if
   * the return-client-request-id parameter was set to true.
   */
  clientRequestId: string;
  /**
   * A unique identifier for the request that was made to the Batch service. If a request is
   * consistently failing and you have verified that the request is properly formulated, you may
   * use this value to report the error to Microsoft. In your report, include the value of this
   * request ID, the approximate time that the request was made, the Batch account against which
   * the request was made, and the region that account resides in.
   */
  requestId: string;
}

/**
 * Defines headers for Delete operation.
 */
export interface TaskDeleteHeaders {
  /**
   * The client-request-id provided by the client during the request. This will be returned only if
   * the return-client-request-id parameter was set to true.
   */
  clientRequestId: string;
  /**
   * A unique identifier for the request that was made to the Batch service. If a request is
   * consistently failing and you have verified that the request is properly formulated, you may
   * use this value to report the error to Microsoft. In your report, include the value of this
   * request ID, the approximate time that the request was made, the Batch account against which
   * the request was made, and the region that account resides in.
   */
  requestId: string;
}

/**
 * Defines headers for Get operation.
 */
export interface TaskGetHeaders {
  /**
   * The client-request-id provided by the client during the request. This will be returned only if
   * the return-client-request-id parameter was set to true.
   */
  clientRequestId: string;
  /**
   * A unique identifier for the request that was made to the Batch service. If a request is
   * consistently failing and you have verified that the request is properly formulated, you may
   * use this value to report the error to Microsoft. In your report, include the value of this
   * request ID, the approximate time that the request was made, the Batch account against which
   * the request was made, and the region that account resides in.
   */
  requestId: string;
  /**
   * The ETag HTTP response header. This is an opaque string. You can use it to detect whether the
   * resource has changed between requests. In particular, you can pass the ETag to one of the
   * If-Modified-Since, If-Unmodified-Since, If-Match or If-None-Match headers.
   */
  eTagHeader: string;
  /**
   * The time at which the resource was last modified.
   */
  lastModifiedHeader: Date;
  /**
   * The OData ID of the resource to which the request applied.
   */
  dataServiceId: string;
}

/**
 * Defines headers for Update operation.
 */
export interface TaskUpdateHeaders {
  /**
   * The client-request-id provided by the client during the request. This will be returned only if
   * the return-client-request-id parameter was set to true.
   */
  clientRequestId: string;
  /**
   * A unique identifier for the request that was made to the Batch service. If a request is
   * consistently failing and you have verified that the request is properly formulated, you may
   * use this value to report the error to Microsoft. In your report, include the value of this
   * request ID, the approximate time that the request was made, the Batch account against which
   * the request was made, and the region that account resides in.
   */
  requestId: string;
  /**
   * The ETag HTTP response header. This is an opaque string. You can use it to detect whether the
   * resource has changed between requests. In particular, you can pass the ETag to one of the
   * If-Modified-Since, If-Unmodified-Since, If-Match or If-None-Match headers.
   */
  eTag: string;
  /**
   * The time at which the resource was last modified.
   */
  lastModified: Date;
  /**
   * The OData ID of the resource to which the request applied.
   */
  dataServiceId: string;
}

/**
 * Defines headers for ListSubtasks operation.
 */
export interface TaskListSubtasksHeaders {
  /**
   * The client-request-id provided by the client during the request. This will be returned only if
   * the return-client-request-id parameter was set to true.
   */
  clientRequestId: string;
  /**
   * A unique identifier for the request that was made to the Batch service. If a request is
   * consistently failing and you have verified that the request is properly formulated, you may
   * use this value to report the error to Microsoft. In your report, include the value of this
   * request ID, the approximate time that the request was made, the Batch account against which
   * the request was made, and the region that account resides in.
   */
  requestId: string;
  /**
   * The ETag HTTP response header. This is an opaque string. You can use it to detect whether the
   * resource has changed between requests. In particular, you can pass the ETag to one of the
   * If-Modified-Since, If-Unmodified-Since, If-Match or If-None-Match headers.
   */
  eTag: string;
  /**
   * The time at which the resource was last modified.
   */
  lastModified: Date;
}

/**
 * Defines headers for Terminate operation.
 */
export interface TaskTerminateHeaders {
  /**
   * The client-request-id provided by the client during the request. This will be returned only if
   * the return-client-request-id parameter was set to true.
   */
  clientRequestId: string;
  /**
   * A unique identifier for the request that was made to the Batch service. If a request is
   * consistently failing and you have verified that the request is properly formulated, you may
   * use this value to report the error to Microsoft. In your report, include the value of this
   * request ID, the approximate time that the request was made, the Batch account against which
   * the request was made, and the region that account resides in.
   */
  requestId: string;
  /**
   * The ETag HTTP response header. This is an opaque string. You can use it to detect whether the
   * resource has changed between requests. In particular, you can pass the ETag to one of the
   * If-Modified-Since, If-Unmodified-Since, If-Match or If-None-Match headers.
   */
  eTag: string;
  /**
   * The time at which the resource was last modified.
   */
  lastModified: Date;
  /**
   * The OData ID of the resource to which the request applied.
   */
  dataServiceId: string;
}

/**
 * Defines headers for Reactivate operation.
 */
export interface TaskReactivateHeaders {
  /**
   * The client-request-id provided by the client during the request. This will be returned only if
   * the return-client-request-id parameter was set to true.
   */
  clientRequestId: string;
  /**
   * A unique identifier for the request that was made to the Batch service. If a request is
   * consistently failing and you have verified that the request is properly formulated, you may
   * use this value to report the error to Microsoft. In your report, include the value of this
   * request ID, the approximate time that the request was made, the Batch account against which
   * the request was made, and the region that account resides in.
   */
  requestId: string;
  /**
   * The ETag HTTP response header. This is an opaque string. You can use it to detect whether the
   * resource has changed between requests. In particular, you can pass the ETag to one of the
   * If-Modified-Since, If-Unmodified-Since, If-Match or If-None-Match headers.
   */
  eTag: string;
  /**
   * The time at which the resource was last modified.
   */
  lastModified: Date;
  /**
   * The OData ID of the resource to which the request applied.
   */
  dataServiceId: string;
}

/**
 * Defines headers for AddUser operation.
 */
export interface ComputeNodeAddUserHeaders {
  /**
   * The client-request-id provided by the client during the request. This will be returned only if
   * the return-client-request-id parameter was set to true.
   */
  clientRequestId: string;
  /**
   * A unique identifier for the request that was made to the Batch service. If a request is
   * consistently failing and you have verified that the request is properly formulated, you may
   * use this value to report the error to Microsoft. In your report, include the value of this
   * request ID, the approximate time that the request was made, the Batch account against which
   * the request was made, and the region that account resides in.
   */
  requestId: string;
  /**
   * The ETag HTTP response header. This is an opaque string. You can use it to detect whether the
   * resource has changed between requests. In particular, you can pass the ETag to one of the
   * If-Modified-Since, If-Unmodified-Since, If-Match or If-None-Match headers.
   */
  eTag: string;
  /**
   * The time at which the resource was last modified.
   */
  lastModified: Date;
  /**
   * The OData ID of the resource to which the request applied.
   */
  dataServiceId: string;
}

/**
 * Defines headers for DeleteUser operation.
 */
export interface ComputeNodeDeleteUserHeaders {
  /**
   * The client-request-id provided by the client during the request. This will be returned only if
   * the return-client-request-id parameter was set to true.
   */
  clientRequestId: string;
  /**
   * A unique identifier for the request that was made to the Batch service. If a request is
   * consistently failing and you have verified that the request is properly formulated, you may
   * use this value to report the error to Microsoft. In your report, include the value of this
   * request ID, the approximate time that the request was made, the Batch account against which
   * the request was made, and the region that account resides in.
   */
  requestId: string;
}

/**
 * Defines headers for UpdateUser operation.
 */
export interface ComputeNodeUpdateUserHeaders {
  /**
   * The client-request-id provided by the client during the request. This will be returned only if
   * the return-client-request-id parameter was set to true.
   */
  clientRequestId: string;
  /**
   * A unique identifier for the request that was made to the Batch service. If a request is
   * consistently failing and you have verified that the request is properly formulated, you may
   * use this value to report the error to Microsoft. In your report, include the value of this
   * request ID, the approximate time that the request was made, the Batch account against which
   * the request was made, and the region that account resides in.
   */
  requestId: string;
  /**
   * The ETag HTTP response header. This is an opaque string. You can use it to detect whether the
   * resource has changed between requests. In particular, you can pass the ETag to one of the
   * If-Modified-Since, If-Unmodified-Since, If-Match or If-None-Match headers.
   */
  eTag: string;
  /**
   * The time at which the resource was last modified.
   */
  lastModified: Date;
  /**
   * The OData ID of the resource to which the request applied.
   */
  dataServiceId: string;
}

/**
 * Defines headers for Get operation.
 */
export interface ComputeNodeGetHeaders {
  /**
   * The client-request-id provided by the client during the request. This will be returned only if
   * the return-client-request-id parameter was set to true.
   */
  clientRequestId: string;
  /**
   * A unique identifier for the request that was made to the Batch service. If a request is
   * consistently failing and you have verified that the request is properly formulated, you may
   * use this value to report the error to Microsoft. In your report, include the value of this
   * request ID, the approximate time that the request was made, the Batch account against which
   * the request was made, and the region that account resides in.
   */
  requestId: string;
  /**
   * The ETag HTTP response header. This is an opaque string. You can use it to detect whether the
   * resource has changed between requests. In particular, you can pass the ETag to one of the
   * If-Modified-Since, If-Unmodified-Since, If-Match or If-None-Match headers.
   */
  eTag: string;
  /**
   * The time at which the resource was last modified.
   */
  lastModified: Date;
}

/**
 * Defines headers for Reboot operation.
 */
export interface ComputeNodeRebootHeaders {
  /**
   * The client-request-id provided by the client during the request. This will be returned only if
   * the return-client-request-id parameter was set to true.
   */
  clientRequestId: string;
  /**
   * A unique identifier for the request that was made to the Batch service. If a request is
   * consistently failing and you have verified that the request is properly formulated, you may
   * use this value to report the error to Microsoft. In your report, include the value of this
   * request ID, the approximate time that the request was made, the Batch account against which
   * the request was made, and the region that account resides in.
   */
  requestId: string;
  /**
   * The ETag HTTP response header. This is an opaque string. You can use it to detect whether the
   * resource has changed between requests. In particular, you can pass the ETag to one of the
   * If-Modified-Since, If-Unmodified-Since, If-Match or If-None-Match headers.
   */
  eTag: string;
  /**
   * The time at which the resource was last modified.
   */
  lastModified: Date;
  /**
   * The OData ID of the resource to which the request applied.
   */
  dataServiceId: string;
}

/**
 * Defines headers for Reimage operation.
 */
export interface ComputeNodeReimageHeaders {
  /**
   * The client-request-id provided by the client during the request. This will be returned only if
   * the return-client-request-id parameter was set to true.
   */
  clientRequestId: string;
  /**
   * A unique identifier for the request that was made to the Batch service. If a request is
   * consistently failing and you have verified that the request is properly formulated, you may
   * use this value to report the error to Microsoft. In your report, include the value of this
   * request ID, the approximate time that the request was made, the Batch account against which
   * the request was made, and the region that account resides in.
   */
  requestId: string;
  /**
   * The ETag HTTP response header. This is an opaque string. You can use it to detect whether the
   * resource has changed between requests. In particular, you can pass the ETag to one of the
   * If-Modified-Since, If-Unmodified-Since, If-Match or If-None-Match headers.
   */
  eTag: string;
  /**
   * The time at which the resource was last modified.
   */
  lastModified: Date;
  /**
   * The OData ID of the resource to which the request applied.
   */
  dataServiceId: string;
}

/**
 * Defines headers for DisableScheduling operation.
 */
export interface ComputeNodeDisableSchedulingHeaders {
  /**
   * The client-request-id provided by the client during the request. This will be returned only if
   * the return-client-request-id parameter was set to true.
   */
  clientRequestId: string;
  /**
   * A unique identifier for the request that was made to the Batch service. If a request is
   * consistently failing and you have verified that the request is properly formulated, you may
   * use this value to report the error to Microsoft. In your report, include the value of this
   * request ID, the approximate time that the request was made, the Batch account against which
   * the request was made, and the region that account resides in.
   */
  requestId: string;
  /**
   * The ETag HTTP response header. This is an opaque string. You can use it to detect whether the
   * resource has changed between requests. In particular, you can pass the ETag to one of the
   * If-Modified-Since, If-Unmodified-Since, If-Match or If-None-Match headers.
   */
  eTag: string;
  /**
   * The time at which the resource was last modified.
   */
  lastModified: Date;
  /**
   * The OData ID of the resource to which the request applied.
   */
  dataServiceId: string;
}

/**
 * Defines headers for EnableScheduling operation.
 */
export interface ComputeNodeEnableSchedulingHeaders {
  /**
   * The client-request-id provided by the client during the request. This will be returned only if
   * the return-client-request-id parameter was set to true.
   */
  clientRequestId: string;
  /**
   * A unique identifier for the request that was made to the Batch service. If a request is
   * consistently failing and you have verified that the request is properly formulated, you may
   * use this value to report the error to Microsoft. In your report, include the value of this
   * request ID, the approximate time that the request was made, the Batch account against which
   * the request was made, and the region that account resides in.
   */
  requestId: string;
  /**
   * The ETag HTTP response header. This is an opaque string. You can use it to detect whether the
   * resource has changed between requests. In particular, you can pass the ETag to one of the
   * If-Modified-Since, If-Unmodified-Since, If-Match or If-None-Match headers.
   */
  eTag: string;
  /**
   * The time at which the resource was last modified.
   */
  lastModified: Date;
  /**
   * The OData ID of the resource to which the request applied.
   */
  dataServiceId: string;
}

/**
 * Defines headers for GetRemoteLoginSettings operation.
 */
export interface ComputeNodeGetRemoteLoginSettingsHeaders {
  /**
   * The client-request-id provided by the client during the request. This will be returned only if
   * the return-client-request-id parameter was set to true.
   */
  clientRequestId: string;
  /**
   * A unique identifier for the request that was made to the Batch service. If a request is
   * consistently failing and you have verified that the request is properly formulated, you may
   * use this value to report the error to Microsoft. In your report, include the value of this
   * request ID, the approximate time that the request was made, the Batch account against which
   * the request was made, and the region that account resides in.
   */
  requestId: string;
  /**
   * The ETag HTTP response header. This is an opaque string. You can use it to detect whether the
   * resource has changed between requests. In particular, you can pass the ETag to one of the
   * If-Modified-Since, If-Unmodified-Since, If-Match or If-None-Match headers.
   */
  eTag: string;
  /**
   * The time at which the resource was last modified.
   */
  lastModified: Date;
}

/**
 * Defines headers for GetRemoteDesktop operation.
 */
export interface ComputeNodeGetRemoteDesktopHeaders {
  /**
   * The client-request-id provided by the client during the request. This will be returned only if
   * the return-client-request-id parameter was set to true.
   */
  clientRequestId: string;
  /**
   * A unique identifier for the request that was made to the Batch service. If a request is
   * consistently failing and you have verified that the request is properly formulated, you may
   * use this value to report the error to Microsoft. In your report, include the value of this
   * request ID, the approximate time that the request was made, the Batch account against which
   * the request was made, and the region that account resides in.
   */
  requestId: string;
  /**
   * The ETag HTTP response header. This is an opaque string. You can use it to detect whether the
   * resource has changed between requests. In particular, you can pass the ETag to one of the
   * If-Modified-Since, If-Unmodified-Since, If-Match or If-None-Match headers.
   */
  eTag: string;
  /**
   * The time at which the resource was last modified.
   */
  lastModified: Date;
}

/**
 * Defines headers for UploadBatchServiceLogs operation.
 */
export interface ComputeNodeUploadBatchServiceLogsHeaders {
  /**
   * The client-request-id provided by the client during the request. This will be returned only if
   * the return-client-request-id parameter was set to true.
   */
  clientRequestId: string;
  /**
   * A unique identifier for the request that was made to the Batch service. If a request is
   * consistently failing and you have verified that the request is properly formulated, you may
   * use this value to report the error to Microsoft. In your report, include the value of this
   * request ID, the approximate time that the request was made, the Batch account against which
   * the request was made, and the region that account resides in.
   */
  requestId: string;
}

/**
 * Defines headers for List operation.
 */
export interface ComputeNodeListHeaders {
  /**
   * The client-request-id provided by the client during the request. This will be returned only if
   * the return-client-request-id parameter was set to true.
   */
  clientRequestId: string;
  /**
   * A unique identifier for the request that was made to the Batch service. If a request is
   * consistently failing and you have verified that the request is properly formulated, you may
   * use this value to report the error to Microsoft. In your report, include the value of this
   * request ID, the approximate time that the request was made, the Batch account against which
   * the request was made, and the region that account resides in.
   */
  requestId: string;
  /**
   * The ETag HTTP response header. This is an opaque string. You can use it to detect whether the
   * resource has changed between requests. In particular, you can pass the ETag to one of the
   * If-Modified-Since, If-Unmodified-Since, If-Match or If-None-Match headers.
   */
  eTag: string;
  /**
   * The time at which the resource was last modified.
   */
  lastModified: Date;
}

/**
 * @interface
 * An interface representing the ApplicationListResult.
 * @summary The result of listing the applications available in an account.
 * @extends Array<ApplicationSummary>
 */
export interface ApplicationListResult extends Array<ApplicationSummary> {
  odatanextLink?: string;
}

/**
 * @interface
 * An interface representing the PoolListUsageMetricsResult.
 * @summary The result of a listing the usage metrics for an account.
 * @extends Array<PoolUsageMetrics>
 */
export interface PoolListUsageMetricsResult extends Array<PoolUsageMetrics> {
  odatanextLink?: string;
}

/**
 * @interface
 * An interface representing the CloudPoolListResult.
 * @summary The result of listing the pools in an account.
 * @extends Array<CloudPool>
 */
export interface CloudPoolListResult extends Array<CloudPool> {
  odatanextLink?: string;
}

/**
 * @interface
 * An interface representing the AccountListNodeAgentSkusResult.
 * @summary The result of listing the supported node agent SKUs.
 * @extends Array<NodeAgentSku>
 */
export interface AccountListNodeAgentSkusResult extends Array<NodeAgentSku> {
  odatanextLink?: string;
}

/**
 * @interface
 * An interface representing the PoolNodeCountsListResult.
 * @summary The result of listing the node counts in the account.
 * @extends Array<PoolNodeCounts>
 */
export interface PoolNodeCountsListResult extends Array<PoolNodeCounts> {
  odatanextLink?: string;
}

/**
 * @interface
 * An interface representing the CloudJobListResult.
 * @summary The result of listing the jobs in an account.
 * @extends Array<CloudJob>
 */
export interface CloudJobListResult extends Array<CloudJob> {
  odatanextLink?: string;
}

/**
 * @interface
 * An interface representing the CloudJobListPreparationAndReleaseTaskStatusResult.
 * @summary The result of listing the status of the Job Preparation and Job Release tasks for a
 * job.
 * @extends Array<JobPreparationAndReleaseTaskExecutionInformation>
 */
export interface CloudJobListPreparationAndReleaseTaskStatusResult extends Array<JobPreparationAndReleaseTaskExecutionInformation> {
  odatanextLink?: string;
}

/**
 * @interface
 * An interface representing the CertificateListResult.
 * @summary The result of listing the certificates in the account.
 * @extends Array<Certificate>
 */
export interface CertificateListResult extends Array<Certificate> {
  odatanextLink?: string;
}

/**
 * @interface
 * An interface representing the NodeFileListResult.
 * @summary The result of listing the files on a compute node, or the files associated with a task
 * on a node.
 * @extends Array<NodeFile>
 */
export interface NodeFileListResult extends Array<NodeFile> {
  odatanextLink?: string;
}

/**
 * @interface
 * An interface representing the CloudJobScheduleListResult.
 * @summary The result of listing the job schedules in an account.
 * @extends Array<CloudJobSchedule>
 */
export interface CloudJobScheduleListResult extends Array<CloudJobSchedule> {
  odatanextLink?: string;
}

/**
 * @interface
 * An interface representing the CloudTaskListResult.
 * @summary The result of listing the tasks in a job.
 * @extends Array<CloudTask>
 */
export interface CloudTaskListResult extends Array<CloudTask> {
  odatanextLink?: string;
}

/**
 * @interface
 * An interface representing the ComputeNodeListResult.
 * @summary The result of listing the compute nodes in a pool.
 * @extends Array<ComputeNode>
 */
export interface ComputeNodeListResult extends Array<ComputeNode> {
  odatanextLink?: string;
}

/**
 * Defines values for OSType.
 * Possible values include: 'linux', 'windows'
 * @readonly
 * @enum {string}
 */
export type OSType = 'linux' | 'windows';

/**
 * Defines values for AccessScope.
 * Possible values include: 'job'
 * @readonly
 * @enum {string}
 */
export type AccessScope = 'job';

/**
 * Defines values for CertificateState.
 * Possible values include: 'active', 'deleting', 'deleteFailed'
 * @readonly
 * @enum {string}
 */
export type CertificateState = 'active' | 'deleting' | 'deletefailed';

/**
 * Defines values for CertificateFormat.
 * Possible values include: 'pfx', 'cer'
 * @readonly
 * @enum {string}
 */
export type CertificateFormat = 'pfx' | 'cer';

/**
 * Defines values for JobAction.
 * Possible values include: 'none', 'disable', 'terminate'
 * @readonly
 * @enum {string}
 */
export type JobAction = 'none' | 'disable' | 'terminate';

/**
 * Defines values for DependencyAction.
 * Possible values include: 'satisfy', 'block'
 * @readonly
 * @enum {string}
 */
export type DependencyAction = 'satisfy' | 'block';

/**
 * Defines values for AutoUserScope.
 * Possible values include: 'task', 'pool'
 * @readonly
 * @enum {string}
 */
export type AutoUserScope = 'task' | 'pool';

/**
 * Defines values for ElevationLevel.
 * Possible values include: 'nonAdmin', 'admin'
 * @readonly
 * @enum {string}
 */
export type ElevationLevel = 'nonadmin' | 'admin';

/**
 * Defines values for LoginMode.
 * Possible values include: 'batch', 'interactive'
 * @readonly
 * @enum {string}
 */
export type LoginMode = 'batch' | 'interactive';

/**
 * Defines values for OutputFileUploadCondition.
 * Possible values include: 'taskSuccess', 'taskFailure', 'taskCompletion'
 * @readonly
 * @enum {string}
 */
export type OutputFileUploadCondition = 'tasksuccess' | 'taskfailure' | 'taskcompletion';

/**
 * Defines values for ComputeNodeFillType.
 * Possible values include: 'spread', 'pack'
 * @readonly
 * @enum {string}
 */
export type ComputeNodeFillType = 'spread' | 'pack';

/**
 * Defines values for CertificateStoreLocation.
 * Possible values include: 'currentUser', 'localMachine'
 * @readonly
 * @enum {string}
 */
export type CertificateStoreLocation = 'currentuser' | 'localmachine';

/**
 * Defines values for CertificateVisibility.
 * Possible values include: 'startTask', 'task', 'remoteUser'
 * @readonly
 * @enum {string}
 */
export type CertificateVisibility = 'starttask' | 'task' | 'remoteuser';

/**
 * Defines values for CachingType.
 * Possible values include: 'none', 'readOnly', 'readWrite'
 * @readonly
 * @enum {string}
 */
export type CachingType = 'none' | 'readonly' | 'readwrite';

/**
 * Defines values for StorageAccountType.
 * Possible values include: 'StandardLRS', 'PremiumLRS'
 * @readonly
 * @enum {string}
 */
export type StorageAccountType = 'standard_lrs' | 'premium_lrs';

/**
 * Defines values for DynamicVNetAssignmentScope.
 * Possible values include: 'none', 'job'
 * @readonly
 * @enum {string}
 */
export type DynamicVNetAssignmentScope = 'none' | 'job';

/**
 * Defines values for InboundEndpointProtocol.
 * Possible values include: 'tcp', 'udp'
 * @readonly
 * @enum {string}
 */
export type InboundEndpointProtocol = 'tcp' | 'udp';

/**
 * Defines values for NetworkSecurityGroupRuleAccess.
 * Possible values include: 'allow', 'deny'
 * @readonly
 * @enum {string}
 */
export type NetworkSecurityGroupRuleAccess = 'allow' | 'deny';

/**
 * Defines values for PoolLifetimeOption.
 * Possible values include: 'jobSchedule', 'job'
 * @readonly
 * @enum {string}
 */
export type PoolLifetimeOption = 'jobschedule' | 'job';

/**
 * Defines values for OnAllTasksComplete.
 * Possible values include: 'noAction', 'terminateJob'
 * @readonly
 * @enum {string}
 */
export type OnAllTasksComplete = 'noaction' | 'terminatejob';

/**
 * Defines values for OnTaskFailure.
 * Possible values include: 'noAction', 'performExitOptionsJobAction'
 * @readonly
 * @enum {string}
 */
export type OnTaskFailure = 'noaction' | 'performexitoptionsjobaction';

/**
 * Defines values for JobScheduleState.
 * Possible values include: 'active', 'completed', 'disabled', 'terminating', 'deleting'
 * @readonly
 * @enum {string}
 */
export type JobScheduleState = 'active' | 'completed' | 'disabled' | 'terminating' | 'deleting';

/**
 * Defines values for ErrorCategory.
 * Possible values include: 'userError', 'serverError'
 * @readonly
 * @enum {string}
 */
export type ErrorCategory = 'usererror' | 'servererror';

/**
 * Defines values for JobState.
 * Possible values include: 'active', 'disabling', 'disabled', 'enabling', 'terminating',
 * 'completed', 'deleting'
 * @readonly
 * @enum {string}
 */
export type JobState = 'active' | 'disabling' | 'disabled' | 'enabling' | 'terminating' | 'completed' | 'deleting';

/**
 * Defines values for JobPreparationTaskState.
 * Possible values include: 'running', 'completed'
 * @readonly
 * @enum {string}
 */
export type JobPreparationTaskState = 'running' | 'completed';

/**
 * Defines values for TaskExecutionResult.
 * Possible values include: 'success', 'failure'
 * @readonly
 * @enum {string}
 */
export type TaskExecutionResult = 'success' | 'failure';

/**
 * Defines values for JobReleaseTaskState.
 * Possible values include: 'running', 'completed'
 * @readonly
 * @enum {string}
 */
export type JobReleaseTaskState = 'running' | 'completed';

/**
 * Defines values for PoolState.
 * Possible values include: 'active', 'deleting'
 * @readonly
 * @enum {string}
 */
export type PoolState = 'active' | 'deleting';

/**
 * Defines values for AllocationState.
 * Possible values include: 'steady', 'resizing', 'stopping'
 * @readonly
 * @enum {string}
 */
export type AllocationState = 'steady' | 'resizing' | 'stopping';

/**
 * Defines values for TaskState.
 * Possible values include: 'active', 'preparing', 'running', 'completed'
 * @readonly
 * @enum {string}
 */
export type TaskState = 'active' | 'preparing' | 'running' | 'completed';

/**
 * Defines values for TaskAddStatus.
 * Possible values include: 'success', 'clientError', 'serverError'
 * @readonly
 * @enum {string}
 */
export type TaskAddStatus = 'success' | 'clienterror' | 'servererror';

/**
 * Defines values for SubtaskState.
 * Possible values include: 'preparing', 'running', 'completed'
 * @readonly
 * @enum {string}
 */
export type SubtaskState = 'preparing' | 'running' | 'completed';

/**
 * Defines values for StartTaskState.
 * Possible values include: 'running', 'completed'
 * @readonly
 * @enum {string}
 */
export type StartTaskState = 'running' | 'completed';

/**
 * Defines values for ComputeNodeState.
 * Possible values include: 'idle', 'rebooting', 'reimaging', 'running', 'unusable', 'creating',
 * 'starting', 'waitingForStartTask', 'startTaskFailed', 'unknown', 'leavingPool', 'offline',
 * 'preempted'
 * @readonly
 * @enum {string}
 */
export type ComputeNodeState = 'idle' | 'rebooting' | 'reimaging' | 'running' | 'unusable' | 'creating' | 'starting' | 'waitingforstarttask' | 'starttaskfailed' | 'unknown' | 'leavingpool' | 'offline' | 'preempted';

/**
 * Defines values for SchedulingState.
 * Possible values include: 'enabled', 'disabled'
 * @readonly
 * @enum {string}
 */
export type SchedulingState = 'enabled' | 'disabled';

/**
 * Defines values for DisableJobOption.
 * Possible values include: 'requeue', 'terminate', 'wait'
 * @readonly
 * @enum {string}
 */
export type DisableJobOption = 'requeue' | 'terminate' | 'wait';

/**
 * Defines values for ComputeNodeDeallocationOption.
 * Possible values include: 'requeue', 'terminate', 'taskCompletion', 'retainedData'
 * @readonly
 * @enum {string}
 */
export type ComputeNodeDeallocationOption = 'requeue' | 'terminate' | 'taskcompletion' | 'retaineddata';

/**
 * Defines values for ComputeNodeRebootOption.
 * Possible values include: 'requeue', 'terminate', 'taskCompletion', 'retainedData'
 * @readonly
 * @enum {string}
 */
export type ComputeNodeRebootOption = 'requeue' | 'terminate' | 'taskcompletion' | 'retaineddata';

/**
 * Defines values for ComputeNodeReimageOption.
 * Possible values include: 'requeue', 'terminate', 'taskCompletion', 'retainedData'
 * @readonly
 * @enum {string}
 */
export type ComputeNodeReimageOption = 'requeue' | 'terminate' | 'taskcompletion' | 'retaineddata';

/**
 * Defines values for DisableComputeNodeSchedulingOption.
 * Possible values include: 'requeue', 'terminate', 'taskCompletion'
 * @readonly
 * @enum {string}
 */
export type DisableComputeNodeSchedulingOption = 'requeue' | 'terminate' | 'taskcompletion';

/**
 * Contains response data for the list operation.
 */
export type ApplicationListResponse = ApplicationListResult & ApplicationListHeaders & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The parsed HTTP response headers.
       */
      parsedHeaders: ApplicationListHeaders;

      /**
       * The response body as text (string format)
       */
      bodyAsText: string;

      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: ApplicationListResult;
    };
};

/**
 * Contains response data for the get operation.
 */
export type ApplicationGetResponse = ApplicationSummary & ApplicationGetHeaders & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The parsed HTTP response headers.
       */
      parsedHeaders: ApplicationGetHeaders;

      /**
       * The response body as text (string format)
       */
      bodyAsText: string;

      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: ApplicationSummary;
    };
};

/**
 * Contains response data for the listUsageMetrics operation.
 */
export type PoolListUsageMetricsResponse = PoolListUsageMetricsResult & PoolListUsageMetricsHeaders & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The parsed HTTP response headers.
       */
      parsedHeaders: PoolListUsageMetricsHeaders;

      /**
       * The response body as text (string format)
       */
      bodyAsText: string;

      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: PoolListUsageMetricsResult;
    };
};

/**
 * Contains response data for the getAllLifetimeStatistics operation.
 */
export type PoolGetAllLifetimeStatisticsResponse = PoolStatistics & PoolGetAllLifetimeStatisticsHeaders & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The parsed HTTP response headers.
       */
      parsedHeaders: PoolGetAllLifetimeStatisticsHeaders;

      /**
       * The response body as text (string format)
       */
      bodyAsText: string;

      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: PoolStatistics;
    };
};

/**
 * Contains response data for the add operation.
 */
export type PoolAddResponse = PoolAddHeaders & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The parsed HTTP response headers.
       */
      parsedHeaders: PoolAddHeaders;
    };
};

/**
 * Contains response data for the list operation.
 */
export type PoolListResponse = CloudPoolListResult & PoolListHeaders & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The parsed HTTP response headers.
       */
      parsedHeaders: PoolListHeaders;

      /**
       * The response body as text (string format)
       */
      bodyAsText: string;

      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: CloudPoolListResult;
    };
};

/**
 * Contains response data for the deleteMethod operation.
 */
export type PoolDeleteResponse = PoolDeleteHeaders & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The parsed HTTP response headers.
       */
      parsedHeaders: PoolDeleteHeaders;
    };
};

/**
 * Contains response data for the exists operation.
 */
export type PoolExistsResponse = PoolExistsHeaders & {
  /**
   * The parsed response body.
   */
  body: boolean;

  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The parsed HTTP response headers.
       */
      parsedHeaders: PoolExistsHeaders;

      /**
       * The response body as text (string format)
       */
      bodyAsText: string;

      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: boolean;
    };
};

/**
 * Contains response data for the get operation.
 */
export type PoolGetResponse = CloudPool & PoolGetHeaders & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The parsed HTTP response headers.
       */
      parsedHeaders: PoolGetHeaders;

      /**
       * The response body as text (string format)
       */
      bodyAsText: string;

      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: CloudPool;
    };
};

/**
 * Contains response data for the patch operation.
 */
export type PoolPatchResponse = PoolPatchHeaders & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The parsed HTTP response headers.
       */
      parsedHeaders: PoolPatchHeaders;
    };
};

/**
 * Contains response data for the disableAutoScale operation.
 */
export type PoolDisableAutoScaleResponse = PoolDisableAutoScaleHeaders & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The parsed HTTP response headers.
       */
      parsedHeaders: PoolDisableAutoScaleHeaders;
    };
};

/**
 * Contains response data for the enableAutoScale operation.
 */
export type PoolEnableAutoScaleResponse = PoolEnableAutoScaleHeaders & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The parsed HTTP response headers.
       */
      parsedHeaders: PoolEnableAutoScaleHeaders;
    };
};

/**
 * Contains response data for the evaluateAutoScale operation.
 */
export type PoolEvaluateAutoScaleResponse = AutoScaleRun & PoolEvaluateAutoScaleHeaders & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The parsed HTTP response headers.
       */
      parsedHeaders: PoolEvaluateAutoScaleHeaders;

      /**
       * The response body as text (string format)
       */
      bodyAsText: string;

      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: AutoScaleRun;
    };
};

/**
 * Contains response data for the resize operation.
 */
export type PoolResizeResponse = PoolResizeHeaders & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The parsed HTTP response headers.
       */
      parsedHeaders: PoolResizeHeaders;
    };
};

/**
 * Contains response data for the stopResize operation.
 */
export type PoolStopResizeResponse = PoolStopResizeHeaders & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The parsed HTTP response headers.
       */
      parsedHeaders: PoolStopResizeHeaders;
    };
};

/**
 * Contains response data for the updateProperties operation.
 */
export type PoolUpdatePropertiesResponse = PoolUpdatePropertiesHeaders & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The parsed HTTP response headers.
       */
      parsedHeaders: PoolUpdatePropertiesHeaders;
    };
};

/**
 * Contains response data for the removeNodes operation.
 */
export type PoolRemoveNodesResponse = PoolRemoveNodesHeaders & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The parsed HTTP response headers.
       */
      parsedHeaders: PoolRemoveNodesHeaders;
    };
};

/**
 * Contains response data for the listNodeAgentSkus operation.
 */
export type AccountListNodeAgentSkusResponse = AccountListNodeAgentSkusResult & AccountListNodeAgentSkusHeaders & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The parsed HTTP response headers.
       */
      parsedHeaders: AccountListNodeAgentSkusHeaders;

      /**
       * The response body as text (string format)
       */
      bodyAsText: string;

      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: AccountListNodeAgentSkusResult;
    };
};

/**
 * Contains response data for the listPoolNodeCounts operation.
 */
export type AccountListPoolNodeCountsResponse = PoolNodeCountsListResult & AccountListPoolNodeCountsHeaders & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The parsed HTTP response headers.
       */
      parsedHeaders: AccountListPoolNodeCountsHeaders;

      /**
       * The response body as text (string format)
       */
      bodyAsText: string;

      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: PoolNodeCountsListResult;
    };
};

/**
 * Contains response data for the getAllLifetimeStatistics operation.
 */
export type JobGetAllLifetimeStatisticsResponse = JobStatistics & JobGetAllLifetimeStatisticsHeaders & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The parsed HTTP response headers.
       */
      parsedHeaders: JobGetAllLifetimeStatisticsHeaders;

      /**
       * The response body as text (string format)
       */
      bodyAsText: string;

      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: JobStatistics;
    };
};

/**
 * Contains response data for the deleteMethod operation.
 */
export type JobDeleteResponse = JobDeleteHeaders & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The parsed HTTP response headers.
       */
      parsedHeaders: JobDeleteHeaders;
    };
};

/**
 * Contains response data for the get operation.
 */
export type JobGetResponse = CloudJob & JobGetHeaders & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The parsed HTTP response headers.
       */
      parsedHeaders: JobGetHeaders;

      /**
       * The response body as text (string format)
       */
      bodyAsText: string;

      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: CloudJob;
    };
};

/**
 * Contains response data for the patch operation.
 */
export type JobPatchResponse = JobPatchHeaders & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The parsed HTTP response headers.
       */
      parsedHeaders: JobPatchHeaders;
    };
};

/**
 * Contains response data for the update operation.
 */
export type JobUpdateResponse = JobUpdateHeaders & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The parsed HTTP response headers.
       */
      parsedHeaders: JobUpdateHeaders;
    };
};

/**
 * Contains response data for the disable operation.
 */
export type JobDisableResponse = JobDisableHeaders & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The parsed HTTP response headers.
       */
      parsedHeaders: JobDisableHeaders;
    };
};

/**
 * Contains response data for the enable operation.
 */
export type JobEnableResponse = JobEnableHeaders & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The parsed HTTP response headers.
       */
      parsedHeaders: JobEnableHeaders;
    };
};

/**
 * Contains response data for the terminate operation.
 */
export type JobTerminateResponse = JobTerminateHeaders & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The parsed HTTP response headers.
       */
      parsedHeaders: JobTerminateHeaders;
    };
};

/**
 * Contains response data for the add operation.
 */
export type JobAddResponse = JobAddHeaders & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The parsed HTTP response headers.
       */
      parsedHeaders: JobAddHeaders;
    };
};

/**
 * Contains response data for the list operation.
 */
export type JobListResponse = CloudJobListResult & JobListHeaders & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The parsed HTTP response headers.
       */
      parsedHeaders: JobListHeaders;

      /**
       * The response body as text (string format)
       */
      bodyAsText: string;

      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: CloudJobListResult;
    };
};

/**
 * Contains response data for the listFromJobSchedule operation.
 */
export type JobListFromJobScheduleResponse = CloudJobListResult & JobListFromJobScheduleHeaders & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The parsed HTTP response headers.
       */
      parsedHeaders: JobListFromJobScheduleHeaders;

      /**
       * The response body as text (string format)
       */
      bodyAsText: string;

      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: CloudJobListResult;
    };
};

/**
 * Contains response data for the listPreparationAndReleaseTaskStatus operation.
 */
export type JobListPreparationAndReleaseTaskStatusResponse = CloudJobListPreparationAndReleaseTaskStatusResult & JobListPreparationAndReleaseTaskStatusHeaders & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The parsed HTTP response headers.
       */
      parsedHeaders: JobListPreparationAndReleaseTaskStatusHeaders;

      /**
       * The response body as text (string format)
       */
      bodyAsText: string;

      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: CloudJobListPreparationAndReleaseTaskStatusResult;
    };
};

/**
 * Contains response data for the getTaskCounts operation.
 */
export type JobGetTaskCountsResponse = TaskCounts & JobGetTaskCountsHeaders & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The parsed HTTP response headers.
       */
      parsedHeaders: JobGetTaskCountsHeaders;

      /**
       * The response body as text (string format)
       */
      bodyAsText: string;

      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: TaskCounts;
    };
};

/**
 * Contains response data for the add operation.
 */
export type CertificateAddResponse = CertificateAddHeaders & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The parsed HTTP response headers.
       */
      parsedHeaders: CertificateAddHeaders;
    };
};

/**
 * Contains response data for the list operation.
 */
export type CertificateListResponse = CertificateListResult & CertificateListHeaders & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The parsed HTTP response headers.
       */
      parsedHeaders: CertificateListHeaders;

      /**
       * The response body as text (string format)
       */
      bodyAsText: string;

      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: CertificateListResult;
    };
};

/**
 * Contains response data for the cancelDeletion operation.
 */
export type CertificateCancelDeletionResponse = CertificateCancelDeletionHeaders & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The parsed HTTP response headers.
       */
      parsedHeaders: CertificateCancelDeletionHeaders;
    };
};

/**
 * Contains response data for the deleteMethod operation.
 */
export type CertificateDeleteResponse = CertificateDeleteHeaders & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The parsed HTTP response headers.
       */
      parsedHeaders: CertificateDeleteHeaders;
    };
};

/**
 * Contains response data for the get operation.
 */
export type CertificateGetResponse = Certificate & CertificateGetHeaders & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The parsed HTTP response headers.
       */
      parsedHeaders: CertificateGetHeaders;

      /**
       * The response body as text (string format)
       */
      bodyAsText: string;

      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: Certificate;
    };
};

/**
 * Contains response data for the deleteFromTask operation.
 */
export type FileDeleteFromTaskResponse = FileDeleteFromTaskHeaders & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The parsed HTTP response headers.
       */
      parsedHeaders: FileDeleteFromTaskHeaders;
    };
};

/**
 * Contains response data for the getFromTask operation.
 */
export type FileGetFromTaskResponse = FileGetFromTaskHeaders & {
  /**
   * BROWSER ONLY
   *
   * The response body as a browser Blob.
   * Always undefined in node.js.
   */
  blobBody?: Promise<Blob>;

  /**
   * NODEJS ONLY
   *
   * The response body as a node.js Readable stream.
   * Always undefined in the browser.
   */
  readableStreamBody?: NodeJS.ReadableStream;

  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The parsed HTTP response headers.
       */
      parsedHeaders: FileGetFromTaskHeaders;
    };
};

/**
 * Contains response data for the getPropertiesFromTask operation.
 */
export type FileGetPropertiesFromTaskResponse = FileGetPropertiesFromTaskHeaders & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The parsed HTTP response headers.
       */
      parsedHeaders: FileGetPropertiesFromTaskHeaders;
    };
};

/**
 * Contains response data for the deleteFromComputeNode operation.
 */
export type FileDeleteFromComputeNodeResponse = FileDeleteFromComputeNodeHeaders & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The parsed HTTP response headers.
       */
      parsedHeaders: FileDeleteFromComputeNodeHeaders;
    };
};

/**
 * Contains response data for the getFromComputeNode operation.
 */
export type FileGetFromComputeNodeResponse = FileGetFromComputeNodeHeaders & {
  /**
   * BROWSER ONLY
   *
   * The response body as a browser Blob.
   * Always undefined in node.js.
   */
  blobBody?: Promise<Blob>;

  /**
   * NODEJS ONLY
   *
   * The response body as a node.js Readable stream.
   * Always undefined in the browser.
   */
  readableStreamBody?: NodeJS.ReadableStream;

  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The parsed HTTP response headers.
       */
      parsedHeaders: FileGetFromComputeNodeHeaders;
    };
};

/**
 * Contains response data for the getPropertiesFromComputeNode operation.
 */
export type FileGetPropertiesFromComputeNodeResponse = FileGetPropertiesFromComputeNodeHeaders & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The parsed HTTP response headers.
       */
      parsedHeaders: FileGetPropertiesFromComputeNodeHeaders;
    };
};

/**
 * Contains response data for the listFromTask operation.
 */
export type FileListFromTaskResponse = NodeFileListResult & FileListFromTaskHeaders & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The parsed HTTP response headers.
       */
      parsedHeaders: FileListFromTaskHeaders;

      /**
       * The response body as text (string format)
       */
      bodyAsText: string;

      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: NodeFileListResult;
    };
};

/**
 * Contains response data for the listFromComputeNode operation.
 */
export type FileListFromComputeNodeResponse = NodeFileListResult & FileListFromComputeNodeHeaders & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The parsed HTTP response headers.
       */
      parsedHeaders: FileListFromComputeNodeHeaders;

      /**
       * The response body as text (string format)
       */
      bodyAsText: string;

      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: NodeFileListResult;
    };
};

/**
 * Contains response data for the exists operation.
 */
export type JobScheduleExistsResponse = JobScheduleExistsHeaders & {
  /**
   * The parsed response body.
   */
  body: boolean;

  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The parsed HTTP response headers.
       */
      parsedHeaders: JobScheduleExistsHeaders;

      /**
       * The response body as text (string format)
       */
      bodyAsText: string;

      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: boolean;
    };
};

/**
 * Contains response data for the deleteMethod operation.
 */
export type JobScheduleDeleteResponse = JobScheduleDeleteHeaders & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The parsed HTTP response headers.
       */
      parsedHeaders: JobScheduleDeleteHeaders;
    };
};

/**
 * Contains response data for the get operation.
 */
export type JobScheduleGetResponse = CloudJobSchedule & JobScheduleGetHeaders & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The parsed HTTP response headers.
       */
      parsedHeaders: JobScheduleGetHeaders;

      /**
       * The response body as text (string format)
       */
      bodyAsText: string;

      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: CloudJobSchedule;
    };
};

/**
 * Contains response data for the patch operation.
 */
export type JobSchedulePatchResponse = JobSchedulePatchHeaders & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The parsed HTTP response headers.
       */
      parsedHeaders: JobSchedulePatchHeaders;
    };
};

/**
 * Contains response data for the update operation.
 */
export type JobScheduleUpdateResponse = JobScheduleUpdateHeaders & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The parsed HTTP response headers.
       */
      parsedHeaders: JobScheduleUpdateHeaders;
    };
};

/**
 * Contains response data for the disable operation.
 */
export type JobScheduleDisableResponse = JobScheduleDisableHeaders & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The parsed HTTP response headers.
       */
      parsedHeaders: JobScheduleDisableHeaders;
    };
};

/**
 * Contains response data for the enable operation.
 */
export type JobScheduleEnableResponse = JobScheduleEnableHeaders & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The parsed HTTP response headers.
       */
      parsedHeaders: JobScheduleEnableHeaders;
    };
};

/**
 * Contains response data for the terminate operation.
 */
export type JobScheduleTerminateResponse = JobScheduleTerminateHeaders & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The parsed HTTP response headers.
       */
      parsedHeaders: JobScheduleTerminateHeaders;
    };
};

/**
 * Contains response data for the add operation.
 */
export type JobScheduleAddResponse = JobScheduleAddHeaders & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The parsed HTTP response headers.
       */
      parsedHeaders: JobScheduleAddHeaders;
    };
};

/**
 * Contains response data for the list operation.
 */
export type JobScheduleListResponse = CloudJobScheduleListResult & JobScheduleListHeaders & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The parsed HTTP response headers.
       */
      parsedHeaders: JobScheduleListHeaders;

      /**
       * The response body as text (string format)
       */
      bodyAsText: string;

      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: CloudJobScheduleListResult;
    };
};

/**
 * Contains response data for the add operation.
 */
export type TaskAddResponse = TaskAddHeaders & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The parsed HTTP response headers.
       */
      parsedHeaders: TaskAddHeaders;
    };
};

/**
 * Contains response data for the list operation.
 */
export type TaskListResponse = CloudTaskListResult & TaskListHeaders & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The parsed HTTP response headers.
       */
      parsedHeaders: TaskListHeaders;

      /**
       * The response body as text (string format)
       */
      bodyAsText: string;

      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: CloudTaskListResult;
    };
};

/**
 * Contains response data for the addCollection operation.
 */
export type TaskAddCollectionResponse = TaskAddCollectionResult & TaskAddCollectionHeaders & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The parsed HTTP response headers.
       */
      parsedHeaders: TaskAddCollectionHeaders;

      /**
       * The response body as text (string format)
       */
      bodyAsText: string;

      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: TaskAddCollectionResult;
    };
};

/**
 * Contains response data for the deleteMethod operation.
 */
export type TaskDeleteResponse = TaskDeleteHeaders & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The parsed HTTP response headers.
       */
      parsedHeaders: TaskDeleteHeaders;
    };
};

/**
 * Contains response data for the get operation.
 */
export type TaskGetResponse = CloudTask & TaskGetHeaders & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The parsed HTTP response headers.
       */
      parsedHeaders: TaskGetHeaders;

      /**
       * The response body as text (string format)
       */
      bodyAsText: string;

      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: CloudTask;
    };
};

/**
 * Contains response data for the update operation.
 */
export type TaskUpdateResponse = TaskUpdateHeaders & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The parsed HTTP response headers.
       */
      parsedHeaders: TaskUpdateHeaders;
    };
};

/**
 * Contains response data for the listSubtasks operation.
 */
export type TaskListSubtasksResponse = CloudTaskListSubtasksResult & TaskListSubtasksHeaders & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The parsed HTTP response headers.
       */
      parsedHeaders: TaskListSubtasksHeaders;

      /**
       * The response body as text (string format)
       */
      bodyAsText: string;

      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: CloudTaskListSubtasksResult;
    };
};

/**
 * Contains response data for the terminate operation.
 */
export type TaskTerminateResponse = TaskTerminateHeaders & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The parsed HTTP response headers.
       */
      parsedHeaders: TaskTerminateHeaders;
    };
};

/**
 * Contains response data for the reactivate operation.
 */
export type TaskReactivateResponse = TaskReactivateHeaders & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The parsed HTTP response headers.
       */
      parsedHeaders: TaskReactivateHeaders;
    };
};

/**
 * Contains response data for the addUser operation.
 */
export type ComputeNodeAddUserResponse = ComputeNodeAddUserHeaders & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The parsed HTTP response headers.
       */
      parsedHeaders: ComputeNodeAddUserHeaders;
    };
};

/**
 * Contains response data for the deleteUser operation.
 */
export type ComputeNodeDeleteUserResponse = ComputeNodeDeleteUserHeaders & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The parsed HTTP response headers.
       */
      parsedHeaders: ComputeNodeDeleteUserHeaders;
    };
};

/**
 * Contains response data for the updateUser operation.
 */
export type ComputeNodeUpdateUserResponse = ComputeNodeUpdateUserHeaders & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The parsed HTTP response headers.
       */
      parsedHeaders: ComputeNodeUpdateUserHeaders;
    };
};

/**
 * Contains response data for the get operation.
 */
export type ComputeNodeGetResponse = ComputeNode & ComputeNodeGetHeaders & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The parsed HTTP response headers.
       */
      parsedHeaders: ComputeNodeGetHeaders;

      /**
       * The response body as text (string format)
       */
      bodyAsText: string;

      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: ComputeNode;
    };
};

/**
 * Contains response data for the reboot operation.
 */
export type ComputeNodeRebootResponse = ComputeNodeRebootHeaders & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The parsed HTTP response headers.
       */
      parsedHeaders: ComputeNodeRebootHeaders;
    };
};

/**
 * Contains response data for the reimage operation.
 */
export type ComputeNodeReimageResponse = ComputeNodeReimageHeaders & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The parsed HTTP response headers.
       */
      parsedHeaders: ComputeNodeReimageHeaders;
    };
};

/**
 * Contains response data for the disableScheduling operation.
 */
export type ComputeNodeDisableSchedulingResponse = ComputeNodeDisableSchedulingHeaders & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The parsed HTTP response headers.
       */
      parsedHeaders: ComputeNodeDisableSchedulingHeaders;
    };
};

/**
 * Contains response data for the enableScheduling operation.
 */
export type ComputeNodeEnableSchedulingResponse = ComputeNodeEnableSchedulingHeaders & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The parsed HTTP response headers.
       */
      parsedHeaders: ComputeNodeEnableSchedulingHeaders;
    };
};

/**
 * Contains response data for the getRemoteLoginSettings operation.
 */
export type ComputeNodeGetRemoteLoginSettingsResponse = ComputeNodeGetRemoteLoginSettingsResult & ComputeNodeGetRemoteLoginSettingsHeaders & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The parsed HTTP response headers.
       */
      parsedHeaders: ComputeNodeGetRemoteLoginSettingsHeaders;

      /**
       * The response body as text (string format)
       */
      bodyAsText: string;

      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: ComputeNodeGetRemoteLoginSettingsResult;
    };
};

/**
 * Contains response data for the getRemoteDesktop operation.
 */
export type ComputeNodeGetRemoteDesktopResponse = ComputeNodeGetRemoteDesktopHeaders & {
  /**
   * BROWSER ONLY
   *
   * The response body as a browser Blob.
   * Always undefined in node.js.
   */
  blobBody?: Promise<Blob>;

  /**
   * NODEJS ONLY
   *
   * The response body as a node.js Readable stream.
   * Always undefined in the browser.
   */
  readableStreamBody?: NodeJS.ReadableStream;

  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The parsed HTTP response headers.
       */
      parsedHeaders: ComputeNodeGetRemoteDesktopHeaders;
    };
};

/**
 * Contains response data for the uploadBatchServiceLogs operation.
 */
export type ComputeNodeUploadBatchServiceLogsResponse = UploadBatchServiceLogsResult & ComputeNodeUploadBatchServiceLogsHeaders & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The parsed HTTP response headers.
       */
      parsedHeaders: ComputeNodeUploadBatchServiceLogsHeaders;

      /**
       * The response body as text (string format)
       */
      bodyAsText: string;

      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: UploadBatchServiceLogsResult;
    };
};

/**
 * Contains response data for the list operation.
 */
export type ComputeNodeListResponse = ComputeNodeListResult & ComputeNodeListHeaders & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The parsed HTTP response headers.
       */
      parsedHeaders: ComputeNodeListHeaders;

      /**
       * The response body as text (string format)
       */
      bodyAsText: string;

      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: ComputeNodeListResult;
    };
};
