/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is
 * regenerated.
 */

import * as msRest from "@azure/ms-rest-js";
import * as Models from "../models";
import * as Mappers from "../models/fileMappers";
import * as Parameters from "../models/parameters";
import { BatchServiceClientContext } from "../batchServiceClientContext";

/** Class representing a File. */
export class File {
  private readonly client: BatchServiceClientContext;

  /**
   * Create a File.
   * @param {BatchServiceClientContext} client Reference to the service client.
   */
  constructor(client: BatchServiceClientContext) {
    this.client = client;
  }

  /**
   * @summary Deletes the specified Task file from the Compute Node where the Task ran.
   * @param jobId The ID of the Job that contains the Task.
   * @param taskId The ID of the Task whose file you want to delete.
   * @param filePath The path to the Task file or directory that you want to delete.
   * @param [options] The optional parameters
   * @returns Promise<Models.FileDeleteFromTaskResponse>
   */
  deleteFromTask(jobId: string, taskId: string, filePath: string, options?: Models.FileDeleteFromTaskOptionalParams): Promise<Models.FileDeleteFromTaskResponse>;
  /**
   * @param jobId The ID of the Job that contains the Task.
   * @param taskId The ID of the Task whose file you want to delete.
   * @param filePath The path to the Task file or directory that you want to delete.
   * @param callback The callback
   */
  deleteFromTask(jobId: string, taskId: string, filePath: string, callback: msRest.ServiceCallback<void>): void;
  /**
   * @param jobId The ID of the Job that contains the Task.
   * @param taskId The ID of the Task whose file you want to delete.
   * @param filePath The path to the Task file or directory that you want to delete.
   * @param options The optional parameters
   * @param callback The callback
   */
  deleteFromTask(jobId: string, taskId: string, filePath: string, options: Models.FileDeleteFromTaskOptionalParams, callback: msRest.ServiceCallback<void>): void;
  deleteFromTask(jobId: string, taskId: string, filePath: string, options?: Models.FileDeleteFromTaskOptionalParams | msRest.ServiceCallback<void>, callback?: msRest.ServiceCallback<void>): Promise<Models.FileDeleteFromTaskResponse> {
    return this.client.sendOperationRequest(
      {
        jobId,
        taskId,
        filePath,
        options
      },
      deleteFromTaskOperationSpec,
      callback) as Promise<Models.FileDeleteFromTaskResponse>;
  }

  /**
   * Returns the content of the specified Task file.
   * @param jobId The ID of the Job that contains the Task.
   * @param taskId The ID of the Task whose file you want to retrieve.
   * @param filePath The path to the Task file that you want to get the content of.
   * @param [options] The optional parameters
   * @returns Promise<Models.FileGetFromTaskResponse>
   */
  getFromTask(jobId: string, taskId: string, filePath: string, options?: Models.FileGetFromTaskOptionalParams): Promise<Models.FileGetFromTaskResponse>;
  /**
   * @param jobId The ID of the Job that contains the Task.
   * @param taskId The ID of the Task whose file you want to retrieve.
   * @param filePath The path to the Task file that you want to get the content of.
   * @param callback The callback
   */
  getFromTask(jobId: string, taskId: string, filePath: string, callback: msRest.ServiceCallback<void>): void;
  /**
   * @param jobId The ID of the Job that contains the Task.
   * @param taskId The ID of the Task whose file you want to retrieve.
   * @param filePath The path to the Task file that you want to get the content of.
   * @param options The optional parameters
   * @param callback The callback
   */
  getFromTask(jobId: string, taskId: string, filePath: string, options: Models.FileGetFromTaskOptionalParams, callback: msRest.ServiceCallback<void>): void;
  getFromTask(jobId: string, taskId: string, filePath: string, options?: Models.FileGetFromTaskOptionalParams | msRest.ServiceCallback<void>, callback?: msRest.ServiceCallback<void>): Promise<Models.FileGetFromTaskResponse> {
    return this.client.sendOperationRequest(
      {
        jobId,
        taskId,
        filePath,
        options
      },
      getFromTaskOperationSpec,
      callback) as Promise<Models.FileGetFromTaskResponse>;
  }

  /**
   * Gets the properties of the specified Task file.
   * @param jobId The ID of the Job that contains the Task.
   * @param taskId The ID of the Task whose file you want to get the properties of.
   * @param filePath The path to the Task file that you want to get the properties of.
   * @param [options] The optional parameters
   * @returns Promise<Models.FileGetPropertiesFromTaskResponse>
   */
  getPropertiesFromTask(jobId: string, taskId: string, filePath: string, options?: Models.FileGetPropertiesFromTaskOptionalParams): Promise<Models.FileGetPropertiesFromTaskResponse>;
  /**
   * @param jobId The ID of the Job that contains the Task.
   * @param taskId The ID of the Task whose file you want to get the properties of.
   * @param filePath The path to the Task file that you want to get the properties of.
   * @param callback The callback
   */
  getPropertiesFromTask(jobId: string, taskId: string, filePath: string, callback: msRest.ServiceCallback<void>): void;
  /**
   * @param jobId The ID of the Job that contains the Task.
   * @param taskId The ID of the Task whose file you want to get the properties of.
   * @param filePath The path to the Task file that you want to get the properties of.
   * @param options The optional parameters
   * @param callback The callback
   */
  getPropertiesFromTask(jobId: string, taskId: string, filePath: string, options: Models.FileGetPropertiesFromTaskOptionalParams, callback: msRest.ServiceCallback<void>): void;
  getPropertiesFromTask(jobId: string, taskId: string, filePath: string, options?: Models.FileGetPropertiesFromTaskOptionalParams | msRest.ServiceCallback<void>, callback?: msRest.ServiceCallback<void>): Promise<Models.FileGetPropertiesFromTaskResponse> {
    return this.client.sendOperationRequest(
      {
        jobId,
        taskId,
        filePath,
        options
      },
      getPropertiesFromTaskOperationSpec,
      callback) as Promise<Models.FileGetPropertiesFromTaskResponse>;
  }

  /**
   * @summary Deletes the specified file from the Compute Node.
   * @param poolId The ID of the Pool that contains the Compute Node.
   * @param nodeId The ID of the Compute Node from which you want to delete the file.
   * @param filePath The path to the file or directory that you want to delete.
   * @param [options] The optional parameters
   * @returns Promise<Models.FileDeleteFromComputeNodeResponse>
   */
  deleteFromComputeNode(poolId: string, nodeId: string, filePath: string, options?: Models.FileDeleteFromComputeNodeOptionalParams): Promise<Models.FileDeleteFromComputeNodeResponse>;
  /**
   * @param poolId The ID of the Pool that contains the Compute Node.
   * @param nodeId The ID of the Compute Node from which you want to delete the file.
   * @param filePath The path to the file or directory that you want to delete.
   * @param callback The callback
   */
  deleteFromComputeNode(poolId: string, nodeId: string, filePath: string, callback: msRest.ServiceCallback<void>): void;
  /**
   * @param poolId The ID of the Pool that contains the Compute Node.
   * @param nodeId The ID of the Compute Node from which you want to delete the file.
   * @param filePath The path to the file or directory that you want to delete.
   * @param options The optional parameters
   * @param callback The callback
   */
  deleteFromComputeNode(poolId: string, nodeId: string, filePath: string, options: Models.FileDeleteFromComputeNodeOptionalParams, callback: msRest.ServiceCallback<void>): void;
  deleteFromComputeNode(poolId: string, nodeId: string, filePath: string, options?: Models.FileDeleteFromComputeNodeOptionalParams | msRest.ServiceCallback<void>, callback?: msRest.ServiceCallback<void>): Promise<Models.FileDeleteFromComputeNodeResponse> {
    return this.client.sendOperationRequest(
      {
        poolId,
        nodeId,
        filePath,
        options
      },
      deleteFromComputeNodeOperationSpec,
      callback) as Promise<Models.FileDeleteFromComputeNodeResponse>;
  }

  /**
   * Returns the content of the specified Compute Node file.
   * @param poolId The ID of the Pool that contains the Compute Node.
   * @param nodeId The ID of the Compute Node that contains the file.
   * @param filePath The path to the Compute Node file that you want to get the content of.
   * @param [options] The optional parameters
   * @returns Promise<Models.FileGetFromComputeNodeResponse>
   */
  getFromComputeNode(poolId: string, nodeId: string, filePath: string, options?: Models.FileGetFromComputeNodeOptionalParams): Promise<Models.FileGetFromComputeNodeResponse>;
  /**
   * @param poolId The ID of the Pool that contains the Compute Node.
   * @param nodeId The ID of the Compute Node that contains the file.
   * @param filePath The path to the Compute Node file that you want to get the content of.
   * @param callback The callback
   */
  getFromComputeNode(poolId: string, nodeId: string, filePath: string, callback: msRest.ServiceCallback<void>): void;
  /**
   * @param poolId The ID of the Pool that contains the Compute Node.
   * @param nodeId The ID of the Compute Node that contains the file.
   * @param filePath The path to the Compute Node file that you want to get the content of.
   * @param options The optional parameters
   * @param callback The callback
   */
  getFromComputeNode(poolId: string, nodeId: string, filePath: string, options: Models.FileGetFromComputeNodeOptionalParams, callback: msRest.ServiceCallback<void>): void;
  getFromComputeNode(poolId: string, nodeId: string, filePath: string, options?: Models.FileGetFromComputeNodeOptionalParams | msRest.ServiceCallback<void>, callback?: msRest.ServiceCallback<void>): Promise<Models.FileGetFromComputeNodeResponse> {
    return this.client.sendOperationRequest(
      {
        poolId,
        nodeId,
        filePath,
        options
      },
      getFromComputeNodeOperationSpec,
      callback) as Promise<Models.FileGetFromComputeNodeResponse>;
  }

  /**
   * Gets the properties of the specified Compute Node file.
   * @param poolId The ID of the Pool that contains the Compute Node.
   * @param nodeId The ID of the Compute Node that contains the file.
   * @param filePath The path to the Compute Node file that you want to get the properties of.
   * @param [options] The optional parameters
   * @returns Promise<Models.FileGetPropertiesFromComputeNodeResponse>
   */
  getPropertiesFromComputeNode(poolId: string, nodeId: string, filePath: string, options?: Models.FileGetPropertiesFromComputeNodeOptionalParams): Promise<Models.FileGetPropertiesFromComputeNodeResponse>;
  /**
   * @param poolId The ID of the Pool that contains the Compute Node.
   * @param nodeId The ID of the Compute Node that contains the file.
   * @param filePath The path to the Compute Node file that you want to get the properties of.
   * @param callback The callback
   */
  getPropertiesFromComputeNode(poolId: string, nodeId: string, filePath: string, callback: msRest.ServiceCallback<void>): void;
  /**
   * @param poolId The ID of the Pool that contains the Compute Node.
   * @param nodeId The ID of the Compute Node that contains the file.
   * @param filePath The path to the Compute Node file that you want to get the properties of.
   * @param options The optional parameters
   * @param callback The callback
   */
  getPropertiesFromComputeNode(poolId: string, nodeId: string, filePath: string, options: Models.FileGetPropertiesFromComputeNodeOptionalParams, callback: msRest.ServiceCallback<void>): void;
  getPropertiesFromComputeNode(poolId: string, nodeId: string, filePath: string, options?: Models.FileGetPropertiesFromComputeNodeOptionalParams | msRest.ServiceCallback<void>, callback?: msRest.ServiceCallback<void>): Promise<Models.FileGetPropertiesFromComputeNodeResponse> {
    return this.client.sendOperationRequest(
      {
        poolId,
        nodeId,
        filePath,
        options
      },
      getPropertiesFromComputeNodeOperationSpec,
      callback) as Promise<Models.FileGetPropertiesFromComputeNodeResponse>;
  }

  /**
   * @summary Lists the files in a Task's directory on its Compute Node.
   * @param jobId The ID of the Job that contains the Task.
   * @param taskId The ID of the Task whose files you want to list.
   * @param [options] The optional parameters
   * @returns Promise<Models.FileListFromTaskResponse>
   */
  listFromTask(jobId: string, taskId: string, options?: Models.FileListFromTaskOptionalParams): Promise<Models.FileListFromTaskResponse>;
  /**
   * @param jobId The ID of the Job that contains the Task.
   * @param taskId The ID of the Task whose files you want to list.
   * @param callback The callback
   */
  listFromTask(jobId: string, taskId: string, callback: msRest.ServiceCallback<Models.NodeFileListResult>): void;
  /**
   * @param jobId The ID of the Job that contains the Task.
   * @param taskId The ID of the Task whose files you want to list.
   * @param options The optional parameters
   * @param callback The callback
   */
  listFromTask(jobId: string, taskId: string, options: Models.FileListFromTaskOptionalParams, callback: msRest.ServiceCallback<Models.NodeFileListResult>): void;
  listFromTask(jobId: string, taskId: string, options?: Models.FileListFromTaskOptionalParams | msRest.ServiceCallback<Models.NodeFileListResult>, callback?: msRest.ServiceCallback<Models.NodeFileListResult>): Promise<Models.FileListFromTaskResponse> {
    return this.client.sendOperationRequest(
      {
        jobId,
        taskId,
        options
      },
      listFromTaskOperationSpec,
      callback) as Promise<Models.FileListFromTaskResponse>;
  }

  /**
   * @summary Lists all of the files in Task directories on the specified Compute Node.
   * @param poolId The ID of the Pool that contains the Compute Node.
   * @param nodeId The ID of the Compute Node whose files you want to list.
   * @param [options] The optional parameters
   * @returns Promise<Models.FileListFromComputeNodeResponse>
   */
  listFromComputeNode(poolId: string, nodeId: string, options?: Models.FileListFromComputeNodeOptionalParams): Promise<Models.FileListFromComputeNodeResponse>;
  /**
   * @param poolId The ID of the Pool that contains the Compute Node.
   * @param nodeId The ID of the Compute Node whose files you want to list.
   * @param callback The callback
   */
  listFromComputeNode(poolId: string, nodeId: string, callback: msRest.ServiceCallback<Models.NodeFileListResult>): void;
  /**
   * @param poolId The ID of the Pool that contains the Compute Node.
   * @param nodeId The ID of the Compute Node whose files you want to list.
   * @param options The optional parameters
   * @param callback The callback
   */
  listFromComputeNode(poolId: string, nodeId: string, options: Models.FileListFromComputeNodeOptionalParams, callback: msRest.ServiceCallback<Models.NodeFileListResult>): void;
  listFromComputeNode(poolId: string, nodeId: string, options?: Models.FileListFromComputeNodeOptionalParams | msRest.ServiceCallback<Models.NodeFileListResult>, callback?: msRest.ServiceCallback<Models.NodeFileListResult>): Promise<Models.FileListFromComputeNodeResponse> {
    return this.client.sendOperationRequest(
      {
        poolId,
        nodeId,
        options
      },
      listFromComputeNodeOperationSpec,
      callback) as Promise<Models.FileListFromComputeNodeResponse>;
  }

  /**
   * @summary Lists the files in a Task's directory on its Compute Node.
   * @param nextPageLink The NextLink from the previous successful call to List operation.
   * @param [options] The optional parameters
   * @returns Promise<Models.FileListFromTaskResponse>
   */
  listFromTaskNext(nextPageLink: string, options?: Models.FileListFromTaskNextOptionalParams): Promise<Models.FileListFromTaskResponse>;
  /**
   * @param nextPageLink The NextLink from the previous successful call to List operation.
   * @param callback The callback
   */
  listFromTaskNext(nextPageLink: string, callback: msRest.ServiceCallback<Models.NodeFileListResult>): void;
  /**
   * @param nextPageLink The NextLink from the previous successful call to List operation.
   * @param options The optional parameters
   * @param callback The callback
   */
  listFromTaskNext(nextPageLink: string, options: Models.FileListFromTaskNextOptionalParams, callback: msRest.ServiceCallback<Models.NodeFileListResult>): void;
  listFromTaskNext(nextPageLink: string, options?: Models.FileListFromTaskNextOptionalParams | msRest.ServiceCallback<Models.NodeFileListResult>, callback?: msRest.ServiceCallback<Models.NodeFileListResult>): Promise<Models.FileListFromTaskResponse> {
    return this.client.sendOperationRequest(
      {
        nextPageLink,
        options
      },
      listFromTaskNextOperationSpec,
      callback) as Promise<Models.FileListFromTaskResponse>;
  }

  /**
   * @summary Lists all of the files in Task directories on the specified Compute Node.
   * @param nextPageLink The NextLink from the previous successful call to List operation.
   * @param [options] The optional parameters
   * @returns Promise<Models.FileListFromComputeNodeResponse>
   */
  listFromComputeNodeNext(nextPageLink: string, options?: Models.FileListFromComputeNodeNextOptionalParams): Promise<Models.FileListFromComputeNodeResponse>;
  /**
   * @param nextPageLink The NextLink from the previous successful call to List operation.
   * @param callback The callback
   */
  listFromComputeNodeNext(nextPageLink: string, callback: msRest.ServiceCallback<Models.NodeFileListResult>): void;
  /**
   * @param nextPageLink The NextLink from the previous successful call to List operation.
   * @param options The optional parameters
   * @param callback The callback
   */
  listFromComputeNodeNext(nextPageLink: string, options: Models.FileListFromComputeNodeNextOptionalParams, callback: msRest.ServiceCallback<Models.NodeFileListResult>): void;
  listFromComputeNodeNext(nextPageLink: string, options?: Models.FileListFromComputeNodeNextOptionalParams | msRest.ServiceCallback<Models.NodeFileListResult>, callback?: msRest.ServiceCallback<Models.NodeFileListResult>): Promise<Models.FileListFromComputeNodeResponse> {
    return this.client.sendOperationRequest(
      {
        nextPageLink,
        options
      },
      listFromComputeNodeNextOperationSpec,
      callback) as Promise<Models.FileListFromComputeNodeResponse>;
  }
}

// Operation Specifications
const serializer = new msRest.Serializer(Mappers);
const deleteFromTaskOperationSpec: msRest.OperationSpec = {
  httpMethod: "DELETE",
  path: "jobs/{jobId}/tasks/{taskId}/files/{filePath}",
  urlParameters: [
    Parameters.batchUrl,
    Parameters.jobId,
    Parameters.taskId,
    Parameters.filePath
  ],
  queryParameters: [
    Parameters.recursive,
    Parameters.apiVersion,
    Parameters.timeout37
  ],
  headerParameters: [
    Parameters.acceptLanguage,
    Parameters.clientRequestId46,
    Parameters.returnClientRequestId46,
    Parameters.ocpDate46
  ],
  responses: {
    200: {
      headersMapper: Mappers.FileDeleteFromTaskHeaders
    },
    default: {
      bodyMapper: Mappers.BatchError,
      headersMapper: Mappers.FileDeleteFromTaskHeaders
    }
  },
  serializer
};

const getFromTaskOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "jobs/{jobId}/tasks/{taskId}/files/{filePath}",
  urlParameters: [
    Parameters.batchUrl,
    Parameters.jobId,
    Parameters.taskId,
    Parameters.filePath
  ],
  queryParameters: [
    Parameters.apiVersion,
    Parameters.timeout38
  ],
  headerParameters: [
    Parameters.acceptLanguage,
    Parameters.clientRequestId47,
    Parameters.returnClientRequestId47,
    Parameters.ocpDate47,
    Parameters.ocpRange0,
    Parameters.ifModifiedSince15,
    Parameters.ifUnmodifiedSince15
  ],
  responses: {
    200: {
      bodyMapper: {
        serializedName: "parsedResponse",
        type: {
          name: "Stream"
        }
      },
      headersMapper: Mappers.FileGetFromTaskHeaders
    },
    default: {
      bodyMapper: Mappers.BatchError,
      headersMapper: Mappers.FileGetFromTaskHeaders
    }
  },
  serializer
};

const getPropertiesFromTaskOperationSpec: msRest.OperationSpec = {
  httpMethod: "HEAD",
  path: "jobs/{jobId}/tasks/{taskId}/files/{filePath}",
  urlParameters: [
    Parameters.batchUrl,
    Parameters.jobId,
    Parameters.taskId,
    Parameters.filePath
  ],
  queryParameters: [
    Parameters.apiVersion,
    Parameters.timeout39
  ],
  headerParameters: [
    Parameters.acceptLanguage,
    Parameters.clientRequestId48,
    Parameters.returnClientRequestId48,
    Parameters.ocpDate48,
    Parameters.ifModifiedSince16,
    Parameters.ifUnmodifiedSince16
  ],
  responses: {
    200: {
      headersMapper: Mappers.FileGetPropertiesFromTaskHeaders
    },
    default: {
      bodyMapper: Mappers.BatchError,
      headersMapper: Mappers.FileGetPropertiesFromTaskHeaders
    }
  },
  serializer
};

const deleteFromComputeNodeOperationSpec: msRest.OperationSpec = {
  httpMethod: "DELETE",
  path: "pools/{poolId}/nodes/{nodeId}/files/{filePath}",
  urlParameters: [
    Parameters.batchUrl,
    Parameters.poolId,
    Parameters.nodeId,
    Parameters.filePath
  ],
  queryParameters: [
    Parameters.recursive,
    Parameters.apiVersion,
    Parameters.timeout40
  ],
  headerParameters: [
    Parameters.acceptLanguage,
    Parameters.clientRequestId49,
    Parameters.returnClientRequestId49,
    Parameters.ocpDate49
  ],
  responses: {
    200: {
      headersMapper: Mappers.FileDeleteFromComputeNodeHeaders
    },
    default: {
      bodyMapper: Mappers.BatchError,
      headersMapper: Mappers.FileDeleteFromComputeNodeHeaders
    }
  },
  serializer
};

const getFromComputeNodeOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "pools/{poolId}/nodes/{nodeId}/files/{filePath}",
  urlParameters: [
    Parameters.batchUrl,
    Parameters.poolId,
    Parameters.nodeId,
    Parameters.filePath
  ],
  queryParameters: [
    Parameters.apiVersion,
    Parameters.timeout41
  ],
  headerParameters: [
    Parameters.acceptLanguage,
    Parameters.clientRequestId50,
    Parameters.returnClientRequestId50,
    Parameters.ocpDate50,
    Parameters.ocpRange1,
    Parameters.ifModifiedSince17,
    Parameters.ifUnmodifiedSince17
  ],
  responses: {
    200: {
      bodyMapper: {
        serializedName: "parsedResponse",
        type: {
          name: "Stream"
        }
      },
      headersMapper: Mappers.FileGetFromComputeNodeHeaders
    },
    default: {
      bodyMapper: Mappers.BatchError,
      headersMapper: Mappers.FileGetFromComputeNodeHeaders
    }
  },
  serializer
};

const getPropertiesFromComputeNodeOperationSpec: msRest.OperationSpec = {
  httpMethod: "HEAD",
  path: "pools/{poolId}/nodes/{nodeId}/files/{filePath}",
  urlParameters: [
    Parameters.batchUrl,
    Parameters.poolId,
    Parameters.nodeId,
    Parameters.filePath
  ],
  queryParameters: [
    Parameters.apiVersion,
    Parameters.timeout42
  ],
  headerParameters: [
    Parameters.acceptLanguage,
    Parameters.clientRequestId51,
    Parameters.returnClientRequestId51,
    Parameters.ocpDate51,
    Parameters.ifModifiedSince18,
    Parameters.ifUnmodifiedSince18
  ],
  responses: {
    200: {
      headersMapper: Mappers.FileGetPropertiesFromComputeNodeHeaders
    },
    default: {
      bodyMapper: Mappers.BatchError,
      headersMapper: Mappers.FileGetPropertiesFromComputeNodeHeaders
    }
  },
  serializer
};

const listFromTaskOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "jobs/{jobId}/tasks/{taskId}/files",
  urlParameters: [
    Parameters.batchUrl,
    Parameters.jobId,
    Parameters.taskId
  ],
  queryParameters: [
    Parameters.recursive,
    Parameters.apiVersion,
    Parameters.filter8,
    Parameters.maxResults9,
    Parameters.timeout43
  ],
  headerParameters: [
    Parameters.acceptLanguage,
    Parameters.clientRequestId52,
    Parameters.returnClientRequestId52,
    Parameters.ocpDate52
  ],
  responses: {
    200: {
      bodyMapper: Mappers.NodeFileListResult,
      headersMapper: Mappers.FileListFromTaskHeaders
    },
    default: {
      bodyMapper: Mappers.BatchError,
      headersMapper: Mappers.FileListFromTaskHeaders
    }
  },
  serializer
};

const listFromComputeNodeOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "pools/{poolId}/nodes/{nodeId}/files",
  urlParameters: [
    Parameters.batchUrl,
    Parameters.poolId,
    Parameters.nodeId
  ],
  queryParameters: [
    Parameters.recursive,
    Parameters.apiVersion,
    Parameters.filter9,
    Parameters.maxResults10,
    Parameters.timeout44
  ],
  headerParameters: [
    Parameters.acceptLanguage,
    Parameters.clientRequestId53,
    Parameters.returnClientRequestId53,
    Parameters.ocpDate53
  ],
  responses: {
    200: {
      bodyMapper: Mappers.NodeFileListResult,
      headersMapper: Mappers.FileListFromComputeNodeHeaders
    },
    default: {
      bodyMapper: Mappers.BatchError,
      headersMapper: Mappers.FileListFromComputeNodeHeaders
    }
  },
  serializer
};

const listFromTaskNextOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  baseUrl: "{batchUrl}",
  path: "{nextLink}",
  urlParameters: [
    Parameters.nextPageLink
  ],
  queryParameters: [
    Parameters.recursive,
    Parameters.apiVersion
  ],
  headerParameters: [
    Parameters.acceptLanguage,
    Parameters.clientRequestId54,
    Parameters.returnClientRequestId54,
    Parameters.ocpDate54
  ],
  responses: {
    200: {
      bodyMapper: Mappers.NodeFileListResult,
      headersMapper: Mappers.FileListFromTaskHeaders
    },
    default: {
      bodyMapper: Mappers.BatchError,
      headersMapper: Mappers.FileListFromTaskHeaders
    }
  },
  serializer
};

const listFromComputeNodeNextOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  baseUrl: "{batchUrl}",
  path: "{nextLink}",
  urlParameters: [
    Parameters.nextPageLink
  ],
  queryParameters: [
    Parameters.recursive,
    Parameters.apiVersion
  ],
  headerParameters: [
    Parameters.acceptLanguage,
    Parameters.clientRequestId55,
    Parameters.returnClientRequestId55,
    Parameters.ocpDate55
  ],
  responses: {
    200: {
      bodyMapper: Mappers.NodeFileListResult,
      headersMapper: Mappers.FileListFromComputeNodeHeaders
    },
    default: {
      bodyMapper: Mappers.BatchError,
      headersMapper: Mappers.FileListFromComputeNodeHeaders
    }
  },
  serializer
};
