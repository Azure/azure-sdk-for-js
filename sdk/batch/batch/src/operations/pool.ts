/*
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is
 * regenerated.
 */

import * as msRest from "@azure/ms-rest-js";
import * as Models from "../models";
import * as Mappers from "../models/poolMappers";
import * as Parameters from "../models/parameters";
import { BatchServiceClientContext } from "../batchServiceClientContext";

/** Class representing a Pool. */
export class Pool {
  private readonly client: BatchServiceClientContext;

  /**
   * Create a Pool.
   * @param {BatchServiceClientContext} client Reference to the service client.
   */
  constructor(client: BatchServiceClientContext) {
    this.client = client;
  }

  /**
   * If you do not specify a $filter clause including a poolId, the response includes all pools that
   * existed in the account in the time range of the returned aggregation intervals. If you do not
   * specify a $filter clause including a startTime or endTime these filters default to the start and
   * end times of the last aggregation interval currently available; that is, only the last
   * aggregation interval is returned.
   * @summary Lists the usage metrics, aggregated by pool across individual time intervals, for the
   * specified account.
   * @param [options] The optional parameters
   * @returns Promise<Models.PoolListUsageMetricsResponse>
   */
  listUsageMetrics(options?: Models.PoolListUsageMetricsOptionalParams): Promise<Models.PoolListUsageMetricsResponse>;
  /**
   * @param callback The callback
   */
  listUsageMetrics(callback: msRest.ServiceCallback<Models.PoolListUsageMetricsResult>): void;
  /**
   * @param options The optional parameters
   * @param callback The callback
   */
  listUsageMetrics(options: Models.PoolListUsageMetricsOptionalParams, callback: msRest.ServiceCallback<Models.PoolListUsageMetricsResult>): void;
  listUsageMetrics(options?: Models.PoolListUsageMetricsOptionalParams | msRest.ServiceCallback<Models.PoolListUsageMetricsResult>, callback?: msRest.ServiceCallback<Models.PoolListUsageMetricsResult>): Promise<Models.PoolListUsageMetricsResponse> {
    return this.client.sendOperationRequest(
      {
        options
      },
      listUsageMetricsOperationSpec,
      callback) as Promise<Models.PoolListUsageMetricsResponse>;
  }

  /**
   * Statistics are aggregated across all pools that have ever existed in the account, from account
   * creation to the last update time of the statistics. The statistics may not be immediately
   * available. The Batch service performs periodic roll-up of statistics. The typical delay is about
   * 30 minutes.
   * @summary Gets lifetime summary statistics for all of the pools in the specified account.
   * @param [options] The optional parameters
   * @returns Promise<Models.PoolGetAllLifetimeStatisticsResponse>
   */
  getAllLifetimeStatistics(options?: Models.PoolGetAllLifetimeStatisticsOptionalParams): Promise<Models.PoolGetAllLifetimeStatisticsResponse>;
  /**
   * @param callback The callback
   */
  getAllLifetimeStatistics(callback: msRest.ServiceCallback<Models.PoolStatistics>): void;
  /**
   * @param options The optional parameters
   * @param callback The callback
   */
  getAllLifetimeStatistics(options: Models.PoolGetAllLifetimeStatisticsOptionalParams, callback: msRest.ServiceCallback<Models.PoolStatistics>): void;
  getAllLifetimeStatistics(options?: Models.PoolGetAllLifetimeStatisticsOptionalParams | msRest.ServiceCallback<Models.PoolStatistics>, callback?: msRest.ServiceCallback<Models.PoolStatistics>): Promise<Models.PoolGetAllLifetimeStatisticsResponse> {
    return this.client.sendOperationRequest(
      {
        options
      },
      getAllLifetimeStatisticsOperationSpec,
      callback) as Promise<Models.PoolGetAllLifetimeStatisticsResponse>;
  }

  /**
   * When naming pools, avoid including sensitive information such as user names or secret project
   * names. This information may appear in telemetry logs accessible to Microsoft Support engineers.
   * @summary Adds a pool to the specified account.
   * @param pool The pool to be added.
   * @param [options] The optional parameters
   * @returns Promise<Models.PoolAddResponse>
   */
  add(pool: Models.PoolAddParameter, options?: Models.PoolAddOptionalParams): Promise<Models.PoolAddResponse>;
  /**
   * @param pool The pool to be added.
   * @param callback The callback
   */
  add(pool: Models.PoolAddParameter, callback: msRest.ServiceCallback<void>): void;
  /**
   * @param pool The pool to be added.
   * @param options The optional parameters
   * @param callback The callback
   */
  add(pool: Models.PoolAddParameter, options: Models.PoolAddOptionalParams, callback: msRest.ServiceCallback<void>): void;
  add(pool: Models.PoolAddParameter, options?: Models.PoolAddOptionalParams | msRest.ServiceCallback<void>, callback?: msRest.ServiceCallback<void>): Promise<Models.PoolAddResponse> {
    return this.client.sendOperationRequest(
      {
        pool,
        options
      },
      addOperationSpec,
      callback) as Promise<Models.PoolAddResponse>;
  }

  /**
   * @summary Lists all of the pools in the specified account.
   * @param [options] The optional parameters
   * @returns Promise<Models.PoolListResponse>
   */
  list(options?: Models.PoolListOptionalParams): Promise<Models.PoolListResponse>;
  /**
   * @param callback The callback
   */
  list(callback: msRest.ServiceCallback<Models.CloudPoolListResult>): void;
  /**
   * @param options The optional parameters
   * @param callback The callback
   */
  list(options: Models.PoolListOptionalParams, callback: msRest.ServiceCallback<Models.CloudPoolListResult>): void;
  list(options?: Models.PoolListOptionalParams | msRest.ServiceCallback<Models.CloudPoolListResult>, callback?: msRest.ServiceCallback<Models.CloudPoolListResult>): Promise<Models.PoolListResponse> {
    return this.client.sendOperationRequest(
      {
        options
      },
      listOperationSpec,
      callback) as Promise<Models.PoolListResponse>;
  }

  /**
   * When you request that a pool be deleted, the following actions occur: the pool state is set to
   * deleting; any ongoing resize operation on the pool are stopped; the Batch service starts
   * resizing the pool to zero nodes; any tasks running on existing nodes are terminated and requeued
   * (as if a resize pool operation had been requested with the default requeue option); finally, the
   * pool is removed from the system. Because running tasks are requeued, the user can rerun these
   * tasks by updating their job to target a different pool. The tasks can then run on the new pool.
   * If you want to override the requeue behavior, then you should call resize pool explicitly to
   * shrink the pool to zero size before deleting the pool. If you call an Update, Patch or Delete
   * API on a pool in the deleting state, it will fail with HTTP status code 409 with error code
   * PoolBeingDeleted.
   * @summary Deletes a pool from the specified account.
   * @param poolId The ID of the pool to delete.
   * @param [options] The optional parameters
   * @returns Promise<Models.PoolDeleteResponse>
   */
  deleteMethod(poolId: string, options?: Models.PoolDeleteMethodOptionalParams): Promise<Models.PoolDeleteResponse>;
  /**
   * @param poolId The ID of the pool to delete.
   * @param callback The callback
   */
  deleteMethod(poolId: string, callback: msRest.ServiceCallback<void>): void;
  /**
   * @param poolId The ID of the pool to delete.
   * @param options The optional parameters
   * @param callback The callback
   */
  deleteMethod(poolId: string, options: Models.PoolDeleteMethodOptionalParams, callback: msRest.ServiceCallback<void>): void;
  deleteMethod(poolId: string, options?: Models.PoolDeleteMethodOptionalParams | msRest.ServiceCallback<void>, callback?: msRest.ServiceCallback<void>): Promise<Models.PoolDeleteResponse> {
    return this.client.sendOperationRequest(
      {
        poolId,
        options
      },
      deleteMethodOperationSpec,
      callback) as Promise<Models.PoolDeleteResponse>;
  }

  /**
   * Gets basic properties of a pool.
   * @param poolId The ID of the pool to get.
   * @param [options] The optional parameters
   * @returns Promise<Models.PoolExistsResponse>
   */
  exists(poolId: string, options?: Models.PoolExistsOptionalParams): Promise<Models.PoolExistsResponse>;
  /**
   * @param poolId The ID of the pool to get.
   * @param callback The callback
   */
  exists(poolId: string, callback: msRest.ServiceCallback<boolean>): void;
  /**
   * @param poolId The ID of the pool to get.
   * @param options The optional parameters
   * @param callback The callback
   */
  exists(poolId: string, options: Models.PoolExistsOptionalParams, callback: msRest.ServiceCallback<boolean>): void;
  exists(poolId: string, options?: Models.PoolExistsOptionalParams | msRest.ServiceCallback<boolean>, callback?: msRest.ServiceCallback<boolean>): Promise<Models.PoolExistsResponse> {
    return this.client.sendOperationRequest(
      {
        poolId,
        options
      },
      existsOperationSpec,
      callback) as Promise<Models.PoolExistsResponse>;
  }

  /**
   * Gets information about the specified pool.
   * @param poolId The ID of the pool to get.
   * @param [options] The optional parameters
   * @returns Promise<Models.PoolGetResponse>
   */
  get(poolId: string, options?: Models.PoolGetOptionalParams): Promise<Models.PoolGetResponse>;
  /**
   * @param poolId The ID of the pool to get.
   * @param callback The callback
   */
  get(poolId: string, callback: msRest.ServiceCallback<Models.CloudPool>): void;
  /**
   * @param poolId The ID of the pool to get.
   * @param options The optional parameters
   * @param callback The callback
   */
  get(poolId: string, options: Models.PoolGetOptionalParams, callback: msRest.ServiceCallback<Models.CloudPool>): void;
  get(poolId: string, options?: Models.PoolGetOptionalParams | msRest.ServiceCallback<Models.CloudPool>, callback?: msRest.ServiceCallback<Models.CloudPool>): Promise<Models.PoolGetResponse> {
    return this.client.sendOperationRequest(
      {
        poolId,
        options
      },
      getOperationSpec,
      callback) as Promise<Models.PoolGetResponse>;
  }

  /**
   * This only replaces the pool properties specified in the request. For example, if the pool has a
   * start task associated with it, and a request does not specify a start task element, then the
   * pool keeps the existing start task.
   * @summary Updates the properties of the specified pool.
   * @param poolId The ID of the pool to update.
   * @param poolPatchParameter The parameters for the request.
   * @param [options] The optional parameters
   * @returns Promise<Models.PoolPatchResponse>
   */
  patch(poolId: string, poolPatchParameter: Models.PoolPatchParameter, options?: Models.PoolPatchOptionalParams): Promise<Models.PoolPatchResponse>;
  /**
   * @param poolId The ID of the pool to update.
   * @param poolPatchParameter The parameters for the request.
   * @param callback The callback
   */
  patch(poolId: string, poolPatchParameter: Models.PoolPatchParameter, callback: msRest.ServiceCallback<void>): void;
  /**
   * @param poolId The ID of the pool to update.
   * @param poolPatchParameter The parameters for the request.
   * @param options The optional parameters
   * @param callback The callback
   */
  patch(poolId: string, poolPatchParameter: Models.PoolPatchParameter, options: Models.PoolPatchOptionalParams, callback: msRest.ServiceCallback<void>): void;
  patch(poolId: string, poolPatchParameter: Models.PoolPatchParameter, options?: Models.PoolPatchOptionalParams | msRest.ServiceCallback<void>, callback?: msRest.ServiceCallback<void>): Promise<Models.PoolPatchResponse> {
    return this.client.sendOperationRequest(
      {
        poolId,
        poolPatchParameter,
        options
      },
      patchOperationSpec,
      callback) as Promise<Models.PoolPatchResponse>;
  }

  /**
   * @summary Disables automatic scaling for a pool.
   * @param poolId The ID of the pool on which to disable automatic scaling.
   * @param [options] The optional parameters
   * @returns Promise<Models.PoolDisableAutoScaleResponse>
   */
  disableAutoScale(poolId: string, options?: Models.PoolDisableAutoScaleOptionalParams): Promise<Models.PoolDisableAutoScaleResponse>;
  /**
   * @param poolId The ID of the pool on which to disable automatic scaling.
   * @param callback The callback
   */
  disableAutoScale(poolId: string, callback: msRest.ServiceCallback<void>): void;
  /**
   * @param poolId The ID of the pool on which to disable automatic scaling.
   * @param options The optional parameters
   * @param callback The callback
   */
  disableAutoScale(poolId: string, options: Models.PoolDisableAutoScaleOptionalParams, callback: msRest.ServiceCallback<void>): void;
  disableAutoScale(poolId: string, options?: Models.PoolDisableAutoScaleOptionalParams | msRest.ServiceCallback<void>, callback?: msRest.ServiceCallback<void>): Promise<Models.PoolDisableAutoScaleResponse> {
    return this.client.sendOperationRequest(
      {
        poolId,
        options
      },
      disableAutoScaleOperationSpec,
      callback) as Promise<Models.PoolDisableAutoScaleResponse>;
  }

  /**
   * You cannot enable automatic scaling on a pool if a resize operation is in progress on the pool.
   * If automatic scaling of the pool is currently disabled, you must specify a valid autoscale
   * formula as part of the request. If automatic scaling of the pool is already enabled, you may
   * specify a new autoscale formula and/or a new evaluation interval. You cannot call this API for
   * the same pool more than once every 30 seconds.
   * @summary Enables automatic scaling for a pool.
   * @param poolId The ID of the pool on which to enable automatic scaling.
   * @param poolEnableAutoScaleParameter The parameters for the request.
   * @param [options] The optional parameters
   * @returns Promise<Models.PoolEnableAutoScaleResponse>
   */
  enableAutoScale(poolId: string, poolEnableAutoScaleParameter: Models.PoolEnableAutoScaleParameter, options?: Models.PoolEnableAutoScaleOptionalParams): Promise<Models.PoolEnableAutoScaleResponse>;
  /**
   * @param poolId The ID of the pool on which to enable automatic scaling.
   * @param poolEnableAutoScaleParameter The parameters for the request.
   * @param callback The callback
   */
  enableAutoScale(poolId: string, poolEnableAutoScaleParameter: Models.PoolEnableAutoScaleParameter, callback: msRest.ServiceCallback<void>): void;
  /**
   * @param poolId The ID of the pool on which to enable automatic scaling.
   * @param poolEnableAutoScaleParameter The parameters for the request.
   * @param options The optional parameters
   * @param callback The callback
   */
  enableAutoScale(poolId: string, poolEnableAutoScaleParameter: Models.PoolEnableAutoScaleParameter, options: Models.PoolEnableAutoScaleOptionalParams, callback: msRest.ServiceCallback<void>): void;
  enableAutoScale(poolId: string, poolEnableAutoScaleParameter: Models.PoolEnableAutoScaleParameter, options?: Models.PoolEnableAutoScaleOptionalParams | msRest.ServiceCallback<void>, callback?: msRest.ServiceCallback<void>): Promise<Models.PoolEnableAutoScaleResponse> {
    return this.client.sendOperationRequest(
      {
        poolId,
        poolEnableAutoScaleParameter,
        options
      },
      enableAutoScaleOperationSpec,
      callback) as Promise<Models.PoolEnableAutoScaleResponse>;
  }

  /**
   * This API is primarily for validating an autoscale formula, as it simply returns the result
   * without applying the formula to the pool. The pool must have auto scaling enabled in order to
   * evaluate a formula.
   * @summary Gets the result of evaluating an automatic scaling formula on the pool.
   * @param poolId The ID of the pool on which to evaluate the automatic scaling formula.
   * @param autoScaleFormula The formula for the desired number of compute nodes in the pool. The
   * formula is validated and its results calculated, but it is not applied to the pool. To apply the
   * formula to the pool, 'Enable automatic scaling on a pool'. For more information about specifying
   * this formula, see Automatically scale compute nodes in an Azure Batch pool
   * (https://azure.microsoft.com/en-us/documentation/articles/batch-automatic-scaling).
   * @param [options] The optional parameters
   * @returns Promise<Models.PoolEvaluateAutoScaleResponse>
   */
  evaluateAutoScale(poolId: string, autoScaleFormula: string, options?: Models.PoolEvaluateAutoScaleOptionalParams): Promise<Models.PoolEvaluateAutoScaleResponse>;
  /**
   * @param poolId The ID of the pool on which to evaluate the automatic scaling formula.
   * @param autoScaleFormula The formula for the desired number of compute nodes in the pool. The
   * formula is validated and its results calculated, but it is not applied to the pool. To apply the
   * formula to the pool, 'Enable automatic scaling on a pool'. For more information about specifying
   * this formula, see Automatically scale compute nodes in an Azure Batch pool
   * (https://azure.microsoft.com/en-us/documentation/articles/batch-automatic-scaling).
   * @param callback The callback
   */
  evaluateAutoScale(poolId: string, autoScaleFormula: string, callback: msRest.ServiceCallback<Models.AutoScaleRun>): void;
  /**
   * @param poolId The ID of the pool on which to evaluate the automatic scaling formula.
   * @param autoScaleFormula The formula for the desired number of compute nodes in the pool. The
   * formula is validated and its results calculated, but it is not applied to the pool. To apply the
   * formula to the pool, 'Enable automatic scaling on a pool'. For more information about specifying
   * this formula, see Automatically scale compute nodes in an Azure Batch pool
   * (https://azure.microsoft.com/en-us/documentation/articles/batch-automatic-scaling).
   * @param options The optional parameters
   * @param callback The callback
   */
  evaluateAutoScale(poolId: string, autoScaleFormula: string, options: Models.PoolEvaluateAutoScaleOptionalParams, callback: msRest.ServiceCallback<Models.AutoScaleRun>): void;
  evaluateAutoScale(poolId: string, autoScaleFormula: string, options?: Models.PoolEvaluateAutoScaleOptionalParams | msRest.ServiceCallback<Models.AutoScaleRun>, callback?: msRest.ServiceCallback<Models.AutoScaleRun>): Promise<Models.PoolEvaluateAutoScaleResponse> {
    return this.client.sendOperationRequest(
      {
        poolId,
        autoScaleFormula,
        options
      },
      evaluateAutoScaleOperationSpec,
      callback) as Promise<Models.PoolEvaluateAutoScaleResponse>;
  }

  /**
   * You can only resize a pool when its allocation state is steady. If the pool is already resizing,
   * the request fails with status code 409. When you resize a pool, the pool's allocation state
   * changes from steady to resizing. You cannot resize pools which are configured for automatic
   * scaling. If you try to do this, the Batch service returns an error 409. If you resize a pool
   * downwards, the Batch service chooses which nodes to remove. To remove specific nodes, use the
   * pool remove nodes API instead.
   * @summary Changes the number of compute nodes that are assigned to a pool.
   * @param poolId The ID of the pool to resize.
   * @param poolResizeParameter The parameters for the request.
   * @param [options] The optional parameters
   * @returns Promise<Models.PoolResizeResponse>
   */
  resize(poolId: string, poolResizeParameter: Models.PoolResizeParameter, options?: Models.PoolResizeOptionalParams): Promise<Models.PoolResizeResponse>;
  /**
   * @param poolId The ID of the pool to resize.
   * @param poolResizeParameter The parameters for the request.
   * @param callback The callback
   */
  resize(poolId: string, poolResizeParameter: Models.PoolResizeParameter, callback: msRest.ServiceCallback<void>): void;
  /**
   * @param poolId The ID of the pool to resize.
   * @param poolResizeParameter The parameters for the request.
   * @param options The optional parameters
   * @param callback The callback
   */
  resize(poolId: string, poolResizeParameter: Models.PoolResizeParameter, options: Models.PoolResizeOptionalParams, callback: msRest.ServiceCallback<void>): void;
  resize(poolId: string, poolResizeParameter: Models.PoolResizeParameter, options?: Models.PoolResizeOptionalParams | msRest.ServiceCallback<void>, callback?: msRest.ServiceCallback<void>): Promise<Models.PoolResizeResponse> {
    return this.client.sendOperationRequest(
      {
        poolId,
        poolResizeParameter,
        options
      },
      resizeOperationSpec,
      callback) as Promise<Models.PoolResizeResponse>;
  }

  /**
   * This does not restore the pool to its previous state before the resize operation: it only stops
   * any further changes being made, and the pool maintains its current state. After stopping, the
   * pool stabilizes at the number of nodes it was at when the stop operation was done. During the
   * stop operation, the pool allocation state changes first to stopping and then to steady. A resize
   * operation need not be an explicit resize pool request; this API can also be used to halt the
   * initial sizing of the pool when it is created.
   * @summary Stops an ongoing resize operation on the pool.
   * @param poolId The ID of the pool whose resizing you want to stop.
   * @param [options] The optional parameters
   * @returns Promise<Models.PoolStopResizeResponse>
   */
  stopResize(poolId: string, options?: Models.PoolStopResizeOptionalParams): Promise<Models.PoolStopResizeResponse>;
  /**
   * @param poolId The ID of the pool whose resizing you want to stop.
   * @param callback The callback
   */
  stopResize(poolId: string, callback: msRest.ServiceCallback<void>): void;
  /**
   * @param poolId The ID of the pool whose resizing you want to stop.
   * @param options The optional parameters
   * @param callback The callback
   */
  stopResize(poolId: string, options: Models.PoolStopResizeOptionalParams, callback: msRest.ServiceCallback<void>): void;
  stopResize(poolId: string, options?: Models.PoolStopResizeOptionalParams | msRest.ServiceCallback<void>, callback?: msRest.ServiceCallback<void>): Promise<Models.PoolStopResizeResponse> {
    return this.client.sendOperationRequest(
      {
        poolId,
        options
      },
      stopResizeOperationSpec,
      callback) as Promise<Models.PoolStopResizeResponse>;
  }

  /**
   * This fully replaces all the updateable properties of the pool. For example, if the pool has a
   * start task associated with it and if start task is not specified with this request, then the
   * Batch service will remove the existing start task.
   * @summary Updates the properties of the specified pool.
   * @param poolId The ID of the pool to update.
   * @param poolUpdatePropertiesParameter The parameters for the request.
   * @param [options] The optional parameters
   * @returns Promise<Models.PoolUpdatePropertiesResponse>
   */
  updateProperties(poolId: string, poolUpdatePropertiesParameter: Models.PoolUpdatePropertiesParameter, options?: Models.PoolUpdatePropertiesOptionalParams): Promise<Models.PoolUpdatePropertiesResponse>;
  /**
   * @param poolId The ID of the pool to update.
   * @param poolUpdatePropertiesParameter The parameters for the request.
   * @param callback The callback
   */
  updateProperties(poolId: string, poolUpdatePropertiesParameter: Models.PoolUpdatePropertiesParameter, callback: msRest.ServiceCallback<void>): void;
  /**
   * @param poolId The ID of the pool to update.
   * @param poolUpdatePropertiesParameter The parameters for the request.
   * @param options The optional parameters
   * @param callback The callback
   */
  updateProperties(poolId: string, poolUpdatePropertiesParameter: Models.PoolUpdatePropertiesParameter, options: Models.PoolUpdatePropertiesOptionalParams, callback: msRest.ServiceCallback<void>): void;
  updateProperties(poolId: string, poolUpdatePropertiesParameter: Models.PoolUpdatePropertiesParameter, options?: Models.PoolUpdatePropertiesOptionalParams | msRest.ServiceCallback<void>, callback?: msRest.ServiceCallback<void>): Promise<Models.PoolUpdatePropertiesResponse> {
    return this.client.sendOperationRequest(
      {
        poolId,
        poolUpdatePropertiesParameter,
        options
      },
      updatePropertiesOperationSpec,
      callback) as Promise<Models.PoolUpdatePropertiesResponse>;
  }

  /**
   * During an upgrade, the Batch service upgrades each compute node in the pool. When a compute node
   * is chosen for upgrade, any tasks running on that node are removed from the node and returned to
   * the queue to be rerun later (or on a different compute node). The node will be unavailable until
   * the upgrade is complete. This operation results in temporarily reduced pool capacity as nodes
   * are taken out of service to be upgraded. Although the Batch service tries to avoid upgrading all
   * compute nodes at the same time, it does not guarantee to do this (particularly on small pools);
   * therefore, the pool may be temporarily unavailable to run tasks. When this operation runs, the
   * pool state changes to upgrading. When all compute nodes have finished upgrading, the pool state
   * returns to active. While the upgrade is in progress, the pool's currentOSVersion reflects the OS
   * version that nodes are upgrading from, and targetOSVersion reflects the OS version that nodes
   * are upgrading to. Once the upgrade is complete, currentOSVersion is updated to reflect the OS
   * version now running on all nodes. This operation can only be invoked on pools created with the
   * cloudServiceConfiguration property.
   * @summary Upgrades the operating system of the specified pool.
   * @param poolId The ID of the pool to upgrade.
   * @param targetOSVersion The Azure Guest OS version to be installed on the virtual machines in the
   * pool.
   * @param [options] The optional parameters
   * @returns Promise<Models.PoolUpgradeOSResponse>
   */
  upgradeOS(poolId: string, targetOSVersion: string, options?: Models.PoolUpgradeOSOptionalParams): Promise<Models.PoolUpgradeOSResponse>;
  /**
   * @param poolId The ID of the pool to upgrade.
   * @param targetOSVersion The Azure Guest OS version to be installed on the virtual machines in the
   * pool.
   * @param callback The callback
   */
  upgradeOS(poolId: string, targetOSVersion: string, callback: msRest.ServiceCallback<void>): void;
  /**
   * @param poolId The ID of the pool to upgrade.
   * @param targetOSVersion The Azure Guest OS version to be installed on the virtual machines in the
   * pool.
   * @param options The optional parameters
   * @param callback The callback
   */
  upgradeOS(poolId: string, targetOSVersion: string, options: Models.PoolUpgradeOSOptionalParams, callback: msRest.ServiceCallback<void>): void;
  upgradeOS(poolId: string, targetOSVersion: string, options?: Models.PoolUpgradeOSOptionalParams | msRest.ServiceCallback<void>, callback?: msRest.ServiceCallback<void>): Promise<Models.PoolUpgradeOSResponse> {
    return this.client.sendOperationRequest(
      {
        poolId,
        targetOSVersion,
        options
      },
      upgradeOSOperationSpec,
      callback) as Promise<Models.PoolUpgradeOSResponse>;
  }

  /**
   * This operation can only run when the allocation state of the pool is steady. When this operation
   * runs, the allocation state changes from steady to resizing.
   * @summary Removes compute nodes from the specified pool.
   * @param poolId The ID of the pool from which you want to remove nodes.
   * @param nodeRemoveParameter The parameters for the request.
   * @param [options] The optional parameters
   * @returns Promise<Models.PoolRemoveNodesResponse>
   */
  removeNodes(poolId: string, nodeRemoveParameter: Models.NodeRemoveParameter, options?: Models.PoolRemoveNodesOptionalParams): Promise<Models.PoolRemoveNodesResponse>;
  /**
   * @param poolId The ID of the pool from which you want to remove nodes.
   * @param nodeRemoveParameter The parameters for the request.
   * @param callback The callback
   */
  removeNodes(poolId: string, nodeRemoveParameter: Models.NodeRemoveParameter, callback: msRest.ServiceCallback<void>): void;
  /**
   * @param poolId The ID of the pool from which you want to remove nodes.
   * @param nodeRemoveParameter The parameters for the request.
   * @param options The optional parameters
   * @param callback The callback
   */
  removeNodes(poolId: string, nodeRemoveParameter: Models.NodeRemoveParameter, options: Models.PoolRemoveNodesOptionalParams, callback: msRest.ServiceCallback<void>): void;
  removeNodes(poolId: string, nodeRemoveParameter: Models.NodeRemoveParameter, options?: Models.PoolRemoveNodesOptionalParams | msRest.ServiceCallback<void>, callback?: msRest.ServiceCallback<void>): Promise<Models.PoolRemoveNodesResponse> {
    return this.client.sendOperationRequest(
      {
        poolId,
        nodeRemoveParameter,
        options
      },
      removeNodesOperationSpec,
      callback) as Promise<Models.PoolRemoveNodesResponse>;
  }

  /**
   * If you do not specify a $filter clause including a poolId, the response includes all pools that
   * existed in the account in the time range of the returned aggregation intervals. If you do not
   * specify a $filter clause including a startTime or endTime these filters default to the start and
   * end times of the last aggregation interval currently available; that is, only the last
   * aggregation interval is returned.
   * @summary Lists the usage metrics, aggregated by pool across individual time intervals, for the
   * specified account.
   * @param nextPageLink The NextLink from the previous successful call to List operation.
   * @param [options] The optional parameters
   * @returns Promise<Models.PoolListUsageMetricsResponse>
   */
  listUsageMetricsNext(nextPageLink: string, options?: Models.PoolListUsageMetricsNextOptionalParams): Promise<Models.PoolListUsageMetricsResponse>;
  /**
   * @param nextPageLink The NextLink from the previous successful call to List operation.
   * @param callback The callback
   */
  listUsageMetricsNext(nextPageLink: string, callback: msRest.ServiceCallback<Models.PoolListUsageMetricsResult>): void;
  /**
   * @param nextPageLink The NextLink from the previous successful call to List operation.
   * @param options The optional parameters
   * @param callback The callback
   */
  listUsageMetricsNext(nextPageLink: string, options: Models.PoolListUsageMetricsNextOptionalParams, callback: msRest.ServiceCallback<Models.PoolListUsageMetricsResult>): void;
  listUsageMetricsNext(nextPageLink: string, options?: Models.PoolListUsageMetricsNextOptionalParams | msRest.ServiceCallback<Models.PoolListUsageMetricsResult>, callback?: msRest.ServiceCallback<Models.PoolListUsageMetricsResult>): Promise<Models.PoolListUsageMetricsResponse> {
    return this.client.sendOperationRequest(
      {
        nextPageLink,
        options
      },
      listUsageMetricsNextOperationSpec,
      callback) as Promise<Models.PoolListUsageMetricsResponse>;
  }

  /**
   * @summary Lists all of the pools in the specified account.
   * @param nextPageLink The NextLink from the previous successful call to List operation.
   * @param [options] The optional parameters
   * @returns Promise<Models.PoolListResponse>
   */
  listNext(nextPageLink: string, options?: Models.PoolListNextOptionalParams): Promise<Models.PoolListResponse>;
  /**
   * @param nextPageLink The NextLink from the previous successful call to List operation.
   * @param callback The callback
   */
  listNext(nextPageLink: string, callback: msRest.ServiceCallback<Models.CloudPoolListResult>): void;
  /**
   * @param nextPageLink The NextLink from the previous successful call to List operation.
   * @param options The optional parameters
   * @param callback The callback
   */
  listNext(nextPageLink: string, options: Models.PoolListNextOptionalParams, callback: msRest.ServiceCallback<Models.CloudPoolListResult>): void;
  listNext(nextPageLink: string, options?: Models.PoolListNextOptionalParams | msRest.ServiceCallback<Models.CloudPoolListResult>, callback?: msRest.ServiceCallback<Models.CloudPoolListResult>): Promise<Models.PoolListResponse> {
    return this.client.sendOperationRequest(
      {
        nextPageLink,
        options
      },
      listNextOperationSpec,
      callback) as Promise<Models.PoolListResponse>;
  }
}

// Operation Specifications
const serializer = new msRest.Serializer(Mappers);
const listUsageMetricsOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "poolusagemetrics",
  queryParameters: [
    Parameters.apiVersion,
    Parameters.startTime,
    Parameters.endTime,
    Parameters.filter0,
    Parameters.maxResults1,
    Parameters.timeout2
  ],
  headerParameters: [
    Parameters.acceptLanguage,
    Parameters.clientRequestId3,
    Parameters.returnClientRequestId3,
    Parameters.ocpDate3
  ],
  responses: {
    200: {
      bodyMapper: Mappers.PoolListUsageMetricsResult,
      headersMapper: Mappers.PoolListUsageMetricsHeaders
    },
    default: {
      bodyMapper: Mappers.BatchError
    }
  },
  serializer
};

const getAllLifetimeStatisticsOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "lifetimepoolstats",
  queryParameters: [
    Parameters.apiVersion,
    Parameters.timeout3
  ],
  headerParameters: [
    Parameters.acceptLanguage,
    Parameters.clientRequestId4,
    Parameters.returnClientRequestId4,
    Parameters.ocpDate4
  ],
  responses: {
    200: {
      bodyMapper: Mappers.PoolStatistics,
      headersMapper: Mappers.PoolGetAllLifetimeStatisticsHeaders
    },
    default: {
      bodyMapper: Mappers.BatchError
    }
  },
  serializer
};

const addOperationSpec: msRest.OperationSpec = {
  httpMethod: "POST",
  path: "pools",
  queryParameters: [
    Parameters.apiVersion,
    Parameters.timeout4
  ],
  headerParameters: [
    Parameters.acceptLanguage,
    Parameters.clientRequestId5,
    Parameters.returnClientRequestId5,
    Parameters.ocpDate5
  ],
  requestBody: {
    parameterPath: "pool",
    mapper: {
      ...Mappers.PoolAddParameter,
      required: true
    }
  },
  contentType: "application/json; odata=minimalmetadata; charset=utf-8",
  responses: {
    201: {
      headersMapper: Mappers.PoolAddHeaders
    },
    default: {
      bodyMapper: Mappers.BatchError
    }
  },
  serializer
};

const listOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "pools",
  queryParameters: [
    Parameters.apiVersion,
    Parameters.filter1,
    Parameters.select0,
    Parameters.expand0,
    Parameters.maxResults2,
    Parameters.timeout5
  ],
  headerParameters: [
    Parameters.acceptLanguage,
    Parameters.clientRequestId6,
    Parameters.returnClientRequestId6,
    Parameters.ocpDate6
  ],
  responses: {
    200: {
      bodyMapper: Mappers.CloudPoolListResult,
      headersMapper: Mappers.PoolListHeaders
    },
    default: {
      bodyMapper: Mappers.BatchError
    }
  },
  serializer
};

const deleteMethodOperationSpec: msRest.OperationSpec = {
  httpMethod: "DELETE",
  path: "pools/{poolId}",
  urlParameters: [
    Parameters.poolId
  ],
  queryParameters: [
    Parameters.apiVersion,
    Parameters.timeout6
  ],
  headerParameters: [
    Parameters.acceptLanguage,
    Parameters.clientRequestId7,
    Parameters.returnClientRequestId7,
    Parameters.ocpDate7,
    Parameters.ifMatch0,
    Parameters.ifNoneMatch0,
    Parameters.ifModifiedSince0,
    Parameters.ifUnmodifiedSince0
  ],
  responses: {
    202: {
      headersMapper: Mappers.PoolDeleteHeaders
    },
    default: {
      bodyMapper: Mappers.BatchError
    }
  },
  serializer
};

const existsOperationSpec: msRest.OperationSpec = {
  httpMethod: "HEAD",
  path: "pools/{poolId}",
  urlParameters: [
    Parameters.poolId
  ],
  queryParameters: [
    Parameters.apiVersion,
    Parameters.timeout7
  ],
  headerParameters: [
    Parameters.acceptLanguage,
    Parameters.clientRequestId8,
    Parameters.returnClientRequestId8,
    Parameters.ocpDate8,
    Parameters.ifMatch1,
    Parameters.ifNoneMatch1,
    Parameters.ifModifiedSince1,
    Parameters.ifUnmodifiedSince1
  ],
  responses: {
    200: {
      headersMapper: Mappers.PoolExistsHeaders
    },
    404: {
      headersMapper: Mappers.PoolExistsHeaders
    },
    default: {
      bodyMapper: Mappers.BatchError
    }
  },
  serializer
};

const getOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "pools/{poolId}",
  urlParameters: [
    Parameters.poolId
  ],
  queryParameters: [
    Parameters.apiVersion,
    Parameters.select1,
    Parameters.expand1,
    Parameters.timeout8
  ],
  headerParameters: [
    Parameters.acceptLanguage,
    Parameters.clientRequestId9,
    Parameters.returnClientRequestId9,
    Parameters.ocpDate9,
    Parameters.ifMatch2,
    Parameters.ifNoneMatch2,
    Parameters.ifModifiedSince2,
    Parameters.ifUnmodifiedSince2
  ],
  responses: {
    200: {
      bodyMapper: Mappers.CloudPool,
      headersMapper: Mappers.PoolGetHeaders
    },
    default: {
      bodyMapper: Mappers.BatchError
    }
  },
  serializer
};

const patchOperationSpec: msRest.OperationSpec = {
  httpMethod: "PATCH",
  path: "pools/{poolId}",
  urlParameters: [
    Parameters.poolId
  ],
  queryParameters: [
    Parameters.apiVersion,
    Parameters.timeout9
  ],
  headerParameters: [
    Parameters.acceptLanguage,
    Parameters.clientRequestId10,
    Parameters.returnClientRequestId10,
    Parameters.ocpDate10,
    Parameters.ifMatch3,
    Parameters.ifNoneMatch3,
    Parameters.ifModifiedSince3,
    Parameters.ifUnmodifiedSince3
  ],
  requestBody: {
    parameterPath: "poolPatchParameter",
    mapper: {
      ...Mappers.PoolPatchParameter,
      required: true
    }
  },
  contentType: "application/json; odata=minimalmetadata; charset=utf-8",
  responses: {
    200: {
      headersMapper: Mappers.PoolPatchHeaders
    },
    default: {
      bodyMapper: Mappers.BatchError
    }
  },
  serializer
};

const disableAutoScaleOperationSpec: msRest.OperationSpec = {
  httpMethod: "POST",
  path: "pools/{poolId}/disableautoscale",
  urlParameters: [
    Parameters.poolId
  ],
  queryParameters: [
    Parameters.apiVersion,
    Parameters.timeout10
  ],
  headerParameters: [
    Parameters.acceptLanguage,
    Parameters.clientRequestId11,
    Parameters.returnClientRequestId11,
    Parameters.ocpDate11
  ],
  responses: {
    200: {
      headersMapper: Mappers.PoolDisableAutoScaleHeaders
    },
    default: {
      bodyMapper: Mappers.BatchError
    }
  },
  serializer
};

const enableAutoScaleOperationSpec: msRest.OperationSpec = {
  httpMethod: "POST",
  path: "pools/{poolId}/enableautoscale",
  urlParameters: [
    Parameters.poolId
  ],
  queryParameters: [
    Parameters.apiVersion,
    Parameters.timeout11
  ],
  headerParameters: [
    Parameters.acceptLanguage,
    Parameters.clientRequestId12,
    Parameters.returnClientRequestId12,
    Parameters.ocpDate12,
    Parameters.ifMatch4,
    Parameters.ifNoneMatch4,
    Parameters.ifModifiedSince4,
    Parameters.ifUnmodifiedSince4
  ],
  requestBody: {
    parameterPath: "poolEnableAutoScaleParameter",
    mapper: {
      ...Mappers.PoolEnableAutoScaleParameter,
      required: true
    }
  },
  contentType: "application/json; odata=minimalmetadata; charset=utf-8",
  responses: {
    200: {
      headersMapper: Mappers.PoolEnableAutoScaleHeaders
    },
    default: {
      bodyMapper: Mappers.BatchError
    }
  },
  serializer
};

const evaluateAutoScaleOperationSpec: msRest.OperationSpec = {
  httpMethod: "POST",
  path: "pools/{poolId}/evaluateautoscale",
  urlParameters: [
    Parameters.poolId
  ],
  queryParameters: [
    Parameters.apiVersion,
    Parameters.timeout12
  ],
  headerParameters: [
    Parameters.acceptLanguage,
    Parameters.clientRequestId13,
    Parameters.returnClientRequestId13,
    Parameters.ocpDate13
  ],
  requestBody: {
    parameterPath: {
      autoScaleFormula: "autoScaleFormula"
    },
    mapper: {
      ...Mappers.PoolEvaluateAutoScaleParameter,
      required: true
    }
  },
  contentType: "application/json; odata=minimalmetadata; charset=utf-8",
  responses: {
    200: {
      bodyMapper: Mappers.AutoScaleRun,
      headersMapper: Mappers.PoolEvaluateAutoScaleHeaders
    },
    default: {
      bodyMapper: Mappers.BatchError
    }
  },
  serializer
};

const resizeOperationSpec: msRest.OperationSpec = {
  httpMethod: "POST",
  path: "pools/{poolId}/resize",
  urlParameters: [
    Parameters.poolId
  ],
  queryParameters: [
    Parameters.apiVersion,
    Parameters.timeout13
  ],
  headerParameters: [
    Parameters.acceptLanguage,
    Parameters.clientRequestId14,
    Parameters.returnClientRequestId14,
    Parameters.ocpDate14,
    Parameters.ifMatch5,
    Parameters.ifNoneMatch5,
    Parameters.ifModifiedSince5,
    Parameters.ifUnmodifiedSince5
  ],
  requestBody: {
    parameterPath: "poolResizeParameter",
    mapper: {
      ...Mappers.PoolResizeParameter,
      required: true
    }
  },
  contentType: "application/json; odata=minimalmetadata; charset=utf-8",
  responses: {
    202: {
      headersMapper: Mappers.PoolResizeHeaders
    },
    default: {
      bodyMapper: Mappers.BatchError
    }
  },
  serializer
};

const stopResizeOperationSpec: msRest.OperationSpec = {
  httpMethod: "POST",
  path: "pools/{poolId}/stopresize",
  urlParameters: [
    Parameters.poolId
  ],
  queryParameters: [
    Parameters.apiVersion,
    Parameters.timeout14
  ],
  headerParameters: [
    Parameters.acceptLanguage,
    Parameters.clientRequestId15,
    Parameters.returnClientRequestId15,
    Parameters.ocpDate15,
    Parameters.ifMatch6,
    Parameters.ifNoneMatch6,
    Parameters.ifModifiedSince6,
    Parameters.ifUnmodifiedSince6
  ],
  responses: {
    202: {
      headersMapper: Mappers.PoolStopResizeHeaders
    },
    default: {
      bodyMapper: Mappers.BatchError
    }
  },
  serializer
};

const updatePropertiesOperationSpec: msRest.OperationSpec = {
  httpMethod: "POST",
  path: "pools/{poolId}/updateproperties",
  urlParameters: [
    Parameters.poolId
  ],
  queryParameters: [
    Parameters.apiVersion,
    Parameters.timeout15
  ],
  headerParameters: [
    Parameters.acceptLanguage,
    Parameters.clientRequestId16,
    Parameters.returnClientRequestId16,
    Parameters.ocpDate16
  ],
  requestBody: {
    parameterPath: "poolUpdatePropertiesParameter",
    mapper: {
      ...Mappers.PoolUpdatePropertiesParameter,
      required: true
    }
  },
  contentType: "application/json; odata=minimalmetadata; charset=utf-8",
  responses: {
    204: {
      headersMapper: Mappers.PoolUpdatePropertiesHeaders
    },
    default: {
      bodyMapper: Mappers.BatchError
    }
  },
  serializer
};

const upgradeOSOperationSpec: msRest.OperationSpec = {
  httpMethod: "POST",
  path: "pools/{poolId}/upgradeos",
  urlParameters: [
    Parameters.poolId
  ],
  queryParameters: [
    Parameters.apiVersion,
    Parameters.timeout16
  ],
  headerParameters: [
    Parameters.acceptLanguage,
    Parameters.clientRequestId17,
    Parameters.returnClientRequestId17,
    Parameters.ocpDate17,
    Parameters.ifMatch7,
    Parameters.ifNoneMatch7,
    Parameters.ifModifiedSince7,
    Parameters.ifUnmodifiedSince7
  ],
  requestBody: {
    parameterPath: {
      targetOSVersion: "targetOSVersion"
    },
    mapper: {
      ...Mappers.PoolUpgradeOSParameter,
      required: true
    }
  },
  contentType: "application/json; odata=minimalmetadata; charset=utf-8",
  responses: {
    202: {
      headersMapper: Mappers.PoolUpgradeOSHeaders
    },
    default: {
      bodyMapper: Mappers.BatchError
    }
  },
  serializer
};

const removeNodesOperationSpec: msRest.OperationSpec = {
  httpMethod: "POST",
  path: "pools/{poolId}/removenodes",
  urlParameters: [
    Parameters.poolId
  ],
  queryParameters: [
    Parameters.apiVersion,
    Parameters.timeout17
  ],
  headerParameters: [
    Parameters.acceptLanguage,
    Parameters.clientRequestId18,
    Parameters.returnClientRequestId18,
    Parameters.ocpDate18,
    Parameters.ifMatch8,
    Parameters.ifNoneMatch8,
    Parameters.ifModifiedSince8,
    Parameters.ifUnmodifiedSince8
  ],
  requestBody: {
    parameterPath: "nodeRemoveParameter",
    mapper: {
      ...Mappers.NodeRemoveParameter,
      required: true
    }
  },
  contentType: "application/json; odata=minimalmetadata; charset=utf-8",
  responses: {
    202: {
      headersMapper: Mappers.PoolRemoveNodesHeaders
    },
    default: {
      bodyMapper: Mappers.BatchError
    }
  },
  serializer
};

const listUsageMetricsNextOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  baseUrl: "https://batch.core.windows.net",
  path: "{nextLink}",
  urlParameters: [
    Parameters.nextPageLink
  ],
  headerParameters: [
    Parameters.acceptLanguage,
    Parameters.clientRequestId19,
    Parameters.returnClientRequestId19,
    Parameters.ocpDate19
  ],
  responses: {
    200: {
      bodyMapper: Mappers.PoolListUsageMetricsResult,
      headersMapper: Mappers.PoolListUsageMetricsHeaders
    },
    default: {
      bodyMapper: Mappers.BatchError
    }
  },
  serializer
};

const listNextOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  baseUrl: "https://batch.core.windows.net",
  path: "{nextLink}",
  urlParameters: [
    Parameters.nextPageLink
  ],
  headerParameters: [
    Parameters.acceptLanguage,
    Parameters.clientRequestId20,
    Parameters.returnClientRequestId20,
    Parameters.ocpDate20
  ],
  responses: {
    200: {
      bodyMapper: Mappers.CloudPoolListResult,
      headersMapper: Mappers.PoolListHeaders
    },
    default: {
      bodyMapper: Mappers.BatchError
    }
  },
  serializer
};
