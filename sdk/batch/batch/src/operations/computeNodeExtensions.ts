/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is
 * regenerated.
 */

import * as msRest from "@azure/ms-rest-js";
import * as Models from "../models";
import * as Mappers from "../models/computeNodeExtensionsMappers";
import * as Parameters from "../models/parameters";
import { BatchServiceContext } from "../batchServiceContext";

/** Class representing a ComputeNodeExtensions. */
export class ComputeNodeExtensions {
  private readonly client: BatchServiceContext;

  /**
   * Create a ComputeNodeExtensions.
   * @param {BatchServiceContext} client Reference to the service client.
   */
  constructor(client: BatchServiceContext) {
    this.client = client;
  }

  /**
   * @summary Lists the Compute Nodes Extensions in the specified Pool.
   * @param poolId The ID of the Pool that contains Compute Node.
   * @param nodeId The ID of the Compute Node that you want to list extensions.
   * @param [options] The optional parameters
   * @returns Promise<Models.ComputeNodeExtensionsListResponse>
   */
  list(poolId: string, nodeId: string, options?: Models.ComputeNodeExtensionsListOptionalParams): Promise<Models.ComputeNodeExtensionsListResponse>;
  /**
   * @param poolId The ID of the Pool that contains Compute Node.
   * @param nodeId The ID of the Compute Node that you want to list extensions.
   * @param callback The callback
   */
  list(poolId: string, nodeId: string, callback: msRest.ServiceCallback<Models.NodeVMExtensionList>): void;
  /**
   * @param poolId The ID of the Pool that contains Compute Node.
   * @param nodeId The ID of the Compute Node that you want to list extensions.
   * @param options The optional parameters
   * @param callback The callback
   */
  list(poolId: string, nodeId: string, options: Models.ComputeNodeExtensionsListOptionalParams, callback: msRest.ServiceCallback<Models.NodeVMExtensionList>): void;
  list(poolId: string, nodeId: string, options?: Models.ComputeNodeExtensionsListOptionalParams | msRest.ServiceCallback<Models.NodeVMExtensionList>, callback?: msRest.ServiceCallback<Models.NodeVMExtensionList>): Promise<Models.ComputeNodeExtensionsListResponse> {
    return this.client.sendOperationRequest(
      {
        poolId,
        nodeId,
        options
      },
      listOperationSpec,
      callback) as Promise<Models.ComputeNodeExtensionsListResponse>;
  }

  /**
   * @summary Lists the Compute Nodes Extensions in the specified Pool.
   * @param nextPageLink The NextLink from the previous successful call to List operation.
   * @param [options] The optional parameters
   * @returns Promise<Models.ComputeNodeExtensionsListResponse>
   */
  listNext(nextPageLink: string, options?: Models.ComputeNodeExtensionsListNextOptionalParams): Promise<Models.ComputeNodeExtensionsListResponse>;
  /**
   * @param nextPageLink The NextLink from the previous successful call to List operation.
   * @param callback The callback
   */
  listNext(nextPageLink: string, callback: msRest.ServiceCallback<Models.NodeVMExtensionList>): void;
  /**
   * @param nextPageLink The NextLink from the previous successful call to List operation.
   * @param options The optional parameters
   * @param callback The callback
   */
  listNext(nextPageLink: string, options: Models.ComputeNodeExtensionsListNextOptionalParams, callback: msRest.ServiceCallback<Models.NodeVMExtensionList>): void;
  listNext(nextPageLink: string, options?: Models.ComputeNodeExtensionsListNextOptionalParams | msRest.ServiceCallback<Models.NodeVMExtensionList>, callback?: msRest.ServiceCallback<Models.NodeVMExtensionList>): Promise<Models.ComputeNodeExtensionsListResponse> {
    return this.client.sendOperationRequest(
      {
        nextPageLink,
        options
      },
      listNextOperationSpec,
      callback) as Promise<Models.ComputeNodeExtensionsListResponse>;
  }
}

// Operation Specifications
const serializer = new msRest.Serializer(Mappers);
const listOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "pools/{poolId}/nodes/{nodeId}/extensions",
  urlParameters: [
    Parameters.batchUrl,
    Parameters.poolId,
    Parameters.nodeId
  ],
  queryParameters: [
    Parameters.apiVersion,
    Parameters.select16,
    Parameters.maxResults14,
    Parameters.timeout77
  ],
  headerParameters: [
    Parameters.acceptLanguage,
    Parameters.clientRequestId91,
    Parameters.returnClientRequestId91,
    Parameters.ocpDate91
  ],
  responses: {
    200: {
      bodyMapper: Mappers.NodeVMExtensionList,
      headersMapper: Mappers.ComputeNodeExtensionsListHeaders
    },
    default: {
      bodyMapper: Mappers.BatchError,
      headersMapper: Mappers.ComputeNodeExtensionsListHeaders
    }
  },
  serializer
};

const listNextOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  baseUrl: "{batchUrl}",
  path: "{nextLink}",
  urlParameters: [
    Parameters.nextPageLink
  ],
  queryParameters: [
    Parameters.apiVersion
  ],
  headerParameters: [
    Parameters.acceptLanguage,
    Parameters.clientRequestId92,
    Parameters.returnClientRequestId92,
    Parameters.ocpDate92
  ],
  responses: {
    200: {
      bodyMapper: Mappers.NodeVMExtensionList,
      headersMapper: Mappers.ComputeNodeExtensionsListHeaders
    },
    default: {
      bodyMapper: Mappers.BatchError,
      headersMapper: Mappers.ComputeNodeExtensionsListHeaders
    }
  },
  serializer
};
