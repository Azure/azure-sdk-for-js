/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */

import {
  env,
  record,
  RecorderEnvironmentSetup,
  Recorder,
  delay,
  isPlaybackMode
} from "@azure-tools/test-recorder";
import * as assert from "assert";
import { ClientSecretCredential } from "@azure/identity";
import { DataLakeAnalyticsAccountManagementClient } from "../src/dataLakeAnalyticsAccountManagementClient";

const recorderEnvSetup: RecorderEnvironmentSetup = {
  replaceableVariables: {
    AZURE_CLIENT_ID: "azure_client_id",
    AZURE_CLIENT_SECRET: "azure_client_secret",
    AZURE_TENANT_ID: "88888888-8888-8888-8888-888888888888",
    SUBSCRIPTION_ID: "azure_subscription_id"
  },
  customizationsOnRecordings: [
    (recording: any): any =>
      recording.replace(
        /"access_token":"[^"]*"/g,
        `"access_token":"access_token"`
      )
  ],
  queryParametersToSkip: []
};

export const testPollingOptions = {
  updateIntervalInMs: isPlaybackMode() ? 0 : undefined,
};

describe("DatalakeAnalytics test", () => {
  let recorder: Recorder;
  let subscriptionId: string;
  let client: DataLakeAnalyticsAccountManagementClient;
  let location: string;
  let resourceGroup: string;
  let accountName: string;

  beforeEach(async function() {
    recorder = record(this, recorderEnvSetup);
    subscriptionId = env.SUBSCRIPTION_ID;
    // This is an example of how the environment variables are used
    const credential = new ClientSecretCredential(
      env.AZURE_TENANT_ID,
      env.AZURE_CLIENT_ID,
      env.AZURE_CLIENT_SECRET
    );
    client = new DataLakeAnalyticsAccountManagementClient(credential, subscriptionId);
    location = "eastus2";
    resourceGroup = "myjstest";
    accountName = "myaccountxxx";
  });

  afterEach(async function() {
    await recorder.stop();
  });

  it("accounts create test", async function() {
    const res = await client.accounts.beginCreateAndWait(resourceGroup,accountName,{
      location: location,
        tags: {
            key1: "value1"
        },
        defaultDataLakeStoreAccount: "mygen1",
        dataLakeStoreAccounts: [
            {
                name: "mygen1"
            }
        ],
        firewallState: "Enabled",
        firewallAllowAzureIps: "Enabled",
        newTier: "Consumption",
        maxJobCount: 3,
        maxDegreeOfParallelism: 30,
        maxDegreeOfParallelismPerJob:1,
        minPriorityPerJob: 1,
        queryStoreRetention: 30
    },testPollingOptions);
    console.log(res);
  });

  it("accounts get test", async function() {
    const res = await client.accounts.get(resourceGroup,accountName);
    console.log(res);
  });

  it("accounts delete test", async function() {
    const res = await client.accounts.beginDeleteAndWait(resourceGroup,accountName,testPollingOptions);
    console.log(res);
  });
});
