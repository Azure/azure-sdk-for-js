/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */

import {
  OperationParameter,
  OperationURLParameter,
  OperationQueryParameter
} from "@azure/core-client";
import {
  CreateDataLakeAnalyticsAccountParameters as CreateDataLakeAnalyticsAccountParametersMapper,
  UpdateDataLakeAnalyticsAccountParameters as UpdateDataLakeAnalyticsAccountParametersMapper,
  CheckNameAvailabilityParameters as CheckNameAvailabilityParametersMapper,
  AddDataLakeStoreParameters as AddDataLakeStoreParametersMapper,
  AddStorageAccountParameters as AddStorageAccountParametersMapper,
  UpdateStorageAccountParameters as UpdateStorageAccountParametersMapper,
  CreateOrUpdateComputePolicyParameters as CreateOrUpdateComputePolicyParametersMapper,
  UpdateComputePolicyParameters as UpdateComputePolicyParametersMapper,
  CreateOrUpdateFirewallRuleParameters as CreateOrUpdateFirewallRuleParametersMapper,
  UpdateFirewallRuleParameters as UpdateFirewallRuleParametersMapper
} from "../models/mappers";

export const accept: OperationParameter = {
  parameterPath: "accept",
  mapper: {
    defaultValue: "application/json",
    isConstant: true,
    serializedName: "Accept",
    type: {
      name: "String"
    }
  }
};

export const $host: OperationURLParameter = {
  parameterPath: "$host",
  mapper: {
    serializedName: "$host",
    required: true,
    type: {
      name: "String"
    }
  },
  skipEncoding: true
};

export const subscriptionId: OperationURLParameter = {
  parameterPath: "subscriptionId",
  mapper: {
    serializedName: "subscriptionId",
    required: true,
    type: {
      name: "String"
    }
  }
};

export const filter: OperationQueryParameter = {
  parameterPath: ["options", "filter"],
  mapper: {
    serializedName: "$filter",
    type: {
      name: "String"
    }
  }
};

export const top: OperationQueryParameter = {
  parameterPath: ["options", "top"],
  mapper: {
    constraints: {
      InclusiveMinimum: 1
    },
    serializedName: "$top",
    type: {
      name: "Number"
    }
  }
};

export const skip: OperationQueryParameter = {
  parameterPath: ["options", "skip"],
  mapper: {
    constraints: {
      InclusiveMinimum: 1
    },
    serializedName: "$skip",
    type: {
      name: "Number"
    }
  }
};

export const select: OperationQueryParameter = {
  parameterPath: ["options", "select"],
  mapper: {
    serializedName: "$select",
    type: {
      name: "String"
    }
  }
};

export const orderby: OperationQueryParameter = {
  parameterPath: ["options", "orderby"],
  mapper: {
    serializedName: "$orderby",
    type: {
      name: "String"
    }
  }
};

export const count: OperationQueryParameter = {
  parameterPath: ["options", "count"],
  mapper: {
    serializedName: "$count",
    type: {
      name: "Boolean"
    }
  }
};

export const apiVersion: OperationQueryParameter = {
  parameterPath: "apiVersion",
  mapper: {
    defaultValue: "2019-11-01-preview",
    isConstant: true,
    serializedName: "api-version",
    type: {
      name: "String"
    }
  }
};

export const resourceGroupName: OperationURLParameter = {
  parameterPath: "resourceGroupName",
  mapper: {
    serializedName: "resourceGroupName",
    required: true,
    type: {
      name: "String"
    }
  }
};

export const contentType: OperationParameter = {
  parameterPath: ["options", "contentType"],
  mapper: {
    defaultValue: "application/json",
    isConstant: true,
    serializedName: "Content-Type",
    type: {
      name: "String"
    }
  }
};

export const parameters: OperationParameter = {
  parameterPath: "parameters",
  mapper: CreateDataLakeAnalyticsAccountParametersMapper
};

export const accountName: OperationURLParameter = {
  parameterPath: "accountName",
  mapper: {
    serializedName: "accountName",
    required: true,
    type: {
      name: "String"
    }
  }
};

export const parameters1: OperationParameter = {
  parameterPath: ["options", "parameters"],
  mapper: UpdateDataLakeAnalyticsAccountParametersMapper
};

export const parameters2: OperationParameter = {
  parameterPath: "parameters",
  mapper: CheckNameAvailabilityParametersMapper
};

export const location: OperationURLParameter = {
  parameterPath: "location",
  mapper: {
    serializedName: "location",
    required: true,
    type: {
      name: "String"
    }
  }
};

export const nextLink: OperationURLParameter = {
  parameterPath: "nextLink",
  mapper: {
    serializedName: "nextLink",
    required: true,
    type: {
      name: "String"
    }
  },
  skipEncoding: true
};

export const parameters3: OperationParameter = {
  parameterPath: ["options", "parameters"],
  mapper: AddDataLakeStoreParametersMapper
};

export const dataLakeStoreAccountName: OperationURLParameter = {
  parameterPath: "dataLakeStoreAccountName",
  mapper: {
    serializedName: "dataLakeStoreAccountName",
    required: true,
    type: {
      name: "String"
    }
  }
};

export const parameters4: OperationParameter = {
  parameterPath: "parameters",
  mapper: AddStorageAccountParametersMapper
};

export const storageAccountName: OperationURLParameter = {
  parameterPath: "storageAccountName",
  mapper: {
    serializedName: "storageAccountName",
    required: true,
    type: {
      name: "String"
    }
  }
};

export const parameters5: OperationParameter = {
  parameterPath: ["options", "parameters"],
  mapper: UpdateStorageAccountParametersMapper
};

export const containerName: OperationURLParameter = {
  parameterPath: "containerName",
  mapper: {
    serializedName: "containerName",
    required: true,
    type: {
      name: "String"
    }
  }
};

export const parameters6: OperationParameter = {
  parameterPath: "parameters",
  mapper: CreateOrUpdateComputePolicyParametersMapper
};

export const computePolicyName: OperationURLParameter = {
  parameterPath: "computePolicyName",
  mapper: {
    serializedName: "computePolicyName",
    required: true,
    type: {
      name: "String"
    }
  }
};

export const parameters7: OperationParameter = {
  parameterPath: ["options", "parameters"],
  mapper: UpdateComputePolicyParametersMapper
};

export const parameters8: OperationParameter = {
  parameterPath: "parameters",
  mapper: CreateOrUpdateFirewallRuleParametersMapper
};

export const firewallRuleName: OperationURLParameter = {
  parameterPath: "firewallRuleName",
  mapper: {
    serializedName: "firewallRuleName",
    required: true,
    type: {
      name: "String"
    }
  }
};

export const parameters9: OperationParameter = {
  parameterPath: ["options", "parameters"],
  mapper: UpdateFirewallRuleParametersMapper
};
