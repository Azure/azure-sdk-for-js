/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */

import * as coreClient from "@azure/core-client";

export const DataLakeAnalyticsAccountListResult: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "DataLakeAnalyticsAccountListResult",
    modelProperties: {
      value: {
        serializedName: "value",
        readOnly: true,
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "DataLakeAnalyticsAccountBasic"
            }
          }
        }
      },
      count: {
        serializedName: "count",
        readOnly: true,
        type: {
          name: "Number"
        }
      },
      nextLink: {
        serializedName: "nextLink",
        readOnly: true,
        type: {
          name: "String"
        }
      }
    }
  }
};

export const DataLakeAnalyticsAccountPropertiesBasic: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "DataLakeAnalyticsAccountPropertiesBasic",
    modelProperties: {
      accountId: {
        serializedName: "accountId",
        readOnly: true,
        type: {
          name: "Uuid"
        }
      },
      provisioningState: {
        serializedName: "provisioningState",
        readOnly: true,
        type: {
          name: "Enum",
          allowedValues: [
            "Failed",
            "Creating",
            "Running",
            "Succeeded",
            "Patching",
            "Suspending",
            "Resuming",
            "Deleting",
            "Deleted",
            "Undeleting",
            "Canceled"
          ]
        }
      },
      state: {
        serializedName: "state",
        readOnly: true,
        type: {
          name: "Enum",
          allowedValues: ["Active", "Suspended"]
        }
      },
      creationTime: {
        serializedName: "creationTime",
        readOnly: true,
        type: {
          name: "DateTime"
        }
      },
      lastModifiedTime: {
        serializedName: "lastModifiedTime",
        readOnly: true,
        type: {
          name: "DateTime"
        }
      },
      endpoint: {
        serializedName: "endpoint",
        readOnly: true,
        type: {
          name: "String"
        }
      }
    }
  }
};

export const Resource: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "Resource",
    modelProperties: {
      id: {
        serializedName: "id",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      name: {
        serializedName: "name",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      type: {
        serializedName: "type",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      location: {
        serializedName: "location",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      tags: {
        serializedName: "tags",
        readOnly: true,
        type: {
          name: "Dictionary",
          value: { type: { name: "String" } }
        }
      }
    }
  }
};

export const ErrorResponse: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "ErrorResponse",
    modelProperties: {
      error: {
        serializedName: "error",
        type: {
          name: "Composite",
          className: "ErrorDetail"
        }
      }
    }
  }
};

export const ErrorDetail: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "ErrorDetail",
    modelProperties: {
      code: {
        serializedName: "code",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      message: {
        serializedName: "message",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      target: {
        serializedName: "target",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      details: {
        serializedName: "details",
        readOnly: true,
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "ErrorDetail"
            }
          }
        }
      },
      additionalInfo: {
        serializedName: "additionalInfo",
        readOnly: true,
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "ErrorAdditionalInfo"
            }
          }
        }
      }
    }
  }
};

export const ErrorAdditionalInfo: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "ErrorAdditionalInfo",
    modelProperties: {
      type: {
        serializedName: "type",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      info: {
        serializedName: "info",
        readOnly: true,
        type: {
          name: "Dictionary",
          value: { type: { name: "any" } }
        }
      }
    }
  }
};

export const CreateDataLakeAnalyticsAccountParameters: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "CreateDataLakeAnalyticsAccountParameters",
    modelProperties: {
      location: {
        serializedName: "location",
        required: true,
        type: {
          name: "String"
        }
      },
      tags: {
        serializedName: "tags",
        type: {
          name: "Dictionary",
          value: { type: { name: "String" } }
        }
      },
      defaultDataLakeStoreAccount: {
        serializedName: "properties.defaultDataLakeStoreAccount",
        required: true,
        type: {
          name: "String"
        }
      },
      dataLakeStoreAccounts: {
        serializedName: "properties.dataLakeStoreAccounts",
        required: true,
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "AddDataLakeStoreWithAccountParameters"
            }
          }
        }
      },
      storageAccounts: {
        serializedName: "properties.storageAccounts",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "AddStorageAccountWithAccountParameters"
            }
          }
        }
      },
      computePolicies: {
        serializedName: "properties.computePolicies",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "CreateComputePolicyWithAccountParameters"
            }
          }
        }
      },
      firewallRules: {
        serializedName: "properties.firewallRules",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "CreateFirewallRuleWithAccountParameters"
            }
          }
        }
      },
      firewallState: {
        serializedName: "properties.firewallState",
        type: {
          name: "Enum",
          allowedValues: ["Enabled", "Disabled"]
        }
      },
      firewallAllowAzureIps: {
        serializedName: "properties.firewallAllowAzureIps",
        type: {
          name: "Enum",
          allowedValues: ["Enabled", "Disabled"]
        }
      },
      newTier: {
        serializedName: "properties.newTier",
        type: {
          name: "Enum",
          allowedValues: [
            "Consumption",
            "Commitment_100AUHours",
            "Commitment_500AUHours",
            "Commitment_1000AUHours",
            "Commitment_5000AUHours",
            "Commitment_10000AUHours",
            "Commitment_50000AUHours",
            "Commitment_100000AUHours",
            "Commitment_500000AUHours"
          ]
        }
      },
      maxJobCount: {
        defaultValue: 3,
        constraints: {
          InclusiveMinimum: 1
        },
        serializedName: "properties.maxJobCount",
        type: {
          name: "Number"
        }
      },
      maxDegreeOfParallelism: {
        defaultValue: 30,
        constraints: {
          InclusiveMinimum: 1
        },
        serializedName: "properties.maxDegreeOfParallelism",
        type: {
          name: "Number"
        }
      },
      maxDegreeOfParallelismPerJob: {
        defaultValue: 32,
        constraints: {
          InclusiveMinimum: 1
        },
        serializedName: "properties.maxDegreeOfParallelismPerJob",
        type: {
          name: "Number"
        }
      },
      minPriorityPerJob: {
        constraints: {
          InclusiveMinimum: 1
        },
        serializedName: "properties.minPriorityPerJob",
        type: {
          name: "Number"
        }
      },
      queryStoreRetention: {
        defaultValue: 30,
        constraints: {
          InclusiveMaximum: 180,
          InclusiveMinimum: 1
        },
        serializedName: "properties.queryStoreRetention",
        type: {
          name: "Number"
        }
      }
    }
  }
};

export const AddDataLakeStoreWithAccountParameters: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "AddDataLakeStoreWithAccountParameters",
    modelProperties: {
      name: {
        serializedName: "name",
        required: true,
        type: {
          name: "String"
        }
      },
      suffix: {
        serializedName: "properties.suffix",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const AddStorageAccountWithAccountParameters: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "AddStorageAccountWithAccountParameters",
    modelProperties: {
      name: {
        serializedName: "name",
        required: true,
        type: {
          name: "String"
        }
      },
      accessKey: {
        serializedName: "properties.accessKey",
        required: true,
        type: {
          name: "String"
        }
      },
      suffix: {
        defaultValue: "azuredatalakestore.net",
        serializedName: "properties.suffix",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const CreateComputePolicyWithAccountParameters: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "CreateComputePolicyWithAccountParameters",
    modelProperties: {
      name: {
        serializedName: "name",
        required: true,
        type: {
          name: "String"
        }
      },
      objectId: {
        serializedName: "properties.objectId",
        required: true,
        type: {
          name: "Uuid"
        }
      },
      objectType: {
        serializedName: "properties.objectType",
        required: true,
        type: {
          name: "String"
        }
      },
      maxDegreeOfParallelismPerJob: {
        constraints: {
          InclusiveMinimum: 1
        },
        serializedName: "properties.maxDegreeOfParallelismPerJob",
        type: {
          name: "Number"
        }
      },
      minPriorityPerJob: {
        constraints: {
          InclusiveMinimum: 1
        },
        serializedName: "properties.minPriorityPerJob",
        type: {
          name: "Number"
        }
      }
    }
  }
};

export const CreateFirewallRuleWithAccountParameters: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "CreateFirewallRuleWithAccountParameters",
    modelProperties: {
      name: {
        serializedName: "name",
        required: true,
        type: {
          name: "String"
        }
      },
      startIpAddress: {
        serializedName: "properties.startIpAddress",
        required: true,
        type: {
          name: "String"
        }
      },
      endIpAddress: {
        serializedName: "properties.endIpAddress",
        required: true,
        type: {
          name: "String"
        }
      }
    }
  }
};

export const SubResource: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "SubResource",
    modelProperties: {
      id: {
        serializedName: "id",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      name: {
        serializedName: "name",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      type: {
        serializedName: "type",
        readOnly: true,
        type: {
          name: "String"
        }
      }
    }
  }
};

export const UpdateDataLakeAnalyticsAccountParameters: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "UpdateDataLakeAnalyticsAccountParameters",
    modelProperties: {
      tags: {
        serializedName: "tags",
        type: {
          name: "Dictionary",
          value: { type: { name: "String" } }
        }
      },
      dataLakeStoreAccounts: {
        serializedName: "properties.dataLakeStoreAccounts",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "UpdateDataLakeStoreWithAccountParameters"
            }
          }
        }
      },
      storageAccounts: {
        serializedName: "properties.storageAccounts",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "UpdateStorageAccountWithAccountParameters"
            }
          }
        }
      },
      computePolicies: {
        serializedName: "properties.computePolicies",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "UpdateComputePolicyWithAccountParameters"
            }
          }
        }
      },
      firewallRules: {
        serializedName: "properties.firewallRules",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "UpdateFirewallRuleWithAccountParameters"
            }
          }
        }
      },
      firewallState: {
        serializedName: "properties.firewallState",
        type: {
          name: "Enum",
          allowedValues: ["Enabled", "Disabled"]
        }
      },
      firewallAllowAzureIps: {
        serializedName: "properties.firewallAllowAzureIps",
        type: {
          name: "Enum",
          allowedValues: ["Enabled", "Disabled"]
        }
      },
      newTier: {
        serializedName: "properties.newTier",
        type: {
          name: "Enum",
          allowedValues: [
            "Consumption",
            "Commitment_100AUHours",
            "Commitment_500AUHours",
            "Commitment_1000AUHours",
            "Commitment_5000AUHours",
            "Commitment_10000AUHours",
            "Commitment_50000AUHours",
            "Commitment_100000AUHours",
            "Commitment_500000AUHours"
          ]
        }
      },
      maxJobCount: {
        constraints: {
          InclusiveMinimum: 1
        },
        serializedName: "properties.maxJobCount",
        type: {
          name: "Number"
        }
      },
      maxDegreeOfParallelism: {
        constraints: {
          InclusiveMinimum: 1
        },
        serializedName: "properties.maxDegreeOfParallelism",
        type: {
          name: "Number"
        }
      },
      maxDegreeOfParallelismPerJob: {
        constraints: {
          InclusiveMinimum: 1
        },
        serializedName: "properties.maxDegreeOfParallelismPerJob",
        type: {
          name: "Number"
        }
      },
      minPriorityPerJob: {
        constraints: {
          InclusiveMinimum: 1
        },
        serializedName: "properties.minPriorityPerJob",
        type: {
          name: "Number"
        }
      },
      queryStoreRetention: {
        constraints: {
          InclusiveMaximum: 180,
          InclusiveMinimum: 1
        },
        serializedName: "properties.queryStoreRetention",
        type: {
          name: "Number"
        }
      }
    }
  }
};

export const UpdateDataLakeStoreWithAccountParameters: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "UpdateDataLakeStoreWithAccountParameters",
    modelProperties: {
      name: {
        serializedName: "name",
        required: true,
        type: {
          name: "String"
        }
      },
      suffix: {
        serializedName: "properties.suffix",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const UpdateStorageAccountWithAccountParameters: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "UpdateStorageAccountWithAccountParameters",
    modelProperties: {
      name: {
        serializedName: "name",
        required: true,
        type: {
          name: "String"
        }
      },
      accessKey: {
        serializedName: "properties.accessKey",
        type: {
          name: "String"
        }
      },
      suffix: {
        serializedName: "properties.suffix",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const UpdateComputePolicyWithAccountParameters: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "UpdateComputePolicyWithAccountParameters",
    modelProperties: {
      name: {
        serializedName: "name",
        required: true,
        type: {
          name: "String"
        }
      },
      objectId: {
        serializedName: "properties.objectId",
        type: {
          name: "Uuid"
        }
      },
      objectType: {
        serializedName: "properties.objectType",
        type: {
          name: "String"
        }
      },
      maxDegreeOfParallelismPerJob: {
        constraints: {
          InclusiveMinimum: 1
        },
        serializedName: "properties.maxDegreeOfParallelismPerJob",
        type: {
          name: "Number"
        }
      },
      minPriorityPerJob: {
        constraints: {
          InclusiveMinimum: 1
        },
        serializedName: "properties.minPriorityPerJob",
        type: {
          name: "Number"
        }
      }
    }
  }
};

export const UpdateFirewallRuleWithAccountParameters: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "UpdateFirewallRuleWithAccountParameters",
    modelProperties: {
      name: {
        serializedName: "name",
        required: true,
        type: {
          name: "String"
        }
      },
      startIpAddress: {
        serializedName: "properties.startIpAddress",
        type: {
          name: "String"
        }
      },
      endIpAddress: {
        serializedName: "properties.endIpAddress",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const DataLakeStoreAccountInformationListResult: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "DataLakeStoreAccountInformationListResult",
    modelProperties: {
      value: {
        serializedName: "value",
        readOnly: true,
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "DataLakeStoreAccountInformation"
            }
          }
        }
      },
      nextLink: {
        serializedName: "nextLink",
        readOnly: true,
        type: {
          name: "String"
        }
      }
    }
  }
};

export const AddDataLakeStoreParameters: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "AddDataLakeStoreParameters",
    modelProperties: {
      suffix: {
        serializedName: "properties.suffix",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const StorageAccountInformationListResult: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "StorageAccountInformationListResult",
    modelProperties: {
      value: {
        serializedName: "value",
        readOnly: true,
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "StorageAccountInformation"
            }
          }
        }
      },
      nextLink: {
        serializedName: "nextLink",
        readOnly: true,
        type: {
          name: "String"
        }
      }
    }
  }
};

export const AddStorageAccountParameters: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "AddStorageAccountParameters",
    modelProperties: {
      accessKey: {
        serializedName: "properties.accessKey",
        required: true,
        type: {
          name: "String"
        }
      },
      suffix: {
        defaultValue: "azuredatalakestore.net",
        serializedName: "properties.suffix",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const UpdateStorageAccountParameters: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "UpdateStorageAccountParameters",
    modelProperties: {
      accessKey: {
        serializedName: "properties.accessKey",
        type: {
          name: "String"
        }
      },
      suffix: {
        serializedName: "properties.suffix",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const StorageContainerListResult: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "StorageContainerListResult",
    modelProperties: {
      value: {
        serializedName: "value",
        readOnly: true,
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "StorageContainer"
            }
          }
        }
      },
      nextLink: {
        serializedName: "nextLink",
        readOnly: true,
        type: {
          name: "String"
        }
      }
    }
  }
};

export const SasTokenInformationListResult: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "SasTokenInformationListResult",
    modelProperties: {
      value: {
        serializedName: "value",
        readOnly: true,
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "SasTokenInformation"
            }
          }
        }
      },
      nextLink: {
        serializedName: "nextLink",
        readOnly: true,
        type: {
          name: "String"
        }
      }
    }
  }
};

export const SasTokenInformation: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "SasTokenInformation",
    modelProperties: {
      accessToken: {
        serializedName: "accessToken",
        readOnly: true,
        type: {
          name: "String"
        }
      }
    }
  }
};

export const ComputePolicyListResult: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "ComputePolicyListResult",
    modelProperties: {
      value: {
        serializedName: "value",
        readOnly: true,
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "ComputePolicy"
            }
          }
        }
      },
      nextLink: {
        serializedName: "nextLink",
        readOnly: true,
        type: {
          name: "String"
        }
      }
    }
  }
};

export const CreateOrUpdateComputePolicyParameters: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "CreateOrUpdateComputePolicyParameters",
    modelProperties: {
      objectId: {
        serializedName: "properties.objectId",
        required: true,
        type: {
          name: "Uuid"
        }
      },
      objectType: {
        serializedName: "properties.objectType",
        required: true,
        type: {
          name: "String"
        }
      },
      maxDegreeOfParallelismPerJob: {
        constraints: {
          InclusiveMinimum: 1
        },
        serializedName: "properties.maxDegreeOfParallelismPerJob",
        type: {
          name: "Number"
        }
      },
      minPriorityPerJob: {
        constraints: {
          InclusiveMinimum: 1
        },
        serializedName: "properties.minPriorityPerJob",
        type: {
          name: "Number"
        }
      }
    }
  }
};

export const UpdateComputePolicyParameters: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "UpdateComputePolicyParameters",
    modelProperties: {
      objectId: {
        serializedName: "properties.objectId",
        type: {
          name: "Uuid"
        }
      },
      objectType: {
        serializedName: "properties.objectType",
        type: {
          name: "String"
        }
      },
      maxDegreeOfParallelismPerJob: {
        constraints: {
          InclusiveMinimum: 1
        },
        serializedName: "properties.maxDegreeOfParallelismPerJob",
        type: {
          name: "Number"
        }
      },
      minPriorityPerJob: {
        constraints: {
          InclusiveMinimum: 1
        },
        serializedName: "properties.minPriorityPerJob",
        type: {
          name: "Number"
        }
      }
    }
  }
};

export const FirewallRuleListResult: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "FirewallRuleListResult",
    modelProperties: {
      value: {
        serializedName: "value",
        readOnly: true,
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "FirewallRule"
            }
          }
        }
      },
      nextLink: {
        serializedName: "nextLink",
        readOnly: true,
        type: {
          name: "String"
        }
      }
    }
  }
};

export const CreateOrUpdateFirewallRuleParameters: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "CreateOrUpdateFirewallRuleParameters",
    modelProperties: {
      startIpAddress: {
        serializedName: "properties.startIpAddress",
        required: true,
        type: {
          name: "String"
        }
      },
      endIpAddress: {
        serializedName: "properties.endIpAddress",
        required: true,
        type: {
          name: "String"
        }
      }
    }
  }
};

export const UpdateFirewallRuleParameters: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "UpdateFirewallRuleParameters",
    modelProperties: {
      startIpAddress: {
        serializedName: "properties.startIpAddress",
        type: {
          name: "String"
        }
      },
      endIpAddress: {
        serializedName: "properties.endIpAddress",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const OperationListResult: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "OperationListResult",
    modelProperties: {
      value: {
        serializedName: "value",
        readOnly: true,
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "Operation"
            }
          }
        }
      },
      nextLink: {
        serializedName: "nextLink",
        readOnly: true,
        type: {
          name: "String"
        }
      }
    }
  }
};

export const Operation: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "Operation",
    modelProperties: {
      name: {
        serializedName: "name",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      display: {
        serializedName: "display",
        type: {
          name: "Composite",
          className: "OperationDisplay"
        }
      },
      properties: {
        serializedName: "properties",
        type: {
          name: "Composite",
          className: "OperationMetaPropertyInfo"
        }
      },
      origin: {
        serializedName: "origin",
        readOnly: true,
        type: {
          name: "String"
        }
      }
    }
  }
};

export const OperationDisplay: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "OperationDisplay",
    modelProperties: {
      provider: {
        serializedName: "provider",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      resource: {
        serializedName: "resource",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      operation: {
        serializedName: "operation",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      description: {
        serializedName: "description",
        readOnly: true,
        type: {
          name: "String"
        }
      }
    }
  }
};

export const OperationMetaPropertyInfo: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "OperationMetaPropertyInfo",
    modelProperties: {
      serviceSpecification: {
        serializedName: "serviceSpecification",
        type: {
          name: "Composite",
          className: "OperationMetaServiceSpecification"
        }
      }
    }
  }
};

export const OperationMetaServiceSpecification: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "OperationMetaServiceSpecification",
    modelProperties: {
      metricSpecifications: {
        serializedName: "metricSpecifications",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "OperationMetaMetricSpecification"
            }
          }
        }
      },
      logSpecifications: {
        serializedName: "logSpecifications",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "OperationMetaLogSpecification"
            }
          }
        }
      }
    }
  }
};

export const OperationMetaMetricSpecification: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "OperationMetaMetricSpecification",
    modelProperties: {
      name: {
        serializedName: "name",
        type: {
          name: "String"
        }
      },
      displayDescription: {
        serializedName: "displayDescription",
        type: {
          name: "String"
        }
      },
      displayName: {
        serializedName: "displayName",
        type: {
          name: "String"
        }
      },
      unit: {
        serializedName: "unit",
        type: {
          name: "String"
        }
      },
      aggregationType: {
        serializedName: "aggregationType",
        type: {
          name: "String"
        }
      },
      availabilities: {
        serializedName: "availabilities",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "OperationMetaMetricAvailabilitiesSpecification"
            }
          }
        }
      }
    }
  }
};

export const OperationMetaMetricAvailabilitiesSpecification: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "OperationMetaMetricAvailabilitiesSpecification",
    modelProperties: {
      timeGrain: {
        serializedName: "timeGrain",
        type: {
          name: "String"
        }
      },
      blobDuration: {
        serializedName: "blobDuration",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const OperationMetaLogSpecification: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "OperationMetaLogSpecification",
    modelProperties: {
      name: {
        serializedName: "name",
        type: {
          name: "String"
        }
      },
      displayName: {
        serializedName: "displayName",
        type: {
          name: "String"
        }
      },
      blobDuration: {
        serializedName: "blobDuration",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const CapabilityInformation: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "CapabilityInformation",
    modelProperties: {
      subscriptionId: {
        serializedName: "subscriptionId",
        readOnly: true,
        type: {
          name: "Uuid"
        }
      },
      state: {
        serializedName: "state",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      maxAccountCount: {
        serializedName: "maxAccountCount",
        readOnly: true,
        type: {
          name: "Number"
        }
      },
      accountCount: {
        serializedName: "accountCount",
        readOnly: true,
        type: {
          name: "Number"
        }
      },
      migrationState: {
        serializedName: "migrationState",
        readOnly: true,
        type: {
          name: "Boolean"
        }
      }
    }
  }
};

export const CheckNameAvailabilityParameters: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "CheckNameAvailabilityParameters",
    modelProperties: {
      name: {
        serializedName: "name",
        required: true,
        type: {
          name: "String"
        }
      },
      type: {
        defaultValue: "Microsoft.DataLakeAnalytics/accounts",
        isConstant: true,
        serializedName: "type",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const NameAvailabilityInformation: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "NameAvailabilityInformation",
    modelProperties: {
      nameAvailable: {
        serializedName: "nameAvailable",
        readOnly: true,
        type: {
          name: "Boolean"
        }
      },
      reason: {
        serializedName: "reason",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      message: {
        serializedName: "message",
        readOnly: true,
        type: {
          name: "String"
        }
      }
    }
  }
};

export const VirtualNetworkRuleListResult: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "VirtualNetworkRuleListResult",
    modelProperties: {
      value: {
        serializedName: "value",
        readOnly: true,
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "VirtualNetworkRule"
            }
          }
        }
      },
      nextLink: {
        serializedName: "nextLink",
        readOnly: true,
        type: {
          name: "String"
        }
      }
    }
  }
};

export const HiveMetastoreListResult: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "HiveMetastoreListResult",
    modelProperties: {
      value: {
        serializedName: "value",
        readOnly: true,
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "HiveMetastore"
            }
          }
        }
      },
      nextLink: {
        serializedName: "nextLink",
        readOnly: true,
        type: {
          name: "String"
        }
      }
    }
  }
};

export const DataLakeAnalyticsAccountProperties: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "DataLakeAnalyticsAccountProperties",
    modelProperties: {
      ...DataLakeAnalyticsAccountPropertiesBasic.type.modelProperties,
      defaultDataLakeStoreAccountType: {
        serializedName: "defaultDataLakeStoreAccountType",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      defaultDataLakeStoreAccount: {
        serializedName: "defaultDataLakeStoreAccount",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      dataLakeStoreAccounts: {
        serializedName: "dataLakeStoreAccounts",
        readOnly: true,
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "DataLakeStoreAccountInformation"
            }
          }
        }
      },
      publicDataLakeStoreAccounts: {
        serializedName: "publicDataLakeStoreAccounts",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "DataLakeStoreAccountInformation"
            }
          }
        }
      },
      storageAccounts: {
        serializedName: "storageAccounts",
        readOnly: true,
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "StorageAccountInformation"
            }
          }
        }
      },
      computePolicies: {
        serializedName: "computePolicies",
        readOnly: true,
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "ComputePolicy"
            }
          }
        }
      },
      hiveMetastores: {
        serializedName: "hiveMetastores",
        readOnly: true,
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "HiveMetastore"
            }
          }
        }
      },
      virtualNetworkRules: {
        serializedName: "virtualNetworkRules",
        readOnly: true,
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "VirtualNetworkRule"
            }
          }
        }
      },
      firewallRules: {
        serializedName: "firewallRules",
        readOnly: true,
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "FirewallRule"
            }
          }
        }
      },
      firewallState: {
        serializedName: "firewallState",
        type: {
          name: "Enum",
          allowedValues: ["Enabled", "Disabled"]
        }
      },
      firewallAllowAzureIps: {
        serializedName: "firewallAllowAzureIps",
        type: {
          name: "Enum",
          allowedValues: ["Enabled", "Disabled"]
        }
      },
      newTier: {
        serializedName: "newTier",
        type: {
          name: "Enum",
          allowedValues: [
            "Consumption",
            "Commitment_100AUHours",
            "Commitment_500AUHours",
            "Commitment_1000AUHours",
            "Commitment_5000AUHours",
            "Commitment_10000AUHours",
            "Commitment_50000AUHours",
            "Commitment_100000AUHours",
            "Commitment_500000AUHours"
          ]
        }
      },
      currentTier: {
        serializedName: "currentTier",
        readOnly: true,
        type: {
          name: "Enum",
          allowedValues: [
            "Consumption",
            "Commitment_100AUHours",
            "Commitment_500AUHours",
            "Commitment_1000AUHours",
            "Commitment_5000AUHours",
            "Commitment_10000AUHours",
            "Commitment_50000AUHours",
            "Commitment_100000AUHours",
            "Commitment_500000AUHours"
          ]
        }
      },
      maxJobCount: {
        defaultValue: 3,
        constraints: {
          InclusiveMinimum: 1
        },
        serializedName: "maxJobCount",
        type: {
          name: "Number"
        }
      },
      maxActiveJobCountPerUser: {
        serializedName: "maxActiveJobCountPerUser",
        readOnly: true,
        type: {
          name: "Number"
        }
      },
      maxQueuedJobCountPerUser: {
        serializedName: "maxQueuedJobCountPerUser",
        readOnly: true,
        type: {
          name: "Number"
        }
      },
      maxJobRunningTimeInMin: {
        serializedName: "maxJobRunningTimeInMin",
        readOnly: true,
        type: {
          name: "Number"
        }
      },
      systemMaxJobCount: {
        serializedName: "systemMaxJobCount",
        readOnly: true,
        type: {
          name: "Number"
        }
      },
      maxDegreeOfParallelism: {
        defaultValue: 30,
        constraints: {
          InclusiveMinimum: 1
        },
        serializedName: "maxDegreeOfParallelism",
        type: {
          name: "Number"
        }
      },
      systemMaxDegreeOfParallelism: {
        serializedName: "systemMaxDegreeOfParallelism",
        readOnly: true,
        type: {
          name: "Number"
        }
      },
      maxDegreeOfParallelismPerJob: {
        constraints: {
          InclusiveMinimum: 1
        },
        serializedName: "maxDegreeOfParallelismPerJob",
        type: {
          name: "Number"
        }
      },
      minPriorityPerJob: {
        constraints: {
          InclusiveMinimum: 1
        },
        serializedName: "minPriorityPerJob",
        readOnly: true,
        type: {
          name: "Number"
        }
      },
      queryStoreRetention: {
        defaultValue: 30,
        constraints: {
          InclusiveMaximum: 180,
          InclusiveMinimum: 1
        },
        serializedName: "queryStoreRetention",
        type: {
          name: "Number"
        }
      },
      debugDataAccessLevel: {
        serializedName: "debugDataAccessLevel",
        readOnly: true,
        type: {
          name: "Enum",
          allowedValues: ["All", "Customer", "None"]
        }
      }
    }
  }
};

export const DataLakeAnalyticsAccountBasic: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "DataLakeAnalyticsAccountBasic",
    modelProperties: {
      ...Resource.type.modelProperties,
      accountId: {
        serializedName: "properties.accountId",
        readOnly: true,
        type: {
          name: "Uuid"
        }
      },
      provisioningState: {
        serializedName: "properties.provisioningState",
        readOnly: true,
        type: {
          name: "Enum",
          allowedValues: [
            "Failed",
            "Creating",
            "Running",
            "Succeeded",
            "Patching",
            "Suspending",
            "Resuming",
            "Deleting",
            "Deleted",
            "Undeleting",
            "Canceled"
          ]
        }
      },
      state: {
        serializedName: "properties.state",
        readOnly: true,
        type: {
          name: "Enum",
          allowedValues: ["Active", "Suspended"]
        }
      },
      creationTime: {
        serializedName: "properties.creationTime",
        readOnly: true,
        type: {
          name: "DateTime"
        }
      },
      lastModifiedTime: {
        serializedName: "properties.lastModifiedTime",
        readOnly: true,
        type: {
          name: "DateTime"
        }
      },
      endpoint: {
        serializedName: "properties.endpoint",
        readOnly: true,
        type: {
          name: "String"
        }
      }
    }
  }
};

export const DataLakeAnalyticsAccount: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "DataLakeAnalyticsAccount",
    modelProperties: {
      ...Resource.type.modelProperties,
      accountId: {
        serializedName: "properties.accountId",
        readOnly: true,
        type: {
          name: "Uuid"
        }
      },
      provisioningState: {
        serializedName: "properties.provisioningState",
        readOnly: true,
        type: {
          name: "Enum",
          allowedValues: [
            "Failed",
            "Creating",
            "Running",
            "Succeeded",
            "Patching",
            "Suspending",
            "Resuming",
            "Deleting",
            "Deleted",
            "Undeleting",
            "Canceled"
          ]
        }
      },
      state: {
        serializedName: "properties.state",
        readOnly: true,
        type: {
          name: "Enum",
          allowedValues: ["Active", "Suspended"]
        }
      },
      creationTime: {
        serializedName: "properties.creationTime",
        readOnly: true,
        type: {
          name: "DateTime"
        }
      },
      lastModifiedTime: {
        serializedName: "properties.lastModifiedTime",
        readOnly: true,
        type: {
          name: "DateTime"
        }
      },
      endpoint: {
        serializedName: "properties.endpoint",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      defaultDataLakeStoreAccountType: {
        serializedName: "properties.defaultDataLakeStoreAccountType",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      defaultDataLakeStoreAccount: {
        serializedName: "properties.defaultDataLakeStoreAccount",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      dataLakeStoreAccounts: {
        serializedName: "properties.dataLakeStoreAccounts",
        readOnly: true,
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "DataLakeStoreAccountInformation"
            }
          }
        }
      },
      publicDataLakeStoreAccounts: {
        serializedName: "properties.publicDataLakeStoreAccounts",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "DataLakeStoreAccountInformation"
            }
          }
        }
      },
      storageAccounts: {
        serializedName: "properties.storageAccounts",
        readOnly: true,
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "StorageAccountInformation"
            }
          }
        }
      },
      computePolicies: {
        serializedName: "properties.computePolicies",
        readOnly: true,
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "ComputePolicy"
            }
          }
        }
      },
      hiveMetastores: {
        serializedName: "properties.hiveMetastores",
        readOnly: true,
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "HiveMetastore"
            }
          }
        }
      },
      virtualNetworkRules: {
        serializedName: "properties.virtualNetworkRules",
        readOnly: true,
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "VirtualNetworkRule"
            }
          }
        }
      },
      firewallRules: {
        serializedName: "properties.firewallRules",
        readOnly: true,
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "FirewallRule"
            }
          }
        }
      },
      firewallState: {
        serializedName: "properties.firewallState",
        type: {
          name: "Enum",
          allowedValues: ["Enabled", "Disabled"]
        }
      },
      firewallAllowAzureIps: {
        serializedName: "properties.firewallAllowAzureIps",
        type: {
          name: "Enum",
          allowedValues: ["Enabled", "Disabled"]
        }
      },
      newTier: {
        serializedName: "properties.newTier",
        type: {
          name: "Enum",
          allowedValues: [
            "Consumption",
            "Commitment_100AUHours",
            "Commitment_500AUHours",
            "Commitment_1000AUHours",
            "Commitment_5000AUHours",
            "Commitment_10000AUHours",
            "Commitment_50000AUHours",
            "Commitment_100000AUHours",
            "Commitment_500000AUHours"
          ]
        }
      },
      currentTier: {
        serializedName: "properties.currentTier",
        readOnly: true,
        type: {
          name: "Enum",
          allowedValues: [
            "Consumption",
            "Commitment_100AUHours",
            "Commitment_500AUHours",
            "Commitment_1000AUHours",
            "Commitment_5000AUHours",
            "Commitment_10000AUHours",
            "Commitment_50000AUHours",
            "Commitment_100000AUHours",
            "Commitment_500000AUHours"
          ]
        }
      },
      maxJobCount: {
        defaultValue: 3,
        constraints: {
          InclusiveMinimum: 1
        },
        serializedName: "properties.maxJobCount",
        type: {
          name: "Number"
        }
      },
      maxActiveJobCountPerUser: {
        serializedName: "properties.maxActiveJobCountPerUser",
        readOnly: true,
        type: {
          name: "Number"
        }
      },
      maxQueuedJobCountPerUser: {
        serializedName: "properties.maxQueuedJobCountPerUser",
        readOnly: true,
        type: {
          name: "Number"
        }
      },
      maxJobRunningTimeInMin: {
        serializedName: "properties.maxJobRunningTimeInMin",
        readOnly: true,
        type: {
          name: "Number"
        }
      },
      systemMaxJobCount: {
        serializedName: "properties.systemMaxJobCount",
        readOnly: true,
        type: {
          name: "Number"
        }
      },
      maxDegreeOfParallelism: {
        defaultValue: 30,
        constraints: {
          InclusiveMinimum: 1
        },
        serializedName: "properties.maxDegreeOfParallelism",
        type: {
          name: "Number"
        }
      },
      systemMaxDegreeOfParallelism: {
        serializedName: "properties.systemMaxDegreeOfParallelism",
        readOnly: true,
        type: {
          name: "Number"
        }
      },
      maxDegreeOfParallelismPerJob: {
        constraints: {
          InclusiveMinimum: 1
        },
        serializedName: "properties.maxDegreeOfParallelismPerJob",
        type: {
          name: "Number"
        }
      },
      minPriorityPerJob: {
        constraints: {
          InclusiveMinimum: 1
        },
        serializedName: "properties.minPriorityPerJob",
        readOnly: true,
        type: {
          name: "Number"
        }
      },
      queryStoreRetention: {
        defaultValue: 30,
        constraints: {
          InclusiveMaximum: 180,
          InclusiveMinimum: 1
        },
        serializedName: "properties.queryStoreRetention",
        type: {
          name: "Number"
        }
      },
      debugDataAccessLevel: {
        serializedName: "properties.debugDataAccessLevel",
        readOnly: true,
        type: {
          name: "Enum",
          allowedValues: ["All", "Customer", "None"]
        }
      }
    }
  }
};

export const DataLakeStoreAccountInformation: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "DataLakeStoreAccountInformation",
    modelProperties: {
      ...SubResource.type.modelProperties,
      suffix: {
        serializedName: "properties.suffix",
        readOnly: true,
        type: {
          name: "String"
        }
      }
    }
  }
};

export const StorageAccountInformation: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "StorageAccountInformation",
    modelProperties: {
      ...SubResource.type.modelProperties,
      suffix: {
        serializedName: "properties.suffix",
        readOnly: true,
        type: {
          name: "String"
        }
      }
    }
  }
};

export const ComputePolicy: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "ComputePolicy",
    modelProperties: {
      ...SubResource.type.modelProperties,
      objectId: {
        serializedName: "properties.objectId",
        readOnly: true,
        type: {
          name: "Uuid"
        }
      },
      objectType: {
        serializedName: "properties.objectType",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      maxDegreeOfParallelismPerJob: {
        constraints: {
          InclusiveMinimum: 1
        },
        serializedName: "properties.maxDegreeOfParallelismPerJob",
        readOnly: true,
        type: {
          name: "Number"
        }
      },
      minPriorityPerJob: {
        constraints: {
          InclusiveMinimum: 1
        },
        serializedName: "properties.minPriorityPerJob",
        readOnly: true,
        type: {
          name: "Number"
        }
      }
    }
  }
};

export const HiveMetastore: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "HiveMetastore",
    modelProperties: {
      ...SubResource.type.modelProperties,
      serverUri: {
        serializedName: "properties.serverUri",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      databaseName: {
        serializedName: "properties.databaseName",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      runtimeVersion: {
        serializedName: "properties.runtimeVersion",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      userName: {
        serializedName: "properties.userName",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      password: {
        serializedName: "properties.password",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      nestedResourceProvisioningState: {
        serializedName: "properties.nestedResourceProvisioningState",
        readOnly: true,
        type: {
          name: "Enum",
          allowedValues: ["Succeeded", "Canceled", "Failed"]
        }
      }
    }
  }
};

export const VirtualNetworkRule: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "VirtualNetworkRule",
    modelProperties: {
      ...SubResource.type.modelProperties,
      subnetId: {
        serializedName: "properties.subnetId",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      virtualNetworkRuleState: {
        serializedName: "properties.virtualNetworkRuleState",
        readOnly: true,
        type: {
          name: "Enum",
          allowedValues: ["Active", "NetworkSourceDeleted", "Failed"]
        }
      }
    }
  }
};

export const FirewallRule: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "FirewallRule",
    modelProperties: {
      ...SubResource.type.modelProperties,
      startIpAddress: {
        serializedName: "properties.startIpAddress",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      endIpAddress: {
        serializedName: "properties.endIpAddress",
        readOnly: true,
        type: {
          name: "String"
        }
      }
    }
  }
};

export const StorageContainer: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "StorageContainer",
    modelProperties: {
      ...SubResource.type.modelProperties,
      lastModifiedTime: {
        serializedName: "properties.lastModifiedTime",
        readOnly: true,
        type: {
          name: "DateTime"
        }
      }
    }
  }
};
