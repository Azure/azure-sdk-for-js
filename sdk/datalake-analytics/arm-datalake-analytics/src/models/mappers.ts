/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */

import { CloudErrorMapper, BaseResourceMapper } from "@azure/ms-rest-azure-js";
import * as msRest from "@azure/ms-rest-js";

export const CloudError = CloudErrorMapper;
export const BaseResource = BaseResourceMapper;

export const Resource: msRest.CompositeMapper = {
  serializedName: "Resource",
  type: {
    name: "Composite",
    className: "Resource",
    modelProperties: {
      id: {
        readOnly: true,
        serializedName: "id",
        type: {
          name: "String"
        }
      },
      name: {
        readOnly: true,
        serializedName: "name",
        type: {
          name: "String"
        }
      },
      type: {
        readOnly: true,
        serializedName: "type",
        type: {
          name: "String"
        }
      },
      location: {
        readOnly: true,
        serializedName: "location",
        type: {
          name: "String"
        }
      },
      tags: {
        readOnly: true,
        serializedName: "tags",
        type: {
          name: "Dictionary",
          value: {
            type: {
              name: "String"
            }
          }
        }
      }
    }
  }
};

export const SubResource: msRest.CompositeMapper = {
  serializedName: "SubResource",
  type: {
    name: "Composite",
    className: "SubResource",
    modelProperties: {
      id: {
        readOnly: true,
        serializedName: "id",
        type: {
          name: "String"
        }
      },
      name: {
        readOnly: true,
        serializedName: "name",
        type: {
          name: "String"
        }
      },
      type: {
        readOnly: true,
        serializedName: "type",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const DataLakeStoreAccountInformation: msRest.CompositeMapper = {
  serializedName: "DataLakeStoreAccountInformation",
  type: {
    name: "Composite",
    className: "DataLakeStoreAccountInformation",
    modelProperties: {
      ...SubResource.type.modelProperties,
      suffix: {
        readOnly: true,
        serializedName: "properties.suffix",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const StorageAccountInformation: msRest.CompositeMapper = {
  serializedName: "StorageAccountInformation",
  type: {
    name: "Composite",
    className: "StorageAccountInformation",
    modelProperties: {
      ...SubResource.type.modelProperties,
      suffix: {
        readOnly: true,
        serializedName: "properties.suffix",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const ComputePolicy: msRest.CompositeMapper = {
  serializedName: "ComputePolicy",
  type: {
    name: "Composite",
    className: "ComputePolicy",
    modelProperties: {
      ...SubResource.type.modelProperties,
      objectId: {
        readOnly: true,
        serializedName: "properties.objectId",
        type: {
          name: "Uuid"
        }
      },
      objectType: {
        readOnly: true,
        serializedName: "properties.objectType",
        type: {
          name: "String"
        }
      },
      maxDegreeOfParallelismPerJob: {
        readOnly: true,
        serializedName: "properties.maxDegreeOfParallelismPerJob",
        constraints: {
          InclusiveMinimum: 1
        },
        type: {
          name: "Number"
        }
      },
      minPriorityPerJob: {
        readOnly: true,
        serializedName: "properties.minPriorityPerJob",
        constraints: {
          InclusiveMinimum: 1
        },
        type: {
          name: "Number"
        }
      }
    }
  }
};

export const HiveMetastore: msRest.CompositeMapper = {
  serializedName: "HiveMetastore",
  type: {
    name: "Composite",
    className: "HiveMetastore",
    modelProperties: {
      ...SubResource.type.modelProperties,
      serverUri: {
        readOnly: true,
        serializedName: "properties.serverUri",
        type: {
          name: "String"
        }
      },
      databaseName: {
        readOnly: true,
        serializedName: "properties.databaseName",
        type: {
          name: "String"
        }
      },
      runtimeVersion: {
        readOnly: true,
        serializedName: "properties.runtimeVersion",
        type: {
          name: "String"
        }
      },
      userName: {
        readOnly: true,
        serializedName: "properties.userName",
        type: {
          name: "String"
        }
      },
      password: {
        readOnly: true,
        serializedName: "properties.password",
        type: {
          name: "String"
        }
      },
      nestedResourceProvisioningState: {
        readOnly: true,
        serializedName: "properties.nestedResourceProvisioningState",
        type: {
          name: "Enum",
          allowedValues: [
            "Succeeded",
            "Canceled",
            "Failed"
          ]
        }
      }
    }
  }
};

export const VirtualNetworkRule: msRest.CompositeMapper = {
  serializedName: "VirtualNetworkRule",
  type: {
    name: "Composite",
    className: "VirtualNetworkRule",
    modelProperties: {
      ...SubResource.type.modelProperties,
      subnetId: {
        readOnly: true,
        serializedName: "properties.subnetId",
        type: {
          name: "String"
        }
      },
      virtualNetworkRuleState: {
        readOnly: true,
        serializedName: "properties.virtualNetworkRuleState",
        type: {
          name: "Enum",
          allowedValues: [
            "Active",
            "NetworkSourceDeleted",
            "Failed"
          ]
        }
      }
    }
  }
};

export const FirewallRule: msRest.CompositeMapper = {
  serializedName: "FirewallRule",
  type: {
    name: "Composite",
    className: "FirewallRule",
    modelProperties: {
      ...SubResource.type.modelProperties,
      startIpAddress: {
        readOnly: true,
        serializedName: "properties.startIpAddress",
        type: {
          name: "String"
        }
      },
      endIpAddress: {
        readOnly: true,
        serializedName: "properties.endIpAddress",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const DataLakeAnalyticsAccount: msRest.CompositeMapper = {
  serializedName: "DataLakeAnalyticsAccount",
  type: {
    name: "Composite",
    className: "DataLakeAnalyticsAccount",
    modelProperties: {
      ...Resource.type.modelProperties,
      accountId: {
        readOnly: true,
        serializedName: "properties.accountId",
        type: {
          name: "Uuid"
        }
      },
      provisioningState: {
        readOnly: true,
        serializedName: "properties.provisioningState",
        type: {
          name: "Enum",
          allowedValues: [
            "Failed",
            "Creating",
            "Running",
            "Succeeded",
            "Patching",
            "Suspending",
            "Resuming",
            "Deleting",
            "Deleted",
            "Undeleting",
            "Canceled"
          ]
        }
      },
      state: {
        readOnly: true,
        serializedName: "properties.state",
        type: {
          name: "Enum",
          allowedValues: [
            "Active",
            "Suspended"
          ]
        }
      },
      creationTime: {
        readOnly: true,
        serializedName: "properties.creationTime",
        type: {
          name: "DateTime"
        }
      },
      lastModifiedTime: {
        readOnly: true,
        serializedName: "properties.lastModifiedTime",
        type: {
          name: "DateTime"
        }
      },
      endpoint: {
        readOnly: true,
        serializedName: "properties.endpoint",
        type: {
          name: "String"
        }
      },
      defaultDataLakeStoreAccount: {
        readOnly: true,
        serializedName: "properties.defaultDataLakeStoreAccount",
        type: {
          name: "String"
        }
      },
      dataLakeStoreAccounts: {
        readOnly: true,
        serializedName: "properties.dataLakeStoreAccounts",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "DataLakeStoreAccountInformation"
            }
          }
        }
      },
      storageAccounts: {
        readOnly: true,
        serializedName: "properties.storageAccounts",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "StorageAccountInformation"
            }
          }
        }
      },
      computePolicies: {
        readOnly: true,
        serializedName: "properties.computePolicies",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "ComputePolicy"
            }
          }
        }
      },
      hiveMetastores: {
        readOnly: true,
        serializedName: "properties.hiveMetastores",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "HiveMetastore"
            }
          }
        }
      },
      virtualNetworkRules: {
        readOnly: true,
        serializedName: "properties.virtualNetworkRules",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "VirtualNetworkRule"
            }
          }
        }
      },
      firewallRules: {
        readOnly: true,
        serializedName: "properties.firewallRules",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "FirewallRule"
            }
          }
        }
      },
      firewallState: {
        readOnly: true,
        serializedName: "properties.firewallState",
        type: {
          name: "Enum",
          allowedValues: [
            "Enabled",
            "Disabled"
          ]
        }
      },
      firewallAllowAzureIps: {
        readOnly: true,
        serializedName: "properties.firewallAllowAzureIps",
        type: {
          name: "Enum",
          allowedValues: [
            "Enabled",
            "Disabled"
          ]
        }
      },
      newTier: {
        readOnly: true,
        serializedName: "properties.newTier",
        type: {
          name: "Enum",
          allowedValues: [
            "Consumption",
            "Commitment_100AUHours",
            "Commitment_500AUHours",
            "Commitment_1000AUHours",
            "Commitment_5000AUHours",
            "Commitment_10000AUHours",
            "Commitment_50000AUHours",
            "Commitment_100000AUHours",
            "Commitment_500000AUHours"
          ]
        }
      },
      currentTier: {
        readOnly: true,
        serializedName: "properties.currentTier",
        type: {
          name: "Enum",
          allowedValues: [
            "Consumption",
            "Commitment_100AUHours",
            "Commitment_500AUHours",
            "Commitment_1000AUHours",
            "Commitment_5000AUHours",
            "Commitment_10000AUHours",
            "Commitment_50000AUHours",
            "Commitment_100000AUHours",
            "Commitment_500000AUHours"
          ]
        }
      },
      maxJobCount: {
        serializedName: "properties.maxJobCount",
        defaultValue: 3,
        constraints: {
          InclusiveMinimum: 1
        },
        type: {
          name: "Number"
        }
      },
      systemMaxJobCount: {
        readOnly: true,
        serializedName: "properties.systemMaxJobCount",
        type: {
          name: "Number"
        }
      },
      maxDegreeOfParallelism: {
        serializedName: "properties.maxDegreeOfParallelism",
        defaultValue: 30,
        constraints: {
          InclusiveMinimum: 1
        },
        type: {
          name: "Number"
        }
      },
      systemMaxDegreeOfParallelism: {
        readOnly: true,
        serializedName: "properties.systemMaxDegreeOfParallelism",
        type: {
          name: "Number"
        }
      },
      maxDegreeOfParallelismPerJob: {
        readOnly: true,
        serializedName: "properties.maxDegreeOfParallelismPerJob",
        constraints: {
          InclusiveMinimum: 1
        },
        type: {
          name: "Number"
        }
      },
      minPriorityPerJob: {
        readOnly: true,
        serializedName: "properties.minPriorityPerJob",
        constraints: {
          InclusiveMinimum: 1
        },
        type: {
          name: "Number"
        }
      },
      queryStoreRetention: {
        serializedName: "properties.queryStoreRetention",
        defaultValue: 30,
        constraints: {
          InclusiveMaximum: 180,
          InclusiveMinimum: 1
        },
        type: {
          name: "Number"
        }
      },
      debugDataAccessLevel: {
        readOnly: true,
        serializedName: "properties.debugDataAccessLevel",
        type: {
          name: "Enum",
          allowedValues: [
            "All",
            "Customer",
            "None"
          ]
        }
      }
    }
  }
};

export const DataLakeAnalyticsAccountBasic: msRest.CompositeMapper = {
  serializedName: "DataLakeAnalyticsAccountBasic",
  type: {
    name: "Composite",
    className: "DataLakeAnalyticsAccountBasic",
    modelProperties: {
      ...Resource.type.modelProperties,
      accountId: {
        readOnly: true,
        serializedName: "properties.accountId",
        type: {
          name: "Uuid"
        }
      },
      provisioningState: {
        readOnly: true,
        serializedName: "properties.provisioningState",
        type: {
          name: "Enum",
          allowedValues: [
            "Failed",
            "Creating",
            "Running",
            "Succeeded",
            "Patching",
            "Suspending",
            "Resuming",
            "Deleting",
            "Deleted",
            "Undeleting",
            "Canceled"
          ]
        }
      },
      state: {
        readOnly: true,
        serializedName: "properties.state",
        type: {
          name: "Enum",
          allowedValues: [
            "Active",
            "Suspended"
          ]
        }
      },
      creationTime: {
        readOnly: true,
        serializedName: "properties.creationTime",
        type: {
          name: "DateTime"
        }
      },
      lastModifiedTime: {
        readOnly: true,
        serializedName: "properties.lastModifiedTime",
        type: {
          name: "DateTime"
        }
      },
      endpoint: {
        readOnly: true,
        serializedName: "properties.endpoint",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const StorageContainer: msRest.CompositeMapper = {
  serializedName: "StorageContainer",
  type: {
    name: "Composite",
    className: "StorageContainer",
    modelProperties: {
      ...SubResource.type.modelProperties,
      lastModifiedTime: {
        readOnly: true,
        serializedName: "properties.lastModifiedTime",
        type: {
          name: "DateTime"
        }
      }
    }
  }
};

export const SasTokenInformation: msRest.CompositeMapper = {
  serializedName: "SasTokenInformation",
  type: {
    name: "Composite",
    className: "SasTokenInformation",
    modelProperties: {
      accessToken: {
        readOnly: true,
        serializedName: "accessToken",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const VirtualNetworkRuleListResult: msRest.CompositeMapper = {
  serializedName: "VirtualNetworkRuleListResult",
  type: {
    name: "Composite",
    className: "VirtualNetworkRuleListResult",
    modelProperties: {
      value: {
        readOnly: true,
        serializedName: "value",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "VirtualNetworkRule"
            }
          }
        }
      },
      nextLink: {
        readOnly: true,
        serializedName: "nextLink",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const HiveMetastoreListResult: msRest.CompositeMapper = {
  serializedName: "HiveMetastoreListResult",
  type: {
    name: "Composite",
    className: "HiveMetastoreListResult",
    modelProperties: {
      value: {
        readOnly: true,
        serializedName: "value",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "HiveMetastore"
            }
          }
        }
      },
      nextLink: {
        readOnly: true,
        serializedName: "nextLink",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const OperationDisplay: msRest.CompositeMapper = {
  serializedName: "OperationDisplay",
  type: {
    name: "Composite",
    className: "OperationDisplay",
    modelProperties: {
      provider: {
        readOnly: true,
        serializedName: "provider",
        type: {
          name: "String"
        }
      },
      resource: {
        readOnly: true,
        serializedName: "resource",
        type: {
          name: "String"
        }
      },
      operation: {
        readOnly: true,
        serializedName: "operation",
        type: {
          name: "String"
        }
      },
      description: {
        readOnly: true,
        serializedName: "description",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const OperationMetaMetricAvailabilitiesSpecification: msRest.CompositeMapper = {
  serializedName: "OperationMetaMetricAvailabilitiesSpecification",
  type: {
    name: "Composite",
    className: "OperationMetaMetricAvailabilitiesSpecification",
    modelProperties: {
      timeGrain: {
        serializedName: "timeGrain",
        type: {
          name: "String"
        }
      },
      blobDuration: {
        serializedName: "blobDuration",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const OperationMetaMetricSpecification: msRest.CompositeMapper = {
  serializedName: "OperationMetaMetricSpecification",
  type: {
    name: "Composite",
    className: "OperationMetaMetricSpecification",
    modelProperties: {
      name: {
        serializedName: "name",
        type: {
          name: "String"
        }
      },
      displayName: {
        serializedName: "displayName",
        type: {
          name: "String"
        }
      },
      unit: {
        serializedName: "unit",
        type: {
          name: "String"
        }
      },
      aggregationType: {
        serializedName: "aggregationType",
        type: {
          name: "String"
        }
      },
      availabilities: {
        serializedName: "availabilities",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "OperationMetaMetricAvailabilitiesSpecification"
            }
          }
        }
      }
    }
  }
};

export const OperationMetaLogSpecification: msRest.CompositeMapper = {
  serializedName: "OperationMetaLogSpecification",
  type: {
    name: "Composite",
    className: "OperationMetaLogSpecification",
    modelProperties: {
      name: {
        serializedName: "name",
        type: {
          name: "String"
        }
      },
      displayName: {
        serializedName: "displayName",
        type: {
          name: "String"
        }
      },
      blobDuration: {
        serializedName: "blobDuration",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const OperationMetaServiceSpecification: msRest.CompositeMapper = {
  serializedName: "OperationMetaServiceSpecification",
  type: {
    name: "Composite",
    className: "OperationMetaServiceSpecification",
    modelProperties: {
      metricSpecifications: {
        serializedName: "metricSpecifications",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "OperationMetaMetricSpecification"
            }
          }
        }
      },
      logSpecifications: {
        serializedName: "logSpecifications",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "OperationMetaLogSpecification"
            }
          }
        }
      }
    }
  }
};

export const OperationMetaPropertyInfo: msRest.CompositeMapper = {
  serializedName: "OperationMetaPropertyInfo",
  type: {
    name: "Composite",
    className: "OperationMetaPropertyInfo",
    modelProperties: {
      serviceSpecification: {
        serializedName: "serviceSpecification",
        type: {
          name: "Composite",
          className: "OperationMetaServiceSpecification"
        }
      }
    }
  }
};

export const Operation: msRest.CompositeMapper = {
  serializedName: "Operation",
  type: {
    name: "Composite",
    className: "Operation",
    modelProperties: {
      name: {
        readOnly: true,
        serializedName: "name",
        type: {
          name: "String"
        }
      },
      display: {
        readOnly: true,
        serializedName: "display",
        type: {
          name: "Composite",
          className: "OperationDisplay"
        }
      },
      properties: {
        readOnly: true,
        serializedName: "properties",
        type: {
          name: "Composite",
          className: "OperationMetaPropertyInfo"
        }
      },
      origin: {
        readOnly: true,
        serializedName: "origin",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const OperationListResult: msRest.CompositeMapper = {
  serializedName: "OperationListResult",
  type: {
    name: "Composite",
    className: "OperationListResult",
    modelProperties: {
      value: {
        readOnly: true,
        serializedName: "value",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "Operation"
            }
          }
        }
      },
      nextLink: {
        readOnly: true,
        serializedName: "nextLink",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const CapabilityInformation: msRest.CompositeMapper = {
  serializedName: "CapabilityInformation",
  type: {
    name: "Composite",
    className: "CapabilityInformation",
    modelProperties: {
      subscriptionId: {
        readOnly: true,
        serializedName: "subscriptionId",
        type: {
          name: "Uuid"
        }
      },
      state: {
        readOnly: true,
        serializedName: "state",
        type: {
          name: "String"
        }
      },
      maxAccountCount: {
        readOnly: true,
        serializedName: "maxAccountCount",
        type: {
          name: "Number"
        }
      },
      accountCount: {
        readOnly: true,
        serializedName: "accountCount",
        type: {
          name: "Number"
        }
      },
      migrationState: {
        readOnly: true,
        serializedName: "migrationState",
        type: {
          name: "Boolean"
        }
      }
    }
  }
};

export const NameAvailabilityInformation: msRest.CompositeMapper = {
  serializedName: "NameAvailabilityInformation",
  type: {
    name: "Composite",
    className: "NameAvailabilityInformation",
    modelProperties: {
      nameAvailable: {
        readOnly: true,
        serializedName: "nameAvailable",
        type: {
          name: "Boolean"
        }
      },
      reason: {
        readOnly: true,
        serializedName: "reason",
        type: {
          name: "String"
        }
      },
      message: {
        readOnly: true,
        serializedName: "message",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const AddDataLakeStoreWithAccountParameters: msRest.CompositeMapper = {
  serializedName: "AddDataLakeStoreWithAccountParameters",
  type: {
    name: "Composite",
    className: "AddDataLakeStoreWithAccountParameters",
    modelProperties: {
      name: {
        required: true,
        serializedName: "name",
        type: {
          name: "String"
        }
      },
      suffix: {
        serializedName: "properties.suffix",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const AddStorageAccountWithAccountParameters: msRest.CompositeMapper = {
  serializedName: "AddStorageAccountWithAccountParameters",
  type: {
    name: "Composite",
    className: "AddStorageAccountWithAccountParameters",
    modelProperties: {
      name: {
        required: true,
        serializedName: "name",
        type: {
          name: "String"
        }
      },
      accessKey: {
        required: true,
        serializedName: "properties.accessKey",
        type: {
          name: "String"
        }
      },
      suffix: {
        serializedName: "properties.suffix",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const CreateComputePolicyWithAccountParameters: msRest.CompositeMapper = {
  serializedName: "CreateComputePolicyWithAccountParameters",
  type: {
    name: "Composite",
    className: "CreateComputePolicyWithAccountParameters",
    modelProperties: {
      name: {
        required: true,
        serializedName: "name",
        type: {
          name: "String"
        }
      },
      objectId: {
        required: true,
        serializedName: "properties.objectId",
        type: {
          name: "Uuid"
        }
      },
      objectType: {
        required: true,
        serializedName: "properties.objectType",
        type: {
          name: "String"
        }
      },
      maxDegreeOfParallelismPerJob: {
        serializedName: "properties.maxDegreeOfParallelismPerJob",
        constraints: {
          InclusiveMinimum: 1
        },
        type: {
          name: "Number"
        }
      },
      minPriorityPerJob: {
        serializedName: "properties.minPriorityPerJob",
        constraints: {
          InclusiveMinimum: 1
        },
        type: {
          name: "Number"
        }
      }
    }
  }
};

export const CreateFirewallRuleWithAccountParameters: msRest.CompositeMapper = {
  serializedName: "CreateFirewallRuleWithAccountParameters",
  type: {
    name: "Composite",
    className: "CreateFirewallRuleWithAccountParameters",
    modelProperties: {
      name: {
        required: true,
        serializedName: "name",
        type: {
          name: "String"
        }
      },
      startIpAddress: {
        required: true,
        serializedName: "properties.startIpAddress",
        type: {
          name: "String"
        }
      },
      endIpAddress: {
        required: true,
        serializedName: "properties.endIpAddress",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const CreateDataLakeAnalyticsAccountParameters: msRest.CompositeMapper = {
  serializedName: "CreateDataLakeAnalyticsAccountParameters",
  type: {
    name: "Composite",
    className: "CreateDataLakeAnalyticsAccountParameters",
    modelProperties: {
      location: {
        required: true,
        serializedName: "location",
        type: {
          name: "String"
        }
      },
      tags: {
        serializedName: "tags",
        type: {
          name: "Dictionary",
          value: {
            type: {
              name: "String"
            }
          }
        }
      },
      defaultDataLakeStoreAccount: {
        required: true,
        serializedName: "properties.defaultDataLakeStoreAccount",
        type: {
          name: "String"
        }
      },
      dataLakeStoreAccounts: {
        required: true,
        serializedName: "properties.dataLakeStoreAccounts",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "AddDataLakeStoreWithAccountParameters"
            }
          }
        }
      },
      storageAccounts: {
        serializedName: "properties.storageAccounts",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "AddStorageAccountWithAccountParameters"
            }
          }
        }
      },
      computePolicies: {
        serializedName: "properties.computePolicies",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "CreateComputePolicyWithAccountParameters"
            }
          }
        }
      },
      firewallRules: {
        serializedName: "properties.firewallRules",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "CreateFirewallRuleWithAccountParameters"
            }
          }
        }
      },
      firewallState: {
        serializedName: "properties.firewallState",
        type: {
          name: "Enum",
          allowedValues: [
            "Enabled",
            "Disabled"
          ]
        }
      },
      firewallAllowAzureIps: {
        serializedName: "properties.firewallAllowAzureIps",
        type: {
          name: "Enum",
          allowedValues: [
            "Enabled",
            "Disabled"
          ]
        }
      },
      newTier: {
        serializedName: "properties.newTier",
        type: {
          name: "Enum",
          allowedValues: [
            "Consumption",
            "Commitment_100AUHours",
            "Commitment_500AUHours",
            "Commitment_1000AUHours",
            "Commitment_5000AUHours",
            "Commitment_10000AUHours",
            "Commitment_50000AUHours",
            "Commitment_100000AUHours",
            "Commitment_500000AUHours"
          ]
        }
      },
      maxJobCount: {
        serializedName: "properties.maxJobCount",
        defaultValue: 3,
        constraints: {
          InclusiveMinimum: 1
        },
        type: {
          name: "Number"
        }
      },
      maxDegreeOfParallelism: {
        serializedName: "properties.maxDegreeOfParallelism",
        defaultValue: 30,
        constraints: {
          InclusiveMinimum: 1
        },
        type: {
          name: "Number"
        }
      },
      maxDegreeOfParallelismPerJob: {
        serializedName: "properties.maxDegreeOfParallelismPerJob",
        constraints: {
          InclusiveMinimum: 1
        },
        type: {
          name: "Number"
        }
      },
      minPriorityPerJob: {
        serializedName: "properties.minPriorityPerJob",
        constraints: {
          InclusiveMinimum: 1
        },
        type: {
          name: "Number"
        }
      },
      queryStoreRetention: {
        serializedName: "properties.queryStoreRetention",
        defaultValue: 30,
        constraints: {
          InclusiveMaximum: 180,
          InclusiveMinimum: 1
        },
        type: {
          name: "Number"
        }
      }
    }
  }
};

export const UpdateDataLakeStoreWithAccountParameters: msRest.CompositeMapper = {
  serializedName: "UpdateDataLakeStoreWithAccountParameters",
  type: {
    name: "Composite",
    className: "UpdateDataLakeStoreWithAccountParameters",
    modelProperties: {
      name: {
        required: true,
        serializedName: "name",
        type: {
          name: "String"
        }
      },
      suffix: {
        serializedName: "properties.suffix",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const UpdateStorageAccountWithAccountParameters: msRest.CompositeMapper = {
  serializedName: "UpdateStorageAccountWithAccountParameters",
  type: {
    name: "Composite",
    className: "UpdateStorageAccountWithAccountParameters",
    modelProperties: {
      name: {
        required: true,
        serializedName: "name",
        type: {
          name: "String"
        }
      },
      accessKey: {
        serializedName: "properties.accessKey",
        type: {
          name: "String"
        }
      },
      suffix: {
        serializedName: "properties.suffix",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const UpdateComputePolicyWithAccountParameters: msRest.CompositeMapper = {
  serializedName: "UpdateComputePolicyWithAccountParameters",
  type: {
    name: "Composite",
    className: "UpdateComputePolicyWithAccountParameters",
    modelProperties: {
      name: {
        required: true,
        serializedName: "name",
        type: {
          name: "String"
        }
      },
      objectId: {
        serializedName: "properties.objectId",
        type: {
          name: "Uuid"
        }
      },
      objectType: {
        serializedName: "properties.objectType",
        type: {
          name: "String"
        }
      },
      maxDegreeOfParallelismPerJob: {
        serializedName: "properties.maxDegreeOfParallelismPerJob",
        constraints: {
          InclusiveMinimum: 1
        },
        type: {
          name: "Number"
        }
      },
      minPriorityPerJob: {
        serializedName: "properties.minPriorityPerJob",
        constraints: {
          InclusiveMinimum: 1
        },
        type: {
          name: "Number"
        }
      }
    }
  }
};

export const UpdateFirewallRuleWithAccountParameters: msRest.CompositeMapper = {
  serializedName: "UpdateFirewallRuleWithAccountParameters",
  type: {
    name: "Composite",
    className: "UpdateFirewallRuleWithAccountParameters",
    modelProperties: {
      name: {
        required: true,
        serializedName: "name",
        type: {
          name: "String"
        }
      },
      startIpAddress: {
        serializedName: "properties.startIpAddress",
        type: {
          name: "String"
        }
      },
      endIpAddress: {
        serializedName: "properties.endIpAddress",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const UpdateDataLakeAnalyticsAccountParameters: msRest.CompositeMapper = {
  serializedName: "UpdateDataLakeAnalyticsAccountParameters",
  type: {
    name: "Composite",
    className: "UpdateDataLakeAnalyticsAccountParameters",
    modelProperties: {
      tags: {
        serializedName: "tags",
        type: {
          name: "Dictionary",
          value: {
            type: {
              name: "String"
            }
          }
        }
      },
      dataLakeStoreAccounts: {
        serializedName: "properties.dataLakeStoreAccounts",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "UpdateDataLakeStoreWithAccountParameters"
            }
          }
        }
      },
      storageAccounts: {
        serializedName: "properties.storageAccounts",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "UpdateStorageAccountWithAccountParameters"
            }
          }
        }
      },
      computePolicies: {
        serializedName: "properties.computePolicies",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "UpdateComputePolicyWithAccountParameters"
            }
          }
        }
      },
      firewallRules: {
        serializedName: "properties.firewallRules",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "UpdateFirewallRuleWithAccountParameters"
            }
          }
        }
      },
      firewallState: {
        serializedName: "properties.firewallState",
        type: {
          name: "Enum",
          allowedValues: [
            "Enabled",
            "Disabled"
          ]
        }
      },
      firewallAllowAzureIps: {
        serializedName: "properties.firewallAllowAzureIps",
        type: {
          name: "Enum",
          allowedValues: [
            "Enabled",
            "Disabled"
          ]
        }
      },
      newTier: {
        serializedName: "properties.newTier",
        type: {
          name: "Enum",
          allowedValues: [
            "Consumption",
            "Commitment_100AUHours",
            "Commitment_500AUHours",
            "Commitment_1000AUHours",
            "Commitment_5000AUHours",
            "Commitment_10000AUHours",
            "Commitment_50000AUHours",
            "Commitment_100000AUHours",
            "Commitment_500000AUHours"
          ]
        }
      },
      maxJobCount: {
        serializedName: "properties.maxJobCount",
        constraints: {
          InclusiveMinimum: 1
        },
        type: {
          name: "Number"
        }
      },
      maxDegreeOfParallelism: {
        serializedName: "properties.maxDegreeOfParallelism",
        constraints: {
          InclusiveMinimum: 1
        },
        type: {
          name: "Number"
        }
      },
      maxDegreeOfParallelismPerJob: {
        serializedName: "properties.maxDegreeOfParallelismPerJob",
        constraints: {
          InclusiveMinimum: 1
        },
        type: {
          name: "Number"
        }
      },
      minPriorityPerJob: {
        serializedName: "properties.minPriorityPerJob",
        constraints: {
          InclusiveMinimum: 1
        },
        type: {
          name: "Number"
        }
      },
      queryStoreRetention: {
        serializedName: "properties.queryStoreRetention",
        constraints: {
          InclusiveMaximum: 180,
          InclusiveMinimum: 1
        },
        type: {
          name: "Number"
        }
      }
    }
  }
};

export const AddDataLakeStoreParameters: msRest.CompositeMapper = {
  serializedName: "AddDataLakeStoreParameters",
  type: {
    name: "Composite",
    className: "AddDataLakeStoreParameters",
    modelProperties: {
      suffix: {
        serializedName: "properties.suffix",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const AddStorageAccountParameters: msRest.CompositeMapper = {
  serializedName: "AddStorageAccountParameters",
  type: {
    name: "Composite",
    className: "AddStorageAccountParameters",
    modelProperties: {
      accessKey: {
        required: true,
        serializedName: "properties.accessKey",
        type: {
          name: "String"
        }
      },
      suffix: {
        serializedName: "properties.suffix",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const UpdateStorageAccountParameters: msRest.CompositeMapper = {
  serializedName: "UpdateStorageAccountParameters",
  type: {
    name: "Composite",
    className: "UpdateStorageAccountParameters",
    modelProperties: {
      accessKey: {
        serializedName: "properties.accessKey",
        type: {
          name: "String"
        }
      },
      suffix: {
        serializedName: "properties.suffix",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const CreateOrUpdateComputePolicyParameters: msRest.CompositeMapper = {
  serializedName: "CreateOrUpdateComputePolicyParameters",
  type: {
    name: "Composite",
    className: "CreateOrUpdateComputePolicyParameters",
    modelProperties: {
      objectId: {
        required: true,
        serializedName: "properties.objectId",
        type: {
          name: "Uuid"
        }
      },
      objectType: {
        required: true,
        serializedName: "properties.objectType",
        type: {
          name: "String"
        }
      },
      maxDegreeOfParallelismPerJob: {
        serializedName: "properties.maxDegreeOfParallelismPerJob",
        constraints: {
          InclusiveMinimum: 1
        },
        type: {
          name: "Number"
        }
      },
      minPriorityPerJob: {
        serializedName: "properties.minPriorityPerJob",
        constraints: {
          InclusiveMinimum: 1
        },
        type: {
          name: "Number"
        }
      }
    }
  }
};

export const UpdateComputePolicyParameters: msRest.CompositeMapper = {
  serializedName: "UpdateComputePolicyParameters",
  type: {
    name: "Composite",
    className: "UpdateComputePolicyParameters",
    modelProperties: {
      objectId: {
        serializedName: "properties.objectId",
        type: {
          name: "Uuid"
        }
      },
      objectType: {
        serializedName: "properties.objectType",
        type: {
          name: "String"
        }
      },
      maxDegreeOfParallelismPerJob: {
        serializedName: "properties.maxDegreeOfParallelismPerJob",
        constraints: {
          InclusiveMinimum: 1
        },
        type: {
          name: "Number"
        }
      },
      minPriorityPerJob: {
        serializedName: "properties.minPriorityPerJob",
        constraints: {
          InclusiveMinimum: 1
        },
        type: {
          name: "Number"
        }
      }
    }
  }
};

export const CreateOrUpdateFirewallRuleParameters: msRest.CompositeMapper = {
  serializedName: "CreateOrUpdateFirewallRuleParameters",
  type: {
    name: "Composite",
    className: "CreateOrUpdateFirewallRuleParameters",
    modelProperties: {
      startIpAddress: {
        required: true,
        serializedName: "properties.startIpAddress",
        type: {
          name: "String"
        }
      },
      endIpAddress: {
        required: true,
        serializedName: "properties.endIpAddress",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const UpdateFirewallRuleParameters: msRest.CompositeMapper = {
  serializedName: "UpdateFirewallRuleParameters",
  type: {
    name: "Composite",
    className: "UpdateFirewallRuleParameters",
    modelProperties: {
      startIpAddress: {
        serializedName: "properties.startIpAddress",
        type: {
          name: "String"
        }
      },
      endIpAddress: {
        serializedName: "properties.endIpAddress",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const CheckNameAvailabilityParameters: msRest.CompositeMapper = {
  serializedName: "CheckNameAvailabilityParameters",
  type: {
    name: "Composite",
    className: "CheckNameAvailabilityParameters",
    modelProperties: {
      name: {
        required: true,
        serializedName: "name",
        type: {
          name: "String"
        }
      },
      type: {
        required: true,
        isConstant: true,
        serializedName: "type",
        defaultValue: 'Microsoft.DataLakeAnalytics/accounts',
        type: {
          name: "String"
        }
      }
    }
  }
};

export const ErrorAdditionalInfo: msRest.CompositeMapper = {
  serializedName: "ErrorAdditionalInfo",
  type: {
    name: "Composite",
    className: "ErrorAdditionalInfo",
    modelProperties: {
      type: {
        readOnly: true,
        serializedName: "type",
        type: {
          name: "String"
        }
      },
      info: {
        readOnly: true,
        serializedName: "info",
        type: {
          name: "Object"
        }
      }
    }
  }
};

export const ErrorDetail: msRest.CompositeMapper = {
  serializedName: "ErrorDetail",
  type: {
    name: "Composite",
    className: "ErrorDetail",
    modelProperties: {
      code: {
        readOnly: true,
        serializedName: "code",
        type: {
          name: "String"
        }
      },
      message: {
        readOnly: true,
        serializedName: "message",
        type: {
          name: "String"
        }
      },
      target: {
        readOnly: true,
        serializedName: "target",
        type: {
          name: "String"
        }
      },
      details: {
        readOnly: true,
        serializedName: "details",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "ErrorDetail"
            }
          }
        }
      },
      additionalInfo: {
        readOnly: true,
        serializedName: "additionalInfo",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "ErrorAdditionalInfo"
            }
          }
        }
      }
    }
  }
};

export const ErrorResponse: msRest.CompositeMapper = {
  serializedName: "ErrorResponse",
  type: {
    name: "Composite",
    className: "ErrorResponse",
    modelProperties: {
      error: {
        serializedName: "error",
        type: {
          name: "Composite",
          className: "ErrorDetail"
        }
      }
    }
  }
};

export const DataLakeAnalyticsAccountListResult: msRest.CompositeMapper = {
  serializedName: "DataLakeAnalyticsAccountListResult",
  type: {
    name: "Composite",
    className: "DataLakeAnalyticsAccountListResult",
    modelProperties: {
      value: {
        readOnly: true,
        serializedName: "",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "DataLakeAnalyticsAccountBasic"
            }
          }
        }
      },
      nextLink: {
        readOnly: true,
        serializedName: "nextLink",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const DataLakeStoreAccountInformationListResult: msRest.CompositeMapper = {
  serializedName: "DataLakeStoreAccountInformationListResult",
  type: {
    name: "Composite",
    className: "DataLakeStoreAccountInformationListResult",
    modelProperties: {
      value: {
        readOnly: true,
        serializedName: "",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "DataLakeStoreAccountInformation"
            }
          }
        }
      },
      nextLink: {
        readOnly: true,
        serializedName: "nextLink",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const StorageAccountInformationListResult: msRest.CompositeMapper = {
  serializedName: "StorageAccountInformationListResult",
  type: {
    name: "Composite",
    className: "StorageAccountInformationListResult",
    modelProperties: {
      value: {
        readOnly: true,
        serializedName: "",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "StorageAccountInformation"
            }
          }
        }
      },
      nextLink: {
        readOnly: true,
        serializedName: "nextLink",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const StorageContainerListResult: msRest.CompositeMapper = {
  serializedName: "StorageContainerListResult",
  type: {
    name: "Composite",
    className: "StorageContainerListResult",
    modelProperties: {
      value: {
        readOnly: true,
        serializedName: "",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "StorageContainer"
            }
          }
        }
      },
      nextLink: {
        readOnly: true,
        serializedName: "nextLink",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const SasTokenInformationListResult: msRest.CompositeMapper = {
  serializedName: "SasTokenInformationListResult",
  type: {
    name: "Composite",
    className: "SasTokenInformationListResult",
    modelProperties: {
      value: {
        readOnly: true,
        serializedName: "",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "SasTokenInformation"
            }
          }
        }
      },
      nextLink: {
        readOnly: true,
        serializedName: "nextLink",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const ComputePolicyListResult: msRest.CompositeMapper = {
  serializedName: "ComputePolicyListResult",
  type: {
    name: "Composite",
    className: "ComputePolicyListResult",
    modelProperties: {
      value: {
        readOnly: true,
        serializedName: "",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "ComputePolicy"
            }
          }
        }
      },
      nextLink: {
        readOnly: true,
        serializedName: "nextLink",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const FirewallRuleListResult: msRest.CompositeMapper = {
  serializedName: "FirewallRuleListResult",
  type: {
    name: "Composite",
    className: "FirewallRuleListResult",
    modelProperties: {
      value: {
        readOnly: true,
        serializedName: "",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "FirewallRule"
            }
          }
        }
      },
      nextLink: {
        readOnly: true,
        serializedName: "nextLink",
        type: {
          name: "String"
        }
      }
    }
  }
};
