/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */

import * as coreAuth from "@azure/core-auth";
import {
  AccountsImpl,
  DataLakeStoreAccountsImpl,
  StorageAccountsImpl,
  ComputePoliciesImpl,
  FirewallRulesImpl,
  OperationsImpl,
  LocationsImpl
} from "./operations";
import {
  Accounts,
  DataLakeStoreAccounts,
  StorageAccounts,
  ComputePolicies,
  FirewallRules,
  Operations,
  Locations
} from "./operationsInterfaces";
import { DataLakeAnalyticsAccountManagementClientContext } from "./dataLakeAnalyticsAccountManagementClientContext";
import { DataLakeAnalyticsAccountManagementClientOptionalParams } from "./models";

export class DataLakeAnalyticsAccountManagementClient extends DataLakeAnalyticsAccountManagementClientContext {
  /**
   * Initializes a new instance of the DataLakeAnalyticsAccountManagementClient class.
   * @param credentials Subscription credentials which uniquely identify client subscription.
   * @param subscriptionId Get subscription credentials which uniquely identify Microsoft Azure
   *                       subscription. The subscription ID forms part of the URI for every service call.
   * @param options The parameter options
   */
  constructor(
    credentials: coreAuth.TokenCredential,
    subscriptionId: string,
    options?: DataLakeAnalyticsAccountManagementClientOptionalParams
  ) {
    super(credentials, subscriptionId, options);
    this.accounts = new AccountsImpl(this);
    this.dataLakeStoreAccounts = new DataLakeStoreAccountsImpl(this);
    this.storageAccounts = new StorageAccountsImpl(this);
    this.computePolicies = new ComputePoliciesImpl(this);
    this.firewallRules = new FirewallRulesImpl(this);
    this.operations = new OperationsImpl(this);
    this.locations = new LocationsImpl(this);
  }

  accounts: Accounts;
  dataLakeStoreAccounts: DataLakeStoreAccounts;
  storageAccounts: StorageAccounts;
  computePolicies: ComputePolicies;
  firewallRules: FirewallRules;
  operations: Operations;
  locations: Locations;
}
