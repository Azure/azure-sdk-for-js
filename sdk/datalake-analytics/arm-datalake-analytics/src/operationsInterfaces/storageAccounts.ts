/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */

import { PagedAsyncIterableIterator } from "@azure/core-paging";
import {
  StorageAccountInformation,
  StorageAccountsListByAccountOptionalParams,
  StorageContainer,
  StorageAccountsListStorageContainersOptionalParams,
  SasTokenInformation,
  StorageAccountsListSasTokensOptionalParams,
  AddStorageAccountParameters,
  StorageAccountsAddOptionalParams,
  StorageAccountsGetOptionalParams,
  StorageAccountsGetResponse,
  StorageAccountsUpdateOptionalParams,
  StorageAccountsDeleteOptionalParams,
  StorageAccountsGetStorageContainerOptionalParams,
  StorageAccountsGetStorageContainerResponse
} from "../models";

/// <reference lib="esnext.asynciterable" />
/** Interface representing a StorageAccounts. */
export interface StorageAccounts {
  /**
   * Gets the first page of Azure Storage accounts, if any, linked to the specified Data Lake Analytics
   * account. The response includes a link to the next page, if any.
   * @param resourceGroupName The name of the Azure resource group.
   * @param accountName The name of the Data Lake Analytics account.
   * @param options The options parameters.
   */
  listByAccount(
    resourceGroupName: string,
    accountName: string,
    options?: StorageAccountsListByAccountOptionalParams
  ): PagedAsyncIterableIterator<StorageAccountInformation>;
  /**
   * Lists the Azure Storage containers, if any, associated with the specified Data Lake Analytics and
   * Azure Storage account combination. The response includes a link to the next page of results, if any.
   * @param resourceGroupName The name of the Azure resource group.
   * @param accountName The name of the Data Lake Analytics account.
   * @param storageAccountName The name of the Azure storage account from which to list blob containers.
   * @param options The options parameters.
   */
  listStorageContainers(
    resourceGroupName: string,
    accountName: string,
    storageAccountName: string,
    options?: StorageAccountsListStorageContainersOptionalParams
  ): PagedAsyncIterableIterator<StorageContainer>;
  /**
   * Gets the SAS token associated with the specified Data Lake Analytics and Azure Storage account and
   * container combination.
   * @param resourceGroupName The name of the Azure resource group.
   * @param accountName The name of the Data Lake Analytics account.
   * @param storageAccountName The name of the Azure storage account for which the SAS token is being
   *                           requested.
   * @param containerName The name of the Azure storage container for which the SAS token is being
   *                      requested.
   * @param options The options parameters.
   */
  listSasTokens(
    resourceGroupName: string,
    accountName: string,
    storageAccountName: string,
    containerName: string,
    options?: StorageAccountsListSasTokensOptionalParams
  ): PagedAsyncIterableIterator<SasTokenInformation>;
  /**
   * Updates the specified Data Lake Analytics account to add an Azure Storage account.
   * @param resourceGroupName The name of the Azure resource group.
   * @param accountName The name of the Data Lake Analytics account.
   * @param storageAccountName The name of the Azure Storage account to add
   * @param parameters The parameters containing the access key and optional suffix for the Azure Storage
   *                   Account.
   * @param options The options parameters.
   */
  add(
    resourceGroupName: string,
    accountName: string,
    storageAccountName: string,
    parameters: AddStorageAccountParameters,
    options?: StorageAccountsAddOptionalParams
  ): Promise<void>;
  /**
   * Gets the specified Azure Storage account linked to the given Data Lake Analytics account.
   * @param resourceGroupName The name of the Azure resource group.
   * @param accountName The name of the Data Lake Analytics account.
   * @param storageAccountName The name of the Azure Storage account for which to retrieve the details.
   * @param options The options parameters.
   */
  get(
    resourceGroupName: string,
    accountName: string,
    storageAccountName: string,
    options?: StorageAccountsGetOptionalParams
  ): Promise<StorageAccountsGetResponse>;
  /**
   * Updates the Data Lake Analytics account to replace Azure Storage blob account details, such as the
   * access key and/or suffix.
   * @param resourceGroupName The name of the Azure resource group.
   * @param accountName The name of the Data Lake Analytics account.
   * @param storageAccountName The Azure Storage account to modify
   * @param options The options parameters.
   */
  update(
    resourceGroupName: string,
    accountName: string,
    storageAccountName: string,
    options?: StorageAccountsUpdateOptionalParams
  ): Promise<void>;
  /**
   * Updates the specified Data Lake Analytics account to remove an Azure Storage account.
   * @param resourceGroupName The name of the Azure resource group.
   * @param accountName The name of the Data Lake Analytics account.
   * @param storageAccountName The name of the Azure Storage account to remove
   * @param options The options parameters.
   */
  delete(
    resourceGroupName: string,
    accountName: string,
    storageAccountName: string,
    options?: StorageAccountsDeleteOptionalParams
  ): Promise<void>;
  /**
   * Gets the specified Azure Storage container associated with the given Data Lake Analytics and Azure
   * Storage accounts.
   * @param resourceGroupName The name of the Azure resource group.
   * @param accountName The name of the Data Lake Analytics account.
   * @param storageAccountName The name of the Azure storage account from which to retrieve the blob
   *                           container.
   * @param containerName The name of the Azure storage container to retrieve
   * @param options The options parameters.
   */
  getStorageContainer(
    resourceGroupName: string,
    accountName: string,
    storageAccountName: string,
    containerName: string,
    options?: StorageAccountsGetStorageContainerOptionalParams
  ): Promise<StorageAccountsGetStorageContainerResponse>;
}
