/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */

import { PagedAsyncIterableIterator } from "@azure/core-paging";
import { StorageAccounts } from "../operationsInterfaces";
import * as coreClient from "@azure/core-client";
import * as Mappers from "../models/mappers";
import * as Parameters from "../models/parameters";
import { DataLakeAnalyticsAccountManagementClient } from "../dataLakeAnalyticsAccountManagementClient";
import {
  StorageAccountInformation,
  StorageAccountsListByAccountNextOptionalParams,
  StorageAccountsListByAccountOptionalParams,
  StorageContainer,
  StorageAccountsListStorageContainersNextOptionalParams,
  StorageAccountsListStorageContainersOptionalParams,
  SasTokenInformation,
  StorageAccountsListSasTokensNextOptionalParams,
  StorageAccountsListSasTokensOptionalParams,
  StorageAccountsListByAccountResponse,
  AddStorageAccountParameters,
  StorageAccountsAddOptionalParams,
  StorageAccountsGetOptionalParams,
  StorageAccountsGetResponse,
  StorageAccountsUpdateOptionalParams,
  StorageAccountsDeleteOptionalParams,
  StorageAccountsListStorageContainersResponse,
  StorageAccountsGetStorageContainerOptionalParams,
  StorageAccountsGetStorageContainerResponse,
  StorageAccountsListSasTokensResponse,
  StorageAccountsListByAccountNextResponse,
  StorageAccountsListStorageContainersNextResponse,
  StorageAccountsListSasTokensNextResponse
} from "../models";

/// <reference lib="esnext.asynciterable" />
/** Class containing StorageAccounts operations. */
export class StorageAccountsImpl implements StorageAccounts {
  private readonly client: DataLakeAnalyticsAccountManagementClient;

  /**
   * Initialize a new instance of the class StorageAccounts class.
   * @param client Reference to the service client
   */
  constructor(client: DataLakeAnalyticsAccountManagementClient) {
    this.client = client;
  }

  /**
   * Gets the first page of Azure Storage accounts, if any, linked to the specified Data Lake Analytics
   * account. The response includes a link to the next page, if any.
   * @param resourceGroupName The name of the Azure resource group.
   * @param accountName The name of the Data Lake Analytics account.
   * @param options The options parameters.
   */
  public listByAccount(
    resourceGroupName: string,
    accountName: string,
    options?: StorageAccountsListByAccountOptionalParams
  ): PagedAsyncIterableIterator<StorageAccountInformation> {
    const iter = this.listByAccountPagingAll(
      resourceGroupName,
      accountName,
      options
    );
    return {
      next() {
        return iter.next();
      },
      [Symbol.asyncIterator]() {
        return this;
      },
      byPage: () => {
        return this.listByAccountPagingPage(
          resourceGroupName,
          accountName,
          options
        );
      }
    };
  }

  private async *listByAccountPagingPage(
    resourceGroupName: string,
    accountName: string,
    options?: StorageAccountsListByAccountOptionalParams
  ): AsyncIterableIterator<StorageAccountInformation[]> {
    let result = await this._listByAccount(
      resourceGroupName,
      accountName,
      options
    );
    yield result.value || [];
    let continuationToken = result.nextLink;
    while (continuationToken) {
      result = await this._listByAccountNext(
        resourceGroupName,
        accountName,
        continuationToken,
        options
      );
      continuationToken = result.nextLink;
      yield result.value || [];
    }
  }

  private async *listByAccountPagingAll(
    resourceGroupName: string,
    accountName: string,
    options?: StorageAccountsListByAccountOptionalParams
  ): AsyncIterableIterator<StorageAccountInformation> {
    for await (const page of this.listByAccountPagingPage(
      resourceGroupName,
      accountName,
      options
    )) {
      yield* page;
    }
  }

  /**
   * Lists the Azure Storage containers, if any, associated with the specified Data Lake Analytics and
   * Azure Storage account combination. The response includes a link to the next page of results, if any.
   * @param resourceGroupName The name of the Azure resource group.
   * @param accountName The name of the Data Lake Analytics account.
   * @param storageAccountName The name of the Azure storage account from which to list blob containers.
   * @param options The options parameters.
   */
  public listStorageContainers(
    resourceGroupName: string,
    accountName: string,
    storageAccountName: string,
    options?: StorageAccountsListStorageContainersOptionalParams
  ): PagedAsyncIterableIterator<StorageContainer> {
    const iter = this.listStorageContainersPagingAll(
      resourceGroupName,
      accountName,
      storageAccountName,
      options
    );
    return {
      next() {
        return iter.next();
      },
      [Symbol.asyncIterator]() {
        return this;
      },
      byPage: () => {
        return this.listStorageContainersPagingPage(
          resourceGroupName,
          accountName,
          storageAccountName,
          options
        );
      }
    };
  }

  private async *listStorageContainersPagingPage(
    resourceGroupName: string,
    accountName: string,
    storageAccountName: string,
    options?: StorageAccountsListStorageContainersOptionalParams
  ): AsyncIterableIterator<StorageContainer[]> {
    let result = await this._listStorageContainers(
      resourceGroupName,
      accountName,
      storageAccountName,
      options
    );
    yield result.value || [];
    let continuationToken = result.nextLink;
    while (continuationToken) {
      result = await this._listStorageContainersNext(
        resourceGroupName,
        accountName,
        storageAccountName,
        continuationToken,
        options
      );
      continuationToken = result.nextLink;
      yield result.value || [];
    }
  }

  private async *listStorageContainersPagingAll(
    resourceGroupName: string,
    accountName: string,
    storageAccountName: string,
    options?: StorageAccountsListStorageContainersOptionalParams
  ): AsyncIterableIterator<StorageContainer> {
    for await (const page of this.listStorageContainersPagingPage(
      resourceGroupName,
      accountName,
      storageAccountName,
      options
    )) {
      yield* page;
    }
  }

  /**
   * Gets the SAS token associated with the specified Data Lake Analytics and Azure Storage account and
   * container combination.
   * @param resourceGroupName The name of the Azure resource group.
   * @param accountName The name of the Data Lake Analytics account.
   * @param storageAccountName The name of the Azure storage account for which the SAS token is being
   *                           requested.
   * @param containerName The name of the Azure storage container for which the SAS token is being
   *                      requested.
   * @param options The options parameters.
   */
  public listSasTokens(
    resourceGroupName: string,
    accountName: string,
    storageAccountName: string,
    containerName: string,
    options?: StorageAccountsListSasTokensOptionalParams
  ): PagedAsyncIterableIterator<SasTokenInformation> {
    const iter = this.listSasTokensPagingAll(
      resourceGroupName,
      accountName,
      storageAccountName,
      containerName,
      options
    );
    return {
      next() {
        return iter.next();
      },
      [Symbol.asyncIterator]() {
        return this;
      },
      byPage: () => {
        return this.listSasTokensPagingPage(
          resourceGroupName,
          accountName,
          storageAccountName,
          containerName,
          options
        );
      }
    };
  }

  private async *listSasTokensPagingPage(
    resourceGroupName: string,
    accountName: string,
    storageAccountName: string,
    containerName: string,
    options?: StorageAccountsListSasTokensOptionalParams
  ): AsyncIterableIterator<SasTokenInformation[]> {
    let result = await this._listSasTokens(
      resourceGroupName,
      accountName,
      storageAccountName,
      containerName,
      options
    );
    yield result.value || [];
    let continuationToken = result.nextLink;
    while (continuationToken) {
      result = await this._listSasTokensNext(
        resourceGroupName,
        accountName,
        storageAccountName,
        containerName,
        continuationToken,
        options
      );
      continuationToken = result.nextLink;
      yield result.value || [];
    }
  }

  private async *listSasTokensPagingAll(
    resourceGroupName: string,
    accountName: string,
    storageAccountName: string,
    containerName: string,
    options?: StorageAccountsListSasTokensOptionalParams
  ): AsyncIterableIterator<SasTokenInformation> {
    for await (const page of this.listSasTokensPagingPage(
      resourceGroupName,
      accountName,
      storageAccountName,
      containerName,
      options
    )) {
      yield* page;
    }
  }

  /**
   * Gets the first page of Azure Storage accounts, if any, linked to the specified Data Lake Analytics
   * account. The response includes a link to the next page, if any.
   * @param resourceGroupName The name of the Azure resource group.
   * @param accountName The name of the Data Lake Analytics account.
   * @param options The options parameters.
   */
  private _listByAccount(
    resourceGroupName: string,
    accountName: string,
    options?: StorageAccountsListByAccountOptionalParams
  ): Promise<StorageAccountsListByAccountResponse> {
    return this.client.sendOperationRequest(
      { resourceGroupName, accountName, options },
      listByAccountOperationSpec
    );
  }

  /**
   * Updates the specified Data Lake Analytics account to add an Azure Storage account.
   * @param resourceGroupName The name of the Azure resource group.
   * @param accountName The name of the Data Lake Analytics account.
   * @param storageAccountName The name of the Azure Storage account to add
   * @param parameters The parameters containing the access key and optional suffix for the Azure Storage
   *                   Account.
   * @param options The options parameters.
   */
  add(
    resourceGroupName: string,
    accountName: string,
    storageAccountName: string,
    parameters: AddStorageAccountParameters,
    options?: StorageAccountsAddOptionalParams
  ): Promise<void> {
    return this.client.sendOperationRequest(
      {
        resourceGroupName,
        accountName,
        storageAccountName,
        parameters,
        options
      },
      addOperationSpec
    );
  }

  /**
   * Gets the specified Azure Storage account linked to the given Data Lake Analytics account.
   * @param resourceGroupName The name of the Azure resource group.
   * @param accountName The name of the Data Lake Analytics account.
   * @param storageAccountName The name of the Azure Storage account for which to retrieve the details.
   * @param options The options parameters.
   */
  get(
    resourceGroupName: string,
    accountName: string,
    storageAccountName: string,
    options?: StorageAccountsGetOptionalParams
  ): Promise<StorageAccountsGetResponse> {
    return this.client.sendOperationRequest(
      { resourceGroupName, accountName, storageAccountName, options },
      getOperationSpec
    );
  }

  /**
   * Updates the Data Lake Analytics account to replace Azure Storage blob account details, such as the
   * access key and/or suffix.
   * @param resourceGroupName The name of the Azure resource group.
   * @param accountName The name of the Data Lake Analytics account.
   * @param storageAccountName The Azure Storage account to modify
   * @param options The options parameters.
   */
  update(
    resourceGroupName: string,
    accountName: string,
    storageAccountName: string,
    options?: StorageAccountsUpdateOptionalParams
  ): Promise<void> {
    return this.client.sendOperationRequest(
      { resourceGroupName, accountName, storageAccountName, options },
      updateOperationSpec
    );
  }

  /**
   * Updates the specified Data Lake Analytics account to remove an Azure Storage account.
   * @param resourceGroupName The name of the Azure resource group.
   * @param accountName The name of the Data Lake Analytics account.
   * @param storageAccountName The name of the Azure Storage account to remove
   * @param options The options parameters.
   */
  delete(
    resourceGroupName: string,
    accountName: string,
    storageAccountName: string,
    options?: StorageAccountsDeleteOptionalParams
  ): Promise<void> {
    return this.client.sendOperationRequest(
      { resourceGroupName, accountName, storageAccountName, options },
      deleteOperationSpec
    );
  }

  /**
   * Lists the Azure Storage containers, if any, associated with the specified Data Lake Analytics and
   * Azure Storage account combination. The response includes a link to the next page of results, if any.
   * @param resourceGroupName The name of the Azure resource group.
   * @param accountName The name of the Data Lake Analytics account.
   * @param storageAccountName The name of the Azure storage account from which to list blob containers.
   * @param options The options parameters.
   */
  private _listStorageContainers(
    resourceGroupName: string,
    accountName: string,
    storageAccountName: string,
    options?: StorageAccountsListStorageContainersOptionalParams
  ): Promise<StorageAccountsListStorageContainersResponse> {
    return this.client.sendOperationRequest(
      { resourceGroupName, accountName, storageAccountName, options },
      listStorageContainersOperationSpec
    );
  }

  /**
   * Gets the specified Azure Storage container associated with the given Data Lake Analytics and Azure
   * Storage accounts.
   * @param resourceGroupName The name of the Azure resource group.
   * @param accountName The name of the Data Lake Analytics account.
   * @param storageAccountName The name of the Azure storage account from which to retrieve the blob
   *                           container.
   * @param containerName The name of the Azure storage container to retrieve
   * @param options The options parameters.
   */
  getStorageContainer(
    resourceGroupName: string,
    accountName: string,
    storageAccountName: string,
    containerName: string,
    options?: StorageAccountsGetStorageContainerOptionalParams
  ): Promise<StorageAccountsGetStorageContainerResponse> {
    return this.client.sendOperationRequest(
      {
        resourceGroupName,
        accountName,
        storageAccountName,
        containerName,
        options
      },
      getStorageContainerOperationSpec
    );
  }

  /**
   * Gets the SAS token associated with the specified Data Lake Analytics and Azure Storage account and
   * container combination.
   * @param resourceGroupName The name of the Azure resource group.
   * @param accountName The name of the Data Lake Analytics account.
   * @param storageAccountName The name of the Azure storage account for which the SAS token is being
   *                           requested.
   * @param containerName The name of the Azure storage container for which the SAS token is being
   *                      requested.
   * @param options The options parameters.
   */
  private _listSasTokens(
    resourceGroupName: string,
    accountName: string,
    storageAccountName: string,
    containerName: string,
    options?: StorageAccountsListSasTokensOptionalParams
  ): Promise<StorageAccountsListSasTokensResponse> {
    return this.client.sendOperationRequest(
      {
        resourceGroupName,
        accountName,
        storageAccountName,
        containerName,
        options
      },
      listSasTokensOperationSpec
    );
  }

  /**
   * ListByAccountNext
   * @param resourceGroupName The name of the Azure resource group.
   * @param accountName The name of the Data Lake Analytics account.
   * @param nextLink The nextLink from the previous successful call to the ListByAccount method.
   * @param options The options parameters.
   */
  private _listByAccountNext(
    resourceGroupName: string,
    accountName: string,
    nextLink: string,
    options?: StorageAccountsListByAccountNextOptionalParams
  ): Promise<StorageAccountsListByAccountNextResponse> {
    return this.client.sendOperationRequest(
      { resourceGroupName, accountName, nextLink, options },
      listByAccountNextOperationSpec
    );
  }

  /**
   * ListStorageContainersNext
   * @param resourceGroupName The name of the Azure resource group.
   * @param accountName The name of the Data Lake Analytics account.
   * @param storageAccountName The name of the Azure storage account from which to list blob containers.
   * @param nextLink The nextLink from the previous successful call to the ListStorageContainers method.
   * @param options The options parameters.
   */
  private _listStorageContainersNext(
    resourceGroupName: string,
    accountName: string,
    storageAccountName: string,
    nextLink: string,
    options?: StorageAccountsListStorageContainersNextOptionalParams
  ): Promise<StorageAccountsListStorageContainersNextResponse> {
    return this.client.sendOperationRequest(
      { resourceGroupName, accountName, storageAccountName, nextLink, options },
      listStorageContainersNextOperationSpec
    );
  }

  /**
   * ListSasTokensNext
   * @param resourceGroupName The name of the Azure resource group.
   * @param accountName The name of the Data Lake Analytics account.
   * @param storageAccountName The name of the Azure storage account for which the SAS token is being
   *                           requested.
   * @param containerName The name of the Azure storage container for which the SAS token is being
   *                      requested.
   * @param nextLink The nextLink from the previous successful call to the ListSasTokens method.
   * @param options The options parameters.
   */
  private _listSasTokensNext(
    resourceGroupName: string,
    accountName: string,
    storageAccountName: string,
    containerName: string,
    nextLink: string,
    options?: StorageAccountsListSasTokensNextOptionalParams
  ): Promise<StorageAccountsListSasTokensNextResponse> {
    return this.client.sendOperationRequest(
      {
        resourceGroupName,
        accountName,
        storageAccountName,
        containerName,
        nextLink,
        options
      },
      listSasTokensNextOperationSpec
    );
  }
}
// Operation Specifications
const serializer = coreClient.createSerializer(Mappers, /* isXml */ false);

const listByAccountOperationSpec: coreClient.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DataLakeAnalytics/accounts/{accountName}/storageAccounts",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.StorageAccountInformationListResult
    },
    default: {
      bodyMapper: Mappers.ErrorResponse
    }
  },
  queryParameters: [
    Parameters.filter,
    Parameters.top,
    Parameters.skip,
    Parameters.select,
    Parameters.orderby,
    Parameters.count,
    Parameters.apiVersion
  ],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.accountName
  ],
  headerParameters: [Parameters.accept],
  serializer
};
const addOperationSpec: coreClient.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DataLakeAnalytics/accounts/{accountName}/storageAccounts/{storageAccountName}",
  httpMethod: "PUT",
  responses: {
    200: {},
    default: {
      bodyMapper: Mappers.ErrorResponse
    }
  },
  requestBody: Parameters.parameters4,
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.accountName,
    Parameters.storageAccountName
  ],
  headerParameters: [Parameters.accept, Parameters.contentType],
  mediaType: "json",
  serializer
};
const getOperationSpec: coreClient.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DataLakeAnalytics/accounts/{accountName}/storageAccounts/{storageAccountName}",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.StorageAccountInformation
    },
    default: {
      bodyMapper: Mappers.ErrorResponse
    }
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.accountName,
    Parameters.storageAccountName
  ],
  headerParameters: [Parameters.accept],
  serializer
};
const updateOperationSpec: coreClient.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DataLakeAnalytics/accounts/{accountName}/storageAccounts/{storageAccountName}",
  httpMethod: "PATCH",
  responses: {
    200: {},
    default: {
      bodyMapper: Mappers.ErrorResponse
    }
  },
  requestBody: Parameters.parameters5,
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.accountName,
    Parameters.storageAccountName
  ],
  headerParameters: [Parameters.accept, Parameters.contentType],
  mediaType: "json",
  serializer
};
const deleteOperationSpec: coreClient.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DataLakeAnalytics/accounts/{accountName}/storageAccounts/{storageAccountName}",
  httpMethod: "DELETE",
  responses: {
    200: {},
    default: {
      bodyMapper: Mappers.ErrorResponse
    }
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.accountName,
    Parameters.storageAccountName
  ],
  headerParameters: [Parameters.accept],
  serializer
};
const listStorageContainersOperationSpec: coreClient.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DataLakeAnalytics/accounts/{accountName}/storageAccounts/{storageAccountName}/containers",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.StorageContainerListResult
    },
    default: {
      bodyMapper: Mappers.ErrorResponse
    }
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.accountName,
    Parameters.storageAccountName
  ],
  headerParameters: [Parameters.accept],
  serializer
};
const getStorageContainerOperationSpec: coreClient.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DataLakeAnalytics/accounts/{accountName}/storageAccounts/{storageAccountName}/containers/{containerName}",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.StorageContainer
    },
    default: {
      bodyMapper: Mappers.ErrorResponse
    }
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.accountName,
    Parameters.storageAccountName,
    Parameters.containerName
  ],
  headerParameters: [Parameters.accept],
  serializer
};
const listSasTokensOperationSpec: coreClient.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DataLakeAnalytics/accounts/{accountName}/storageAccounts/{storageAccountName}/containers/{containerName}/listSasTokens",
  httpMethod: "POST",
  responses: {
    200: {
      bodyMapper: Mappers.SasTokenInformationListResult
    },
    default: {
      bodyMapper: Mappers.ErrorResponse
    }
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.accountName,
    Parameters.storageAccountName,
    Parameters.containerName
  ],
  headerParameters: [Parameters.accept],
  serializer
};
const listByAccountNextOperationSpec: coreClient.OperationSpec = {
  path: "{nextLink}",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.StorageAccountInformationListResult
    },
    default: {
      bodyMapper: Mappers.ErrorResponse
    }
  },
  queryParameters: [
    Parameters.filter,
    Parameters.top,
    Parameters.skip,
    Parameters.select,
    Parameters.orderby,
    Parameters.count,
    Parameters.apiVersion
  ],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.accountName,
    Parameters.nextLink
  ],
  headerParameters: [Parameters.accept],
  serializer
};
const listStorageContainersNextOperationSpec: coreClient.OperationSpec = {
  path: "{nextLink}",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.StorageContainerListResult
    },
    default: {
      bodyMapper: Mappers.ErrorResponse
    }
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.accountName,
    Parameters.nextLink,
    Parameters.storageAccountName
  ],
  headerParameters: [Parameters.accept],
  serializer
};
const listSasTokensNextOperationSpec: coreClient.OperationSpec = {
  path: "{nextLink}",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.SasTokenInformationListResult
    },
    default: {
      bodyMapper: Mappers.ErrorResponse
    }
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.accountName,
    Parameters.nextLink,
    Parameters.storageAccountName,
    Parameters.containerName
  ],
  headerParameters: [Parameters.accept],
  serializer
};
