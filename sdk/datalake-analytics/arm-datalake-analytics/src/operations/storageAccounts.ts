/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is
 * regenerated.
 */

import * as msRest from "@azure/ms-rest-js";
import * as Models from "../models";
import * as Mappers from "../models/storageAccountsMappers";
import * as Parameters from "../models/parameters";
import { DataLakeAnalyticsAccountManagementClientContext } from "../dataLakeAnalyticsAccountManagementClientContext";

/** Class representing a StorageAccounts. */
export class StorageAccounts {
  private readonly client: DataLakeAnalyticsAccountManagementClientContext;

  /**
   * Create a StorageAccounts.
   * @param {DataLakeAnalyticsAccountManagementClientContext} client Reference to the service client.
   */
  constructor(client: DataLakeAnalyticsAccountManagementClientContext) {
    this.client = client;
  }

  /**
   * Gets the first page of Azure Storage accounts, if any, linked to the specified Data Lake
   * Analytics account. The response includes a link to the next page, if any.
   * @param resourceGroupName The name of the Azure resource group.
   * @param accountName The name of the Data Lake Analytics account.
   * @param [options] The optional parameters
   * @returns Promise<Models.StorageAccountsListByAccountResponse>
   */
  listByAccount(resourceGroupName: string, accountName: string, options?: Models.StorageAccountsListByAccountOptionalParams): Promise<Models.StorageAccountsListByAccountResponse>;
  /**
   * @param resourceGroupName The name of the Azure resource group.
   * @param accountName The name of the Data Lake Analytics account.
   * @param callback The callback
   */
  listByAccount(resourceGroupName: string, accountName: string, callback: msRest.ServiceCallback<Models.StorageAccountInformationListResult>): void;
  /**
   * @param resourceGroupName The name of the Azure resource group.
   * @param accountName The name of the Data Lake Analytics account.
   * @param options The optional parameters
   * @param callback The callback
   */
  listByAccount(resourceGroupName: string, accountName: string, options: Models.StorageAccountsListByAccountOptionalParams, callback: msRest.ServiceCallback<Models.StorageAccountInformationListResult>): void;
  listByAccount(resourceGroupName: string, accountName: string, options?: Models.StorageAccountsListByAccountOptionalParams | msRest.ServiceCallback<Models.StorageAccountInformationListResult>, callback?: msRest.ServiceCallback<Models.StorageAccountInformationListResult>): Promise<Models.StorageAccountsListByAccountResponse> {
    return this.client.sendOperationRequest(
      {
        resourceGroupName,
        accountName,
        options
      },
      listByAccountOperationSpec,
      callback) as Promise<Models.StorageAccountsListByAccountResponse>;
  }

  /**
   * Updates the specified Data Lake Analytics account to add an Azure Storage account.
   * @param resourceGroupName The name of the Azure resource group.
   * @param accountName The name of the Data Lake Analytics account.
   * @param storageAccountName The name of the Azure Storage account to add
   * @param parameters The parameters containing the access key and optional suffix for the Azure
   * Storage Account.
   * @param [options] The optional parameters
   * @returns Promise<msRest.RestResponse>
   */
  add(resourceGroupName: string, accountName: string, storageAccountName: string, parameters: Models.AddStorageAccountParameters, options?: msRest.RequestOptionsBase): Promise<msRest.RestResponse>;
  /**
   * @param resourceGroupName The name of the Azure resource group.
   * @param accountName The name of the Data Lake Analytics account.
   * @param storageAccountName The name of the Azure Storage account to add
   * @param parameters The parameters containing the access key and optional suffix for the Azure
   * Storage Account.
   * @param callback The callback
   */
  add(resourceGroupName: string, accountName: string, storageAccountName: string, parameters: Models.AddStorageAccountParameters, callback: msRest.ServiceCallback<void>): void;
  /**
   * @param resourceGroupName The name of the Azure resource group.
   * @param accountName The name of the Data Lake Analytics account.
   * @param storageAccountName The name of the Azure Storage account to add
   * @param parameters The parameters containing the access key and optional suffix for the Azure
   * Storage Account.
   * @param options The optional parameters
   * @param callback The callback
   */
  add(resourceGroupName: string, accountName: string, storageAccountName: string, parameters: Models.AddStorageAccountParameters, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<void>): void;
  add(resourceGroupName: string, accountName: string, storageAccountName: string, parameters: Models.AddStorageAccountParameters, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<void>, callback?: msRest.ServiceCallback<void>): Promise<msRest.RestResponse> {
    return this.client.sendOperationRequest(
      {
        resourceGroupName,
        accountName,
        storageAccountName,
        parameters,
        options
      },
      addOperationSpec,
      callback);
  }

  /**
   * Gets the specified Azure Storage account linked to the given Data Lake Analytics account.
   * @param resourceGroupName The name of the Azure resource group.
   * @param accountName The name of the Data Lake Analytics account.
   * @param storageAccountName The name of the Azure Storage account for which to retrieve the
   * details.
   * @param [options] The optional parameters
   * @returns Promise<Models.StorageAccountsGetResponse>
   */
  get(resourceGroupName: string, accountName: string, storageAccountName: string, options?: msRest.RequestOptionsBase): Promise<Models.StorageAccountsGetResponse>;
  /**
   * @param resourceGroupName The name of the Azure resource group.
   * @param accountName The name of the Data Lake Analytics account.
   * @param storageAccountName The name of the Azure Storage account for which to retrieve the
   * details.
   * @param callback The callback
   */
  get(resourceGroupName: string, accountName: string, storageAccountName: string, callback: msRest.ServiceCallback<Models.StorageAccountInformation>): void;
  /**
   * @param resourceGroupName The name of the Azure resource group.
   * @param accountName The name of the Data Lake Analytics account.
   * @param storageAccountName The name of the Azure Storage account for which to retrieve the
   * details.
   * @param options The optional parameters
   * @param callback The callback
   */
  get(resourceGroupName: string, accountName: string, storageAccountName: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.StorageAccountInformation>): void;
  get(resourceGroupName: string, accountName: string, storageAccountName: string, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<Models.StorageAccountInformation>, callback?: msRest.ServiceCallback<Models.StorageAccountInformation>): Promise<Models.StorageAccountsGetResponse> {
    return this.client.sendOperationRequest(
      {
        resourceGroupName,
        accountName,
        storageAccountName,
        options
      },
      getOperationSpec,
      callback) as Promise<Models.StorageAccountsGetResponse>;
  }

  /**
   * Updates the Data Lake Analytics account to replace Azure Storage blob account details, such as
   * the access key and/or suffix.
   * @param resourceGroupName The name of the Azure resource group.
   * @param accountName The name of the Data Lake Analytics account.
   * @param storageAccountName The Azure Storage account to modify
   * @param [options] The optional parameters
   * @returns Promise<msRest.RestResponse>
   */
  update(resourceGroupName: string, accountName: string, storageAccountName: string, options?: Models.StorageAccountsUpdateOptionalParams): Promise<msRest.RestResponse>;
  /**
   * @param resourceGroupName The name of the Azure resource group.
   * @param accountName The name of the Data Lake Analytics account.
   * @param storageAccountName The Azure Storage account to modify
   * @param callback The callback
   */
  update(resourceGroupName: string, accountName: string, storageAccountName: string, callback: msRest.ServiceCallback<void>): void;
  /**
   * @param resourceGroupName The name of the Azure resource group.
   * @param accountName The name of the Data Lake Analytics account.
   * @param storageAccountName The Azure Storage account to modify
   * @param options The optional parameters
   * @param callback The callback
   */
  update(resourceGroupName: string, accountName: string, storageAccountName: string, options: Models.StorageAccountsUpdateOptionalParams, callback: msRest.ServiceCallback<void>): void;
  update(resourceGroupName: string, accountName: string, storageAccountName: string, options?: Models.StorageAccountsUpdateOptionalParams | msRest.ServiceCallback<void>, callback?: msRest.ServiceCallback<void>): Promise<msRest.RestResponse> {
    return this.client.sendOperationRequest(
      {
        resourceGroupName,
        accountName,
        storageAccountName,
        options
      },
      updateOperationSpec,
      callback);
  }

  /**
   * Updates the specified Data Lake Analytics account to remove an Azure Storage account.
   * @param resourceGroupName The name of the Azure resource group.
   * @param accountName The name of the Data Lake Analytics account.
   * @param storageAccountName The name of the Azure Storage account to remove
   * @param [options] The optional parameters
   * @returns Promise<msRest.RestResponse>
   */
  deleteMethod(resourceGroupName: string, accountName: string, storageAccountName: string, options?: msRest.RequestOptionsBase): Promise<msRest.RestResponse>;
  /**
   * @param resourceGroupName The name of the Azure resource group.
   * @param accountName The name of the Data Lake Analytics account.
   * @param storageAccountName The name of the Azure Storage account to remove
   * @param callback The callback
   */
  deleteMethod(resourceGroupName: string, accountName: string, storageAccountName: string, callback: msRest.ServiceCallback<void>): void;
  /**
   * @param resourceGroupName The name of the Azure resource group.
   * @param accountName The name of the Data Lake Analytics account.
   * @param storageAccountName The name of the Azure Storage account to remove
   * @param options The optional parameters
   * @param callback The callback
   */
  deleteMethod(resourceGroupName: string, accountName: string, storageAccountName: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<void>): void;
  deleteMethod(resourceGroupName: string, accountName: string, storageAccountName: string, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<void>, callback?: msRest.ServiceCallback<void>): Promise<msRest.RestResponse> {
    return this.client.sendOperationRequest(
      {
        resourceGroupName,
        accountName,
        storageAccountName,
        options
      },
      deleteMethodOperationSpec,
      callback);
  }

  /**
   * Lists the Azure Storage containers, if any, associated with the specified Data Lake Analytics
   * and Azure Storage account combination. The response includes a link to the next page of results,
   * if any.
   * @param resourceGroupName The name of the Azure resource group.
   * @param accountName The name of the Data Lake Analytics account.
   * @param storageAccountName The name of the Azure storage account from which to list blob
   * containers.
   * @param [options] The optional parameters
   * @returns Promise<Models.StorageAccountsListStorageContainersResponse>
   */
  listStorageContainers(resourceGroupName: string, accountName: string, storageAccountName: string, options?: msRest.RequestOptionsBase): Promise<Models.StorageAccountsListStorageContainersResponse>;
  /**
   * @param resourceGroupName The name of the Azure resource group.
   * @param accountName The name of the Data Lake Analytics account.
   * @param storageAccountName The name of the Azure storage account from which to list blob
   * containers.
   * @param callback The callback
   */
  listStorageContainers(resourceGroupName: string, accountName: string, storageAccountName: string, callback: msRest.ServiceCallback<Models.StorageContainerListResult>): void;
  /**
   * @param resourceGroupName The name of the Azure resource group.
   * @param accountName The name of the Data Lake Analytics account.
   * @param storageAccountName The name of the Azure storage account from which to list blob
   * containers.
   * @param options The optional parameters
   * @param callback The callback
   */
  listStorageContainers(resourceGroupName: string, accountName: string, storageAccountName: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.StorageContainerListResult>): void;
  listStorageContainers(resourceGroupName: string, accountName: string, storageAccountName: string, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<Models.StorageContainerListResult>, callback?: msRest.ServiceCallback<Models.StorageContainerListResult>): Promise<Models.StorageAccountsListStorageContainersResponse> {
    return this.client.sendOperationRequest(
      {
        resourceGroupName,
        accountName,
        storageAccountName,
        options
      },
      listStorageContainersOperationSpec,
      callback) as Promise<Models.StorageAccountsListStorageContainersResponse>;
  }

  /**
   * Gets the specified Azure Storage container associated with the given Data Lake Analytics and
   * Azure Storage accounts.
   * @param resourceGroupName The name of the Azure resource group.
   * @param accountName The name of the Data Lake Analytics account.
   * @param storageAccountName The name of the Azure storage account from which to retrieve the blob
   * container.
   * @param containerName The name of the Azure storage container to retrieve
   * @param [options] The optional parameters
   * @returns Promise<Models.StorageAccountsGetStorageContainerResponse>
   */
  getStorageContainer(resourceGroupName: string, accountName: string, storageAccountName: string, containerName: string, options?: msRest.RequestOptionsBase): Promise<Models.StorageAccountsGetStorageContainerResponse>;
  /**
   * @param resourceGroupName The name of the Azure resource group.
   * @param accountName The name of the Data Lake Analytics account.
   * @param storageAccountName The name of the Azure storage account from which to retrieve the blob
   * container.
   * @param containerName The name of the Azure storage container to retrieve
   * @param callback The callback
   */
  getStorageContainer(resourceGroupName: string, accountName: string, storageAccountName: string, containerName: string, callback: msRest.ServiceCallback<Models.StorageContainer>): void;
  /**
   * @param resourceGroupName The name of the Azure resource group.
   * @param accountName The name of the Data Lake Analytics account.
   * @param storageAccountName The name of the Azure storage account from which to retrieve the blob
   * container.
   * @param containerName The name of the Azure storage container to retrieve
   * @param options The optional parameters
   * @param callback The callback
   */
  getStorageContainer(resourceGroupName: string, accountName: string, storageAccountName: string, containerName: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.StorageContainer>): void;
  getStorageContainer(resourceGroupName: string, accountName: string, storageAccountName: string, containerName: string, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<Models.StorageContainer>, callback?: msRest.ServiceCallback<Models.StorageContainer>): Promise<Models.StorageAccountsGetStorageContainerResponse> {
    return this.client.sendOperationRequest(
      {
        resourceGroupName,
        accountName,
        storageAccountName,
        containerName,
        options
      },
      getStorageContainerOperationSpec,
      callback) as Promise<Models.StorageAccountsGetStorageContainerResponse>;
  }

  /**
   * Gets the SAS token associated with the specified Data Lake Analytics and Azure Storage account
   * and container combination.
   * @param resourceGroupName The name of the Azure resource group.
   * @param accountName The name of the Data Lake Analytics account.
   * @param storageAccountName The name of the Azure storage account for which the SAS token is being
   * requested.
   * @param containerName The name of the Azure storage container for which the SAS token is being
   * requested.
   * @param [options] The optional parameters
   * @returns Promise<Models.StorageAccountsListSasTokensResponse>
   */
  listSasTokens(resourceGroupName: string, accountName: string, storageAccountName: string, containerName: string, options?: msRest.RequestOptionsBase): Promise<Models.StorageAccountsListSasTokensResponse>;
  /**
   * @param resourceGroupName The name of the Azure resource group.
   * @param accountName The name of the Data Lake Analytics account.
   * @param storageAccountName The name of the Azure storage account for which the SAS token is being
   * requested.
   * @param containerName The name of the Azure storage container for which the SAS token is being
   * requested.
   * @param callback The callback
   */
  listSasTokens(resourceGroupName: string, accountName: string, storageAccountName: string, containerName: string, callback: msRest.ServiceCallback<Models.SasTokenInformationListResult>): void;
  /**
   * @param resourceGroupName The name of the Azure resource group.
   * @param accountName The name of the Data Lake Analytics account.
   * @param storageAccountName The name of the Azure storage account for which the SAS token is being
   * requested.
   * @param containerName The name of the Azure storage container for which the SAS token is being
   * requested.
   * @param options The optional parameters
   * @param callback The callback
   */
  listSasTokens(resourceGroupName: string, accountName: string, storageAccountName: string, containerName: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.SasTokenInformationListResult>): void;
  listSasTokens(resourceGroupName: string, accountName: string, storageAccountName: string, containerName: string, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<Models.SasTokenInformationListResult>, callback?: msRest.ServiceCallback<Models.SasTokenInformationListResult>): Promise<Models.StorageAccountsListSasTokensResponse> {
    return this.client.sendOperationRequest(
      {
        resourceGroupName,
        accountName,
        storageAccountName,
        containerName,
        options
      },
      listSasTokensOperationSpec,
      callback) as Promise<Models.StorageAccountsListSasTokensResponse>;
  }

  /**
   * Gets the first page of Azure Storage accounts, if any, linked to the specified Data Lake
   * Analytics account. The response includes a link to the next page, if any.
   * @param nextPageLink The NextLink from the previous successful call to List operation.
   * @param [options] The optional parameters
   * @returns Promise<Models.StorageAccountsListByAccountNextResponse>
   */
  listByAccountNext(nextPageLink: string, options?: Models.StorageAccountsListByAccountNextOptionalParams): Promise<Models.StorageAccountsListByAccountNextResponse>;
  /**
   * @param nextPageLink The NextLink from the previous successful call to List operation.
   * @param callback The callback
   */
  listByAccountNext(nextPageLink: string, callback: msRest.ServiceCallback<Models.StorageAccountInformationListResult>): void;
  /**
   * @param nextPageLink The NextLink from the previous successful call to List operation.
   * @param options The optional parameters
   * @param callback The callback
   */
  listByAccountNext(nextPageLink: string, options: Models.StorageAccountsListByAccountNextOptionalParams, callback: msRest.ServiceCallback<Models.StorageAccountInformationListResult>): void;
  listByAccountNext(nextPageLink: string, options?: Models.StorageAccountsListByAccountNextOptionalParams | msRest.ServiceCallback<Models.StorageAccountInformationListResult>, callback?: msRest.ServiceCallback<Models.StorageAccountInformationListResult>): Promise<Models.StorageAccountsListByAccountNextResponse> {
    return this.client.sendOperationRequest(
      {
        nextPageLink,
        options
      },
      listByAccountNextOperationSpec,
      callback) as Promise<Models.StorageAccountsListByAccountNextResponse>;
  }

  /**
   * Lists the Azure Storage containers, if any, associated with the specified Data Lake Analytics
   * and Azure Storage account combination. The response includes a link to the next page of results,
   * if any.
   * @param nextPageLink The NextLink from the previous successful call to List operation.
   * @param [options] The optional parameters
   * @returns Promise<Models.StorageAccountsListStorageContainersNextResponse>
   */
  listStorageContainersNext(nextPageLink: string, options?: msRest.RequestOptionsBase): Promise<Models.StorageAccountsListStorageContainersNextResponse>;
  /**
   * @param nextPageLink The NextLink from the previous successful call to List operation.
   * @param callback The callback
   */
  listStorageContainersNext(nextPageLink: string, callback: msRest.ServiceCallback<Models.StorageContainerListResult>): void;
  /**
   * @param nextPageLink The NextLink from the previous successful call to List operation.
   * @param options The optional parameters
   * @param callback The callback
   */
  listStorageContainersNext(nextPageLink: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.StorageContainerListResult>): void;
  listStorageContainersNext(nextPageLink: string, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<Models.StorageContainerListResult>, callback?: msRest.ServiceCallback<Models.StorageContainerListResult>): Promise<Models.StorageAccountsListStorageContainersNextResponse> {
    return this.client.sendOperationRequest(
      {
        nextPageLink,
        options
      },
      listStorageContainersNextOperationSpec,
      callback) as Promise<Models.StorageAccountsListStorageContainersNextResponse>;
  }

  /**
   * Gets the SAS token associated with the specified Data Lake Analytics and Azure Storage account
   * and container combination.
   * @param nextPageLink The NextLink from the previous successful call to List operation.
   * @param [options] The optional parameters
   * @returns Promise<Models.StorageAccountsListSasTokensNextResponse>
   */
  listSasTokensNext(nextPageLink: string, options?: msRest.RequestOptionsBase): Promise<Models.StorageAccountsListSasTokensNextResponse>;
  /**
   * @param nextPageLink The NextLink from the previous successful call to List operation.
   * @param callback The callback
   */
  listSasTokensNext(nextPageLink: string, callback: msRest.ServiceCallback<Models.SasTokenInformationListResult>): void;
  /**
   * @param nextPageLink The NextLink from the previous successful call to List operation.
   * @param options The optional parameters
   * @param callback The callback
   */
  listSasTokensNext(nextPageLink: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.SasTokenInformationListResult>): void;
  listSasTokensNext(nextPageLink: string, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<Models.SasTokenInformationListResult>, callback?: msRest.ServiceCallback<Models.SasTokenInformationListResult>): Promise<Models.StorageAccountsListSasTokensNextResponse> {
    return this.client.sendOperationRequest(
      {
        nextPageLink,
        options
      },
      listSasTokensNextOperationSpec,
      callback) as Promise<Models.StorageAccountsListSasTokensNextResponse>;
  }
}

// Operation Specifications
const serializer = new msRest.Serializer(Mappers);
const listByAccountOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DataLakeAnalytics/accounts/{accountName}/storageAccounts",
  urlParameters: [
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.accountName
  ],
  queryParameters: [
    Parameters.filter,
    Parameters.top,
    Parameters.skip,
    Parameters.select,
    Parameters.orderby,
    Parameters.count,
    Parameters.apiVersion
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    200: {
      bodyMapper: Mappers.StorageAccountInformationListResult
    },
    default: {
      bodyMapper: Mappers.ErrorResponse
    }
  },
  serializer
};

const addOperationSpec: msRest.OperationSpec = {
  httpMethod: "PUT",
  path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DataLakeAnalytics/accounts/{accountName}/storageAccounts/{storageAccountName}",
  urlParameters: [
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.accountName,
    Parameters.storageAccountName
  ],
  queryParameters: [
    Parameters.apiVersion
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  requestBody: {
    parameterPath: "parameters",
    mapper: {
      ...Mappers.AddStorageAccountParameters,
      required: true
    }
  },
  responses: {
    200: {},
    default: {
      bodyMapper: Mappers.ErrorResponse
    }
  },
  serializer
};

const getOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DataLakeAnalytics/accounts/{accountName}/storageAccounts/{storageAccountName}",
  urlParameters: [
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.accountName,
    Parameters.storageAccountName
  ],
  queryParameters: [
    Parameters.apiVersion
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    200: {
      bodyMapper: Mappers.StorageAccountInformation
    },
    default: {
      bodyMapper: Mappers.ErrorResponse
    }
  },
  serializer
};

const updateOperationSpec: msRest.OperationSpec = {
  httpMethod: "PATCH",
  path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DataLakeAnalytics/accounts/{accountName}/storageAccounts/{storageAccountName}",
  urlParameters: [
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.accountName,
    Parameters.storageAccountName
  ],
  queryParameters: [
    Parameters.apiVersion
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  requestBody: {
    parameterPath: [
      "options",
      "parameters"
    ],
    mapper: Mappers.UpdateStorageAccountParameters
  },
  responses: {
    200: {},
    default: {
      bodyMapper: Mappers.ErrorResponse
    }
  },
  serializer
};

const deleteMethodOperationSpec: msRest.OperationSpec = {
  httpMethod: "DELETE",
  path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DataLakeAnalytics/accounts/{accountName}/storageAccounts/{storageAccountName}",
  urlParameters: [
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.accountName,
    Parameters.storageAccountName
  ],
  queryParameters: [
    Parameters.apiVersion
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    200: {},
    default: {
      bodyMapper: Mappers.ErrorResponse
    }
  },
  serializer
};

const listStorageContainersOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DataLakeAnalytics/accounts/{accountName}/storageAccounts/{storageAccountName}/containers",
  urlParameters: [
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.accountName,
    Parameters.storageAccountName
  ],
  queryParameters: [
    Parameters.apiVersion
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    200: {
      bodyMapper: Mappers.StorageContainerListResult
    },
    default: {
      bodyMapper: Mappers.ErrorResponse
    }
  },
  serializer
};

const getStorageContainerOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DataLakeAnalytics/accounts/{accountName}/storageAccounts/{storageAccountName}/containers/{containerName}",
  urlParameters: [
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.accountName,
    Parameters.storageAccountName,
    Parameters.containerName
  ],
  queryParameters: [
    Parameters.apiVersion
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    200: {
      bodyMapper: Mappers.StorageContainer
    },
    default: {
      bodyMapper: Mappers.ErrorResponse
    }
  },
  serializer
};

const listSasTokensOperationSpec: msRest.OperationSpec = {
  httpMethod: "POST",
  path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DataLakeAnalytics/accounts/{accountName}/storageAccounts/{storageAccountName}/containers/{containerName}/listSasTokens",
  urlParameters: [
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.accountName,
    Parameters.storageAccountName,
    Parameters.containerName
  ],
  queryParameters: [
    Parameters.apiVersion
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    200: {
      bodyMapper: Mappers.SasTokenInformationListResult
    },
    default: {
      bodyMapper: Mappers.ErrorResponse
    }
  },
  serializer
};

const listByAccountNextOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  baseUrl: "https://management.azure.com",
  path: "{nextLink}",
  urlParameters: [
    Parameters.nextPageLink
  ],
  queryParameters: [
    Parameters.filter,
    Parameters.top,
    Parameters.skip,
    Parameters.select,
    Parameters.orderby,
    Parameters.count,
    Parameters.apiVersion
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    200: {
      bodyMapper: Mappers.StorageAccountInformationListResult
    },
    default: {
      bodyMapper: Mappers.ErrorResponse
    }
  },
  serializer
};

const listStorageContainersNextOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  baseUrl: "https://management.azure.com",
  path: "{nextLink}",
  urlParameters: [
    Parameters.nextPageLink
  ],
  queryParameters: [
    Parameters.apiVersion
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    200: {
      bodyMapper: Mappers.StorageContainerListResult
    },
    default: {
      bodyMapper: Mappers.ErrorResponse
    }
  },
  serializer
};

const listSasTokensNextOperationSpec: msRest.OperationSpec = {
  httpMethod: "POST",
  baseUrl: "https://management.azure.com",
  path: "{nextLink}",
  urlParameters: [
    Parameters.nextPageLink
  ],
  queryParameters: [
    Parameters.apiVersion
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    200: {
      bodyMapper: Mappers.SasTokenInformationListResult
    },
    default: {
      bodyMapper: Mappers.ErrorResponse
    }
  },
  serializer
};
