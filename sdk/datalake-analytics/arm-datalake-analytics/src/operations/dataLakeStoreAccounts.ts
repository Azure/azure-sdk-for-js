/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is
 * regenerated.
 */

import * as msRest from "@azure/ms-rest-js";
import * as Models from "../models";
import * as Mappers from "../models/dataLakeStoreAccountsMappers";
import * as Parameters from "../models/parameters";
import { DataLakeAnalyticsAccountManagementClientContext } from "../dataLakeAnalyticsAccountManagementClientContext";

/** Class representing a DataLakeStoreAccounts. */
export class DataLakeStoreAccounts {
  private readonly client: DataLakeAnalyticsAccountManagementClientContext;

  /**
   * Create a DataLakeStoreAccounts.
   * @param {DataLakeAnalyticsAccountManagementClientContext} client Reference to the service client.
   */
  constructor(client: DataLakeAnalyticsAccountManagementClientContext) {
    this.client = client;
  }

  /**
   * Gets the first page of Data Lake Store accounts linked to the specified Data Lake Analytics
   * account. The response includes a link to the next page, if any.
   * @param resourceGroupName The name of the Azure resource group.
   * @param accountName The name of the Data Lake Analytics account.
   * @param [options] The optional parameters
   * @returns Promise<Models.DataLakeStoreAccountsListByAccountResponse>
   */
  listByAccount(resourceGroupName: string, accountName: string, options?: Models.DataLakeStoreAccountsListByAccountOptionalParams): Promise<Models.DataLakeStoreAccountsListByAccountResponse>;
  /**
   * @param resourceGroupName The name of the Azure resource group.
   * @param accountName The name of the Data Lake Analytics account.
   * @param callback The callback
   */
  listByAccount(resourceGroupName: string, accountName: string, callback: msRest.ServiceCallback<Models.DataLakeStoreAccountInformationListResult>): void;
  /**
   * @param resourceGroupName The name of the Azure resource group.
   * @param accountName The name of the Data Lake Analytics account.
   * @param options The optional parameters
   * @param callback The callback
   */
  listByAccount(resourceGroupName: string, accountName: string, options: Models.DataLakeStoreAccountsListByAccountOptionalParams, callback: msRest.ServiceCallback<Models.DataLakeStoreAccountInformationListResult>): void;
  listByAccount(resourceGroupName: string, accountName: string, options?: Models.DataLakeStoreAccountsListByAccountOptionalParams | msRest.ServiceCallback<Models.DataLakeStoreAccountInformationListResult>, callback?: msRest.ServiceCallback<Models.DataLakeStoreAccountInformationListResult>): Promise<Models.DataLakeStoreAccountsListByAccountResponse> {
    return this.client.sendOperationRequest(
      {
        resourceGroupName,
        accountName,
        options
      },
      listByAccountOperationSpec,
      callback) as Promise<Models.DataLakeStoreAccountsListByAccountResponse>;
  }

  /**
   * Updates the specified Data Lake Analytics account to include the additional Data Lake Store
   * account.
   * @param resourceGroupName The name of the Azure resource group.
   * @param accountName The name of the Data Lake Analytics account.
   * @param dataLakeStoreAccountName The name of the Data Lake Store account to add.
   * @param [options] The optional parameters
   * @returns Promise<msRest.RestResponse>
   */
  add(resourceGroupName: string, accountName: string, dataLakeStoreAccountName: string, options?: Models.DataLakeStoreAccountsAddOptionalParams): Promise<msRest.RestResponse>;
  /**
   * @param resourceGroupName The name of the Azure resource group.
   * @param accountName The name of the Data Lake Analytics account.
   * @param dataLakeStoreAccountName The name of the Data Lake Store account to add.
   * @param callback The callback
   */
  add(resourceGroupName: string, accountName: string, dataLakeStoreAccountName: string, callback: msRest.ServiceCallback<void>): void;
  /**
   * @param resourceGroupName The name of the Azure resource group.
   * @param accountName The name of the Data Lake Analytics account.
   * @param dataLakeStoreAccountName The name of the Data Lake Store account to add.
   * @param options The optional parameters
   * @param callback The callback
   */
  add(resourceGroupName: string, accountName: string, dataLakeStoreAccountName: string, options: Models.DataLakeStoreAccountsAddOptionalParams, callback: msRest.ServiceCallback<void>): void;
  add(resourceGroupName: string, accountName: string, dataLakeStoreAccountName: string, options?: Models.DataLakeStoreAccountsAddOptionalParams | msRest.ServiceCallback<void>, callback?: msRest.ServiceCallback<void>): Promise<msRest.RestResponse> {
    return this.client.sendOperationRequest(
      {
        resourceGroupName,
        accountName,
        dataLakeStoreAccountName,
        options
      },
      addOperationSpec,
      callback);
  }

  /**
   * Gets the specified Data Lake Store account details in the specified Data Lake Analytics account.
   * @param resourceGroupName The name of the Azure resource group.
   * @param accountName The name of the Data Lake Analytics account.
   * @param dataLakeStoreAccountName The name of the Data Lake Store account to retrieve
   * @param [options] The optional parameters
   * @returns Promise<Models.DataLakeStoreAccountsGetResponse>
   */
  get(resourceGroupName: string, accountName: string, dataLakeStoreAccountName: string, options?: msRest.RequestOptionsBase): Promise<Models.DataLakeStoreAccountsGetResponse>;
  /**
   * @param resourceGroupName The name of the Azure resource group.
   * @param accountName The name of the Data Lake Analytics account.
   * @param dataLakeStoreAccountName The name of the Data Lake Store account to retrieve
   * @param callback The callback
   */
  get(resourceGroupName: string, accountName: string, dataLakeStoreAccountName: string, callback: msRest.ServiceCallback<Models.DataLakeStoreAccountInformation>): void;
  /**
   * @param resourceGroupName The name of the Azure resource group.
   * @param accountName The name of the Data Lake Analytics account.
   * @param dataLakeStoreAccountName The name of the Data Lake Store account to retrieve
   * @param options The optional parameters
   * @param callback The callback
   */
  get(resourceGroupName: string, accountName: string, dataLakeStoreAccountName: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.DataLakeStoreAccountInformation>): void;
  get(resourceGroupName: string, accountName: string, dataLakeStoreAccountName: string, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<Models.DataLakeStoreAccountInformation>, callback?: msRest.ServiceCallback<Models.DataLakeStoreAccountInformation>): Promise<Models.DataLakeStoreAccountsGetResponse> {
    return this.client.sendOperationRequest(
      {
        resourceGroupName,
        accountName,
        dataLakeStoreAccountName,
        options
      },
      getOperationSpec,
      callback) as Promise<Models.DataLakeStoreAccountsGetResponse>;
  }

  /**
   * Updates the Data Lake Analytics account specified to remove the specified Data Lake Store
   * account.
   * @param resourceGroupName The name of the Azure resource group.
   * @param accountName The name of the Data Lake Analytics account.
   * @param dataLakeStoreAccountName The name of the Data Lake Store account to remove
   * @param [options] The optional parameters
   * @returns Promise<msRest.RestResponse>
   */
  deleteMethod(resourceGroupName: string, accountName: string, dataLakeStoreAccountName: string, options?: msRest.RequestOptionsBase): Promise<msRest.RestResponse>;
  /**
   * @param resourceGroupName The name of the Azure resource group.
   * @param accountName The name of the Data Lake Analytics account.
   * @param dataLakeStoreAccountName The name of the Data Lake Store account to remove
   * @param callback The callback
   */
  deleteMethod(resourceGroupName: string, accountName: string, dataLakeStoreAccountName: string, callback: msRest.ServiceCallback<void>): void;
  /**
   * @param resourceGroupName The name of the Azure resource group.
   * @param accountName The name of the Data Lake Analytics account.
   * @param dataLakeStoreAccountName The name of the Data Lake Store account to remove
   * @param options The optional parameters
   * @param callback The callback
   */
  deleteMethod(resourceGroupName: string, accountName: string, dataLakeStoreAccountName: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<void>): void;
  deleteMethod(resourceGroupName: string, accountName: string, dataLakeStoreAccountName: string, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<void>, callback?: msRest.ServiceCallback<void>): Promise<msRest.RestResponse> {
    return this.client.sendOperationRequest(
      {
        resourceGroupName,
        accountName,
        dataLakeStoreAccountName,
        options
      },
      deleteMethodOperationSpec,
      callback);
  }

  /**
   * Gets the first page of Data Lake Store accounts linked to the specified Data Lake Analytics
   * account. The response includes a link to the next page, if any.
   * @param nextPageLink The NextLink from the previous successful call to List operation.
   * @param [options] The optional parameters
   * @returns Promise<Models.DataLakeStoreAccountsListByAccountNextResponse>
   */
  listByAccountNext(nextPageLink: string, options?: Models.DataLakeStoreAccountsListByAccountNextOptionalParams): Promise<Models.DataLakeStoreAccountsListByAccountNextResponse>;
  /**
   * @param nextPageLink The NextLink from the previous successful call to List operation.
   * @param callback The callback
   */
  listByAccountNext(nextPageLink: string, callback: msRest.ServiceCallback<Models.DataLakeStoreAccountInformationListResult>): void;
  /**
   * @param nextPageLink The NextLink from the previous successful call to List operation.
   * @param options The optional parameters
   * @param callback The callback
   */
  listByAccountNext(nextPageLink: string, options: Models.DataLakeStoreAccountsListByAccountNextOptionalParams, callback: msRest.ServiceCallback<Models.DataLakeStoreAccountInformationListResult>): void;
  listByAccountNext(nextPageLink: string, options?: Models.DataLakeStoreAccountsListByAccountNextOptionalParams | msRest.ServiceCallback<Models.DataLakeStoreAccountInformationListResult>, callback?: msRest.ServiceCallback<Models.DataLakeStoreAccountInformationListResult>): Promise<Models.DataLakeStoreAccountsListByAccountNextResponse> {
    return this.client.sendOperationRequest(
      {
        nextPageLink,
        options
      },
      listByAccountNextOperationSpec,
      callback) as Promise<Models.DataLakeStoreAccountsListByAccountNextResponse>;
  }
}

// Operation Specifications
const serializer = new msRest.Serializer(Mappers);
const listByAccountOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DataLakeAnalytics/accounts/{accountName}/dataLakeStoreAccounts",
  urlParameters: [
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.accountName
  ],
  queryParameters: [
    Parameters.filter,
    Parameters.top,
    Parameters.skip,
    Parameters.select,
    Parameters.orderby,
    Parameters.count,
    Parameters.apiVersion
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    200: {
      bodyMapper: Mappers.DataLakeStoreAccountInformationListResult
    },
    default: {
      bodyMapper: Mappers.ErrorResponse
    }
  },
  serializer
};

const addOperationSpec: msRest.OperationSpec = {
  httpMethod: "PUT",
  path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DataLakeAnalytics/accounts/{accountName}/dataLakeStoreAccounts/{dataLakeStoreAccountName}",
  urlParameters: [
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.accountName,
    Parameters.dataLakeStoreAccountName
  ],
  queryParameters: [
    Parameters.apiVersion
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  requestBody: {
    parameterPath: [
      "options",
      "parameters"
    ],
    mapper: Mappers.AddDataLakeStoreParameters
  },
  responses: {
    200: {},
    default: {
      bodyMapper: Mappers.ErrorResponse
    }
  },
  serializer
};

const getOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DataLakeAnalytics/accounts/{accountName}/dataLakeStoreAccounts/{dataLakeStoreAccountName}",
  urlParameters: [
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.accountName,
    Parameters.dataLakeStoreAccountName
  ],
  queryParameters: [
    Parameters.apiVersion
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    200: {
      bodyMapper: Mappers.DataLakeStoreAccountInformation
    },
    default: {
      bodyMapper: Mappers.ErrorResponse
    }
  },
  serializer
};

const deleteMethodOperationSpec: msRest.OperationSpec = {
  httpMethod: "DELETE",
  path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DataLakeAnalytics/accounts/{accountName}/dataLakeStoreAccounts/{dataLakeStoreAccountName}",
  urlParameters: [
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.accountName,
    Parameters.dataLakeStoreAccountName
  ],
  queryParameters: [
    Parameters.apiVersion
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    200: {},
    default: {
      bodyMapper: Mappers.ErrorResponse
    }
  },
  serializer
};

const listByAccountNextOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  baseUrl: "https://management.azure.com",
  path: "{nextLink}",
  urlParameters: [
    Parameters.nextPageLink
  ],
  queryParameters: [
    Parameters.filter,
    Parameters.top,
    Parameters.skip,
    Parameters.select,
    Parameters.orderby,
    Parameters.count,
    Parameters.apiVersion
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    200: {
      bodyMapper: Mappers.DataLakeStoreAccountInformationListResult
    },
    default: {
      bodyMapper: Mappers.ErrorResponse
    }
  },
  serializer
};
