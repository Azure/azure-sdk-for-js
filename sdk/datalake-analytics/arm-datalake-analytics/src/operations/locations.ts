/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is
 * regenerated.
 */

import * as msRest from "@azure/ms-rest-js";
import * as Models from "../models";
import * as Mappers from "../models/locationsMappers";
import * as Parameters from "../models/parameters";
import { DataLakeAnalyticsAccountManagementClientContext } from "../dataLakeAnalyticsAccountManagementClientContext";

/** Class representing a Locations. */
export class Locations {
  private readonly client: DataLakeAnalyticsAccountManagementClientContext;

  /**
   * Create a Locations.
   * @param {DataLakeAnalyticsAccountManagementClientContext} client Reference to the service client.
   */
  constructor(client: DataLakeAnalyticsAccountManagementClientContext) {
    this.client = client;
  }

  /**
   * Gets subscription-level properties and limits for Data Lake Analytics specified by resource
   * location.
   * @param location The resource location without whitespace.
   * @param [options] The optional parameters
   * @returns Promise<Models.LocationsGetCapabilityResponse>
   */
  getCapability(location: string, options?: msRest.RequestOptionsBase): Promise<Models.LocationsGetCapabilityResponse>;
  /**
   * @param location The resource location without whitespace.
   * @param callback The callback
   */
  getCapability(location: string, callback: msRest.ServiceCallback<Models.CapabilityInformation>): void;
  /**
   * @param location The resource location without whitespace.
   * @param options The optional parameters
   * @param callback The callback
   */
  getCapability(location: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.CapabilityInformation>): void;
  getCapability(location: string, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<Models.CapabilityInformation>, callback?: msRest.ServiceCallback<Models.CapabilityInformation>): Promise<Models.LocationsGetCapabilityResponse> {
    return this.client.sendOperationRequest(
      {
        location,
        options
      },
      getCapabilityOperationSpec,
      callback) as Promise<Models.LocationsGetCapabilityResponse>;
  }
}

// Operation Specifications
const serializer = new msRest.Serializer(Mappers);
const getCapabilityOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "subscriptions/{subscriptionId}/providers/Microsoft.DataLakeAnalytics/locations/{location}/capability",
  urlParameters: [
    Parameters.subscriptionId,
    Parameters.location
  ],
  queryParameters: [
    Parameters.apiVersion
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    200: {
      bodyMapper: Mappers.CapabilityInformation
    },
    404: {},
    default: {
      bodyMapper: Mappers.ErrorResponse
    }
  },
  serializer
};
