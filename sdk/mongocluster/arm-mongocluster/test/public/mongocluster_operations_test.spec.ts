/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */

import {
  env,
  Recorder,
  isPlaybackMode,
} from "@azure-tools/test-recorder";
import { createTestCredential } from "@azure-tools/test-credential";
import { assert, beforeEach, afterEach, it, describe } from "vitest";
import { MongoClusterManagementClient } from "../../src/mongoClusterManagementClient.js"
import { createRecorder } from "./utils/recordedClient.js";

export const testPollingOptions = {
  updateIntervalInMs: isPlaybackMode() ? 0 : undefined,
};

describe("MongoCluster test", () => {
  let recorder: Recorder;
  let subscriptionId: string;
  let client: MongoClusterManagementClient;
  let location: string;
  let resourceGroup: string;
  let resourcename: string;

  beforeEach(async (context) => {
    process.env.SystemRoot = process.env.SystemRoot || "C:\\Windows";
    recorder = await createRecorder(context);
    subscriptionId = env.SUBSCRIPTION_ID || '';
    // This is an example of how the environment variables are used
    const credential = createTestCredential();
    client = new MongoClusterManagementClient(credential, recorder.configureClientOptions({}));
    location = "eastus";
    resourceGroup = "myjstest";
    resourcename = "resourcetest1";

  });

  afterEach(async function () {
    if (recorder?.recordingId) {
      await recorder.stop();
    }
  });

  it("mongoClusters create test", async function () {
    const res = await client.mongoClusters.createOrUpdate(
      subscriptionId,
      resourceGroup,
      resourcename,
      {
        location,
        properties: {
          administratorLogin: "mongoAdmin",
          administratorLoginPassword: "Password01!",
          nodeGroupSpecs: [
            {
              diskSizeGB: 128,
              enableHa: true,
              kind: "Shard",
              nodeCount: 1,
              sku: "M30",
            },
          ],
          serverVersion: "5.0",
        },
      },
      testPollingOptions);
    assert.equal(res.name, resourcename);
  });

  it("mongoClusters get test", async function () {
    const res = await client.mongoClusters.get(
      subscriptionId,
      resourceGroup,
      resourcename
    );
    assert.equal(res.name, resourcename);
  });

  it("mongoClusters list test", async function () {
    const resArray = new Array();
    for await (let item of client.mongoClusters.listByResourceGroup(subscriptionId, resourceGroup)) {
      resArray.push(item);
    }
    assert.equal(resArray.length, 1);
  });

  it("mongoClusters update test", async function () {
    const res = await client.mongoClusters.update(
      subscriptionId,
      resourceGroup,
      resourcename,
      {
        tags: {}
      }
    )
    assert.equal(res.name, resourcename);
  });

  it("mongoClusters delete test", async function () {
    const resArray = new Array();
    const res = await client.mongoClusters.delete(subscriptionId, resourceGroup, resourcename
    )
    for await (let item of client.mongoClusters.listByResourceGroup(subscriptionId, resourceGroup)) {
      resArray.push(item);
    }
    assert.equal(resArray.length, 0);
  });
})
