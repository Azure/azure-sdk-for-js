/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */

import {
  Recorder,
  isPlaybackMode,
} from "@azure-tools/test-recorder";
import { createTestCredential } from "@azure-tools/test-credential";
import { assert, beforeEach, afterEach, it, describe } from "vitest";
import { MongoClusterManagementClient } from "../../src/mongoClusterManagementClient.js"
import { createRecorder } from "./utils/recordedClient.js";
import { NetworkManagementClient } from "@azure/arm-network";
// import { setLogLevel } from "@azure/logger";
// setLogLevel("info");

export const testPollingOptions = {
  updateIntervalInMs: isPlaybackMode() ? 0 : undefined,
};

describe("MongoCluster test", () => {
  let recorder: Recorder;
  let subscriptionId: string;
  let client: MongoClusterManagementClient;
  let networkClient: NetworkManagementClient;
  let location: string;
  let resourceGroup: string;
  let resourcename: string;

  beforeEach(async (context) => {
    process.env.SystemRoot = process.env.SystemRoot || "C:\\Windows";
    recorder = await createRecorder(context);
    subscriptionId = "azure_subscription_id";
    // This is an example of how the environment variables are used
    const credential = createTestCredential();
    client = new MongoClusterManagementClient(credential, subscriptionId, recorder.configureClientOptions({}));
    networkClient = new NetworkManagementClient(credential, subscriptionId, recorder.configureClientOptions({}));
    location = "eastus";
    resourceGroup = "myjstest";
    resourcename = "resourcetest";
  });

  afterEach(async function () {
    if (recorder?.recordingId) {
      await recorder.stop();
    }
  });

  it("mongoClusters create test", async function () {
    /** *
     * The following code is incorrect and we just use it to reproduce this browser issue
     **/
    const poller = await client.mongoClusters.createOrUpdate(
      resourceGroup,
      resourcename,
      {
        location,
        properties: {
          administratorLogin: "mongoAdmin",
          administratorLoginPassword: "Password01!",
          nodeGroupSpecs: [
            {
              diskSizeGB: 128,
              enableHa: true,
              kind: "Shard",
              nodeCount: 1,
              sku: "M30",
            },
          ],
          serverVersion: "5.0",
        },
      },
      testPollingOptions);
    const res = await (poller as any).pollUntilDone();
    assert.equal(res.name, resourcename);
  });
});
