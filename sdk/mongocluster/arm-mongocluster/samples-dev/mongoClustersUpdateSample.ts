/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */

// Copyright (c) Microsoft Corporation.
// Licensed under the MIT License.
import {
  MongoClusterUpdate,
  MongoClusterManagementClient,
} from "@azure/arm-mongocluster";
import { DefaultAzureCredential } from "@azure/identity";
import * as dotenv from "dotenv";

dotenv.config();

/**
 * This sample demonstrates how to Updates an existing mongo cluster. The request body can contain one to many of the properties present in the normal mongo cluster definition.
 *
 * @summary Updates an existing mongo cluster. The request body can contain one to many of the properties present in the normal mongo cluster definition.
 * x-ms-original-file: specification/mongocluster/resource-manager/Microsoft.DocumentDB/preview/2024-03-01-preview/examples/MongoClusters_PatchPrivateNetworkAccess.json
 */
async function disablesPublicNetworkAccessOnAMongoClusterResourceWithAPrivateEndpointConnection() {
  const subscriptionId =
    process.env["MONGOCLUSTER_SUBSCRIPTION_ID"] ||
    "ffffffff-ffff-ffff-ffff-ffffffffffff";
  const resourceGroupName =
    process.env["MONGOCLUSTER_RESOURCE_GROUP"] || "TestResourceGroup";
  const mongoClusterName = "myMongoCluster";
  const properties: MongoClusterUpdate = {
    properties: { publicNetworkAccess: "Disabled" },
  };
  const credential = new DefaultAzureCredential();
  const client = new MongoClusterManagementClient(credential, subscriptionId);
  const result = await client.mongoClusters.beginUpdateAndWait(
    resourceGroupName,
    mongoClusterName,
    properties,
  );
  console.log(result);
}

/**
 * This sample demonstrates how to Updates an existing mongo cluster. The request body can contain one to many of the properties present in the normal mongo cluster definition.
 *
 * @summary Updates an existing mongo cluster. The request body can contain one to many of the properties present in the normal mongo cluster definition.
 * x-ms-original-file: specification/mongocluster/resource-manager/Microsoft.DocumentDB/preview/2024-03-01-preview/examples/MongoClusters_Update.json
 */
async function updatesAMongoClusterResource() {
  const subscriptionId =
    process.env["MONGOCLUSTER_SUBSCRIPTION_ID"] ||
    "ffffffff-ffff-ffff-ffff-ffffffffffff";
  const resourceGroupName =
    process.env["MONGOCLUSTER_RESOURCE_GROUP"] || "TestResourceGroup";
  const mongoClusterName = "myMongoCluster";
  const properties: MongoClusterUpdate = {
    properties: {
      administratorLogin: "mongoAdmin",
      administratorLoginPassword: "password",
      nodeGroupSpecs: [
        {
          diskSizeGB: 256,
          enableHa: true,
          kind: "Shard",
          nodeCount: 1,
          sku: "M50",
        },
      ],
      publicNetworkAccess: "Enabled",
      serverVersion: "5.0",
    },
  };
  const credential = new DefaultAzureCredential();
  const client = new MongoClusterManagementClient(credential, subscriptionId);
  const result = await client.mongoClusters.beginUpdateAndWait(
    resourceGroupName,
    mongoClusterName,
    properties,
  );
  console.log(result);
}

/**
 * This sample demonstrates how to Updates an existing mongo cluster. The request body can contain one to many of the properties present in the normal mongo cluster definition.
 *
 * @summary Updates an existing mongo cluster. The request body can contain one to many of the properties present in the normal mongo cluster definition.
 * x-ms-original-file: specification/mongocluster/resource-manager/Microsoft.DocumentDB/preview/2024-03-01-preview/examples/MongoClusters_PatchDiskSize.json
 */
async function updatesTheDiskSizeOnAMongoClusterResource() {
  const subscriptionId =
    process.env["MONGOCLUSTER_SUBSCRIPTION_ID"] ||
    "ffffffff-ffff-ffff-ffff-ffffffffffff";
  const resourceGroupName =
    process.env["MONGOCLUSTER_RESOURCE_GROUP"] || "TestResourceGroup";
  const mongoClusterName = "myMongoCluster";
  const properties: MongoClusterUpdate = {
    properties: { nodeGroupSpecs: [{ diskSizeGB: 256, kind: "Shard" }] },
  };
  const credential = new DefaultAzureCredential();
  const client = new MongoClusterManagementClient(credential, subscriptionId);
  const result = await client.mongoClusters.beginUpdateAndWait(
    resourceGroupName,
    mongoClusterName,
    properties,
  );
  console.log(result);
}

async function main() {
  disablesPublicNetworkAccessOnAMongoClusterResourceWithAPrivateEndpointConnection();
  updatesAMongoClusterResource();
  updatesTheDiskSizeOnAMongoClusterResource();
}

main().catch(console.error);
