{"version":3,"file":"cbs.js","sourceRoot":"","sources":["../../src/cbs.ts"],"names":[],"mappings":"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","sourcesContent":["// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT License.\n\nimport type { AbortSignalLike } from \"@azure/abort-controller\";\nimport { AbortError } from \"@azure/abort-controller\";\nimport type {\n  Connection,\n  EventContext,\n  ReceiverOptions,\n  Message as RheaMessage,\n  SenderOptions,\n} from \"rhea-promise\";\nimport { ReceiverEvents, SenderEvents, generate_uuid } from \"rhea-promise\";\nimport { logErrorStackTrace, logger } from \"./log.js\";\nimport { Constants } from \"./util/constants.js\";\nimport { RequestResponseLink } from \"./requestResponseLink.js\";\nimport { StandardAbortMessage } from \"./util/constants.js\";\nimport type { TokenType } from \"./auth/token.js\";\nimport { defaultCancellableLock } from \"./util/utils.js\";\nimport { isError } from \"@azure/core-util\";\nimport { translate } from \"./errors.js\";\n\n/**\n * Describes the CBS Response.\n */\nexport interface CbsResponse {\n  correlationId: string;\n  statusCode: string;\n  statusDescription: string;\n}\n\n/**\n * Describes the EventHub/ServiceBus Cbs client that talks to the $cbs endpoint over AMQP connection.\n */\nexport class CbsClient {\n  /**\n   * CBS endpoint - \"$cbs\"\n   */\n  readonly endpoint: string = Constants.cbsEndpoint;\n  /**\n   * CBS replyTo - The receiver link name that the service should reply to.\n   */\n  readonly replyTo: string = `${Constants.cbsReplyTo}-${generate_uuid()}`;\n  /**\n   * The unique lock name per $cbs session per connection that is used to\n   * acquire the lock for establishing a cbs session if one does not exist for an amqp connection.\n   */\n  readonly cbsLock: string = `${Constants.negotiateCbsKey}-${generate_uuid()}`;\n  /**\n   * The unique lock name per connection that is used to\n   * acquire the lock for establishing an amqp connection if one does not exist.\n   */\n  readonly connectionLock: string;\n  /**\n   * The AMQP connection.\n   */\n  connection: Connection;\n\n  /**\n   * CBS sender, receiver on the same session.\n   */\n  private _cbsSenderReceiverLink?: RequestResponseLink;\n\n  /**\n   * @param connection - The AMQP connection.\n   * @param connectionLock - A unique string (usually a guid) per connection.\n   */\n  constructor(connection: Connection, connectionLock: string) {\n    this.connection = connection;\n    this.connectionLock = connectionLock;\n  }\n\n  /**\n   * Creates a singleton instance of the CBS session if it hasn't been initialized previously on\n   * the given connection.\n   * @param options - Optional parameters that can be used to affect this method's behavior.\n   *    For example, `abortSignal` can be passed to allow cancelling an in-progress `init` invocation.\n   * @returns Promise<void>.\n   */\n  async init(options: { abortSignal?: AbortSignalLike; timeoutInMs?: number } = {}): Promise<void> {\n    const { abortSignal, timeoutInMs } = options;\n\n    try {\n      if (abortSignal?.aborted) {\n        throw new AbortError(StandardAbortMessage);\n      }\n\n      // Acquire the lock and establish an amqp connection if it does not exist.\n      if (!this.connection.isOpen()) {\n        logger.verbose(\"The CBS client is trying to establish an AMQP connection.\");\n        await defaultCancellableLock.acquire(\n          this.connectionLock,\n          () => {\n            return this.connection.open({ abortSignal });\n          },\n          { abortSignal: abortSignal, timeoutInMs: timeoutInMs },\n        );\n      }\n\n      if (!this.isOpen()) {\n        const rxOpt: ReceiverOptions = {\n          source: {\n            address: this.endpoint,\n          },\n          name: this.replyTo,\n          onSessionError: (context: EventContext) => {\n            const id = context.connection.options.id;\n            const ehError = translate(context.session!.error!);\n            logger.verbose(\n              \"[%s] An error occurred on the session for request/response links \" + \"for $cbs: %O\",\n              id,\n              ehError,\n            );\n          },\n        };\n        const srOpt: SenderOptions = { target: { address: this.endpoint } };\n        logger.verbose(\n          \"[%s] Creating sender/receiver links on a session for $cbs endpoint.\",\n          this.connection.id,\n        );\n        this._cbsSenderReceiverLink = await RequestResponseLink.create(\n          this.connection,\n          srOpt,\n          rxOpt,\n          { abortSignal },\n        );\n        this._cbsSenderReceiverLink.sender.on(SenderEvents.senderError, (context: EventContext) => {\n          const id = context.connection.options.id;\n          const ehError = translate(context.sender!.error!);\n          logger.verbose(\"[%s] An error occurred on the cbs sender link.. %O\", id, ehError);\n        });\n        this._cbsSenderReceiverLink.receiver.on(\n          ReceiverEvents.receiverError,\n          (context: EventContext) => {\n            const id = context.connection.options.id;\n            const ehError = translate(context.receiver!.error!);\n            logger.verbose(\"[%s] An error occurred on the cbs receiver link.. %O\", id, ehError);\n          },\n        );\n        logger.verbose(\n          \"[%s] Successfully created the cbs sender '%s' and receiver '%s' \" +\n            \"links over cbs session.\",\n          this.connection.id,\n          this._cbsSenderReceiverLink.sender.name,\n          this._cbsSenderReceiverLink.receiver.name,\n        );\n      } else {\n        logger.verbose(\n          \"[%s] CBS session is already present. Reusing the cbs sender '%s' \" +\n            \"and receiver '%s' links over cbs session.\",\n          this.connection.id,\n          this._cbsSenderReceiverLink!.sender.name,\n          this._cbsSenderReceiverLink!.receiver.name,\n        );\n      }\n    } catch (err) {\n      const translatedError = translate(err);\n      logger.warning(\n        \"[%s] An error occurred while establishing the cbs links: %s\",\n        this.connection.id,\n        `${translatedError?.name}: ${translatedError?.message}`,\n      );\n      logErrorStackTrace(translatedError);\n      throw translatedError;\n    }\n  }\n\n  /**\n   * Negotiates the CBS claim with the EventHub/ServiceBus Service.\n   * @param audience - The entity token audience for which the token is requested in one\n   * of the following forms:\n   *\n   * - **ServiceBus**\n   *    - **Sender**\n   *        - `\"sb://<yournamespace>.servicebus.windows.net/<queue-name>\"`\n   *        - `\"sb://<yournamespace>.servicebus.windows.net/<topic-name>\"`\n   *\n   *    - **Receiver**\n   *         - `\"sb://<yournamespace>.servicebus.windows.net/<queue-name>\"`\n   *         - `\"sb://<yournamespace>.servicebus.windows.net/<topic-name>\"`\n   *\n   *    - **ManagementClient**\n   *         - `\"sb://<your-namespace>.servicebus.windows.net/<queue-name>/$management\"`.\n   *         - `\"sb://<your-namespace>.servicebus.windows.net/<topic-name>/$management\"`.\n   *\n   * - **EventHubs**\n   *     - **Sender**\n   *          - `\"sb://<yournamespace>.servicebus.windows.net/<hubName>\"`\n   *          - `\"sb://<yournamespace>.servicebus.windows.net/<hubName>/Partitions/<partitionId>\"`.\n   *\n   *     - **Receiver**\n   *         - `\"sb://<your-namespace>.servicebus.windows.net/<event-hub-name>/ConsumerGroups/<consumer-group-name>/Partitions/<partition-id>\"`.\n   *\n   *     - **ManagementClient**\n   *         - `\"sb://<your-namespace>.servicebus.windows.net/<event-hub-name>/$management\"`.\n   * @param token - The token that needs to be sent in the put-token request.\n   * @param tokenType - The type of token being used. For example, 'jwt' or 'servicebus.windows.net:sastoken'.\n   * @param options - Optional parameters that can be used to affect this method's behavior.\n   *    For example, `abortSignal` can be passed to allow cancelling an in-progress `negotiateClaim` invocation.\n   * @returns A Promise that resolves when $cbs authentication is successful\n   * and rejects when an error occurs during $cbs authentication.\n   */\n  async negotiateClaim(\n    audience: string,\n    token: string,\n    tokenType: TokenType,\n    options: { abortSignal?: AbortSignalLike; timeoutInMs?: number } = {},\n  ): Promise<CbsResponse> {\n    const { abortSignal, timeoutInMs } = options;\n    try {\n      if (abortSignal?.aborted) {\n        throw new AbortError(StandardAbortMessage);\n      }\n\n      if (!this._cbsSenderReceiverLink) {\n        throw new Error(\"Attempted to negotiate a claim but the CBS link does not exist.\");\n      }\n\n      const request: RheaMessage = {\n        body: token,\n        message_id: generate_uuid(),\n        reply_to: this.replyTo,\n        to: this.endpoint,\n        application_properties: {\n          operation: Constants.operationPutToken,\n          name: audience,\n          type: tokenType,\n        },\n      };\n      const responseMessage = await this._cbsSenderReceiverLink.sendRequest(request, {\n        abortSignal,\n        timeoutInMs,\n        requestName: \"negotiateClaim\",\n      });\n      logger.verbose(\"[%s] The CBS response is: %O\", this.connection.id, responseMessage);\n      return this._fromRheaMessageResponse(responseMessage);\n    } catch (err) {\n      logger.warning(\n        \"[%s] An error occurred while negotiating the cbs claim: %s\",\n        this.connection.id,\n        isError(err) ? `${err.name}: ${err.message}` : String(err),\n      );\n      logErrorStackTrace(err);\n      throw err;\n    }\n  }\n\n  /**\n   * Closes the AMQP cbs session to the EventHub/ServiceBus for this client,\n   * returning a promise that will be resolved when disconnection is completed.\n   * @returns\n   */\n  async close(): Promise<void> {\n    try {\n      if (this.isOpen()) {\n        const cbsLink = this._cbsSenderReceiverLink;\n        this._cbsSenderReceiverLink = undefined;\n        await cbsLink!.close();\n        logger.verbose(\"[%s] Successfully closed the cbs session.\", this.connection.id);\n      }\n    } catch (err) {\n      const msg = `An error occurred while closing the cbs link: ${\n        isError(err) && err.stack ? err.stack : JSON.stringify(err)\n      }.`;\n      logger.verbose(\"[%s] %s\", this.connection.id, msg);\n      throw new Error(msg);\n    }\n  }\n\n  /**\n   * Removes the AMQP cbs session to the EventHub/ServiceBus for this client,\n   * @returns void\n   */\n  remove(): void {\n    try {\n      if (this._cbsSenderReceiverLink) {\n        const cbsLink = this._cbsSenderReceiverLink;\n        this._cbsSenderReceiverLink = undefined;\n        cbsLink!.remove();\n        logger.verbose(\"[%s] Successfully removed the cbs session.\", this.connection.id);\n      }\n    } catch (err) {\n      const msg = `An error occurred while removing the cbs link: ${\n        isError(err) && err.stack ? err.stack : JSON.stringify(err)\n      }.`;\n      logger.verbose(\"[%s] %s\", this.connection.id, msg);\n      throw new Error(msg);\n    }\n  }\n\n  /**\n   * Indicates whether the cbs sender receiver link is open or closed.\n   * @returns `true` open, `false` closed.\n   */\n  public isOpen(): boolean {\n    return Boolean(this._cbsSenderReceiverLink?.isOpen());\n  }\n\n  private _fromRheaMessageResponse(msg: RheaMessage): CbsResponse {\n    const cbsResponse = {\n      correlationId: msg.correlation_id! as string,\n      statusCode: msg.application_properties ? msg.application_properties[\"status-code\"] : \"\",\n      statusDescription: msg.application_properties\n        ? msg.application_properties[\"status-description\"]\n        : \"\",\n    };\n    logger.verbose(\"[%s] The deserialized CBS response is: %o\", this.connection.id, cbsResponse);\n    return cbsResponse;\n  }\n}\n"]}