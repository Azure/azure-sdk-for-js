{"version":3,"file":"tokenProvider.js","sourceRoot":"","sources":["../../../src/auth/tokenProvider.ts"],"names":[],"mappings":"AAAA,uCAAuC;AACvC,kCAAkC;AAGlC,OAAO,EAAE,oBAAoB,EAAE,eAAe,EAAE,MAAM,kBAAkB,CAAC;AACzE,OAAO,EAAE,UAAU,EAAE,MAAM,uBAAuB,CAAC;AAqBnD;;;;GAIG;AACH,MAAM,UAAU,sBAAsB,CACpC,IAIiB;IAEjB,IAAI,oBAAoB,CAAC,IAAI,CAAC,IAAI,eAAe,CAAC,IAAI,CAAC,EAAE,CAAC;QACxD,OAAO,IAAI,oBAAoB,CAAC,IAAI,CAAC,CAAC;IACxC,CAAC;SAAM,IAAI,qBAAqB,IAAI,IAAI,IAAI,iBAAiB,IAAI,IAAI,EAAE,CAAC;QACtE,OAAO,IAAI,oBAAoB,CAAC,EAAE,IAAI,EAAE,IAAI,CAAC,mBAAmB,EAAE,GAAG,EAAE,IAAI,CAAC,eAAe,EAAE,CAAC,CAAC;IACjG,CAAC;SAAM,CAAC;QACN,OAAO,IAAI,oBAAoB,CAAC,EAAE,SAAS,EAAE,IAAI,CAAC,qBAAqB,EAAE,CAAC,CAAC;IAC7E,CAAC;AACH,CAAC;AAED;;;;;GAKG;AACH,MAAM,OAAO,oBAAoB;IAC/B;;OAEG;IACH,IAAI,kBAAkB;QACpB,OAAO,IAAI,CAAC;IACd,CAAC;IAOD;;;OAGG;IACH,YAAY,UAA8C;QACxD,IAAI,CAAC,WAAW,GAAG,UAAU,CAAC;IAChC,CAAC;IAED;;;OAGG;IACH,KAAK,CAAC,QAAQ,CAAC,QAAgB;QAC7B,IAAI,oBAAoB,CAAC,IAAI,CAAC,WAAW,CAAC,EAAE,CAAC;YAC3C,OAAO,WAAW,CAChB,IAAI,CAAC,WAAW,CAAC,IAAI,EACrB,IAAI,CAAC,WAAW,CAAC,GAAG,EACpB,IAAI,CAAC,KAAK,CAAC,IAAI,CAAC,GAAG,EAAE,GAAG,IAAI,CAAC,GAAG,IAAI,EACpC,QAAQ,CACT,CAAC;QACJ,CAAC;aAAM,CAAC;YACN,OAAO;gBACL,KAAK,EAAE,IAAI,CAAC,WAAW,CAAC,SAAS;gBACjC,kBAAkB,EAAE,CAAC;aACtB,CAAC;QACJ,CAAC;IACH,CAAC;CACF;AAED;;;;;;;GAOG;AACH,KAAK,UAAU,WAAW,CACxB,OAAe,EACf,GAAW,EACX,MAAc,EACd,QAAgB;IAEhB,QAAQ,GAAG,kBAAkB,CAAC,QAAQ,CAAC,CAAC;IACxC,OAAO,GAAG,kBAAkB,CAAC,OAAO,CAAC,CAAC;IACtC,MAAM,YAAY,GAAG,QAAQ,GAAG,IAAI,GAAG,MAAM,CAAC;IAE9C,MAAM,GAAG,GAAG,MAAM,UAAU,CAAC,GAAG,EAAE,YAAY,CAAC,CAAC;IAChD,OAAO;QACL,KAAK,EAAE,4BAA4B,QAAQ,QAAQ,GAAG,OAAO,MAAM,QAAQ,OAAO,EAAE;QACpF,kBAAkB,EAAE,MAAM;KAC3B,CAAC;AACJ,CAAC","sourcesContent":["// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT License.\n\nimport type { AccessToken, NamedKeyCredential, SASCredential } from \"@azure/core-auth\";\nimport { isNamedKeyCredential, isSASCredential } from \"@azure/core-auth\";\nimport { signString } from \"../util/hmacSha256.js\";\n\n/**\n * A SasTokenProvider provides an alternative to TokenCredential for providing an `AccessToken`.\n * @hidden\n */\nexport interface SasTokenProvider {\n  /**\n   * Property used to distinguish SasTokenProvider from TokenCredential.\n   */\n  isSasTokenProvider: true;\n  /**\n   * Gets the token provided by this provider.\n   *\n   * This method is called automatically by Azure SDK client libraries.\n   *\n   * @param audience - The audience for which the token is desired.\n   */\n  getToken(audience: string): Promise<AccessToken>;\n}\n\n/**\n * Creates a token provider from the provided shared access data.\n * @param data - The sharedAccessKeyName/sharedAccessKey pair or the sharedAccessSignature.\n * @hidden\n */\nexport function createSasTokenProvider(\n  data:\n    | { sharedAccessKeyName: string; sharedAccessKey: string }\n    | { sharedAccessSignature: string }\n    | NamedKeyCredential\n    | SASCredential,\n): SasTokenProvider {\n  if (isNamedKeyCredential(data) || isSASCredential(data)) {\n    return new SasTokenProviderImpl(data);\n  } else if (\"sharedAccessKeyName\" in data && \"sharedAccessKey\" in data) {\n    return new SasTokenProviderImpl({ name: data.sharedAccessKeyName, key: data.sharedAccessKey });\n  } else {\n    return new SasTokenProviderImpl({ signature: data.sharedAccessSignature });\n  }\n}\n\n/**\n * A TokenProvider that generates a Sas token:\n * `SharedAccessSignature sr=<resource>&sig=<signature>&se=<expiry>&skn=<keyname>`\n *\n * @internal\n */\nexport class SasTokenProviderImpl implements SasTokenProvider {\n  /**\n   * Property used to distinguish TokenProvider from TokenCredential.\n   */\n  get isSasTokenProvider(): true {\n    return true;\n  }\n\n  /**\n   * The SASCredential containing the key name and secret key value.\n   */\n  private _credential: SASCredential | NamedKeyCredential;\n\n  /**\n   * Initializes a new instance of SasTokenProvider\n   * @param credential - The source `NamedKeyCredential` or `SASCredential`.\n   */\n  constructor(credential: SASCredential | NamedKeyCredential) {\n    this._credential = credential;\n  }\n\n  /**\n   * Gets the sas token for the specified audience\n   * @param audience - The audience for which the token is desired.\n   */\n  async getToken(audience: string): Promise<AccessToken> {\n    if (isNamedKeyCredential(this._credential)) {\n      return createToken(\n        this._credential.name,\n        this._credential.key,\n        Math.floor(Date.now() / 1000) + 3600,\n        audience,\n      );\n    } else {\n      return {\n        token: this._credential.signature,\n        expiresOnTimestamp: 0,\n      };\n    }\n  }\n}\n\n/**\n * Creates the sas token based on the provided information.\n * @param keyName - The shared access key name.\n * @param key - The shared access key.\n * @param expiry - The time period in unix time after which the token will expire.\n * @param audience - The audience for which the token is desired.\n * @internal\n */\nasync function createToken(\n  keyName: string,\n  key: string,\n  expiry: number,\n  audience: string,\n): Promise<AccessToken> {\n  audience = encodeURIComponent(audience);\n  keyName = encodeURIComponent(keyName);\n  const stringToSign = audience + \"\\n\" + expiry;\n\n  const sig = await signString(key, stringToSign);\n  return {\n    token: `SharedAccessSignature sr=${audience}&sig=${sig}&se=${expiry}&skn=${keyName}`,\n    expiresOnTimestamp: expiry,\n  };\n}\n"]}