{"version":3,"file":"requestResponseLink.js","sourceRoot":"","sources":["../../src/requestResponseLink.ts"],"names":[],"mappings":";AAAA,uCAAuC;AACvC,kCAAkC;;;AAqRlC,8CA0DC;AA5UD,8DAAqD;AACrD,2CAA+D;AAY/D,+CAA2E;AAC3E,sDAAsE;AACtE,qCAAsD;AACtD,gDAA6C;AAiC7C;;GAEG;AACH,MAAa,mBAAmB;IAC9B;;;;OAIG;IACH,YACS,OAAgB,EAChB,MAAc,EACd,QAAkB;QAFlB,YAAO,GAAP,OAAO,CAAS;QAChB,WAAM,GAAN,MAAM,CAAQ;QACd,aAAQ,GAAR,QAAQ,CAAU;QAa3B;;;;WAIG;QACK,kBAAa,GAA6C,IAAI,GAAG,EAGtE,CAAC;QAnBF,IAAI,CAAC,OAAO,GAAG,OAAO,CAAC;QACvB,IAAI,CAAC,MAAM,GAAG,MAAM,CAAC;QACrB,IAAI,CAAC,QAAQ,GAAG,QAAQ,CAAC;QACzB,IAAI,CAAC,QAAQ,CAAC,EAAE,CAAC,6BAAc,CAAC,OAAO,EAAE,CAAC,OAAO,EAAE,EAAE;YACnD,iBAAiB,CAAC,OAAO,EAAE,IAAI,CAAC,UAAU,CAAC,EAAE,EAAE,IAAI,CAAC,aAAa,CAAC,CAAC;QACrE,CAAC,CAAC,CAAC;QACH,IAAI,CAAC,MAAM,CAAC,EAAE,CAAC,2BAAY,CAAC,WAAW,EAAE,CAAC,OAAO,EAAE,EAAE;YACnD,aAAa,CAAC,OAAO,EAAE,IAAI,CAAC,UAAU,CAAC,EAAE,EAAE,IAAI,CAAC,aAAa,CAAC,CAAC;QACjE,CAAC,CAAC,CAAC;IACL,CAAC;IAYD;;;OAGG;IACH,IAAI,UAAU;QACZ,OAAO,IAAI,CAAC,OAAO,CAAC,UAAU,CAAC;IACjC,CAAC;IAED;;;OAGG;IACH,MAAM;QACJ,OAAO,IAAI,CAAC,OAAO,CAAC,MAAM,EAAE,IAAI,IAAI,CAAC,MAAM,CAAC,MAAM,EAAE,IAAI,IAAI,CAAC,QAAQ,CAAC,MAAM,EAAE,CAAC;IACjF,CAAC;IAED;;;;;;;OAOG;IACH,WAAW,CAAC,OAAoB,EAAE,UAA8B,EAAE;QAChE,MAAM,WAAW,GAAG,OAAO,CAAC,WAAW,IAAI,wBAAS,CAAC,2BAA2B,CAAC;QAEjF,MAAM,OAAO,GAAgC,OAAO,CAAC,WAAW,CAAC;QAEjE,4EAA4E;QAC5E,oGAAoG;QACpG,IAAI,CAAC,OAAO,CAAC,UAAU,EAAE,CAAC;YACxB,OAAO,CAAC,UAAU,GAAG,IAAA,4BAAa,GAAE,CAAC;QACvC,CAAC;QAED,OAAO,IAAI,OAAO,CAAc,CAAC,OAAY,EAAE,MAAW,EAAE,EAAE;YAC5D,IAAI,KAAK,GAA8C,SAAS,CAAC;YAEjE,MAAM,aAAa,GAAG,GAAS,EAAE;gBAC/B,IAAI,CAAC,aAAa,CAAC,MAAM,CAAC,OAAO,CAAC,UAAoB,CAAC,CAAC;gBACxD,MAAM,OAAO,GAAG,IAAI,CAAC,QAAQ,CAAC,OAAO,IAAI,SAAS,CAAC;gBACnD,MAAM,WAAW,GAAG,OAAO,CAAC,WAAW,CAAC;gBACxC,MAAM,IAAI,GACR,IAAI,IAAI,CAAC,UAAU,CAAC,EAAE,kBAAkB,WAAW,IAAI;oBACvD,OAAO,OAAO,mCAAmC,CAAC;gBACpD,6EAA6E;gBAC7E,eAAM,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;gBAClB,MAAM,KAAK,GAAG,IAAI,6BAAU,CAAC,mCAAoB,CAAC,CAAC;gBAEnD,MAAM,CAAC,KAAK,CAAC,CAAC;YAChB,CAAC,CAAC;YAEF,MAAM,OAAO,GAAG,GAAS,EAAE;gBACzB,2DAA2D;gBAC3D,IAAI,IAAA,qBAAS,EAAC,KAAK,CAAC,EAAE,CAAC;oBACrB,YAAY,CAAC,KAAK,CAAC,CAAC;gBACtB,CAAC;gBACD,OAAQ,CAAC,mBAAmB,CAAC,OAAO,EAAE,OAAO,CAAC,CAAC;gBAE/C,aAAa,EAAE,CAAC;YAClB,CAAC,CAAC;YAEF,IAAI,OAAO,EAAE,CAAC;gBACZ,+DAA+D;gBAC/D,qDAAqD;gBACrD,IAAI,OAAO,CAAC,OAAO,EAAE,CAAC;oBACpB,OAAO,aAAa,EAAE,CAAC;gBACzB,CAAC;gBACD,OAAO,CAAC,gBAAgB,CAAC,OAAO,EAAE,OAAO,CAAC,CAAC;YAC7C,CAAC;YAED,KAAK,GAAG,UAAU,CAAC,GAAG,EAAE;;gBACtB,IAAI,CAAC,aAAa,CAAC,MAAM,CAAC,OAAO,CAAC,UAAoB,CAAC,CAAC;gBACxD,IAAI,OAAO,EAAE,CAAC;oBACZ,OAAO,CAAC,mBAAmB,CAAC,OAAO,EAAE,OAAO,CAAC,CAAC;gBAChD,CAAC;gBACD,MAAM,OAAO,GAAG,CAAA,MAAA,IAAI,CAAC,QAAQ,0CAAE,OAAO,KAAI,SAAS,CAAC;gBACpD,MAAM,IAAI,GACR,gCAAgC,OAAO,CAAC,UAAU,SAAS,OAAO,IAAI;oBACtE,6CAA6C,CAAC;gBAChD,MAAM,CAAC,GAAU;oBACf,IAAI,EAAE,uBAAuB;oBAC7B,OAAO,EAAE,IAAI;iBACd,CAAC;gBACF,OAAO,MAAM,CAAC,IAAA,qBAAS,EAAC,CAAC,CAAC,CAAC,CAAC;YAC9B,CAAC,EAAE,WAAW,CAAC,CAAC;YAEhB,IAAI,CAAC,aAAa,CAAC,GAAG,CAAC,OAAO,CAAC,UAAoB,EAAE;gBACnD,OAAO,EAAE,OAAO;gBAChB,MAAM,EAAE,MAAM;gBACd,4BAA4B,EAAE,GAAG,EAAE;oBACjC,IAAI,OAAO;wBAAE,OAAO,CAAC,mBAAmB,CAAC,OAAO,EAAE,OAAO,CAAC,CAAC;oBAC3D,IAAI,IAAA,qBAAS,EAAC,KAAK,CAAC,EAAE,CAAC;wBACrB,YAAY,CAAC,KAAK,CAAC,CAAC;oBACtB,CAAC;gBACH,CAAC;aACF,CAAC,CAAC;YAEH,eAAM,CAAC,OAAO,CAAC,0BAA0B,EAAE,IAAI,CAAC,UAAU,CAAC,EAAE,EAAE,OAAO,CAAC,EAAE,IAAI,aAAa,CAAC,CAAC;YAC5F,IAAI,CAAC,MAAM,CAAC,IAAI,CAAC,OAAO,CAAC,CAAC;QAC5B,CAAC,CAAC,CAAC;IACL,CAAC;IAED;;;OAGG;IACH,KAAK,CAAC,KAAK;QACT,MAAM,IAAI,CAAC,MAAM,CAAC,KAAK,CAAC,EAAE,YAAY,EAAE,KAAK,EAAE,CAAC,CAAC;QACjD,MAAM,IAAI,CAAC,QAAQ,CAAC,KAAK,CAAC,EAAE,YAAY,EAAE,KAAK,EAAE,CAAC,CAAC;QACnD,MAAM,IAAI,CAAC,OAAO,CAAC,KAAK,EAAE,CAAC;IAC7B,CAAC;IAED;;;OAGG;IACH,MAAM;QACJ,IAAI,CAAC,MAAM,CAAC,MAAM,EAAE,CAAC;QACrB,IAAI,CAAC,QAAQ,CAAC,MAAM,EAAE,CAAC;QACvB,IAAI,CAAC,OAAO,CAAC,MAAM,EAAE,CAAC;IACxB,CAAC;IAED;;;;;;;;;OASG;IACH,MAAM,CAAC,KAAK,CAAC,MAAM,CACjB,UAAsB,EACtB,aAA4B,EAC5B,eAAgC,EAChC,gBAAmD,EAAE;QAErD,MAAM,EAAE,WAAW,EAAE,GAAG,aAAa,CAAC;QACtC,MAAM,OAAO,GAAG,MAAM,UAAU,CAAC,aAAa,CAAC,EAAE,WAAW,EAAE,CAAC,CAAC;QAChE,MAAM,MAAM,GAAG,MAAM,OAAO,CAAC,YAAY,iCAAM,aAAa,KAAE,WAAW,IAAG,CAAC;QAC7E,MAAM,QAAQ,GAAG,MAAM,OAAO,CAAC,cAAc,iCAAM,eAAe,KAAE,WAAW,IAAG,CAAC;QACnF,eAAM,CAAC,OAAO,CACZ,8EAA8E,EAC9E,UAAU,CAAC,EAAE,CACd,CAAC;QACF,OAAO,IAAI,mBAAmB,CAAC,OAAO,EAAE,MAAM,EAAE,QAAQ,CAAC,CAAC;IAC5D,CAAC;CACF;AArLD,kDAqLC;AAYD;;;;GAIG;AACI,MAAM,0BAA0B,GAAG,CACxC,QAAwD,EAAE,EAC1C,EAAE;IAClB,OAAO;QACL,UAAU,EAAE,CAAC,KAAK,CAAC,wBAAS,CAAC,UAAU,CAAC,IAAI,KAAK,CAAC,UAAU,CAAW;QACvE,iBAAiB,EAAE,CAAC,KAAK,CAAC,wBAAS,CAAC,iBAAiB,CAAC,IAAI,KAAK,CAAC,iBAAiB,CAAW;QAC5F,cAAc,EAAE,CAAC,KAAK,CAAC,wBAAS,CAAC,cAAc,CAAC,IAAI,KAAK,CAAC,cAAc,CAAW;KACpF,CAAC;AACJ,CAAC,CAAC;AARW,QAAA,0BAA0B,8BAQrC;AAEF;;;;;;;;;;;;;GAaG;AACH,SAAgB,iBAAiB,CAC/B,OAAsC,EACtC,YAAoB,EACpB,YAAsD;IAEtD,MAAM,OAAO,GAAG,OAAO,CAAC,OAAO,CAAC;IAChC,IAAI,CAAC,OAAO,EAAE,CAAC;QACb,eAAM,CAAC,OAAO,CACZ,IAAI,YAAY,+EAA+E;YAC7F,4FAA4F;YAC5F,sCAAsC,CACzC,CAAC;QACF,OAAO;IACT,CAAC;IAED,MAAM,qBAAqB,GAAG,OAAO,CAAC,cAAc,CAAC;IACrD,IAAI,CAAC,YAAY,CAAC,GAAG,CAAC,qBAA+B,CAAC,EAAE,CAAC;QACvD,eAAM,CAAC,OAAO,CACZ,IAAI,YAAY,oBAAoB,qBAAqB,iDAAiD;YACxG,wGAAwG;YACxG,+DAA+D,CAClE,CAAC;QACF,OAAO;IACT,CAAC;IAED,MAAM,OAAO,GAAG,YAAY,CAAC,GAAG,CAAC,qBAA+B,CAAgC,CAAC;IACjG,OAAO,CAAC,4BAA4B,EAAE,CAAC;IAEvC,MAAM,YAAY,GAAG,YAAY,CAAC,MAAM,CAAC,qBAA+B,CAAC,CAAC;IAC1E,eAAM,CAAC,OAAO,CACZ,IAAI,YAAY,+CAA+C,qBAAqB,iBAAiB;QACnG,mBAAmB,YAAY,EAAE,CACpC,CAAC;IAEF,MAAM,IAAI,GAAG,IAAA,kCAA0B,EAAC,OAAO,CAAC,sBAAsB,CAAC,CAAC;IACxE,IAAI,KAAK,CAAC;IACV,IAAI,CAAC,IAAI,CAAC,UAAU,EAAE,CAAC;QACrB,KAAK,GAAG,IAAI,KAAK,CACf,IAAI,YAAY,iGAAiG,qBAAqB,EAAE,CACzI,CAAC;IACJ,CAAC;IACD,IAAI,IAAI,CAAC,UAAU,GAAG,GAAG,IAAI,IAAI,CAAC,UAAU,GAAG,GAAG,EAAE,CAAC;QACnD,eAAM,CAAC,OAAO,CACZ,IAAI,YAAY,iDAAiD,qBAAqB,EAAE,CACzF,CAAC;QACF,OAAO,OAAO,CAAC,OAAO,CAAC,OAAO,CAAC,CAAC;IAClC,CAAC;IACD,IAAI,CAAC,KAAK,EAAE,CAAC;QACX,MAAM,SAAS,GACb,IAAI,CAAC,cAAc,IAAI,iCAAqB,CAAC,IAAI,CAAC,UAAU,CAAC,IAAI,qBAAqB,CAAC;QACzF,KAAK,GAAG,IAAA,qBAAS,EAAC;YAChB,SAAS,EAAE,SAAS;YACpB,WAAW,EAAE,IAAI,CAAC,iBAAiB;SACpC,CAAC,CAAC;QACH,eAAM,CAAC,OAAO,CAAC,GAAG,KAAK,aAAL,KAAK,uBAAL,KAAK,CAAE,IAAI,KAAK,KAAK,aAAL,KAAK,uBAAL,KAAK,CAAE,OAAO,EAAE,CAAC,CAAC;IACtD,CAAC;IACD,IAAA,2BAAkB,EAAC,KAAK,CAAC,CAAC;IAC1B,OAAO,OAAO,CAAC,MAAM,CAAC,KAAK,CAAC,CAAC;AAC/B,CAAC;AAED,SAAS,aAAa,CACpB,OAAqC,EACrC,YAAoB,EACpB,YAAsD;IAEtD,IAAI,OAAO,CAAC,MAAM,EAAE,CAAC;QACnB,KAAK,MAAM,CAAC,GAAG,EAAE,OAAO,CAAC,IAAI,YAAY,CAAC,OAAO,EAAE,EAAE,CAAC;YACpD,eAAM,CAAC,OAAO,CACZ,IAAI,YAAY,sEAAsE,GAAG,GAAG,CAC7F,CAAC;YACF,OAAO,CAAC,4BAA4B,EAAE,CAAC;YACvC,OAAO,CAAC,MAAM,CAAC,OAAO,CAAC,MAAM,CAAC,KAAK,CAAC,CAAC;QACvC,CAAC;QACD,YAAY,CAAC,KAAK,EAAE,CAAC;IACvB,CAAC;AACH,CAAC","sourcesContent":["// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT License.\n\nimport type { AbortSignalLike } from \"@azure/abort-controller\";\nimport { AbortError } from \"@azure/abort-controller\";\nimport { ConditionStatusMapper, translate } from \"./errors.js\";\nimport type {\n  Connection,\n  EventContext,\n  Receiver,\n  ReceiverOptions,\n  ReqResLink,\n  Message as RheaMessage,\n  Sender,\n  SenderOptions,\n  Session,\n} from \"rhea-promise\";\nimport { ReceiverEvents, SenderEvents, generate_uuid } from \"rhea-promise\";\nimport { Constants, StandardAbortMessage } from \"./util/constants.js\";\nimport { logErrorStackTrace, logger } from \"./log.js\";\nimport { isDefined } from \"@azure/core-util\";\n\n/**\n * Describes the options that can be specified while sending a request.\n */\nexport interface SendRequestOptions {\n  /**\n   * Cancels the operation.\n   */\n  abortSignal?: AbortSignalLike;\n  /**\n   * Max time to wait for the operation to complete.\n   * Default: `60000 milliseconds`.\n   */\n  timeoutInMs?: number;\n  /**\n   * Name of the request being performed.\n   */\n  requestName?: string;\n}\n\n/**\n * @internal\n */\nexport interface DeferredPromiseWithCallback {\n  resolve: (value?: any) => void;\n  reject: (reason?: any) => void;\n  /**\n   * To be called before resolving or rejecting the deferred promise\n   */\n  cleanupBeforeResolveOrReject: () => void;\n}\n\n/**\n * Describes an amqp request(sender)-response(receiver) link that is created over an amqp session.\n */\nexport class RequestResponseLink implements ReqResLink {\n  /**\n   * @param session - The amqp session.\n   * @param sender - The amqp sender link.\n   * @param receiver - The amqp receiver link.\n   */\n  constructor(\n    public session: Session,\n    public sender: Sender,\n    public receiver: Receiver,\n  ) {\n    this.session = session;\n    this.sender = sender;\n    this.receiver = receiver;\n    this.receiver.on(ReceiverEvents.message, (context) => {\n      onMessageReceived(context, this.connection.id, this._responsesMap);\n    });\n    this.sender.on(SenderEvents.senderError, (context) => {\n      onSenderError(context, this.connection.id, this._responsesMap);\n    });\n  }\n\n  /**\n   * Maintains a map of responses that\n   * are being actively returned. It acts as a store for correlating the responses received for\n   * the send requests.\n   */\n  private _responsesMap: Map<string, DeferredPromiseWithCallback> = new Map<\n    string,\n    DeferredPromiseWithCallback\n  >();\n\n  /**\n   * Provides the underlying amqp connection object.\n   * @returns Connection.\n   */\n  get connection(): Connection {\n    return this.session.connection;\n  }\n\n  /**\n   * Indicates whether the session and the sender and receiver links are all open or closed.\n   * @returns boolean - `true` - `open`, `false` - `closed`.\n   */\n  isOpen(): boolean {\n    return this.session.isOpen() && this.sender.isOpen() && this.receiver.isOpen();\n  }\n\n  /**\n   * Sends the given request message and returns the received response. If the operation is not\n   * completed in the provided timeout in milliseconds `default: 60000`, then `OperationTimeoutError` is thrown.\n   *\n   * @param request - The AMQP (request) message.\n   * @param options - Options that can be provided while sending a request.\n   * @returns Promise<Message> The AMQP (response) message.\n   */\n  sendRequest(request: RheaMessage, options: SendRequestOptions = {}): Promise<RheaMessage> {\n    const timeoutInMs = options.timeoutInMs || Constants.defaultOperationTimeoutInMs;\n\n    const aborter: AbortSignalLike | undefined = options.abortSignal;\n\n    // If message_id is not already set on the request, set it to a unique value\n    // This helps in determining the right response for current request among multiple incoming messages\n    if (!request.message_id) {\n      request.message_id = generate_uuid();\n    }\n\n    return new Promise<RheaMessage>((resolve: any, reject: any) => {\n      let timer: ReturnType<typeof setTimeout> | undefined = undefined;\n\n      const rejectOnAbort = (): void => {\n        this._responsesMap.delete(request.message_id as string);\n        const address = this.receiver.address || \"address\";\n        const requestName = options.requestName;\n        const desc: string =\n          `[${this.connection.id}] The request \"${requestName}\" ` +\n          `to \"${address}\" has been cancelled by the user.`;\n        // Cancellation is a user-intended action, so log to info instead of warning.\n        logger.info(desc);\n        const error = new AbortError(StandardAbortMessage);\n\n        reject(error);\n      };\n\n      const onAbort = (): void => {\n        // safe to clear the timeout if it hasn't already occurred.\n        if (isDefined(timer)) {\n          clearTimeout(timer);\n        }\n        aborter!.removeEventListener(\"abort\", onAbort);\n\n        rejectOnAbort();\n      };\n\n      if (aborter) {\n        // the aborter may have been triggered between request attempts\n        // so check if it was triggered and reject if needed.\n        if (aborter.aborted) {\n          return rejectOnAbort();\n        }\n        aborter.addEventListener(\"abort\", onAbort);\n      }\n\n      timer = setTimeout(() => {\n        this._responsesMap.delete(request.message_id as string);\n        if (aborter) {\n          aborter.removeEventListener(\"abort\", onAbort);\n        }\n        const address = this.receiver?.address || \"address\";\n        const desc: string =\n          `The request with message_id \"${request.message_id}\" to \"${address}\" ` +\n          `endpoint timed out. Please try again later.`;\n        const e: Error = {\n          name: \"OperationTimeoutError\",\n          message: desc,\n        };\n        return reject(translate(e));\n      }, timeoutInMs);\n\n      this._responsesMap.set(request.message_id as string, {\n        resolve: resolve,\n        reject: reject,\n        cleanupBeforeResolveOrReject: () => {\n          if (aborter) aborter.removeEventListener(\"abort\", onAbort);\n          if (isDefined(timer)) {\n            clearTimeout(timer);\n          }\n        },\n      });\n\n      logger.verbose(\"[%s] %s request sent: %O\", this.connection.id, request.to || \"$management\");\n      this.sender.send(request);\n    });\n  }\n\n  /**\n   * Closes the sender, receiver link and the underlying session.\n   * @returns Promise<void>\n   */\n  async close(): Promise<void> {\n    await this.sender.close({ closeSession: false });\n    await this.receiver.close({ closeSession: false });\n    await this.session.close();\n  }\n\n  /**\n   * Removes the sender, receiver link and it's underlying session.\n   * @returns void\n   */\n  remove(): void {\n    this.sender.remove();\n    this.receiver.remove();\n    this.session.remove();\n  }\n\n  /**\n   * Creates an amqp request/response link.\n   *\n   * @param connection - The amqp connection.\n   * @param senderOptions - Options that must be provided to create the sender link.\n   * @param receiverOptions - Options that must be provided to create the receiver link.\n   * @param createOptions - Optional parameters that can be used to affect this method's behavior.\n   *    For example, `abortSignal` can be passed to allow cancelling an in-progress `create` invocation.\n   * @returns Promise<RequestResponseLink>\n   */\n  static async create(\n    connection: Connection,\n    senderOptions: SenderOptions,\n    receiverOptions: ReceiverOptions,\n    createOptions: { abortSignal?: AbortSignalLike } = {},\n  ): Promise<RequestResponseLink> {\n    const { abortSignal } = createOptions;\n    const session = await connection.createSession({ abortSignal });\n    const sender = await session.createSender({ ...senderOptions, abortSignal });\n    const receiver = await session.createReceiver({ ...receiverOptions, abortSignal });\n    logger.verbose(\n      \"[%s] Successfully created the sender and receiver links on the same session.\",\n      connection.id,\n    );\n    return new RequestResponseLink(session, sender, receiver);\n  }\n}\n/**\n * @internal\n *\n * Type used in getCodeDescriptionAndError to get the normalized info from the responses emitted by EventHubs and ServiceBus.\n */\ntype NormalizedInfo = {\n  statusCode: number;\n  statusDescription: string;\n  errorCondition: string;\n};\n\n/**\n * @internal\n *\n * Handle different variations of property names in responses emitted by EventHubs and ServiceBus.\n */\nexport const getCodeDescriptionAndError = (\n  props: { [key: string]: string | number | undefined } = {},\n): NormalizedInfo => {\n  return {\n    statusCode: (props[Constants.statusCode] || props.statusCode) as number,\n    statusDescription: (props[Constants.statusDescription] || props.statusDescription) as string,\n    errorCondition: (props[Constants.errorCondition] || props.errorCondition) as string,\n  };\n};\n\n/**\n * This is used as the onMessage handler for the \"message\" event on the receiver.\n *\n * (This is inspired from the message settlement sequence in service-bus SDK which\n * relies on a single listener for settled event for all the messages.)\n * The sequence is as follows:\n * 1. User calls `await RequestResponseLink.sendRequest()`\n * 2. This creates a `Promise` that gets stored in the _responsesMap\n * 3. When the service acknowledges the response, this method gets called for that request.\n * 4. We resolve() the promise from the _responsesMap with the message.\n * 5. User's code after the sendRequest continues.\n *\n * @internal\n */\nexport function onMessageReceived(\n  context: Pick<EventContext, \"message\">,\n  connectionId: string,\n  responsesMap: Map<string, DeferredPromiseWithCallback>,\n): void {\n  const message = context.message;\n  if (!message) {\n    logger.verbose(\n      `[${connectionId}] \"message\" property on the EventContext is \"undefined\" which is unexpected, ` +\n        `returning from the \"onMessageReceived\" handler without resolving or rejecting the promise ` +\n        `upon encountering the message event.`,\n    );\n    return;\n  }\n\n  const responseCorrelationId = message.correlation_id;\n  if (!responsesMap.has(responseCorrelationId as string)) {\n    logger.verbose(\n      `[${connectionId}] correlationId \"${responseCorrelationId}\" property on the response does not match with ` +\n        `any of the \"request-id\"s in the map, returning from the \"onMessageReceived\" handler without resolving ` +\n        `or rejecting the promise upon encountering the message event.`,\n    );\n    return;\n  }\n\n  const promise = responsesMap.get(responseCorrelationId as string) as DeferredPromiseWithCallback;\n  promise.cleanupBeforeResolveOrReject();\n\n  const deleteResult = responsesMap.delete(responseCorrelationId as string);\n  logger.verbose(\n    `[${connectionId}] Successfully deleted the response with id ${responseCorrelationId} from the map. ` +\n      `Delete result - ${deleteResult}`,\n  );\n\n  const info = getCodeDescriptionAndError(message.application_properties);\n  let error;\n  if (!info.statusCode) {\n    error = new Error(\n      `[${connectionId}] No statusCode in the \"application_properties\" in the returned response with correlation-id: ${responseCorrelationId}`,\n    );\n  }\n  if (info.statusCode > 199 && info.statusCode < 300) {\n    logger.verbose(\n      `[${connectionId}] Resolving the response with correlation-id: ${responseCorrelationId}`,\n    );\n    return promise.resolve(message);\n  }\n  if (!error) {\n    const condition =\n      info.errorCondition || ConditionStatusMapper[info.statusCode] || \"amqp:internal-error\";\n    error = translate({\n      condition: condition,\n      description: info.statusDescription,\n    });\n    logger.warning(`${error?.name}: ${error?.message}`);\n  }\n  logErrorStackTrace(error);\n  return promise.reject(error);\n}\n\nfunction onSenderError(\n  context: Pick<EventContext, \"sender\">,\n  connectionId: string,\n  responsesMap: Map<string, DeferredPromiseWithCallback>,\n): void {\n  if (context.sender) {\n    for (const [key, promise] of responsesMap.entries()) {\n      logger.verbose(\n        `[${connectionId}] Sender closed due to error when sending request with message_id \"${key}\"`,\n      );\n      promise.cleanupBeforeResolveOrReject();\n      promise.reject(context.sender.error);\n    }\n    responsesMap.clear();\n  }\n}\n"]}