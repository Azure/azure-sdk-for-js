{"version":3,"file":"amqpAnnotatedMessage.js","sourceRoot":"","sources":["../../src/amqpAnnotatedMessage.ts"],"names":[],"mappings":";;;AAAA,uCAAuC;AACvC,kCAAkC;AAClC,yDAAuD;AACvD,iEAA+D;AAE/D,sDAAgD;AAyChD;;GAEG;AACH,4GAA4G;AAC/F,QAAA,oBAAoB,GAAG;IAClC;;OAEG;IACH,eAAe,CAAC,GAAgB;QAC9B,MAAM,OAAO,GAAG;YACd,MAAM,EAAE,oCAAiB,CAAC,qBAAqB,CAAC,GAAG,CAAC;YACpD,MAAM,EAAG,GAAW,CAAC,MAAM;YAC3B,kBAAkB,EAAE,GAAG,CAAC,mBAAmB;YAC3C,mBAAmB,EAAE,GAAG,CAAC,oBAAoB;YAC7C,qBAAqB,EAAE,GAAG,CAAC,sBAAsB;YACjD,UAAU,EAAE,4CAAqB,CAAC,yBAAyB,CAAC,GAAG,CAAC;YAChE,IAAI,EAAE,GAAG,CAAC,IAAI;SACf,CAAC;QACF,IAAI,GAAG,CAAC,oBAAoB,EAAE,CAAC;YAC7B,MAAM,kBAAkB,GAAG,GAAG,CAAC,oBAAoB,CAAC,OAAO,EAAE,CAAC;YAC9D,OAAO,CAAC,UAAU,CAAC,kBAAkB,GAAG,IAAI,CAAC,GAAG,CAC9C,kBAAkB,EAClB,wBAAS,CAAC,qBAAqB,CAChC,CAAC;YAEF,uEAAuE;YACvE,sEAAsE;YACtE,6DAA6D;YAC7D,6EAA6E;YAC7E,wEAAwE;YACxE,IAAI,GAAG,CAAC,aAAa,EAAE,CAAC;gBACtB,OAAO,CAAC,MAAM,CAAC,UAAU;oBACvB,OAAO,CAAC,UAAU,CAAC,kBAAkB,GAAG,GAAG,CAAC,aAAa,CAAC,OAAO,EAAE,CAAC;YACxE,CAAC;QACH,CAAC;QAED,OAAO,OAAO,CAAC;IACjB,CAAC;IACD;;OAEG;IACH,aAAa,CAAC,GAAyB;;QACrC,MAAM,KAAK,iDACN,4CAAqB,CAAC,uBAAuB,CAAC,GAAG,CAAC,UAAU,IAAI,EAAE,CAAC,GACnE,oCAAiB,CAAC,mBAAmB,CAAC,GAAG,CAAC,MAAM,IAAI,EAAE,CAAC,KAC1D,IAAI,EAAE,GAAG,CAAC,IAAI,EACd,mBAAmB,EAAE,GAAG,CAAC,kBAAkB,EAC3C,oBAAoB,EAAE,GAAG,CAAC,mBAAmB,EAC7C,sBAAsB,EAAE,GAAG,CAAC,qBAAqB,EACjD,MAAM,EAAE,GAAG,CAAC,MAAM,GACnB,CAAC;QAEF,iGAAiG;QACjG,2FAA2F;QAC3F,8EAA8E;QAC9E,IAAI,MAAA,GAAG,CAAC,MAAM,0CAAE,UAAU,EAAE,CAAC;YAC3B,MAAM,GAAG,GAAG,GAAG,CAAC,MAAM,CAAC,UAAU,CAAC;YAClC,KAAK,CAAC,GAAG,GAAG,IAAI,CAAC,GAAG,CAAC,GAAG,EAAE,wBAAS,CAAC,cAAc,CAAC,CAAC;YACpD,KAAK,CAAC,aAAa,GAAG,MAAA,KAAK,CAAC,aAAa,mCAAI,IAAI,IAAI,EAAE,CAAC;YACxD,KAAK,CAAC,oBAAoB,GAAG,IAAI,IAAI,CACnC,IAAI,CAAC,GAAG,CAAC,KAAK,CAAC,aAAa,CAAC,OAAO,EAAE,GAAG,GAAG,EAAE,wBAAS,CAAC,qBAAqB,CAAC,CAC/E,CAAC;QACJ,CAAC;QAED,OAAO,KAAK,CAAC;IACf,CAAC;CACF,CAAC","sourcesContent":["// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT License.\nimport { AmqpMessageHeader } from \"./messageHeader.js\";\nimport { AmqpMessageProperties } from \"./messageProperties.js\";\nimport type { Message as RheaMessage } from \"rhea-promise\";\nimport { Constants } from \"./util/constants.js\";\n\n/**\n * Describes the AmqpAnnotatedMessage, part of the ServiceBusReceivedMessage(as `amqpAnnotatedMessage` property).\n */\nexport interface AmqpAnnotatedMessage {\n  /**\n   * Describes the defined set of standard header properties of the message.\n   */\n  header?: AmqpMessageHeader;\n  /**\n   * Describes set of footer properties of the message.\n   */\n  footer?: { [key: string]: any };\n  /**\n   * A dictionary containing message attributes that will be held in the message header\n   */\n  messageAnnotations?: { [key: string]: any };\n  /**\n   * A dictionary used for delivery-specific\n   * non-standard properties at the head of the message.\n   */\n  deliveryAnnotations?: { [key: string]: any };\n  /**\n   * A dictionary containing application specific message properties.\n   */\n  applicationProperties?: { [key: string]: any };\n  /**\n   *  Describes the defined set of standard properties of the message.\n   */\n  properties?: AmqpMessageProperties;\n  /**\n   * The message body.\n   */\n  body: any;\n  /**\n   * The AMQP section where the data was decoded from.\n   */\n  bodyType?: \"data\" | \"sequence\" | \"value\";\n}\n\n/**\n * Describes the operations that can be performed on(or to get) the AmqpAnnotatedMessage.\n */\n// eslint-disable-next-line @typescript-eslint/no-redeclare -- renaming constant would be a breaking change.\nexport const AmqpAnnotatedMessage = {\n  /**\n   * Takes RheaMessage(`Message` type from \"rhea\") and returns it in the AmqpAnnotatedMessage format.\n   */\n  fromRheaMessage(msg: RheaMessage): AmqpAnnotatedMessage {\n    const amqpMsg = {\n      header: AmqpMessageHeader.fromRheaMessageHeader(msg),\n      footer: (msg as any).footer,\n      messageAnnotations: msg.message_annotations,\n      deliveryAnnotations: msg.delivery_annotations,\n      applicationProperties: msg.application_properties,\n      properties: AmqpMessageProperties.fromRheaMessageProperties(msg),\n      body: msg.body,\n    };\n    if (msg.absolute_expiry_time) {\n      const absoluteExpiryTime = msg.absolute_expiry_time.getTime();\n      amqpMsg.properties.absoluteExpiryTime = Math.min(\n        absoluteExpiryTime,\n        Constants.maxAbsoluteExpiryTime,\n      );\n\n      // The TTL from the header can be at most approximately 49 days (uint32\n      // max value milliseconds) due to the AMQP spec. In order to allow for\n      // larger TTLs set by the user, we take the difference of the\n      // absolute_expiry_time and the creation_time (if both are set). If either of\n      // those properties is not set, we fall back to the TTL from the header.\n      if (msg.creation_time) {\n        amqpMsg.header.timeToLive =\n          amqpMsg.properties.absoluteExpiryTime - msg.creation_time.getTime();\n      }\n    }\n\n    return amqpMsg;\n  },\n  /**\n   * Takes AmqpAnnotatedMessage and returns it in the RheaMessage(`Message` type from \"rhea\") format.\n   */\n  toRheaMessage(msg: AmqpAnnotatedMessage): RheaMessage {\n    const rhMsg = {\n      ...AmqpMessageProperties.toRheaMessageProperties(msg.properties || {}),\n      ...AmqpMessageHeader.toRheaMessageHeader(msg.header || {}),\n      body: msg.body,\n      message_annotations: msg.messageAnnotations,\n      delivery_annotations: msg.deliveryAnnotations,\n      application_properties: msg.applicationProperties,\n      footer: msg.footer,\n    };\n\n    // There is a loss of fidelity in the TTL header if larger than uint32 max value. As a workaround\n    // we set the absolute_expiry_time and creation_time on the message based on the TTL. These\n    // values are then used to reconstruct the accurate TTL for received messages.\n    if (msg.header?.timeToLive) {\n      const ttl = msg.header.timeToLive;\n      rhMsg.ttl = Math.min(ttl, Constants.maxUint32Value);\n      rhMsg.creation_time = rhMsg.creation_time ?? new Date();\n      rhMsg.absolute_expiry_time = new Date(\n        Math.min(rhMsg.creation_time.getTime() + ttl, Constants.maxAbsoluteExpiryTime),\n      );\n    }\n\n    return rhMsg;\n  },\n};\n"]}