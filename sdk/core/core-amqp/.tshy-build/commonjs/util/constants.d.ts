export declare const Constants: {
    readonly associatedLinkName: "associated-link-name";
    readonly partitionKey: "x-opt-partition-key";
    readonly sequenceNumber: "x-opt-sequence-number";
    readonly enqueueSequenceNumber: "x-opt-enqueue-sequence-number";
    readonly enqueuedTime: "x-opt-enqueued-time";
    readonly scheduledEnqueueTime: "x-opt-scheduled-enqueue-time";
    readonly offset: "x-opt-offset";
    readonly lockedUntil: "x-opt-locked-until";
    readonly partitionIdName: "x-opt-partition-id";
    readonly publisher: "x-opt-publisher-name";
    readonly viaPartitionKey: "x-opt-via-partition-key";
    readonly deadLetterSource: "x-opt-deadletter-source";
    readonly messageState: "x-opt-message-state";
    readonly enqueuedTimeAnnotation: "amqp.annotation.x-opt-enqueued-time";
    readonly offsetAnnotation: "amqp.annotation.x-opt-offset";
    readonly sequenceNumberAnnotation: "amqp.annotation.x-opt-sequence-number";
    readonly guidSize: 16;
    readonly message: "message";
    readonly error: "error";
    readonly statusCode: "status-code";
    readonly statusDescription: "status-description";
    readonly errorCondition: "error-condition";
    readonly management: "$management";
    readonly partition: "partition";
    readonly partitionId: "partitionId";
    readonly readOperation: "READ";
    readonly TLS: "tls";
    readonly TCP: "tcp";
    readonly establishConnection: "establishConnection";
    readonly defaultConsumerGroup: "$default";
    readonly eventHub: "eventhub";
    readonly cbsEndpoint: "$cbs";
    readonly cbsReplyTo: "cbs";
    readonly operationPutToken: "put-token";
    readonly aadEventHubsAudience: "https://eventhubs.azure.net/";
    readonly aadEventHubsScope: "https://eventhubs.azure.net//.default";
    readonly aadServiceBusAudience: "https://servicebus.azure.net/";
    readonly aadServiceBusScope: "https://servicebus.azure.net//.default";
    readonly maxUserAgentLength: 512;
    readonly vendorString: "com.microsoft";
    readonly attachEpoch: "com.microsoft:epoch";
    readonly receiverIdentifierName: "com.microsoft:receiver-name";
    readonly enableReceiverRuntimeMetricName: "com.microsoft:enable-receiver-runtime-metric";
    readonly timespan: "com.microsoft:timespan";
    readonly uri: "com.microsoft:uri";
    readonly dateTimeOffset: "com.microsoft:datetime-offset";
    readonly sessionFilterName: "com.microsoft:session-filter";
    readonly receiverError: "receiver_error";
    readonly senderError: "sender_error";
    readonly sessionError: "session_error";
    readonly connectionError: "connection_error";
    readonly defaultOperationTimeoutInMs: 60000;
    readonly defaultConnectionIdleTimeoutInMs: 60000;
    readonly managementRequestKey: "managementRequest";
    readonly negotiateCbsKey: "negotiateCbs";
    readonly negotiateClaim: "negotiateClaim";
    readonly ensureContainerAndBlob: "ensureContainerAndBlob";
    readonly defaultPrefetchCount: 1000;
    readonly reconnectLimit: 100;
    readonly maxMessageIdLength: 128;
    readonly maxPartitionKeyLength: 128;
    readonly maxSessionIdLength: 128;
    readonly pathDelimiter: "/";
    readonly ruleNameMaximumLength: 50;
    readonly maximumSqlFilterStatementLength: 1024;
    readonly maximumSqlRuleActionStatementLength: 1024;
    readonly maxDeadLetterReasonLength: 4096;
    readonly maxDurationValue: 922337203685477;
    readonly minDurationValue: -922337203685477;
    readonly maxAbsoluteExpiryTime: number;
    readonly maxUint32Value: 4294967295;
    readonly aadTokenValidityMarginInMs: 5000;
    readonly connectionReconnectDelay: 300;
    readonly defaultMaxRetries: 3;
    readonly defaultMaxRetriesForConnection: 150;
    readonly defaultDelayBetweenOperationRetriesInMs: 30000;
    readonly defaultMaxDelayForExponentialRetryInMs: 90000;
    readonly receiverSettleMode: "receiver-settle-mode";
    readonly dispositionStatus: "disposition-status";
    readonly fromSequenceNumber: "from-sequence-number";
    readonly messageCount: "message-count";
    readonly enqueuedTimeUtc: "enqueued-time-utc";
    readonly lockTokens: "lock-tokens";
    readonly messageIdMapKey: "message-id";
    readonly sequenceNumberMapKey: "sequence-number";
    readonly lockTokenMapKey: "lock-token";
    readonly sessionIdMapKey: "session-id";
    readonly sequenceNumbers: "sequence-numbers";
    readonly deadLetterReason: "deadletter-reason";
    readonly deadLetterDescription: "deadletter-description";
    readonly propertiesToModify: "properties-to-modify";
    readonly deadLetterName: "com.microsoft:dead-letter";
    readonly trackingId: "com.microsoft:tracking-id";
    readonly serverTimeout: "com.microsoft:server-timeout";
    readonly operations: {
        readonly putToken: "put-token";
        readonly read: "READ";
        readonly cancelScheduledMessage: "com.microsoft:cancel-scheduled-message";
        readonly scheduleMessage: "com.microsoft:schedule-message";
        readonly renewLock: "com.microsoft:renew-lock";
        readonly peekMessage: "com.microsoft:peek-message";
        readonly receiveBySequenceNumber: "com.microsoft:receive-by-sequence-number";
        readonly deleteMessages: "com.microsoft:batch-delete-messages";
        readonly updateDisposition: "com.microsoft:update-disposition";
        readonly renewSessionLock: "com.microsoft:renew-session-lock";
        readonly setSessionState: "com.microsoft:set-session-state";
        readonly getSessionState: "com.microsoft:get-session-state";
        readonly enumerateSessions: "com.microsoft:get-message-sessions";
        readonly addRule: "com.microsoft:add-rule";
        readonly removeRule: "com.microsoft:remove-rule";
        readonly enumerateRules: "com.microsoft:enumerate-rules";
    };
    readonly descriptorCodes: {
        readonly ruleDescriptionList: 1335734829060;
        readonly sqlFilterList: 83483426822;
        readonly correlationFilterList: 83483426825;
        readonly sqlRuleActionList: 1335734829062;
        readonly trueFilterList: 83483426823;
        readonly falseFilterList: 83483426824;
    };
};
/**
 * The standard error message accompanying an AbortError.
 * @hidden
 */
export declare const StandardAbortMessage = "The operation was aborted.";
//# sourceMappingURL=constants.d.ts.map