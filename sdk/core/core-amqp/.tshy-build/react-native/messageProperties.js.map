{"version":3,"file":"messageProperties.js","sourceRoot":"","sources":["../../src/messageProperties.ts"],"names":[],"mappings":"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","sourcesContent":["// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT License.\n/* eslint-disable eqeqeq */\n\nimport type { MessageProperties as RheaMessageProperties } from \"rhea-promise\";\nimport { logger } from \"./log.js\";\n\n/**\n * Describes the defined set of standard properties of the message.\n */\nexport interface AmqpMessageProperties {\n  /**\n   * The application message identifier that uniquely identifies a message.\n   * The user is responsible for making sure that this is unique in the given context. Guids usually make a good fit.\n   */\n  messageId?: string | number | Buffer;\n  /**\n   * The address of the node to send replies to.\n   */\n  replyTo?: string;\n  /**\n   * The address of the node the message is destined for.\n   */\n  to?: string;\n  /**\n   * The id that can be used to mark or identify messages between clients.\n   */\n  correlationId?: string | number | Buffer;\n  /**\n   * MIME type for the message.\n   */\n  contentType?: string;\n  /**\n   * The content-encoding property is used as a modifier to the content-type.\n   * When present, its value indicates what additional content encodings have been applied to the application-data.\n   */\n  contentEncoding?: string;\n  /**\n   * The time when this message is considered expired.\n   */\n  absoluteExpiryTime?: number;\n  /**\n   * The time this message was created.\n   */\n  creationTime?: number;\n  /**\n   * The group this message belongs to.\n   */\n  groupId?: string;\n  /**\n   * The sequence number of this message with its group.\n   */\n  groupSequence?: number;\n  /**\n   * The group the reply message belongs to.\n   */\n  replyToGroupId?: string;\n  /**\n   * A common field for summary information about the message\n   * content and purpose.\n   */\n  subject?: string;\n  // /**\n  //  * The identity of the user responsible for producing the message.\n  //  */\n  // userId?: string;\n}\n\n/**\n * Describes the operations that can be performed on the amqp message properties.\n */\n// eslint-disable-next-line @typescript-eslint/no-redeclare -- renaming constant would be a breaking change.\nexport const AmqpMessageProperties = {\n  /**\n   * Converts MessageProperties to RheaMessageProperties.\n   * @param props - Message properties.\n   * @returns RheaMessageProperties.\n   */\n  toRheaMessageProperties(props: AmqpMessageProperties): RheaMessageProperties {\n    const amqpProperties: RheaMessageProperties = {};\n    if (props.absoluteExpiryTime != undefined) {\n      amqpProperties.absolute_expiry_time = new Date(props.absoluteExpiryTime);\n    }\n    if (props.contentEncoding != undefined) {\n      amqpProperties.content_encoding = props.contentEncoding;\n    }\n    if (props.contentType != undefined) {\n      amqpProperties.content_type = props.contentType;\n    }\n    if (props.correlationId != undefined) {\n      amqpProperties.correlation_id = props.correlationId;\n    }\n    if (props.creationTime != undefined) {\n      amqpProperties.creation_time = new Date(props.creationTime);\n    }\n    if (props.groupId != undefined) {\n      amqpProperties.group_id = props.groupId;\n    }\n    if (props.groupSequence != undefined) {\n      amqpProperties.group_sequence = props.groupSequence;\n    }\n    if (props.messageId != undefined) {\n      amqpProperties.message_id = props.messageId;\n    }\n    if (props.replyTo != undefined) {\n      amqpProperties.reply_to = props.replyTo;\n    }\n    if (props.replyToGroupId != undefined) {\n      amqpProperties.reply_to_group_id = props.replyToGroupId;\n    }\n    if (props.subject != undefined) {\n      amqpProperties.subject = props.subject;\n    }\n    if (props.to != undefined) {\n      amqpProperties.to = props.to;\n    }\n    // if (props.userId != undefined) {\n    //   amqpProperties.user_id = props.userId;\n    // }\n\n    logger.verbose(\"To RheaMessageProperties: %O\", amqpProperties);\n    return amqpProperties;\n  },\n\n  /**\n   * Converts RheaMessageProperties to MessageProperties.\n   * @param props - Amqp message properties.\n   * @returns MessageProperties.\n   */\n  fromRheaMessageProperties(props: RheaMessageProperties): AmqpMessageProperties {\n    const msgProperties: AmqpMessageProperties = {};\n    if (props.absolute_expiry_time != undefined) {\n      msgProperties.absoluteExpiryTime = props.absolute_expiry_time.getTime();\n    }\n    if (props.content_encoding != undefined) {\n      msgProperties.contentEncoding = props.content_encoding;\n    }\n    if (props.content_type != undefined) {\n      msgProperties.contentType = props.content_type;\n    }\n    if (props.correlation_id != undefined) {\n      msgProperties.correlationId = props.correlation_id;\n    }\n    if (props.creation_time != undefined) {\n      msgProperties.creationTime = props.creation_time.getTime();\n    }\n    if (props.group_id != undefined) {\n      msgProperties.groupId = props.group_id;\n    }\n    if (props.group_sequence != undefined) {\n      msgProperties.groupSequence = props.group_sequence;\n    }\n    if (props.message_id != undefined) {\n      msgProperties.messageId = props.message_id;\n    }\n    if (props.reply_to != undefined) {\n      msgProperties.replyTo = props.reply_to;\n    }\n    if (props.reply_to_group_id != undefined) {\n      msgProperties.replyToGroupId = props.reply_to_group_id;\n    }\n    if (props.subject != undefined) {\n      msgProperties.subject = props.subject;\n    }\n    if (props.to != undefined) {\n      msgProperties.to = props.to;\n    }\n    // if (props.user_id != undefined) {\n    //   msgProperties.userId = props.user_id;\n    // }\n\n    logger.verbose(\"From RheaMessageProperties: %O\", msgProperties);\n    return msgProperties;\n  },\n};\n"]}