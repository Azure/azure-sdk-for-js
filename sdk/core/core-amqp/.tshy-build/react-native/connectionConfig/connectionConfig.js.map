{"version":3,"file":"connectionConfig.js","sourceRoot":"","sources":["../../../src/connectionConfig/connectionConfig.ts"],"names":[],"mappings":"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","sourcesContent":["// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT License.\n\nimport type { WebSocketImpl } from \"rhea-promise\";\nimport { isDefined } from \"@azure/core-util\";\nimport { parseConnectionString } from \"../util/utils.js\";\n\n/**\n * Describes the options that can be provided while creating a connection config.\n */\nexport interface ConnectionConfigOptions {\n  /**\n   * Indicates whether the entity path is required in the\n   * connection config.\n   */\n  isEntityPathRequired?: boolean;\n}\n\n/**\n * Describes the connection config object that is created after parsing an EventHub or ServiceBus\n * connection string.\n */\nexport interface ConnectionConfig {\n  /**\n   * The service bus endpoint\n   * \"sb://<yournamespace>.servicebus.windows.net/\".\n   */\n  endpoint: string;\n  /**\n   * The DNS hostname or IP address of the service.\n   * Typically of the form \"<yournamespace>.servicebus.windows.net\" unless connecting\n   * to the service through an intermediary.\n   */\n  host: string;\n  /**\n   * The fully qualified name of the host to connect to.\n   * This field can be used by AMQP proxies to determine the correct back-end service to\n   * connect the client to.\n   * Typically of the form \"<yournamespace>.servicebus.windows.net\".\n   */\n  amqpHostname?: string;\n  /**\n   * The port number.\n   */\n  port?: number;\n  /**\n   * The connection string.\n   */\n  connectionString: string;\n  /**\n   * The name/path of the entity (hub/queue/topic name) to which the\n   * connection needs to happen.\n   */\n  entityPath?: string;\n  /**\n   * The name of the access key.\n   */\n  sharedAccessKeyName: string;\n  /**\n   * The secret value of the access key.\n   */\n  sharedAccessKey: string;\n\n  /**\n   * The WebSocket constructor used to create an AMQP connection\n   * over a WebSocket. In browsers, the built-in WebSocket will be  used by default. In Node, a\n   * TCP socket will be used if a WebSocket constructor is not provided.\n   */\n  webSocket?: WebSocketImpl;\n\n  /**\n   * The path for the endpoint that accepts an AMQP\n   * connection over WebSockets.\n   */\n  webSocketEndpointPath?: string;\n\n  /**\n   * Options to be passed to the WebSocket constructor\n   */\n  webSocketConstructorOptions?: any;\n  /**\n   * This should be true only if the connection string contains the slug \";UseDevelopmentEmulator=true\"\n   * and the endpoint is a loopback address.\n   */\n  useDevelopmentEmulator?: boolean;\n}\n\nconst specialLocalIPs = [\"::1\", \"0:0:0:0:0:0:0:1\"];\n\nfunction getHost(endpoint: string): string {\n  for (const ip of specialLocalIPs) {\n    if (endpoint.includes(ip)) {\n      return ip;\n    }\n  }\n\n  const matches = /.*:\\/\\/([^/:]*)/.exec(endpoint);\n  const match = matches?.[1];\n  return !match ? endpoint : match;\n}\n\nfunction extractPort(ep: string): number | undefined {\n  const matches = /.*:(\\d*)/.exec(ep);\n  const match = matches?.[1];\n  return match ? parseInt(match, 10) : undefined;\n}\n\nfunction getPort(endpoint: string): number | undefined {\n  for (const ip of specialLocalIPs) {\n    if (endpoint.includes(ip)) {\n      return extractPort(endpoint.replace(ip, \"\"));\n    }\n  }\n\n  return extractPort(endpoint);\n}\n\n/**\n * Describes the ConnectionConfig module\n */\n// eslint-disable-next-line @typescript-eslint/no-redeclare -- renaming constant would be a breaking change.\nexport const ConnectionConfig = {\n  /**\n   * Creates the connection config.\n   * @param connectionString - The connection string for a given service like\n   * EventHub/ServiceBus.\n   * @param path - The name/path of the entity (hub name) to which the\n   * connection needs to happen. This will override the EntityPath in the connectionString\n   * if present.\n   * @returns ConnectionConfig\n   */\n  create(connectionString: string, path?: string): ConnectionConfig {\n    connectionString = String(connectionString);\n\n    const parsedCS = parseConnectionString<{\n      Endpoint: string;\n      SharedAccessKeyName: string;\n      SharedAccessKey: string;\n      EntityPath?: string;\n      UseDevelopmentEmulator?: string;\n    }>(connectionString);\n    if (!parsedCS.Endpoint) {\n      throw new TypeError(\"Missing Endpoint in Connection String.\");\n    }\n\n    if (!parsedCS.Endpoint.endsWith(\"/\")) parsedCS.Endpoint += \"/\";\n\n    let port: number | undefined;\n    if (parsedCS.Endpoint.includes(\":\")) {\n      port = getPort(parsedCS.Endpoint);\n    }\n\n    const result: ConnectionConfig = {\n      connectionString: connectionString,\n      endpoint: parsedCS.Endpoint,\n      host: getHost(parsedCS.Endpoint),\n      sharedAccessKeyName: parsedCS.SharedAccessKeyName,\n      sharedAccessKey: parsedCS.SharedAccessKey,\n      useDevelopmentEmulator: parsedCS.UseDevelopmentEmulator === \"true\",\n      ...(port !== undefined ? { port } : undefined),\n    };\n\n    if (path || parsedCS.EntityPath) {\n      result.entityPath = path || parsedCS.EntityPath;\n    }\n    return result;\n  },\n\n  /**\n   * Validates the properties of connection config.\n   * @param config - The connection config to be validated.\n   * @returns void\n   */\n  validate(config: ConnectionConfig, options?: ConnectionConfigOptions): void {\n    if (!options) options = {};\n\n    if (!config) {\n      throw new TypeError(\"Missing configuration\");\n    }\n\n    if (!config.endpoint) {\n      throw new TypeError(\"Missing 'endpoint' in configuration\");\n    }\n    config.endpoint = String(config.endpoint);\n\n    if (!config.host) {\n      throw new TypeError(\"Missing 'host' in configuration\");\n    }\n    config.host = String(config.host);\n\n    if (config.port !== undefined && !(config.port >= 0 && config.port <= 65535)) {\n      throw new TypeError(`Invalid 'port' of ${config.port} in configuration`);\n    }\n\n    if (options.isEntityPathRequired && !config.entityPath) {\n      throw new TypeError(\"Missing 'entityPath' in configuration\");\n    }\n    if (isDefined(config.entityPath)) {\n      config.entityPath = String(config.entityPath);\n    }\n\n    if (!isSharedAccessSignature(config.connectionString)) {\n      if (!config.sharedAccessKeyName) {\n        throw new TypeError(\"Missing 'sharedAccessKeyName' in configuration\");\n      }\n      config.sharedAccessKeyName = String(config.sharedAccessKeyName);\n\n      if (!config.sharedAccessKey) {\n        throw new TypeError(\"Missing 'sharedAccessKey' in configuration\");\n      }\n      config.sharedAccessKey = String(config.sharedAccessKey);\n    }\n  },\n};\n\n/**\n * @internal\n */\nexport function isSharedAccessSignature(connectionString: string): boolean {\n  return connectionString.match(/;{0,1}SharedAccessSignature=SharedAccessSignature /) != null;\n}\n"]}