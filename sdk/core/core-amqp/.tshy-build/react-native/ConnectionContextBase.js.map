{"version":3,"file":"ConnectionContextBase.js","sourceRoot":"","sources":["../../src/ConnectionContextBase.ts"],"names":[],"mappings":"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","sourcesContent":["// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT License.\n\nimport type { AwaitableSender, Receiver, Sender } from \"rhea-promise\";\nimport {\n  Connection,\n  type ConnectionOptions,\n  type CreateAwaitableSenderOptions,\n  type CreateReceiverOptions,\n  type CreateSenderOptions,\n  generate_uuid,\n} from \"rhea-promise\";\nimport { getFrameworkInfo, getPlatformInfo } from \"./util/runtimeInfo.js\";\nimport { CbsClient } from \"./cbs.js\";\nimport { ConnectionConfig } from \"./connectionConfig/connectionConfig.js\";\nimport { Constants } from \"./util/constants.js\";\nimport { isNodeLike } from \"@azure/core-util\";\n\n/**\n * Provides contextual information like the underlying amqp connection, cbs session, tokenProvider,\n * Connection config, data transformer, etc.\n */\nexport interface ConnectionContextBase {\n  /**\n   * The EventHub connection config that is created after\n   * parsing the connection string.\n   */\n  readonly config: ConnectionConfig;\n  /**\n   * The unique lock name per connection that is used to\n   * acquire the lock for establishing an amqp connection per client if one does not exist.\n   */\n  connectionLock: string;\n  /**\n   * The unique lock name per connection that is used to\n   * acquire the lock for negotiating cbs claim by an entity on that connection.\n   */\n  negotiateClaimLock: string;\n  /**\n   * The underlying AMQP connection.\n   */\n  connection: Connection;\n  /**\n   * The amqp connection id that uniquely identifies the\n   * connection within a process.\n   */\n  connectionId: string;\n  /**\n   * Indicates whether the close() method was\n   * called on the connection object.\n   */\n  wasConnectionCloseCalled: boolean;\n  /**\n   * A reference to the cbs session ($cbs endpoint) on the\n   * underlying AMQP connection for the EventHub Client.\n   */\n  cbsSession: CbsClient;\n  /**\n   * Updates the context to use a new underlying AMQP connection and new cbs session.\n   */\n  refreshConnection: () => void;\n}\n\n/**\n * Defines the properties that need to be set while establishing the AMQP connection.\n */\nexport interface ConnectionProperties {\n  /**\n   * The name of the product that will be populated as the AMQP\n   * connection property. Example: \"MSJSClient\".\n   */\n  product: string;\n  /**\n   * The version of the package/sdk that is making the AMQP connection.\n   */\n  version: string;\n  /**\n   * The userAgent that needs to be set as the AMQP connection\n   * property. Example: `\"/js-service-bus\"` or `\"/js-event-hubs,/js-event-processor-host=1.0.0\"`.\n   */\n  userAgent: string;\n}\n\n/**\n * Describes the parameters that can be provided to create the base connection context.\n */\nexport interface CreateConnectionContextBaseParameters {\n  /**\n   * The connection config that is created by parsing the\n   * connection string.\n   */\n  config: ConnectionConfig;\n  /**\n   * Properties to be provided while creating\n   * the AMQP connection.\n   */\n  connectionProperties: ConnectionProperties;\n  /**\n   * Determines whether entity path should be a part of\n   * the connection config. If `true` it must be present, `false` otherwise. Default value false.\n   */\n  isEntityPathRequired?: boolean;\n  /**\n   * The duration in which the promise should\n   * complete (resolve/reject). If it is not completed, then the Promise will be rejected after\n   * timeout occurs. Default: `60000 milliseconds`.\n   */\n  operationTimeoutInMs?: number;\n}\n\nconst maxListenerLimit = 1000;\n\nclass CoreAmqpConnection extends Connection {\n  /**\n   * Creates an amqp sender link. Max listener limit on the sender is set to 1000 because the\n   * default value of 10 in NodeJS is too low.\n   * @param options - Optional parameters to create a sender link.\n   * @returns Promise<Sender>.\n   */\n  async createSender(options?: CreateSenderOptions): Promise<Sender> {\n    const sender = await super.createSender(options);\n    sender.setMaxListeners(maxListenerLimit);\n    return sender;\n  }\n\n  /**\n   * Creates an awaitable amqp sender. Max listener limit on the sender is set to 1000 because the\n   * default value of 10 in NodeJS is too low.\n   * @param options - Optional parameters to create an awaitable sender link.\n   * - If `onError` and `onSessionError` handlers are not provided then the `AwaitableSender` will\n   * clear the timer and reject the Promise for all the entries of inflight send operation in its\n   * `deliveryDispositionMap`.\n   * - If the user is handling the reconnection of sender link or the underlying connection in it's\n   * app, then the `onError` and `onSessionError` handlers must be provided by the user and (s)he\n   * shall be responsible of clearing the `deliveryDispositionMap` of inflight `send()` operation.\n   *\n   * @returns Promise<AwaitableSender>.\n   */\n  async createAwaitableSender(options?: CreateAwaitableSenderOptions): Promise<AwaitableSender> {\n    const sender = await super.createAwaitableSender(options);\n    sender.setMaxListeners(maxListenerLimit);\n    return sender;\n  }\n\n  /**\n   * Creates an amqp receiver link. Max listener limit on the sender is set to 1000 because the\n   * default value of 10 in NodeJS is too low.\n   * @param options - Optional parameters to create a receiver link.\n   * @returns Promise<Receiver>.\n   */\n  async createReceiver(options?: CreateReceiverOptions): Promise<Receiver> {\n    const receiver = await super.createReceiver(options);\n    receiver.setMaxListeners(maxListenerLimit);\n    return receiver;\n  }\n}\n\n// eslint-disable-next-line @typescript-eslint/no-redeclare -- renaming constant would be a breaking change.\nexport const ConnectionContextBase = {\n  /**\n   * Creates the base connection context.\n   * @param parameters - Parameters to be provided to create\n   * the base connection context.\n   */\n  create(parameters: CreateConnectionContextBaseParameters): ConnectionContextBase {\n    ConnectionConfig.validate(parameters.config, {\n      isEntityPathRequired: parameters.isEntityPathRequired || false,\n    });\n    const userAgent = parameters.connectionProperties.userAgent;\n    if (userAgent.length > Constants.maxUserAgentLength) {\n      throw new Error(\n        `The user-agent string cannot be more than ${Constants.maxUserAgentLength} characters in length.` +\n          `The given user-agent string is: ${userAgent} with length: ${userAgent.length}`,\n      );\n    }\n\n    const connectionOptions: ConnectionOptions = {\n      transport: (parameters.config.useDevelopmentEmulator ? Constants.TCP : Constants.TLS) as any,\n      host: parameters.config.host,\n      hostname: parameters.config.amqpHostname ?? parameters.config.host,\n      username: parameters.config.sharedAccessKeyName,\n      port: parameters.config.port ?? (parameters.config.useDevelopmentEmulator ? 5672 : 5671),\n      reconnect: false,\n      properties: {\n        product: parameters.connectionProperties.product,\n        version: parameters.connectionProperties.version,\n        \"user-agent\": userAgent,\n        platform: getPlatformInfo(),\n        framework: getFrameworkInfo(),\n      },\n      idle_time_out: Constants.defaultConnectionIdleTimeoutInMs,\n      operationTimeoutInSeconds: parameters.operationTimeoutInMs\n        ? parameters.operationTimeoutInMs / 1000\n        : undefined,\n    };\n\n    if (\n      parameters.config.webSocket ||\n      (!isNodeLike && typeof self !== \"undefined\" && (self as any).WebSocket)\n    ) {\n      const socket = parameters.config.webSocket || (self as any).WebSocket;\n      const host = parameters.config.host;\n      const endpoint = parameters.config.webSocketEndpointPath || \"\";\n      const socketOptions = parameters.config.webSocketConstructorOptions || {};\n      const port = parameters.config.port ?? 443;\n\n      connectionOptions.webSocketOptions = {\n        webSocket: socket,\n        url: `wss://${host}:${port}/${endpoint}`,\n        protocol: [\"AMQPWSB10\"],\n        options: socketOptions,\n      };\n    }\n\n    const connection = new CoreAmqpConnection(connectionOptions);\n    const connectionLock = `${Constants.establishConnection}-${generate_uuid()}`;\n    const connectionContextBase: ConnectionContextBase = {\n      wasConnectionCloseCalled: false,\n      connectionLock: connectionLock,\n      negotiateClaimLock: `${Constants.negotiateClaim}-${generate_uuid()}`,\n      connection: connection,\n      connectionId: connection.id,\n      cbsSession: new CbsClient(connection, connectionLock),\n      config: parameters.config,\n      refreshConnection() {\n        const newConnection = new CoreAmqpConnection(connectionOptions);\n        const newConnectionLock = `${Constants.establishConnection}-${generate_uuid()}`;\n        this.wasConnectionCloseCalled = false;\n        this.connectionLock = newConnectionLock;\n        this.negotiateClaimLock = `${Constants.negotiateClaim} - ${generate_uuid()}`;\n        this.connection = newConnection;\n        this.connectionId = newConnection.id;\n        this.cbsSession = new CbsClient(newConnection, newConnectionLock);\n      },\n    };\n\n    return connectionContextBase;\n  },\n};\n"]}