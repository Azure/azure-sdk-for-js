# DO NOT EDIT THIS FILE
# This file is generated automatically and any changes will be lost.

trigger: none

pr:
  branches:
    include:
      - master
  paths:
    include:
      - sdk/core/amqp-common

jobs:
  - job: Prepare
    variables:
      - template: ../../../eng/pipelines/templates/variables/globals.yml

    pool:
      vmImage: "ubuntu-16.04"

    steps:
      - task: NodeTool@0
        inputs:
          versionSpec: "$(NodeVersion)"
        displayName: "Install Node.js $(NodeVersion)"

      - script: |
          npm install -g npm@6.9.0
        displayName: "Install npm version 6.9.0"

  - job: "Build"
    variables:
      - template: ../variables/globals.yml
      - name: Package
        value: "@azure/amqp-common"

    dependsOn:
      - Prepare

    pool:
      vmImage: "ubuntu-16.04"

    steps:
      - task: NodeTool@0
        inputs:
          versionSpec: "$(NodeVersion)"
        displayName: "Install Node.js $(NodeVersion)"

      - script: |
          npm install -g npm@6.9.0
        displayName: "Install npm version 6.9.0"

      - script: |
          node common/scripts/install-run-rush.js install
        displayName: "Install dependencies"

      - script: |
          node common/scripts/install-run-rush.js build --verbose --to $(Package)
        displayName: "Build libraries"
      - script: |
          node common/scripts/install-run-rush.js pack --verbose --to $(Package)
        displayName: "Pack libraries"

      - task: CopyFiles@2
        inputs:
          contents: "sdk/**/**/*.tgz"
          targetFolder: $(Build.ArtifactStagingDirectory)
          flattenFolders: true
        displayName: "Copy packages"

      - task: PublishPipelineArtifact@0
        condition: succeededOrFailed()
        displayName: "Publish artifacts"
        inputs:
          artifactName: packages
          targetPath: $(Build.ArtifactStagingDirectory)

  - job: "Analyze"

    dependsOn:
      - Prepare

    variables:
      - template: ../variables/globals.yml
      - name: Package
        value: "@azure/amqp-common"

    pool:
      vmImage: "ubuntu-16.04"

    steps:
      - task: UsePythonVersion@0
        displayName: "Use Python 3.6"
        inputs:
          versionSpec: "3.6"

      - task: NodeTool@0
        inputs:
          versionSpec: "$(NodeVersion)"
        displayName: "Install Node.js $(NodeVersion)"

      - script: |
          pip install setuptools wheel
          pip install doc-warden
          ward scan -d $(Build.SourcesDirectory) -c $(Build.SourcesDirectory)/.docsettings.yml
        displayName: "Verify Readmes"

      - script: |
          node common/scripts/install-run-rush.js install
          node common/scripts/install-run-rush.js audit --to $(Package)
        condition: and(succeeded(), eq(variables['RunNpmAudit'], 'true'))
        displayName: "Audit packages"

      - task: ms.vss-governance-buildtask.governance-build-task-component-detection.ComponentGovernanceComponentDetection@0
        # ComponentGovernance is currently unable to run on pull requests of public projects. Running on non-PR
        # builds should be sufficient.
        condition: and(succeededOrFailed(), ne(variables['Build.Reason'], 'PullRequest'))
        displayName: "Component Detection"

  - job: "Test"

    dependsOn:
      - Prepare

    strategy:
      matrix:
        Linux_Node8:
          OSName: "Linux"
          OSVmImage: "ubuntu-16.04"
          NodeVersion: "8.x"
        Linux_Node10:
          OSName: "Linux"
          OSVmImage: "ubuntu-16.04"
          NodeVersion: "10.x"
        Linux_Node12:
          OSName: "Linux"
          OSVmImage: "ubuntu-16.04"
          NodeVersion: "12.x"
        macOS_Node8:
          OSName: "macOS"
          OSVmImage: "macOS-10.13"
          NodeVersion: "8.x"
        macOS_Node10:
          OSName: "macOS"
          OSVmImage: "macOS-10.13"
          NodeVersion: "10.x"
        macOS_Node12:
          OSName: "macOS"
          OSVmImage: "macOS-10.13"
          NodeVersion: "12.x"
        Windows_Node8:
          OSName: "Windows"
          OSVmImage: "vs2017-win2016"
          NodeVersion: "8.x"
        Windows_Node10:
          OSName: "Windows"
          OSVmImage: "vs2017-win2016"
          NodeVersion: "10.x"
        Windows_Node12:
          OSName: "Windows"
          OSVmImage: "vs2017-win2016"
          NodeVersion: "12.x"

    pool:
      vmImage: "$(OSVmImage)"

    variables:
      Package: "@azure/amqp-common"

    steps:
      - task: NodeTool@0
        inputs:
          versionSpec: "$(NodeVersion)"
        displayName: "Install Node.js $(NodeVersion)"

      - script: |
          node common/scripts/install-run-rush.js install
        displayName: "Install dependencies"

      - script: |
          node common/scripts/install-run-rush.js build --verbose --to $(Package)
        displayName: "Build libraries"
      - script: |
          node common/scripts/install-run-rush.js build:test --verbose --to $(Package)
        displayName: "Build test assets"
      - script: |
          node common/scripts/install-run-rush.js unit-test --verbose --to $(Package)
        displayName: "Test libraries"

      - task: PublishTestResults@2
        inputs:
          testResultsFiles: "**/test-results.xml"
          testRunTitle: "$(OSName) Node $(NodeVersion)"
        condition: succeededOrFailed()
        displayName: "Publish test results"

