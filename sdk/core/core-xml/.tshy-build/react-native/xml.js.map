{"version":3,"file":"xml.js","sourceRoot":"","sources":["../../src/xml.ts"],"names":[],"mappings":"AAAA,uCAAuC;AACvC,kCAAkC;AAElC,OAAO,EAAE,UAAU,EAAE,SAAS,EAAE,YAAY,EAAE,MAAM,iBAAiB,CAAC;AACtE,OAAO,EAAE,WAAW,EAAE,WAAW,EAAmB,MAAM,iBAAiB,CAAC;AAE5E,SAAS,gBAAgB,CAAC,OAAmB;;IAM3C,OAAO;QACL,mBAAmB,EAAE,WAAW;QAChC,YAAY,EAAE,MAAA,OAAO,CAAC,UAAU,mCAAI,WAAW;QAC/C,gBAAgB,EAAE,KAAK;QACvB,yBAAyB,EAAE,KAAK;KACjC,CAAC;AACJ,CAAC;AAED,SAAS,oBAAoB,CAAC,UAAsB,EAAE;;IAYpD,uCACK,gBAAgB,CAAC,OAAO,CAAC,KAC5B,mBAAmB,EAAE,IAAI,EACzB,MAAM,EAAE,IAAI,EACZ,iBAAiB,EAAE,IAAI,EACvB,QAAQ,EAAE,EAAE,EACZ,YAAY,EAAE,MAAA,OAAO,CAAC,QAAQ,mCAAI,MAAM,EACxC,aAAa,EAAE,MAAA,OAAO,CAAC,aAAa,mCAAI,SAAS,IACjD;AACJ,CAAC;AAED,SAAS,gBAAgB,CAAC,UAAsB,EAAE;IAYhD,uCACK,gBAAgB,CAAC,OAAO,CAAC,KAC5B,mBAAmB,EAAE,KAAK,EAC1B,aAAa,EAAE,KAAK,EACpB,mBAAmB,EAAE,EAAE,EACvB,SAAS,EAAE,OAAO,CAAC,SAAS,EAC5B,eAAe,EAAE,IAAI,EACrB,UAAU,EAAE,KAAK,IACjB;AACJ,CAAC;AACD;;;;;GAKG;AACH,MAAM,UAAU,YAAY,CAAC,GAAY,EAAE,OAAmB,EAAE;IAC9D,MAAM,aAAa,GAAG,oBAAoB,CAAC,IAAI,CAAC,CAAC;IACjD,MAAM,GAAG,GAAG,IAAI,UAAU,CAAC,aAAa,CAAC,CAAC;IAE1C,MAAM,IAAI,GAAG,EAAE,CAAC,aAAa,CAAC,YAAY,CAAC,EAAE,GAAG,EAAE,CAAC;IAEnD,MAAM,OAAO,GAAW,GAAG,CAAC,KAAK,CAAC,IAAI,CAAC,CAAC;IACxC,OAAO,0DAA0D,OAAO,EAAE,CAAC,OAAO,CAAC,KAAK,EAAE,EAAE,CAAC,CAAC;AAChG,CAAC;AAED;;;;;GAKG;AACH,MAAM,CAAC,KAAK,UAAU,QAAQ,CAAC,GAAW,EAAE,OAAmB,EAAE;IAC/D,IAAI,CAAC,GAAG,EAAE,CAAC;QACT,MAAM,IAAI,KAAK,CAAC,mBAAmB,CAAC,CAAC;IACvC,CAAC;IAED,MAAM,UAAU,GAAG,YAAY,CAAC,QAAQ,CAAC,GAAG,CAAC,CAAC;IAE9C,IAAI,UAAU,KAAK,IAAI,EAAE,CAAC;QACxB,MAAM,UAAU,CAAC;IACnB,CAAC;IAED,MAAM,MAAM,GAAG,IAAI,SAAS,CAAC,gBAAgB,CAAC,IAAI,CAAC,CAAC,CAAC;IACrD,MAAM,SAAS,GAAG,MAAM,CAAC,KAAK,CAAC,GAAG,CAAC,CAAC;IAEpC,0CAA0C;IAC1C,qDAAqD;IACrD,IAAI,SAAS,CAAC,MAAM,CAAC,EAAE,CAAC;QACtB,OAAO,SAAS,CAAC,MAAM,CAAC,CAAC;IAC3B,CAAC;IAED,IAAI,CAAC,IAAI,CAAC,WAAW,EAAE,CAAC;QACtB,KAAK,MAAM,GAAG,IAAI,MAAM,CAAC,IAAI,CAAC,SAAS,CAAC,EAAE,CAAC;YACzC,MAAM,KAAK,GAAG,SAAS,CAAC,GAAG,CAAC,CAAC;YAC7B,OAAO,OAAO,KAAK,KAAK,QAAQ,CAAC,CAAC,mBAAM,KAAK,EAAG,CAAC,CAAC,KAAK,CAAC;QAC1D,CAAC;IACH,CAAC;IAED,OAAO,SAAS,CAAC;AACnB,CAAC","sourcesContent":["// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT License.\n\nimport { XMLBuilder, XMLParser, XMLValidator } from \"fast-xml-parser\";\nimport { XML_ATTRKEY, XML_CHARKEY, type XmlOptions } from \"./xml.common.js\";\n\nfunction getCommonOptions(options: XmlOptions): {\n  attributesGroupName: string;\n  textNodeName: string;\n  ignoreAttributes: boolean;\n  suppressBooleanAttributes: boolean;\n} {\n  return {\n    attributesGroupName: XML_ATTRKEY,\n    textNodeName: options.xmlCharKey ?? XML_CHARKEY,\n    ignoreAttributes: false,\n    suppressBooleanAttributes: false,\n  };\n}\n\nfunction getSerializerOptions(options: XmlOptions = {}): {\n  attributesGroupName: string;\n  textNodeName: string;\n  ignoreAttributes: boolean;\n  suppressBooleanAttributes: boolean;\n  attributeNamePrefix: string;\n  format: boolean;\n  suppressEmptyNode: boolean;\n  indentBy: string;\n  rootNodeName: string;\n  cdataPropName: string;\n} {\n  return {\n    ...getCommonOptions(options),\n    attributeNamePrefix: \"@_\",\n    format: true,\n    suppressEmptyNode: true,\n    indentBy: \"\",\n    rootNodeName: options.rootName ?? \"root\",\n    cdataPropName: options.cdataPropName ?? \"__cdata\",\n  };\n}\n\nfunction getParserOptions(options: XmlOptions = {}): {\n  attributesGroupName: string;\n  textNodeName: string;\n  ignoreAttributes: boolean;\n  suppressBooleanAttributes: boolean;\n  parseAttributeValue: boolean;\n  parseTagValue: boolean;\n  attributeNamePrefix: string;\n  stopNodes?: string[];\n  processEntities: boolean;\n  trimValues: boolean;\n} {\n  return {\n    ...getCommonOptions(options),\n    parseAttributeValue: false,\n    parseTagValue: false,\n    attributeNamePrefix: \"\",\n    stopNodes: options.stopNodes,\n    processEntities: true,\n    trimValues: false,\n  };\n}\n/**\n * Converts given JSON object to XML string\n * @param obj - JSON object to be converted into XML string\n * @param opts - Options that govern the XML building of given JSON object\n * `rootName` indicates the name of the root element in the resulting XML\n */\nexport function stringifyXML(obj: unknown, opts: XmlOptions = {}): string {\n  const parserOptions = getSerializerOptions(opts);\n  const j2x = new XMLBuilder(parserOptions);\n\n  const node = { [parserOptions.rootNodeName]: obj };\n\n  const xmlData: string = j2x.build(node);\n  return `<?xml version=\"1.0\" encoding=\"UTF-8\" standalone=\"yes\"?>${xmlData}`.replace(/\\n/g, \"\");\n}\n\n/**\n * Converts given XML string into JSON\n * @param str - String containing the XML content to be parsed into JSON\n * @param opts - Options that govern the parsing of given xml string\n * `includeRoot` indicates whether the root element is to be included or not in the output\n */\nexport async function parseXML(str: string, opts: XmlOptions = {}): Promise<any> {\n  if (!str) {\n    throw new Error(\"Document is empty\");\n  }\n\n  const validation = XMLValidator.validate(str);\n\n  if (validation !== true) {\n    throw validation;\n  }\n\n  const parser = new XMLParser(getParserOptions(opts));\n  const parsedXml = parser.parse(str);\n\n  // Remove the <?xml version=\"...\" ?> node.\n  // This is a change in behavior on fxp v4. Issue #424\n  if (parsedXml[\"?xml\"]) {\n    delete parsedXml[\"?xml\"];\n  }\n\n  if (!opts.includeRoot) {\n    for (const key of Object.keys(parsedXml)) {\n      const value = parsedXml[key];\n      return typeof value === \"object\" ? { ...value } : value;\n    }\n  }\n\n  return parsedXml;\n}\n"]}