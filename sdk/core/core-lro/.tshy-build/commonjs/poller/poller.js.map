{"version":3,"file":"poller.js","sourceRoot":"","sources":["../../../src/poller/poller.ts"],"names":[],"mappings":"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","sourcesContent":["// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT License.\n\nimport type { AbortSignalLike } from \"@azure/abort-controller\";\nimport type {\n  BuildCreatePollerOptions,\n  CreatePollerOptions,\n  Operation,\n  OperationState,\n  RestorableOperationState,\n  PollerLike,\n} from \"./models.js\";\nimport { deserializeState, initOperation, pollOperation } from \"./operation.js\";\nimport { POLL_INTERVAL_IN_MS } from \"./constants.js\";\nimport { delay } from \"@azure/core-util\";\n/**\n * Returns a poller factory.\n */\nexport function buildCreatePoller<TResponse, TResult, TState extends OperationState<TResult>>(\n  inputs: BuildCreatePollerOptions<TResponse, TResult, TState>,\n): (\n  lro: Operation<TResponse, { abortSignal?: AbortSignalLike }>,\n  options?: CreatePollerOptions<TResponse, TResult, TState>,\n) => PollerLike<TState, TResult> {\n  const {\n    getOperationLocation,\n    getStatusFromInitialResponse,\n    getStatusFromPollResponse,\n    isOperationError,\n    getResourceLocation,\n    getPollingInterval,\n    getError,\n    resolveOnUnsuccessful,\n  } = inputs;\n  return (\n    { init, poll }: Operation<TResponse, { abortSignal?: AbortSignalLike }>,\n    options?: CreatePollerOptions<TResponse, TResult, TState>,\n  ) => {\n    const {\n      processResult,\n      updateState,\n      withOperationLocation: withOperationLocationCallback,\n      intervalInMs = POLL_INTERVAL_IN_MS,\n      restoreFrom,\n    } = options || {};\n    const withOperationLocation = withOperationLocationCallback\n      ? (() => {\n          let called = false;\n          return (operationLocation: string, isUpdated: boolean) => {\n            if (isUpdated) withOperationLocationCallback(operationLocation);\n            else if (!called) withOperationLocationCallback(operationLocation);\n            called = true;\n          };\n        })()\n      : undefined;\n    let statePromise: Promise<TState>;\n    let state: RestorableOperationState<TResult, TState>;\n    if (restoreFrom) {\n      state = deserializeState(restoreFrom);\n      statePromise = Promise.resolve(state);\n    } else {\n      statePromise = initOperation({\n        init,\n        processResult,\n        getOperationStatus: getStatusFromInitialResponse,\n        withOperationLocation,\n        setErrorAsResult: !resolveOnUnsuccessful,\n      }).then((s) => (state = s));\n    }\n    let resultPromise: Promise<TResult> | undefined;\n    const abortController = new AbortController();\n    // Progress handlers\n    type Handler = (state: TState) => void;\n    const handlers = new Map<symbol, Handler>();\n    const handleProgressEvents = async (): Promise<void> => handlers.forEach((h) => h(state));\n    const cancelErrMsg = \"Operation was canceled\";\n    let currentPollIntervalInMs = intervalInMs;\n\n    const poller: PollerLike<TState, TResult> = {\n      get operationState(): TState | undefined {\n        return state;\n      },\n      get result(): TResult | undefined {\n        return state?.result;\n      },\n      get isDone(): boolean {\n        return [\"succeeded\", \"failed\", \"canceled\"].includes(state?.status ?? \"\");\n      },\n      onProgress: (callback: (state: TState) => void) => {\n        const s = Symbol();\n        handlers.set(s, callback);\n        return () => handlers.delete(s);\n      },\n      serialize: async () => {\n        await statePromise;\n        return JSON.stringify({\n          state,\n        });\n      },\n      submitted: async () => {\n        await statePromise;\n      },\n      pollUntilDone: async (pollOptions?: { abortSignal?: AbortSignalLike }) => {\n        resultPromise ??= (async () => {\n          await statePromise;\n          if (!state) {\n            throw new Error(\"Poller should be initialized but it is not!\");\n          }\n          const { abortSignal: inputAbortSignal } = pollOptions || {};\n          // In the future we can use AbortSignal.any() instead\n          function abortListener(): void {\n            abortController.abort();\n          }\n          const abortSignal = abortController.signal;\n          if (inputAbortSignal?.aborted) {\n            abortController.abort();\n          } else if (!abortSignal.aborted) {\n            inputAbortSignal?.addEventListener(\"abort\", abortListener, { once: true });\n          }\n\n          try {\n            if (!poller.isDone) {\n              await poller.poll({ abortSignal });\n              while (!poller.isDone) {\n                await delay(currentPollIntervalInMs, { abortSignal });\n                await poller.poll({ abortSignal });\n              }\n            }\n          } finally {\n            inputAbortSignal?.removeEventListener(\"abort\", abortListener);\n          }\n          if (resolveOnUnsuccessful) {\n            return poller.result as TResult;\n          } else {\n            switch (state.status) {\n              case \"succeeded\":\n                return poller.result as TResult;\n              case \"canceled\":\n                throw new Error(cancelErrMsg);\n              case \"failed\":\n                throw state.error;\n              case \"notStarted\":\n              case \"running\":\n                throw new Error(`Polling completed without succeeding or failing`);\n            }\n          }\n        })().finally(() => {\n          resultPromise = undefined;\n        });\n        return resultPromise;\n      },\n      async poll(pollOptions?: { abortSignal?: AbortSignalLike }): Promise<TState> {\n        await statePromise;\n        if (!state) {\n          throw new Error(\"Poller should be initialized but it is not!\");\n        }\n        if (resolveOnUnsuccessful) {\n          if (poller.isDone) return state;\n        } else {\n          switch (state.status) {\n            case \"succeeded\":\n              return state;\n            case \"canceled\":\n              throw new Error(cancelErrMsg);\n            case \"failed\":\n              throw state.error;\n          }\n        }\n        await pollOperation({\n          poll,\n          state,\n          getOperationLocation,\n          isOperationError,\n          withOperationLocation,\n          getPollingInterval,\n          getOperationStatus: getStatusFromPollResponse,\n          getResourceLocation,\n          processResult,\n          getError,\n          updateState,\n          options: pollOptions,\n          setDelay: (pollIntervalInMs) => {\n            currentPollIntervalInMs = pollIntervalInMs;\n          },\n          setErrorAsResult: !resolveOnUnsuccessful,\n        });\n        await handleProgressEvents();\n        if (!resolveOnUnsuccessful) {\n          switch (state.status) {\n            case \"canceled\":\n              throw new Error(cancelErrMsg);\n            case \"failed\":\n              throw state.error;\n          }\n        }\n\n        return state;\n      },\n      then<TResult1 = TResult, TResult2 = never>(\n        onfulfilled?: ((value: TResult) => TResult1 | PromiseLike<TResult1>) | undefined | null,\n        onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null,\n      ): Promise<TResult1 | TResult2> {\n        return poller.pollUntilDone().then(onfulfilled, onrejected);\n      },\n      catch<TResult2 = never>(\n        onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null,\n      ): Promise<TResult | TResult2> {\n        return poller.pollUntilDone().catch(onrejected);\n      },\n      finally(onfinally?: (() => void) | undefined | null): Promise<TResult> {\n        return poller.pollUntilDone().finally(onfinally);\n      },\n      [Symbol.toStringTag]: \"Poller\",\n    };\n    return poller;\n  };\n}\n"]}