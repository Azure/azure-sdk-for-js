// Copyright (c) Microsoft Corporation.
// Licensed under the MIT license.

import {
  TableResponseProperties,
  TableInsertEntityHeaders,
  TableCreateHeaders
} from "./generated/models";
import { PipelineOptions } from "@azure/core-https";
import { OperationOptions } from "@azure/core-client";

/**
 * Client options used to configure Tables Api requests
 */
export type TableServiceClientOptions = PipelineOptions & {
  endpoint?: string;
  version?: string;
};

/**
 * Contains response data for the createTable operation.
 */
export type CreateTableItemResponse = TableCreateHeaders;

/**
 * Contains response data for the createEntity operation.
 */
export type CreateTableEntityResponse = TableInsertEntityHeaders;

/**
 * Contains response data for the listTable operation.
 */
export type ListTableItemsResponse = Array<TableResponseProperties> & {
  /**
   * This header contains the continuation token value.
   */
  nextTableName?: string;
};

/**
 * Contains response data for the getEntity operation.
 */
export type ListEntitiesResponse<T extends object> = Array<TableEntityResult<T>> & {
  /**
   * Contains the continuation token value for partition key.
   */
  nextPartitionKey?: string;
  /**
   * Contains the continuation token value for row key.
   */
  nextRowKey?: string;
};

/**
 * Contains response data for the listEntities operation.
 */
export type GetTableEntityResponse<T extends object> = TableEntityResult<T>;

/**
 * Optional parameters for DeleteTableEntity operation
 */
export type DeleteTableEntityOptions = OperationOptions & {
  /**
   * Query options group
   */
  queryOptions?: TableEntityQueryOptions;

  /**
   * Provides a client-generated, opaque value with a 1 KB character limit that is recorded in the analytics logs when analytics logging is enabled.
   */
  requestId?: string;
  /**
   * The timeout parameter is expressed in seconds.
   */
  timeout?: number;
  /**
   * UTC date/time value generated by the service that indicates the time at which the response was initiated
   */
  etag?: string;
};

/**
 * Optional parameters for CreaateTable operation
 */
export type CreateTableOptions = OperationOptions & {
  /**
   * Query options group
   */
  queryOptions?: TableQueryOptions;
  /**
   * Provides a client-generated, opaque value with a 1 KB character limit that is recorded in the analytics logs when analytics logging is enabled.
   */
  requestId?: string;
};

/**
 * OData Query options to limit the set of tables returned.
 */
export interface TableQueryOptions {
  /**
   * OData filter expression.
   */
  filter?: string;
}

/**
 * OData Query options to limit the set of entities returned.
 */
export interface TableEntityQueryOptions {
  /**
   * OData filter expression.
   */
  filter?: string;
  /**
   * A select expression limits the properties on each entity to just those requested.
   */
  select?: string[];
}

/**
 * List tables optional parameters.
 */
export type ListTableItemsOptions = OperationOptions & {
  /**
   * Query options group
   */
  queryOptions?: TableQueryOptions;
  /**
   * Provides a client-generated, opaque value with a 1 KB character limit that is recorded in the analytics logs when analytics logging is enabled.
   */
  requestId?: string;
  /**
   * A table query continuation token from a previous call.
   */
  nextTableName?: string;
};

/**
 * Output type for query operations
 */
export type TableEntityResult<T> = T & {
  /**
   * etag property. Always returned by the service
   */
  etag: string;
  /**
   * Partition key property. Ommited if a select filter is set and this property is not requested
   */
  partitionKey?: string;
  /**
   * Row key property. Ommited if a select filter is set and this property is not requested
   */
  rowKey?: string;
  /**
   * Timestamp property. This property is assinged by the service on entity creation
   * Ommited if a select filter is set and this property is not requested
   */
  timestamp?: string;
};

/**
 * List entities optional parameters.
 */
export type ListTableEntitiesOptions = OperationOptions & {
  /**
   * Query options group
   */
  queryOptions?: TableEntityQueryOptions;
  /**
   * Provides a client-generated, opaque value with a 1 KB character limit that is recorded in the analytics logs when analytics logging is enabled.
   */
  requestId?: string;
  /**
   * The timeout parameter is expressed in seconds.
   */
  timeout?: number;
  /**
   * An entity query continuation token from a previous call.
   */
  nextPartitionKey?: string;
  /**
   * An entity query continuation token from a previous call.
   */
  nextRowKey?: string;
};

/**
 * GetEntity optional parameters.
 */
export type GetTableEntityOptions = OperationOptions & {
  /**
   * Parameter group
   */
  queryOptions?: TableEntityQueryOptions;
  /**
   * Provides a client-generated, opaque value with a 1 KB character limit that is recorded in the analytics logs when analytics logging is enabled.
   */
  requestId?: string;
  /**
   * The timeout parameter is expressed in seconds.
   */
  timeout?: number;
};

/**
 * Create entity optional parameters.
 */
export type CreateTableEntityOptions = OperationOptions & {
  /**
   * Parameter group
   */
  queryOptions?: TableEntityQueryOptions;
  /**
   * Provides a client-generated, opaque value with a 1 KB character limit that is recorded in the analytics logs when analytics logging is enabled.
   */
  requestId?: string;
  /**
   * The timeout parameter is expressed in seconds.
   */
  timeout?: number;
};

/**
 * Update entity optional parameters.
 */
export type UpdateTableEntityOptions = OperationOptions & {
  /**
   * Query options group
   */
  queryOptions?: TableQueryOptions;
  /**
   * Provides a client-generated, opaque value with a 1 KB character limit that is recorded in the analytics logs when analytics logging is enabled.
   */
  requestId?: string;
  /**
   * The timeout parameter is expressed in seconds.
   */
  timeout?: number;
  /**
   * Match condition for an entity to be updated. If specified and a matching entity is not found, an error will be raised. To force an unconditional update, set to the wildcard character (*). If not specified, an insert will be performed when no existing entity is found to update and a replace will be performed if an existing entity is found.
   */
  etag?: string;
};

/**
 * Merge entity optional parameters.
 */
export type UpsertTableEntityOptions = OperationOptions & {
  /**
   * Parameter group
   */
  queryOptions?: TableEntityQueryOptions;
  /**
   * Provides a client-generated, opaque value with a 1 KB character limit that is recorded in the analytics logs when analytics logging is enabled.
   */
  requestId?: string;
  /**
   * The timeout parameter is expressed in seconds.
   */
  timeout?: number;
  /**
   * Match condition for an entity to be updated. If specified and a matching entity is not found, an error will be raised. To force an unconditional update, set to the wildcard character (*). If not specified, an insert will be performed when no existing entity is found to update and a merge will be performed if an existing entity is found.
   */
  etag?: string;
};

/**
 * A set of key-value pairs representing the table entity.
 */
export type TableEntity<T extends object> = T & {
  /**
   * The PartitionKey property of the entity.
   */
  partitionKey: string;
  /**
   * The RowKey property of the entity.
   */
  rowKey: string;
};

/**
 * Supported EDM Types by Azure Tables.
 */
export type EdmTypes =
  | "Binary"
  | "Boolean"
  | "DateTime"
  | "Double"
  | "Guid"
  | "Int32"
  | "Int64"
  | "String";

/**
 * Entity Data Model representation for an entity property.
 */
export interface Edm<T extends EdmTypes> {
  /**
   * The value of the entity property
   */
  value: T extends "Binary"
    ? Uint8Array
    : T extends "Boolean"
    ? boolean
    : T extends "Double"
    ? number
    : T extends "Int32"
    ? number
    : string;
  /**
   * The type of the entity property
   */
  type: T;
}

/**
 * The different modes for Update and Upsert methods
 * - Merge: Updates an entity by updating the entity's properties without replacing the existing entity.
 * - Replace: Updates an existing entity by replacing the entire entity.
 */
export type UpdateMode = "Merge" | "Replace";

/**
 * Defines the shape of a TableBatch
 */
export interface TableBatch {
  /**
   * Partition key tagetted by the batch
   */
  partitionKey: string;
  /**
   * Adds a createEntity operation to the batch per each entity in the entities array
   * @param entities - Array of entities to create
   */
  createEntities: <T extends object>(entitites: TableEntity<T>[]) => void;
  /**
   * Adds a createEntity operation to the batch
   * @param entity - Entity to create
   */
  createEntity: <T extends object>(entity: TableEntity<T>) => void;
  /**
   * Adds a deleteEntity operation to the batch
   * @param partitionKey - Partition key of the entity to delete
   * @param rowKey - Row key of the entity to delete
   * @param options - Options for the delete operation
   */
  deleteEntity: (partitionKey: string, rowKey: string, options?: DeleteTableEntityOptions) => void;
  /**
   * Adds an updateEntity operation to the batch
   * @param entity - Entity to update
   * @param mode - Update mode (Merge or Replace)
   * @param options - Options for the update operation
   */
  updateEntity: <T extends object>(
    entity: TableEntity<T>,
    mode: UpdateMode,
    options?: UpdateTableEntityOptions
  ) => void;
  /**
   * Submits the operations in the batch
   */
  submitBatch: () => Promise<TableBatchResponse>;
}

/**
 * Represents the response of a Batch operation
 */
export interface TableBatchResponse {
  /**
   * Collection of sub responses
   */
  subResponses: TableBatchEntityResponse[];
  /**
   * Main Batch request status code
   */
  status: number;
  /**
   * Gets a specific response given a row key
   */
  getResponseForEntity: (rowKey: string) => TableBatchEntityResponse | undefined;
}

/**
 * Represents a sub-response of a Batch operation
 */
export interface TableBatchEntityResponse {
  /**
   * Entity's etag
   */
  etag?: string;
  /**
   * Entity's rowKey
   */
  rowKey?: string;
  /**
   * Sub-response status
   */
  status: number;
}
