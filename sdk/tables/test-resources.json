{
  "$schema": "https://schema.management.azure.com/schemas/2015-01-01/deploymentTemplate.json#",
  "contentVersion": "1.0.0.0",
  "parameters": {
    "baseName": {
      "type": "string",
      "metadata": {
        "description": "The base resource name."
      }
    },
    "testApplicationOid": {
      "type": "string",
      "metadata": {
        "description": "The principal to assign the role to. This is application object id."
      }
    },
    "tenantId": {
      "type": "string",
      "defaultValue": "72f988bf-86f1-41af-91ab-2d7cd011db47",
      "metadata": {
        "description": "The tenant ID to which the application and resources belong."
      }
    },
    "storageEndpointSuffix": {
      "type": "string",
      "defaultValue": "core.windows.net",
      "metadata": {
        "description": "Storage endpoint suffix. The default value uses Azure Public Cloud (core.windows.net)"
      }
    },
    "baseTime": {
      "type": "string",
      "defaultValue": "[utcNow('u')]"
    }
  },
  "variables": {
    "storageApiVersion": "2019-06-01",
    "cosmosApiVersion": "2022-08-15",
    "authorizationApiVersion": "2018-09-01-preview",
    "blobDataContributorRoleId": "[concat('/subscriptions/', subscription().subscriptionId, '/providers/Microsoft.Authorization/roleDefinitions/0a9a7e1f-b9d0-4cc4-a60d-0319b160aaa3')]",
    "location": "[resourceGroup().location]",
    "storageAccountName": "[concat(parameters('baseName'), 'storage')]",
    "cosmosAccountName": "[concat(parameters('baseName'), 'cosmos')]",
    "resourceGroupName": "resourceGroup().name",
    "storageAccountNameTidy": "[toLower(trim(variables('storageAccountName')))]",
    "accountSasProperties": {
      "signedServices": "bfqt",
      "signedPermission": "rwdlacup",
      "signedResourceTypes": "sco",
      "keyToSign": "key2",
      "signedExpiry": "[dateTimeAdd(parameters('baseTime'), 'PT2H')]"
    },
    "cosmosPrimaryLocation": "West US",
    "cosmosSecondaryLocation": "East US"
  },
  "resources": [
    {
      "type": "Microsoft.Authorization/roleAssignments",
      "apiVersion": "[variables('authorizationApiVersion')]",
      "name": "[guid(concat('tableDataContributorRoleId', resourceGroup().id))]",
      "properties": {
        "roleDefinitionId": "[variables('blobDataContributorRoleId')]",
        "principalId": "[parameters('testApplicationOid')]"
      }
    },
    {
      "type": "Microsoft.Storage/storageAccounts",
      "apiVersion": "[variables('storageApiVersion')]",
      "name": "[variables('storageAccountName')]",
      "location": "[variables('location')]",
      "sku": {
        "name": "Standard_RAGRS",
        "tier": "Standard"
      },
      "kind": "StorageV2",
      "properties": {
        "networkAcls": {
          "bypass": "AzureServices",
          "virtualNetworkRules": [],
          "ipRules": [],
          "defaultAction": "Allow"
        },
        "supportsHttpsTrafficOnly": true,
        "encryption": {
          "services": {
            "file": {
              "enabled": true
            },
            "blob": {
              "enabled": true
            }
          },
          "keySource": "Microsoft.Storage"
        },
        "accessTier": "Hot"
      }
    },
    {
      "type": "Microsoft.DocumentDB/databaseAccounts",
      "apiVersion": "[variables('cosmosApiVersion')]",
      "name": "[variables('cosmosAccountName')]",
      "location": "[variables('cosmosPrimaryLocation')]",
      "tags": {
        "defaultExperience": "Azure Table",
        "hidden-cosmos-mmspecial": ""
      },
      "kind": "GlobalDocumentDB",
      "identity": {
        "type": "None"
      },
      "properties": {
        "publicNetworkAccess": "Enabled",
        "enableAutomaticFailover": false,
        "enableMultipleWriteLocations": true,
        "isVirtualNetworkFilterEnabled": false,
        "virtualNetworkRules": [],
        "disableKeyBasedMetadataWriteAccess": false,
        "enableFreeTier": false,
        "enableAnalyticalStorage": false,
        "analyticalStorageConfiguration": {
          "schemaType": "WellDefined"
        },
        "databaseAccountOfferType": "Standard",
        "defaultIdentity": "FirstPartyIdentity",
        "networkAclBypass": "None",
        "disableLocalAuth": false,
        "enablePartitionMerge": false,
        "consistencyPolicy": {
          "defaultConsistencyLevel": "BoundedStaleness",
          "maxIntervalInSeconds": 86400,
          "maxStalenessPrefix": 1000000
        },
        "locations": [
          {
            "locationName": "[variables('cosmosPrimaryLocation')]",
            "provisioningState": "Succeeded",
            "failoverPriority": 0,
            "isZoneRedundant": false
          },
          {
            "locationName": "[variables('cosmosSecondaryLocation')]",
            "provisioningState": "Succeeded",
            "failoverPriority": 1,
            "isZoneRedundant": false
          }
        ],
        "cors": [],
        "capabilities": [
          {
            "name": "EnableTable"
          }
        ],
        "ipRules": [],
        "networkAclBypassResourceIds": [],
        "keysMetadata": {}
      }
    }
  ],
  "outputs": {
    "RESOURCE_GROUP_NAME": {
      "type": "string",
      "value": "[variables('resourceGroupName')]"
    },
    "ACCOUNT_NAME": {
      "type": "string",
      "value": "[variables('storageAccountName')]"
    },
    "ACCOUNT_KEY": {
      "type": "string",
      "value": "[listKeys(resourceId('Microsoft.Storage/storageAccounts', variables('storageAccountName')), variables('storageApiVersion')).keys[0].value]"
    },
    "SAS_TOKEN": {
      "type": "string",
      "value": "[concat('?', listAccountSas(variables('storageAccountNameTidy'), variables('storageApiVersion'), variables('accountSasProperties')).accountSasToken)]"
    },
    "SAS_CONNECTION_STRING": {
      "type": "string",
      "value": "[concat('TableEndpoint=https://', variables('storageAccountName'), '.table.', parameters('storageEndpointSuffix'), '/;', 'SharedAccessSignature=', listAccountSas(variables('storageAccountNameTidy'), variables('storageApiVersion'), variables('accountSasProperties')).accountSasToken)]"
    },
    "ACCOUNT_CONNECTION_STRING": {
      "type": "string",
      "value": "[concat('DefaultEndpointsProtocol=https;storageAccountName=', variables('storageAccountName'), ';AccountKey=', listKeys(resourceId('Microsoft.Storage/storageAccounts', variables('storageAccountName')), variables('storageApiVersion')).keys[0].value, ';EndpointSuffix=', parameters('storageEndpointSuffix'))]"
    },
    "AZURE_TENANT_ID": {
      "type": "string",
      "value": "[parameters('tenantId')]"
    },
    "TABLES_URL": {
      "type": "string",
      "value": "[concat('https://', variables('storageAccountName'), '.table.', parameters('storageEndpointSuffix'))]"
    },
    "COSMOS_ENDPOINT": {
      "type": "string",
      "value": "[listKeys(resourceId('Microsoft.DocumentDB/databaseAccounts', variables('cosmosAccountName')), variables('cosmosApiVersion')).keys[0].value]"
    },
    "COSMOS_KEY": {
      "type": "string",
      "value": "[concat('https://', variables('cosmosAccountName'), '.table.cosmos.azure.com:443/)]"
    },
    "COSMOS_PRIMARY_LOCATION": {
      "type": "string",
      "value": "[variables('cosmosPrimaryLocation')]"
    },
    "COSMOS_SECONDARY_LOCATION": {
      "type": "string",
      "value": "[variables('cosmosSecondaryLocation')]"
    }
  }
}
