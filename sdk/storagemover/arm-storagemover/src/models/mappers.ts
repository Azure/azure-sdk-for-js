/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */

import * as coreClient from "@azure/core-client";

export const OperationListResult: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "OperationListResult",
    modelProperties: {
      value: {
        serializedName: "value",
        readOnly: true,
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "Operation"
            }
          }
        }
      },
      nextLink: {
        serializedName: "nextLink",
        readOnly: true,
        type: {
          name: "String"
        }
      }
    }
  }
};

export const Operation: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "Operation",
    modelProperties: {
      name: {
        serializedName: "name",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      isDataAction: {
        serializedName: "isDataAction",
        readOnly: true,
        type: {
          name: "Boolean"
        }
      },
      display: {
        serializedName: "display",
        type: {
          name: "Composite",
          className: "OperationDisplay"
        }
      },
      origin: {
        serializedName: "origin",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      actionType: {
        serializedName: "actionType",
        readOnly: true,
        type: {
          name: "String"
        }
      }
    }
  }
};

export const OperationDisplay: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "OperationDisplay",
    modelProperties: {
      provider: {
        serializedName: "provider",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      resource: {
        serializedName: "resource",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      operation: {
        serializedName: "operation",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      description: {
        serializedName: "description",
        readOnly: true,
        type: {
          name: "String"
        }
      }
    }
  }
};

export const ErrorResponse: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "ErrorResponse",
    modelProperties: {
      error: {
        serializedName: "error",
        type: {
          name: "Composite",
          className: "ErrorDetail"
        }
      }
    }
  }
};

export const ErrorDetail: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "ErrorDetail",
    modelProperties: {
      code: {
        serializedName: "code",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      message: {
        serializedName: "message",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      target: {
        serializedName: "target",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      details: {
        serializedName: "details",
        readOnly: true,
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "ErrorDetail"
            }
          }
        }
      },
      additionalInfo: {
        serializedName: "additionalInfo",
        readOnly: true,
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "ErrorAdditionalInfo"
            }
          }
        }
      }
    }
  }
};

export const ErrorAdditionalInfo: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "ErrorAdditionalInfo",
    modelProperties: {
      type: {
        serializedName: "type",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      info: {
        serializedName: "info",
        readOnly: true,
        type: {
          name: "Dictionary",
          value: { type: { name: "any" } }
        }
      }
    }
  }
};

export const StorageMoverList: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "StorageMoverList",
    modelProperties: {
      value: {
        serializedName: "value",
        readOnly: true,
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "StorageMover"
            }
          }
        }
      },
      nextLink: {
        serializedName: "nextLink",
        readOnly: true,
        type: {
          name: "String"
        }
      }
    }
  }
};

export const Resource: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "Resource",
    modelProperties: {
      id: {
        serializedName: "id",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      name: {
        serializedName: "name",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      type: {
        serializedName: "type",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      systemData: {
        serializedName: "systemData",
        type: {
          name: "Composite",
          className: "SystemData"
        }
      }
    }
  }
};

export const SystemData: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "SystemData",
    modelProperties: {
      createdBy: {
        serializedName: "createdBy",
        type: {
          name: "String"
        }
      },
      createdByType: {
        serializedName: "createdByType",
        type: {
          name: "String"
        }
      },
      createdAt: {
        serializedName: "createdAt",
        type: {
          name: "DateTime"
        }
      },
      lastModifiedBy: {
        serializedName: "lastModifiedBy",
        type: {
          name: "String"
        }
      },
      lastModifiedByType: {
        serializedName: "lastModifiedByType",
        type: {
          name: "String"
        }
      },
      lastModifiedAt: {
        serializedName: "lastModifiedAt",
        type: {
          name: "DateTime"
        }
      }
    }
  }
};

export const StorageMoverUpdateParameters: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "StorageMoverUpdateParameters",
    modelProperties: {
      tags: {
        serializedName: "tags",
        type: {
          name: "Dictionary",
          value: { type: { name: "String" } }
        }
      },
      description: {
        serializedName: "properties.description",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const AgentList: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "AgentList",
    modelProperties: {
      value: {
        serializedName: "value",
        readOnly: true,
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "Agent"
            }
          }
        }
      },
      nextLink: {
        serializedName: "nextLink",
        readOnly: true,
        type: {
          name: "String"
        }
      }
    }
  }
};

export const AgentPropertiesErrorDetails: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "AgentPropertiesErrorDetails",
    modelProperties: {
      code: {
        serializedName: "code",
        type: {
          name: "String"
        }
      },
      message: {
        serializedName: "message",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const AgentUpdateParameters: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "AgentUpdateParameters",
    modelProperties: {
      description: {
        serializedName: "properties.description",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const EndpointList: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "EndpointList",
    modelProperties: {
      value: {
        serializedName: "value",
        readOnly: true,
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "Endpoint"
            }
          }
        }
      },
      nextLink: {
        serializedName: "nextLink",
        readOnly: true,
        type: {
          name: "String"
        }
      }
    }
  }
};

export const EndpointBaseProperties: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "EndpointBaseProperties",
    uberParent: "EndpointBaseProperties",
    polymorphicDiscriminator: {
      serializedName: "endpointType",
      clientName: "endpointType"
    },
    modelProperties: {
      endpointType: {
        serializedName: "endpointType",
        required: true,
        type: {
          name: "String"
        }
      },
      description: {
        serializedName: "description",
        type: {
          name: "String"
        }
      },
      provisioningState: {
        serializedName: "provisioningState",
        readOnly: true,
        type: {
          name: "String"
        }
      }
    }
  }
};

export const EndpointBaseUpdateParameters: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "EndpointBaseUpdateParameters",
    modelProperties: {
      properties: {
        serializedName: "properties",
        type: {
          name: "Composite",
          className: "EndpointBaseUpdateProperties"
        }
      }
    }
  }
};

export const EndpointBaseUpdateProperties: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "EndpointBaseUpdateProperties",
    uberParent: "EndpointBaseUpdateProperties",
    polymorphicDiscriminator: {
      serializedName: "endpointType",
      clientName: "endpointType"
    },
    modelProperties: {
      endpointType: {
        serializedName: "endpointType",
        required: true,
        type: {
          name: "String"
        }
      },
      description: {
        serializedName: "description",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const ProjectList: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "ProjectList",
    modelProperties: {
      value: {
        serializedName: "value",
        readOnly: true,
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "Project"
            }
          }
        }
      },
      nextLink: {
        serializedName: "nextLink",
        readOnly: true,
        type: {
          name: "String"
        }
      }
    }
  }
};

export const ProjectUpdateParameters: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "ProjectUpdateParameters",
    modelProperties: {
      description: {
        serializedName: "properties.description",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const JobDefinitionList: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "JobDefinitionList",
    modelProperties: {
      value: {
        serializedName: "value",
        readOnly: true,
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "JobDefinition"
            }
          }
        }
      },
      nextLink: {
        serializedName: "nextLink",
        readOnly: true,
        type: {
          name: "String"
        }
      }
    }
  }
};

export const JobDefinitionUpdateParameters: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "JobDefinitionUpdateParameters",
    modelProperties: {
      description: {
        serializedName: "properties.description",
        type: {
          name: "String"
        }
      },
      copyMode: {
        serializedName: "properties.copyMode",
        type: {
          name: "String"
        }
      },
      agentName: {
        serializedName: "properties.agentName",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const JobRunResourceId: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "JobRunResourceId",
    modelProperties: {
      jobRunResourceId: {
        serializedName: "jobRunResourceId",
        readOnly: true,
        type: {
          name: "String"
        }
      }
    }
  }
};

export const JobRunList: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "JobRunList",
    modelProperties: {
      value: {
        serializedName: "value",
        readOnly: true,
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "JobRun"
            }
          }
        }
      },
      nextLink: {
        serializedName: "nextLink",
        readOnly: true,
        type: {
          name: "String"
        }
      }
    }
  }
};

export const JobRunError: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "JobRunError",
    modelProperties: {
      code: {
        serializedName: "code",
        type: {
          name: "String"
        }
      },
      message: {
        serializedName: "message",
        type: {
          name: "String"
        }
      },
      target: {
        serializedName: "target",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const Credentials: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "Credentials",
    uberParent: "Credentials",
    polymorphicDiscriminator: {
      serializedName: "type",
      clientName: "type"
    },
    modelProperties: {
      type: {
        serializedName: "type",
        required: true,
        type: {
          name: "String"
        }
      }
    }
  }
};

export const TrackedResource: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "TrackedResource",
    modelProperties: {
      ...Resource.type.modelProperties,
      tags: {
        serializedName: "tags",
        type: {
          name: "Dictionary",
          value: { type: { name: "String" } }
        }
      },
      location: {
        serializedName: "location",
        required: true,
        type: {
          name: "String"
        }
      }
    }
  }
};

export const ProxyResource: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "ProxyResource",
    modelProperties: {
      ...Resource.type.modelProperties
    }
  }
};

export const AzureStorageBlobContainerEndpointProperties: coreClient.CompositeMapper = {
  serializedName: "AzureStorageBlobContainer",
  type: {
    name: "Composite",
    className: "AzureStorageBlobContainerEndpointProperties",
    uberParent: "EndpointBaseProperties",
    polymorphicDiscriminator:
      EndpointBaseProperties.type.polymorphicDiscriminator,
    modelProperties: {
      ...EndpointBaseProperties.type.modelProperties,
      storageAccountResourceId: {
        serializedName: "storageAccountResourceId",
        required: true,
        type: {
          name: "String"
        }
      },
      blobContainerName: {
        serializedName: "blobContainerName",
        required: true,
        type: {
          name: "String"
        }
      }
    }
  }
};

export const NfsMountEndpointProperties: coreClient.CompositeMapper = {
  serializedName: "NfsMount",
  type: {
    name: "Composite",
    className: "NfsMountEndpointProperties",
    uberParent: "EndpointBaseProperties",
    polymorphicDiscriminator:
      EndpointBaseProperties.type.polymorphicDiscriminator,
    modelProperties: {
      ...EndpointBaseProperties.type.modelProperties,
      host: {
        serializedName: "host",
        required: true,
        type: {
          name: "String"
        }
      },
      nfsVersion: {
        serializedName: "nfsVersion",
        type: {
          name: "String"
        }
      },
      export: {
        serializedName: "export",
        required: true,
        type: {
          name: "String"
        }
      }
    }
  }
};

export const AzureStorageSmbFileShareEndpointProperties: coreClient.CompositeMapper = {
  serializedName: "AzureStorageSmbFileShare",
  type: {
    name: "Composite",
    className: "AzureStorageSmbFileShareEndpointProperties",
    uberParent: "EndpointBaseProperties",
    polymorphicDiscriminator:
      EndpointBaseProperties.type.polymorphicDiscriminator,
    modelProperties: {
      ...EndpointBaseProperties.type.modelProperties,
      storageAccountResourceId: {
        serializedName: "storageAccountResourceId",
        required: true,
        type: {
          name: "String"
        }
      },
      fileShareName: {
        serializedName: "fileShareName",
        required: true,
        type: {
          name: "String"
        }
      }
    }
  }
};

export const SmbMountEndpointProperties: coreClient.CompositeMapper = {
  serializedName: "SmbMount",
  type: {
    name: "Composite",
    className: "SmbMountEndpointProperties",
    uberParent: "EndpointBaseProperties",
    polymorphicDiscriminator:
      EndpointBaseProperties.type.polymorphicDiscriminator,
    modelProperties: {
      ...EndpointBaseProperties.type.modelProperties,
      host: {
        serializedName: "host",
        required: true,
        type: {
          name: "String"
        }
      },
      shareName: {
        serializedName: "shareName",
        required: true,
        type: {
          name: "String"
        }
      },
      credentials: {
        serializedName: "credentials",
        type: {
          name: "Composite",
          className: "AzureKeyVaultSmbCredentials"
        }
      }
    }
  }
};

export const AzureStorageBlobContainerEndpointUpdateProperties: coreClient.CompositeMapper = {
  serializedName: "AzureStorageBlobContainer",
  type: {
    name: "Composite",
    className: "AzureStorageBlobContainerEndpointUpdateProperties",
    uberParent: "EndpointBaseUpdateProperties",
    polymorphicDiscriminator:
      EndpointBaseUpdateProperties.type.polymorphicDiscriminator,
    modelProperties: {
      ...EndpointBaseUpdateProperties.type.modelProperties
    }
  }
};

export const NfsMountEndpointUpdateProperties: coreClient.CompositeMapper = {
  serializedName: "NfsMount",
  type: {
    name: "Composite",
    className: "NfsMountEndpointUpdateProperties",
    uberParent: "EndpointBaseUpdateProperties",
    polymorphicDiscriminator:
      EndpointBaseUpdateProperties.type.polymorphicDiscriminator,
    modelProperties: {
      ...EndpointBaseUpdateProperties.type.modelProperties
    }
  }
};

export const AzureStorageSmbFileShareEndpointUpdateProperties: coreClient.CompositeMapper = {
  serializedName: "AzureStorageSmbFileShare",
  type: {
    name: "Composite",
    className: "AzureStorageSmbFileShareEndpointUpdateProperties",
    uberParent: "EndpointBaseUpdateProperties",
    polymorphicDiscriminator:
      EndpointBaseUpdateProperties.type.polymorphicDiscriminator,
    modelProperties: {
      ...EndpointBaseUpdateProperties.type.modelProperties
    }
  }
};

export const SmbMountEndpointUpdateProperties: coreClient.CompositeMapper = {
  serializedName: "SmbMount",
  type: {
    name: "Composite",
    className: "SmbMountEndpointUpdateProperties",
    uberParent: "EndpointBaseUpdateProperties",
    polymorphicDiscriminator:
      EndpointBaseUpdateProperties.type.polymorphicDiscriminator,
    modelProperties: {
      ...EndpointBaseUpdateProperties.type.modelProperties,
      credentials: {
        serializedName: "credentials",
        type: {
          name: "Composite",
          className: "AzureKeyVaultSmbCredentials"
        }
      }
    }
  }
};

export const AzureKeyVaultSmbCredentials: coreClient.CompositeMapper = {
  serializedName: "AzureKeyVaultSmb",
  type: {
    name: "Composite",
    className: "AzureKeyVaultSmbCredentials",
    uberParent: "Credentials",
    polymorphicDiscriminator: Credentials.type.polymorphicDiscriminator,
    modelProperties: {
      ...Credentials.type.modelProperties,
      usernameUri: {
        serializedName: "usernameUri",
        type: {
          name: "String"
        }
      },
      passwordUri: {
        serializedName: "passwordUri",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const StorageMover: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "StorageMover",
    modelProperties: {
      ...TrackedResource.type.modelProperties,
      description: {
        serializedName: "properties.description",
        type: {
          name: "String"
        }
      },
      provisioningState: {
        serializedName: "properties.provisioningState",
        readOnly: true,
        type: {
          name: "String"
        }
      }
    }
  }
};

export const Agent: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "Agent",
    modelProperties: {
      ...ProxyResource.type.modelProperties,
      description: {
        serializedName: "properties.description",
        type: {
          name: "String"
        }
      },
      agentVersion: {
        serializedName: "properties.agentVersion",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      arcResourceId: {
        serializedName: "properties.arcResourceId",
        required: true,
        type: {
          name: "String"
        }
      },
      arcVmUuid: {
        serializedName: "properties.arcVmUuid",
        required: true,
        type: {
          name: "String"
        }
      },
      agentStatus: {
        serializedName: "properties.agentStatus",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      lastStatusUpdate: {
        serializedName: "properties.lastStatusUpdate",
        readOnly: true,
        type: {
          name: "DateTime"
        }
      },
      localIPAddress: {
        serializedName: "properties.localIPAddress",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      memoryInMB: {
        serializedName: "properties.memoryInMB",
        readOnly: true,
        type: {
          name: "Number"
        }
      },
      numberOfCores: {
        serializedName: "properties.numberOfCores",
        readOnly: true,
        type: {
          name: "Number"
        }
      },
      uptimeInSeconds: {
        serializedName: "properties.uptimeInSeconds",
        readOnly: true,
        type: {
          name: "Number"
        }
      },
      errorDetails: {
        serializedName: "properties.errorDetails",
        type: {
          name: "Composite",
          className: "AgentPropertiesErrorDetails"
        }
      },
      provisioningState: {
        serializedName: "properties.provisioningState",
        readOnly: true,
        type: {
          name: "String"
        }
      }
    }
  }
};

export const Endpoint: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "Endpoint",
    modelProperties: {
      ...ProxyResource.type.modelProperties,
      properties: {
        serializedName: "properties",
        type: {
          name: "Composite",
          className: "EndpointBaseProperties"
        }
      }
    }
  }
};

export const Project: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "Project",
    modelProperties: {
      ...ProxyResource.type.modelProperties,
      description: {
        serializedName: "properties.description",
        type: {
          name: "String"
        }
      },
      provisioningState: {
        serializedName: "properties.provisioningState",
        readOnly: true,
        type: {
          name: "String"
        }
      }
    }
  }
};

export const JobDefinition: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "JobDefinition",
    modelProperties: {
      ...ProxyResource.type.modelProperties,
      description: {
        serializedName: "properties.description",
        type: {
          name: "String"
        }
      },
      copyMode: {
        serializedName: "properties.copyMode",
        required: true,
        type: {
          name: "String"
        }
      },
      sourceName: {
        serializedName: "properties.sourceName",
        required: true,
        type: {
          name: "String"
        }
      },
      sourceResourceId: {
        serializedName: "properties.sourceResourceId",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      sourceSubpath: {
        serializedName: "properties.sourceSubpath",
        type: {
          name: "String"
        }
      },
      targetName: {
        serializedName: "properties.targetName",
        required: true,
        type: {
          name: "String"
        }
      },
      targetResourceId: {
        serializedName: "properties.targetResourceId",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      targetSubpath: {
        serializedName: "properties.targetSubpath",
        type: {
          name: "String"
        }
      },
      latestJobRunName: {
        serializedName: "properties.latestJobRunName",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      latestJobRunResourceId: {
        serializedName: "properties.latestJobRunResourceId",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      latestJobRunStatus: {
        serializedName: "properties.latestJobRunStatus",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      agentName: {
        serializedName: "properties.agentName",
        type: {
          name: "String"
        }
      },
      agentResourceId: {
        serializedName: "properties.agentResourceId",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      provisioningState: {
        serializedName: "properties.provisioningState",
        readOnly: true,
        type: {
          name: "String"
        }
      }
    }
  }
};

export const JobRun: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "JobRun",
    modelProperties: {
      ...ProxyResource.type.modelProperties,
      status: {
        serializedName: "properties.status",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      scanStatus: {
        serializedName: "properties.scanStatus",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      agentName: {
        serializedName: "properties.agentName",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      agentResourceId: {
        serializedName: "properties.agentResourceId",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      executionStartTime: {
        serializedName: "properties.executionStartTime",
        readOnly: true,
        type: {
          name: "DateTime"
        }
      },
      executionEndTime: {
        serializedName: "properties.executionEndTime",
        readOnly: true,
        type: {
          name: "DateTime"
        }
      },
      lastStatusUpdate: {
        serializedName: "properties.lastStatusUpdate",
        readOnly: true,
        type: {
          name: "DateTime"
        }
      },
      itemsScanned: {
        serializedName: "properties.itemsScanned",
        readOnly: true,
        type: {
          name: "Number"
        }
      },
      itemsExcluded: {
        serializedName: "properties.itemsExcluded",
        readOnly: true,
        type: {
          name: "Number"
        }
      },
      itemsUnsupported: {
        serializedName: "properties.itemsUnsupported",
        readOnly: true,
        type: {
          name: "Number"
        }
      },
      itemsNoTransferNeeded: {
        serializedName: "properties.itemsNoTransferNeeded",
        readOnly: true,
        type: {
          name: "Number"
        }
      },
      itemsFailed: {
        serializedName: "properties.itemsFailed",
        readOnly: true,
        type: {
          name: "Number"
        }
      },
      itemsTransferred: {
        serializedName: "properties.itemsTransferred",
        readOnly: true,
        type: {
          name: "Number"
        }
      },
      bytesScanned: {
        serializedName: "properties.bytesScanned",
        readOnly: true,
        type: {
          name: "Number"
        }
      },
      bytesExcluded: {
        serializedName: "properties.bytesExcluded",
        readOnly: true,
        type: {
          name: "Number"
        }
      },
      bytesUnsupported: {
        serializedName: "properties.bytesUnsupported",
        readOnly: true,
        type: {
          name: "Number"
        }
      },
      bytesNoTransferNeeded: {
        serializedName: "properties.bytesNoTransferNeeded",
        readOnly: true,
        type: {
          name: "Number"
        }
      },
      bytesFailed: {
        serializedName: "properties.bytesFailed",
        readOnly: true,
        type: {
          name: "Number"
        }
      },
      bytesTransferred: {
        serializedName: "properties.bytesTransferred",
        readOnly: true,
        type: {
          name: "Number"
        }
      },
      sourceName: {
        serializedName: "properties.sourceName",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      sourceResourceId: {
        serializedName: "properties.sourceResourceId",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      sourceProperties: {
        serializedName: "properties.sourceProperties",
        readOnly: true,
        type: {
          name: "Dictionary",
          value: { type: { name: "any" } }
        }
      },
      targetName: {
        serializedName: "properties.targetName",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      targetResourceId: {
        serializedName: "properties.targetResourceId",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      targetProperties: {
        serializedName: "properties.targetProperties",
        readOnly: true,
        type: {
          name: "Dictionary",
          value: { type: { name: "any" } }
        }
      },
      jobDefinitionProperties: {
        serializedName: "properties.jobDefinitionProperties",
        readOnly: true,
        type: {
          name: "Dictionary",
          value: { type: { name: "any" } }
        }
      },
      error: {
        serializedName: "properties.error",
        type: {
          name: "Composite",
          className: "JobRunError"
        }
      },
      provisioningState: {
        serializedName: "properties.provisioningState",
        readOnly: true,
        type: {
          name: "String"
        }
      }
    }
  }
};

export let discriminators = {
  EndpointBaseProperties: EndpointBaseProperties,
  EndpointBaseUpdateProperties: EndpointBaseUpdateProperties,
  Credentials: Credentials,
  "EndpointBaseProperties.AzureStorageBlobContainer": AzureStorageBlobContainerEndpointProperties,
  "EndpointBaseProperties.NfsMount": NfsMountEndpointProperties,
  "EndpointBaseProperties.AzureStorageSmbFileShare": AzureStorageSmbFileShareEndpointProperties,
  "EndpointBaseProperties.SmbMount": SmbMountEndpointProperties,
  "EndpointBaseUpdateProperties.AzureStorageBlobContainer": AzureStorageBlobContainerEndpointUpdateProperties,
  "EndpointBaseUpdateProperties.NfsMount": NfsMountEndpointUpdateProperties,
  "EndpointBaseUpdateProperties.AzureStorageSmbFileShare": AzureStorageSmbFileShareEndpointUpdateProperties,
  "EndpointBaseUpdateProperties.SmbMount": SmbMountEndpointUpdateProperties,
  "Credentials.AzureKeyVaultSmb": AzureKeyVaultSmbCredentials
};
