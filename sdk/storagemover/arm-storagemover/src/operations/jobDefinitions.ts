/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */

import { PagedAsyncIterableIterator, PageSettings } from "@azure/core-paging";
import { setContinuationToken } from "../pagingHelper";
import { JobDefinitions } from "../operationsInterfaces";
import * as coreClient from "@azure/core-client";
import * as Mappers from "../models/mappers";
import * as Parameters from "../models/parameters";
import { StorageMoverClient } from "../storageMoverClient";
import { PollerLike, PollOperationState, LroEngine } from "@azure/core-lro";
import { LroImpl } from "../lroImpl";
import {
  JobDefinition,
  JobDefinitionsListNextOptionalParams,
  JobDefinitionsListOptionalParams,
  JobDefinitionsListResponse,
  JobDefinitionsGetOptionalParams,
  JobDefinitionsGetResponse,
  JobDefinitionsCreateOrUpdateOptionalParams,
  JobDefinitionsCreateOrUpdateResponse,
  JobDefinitionUpdateParameters,
  JobDefinitionsUpdateOptionalParams,
  JobDefinitionsUpdateResponse,
  JobDefinitionsDeleteOptionalParams,
  JobDefinitionsStartJobOptionalParams,
  JobDefinitionsStartJobResponse,
  JobDefinitionsStopJobOptionalParams,
  JobDefinitionsStopJobResponse,
  JobDefinitionsListNextResponse
} from "../models";

/// <reference lib="esnext.asynciterable" />
/** Class containing JobDefinitions operations. */
export class JobDefinitionsImpl implements JobDefinitions {
  private readonly client: StorageMoverClient;

  /**
   * Initialize a new instance of the class JobDefinitions class.
   * @param client Reference to the service client
   */
  constructor(client: StorageMoverClient) {
    this.client = client;
  }

  /**
   * Lists all Job Definitions in a Project.
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param storageMoverName The name of the Storage Mover resource.
   * @param projectName The name of the Project resource.
   * @param options The options parameters.
   */
  public list(
    resourceGroupName: string,
    storageMoverName: string,
    projectName: string,
    options?: JobDefinitionsListOptionalParams
  ): PagedAsyncIterableIterator<JobDefinition> {
    const iter = this.listPagingAll(
      resourceGroupName,
      storageMoverName,
      projectName,
      options
    );
    return {
      next() {
        return iter.next();
      },
      [Symbol.asyncIterator]() {
        return this;
      },
      byPage: (settings?: PageSettings) => {
        if (settings?.maxPageSize) {
          throw new Error("maxPageSize is not supported by this operation.");
        }
        return this.listPagingPage(
          resourceGroupName,
          storageMoverName,
          projectName,
          options,
          settings
        );
      }
    };
  }

  private async *listPagingPage(
    resourceGroupName: string,
    storageMoverName: string,
    projectName: string,
    options?: JobDefinitionsListOptionalParams,
    settings?: PageSettings
  ): AsyncIterableIterator<JobDefinition[]> {
    let result: JobDefinitionsListResponse;
    let continuationToken = settings?.continuationToken;
    if (!continuationToken) {
      result = await this._list(
        resourceGroupName,
        storageMoverName,
        projectName,
        options
      );
      let page = result.value || [];
      continuationToken = result.nextLink;
      setContinuationToken(page, continuationToken);
      yield page;
    }
    while (continuationToken) {
      result = await this._listNext(
        resourceGroupName,
        storageMoverName,
        projectName,
        continuationToken,
        options
      );
      continuationToken = result.nextLink;
      let page = result.value || [];
      setContinuationToken(page, continuationToken);
      yield page;
    }
  }

  private async *listPagingAll(
    resourceGroupName: string,
    storageMoverName: string,
    projectName: string,
    options?: JobDefinitionsListOptionalParams
  ): AsyncIterableIterator<JobDefinition> {
    for await (const page of this.listPagingPage(
      resourceGroupName,
      storageMoverName,
      projectName,
      options
    )) {
      yield* page;
    }
  }

  /**
   * Lists all Job Definitions in a Project.
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param storageMoverName The name of the Storage Mover resource.
   * @param projectName The name of the Project resource.
   * @param options The options parameters.
   */
  private _list(
    resourceGroupName: string,
    storageMoverName: string,
    projectName: string,
    options?: JobDefinitionsListOptionalParams
  ): Promise<JobDefinitionsListResponse> {
    return this.client.sendOperationRequest(
      { resourceGroupName, storageMoverName, projectName, options },
      listOperationSpec
    );
  }

  /**
   * Gets a Job Definition resource.
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param storageMoverName The name of the Storage Mover resource.
   * @param projectName The name of the Project resource.
   * @param jobDefinitionName The name of the Job Definition resource.
   * @param options The options parameters.
   */
  get(
    resourceGroupName: string,
    storageMoverName: string,
    projectName: string,
    jobDefinitionName: string,
    options?: JobDefinitionsGetOptionalParams
  ): Promise<JobDefinitionsGetResponse> {
    return this.client.sendOperationRequest(
      {
        resourceGroupName,
        storageMoverName,
        projectName,
        jobDefinitionName,
        options
      },
      getOperationSpec
    );
  }

  /**
   * Creates or updates a Job Definition resource, which contains configuration for a single unit of
   * managed data transfer.
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param storageMoverName The name of the Storage Mover resource.
   * @param projectName The name of the Project resource.
   * @param jobDefinitionName The name of the Job Definition resource.
   * @param jobDefinition The Job Definition resource.
   * @param options The options parameters.
   */
  createOrUpdate(
    resourceGroupName: string,
    storageMoverName: string,
    projectName: string,
    jobDefinitionName: string,
    jobDefinition: JobDefinition,
    options?: JobDefinitionsCreateOrUpdateOptionalParams
  ): Promise<JobDefinitionsCreateOrUpdateResponse> {
    return this.client.sendOperationRequest(
      {
        resourceGroupName,
        storageMoverName,
        projectName,
        jobDefinitionName,
        jobDefinition,
        options
      },
      createOrUpdateOperationSpec
    );
  }

  /**
   * Updates properties for a Job Definition resource. Properties not specified in the request body will
   * be unchanged.
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param storageMoverName The name of the Storage Mover resource.
   * @param projectName The name of the Project resource.
   * @param jobDefinitionName The name of the Job Definition resource.
   * @param jobDefinition The Job Definition resource.
   * @param options The options parameters.
   */
  update(
    resourceGroupName: string,
    storageMoverName: string,
    projectName: string,
    jobDefinitionName: string,
    jobDefinition: JobDefinitionUpdateParameters,
    options?: JobDefinitionsUpdateOptionalParams
  ): Promise<JobDefinitionsUpdateResponse> {
    return this.client.sendOperationRequest(
      {
        resourceGroupName,
        storageMoverName,
        projectName,
        jobDefinitionName,
        jobDefinition,
        options
      },
      updateOperationSpec
    );
  }

  /**
   * Deletes a Job Definition resource.
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param storageMoverName The name of the Storage Mover resource.
   * @param projectName The name of the Project resource.
   * @param jobDefinitionName The name of the Job Definition resource.
   * @param options The options parameters.
   */
  async beginDelete(
    resourceGroupName: string,
    storageMoverName: string,
    projectName: string,
    jobDefinitionName: string,
    options?: JobDefinitionsDeleteOptionalParams
  ): Promise<PollerLike<PollOperationState<void>, void>> {
    const directSendOperation = async (
      args: coreClient.OperationArguments,
      spec: coreClient.OperationSpec
    ): Promise<void> => {
      return this.client.sendOperationRequest(args, spec);
    };
    const sendOperation = async (
      args: coreClient.OperationArguments,
      spec: coreClient.OperationSpec
    ) => {
      let currentRawResponse:
        | coreClient.FullOperationResponse
        | undefined = undefined;
      const providedCallback = args.options?.onResponse;
      const callback: coreClient.RawResponseCallback = (
        rawResponse: coreClient.FullOperationResponse,
        flatResponse: unknown
      ) => {
        currentRawResponse = rawResponse;
        providedCallback?.(rawResponse, flatResponse);
      };
      const updatedArgs = {
        ...args,
        options: {
          ...args.options,
          onResponse: callback
        }
      };
      const flatResponse = await directSendOperation(updatedArgs, spec);
      return {
        flatResponse,
        rawResponse: {
          statusCode: currentRawResponse!.status,
          body: currentRawResponse!.parsedBody,
          headers: currentRawResponse!.headers.toJSON()
        }
      };
    };

    const lro = new LroImpl(
      sendOperation,
      {
        resourceGroupName,
        storageMoverName,
        projectName,
        jobDefinitionName,
        options
      },
      deleteOperationSpec
    );
    const poller = new LroEngine(lro, {
      resumeFrom: options?.resumeFrom,
      intervalInMs: options?.updateIntervalInMs,
      lroResourceLocationConfig: "location"
    });
    await poller.poll();
    return poller;
  }

  /**
   * Deletes a Job Definition resource.
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param storageMoverName The name of the Storage Mover resource.
   * @param projectName The name of the Project resource.
   * @param jobDefinitionName The name of the Job Definition resource.
   * @param options The options parameters.
   */
  async beginDeleteAndWait(
    resourceGroupName: string,
    storageMoverName: string,
    projectName: string,
    jobDefinitionName: string,
    options?: JobDefinitionsDeleteOptionalParams
  ): Promise<void> {
    const poller = await this.beginDelete(
      resourceGroupName,
      storageMoverName,
      projectName,
      jobDefinitionName,
      options
    );
    return poller.pollUntilDone();
  }

  /**
   * Requests an Agent to start a new instance of this Job Definition, generating a new Job Run resource.
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param storageMoverName The name of the Storage Mover resource.
   * @param projectName The name of the Project resource.
   * @param jobDefinitionName The name of the Job Definition resource.
   * @param options The options parameters.
   */
  startJob(
    resourceGroupName: string,
    storageMoverName: string,
    projectName: string,
    jobDefinitionName: string,
    options?: JobDefinitionsStartJobOptionalParams
  ): Promise<JobDefinitionsStartJobResponse> {
    return this.client.sendOperationRequest(
      {
        resourceGroupName,
        storageMoverName,
        projectName,
        jobDefinitionName,
        options
      },
      startJobOperationSpec
    );
  }

  /**
   * Requests the Agent of any active instance of this Job Definition to stop.
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param storageMoverName The name of the Storage Mover resource.
   * @param projectName The name of the Project resource.
   * @param jobDefinitionName The name of the Job Definition resource.
   * @param options The options parameters.
   */
  stopJob(
    resourceGroupName: string,
    storageMoverName: string,
    projectName: string,
    jobDefinitionName: string,
    options?: JobDefinitionsStopJobOptionalParams
  ): Promise<JobDefinitionsStopJobResponse> {
    return this.client.sendOperationRequest(
      {
        resourceGroupName,
        storageMoverName,
        projectName,
        jobDefinitionName,
        options
      },
      stopJobOperationSpec
    );
  }

  /**
   * ListNext
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param storageMoverName The name of the Storage Mover resource.
   * @param projectName The name of the Project resource.
   * @param nextLink The nextLink from the previous successful call to the List method.
   * @param options The options parameters.
   */
  private _listNext(
    resourceGroupName: string,
    storageMoverName: string,
    projectName: string,
    nextLink: string,
    options?: JobDefinitionsListNextOptionalParams
  ): Promise<JobDefinitionsListNextResponse> {
    return this.client.sendOperationRequest(
      { resourceGroupName, storageMoverName, projectName, nextLink, options },
      listNextOperationSpec
    );
  }
}
// Operation Specifications
const serializer = coreClient.createSerializer(Mappers, /* isXml */ false);

const listOperationSpec: coreClient.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.StorageMover/storageMovers/{storageMoverName}/projects/{projectName}/jobDefinitions",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.JobDefinitionList
    },
    default: {
      bodyMapper: Mappers.ErrorResponse
    }
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.storageMoverName,
    Parameters.projectName
  ],
  headerParameters: [Parameters.accept],
  serializer
};
const getOperationSpec: coreClient.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.StorageMover/storageMovers/{storageMoverName}/projects/{projectName}/jobDefinitions/{jobDefinitionName}",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.JobDefinition
    },
    default: {
      bodyMapper: Mappers.ErrorResponse
    }
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.storageMoverName,
    Parameters.projectName,
    Parameters.jobDefinitionName
  ],
  headerParameters: [Parameters.accept],
  serializer
};
const createOrUpdateOperationSpec: coreClient.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.StorageMover/storageMovers/{storageMoverName}/projects/{projectName}/jobDefinitions/{jobDefinitionName}",
  httpMethod: "PUT",
  responses: {
    200: {
      bodyMapper: Mappers.JobDefinition
    },
    default: {
      bodyMapper: Mappers.ErrorResponse
    }
  },
  requestBody: Parameters.jobDefinition,
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.storageMoverName,
    Parameters.projectName,
    Parameters.jobDefinitionName
  ],
  headerParameters: [Parameters.accept, Parameters.contentType],
  mediaType: "json",
  serializer
};
const updateOperationSpec: coreClient.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.StorageMover/storageMovers/{storageMoverName}/projects/{projectName}/jobDefinitions/{jobDefinitionName}",
  httpMethod: "PATCH",
  responses: {
    200: {
      bodyMapper: Mappers.JobDefinition
    },
    default: {
      bodyMapper: Mappers.ErrorResponse
    }
  },
  requestBody: Parameters.jobDefinition1,
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.storageMoverName,
    Parameters.projectName,
    Parameters.jobDefinitionName
  ],
  headerParameters: [Parameters.accept, Parameters.contentType],
  mediaType: "json",
  serializer
};
const deleteOperationSpec: coreClient.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.StorageMover/storageMovers/{storageMoverName}/projects/{projectName}/jobDefinitions/{jobDefinitionName}",
  httpMethod: "DELETE",
  responses: {
    200: {},
    201: {},
    202: {},
    204: {},
    default: {
      bodyMapper: Mappers.ErrorResponse
    }
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.storageMoverName,
    Parameters.projectName,
    Parameters.jobDefinitionName
  ],
  headerParameters: [Parameters.accept],
  serializer
};
const startJobOperationSpec: coreClient.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.StorageMover/storageMovers/{storageMoverName}/projects/{projectName}/jobDefinitions/{jobDefinitionName}/startJob",
  httpMethod: "POST",
  responses: {
    200: {
      bodyMapper: Mappers.JobRunResourceId
    },
    default: {
      bodyMapper: Mappers.ErrorResponse
    }
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.storageMoverName,
    Parameters.projectName,
    Parameters.jobDefinitionName
  ],
  headerParameters: [Parameters.accept],
  serializer
};
const stopJobOperationSpec: coreClient.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.StorageMover/storageMovers/{storageMoverName}/projects/{projectName}/jobDefinitions/{jobDefinitionName}/stopJob",
  httpMethod: "POST",
  responses: {
    200: {
      bodyMapper: Mappers.JobRunResourceId
    },
    default: {
      bodyMapper: Mappers.ErrorResponse
    }
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.storageMoverName,
    Parameters.projectName,
    Parameters.jobDefinitionName
  ],
  headerParameters: [Parameters.accept],
  serializer
};
const listNextOperationSpec: coreClient.OperationSpec = {
  path: "{nextLink}",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.JobDefinitionList
    },
    default: {
      bodyMapper: Mappers.ErrorResponse
    }
  },
  urlParameters: [
    Parameters.$host,
    Parameters.nextLink,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.storageMoverName,
    Parameters.projectName
  ],
  headerParameters: [Parameters.accept],
  serializer
};
