// Copyright (c) Microsoft Corporation.
// Licensed under the MIT License.

import { ContainerRegistryManagementClient } from "@azure/arm-containerregistry";
import { DefaultAzureCredential } from "@azure/identity";

/**
 * This sample demonstrates how to creates a container registry with the specified parameters.
 *
 * @summary creates a container registry with the specified parameters.
 * x-ms-original-file: 2025-05-01-preview/RegistryCreate.json
 */
async function registryCreate(): Promise<void> {
  const credential = new DefaultAzureCredential();
  const subscriptionId = "00000000-0000-0000-0000-000000000000";
  const client = new ContainerRegistryManagementClient(credential, subscriptionId);
  const result = await client.registries.create("myResourceGroup", "myRegistry", {
    location: "westus",
    properties: { adminUserEnabled: true },
    sku: { name: "Standard" },
    tags: { key: "value" },
  });
  console.log(result);
}

/**
 * This sample demonstrates how to creates a container registry with the specified parameters.
 *
 * @summary creates a container registry with the specified parameters.
 * x-ms-original-file: 2025-05-01-preview/RegistryCreateAbac.json
 */
async function registryCreateAbac(): Promise<void> {
  const credential = new DefaultAzureCredential();
  const subscriptionId = "00000000-0000-0000-0000-000000000000";
  const client = new ContainerRegistryManagementClient(credential, subscriptionId);
  const result = await client.registries.create("myResourceGroup", "myRegistry", {
    location: "westus",
    properties: { roleAssignmentMode: "AbacRepositoryPermissions" },
    sku: { name: "Standard" },
    tags: { key: "value" },
  });
  console.log(result);
}

/**
 * This sample demonstrates how to creates a container registry with the specified parameters.
 *
 * @summary creates a container registry with the specified parameters.
 * x-ms-original-file: 2025-05-01-preview/RegistryCreateDomainNameLabelScope.json
 */
async function registryCreateDomainNameLabelScope(): Promise<void> {
  const credential = new DefaultAzureCredential();
  const subscriptionId = "00000000-0000-0000-0000-000000000000";
  const client = new ContainerRegistryManagementClient(credential, subscriptionId);
  const result = await client.registries.create("myResourceGroup", "myRegistry", {
    location: "westus",
    properties: { autoGeneratedDomainNameLabelScope: "TenantReuse" },
    sku: { name: "Standard" },
    tags: { key: "value" },
  });
  console.log(result);
}

/**
 * This sample demonstrates how to creates a container registry with the specified parameters.
 *
 * @summary creates a container registry with the specified parameters.
 * x-ms-original-file: 2025-05-01-preview/RegistryCreateZoneRedundant.json
 */
async function registryCreateZoneRedundant(): Promise<void> {
  const credential = new DefaultAzureCredential();
  const subscriptionId = "00000000-0000-0000-0000-000000000000";
  const client = new ContainerRegistryManagementClient(credential, subscriptionId);
  const result = await client.registries.create("myResourceGroup", "myRegistry", {
    location: "westus",
    properties: { zoneRedundancy: "Enabled" },
    sku: { name: "Standard" },
    tags: { key: "value" },
  });
  console.log(result);
}

async function main(): Promise<void> {
  await registryCreate();
  await registryCreateAbac();
  await registryCreateDomainNameLabelScope();
  await registryCreateZoneRedundant();
}

main().catch(console.error);
