/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */

import * as coreClient from "@azure/core-client";

export type RunRequestUnion =
  | RunRequest
  | DockerBuildRequest
  | FileTaskRunRequest
  | TaskRunRequest
  | EncodedTaskRunRequest;
export type TaskStepPropertiesUnion =
  | TaskStepProperties
  | DockerBuildStep
  | FileTaskStep
  | EncodedTaskStep;
export type TaskStepUpdateParametersUnion =
  | TaskStepUpdateParameters
  | DockerBuildStepUpdateParameters
  | FileTaskStepUpdateParameters
  | EncodedTaskStepUpdateParameters;

export interface ImportImageParameters {
  /** The source of the image. */
  source: ImportSource;
  /** List of strings of the form repo[:tag]. When tag is omitted the source will be used (or 'latest' if source tag is also omitted). */
  targetTags?: string[];
  /** List of strings of repository names to do a manifest only copy. No tag will be created. */
  untaggedTargetRepositories?: string[];
  /** When Force, any existing target tags will be overwritten. When NoForce, any existing target tags will fail the operation before any copying begins. */
  mode?: ImportMode;
}

export interface ImportSource {
  /** The resource identifier of the source Azure Container Registry. */
  resourceId?: string;
  /** The address of the source registry (e.g. 'mcr.microsoft.com'). */
  registryUri?: string;
  /** Credentials used when importing from a registry uri. */
  credentials?: ImportSourceCredentials;
  /**
   * Repository name of the source image.
   * Specify an image by repository ('hello-world'). This will use the 'latest' tag.
   * Specify an image by tag ('hello-world:latest').
   * Specify an image by sha256-based manifest digest ('hello-world@sha256:abc123').
   */
  sourceImage: string;
}

export interface ImportSourceCredentials {
  /** The username to authenticate with the source registry. */
  username?: string;
  /** The password used to authenticate with the source registry. */
  password: string;
}

/** The result of a request to list container registry operations. */
export interface OperationListResult {
  /** The list of container registry operations. Since this list may be incomplete, the nextLink field should be used to request the next list of operations. */
  value?: OperationDefinition[];
  /** The URI that can be used to request the next list of container registry operations. */
  nextLink?: string;
}

/** The definition of a container registry operation. */
export interface OperationDefinition {
  /** The origin information of the container registry operation. */
  origin?: string;
  /** Operation name: {provider}/{resource}/{operation}. */
  name?: string;
  /** The display information for the container registry operation. */
  display?: OperationDisplayDefinition;
  /**
   * This property indicates if the operation is an action or a data action
   * ref: https://docs.microsoft.com/en-us/azure/role-based-access-control/role-definitions#management-and-data-operations
   */
  isDataAction?: boolean;
  /** The definition of Azure Monitoring service. */
  serviceSpecification?: OperationServiceSpecificationDefinition;
}

/** The display information for a container registry operation. */
export interface OperationDisplayDefinition {
  /** The resource provider name: Microsoft.ContainerRegistry. */
  provider?: string;
  /** The resource on which the operation is performed. */
  resource?: string;
  /** The operation that users can perform. */
  operation?: string;
  /** The description for the operation. */
  description?: string;
}

/** The definition of Azure Monitoring list. */
export interface OperationServiceSpecificationDefinition {
  /** A list of Azure Monitoring metrics definition. */
  metricSpecifications?: OperationMetricSpecificationDefinition[];
  /** A list of Azure Monitoring log definitions. */
  logSpecifications?: OperationLogSpecificationDefinition[];
}

/** The definition of Azure Monitoring metric. */
export interface OperationMetricSpecificationDefinition {
  /** Metric name. */
  name?: string;
  /** Metric display name. */
  displayName?: string;
  /** Metric description. */
  displayDescription?: string;
  /** Metric unit. */
  unit?: string;
  /** Metric aggregation type. */
  aggregationType?: string;
  /** Internal metric name. */
  internalMetricName?: string;
}

/** The definition of Azure Monitoring log. */
export interface OperationLogSpecificationDefinition {
  /** Log name. */
  name?: string;
  /** Log display name. */
  displayName?: string;
  /** Log blob duration. */
  blobDuration?: string;
}

/** A request to check whether a container registry name is available. */
export interface RegistryNameCheckRequest {
  /** The name of the container registry. */
  name: string;
  /** The resource type of the container registry. This field must be set to 'Microsoft.ContainerRegistry/registries'. */
  type: "Microsoft.ContainerRegistry/registries";
}

/** The result of a request to check the availability of a container registry name. */
export interface RegistryNameStatus {
  /** The value that indicates whether the name is available. */
  nameAvailable?: boolean;
  /** If any, the reason that the name is not available. */
  reason?: string;
  /** If any, the error message that provides more detail for the reason that the name is not available. */
  message?: string;
}

/** The result of a request to list private endpoint connections for a container registry. */
export interface PrivateEndpointConnectionListResult {
  /** The list of private endpoint connections. Since this list may be incomplete, the nextLink field should be used to request the next list of private endpoint connections. */
  value?: PrivateEndpointConnection[];
  /** The URI that can be used to request the next list of private endpoint connections. */
  nextLink?: string;
}

/** The Private Endpoint resource. */
export interface PrivateEndpoint {
  /** This is private endpoint resource created with Microsoft.Network resource provider. */
  id?: string;
}

/** The state of a private link service connection. */
export interface PrivateLinkServiceConnectionState {
  /** The private link service connection status. */
  status?: ConnectionStatus;
  /** The description for connection status. For example if connection is rejected it can indicate reason for rejection. */
  description?: string;
  /** A message indicating if changes on the service provider require any updates on the consumer. */
  actionsRequired?: ActionsRequired;
}

/** The resource model definition for a ARM proxy resource. It will have everything other than required location and tags. */
export interface ProxyResource {
  /**
   * The resource ID.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly id?: string;
  /**
   * The name of the resource.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly name?: string;
  /**
   * The type of the resource.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly type?: string;
  /**
   * Metadata pertaining to creation and last modification of the resource.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly systemData?: SystemData;
}

/** Metadata pertaining to creation and last modification of the resource. */
export interface SystemData {
  /** The identity that created the resource. */
  createdBy?: string;
  /** The type of identity that created the resource. */
  createdByType?: CreatedByType;
  /** The timestamp of resource creation (UTC). */
  createdAt?: Date;
  /** The identity that last modified the resource. */
  lastModifiedBy?: string;
  /** The type of identity that last modified the resource. */
  lastModifiedByType?: LastModifiedByType;
  /** The timestamp of resource modification (UTC). */
  lastModifiedAt?: Date;
}

/** The result of a request to list container registries. */
export interface RegistryListResult {
  /** The list of container registries. Since this list may be incomplete, the nextLink field should be used to request the next list of container registries. */
  value?: Registry[];
  /** The URI that can be used to request the next list of container registries. */
  nextLink?: string;
}

/** The SKU of a container registry. */
export interface Sku {
  /** The SKU name of the container registry. Required for registry creation. */
  name: SkuName;
  /**
   * The SKU tier based on the SKU name.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly tier?: SkuTier;
}

/** Managed identity for the resource. */
export interface IdentityProperties {
  /** The principal ID of resource identity. */
  principalId?: string;
  /** The tenant ID of resource. */
  tenantId?: string;
  /** The identity type. */
  type?: ResourceIdentityType;
  /**
   * The list of user identities associated with the resource. The user identity
   * dictionary key references will be ARM resource ids in the form:
   * '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/
   *     providers/Microsoft.ManagedIdentity/userAssignedIdentities/{identityName}'.
   */
  userAssignedIdentities?: { [propertyName: string]: UserIdentityProperties };
}

export interface UserIdentityProperties {
  /** The principal id of user assigned identity. */
  principalId?: string;
  /** The client id of user assigned identity. */
  clientId?: string;
}

/** The status of an Azure resource at the time the operation was called. */
export interface Status {
  /**
   * The short label for the status.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly displayStatus?: string;
  /**
   * The detailed message for the status, including alerts and error messages.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly message?: string;
  /**
   * The timestamp when the status was changed to the current value.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly timestamp?: Date;
}

/** The network rule set for a container registry. */
export interface NetworkRuleSet {
  /** The default action of allow or deny when no other rules match. */
  defaultAction: DefaultAction;
  /** The IP ACL rules. */
  ipRules?: IPRule[];
}

/** IP rule with specific IP or IP range in CIDR format. */
export interface IPRule {
  /** The action of IP ACL rule. */
  action?: Action;
  /** Specifies the IP or IP range in CIDR format. Only IPV4 address is allowed. */
  iPAddressOrRange: string;
}

/** The policies for a container registry. */
export interface Policies {
  /** The quarantine policy for a container registry. */
  quarantinePolicy?: QuarantinePolicy;
  /** The content trust policy for a container registry. */
  trustPolicy?: TrustPolicy;
  /** The retention policy for a container registry. */
  retentionPolicy?: RetentionPolicy;
  /** The export policy for a container registry. */
  exportPolicy?: ExportPolicy;
}

/** The quarantine policy for a container registry. */
export interface QuarantinePolicy {
  /** The value that indicates whether the policy is enabled or not. */
  status?: PolicyStatus;
}

/** The content trust policy for a container registry. */
export interface TrustPolicy {
  /** The type of trust policy. */
  type?: TrustPolicyType;
  /** The value that indicates whether the policy is enabled or not. */
  status?: PolicyStatus;
}

/** The retention policy for a container registry. */
export interface RetentionPolicy {
  /** The number of days to retain an untagged manifest after which it gets purged. */
  days?: number;
  /**
   * The timestamp when the policy was last updated.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly lastUpdatedTime?: Date;
  /** The value that indicates whether the policy is enabled or not. */
  status?: PolicyStatus;
}

/** The export policy for a container registry. */
export interface ExportPolicy {
  /** The value that indicates whether the policy is enabled or not. */
  status?: ExportPolicyStatus;
}

export interface EncryptionProperty {
  /** Indicates whether or not the encryption is enabled for container registry. */
  status?: EncryptionStatus;
  /** Key vault properties. */
  keyVaultProperties?: KeyVaultProperties;
}

export interface KeyVaultProperties {
  /** Key vault uri to access the encryption key. */
  keyIdentifier?: string;
  /**
   * The fully qualified key identifier that includes the version of the key that is actually used for encryption.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly versionedKeyIdentifier?: string;
  /** The client id of the identity which will be used to access key vault. */
  identity?: string;
  /**
   * Auto key rotation status for a CMK enabled registry.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly keyRotationEnabled?: boolean;
  /**
   * Timestamp of the last successful key rotation.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly lastKeyRotationTimestamp?: Date;
}

/** An Azure resource. */
export interface Resource {
  /**
   * The resource ID.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly id?: string;
  /**
   * The name of the resource.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly name?: string;
  /**
   * The type of the resource.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly type?: string;
  /** The location of the resource. This cannot be changed after the resource is created. */
  location: string;
  /** The tags of the resource. */
  tags?: { [propertyName: string]: string };
  /**
   * Metadata pertaining to creation and last modification of the resource.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly systemData?: SystemData;
}

/** The parameters for updating a container registry. */
export interface RegistryUpdateParameters {
  /** The identity of the container registry. */
  identity?: IdentityProperties;
  /** The tags for the container registry. */
  tags?: { [propertyName: string]: string };
  /** The SKU of the container registry. */
  sku?: Sku;
  /** The value that indicates whether the admin user is enabled. */
  adminUserEnabled?: boolean;
  /** The network rule set for a container registry. */
  networkRuleSet?: NetworkRuleSet;
  /** The policies for a container registry. */
  policies?: Policies;
  /** The encryption settings of container registry. */
  encryption?: EncryptionProperty;
  /** Enable a single data endpoint per region for serving data. */
  dataEndpointEnabled?: boolean;
  /** Whether or not public network access is allowed for the container registry. */
  publicNetworkAccess?: PublicNetworkAccess;
  /** Whether to allow trusted Azure services to access a network restricted registry. */
  networkRuleBypassOptions?: NetworkRuleBypassOptions;
}

/** The result of a request to get container registry quota usages. */
export interface RegistryUsageListResult {
  /** The list of container registry quota usages. */
  value?: RegistryUsage[];
}

/** The quota usage for a container registry. */
export interface RegistryUsage {
  /** The name of the usage. */
  name?: string;
  /** The limit of the usage. */
  limit?: number;
  /** The current value of the usage. */
  currentValue?: number;
  /** The unit of measurement. */
  unit?: RegistryUsageUnit;
}

/** The result of a request to list private link resources for a container registry. */
export interface PrivateLinkResourceListResult {
  /** The list of private link resources. Since this list may be incomplete, the nextLink field should be used to request the next list of private link resources. */
  value?: PrivateLinkResource[];
  /** The URI that can be used to request the next list of private link resources. */
  nextLink?: string;
}

/** A resource that supports private link capabilities. */
export interface PrivateLinkResource {
  /**
   * The resource type is private link resource.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly type?: string;
  /** The resource ID. */
  id?: string;
  /** The name of the resource. */
  name?: string;
  /** The private link resource group id. */
  groupId?: string;
  /** The private link resource required member names. */
  requiredMembers?: string[];
  /** The private link resource Private link DNS zone name. */
  requiredZoneNames?: string[];
}

/** An error response from the Azure Container Registry service. */
export interface ErrorResponse {
  /** Azure container registry build API error body. */
  error?: ErrorResponseBody;
}

/** An error response from the Azure Container Registry service. */
export interface ErrorResponseBody {
  /** error code. */
  code: string;
  /** error message. */
  message: string;
  /** target of the particular error. */
  target?: string;
  /** an array of additional nested error response info objects, as described by this contract. */
  details?: InnerErrorDescription[];
}

/** inner error. */
export interface InnerErrorDescription {
  /** error code. */
  code: string;
  /** error message. */
  message: string;
  /** target of the particular error. */
  target?: string;
}

/** The response from the ListCredentials operation. */
export interface RegistryListCredentialsResult {
  /** The username for a container registry. */
  username?: string;
  /** The list of passwords for a container registry. */
  passwords?: RegistryPassword[];
}

/** The login password for the container registry. */
export interface RegistryPassword {
  /** The password name. */
  name?: PasswordName;
  /** The password value. */
  value?: string;
}

/** The parameters used to regenerate the login credential. */
export interface RegenerateCredentialParameters {
  /** Specifies name of the password which should be regenerated -- password or password2. */
  name: PasswordName;
}

/** The result of a request to list replications for a container registry. */
export interface ReplicationListResult {
  /** The list of replications. Since this list may be incomplete, the nextLink field should be used to request the next list of replications. */
  value?: Replication[];
  /** The URI that can be used to request the next list of replications. */
  nextLink?: string;
}

/** The parameters for updating a replication. */
export interface ReplicationUpdateParameters {
  /** The tags for the replication. */
  tags?: { [propertyName: string]: string };
  /** Specifies whether the replication's regional endpoint is enabled. Requests will not be routed to a replication whose regional endpoint is disabled, however its data will continue to be synced with other replications. */
  regionEndpointEnabled?: boolean;
}

/** The result of a request to list scope maps for a container registry. */
export interface ScopeMapListResult {
  /** The list of scope maps. Since this list may be incomplete, the nextLink field should be used to request the next list of scope maps. */
  value?: ScopeMap[];
  /** The URI that can be used to request the next list of scope maps. */
  nextLink?: string;
}

/** The properties for updating the scope map. */
export interface ScopeMapUpdateParameters {
  /** The user friendly description of the scope map. */
  description?: string;
  /**
   * The list of scope permissions for registry artifacts.
   * E.g. repositories/repository-name/pull,
   * repositories/repository-name/delete
   */
  actions?: string[];
}

/** The result of a request to list tokens for a container registry. */
export interface TokenListResult {
  /** The list of tokens. Since this list may be incomplete, the nextLink field should be used to request the next list of tokens. */
  value?: Token[];
  /** The URI that can be used to request the next list of tokens. */
  nextLink?: string;
}

/** The properties of the credentials that can be used for authenticating the token. */
export interface TokenCredentialsProperties {
  certificates?: TokenCertificate[];
  passwords?: TokenPassword[];
}

/** The properties of a certificate used for authenticating a token. */
export interface TokenCertificate {
  name?: TokenCertificateName;
  /** The expiry datetime of the certificate. */
  expiry?: Date;
  /** The thumbprint of the certificate. */
  thumbprint?: string;
  /** Base 64 encoded string of the public certificate1 in PEM format that will be used for authenticating the token. */
  encodedPemCertificate?: string;
}

/** The password that will be used for authenticating the token of a container registry. */
export interface TokenPassword {
  /** The creation datetime of the password. */
  creationTime?: Date;
  /** The expiry datetime of the password. */
  expiry?: Date;
  /** The password name "password1" or "password2" */
  name?: TokenPasswordName;
  /**
   * The password value.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly value?: string;
}

/** The parameters for updating a token. */
export interface TokenUpdateParameters {
  /** The resource ID of the scope map to which the token will be associated with. */
  scopeMapId?: string;
  /** The status of the token example enabled or disabled. */
  status?: TokenStatus;
  /** The credentials that can be used for authenticating the token. */
  credentials?: TokenCredentialsProperties;
}

/** The parameters used to generate credentials for a specified token or user of a container registry. */
export interface GenerateCredentialsParameters {
  /** The resource ID of the token for which credentials have to be generated. */
  tokenId?: string;
  /** The expiry date of the generated credentials after which the credentials become invalid. */
  expiry?: Date;
  /** Specifies name of the password which should be regenerated if any -- password1 or password2. */
  name?: TokenPasswordName;
}

/** The response from the GenerateCredentials operation. */
export interface GenerateCredentialsResult {
  /** The username for a container registry. */
  username?: string;
  /** The list of passwords for a container registry. */
  passwords?: TokenPassword[];
}

/** The result of a request to list webhooks for a container registry. */
export interface WebhookListResult {
  /** The list of webhooks. Since this list may be incomplete, the nextLink field should be used to request the next list of webhooks. */
  value?: Webhook[];
  /** The URI that can be used to request the next list of webhooks. */
  nextLink?: string;
}

/** The parameters for creating a webhook. */
export interface WebhookCreateParameters {
  /** The tags for the webhook. */
  tags?: { [propertyName: string]: string };
  /** The location of the webhook. This cannot be changed after the resource is created. */
  location: string;
  /** The service URI for the webhook to post notifications. */
  serviceUri?: string;
  /** Custom headers that will be added to the webhook notifications. */
  customHeaders?: { [propertyName: string]: string };
  /** The status of the webhook at the time the operation was called. */
  status?: WebhookStatus;
  /** The scope of repositories where the event can be triggered. For example, 'foo:*' means events for all tags under repository 'foo'. 'foo:bar' means events for 'foo:bar' only. 'foo' is equivalent to 'foo:latest'. Empty means all events. */
  scope?: string;
  /** The list of actions that trigger the webhook to post notifications. */
  actions?: WebhookAction[];
}

/** The parameters for updating a webhook. */
export interface WebhookUpdateParameters {
  /** The tags for the webhook. */
  tags?: { [propertyName: string]: string };
  /** The service URI for the webhook to post notifications. */
  serviceUri?: string;
  /** Custom headers that will be added to the webhook notifications. */
  customHeaders?: { [propertyName: string]: string };
  /** The status of the webhook at the time the operation was called. */
  status?: WebhookStatus;
  /** The scope of repositories where the event can be triggered. For example, 'foo:*' means events for all tags under repository 'foo'. 'foo:bar' means events for 'foo:bar' only. 'foo' is equivalent to 'foo:latest'. Empty means all events. */
  scope?: string;
  /** The list of actions that trigger the webhook to post notifications. */
  actions?: WebhookAction[];
}

/** The basic information of an event. */
export interface EventInfo {
  /** The event ID. */
  id?: string;
}

/** The result of a request to list events for a webhook. */
export interface EventListResult {
  /** The list of events. Since this list may be incomplete, the nextLink field should be used to request the next list of events. */
  value?: Event[];
  /** The URI that can be used to request the next list of events. */
  nextLink?: string;
}

/** The event request message sent to the service URI. */
export interface EventRequestMessage {
  /** The content of the event request message. */
  content?: EventContent;
  /** The headers of the event request message. */
  headers?: { [propertyName: string]: string };
  /** The HTTP method used to send the event request message. */
  method?: string;
  /** The URI used to send the event request message. */
  requestUri?: string;
  /** The HTTP message version. */
  version?: string;
}

/** The content of the event request message. */
export interface EventContent {
  /** The event ID. */
  id?: string;
  /** The time at which the event occurred. */
  timestamp?: Date;
  /** The action that encompasses the provided event. */
  action?: string;
  /** The target of the event. */
  target?: Target;
  /** The request that generated the event. */
  request?: Request;
  /** The agent that initiated the event. For most situations, this could be from the authorization context of the request. */
  actor?: Actor;
  /** The registry node that generated the event. Put differently, while the actor initiates the event, the source generates it. */
  source?: Source;
}

/** The target of the event. */
export interface Target {
  /** The MIME type of the referenced object. */
  mediaType?: string;
  /** The number of bytes of the content. Same as Length field. */
  size?: number;
  /** The digest of the content, as defined by the Registry V2 HTTP API Specification. */
  digest?: string;
  /** The number of bytes of the content. Same as Size field. */
  length?: number;
  /** The repository name. */
  repository?: string;
  /** The direct URL to the content. */
  url?: string;
  /** The tag name. */
  tag?: string;
  /** The name of the artifact. */
  name?: string;
  /** The version of the artifact. */
  version?: string;
}

/** The request that generated the event. */
export interface Request {
  /** The ID of the request that initiated the event. */
  id?: string;
  /** The IP or hostname and possibly port of the client connection that initiated the event. This is the RemoteAddr from the standard http request. */
  addr?: string;
  /** The externally accessible hostname of the registry instance, as specified by the http host header on incoming requests. */
  host?: string;
  /** The request method that generated the event. */
  method?: string;
  /** The user agent header of the request. */
  useragent?: string;
}

/** The agent that initiated the event. For most situations, this could be from the authorization context of the request. */
export interface Actor {
  /** The subject or username associated with the request context that generated the event. */
  name?: string;
}

/** The registry node that generated the event. Put differently, while the actor initiates the event, the source generates it. */
export interface Source {
  /** The IP or hostname and the port of the registry node that generated the event. Generally, this will be resolved by os.Hostname() along with the running port. */
  addr?: string;
  /** The running instance of an application. Changes after each restart. */
  instanceID?: string;
}

/** The event response message received from the service URI. */
export interface EventResponseMessage {
  /** The content of the event response message. */
  content?: string;
  /** The headers of the event response message. */
  headers?: { [propertyName: string]: string };
  /** The reason phrase of the event response message. */
  reasonPhrase?: string;
  /** The status code of the event response message. */
  statusCode?: string;
  /** The HTTP message version. */
  version?: string;
}

/** The configuration of service URI and custom headers for the webhook. */
export interface CallbackConfig {
  /** The service URI for the webhook to post notifications. */
  serviceUri: string;
  /** Custom headers that will be added to the webhook notifications. */
  customHeaders?: { [propertyName: string]: string };
}

/** The parameters for updating an agent pool. */
export interface AgentPoolUpdateParameters {
  /** The ARM resource tags. */
  tags?: { [propertyName: string]: string };
  /** The count of agent machine */
  count?: number;
}

/** The collection of agent pools. */
export interface AgentPoolListResult {
  /** The collection value. */
  value?: AgentPool[];
  /** The URI that can be used to request the next set of paged results. */
  nextLink?: string;
}

/** The QueueStatus of Agent Pool */
export interface AgentPoolQueueStatus {
  /** The number of pending runs in the queue */
  count?: number;
}

/** The request parameters for scheduling a run. */
export interface RunRequest {
  /** Polymorphic discriminator, which specifies the different types this object can be */
  type:
    | "DockerBuildRequest"
    | "FileTaskRunRequest"
    | "TaskRunRequest"
    | "EncodedTaskRunRequest";
  /** The value that indicates whether archiving is enabled for the run or not. */
  isArchiveEnabled?: boolean;
  /** The dedicated agent pool for the run. */
  agentPoolName?: string;
  /** The template that describes the repository and tag information for run log artifact. */
  logTemplate?: string;
}

/** Properties for a registry image. */
export interface ImageDescriptor {
  /** The registry login server. */
  registry?: string;
  /** The repository name. */
  repository?: string;
  /** The tag name. */
  tag?: string;
  /** The sha256-based digest of the image manifest. */
  digest?: string;
}

/** The image update trigger that caused a build. */
export interface ImageUpdateTrigger {
  /** The unique ID of the trigger. */
  id?: string;
  /** The timestamp when the image update happened. */
  timestamp?: Date;
  /** The list of image updates that caused the build. */
  images?: ImageDescriptor[];
}

/** The source trigger that caused a run. */
export interface SourceTriggerDescriptor {
  /** The unique ID of the trigger. */
  id?: string;
  /** The event type of the trigger. */
  eventType?: string;
  /** The unique ID that identifies a commit. */
  commitId?: string;
  /** The unique ID that identifies pull request. */
  pullRequestId?: string;
  /** The repository URL. */
  repositoryUrl?: string;
  /** The branch name in the repository. */
  branchName?: string;
  /** The source control provider type. */
  providerType?: string;
}

export interface TimerTriggerDescriptor {
  /** The timer trigger name that caused the run. */
  timerTriggerName?: string;
  /** The occurrence that triggered the run. */
  scheduleOccurrence?: string;
}

/** The platform properties against which the run has to happen. */
export interface PlatformProperties {
  /** The operating system type required for the run. */
  os: OS;
  /** The OS architecture. */
  architecture?: Architecture;
  /** Variant of the CPU. */
  variant?: Variant;
}

/** The properties that determine the run agent configuration. */
export interface AgentProperties {
  /** The CPU configuration in terms of number of cores required for the run. */
  cpu?: number;
}

/** The properties of a response to source upload request. */
export interface SourceUploadDefinition {
  /** The URL where the client can upload the source. */
  uploadUrl?: string;
  /** The relative path to the source. This is used to submit the subsequent queue build request. */
  relativePath?: string;
}

/** Collection of runs. */
export interface RunListResult {
  /** The collection value. */
  value?: Run[];
  /** The URI that can be used to request the next set of paged results. */
  nextLink?: string;
}

/** The set of run properties that can be updated. */
export interface RunUpdateParameters {
  /** The value that indicates whether archiving is enabled or not. */
  isArchiveEnabled?: boolean;
}

/** The result of get log link operation. */
export interface RunGetLogResult {
  /** The link to logs for a run on a azure container registry. */
  logLink?: string;
  /** The link to logs in registry for a run on a azure container registry. */
  logArtifactLink?: string;
}

/** The parameters for updating a task run. */
export interface TaskRunUpdateParameters {
  /** Identity for the resource. */
  identity?: IdentityProperties;
  /** The location of the resource */
  location?: string;
  /** The ARM resource tags. */
  tags?: { [propertyName: string]: string };
  /** The request (parameters) for the new run */
  runRequest?: RunRequestUnion;
  /** How the run should be forced to rerun even if the run request configuration has not changed */
  forceUpdateTag?: string;
}

/** The collection of task runs. */
export interface TaskRunListResult {
  /** The collection value. */
  value?: TaskRun[];
  /** The URI that can be used to request the next set of paged results. */
  nextLink?: string;
}

/** The collection of tasks. */
export interface TaskListResult {
  /** The collection value. */
  value?: Task[];
  /** The URI that can be used to request the next set of paged results. */
  nextLink?: string;
}

/** Base properties for any task step. */
export interface TaskStepProperties {
  /** Polymorphic discriminator, which specifies the different types this object can be */
  type: "Docker" | "FileTask" | "EncodedTask";
  /**
   * List of base image dependencies for a step.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly baseImageDependencies?: BaseImageDependency[];
  /** The URL(absolute or relative) of the source context for the task step. */
  contextPath?: string;
  /** The token (git PAT or SAS token of storage account blob) associated with the context for a step. */
  contextAccessToken?: string;
}

/** Properties that describe a base image dependency. */
export interface BaseImageDependency {
  /** The type of the base image dependency. */
  type?: BaseImageDependencyType;
  /** The registry login server. */
  registry?: string;
  /** The repository name. */
  repository?: string;
  /** The tag name. */
  tag?: string;
  /** The sha256-based digest of the image manifest. */
  digest?: string;
}

/** The properties of a trigger. */
export interface TriggerProperties {
  /** The collection of timer triggers. */
  timerTriggers?: TimerTrigger[];
  /** The collection of triggers based on source code repository. */
  sourceTriggers?: SourceTrigger[];
  /** The trigger based on base image dependencies. */
  baseImageTrigger?: BaseImageTrigger;
}

/** The properties of a timer trigger. */
export interface TimerTrigger {
  /** The CRON expression for the task schedule */
  schedule: string;
  /** The current status of trigger. */
  status?: TriggerStatus;
  /** The name of the trigger. */
  name: string;
}

/** The properties of a source based trigger. */
export interface SourceTrigger {
  /** The properties that describes the source(code) for the task. */
  sourceRepository: SourceProperties;
  /** The source event corresponding to the trigger. */
  sourceTriggerEvents: SourceTriggerEvent[];
  /** The current status of trigger. */
  status?: TriggerStatus;
  /** The name of the trigger. */
  name: string;
}

/** The properties of the source code repository. */
export interface SourceProperties {
  /** The type of source control service. */
  sourceControlType: SourceControlType;
  /** The full URL to the source code repository */
  repositoryUrl: string;
  /** The branch name of the source code. */
  branch?: string;
  /**
   * The authorization properties for accessing the source code repository and to set up
   * webhooks for notifications.
   */
  sourceControlAuthProperties?: AuthInfo;
}

/** The authorization properties for accessing the source code repository. */
export interface AuthInfo {
  /** The type of Auth token. */
  tokenType: TokenType;
  /** The access token used to access the source control provider. */
  token: string;
  /** The refresh token used to refresh the access token. */
  refreshToken?: string;
  /** The scope of the access token. */
  scope?: string;
  /** Time in seconds that the token remains valid */
  expiresIn?: number;
}

/** The trigger based on base image dependency. */
export interface BaseImageTrigger {
  /** The type of the auto trigger for base image dependency updates. */
  baseImageTriggerType: BaseImageTriggerType;
  /** The endpoint URL for receiving update triggers. */
  updateTriggerEndpoint?: string;
  /** Type of Payload body for Base image update triggers. */
  updateTriggerPayloadType?: UpdateTriggerPayloadType;
  /** The current status of trigger. */
  status?: TriggerStatus;
  /** The name of the trigger. */
  name: string;
}

/** The parameters that describes a set of credentials that will be used when a run is invoked. */
export interface Credentials {
  /** Describes the credential parameters for accessing the source registry. */
  sourceRegistry?: SourceRegistryCredentials;
  /**
   * Describes the credential parameters for accessing other custom registries. The key
   * for the dictionary item will be the registry login server (myregistry.azurecr.io) and
   * the value of the item will be the registry credentials for accessing the registry.
   */
  customRegistries?: { [propertyName: string]: CustomRegistryCredentials };
}

/** Describes the credential parameters for accessing the source registry. */
export interface SourceRegistryCredentials {
  /**
   * The authentication mode which determines the source registry login scope. The credentials for the source registry
   * will be generated using the given scope. These credentials will be used to login to
   * the source registry during the run.
   */
  loginMode?: SourceRegistryLoginMode;
}

/** Describes the credentials that will be used to access a custom registry during a run. */
export interface CustomRegistryCredentials {
  /** The username for logging into the custom registry. */
  userName?: SecretObject;
  /**
   * The password for logging into the custom registry. The password is a secret
   * object that allows multiple ways of providing the value for it.
   */
  password?: SecretObject;
  /**
   * Indicates the managed identity assigned to the custom credential. If a user-assigned identity
   * this value is the Client ID. If a system-assigned identity, the value will be `system`. In
   * the case of a system-assigned identity, the Client ID will be determined by the runner. This
   * identity may be used to authenticate to key vault to retrieve credentials or it may be the only
   * source of authentication used for accessing the registry.
   */
  identity?: string;
}

/** Describes the properties of a secret object value. */
export interface SecretObject {
  /**
   * The value of the secret. The format of this value will be determined
   * based on the type of the secret object. If the type is Opaque, the value will be
   * used as is without any modification.
   */
  value?: string;
  /**
   * The type of the secret object which determines how the value of the secret object has to be
   * interpreted.
   */
  type?: SecretObjectType;
}

/** The parameters for updating a task. */
export interface TaskUpdateParameters {
  /** Identity for the resource. */
  identity?: IdentityProperties;
  /** The ARM resource tags. */
  tags?: { [propertyName: string]: string };
  /** The current status of task. */
  status?: TaskStatus;
  /** The platform properties against which the run has to happen. */
  platform?: PlatformUpdateParameters;
  /** The machine configuration of the run agent. */
  agentConfiguration?: AgentProperties;
  /** The dedicated agent pool for the task. */
  agentPoolName?: string;
  /** Run timeout in seconds. */
  timeout?: number;
  /** The properties for updating a task step. */
  step?: TaskStepUpdateParametersUnion;
  /** The properties for updating trigger properties. */
  trigger?: TriggerUpdateParameters;
  /** The parameters that describes a set of credentials that will be used when this run is invoked. */
  credentials?: Credentials;
  /** The template that describes the repository and tag information for run log artifact. */
  logTemplate?: string;
}

/** The properties for updating the platform configuration. */
export interface PlatformUpdateParameters {
  /** The operating system type required for the run. */
  os?: OS;
  /** The OS architecture. */
  architecture?: Architecture;
  /** Variant of the CPU. */
  variant?: Variant;
}

/** Base properties for updating any task step. */
export interface TaskStepUpdateParameters {
  /** Polymorphic discriminator, which specifies the different types this object can be */
  type: "Docker" | "FileTask" | "EncodedTask";
  /** The URL(absolute or relative) of the source context for the task step. */
  contextPath?: string;
  /** The token (git PAT or SAS token of storage account blob) associated with the context for a step. */
  contextAccessToken?: string;
}

/** The properties for updating triggers. */
export interface TriggerUpdateParameters {
  /** The collection of timer triggers. */
  timerTriggers?: TimerTriggerUpdateParameters[];
  /** The collection of triggers based on source code repository. */
  sourceTriggers?: SourceTriggerUpdateParameters[];
  /** The trigger based on base image dependencies. */
  baseImageTrigger?: BaseImageTriggerUpdateParameters;
}

/** The properties for updating a timer trigger. */
export interface TimerTriggerUpdateParameters {
  /** The CRON expression for the task schedule */
  schedule?: string;
  /** The current status of trigger. */
  status?: TriggerStatus;
  /** The name of the trigger. */
  name: string;
}

/** The properties for updating a source based trigger. */
export interface SourceTriggerUpdateParameters {
  /** The properties that describes the source(code) for the task. */
  sourceRepository?: SourceUpdateParameters;
  /** The source event corresponding to the trigger. */
  sourceTriggerEvents?: SourceTriggerEvent[];
  /** The current status of trigger. */
  status?: TriggerStatus;
  /** The name of the trigger. */
  name: string;
}

/** The properties for updating the source code repository. */
export interface SourceUpdateParameters {
  /** The type of source control service. */
  sourceControlType?: SourceControlType;
  /** The full URL to the source code repository */
  repositoryUrl?: string;
  /** The branch name of the source code. */
  branch?: string;
  /**
   * The authorization properties for accessing the source code repository and to set up
   * webhooks for notifications.
   */
  sourceControlAuthProperties?: AuthInfoUpdateParameters;
}

/** The authorization properties for accessing the source code repository. */
export interface AuthInfoUpdateParameters {
  /** The type of Auth token. */
  tokenType?: TokenType;
  /** The access token used to access the source control provider. */
  token?: string;
  /** The refresh token used to refresh the access token. */
  refreshToken?: string;
  /** The scope of the access token. */
  scope?: string;
  /** Time in seconds that the token remains valid */
  expiresIn?: number;
}

/** The properties for updating base image dependency trigger. */
export interface BaseImageTriggerUpdateParameters {
  /** The type of the auto trigger for base image dependency updates. */
  baseImageTriggerType?: BaseImageTriggerType;
  /** The endpoint URL for receiving update triggers. */
  updateTriggerEndpoint?: string;
  /** Type of Payload body for Base image update triggers. */
  updateTriggerPayloadType?: UpdateTriggerPayloadType;
  /** The current status of trigger. */
  status?: TriggerStatus;
  /** The name of the trigger. */
  name: string;
}

/** The properties of a storage account for a container registry. Only applicable to Classic SKU. */
export interface StorageAccountProperties {
  /** The resource ID of the storage account. */
  id: string;
}

/** The properties of a package type. */
export interface PackageType {
  /** The name of the package type. */
  name?: string;
  /**
   * The endpoint of the package type.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly endpoint?: string;
}

/** The Active Directory Object that will be used for authenticating the token of a container registry. */
export interface ActiveDirectoryObject {
  /** The user/group/application object ID for Active Directory Object that will be used for authenticating the token of a container registry. */
  objectId?: string;
  /** The tenant ID of user/group/application object Active Directory Object that will be used for authenticating the token of a container registry. */
  tenantId?: string;
}

/** Properties that are enabled for Odata querying on runs. */
export interface RunFilter {
  /** The unique identifier for the run. */
  runId?: string;
  /** The type of run. */
  runType?: RunType;
  /** The current status of the run. */
  status?: RunStatus;
  /** The create time for a run. */
  createTime?: Date;
  /** The time the run finished. */
  finishTime?: Date;
  /**
   * The list of comma-separated image manifests that were generated from the run. This is applicable if the run is of
   * build type.
   */
  outputImageManifests?: string;
  /** The value that indicates whether archiving is enabled or not. */
  isArchiveEnabled?: boolean;
  /** The name of the task that the run corresponds to. */
  taskName?: string;
  /** The name of the agent pool that the run corresponds to. */
  agentPoolName?: string;
}

/** The properties of a run argument. */
export interface Argument {
  /** The name of the argument. */
  name: string;
  /** The value of the argument. */
  value: string;
  /** Flag to indicate whether the argument represents a secret and want to be removed from build logs. */
  isSecret?: boolean;
}

/** The properties of a overridable value that can be passed to a task template. */
export interface SetValue {
  /** The name of the overridable value. */
  name: string;
  /** The overridable value. */
  value: string;
  /** Flag to indicate whether the value represents a secret or not. */
  isSecret?: boolean;
}

export interface OverrideTaskStepProperties {
  /** The source context against which run has to be queued. */
  contextPath?: string;
  /** The file against which run has to be queued. */
  file?: string;
  /**
   * Gets or sets the collection of override arguments to be used when
   * executing a build step.
   */
  arguments?: Argument[];
  /** The name of the target build stage for the docker build. */
  target?: string;
  /** The collection of overridable values that can be passed when running a Task. */
  values?: SetValue[];
  /** Base64 encoded update trigger token that will be attached with the base image trigger webhook. */
  updateTriggerToken?: string;
}

/** An object that represents a private endpoint connection for a container registry. */
export interface PrivateEndpointConnection extends ProxyResource {
  /** The resource of private endpoint. */
  privateEndpoint?: PrivateEndpoint;
  /** A collection of information about the state of the connection between service consumer and provider. */
  privateLinkServiceConnectionState?: PrivateLinkServiceConnectionState;
  /**
   * The provisioning state of private endpoint connection resource.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly provisioningState?: ProvisioningState;
}

/** An object that represents a scope map for a container registry. */
export interface ScopeMap extends ProxyResource {
  /** The user friendly description of the scope map. */
  description?: string;
  /**
   * The type of the scope map. E.g. BuildIn scope map.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly typePropertiesType?: string;
  /**
   * The creation date of scope map.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly creationDate?: Date;
  /**
   * Provisioning state of the resource.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly provisioningState?: ProvisioningState;
  /**
   * The list of scoped permissions for registry artifacts.
   * E.g. repositories/repository-name/content/read,
   * repositories/repository-name/metadata/write
   */
  actions?: string[];
}

/** An object that represents a token for a container registry. */
export interface Token extends ProxyResource {
  /**
   * The creation date of scope map.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly creationDate?: Date;
  /**
   * Provisioning state of the resource.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly provisioningState?: ProvisioningState;
  /** The resource ID of the scope map to which the token will be associated with. */
  scopeMapId?: string;
  /** The credentials that can be used for authenticating the token. */
  credentials?: TokenCredentialsProperties;
  /** The status of the token example enabled or disabled. */
  status?: TokenStatus;
}

/** Run resource properties */
export interface Run extends ProxyResource {
  /** The unique identifier for the run. */
  runId?: string;
  /** The current status of the run. */
  status?: RunStatus;
  /** The last updated time for the run. */
  lastUpdatedTime?: Date;
  /** The type of run. */
  runType?: RunType;
  /** The dedicated agent pool for the run. */
  agentPoolName?: string;
  /** The time the run was scheduled. */
  createTime?: Date;
  /** The time the run started. */
  startTime?: Date;
  /** The time the run finished. */
  finishTime?: Date;
  /** The list of all images that were generated from the run. This is applicable if the run generates base image dependencies. */
  outputImages?: ImageDescriptor[];
  /** The task against which run was scheduled. */
  task?: string;
  /** The image update trigger that caused the run. This is applicable if the task has base image trigger configured. */
  imageUpdateTrigger?: ImageUpdateTrigger;
  /** The source trigger that caused the run. */
  sourceTrigger?: SourceTriggerDescriptor;
  /** The timer trigger that caused the run. */
  timerTrigger?: TimerTriggerDescriptor;
  /** The platform properties against which the run will happen. */
  platform?: PlatformProperties;
  /** The machine configuration of the run agent. */
  agentConfiguration?: AgentProperties;
  /** The scope of the credentials that were used to login to the source registry during this run. */
  sourceRegistryAuth?: string;
  /** The list of custom registries that were logged in during this run. */
  customRegistries?: string[];
  /**
   * The error message received from backend systems after the run is scheduled.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly runErrorMessage?: string;
  /** The update trigger token passed for the Run. */
  updateTriggerToken?: string;
  /**
   * The image description for the log artifact.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly logArtifact?: ImageDescriptor;
  /** The provisioning state of a run. */
  provisioningState?: ProvisioningState;
  /** The value that indicates whether archiving is enabled or not. */
  isArchiveEnabled?: boolean;
}

/**
 * The task run that has the ARM resource and properties.
 * The task run will have the information of request and result of a run.
 */
export interface TaskRun extends ProxyResource {
  /** Identity for the resource. */
  identity?: IdentityProperties;
  /** The location of the resource */
  location?: string;
  /**
   * The provisioning state of this task run
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly provisioningState?: ProvisioningState;
  /** The request (parameters) for the run */
  runRequest?: RunRequestUnion;
  /**
   * The result of this task run
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly runResult?: Run;
  /** How the run should be forced to rerun even if the run request configuration has not changed */
  forceUpdateTag?: string;
}

/** An object that represents a container registry. */
export interface Registry extends Resource {
  /** The SKU of the container registry. */
  sku: Sku;
  /** The identity of the container registry. */
  identity?: IdentityProperties;
  /**
   * The URL that can be used to log into the container registry.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly loginServer?: string;
  /**
   * The creation date of the container registry in ISO8601 format.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly creationDate?: Date;
  /**
   * The provisioning state of the container registry at the time the operation was called.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly provisioningState?: ProvisioningState;
  /**
   * The status of the container registry at the time the operation was called.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly status?: Status;
  /** The value that indicates whether the admin user is enabled. */
  adminUserEnabled?: boolean;
  /** The network rule set for a container registry. */
  networkRuleSet?: NetworkRuleSet;
  /** The policies for a container registry. */
  policies?: Policies;
  /** The encryption settings of container registry. */
  encryption?: EncryptionProperty;
  /** Enable a single data endpoint per region for serving data. */
  dataEndpointEnabled?: boolean;
  /**
   * List of host names that will serve data when dataEndpointEnabled is true.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly dataEndpointHostNames?: string[];
  /**
   * List of private endpoint connections for a container registry.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly privateEndpointConnections?: PrivateEndpointConnection[];
  /** Whether or not public network access is allowed for the container registry. */
  publicNetworkAccess?: PublicNetworkAccess;
  /** Whether to allow trusted Azure services to access a network restricted registry. */
  networkRuleBypassOptions?: NetworkRuleBypassOptions;
  /** Whether or not zone redundancy is enabled for this container registry */
  zoneRedundancy?: ZoneRedundancy;
}

/** An object that represents a replication for a container registry. */
export interface Replication extends Resource {
  /**
   * The provisioning state of the replication at the time the operation was called.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly provisioningState?: ProvisioningState;
  /**
   * The status of the replication at the time the operation was called.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly status?: Status;
  /** Specifies whether the replication's regional endpoint is enabled. Requests will not be routed to a replication whose regional endpoint is disabled, however its data will continue to be synced with other replications. */
  regionEndpointEnabled?: boolean;
  /** Whether or not zone redundancy is enabled for this container registry replication */
  zoneRedundancy?: ZoneRedundancy;
}

/** An object that represents a webhook for a container registry. */
export interface Webhook extends Resource {
  /** The status of the webhook at the time the operation was called. */
  status?: WebhookStatus;
  /** The scope of repositories where the event can be triggered. For example, 'foo:*' means events for all tags under repository 'foo'. 'foo:bar' means events for 'foo:bar' only. 'foo' is equivalent to 'foo:latest'. Empty means all events. */
  scope?: string;
  /** The list of actions that trigger the webhook to post notifications. */
  actions?: WebhookAction[];
  /**
   * The provisioning state of the webhook at the time the operation was called.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly provisioningState?: ProvisioningState;
}

/**
 * The agentpool that has the ARM resource and properties.
 * The agentpool will have all information to create an agent pool.
 */
export interface AgentPool extends Resource {
  /** The count of agent machine */
  count?: number;
  /** The Tier of agent machine */
  tier?: string;
  /** The OS of agent machine */
  os?: OS;
  /** The Virtual Network Subnet Resource Id of the agent machine */
  virtualNetworkSubnetResourceId?: string;
  /**
   * The provisioning state of this agent pool
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly provisioningState?: ProvisioningState;
}

/**
 * The task that has the ARM resource and task properties.
 * The task will have all information to schedule a run against it.
 */
export interface Task extends Resource {
  /** Identity for the resource. */
  identity?: IdentityProperties;
  /**
   * The provisioning state of the task.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly provisioningState?: ProvisioningState;
  /**
   * The creation date of task.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly creationDate?: Date;
  /** The current status of task. */
  status?: TaskStatus;
  /** The platform properties against which the run has to happen. */
  platform?: PlatformProperties;
  /** The machine configuration of the run agent. */
  agentConfiguration?: AgentProperties;
  /** The dedicated agent pool for the task. */
  agentPoolName?: string;
  /** Run timeout in seconds. */
  timeout?: number;
  /** The properties of a task step. */
  step?: TaskStepPropertiesUnion;
  /** The properties that describe all triggers for the task. */
  trigger?: TriggerProperties;
  /** The properties that describes a set of credentials that will be used when this run is invoked. */
  credentials?: Credentials;
  /** The template that describes the repository and tag information for run log artifact. */
  logTemplate?: string;
  /** The value of this property indicates whether the task resource is system task or not. */
  isSystemTask?: boolean;
}

/** The event for a webhook. */
export interface Event extends EventInfo {
  /** The event request message sent to the service URI. */
  eventRequestMessage?: EventRequestMessage;
  /** The event response message received from the service URI. */
  eventResponseMessage?: EventResponseMessage;
}

/** The parameters for a docker quick build. */
export interface DockerBuildRequest extends RunRequest {
  /** Polymorphic discriminator, which specifies the different types this object can be */
  type: "DockerBuildRequest";
  /** The fully qualified image names including the repository and tag. */
  imageNames?: string[];
  /** The value of this property indicates whether the image built should be pushed to the registry or not. */
  isPushEnabled?: boolean;
  /** The value of this property indicates whether the image cache is enabled or not. */
  noCache?: boolean;
  /** The Docker file path relative to the source location. */
  dockerFilePath: string;
  /** The name of the target build stage for the docker build. */
  target?: string;
  /** The collection of override arguments to be used when executing the run. */
  arguments?: Argument[];
  /** Run timeout in seconds. */
  timeout?: number;
  /** The platform properties against which the run has to happen. */
  platform: PlatformProperties;
  /** The machine configuration of the run agent. */
  agentConfiguration?: AgentProperties;
  /**
   * The URL(absolute or relative) of the source context. It can be an URL to a tar or git repository.
   * If it is relative URL, the relative path should be obtained from calling listBuildSourceUploadUrl API.
   */
  sourceLocation?: string;
  /** The properties that describes a set of credentials that will be used when this run is invoked. */
  credentials?: Credentials;
}

/** The request parameters for a scheduling run against a task file. */
export interface FileTaskRunRequest extends RunRequest {
  /** Polymorphic discriminator, which specifies the different types this object can be */
  type: "FileTaskRunRequest";
  /** The template/definition file path relative to the source. */
  taskFilePath: string;
  /** The values/parameters file path relative to the source. */
  valuesFilePath?: string;
  /** The collection of overridable values that can be passed when running a task. */
  values?: SetValue[];
  /** Run timeout in seconds. */
  timeout?: number;
  /** The platform properties against which the run has to happen. */
  platform: PlatformProperties;
  /** The machine configuration of the run agent. */
  agentConfiguration?: AgentProperties;
  /**
   * The URL(absolute or relative) of the source context. It can be an URL to a tar or git repository.
   * If it is relative URL, the relative path should be obtained from calling listBuildSourceUploadUrl API.
   */
  sourceLocation?: string;
  /** The properties that describes a set of credentials that will be used when this run is invoked. */
  credentials?: Credentials;
}

/** The parameters for a task run request. */
export interface TaskRunRequest extends RunRequest {
  /** Polymorphic discriminator, which specifies the different types this object can be */
  type: "TaskRunRequest";
  /** The resource ID of task against which run has to be queued. */
  taskId: string;
  /** Set of overridable parameters that can be passed when running a Task. */
  overrideTaskStepProperties?: OverrideTaskStepProperties;
}

/** The parameters for a quick task run request. */
export interface EncodedTaskRunRequest extends RunRequest {
  /** Polymorphic discriminator, which specifies the different types this object can be */
  type: "EncodedTaskRunRequest";
  /** Base64 encoded value of the template/definition file content. */
  encodedTaskContent: string;
  /** Base64 encoded value of the parameters/values file content. */
  encodedValuesContent?: string;
  /** The collection of overridable values that can be passed when running a task. */
  values?: SetValue[];
  /** Run timeout in seconds. */
  timeout?: number;
  /** The platform properties against which the run has to happen. */
  platform: PlatformProperties;
  /** The machine configuration of the run agent. */
  agentConfiguration?: AgentProperties;
  /**
   * The URL(absolute or relative) of the source context. It can be an URL to a tar or git repository.
   * If it is relative URL, the relative path should be obtained from calling listBuildSourceUploadUrl API.
   */
  sourceLocation?: string;
  /** The properties that describes a set of credentials that will be used when this run is invoked. */
  credentials?: Credentials;
}

/** The Docker build step. */
export interface DockerBuildStep extends TaskStepProperties {
  /** Polymorphic discriminator, which specifies the different types this object can be */
  type: "Docker";
  /** The fully qualified image names including the repository and tag. */
  imageNames?: string[];
  /** The value of this property indicates whether the image built should be pushed to the registry or not. */
  isPushEnabled?: boolean;
  /** The value of this property indicates whether the image cache is enabled or not. */
  noCache?: boolean;
  /** The Docker file path relative to the source context. */
  dockerFilePath: string;
  /** The name of the target build stage for the docker build. */
  target?: string;
  /** The collection of override arguments to be used when executing this build step. */
  arguments?: Argument[];
}

/** The properties of a task step. */
export interface FileTaskStep extends TaskStepProperties {
  /** Polymorphic discriminator, which specifies the different types this object can be */
  type: "FileTask";
  /** The task template/definition file path relative to the source context. */
  taskFilePath: string;
  /** The task values/parameters file path relative to the source context. */
  valuesFilePath?: string;
  /** The collection of overridable values that can be passed when running a task. */
  values?: SetValue[];
}

/** The properties of a encoded task step. */
export interface EncodedTaskStep extends TaskStepProperties {
  /** Polymorphic discriminator, which specifies the different types this object can be */
  type: "EncodedTask";
  /** Base64 encoded value of the template/definition file content. */
  encodedTaskContent: string;
  /** Base64 encoded value of the parameters/values file content. */
  encodedValuesContent?: string;
  /** The collection of overridable values that can be passed when running a task. */
  values?: SetValue[];
}

/** The properties for updating a docker build step. */
export interface DockerBuildStepUpdateParameters
  extends TaskStepUpdateParameters {
  /** Polymorphic discriminator, which specifies the different types this object can be */
  type: "Docker";
  /** The fully qualified image names including the repository and tag. */
  imageNames?: string[];
  /** The value of this property indicates whether the image built should be pushed to the registry or not. */
  isPushEnabled?: boolean;
  /** The value of this property indicates whether the image cache is enabled or not. */
  noCache?: boolean;
  /** The Docker file path relative to the source context. */
  dockerFilePath?: string;
  /** The collection of override arguments to be used when executing this build step. */
  arguments?: Argument[];
  /** The name of the target build stage for the docker build. */
  target?: string;
}

/** The properties of updating a task step. */
export interface FileTaskStepUpdateParameters extends TaskStepUpdateParameters {
  /** Polymorphic discriminator, which specifies the different types this object can be */
  type: "FileTask";
  /** The task template/definition file path relative to the source context. */
  taskFilePath?: string;
  /** The values/parameters file path relative to the source context. */
  valuesFilePath?: string;
  /** The collection of overridable values that can be passed when running a task. */
  values?: SetValue[];
}

/** The properties for updating encoded task step. */
export interface EncodedTaskStepUpdateParameters
  extends TaskStepUpdateParameters {
  /** Polymorphic discriminator, which specifies the different types this object can be */
  type: "EncodedTask";
  /** Base64 encoded value of the template/definition file content. */
  encodedTaskContent?: string;
  /** Base64 encoded value of the parameters/values file content. */
  encodedValuesContent?: string;
  /** The collection of overridable values that can be passed when running a task. */
  values?: SetValue[];
}

/** Defines headers for Registries_importImage operation. */
export interface RegistriesImportImageHeaders {
  location?: string;
}

/** Defines headers for Registries_create operation. */
export interface RegistriesCreateHeaders {
  azureAsyncOperation?: string;
}

/** Defines headers for Registries_delete operation. */
export interface RegistriesDeleteHeaders {
  location?: string;
}

/** Defines headers for Registries_update operation. */
export interface RegistriesUpdateHeaders {
  azureAsyncOperation?: string;
}

/** Defines headers for Registries_generateCredentials operation. */
export interface RegistriesGenerateCredentialsHeaders {
  location?: string;
}

/** Defines headers for PrivateEndpointConnections_createOrUpdate operation. */
export interface PrivateEndpointConnectionsCreateOrUpdateHeaders {
  azureAsyncOperation?: string;
}

/** Defines headers for PrivateEndpointConnections_delete operation. */
export interface PrivateEndpointConnectionsDeleteHeaders {
  location?: string;
}

/** Defines headers for Replications_create operation. */
export interface ReplicationsCreateHeaders {
  azureAsyncOperation?: string;
}

/** Defines headers for Replications_delete operation. */
export interface ReplicationsDeleteHeaders {
  location?: string;
}

/** Defines headers for Replications_update operation. */
export interface ReplicationsUpdateHeaders {
  azureAsyncOperation?: string;
}

/** Defines headers for ScopeMaps_create operation. */
export interface ScopeMapsCreateHeaders {
  azureAsyncOperation?: string;
}

/** Defines headers for ScopeMaps_delete operation. */
export interface ScopeMapsDeleteHeaders {
  location?: string;
}

/** Defines headers for ScopeMaps_update operation. */
export interface ScopeMapsUpdateHeaders {
  azureAsyncOperation?: string;
}

/** Defines headers for Tokens_create operation. */
export interface TokensCreateHeaders {
  azureAsyncOperation?: string;
}

/** Defines headers for Tokens_delete operation. */
export interface TokensDeleteHeaders {
  location?: string;
}

/** Defines headers for Tokens_update operation. */
export interface TokensUpdateHeaders {
  azureAsyncOperation?: string;
}

/** Defines headers for Webhooks_create operation. */
export interface WebhooksCreateHeaders {
  azureAsyncOperation?: string;
}

/** Defines headers for Webhooks_delete operation. */
export interface WebhooksDeleteHeaders {
  location?: string;
}

/** Defines headers for Webhooks_update operation. */
export interface WebhooksUpdateHeaders {
  azureAsyncOperation?: string;
}

/** Known values of {@link ImportMode} that the service accepts. */
export enum KnownImportMode {
  /** NoForce */
  NoForce = "NoForce",
  /** Force */
  Force = "Force"
}

/**
 * Defines values for ImportMode. \
 * {@link KnownImportMode} can be used interchangeably with ImportMode,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **NoForce** \
 * **Force**
 */
export type ImportMode = string;

/** Known values of {@link ConnectionStatus} that the service accepts. */
export enum KnownConnectionStatus {
  /** Approved */
  Approved = "Approved",
  /** Pending */
  Pending = "Pending",
  /** Rejected */
  Rejected = "Rejected",
  /** Disconnected */
  Disconnected = "Disconnected"
}

/**
 * Defines values for ConnectionStatus. \
 * {@link KnownConnectionStatus} can be used interchangeably with ConnectionStatus,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **Approved** \
 * **Pending** \
 * **Rejected** \
 * **Disconnected**
 */
export type ConnectionStatus = string;

/** Known values of {@link ActionsRequired} that the service accepts. */
export enum KnownActionsRequired {
  /** None */
  None = "None",
  /** Recreate */
  Recreate = "Recreate"
}

/**
 * Defines values for ActionsRequired. \
 * {@link KnownActionsRequired} can be used interchangeably with ActionsRequired,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **None** \
 * **Recreate**
 */
export type ActionsRequired = string;

/** Known values of {@link ProvisioningState} that the service accepts. */
export enum KnownProvisioningState {
  /** Creating */
  Creating = "Creating",
  /** Updating */
  Updating = "Updating",
  /** Deleting */
  Deleting = "Deleting",
  /** Succeeded */
  Succeeded = "Succeeded",
  /** Failed */
  Failed = "Failed",
  /** Canceled */
  Canceled = "Canceled"
}

/**
 * Defines values for ProvisioningState. \
 * {@link KnownProvisioningState} can be used interchangeably with ProvisioningState,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **Creating** \
 * **Updating** \
 * **Deleting** \
 * **Succeeded** \
 * **Failed** \
 * **Canceled**
 */
export type ProvisioningState = string;

/** Known values of {@link CreatedByType} that the service accepts. */
export enum KnownCreatedByType {
  /** User */
  User = "User",
  /** Application */
  Application = "Application",
  /** ManagedIdentity */
  ManagedIdentity = "ManagedIdentity",
  /** Key */
  Key = "Key"
}

/**
 * Defines values for CreatedByType. \
 * {@link KnownCreatedByType} can be used interchangeably with CreatedByType,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **User** \
 * **Application** \
 * **ManagedIdentity** \
 * **Key**
 */
export type CreatedByType = string;

/** Known values of {@link LastModifiedByType} that the service accepts. */
export enum KnownLastModifiedByType {
  /** User */
  User = "User",
  /** Application */
  Application = "Application",
  /** ManagedIdentity */
  ManagedIdentity = "ManagedIdentity",
  /** Key */
  Key = "Key"
}

/**
 * Defines values for LastModifiedByType. \
 * {@link KnownLastModifiedByType} can be used interchangeably with LastModifiedByType,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **User** \
 * **Application** \
 * **ManagedIdentity** \
 * **Key**
 */
export type LastModifiedByType = string;

/** Known values of {@link SkuName} that the service accepts. */
export enum KnownSkuName {
  /** Classic */
  Classic = "Classic",
  /** Basic */
  Basic = "Basic",
  /** Standard */
  Standard = "Standard",
  /** Premium */
  Premium = "Premium"
}

/**
 * Defines values for SkuName. \
 * {@link KnownSkuName} can be used interchangeably with SkuName,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **Classic** \
 * **Basic** \
 * **Standard** \
 * **Premium**
 */
export type SkuName = string;

/** Known values of {@link SkuTier} that the service accepts. */
export enum KnownSkuTier {
  /** Classic */
  Classic = "Classic",
  /** Basic */
  Basic = "Basic",
  /** Standard */
  Standard = "Standard",
  /** Premium */
  Premium = "Premium"
}

/**
 * Defines values for SkuTier. \
 * {@link KnownSkuTier} can be used interchangeably with SkuTier,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **Classic** \
 * **Basic** \
 * **Standard** \
 * **Premium**
 */
export type SkuTier = string;

/** Known values of {@link DefaultAction} that the service accepts. */
export enum KnownDefaultAction {
  /** Allow */
  Allow = "Allow",
  /** Deny */
  Deny = "Deny"
}

/**
 * Defines values for DefaultAction. \
 * {@link KnownDefaultAction} can be used interchangeably with DefaultAction,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **Allow** \
 * **Deny**
 */
export type DefaultAction = string;

/** Known values of {@link Action} that the service accepts. */
export enum KnownAction {
  /** Allow */
  Allow = "Allow"
}

/**
 * Defines values for Action. \
 * {@link KnownAction} can be used interchangeably with Action,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **Allow**
 */
export type Action = string;

/** Known values of {@link PolicyStatus} that the service accepts. */
export enum KnownPolicyStatus {
  /** Enabled */
  Enabled = "enabled",
  /** Disabled */
  Disabled = "disabled"
}

/**
 * Defines values for PolicyStatus. \
 * {@link KnownPolicyStatus} can be used interchangeably with PolicyStatus,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **enabled** \
 * **disabled**
 */
export type PolicyStatus = string;

/** Known values of {@link TrustPolicyType} that the service accepts. */
export enum KnownTrustPolicyType {
  /** Notary */
  Notary = "Notary"
}

/**
 * Defines values for TrustPolicyType. \
 * {@link KnownTrustPolicyType} can be used interchangeably with TrustPolicyType,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **Notary**
 */
export type TrustPolicyType = string;

/** Known values of {@link ExportPolicyStatus} that the service accepts. */
export enum KnownExportPolicyStatus {
  /** Enabled */
  Enabled = "enabled",
  /** Disabled */
  Disabled = "disabled"
}

/**
 * Defines values for ExportPolicyStatus. \
 * {@link KnownExportPolicyStatus} can be used interchangeably with ExportPolicyStatus,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **enabled** \
 * **disabled**
 */
export type ExportPolicyStatus = string;

/** Known values of {@link EncryptionStatus} that the service accepts. */
export enum KnownEncryptionStatus {
  /** Enabled */
  Enabled = "enabled",
  /** Disabled */
  Disabled = "disabled"
}

/**
 * Defines values for EncryptionStatus. \
 * {@link KnownEncryptionStatus} can be used interchangeably with EncryptionStatus,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **enabled** \
 * **disabled**
 */
export type EncryptionStatus = string;

/** Known values of {@link PublicNetworkAccess} that the service accepts. */
export enum KnownPublicNetworkAccess {
  /** Enabled */
  Enabled = "Enabled",
  /** Disabled */
  Disabled = "Disabled"
}

/**
 * Defines values for PublicNetworkAccess. \
 * {@link KnownPublicNetworkAccess} can be used interchangeably with PublicNetworkAccess,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **Enabled** \
 * **Disabled**
 */
export type PublicNetworkAccess = string;

/** Known values of {@link NetworkRuleBypassOptions} that the service accepts. */
export enum KnownNetworkRuleBypassOptions {
  /** AzureServices */
  AzureServices = "AzureServices",
  /** None */
  None = "None"
}

/**
 * Defines values for NetworkRuleBypassOptions. \
 * {@link KnownNetworkRuleBypassOptions} can be used interchangeably with NetworkRuleBypassOptions,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **AzureServices** \
 * **None**
 */
export type NetworkRuleBypassOptions = string;

/** Known values of {@link ZoneRedundancy} that the service accepts. */
export enum KnownZoneRedundancy {
  /** Enabled */
  Enabled = "Enabled",
  /** Disabled */
  Disabled = "Disabled"
}

/**
 * Defines values for ZoneRedundancy. \
 * {@link KnownZoneRedundancy} can be used interchangeably with ZoneRedundancy,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **Enabled** \
 * **Disabled**
 */
export type ZoneRedundancy = string;

/** Known values of {@link RegistryUsageUnit} that the service accepts. */
export enum KnownRegistryUsageUnit {
  /** Count */
  Count = "Count",
  /** Bytes */
  Bytes = "Bytes"
}

/**
 * Defines values for RegistryUsageUnit. \
 * {@link KnownRegistryUsageUnit} can be used interchangeably with RegistryUsageUnit,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **Count** \
 * **Bytes**
 */
export type RegistryUsageUnit = string;

/** Known values of {@link TokenCertificateName} that the service accepts. */
export enum KnownTokenCertificateName {
  /** Certificate1 */
  Certificate1 = "certificate1",
  /** Certificate2 */
  Certificate2 = "certificate2"
}

/**
 * Defines values for TokenCertificateName. \
 * {@link KnownTokenCertificateName} can be used interchangeably with TokenCertificateName,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **certificate1** \
 * **certificate2**
 */
export type TokenCertificateName = string;

/** Known values of {@link TokenPasswordName} that the service accepts. */
export enum KnownTokenPasswordName {
  /** Password1 */
  Password1 = "password1",
  /** Password2 */
  Password2 = "password2"
}

/**
 * Defines values for TokenPasswordName. \
 * {@link KnownTokenPasswordName} can be used interchangeably with TokenPasswordName,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **password1** \
 * **password2**
 */
export type TokenPasswordName = string;

/** Known values of {@link TokenStatus} that the service accepts. */
export enum KnownTokenStatus {
  /** Enabled */
  Enabled = "enabled",
  /** Disabled */
  Disabled = "disabled"
}

/**
 * Defines values for TokenStatus. \
 * {@link KnownTokenStatus} can be used interchangeably with TokenStatus,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **enabled** \
 * **disabled**
 */
export type TokenStatus = string;

/** Known values of {@link WebhookStatus} that the service accepts. */
export enum KnownWebhookStatus {
  /** Enabled */
  Enabled = "enabled",
  /** Disabled */
  Disabled = "disabled"
}

/**
 * Defines values for WebhookStatus. \
 * {@link KnownWebhookStatus} can be used interchangeably with WebhookStatus,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **enabled** \
 * **disabled**
 */
export type WebhookStatus = string;

/** Known values of {@link WebhookAction} that the service accepts. */
export enum KnownWebhookAction {
  /** Push */
  Push = "push",
  /** Delete */
  Delete = "delete",
  /** Quarantine */
  Quarantine = "quarantine",
  /** ChartPush */
  ChartPush = "chart_push",
  /** ChartDelete */
  ChartDelete = "chart_delete"
}

/**
 * Defines values for WebhookAction. \
 * {@link KnownWebhookAction} can be used interchangeably with WebhookAction,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **push** \
 * **delete** \
 * **quarantine** \
 * **chart_push** \
 * **chart_delete**
 */
export type WebhookAction = string;

/** Known values of {@link OS} that the service accepts. */
export enum KnownOS {
  /** Windows */
  Windows = "Windows",
  /** Linux */
  Linux = "Linux"
}

/**
 * Defines values for OS. \
 * {@link KnownOS} can be used interchangeably with OS,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **Windows** \
 * **Linux**
 */
export type OS = string;

/** Known values of {@link RunStatus} that the service accepts. */
export enum KnownRunStatus {
  /** Queued */
  Queued = "Queued",
  /** Started */
  Started = "Started",
  /** Running */
  Running = "Running",
  /** Succeeded */
  Succeeded = "Succeeded",
  /** Failed */
  Failed = "Failed",
  /** Canceled */
  Canceled = "Canceled",
  /** Error */
  Error = "Error",
  /** Timeout */
  Timeout = "Timeout"
}

/**
 * Defines values for RunStatus. \
 * {@link KnownRunStatus} can be used interchangeably with RunStatus,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **Queued** \
 * **Started** \
 * **Running** \
 * **Succeeded** \
 * **Failed** \
 * **Canceled** \
 * **Error** \
 * **Timeout**
 */
export type RunStatus = string;

/** Known values of {@link RunType} that the service accepts. */
export enum KnownRunType {
  /** QuickBuild */
  QuickBuild = "QuickBuild",
  /** QuickRun */
  QuickRun = "QuickRun",
  /** AutoBuild */
  AutoBuild = "AutoBuild",
  /** AutoRun */
  AutoRun = "AutoRun"
}

/**
 * Defines values for RunType. \
 * {@link KnownRunType} can be used interchangeably with RunType,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **QuickBuild** \
 * **QuickRun** \
 * **AutoBuild** \
 * **AutoRun**
 */
export type RunType = string;

/** Known values of {@link Architecture} that the service accepts. */
export enum KnownArchitecture {
  /** Amd64 */
  Amd64 = "amd64",
  /** X86 */
  X86 = "x86",
  /** ThreeHundredEightySix */
  ThreeHundredEightySix = "386",
  /** Arm */
  Arm = "arm",
  /** Arm64 */
  Arm64 = "arm64"
}

/**
 * Defines values for Architecture. \
 * {@link KnownArchitecture} can be used interchangeably with Architecture,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **amd64** \
 * **x86** \
 * **386** \
 * **arm** \
 * **arm64**
 */
export type Architecture = string;

/** Known values of {@link Variant} that the service accepts. */
export enum KnownVariant {
  /** V6 */
  V6 = "v6",
  /** V7 */
  V7 = "v7",
  /** V8 */
  V8 = "v8"
}

/**
 * Defines values for Variant. \
 * {@link KnownVariant} can be used interchangeably with Variant,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **v6** \
 * **v7** \
 * **v8**
 */
export type Variant = string;

/** Known values of {@link TaskStatus} that the service accepts. */
export enum KnownTaskStatus {
  /** Disabled */
  Disabled = "Disabled",
  /** Enabled */
  Enabled = "Enabled"
}

/**
 * Defines values for TaskStatus. \
 * {@link KnownTaskStatus} can be used interchangeably with TaskStatus,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **Disabled** \
 * **Enabled**
 */
export type TaskStatus = string;

/** Known values of {@link StepType} that the service accepts. */
export enum KnownStepType {
  /** Docker */
  Docker = "Docker",
  /** FileTask */
  FileTask = "FileTask",
  /** EncodedTask */
  EncodedTask = "EncodedTask"
}

/**
 * Defines values for StepType. \
 * {@link KnownStepType} can be used interchangeably with StepType,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **Docker** \
 * **FileTask** \
 * **EncodedTask**
 */
export type StepType = string;

/** Known values of {@link BaseImageDependencyType} that the service accepts. */
export enum KnownBaseImageDependencyType {
  /** BuildTime */
  BuildTime = "BuildTime",
  /** RunTime */
  RunTime = "RunTime"
}

/**
 * Defines values for BaseImageDependencyType. \
 * {@link KnownBaseImageDependencyType} can be used interchangeably with BaseImageDependencyType,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **BuildTime** \
 * **RunTime**
 */
export type BaseImageDependencyType = string;

/** Known values of {@link TriggerStatus} that the service accepts. */
export enum KnownTriggerStatus {
  /** Disabled */
  Disabled = "Disabled",
  /** Enabled */
  Enabled = "Enabled"
}

/**
 * Defines values for TriggerStatus. \
 * {@link KnownTriggerStatus} can be used interchangeably with TriggerStatus,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **Disabled** \
 * **Enabled**
 */
export type TriggerStatus = string;

/** Known values of {@link SourceControlType} that the service accepts. */
export enum KnownSourceControlType {
  /** Github */
  Github = "Github",
  /** VisualStudioTeamService */
  VisualStudioTeamService = "VisualStudioTeamService"
}

/**
 * Defines values for SourceControlType. \
 * {@link KnownSourceControlType} can be used interchangeably with SourceControlType,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **Github** \
 * **VisualStudioTeamService**
 */
export type SourceControlType = string;

/** Known values of {@link TokenType} that the service accepts. */
export enum KnownTokenType {
  /** PAT */
  PAT = "PAT",
  /** OAuth */
  OAuth = "OAuth"
}

/**
 * Defines values for TokenType. \
 * {@link KnownTokenType} can be used interchangeably with TokenType,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **PAT** \
 * **OAuth**
 */
export type TokenType = string;

/** Known values of {@link SourceTriggerEvent} that the service accepts. */
export enum KnownSourceTriggerEvent {
  /** Commit */
  Commit = "commit",
  /** Pullrequest */
  Pullrequest = "pullrequest"
}

/**
 * Defines values for SourceTriggerEvent. \
 * {@link KnownSourceTriggerEvent} can be used interchangeably with SourceTriggerEvent,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **commit** \
 * **pullrequest**
 */
export type SourceTriggerEvent = string;

/** Known values of {@link BaseImageTriggerType} that the service accepts. */
export enum KnownBaseImageTriggerType {
  /** All */
  All = "All",
  /** Runtime */
  Runtime = "Runtime"
}

/**
 * Defines values for BaseImageTriggerType. \
 * {@link KnownBaseImageTriggerType} can be used interchangeably with BaseImageTriggerType,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **All** \
 * **Runtime**
 */
export type BaseImageTriggerType = string;

/** Known values of {@link UpdateTriggerPayloadType} that the service accepts. */
export enum KnownUpdateTriggerPayloadType {
  /** Default */
  Default = "Default",
  /** Token */
  Token = "Token"
}

/**
 * Defines values for UpdateTriggerPayloadType. \
 * {@link KnownUpdateTriggerPayloadType} can be used interchangeably with UpdateTriggerPayloadType,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **Default** \
 * **Token**
 */
export type UpdateTriggerPayloadType = string;

/** Known values of {@link SourceRegistryLoginMode} that the service accepts. */
export enum KnownSourceRegistryLoginMode {
  /** None */
  None = "None",
  /** Default */
  Default = "Default"
}

/**
 * Defines values for SourceRegistryLoginMode. \
 * {@link KnownSourceRegistryLoginMode} can be used interchangeably with SourceRegistryLoginMode,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **None** \
 * **Default**
 */
export type SourceRegistryLoginMode = string;

/** Known values of {@link SecretObjectType} that the service accepts. */
export enum KnownSecretObjectType {
  /** Opaque */
  Opaque = "Opaque",
  /** Vaultsecret */
  Vaultsecret = "Vaultsecret"
}

/**
 * Defines values for SecretObjectType. \
 * {@link KnownSecretObjectType} can be used interchangeably with SecretObjectType,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **Opaque** \
 * **Vaultsecret**
 */
export type SecretObjectType = string;
/** Defines values for ResourceIdentityType. */
export type ResourceIdentityType =
  | "SystemAssigned"
  | "UserAssigned"
  | "SystemAssigned, UserAssigned"
  | "None";
/** Defines values for PasswordName. */
export type PasswordName = "password" | "password2";

/** Optional parameters. */
export interface RegistriesImportImageOptionalParams
  extends coreClient.OperationOptions {
  /** Delay to wait until next poll, in milliseconds. */
  updateIntervalInMs?: number;
  /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */
  resumeFrom?: string;
}

/** Optional parameters. */
export interface RegistriesCheckNameAvailabilityOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the checkNameAvailability operation. */
export type RegistriesCheckNameAvailabilityResponse = RegistryNameStatus;

/** Optional parameters. */
export interface RegistriesListOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the list operation. */
export type RegistriesListResponse = RegistryListResult;

/** Optional parameters. */
export interface RegistriesListByResourceGroupOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the listByResourceGroup operation. */
export type RegistriesListByResourceGroupResponse = RegistryListResult;

/** Optional parameters. */
export interface RegistriesGetOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the get operation. */
export type RegistriesGetResponse = Registry;

/** Optional parameters. */
export interface RegistriesCreateOptionalParams
  extends coreClient.OperationOptions {
  /** Delay to wait until next poll, in milliseconds. */
  updateIntervalInMs?: number;
  /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */
  resumeFrom?: string;
}

/** Contains response data for the create operation. */
export type RegistriesCreateResponse = Registry;

/** Optional parameters. */
export interface RegistriesDeleteOptionalParams
  extends coreClient.OperationOptions {
  /** Delay to wait until next poll, in milliseconds. */
  updateIntervalInMs?: number;
  /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */
  resumeFrom?: string;
}

/** Optional parameters. */
export interface RegistriesUpdateOptionalParams
  extends coreClient.OperationOptions {
  /** Delay to wait until next poll, in milliseconds. */
  updateIntervalInMs?: number;
  /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */
  resumeFrom?: string;
}

/** Contains response data for the update operation. */
export type RegistriesUpdateResponse = Registry;

/** Optional parameters. */
export interface RegistriesListUsagesOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the listUsages operation. */
export type RegistriesListUsagesResponse = RegistryUsageListResult;

/** Optional parameters. */
export interface RegistriesListPrivateLinkResourcesOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the listPrivateLinkResources operation. */
export type RegistriesListPrivateLinkResourcesResponse = PrivateLinkResourceListResult;

/** Optional parameters. */
export interface RegistriesGetPrivateLinkResourceOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the getPrivateLinkResource operation. */
export type RegistriesGetPrivateLinkResourceResponse = PrivateLinkResource;

/** Optional parameters. */
export interface RegistriesListCredentialsOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the listCredentials operation. */
export type RegistriesListCredentialsResponse = RegistryListCredentialsResult;

/** Optional parameters. */
export interface RegistriesRegenerateCredentialOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the regenerateCredential operation. */
export type RegistriesRegenerateCredentialResponse = RegistryListCredentialsResult;

/** Optional parameters. */
export interface RegistriesGenerateCredentialsOptionalParams
  extends coreClient.OperationOptions {
  /** Delay to wait until next poll, in milliseconds. */
  updateIntervalInMs?: number;
  /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */
  resumeFrom?: string;
}

/** Contains response data for the generateCredentials operation. */
export type RegistriesGenerateCredentialsResponse = GenerateCredentialsResult;

/** Optional parameters. */
export interface RegistriesScheduleRunOptionalParams
  extends coreClient.OperationOptions {
  /** Delay to wait until next poll, in milliseconds. */
  updateIntervalInMs?: number;
  /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */
  resumeFrom?: string;
}

/** Contains response data for the scheduleRun operation. */
export type RegistriesScheduleRunResponse = Run;

/** Optional parameters. */
export interface RegistriesGetBuildSourceUploadUrlOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the getBuildSourceUploadUrl operation. */
export type RegistriesGetBuildSourceUploadUrlResponse = SourceUploadDefinition;

/** Optional parameters. */
export interface RegistriesListNextOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the listNext operation. */
export type RegistriesListNextResponse = RegistryListResult;

/** Optional parameters. */
export interface RegistriesListByResourceGroupNextOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the listByResourceGroupNext operation. */
export type RegistriesListByResourceGroupNextResponse = RegistryListResult;

/** Optional parameters. */
export interface RegistriesListPrivateLinkResourcesNextOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the listPrivateLinkResourcesNext operation. */
export type RegistriesListPrivateLinkResourcesNextResponse = PrivateLinkResourceListResult;

/** Optional parameters. */
export interface OperationsListOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the list operation. */
export type OperationsListResponse = OperationListResult;

/** Optional parameters. */
export interface OperationsListNextOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the listNext operation. */
export type OperationsListNextResponse = OperationListResult;

/** Optional parameters. */
export interface PrivateEndpointConnectionsListOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the list operation. */
export type PrivateEndpointConnectionsListResponse = PrivateEndpointConnectionListResult;

/** Optional parameters. */
export interface PrivateEndpointConnectionsGetOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the get operation. */
export type PrivateEndpointConnectionsGetResponse = PrivateEndpointConnection;

/** Optional parameters. */
export interface PrivateEndpointConnectionsCreateOrUpdateOptionalParams
  extends coreClient.OperationOptions {
  /** Delay to wait until next poll, in milliseconds. */
  updateIntervalInMs?: number;
  /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */
  resumeFrom?: string;
}

/** Contains response data for the createOrUpdate operation. */
export type PrivateEndpointConnectionsCreateOrUpdateResponse = PrivateEndpointConnection;

/** Optional parameters. */
export interface PrivateEndpointConnectionsDeleteOptionalParams
  extends coreClient.OperationOptions {
  /** Delay to wait until next poll, in milliseconds. */
  updateIntervalInMs?: number;
  /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */
  resumeFrom?: string;
}

/** Optional parameters. */
export interface PrivateEndpointConnectionsListNextOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the listNext operation. */
export type PrivateEndpointConnectionsListNextResponse = PrivateEndpointConnectionListResult;

/** Optional parameters. */
export interface ReplicationsListOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the list operation. */
export type ReplicationsListResponse = ReplicationListResult;

/** Optional parameters. */
export interface ReplicationsGetOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the get operation. */
export type ReplicationsGetResponse = Replication;

/** Optional parameters. */
export interface ReplicationsCreateOptionalParams
  extends coreClient.OperationOptions {
  /** Delay to wait until next poll, in milliseconds. */
  updateIntervalInMs?: number;
  /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */
  resumeFrom?: string;
}

/** Contains response data for the create operation. */
export type ReplicationsCreateResponse = Replication;

/** Optional parameters. */
export interface ReplicationsDeleteOptionalParams
  extends coreClient.OperationOptions {
  /** Delay to wait until next poll, in milliseconds. */
  updateIntervalInMs?: number;
  /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */
  resumeFrom?: string;
}

/** Optional parameters. */
export interface ReplicationsUpdateOptionalParams
  extends coreClient.OperationOptions {
  /** Delay to wait until next poll, in milliseconds. */
  updateIntervalInMs?: number;
  /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */
  resumeFrom?: string;
}

/** Contains response data for the update operation. */
export type ReplicationsUpdateResponse = Replication;

/** Optional parameters. */
export interface ReplicationsListNextOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the listNext operation. */
export type ReplicationsListNextResponse = ReplicationListResult;

/** Optional parameters. */
export interface ScopeMapsListOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the list operation. */
export type ScopeMapsListResponse = ScopeMapListResult;

/** Optional parameters. */
export interface ScopeMapsGetOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the get operation. */
export type ScopeMapsGetResponse = ScopeMap;

/** Optional parameters. */
export interface ScopeMapsCreateOptionalParams
  extends coreClient.OperationOptions {
  /** Delay to wait until next poll, in milliseconds. */
  updateIntervalInMs?: number;
  /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */
  resumeFrom?: string;
}

/** Contains response data for the create operation. */
export type ScopeMapsCreateResponse = ScopeMap;

/** Optional parameters. */
export interface ScopeMapsDeleteOptionalParams
  extends coreClient.OperationOptions {
  /** Delay to wait until next poll, in milliseconds. */
  updateIntervalInMs?: number;
  /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */
  resumeFrom?: string;
}

/** Optional parameters. */
export interface ScopeMapsUpdateOptionalParams
  extends coreClient.OperationOptions {
  /** Delay to wait until next poll, in milliseconds. */
  updateIntervalInMs?: number;
  /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */
  resumeFrom?: string;
}

/** Contains response data for the update operation. */
export type ScopeMapsUpdateResponse = ScopeMap;

/** Optional parameters. */
export interface ScopeMapsListNextOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the listNext operation. */
export type ScopeMapsListNextResponse = ScopeMapListResult;

/** Optional parameters. */
export interface TokensListOptionalParams extends coreClient.OperationOptions {}

/** Contains response data for the list operation. */
export type TokensListResponse = TokenListResult;

/** Optional parameters. */
export interface TokensGetOptionalParams extends coreClient.OperationOptions {}

/** Contains response data for the get operation. */
export type TokensGetResponse = Token;

/** Optional parameters. */
export interface TokensCreateOptionalParams
  extends coreClient.OperationOptions {
  /** Delay to wait until next poll, in milliseconds. */
  updateIntervalInMs?: number;
  /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */
  resumeFrom?: string;
}

/** Contains response data for the create operation. */
export type TokensCreateResponse = Token;

/** Optional parameters. */
export interface TokensDeleteOptionalParams
  extends coreClient.OperationOptions {
  /** Delay to wait until next poll, in milliseconds. */
  updateIntervalInMs?: number;
  /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */
  resumeFrom?: string;
}

/** Optional parameters. */
export interface TokensUpdateOptionalParams
  extends coreClient.OperationOptions {
  /** Delay to wait until next poll, in milliseconds. */
  updateIntervalInMs?: number;
  /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */
  resumeFrom?: string;
}

/** Contains response data for the update operation. */
export type TokensUpdateResponse = Token;

/** Optional parameters. */
export interface TokensListNextOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the listNext operation. */
export type TokensListNextResponse = TokenListResult;

/** Optional parameters. */
export interface WebhooksListOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the list operation. */
export type WebhooksListResponse = WebhookListResult;

/** Optional parameters. */
export interface WebhooksGetOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the get operation. */
export type WebhooksGetResponse = Webhook;

/** Optional parameters. */
export interface WebhooksCreateOptionalParams
  extends coreClient.OperationOptions {
  /** Delay to wait until next poll, in milliseconds. */
  updateIntervalInMs?: number;
  /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */
  resumeFrom?: string;
}

/** Contains response data for the create operation. */
export type WebhooksCreateResponse = Webhook;

/** Optional parameters. */
export interface WebhooksDeleteOptionalParams
  extends coreClient.OperationOptions {
  /** Delay to wait until next poll, in milliseconds. */
  updateIntervalInMs?: number;
  /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */
  resumeFrom?: string;
}

/** Optional parameters. */
export interface WebhooksUpdateOptionalParams
  extends coreClient.OperationOptions {
  /** Delay to wait until next poll, in milliseconds. */
  updateIntervalInMs?: number;
  /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */
  resumeFrom?: string;
}

/** Contains response data for the update operation. */
export type WebhooksUpdateResponse = Webhook;

/** Optional parameters. */
export interface WebhooksPingOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the ping operation. */
export type WebhooksPingResponse = EventInfo;

/** Optional parameters. */
export interface WebhooksListEventsOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the listEvents operation. */
export type WebhooksListEventsResponse = EventListResult;

/** Optional parameters. */
export interface WebhooksGetCallbackConfigOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the getCallbackConfig operation. */
export type WebhooksGetCallbackConfigResponse = CallbackConfig;

/** Optional parameters. */
export interface WebhooksListNextOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the listNext operation. */
export type WebhooksListNextResponse = WebhookListResult;

/** Optional parameters. */
export interface WebhooksListEventsNextOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the listEventsNext operation. */
export type WebhooksListEventsNextResponse = EventListResult;

/** Optional parameters. */
export interface AgentPoolsGetOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the get operation. */
export type AgentPoolsGetResponse = AgentPool;

/** Optional parameters. */
export interface AgentPoolsCreateOptionalParams
  extends coreClient.OperationOptions {
  /** Delay to wait until next poll, in milliseconds. */
  updateIntervalInMs?: number;
  /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */
  resumeFrom?: string;
}

/** Contains response data for the create operation. */
export type AgentPoolsCreateResponse = AgentPool;

/** Optional parameters. */
export interface AgentPoolsDeleteOptionalParams
  extends coreClient.OperationOptions {
  /** Delay to wait until next poll, in milliseconds. */
  updateIntervalInMs?: number;
  /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */
  resumeFrom?: string;
}

/** Optional parameters. */
export interface AgentPoolsUpdateOptionalParams
  extends coreClient.OperationOptions {
  /** Delay to wait until next poll, in milliseconds. */
  updateIntervalInMs?: number;
  /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */
  resumeFrom?: string;
}

/** Contains response data for the update operation. */
export type AgentPoolsUpdateResponse = AgentPool;

/** Optional parameters. */
export interface AgentPoolsListOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the list operation. */
export type AgentPoolsListResponse = AgentPoolListResult;

/** Optional parameters. */
export interface AgentPoolsGetQueueStatusOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the getQueueStatus operation. */
export type AgentPoolsGetQueueStatusResponse = AgentPoolQueueStatus;

/** Optional parameters. */
export interface AgentPoolsListNextOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the listNext operation. */
export type AgentPoolsListNextResponse = AgentPoolListResult;

/** Optional parameters. */
export interface RunsListOptionalParams extends coreClient.OperationOptions {
  /** The runs filter to apply on the operation. Arithmetic operators are not supported. The allowed string function is 'contains'. All logical operators except 'Not', 'Has', 'All' are allowed. */
  filter?: string;
  /** $top is supported for get list of runs, which limits the maximum number of runs to return. */
  top?: number;
}

/** Contains response data for the list operation. */
export type RunsListResponse = RunListResult;

/** Optional parameters. */
export interface RunsGetOptionalParams extends coreClient.OperationOptions {}

/** Contains response data for the get operation. */
export type RunsGetResponse = Run;

/** Optional parameters. */
export interface RunsUpdateOptionalParams extends coreClient.OperationOptions {
  /** Delay to wait until next poll, in milliseconds. */
  updateIntervalInMs?: number;
  /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */
  resumeFrom?: string;
}

/** Contains response data for the update operation. */
export type RunsUpdateResponse = Run;

/** Optional parameters. */
export interface RunsGetLogSasUrlOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the getLogSasUrl operation. */
export type RunsGetLogSasUrlResponse = RunGetLogResult;

/** Optional parameters. */
export interface RunsCancelOptionalParams extends coreClient.OperationOptions {
  /** Delay to wait until next poll, in milliseconds. */
  updateIntervalInMs?: number;
  /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */
  resumeFrom?: string;
}

/** Optional parameters. */
export interface RunsListNextOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the listNext operation. */
export type RunsListNextResponse = RunListResult;

/** Optional parameters. */
export interface TaskRunsGetOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the get operation. */
export type TaskRunsGetResponse = TaskRun;

/** Optional parameters. */
export interface TaskRunsCreateOptionalParams
  extends coreClient.OperationOptions {
  /** Delay to wait until next poll, in milliseconds. */
  updateIntervalInMs?: number;
  /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */
  resumeFrom?: string;
}

/** Contains response data for the create operation. */
export type TaskRunsCreateResponse = TaskRun;

/** Optional parameters. */
export interface TaskRunsDeleteOptionalParams
  extends coreClient.OperationOptions {
  /** Delay to wait until next poll, in milliseconds. */
  updateIntervalInMs?: number;
  /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */
  resumeFrom?: string;
}

/** Optional parameters. */
export interface TaskRunsUpdateOptionalParams
  extends coreClient.OperationOptions {
  /** Delay to wait until next poll, in milliseconds. */
  updateIntervalInMs?: number;
  /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */
  resumeFrom?: string;
}

/** Contains response data for the update operation. */
export type TaskRunsUpdateResponse = TaskRun;

/** Optional parameters. */
export interface TaskRunsGetDetailsOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the getDetails operation. */
export type TaskRunsGetDetailsResponse = TaskRun;

/** Optional parameters. */
export interface TaskRunsListOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the list operation. */
export type TaskRunsListResponse = TaskRunListResult;

/** Optional parameters. */
export interface TaskRunsListNextOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the listNext operation. */
export type TaskRunsListNextResponse = TaskRunListResult;

/** Optional parameters. */
export interface TasksListOptionalParams extends coreClient.OperationOptions {}

/** Contains response data for the list operation. */
export type TasksListResponse = TaskListResult;

/** Optional parameters. */
export interface TasksGetOptionalParams extends coreClient.OperationOptions {}

/** Contains response data for the get operation. */
export type TasksGetResponse = Task;

/** Optional parameters. */
export interface TasksCreateOptionalParams extends coreClient.OperationOptions {
  /** Delay to wait until next poll, in milliseconds. */
  updateIntervalInMs?: number;
  /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */
  resumeFrom?: string;
}

/** Contains response data for the create operation. */
export type TasksCreateResponse = Task;

/** Optional parameters. */
export interface TasksDeleteOptionalParams extends coreClient.OperationOptions {
  /** Delay to wait until next poll, in milliseconds. */
  updateIntervalInMs?: number;
  /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */
  resumeFrom?: string;
}

/** Optional parameters. */
export interface TasksUpdateOptionalParams extends coreClient.OperationOptions {
  /** Delay to wait until next poll, in milliseconds. */
  updateIntervalInMs?: number;
  /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */
  resumeFrom?: string;
}

/** Contains response data for the update operation. */
export type TasksUpdateResponse = Task;

/** Optional parameters. */
export interface TasksGetDetailsOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the getDetails operation. */
export type TasksGetDetailsResponse = Task;

/** Optional parameters. */
export interface TasksListNextOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the listNext operation. */
export type TasksListNextResponse = TaskListResult;

/** Optional parameters. */
export interface ContainerRegistryManagementClientOptionalParams
  extends coreClient.ServiceClientOptions {
  /** server parameter */
  $host?: string;
  /** Overrides client endpoint. */
  endpoint?: string;
}
