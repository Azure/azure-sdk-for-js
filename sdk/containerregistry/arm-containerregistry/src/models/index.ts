/*
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for license information.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */

import { BaseResource, CloudError, AzureServiceClientOptions } from "@azure/ms-rest-azure-js";
import * as msRest from "@azure/ms-rest-js";

export { BaseResource, CloudError };

/**
 * An interface representing UserIdentityProperties.
 */
export interface UserIdentityProperties {
  /**
   * The principal id of user assigned identity.
   */
  principalId?: string;
  /**
   * The client id of user assigned identity.
   */
  clientId?: string;
}

/**
 * Managed identity for the resource.
 */
export interface IdentityProperties {
  /**
   * The principal ID of resource identity.
   */
  principalId?: string;
  /**
   * The tenant ID of resource.
   */
  tenantId?: string;
  /**
   * The identity type. Possible values include: 'SystemAssigned', 'UserAssigned', 'SystemAssigned,
   * UserAssigned', 'None'
   */
  type?: ResourceIdentityType;
  /**
   * The list of user identities associated with the resource. The user identity
   * dictionary key references will be ARM resource ids in the form:
   * '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/
   * providers/Microsoft.ManagedIdentity/userAssignedIdentities/{identityName}'.
   */
  userAssignedIdentities?: { [propertyName: string]: UserIdentityProperties };
}

/**
 * The properties of the export pipeline target.
 */
export interface ExportPipelineTargetProperties {
  /**
   * The type of target for the export pipeline.
   */
  type?: string;
  /**
   * The target uri of the export pipeline.
   * When 'AzureStorageBlob': "https://accountName.blob.core.windows.net/containerName/blobName"
   * When 'AzureStorageBlobContainer':  "https://accountName.blob.core.windows.net/containerName"
   */
  uri?: string;
  /**
   * They key vault secret uri to obtain the target storage SAS token.
   */
  keyVaultUri: string;
}

/**
 * The resource model definition for a ARM proxy resource. It will have everything other than
 * required location and tags.
 */
export interface ProxyResource extends BaseResource {
  /**
   * The resource ID.
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly id?: string;
  /**
   * The name of the resource.
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly name?: string;
  /**
   * The type of the resource.
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly type?: string;
}

/**
 * An object that represents an export pipeline for a container registry.
 */
export interface ExportPipeline extends ProxyResource {
  /**
   * The identity of the export pipeline.
   */
  identity?: IdentityProperties;
  /**
   * The target properties of the export pipeline.
   */
  target: ExportPipelineTargetProperties;
  /**
   * The list of all options configured for the pipeline.
   */
  options?: PipelineOptions[];
  /**
   * The provisioning state of the pipeline at the time the operation was called. Possible values
   * include: 'Creating', 'Updating', 'Deleting', 'Succeeded', 'Failed', 'Canceled'
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly provisioningState?: ProvisioningState;
}

/**
 * An interface representing ImportSourceCredentials.
 */
export interface ImportSourceCredentials {
  /**
   * The username to authenticate with the source registry.
   */
  username?: string;
  /**
   * The password used to authenticate with the source registry.
   */
  password: string;
}

/**
 * An interface representing ImportSource.
 */
export interface ImportSource {
  /**
   * The resource identifier of the source Azure Container Registry.
   */
  resourceId?: string;
  /**
   * The address of the source registry (e.g. 'mcr.microsoft.com').
   */
  registryUri?: string;
  /**
   * Credentials used when importing from a registry uri.
   */
  credentials?: ImportSourceCredentials;
  /**
   * Repository name of the source image.
   * Specify an image by repository ('hello-world'). This will use the 'latest' tag.
   * Specify an image by tag ('hello-world:latest').
   * Specify an image by sha256-based manifest digest ('hello-world@sha256:abc123').
   */
  sourceImage: string;
}

/**
 * An interface representing ImportImageParameters.
 */
export interface ImportImageParameters {
  /**
   * The source of the image.
   */
  source: ImportSource;
  /**
   * List of strings of the form repo[:tag]. When tag is omitted the source will be used (or
   * 'latest' if source tag is also omitted).
   */
  targetTags?: string[];
  /**
   * List of strings of repository names to do a manifest only copy. No tag will be created.
   */
  untaggedTargetRepositories?: string[];
  /**
   * When Force, any existing target tags will be overwritten. When NoForce, any existing target
   * tags will fail the operation before any copying begins. Possible values include: 'NoForce',
   * 'Force'. Default value: 'NoForce'.
   */
  mode?: ImportMode;
}

/**
 * The properties of the import pipeline source.
 */
export interface ImportPipelineSourceProperties {
  /**
   * The type of source for the import pipeline. Possible values include:
   * 'AzureStorageBlobContainer'. Default value: 'AzureStorageBlobContainer'.
   */
  type?: PipelineSourceType;
  /**
   * The source uri of the import pipeline.
   * When 'AzureStorageBlob': "https://accountName.blob.core.windows.net/containerName/blobName"
   * When 'AzureStorageBlobContainer': "https://accountName.blob.core.windows.net/containerName"
   */
  uri?: string;
  /**
   * They key vault secret uri to obtain the source storage SAS token.
   */
  keyVaultUri: string;
}

/**
 * An interface representing PipelineSourceTriggerProperties.
 */
export interface PipelineSourceTriggerProperties {
  /**
   * The current status of the source trigger. Possible values include: 'Enabled', 'Disabled'.
   * Default value: 'Enabled'.
   */
  status: TriggerStatus;
}

/**
 * An interface representing PipelineTriggerProperties.
 */
export interface PipelineTriggerProperties {
  /**
   * The source trigger properties of the pipeline.
   */
  sourceTrigger?: PipelineSourceTriggerProperties;
}

/**
 * An object that represents an import pipeline for a container registry.
 */
export interface ImportPipeline extends ProxyResource {
  /**
   * The identity of the import pipeline.
   */
  identity?: IdentityProperties;
  /**
   * The source properties of the import pipeline.
   */
  source: ImportPipelineSourceProperties;
  /**
   * The properties that describe the trigger of the import pipeline.
   */
  trigger?: PipelineTriggerProperties;
  /**
   * The list of all options configured for the pipeline.
   */
  options?: PipelineOptions[];
  /**
   * The provisioning state of the pipeline at the time the operation was called. Possible values
   * include: 'Creating', 'Updating', 'Deleting', 'Succeeded', 'Failed', 'Canceled'
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly provisioningState?: ProvisioningState;
}

/**
 * A request to check whether a container registry name is available.
 */
export interface RegistryNameCheckRequest {
  /**
   * The name of the container registry.
   */
  name: string;
}

/**
 * The result of a request to check the availability of a container registry name.
 */
export interface RegistryNameStatus {
  /**
   * The value that indicates whether the name is available.
   */
  nameAvailable?: boolean;
  /**
   * If any, the reason that the name is not available.
   */
  reason?: string;
  /**
   * If any, the error message that provides more detail for the reason that the name is not
   * available.
   */
  message?: string;
}

/**
 * The display information for a container registry operation.
 */
export interface OperationDisplayDefinition {
  /**
   * The resource provider name: Microsoft.ContainerRegistry.
   */
  provider?: string;
  /**
   * The resource on which the operation is performed.
   */
  resource?: string;
  /**
   * The operation that users can perform.
   */
  operation?: string;
  /**
   * The description for the operation.
   */
  description?: string;
}

/**
 * The definition of Azure Monitoring metric.
 */
export interface OperationMetricSpecificationDefinition {
  /**
   * Metric name.
   */
  name?: string;
  /**
   * Metric display name.
   */
  displayName?: string;
  /**
   * Metric description.
   */
  displayDescription?: string;
  /**
   * Metric unit.
   */
  unit?: string;
  /**
   * Metric aggregation type.
   */
  aggregationType?: string;
  /**
   * Internal metric name.
   */
  internalMetricName?: string;
}

/**
 * The definition of Azure Monitoring list.
 */
export interface OperationServiceSpecificationDefinition {
  /**
   * A list of Azure Monitoring metrics definition.
   */
  metricSpecifications?: OperationMetricSpecificationDefinition[];
}

/**
 * The definition of a container registry operation.
 */
export interface OperationDefinition {
  /**
   * The origin information of the container registry operation.
   */
  origin?: string;
  /**
   * Operation name: {provider}/{resource}/{operation}.
   */
  name?: string;
  /**
   * The display information for the container registry operation.
   */
  display?: OperationDisplayDefinition;
  /**
   * The definition of Azure Monitoring service.
   */
  serviceSpecification?: OperationServiceSpecificationDefinition;
}

/**
 * An interface representing PipelineRunSourceProperties.
 */
export interface PipelineRunSourceProperties {
  /**
   * The type of the source. Possible values include: 'AzureStorageBlob'. Default value:
   * 'AzureStorageBlob'.
   */
  type?: PipelineRunSourceType;
  /**
   * The name of the source.
   */
  name?: string;
}

/**
 * An interface representing PipelineRunTargetProperties.
 */
export interface PipelineRunTargetProperties {
  /**
   * The type of the target. Possible values include: 'AzureStorageBlob'. Default value:
   * 'AzureStorageBlob'.
   */
  type?: PipelineRunTargetType;
  /**
   * The name of the target.
   */
  name?: string;
}

/**
 * The request properties provided for a pipeline run.
 */
export interface PipelineRunRequest {
  /**
   * The resource ID of the pipeline to run.
   */
  pipelineResourceId?: string;
  /**
   * List of source artifacts to be transferred by the pipeline.
   * Specify an image by repository ('hello-world'). This will use the 'latest' tag.
   * Specify an image by tag ('hello-world:latest').
   * Specify an image by sha256-based manifest digest ('hello-world@sha256:abc123').
   */
  artifacts?: string[];
  /**
   * The source properties of the pipeline run.
   */
  source?: PipelineRunSourceProperties;
  /**
   * The target properties of the pipeline run.
   */
  target?: PipelineRunTargetProperties;
  /**
   * The digest of the tar used to transfer the artifacts.
   */
  catalogDigest?: string;
}

/**
 * An interface representing ProgressProperties.
 */
export interface ProgressProperties {
  /**
   * The percentage complete of the copy operation.
   */
  percentage?: string;
}

/**
 * An interface representing PipelineSourceTriggerDescriptor.
 */
export interface PipelineSourceTriggerDescriptor {
  /**
   * The timestamp when the source update happened.
   */
  timestamp?: Date;
}

/**
 * An interface representing PipelineTriggerDescriptor.
 */
export interface PipelineTriggerDescriptor {
  /**
   * The source trigger that caused the pipeline run.
   */
  sourceTrigger?: PipelineSourceTriggerDescriptor;
}

/**
 * The response properties returned for a pipeline run.
 */
export interface PipelineRunResponse {
  /**
   * The current status of the pipeline run.
   */
  status?: string;
  /**
   * The artifacts imported in the pipeline run.
   */
  importedArtifacts?: string[];
  /**
   * The current progress of the copy operation.
   */
  progress?: ProgressProperties;
  /**
   * The time the pipeline run started.
   */
  startTime?: Date;
  /**
   * The time the pipeline run finished.
   */
  finishTime?: Date;
  /**
   * The source of the pipeline run.
   */
  source?: ImportPipelineSourceProperties;
  /**
   * The target of the pipeline run.
   */
  target?: ExportPipelineTargetProperties;
  /**
   * The digest of the tar used to transfer the artifacts.
   */
  catalogDigest?: string;
  /**
   * The trigger that caused the pipeline run.
   */
  trigger?: PipelineTriggerDescriptor;
  /**
   * The detailed error message for the pipeline run in the case of failure.
   */
  pipelineRunErrorMessage?: string;
}

/**
 * An object that represents a pipeline run for a container registry.
 */
export interface PipelineRun extends ProxyResource {
  /**
   * The provisioning state of a pipeline run. Possible values include: 'Creating', 'Updating',
   * 'Deleting', 'Succeeded', 'Failed', 'Canceled'
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly provisioningState?: ProvisioningState;
  /**
   * The request parameters for a pipeline run.
   */
  request?: PipelineRunRequest;
  /**
   * The response of a pipeline run.
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly response?: PipelineRunResponse;
  /**
   * How the pipeline run should be forced to recreate even if the pipeline run configuration has
   * not changed.
   */
  forceUpdateTag?: string;
}

/**
 * The Private Endpoint resource.
 */
export interface PrivateEndpoint {
  /**
   * This is private endpoint resource created with Microsoft.Network resource provider.
   */
  id?: string;
}

/**
 * The state of a private link service connection.
 */
export interface PrivateLinkServiceConnectionState {
  /**
   * The private link service connection status. Possible values include: 'Approved', 'Pending',
   * 'Rejected', 'Disconnected'
   */
  status?: ConnectionStatus;
  /**
   * The description for connection status. For example if connection is rejected it can indicate
   * reason for rejection.
   */
  description?: string;
  /**
   * A message indicating if changes on the service provider require any updates on the consumer.
   * Possible values include: 'None', 'Recreate'
   */
  actionsRequired?: ActionsRequired;
}

/**
 * An object that represents a private endpoint connection for a container registry.
 */
export interface PrivateEndpointConnection extends ProxyResource {
  /**
   * The resource of private endpoint.
   */
  privateEndpoint?: PrivateEndpoint;
  /**
   * A collection of information about the state of the connection between service consumer and
   * provider.
   */
  privateLinkServiceConnectionState?: PrivateLinkServiceConnectionState;
  /**
   * The provisioning state of private endpoint connection resource. Possible values include:
   * 'Creating', 'Updating', 'Deleting', 'Succeeded', 'Failed', 'Canceled'
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly provisioningState?: ProvisioningState;
}

/**
 * The SKU of a container registry.
 */
export interface Sku {
  /**
   * The SKU name of the container registry. Required for registry creation. Possible values
   * include: 'Classic', 'Basic', 'Standard', 'Premium'
   */
  name: SkuName;
  /**
   * The SKU tier based on the SKU name. Possible values include: 'Classic', 'Basic', 'Standard',
   * 'Premium'
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly tier?: SkuTier;
}

/**
 * The status of an Azure resource at the time the operation was called.
 */
export interface Status {
  /**
   * The short label for the status.
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly displayStatus?: string;
  /**
   * The detailed message for the status, including alerts and error messages.
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly message?: string;
  /**
   * The timestamp when the status was changed to the current value.
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly timestamp?: Date;
}

/**
 * The properties of a storage account for a container registry. Only applicable to Classic SKU.
 */
export interface StorageAccountProperties {
  /**
   * The resource ID of the storage account.
   */
  id: string;
}

/**
 * Virtual network rule.
 */
export interface VirtualNetworkRule {
  /**
   * The action of virtual network rule. Possible values include: 'Allow'. Default value: 'Allow'.
   */
  action?: Action;
  /**
   * Resource ID of a subnet, for example:
   * /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Network/virtualNetworks/{vnetName}/subnets/{subnetName}.
   */
  virtualNetworkResourceId: string;
}

/**
 * IP rule with specific IP or IP range in CIDR format.
 */
export interface IPRule {
  /**
   * The action of IP ACL rule. Possible values include: 'Allow'. Default value: 'Allow'.
   */
  action?: Action;
  /**
   * Specifies the IP or IP range in CIDR format. Only IPV4 address is allowed.
   */
  iPAddressOrRange: string;
}

/**
 * The network rule set for a container registry.
 */
export interface NetworkRuleSet {
  /**
   * The default action of allow or deny when no other rules match. Possible values include:
   * 'Allow', 'Deny'. Default value: 'Allow'.
   */
  defaultAction: DefaultAction;
  /**
   * The virtual network rules.
   */
  virtualNetworkRules?: VirtualNetworkRule[];
  /**
   * The IP ACL rules.
   */
  ipRules?: IPRule[];
}

/**
 * The quarantine policy for a container registry.
 */
export interface QuarantinePolicy {
  /**
   * The value that indicates whether the policy is enabled or not. Possible values include:
   * 'enabled', 'disabled'. Default value: 'disabled'.
   */
  status?: PolicyStatus;
}

/**
 * The content trust policy for a container registry.
 */
export interface TrustPolicy {
  /**
   * The type of trust policy. Possible values include: 'Notary'. Default value: 'Notary'.
   */
  type?: TrustPolicyType;
  /**
   * The value that indicates whether the policy is enabled or not. Possible values include:
   * 'enabled', 'disabled'. Default value: 'disabled'.
   */
  status?: PolicyStatus;
}

/**
 * The retention policy for a container registry.
 */
export interface RetentionPolicy {
  /**
   * The number of days to retain an untagged manifest after which it gets purged. Default value:
   * 7.
   */
  days?: number;
  /**
   * The timestamp when the policy was last updated.
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly lastUpdatedTime?: Date;
  /**
   * The value that indicates whether the policy is enabled or not. Possible values include:
   * 'enabled', 'disabled'. Default value: 'disabled'.
   */
  status?: PolicyStatus;
}

/**
 * The policies for a container registry.
 */
export interface Policies {
  /**
   * The quarantine policy for a container registry.
   */
  quarantinePolicy?: QuarantinePolicy;
  /**
   * The content trust policy for a container registry.
   */
  trustPolicy?: TrustPolicy;
  /**
   * The retention policy for a container registry.
   */
  retentionPolicy?: RetentionPolicy;
}

/**
 * An interface representing KeyVaultProperties.
 */
export interface KeyVaultProperties {
  /**
   * Key vault uri to access the encryption key.
   */
  keyIdentifier?: string;
  /**
   * The fully qualified key identifier that includes the version of the key that is actually used
   * for encryption.
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly versionedKeyIdentifier?: string;
  /**
   * The client id of the identity which will be used to access key vault.
   */
  identity?: string;
}

/**
 * An interface representing EncryptionProperty.
 */
export interface EncryptionProperty {
  /**
   * Indicates whether or not the encryption is enabled for container registry. Possible values
   * include: 'enabled', 'disabled'
   */
  status?: EncryptionStatus;
  /**
   * Key vault properties.
   */
  keyVaultProperties?: KeyVaultProperties;
}

/**
 * An Azure resource.
 */
export interface Resource extends BaseResource {
  /**
   * The resource ID.
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly id?: string;
  /**
   * The name of the resource.
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly name?: string;
  /**
   * The type of the resource.
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly type?: string;
  /**
   * The location of the resource. This cannot be changed after the resource is created.
   */
  location: string;
  /**
   * The tags of the resource.
   */
  tags?: { [propertyName: string]: string };
}

/**
 * An object that represents a container registry.
 */
export interface Registry extends Resource {
  /**
   * The SKU of the container registry.
   */
  sku: Sku;
  /**
   * The identity of the container registry.
   */
  identity?: IdentityProperties;
  /**
   * The URL that can be used to log into the container registry.
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly loginServer?: string;
  /**
   * The creation date of the container registry in ISO8601 format.
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly creationDate?: Date;
  /**
   * The provisioning state of the container registry at the time the operation was called.
   * Possible values include: 'Creating', 'Updating', 'Deleting', 'Succeeded', 'Failed', 'Canceled'
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly provisioningState?: ProvisioningState;
  /**
   * The status of the container registry at the time the operation was called.
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly status?: Status;
  /**
   * The value that indicates whether the admin user is enabled. Default value: false.
   */
  adminUserEnabled?: boolean;
  /**
   * The properties of the storage account for the container registry. Only applicable to Classic
   * SKU.
   */
  storageAccount?: StorageAccountProperties;
  /**
   * The network rule set for a container registry.
   */
  networkRuleSet?: NetworkRuleSet;
  /**
   * The policies for a container registry.
   */
  policies?: Policies;
  /**
   * The encryption settings of container registry.
   */
  encryption?: EncryptionProperty;
  /**
   * Enable a single data endpoint per region for serving data.
   */
  dataEndpointEnabled?: boolean;
  /**
   * List of host names that will serve data when dataEndpointEnabled is true.
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly dataEndpointHostNames?: string[];
  /**
   * List of private endpoint connections for a container registry.
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly privateEndpointConnections?: PrivateEndpointConnection[];
  /**
   * Whether or not public network access is allowed for the container registry. Possible values
   * include: 'Enabled', 'Disabled'. Default value: 'Enabled'.
   */
  publicNetworkAccess?: PublicNetworkAccess;
}

/**
 * The parameters for updating a container registry.
 */
export interface RegistryUpdateParameters {
  /**
   * The tags for the container registry.
   */
  tags?: { [propertyName: string]: string };
  /**
   * The SKU of the container registry.
   */
  sku?: Sku;
  /**
   * The identity of the container registry.
   */
  identity?: IdentityProperties;
  /**
   * The value that indicates whether the admin user is enabled.
   */
  adminUserEnabled?: boolean;
  /**
   * The network rule set for a container registry.
   */
  networkRuleSet?: NetworkRuleSet;
  /**
   * The policies for a container registry.
   */
  policies?: Policies;
  /**
   * The encryption settings of container registry.
   */
  encryption?: EncryptionProperty;
  /**
   * Enable a single data endpoint per region for serving data.
   */
  dataEndpointEnabled?: boolean;
  /**
   * Whether or not public network access is allowed for the container registry. Possible values
   * include: 'Enabled', 'Disabled'
   */
  publicNetworkAccess?: PublicNetworkAccess;
}

/**
 * The login password for the container registry.
 */
export interface RegistryPassword {
  /**
   * The password name. Possible values include: 'password', 'password2'
   */
  name?: PasswordName;
  /**
   * The password value.
   */
  value?: string;
}

/**
 * The response from the ListCredentials operation.
 */
export interface RegistryListCredentialsResult {
  /**
   * The username for a container registry.
   */
  username?: string;
  /**
   * The list of passwords for a container registry.
   */
  passwords?: RegistryPassword[];
}

/**
 * The parameters used to regenerate the login credential.
 */
export interface RegenerateCredentialParameters {
  /**
   * Specifies name of the password which should be regenerated -- password or password2. Possible
   * values include: 'password', 'password2'
   */
  name: PasswordName;
}

/**
 * The quota usage for a container registry.
 */
export interface RegistryUsage {
  /**
   * The name of the usage.
   */
  name?: string;
  /**
   * The limit of the usage.
   */
  limit?: number;
  /**
   * The current value of the usage.
   */
  currentValue?: number;
  /**
   * The unit of measurement. Possible values include: 'Count', 'Bytes'
   */
  unit?: RegistryUsageUnit;
}

/**
 * The result of a request to get container registry quota usages.
 */
export interface RegistryUsageListResult {
  /**
   * The list of container registry quota usages.
   */
  value?: RegistryUsage[];
}

/**
 * A resource that supports private link capabilities.
 */
export interface PrivateLinkResource {
  /**
   * The resource type is private link resource.
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly type?: string;
  /**
   * The resource ID.
   */
  id?: string;
  /**
   * The name of the resource.
   */
  name?: string;
  /**
   * The private link resource group id.
   */
  groupId?: string;
  /**
   * The private link resource required member names.
   */
  requiredMembers?: string[];
  /**
   * The private link resource Private link DNS zone name.
   */
  requiredZoneNames?: string[];
}

/**
 * An object that represents a replication for a container registry.
 */
export interface Replication extends Resource {
  /**
   * The provisioning state of the replication at the time the operation was called. Possible
   * values include: 'Creating', 'Updating', 'Deleting', 'Succeeded', 'Failed', 'Canceled'
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly provisioningState?: ProvisioningState;
  /**
   * The status of the replication at the time the operation was called.
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly status?: Status;
  /**
   * Specifies whether the replication's regional endpoint is enabled. Requests will not be routed
   * to a replication whose regional endpoint is disabled, however its data will continue to be
   * synced with other replications. Default value: true.
   */
  regionEndpointEnabled?: boolean;
}

/**
 * The parameters for updating a replication.
 */
export interface ReplicationUpdateParameters {
  /**
   * The tags for the replication.
   */
  tags?: { [propertyName: string]: string };
  /**
   * Specifies whether the replication's regional endpoint is enabled. Requests will not be routed
   * to a replication whose regional endpoint is disabled, however its data will continue to be
   * synced with other replications.
   */
  regionEndpointEnabled?: boolean;
}

/**
 * An object that represents a webhook for a container registry.
 */
export interface Webhook extends Resource {
  /**
   * The status of the webhook at the time the operation was called. Possible values include:
   * 'enabled', 'disabled'
   */
  status?: WebhookStatus;
  /**
   * The scope of repositories where the event can be triggered. For example, 'foo:*' means events
   * for all tags under repository 'foo'. 'foo:bar' means events for 'foo:bar' only. 'foo' is
   * equivalent to 'foo:latest'. Empty means all events.
   */
  scope?: string;
  /**
   * The list of actions that trigger the webhook to post notifications.
   */
  actions: WebhookAction[];
  /**
   * The provisioning state of the webhook at the time the operation was called. Possible values
   * include: 'Creating', 'Updating', 'Deleting', 'Succeeded', 'Failed', 'Canceled'
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly provisioningState?: ProvisioningState;
}

/**
 * The parameters for creating a webhook.
 */
export interface WebhookCreateParameters {
  /**
   * The tags for the webhook.
   */
  tags?: { [propertyName: string]: string };
  /**
   * The location of the webhook. This cannot be changed after the resource is created.
   */
  location: string;
  /**
   * The service URI for the webhook to post notifications.
   */
  serviceUri: string;
  /**
   * Custom headers that will be added to the webhook notifications.
   */
  customHeaders?: { [propertyName: string]: string };
  /**
   * The status of the webhook at the time the operation was called. Possible values include:
   * 'enabled', 'disabled'
   */
  status?: WebhookStatus;
  /**
   * The scope of repositories where the event can be triggered. For example, 'foo:*' means events
   * for all tags under repository 'foo'. 'foo:bar' means events for 'foo:bar' only. 'foo' is
   * equivalent to 'foo:latest'. Empty means all events.
   */
  scope?: string;
  /**
   * The list of actions that trigger the webhook to post notifications.
   */
  actions: WebhookAction[];
}

/**
 * The parameters for updating a webhook.
 */
export interface WebhookUpdateParameters {
  /**
   * The tags for the webhook.
   */
  tags?: { [propertyName: string]: string };
  /**
   * The service URI for the webhook to post notifications.
   */
  serviceUri?: string;
  /**
   * Custom headers that will be added to the webhook notifications.
   */
  customHeaders?: { [propertyName: string]: string };
  /**
   * The status of the webhook at the time the operation was called. Possible values include:
   * 'enabled', 'disabled'
   */
  status?: WebhookStatus;
  /**
   * The scope of repositories where the event can be triggered. For example, 'foo:*' means events
   * for all tags under repository 'foo'. 'foo:bar' means events for 'foo:bar' only. 'foo' is
   * equivalent to 'foo:latest'. Empty means all events.
   */
  scope?: string;
  /**
   * The list of actions that trigger the webhook to post notifications.
   */
  actions?: WebhookAction[];
}

/**
 * The basic information of an event.
 */
export interface EventInfo {
  /**
   * The event ID.
   */
  id?: string;
}

/**
 * The configuration of service URI and custom headers for the webhook.
 */
export interface CallbackConfig {
  /**
   * The service URI for the webhook to post notifications.
   */
  serviceUri: string;
  /**
   * Custom headers that will be added to the webhook notifications.
   */
  customHeaders?: { [propertyName: string]: string };
}

/**
 * The target of the event.
 */
export interface Target {
  /**
   * The MIME type of the referenced object.
   */
  mediaType?: string;
  /**
   * The number of bytes of the content. Same as Length field.
   */
  size?: number;
  /**
   * The digest of the content, as defined by the Registry V2 HTTP API Specification.
   */
  digest?: string;
  /**
   * The number of bytes of the content. Same as Size field.
   */
  length?: number;
  /**
   * The repository name.
   */
  repository?: string;
  /**
   * The direct URL to the content.
   */
  url?: string;
  /**
   * The tag name.
   */
  tag?: string;
  /**
   * The name of the artifact.
   */
  name?: string;
  /**
   * The version of the artifact.
   */
  version?: string;
}

/**
 * The request that generated the event.
 */
export interface Request {
  /**
   * The ID of the request that initiated the event.
   */
  id?: string;
  /**
   * The IP or hostname and possibly port of the client connection that initiated the event. This
   * is the RemoteAddr from the standard http request.
   */
  addr?: string;
  /**
   * The externally accessible hostname of the registry instance, as specified by the http host
   * header on incoming requests.
   */
  host?: string;
  /**
   * The request method that generated the event.
   */
  method?: string;
  /**
   * The user agent header of the request.
   */
  useragent?: string;
}

/**
 * The agent that initiated the event. For most situations, this could be from the authorization
 * context of the request.
 */
export interface Actor {
  /**
   * The subject or username associated with the request context that generated the event.
   */
  name?: string;
}

/**
 * The registry node that generated the event. Put differently, while the actor initiates the
 * event, the source generates it.
 */
export interface Source {
  /**
   * The IP or hostname and the port of the registry node that generated the event. Generally, this
   * will be resolved by os.Hostname() along with the running port.
   */
  addr?: string;
  /**
   * The running instance of an application. Changes after each restart.
   */
  instanceID?: string;
}

/**
 * The content of the event request message.
 */
export interface EventContent {
  /**
   * The event ID.
   */
  id?: string;
  /**
   * The time at which the event occurred.
   */
  timestamp?: Date;
  /**
   * The action that encompasses the provided event.
   */
  action?: string;
  /**
   * The target of the event.
   */
  target?: Target;
  /**
   * The request that generated the event.
   */
  request?: Request;
  /**
   * The agent that initiated the event. For most situations, this could be from the authorization
   * context of the request.
   */
  actor?: Actor;
  /**
   * The registry node that generated the event. Put differently, while the actor initiates the
   * event, the source generates it.
   */
  source?: Source;
}

/**
 * The event request message sent to the service URI.
 */
export interface EventRequestMessage {
  /**
   * The content of the event request message.
   */
  content?: EventContent;
  /**
   * The headers of the event request message.
   */
  headers?: { [propertyName: string]: string };
  /**
   * The HTTP method used to send the event request message.
   */
  method?: string;
  /**
   * The URI used to send the event request message.
   */
  requestUri?: string;
  /**
   * The HTTP message version.
   */
  version?: string;
}

/**
 * The event response message received from the service URI.
 */
export interface EventResponseMessage {
  /**
   * The content of the event response message.
   */
  content?: string;
  /**
   * The headers of the event response message.
   */
  headers?: { [propertyName: string]: string };
  /**
   * The reason phrase of the event response message.
   */
  reasonPhrase?: string;
  /**
   * The status code of the event response message.
   */
  statusCode?: string;
  /**
   * The HTTP message version.
   */
  version?: string;
}

/**
 * The event for a webhook.
 */
export interface Event extends EventInfo {
  /**
   * The event request message sent to the service URI.
   */
  eventRequestMessage?: EventRequestMessage;
  /**
   * The event response message received from the service URI.
   */
  eventResponseMessage?: EventResponseMessage;
}

/**
 * The agentpool that has the ARM resource and properties.
 * The agentpool will have all information to create an agent pool.
 */
export interface AgentPool extends Resource {
  /**
   * The count of agent machine
   */
  count?: number;
  /**
   * The Tier of agent machine
   */
  tier?: string;
  /**
   * The OS of agent machine. Possible values include: 'Windows', 'Linux'
   */
  os?: OS;
  /**
   * The Virtual Network Subnet Resource Id of the agent machine
   */
  virtualNetworkSubnetResourceId?: string;
  /**
   * The provisioning state of this agent pool. Possible values include: 'Creating', 'Updating',
   * 'Deleting', 'Succeeded', 'Failed', 'Canceled'
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly provisioningState?: ProvisioningState;
}

/**
 * The parameters for updating an agent pool.
 */
export interface AgentPoolUpdateParameters {
  /**
   * The count of agent machine
   */
  count?: number;
  /**
   * The ARM resource tags.
   */
  tags?: { [propertyName: string]: string };
}

/**
 * The QueueStatus of Agent Pool
 */
export interface AgentPoolQueueStatus {
  /**
   * The number of pending runs in the queue
   */
  count?: number;
}

/**
 * Contains the possible cases for RunRequest.
 */
export type RunRequestUnion = RunRequest | DockerBuildRequest | FileTaskRunRequest | TaskRunRequest | EncodedTaskRunRequest;

/**
 * The request parameters for scheduling a run.
 */
export interface RunRequest {
  /**
   * Polymorphic Discriminator
   */
  type: "RunRequest";
  /**
   * The value that indicates whether archiving is enabled for the run or not. Default value:
   * false.
   */
  isArchiveEnabled?: boolean;
  /**
   * The dedicated agent pool for the run.
   */
  agentPoolName?: string;
}

/**
 * Properties for a registry image.
 */
export interface ImageDescriptor {
  /**
   * The registry login server.
   */
  registry?: string;
  /**
   * The repository name.
   */
  repository?: string;
  /**
   * The tag name.
   */
  tag?: string;
  /**
   * The sha256-based digest of the image manifest.
   */
  digest?: string;
}

/**
 * The image update trigger that caused a build.
 */
export interface ImageUpdateTrigger {
  /**
   * The unique ID of the trigger.
   */
  id?: string;
  /**
   * The timestamp when the image update happened.
   */
  timestamp?: Date;
  /**
   * The list of image updates that caused the build.
   */
  images?: ImageDescriptor[];
}

/**
 * The source trigger that caused a run.
 */
export interface SourceTriggerDescriptor {
  /**
   * The unique ID of the trigger.
   */
  id?: string;
  /**
   * The event type of the trigger.
   */
  eventType?: string;
  /**
   * The unique ID that identifies a commit.
   */
  commitId?: string;
  /**
   * The unique ID that identifies pull request.
   */
  pullRequestId?: string;
  /**
   * The repository URL.
   */
  repositoryUrl?: string;
  /**
   * The branch name in the repository.
   */
  branchName?: string;
  /**
   * The source control provider type.
   */
  providerType?: string;
}

/**
 * An interface representing TimerTriggerDescriptor.
 */
export interface TimerTriggerDescriptor {
  /**
   * The timer trigger name that caused the run.
   */
  timerTriggerName?: string;
  /**
   * The occurrence that triggered the run.
   */
  scheduleOccurrence?: string;
}

/**
 * The platform properties against which the run has to happen.
 */
export interface PlatformProperties {
  /**
   * The operating system type required for the run. Possible values include: 'Windows', 'Linux'
   */
  os: OS;
  /**
   * The OS architecture. Possible values include: 'amd64', 'x86', '386', 'arm', 'arm64'
   */
  architecture?: Architecture;
  /**
   * Variant of the CPU. Possible values include: 'v6', 'v7', 'v8'
   */
  variant?: Variant;
}

/**
 * The properties that determine the run agent configuration.
 */
export interface AgentProperties {
  /**
   * The CPU configuration in terms of number of cores required for the run.
   */
  cpu?: number;
}

/**
 * Run resource properties
 */
export interface Run extends ProxyResource {
  /**
   * The unique identifier for the run.
   */
  runId?: string;
  /**
   * The current status of the run. Possible values include: 'Queued', 'Started', 'Running',
   * 'Succeeded', 'Failed', 'Canceled', 'Error', 'Timeout'
   */
  status?: RunStatus;
  /**
   * The last updated time for the run.
   */
  lastUpdatedTime?: Date;
  /**
   * The type of run. Possible values include: 'QuickBuild', 'QuickRun', 'AutoBuild', 'AutoRun'
   */
  runType?: RunType;
  /**
   * The dedicated agent pool for the run.
   */
  agentPoolName?: string;
  /**
   * The time the run was scheduled.
   */
  createTime?: Date;
  /**
   * The time the run started.
   */
  startTime?: Date;
  /**
   * The time the run finished.
   */
  finishTime?: Date;
  /**
   * The list of all images that were generated from the run. This is applicable if the run
   * generates base image dependencies.
   */
  outputImages?: ImageDescriptor[];
  /**
   * The task against which run was scheduled.
   */
  task?: string;
  /**
   * The image update trigger that caused the run. This is applicable if the task has base image
   * trigger configured.
   */
  imageUpdateTrigger?: ImageUpdateTrigger;
  /**
   * The source trigger that caused the run.
   */
  sourceTrigger?: SourceTriggerDescriptor;
  /**
   * The timer trigger that caused the run.
   */
  timerTrigger?: TimerTriggerDescriptor;
  /**
   * The platform properties against which the run will happen.
   */
  platform?: PlatformProperties;
  /**
   * The machine configuration of the run agent.
   */
  agentConfiguration?: AgentProperties;
  /**
   * The scope of the credentials that were used to login to the source registry during this run.
   */
  sourceRegistryAuth?: string;
  /**
   * The list of custom registries that were logged in during this run.
   */
  customRegistries?: string[];
  /**
   * The error message received from backend systems after the run is scheduled.
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly runErrorMessage?: string;
  /**
   * The update trigger token passed for the Run.
   */
  updateTriggerToken?: string;
  /**
   * The provisioning state of a run. Possible values include: 'Creating', 'Updating', 'Deleting',
   * 'Succeeded', 'Failed', 'Canceled'
   */
  provisioningState?: ProvisioningState;
  /**
   * The value that indicates whether archiving is enabled or not. Default value: false.
   */
  isArchiveEnabled?: boolean;
}

/**
 * The properties of a response to source upload request.
 */
export interface SourceUploadDefinition {
  /**
   * The URL where the client can upload the source.
   */
  uploadUrl?: string;
  /**
   * The relative path to the source. This is used to submit the subsequent queue build request.
   */
  relativePath?: string;
}

/**
 * Properties that are enabled for Odata querying on runs.
 */
export interface RunFilter {
  /**
   * The unique identifier for the run.
   */
  runId?: string;
  /**
   * The type of run. Possible values include: 'QuickBuild', 'QuickRun', 'AutoBuild', 'AutoRun'
   */
  runType?: RunType;
  /**
   * The current status of the run. Possible values include: 'Queued', 'Started', 'Running',
   * 'Succeeded', 'Failed', 'Canceled', 'Error', 'Timeout'
   */
  status?: RunStatus;
  /**
   * The create time for a run.
   */
  createTime?: Date;
  /**
   * The time the run finished.
   */
  finishTime?: Date;
  /**
   * The list of comma-separated image manifests that were generated from the run. This is
   * applicable if the run is of
   * build type.
   */
  outputImageManifests?: string;
  /**
   * The value that indicates whether archiving is enabled or not.
   */
  isArchiveEnabled?: boolean;
  /**
   * The name of the task that the run corresponds to.
   */
  taskName?: string;
  /**
   * The name of the agent pool that the run corresponds to.
   */
  agentPoolName?: string;
}

/**
 * The set of run properties that can be updated.
 */
export interface RunUpdateParameters {
  /**
   * The value that indicates whether archiving is enabled or not.
   */
  isArchiveEnabled?: boolean;
}

/**
 * The result of get log link operation.
 */
export interface RunGetLogResult {
  /**
   * The link to logs for a run on a azure container registry.
   */
  logLink?: string;
}

/**
 * The task run that has the ARM resource and properties.
 * The task run will have the information of request and result of a run.
 */
export interface TaskRun extends Resource {
  /**
   * Identity for the resource.
   */
  identity?: IdentityProperties;
  /**
   * The provisioning state of this task run. Possible values include: 'Creating', 'Updating',
   * 'Deleting', 'Succeeded', 'Failed', 'Canceled'
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly provisioningState?: ProvisioningState;
  /**
   * The request (parameters) for the run
   */
  runRequest?: RunRequestUnion;
  /**
   * The result of this task run
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly runResult?: Run;
  /**
   * How the run should be forced to rerun even if the run request configuration has not changed
   */
  forceUpdateTag?: string;
}

/**
 * The parameters for updating a task run.
 */
export interface TaskRunUpdateParameters {
  /**
   * Identity for the resource.
   */
  identity?: IdentityProperties;
  /**
   * The request (parameters) for the new run
   */
  runRequest?: RunRequestUnion;
  /**
   * How the run should be forced to rerun even if the run request configuration has not changed
   */
  forceUpdateTag?: string;
  /**
   * The ARM resource tags.
   */
  tags?: { [propertyName: string]: string };
}

/**
 * Properties that describe a base image dependency.
 */
export interface BaseImageDependency {
  /**
   * The type of the base image dependency. Possible values include: 'BuildTime', 'RunTime'
   */
  type?: BaseImageDependencyType;
  /**
   * The registry login server.
   */
  registry?: string;
  /**
   * The repository name.
   */
  repository?: string;
  /**
   * The tag name.
   */
  tag?: string;
  /**
   * The sha256-based digest of the image manifest.
   */
  digest?: string;
}

/**
 * Contains the possible cases for TaskStepProperties.
 */
export type TaskStepPropertiesUnion = TaskStepProperties | DockerBuildStep | FileTaskStep | EncodedTaskStep;

/**
 * Base properties for any task step.
 */
export interface TaskStepProperties {
  /**
   * Polymorphic Discriminator
   */
  type: "TaskStepProperties";
  /**
   * List of base image dependencies for a step.
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly baseImageDependencies?: BaseImageDependency[];
  /**
   * The URL(absolute or relative) of the source context for the task step.
   */
  contextPath?: string;
  /**
   * The token (git PAT or SAS token of storage account blob) associated with the context for a
   * step.
   */
  contextAccessToken?: string;
}

/**
 * The properties of a timer trigger.
 */
export interface TimerTrigger {
  /**
   * The CRON expression for the task schedule
   */
  schedule: string;
  /**
   * The current status of trigger. Possible values include: 'Enabled', 'Disabled'. Default value:
   * 'Enabled'.
   */
  status?: TriggerStatus;
  /**
   * The name of the trigger.
   */
  name: string;
}

/**
 * The authorization properties for accessing the source code repository.
 */
export interface AuthInfo {
  /**
   * The type of Auth token. Possible values include: 'PAT', 'OAuth'
   */
  tokenType: TokenType;
  /**
   * The access token used to access the source control provider.
   */
  token: string;
  /**
   * The refresh token used to refresh the access token.
   */
  refreshToken?: string;
  /**
   * The scope of the access token.
   */
  scope?: string;
  /**
   * Time in seconds that the token remains valid
   */
  expiresIn?: number;
}

/**
 * The properties of the source code repository.
 */
export interface SourceProperties {
  /**
   * The type of source control service. Possible values include: 'Github',
   * 'VisualStudioTeamService'
   */
  sourceControlType: SourceControlType;
  /**
   * The full URL to the source code repository
   */
  repositoryUrl: string;
  /**
   * The branch name of the source code.
   */
  branch?: string;
  /**
   * The authorization properties for accessing the source code repository and to set up
   * webhooks for notifications.
   */
  sourceControlAuthProperties?: AuthInfo;
}

/**
 * The properties of a source based trigger.
 */
export interface SourceTrigger {
  /**
   * The properties that describes the source(code) for the task.
   */
  sourceRepository: SourceProperties;
  /**
   * The source event corresponding to the trigger.
   */
  sourceTriggerEvents: SourceTriggerEvent[];
  /**
   * The current status of trigger. Possible values include: 'Enabled', 'Disabled'. Default value:
   * 'Enabled'.
   */
  status?: TriggerStatus;
  /**
   * The name of the trigger.
   */
  name: string;
}

/**
 * The trigger based on base image dependency.
 */
export interface BaseImageTrigger {
  /**
   * The type of the auto trigger for base image dependency updates. Possible values include:
   * 'All', 'Runtime'
   */
  baseImageTriggerType: BaseImageTriggerType;
  /**
   * The endpoint URL for receiving update triggers.
   */
  updateTriggerEndpoint?: string;
  /**
   * Type of Payload body for Base image update triggers. Possible values include: 'Default',
   * 'Token'
   */
  updateTriggerPayloadType?: UpdateTriggerPayloadType;
  /**
   * The current status of trigger. Possible values include: 'Enabled', 'Disabled'. Default value:
   * 'Enabled'.
   */
  status?: TriggerStatus;
  /**
   * The name of the trigger.
   */
  name: string;
}

/**
 * The properties of a trigger.
 */
export interface TriggerProperties {
  /**
   * The collection of timer triggers.
   */
  timerTriggers?: TimerTrigger[];
  /**
   * The collection of triggers based on source code repository.
   */
  sourceTriggers?: SourceTrigger[];
  /**
   * The trigger based on base image dependencies.
   */
  baseImageTrigger?: BaseImageTrigger;
}

/**
 * Describes the credential parameters for accessing the source registry.
 */
export interface SourceRegistryCredentials {
  /**
   * The authentication mode which determines the source registry login scope. The credentials for
   * the source registry
   * will be generated using the given scope. These credentials will be used to login to
   * the source registry during the run. Possible values include: 'None', 'Default'
   */
  loginMode?: SourceRegistryLoginMode;
}

/**
 * Describes the properties of a secret object value.
 */
export interface SecretObject {
  /**
   * The value of the secret. The format of this value will be determined
   * based on the type of the secret object. If the type is Opaque, the value will be
   * used as is without any modification.
   */
  value?: string;
  /**
   * The type of the secret object which determines how the value of the secret object has to be
   * interpreted. Possible values include: 'Opaque', 'Vaultsecret'
   */
  type?: SecretObjectType;
}

/**
 * Describes the credentials that will be used to access a custom registry during a run.
 */
export interface CustomRegistryCredentials {
  /**
   * The username for logging into the custom registry.
   */
  userName?: SecretObject;
  /**
   * The password for logging into the custom registry. The password is a secret
   * object that allows multiple ways of providing the value for it.
   */
  password?: SecretObject;
  /**
   * Indicates the managed identity assigned to the custom credential. If a user-assigned identity
   * this value is the Client ID. If a system-assigned identity, the value will be `system`. In
   * the case of a system-assigned identity, the Client ID will be determined by the runner. This
   * identity may be used to authenticate to key vault to retrieve credentials or it may be the
   * only
   * source of authentication used for accessing the registry.
   */
  identity?: string;
}

/**
 * The parameters that describes a set of credentials that will be used when a run is invoked.
 */
export interface Credentials {
  /**
   * Describes the credential parameters for accessing the source registry.
   */
  sourceRegistry?: SourceRegistryCredentials;
  /**
   * Describes the credential parameters for accessing other custom registries. The key
   * for the dictionary item will be the registry login server (myregistry.azurecr.io) and
   * the value of the item will be the registry credentials for accessing the registry.
   */
  customRegistries?: { [propertyName: string]: CustomRegistryCredentials };
}

/**
 * The task that has the ARM resource and task properties.
 * The task will have all information to schedule a run against it.
 */
export interface Task extends Resource {
  /**
   * Identity for the resource.
   */
  identity?: IdentityProperties;
  /**
   * The provisioning state of the task. Possible values include: 'Creating', 'Updating',
   * 'Deleting', 'Succeeded', 'Failed', 'Canceled'
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly provisioningState?: ProvisioningState;
  /**
   * The creation date of task.
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly creationDate?: Date;
  /**
   * The current status of task. Possible values include: 'Disabled', 'Enabled'
   */
  status?: TaskStatus;
  /**
   * The platform properties against which the run has to happen.
   */
  platform: PlatformProperties;
  /**
   * The machine configuration of the run agent.
   */
  agentConfiguration?: AgentProperties;
  /**
   * The dedicated agent pool for the task.
   */
  agentPoolName?: string;
  /**
   * Run timeout in seconds. Default value: 3600.
   */
  timeout?: number;
  /**
   * The properties of a task step.
   */
  step: TaskStepPropertiesUnion;
  /**
   * The properties that describe all triggers for the task.
   */
  trigger?: TriggerProperties;
  /**
   * The properties that describes a set of credentials that will be used when this run is invoked.
   */
  credentials?: Credentials;
}

/**
 * The properties for updating the platform configuration.
 */
export interface PlatformUpdateParameters {
  /**
   * The operating system type required for the run. Possible values include: 'Windows', 'Linux'
   */
  os?: OS;
  /**
   * The OS architecture. Possible values include: 'amd64', 'x86', '386', 'arm', 'arm64'
   */
  architecture?: Architecture;
  /**
   * Variant of the CPU. Possible values include: 'v6', 'v7', 'v8'
   */
  variant?: Variant;
}

/**
 * Contains the possible cases for TaskStepUpdateParameters.
 */
export type TaskStepUpdateParametersUnion = TaskStepUpdateParameters | DockerBuildStepUpdateParameters | FileTaskStepUpdateParameters | EncodedTaskStepUpdateParameters;

/**
 * Base properties for updating any task step.
 */
export interface TaskStepUpdateParameters {
  /**
   * Polymorphic Discriminator
   */
  type: "TaskStepUpdateParameters";
  /**
   * The URL(absolute or relative) of the source context for the task step.
   */
  contextPath?: string;
  /**
   * The token (git PAT or SAS token of storage account blob) associated with the context for a
   * step.
   */
  contextAccessToken?: string;
}

/**
 * The properties for updating a timer trigger.
 */
export interface TimerTriggerUpdateParameters {
  /**
   * The CRON expression for the task schedule
   */
  schedule?: string;
  /**
   * The current status of trigger. Possible values include: 'Enabled', 'Disabled'. Default value:
   * 'Enabled'.
   */
  status?: TriggerStatus;
  /**
   * The name of the trigger.
   */
  name: string;
}

/**
 * The authorization properties for accessing the source code repository.
 */
export interface AuthInfoUpdateParameters {
  /**
   * The type of Auth token. Possible values include: 'PAT', 'OAuth'
   */
  tokenType?: TokenType;
  /**
   * The access token used to access the source control provider.
   */
  token?: string;
  /**
   * The refresh token used to refresh the access token.
   */
  refreshToken?: string;
  /**
   * The scope of the access token.
   */
  scope?: string;
  /**
   * Time in seconds that the token remains valid
   */
  expiresIn?: number;
}

/**
 * The properties for updating the source code repository.
 */
export interface SourceUpdateParameters {
  /**
   * The type of source control service. Possible values include: 'Github',
   * 'VisualStudioTeamService'
   */
  sourceControlType?: SourceControlType;
  /**
   * The full URL to the source code repository
   */
  repositoryUrl?: string;
  /**
   * The branch name of the source code.
   */
  branch?: string;
  /**
   * The authorization properties for accessing the source code repository and to set up
   * webhooks for notifications.
   */
  sourceControlAuthProperties?: AuthInfoUpdateParameters;
}

/**
 * The properties for updating a source based trigger.
 */
export interface SourceTriggerUpdateParameters {
  /**
   * The properties that describes the source(code) for the task.
   */
  sourceRepository?: SourceUpdateParameters;
  /**
   * The source event corresponding to the trigger.
   */
  sourceTriggerEvents?: SourceTriggerEvent[];
  /**
   * The current status of trigger. Possible values include: 'Enabled', 'Disabled'. Default value:
   * 'Enabled'.
   */
  status?: TriggerStatus;
  /**
   * The name of the trigger.
   */
  name: string;
}

/**
 * The properties for updating base image dependency trigger.
 */
export interface BaseImageTriggerUpdateParameters {
  /**
   * The type of the auto trigger for base image dependency updates. Possible values include:
   * 'All', 'Runtime'
   */
  baseImageTriggerType?: BaseImageTriggerType;
  /**
   * The endpoint URL for receiving update triggers.
   */
  updateTriggerEndpoint?: string;
  /**
   * Type of Payload body for Base image update triggers. Possible values include: 'Default',
   * 'Token'
   */
  updateTriggerPayloadType?: UpdateTriggerPayloadType;
  /**
   * The current status of trigger. Possible values include: 'Enabled', 'Disabled'. Default value:
   * 'Enabled'.
   */
  status?: TriggerStatus;
  /**
   * The name of the trigger.
   */
  name: string;
}

/**
 * The properties for updating triggers.
 */
export interface TriggerUpdateParameters {
  /**
   * The collection of timer triggers.
   */
  timerTriggers?: TimerTriggerUpdateParameters[];
  /**
   * The collection of triggers based on source code repository.
   */
  sourceTriggers?: SourceTriggerUpdateParameters[];
  /**
   * The trigger based on base image dependencies.
   */
  baseImageTrigger?: BaseImageTriggerUpdateParameters;
}

/**
 * The parameters for updating a task.
 */
export interface TaskUpdateParameters {
  /**
   * Identity for the resource.
   */
  identity?: IdentityProperties;
  /**
   * The current status of task. Possible values include: 'Disabled', 'Enabled'
   */
  status?: TaskStatus;
  /**
   * The platform properties against which the run has to happen.
   */
  platform?: PlatformUpdateParameters;
  /**
   * The machine configuration of the run agent.
   */
  agentConfiguration?: AgentProperties;
  /**
   * The dedicated agent pool for the task.
   */
  agentPoolName?: string;
  /**
   * Run timeout in seconds.
   */
  timeout?: number;
  /**
   * The properties for updating a task step.
   */
  step?: TaskStepUpdateParametersUnion;
  /**
   * The properties for updating trigger properties.
   */
  trigger?: TriggerUpdateParameters;
  /**
   * The parameters that describes a set of credentials that will be used when this run is invoked.
   */
  credentials?: Credentials;
  /**
   * The ARM resource tags.
   */
  tags?: { [propertyName: string]: string };
}

/**
 * inner error.
 */
export interface InnerErrorDescription {
  /**
   * error code.
   */
  code: string;
  /**
   * error message.
   */
  message: string;
  /**
   * target of the particular error.
   */
  target?: string;
}

/**
 * An error response from the Azure Container Registry service.
 */
export interface ErrorResponseBody {
  /**
   * error code.
   */
  code: string;
  /**
   * error message.
   */
  message: string;
  /**
   * target of the particular error.
   */
  target?: string;
  /**
   * an array of additional nested error response info objects, as described by this contract.
   */
  details?: InnerErrorDescription;
}

/**
 * An error response from the Azure Container Registry service.
 */
export interface ErrorResponse {
  /**
   * Azure container registry build API error body.
   */
  error?: ErrorResponseBody;
}

/**
 * The properties of a run argument.
 */
export interface Argument {
  /**
   * The name of the argument.
   */
  name: string;
  /**
   * The value of the argument.
   */
  value: string;
  /**
   * Flag to indicate whether the argument represents a secret and want to be removed from build
   * logs. Default value: false.
   */
  isSecret?: boolean;
}

/**
 * The parameters for a docker quick build.
 */
export interface DockerBuildRequest {
  /**
   * Polymorphic Discriminator
   */
  type: "DockerBuildRequest";
  /**
   * The value that indicates whether archiving is enabled for the run or not. Default value:
   * false.
   */
  isArchiveEnabled?: boolean;
  /**
   * The dedicated agent pool for the run.
   */
  agentPoolName?: string;
  /**
   * The fully qualified image names including the repository and tag.
   */
  imageNames?: string[];
  /**
   * The value of this property indicates whether the image built should be pushed to the registry
   * or not. Default value: true.
   */
  isPushEnabled?: boolean;
  /**
   * The value of this property indicates whether the image cache is enabled or not. Default value:
   * false.
   */
  noCache?: boolean;
  /**
   * The Docker file path relative to the source location.
   */
  dockerFilePath: string;
  /**
   * The name of the target build stage for the docker build.
   */
  target?: string;
  /**
   * The collection of override arguments to be used when executing the run.
   */
  argumentsProperty?: Argument[];
  /**
   * Run timeout in seconds. Default value: 3600.
   */
  timeout?: number;
  /**
   * The platform properties against which the run has to happen.
   */
  platform: PlatformProperties;
  /**
   * The machine configuration of the run agent.
   */
  agentConfiguration?: AgentProperties;
  /**
   * The URL(absolute or relative) of the source context. It can be an URL to a tar or git
   * repository.
   * If it is relative URL, the relative path should be obtained from calling
   * listBuildSourceUploadUrl API.
   */
  sourceLocation?: string;
  /**
   * The properties that describes a set of credentials that will be used when this run is invoked.
   */
  credentials?: Credentials;
}

/**
 * The properties of a overridable value that can be passed to a task template.
 */
export interface SetValue {
  /**
   * The name of the overridable value.
   */
  name: string;
  /**
   * The overridable value.
   */
  value: string;
  /**
   * Flag to indicate whether the value represents a secret or not. Default value: false.
   */
  isSecret?: boolean;
}

/**
 * The request parameters for a scheduling run against a task file.
 */
export interface FileTaskRunRequest {
  /**
   * Polymorphic Discriminator
   */
  type: "FileTaskRunRequest";
  /**
   * The value that indicates whether archiving is enabled for the run or not. Default value:
   * false.
   */
  isArchiveEnabled?: boolean;
  /**
   * The dedicated agent pool for the run.
   */
  agentPoolName?: string;
  /**
   * The template/definition file path relative to the source.
   */
  taskFilePath: string;
  /**
   * The values/parameters file path relative to the source.
   */
  valuesFilePath?: string;
  /**
   * The collection of overridable values that can be passed when running a task.
   */
  values?: SetValue[];
  /**
   * Run timeout in seconds. Default value: 3600.
   */
  timeout?: number;
  /**
   * The platform properties against which the run has to happen.
   */
  platform: PlatformProperties;
  /**
   * The machine configuration of the run agent.
   */
  agentConfiguration?: AgentProperties;
  /**
   * The URL(absolute or relative) of the source context. It can be an URL to a tar or git
   * repository.
   * If it is relative URL, the relative path should be obtained from calling
   * listBuildSourceUploadUrl API.
   */
  sourceLocation?: string;
  /**
   * The properties that describes a set of credentials that will be used when this run is invoked.
   */
  credentials?: Credentials;
}

/**
 * An interface representing OverrideTaskStepProperties.
 */
export interface OverrideTaskStepProperties {
  /**
   * The source context against which run has to be queued.
   */
  contextPath?: string;
  /**
   * The file against which run has to be queued.
   */
  file?: string;
  /**
   * Gets or sets the collection of override arguments to be used when
   * executing a build step.
   */
  argumentsProperty?: Argument[];
  /**
   * The name of the target build stage for the docker build.
   */
  target?: string;
  /**
   * The collection of overridable values that can be passed when running a Task.
   */
  values?: SetValue[];
  /**
   * Base64 encoded update trigger token that will be attached with the base image trigger webhook.
   */
  updateTriggerToken?: string;
}

/**
 * The parameters for a task run request.
 */
export interface TaskRunRequest {
  /**
   * Polymorphic Discriminator
   */
  type: "TaskRunRequest";
  /**
   * The value that indicates whether archiving is enabled for the run or not. Default value:
   * false.
   */
  isArchiveEnabled?: boolean;
  /**
   * The dedicated agent pool for the run.
   */
  agentPoolName?: string;
  /**
   * The resource ID of task against which run has to be queued.
   */
  taskId: string;
  /**
   * Set of overridable parameters that can be passed when running a Task.
   */
  overrideTaskStepProperties?: OverrideTaskStepProperties;
}

/**
 * The parameters for a quick task run request.
 */
export interface EncodedTaskRunRequest {
  /**
   * Polymorphic Discriminator
   */
  type: "EncodedTaskRunRequest";
  /**
   * The value that indicates whether archiving is enabled for the run or not. Default value:
   * false.
   */
  isArchiveEnabled?: boolean;
  /**
   * The dedicated agent pool for the run.
   */
  agentPoolName?: string;
  /**
   * Base64 encoded value of the template/definition file content.
   */
  encodedTaskContent: string;
  /**
   * Base64 encoded value of the parameters/values file content.
   */
  encodedValuesContent?: string;
  /**
   * The collection of overridable values that can be passed when running a task.
   */
  values?: SetValue[];
  /**
   * Run timeout in seconds. Default value: 3600.
   */
  timeout?: number;
  /**
   * The platform properties against which the run has to happen.
   */
  platform: PlatformProperties;
  /**
   * The machine configuration of the run agent.
   */
  agentConfiguration?: AgentProperties;
  /**
   * The URL(absolute or relative) of the source context. It can be an URL to a tar or git
   * repository.
   * If it is relative URL, the relative path should be obtained from calling
   * listBuildSourceUploadUrl API.
   */
  sourceLocation?: string;
  /**
   * The properties that describes a set of credentials that will be used when this run is invoked.
   */
  credentials?: Credentials;
}

/**
 * The Docker build step.
 */
export interface DockerBuildStep {
  /**
   * Polymorphic Discriminator
   */
  type: "Docker";
  /**
   * List of base image dependencies for a step.
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly baseImageDependencies?: BaseImageDependency[];
  /**
   * The URL(absolute or relative) of the source context for the task step.
   */
  contextPath?: string;
  /**
   * The token (git PAT or SAS token of storage account blob) associated with the context for a
   * step.
   */
  contextAccessToken?: string;
  /**
   * The fully qualified image names including the repository and tag.
   */
  imageNames?: string[];
  /**
   * The value of this property indicates whether the image built should be pushed to the registry
   * or not. Default value: true.
   */
  isPushEnabled?: boolean;
  /**
   * The value of this property indicates whether the image cache is enabled or not. Default value:
   * false.
   */
  noCache?: boolean;
  /**
   * The Docker file path relative to the source context.
   */
  dockerFilePath: string;
  /**
   * The name of the target build stage for the docker build.
   */
  target?: string;
  /**
   * The collection of override arguments to be used when executing this build step.
   */
  argumentsProperty?: Argument[];
}

/**
 * The properties of a task step.
 */
export interface FileTaskStep {
  /**
   * Polymorphic Discriminator
   */
  type: "FileTask";
  /**
   * List of base image dependencies for a step.
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly baseImageDependencies?: BaseImageDependency[];
  /**
   * The URL(absolute or relative) of the source context for the task step.
   */
  contextPath?: string;
  /**
   * The token (git PAT or SAS token of storage account blob) associated with the context for a
   * step.
   */
  contextAccessToken?: string;
  /**
   * The task template/definition file path relative to the source context.
   */
  taskFilePath: string;
  /**
   * The task values/parameters file path relative to the source context.
   */
  valuesFilePath?: string;
  /**
   * The collection of overridable values that can be passed when running a task.
   */
  values?: SetValue[];
}

/**
 * The properties of a encoded task step.
 */
export interface EncodedTaskStep {
  /**
   * Polymorphic Discriminator
   */
  type: "EncodedTask";
  /**
   * List of base image dependencies for a step.
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly baseImageDependencies?: BaseImageDependency[];
  /**
   * The URL(absolute or relative) of the source context for the task step.
   */
  contextPath?: string;
  /**
   * The token (git PAT or SAS token of storage account blob) associated with the context for a
   * step.
   */
  contextAccessToken?: string;
  /**
   * Base64 encoded value of the template/definition file content.
   */
  encodedTaskContent: string;
  /**
   * Base64 encoded value of the parameters/values file content.
   */
  encodedValuesContent?: string;
  /**
   * The collection of overridable values that can be passed when running a task.
   */
  values?: SetValue[];
}

/**
 * The properties for updating a docker build step.
 */
export interface DockerBuildStepUpdateParameters {
  /**
   * Polymorphic Discriminator
   */
  type: "Docker";
  /**
   * The URL(absolute or relative) of the source context for the task step.
   */
  contextPath?: string;
  /**
   * The token (git PAT or SAS token of storage account blob) associated with the context for a
   * step.
   */
  contextAccessToken?: string;
  /**
   * The fully qualified image names including the repository and tag.
   */
  imageNames?: string[];
  /**
   * The value of this property indicates whether the image built should be pushed to the registry
   * or not.
   */
  isPushEnabled?: boolean;
  /**
   * The value of this property indicates whether the image cache is enabled or not.
   */
  noCache?: boolean;
  /**
   * The Docker file path relative to the source context.
   */
  dockerFilePath?: string;
  /**
   * The collection of override arguments to be used when executing this build step.
   */
  argumentsProperty?: Argument[];
  /**
   * The name of the target build stage for the docker build.
   */
  target?: string;
}

/**
 * The properties of updating a task step.
 */
export interface FileTaskStepUpdateParameters {
  /**
   * Polymorphic Discriminator
   */
  type: "FileTask";
  /**
   * The URL(absolute or relative) of the source context for the task step.
   */
  contextPath?: string;
  /**
   * The token (git PAT or SAS token of storage account blob) associated with the context for a
   * step.
   */
  contextAccessToken?: string;
  /**
   * The task template/definition file path relative to the source context.
   */
  taskFilePath?: string;
  /**
   * The values/parameters file path relative to the source context.
   */
  valuesFilePath?: string;
  /**
   * The collection of overridable values that can be passed when running a task.
   */
  values?: SetValue[];
}

/**
 * The properties for updating encoded task step.
 */
export interface EncodedTaskStepUpdateParameters {
  /**
   * Polymorphic Discriminator
   */
  type: "EncodedTask";
  /**
   * The URL(absolute or relative) of the source context for the task step.
   */
  contextPath?: string;
  /**
   * The token (git PAT or SAS token of storage account blob) associated with the context for a
   * step.
   */
  contextAccessToken?: string;
  /**
   * Base64 encoded value of the template/definition file content.
   */
  encodedTaskContent?: string;
  /**
   * Base64 encoded value of the parameters/values file content.
   */
  encodedValuesContent?: string;
  /**
   * The collection of overridable values that can be passed when running a task.
   */
  values?: SetValue[];
}

/**
 * An object that represents a scope map for a container registry.
 */
export interface ScopeMap extends ProxyResource {
  /**
   * The user friendly description of the scope map.
   */
  description?: string;
  /**
   * The type of the scope map. E.g. BuildIn scope map.
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly scopeMapType?: string;
  /**
   * The creation date of scope map.
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly creationDate?: Date;
  /**
   * Provisioning state of the resource. Possible values include: 'Creating', 'Updating',
   * 'Deleting', 'Succeeded', 'Failed', 'Canceled'
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly provisioningState?: ProvisioningState;
  /**
   * The list of scoped permissions for registry artifacts.
   * E.g. repositories/repository-name/content/read,
   * repositories/repository-name/metadata/write
   */
  actions: string[];
}

/**
 * The properties for updating the scope map.
 */
export interface ScopeMapUpdateParameters {
  /**
   * The user friendly description of the scope map.
   */
  description?: string;
  /**
   * The list of scope permissions for registry artifacts.
   * E.g. repositories/repository-name/pull,
   * repositories/repository-name/delete
   */
  actions?: string[];
}

/**
 * The Active Directory Object that will be used for authenticating the token of a container
 * registry.
 */
export interface ActiveDirectoryObject {
  /**
   * The user/group/application object ID for Active Directory Object that will be used for
   * authenticating the token of a container registry.
   */
  objectId?: string;
  /**
   * The tenant ID of user/group/application object Active Directory Object that will be used for
   * authenticating the token of a container registry.
   */
  tenantId?: string;
}

/**
 * The properties of a certificate used for authenticating a token.
 */
export interface TokenCertificate {
  /**
   * Possible values include: 'certificate1', 'certificate2'
   */
  name?: TokenCertificateName;
  /**
   * The expiry datetime of the certificate.
   */
  expiry?: Date;
  /**
   * The thumbprint of the certificate.
   */
  thumbprint?: string;
  /**
   * Base 64 encoded string of the public certificate1 in PEM format that will be used for
   * authenticating the token.
   */
  encodedPemCertificate?: string;
}

/**
 * The password that will be used for authenticating the token of a container registry.
 */
export interface TokenPassword {
  /**
   * The creation datetime of the password.
   */
  creationTime?: Date;
  /**
   * The expiry datetime of the password.
   */
  expiry?: Date;
  /**
   * The password name "password1" or "password2". Possible values include: 'password1',
   * 'password2'
   */
  name?: TokenPasswordName;
  /**
   * The password value.
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly value?: string;
}

/**
 * The properties of the credentials that can be used for authenticating the token.
 */
export interface TokenCredentialsProperties {
  activeDirectoryObject?: ActiveDirectoryObject;
  certificates?: TokenCertificate[];
  passwords?: TokenPassword[];
}

/**
 * An object that represents a token for a container registry.
 */
export interface Token extends ProxyResource {
  /**
   * The creation date of scope map.
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly creationDate?: Date;
  /**
   * Provisioning state of the resource. Possible values include: 'Creating', 'Updating',
   * 'Deleting', 'Succeeded', 'Failed', 'Canceled'
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly provisioningState?: ProvisioningState;
  /**
   * The resource ID of the scope map to which the token will be associated with.
   */
  scopeMapId?: string;
  /**
   * The credentials that can be used for authenticating the token.
   */
  credentials?: TokenCredentialsProperties;
  /**
   * The status of the token example enabled or disabled. Possible values include: 'enabled',
   * 'disabled'
   */
  status?: TokenStatus;
}

/**
 * The parameters for updating a token.
 */
export interface TokenUpdateParameters {
  /**
   * The resource ID of the scope map to which the token will be associated with.
   */
  scopeMapId?: string;
  /**
   * The status of the token example enabled or disabled. Possible values include: 'enabled',
   * 'disabled'
   */
  status?: TokenStatus;
  /**
   * The credentials that can be used for authenticating the token.
   */
  credentials?: TokenCredentialsProperties;
}

/**
 * The parameters used to generate credentials for a specified token or user of a container
 * registry.
 */
export interface GenerateCredentialsParameters {
  /**
   * The resource ID of the token for which credentials have to be generated.
   */
  tokenId?: string;
  /**
   * The expiry date of the generated credentials after which the credentials become invalid.
   */
  expiry?: Date;
  /**
   * Specifies name of the password which should be regenerated if any -- password1 or password2.
   * Possible values include: 'password1', 'password2'
   */
  name?: TokenPasswordName;
}

/**
 * The response from the GenerateCredentials operation.
 */
export interface GenerateCredentialsResult {
  /**
   * The username for a container registry.
   */
  username?: string;
  /**
   * The list of passwords for a container registry.
   */
  passwords?: TokenPassword[];
}

/**
 * Optional Parameters.
 */
export interface RunsListOptionalParams extends msRest.RequestOptionsBase {
  /**
   * The runs filter to apply on the operation. Arithmetic operators are not supported. The allowed
   * string function is 'contains'. All logical operators except 'Not', 'Has', 'All' are allowed.
   */
  filter?: string;
  /**
   * $top is supported for get list of runs, which limits the maximum number of runs to return.
   */
  top?: number;
}

/**
 * An interface representing ContainerRegistryManagementClientOptions.
 */
export interface ContainerRegistryManagementClientOptions extends AzureServiceClientOptions {
  baseUri?: string;
}

/**
 * @interface
 * The result of a request to list export pipelines for a container registry.
 * @extends Array<ExportPipeline>
 */
export interface ExportPipelineListResult extends Array<ExportPipeline> {
  /**
   * The URI that can be used to request the next list of pipeline runs.
   */
  nextLink?: string;
}

/**
 * @interface
 * The result of a request to list container registries.
 * @extends Array<Registry>
 */
export interface RegistryListResult extends Array<Registry> {
  /**
   * The URI that can be used to request the next list of container registries.
   */
  nextLink?: string;
}

/**
 * @interface
 * The result of a request to list private link resources for a container registry.
 * @extends Array<PrivateLinkResource>
 */
export interface PrivateLinkResourceListResult extends Array<PrivateLinkResource> {
  /**
   * The URI that can be used to request the next list of private link resources.
   */
  nextLink?: string;
}

/**
 * @interface
 * The result of a request to list import pipelines for a container registry.
 * @extends Array<ImportPipeline>
 */
export interface ImportPipelineListResult extends Array<ImportPipeline> {
  /**
   * The URI that can be used to request the next list of pipeline runs.
   */
  nextLink?: string;
}

/**
 * @interface
 * The result of a request to list container registry operations.
 * @extends Array<OperationDefinition>
 */
export interface OperationListResult extends Array<OperationDefinition> {
  /**
   * The URI that can be used to request the next list of container registry operations.
   */
  nextLink?: string;
}

/**
 * @interface
 * The result of a request to list pipeline runs for a container registry.
 * @extends Array<PipelineRun>
 */
export interface PipelineRunListResult extends Array<PipelineRun> {
  /**
   * The URI that can be used to request the next list of pipeline runs.
   */
  nextLink?: string;
}

/**
 * @interface
 * The result of a request to list private endpoint connections for a container registry.
 * @extends Array<PrivateEndpointConnection>
 */
export interface PrivateEndpointConnectionListResult extends Array<PrivateEndpointConnection> {
  /**
   * The URI that can be used to request the next list of private endpoint connections.
   */
  nextLink?: string;
}

/**
 * @interface
 * The result of a request to list replications for a container registry.
 * @extends Array<Replication>
 */
export interface ReplicationListResult extends Array<Replication> {
  /**
   * The URI that can be used to request the next list of replications.
   */
  nextLink?: string;
}

/**
 * @interface
 * The result of a request to list webhooks for a container registry.
 * @extends Array<Webhook>
 */
export interface WebhookListResult extends Array<Webhook> {
  /**
   * The URI that can be used to request the next list of webhooks.
   */
  nextLink?: string;
}

/**
 * @interface
 * The result of a request to list events for a webhook.
 * @extends Array<Event>
 */
export interface EventListResult extends Array<Event> {
  /**
   * The URI that can be used to request the next list of events.
   */
  nextLink?: string;
}

/**
 * @interface
 * The collection of agent pools.
 * @extends Array<AgentPool>
 */
export interface AgentPoolListResult extends Array<AgentPool> {
  /**
   * The URI that can be used to request the next set of paged results.
   */
  nextLink?: string;
}

/**
 * @interface
 * Collection of runs.
 * @extends Array<Run>
 */
export interface RunListResult extends Array<Run> {
  /**
   * The URI that can be used to request the next set of paged results.
   */
  nextLink?: string;
}

/**
 * @interface
 * The collection of task runs.
 * @extends Array<TaskRun>
 */
export interface TaskRunListResult extends Array<TaskRun> {
  /**
   * The URI that can be used to request the next set of paged results.
   */
  nextLink?: string;
}

/**
 * @interface
 * The collection of tasks.
 * @extends Array<Task>
 */
export interface TaskListResult extends Array<Task> {
  /**
   * The URI that can be used to request the next set of paged results.
   */
  nextLink?: string;
}

/**
 * @interface
 * The result of a request to list scope maps for a container registry.
 * @extends Array<ScopeMap>
 */
export interface ScopeMapListResult extends Array<ScopeMap> {
  /**
   * The URI that can be used to request the next list of scope maps.
   */
  nextLink?: string;
}

/**
 * @interface
 * The result of a request to list tokens for a container registry.
 * @extends Array<Token>
 */
export interface TokenListResult extends Array<Token> {
  /**
   * The URI that can be used to request the next list of tokens.
   */
  nextLink?: string;
}

/**
 * Defines values for ResourceIdentityType.
 * Possible values include: 'SystemAssigned', 'UserAssigned', 'SystemAssigned, UserAssigned',
 * 'None'
 * @readonly
 * @enum {string}
 */
export type ResourceIdentityType = 'SystemAssigned' | 'UserAssigned' | 'SystemAssigned, UserAssigned' | 'None';

/**
 * Defines values for PipelineOptions.
 * Possible values include: 'OverwriteTags', 'OverwriteBlobs', 'DeleteSourceBlobOnSuccess',
 * 'ContinueOnErrors'
 * @readonly
 * @enum {string}
 */
export type PipelineOptions = 'OverwriteTags' | 'OverwriteBlobs' | 'DeleteSourceBlobOnSuccess' | 'ContinueOnErrors';

/**
 * Defines values for ProvisioningState.
 * Possible values include: 'Creating', 'Updating', 'Deleting', 'Succeeded', 'Failed', 'Canceled'
 * @readonly
 * @enum {string}
 */
export type ProvisioningState = 'Creating' | 'Updating' | 'Deleting' | 'Succeeded' | 'Failed' | 'Canceled';

/**
 * Defines values for ImportMode.
 * Possible values include: 'NoForce', 'Force'
 * @readonly
 * @enum {string}
 */
export type ImportMode = 'NoForce' | 'Force';

/**
 * Defines values for PipelineSourceType.
 * Possible values include: 'AzureStorageBlobContainer'
 * @readonly
 * @enum {string}
 */
export type PipelineSourceType = 'AzureStorageBlobContainer';

/**
 * Defines values for TriggerStatus.
 * Possible values include: 'Enabled', 'Disabled'
 * @readonly
 * @enum {string}
 */
export type TriggerStatus = 'Enabled' | 'Disabled';

/**
 * Defines values for PipelineRunSourceType.
 * Possible values include: 'AzureStorageBlob'
 * @readonly
 * @enum {string}
 */
export type PipelineRunSourceType = 'AzureStorageBlob';

/**
 * Defines values for PipelineRunTargetType.
 * Possible values include: 'AzureStorageBlob'
 * @readonly
 * @enum {string}
 */
export type PipelineRunTargetType = 'AzureStorageBlob';

/**
 * Defines values for ConnectionStatus.
 * Possible values include: 'Approved', 'Pending', 'Rejected', 'Disconnected'
 * @readonly
 * @enum {string}
 */
export type ConnectionStatus = 'Approved' | 'Pending' | 'Rejected' | 'Disconnected';

/**
 * Defines values for ActionsRequired.
 * Possible values include: 'None', 'Recreate'
 * @readonly
 * @enum {string}
 */
export type ActionsRequired = 'None' | 'Recreate';

/**
 * Defines values for SkuName.
 * Possible values include: 'Classic', 'Basic', 'Standard', 'Premium'
 * @readonly
 * @enum {string}
 */
export type SkuName = 'Classic' | 'Basic' | 'Standard' | 'Premium';

/**
 * Defines values for SkuTier.
 * Possible values include: 'Classic', 'Basic', 'Standard', 'Premium'
 * @readonly
 * @enum {string}
 */
export type SkuTier = 'Classic' | 'Basic' | 'Standard' | 'Premium';

/**
 * Defines values for DefaultAction.
 * Possible values include: 'Allow', 'Deny'
 * @readonly
 * @enum {string}
 */
export type DefaultAction = 'Allow' | 'Deny';

/**
 * Defines values for Action.
 * Possible values include: 'Allow'
 * @readonly
 * @enum {string}
 */
export type Action = 'Allow';

/**
 * Defines values for PolicyStatus.
 * Possible values include: 'enabled', 'disabled'
 * @readonly
 * @enum {string}
 */
export type PolicyStatus = 'enabled' | 'disabled';

/**
 * Defines values for TrustPolicyType.
 * Possible values include: 'Notary'
 * @readonly
 * @enum {string}
 */
export type TrustPolicyType = 'Notary';

/**
 * Defines values for EncryptionStatus.
 * Possible values include: 'enabled', 'disabled'
 * @readonly
 * @enum {string}
 */
export type EncryptionStatus = 'enabled' | 'disabled';

/**
 * Defines values for PublicNetworkAccess.
 * Possible values include: 'Enabled', 'Disabled'
 * @readonly
 * @enum {string}
 */
export type PublicNetworkAccess = 'Enabled' | 'Disabled';

/**
 * Defines values for PasswordName.
 * Possible values include: 'password', 'password2'
 * @readonly
 * @enum {string}
 */
export type PasswordName = 'password' | 'password2';

/**
 * Defines values for RegistryUsageUnit.
 * Possible values include: 'Count', 'Bytes'
 * @readonly
 * @enum {string}
 */
export type RegistryUsageUnit = 'Count' | 'Bytes';

/**
 * Defines values for WebhookStatus.
 * Possible values include: 'enabled', 'disabled'
 * @readonly
 * @enum {string}
 */
export type WebhookStatus = 'enabled' | 'disabled';

/**
 * Defines values for WebhookAction.
 * Possible values include: 'push', 'delete', 'quarantine', 'chart_push', 'chart_delete'
 * @readonly
 * @enum {string}
 */
export type WebhookAction = 'push' | 'delete' | 'quarantine' | 'chart_push' | 'chart_delete';

/**
 * Defines values for OS.
 * Possible values include: 'Windows', 'Linux'
 * @readonly
 * @enum {string}
 */
export type OS = 'Windows' | 'Linux';

/**
 * Defines values for RunStatus.
 * Possible values include: 'Queued', 'Started', 'Running', 'Succeeded', 'Failed', 'Canceled',
 * 'Error', 'Timeout'
 * @readonly
 * @enum {string}
 */
export type RunStatus = 'Queued' | 'Started' | 'Running' | 'Succeeded' | 'Failed' | 'Canceled' | 'Error' | 'Timeout';

/**
 * Defines values for RunType.
 * Possible values include: 'QuickBuild', 'QuickRun', 'AutoBuild', 'AutoRun'
 * @readonly
 * @enum {string}
 */
export type RunType = 'QuickBuild' | 'QuickRun' | 'AutoBuild' | 'AutoRun';

/**
 * Defines values for Architecture.
 * Possible values include: 'amd64', 'x86', '386', 'arm', 'arm64'
 * @readonly
 * @enum {string}
 */
export type Architecture = 'amd64' | 'x86' | '386' | 'arm' | 'arm64';

/**
 * Defines values for Variant.
 * Possible values include: 'v6', 'v7', 'v8'
 * @readonly
 * @enum {string}
 */
export type Variant = 'v6' | 'v7' | 'v8';

/**
 * Defines values for TaskStatus.
 * Possible values include: 'Disabled', 'Enabled'
 * @readonly
 * @enum {string}
 */
export type TaskStatus = 'Disabled' | 'Enabled';

/**
 * Defines values for BaseImageDependencyType.
 * Possible values include: 'BuildTime', 'RunTime'
 * @readonly
 * @enum {string}
 */
export type BaseImageDependencyType = 'BuildTime' | 'RunTime';

/**
 * Defines values for SourceControlType.
 * Possible values include: 'Github', 'VisualStudioTeamService'
 * @readonly
 * @enum {string}
 */
export type SourceControlType = 'Github' | 'VisualStudioTeamService';

/**
 * Defines values for TokenType.
 * Possible values include: 'PAT', 'OAuth'
 * @readonly
 * @enum {string}
 */
export type TokenType = 'PAT' | 'OAuth';

/**
 * Defines values for SourceTriggerEvent.
 * Possible values include: 'commit', 'pullrequest'
 * @readonly
 * @enum {string}
 */
export type SourceTriggerEvent = 'commit' | 'pullrequest';

/**
 * Defines values for BaseImageTriggerType.
 * Possible values include: 'All', 'Runtime'
 * @readonly
 * @enum {string}
 */
export type BaseImageTriggerType = 'All' | 'Runtime';

/**
 * Defines values for UpdateTriggerPayloadType.
 * Possible values include: 'Default', 'Token'
 * @readonly
 * @enum {string}
 */
export type UpdateTriggerPayloadType = 'Default' | 'Token';

/**
 * Defines values for SourceRegistryLoginMode.
 * Possible values include: 'None', 'Default'
 * @readonly
 * @enum {string}
 */
export type SourceRegistryLoginMode = 'None' | 'Default';

/**
 * Defines values for SecretObjectType.
 * Possible values include: 'Opaque', 'Vaultsecret'
 * @readonly
 * @enum {string}
 */
export type SecretObjectType = 'Opaque' | 'Vaultsecret';

/**
 * Defines values for TokenCertificateName.
 * Possible values include: 'certificate1', 'certificate2'
 * @readonly
 * @enum {string}
 */
export type TokenCertificateName = 'certificate1' | 'certificate2';

/**
 * Defines values for TokenPasswordName.
 * Possible values include: 'password1', 'password2'
 * @readonly
 * @enum {string}
 */
export type TokenPasswordName = 'password1' | 'password2';

/**
 * Defines values for TokenStatus.
 * Possible values include: 'enabled', 'disabled'
 * @readonly
 * @enum {string}
 */
export type TokenStatus = 'enabled' | 'disabled';

/**
 * Contains response data for the get operation.
 */
export type ExportPipelinesGetResponse = ExportPipeline & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;

      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: ExportPipeline;
    };
};

/**
 * Contains response data for the create operation.
 */
export type ExportPipelinesCreateResponse = ExportPipeline & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;

      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: ExportPipeline;
    };
};

/**
 * Contains response data for the list operation.
 */
export type ExportPipelinesListResponse = ExportPipelineListResult & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;

      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: ExportPipelineListResult;
    };
};

/**
 * Contains response data for the beginCreate operation.
 */
export type ExportPipelinesBeginCreateResponse = ExportPipeline & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;

      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: ExportPipeline;
    };
};

/**
 * Contains response data for the listNext operation.
 */
export type ExportPipelinesListNextResponse = ExportPipelineListResult & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;

      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: ExportPipelineListResult;
    };
};

/**
 * Contains response data for the checkNameAvailability operation.
 */
export type RegistriesCheckNameAvailabilityResponse = RegistryNameStatus & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;

      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: RegistryNameStatus;
    };
};

/**
 * Contains response data for the get operation.
 */
export type RegistriesGetResponse = Registry & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;

      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: Registry;
    };
};

/**
 * Contains response data for the create operation.
 */
export type RegistriesCreateResponse = Registry & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;

      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: Registry;
    };
};

/**
 * Contains response data for the update operation.
 */
export type RegistriesUpdateResponse = Registry & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;

      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: Registry;
    };
};

/**
 * Contains response data for the listByResourceGroup operation.
 */
export type RegistriesListByResourceGroupResponse = RegistryListResult & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;

      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: RegistryListResult;
    };
};

/**
 * Contains response data for the list operation.
 */
export type RegistriesListResponse = RegistryListResult & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;

      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: RegistryListResult;
    };
};

/**
 * Contains response data for the listCredentials operation.
 */
export type RegistriesListCredentialsResponse = RegistryListCredentialsResult & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;

      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: RegistryListCredentialsResult;
    };
};

/**
 * Contains response data for the regenerateCredential operation.
 */
export type RegistriesRegenerateCredentialResponse = RegistryListCredentialsResult & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;

      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: RegistryListCredentialsResult;
    };
};

/**
 * Contains response data for the listUsages operation.
 */
export type RegistriesListUsagesResponse = RegistryUsageListResult & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;

      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: RegistryUsageListResult;
    };
};

/**
 * Contains response data for the listPrivateLinkResources operation.
 */
export type RegistriesListPrivateLinkResourcesResponse = PrivateLinkResourceListResult & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;

      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: PrivateLinkResourceListResult;
    };
};

/**
 * Contains response data for the scheduleRun operation.
 */
export type RegistriesScheduleRunResponse = Run & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;

      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: Run;
    };
};

/**
 * Contains response data for the getBuildSourceUploadUrl operation.
 */
export type RegistriesGetBuildSourceUploadUrlResponse = SourceUploadDefinition & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;

      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: SourceUploadDefinition;
    };
};

/**
 * Contains response data for the generateCredentials operation.
 */
export type RegistriesGenerateCredentialsResponse = GenerateCredentialsResult & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;

      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: GenerateCredentialsResult;
    };
};

/**
 * Contains response data for the beginCreate operation.
 */
export type RegistriesBeginCreateResponse = Registry & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;

      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: Registry;
    };
};

/**
 * Contains response data for the beginUpdate operation.
 */
export type RegistriesBeginUpdateResponse = Registry & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;

      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: Registry;
    };
};

/**
 * Contains response data for the beginScheduleRun operation.
 */
export type RegistriesBeginScheduleRunResponse = Run & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;

      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: Run;
    };
};

/**
 * Contains response data for the beginGenerateCredentials operation.
 */
export type RegistriesBeginGenerateCredentialsResponse = GenerateCredentialsResult & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;

      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: GenerateCredentialsResult;
    };
};

/**
 * Contains response data for the listByResourceGroupNext operation.
 */
export type RegistriesListByResourceGroupNextResponse = RegistryListResult & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;

      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: RegistryListResult;
    };
};

/**
 * Contains response data for the listNext operation.
 */
export type RegistriesListNextResponse = RegistryListResult & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;

      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: RegistryListResult;
    };
};

/**
 * Contains response data for the listPrivateLinkResourcesNext operation.
 */
export type RegistriesListPrivateLinkResourcesNextResponse = PrivateLinkResourceListResult & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;

      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: PrivateLinkResourceListResult;
    };
};

/**
 * Contains response data for the get operation.
 */
export type ImportPipelinesGetResponse = ImportPipeline & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;

      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: ImportPipeline;
    };
};

/**
 * Contains response data for the create operation.
 */
export type ImportPipelinesCreateResponse = ImportPipeline & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;

      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: ImportPipeline;
    };
};

/**
 * Contains response data for the list operation.
 */
export type ImportPipelinesListResponse = ImportPipelineListResult & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;

      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: ImportPipelineListResult;
    };
};

/**
 * Contains response data for the beginCreate operation.
 */
export type ImportPipelinesBeginCreateResponse = ImportPipeline & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;

      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: ImportPipeline;
    };
};

/**
 * Contains response data for the listNext operation.
 */
export type ImportPipelinesListNextResponse = ImportPipelineListResult & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;

      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: ImportPipelineListResult;
    };
};

/**
 * Contains response data for the list operation.
 */
export type OperationsListResponse = OperationListResult & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;

      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: OperationListResult;
    };
};

/**
 * Contains response data for the listNext operation.
 */
export type OperationsListNextResponse = OperationListResult & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;

      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: OperationListResult;
    };
};

/**
 * Contains response data for the get operation.
 */
export type PipelineRunsGetResponse = PipelineRun & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;

      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: PipelineRun;
    };
};

/**
 * Contains response data for the create operation.
 */
export type PipelineRunsCreateResponse = PipelineRun & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;

      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: PipelineRun;
    };
};

/**
 * Contains response data for the list operation.
 */
export type PipelineRunsListResponse = PipelineRunListResult & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;

      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: PipelineRunListResult;
    };
};

/**
 * Contains response data for the beginCreate operation.
 */
export type PipelineRunsBeginCreateResponse = PipelineRun & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;

      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: PipelineRun;
    };
};

/**
 * Contains response data for the listNext operation.
 */
export type PipelineRunsListNextResponse = PipelineRunListResult & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;

      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: PipelineRunListResult;
    };
};

/**
 * Contains response data for the get operation.
 */
export type PrivateEndpointConnectionsGetResponse = PrivateEndpointConnection & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;

      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: PrivateEndpointConnection;
    };
};

/**
 * Contains response data for the createOrUpdate operation.
 */
export type PrivateEndpointConnectionsCreateOrUpdateResponse = PrivateEndpointConnection & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;

      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: PrivateEndpointConnection;
    };
};

/**
 * Contains response data for the list operation.
 */
export type PrivateEndpointConnectionsListResponse = PrivateEndpointConnectionListResult & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;

      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: PrivateEndpointConnectionListResult;
    };
};

/**
 * Contains response data for the beginCreateOrUpdate operation.
 */
export type PrivateEndpointConnectionsBeginCreateOrUpdateResponse = PrivateEndpointConnection & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;

      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: PrivateEndpointConnection;
    };
};

/**
 * Contains response data for the listNext operation.
 */
export type PrivateEndpointConnectionsListNextResponse = PrivateEndpointConnectionListResult & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;

      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: PrivateEndpointConnectionListResult;
    };
};

/**
 * Contains response data for the get operation.
 */
export type ReplicationsGetResponse = Replication & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;

      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: Replication;
    };
};

/**
 * Contains response data for the create operation.
 */
export type ReplicationsCreateResponse = Replication & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;

      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: Replication;
    };
};

/**
 * Contains response data for the update operation.
 */
export type ReplicationsUpdateResponse = Replication & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;

      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: Replication;
    };
};

/**
 * Contains response data for the list operation.
 */
export type ReplicationsListResponse = ReplicationListResult & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;

      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: ReplicationListResult;
    };
};

/**
 * Contains response data for the beginCreate operation.
 */
export type ReplicationsBeginCreateResponse = Replication & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;

      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: Replication;
    };
};

/**
 * Contains response data for the beginUpdate operation.
 */
export type ReplicationsBeginUpdateResponse = Replication & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;

      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: Replication;
    };
};

/**
 * Contains response data for the listNext operation.
 */
export type ReplicationsListNextResponse = ReplicationListResult & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;

      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: ReplicationListResult;
    };
};

/**
 * Contains response data for the get operation.
 */
export type WebhooksGetResponse = Webhook & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;

      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: Webhook;
    };
};

/**
 * Contains response data for the create operation.
 */
export type WebhooksCreateResponse = Webhook & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;

      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: Webhook;
    };
};

/**
 * Contains response data for the update operation.
 */
export type WebhooksUpdateResponse = Webhook & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;

      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: Webhook;
    };
};

/**
 * Contains response data for the list operation.
 */
export type WebhooksListResponse = WebhookListResult & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;

      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: WebhookListResult;
    };
};

/**
 * Contains response data for the ping operation.
 */
export type WebhooksPingResponse = EventInfo & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;

      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: EventInfo;
    };
};

/**
 * Contains response data for the getCallbackConfig operation.
 */
export type WebhooksGetCallbackConfigResponse = CallbackConfig & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;

      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: CallbackConfig;
    };
};

/**
 * Contains response data for the listEvents operation.
 */
export type WebhooksListEventsResponse = EventListResult & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;

      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: EventListResult;
    };
};

/**
 * Contains response data for the beginCreate operation.
 */
export type WebhooksBeginCreateResponse = Webhook & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;

      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: Webhook;
    };
};

/**
 * Contains response data for the beginUpdate operation.
 */
export type WebhooksBeginUpdateResponse = Webhook & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;

      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: Webhook;
    };
};

/**
 * Contains response data for the listNext operation.
 */
export type WebhooksListNextResponse = WebhookListResult & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;

      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: WebhookListResult;
    };
};

/**
 * Contains response data for the listEventsNext operation.
 */
export type WebhooksListEventsNextResponse = EventListResult & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;

      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: EventListResult;
    };
};

/**
 * Contains response data for the get operation.
 */
export type AgentPoolsGetResponse = AgentPool & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;

      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: AgentPool;
    };
};

/**
 * Contains response data for the create operation.
 */
export type AgentPoolsCreateResponse = AgentPool & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;

      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: AgentPool;
    };
};

/**
 * Contains response data for the update operation.
 */
export type AgentPoolsUpdateResponse = AgentPool & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;

      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: AgentPool;
    };
};

/**
 * Contains response data for the list operation.
 */
export type AgentPoolsListResponse = AgentPoolListResult & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;

      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: AgentPoolListResult;
    };
};

/**
 * Contains response data for the getQueueStatus operation.
 */
export type AgentPoolsGetQueueStatusResponse = AgentPoolQueueStatus & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;

      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: AgentPoolQueueStatus;
    };
};

/**
 * Contains response data for the beginCreate operation.
 */
export type AgentPoolsBeginCreateResponse = AgentPool & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;

      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: AgentPool;
    };
};

/**
 * Contains response data for the beginUpdate operation.
 */
export type AgentPoolsBeginUpdateResponse = AgentPool & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;

      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: AgentPool;
    };
};

/**
 * Contains response data for the listNext operation.
 */
export type AgentPoolsListNextResponse = AgentPoolListResult & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;

      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: AgentPoolListResult;
    };
};

/**
 * Contains response data for the list operation.
 */
export type RunsListResponse = RunListResult & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;

      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: RunListResult;
    };
};

/**
 * Contains response data for the get operation.
 */
export type RunsGetResponse = Run & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;

      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: Run;
    };
};

/**
 * Contains response data for the update operation.
 */
export type RunsUpdateResponse = Run & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;

      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: Run;
    };
};

/**
 * Contains response data for the getLogSasUrl operation.
 */
export type RunsGetLogSasUrlResponse = RunGetLogResult & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;

      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: RunGetLogResult;
    };
};

/**
 * Contains response data for the beginUpdate operation.
 */
export type RunsBeginUpdateResponse = Run & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;

      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: Run;
    };
};

/**
 * Contains response data for the listNext operation.
 */
export type RunsListNextResponse = RunListResult & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;

      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: RunListResult;
    };
};

/**
 * Contains response data for the get operation.
 */
export type TaskRunsGetResponse = TaskRun & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;

      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: TaskRun;
    };
};

/**
 * Contains response data for the create operation.
 */
export type TaskRunsCreateResponse = TaskRun & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;

      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: TaskRun;
    };
};

/**
 * Contains response data for the update operation.
 */
export type TaskRunsUpdateResponse = TaskRun & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;

      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: TaskRun;
    };
};

/**
 * Contains response data for the getDetails operation.
 */
export type TaskRunsGetDetailsResponse = TaskRun & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;

      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: TaskRun;
    };
};

/**
 * Contains response data for the list operation.
 */
export type TaskRunsListResponse = TaskRunListResult & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;

      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: TaskRunListResult;
    };
};

/**
 * Contains response data for the beginCreate operation.
 */
export type TaskRunsBeginCreateResponse = TaskRun & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;

      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: TaskRun;
    };
};

/**
 * Contains response data for the beginUpdate operation.
 */
export type TaskRunsBeginUpdateResponse = TaskRun & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;

      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: TaskRun;
    };
};

/**
 * Contains response data for the listNext operation.
 */
export type TaskRunsListNextResponse = TaskRunListResult & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;

      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: TaskRunListResult;
    };
};

/**
 * Contains response data for the list operation.
 */
export type TasksListResponse = TaskListResult & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;

      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: TaskListResult;
    };
};

/**
 * Contains response data for the get operation.
 */
export type TasksGetResponse = Task & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;

      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: Task;
    };
};

/**
 * Contains response data for the create operation.
 */
export type TasksCreateResponse = Task & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;

      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: Task;
    };
};

/**
 * Contains response data for the update operation.
 */
export type TasksUpdateResponse = Task & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;

      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: Task;
    };
};

/**
 * Contains response data for the getDetails operation.
 */
export type TasksGetDetailsResponse = Task & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;

      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: Task;
    };
};

/**
 * Contains response data for the beginCreate operation.
 */
export type TasksBeginCreateResponse = Task & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;

      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: Task;
    };
};

/**
 * Contains response data for the beginUpdate operation.
 */
export type TasksBeginUpdateResponse = Task & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;

      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: Task;
    };
};

/**
 * Contains response data for the listNext operation.
 */
export type TasksListNextResponse = TaskListResult & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;

      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: TaskListResult;
    };
};

/**
 * Contains response data for the get operation.
 */
export type ScopeMapsGetResponse = ScopeMap & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;

      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: ScopeMap;
    };
};

/**
 * Contains response data for the create operation.
 */
export type ScopeMapsCreateResponse = ScopeMap & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;

      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: ScopeMap;
    };
};

/**
 * Contains response data for the update operation.
 */
export type ScopeMapsUpdateResponse = ScopeMap & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;

      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: ScopeMap;
    };
};

/**
 * Contains response data for the list operation.
 */
export type ScopeMapsListResponse = ScopeMapListResult & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;

      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: ScopeMapListResult;
    };
};

/**
 * Contains response data for the beginCreate operation.
 */
export type ScopeMapsBeginCreateResponse = ScopeMap & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;

      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: ScopeMap;
    };
};

/**
 * Contains response data for the beginUpdate operation.
 */
export type ScopeMapsBeginUpdateResponse = ScopeMap & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;

      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: ScopeMap;
    };
};

/**
 * Contains response data for the listNext operation.
 */
export type ScopeMapsListNextResponse = ScopeMapListResult & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;

      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: ScopeMapListResult;
    };
};

/**
 * Contains response data for the get operation.
 */
export type TokensGetResponse = Token & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;

      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: Token;
    };
};

/**
 * Contains response data for the create operation.
 */
export type TokensCreateResponse = Token & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;

      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: Token;
    };
};

/**
 * Contains response data for the update operation.
 */
export type TokensUpdateResponse = Token & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;

      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: Token;
    };
};

/**
 * Contains response data for the list operation.
 */
export type TokensListResponse = TokenListResult & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;

      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: TokenListResult;
    };
};

/**
 * Contains response data for the beginCreate operation.
 */
export type TokensBeginCreateResponse = Token & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;

      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: Token;
    };
};

/**
 * Contains response data for the beginUpdate operation.
 */
export type TokensBeginUpdateResponse = Token & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;

      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: Token;
    };
};

/**
 * Contains response data for the listNext operation.
 */
export type TokensListNextResponse = TokenListResult & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;

      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: TokenListResult;
    };
};
