/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */

import {
  OperationParameter,
  OperationURLParameter,
  OperationQueryParameter
} from "@azure/core-client";
import {
  ImportImageParameters as ImportImageParametersMapper,
  RegistryNameCheckRequest as RegistryNameCheckRequestMapper,
  Registry as RegistryMapper,
  RegistryUpdateParameters as RegistryUpdateParametersMapper,
  RegenerateCredentialParameters as RegenerateCredentialParametersMapper,
  GenerateCredentialsParameters as GenerateCredentialsParametersMapper,
  PrivateEndpointConnection as PrivateEndpointConnectionMapper,
  Replication as ReplicationMapper,
  ReplicationUpdateParameters as ReplicationUpdateParametersMapper,
  ScopeMap as ScopeMapMapper,
  ScopeMapUpdateParameters as ScopeMapUpdateParametersMapper,
  Token as TokenMapper,
  TokenUpdateParameters as TokenUpdateParametersMapper,
  WebhookCreateParameters as WebhookCreateParametersMapper,
  WebhookUpdateParameters as WebhookUpdateParametersMapper
} from "../models/mappers";

export const contentType: OperationParameter = {
  parameterPath: ["options", "contentType"],
  mapper: {
    defaultValue: "application/json",
    isConstant: true,
    serializedName: "Content-Type",
    type: {
      name: "String"
    }
  }
};

export const parameters: OperationParameter = {
  parameterPath: "parameters",
  mapper: ImportImageParametersMapper
};

export const $host: OperationURLParameter = {
  parameterPath: "$host",
  mapper: {
    serializedName: "$host",
    required: true,
    type: {
      name: "String"
    }
  },
  skipEncoding: true
};

export const apiVersion: OperationQueryParameter = {
  parameterPath: "apiVersion",
  mapper: {
    defaultValue: "2022-12-01",
    isConstant: true,
    serializedName: "api-version",
    type: {
      name: "String"
    }
  }
};

export const subscriptionId: OperationURLParameter = {
  parameterPath: "subscriptionId",
  mapper: {
    serializedName: "subscriptionId",
    required: true,
    type: {
      name: "Uuid"
    }
  }
};

export const resourceGroupName: OperationURLParameter = {
  parameterPath: "resourceGroupName",
  mapper: {
    constraints: {
      MaxLength: 90,
      MinLength: 1
    },
    serializedName: "resourceGroupName",
    required: true,
    type: {
      name: "String"
    }
  }
};

export const registryName: OperationURLParameter = {
  parameterPath: "registryName",
  mapper: {
    constraints: {
      Pattern: new RegExp("^[a-zA-Z0-9]*$"),
      MaxLength: 50,
      MinLength: 5
    },
    serializedName: "registryName",
    required: true,
    type: {
      name: "String"
    }
  }
};

export const registryNameCheckRequest: OperationParameter = {
  parameterPath: "registryNameCheckRequest",
  mapper: RegistryNameCheckRequestMapper
};

export const accept: OperationParameter = {
  parameterPath: "accept",
  mapper: {
    defaultValue: "application/json",
    isConstant: true,
    serializedName: "Accept",
    type: {
      name: "String"
    }
  }
};

export const registry: OperationParameter = {
  parameterPath: "registry",
  mapper: RegistryMapper
};

export const registryUpdateParameters: OperationParameter = {
  parameterPath: "registryUpdateParameters",
  mapper: RegistryUpdateParametersMapper
};

export const groupName: OperationURLParameter = {
  parameterPath: "groupName",
  mapper: {
    serializedName: "groupName",
    required: true,
    type: {
      name: "String"
    }
  }
};

export const regenerateCredentialParameters: OperationParameter = {
  parameterPath: "regenerateCredentialParameters",
  mapper: RegenerateCredentialParametersMapper
};

export const generateCredentialsParameters: OperationParameter = {
  parameterPath: "generateCredentialsParameters",
  mapper: GenerateCredentialsParametersMapper
};

export const nextLink: OperationURLParameter = {
  parameterPath: "nextLink",
  mapper: {
    serializedName: "nextLink",
    required: true,
    type: {
      name: "String"
    }
  },
  skipEncoding: true
};

export const privateEndpointConnectionName: OperationURLParameter = {
  parameterPath: "privateEndpointConnectionName",
  mapper: {
    serializedName: "privateEndpointConnectionName",
    required: true,
    type: {
      name: "String"
    }
  }
};

export const privateEndpointConnection: OperationParameter = {
  parameterPath: "privateEndpointConnection",
  mapper: PrivateEndpointConnectionMapper
};

export const replicationName: OperationURLParameter = {
  parameterPath: "replicationName",
  mapper: {
    constraints: {
      Pattern: new RegExp("^[a-zA-Z0-9]*$"),
      MaxLength: 50,
      MinLength: 5
    },
    serializedName: "replicationName",
    required: true,
    type: {
      name: "String"
    }
  }
};

export const replication: OperationParameter = {
  parameterPath: "replication",
  mapper: ReplicationMapper
};

export const replicationUpdateParameters: OperationParameter = {
  parameterPath: "replicationUpdateParameters",
  mapper: ReplicationUpdateParametersMapper
};

export const scopeMapName: OperationURLParameter = {
  parameterPath: "scopeMapName",
  mapper: {
    constraints: {
      Pattern: new RegExp("^[a-zA-Z0-9-_]*$"),
      MaxLength: 50,
      MinLength: 5
    },
    serializedName: "scopeMapName",
    required: true,
    type: {
      name: "String"
    }
  }
};

export const scopeMapCreateParameters: OperationParameter = {
  parameterPath: "scopeMapCreateParameters",
  mapper: ScopeMapMapper
};

export const scopeMapUpdateParameters: OperationParameter = {
  parameterPath: "scopeMapUpdateParameters",
  mapper: ScopeMapUpdateParametersMapper
};

export const tokenName: OperationURLParameter = {
  parameterPath: "tokenName",
  mapper: {
    constraints: {
      Pattern: new RegExp("^[a-zA-Z0-9-]*$"),
      MaxLength: 50,
      MinLength: 5
    },
    serializedName: "tokenName",
    required: true,
    type: {
      name: "String"
    }
  }
};

export const tokenCreateParameters: OperationParameter = {
  parameterPath: "tokenCreateParameters",
  mapper: TokenMapper
};

export const tokenUpdateParameters: OperationParameter = {
  parameterPath: "tokenUpdateParameters",
  mapper: TokenUpdateParametersMapper
};

export const webhookName: OperationURLParameter = {
  parameterPath: "webhookName",
  mapper: {
    constraints: {
      Pattern: new RegExp("^[a-zA-Z0-9]*$"),
      MaxLength: 50,
      MinLength: 5
    },
    serializedName: "webhookName",
    required: true,
    type: {
      name: "String"
    }
  }
};

export const webhookCreateParameters: OperationParameter = {
  parameterPath: "webhookCreateParameters",
  mapper: WebhookCreateParametersMapper
};

export const webhookUpdateParameters: OperationParameter = {
  parameterPath: "webhookUpdateParameters",
  mapper: WebhookUpdateParametersMapper
};
