/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */

import * as coreClient from "@azure/core-client";

export const ImportImageParameters: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "ImportImageParameters",
    modelProperties: {
      source: {
        serializedName: "source",
        type: {
          name: "Composite",
          className: "ImportSource"
        }
      },
      targetTags: {
        serializedName: "targetTags",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "String"
            }
          }
        }
      },
      untaggedTargetRepositories: {
        serializedName: "untaggedTargetRepositories",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "String"
            }
          }
        }
      },
      mode: {
        defaultValue: "NoForce",
        serializedName: "mode",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const ImportSource: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "ImportSource",
    modelProperties: {
      resourceId: {
        serializedName: "resourceId",
        type: {
          name: "String"
        }
      },
      registryUri: {
        serializedName: "registryUri",
        type: {
          name: "String"
        }
      },
      credentials: {
        serializedName: "credentials",
        type: {
          name: "Composite",
          className: "ImportSourceCredentials"
        }
      },
      sourceImage: {
        serializedName: "sourceImage",
        required: true,
        type: {
          name: "String"
        }
      }
    }
  }
};

export const ImportSourceCredentials: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "ImportSourceCredentials",
    modelProperties: {
      username: {
        serializedName: "username",
        type: {
          name: "String"
        }
      },
      password: {
        serializedName: "password",
        required: true,
        type: {
          name: "String"
        }
      }
    }
  }
};

export const OperationListResult: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "OperationListResult",
    modelProperties: {
      value: {
        serializedName: "value",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "OperationDefinition"
            }
          }
        }
      },
      nextLink: {
        serializedName: "nextLink",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const OperationDefinition: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "OperationDefinition",
    modelProperties: {
      origin: {
        serializedName: "origin",
        type: {
          name: "String"
        }
      },
      name: {
        serializedName: "name",
        type: {
          name: "String"
        }
      },
      display: {
        serializedName: "display",
        type: {
          name: "Composite",
          className: "OperationDisplayDefinition"
        }
      },
      isDataAction: {
        serializedName: "isDataAction",
        type: {
          name: "Boolean"
        }
      },
      serviceSpecification: {
        serializedName: "properties.serviceSpecification",
        type: {
          name: "Composite",
          className: "OperationServiceSpecificationDefinition"
        }
      }
    }
  }
};

export const OperationDisplayDefinition: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "OperationDisplayDefinition",
    modelProperties: {
      provider: {
        serializedName: "provider",
        type: {
          name: "String"
        }
      },
      resource: {
        serializedName: "resource",
        type: {
          name: "String"
        }
      },
      operation: {
        serializedName: "operation",
        type: {
          name: "String"
        }
      },
      description: {
        serializedName: "description",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const OperationServiceSpecificationDefinition: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "OperationServiceSpecificationDefinition",
    modelProperties: {
      metricSpecifications: {
        serializedName: "metricSpecifications",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "OperationMetricSpecificationDefinition"
            }
          }
        }
      },
      logSpecifications: {
        serializedName: "logSpecifications",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "OperationLogSpecificationDefinition"
            }
          }
        }
      }
    }
  }
};

export const OperationMetricSpecificationDefinition: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "OperationMetricSpecificationDefinition",
    modelProperties: {
      name: {
        serializedName: "name",
        type: {
          name: "String"
        }
      },
      displayName: {
        serializedName: "displayName",
        type: {
          name: "String"
        }
      },
      displayDescription: {
        serializedName: "displayDescription",
        type: {
          name: "String"
        }
      },
      unit: {
        serializedName: "unit",
        type: {
          name: "String"
        }
      },
      aggregationType: {
        serializedName: "aggregationType",
        type: {
          name: "String"
        }
      },
      internalMetricName: {
        serializedName: "internalMetricName",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const OperationLogSpecificationDefinition: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "OperationLogSpecificationDefinition",
    modelProperties: {
      name: {
        serializedName: "name",
        type: {
          name: "String"
        }
      },
      displayName: {
        serializedName: "displayName",
        type: {
          name: "String"
        }
      },
      blobDuration: {
        serializedName: "blobDuration",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const RegistryNameCheckRequest: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "RegistryNameCheckRequest",
    modelProperties: {
      name: {
        constraints: {
          Pattern: new RegExp("^[a-zA-Z0-9]*$"),
          MaxLength: 50,
          MinLength: 5
        },
        serializedName: "name",
        required: true,
        type: {
          name: "String"
        }
      },
      type: {
        defaultValue: "Microsoft.ContainerRegistry/registries",
        isConstant: true,
        serializedName: "type",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const RegistryNameStatus: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "RegistryNameStatus",
    modelProperties: {
      nameAvailable: {
        serializedName: "nameAvailable",
        type: {
          name: "Boolean"
        }
      },
      reason: {
        serializedName: "reason",
        type: {
          name: "String"
        }
      },
      message: {
        serializedName: "message",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const PrivateEndpointConnectionListResult: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "PrivateEndpointConnectionListResult",
    modelProperties: {
      value: {
        serializedName: "value",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "PrivateEndpointConnection"
            }
          }
        }
      },
      nextLink: {
        serializedName: "nextLink",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const PrivateEndpoint: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "PrivateEndpoint",
    modelProperties: {
      id: {
        serializedName: "id",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const PrivateLinkServiceConnectionState: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "PrivateLinkServiceConnectionState",
    modelProperties: {
      status: {
        serializedName: "status",
        type: {
          name: "String"
        }
      },
      description: {
        serializedName: "description",
        type: {
          name: "String"
        }
      },
      actionsRequired: {
        serializedName: "actionsRequired",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const ProxyResource: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "ProxyResource",
    modelProperties: {
      id: {
        serializedName: "id",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      name: {
        serializedName: "name",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      type: {
        serializedName: "type",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      systemData: {
        serializedName: "systemData",
        type: {
          name: "Composite",
          className: "SystemData"
        }
      }
    }
  }
};

export const SystemData: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "SystemData",
    modelProperties: {
      createdBy: {
        serializedName: "createdBy",
        type: {
          name: "String"
        }
      },
      createdByType: {
        serializedName: "createdByType",
        type: {
          name: "String"
        }
      },
      createdAt: {
        serializedName: "createdAt",
        type: {
          name: "DateTime"
        }
      },
      lastModifiedBy: {
        serializedName: "lastModifiedBy",
        type: {
          name: "String"
        }
      },
      lastModifiedByType: {
        serializedName: "lastModifiedByType",
        type: {
          name: "String"
        }
      },
      lastModifiedAt: {
        serializedName: "lastModifiedAt",
        type: {
          name: "DateTime"
        }
      }
    }
  }
};

export const RegistryListResult: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "RegistryListResult",
    modelProperties: {
      value: {
        serializedName: "value",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "Registry"
            }
          }
        }
      },
      nextLink: {
        serializedName: "nextLink",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const Sku: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "Sku",
    modelProperties: {
      name: {
        serializedName: "name",
        required: true,
        type: {
          name: "String"
        }
      },
      tier: {
        serializedName: "tier",
        readOnly: true,
        type: {
          name: "String"
        }
      }
    }
  }
};

export const IdentityProperties: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "IdentityProperties",
    modelProperties: {
      principalId: {
        serializedName: "principalId",
        type: {
          name: "String"
        }
      },
      tenantId: {
        serializedName: "tenantId",
        type: {
          name: "String"
        }
      },
      type: {
        serializedName: "type",
        type: {
          name: "Enum",
          allowedValues: [
            "SystemAssigned",
            "UserAssigned",
            "SystemAssigned, UserAssigned",
            "None"
          ]
        }
      },
      userAssignedIdentities: {
        serializedName: "userAssignedIdentities",
        type: {
          name: "Dictionary",
          value: {
            type: { name: "Composite", className: "UserIdentityProperties" }
          }
        }
      }
    }
  }
};

export const UserIdentityProperties: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "UserIdentityProperties",
    modelProperties: {
      principalId: {
        serializedName: "principalId",
        type: {
          name: "String"
        }
      },
      clientId: {
        serializedName: "clientId",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const Status: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "Status",
    modelProperties: {
      displayStatus: {
        serializedName: "displayStatus",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      message: {
        serializedName: "message",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      timestamp: {
        serializedName: "timestamp",
        readOnly: true,
        type: {
          name: "DateTime"
        }
      }
    }
  }
};

export const NetworkRuleSet: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "NetworkRuleSet",
    modelProperties: {
      defaultAction: {
        defaultValue: "Allow",
        serializedName: "defaultAction",
        required: true,
        type: {
          name: "String"
        }
      },
      ipRules: {
        serializedName: "ipRules",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "IPRule"
            }
          }
        }
      }
    }
  }
};

export const IPRule: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "IPRule",
    modelProperties: {
      action: {
        defaultValue: "Allow",
        serializedName: "action",
        type: {
          name: "String"
        }
      },
      iPAddressOrRange: {
        serializedName: "value",
        required: true,
        type: {
          name: "String"
        }
      }
    }
  }
};

export const Policies: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "Policies",
    modelProperties: {
      quarantinePolicy: {
        serializedName: "quarantinePolicy",
        type: {
          name: "Composite",
          className: "QuarantinePolicy"
        }
      },
      trustPolicy: {
        serializedName: "trustPolicy",
        type: {
          name: "Composite",
          className: "TrustPolicy"
        }
      },
      retentionPolicy: {
        serializedName: "retentionPolicy",
        type: {
          name: "Composite",
          className: "RetentionPolicy"
        }
      },
      exportPolicy: {
        serializedName: "exportPolicy",
        type: {
          name: "Composite",
          className: "ExportPolicy"
        }
      }
    }
  }
};

export const QuarantinePolicy: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "QuarantinePolicy",
    modelProperties: {
      status: {
        serializedName: "status",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const TrustPolicy: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "TrustPolicy",
    modelProperties: {
      type: {
        defaultValue: "Notary",
        serializedName: "type",
        type: {
          name: "String"
        }
      },
      status: {
        serializedName: "status",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const RetentionPolicy: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "RetentionPolicy",
    modelProperties: {
      days: {
        defaultValue: 7,
        serializedName: "days",
        type: {
          name: "Number"
        }
      },
      lastUpdatedTime: {
        serializedName: "lastUpdatedTime",
        readOnly: true,
        type: {
          name: "DateTime"
        }
      },
      status: {
        serializedName: "status",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const ExportPolicy: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "ExportPolicy",
    modelProperties: {
      status: {
        defaultValue: "enabled",
        serializedName: "status",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const EncryptionProperty: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "EncryptionProperty",
    modelProperties: {
      status: {
        serializedName: "status",
        type: {
          name: "String"
        }
      },
      keyVaultProperties: {
        serializedName: "keyVaultProperties",
        type: {
          name: "Composite",
          className: "KeyVaultProperties"
        }
      }
    }
  }
};

export const KeyVaultProperties: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "KeyVaultProperties",
    modelProperties: {
      keyIdentifier: {
        serializedName: "keyIdentifier",
        type: {
          name: "String"
        }
      },
      versionedKeyIdentifier: {
        serializedName: "versionedKeyIdentifier",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      identity: {
        serializedName: "identity",
        type: {
          name: "String"
        }
      },
      keyRotationEnabled: {
        serializedName: "keyRotationEnabled",
        readOnly: true,
        type: {
          name: "Boolean"
        }
      },
      lastKeyRotationTimestamp: {
        serializedName: "lastKeyRotationTimestamp",
        readOnly: true,
        type: {
          name: "DateTime"
        }
      }
    }
  }
};

export const Resource: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "Resource",
    modelProperties: {
      id: {
        serializedName: "id",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      name: {
        serializedName: "name",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      type: {
        serializedName: "type",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      location: {
        serializedName: "location",
        required: true,
        type: {
          name: "String"
        }
      },
      tags: {
        serializedName: "tags",
        type: {
          name: "Dictionary",
          value: { type: { name: "String" } }
        }
      },
      systemData: {
        serializedName: "systemData",
        type: {
          name: "Composite",
          className: "SystemData"
        }
      }
    }
  }
};

export const RegistryUpdateParameters: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "RegistryUpdateParameters",
    modelProperties: {
      identity: {
        serializedName: "identity",
        type: {
          name: "Composite",
          className: "IdentityProperties"
        }
      },
      tags: {
        serializedName: "tags",
        type: {
          name: "Dictionary",
          value: { type: { name: "String" } }
        }
      },
      sku: {
        serializedName: "sku",
        type: {
          name: "Composite",
          className: "Sku"
        }
      },
      adminUserEnabled: {
        serializedName: "properties.adminUserEnabled",
        type: {
          name: "Boolean"
        }
      },
      networkRuleSet: {
        serializedName: "properties.networkRuleSet",
        type: {
          name: "Composite",
          className: "NetworkRuleSet"
        }
      },
      policies: {
        serializedName: "properties.policies",
        type: {
          name: "Composite",
          className: "Policies"
        }
      },
      encryption: {
        serializedName: "properties.encryption",
        type: {
          name: "Composite",
          className: "EncryptionProperty"
        }
      },
      dataEndpointEnabled: {
        serializedName: "properties.dataEndpointEnabled",
        type: {
          name: "Boolean"
        }
      },
      publicNetworkAccess: {
        serializedName: "properties.publicNetworkAccess",
        type: {
          name: "String"
        }
      },
      networkRuleBypassOptions: {
        serializedName: "properties.networkRuleBypassOptions",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const RegistryUsageListResult: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "RegistryUsageListResult",
    modelProperties: {
      value: {
        serializedName: "value",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "RegistryUsage"
            }
          }
        }
      }
    }
  }
};

export const RegistryUsage: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "RegistryUsage",
    modelProperties: {
      name: {
        serializedName: "name",
        type: {
          name: "String"
        }
      },
      limit: {
        serializedName: "limit",
        type: {
          name: "Number"
        }
      },
      currentValue: {
        serializedName: "currentValue",
        type: {
          name: "Number"
        }
      },
      unit: {
        serializedName: "unit",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const PrivateLinkResourceListResult: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "PrivateLinkResourceListResult",
    modelProperties: {
      value: {
        serializedName: "value",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "PrivateLinkResource"
            }
          }
        }
      },
      nextLink: {
        serializedName: "nextLink",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const PrivateLinkResource: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "PrivateLinkResource",
    modelProperties: {
      type: {
        serializedName: "type",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      id: {
        serializedName: "id",
        type: {
          name: "String"
        }
      },
      name: {
        serializedName: "name",
        type: {
          name: "String"
        }
      },
      groupId: {
        serializedName: "properties.groupId",
        type: {
          name: "String"
        }
      },
      requiredMembers: {
        serializedName: "properties.requiredMembers",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "String"
            }
          }
        }
      },
      requiredZoneNames: {
        serializedName: "properties.requiredZoneNames",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "String"
            }
          }
        }
      }
    }
  }
};

export const ErrorResponse: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "ErrorResponse",
    modelProperties: {
      error: {
        serializedName: "error",
        type: {
          name: "Composite",
          className: "ErrorResponseBody"
        }
      }
    }
  }
};

export const ErrorResponseBody: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "ErrorResponseBody",
    modelProperties: {
      code: {
        serializedName: "code",
        required: true,
        type: {
          name: "String"
        }
      },
      message: {
        serializedName: "message",
        required: true,
        type: {
          name: "String"
        }
      },
      target: {
        serializedName: "target",
        type: {
          name: "String"
        }
      },
      details: {
        serializedName: "details",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "InnerErrorDescription"
            }
          }
        }
      }
    }
  }
};

export const InnerErrorDescription: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "InnerErrorDescription",
    modelProperties: {
      code: {
        serializedName: "code",
        required: true,
        type: {
          name: "String"
        }
      },
      message: {
        serializedName: "message",
        required: true,
        type: {
          name: "String"
        }
      },
      target: {
        serializedName: "target",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const RegistryListCredentialsResult: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "RegistryListCredentialsResult",
    modelProperties: {
      username: {
        serializedName: "username",
        type: {
          name: "String"
        }
      },
      passwords: {
        serializedName: "passwords",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "RegistryPassword"
            }
          }
        }
      }
    }
  }
};

export const RegistryPassword: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "RegistryPassword",
    modelProperties: {
      name: {
        serializedName: "name",
        type: {
          name: "Enum",
          allowedValues: ["password", "password2"]
        }
      },
      value: {
        serializedName: "value",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const RegenerateCredentialParameters: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "RegenerateCredentialParameters",
    modelProperties: {
      name: {
        serializedName: "name",
        required: true,
        type: {
          name: "Enum",
          allowedValues: ["password", "password2"]
        }
      }
    }
  }
};

export const ReplicationListResult: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "ReplicationListResult",
    modelProperties: {
      value: {
        serializedName: "value",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "Replication"
            }
          }
        }
      },
      nextLink: {
        serializedName: "nextLink",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const ReplicationUpdateParameters: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "ReplicationUpdateParameters",
    modelProperties: {
      tags: {
        serializedName: "tags",
        type: {
          name: "Dictionary",
          value: { type: { name: "String" } }
        }
      },
      regionEndpointEnabled: {
        serializedName: "properties.regionEndpointEnabled",
        type: {
          name: "Boolean"
        }
      }
    }
  }
};

export const ScopeMapListResult: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "ScopeMapListResult",
    modelProperties: {
      value: {
        serializedName: "value",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "ScopeMap"
            }
          }
        }
      },
      nextLink: {
        serializedName: "nextLink",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const ScopeMapUpdateParameters: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "ScopeMapUpdateParameters",
    modelProperties: {
      description: {
        serializedName: "properties.description",
        type: {
          name: "String"
        }
      },
      actions: {
        serializedName: "properties.actions",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "String"
            }
          }
        }
      }
    }
  }
};

export const TokenListResult: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "TokenListResult",
    modelProperties: {
      value: {
        serializedName: "value",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "Token"
            }
          }
        }
      },
      nextLink: {
        serializedName: "nextLink",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const TokenCredentialsProperties: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "TokenCredentialsProperties",
    modelProperties: {
      certificates: {
        serializedName: "certificates",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "TokenCertificate"
            }
          }
        }
      },
      passwords: {
        serializedName: "passwords",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "TokenPassword"
            }
          }
        }
      }
    }
  }
};

export const TokenCertificate: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "TokenCertificate",
    modelProperties: {
      name: {
        serializedName: "name",
        type: {
          name: "String"
        }
      },
      expiry: {
        serializedName: "expiry",
        type: {
          name: "DateTime"
        }
      },
      thumbprint: {
        serializedName: "thumbprint",
        type: {
          name: "String"
        }
      },
      encodedPemCertificate: {
        serializedName: "encodedPemCertificate",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const TokenPassword: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "TokenPassword",
    modelProperties: {
      creationTime: {
        serializedName: "creationTime",
        type: {
          name: "DateTime"
        }
      },
      expiry: {
        serializedName: "expiry",
        type: {
          name: "DateTime"
        }
      },
      name: {
        serializedName: "name",
        type: {
          name: "String"
        }
      },
      value: {
        serializedName: "value",
        readOnly: true,
        type: {
          name: "String"
        }
      }
    }
  }
};

export const TokenUpdateParameters: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "TokenUpdateParameters",
    modelProperties: {
      scopeMapId: {
        serializedName: "properties.scopeMapId",
        type: {
          name: "String"
        }
      },
      status: {
        serializedName: "properties.status",
        type: {
          name: "String"
        }
      },
      credentials: {
        serializedName: "properties.credentials",
        type: {
          name: "Composite",
          className: "TokenCredentialsProperties"
        }
      }
    }
  }
};

export const GenerateCredentialsParameters: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "GenerateCredentialsParameters",
    modelProperties: {
      tokenId: {
        serializedName: "tokenId",
        type: {
          name: "String"
        }
      },
      expiry: {
        serializedName: "expiry",
        type: {
          name: "DateTime"
        }
      },
      name: {
        serializedName: "name",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const GenerateCredentialsResult: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "GenerateCredentialsResult",
    modelProperties: {
      username: {
        serializedName: "username",
        type: {
          name: "String"
        }
      },
      passwords: {
        serializedName: "passwords",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "TokenPassword"
            }
          }
        }
      }
    }
  }
};

export const WebhookListResult: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "WebhookListResult",
    modelProperties: {
      value: {
        serializedName: "value",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "Webhook"
            }
          }
        }
      },
      nextLink: {
        serializedName: "nextLink",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const WebhookCreateParameters: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "WebhookCreateParameters",
    modelProperties: {
      tags: {
        serializedName: "tags",
        type: {
          name: "Dictionary",
          value: { type: { name: "String" } }
        }
      },
      location: {
        serializedName: "location",
        required: true,
        type: {
          name: "String"
        }
      },
      serviceUri: {
        serializedName: "properties.serviceUri",
        type: {
          name: "String"
        }
      },
      customHeaders: {
        serializedName: "properties.customHeaders",
        type: {
          name: "Dictionary",
          value: { type: { name: "String" } }
        }
      },
      status: {
        serializedName: "properties.status",
        type: {
          name: "String"
        }
      },
      scope: {
        serializedName: "properties.scope",
        type: {
          name: "String"
        }
      },
      actions: {
        serializedName: "properties.actions",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "String"
            }
          }
        }
      }
    }
  }
};

export const WebhookUpdateParameters: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "WebhookUpdateParameters",
    modelProperties: {
      tags: {
        serializedName: "tags",
        type: {
          name: "Dictionary",
          value: { type: { name: "String" } }
        }
      },
      serviceUri: {
        serializedName: "properties.serviceUri",
        type: {
          name: "String"
        }
      },
      customHeaders: {
        serializedName: "properties.customHeaders",
        type: {
          name: "Dictionary",
          value: { type: { name: "String" } }
        }
      },
      status: {
        serializedName: "properties.status",
        type: {
          name: "String"
        }
      },
      scope: {
        serializedName: "properties.scope",
        type: {
          name: "String"
        }
      },
      actions: {
        serializedName: "properties.actions",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "String"
            }
          }
        }
      }
    }
  }
};

export const EventInfo: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "EventInfo",
    modelProperties: {
      id: {
        serializedName: "id",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const EventListResult: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "EventListResult",
    modelProperties: {
      value: {
        serializedName: "value",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "Event"
            }
          }
        }
      },
      nextLink: {
        serializedName: "nextLink",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const EventRequestMessage: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "EventRequestMessage",
    modelProperties: {
      content: {
        serializedName: "content",
        type: {
          name: "Composite",
          className: "EventContent"
        }
      },
      headers: {
        serializedName: "headers",
        type: {
          name: "Dictionary",
          value: { type: { name: "String" } }
        }
      },
      method: {
        serializedName: "method",
        type: {
          name: "String"
        }
      },
      requestUri: {
        serializedName: "requestUri",
        type: {
          name: "String"
        }
      },
      version: {
        serializedName: "version",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const EventContent: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "EventContent",
    modelProperties: {
      id: {
        serializedName: "id",
        type: {
          name: "String"
        }
      },
      timestamp: {
        serializedName: "timestamp",
        type: {
          name: "DateTime"
        }
      },
      action: {
        serializedName: "action",
        type: {
          name: "String"
        }
      },
      target: {
        serializedName: "target",
        type: {
          name: "Composite",
          className: "Target"
        }
      },
      request: {
        serializedName: "request",
        type: {
          name: "Composite",
          className: "Request"
        }
      },
      actor: {
        serializedName: "actor",
        type: {
          name: "Composite",
          className: "Actor"
        }
      },
      source: {
        serializedName: "source",
        type: {
          name: "Composite",
          className: "Source"
        }
      }
    }
  }
};

export const Target: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "Target",
    modelProperties: {
      mediaType: {
        serializedName: "mediaType",
        type: {
          name: "String"
        }
      },
      size: {
        serializedName: "size",
        type: {
          name: "Number"
        }
      },
      digest: {
        serializedName: "digest",
        type: {
          name: "String"
        }
      },
      length: {
        serializedName: "length",
        type: {
          name: "Number"
        }
      },
      repository: {
        serializedName: "repository",
        type: {
          name: "String"
        }
      },
      url: {
        serializedName: "url",
        type: {
          name: "String"
        }
      },
      tag: {
        serializedName: "tag",
        type: {
          name: "String"
        }
      },
      name: {
        serializedName: "name",
        type: {
          name: "String"
        }
      },
      version: {
        serializedName: "version",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const Request: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "Request",
    modelProperties: {
      id: {
        serializedName: "id",
        type: {
          name: "String"
        }
      },
      addr: {
        serializedName: "addr",
        type: {
          name: "String"
        }
      },
      host: {
        serializedName: "host",
        type: {
          name: "String"
        }
      },
      method: {
        serializedName: "method",
        type: {
          name: "String"
        }
      },
      useragent: {
        serializedName: "useragent",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const Actor: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "Actor",
    modelProperties: {
      name: {
        serializedName: "name",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const Source: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "Source",
    modelProperties: {
      addr: {
        serializedName: "addr",
        type: {
          name: "String"
        }
      },
      instanceID: {
        serializedName: "instanceID",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const EventResponseMessage: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "EventResponseMessage",
    modelProperties: {
      content: {
        serializedName: "content",
        type: {
          name: "String"
        }
      },
      headers: {
        serializedName: "headers",
        type: {
          name: "Dictionary",
          value: { type: { name: "String" } }
        }
      },
      reasonPhrase: {
        serializedName: "reasonPhrase",
        type: {
          name: "String"
        }
      },
      statusCode: {
        serializedName: "statusCode",
        type: {
          name: "String"
        }
      },
      version: {
        serializedName: "version",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const CallbackConfig: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "CallbackConfig",
    modelProperties: {
      serviceUri: {
        serializedName: "serviceUri",
        required: true,
        type: {
          name: "String"
        }
      },
      customHeaders: {
        serializedName: "customHeaders",
        type: {
          name: "Dictionary",
          value: { type: { name: "String" } }
        }
      }
    }
  }
};

export const StorageAccountProperties: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "StorageAccountProperties",
    modelProperties: {
      id: {
        serializedName: "id",
        required: true,
        type: {
          name: "String"
        }
      }
    }
  }
};

export const PackageType: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "PackageType",
    modelProperties: {
      name: {
        serializedName: "name",
        type: {
          name: "String"
        }
      },
      endpoint: {
        serializedName: "endpoint",
        readOnly: true,
        type: {
          name: "String"
        }
      }
    }
  }
};

export const ActiveDirectoryObject: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "ActiveDirectoryObject",
    modelProperties: {
      objectId: {
        serializedName: "objectId",
        type: {
          name: "String"
        }
      },
      tenantId: {
        serializedName: "tenantId",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const PrivateEndpointConnection: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "PrivateEndpointConnection",
    modelProperties: {
      ...ProxyResource.type.modelProperties,
      privateEndpoint: {
        serializedName: "properties.privateEndpoint",
        type: {
          name: "Composite",
          className: "PrivateEndpoint"
        }
      },
      privateLinkServiceConnectionState: {
        serializedName: "properties.privateLinkServiceConnectionState",
        type: {
          name: "Composite",
          className: "PrivateLinkServiceConnectionState"
        }
      },
      provisioningState: {
        serializedName: "properties.provisioningState",
        readOnly: true,
        type: {
          name: "String"
        }
      }
    }
  }
};

export const ScopeMap: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "ScopeMap",
    modelProperties: {
      ...ProxyResource.type.modelProperties,
      description: {
        serializedName: "properties.description",
        type: {
          name: "String"
        }
      },
      typePropertiesType: {
        serializedName: "properties.type",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      creationDate: {
        serializedName: "properties.creationDate",
        readOnly: true,
        type: {
          name: "DateTime"
        }
      },
      provisioningState: {
        serializedName: "properties.provisioningState",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      actions: {
        serializedName: "properties.actions",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "String"
            }
          }
        }
      }
    }
  }
};

export const Token: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "Token",
    modelProperties: {
      ...ProxyResource.type.modelProperties,
      creationDate: {
        serializedName: "properties.creationDate",
        readOnly: true,
        type: {
          name: "DateTime"
        }
      },
      provisioningState: {
        serializedName: "properties.provisioningState",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      scopeMapId: {
        serializedName: "properties.scopeMapId",
        type: {
          name: "String"
        }
      },
      credentials: {
        serializedName: "properties.credentials",
        type: {
          name: "Composite",
          className: "TokenCredentialsProperties"
        }
      },
      status: {
        serializedName: "properties.status",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const Registry: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "Registry",
    modelProperties: {
      ...Resource.type.modelProperties,
      sku: {
        serializedName: "sku",
        type: {
          name: "Composite",
          className: "Sku"
        }
      },
      identity: {
        serializedName: "identity",
        type: {
          name: "Composite",
          className: "IdentityProperties"
        }
      },
      loginServer: {
        serializedName: "properties.loginServer",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      creationDate: {
        serializedName: "properties.creationDate",
        readOnly: true,
        type: {
          name: "DateTime"
        }
      },
      provisioningState: {
        serializedName: "properties.provisioningState",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      status: {
        serializedName: "properties.status",
        type: {
          name: "Composite",
          className: "Status"
        }
      },
      adminUserEnabled: {
        defaultValue: false,
        serializedName: "properties.adminUserEnabled",
        type: {
          name: "Boolean"
        }
      },
      networkRuleSet: {
        serializedName: "properties.networkRuleSet",
        type: {
          name: "Composite",
          className: "NetworkRuleSet"
        }
      },
      policies: {
        serializedName: "properties.policies",
        type: {
          name: "Composite",
          className: "Policies"
        }
      },
      encryption: {
        serializedName: "properties.encryption",
        type: {
          name: "Composite",
          className: "EncryptionProperty"
        }
      },
      dataEndpointEnabled: {
        serializedName: "properties.dataEndpointEnabled",
        type: {
          name: "Boolean"
        }
      },
      dataEndpointHostNames: {
        serializedName: "properties.dataEndpointHostNames",
        readOnly: true,
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "String"
            }
          }
        }
      },
      privateEndpointConnections: {
        serializedName: "properties.privateEndpointConnections",
        readOnly: true,
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "PrivateEndpointConnection"
            }
          }
        }
      },
      publicNetworkAccess: {
        serializedName: "properties.publicNetworkAccess",
        type: {
          name: "String"
        }
      },
      networkRuleBypassOptions: {
        serializedName: "properties.networkRuleBypassOptions",
        type: {
          name: "String"
        }
      },
      zoneRedundancy: {
        serializedName: "properties.zoneRedundancy",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const Replication: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "Replication",
    modelProperties: {
      ...Resource.type.modelProperties,
      provisioningState: {
        serializedName: "properties.provisioningState",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      status: {
        serializedName: "properties.status",
        type: {
          name: "Composite",
          className: "Status"
        }
      },
      regionEndpointEnabled: {
        defaultValue: true,
        serializedName: "properties.regionEndpointEnabled",
        type: {
          name: "Boolean"
        }
      },
      zoneRedundancy: {
        serializedName: "properties.zoneRedundancy",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const Webhook: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "Webhook",
    modelProperties: {
      ...Resource.type.modelProperties,
      status: {
        serializedName: "properties.status",
        type: {
          name: "String"
        }
      },
      scope: {
        serializedName: "properties.scope",
        type: {
          name: "String"
        }
      },
      actions: {
        serializedName: "properties.actions",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "String"
            }
          }
        }
      },
      provisioningState: {
        serializedName: "properties.provisioningState",
        readOnly: true,
        type: {
          name: "String"
        }
      }
    }
  }
};

export const Event: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "Event",
    modelProperties: {
      ...EventInfo.type.modelProperties,
      eventRequestMessage: {
        serializedName: "eventRequestMessage",
        type: {
          name: "Composite",
          className: "EventRequestMessage"
        }
      },
      eventResponseMessage: {
        serializedName: "eventResponseMessage",
        type: {
          name: "Composite",
          className: "EventResponseMessage"
        }
      }
    }
  }
};

export const RegistriesImportImageHeaders: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "RegistriesImportImageHeaders",
    modelProperties: {
      location: {
        serializedName: "location",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const RegistriesCreateHeaders: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "RegistriesCreateHeaders",
    modelProperties: {
      azureAsyncOperation: {
        serializedName: "azure-asyncoperation",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const RegistriesDeleteHeaders: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "RegistriesDeleteHeaders",
    modelProperties: {
      location: {
        serializedName: "location",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const RegistriesUpdateHeaders: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "RegistriesUpdateHeaders",
    modelProperties: {
      azureAsyncOperation: {
        serializedName: "azure-asyncoperation",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const RegistriesGenerateCredentialsHeaders: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "RegistriesGenerateCredentialsHeaders",
    modelProperties: {
      location: {
        serializedName: "location",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const PrivateEndpointConnectionsCreateOrUpdateHeaders: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "PrivateEndpointConnectionsCreateOrUpdateHeaders",
    modelProperties: {
      azureAsyncOperation: {
        serializedName: "azure-asyncoperation",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const PrivateEndpointConnectionsDeleteHeaders: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "PrivateEndpointConnectionsDeleteHeaders",
    modelProperties: {
      location: {
        serializedName: "location",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const ReplicationsCreateHeaders: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "ReplicationsCreateHeaders",
    modelProperties: {
      azureAsyncOperation: {
        serializedName: "azure-asyncoperation",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const ReplicationsDeleteHeaders: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "ReplicationsDeleteHeaders",
    modelProperties: {
      location: {
        serializedName: "location",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const ReplicationsUpdateHeaders: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "ReplicationsUpdateHeaders",
    modelProperties: {
      azureAsyncOperation: {
        serializedName: "azure-asyncoperation",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const ScopeMapsCreateHeaders: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "ScopeMapsCreateHeaders",
    modelProperties: {
      azureAsyncOperation: {
        serializedName: "azure-asyncoperation",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const ScopeMapsDeleteHeaders: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "ScopeMapsDeleteHeaders",
    modelProperties: {
      location: {
        serializedName: "location",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const ScopeMapsUpdateHeaders: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "ScopeMapsUpdateHeaders",
    modelProperties: {
      azureAsyncOperation: {
        serializedName: "azure-asyncoperation",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const TokensCreateHeaders: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "TokensCreateHeaders",
    modelProperties: {
      azureAsyncOperation: {
        serializedName: "azure-asyncoperation",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const TokensDeleteHeaders: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "TokensDeleteHeaders",
    modelProperties: {
      location: {
        serializedName: "location",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const TokensUpdateHeaders: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "TokensUpdateHeaders",
    modelProperties: {
      azureAsyncOperation: {
        serializedName: "azure-asyncoperation",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const WebhooksCreateHeaders: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "WebhooksCreateHeaders",
    modelProperties: {
      azureAsyncOperation: {
        serializedName: "azure-asyncoperation",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const WebhooksDeleteHeaders: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "WebhooksDeleteHeaders",
    modelProperties: {
      location: {
        serializedName: "location",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const WebhooksUpdateHeaders: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "WebhooksUpdateHeaders",
    modelProperties: {
      azureAsyncOperation: {
        serializedName: "azure-asyncoperation",
        type: {
          name: "String"
        }
      }
    }
  }
};
