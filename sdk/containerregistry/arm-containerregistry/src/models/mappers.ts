/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */

import * as coreClient from "@azure/core-client";

export const ConnectedRegistryListResult: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "ConnectedRegistryListResult",
    modelProperties: {
      value: {
        serializedName: "value",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "ConnectedRegistry"
            }
          }
        }
      },
      nextLink: {
        serializedName: "nextLink",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const ActivationProperties: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "ActivationProperties",
    modelProperties: {
      status: {
        serializedName: "status",
        readOnly: true,
        type: {
          name: "String"
        }
      }
    }
  }
};

export const ParentProperties: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "ParentProperties",
    modelProperties: {
      id: {
        serializedName: "id",
        type: {
          name: "String"
        }
      },
      syncProperties: {
        serializedName: "syncProperties",
        type: {
          name: "Composite",
          className: "SyncProperties"
        }
      }
    }
  }
};

export const SyncProperties: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "SyncProperties",
    modelProperties: {
      tokenId: {
        serializedName: "tokenId",
        required: true,
        type: {
          name: "String"
        }
      },
      schedule: {
        serializedName: "schedule",
        type: {
          name: "String"
        }
      },
      syncWindow: {
        serializedName: "syncWindow",
        type: {
          name: "TimeSpan"
        }
      },
      messageTtl: {
        serializedName: "messageTtl",
        required: true,
        type: {
          name: "TimeSpan"
        }
      },
      lastSyncTime: {
        serializedName: "lastSyncTime",
        readOnly: true,
        type: {
          name: "DateTime"
        }
      },
      gatewayEndpoint: {
        serializedName: "gatewayEndpoint",
        readOnly: true,
        type: {
          name: "String"
        }
      }
    }
  }
};

export const LoginServerProperties: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "LoginServerProperties",
    modelProperties: {
      host: {
        serializedName: "host",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      tls: {
        serializedName: "tls",
        type: {
          name: "Composite",
          className: "TlsProperties"
        }
      }
    }
  }
};

export const TlsProperties: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "TlsProperties",
    modelProperties: {
      status: {
        serializedName: "status",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      certificate: {
        serializedName: "certificate",
        type: {
          name: "Composite",
          className: "TlsCertificateProperties"
        }
      }
    }
  }
};

export const TlsCertificateProperties: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "TlsCertificateProperties",
    modelProperties: {
      type: {
        serializedName: "type",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      location: {
        serializedName: "location",
        readOnly: true,
        type: {
          name: "String"
        }
      }
    }
  }
};

export const LoggingProperties: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "LoggingProperties",
    modelProperties: {
      logLevel: {
        defaultValue: "Information",
        serializedName: "logLevel",
        type: {
          name: "String"
        }
      },
      auditLogStatus: {
        defaultValue: "Disabled",
        serializedName: "auditLogStatus",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const StatusDetailProperties: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "StatusDetailProperties",
    modelProperties: {
      type: {
        serializedName: "type",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      code: {
        serializedName: "code",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      description: {
        serializedName: "description",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      timestamp: {
        serializedName: "timestamp",
        readOnly: true,
        type: {
          name: "DateTime"
        }
      },
      correlationId: {
        serializedName: "correlationId",
        readOnly: true,
        type: {
          name: "String"
        }
      }
    }
  }
};

export const ProxyResource: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "ProxyResource",
    modelProperties: {
      id: {
        serializedName: "id",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      name: {
        serializedName: "name",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      type: {
        serializedName: "type",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      systemData: {
        serializedName: "systemData",
        type: {
          name: "Composite",
          className: "SystemData"
        }
      }
    }
  }
};

export const SystemData: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "SystemData",
    modelProperties: {
      createdBy: {
        serializedName: "createdBy",
        type: {
          name: "String"
        }
      },
      createdByType: {
        serializedName: "createdByType",
        type: {
          name: "String"
        }
      },
      createdAt: {
        serializedName: "createdAt",
        type: {
          name: "DateTime"
        }
      },
      lastModifiedBy: {
        serializedName: "lastModifiedBy",
        type: {
          name: "String"
        }
      },
      lastModifiedByType: {
        serializedName: "lastModifiedByType",
        type: {
          name: "String"
        }
      },
      lastModifiedAt: {
        serializedName: "lastModifiedAt",
        type: {
          name: "DateTime"
        }
      }
    }
  }
};

export const ErrorResponse: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "ErrorResponse",
    modelProperties: {
      error: {
        serializedName: "error",
        type: {
          name: "Composite",
          className: "ErrorResponseBody"
        }
      }
    }
  }
};

export const ErrorResponseBody: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "ErrorResponseBody",
    modelProperties: {
      code: {
        serializedName: "code",
        required: true,
        type: {
          name: "String"
        }
      },
      message: {
        serializedName: "message",
        required: true,
        type: {
          name: "String"
        }
      },
      target: {
        serializedName: "target",
        type: {
          name: "String"
        }
      },
      details: {
        serializedName: "details",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "InnerErrorDescription"
            }
          }
        }
      }
    }
  }
};

export const InnerErrorDescription: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "InnerErrorDescription",
    modelProperties: {
      code: {
        serializedName: "code",
        required: true,
        type: {
          name: "String"
        }
      },
      message: {
        serializedName: "message",
        required: true,
        type: {
          name: "String"
        }
      },
      target: {
        serializedName: "target",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const ConnectedRegistryUpdateParameters: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "ConnectedRegistryUpdateParameters",
    modelProperties: {
      syncProperties: {
        serializedName: "properties.syncProperties",
        type: {
          name: "Composite",
          className: "SyncUpdateProperties"
        }
      },
      logging: {
        serializedName: "properties.logging",
        type: {
          name: "Composite",
          className: "LoggingProperties"
        }
      },
      clientTokenIds: {
        serializedName: "properties.clientTokenIds",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "String"
            }
          }
        }
      },
      notificationsList: {
        serializedName: "properties.notificationsList",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "String"
            }
          }
        }
      }
    }
  }
};

export const SyncUpdateProperties: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "SyncUpdateProperties",
    modelProperties: {
      schedule: {
        serializedName: "schedule",
        type: {
          name: "String"
        }
      },
      syncWindow: {
        serializedName: "syncWindow",
        type: {
          name: "TimeSpan"
        }
      },
      messageTtl: {
        serializedName: "messageTtl",
        type: {
          name: "TimeSpan"
        }
      }
    }
  }
};

export const ExportPipelineListResult: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "ExportPipelineListResult",
    modelProperties: {
      value: {
        serializedName: "value",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "ExportPipeline"
            }
          }
        }
      },
      nextLink: {
        serializedName: "nextLink",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const IdentityProperties: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "IdentityProperties",
    modelProperties: {
      principalId: {
        serializedName: "principalId",
        type: {
          name: "String"
        }
      },
      tenantId: {
        serializedName: "tenantId",
        type: {
          name: "String"
        }
      },
      type: {
        serializedName: "type",
        type: {
          name: "Enum",
          allowedValues: [
            "SystemAssigned",
            "UserAssigned",
            "SystemAssigned, UserAssigned",
            "None"
          ]
        }
      },
      userAssignedIdentities: {
        serializedName: "userAssignedIdentities",
        type: {
          name: "Dictionary",
          value: {
            type: { name: "Composite", className: "UserIdentityProperties" }
          }
        }
      }
    }
  }
};

export const UserIdentityProperties: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "UserIdentityProperties",
    modelProperties: {
      principalId: {
        serializedName: "principalId",
        type: {
          name: "String"
        }
      },
      clientId: {
        serializedName: "clientId",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const ExportPipelineTargetProperties: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "ExportPipelineTargetProperties",
    modelProperties: {
      type: {
        serializedName: "type",
        type: {
          name: "String"
        }
      },
      uri: {
        serializedName: "uri",
        type: {
          name: "String"
        }
      },
      keyVaultUri: {
        serializedName: "keyVaultUri",
        required: true,
        type: {
          name: "String"
        }
      }
    }
  }
};

export const ImportImageParameters: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "ImportImageParameters",
    modelProperties: {
      source: {
        serializedName: "source",
        type: {
          name: "Composite",
          className: "ImportSource"
        }
      },
      targetTags: {
        serializedName: "targetTags",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "String"
            }
          }
        }
      },
      untaggedTargetRepositories: {
        serializedName: "untaggedTargetRepositories",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "String"
            }
          }
        }
      },
      mode: {
        defaultValue: "NoForce",
        serializedName: "mode",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const ImportSource: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "ImportSource",
    modelProperties: {
      resourceId: {
        serializedName: "resourceId",
        type: {
          name: "String"
        }
      },
      registryUri: {
        serializedName: "registryUri",
        type: {
          name: "String"
        }
      },
      credentials: {
        serializedName: "credentials",
        type: {
          name: "Composite",
          className: "ImportSourceCredentials"
        }
      },
      sourceImage: {
        serializedName: "sourceImage",
        required: true,
        type: {
          name: "String"
        }
      }
    }
  }
};

export const ImportSourceCredentials: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "ImportSourceCredentials",
    modelProperties: {
      username: {
        serializedName: "username",
        type: {
          name: "String"
        }
      },
      password: {
        serializedName: "password",
        required: true,
        type: {
          name: "String"
        }
      }
    }
  }
};

export const ImportPipelineListResult: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "ImportPipelineListResult",
    modelProperties: {
      value: {
        serializedName: "value",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "ImportPipeline"
            }
          }
        }
      },
      nextLink: {
        serializedName: "nextLink",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const ImportPipelineSourceProperties: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "ImportPipelineSourceProperties",
    modelProperties: {
      type: {
        defaultValue: "AzureStorageBlobContainer",
        serializedName: "type",
        type: {
          name: "String"
        }
      },
      uri: {
        serializedName: "uri",
        type: {
          name: "String"
        }
      },
      keyVaultUri: {
        serializedName: "keyVaultUri",
        required: true,
        type: {
          name: "String"
        }
      }
    }
  }
};

export const PipelineTriggerProperties: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "PipelineTriggerProperties",
    modelProperties: {
      sourceTrigger: {
        serializedName: "sourceTrigger",
        type: {
          name: "Composite",
          className: "PipelineSourceTriggerProperties"
        }
      }
    }
  }
};

export const PipelineSourceTriggerProperties: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "PipelineSourceTriggerProperties",
    modelProperties: {
      status: {
        serializedName: "status",
        required: true,
        type: {
          name: "String"
        }
      }
    }
  }
};

export const OperationListResult: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "OperationListResult",
    modelProperties: {
      value: {
        serializedName: "value",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "OperationDefinition"
            }
          }
        }
      },
      nextLink: {
        serializedName: "nextLink",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const OperationDefinition: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "OperationDefinition",
    modelProperties: {
      origin: {
        serializedName: "origin",
        type: {
          name: "String"
        }
      },
      name: {
        serializedName: "name",
        type: {
          name: "String"
        }
      },
      display: {
        serializedName: "display",
        type: {
          name: "Composite",
          className: "OperationDisplayDefinition"
        }
      },
      isDataAction: {
        serializedName: "isDataAction",
        type: {
          name: "Boolean"
        }
      },
      serviceSpecification: {
        serializedName: "properties.serviceSpecification",
        type: {
          name: "Composite",
          className: "OperationServiceSpecificationDefinition"
        }
      }
    }
  }
};

export const OperationDisplayDefinition: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "OperationDisplayDefinition",
    modelProperties: {
      provider: {
        serializedName: "provider",
        type: {
          name: "String"
        }
      },
      resource: {
        serializedName: "resource",
        type: {
          name: "String"
        }
      },
      operation: {
        serializedName: "operation",
        type: {
          name: "String"
        }
      },
      description: {
        serializedName: "description",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const OperationServiceSpecificationDefinition: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "OperationServiceSpecificationDefinition",
    modelProperties: {
      metricSpecifications: {
        serializedName: "metricSpecifications",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "OperationMetricSpecificationDefinition"
            }
          }
        }
      },
      logSpecifications: {
        serializedName: "logSpecifications",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "OperationLogSpecificationDefinition"
            }
          }
        }
      }
    }
  }
};

export const OperationMetricSpecificationDefinition: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "OperationMetricSpecificationDefinition",
    modelProperties: {
      name: {
        serializedName: "name",
        type: {
          name: "String"
        }
      },
      displayName: {
        serializedName: "displayName",
        type: {
          name: "String"
        }
      },
      displayDescription: {
        serializedName: "displayDescription",
        type: {
          name: "String"
        }
      },
      unit: {
        serializedName: "unit",
        type: {
          name: "String"
        }
      },
      aggregationType: {
        serializedName: "aggregationType",
        type: {
          name: "String"
        }
      },
      internalMetricName: {
        serializedName: "internalMetricName",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const OperationLogSpecificationDefinition: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "OperationLogSpecificationDefinition",
    modelProperties: {
      name: {
        serializedName: "name",
        type: {
          name: "String"
        }
      },
      displayName: {
        serializedName: "displayName",
        type: {
          name: "String"
        }
      },
      blobDuration: {
        serializedName: "blobDuration",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const RegistryNameCheckRequest: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "RegistryNameCheckRequest",
    modelProperties: {
      name: {
        constraints: {
          Pattern: new RegExp("^[a-zA-Z0-9]*$"),
          MaxLength: 50,
          MinLength: 5
        },
        serializedName: "name",
        required: true,
        type: {
          name: "String"
        }
      },
      type: {
        defaultValue: "Microsoft.ContainerRegistry/registries",
        isConstant: true,
        serializedName: "type",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const RegistryNameStatus: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "RegistryNameStatus",
    modelProperties: {
      nameAvailable: {
        serializedName: "nameAvailable",
        type: {
          name: "Boolean"
        }
      },
      reason: {
        serializedName: "reason",
        type: {
          name: "String"
        }
      },
      message: {
        serializedName: "message",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const PipelineRunListResult: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "PipelineRunListResult",
    modelProperties: {
      value: {
        serializedName: "value",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "PipelineRun"
            }
          }
        }
      },
      nextLink: {
        serializedName: "nextLink",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const PipelineRunRequest: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "PipelineRunRequest",
    modelProperties: {
      pipelineResourceId: {
        serializedName: "pipelineResourceId",
        type: {
          name: "String"
        }
      },
      artifacts: {
        serializedName: "artifacts",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "String"
            }
          }
        }
      },
      source: {
        serializedName: "source",
        type: {
          name: "Composite",
          className: "PipelineRunSourceProperties"
        }
      },
      target: {
        serializedName: "target",
        type: {
          name: "Composite",
          className: "PipelineRunTargetProperties"
        }
      },
      catalogDigest: {
        serializedName: "catalogDigest",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const PipelineRunSourceProperties: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "PipelineRunSourceProperties",
    modelProperties: {
      type: {
        defaultValue: "AzureStorageBlob",
        serializedName: "type",
        type: {
          name: "String"
        }
      },
      name: {
        serializedName: "name",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const PipelineRunTargetProperties: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "PipelineRunTargetProperties",
    modelProperties: {
      type: {
        defaultValue: "AzureStorageBlob",
        serializedName: "type",
        type: {
          name: "String"
        }
      },
      name: {
        serializedName: "name",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const PipelineRunResponse: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "PipelineRunResponse",
    modelProperties: {
      status: {
        serializedName: "status",
        type: {
          name: "String"
        }
      },
      importedArtifacts: {
        serializedName: "importedArtifacts",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "String"
            }
          }
        }
      },
      progress: {
        serializedName: "progress",
        type: {
          name: "Composite",
          className: "ProgressProperties"
        }
      },
      startTime: {
        serializedName: "startTime",
        type: {
          name: "DateTime"
        }
      },
      finishTime: {
        serializedName: "finishTime",
        type: {
          name: "DateTime"
        }
      },
      source: {
        serializedName: "source",
        type: {
          name: "Composite",
          className: "ImportPipelineSourceProperties"
        }
      },
      target: {
        serializedName: "target",
        type: {
          name: "Composite",
          className: "ExportPipelineTargetProperties"
        }
      },
      catalogDigest: {
        serializedName: "catalogDigest",
        type: {
          name: "String"
        }
      },
      trigger: {
        serializedName: "trigger",
        type: {
          name: "Composite",
          className: "PipelineTriggerDescriptor"
        }
      },
      pipelineRunErrorMessage: {
        serializedName: "pipelineRunErrorMessage",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const ProgressProperties: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "ProgressProperties",
    modelProperties: {
      percentage: {
        serializedName: "percentage",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const PipelineTriggerDescriptor: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "PipelineTriggerDescriptor",
    modelProperties: {
      sourceTrigger: {
        serializedName: "sourceTrigger",
        type: {
          name: "Composite",
          className: "PipelineSourceTriggerDescriptor"
        }
      }
    }
  }
};

export const PipelineSourceTriggerDescriptor: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "PipelineSourceTriggerDescriptor",
    modelProperties: {
      timestamp: {
        serializedName: "timestamp",
        type: {
          name: "DateTime"
        }
      }
    }
  }
};

export const PrivateEndpointConnectionListResult: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "PrivateEndpointConnectionListResult",
    modelProperties: {
      value: {
        serializedName: "value",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "PrivateEndpointConnection"
            }
          }
        }
      },
      nextLink: {
        serializedName: "nextLink",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const PrivateEndpoint: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "PrivateEndpoint",
    modelProperties: {
      id: {
        serializedName: "id",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const PrivateLinkServiceConnectionState: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "PrivateLinkServiceConnectionState",
    modelProperties: {
      status: {
        serializedName: "status",
        type: {
          name: "String"
        }
      },
      description: {
        serializedName: "description",
        type: {
          name: "String"
        }
      },
      actionsRequired: {
        serializedName: "actionsRequired",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const RegistryListResult: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "RegistryListResult",
    modelProperties: {
      value: {
        serializedName: "value",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "Registry"
            }
          }
        }
      },
      nextLink: {
        serializedName: "nextLink",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const Sku: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "Sku",
    modelProperties: {
      name: {
        serializedName: "name",
        required: true,
        type: {
          name: "String"
        }
      },
      tier: {
        serializedName: "tier",
        readOnly: true,
        type: {
          name: "String"
        }
      }
    }
  }
};

export const Status: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "Status",
    modelProperties: {
      displayStatus: {
        serializedName: "displayStatus",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      message: {
        serializedName: "message",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      timestamp: {
        serializedName: "timestamp",
        readOnly: true,
        type: {
          name: "DateTime"
        }
      }
    }
  }
};

export const NetworkRuleSet: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "NetworkRuleSet",
    modelProperties: {
      defaultAction: {
        defaultValue: "Allow",
        serializedName: "defaultAction",
        required: true,
        type: {
          name: "String"
        }
      },
      ipRules: {
        serializedName: "ipRules",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "IPRule"
            }
          }
        }
      }
    }
  }
};

export const IPRule: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "IPRule",
    modelProperties: {
      action: {
        defaultValue: "Allow",
        serializedName: "action",
        type: {
          name: "String"
        }
      },
      iPAddressOrRange: {
        serializedName: "value",
        required: true,
        type: {
          name: "String"
        }
      }
    }
  }
};

export const Policies: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "Policies",
    modelProperties: {
      quarantinePolicy: {
        serializedName: "quarantinePolicy",
        type: {
          name: "Composite",
          className: "QuarantinePolicy"
        }
      },
      trustPolicy: {
        serializedName: "trustPolicy",
        type: {
          name: "Composite",
          className: "TrustPolicy"
        }
      },
      retentionPolicy: {
        serializedName: "retentionPolicy",
        type: {
          name: "Composite",
          className: "RetentionPolicy"
        }
      },
      exportPolicy: {
        serializedName: "exportPolicy",
        type: {
          name: "Composite",
          className: "ExportPolicy"
        }
      },
      azureADAuthenticationAsArmPolicy: {
        serializedName: "azureADAuthenticationAsArmPolicy",
        type: {
          name: "Composite",
          className: "AzureADAuthenticationAsArmPolicy"
        }
      },
      softDeletePolicy: {
        serializedName: "softDeletePolicy",
        type: {
          name: "Composite",
          className: "SoftDeletePolicy"
        }
      }
    }
  }
};

export const QuarantinePolicy: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "QuarantinePolicy",
    modelProperties: {
      status: {
        serializedName: "status",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const TrustPolicy: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "TrustPolicy",
    modelProperties: {
      type: {
        defaultValue: "Notary",
        serializedName: "type",
        type: {
          name: "String"
        }
      },
      status: {
        serializedName: "status",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const RetentionPolicy: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "RetentionPolicy",
    modelProperties: {
      days: {
        defaultValue: 7,
        serializedName: "days",
        type: {
          name: "Number"
        }
      },
      lastUpdatedTime: {
        serializedName: "lastUpdatedTime",
        readOnly: true,
        type: {
          name: "DateTime"
        }
      },
      status: {
        serializedName: "status",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const ExportPolicy: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "ExportPolicy",
    modelProperties: {
      status: {
        defaultValue: "enabled",
        serializedName: "status",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const AzureADAuthenticationAsArmPolicy: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "AzureADAuthenticationAsArmPolicy",
    modelProperties: {
      status: {
        defaultValue: "enabled",
        serializedName: "status",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const SoftDeletePolicy: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "SoftDeletePolicy",
    modelProperties: {
      retentionDays: {
        defaultValue: 7,
        serializedName: "retentionDays",
        type: {
          name: "Number"
        }
      },
      lastUpdatedTime: {
        serializedName: "lastUpdatedTime",
        readOnly: true,
        type: {
          name: "DateTime"
        }
      },
      status: {
        serializedName: "status",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const EncryptionProperty: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "EncryptionProperty",
    modelProperties: {
      status: {
        serializedName: "status",
        type: {
          name: "String"
        }
      },
      keyVaultProperties: {
        serializedName: "keyVaultProperties",
        type: {
          name: "Composite",
          className: "KeyVaultProperties"
        }
      }
    }
  }
};

export const KeyVaultProperties: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "KeyVaultProperties",
    modelProperties: {
      keyIdentifier: {
        serializedName: "keyIdentifier",
        type: {
          name: "String"
        }
      },
      versionedKeyIdentifier: {
        serializedName: "versionedKeyIdentifier",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      identity: {
        serializedName: "identity",
        type: {
          name: "String"
        }
      },
      keyRotationEnabled: {
        serializedName: "keyRotationEnabled",
        readOnly: true,
        type: {
          name: "Boolean"
        }
      },
      lastKeyRotationTimestamp: {
        serializedName: "lastKeyRotationTimestamp",
        readOnly: true,
        type: {
          name: "DateTime"
        }
      }
    }
  }
};

export const Resource: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "Resource",
    modelProperties: {
      id: {
        serializedName: "id",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      name: {
        serializedName: "name",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      type: {
        serializedName: "type",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      location: {
        serializedName: "location",
        required: true,
        type: {
          name: "String"
        }
      },
      tags: {
        serializedName: "tags",
        type: {
          name: "Dictionary",
          value: { type: { name: "String" } }
        }
      },
      systemData: {
        serializedName: "systemData",
        type: {
          name: "Composite",
          className: "SystemData"
        }
      }
    }
  }
};

export const RegistryUpdateParameters: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "RegistryUpdateParameters",
    modelProperties: {
      identity: {
        serializedName: "identity",
        type: {
          name: "Composite",
          className: "IdentityProperties"
        }
      },
      tags: {
        serializedName: "tags",
        type: {
          name: "Dictionary",
          value: { type: { name: "String" } }
        }
      },
      sku: {
        serializedName: "sku",
        type: {
          name: "Composite",
          className: "Sku"
        }
      },
      adminUserEnabled: {
        serializedName: "properties.adminUserEnabled",
        type: {
          name: "Boolean"
        }
      },
      networkRuleSet: {
        serializedName: "properties.networkRuleSet",
        type: {
          name: "Composite",
          className: "NetworkRuleSet"
        }
      },
      policies: {
        serializedName: "properties.policies",
        type: {
          name: "Composite",
          className: "Policies"
        }
      },
      encryption: {
        serializedName: "properties.encryption",
        type: {
          name: "Composite",
          className: "EncryptionProperty"
        }
      },
      dataEndpointEnabled: {
        serializedName: "properties.dataEndpointEnabled",
        type: {
          name: "Boolean"
        }
      },
      publicNetworkAccess: {
        serializedName: "properties.publicNetworkAccess",
        type: {
          name: "String"
        }
      },
      networkRuleBypassOptions: {
        serializedName: "properties.networkRuleBypassOptions",
        type: {
          name: "String"
        }
      },
      anonymousPullEnabled: {
        serializedName: "properties.anonymousPullEnabled",
        type: {
          name: "Boolean"
        }
      }
    }
  }
};

export const RegistryUsageListResult: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "RegistryUsageListResult",
    modelProperties: {
      value: {
        serializedName: "value",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "RegistryUsage"
            }
          }
        }
      }
    }
  }
};

export const RegistryUsage: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "RegistryUsage",
    modelProperties: {
      name: {
        serializedName: "name",
        type: {
          name: "String"
        }
      },
      limit: {
        serializedName: "limit",
        type: {
          name: "Number"
        }
      },
      currentValue: {
        serializedName: "currentValue",
        type: {
          name: "Number"
        }
      },
      unit: {
        serializedName: "unit",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const PrivateLinkResourceListResult: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "PrivateLinkResourceListResult",
    modelProperties: {
      value: {
        serializedName: "value",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "PrivateLinkResource"
            }
          }
        }
      },
      nextLink: {
        serializedName: "nextLink",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const PrivateLinkResource: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "PrivateLinkResource",
    modelProperties: {
      type: {
        serializedName: "type",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      id: {
        serializedName: "id",
        type: {
          name: "String"
        }
      },
      name: {
        serializedName: "name",
        type: {
          name: "String"
        }
      },
      groupId: {
        serializedName: "properties.groupId",
        type: {
          name: "String"
        }
      },
      requiredMembers: {
        serializedName: "properties.requiredMembers",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "String"
            }
          }
        }
      },
      requiredZoneNames: {
        serializedName: "properties.requiredZoneNames",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "String"
            }
          }
        }
      }
    }
  }
};

export const RegistryListCredentialsResult: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "RegistryListCredentialsResult",
    modelProperties: {
      username: {
        serializedName: "username",
        type: {
          name: "String"
        }
      },
      passwords: {
        serializedName: "passwords",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "RegistryPassword"
            }
          }
        }
      }
    }
  }
};

export const RegistryPassword: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "RegistryPassword",
    modelProperties: {
      name: {
        serializedName: "name",
        type: {
          name: "Enum",
          allowedValues: ["password", "password2"]
        }
      },
      value: {
        serializedName: "value",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const RegenerateCredentialParameters: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "RegenerateCredentialParameters",
    modelProperties: {
      name: {
        serializedName: "name",
        required: true,
        type: {
          name: "Enum",
          allowedValues: ["password", "password2"]
        }
      }
    }
  }
};

export const ReplicationListResult: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "ReplicationListResult",
    modelProperties: {
      value: {
        serializedName: "value",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "Replication"
            }
          }
        }
      },
      nextLink: {
        serializedName: "nextLink",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const ReplicationUpdateParameters: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "ReplicationUpdateParameters",
    modelProperties: {
      tags: {
        serializedName: "tags",
        type: {
          name: "Dictionary",
          value: { type: { name: "String" } }
        }
      },
      regionEndpointEnabled: {
        serializedName: "properties.regionEndpointEnabled",
        type: {
          name: "Boolean"
        }
      }
    }
  }
};

export const ScopeMapListResult: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "ScopeMapListResult",
    modelProperties: {
      value: {
        serializedName: "value",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "ScopeMap"
            }
          }
        }
      },
      nextLink: {
        serializedName: "nextLink",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const ScopeMapUpdateParameters: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "ScopeMapUpdateParameters",
    modelProperties: {
      description: {
        serializedName: "properties.description",
        type: {
          name: "String"
        }
      },
      actions: {
        serializedName: "properties.actions",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "String"
            }
          }
        }
      }
    }
  }
};

export const TokenListResult: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "TokenListResult",
    modelProperties: {
      value: {
        serializedName: "value",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "Token"
            }
          }
        }
      },
      nextLink: {
        serializedName: "nextLink",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const TokenCredentialsProperties: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "TokenCredentialsProperties",
    modelProperties: {
      certificates: {
        serializedName: "certificates",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "TokenCertificate"
            }
          }
        }
      },
      passwords: {
        serializedName: "passwords",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "TokenPassword"
            }
          }
        }
      }
    }
  }
};

export const TokenCertificate: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "TokenCertificate",
    modelProperties: {
      name: {
        serializedName: "name",
        type: {
          name: "String"
        }
      },
      expiry: {
        serializedName: "expiry",
        type: {
          name: "DateTime"
        }
      },
      thumbprint: {
        serializedName: "thumbprint",
        type: {
          name: "String"
        }
      },
      encodedPemCertificate: {
        serializedName: "encodedPemCertificate",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const TokenPassword: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "TokenPassword",
    modelProperties: {
      creationTime: {
        serializedName: "creationTime",
        type: {
          name: "DateTime"
        }
      },
      expiry: {
        serializedName: "expiry",
        type: {
          name: "DateTime"
        }
      },
      name: {
        serializedName: "name",
        type: {
          name: "String"
        }
      },
      value: {
        serializedName: "value",
        readOnly: true,
        type: {
          name: "String"
        }
      }
    }
  }
};

export const TokenUpdateParameters: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "TokenUpdateParameters",
    modelProperties: {
      scopeMapId: {
        serializedName: "properties.scopeMapId",
        type: {
          name: "String"
        }
      },
      status: {
        serializedName: "properties.status",
        type: {
          name: "String"
        }
      },
      credentials: {
        serializedName: "properties.credentials",
        type: {
          name: "Composite",
          className: "TokenCredentialsProperties"
        }
      }
    }
  }
};

export const GenerateCredentialsParameters: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "GenerateCredentialsParameters",
    modelProperties: {
      tokenId: {
        serializedName: "tokenId",
        type: {
          name: "String"
        }
      },
      expiry: {
        serializedName: "expiry",
        type: {
          name: "DateTime"
        }
      },
      name: {
        serializedName: "name",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const GenerateCredentialsResult: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "GenerateCredentialsResult",
    modelProperties: {
      username: {
        serializedName: "username",
        type: {
          name: "String"
        }
      },
      passwords: {
        serializedName: "passwords",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "TokenPassword"
            }
          }
        }
      }
    }
  }
};

export const WebhookListResult: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "WebhookListResult",
    modelProperties: {
      value: {
        serializedName: "value",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "Webhook"
            }
          }
        }
      },
      nextLink: {
        serializedName: "nextLink",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const WebhookCreateParameters: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "WebhookCreateParameters",
    modelProperties: {
      tags: {
        serializedName: "tags",
        type: {
          name: "Dictionary",
          value: { type: { name: "String" } }
        }
      },
      location: {
        serializedName: "location",
        required: true,
        type: {
          name: "String"
        }
      },
      serviceUri: {
        serializedName: "properties.serviceUri",
        type: {
          name: "String"
        }
      },
      customHeaders: {
        serializedName: "properties.customHeaders",
        type: {
          name: "Dictionary",
          value: { type: { name: "String" } }
        }
      },
      status: {
        serializedName: "properties.status",
        type: {
          name: "String"
        }
      },
      scope: {
        serializedName: "properties.scope",
        type: {
          name: "String"
        }
      },
      actions: {
        serializedName: "properties.actions",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "String"
            }
          }
        }
      }
    }
  }
};

export const WebhookUpdateParameters: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "WebhookUpdateParameters",
    modelProperties: {
      tags: {
        serializedName: "tags",
        type: {
          name: "Dictionary",
          value: { type: { name: "String" } }
        }
      },
      serviceUri: {
        serializedName: "properties.serviceUri",
        type: {
          name: "String"
        }
      },
      customHeaders: {
        serializedName: "properties.customHeaders",
        type: {
          name: "Dictionary",
          value: { type: { name: "String" } }
        }
      },
      status: {
        serializedName: "properties.status",
        type: {
          name: "String"
        }
      },
      scope: {
        serializedName: "properties.scope",
        type: {
          name: "String"
        }
      },
      actions: {
        serializedName: "properties.actions",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "String"
            }
          }
        }
      }
    }
  }
};

export const EventInfo: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "EventInfo",
    modelProperties: {
      id: {
        serializedName: "id",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const EventListResult: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "EventListResult",
    modelProperties: {
      value: {
        serializedName: "value",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "Event"
            }
          }
        }
      },
      nextLink: {
        serializedName: "nextLink",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const EventRequestMessage: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "EventRequestMessage",
    modelProperties: {
      content: {
        serializedName: "content",
        type: {
          name: "Composite",
          className: "EventContent"
        }
      },
      headers: {
        serializedName: "headers",
        type: {
          name: "Dictionary",
          value: { type: { name: "String" } }
        }
      },
      method: {
        serializedName: "method",
        type: {
          name: "String"
        }
      },
      requestUri: {
        serializedName: "requestUri",
        type: {
          name: "String"
        }
      },
      version: {
        serializedName: "version",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const EventContent: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "EventContent",
    modelProperties: {
      id: {
        serializedName: "id",
        type: {
          name: "String"
        }
      },
      timestamp: {
        serializedName: "timestamp",
        type: {
          name: "DateTime"
        }
      },
      action: {
        serializedName: "action",
        type: {
          name: "String"
        }
      },
      target: {
        serializedName: "target",
        type: {
          name: "Composite",
          className: "Target"
        }
      },
      request: {
        serializedName: "request",
        type: {
          name: "Composite",
          className: "Request"
        }
      },
      actor: {
        serializedName: "actor",
        type: {
          name: "Composite",
          className: "Actor"
        }
      },
      source: {
        serializedName: "source",
        type: {
          name: "Composite",
          className: "Source"
        }
      }
    }
  }
};

export const Target: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "Target",
    modelProperties: {
      mediaType: {
        serializedName: "mediaType",
        type: {
          name: "String"
        }
      },
      size: {
        serializedName: "size",
        type: {
          name: "Number"
        }
      },
      digest: {
        serializedName: "digest",
        type: {
          name: "String"
        }
      },
      length: {
        serializedName: "length",
        type: {
          name: "Number"
        }
      },
      repository: {
        serializedName: "repository",
        type: {
          name: "String"
        }
      },
      url: {
        serializedName: "url",
        type: {
          name: "String"
        }
      },
      tag: {
        serializedName: "tag",
        type: {
          name: "String"
        }
      },
      name: {
        serializedName: "name",
        type: {
          name: "String"
        }
      },
      version: {
        serializedName: "version",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const Request: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "Request",
    modelProperties: {
      id: {
        serializedName: "id",
        type: {
          name: "String"
        }
      },
      addr: {
        serializedName: "addr",
        type: {
          name: "String"
        }
      },
      host: {
        serializedName: "host",
        type: {
          name: "String"
        }
      },
      method: {
        serializedName: "method",
        type: {
          name: "String"
        }
      },
      useragent: {
        serializedName: "useragent",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const Actor: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "Actor",
    modelProperties: {
      name: {
        serializedName: "name",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const Source: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "Source",
    modelProperties: {
      addr: {
        serializedName: "addr",
        type: {
          name: "String"
        }
      },
      instanceID: {
        serializedName: "instanceID",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const EventResponseMessage: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "EventResponseMessage",
    modelProperties: {
      content: {
        serializedName: "content",
        type: {
          name: "String"
        }
      },
      headers: {
        serializedName: "headers",
        type: {
          name: "Dictionary",
          value: { type: { name: "String" } }
        }
      },
      reasonPhrase: {
        serializedName: "reasonPhrase",
        type: {
          name: "String"
        }
      },
      statusCode: {
        serializedName: "statusCode",
        type: {
          name: "String"
        }
      },
      version: {
        serializedName: "version",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const CallbackConfig: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "CallbackConfig",
    modelProperties: {
      serviceUri: {
        serializedName: "serviceUri",
        required: true,
        type: {
          name: "String"
        }
      },
      customHeaders: {
        serializedName: "customHeaders",
        type: {
          name: "Dictionary",
          value: { type: { name: "String" } }
        }
      }
    }
  }
};

export const AgentPoolUpdateParameters: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "AgentPoolUpdateParameters",
    modelProperties: {
      tags: {
        serializedName: "tags",
        type: {
          name: "Dictionary",
          value: { type: { name: "String" } }
        }
      },
      count: {
        serializedName: "properties.count",
        type: {
          name: "Number"
        }
      }
    }
  }
};

export const AgentPoolListResult: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "AgentPoolListResult",
    modelProperties: {
      value: {
        serializedName: "value",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "AgentPool"
            }
          }
        }
      },
      nextLink: {
        serializedName: "nextLink",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const AgentPoolQueueStatus: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "AgentPoolQueueStatus",
    modelProperties: {
      count: {
        serializedName: "count",
        type: {
          name: "Number"
        }
      }
    }
  }
};

export const RunRequest: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "RunRequest",
    uberParent: "RunRequest",
    polymorphicDiscriminator: {
      serializedName: "type",
      clientName: "type"
    },
    modelProperties: {
      type: {
        serializedName: "type",
        required: true,
        type: {
          name: "String"
        }
      },
      isArchiveEnabled: {
        defaultValue: false,
        serializedName: "isArchiveEnabled",
        type: {
          name: "Boolean"
        }
      },
      agentPoolName: {
        serializedName: "agentPoolName",
        type: {
          name: "String"
        }
      },
      logTemplate: {
        serializedName: "logTemplate",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const ImageDescriptor: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "ImageDescriptor",
    modelProperties: {
      registry: {
        serializedName: "registry",
        type: {
          name: "String"
        }
      },
      repository: {
        serializedName: "repository",
        type: {
          name: "String"
        }
      },
      tag: {
        serializedName: "tag",
        type: {
          name: "String"
        }
      },
      digest: {
        serializedName: "digest",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const ImageUpdateTrigger: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "ImageUpdateTrigger",
    modelProperties: {
      id: {
        serializedName: "id",
        type: {
          name: "String"
        }
      },
      timestamp: {
        serializedName: "timestamp",
        type: {
          name: "DateTime"
        }
      },
      images: {
        serializedName: "images",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "ImageDescriptor"
            }
          }
        }
      }
    }
  }
};

export const SourceTriggerDescriptor: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "SourceTriggerDescriptor",
    modelProperties: {
      id: {
        serializedName: "id",
        type: {
          name: "String"
        }
      },
      eventType: {
        serializedName: "eventType",
        type: {
          name: "String"
        }
      },
      commitId: {
        serializedName: "commitId",
        type: {
          name: "String"
        }
      },
      pullRequestId: {
        serializedName: "pullRequestId",
        type: {
          name: "String"
        }
      },
      repositoryUrl: {
        serializedName: "repositoryUrl",
        type: {
          name: "String"
        }
      },
      branchName: {
        serializedName: "branchName",
        type: {
          name: "String"
        }
      },
      providerType: {
        serializedName: "providerType",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const TimerTriggerDescriptor: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "TimerTriggerDescriptor",
    modelProperties: {
      timerTriggerName: {
        serializedName: "timerTriggerName",
        type: {
          name: "String"
        }
      },
      scheduleOccurrence: {
        serializedName: "scheduleOccurrence",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const PlatformProperties: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "PlatformProperties",
    modelProperties: {
      os: {
        serializedName: "os",
        required: true,
        type: {
          name: "String"
        }
      },
      architecture: {
        serializedName: "architecture",
        type: {
          name: "String"
        }
      },
      variant: {
        serializedName: "variant",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const AgentProperties: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "AgentProperties",
    modelProperties: {
      cpu: {
        serializedName: "cpu",
        type: {
          name: "Number"
        }
      }
    }
  }
};

export const SourceUploadDefinition: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "SourceUploadDefinition",
    modelProperties: {
      uploadUrl: {
        serializedName: "uploadUrl",
        type: {
          name: "String"
        }
      },
      relativePath: {
        serializedName: "relativePath",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const RunListResult: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "RunListResult",
    modelProperties: {
      value: {
        serializedName: "value",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "Run"
            }
          }
        }
      },
      nextLink: {
        serializedName: "nextLink",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const RunUpdateParameters: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "RunUpdateParameters",
    modelProperties: {
      isArchiveEnabled: {
        serializedName: "isArchiveEnabled",
        type: {
          name: "Boolean"
        }
      }
    }
  }
};

export const RunGetLogResult: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "RunGetLogResult",
    modelProperties: {
      logLink: {
        serializedName: "logLink",
        type: {
          name: "String"
        }
      },
      logArtifactLink: {
        serializedName: "logArtifactLink",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const TaskRunUpdateParameters: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "TaskRunUpdateParameters",
    modelProperties: {
      identity: {
        serializedName: "identity",
        type: {
          name: "Composite",
          className: "IdentityProperties"
        }
      },
      location: {
        serializedName: "location",
        type: {
          name: "String"
        }
      },
      tags: {
        serializedName: "tags",
        type: {
          name: "Dictionary",
          value: { type: { name: "String" } }
        }
      },
      runRequest: {
        serializedName: "properties.runRequest",
        type: {
          name: "Composite",
          className: "RunRequest"
        }
      },
      forceUpdateTag: {
        serializedName: "properties.forceUpdateTag",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const TaskRunListResult: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "TaskRunListResult",
    modelProperties: {
      value: {
        serializedName: "value",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "TaskRun"
            }
          }
        }
      },
      nextLink: {
        serializedName: "nextLink",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const TaskListResult: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "TaskListResult",
    modelProperties: {
      value: {
        serializedName: "value",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "Task"
            }
          }
        }
      },
      nextLink: {
        serializedName: "nextLink",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const TaskStepProperties: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "TaskStepProperties",
    uberParent: "TaskStepProperties",
    polymorphicDiscriminator: {
      serializedName: "type",
      clientName: "type"
    },
    modelProperties: {
      type: {
        serializedName: "type",
        required: true,
        type: {
          name: "String"
        }
      },
      baseImageDependencies: {
        serializedName: "baseImageDependencies",
        readOnly: true,
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "BaseImageDependency"
            }
          }
        }
      },
      contextPath: {
        serializedName: "contextPath",
        type: {
          name: "String"
        }
      },
      contextAccessToken: {
        serializedName: "contextAccessToken",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const BaseImageDependency: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "BaseImageDependency",
    modelProperties: {
      type: {
        serializedName: "type",
        type: {
          name: "String"
        }
      },
      registry: {
        serializedName: "registry",
        type: {
          name: "String"
        }
      },
      repository: {
        serializedName: "repository",
        type: {
          name: "String"
        }
      },
      tag: {
        serializedName: "tag",
        type: {
          name: "String"
        }
      },
      digest: {
        serializedName: "digest",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const TriggerProperties: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "TriggerProperties",
    modelProperties: {
      timerTriggers: {
        serializedName: "timerTriggers",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "TimerTrigger"
            }
          }
        }
      },
      sourceTriggers: {
        serializedName: "sourceTriggers",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "SourceTrigger"
            }
          }
        }
      },
      baseImageTrigger: {
        serializedName: "baseImageTrigger",
        type: {
          name: "Composite",
          className: "BaseImageTrigger"
        }
      }
    }
  }
};

export const TimerTrigger: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "TimerTrigger",
    modelProperties: {
      schedule: {
        serializedName: "schedule",
        required: true,
        type: {
          name: "String"
        }
      },
      status: {
        serializedName: "status",
        type: {
          name: "String"
        }
      },
      name: {
        serializedName: "name",
        required: true,
        type: {
          name: "String"
        }
      }
    }
  }
};

export const SourceTrigger: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "SourceTrigger",
    modelProperties: {
      sourceRepository: {
        serializedName: "sourceRepository",
        type: {
          name: "Composite",
          className: "SourceProperties"
        }
      },
      sourceTriggerEvents: {
        serializedName: "sourceTriggerEvents",
        required: true,
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "String"
            }
          }
        }
      },
      status: {
        serializedName: "status",
        type: {
          name: "String"
        }
      },
      name: {
        serializedName: "name",
        required: true,
        type: {
          name: "String"
        }
      }
    }
  }
};

export const SourceProperties: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "SourceProperties",
    modelProperties: {
      sourceControlType: {
        serializedName: "sourceControlType",
        required: true,
        type: {
          name: "String"
        }
      },
      repositoryUrl: {
        serializedName: "repositoryUrl",
        required: true,
        type: {
          name: "String"
        }
      },
      branch: {
        serializedName: "branch",
        type: {
          name: "String"
        }
      },
      sourceControlAuthProperties: {
        serializedName: "sourceControlAuthProperties",
        type: {
          name: "Composite",
          className: "AuthInfo"
        }
      }
    }
  }
};

export const AuthInfo: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "AuthInfo",
    modelProperties: {
      tokenType: {
        serializedName: "tokenType",
        required: true,
        type: {
          name: "String"
        }
      },
      token: {
        serializedName: "token",
        required: true,
        type: {
          name: "String"
        }
      },
      refreshToken: {
        serializedName: "refreshToken",
        type: {
          name: "String"
        }
      },
      scope: {
        serializedName: "scope",
        type: {
          name: "String"
        }
      },
      expiresIn: {
        serializedName: "expiresIn",
        type: {
          name: "Number"
        }
      }
    }
  }
};

export const BaseImageTrigger: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "BaseImageTrigger",
    modelProperties: {
      baseImageTriggerType: {
        serializedName: "baseImageTriggerType",
        required: true,
        type: {
          name: "String"
        }
      },
      updateTriggerEndpoint: {
        serializedName: "updateTriggerEndpoint",
        type: {
          name: "String"
        }
      },
      updateTriggerPayloadType: {
        serializedName: "updateTriggerPayloadType",
        type: {
          name: "String"
        }
      },
      status: {
        serializedName: "status",
        type: {
          name: "String"
        }
      },
      name: {
        serializedName: "name",
        required: true,
        type: {
          name: "String"
        }
      }
    }
  }
};

export const Credentials: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "Credentials",
    modelProperties: {
      sourceRegistry: {
        serializedName: "sourceRegistry",
        type: {
          name: "Composite",
          className: "SourceRegistryCredentials"
        }
      },
      customRegistries: {
        serializedName: "customRegistries",
        type: {
          name: "Dictionary",
          value: {
            type: { name: "Composite", className: "CustomRegistryCredentials" }
          }
        }
      }
    }
  }
};

export const SourceRegistryCredentials: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "SourceRegistryCredentials",
    modelProperties: {
      loginMode: {
        serializedName: "loginMode",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const CustomRegistryCredentials: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "CustomRegistryCredentials",
    modelProperties: {
      userName: {
        serializedName: "userName",
        type: {
          name: "Composite",
          className: "SecretObject"
        }
      },
      password: {
        serializedName: "password",
        type: {
          name: "Composite",
          className: "SecretObject"
        }
      },
      identity: {
        serializedName: "identity",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const SecretObject: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "SecretObject",
    modelProperties: {
      value: {
        serializedName: "value",
        type: {
          name: "String"
        }
      },
      type: {
        serializedName: "type",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const TaskUpdateParameters: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "TaskUpdateParameters",
    modelProperties: {
      identity: {
        serializedName: "identity",
        type: {
          name: "Composite",
          className: "IdentityProperties"
        }
      },
      tags: {
        serializedName: "tags",
        type: {
          name: "Dictionary",
          value: { type: { name: "String" } }
        }
      },
      status: {
        serializedName: "properties.status",
        type: {
          name: "String"
        }
      },
      platform: {
        serializedName: "properties.platform",
        type: {
          name: "Composite",
          className: "PlatformUpdateParameters"
        }
      },
      agentConfiguration: {
        serializedName: "properties.agentConfiguration",
        type: {
          name: "Composite",
          className: "AgentProperties"
        }
      },
      agentPoolName: {
        serializedName: "properties.agentPoolName",
        type: {
          name: "String"
        }
      },
      timeout: {
        serializedName: "properties.timeout",
        type: {
          name: "Number"
        }
      },
      step: {
        serializedName: "properties.step",
        type: {
          name: "Composite",
          className: "TaskStepUpdateParameters"
        }
      },
      trigger: {
        serializedName: "properties.trigger",
        type: {
          name: "Composite",
          className: "TriggerUpdateParameters"
        }
      },
      credentials: {
        serializedName: "properties.credentials",
        type: {
          name: "Composite",
          className: "Credentials"
        }
      },
      logTemplate: {
        serializedName: "properties.logTemplate",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const PlatformUpdateParameters: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "PlatformUpdateParameters",
    modelProperties: {
      os: {
        serializedName: "os",
        type: {
          name: "String"
        }
      },
      architecture: {
        serializedName: "architecture",
        type: {
          name: "String"
        }
      },
      variant: {
        serializedName: "variant",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const TaskStepUpdateParameters: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "TaskStepUpdateParameters",
    uberParent: "TaskStepUpdateParameters",
    polymorphicDiscriminator: {
      serializedName: "type",
      clientName: "type"
    },
    modelProperties: {
      type: {
        serializedName: "type",
        required: true,
        type: {
          name: "String"
        }
      },
      contextPath: {
        serializedName: "contextPath",
        type: {
          name: "String"
        }
      },
      contextAccessToken: {
        serializedName: "contextAccessToken",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const TriggerUpdateParameters: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "TriggerUpdateParameters",
    modelProperties: {
      timerTriggers: {
        serializedName: "timerTriggers",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "TimerTriggerUpdateParameters"
            }
          }
        }
      },
      sourceTriggers: {
        serializedName: "sourceTriggers",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "SourceTriggerUpdateParameters"
            }
          }
        }
      },
      baseImageTrigger: {
        serializedName: "baseImageTrigger",
        type: {
          name: "Composite",
          className: "BaseImageTriggerUpdateParameters"
        }
      }
    }
  }
};

export const TimerTriggerUpdateParameters: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "TimerTriggerUpdateParameters",
    modelProperties: {
      schedule: {
        serializedName: "schedule",
        type: {
          name: "String"
        }
      },
      status: {
        serializedName: "status",
        type: {
          name: "String"
        }
      },
      name: {
        serializedName: "name",
        required: true,
        type: {
          name: "String"
        }
      }
    }
  }
};

export const SourceTriggerUpdateParameters: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "SourceTriggerUpdateParameters",
    modelProperties: {
      sourceRepository: {
        serializedName: "sourceRepository",
        type: {
          name: "Composite",
          className: "SourceUpdateParameters"
        }
      },
      sourceTriggerEvents: {
        serializedName: "sourceTriggerEvents",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "String"
            }
          }
        }
      },
      status: {
        serializedName: "status",
        type: {
          name: "String"
        }
      },
      name: {
        serializedName: "name",
        required: true,
        type: {
          name: "String"
        }
      }
    }
  }
};

export const SourceUpdateParameters: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "SourceUpdateParameters",
    modelProperties: {
      sourceControlType: {
        serializedName: "sourceControlType",
        type: {
          name: "String"
        }
      },
      repositoryUrl: {
        serializedName: "repositoryUrl",
        type: {
          name: "String"
        }
      },
      branch: {
        serializedName: "branch",
        type: {
          name: "String"
        }
      },
      sourceControlAuthProperties: {
        serializedName: "sourceControlAuthProperties",
        type: {
          name: "Composite",
          className: "AuthInfoUpdateParameters"
        }
      }
    }
  }
};

export const AuthInfoUpdateParameters: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "AuthInfoUpdateParameters",
    modelProperties: {
      tokenType: {
        serializedName: "tokenType",
        type: {
          name: "String"
        }
      },
      token: {
        serializedName: "token",
        type: {
          name: "String"
        }
      },
      refreshToken: {
        serializedName: "refreshToken",
        type: {
          name: "String"
        }
      },
      scope: {
        serializedName: "scope",
        type: {
          name: "String"
        }
      },
      expiresIn: {
        serializedName: "expiresIn",
        type: {
          name: "Number"
        }
      }
    }
  }
};

export const BaseImageTriggerUpdateParameters: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "BaseImageTriggerUpdateParameters",
    modelProperties: {
      baseImageTriggerType: {
        serializedName: "baseImageTriggerType",
        type: {
          name: "String"
        }
      },
      updateTriggerEndpoint: {
        serializedName: "updateTriggerEndpoint",
        type: {
          name: "String"
        }
      },
      updateTriggerPayloadType: {
        serializedName: "updateTriggerPayloadType",
        type: {
          name: "String"
        }
      },
      status: {
        serializedName: "status",
        type: {
          name: "String"
        }
      },
      name: {
        serializedName: "name",
        required: true,
        type: {
          name: "String"
        }
      }
    }
  }
};

export const StorageAccountProperties: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "StorageAccountProperties",
    modelProperties: {
      id: {
        serializedName: "id",
        required: true,
        type: {
          name: "String"
        }
      }
    }
  }
};

export const PackageType: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "PackageType",
    modelProperties: {
      name: {
        serializedName: "name",
        type: {
          name: "String"
        }
      },
      endpoint: {
        serializedName: "endpoint",
        readOnly: true,
        type: {
          name: "String"
        }
      }
    }
  }
};

export const ActiveDirectoryObject: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "ActiveDirectoryObject",
    modelProperties: {
      objectId: {
        serializedName: "objectId",
        type: {
          name: "String"
        }
      },
      tenantId: {
        serializedName: "tenantId",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const RunFilter: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "RunFilter",
    modelProperties: {
      runId: {
        serializedName: "runId",
        type: {
          name: "String"
        }
      },
      runType: {
        serializedName: "runType",
        type: {
          name: "String"
        }
      },
      status: {
        serializedName: "status",
        type: {
          name: "String"
        }
      },
      createTime: {
        serializedName: "createTime",
        type: {
          name: "DateTime"
        }
      },
      finishTime: {
        serializedName: "finishTime",
        type: {
          name: "DateTime"
        }
      },
      outputImageManifests: {
        serializedName: "outputImageManifests",
        type: {
          name: "String"
        }
      },
      isArchiveEnabled: {
        serializedName: "isArchiveEnabled",
        type: {
          name: "Boolean"
        }
      },
      taskName: {
        serializedName: "taskName",
        type: {
          name: "String"
        }
      },
      agentPoolName: {
        serializedName: "agentPoolName",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const Argument: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "Argument",
    modelProperties: {
      name: {
        serializedName: "name",
        required: true,
        type: {
          name: "String"
        }
      },
      value: {
        serializedName: "value",
        required: true,
        type: {
          name: "String"
        }
      },
      isSecret: {
        defaultValue: false,
        serializedName: "isSecret",
        type: {
          name: "Boolean"
        }
      }
    }
  }
};

export const SetValue: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "SetValue",
    modelProperties: {
      name: {
        serializedName: "name",
        required: true,
        type: {
          name: "String"
        }
      },
      value: {
        serializedName: "value",
        required: true,
        type: {
          name: "String"
        }
      },
      isSecret: {
        defaultValue: false,
        serializedName: "isSecret",
        type: {
          name: "Boolean"
        }
      }
    }
  }
};

export const OverrideTaskStepProperties: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "OverrideTaskStepProperties",
    modelProperties: {
      contextPath: {
        serializedName: "contextPath",
        type: {
          name: "String"
        }
      },
      file: {
        serializedName: "file",
        type: {
          name: "String"
        }
      },
      arguments: {
        serializedName: "arguments",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "Argument"
            }
          }
        }
      },
      target: {
        serializedName: "target",
        type: {
          name: "String"
        }
      },
      values: {
        serializedName: "values",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "SetValue"
            }
          }
        }
      },
      updateTriggerToken: {
        serializedName: "updateTriggerToken",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const ConnectedRegistry: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "ConnectedRegistry",
    modelProperties: {
      ...ProxyResource.type.modelProperties,
      provisioningState: {
        serializedName: "properties.provisioningState",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      mode: {
        serializedName: "properties.mode",
        type: {
          name: "String"
        }
      },
      version: {
        serializedName: "properties.version",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      connectionState: {
        serializedName: "properties.connectionState",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      lastActivityTime: {
        serializedName: "properties.lastActivityTime",
        readOnly: true,
        type: {
          name: "DateTime"
        }
      },
      activation: {
        serializedName: "properties.activation",
        type: {
          name: "Composite",
          className: "ActivationProperties"
        }
      },
      parent: {
        serializedName: "properties.parent",
        type: {
          name: "Composite",
          className: "ParentProperties"
        }
      },
      clientTokenIds: {
        serializedName: "properties.clientTokenIds",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "String"
            }
          }
        }
      },
      loginServer: {
        serializedName: "properties.loginServer",
        type: {
          name: "Composite",
          className: "LoginServerProperties"
        }
      },
      logging: {
        serializedName: "properties.logging",
        type: {
          name: "Composite",
          className: "LoggingProperties"
        }
      },
      statusDetails: {
        serializedName: "properties.statusDetails",
        readOnly: true,
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "StatusDetailProperties"
            }
          }
        }
      },
      notificationsList: {
        serializedName: "properties.notificationsList",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "String"
            }
          }
        }
      }
    }
  }
};

export const ExportPipeline: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "ExportPipeline",
    modelProperties: {
      ...ProxyResource.type.modelProperties,
      location: {
        serializedName: "location",
        type: {
          name: "String"
        }
      },
      identity: {
        serializedName: "identity",
        type: {
          name: "Composite",
          className: "IdentityProperties"
        }
      },
      target: {
        serializedName: "properties.target",
        type: {
          name: "Composite",
          className: "ExportPipelineTargetProperties"
        }
      },
      options: {
        serializedName: "properties.options",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "String"
            }
          }
        }
      },
      provisioningState: {
        serializedName: "properties.provisioningState",
        readOnly: true,
        type: {
          name: "String"
        }
      }
    }
  }
};

export const ImportPipeline: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "ImportPipeline",
    modelProperties: {
      ...ProxyResource.type.modelProperties,
      location: {
        serializedName: "location",
        type: {
          name: "String"
        }
      },
      identity: {
        serializedName: "identity",
        type: {
          name: "Composite",
          className: "IdentityProperties"
        }
      },
      source: {
        serializedName: "properties.source",
        type: {
          name: "Composite",
          className: "ImportPipelineSourceProperties"
        }
      },
      trigger: {
        serializedName: "properties.trigger",
        type: {
          name: "Composite",
          className: "PipelineTriggerProperties"
        }
      },
      options: {
        serializedName: "properties.options",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "String"
            }
          }
        }
      },
      provisioningState: {
        serializedName: "properties.provisioningState",
        readOnly: true,
        type: {
          name: "String"
        }
      }
    }
  }
};

export const PipelineRun: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "PipelineRun",
    modelProperties: {
      ...ProxyResource.type.modelProperties,
      provisioningState: {
        serializedName: "properties.provisioningState",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      request: {
        serializedName: "properties.request",
        type: {
          name: "Composite",
          className: "PipelineRunRequest"
        }
      },
      response: {
        serializedName: "properties.response",
        type: {
          name: "Composite",
          className: "PipelineRunResponse"
        }
      },
      forceUpdateTag: {
        serializedName: "properties.forceUpdateTag",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const PrivateEndpointConnection: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "PrivateEndpointConnection",
    modelProperties: {
      ...ProxyResource.type.modelProperties,
      privateEndpoint: {
        serializedName: "properties.privateEndpoint",
        type: {
          name: "Composite",
          className: "PrivateEndpoint"
        }
      },
      privateLinkServiceConnectionState: {
        serializedName: "properties.privateLinkServiceConnectionState",
        type: {
          name: "Composite",
          className: "PrivateLinkServiceConnectionState"
        }
      },
      provisioningState: {
        serializedName: "properties.provisioningState",
        readOnly: true,
        type: {
          name: "String"
        }
      }
    }
  }
};

export const ScopeMap: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "ScopeMap",
    modelProperties: {
      ...ProxyResource.type.modelProperties,
      description: {
        serializedName: "properties.description",
        type: {
          name: "String"
        }
      },
      typePropertiesType: {
        serializedName: "properties.type",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      creationDate: {
        serializedName: "properties.creationDate",
        readOnly: true,
        type: {
          name: "DateTime"
        }
      },
      provisioningState: {
        serializedName: "properties.provisioningState",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      actions: {
        serializedName: "properties.actions",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "String"
            }
          }
        }
      }
    }
  }
};

export const Token: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "Token",
    modelProperties: {
      ...ProxyResource.type.modelProperties,
      creationDate: {
        serializedName: "properties.creationDate",
        readOnly: true,
        type: {
          name: "DateTime"
        }
      },
      provisioningState: {
        serializedName: "properties.provisioningState",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      scopeMapId: {
        serializedName: "properties.scopeMapId",
        type: {
          name: "String"
        }
      },
      credentials: {
        serializedName: "properties.credentials",
        type: {
          name: "Composite",
          className: "TokenCredentialsProperties"
        }
      },
      status: {
        serializedName: "properties.status",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const Run: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "Run",
    modelProperties: {
      ...ProxyResource.type.modelProperties,
      runId: {
        serializedName: "properties.runId",
        type: {
          name: "String"
        }
      },
      status: {
        serializedName: "properties.status",
        type: {
          name: "String"
        }
      },
      lastUpdatedTime: {
        serializedName: "properties.lastUpdatedTime",
        type: {
          name: "DateTime"
        }
      },
      runType: {
        serializedName: "properties.runType",
        type: {
          name: "String"
        }
      },
      agentPoolName: {
        serializedName: "properties.agentPoolName",
        type: {
          name: "String"
        }
      },
      createTime: {
        serializedName: "properties.createTime",
        type: {
          name: "DateTime"
        }
      },
      startTime: {
        serializedName: "properties.startTime",
        type: {
          name: "DateTime"
        }
      },
      finishTime: {
        serializedName: "properties.finishTime",
        type: {
          name: "DateTime"
        }
      },
      outputImages: {
        serializedName: "properties.outputImages",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "ImageDescriptor"
            }
          }
        }
      },
      task: {
        serializedName: "properties.task",
        type: {
          name: "String"
        }
      },
      imageUpdateTrigger: {
        serializedName: "properties.imageUpdateTrigger",
        type: {
          name: "Composite",
          className: "ImageUpdateTrigger"
        }
      },
      sourceTrigger: {
        serializedName: "properties.sourceTrigger",
        type: {
          name: "Composite",
          className: "SourceTriggerDescriptor"
        }
      },
      timerTrigger: {
        serializedName: "properties.timerTrigger",
        type: {
          name: "Composite",
          className: "TimerTriggerDescriptor"
        }
      },
      platform: {
        serializedName: "properties.platform",
        type: {
          name: "Composite",
          className: "PlatformProperties"
        }
      },
      agentConfiguration: {
        serializedName: "properties.agentConfiguration",
        type: {
          name: "Composite",
          className: "AgentProperties"
        }
      },
      sourceRegistryAuth: {
        serializedName: "properties.sourceRegistryAuth",
        type: {
          name: "String"
        }
      },
      customRegistries: {
        serializedName: "properties.customRegistries",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "String"
            }
          }
        }
      },
      runErrorMessage: {
        serializedName: "properties.runErrorMessage",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      updateTriggerToken: {
        serializedName: "properties.updateTriggerToken",
        type: {
          name: "String"
        }
      },
      logArtifact: {
        serializedName: "properties.logArtifact",
        type: {
          name: "Composite",
          className: "ImageDescriptor"
        }
      },
      provisioningState: {
        serializedName: "properties.provisioningState",
        type: {
          name: "String"
        }
      },
      isArchiveEnabled: {
        defaultValue: false,
        serializedName: "properties.isArchiveEnabled",
        type: {
          name: "Boolean"
        }
      }
    }
  }
};

export const TaskRun: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "TaskRun",
    modelProperties: {
      ...ProxyResource.type.modelProperties,
      identity: {
        serializedName: "identity",
        type: {
          name: "Composite",
          className: "IdentityProperties"
        }
      },
      location: {
        serializedName: "location",
        type: {
          name: "String"
        }
      },
      provisioningState: {
        serializedName: "properties.provisioningState",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      runRequest: {
        serializedName: "properties.runRequest",
        type: {
          name: "Composite",
          className: "RunRequest"
        }
      },
      runResult: {
        serializedName: "properties.runResult",
        type: {
          name: "Composite",
          className: "Run"
        }
      },
      forceUpdateTag: {
        serializedName: "properties.forceUpdateTag",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const Registry: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "Registry",
    modelProperties: {
      ...Resource.type.modelProperties,
      sku: {
        serializedName: "sku",
        type: {
          name: "Composite",
          className: "Sku"
        }
      },
      identity: {
        serializedName: "identity",
        type: {
          name: "Composite",
          className: "IdentityProperties"
        }
      },
      loginServer: {
        serializedName: "properties.loginServer",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      creationDate: {
        serializedName: "properties.creationDate",
        readOnly: true,
        type: {
          name: "DateTime"
        }
      },
      provisioningState: {
        serializedName: "properties.provisioningState",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      status: {
        serializedName: "properties.status",
        type: {
          name: "Composite",
          className: "Status"
        }
      },
      adminUserEnabled: {
        defaultValue: false,
        serializedName: "properties.adminUserEnabled",
        type: {
          name: "Boolean"
        }
      },
      networkRuleSet: {
        serializedName: "properties.networkRuleSet",
        type: {
          name: "Composite",
          className: "NetworkRuleSet"
        }
      },
      policies: {
        serializedName: "properties.policies",
        type: {
          name: "Composite",
          className: "Policies"
        }
      },
      encryption: {
        serializedName: "properties.encryption",
        type: {
          name: "Composite",
          className: "EncryptionProperty"
        }
      },
      dataEndpointEnabled: {
        serializedName: "properties.dataEndpointEnabled",
        type: {
          name: "Boolean"
        }
      },
      dataEndpointHostNames: {
        serializedName: "properties.dataEndpointHostNames",
        readOnly: true,
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "String"
            }
          }
        }
      },
      privateEndpointConnections: {
        serializedName: "properties.privateEndpointConnections",
        readOnly: true,
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "PrivateEndpointConnection"
            }
          }
        }
      },
      publicNetworkAccess: {
        serializedName: "properties.publicNetworkAccess",
        type: {
          name: "String"
        }
      },
      networkRuleBypassOptions: {
        serializedName: "properties.networkRuleBypassOptions",
        type: {
          name: "String"
        }
      },
      zoneRedundancy: {
        serializedName: "properties.zoneRedundancy",
        type: {
          name: "String"
        }
      },
      anonymousPullEnabled: {
        defaultValue: false,
        serializedName: "properties.anonymousPullEnabled",
        type: {
          name: "Boolean"
        }
      }
    }
  }
};

export const Replication: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "Replication",
    modelProperties: {
      ...Resource.type.modelProperties,
      provisioningState: {
        serializedName: "properties.provisioningState",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      status: {
        serializedName: "properties.status",
        type: {
          name: "Composite",
          className: "Status"
        }
      },
      regionEndpointEnabled: {
        defaultValue: true,
        serializedName: "properties.regionEndpointEnabled",
        type: {
          name: "Boolean"
        }
      },
      zoneRedundancy: {
        serializedName: "properties.zoneRedundancy",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const Webhook: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "Webhook",
    modelProperties: {
      ...Resource.type.modelProperties,
      status: {
        serializedName: "properties.status",
        type: {
          name: "String"
        }
      },
      scope: {
        serializedName: "properties.scope",
        type: {
          name: "String"
        }
      },
      actions: {
        serializedName: "properties.actions",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "String"
            }
          }
        }
      },
      provisioningState: {
        serializedName: "properties.provisioningState",
        readOnly: true,
        type: {
          name: "String"
        }
      }
    }
  }
};

export const AgentPool: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "AgentPool",
    modelProperties: {
      ...Resource.type.modelProperties,
      count: {
        serializedName: "properties.count",
        type: {
          name: "Number"
        }
      },
      tier: {
        serializedName: "properties.tier",
        type: {
          name: "String"
        }
      },
      os: {
        serializedName: "properties.os",
        type: {
          name: "String"
        }
      },
      virtualNetworkSubnetResourceId: {
        serializedName: "properties.virtualNetworkSubnetResourceId",
        type: {
          name: "String"
        }
      },
      provisioningState: {
        serializedName: "properties.provisioningState",
        readOnly: true,
        type: {
          name: "String"
        }
      }
    }
  }
};

export const Task: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "Task",
    modelProperties: {
      ...Resource.type.modelProperties,
      identity: {
        serializedName: "identity",
        type: {
          name: "Composite",
          className: "IdentityProperties"
        }
      },
      provisioningState: {
        serializedName: "properties.provisioningState",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      creationDate: {
        serializedName: "properties.creationDate",
        readOnly: true,
        type: {
          name: "DateTime"
        }
      },
      status: {
        serializedName: "properties.status",
        type: {
          name: "String"
        }
      },
      platform: {
        serializedName: "properties.platform",
        type: {
          name: "Composite",
          className: "PlatformProperties"
        }
      },
      agentConfiguration: {
        serializedName: "properties.agentConfiguration",
        type: {
          name: "Composite",
          className: "AgentProperties"
        }
      },
      agentPoolName: {
        serializedName: "properties.agentPoolName",
        type: {
          name: "String"
        }
      },
      timeout: {
        defaultValue: 3600,
        constraints: {
          InclusiveMaximum: 28800,
          InclusiveMinimum: 300
        },
        serializedName: "properties.timeout",
        type: {
          name: "Number"
        }
      },
      step: {
        serializedName: "properties.step",
        type: {
          name: "Composite",
          className: "TaskStepProperties"
        }
      },
      trigger: {
        serializedName: "properties.trigger",
        type: {
          name: "Composite",
          className: "TriggerProperties"
        }
      },
      credentials: {
        serializedName: "properties.credentials",
        type: {
          name: "Composite",
          className: "Credentials"
        }
      },
      logTemplate: {
        serializedName: "properties.logTemplate",
        type: {
          name: "String"
        }
      },
      isSystemTask: {
        defaultValue: false,
        serializedName: "properties.isSystemTask",
        type: {
          name: "Boolean"
        }
      }
    }
  }
};

export const Event: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "Event",
    modelProperties: {
      ...EventInfo.type.modelProperties,
      eventRequestMessage: {
        serializedName: "eventRequestMessage",
        type: {
          name: "Composite",
          className: "EventRequestMessage"
        }
      },
      eventResponseMessage: {
        serializedName: "eventResponseMessage",
        type: {
          name: "Composite",
          className: "EventResponseMessage"
        }
      }
    }
  }
};

export const DockerBuildRequest: coreClient.CompositeMapper = {
  serializedName: "DockerBuildRequest",
  type: {
    name: "Composite",
    className: "DockerBuildRequest",
    uberParent: "RunRequest",
    polymorphicDiscriminator: RunRequest.type.polymorphicDiscriminator,
    modelProperties: {
      ...RunRequest.type.modelProperties,
      imageNames: {
        serializedName: "imageNames",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "String"
            }
          }
        }
      },
      isPushEnabled: {
        defaultValue: true,
        serializedName: "isPushEnabled",
        type: {
          name: "Boolean"
        }
      },
      noCache: {
        defaultValue: false,
        serializedName: "noCache",
        type: {
          name: "Boolean"
        }
      },
      dockerFilePath: {
        serializedName: "dockerFilePath",
        required: true,
        type: {
          name: "String"
        }
      },
      target: {
        serializedName: "target",
        type: {
          name: "String"
        }
      },
      arguments: {
        serializedName: "arguments",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "Argument"
            }
          }
        }
      },
      timeout: {
        defaultValue: 3600,
        constraints: {
          InclusiveMaximum: 28800,
          InclusiveMinimum: 300
        },
        serializedName: "timeout",
        type: {
          name: "Number"
        }
      },
      platform: {
        serializedName: "platform",
        type: {
          name: "Composite",
          className: "PlatformProperties"
        }
      },
      agentConfiguration: {
        serializedName: "agentConfiguration",
        type: {
          name: "Composite",
          className: "AgentProperties"
        }
      },
      sourceLocation: {
        serializedName: "sourceLocation",
        type: {
          name: "String"
        }
      },
      credentials: {
        serializedName: "credentials",
        type: {
          name: "Composite",
          className: "Credentials"
        }
      }
    }
  }
};

export const FileTaskRunRequest: coreClient.CompositeMapper = {
  serializedName: "FileTaskRunRequest",
  type: {
    name: "Composite",
    className: "FileTaskRunRequest",
    uberParent: "RunRequest",
    polymorphicDiscriminator: RunRequest.type.polymorphicDiscriminator,
    modelProperties: {
      ...RunRequest.type.modelProperties,
      taskFilePath: {
        serializedName: "taskFilePath",
        required: true,
        type: {
          name: "String"
        }
      },
      valuesFilePath: {
        serializedName: "valuesFilePath",
        type: {
          name: "String"
        }
      },
      values: {
        serializedName: "values",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "SetValue"
            }
          }
        }
      },
      timeout: {
        defaultValue: 3600,
        constraints: {
          InclusiveMaximum: 28800,
          InclusiveMinimum: 300
        },
        serializedName: "timeout",
        type: {
          name: "Number"
        }
      },
      platform: {
        serializedName: "platform",
        type: {
          name: "Composite",
          className: "PlatformProperties"
        }
      },
      agentConfiguration: {
        serializedName: "agentConfiguration",
        type: {
          name: "Composite",
          className: "AgentProperties"
        }
      },
      sourceLocation: {
        serializedName: "sourceLocation",
        type: {
          name: "String"
        }
      },
      credentials: {
        serializedName: "credentials",
        type: {
          name: "Composite",
          className: "Credentials"
        }
      }
    }
  }
};

export const TaskRunRequest: coreClient.CompositeMapper = {
  serializedName: "TaskRunRequest",
  type: {
    name: "Composite",
    className: "TaskRunRequest",
    uberParent: "RunRequest",
    polymorphicDiscriminator: RunRequest.type.polymorphicDiscriminator,
    modelProperties: {
      ...RunRequest.type.modelProperties,
      taskId: {
        serializedName: "taskId",
        required: true,
        type: {
          name: "String"
        }
      },
      overrideTaskStepProperties: {
        serializedName: "overrideTaskStepProperties",
        type: {
          name: "Composite",
          className: "OverrideTaskStepProperties"
        }
      }
    }
  }
};

export const EncodedTaskRunRequest: coreClient.CompositeMapper = {
  serializedName: "EncodedTaskRunRequest",
  type: {
    name: "Composite",
    className: "EncodedTaskRunRequest",
    uberParent: "RunRequest",
    polymorphicDiscriminator: RunRequest.type.polymorphicDiscriminator,
    modelProperties: {
      ...RunRequest.type.modelProperties,
      encodedTaskContent: {
        serializedName: "encodedTaskContent",
        required: true,
        type: {
          name: "String"
        }
      },
      encodedValuesContent: {
        serializedName: "encodedValuesContent",
        type: {
          name: "String"
        }
      },
      values: {
        serializedName: "values",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "SetValue"
            }
          }
        }
      },
      timeout: {
        defaultValue: 3600,
        constraints: {
          InclusiveMaximum: 28800,
          InclusiveMinimum: 300
        },
        serializedName: "timeout",
        type: {
          name: "Number"
        }
      },
      platform: {
        serializedName: "platform",
        type: {
          name: "Composite",
          className: "PlatformProperties"
        }
      },
      agentConfiguration: {
        serializedName: "agentConfiguration",
        type: {
          name: "Composite",
          className: "AgentProperties"
        }
      },
      sourceLocation: {
        serializedName: "sourceLocation",
        type: {
          name: "String"
        }
      },
      credentials: {
        serializedName: "credentials",
        type: {
          name: "Composite",
          className: "Credentials"
        }
      }
    }
  }
};

export const DockerBuildStep: coreClient.CompositeMapper = {
  serializedName: "Docker",
  type: {
    name: "Composite",
    className: "DockerBuildStep",
    uberParent: "TaskStepProperties",
    polymorphicDiscriminator: TaskStepProperties.type.polymorphicDiscriminator,
    modelProperties: {
      ...TaskStepProperties.type.modelProperties,
      imageNames: {
        serializedName: "imageNames",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "String"
            }
          }
        }
      },
      isPushEnabled: {
        defaultValue: true,
        serializedName: "isPushEnabled",
        type: {
          name: "Boolean"
        }
      },
      noCache: {
        defaultValue: false,
        serializedName: "noCache",
        type: {
          name: "Boolean"
        }
      },
      dockerFilePath: {
        serializedName: "dockerFilePath",
        required: true,
        type: {
          name: "String"
        }
      },
      target: {
        serializedName: "target",
        type: {
          name: "String"
        }
      },
      arguments: {
        serializedName: "arguments",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "Argument"
            }
          }
        }
      }
    }
  }
};

export const FileTaskStep: coreClient.CompositeMapper = {
  serializedName: "FileTask",
  type: {
    name: "Composite",
    className: "FileTaskStep",
    uberParent: "TaskStepProperties",
    polymorphicDiscriminator: TaskStepProperties.type.polymorphicDiscriminator,
    modelProperties: {
      ...TaskStepProperties.type.modelProperties,
      taskFilePath: {
        serializedName: "taskFilePath",
        required: true,
        type: {
          name: "String"
        }
      },
      valuesFilePath: {
        serializedName: "valuesFilePath",
        type: {
          name: "String"
        }
      },
      values: {
        serializedName: "values",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "SetValue"
            }
          }
        }
      }
    }
  }
};

export const EncodedTaskStep: coreClient.CompositeMapper = {
  serializedName: "EncodedTask",
  type: {
    name: "Composite",
    className: "EncodedTaskStep",
    uberParent: "TaskStepProperties",
    polymorphicDiscriminator: TaskStepProperties.type.polymorphicDiscriminator,
    modelProperties: {
      ...TaskStepProperties.type.modelProperties,
      encodedTaskContent: {
        serializedName: "encodedTaskContent",
        required: true,
        type: {
          name: "String"
        }
      },
      encodedValuesContent: {
        serializedName: "encodedValuesContent",
        type: {
          name: "String"
        }
      },
      values: {
        serializedName: "values",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "SetValue"
            }
          }
        }
      }
    }
  }
};

export const DockerBuildStepUpdateParameters: coreClient.CompositeMapper = {
  serializedName: "Docker",
  type: {
    name: "Composite",
    className: "DockerBuildStepUpdateParameters",
    uberParent: "TaskStepUpdateParameters",
    polymorphicDiscriminator:
      TaskStepUpdateParameters.type.polymorphicDiscriminator,
    modelProperties: {
      ...TaskStepUpdateParameters.type.modelProperties,
      imageNames: {
        serializedName: "imageNames",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "String"
            }
          }
        }
      },
      isPushEnabled: {
        serializedName: "isPushEnabled",
        type: {
          name: "Boolean"
        }
      },
      noCache: {
        serializedName: "noCache",
        type: {
          name: "Boolean"
        }
      },
      dockerFilePath: {
        serializedName: "dockerFilePath",
        type: {
          name: "String"
        }
      },
      arguments: {
        serializedName: "arguments",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "Argument"
            }
          }
        }
      },
      target: {
        serializedName: "target",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const FileTaskStepUpdateParameters: coreClient.CompositeMapper = {
  serializedName: "FileTask",
  type: {
    name: "Composite",
    className: "FileTaskStepUpdateParameters",
    uberParent: "TaskStepUpdateParameters",
    polymorphicDiscriminator:
      TaskStepUpdateParameters.type.polymorphicDiscriminator,
    modelProperties: {
      ...TaskStepUpdateParameters.type.modelProperties,
      taskFilePath: {
        serializedName: "taskFilePath",
        type: {
          name: "String"
        }
      },
      valuesFilePath: {
        serializedName: "valuesFilePath",
        type: {
          name: "String"
        }
      },
      values: {
        serializedName: "values",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "SetValue"
            }
          }
        }
      }
    }
  }
};

export const EncodedTaskStepUpdateParameters: coreClient.CompositeMapper = {
  serializedName: "EncodedTask",
  type: {
    name: "Composite",
    className: "EncodedTaskStepUpdateParameters",
    uberParent: "TaskStepUpdateParameters",
    polymorphicDiscriminator:
      TaskStepUpdateParameters.type.polymorphicDiscriminator,
    modelProperties: {
      ...TaskStepUpdateParameters.type.modelProperties,
      encodedTaskContent: {
        serializedName: "encodedTaskContent",
        type: {
          name: "String"
        }
      },
      encodedValuesContent: {
        serializedName: "encodedValuesContent",
        type: {
          name: "String"
        }
      },
      values: {
        serializedName: "values",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "SetValue"
            }
          }
        }
      }
    }
  }
};

export let discriminators = {
  RunRequest: RunRequest,
  TaskStepProperties: TaskStepProperties,
  TaskStepUpdateParameters: TaskStepUpdateParameters,
  "RunRequest.DockerBuildRequest": DockerBuildRequest,
  "RunRequest.FileTaskRunRequest": FileTaskRunRequest,
  "RunRequest.TaskRunRequest": TaskRunRequest,
  "RunRequest.EncodedTaskRunRequest": EncodedTaskRunRequest,
  "TaskStepProperties.Docker": DockerBuildStep,
  "TaskStepProperties.FileTask": FileTaskStep,
  "TaskStepProperties.EncodedTask": EncodedTaskStep,
  "TaskStepUpdateParameters.Docker": DockerBuildStepUpdateParameters,
  "TaskStepUpdateParameters.FileTask": FileTaskStepUpdateParameters,
  "TaskStepUpdateParameters.EncodedTask": EncodedTaskStepUpdateParameters
};
