/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */

import { PagedAsyncIterableIterator } from "@azure/core-paging";
import { PollerLike, PollOperationState } from "@azure/core-lro";
import {
  AgentPool,
  AgentPoolsListOptionalParams,
  AgentPoolsGetOptionalParams,
  AgentPoolsGetResponse,
  AgentPoolsCreateOptionalParams,
  AgentPoolsCreateResponse,
  AgentPoolsDeleteOptionalParams,
  AgentPoolUpdateParameters,
  AgentPoolsUpdateOptionalParams,
  AgentPoolsUpdateResponse,
  AgentPoolsGetQueueStatusOptionalParams,
  AgentPoolsGetQueueStatusResponse
} from "../models";

/// <reference lib="esnext.asynciterable" />
/** Interface representing a AgentPools. */
export interface AgentPools {
  /**
   * Lists all the agent pools for a specified container registry.
   * @param resourceGroupName The name of the resource group to which the container registry belongs.
   * @param registryName The name of the container registry.
   * @param options The options parameters.
   */
  list(
    resourceGroupName: string,
    registryName: string,
    options?: AgentPoolsListOptionalParams
  ): PagedAsyncIterableIterator<AgentPool>;
  /**
   * Gets the detailed information for a given agent pool.
   * @param resourceGroupName The name of the resource group to which the container registry belongs.
   * @param registryName The name of the container registry.
   * @param agentPoolName The name of the agent pool.
   * @param options The options parameters.
   */
  get(
    resourceGroupName: string,
    registryName: string,
    agentPoolName: string,
    options?: AgentPoolsGetOptionalParams
  ): Promise<AgentPoolsGetResponse>;
  /**
   * Creates an agent pool for a container registry with the specified parameters.
   * @param resourceGroupName The name of the resource group to which the container registry belongs.
   * @param registryName The name of the container registry.
   * @param agentPoolName The name of the agent pool.
   * @param agentPool The parameters of an agent pool that needs to scheduled.
   * @param options The options parameters.
   */
  beginCreate(
    resourceGroupName: string,
    registryName: string,
    agentPoolName: string,
    agentPool: AgentPool,
    options?: AgentPoolsCreateOptionalParams
  ): Promise<
    PollerLike<
      PollOperationState<AgentPoolsCreateResponse>,
      AgentPoolsCreateResponse
    >
  >;
  /**
   * Creates an agent pool for a container registry with the specified parameters.
   * @param resourceGroupName The name of the resource group to which the container registry belongs.
   * @param registryName The name of the container registry.
   * @param agentPoolName The name of the agent pool.
   * @param agentPool The parameters of an agent pool that needs to scheduled.
   * @param options The options parameters.
   */
  beginCreateAndWait(
    resourceGroupName: string,
    registryName: string,
    agentPoolName: string,
    agentPool: AgentPool,
    options?: AgentPoolsCreateOptionalParams
  ): Promise<AgentPoolsCreateResponse>;
  /**
   * Deletes a specified agent pool resource.
   * @param resourceGroupName The name of the resource group to which the container registry belongs.
   * @param registryName The name of the container registry.
   * @param agentPoolName The name of the agent pool.
   * @param options The options parameters.
   */
  beginDelete(
    resourceGroupName: string,
    registryName: string,
    agentPoolName: string,
    options?: AgentPoolsDeleteOptionalParams
  ): Promise<PollerLike<PollOperationState<void>, void>>;
  /**
   * Deletes a specified agent pool resource.
   * @param resourceGroupName The name of the resource group to which the container registry belongs.
   * @param registryName The name of the container registry.
   * @param agentPoolName The name of the agent pool.
   * @param options The options parameters.
   */
  beginDeleteAndWait(
    resourceGroupName: string,
    registryName: string,
    agentPoolName: string,
    options?: AgentPoolsDeleteOptionalParams
  ): Promise<void>;
  /**
   * Updates an agent pool with the specified parameters.
   * @param resourceGroupName The name of the resource group to which the container registry belongs.
   * @param registryName The name of the container registry.
   * @param agentPoolName The name of the agent pool.
   * @param updateParameters The parameters for updating an agent pool.
   * @param options The options parameters.
   */
  beginUpdate(
    resourceGroupName: string,
    registryName: string,
    agentPoolName: string,
    updateParameters: AgentPoolUpdateParameters,
    options?: AgentPoolsUpdateOptionalParams
  ): Promise<
    PollerLike<
      PollOperationState<AgentPoolsUpdateResponse>,
      AgentPoolsUpdateResponse
    >
  >;
  /**
   * Updates an agent pool with the specified parameters.
   * @param resourceGroupName The name of the resource group to which the container registry belongs.
   * @param registryName The name of the container registry.
   * @param agentPoolName The name of the agent pool.
   * @param updateParameters The parameters for updating an agent pool.
   * @param options The options parameters.
   */
  beginUpdateAndWait(
    resourceGroupName: string,
    registryName: string,
    agentPoolName: string,
    updateParameters: AgentPoolUpdateParameters,
    options?: AgentPoolsUpdateOptionalParams
  ): Promise<AgentPoolsUpdateResponse>;
  /**
   * Gets the count of queued runs for a given agent pool.
   * @param resourceGroupName The name of the resource group to which the container registry belongs.
   * @param registryName The name of the container registry.
   * @param agentPoolName The name of the agent pool.
   * @param options The options parameters.
   */
  getQueueStatus(
    resourceGroupName: string,
    registryName: string,
    agentPoolName: string,
    options?: AgentPoolsGetQueueStatusOptionalParams
  ): Promise<AgentPoolsGetQueueStatusResponse>;
}
