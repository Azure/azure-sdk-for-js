/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */

import { PagedAsyncIterableIterator } from "@azure/core-paging";
import { SimplePollerLike, OperationState } from "@azure/core-lro";
import {
  Token,
  TokensListOptionalParams,
  TokensGetOptionalParams,
  TokensGetResponse,
  TokensCreateOptionalParams,
  TokensCreateResponse,
  TokensDeleteOptionalParams,
  TokenUpdateParameters,
  TokensUpdateOptionalParams,
  TokensUpdateResponse
} from "../models";

/// <reference lib="esnext.asynciterable" />
/** Interface representing a Tokens. */
export interface Tokens {
  /**
   * Lists all the tokens for the specified container registry.
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param registryName The name of the container registry.
   * @param options The options parameters.
   */
  list(
    resourceGroupName: string,
    registryName: string,
    options?: TokensListOptionalParams
  ): PagedAsyncIterableIterator<Token>;
  /**
   * Gets the properties of the specified token.
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param registryName The name of the container registry.
   * @param tokenName The name of the token.
   * @param options The options parameters.
   */
  get(
    resourceGroupName: string,
    registryName: string,
    tokenName: string,
    options?: TokensGetOptionalParams
  ): Promise<TokensGetResponse>;
  /**
   * Creates a token for a container registry with the specified parameters.
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param registryName The name of the container registry.
   * @param tokenName The name of the token.
   * @param tokenCreateParameters The parameters for creating a token.
   * @param options The options parameters.
   */
  beginCreate(
    resourceGroupName: string,
    registryName: string,
    tokenName: string,
    tokenCreateParameters: Token,
    options?: TokensCreateOptionalParams
  ): Promise<
    SimplePollerLike<OperationState<TokensCreateResponse>, TokensCreateResponse>
  >;
  /**
   * Creates a token for a container registry with the specified parameters.
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param registryName The name of the container registry.
   * @param tokenName The name of the token.
   * @param tokenCreateParameters The parameters for creating a token.
   * @param options The options parameters.
   */
  beginCreateAndWait(
    resourceGroupName: string,
    registryName: string,
    tokenName: string,
    tokenCreateParameters: Token,
    options?: TokensCreateOptionalParams
  ): Promise<TokensCreateResponse>;
  /**
   * Deletes a token from a container registry.
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param registryName The name of the container registry.
   * @param tokenName The name of the token.
   * @param options The options parameters.
   */
  beginDelete(
    resourceGroupName: string,
    registryName: string,
    tokenName: string,
    options?: TokensDeleteOptionalParams
  ): Promise<SimplePollerLike<OperationState<void>, void>>;
  /**
   * Deletes a token from a container registry.
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param registryName The name of the container registry.
   * @param tokenName The name of the token.
   * @param options The options parameters.
   */
  beginDeleteAndWait(
    resourceGroupName: string,
    registryName: string,
    tokenName: string,
    options?: TokensDeleteOptionalParams
  ): Promise<void>;
  /**
   * Updates a token with the specified parameters.
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param registryName The name of the container registry.
   * @param tokenName The name of the token.
   * @param tokenUpdateParameters The parameters for updating a token.
   * @param options The options parameters.
   */
  beginUpdate(
    resourceGroupName: string,
    registryName: string,
    tokenName: string,
    tokenUpdateParameters: TokenUpdateParameters,
    options?: TokensUpdateOptionalParams
  ): Promise<
    SimplePollerLike<OperationState<TokensUpdateResponse>, TokensUpdateResponse>
  >;
  /**
   * Updates a token with the specified parameters.
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param registryName The name of the container registry.
   * @param tokenName The name of the token.
   * @param tokenUpdateParameters The parameters for updating a token.
   * @param options The options parameters.
   */
  beginUpdateAndWait(
    resourceGroupName: string,
    registryName: string,
    tokenName: string,
    tokenUpdateParameters: TokenUpdateParameters,
    options?: TokensUpdateOptionalParams
  ): Promise<TokensUpdateResponse>;
}
