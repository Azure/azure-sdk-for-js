/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */

import { PagedAsyncIterableIterator } from "@azure/core-paging";
import { SimplePollerLike, OperationState } from "@azure/core-lro";
import {
  CredentialSet,
  CredentialSetsListOptionalParams,
  CredentialSetsGetOptionalParams,
  CredentialSetsGetResponse,
  CredentialSetsCreateOptionalParams,
  CredentialSetsCreateResponse,
  CredentialSetsDeleteOptionalParams,
  CredentialSetUpdateParameters,
  CredentialSetsUpdateOptionalParams,
  CredentialSetsUpdateResponse
} from "../models";

/// <reference lib="esnext.asynciterable" />
/** Interface representing a CredentialSets. */
export interface CredentialSets {
  /**
   * Lists all credential set resources for the specified container registry.
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param registryName The name of the container registry.
   * @param options The options parameters.
   */
  list(
    resourceGroupName: string,
    registryName: string,
    options?: CredentialSetsListOptionalParams
  ): PagedAsyncIterableIterator<CredentialSet>;
  /**
   * Gets the properties of the specified credential set resource.
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param registryName The name of the container registry.
   * @param credentialSetName The name of the credential set.
   * @param options The options parameters.
   */
  get(
    resourceGroupName: string,
    registryName: string,
    credentialSetName: string,
    options?: CredentialSetsGetOptionalParams
  ): Promise<CredentialSetsGetResponse>;
  /**
   * Creates a credential set for a container registry with the specified parameters.
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param registryName The name of the container registry.
   * @param credentialSetName The name of the credential set.
   * @param credentialSetCreateParameters The parameters for creating a credential set.
   * @param options The options parameters.
   */
  beginCreate(
    resourceGroupName: string,
    registryName: string,
    credentialSetName: string,
    credentialSetCreateParameters: CredentialSet,
    options?: CredentialSetsCreateOptionalParams
  ): Promise<
    SimplePollerLike<
      OperationState<CredentialSetsCreateResponse>,
      CredentialSetsCreateResponse
    >
  >;
  /**
   * Creates a credential set for a container registry with the specified parameters.
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param registryName The name of the container registry.
   * @param credentialSetName The name of the credential set.
   * @param credentialSetCreateParameters The parameters for creating a credential set.
   * @param options The options parameters.
   */
  beginCreateAndWait(
    resourceGroupName: string,
    registryName: string,
    credentialSetName: string,
    credentialSetCreateParameters: CredentialSet,
    options?: CredentialSetsCreateOptionalParams
  ): Promise<CredentialSetsCreateResponse>;
  /**
   * Deletes a credential set from a container registry.
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param registryName The name of the container registry.
   * @param credentialSetName The name of the credential set.
   * @param options The options parameters.
   */
  beginDelete(
    resourceGroupName: string,
    registryName: string,
    credentialSetName: string,
    options?: CredentialSetsDeleteOptionalParams
  ): Promise<SimplePollerLike<OperationState<void>, void>>;
  /**
   * Deletes a credential set from a container registry.
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param registryName The name of the container registry.
   * @param credentialSetName The name of the credential set.
   * @param options The options parameters.
   */
  beginDeleteAndWait(
    resourceGroupName: string,
    registryName: string,
    credentialSetName: string,
    options?: CredentialSetsDeleteOptionalParams
  ): Promise<void>;
  /**
   * Updates a credential set for a container registry with the specified parameters.
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param registryName The name of the container registry.
   * @param credentialSetName The name of the credential set.
   * @param credentialSetUpdateParameters The parameters for updating a credential set.
   * @param options The options parameters.
   */
  beginUpdate(
    resourceGroupName: string,
    registryName: string,
    credentialSetName: string,
    credentialSetUpdateParameters: CredentialSetUpdateParameters,
    options?: CredentialSetsUpdateOptionalParams
  ): Promise<
    SimplePollerLike<
      OperationState<CredentialSetsUpdateResponse>,
      CredentialSetsUpdateResponse
    >
  >;
  /**
   * Updates a credential set for a container registry with the specified parameters.
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param registryName The name of the container registry.
   * @param credentialSetName The name of the credential set.
   * @param credentialSetUpdateParameters The parameters for updating a credential set.
   * @param options The options parameters.
   */
  beginUpdateAndWait(
    resourceGroupName: string,
    registryName: string,
    credentialSetName: string,
    credentialSetUpdateParameters: CredentialSetUpdateParameters,
    options?: CredentialSetsUpdateOptionalParams
  ): Promise<CredentialSetsUpdateResponse>;
}
