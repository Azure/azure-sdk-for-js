/*
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is
 * regenerated.
 */

import * as msRest from "@azure/ms-rest-js";
import * as msRestAzure from "@azure/ms-rest-azure-js";
import * as Models from "../models";
import * as Mappers from "../models/runsMappers";
import * as Parameters from "../models/parameters";
import { ContainerRegistryManagementClientContext } from "../containerRegistryManagementClientContext";

/** Class representing a Runs. */
export class Runs {
  private readonly client: ContainerRegistryManagementClientContext;

  /**
   * Create a Runs.
   * @param {ContainerRegistryManagementClientContext} client Reference to the service client.
   */
  constructor(client: ContainerRegistryManagementClientContext) {
    this.client = client;
  }

  /**
   * Gets all the runs for a registry.
   * @param resourceGroupName The name of the resource group to which the container registry belongs.
   * @param registryName The name of the container registry.
   * @param [options] The optional parameters
   * @returns Promise<Models.RunsListResponse>
   */
  list(resourceGroupName: string, registryName: string, options?: Models.RunsListOptionalParams): Promise<Models.RunsListResponse>;
  /**
   * @param resourceGroupName The name of the resource group to which the container registry belongs.
   * @param registryName The name of the container registry.
   * @param callback The callback
   */
  list(resourceGroupName: string, registryName: string, callback: msRest.ServiceCallback<Models.RunListResult>): void;
  /**
   * @param resourceGroupName The name of the resource group to which the container registry belongs.
   * @param registryName The name of the container registry.
   * @param options The optional parameters
   * @param callback The callback
   */
  list(resourceGroupName: string, registryName: string, options: Models.RunsListOptionalParams, callback: msRest.ServiceCallback<Models.RunListResult>): void;
  list(resourceGroupName: string, registryName: string, options?: Models.RunsListOptionalParams | msRest.ServiceCallback<Models.RunListResult>, callback?: msRest.ServiceCallback<Models.RunListResult>): Promise<Models.RunsListResponse> {
    return this.client.sendOperationRequest(
      {
        resourceGroupName,
        registryName,
        options
      },
      listOperationSpec,
      callback) as Promise<Models.RunsListResponse>;
  }

  /**
   * Gets the detailed information for a given run.
   * @param resourceGroupName The name of the resource group to which the container registry belongs.
   * @param registryName The name of the container registry.
   * @param runId The run ID.
   * @param [options] The optional parameters
   * @returns Promise<Models.RunsGetResponse>
   */
  get(resourceGroupName: string, registryName: string, runId: string, options?: msRest.RequestOptionsBase): Promise<Models.RunsGetResponse>;
  /**
   * @param resourceGroupName The name of the resource group to which the container registry belongs.
   * @param registryName The name of the container registry.
   * @param runId The run ID.
   * @param callback The callback
   */
  get(resourceGroupName: string, registryName: string, runId: string, callback: msRest.ServiceCallback<Models.Run>): void;
  /**
   * @param resourceGroupName The name of the resource group to which the container registry belongs.
   * @param registryName The name of the container registry.
   * @param runId The run ID.
   * @param options The optional parameters
   * @param callback The callback
   */
  get(resourceGroupName: string, registryName: string, runId: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.Run>): void;
  get(resourceGroupName: string, registryName: string, runId: string, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<Models.Run>, callback?: msRest.ServiceCallback<Models.Run>): Promise<Models.RunsGetResponse> {
    return this.client.sendOperationRequest(
      {
        resourceGroupName,
        registryName,
        runId,
        options
      },
      getOperationSpec,
      callback) as Promise<Models.RunsGetResponse>;
  }

  /**
   * Patch the run properties.
   * @param resourceGroupName The name of the resource group to which the container registry belongs.
   * @param registryName The name of the container registry.
   * @param runId The run ID.
   * @param runUpdateParameters The run update properties.
   * @param [options] The optional parameters
   * @returns Promise<Models.RunsUpdateResponse>
   */
  update(resourceGroupName: string, registryName: string, runId: string, runUpdateParameters: Models.RunUpdateParameters, options?: msRest.RequestOptionsBase): Promise<Models.RunsUpdateResponse> {
    return this.beginUpdate(resourceGroupName,registryName,runId,runUpdateParameters,options)
      .then(lroPoller => lroPoller.pollUntilFinished()) as Promise<Models.RunsUpdateResponse>;
  }

  /**
   * Gets a link to download the run logs.
   * @param resourceGroupName The name of the resource group to which the container registry belongs.
   * @param registryName The name of the container registry.
   * @param runId The run ID.
   * @param [options] The optional parameters
   * @returns Promise<Models.RunsGetLogSasUrlResponse>
   */
  getLogSasUrl(resourceGroupName: string, registryName: string, runId: string, options?: msRest.RequestOptionsBase): Promise<Models.RunsGetLogSasUrlResponse>;
  /**
   * @param resourceGroupName The name of the resource group to which the container registry belongs.
   * @param registryName The name of the container registry.
   * @param runId The run ID.
   * @param callback The callback
   */
  getLogSasUrl(resourceGroupName: string, registryName: string, runId: string, callback: msRest.ServiceCallback<Models.RunGetLogResult>): void;
  /**
   * @param resourceGroupName The name of the resource group to which the container registry belongs.
   * @param registryName The name of the container registry.
   * @param runId The run ID.
   * @param options The optional parameters
   * @param callback The callback
   */
  getLogSasUrl(resourceGroupName: string, registryName: string, runId: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.RunGetLogResult>): void;
  getLogSasUrl(resourceGroupName: string, registryName: string, runId: string, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<Models.RunGetLogResult>, callback?: msRest.ServiceCallback<Models.RunGetLogResult>): Promise<Models.RunsGetLogSasUrlResponse> {
    return this.client.sendOperationRequest(
      {
        resourceGroupName,
        registryName,
        runId,
        options
      },
      getLogSasUrlOperationSpec,
      callback) as Promise<Models.RunsGetLogSasUrlResponse>;
  }

  /**
   * Cancel an existing run.
   * @param resourceGroupName The name of the resource group to which the container registry belongs.
   * @param registryName The name of the container registry.
   * @param runId The run ID.
   * @param [options] The optional parameters
   * @returns Promise<msRest.RestResponse>
   */
  cancel(resourceGroupName: string, registryName: string, runId: string, options?: msRest.RequestOptionsBase): Promise<msRest.RestResponse> {
    return this.beginCancel(resourceGroupName,registryName,runId,options)
      .then(lroPoller => lroPoller.pollUntilFinished());
  }

  /**
   * Patch the run properties.
   * @param resourceGroupName The name of the resource group to which the container registry belongs.
   * @param registryName The name of the container registry.
   * @param runId The run ID.
   * @param runUpdateParameters The run update properties.
   * @param [options] The optional parameters
   * @returns Promise<msRestAzure.LROPoller>
   */
  beginUpdate(resourceGroupName: string, registryName: string, runId: string, runUpdateParameters: Models.RunUpdateParameters, options?: msRest.RequestOptionsBase): Promise<msRestAzure.LROPoller> {
    return this.client.sendLRORequest(
      {
        resourceGroupName,
        registryName,
        runId,
        runUpdateParameters,
        options
      },
      beginUpdateOperationSpec,
      options);
  }

  /**
   * Cancel an existing run.
   * @param resourceGroupName The name of the resource group to which the container registry belongs.
   * @param registryName The name of the container registry.
   * @param runId The run ID.
   * @param [options] The optional parameters
   * @returns Promise<msRestAzure.LROPoller>
   */
  beginCancel(resourceGroupName: string, registryName: string, runId: string, options?: msRest.RequestOptionsBase): Promise<msRestAzure.LROPoller> {
    return this.client.sendLRORequest(
      {
        resourceGroupName,
        registryName,
        runId,
        options
      },
      beginCancelOperationSpec,
      options);
  }

  /**
   * Gets all the runs for a registry.
   * @param nextPageLink The NextLink from the previous successful call to List operation.
   * @param [options] The optional parameters
   * @returns Promise<Models.RunsListNextResponse>
   */
  listNext(nextPageLink: string, options?: msRest.RequestOptionsBase): Promise<Models.RunsListNextResponse>;
  /**
   * @param nextPageLink The NextLink from the previous successful call to List operation.
   * @param callback The callback
   */
  listNext(nextPageLink: string, callback: msRest.ServiceCallback<Models.RunListResult>): void;
  /**
   * @param nextPageLink The NextLink from the previous successful call to List operation.
   * @param options The optional parameters
   * @param callback The callback
   */
  listNext(nextPageLink: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.RunListResult>): void;
  listNext(nextPageLink: string, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<Models.RunListResult>, callback?: msRest.ServiceCallback<Models.RunListResult>): Promise<Models.RunsListNextResponse> {
    return this.client.sendOperationRequest(
      {
        nextPageLink,
        options
      },
      listNextOperationSpec,
      callback) as Promise<Models.RunsListNextResponse>;
  }
}

// Operation Specifications
const serializer = new msRest.Serializer(Mappers);
const listOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ContainerRegistry/registries/{registryName}/runs",
  urlParameters: [
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.registryName
  ],
  queryParameters: [
    Parameters.apiVersion1,
    Parameters.filter,
    Parameters.top
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    200: {
      bodyMapper: Mappers.RunListResult
    },
    default: {
      bodyMapper: Mappers.ErrorResponse
    }
  },
  serializer
};

const getOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ContainerRegistry/registries/{registryName}/runs/{runId}",
  urlParameters: [
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.registryName,
    Parameters.runId
  ],
  queryParameters: [
    Parameters.apiVersion1
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    200: {
      bodyMapper: Mappers.Run
    },
    default: {
      bodyMapper: Mappers.ErrorResponse
    }
  },
  serializer
};

const getLogSasUrlOperationSpec: msRest.OperationSpec = {
  httpMethod: "POST",
  path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ContainerRegistry/registries/{registryName}/runs/{runId}/listLogSasUrl",
  urlParameters: [
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.registryName,
    Parameters.runId
  ],
  queryParameters: [
    Parameters.apiVersion1
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    200: {
      bodyMapper: Mappers.RunGetLogResult
    },
    default: {
      bodyMapper: Mappers.ErrorResponse
    }
  },
  serializer
};

const beginUpdateOperationSpec: msRest.OperationSpec = {
  httpMethod: "PATCH",
  path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ContainerRegistry/registries/{registryName}/runs/{runId}",
  urlParameters: [
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.registryName,
    Parameters.runId
  ],
  queryParameters: [
    Parameters.apiVersion1
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  requestBody: {
    parameterPath: "runUpdateParameters",
    mapper: {
      ...Mappers.RunUpdateParameters,
      required: true
    }
  },
  responses: {
    200: {
      bodyMapper: Mappers.Run
    },
    201: {
      bodyMapper: Mappers.Run
    },
    default: {
      bodyMapper: Mappers.ErrorResponse
    }
  },
  serializer
};

const beginCancelOperationSpec: msRest.OperationSpec = {
  httpMethod: "POST",
  path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ContainerRegistry/registries/{registryName}/runs/{runId}/cancel",
  urlParameters: [
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.registryName,
    Parameters.runId
  ],
  queryParameters: [
    Parameters.apiVersion1
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    200: {},
    202: {},
    default: {
      bodyMapper: Mappers.ErrorResponse
    }
  },
  serializer
};

const listNextOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  baseUrl: "https://management.azure.com",
  path: "{nextLink}",
  urlParameters: [
    Parameters.nextPageLink
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    200: {
      bodyMapper: Mappers.RunListResult
    },
    default: {
      bodyMapper: Mappers.ErrorResponse
    }
  },
  serializer
};
