/*
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is
 * regenerated.
 */

import * as msRest from "@azure/ms-rest-js";
import * as msRestAzure from "@azure/ms-rest-azure-js";
import * as Models from "../models";
import * as Mappers from "../models/tasksMappers";
import * as Parameters from "../models/parameters";
import { ContainerRegistryManagementClientContext } from "../containerRegistryManagementClientContext";

/** Class representing a Tasks. */
export class Tasks {
  private readonly client: ContainerRegistryManagementClientContext;

  /**
   * Create a Tasks.
   * @param {ContainerRegistryManagementClientContext} client Reference to the service client.
   */
  constructor(client: ContainerRegistryManagementClientContext) {
    this.client = client;
  }

  /**
   * Lists all the tasks for a specified container registry.
   * @param resourceGroupName The name of the resource group to which the container registry belongs.
   * @param registryName The name of the container registry.
   * @param [options] The optional parameters
   * @returns Promise<Models.TasksListResponse>
   */
  list(resourceGroupName: string, registryName: string, options?: msRest.RequestOptionsBase): Promise<Models.TasksListResponse>;
  /**
   * @param resourceGroupName The name of the resource group to which the container registry belongs.
   * @param registryName The name of the container registry.
   * @param callback The callback
   */
  list(resourceGroupName: string, registryName: string, callback: msRest.ServiceCallback<Models.TaskListResult>): void;
  /**
   * @param resourceGroupName The name of the resource group to which the container registry belongs.
   * @param registryName The name of the container registry.
   * @param options The optional parameters
   * @param callback The callback
   */
  list(resourceGroupName: string, registryName: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.TaskListResult>): void;
  list(resourceGroupName: string, registryName: string, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<Models.TaskListResult>, callback?: msRest.ServiceCallback<Models.TaskListResult>): Promise<Models.TasksListResponse> {
    return this.client.sendOperationRequest(
      {
        resourceGroupName,
        registryName,
        options
      },
      listOperationSpec,
      callback) as Promise<Models.TasksListResponse>;
  }

  /**
   * Get the properties of a specified task.
   * @param resourceGroupName The name of the resource group to which the container registry belongs.
   * @param registryName The name of the container registry.
   * @param taskName The name of the container registry task.
   * @param [options] The optional parameters
   * @returns Promise<Models.TasksGetResponse>
   */
  get(resourceGroupName: string, registryName: string, taskName: string, options?: msRest.RequestOptionsBase): Promise<Models.TasksGetResponse>;
  /**
   * @param resourceGroupName The name of the resource group to which the container registry belongs.
   * @param registryName The name of the container registry.
   * @param taskName The name of the container registry task.
   * @param callback The callback
   */
  get(resourceGroupName: string, registryName: string, taskName: string, callback: msRest.ServiceCallback<Models.Task>): void;
  /**
   * @param resourceGroupName The name of the resource group to which the container registry belongs.
   * @param registryName The name of the container registry.
   * @param taskName The name of the container registry task.
   * @param options The optional parameters
   * @param callback The callback
   */
  get(resourceGroupName: string, registryName: string, taskName: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.Task>): void;
  get(resourceGroupName: string, registryName: string, taskName: string, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<Models.Task>, callback?: msRest.ServiceCallback<Models.Task>): Promise<Models.TasksGetResponse> {
    return this.client.sendOperationRequest(
      {
        resourceGroupName,
        registryName,
        taskName,
        options
      },
      getOperationSpec,
      callback) as Promise<Models.TasksGetResponse>;
  }

  /**
   * Creates a task for a container registry with the specified parameters.
   * @param resourceGroupName The name of the resource group to which the container registry belongs.
   * @param registryName The name of the container registry.
   * @param taskName The name of the container registry task.
   * @param taskCreateParameters The parameters for creating a task.
   * @param [options] The optional parameters
   * @returns Promise<Models.TasksCreateResponse>
   */
  create(resourceGroupName: string, registryName: string, taskName: string, taskCreateParameters: Models.Task, options?: msRest.RequestOptionsBase): Promise<Models.TasksCreateResponse> {
    return this.beginCreate(resourceGroupName,registryName,taskName,taskCreateParameters,options)
      .then(lroPoller => lroPoller.pollUntilFinished()) as Promise<Models.TasksCreateResponse>;
  }

  /**
   * Deletes a specified task.
   * @param resourceGroupName The name of the resource group to which the container registry belongs.
   * @param registryName The name of the container registry.
   * @param taskName The name of the container registry task.
   * @param [options] The optional parameters
   * @returns Promise<msRest.RestResponse>
   */
  deleteMethod(resourceGroupName: string, registryName: string, taskName: string, options?: msRest.RequestOptionsBase): Promise<msRest.RestResponse> {
    return this.beginDeleteMethod(resourceGroupName,registryName,taskName,options)
      .then(lroPoller => lroPoller.pollUntilFinished());
  }

  /**
   * Updates a task with the specified parameters.
   * @param resourceGroupName The name of the resource group to which the container registry belongs.
   * @param registryName The name of the container registry.
   * @param taskName The name of the container registry task.
   * @param taskUpdateParameters The parameters for updating a task.
   * @param [options] The optional parameters
   * @returns Promise<Models.TasksUpdateResponse>
   */
  update(resourceGroupName: string, registryName: string, taskName: string, taskUpdateParameters: Models.TaskUpdateParameters, options?: msRest.RequestOptionsBase): Promise<Models.TasksUpdateResponse> {
    return this.beginUpdate(resourceGroupName,registryName,taskName,taskUpdateParameters,options)
      .then(lroPoller => lroPoller.pollUntilFinished()) as Promise<Models.TasksUpdateResponse>;
  }

  /**
   * Returns a task with extended information that includes all secrets.
   * @param resourceGroupName The name of the resource group to which the container registry belongs.
   * @param registryName The name of the container registry.
   * @param taskName The name of the container registry task.
   * @param [options] The optional parameters
   * @returns Promise<Models.TasksGetDetailsResponse>
   */
  getDetails(resourceGroupName: string, registryName: string, taskName: string, options?: msRest.RequestOptionsBase): Promise<Models.TasksGetDetailsResponse>;
  /**
   * @param resourceGroupName The name of the resource group to which the container registry belongs.
   * @param registryName The name of the container registry.
   * @param taskName The name of the container registry task.
   * @param callback The callback
   */
  getDetails(resourceGroupName: string, registryName: string, taskName: string, callback: msRest.ServiceCallback<Models.Task>): void;
  /**
   * @param resourceGroupName The name of the resource group to which the container registry belongs.
   * @param registryName The name of the container registry.
   * @param taskName The name of the container registry task.
   * @param options The optional parameters
   * @param callback The callback
   */
  getDetails(resourceGroupName: string, registryName: string, taskName: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.Task>): void;
  getDetails(resourceGroupName: string, registryName: string, taskName: string, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<Models.Task>, callback?: msRest.ServiceCallback<Models.Task>): Promise<Models.TasksGetDetailsResponse> {
    return this.client.sendOperationRequest(
      {
        resourceGroupName,
        registryName,
        taskName,
        options
      },
      getDetailsOperationSpec,
      callback) as Promise<Models.TasksGetDetailsResponse>;
  }

  /**
   * Creates a task for a container registry with the specified parameters.
   * @param resourceGroupName The name of the resource group to which the container registry belongs.
   * @param registryName The name of the container registry.
   * @param taskName The name of the container registry task.
   * @param taskCreateParameters The parameters for creating a task.
   * @param [options] The optional parameters
   * @returns Promise<msRestAzure.LROPoller>
   */
  beginCreate(resourceGroupName: string, registryName: string, taskName: string, taskCreateParameters: Models.Task, options?: msRest.RequestOptionsBase): Promise<msRestAzure.LROPoller> {
    return this.client.sendLRORequest(
      {
        resourceGroupName,
        registryName,
        taskName,
        taskCreateParameters,
        options
      },
      beginCreateOperationSpec,
      options);
  }

  /**
   * Deletes a specified task.
   * @param resourceGroupName The name of the resource group to which the container registry belongs.
   * @param registryName The name of the container registry.
   * @param taskName The name of the container registry task.
   * @param [options] The optional parameters
   * @returns Promise<msRestAzure.LROPoller>
   */
  beginDeleteMethod(resourceGroupName: string, registryName: string, taskName: string, options?: msRest.RequestOptionsBase): Promise<msRestAzure.LROPoller> {
    return this.client.sendLRORequest(
      {
        resourceGroupName,
        registryName,
        taskName,
        options
      },
      beginDeleteMethodOperationSpec,
      options);
  }

  /**
   * Updates a task with the specified parameters.
   * @param resourceGroupName The name of the resource group to which the container registry belongs.
   * @param registryName The name of the container registry.
   * @param taskName The name of the container registry task.
   * @param taskUpdateParameters The parameters for updating a task.
   * @param [options] The optional parameters
   * @returns Promise<msRestAzure.LROPoller>
   */
  beginUpdate(resourceGroupName: string, registryName: string, taskName: string, taskUpdateParameters: Models.TaskUpdateParameters, options?: msRest.RequestOptionsBase): Promise<msRestAzure.LROPoller> {
    return this.client.sendLRORequest(
      {
        resourceGroupName,
        registryName,
        taskName,
        taskUpdateParameters,
        options
      },
      beginUpdateOperationSpec,
      options);
  }

  /**
   * Lists all the tasks for a specified container registry.
   * @param nextPageLink The NextLink from the previous successful call to List operation.
   * @param [options] The optional parameters
   * @returns Promise<Models.TasksListNextResponse>
   */
  listNext(nextPageLink: string, options?: msRest.RequestOptionsBase): Promise<Models.TasksListNextResponse>;
  /**
   * @param nextPageLink The NextLink from the previous successful call to List operation.
   * @param callback The callback
   */
  listNext(nextPageLink: string, callback: msRest.ServiceCallback<Models.TaskListResult>): void;
  /**
   * @param nextPageLink The NextLink from the previous successful call to List operation.
   * @param options The optional parameters
   * @param callback The callback
   */
  listNext(nextPageLink: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.TaskListResult>): void;
  listNext(nextPageLink: string, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<Models.TaskListResult>, callback?: msRest.ServiceCallback<Models.TaskListResult>): Promise<Models.TasksListNextResponse> {
    return this.client.sendOperationRequest(
      {
        nextPageLink,
        options
      },
      listNextOperationSpec,
      callback) as Promise<Models.TasksListNextResponse>;
  }
}

// Operation Specifications
const serializer = new msRest.Serializer(Mappers);
const listOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ContainerRegistry/registries/{registryName}/tasks",
  urlParameters: [
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.registryName
  ],
  queryParameters: [
    Parameters.apiVersion1
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    200: {
      bodyMapper: Mappers.TaskListResult
    },
    default: {
      bodyMapper: Mappers.ErrorResponse
    }
  },
  serializer
};

const getOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ContainerRegistry/registries/{registryName}/tasks/{taskName}",
  urlParameters: [
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.registryName,
    Parameters.taskName
  ],
  queryParameters: [
    Parameters.apiVersion1
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    200: {
      bodyMapper: Mappers.Task
    },
    default: {
      bodyMapper: Mappers.ErrorResponse
    }
  },
  serializer
};

const getDetailsOperationSpec: msRest.OperationSpec = {
  httpMethod: "POST",
  path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ContainerRegistry/registries/{registryName}/tasks/{taskName}/listDetails",
  urlParameters: [
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.registryName,
    Parameters.taskName
  ],
  queryParameters: [
    Parameters.apiVersion1
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    200: {
      bodyMapper: Mappers.Task
    },
    default: {
      bodyMapper: Mappers.ErrorResponse
    }
  },
  serializer
};

const beginCreateOperationSpec: msRest.OperationSpec = {
  httpMethod: "PUT",
  path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ContainerRegistry/registries/{registryName}/tasks/{taskName}",
  urlParameters: [
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.registryName,
    Parameters.taskName
  ],
  queryParameters: [
    Parameters.apiVersion1
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  requestBody: {
    parameterPath: "taskCreateParameters",
    mapper: {
      ...Mappers.Task,
      required: true
    }
  },
  responses: {
    200: {
      bodyMapper: Mappers.Task
    },
    201: {
      bodyMapper: Mappers.Task
    },
    default: {
      bodyMapper: Mappers.ErrorResponse
    }
  },
  serializer
};

const beginDeleteMethodOperationSpec: msRest.OperationSpec = {
  httpMethod: "DELETE",
  path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ContainerRegistry/registries/{registryName}/tasks/{taskName}",
  urlParameters: [
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.registryName,
    Parameters.taskName
  ],
  queryParameters: [
    Parameters.apiVersion1
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    200: {},
    202: {},
    204: {},
    default: {
      bodyMapper: Mappers.ErrorResponse
    }
  },
  serializer
};

const beginUpdateOperationSpec: msRest.OperationSpec = {
  httpMethod: "PATCH",
  path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ContainerRegistry/registries/{registryName}/tasks/{taskName}",
  urlParameters: [
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.registryName,
    Parameters.taskName
  ],
  queryParameters: [
    Parameters.apiVersion1
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  requestBody: {
    parameterPath: "taskUpdateParameters",
    mapper: {
      ...Mappers.TaskUpdateParameters,
      required: true
    }
  },
  responses: {
    200: {
      bodyMapper: Mappers.Task
    },
    201: {
      bodyMapper: Mappers.Task
    },
    default: {
      bodyMapper: Mappers.ErrorResponse
    }
  },
  serializer
};

const listNextOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  baseUrl: "https://management.azure.com",
  path: "{nextLink}",
  urlParameters: [
    Parameters.nextPageLink
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    200: {
      bodyMapper: Mappers.TaskListResult
    },
    default: {
      bodyMapper: Mappers.ErrorResponse
    }
  },
  serializer
};
