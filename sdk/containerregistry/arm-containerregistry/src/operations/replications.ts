/*
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is
 * regenerated.
 */

import * as msRest from "@azure/ms-rest-js";
import * as msRestAzure from "@azure/ms-rest-azure-js";
import * as Models from "../models";
import * as Mappers from "../models/replicationsMappers";
import * as Parameters from "../models/parameters";
import { ContainerRegistryManagementClientContext } from "../containerRegistryManagementClientContext";

/** Class representing a Replications. */
export class Replications {
  private readonly client: ContainerRegistryManagementClientContext;

  /**
   * Create a Replications.
   * @param {ContainerRegistryManagementClientContext} client Reference to the service client.
   */
  constructor(client: ContainerRegistryManagementClientContext) {
    this.client = client;
  }

  /**
   * Gets the properties of the specified replication.
   * @param resourceGroupName The name of the resource group to which the container registry belongs.
   * @param registryName The name of the container registry.
   * @param replicationName The name of the replication.
   * @param [options] The optional parameters
   * @returns Promise<Models.ReplicationsGetResponse>
   */
  get(resourceGroupName: string, registryName: string, replicationName: string, options?: msRest.RequestOptionsBase): Promise<Models.ReplicationsGetResponse>;
  /**
   * @param resourceGroupName The name of the resource group to which the container registry belongs.
   * @param registryName The name of the container registry.
   * @param replicationName The name of the replication.
   * @param callback The callback
   */
  get(resourceGroupName: string, registryName: string, replicationName: string, callback: msRest.ServiceCallback<Models.Replication>): void;
  /**
   * @param resourceGroupName The name of the resource group to which the container registry belongs.
   * @param registryName The name of the container registry.
   * @param replicationName The name of the replication.
   * @param options The optional parameters
   * @param callback The callback
   */
  get(resourceGroupName: string, registryName: string, replicationName: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.Replication>): void;
  get(resourceGroupName: string, registryName: string, replicationName: string, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<Models.Replication>, callback?: msRest.ServiceCallback<Models.Replication>): Promise<Models.ReplicationsGetResponse> {
    return this.client.sendOperationRequest(
      {
        resourceGroupName,
        registryName,
        replicationName,
        options
      },
      getOperationSpec,
      callback) as Promise<Models.ReplicationsGetResponse>;
  }

  /**
   * Creates a replication for a container registry with the specified parameters.
   * @param resourceGroupName The name of the resource group to which the container registry belongs.
   * @param registryName The name of the container registry.
   * @param replicationName The name of the replication.
   * @param replication The parameters for creating a replication.
   * @param [options] The optional parameters
   * @returns Promise<Models.ReplicationsCreateResponse>
   */
  create(resourceGroupName: string, registryName: string, replicationName: string, replication: Models.Replication, options?: msRest.RequestOptionsBase): Promise<Models.ReplicationsCreateResponse> {
    return this.beginCreate(resourceGroupName,registryName,replicationName,replication,options)
      .then(lroPoller => lroPoller.pollUntilFinished()) as Promise<Models.ReplicationsCreateResponse>;
  }

  /**
   * Deletes a replication from a container registry.
   * @param resourceGroupName The name of the resource group to which the container registry belongs.
   * @param registryName The name of the container registry.
   * @param replicationName The name of the replication.
   * @param [options] The optional parameters
   * @returns Promise<msRest.RestResponse>
   */
  deleteMethod(resourceGroupName: string, registryName: string, replicationName: string, options?: msRest.RequestOptionsBase): Promise<msRest.RestResponse> {
    return this.beginDeleteMethod(resourceGroupName,registryName,replicationName,options)
      .then(lroPoller => lroPoller.pollUntilFinished());
  }

  /**
   * Updates a replication for a container registry with the specified parameters.
   * @param resourceGroupName The name of the resource group to which the container registry belongs.
   * @param registryName The name of the container registry.
   * @param replicationName The name of the replication.
   * @param replicationUpdateParameters The parameters for updating a replication.
   * @param [options] The optional parameters
   * @returns Promise<Models.ReplicationsUpdateResponse>
   */
  update(resourceGroupName: string, registryName: string, replicationName: string, replicationUpdateParameters: Models.ReplicationUpdateParameters, options?: msRest.RequestOptionsBase): Promise<Models.ReplicationsUpdateResponse> {
    return this.beginUpdate(resourceGroupName,registryName,replicationName,replicationUpdateParameters,options)
      .then(lroPoller => lroPoller.pollUntilFinished()) as Promise<Models.ReplicationsUpdateResponse>;
  }

  /**
   * Lists all the replications for the specified container registry.
   * @param resourceGroupName The name of the resource group to which the container registry belongs.
   * @param registryName The name of the container registry.
   * @param [options] The optional parameters
   * @returns Promise<Models.ReplicationsListResponse>
   */
  list(resourceGroupName: string, registryName: string, options?: msRest.RequestOptionsBase): Promise<Models.ReplicationsListResponse>;
  /**
   * @param resourceGroupName The name of the resource group to which the container registry belongs.
   * @param registryName The name of the container registry.
   * @param callback The callback
   */
  list(resourceGroupName: string, registryName: string, callback: msRest.ServiceCallback<Models.ReplicationListResult>): void;
  /**
   * @param resourceGroupName The name of the resource group to which the container registry belongs.
   * @param registryName The name of the container registry.
   * @param options The optional parameters
   * @param callback The callback
   */
  list(resourceGroupName: string, registryName: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.ReplicationListResult>): void;
  list(resourceGroupName: string, registryName: string, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<Models.ReplicationListResult>, callback?: msRest.ServiceCallback<Models.ReplicationListResult>): Promise<Models.ReplicationsListResponse> {
    return this.client.sendOperationRequest(
      {
        resourceGroupName,
        registryName,
        options
      },
      listOperationSpec,
      callback) as Promise<Models.ReplicationsListResponse>;
  }

  /**
   * Creates a replication for a container registry with the specified parameters.
   * @param resourceGroupName The name of the resource group to which the container registry belongs.
   * @param registryName The name of the container registry.
   * @param replicationName The name of the replication.
   * @param replication The parameters for creating a replication.
   * @param [options] The optional parameters
   * @returns Promise<msRestAzure.LROPoller>
   */
  beginCreate(resourceGroupName: string, registryName: string, replicationName: string, replication: Models.Replication, options?: msRest.RequestOptionsBase): Promise<msRestAzure.LROPoller> {
    return this.client.sendLRORequest(
      {
        resourceGroupName,
        registryName,
        replicationName,
        replication,
        options
      },
      beginCreateOperationSpec,
      options);
  }

  /**
   * Deletes a replication from a container registry.
   * @param resourceGroupName The name of the resource group to which the container registry belongs.
   * @param registryName The name of the container registry.
   * @param replicationName The name of the replication.
   * @param [options] The optional parameters
   * @returns Promise<msRestAzure.LROPoller>
   */
  beginDeleteMethod(resourceGroupName: string, registryName: string, replicationName: string, options?: msRest.RequestOptionsBase): Promise<msRestAzure.LROPoller> {
    return this.client.sendLRORequest(
      {
        resourceGroupName,
        registryName,
        replicationName,
        options
      },
      beginDeleteMethodOperationSpec,
      options);
  }

  /**
   * Updates a replication for a container registry with the specified parameters.
   * @param resourceGroupName The name of the resource group to which the container registry belongs.
   * @param registryName The name of the container registry.
   * @param replicationName The name of the replication.
   * @param replicationUpdateParameters The parameters for updating a replication.
   * @param [options] The optional parameters
   * @returns Promise<msRestAzure.LROPoller>
   */
  beginUpdate(resourceGroupName: string, registryName: string, replicationName: string, replicationUpdateParameters: Models.ReplicationUpdateParameters, options?: msRest.RequestOptionsBase): Promise<msRestAzure.LROPoller> {
    return this.client.sendLRORequest(
      {
        resourceGroupName,
        registryName,
        replicationName,
        replicationUpdateParameters,
        options
      },
      beginUpdateOperationSpec,
      options);
  }

  /**
   * Lists all the replications for the specified container registry.
   * @param nextPageLink The NextLink from the previous successful call to List operation.
   * @param [options] The optional parameters
   * @returns Promise<Models.ReplicationsListNextResponse>
   */
  listNext(nextPageLink: string, options?: msRest.RequestOptionsBase): Promise<Models.ReplicationsListNextResponse>;
  /**
   * @param nextPageLink The NextLink from the previous successful call to List operation.
   * @param callback The callback
   */
  listNext(nextPageLink: string, callback: msRest.ServiceCallback<Models.ReplicationListResult>): void;
  /**
   * @param nextPageLink The NextLink from the previous successful call to List operation.
   * @param options The optional parameters
   * @param callback The callback
   */
  listNext(nextPageLink: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.ReplicationListResult>): void;
  listNext(nextPageLink: string, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<Models.ReplicationListResult>, callback?: msRest.ServiceCallback<Models.ReplicationListResult>): Promise<Models.ReplicationsListNextResponse> {
    return this.client.sendOperationRequest(
      {
        nextPageLink,
        options
      },
      listNextOperationSpec,
      callback) as Promise<Models.ReplicationsListNextResponse>;
  }
}

// Operation Specifications
const serializer = new msRest.Serializer(Mappers);
const getOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ContainerRegistry/registries/{registryName}/replications/{replicationName}",
  urlParameters: [
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.registryName,
    Parameters.replicationName
  ],
  queryParameters: [
    Parameters.apiVersion0
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    200: {
      bodyMapper: Mappers.Replication
    },
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  serializer
};

const listOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ContainerRegistry/registries/{registryName}/replications",
  urlParameters: [
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.registryName
  ],
  queryParameters: [
    Parameters.apiVersion0
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    200: {
      bodyMapper: Mappers.ReplicationListResult
    },
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  serializer
};

const beginCreateOperationSpec: msRest.OperationSpec = {
  httpMethod: "PUT",
  path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ContainerRegistry/registries/{registryName}/replications/{replicationName}",
  urlParameters: [
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.registryName,
    Parameters.replicationName
  ],
  queryParameters: [
    Parameters.apiVersion0
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  requestBody: {
    parameterPath: "replication",
    mapper: {
      ...Mappers.Replication,
      required: true
    }
  },
  responses: {
    200: {
      bodyMapper: Mappers.Replication
    },
    201: {
      bodyMapper: Mappers.Replication
    },
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  serializer
};

const beginDeleteMethodOperationSpec: msRest.OperationSpec = {
  httpMethod: "DELETE",
  path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ContainerRegistry/registries/{registryName}/replications/{replicationName}",
  urlParameters: [
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.registryName,
    Parameters.replicationName
  ],
  queryParameters: [
    Parameters.apiVersion0
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    200: {},
    202: {},
    204: {},
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  serializer
};

const beginUpdateOperationSpec: msRest.OperationSpec = {
  httpMethod: "PATCH",
  path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ContainerRegistry/registries/{registryName}/replications/{replicationName}",
  urlParameters: [
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.registryName,
    Parameters.replicationName
  ],
  queryParameters: [
    Parameters.apiVersion0
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  requestBody: {
    parameterPath: "replicationUpdateParameters",
    mapper: {
      ...Mappers.ReplicationUpdateParameters,
      required: true
    }
  },
  responses: {
    200: {
      bodyMapper: Mappers.Replication
    },
    201: {
      bodyMapper: Mappers.Replication
    },
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  serializer
};

const listNextOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  baseUrl: "https://management.azure.com",
  path: "{nextLink}",
  urlParameters: [
    Parameters.nextPageLink
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    200: {
      bodyMapper: Mappers.ReplicationListResult
    },
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  serializer
};
