/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is
 * regenerated.
 */

import * as msRest from "@azure/ms-rest-js";
import * as msRestAzure from "@azure/ms-rest-azure-js";
import * as Models from "../models";
import * as Mappers from "../models/connectedRegistriesMappers";
import * as Parameters from "../models/parameters";
import { ContainerRegistryManagementClientContext } from "../containerRegistryManagementClientContext";

/** Class representing a ConnectedRegistries. */
export class ConnectedRegistries {
  private readonly client: ContainerRegistryManagementClientContext;

  /**
   * Create a ConnectedRegistries.
   * @param {ContainerRegistryManagementClientContext} client Reference to the service client.
   */
  constructor(client: ContainerRegistryManagementClientContext) {
    this.client = client;
  }

  /**
   * Gets the properties of the connected registry.
   * @param resourceGroupName The name of the resource group to which the container registry belongs.
   * @param registryName The name of the container registry.
   * @param connectedRegistryName The name of the connected registry.
   * @param [options] The optional parameters
   * @returns Promise<Models.ConnectedRegistriesGetResponse>
   */
  get(resourceGroupName: string, registryName: string, connectedRegistryName: string, options?: msRest.RequestOptionsBase): Promise<Models.ConnectedRegistriesGetResponse>;
  /**
   * @param resourceGroupName The name of the resource group to which the container registry belongs.
   * @param registryName The name of the container registry.
   * @param connectedRegistryName The name of the connected registry.
   * @param callback The callback
   */
  get(resourceGroupName: string, registryName: string, connectedRegistryName: string, callback: msRest.ServiceCallback<Models.ConnectedRegistry>): void;
  /**
   * @param resourceGroupName The name of the resource group to which the container registry belongs.
   * @param registryName The name of the container registry.
   * @param connectedRegistryName The name of the connected registry.
   * @param options The optional parameters
   * @param callback The callback
   */
  get(resourceGroupName: string, registryName: string, connectedRegistryName: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.ConnectedRegistry>): void;
  get(resourceGroupName: string, registryName: string, connectedRegistryName: string, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<Models.ConnectedRegistry>, callback?: msRest.ServiceCallback<Models.ConnectedRegistry>): Promise<Models.ConnectedRegistriesGetResponse> {
    return this.client.sendOperationRequest(
      {
        resourceGroupName,
        registryName,
        connectedRegistryName,
        options
      },
      getOperationSpec,
      callback) as Promise<Models.ConnectedRegistriesGetResponse>;
  }

  /**
   * Creates a connected registry for a container registry with the specified parameters.
   * @param resourceGroupName The name of the resource group to which the container registry belongs.
   * @param registryName The name of the container registry.
   * @param connectedRegistryName The name of the connected registry.
   * @param connectedRegistryCreateParameters The parameters for creating a connectedRegistry.
   * @param [options] The optional parameters
   * @returns Promise<Models.ConnectedRegistriesCreateResponse>
   */
  create(resourceGroupName: string, registryName: string, connectedRegistryName: string, connectedRegistryCreateParameters: Models.ConnectedRegistry, options?: msRest.RequestOptionsBase): Promise<Models.ConnectedRegistriesCreateResponse> {
    return this.beginCreate(resourceGroupName,registryName,connectedRegistryName,connectedRegistryCreateParameters,options)
      .then(lroPoller => lroPoller.pollUntilFinished()) as Promise<Models.ConnectedRegistriesCreateResponse>;
  }

  /**
   * Deletes a connected registry from a container registry.
   * @param resourceGroupName The name of the resource group to which the container registry belongs.
   * @param registryName The name of the container registry.
   * @param connectedRegistryName The name of the connected registry.
   * @param [options] The optional parameters
   * @returns Promise<msRest.RestResponse>
   */
  deleteMethod(resourceGroupName: string, registryName: string, connectedRegistryName: string, options?: msRest.RequestOptionsBase): Promise<msRest.RestResponse> {
    return this.beginDeleteMethod(resourceGroupName,registryName,connectedRegistryName,options)
      .then(lroPoller => lroPoller.pollUntilFinished());
  }

  /**
   * Updates a connected registry with the specified parameters.
   * @param resourceGroupName The name of the resource group to which the container registry belongs.
   * @param registryName The name of the container registry.
   * @param connectedRegistryName The name of the connected registry.
   * @param connectedRegistryUpdateParameters The parameters for updating a connectedRegistry.
   * @param [options] The optional parameters
   * @returns Promise<Models.ConnectedRegistriesUpdateResponse>
   */
  update(resourceGroupName: string, registryName: string, connectedRegistryName: string, connectedRegistryUpdateParameters: Models.ConnectedRegistryUpdateParameters, options?: msRest.RequestOptionsBase): Promise<Models.ConnectedRegistriesUpdateResponse> {
    return this.beginUpdate(resourceGroupName,registryName,connectedRegistryName,connectedRegistryUpdateParameters,options)
      .then(lroPoller => lroPoller.pollUntilFinished()) as Promise<Models.ConnectedRegistriesUpdateResponse>;
  }

  /**
   * Lists all connected registries for the specified container registry.
   * @param resourceGroupName The name of the resource group to which the container registry belongs.
   * @param registryName The name of the container registry.
   * @param [options] The optional parameters
   * @returns Promise<Models.ConnectedRegistriesListResponse>
   */
  list(resourceGroupName: string, registryName: string, options?: Models.ConnectedRegistriesListOptionalParams): Promise<Models.ConnectedRegistriesListResponse>;
  /**
   * @param resourceGroupName The name of the resource group to which the container registry belongs.
   * @param registryName The name of the container registry.
   * @param callback The callback
   */
  list(resourceGroupName: string, registryName: string, callback: msRest.ServiceCallback<Models.ConnectedRegistryListResult>): void;
  /**
   * @param resourceGroupName The name of the resource group to which the container registry belongs.
   * @param registryName The name of the container registry.
   * @param options The optional parameters
   * @param callback The callback
   */
  list(resourceGroupName: string, registryName: string, options: Models.ConnectedRegistriesListOptionalParams, callback: msRest.ServiceCallback<Models.ConnectedRegistryListResult>): void;
  list(resourceGroupName: string, registryName: string, options?: Models.ConnectedRegistriesListOptionalParams | msRest.ServiceCallback<Models.ConnectedRegistryListResult>, callback?: msRest.ServiceCallback<Models.ConnectedRegistryListResult>): Promise<Models.ConnectedRegistriesListResponse> {
    return this.client.sendOperationRequest(
      {
        resourceGroupName,
        registryName,
        options
      },
      listOperationSpec,
      callback) as Promise<Models.ConnectedRegistriesListResponse>;
  }

  /**
   * Deactivates the connected registry instance.
   * @param resourceGroupName The name of the resource group to which the container registry belongs.
   * @param registryName The name of the container registry.
   * @param connectedRegistryName The name of the connected registry.
   * @param [options] The optional parameters
   * @returns Promise<msRest.RestResponse>
   */
  deactivate(resourceGroupName: string, registryName: string, connectedRegistryName: string, options?: msRest.RequestOptionsBase): Promise<msRest.RestResponse> {
    return this.beginDeactivate(resourceGroupName,registryName,connectedRegistryName,options)
      .then(lroPoller => lroPoller.pollUntilFinished());
  }

  /**
   * Creates a connected registry for a container registry with the specified parameters.
   * @param resourceGroupName The name of the resource group to which the container registry belongs.
   * @param registryName The name of the container registry.
   * @param connectedRegistryName The name of the connected registry.
   * @param connectedRegistryCreateParameters The parameters for creating a connectedRegistry.
   * @param [options] The optional parameters
   * @returns Promise<msRestAzure.LROPoller>
   */
  beginCreate(resourceGroupName: string, registryName: string, connectedRegistryName: string, connectedRegistryCreateParameters: Models.ConnectedRegistry, options?: msRest.RequestOptionsBase): Promise<msRestAzure.LROPoller> {
    return this.client.sendLRORequest(
      {
        resourceGroupName,
        registryName,
        connectedRegistryName,
        connectedRegistryCreateParameters,
        options
      },
      beginCreateOperationSpec,
      options);
  }

  /**
   * Deletes a connected registry from a container registry.
   * @param resourceGroupName The name of the resource group to which the container registry belongs.
   * @param registryName The name of the container registry.
   * @param connectedRegistryName The name of the connected registry.
   * @param [options] The optional parameters
   * @returns Promise<msRestAzure.LROPoller>
   */
  beginDeleteMethod(resourceGroupName: string, registryName: string, connectedRegistryName: string, options?: msRest.RequestOptionsBase): Promise<msRestAzure.LROPoller> {
    return this.client.sendLRORequest(
      {
        resourceGroupName,
        registryName,
        connectedRegistryName,
        options
      },
      beginDeleteMethodOperationSpec,
      options);
  }

  /**
   * Updates a connected registry with the specified parameters.
   * @param resourceGroupName The name of the resource group to which the container registry belongs.
   * @param registryName The name of the container registry.
   * @param connectedRegistryName The name of the connected registry.
   * @param connectedRegistryUpdateParameters The parameters for updating a connectedRegistry.
   * @param [options] The optional parameters
   * @returns Promise<msRestAzure.LROPoller>
   */
  beginUpdate(resourceGroupName: string, registryName: string, connectedRegistryName: string, connectedRegistryUpdateParameters: Models.ConnectedRegistryUpdateParameters, options?: msRest.RequestOptionsBase): Promise<msRestAzure.LROPoller> {
    return this.client.sendLRORequest(
      {
        resourceGroupName,
        registryName,
        connectedRegistryName,
        connectedRegistryUpdateParameters,
        options
      },
      beginUpdateOperationSpec,
      options);
  }

  /**
   * Deactivates the connected registry instance.
   * @param resourceGroupName The name of the resource group to which the container registry belongs.
   * @param registryName The name of the container registry.
   * @param connectedRegistryName The name of the connected registry.
   * @param [options] The optional parameters
   * @returns Promise<msRestAzure.LROPoller>
   */
  beginDeactivate(resourceGroupName: string, registryName: string, connectedRegistryName: string, options?: msRest.RequestOptionsBase): Promise<msRestAzure.LROPoller> {
    return this.client.sendLRORequest(
      {
        resourceGroupName,
        registryName,
        connectedRegistryName,
        options
      },
      beginDeactivateOperationSpec,
      options);
  }

  /**
   * Lists all connected registries for the specified container registry.
   * @param nextPageLink The NextLink from the previous successful call to List operation.
   * @param [options] The optional parameters
   * @returns Promise<Models.ConnectedRegistriesListNextResponse>
   */
  listNext(nextPageLink: string, options?: Models.ConnectedRegistriesListNextOptionalParams): Promise<Models.ConnectedRegistriesListNextResponse>;
  /**
   * @param nextPageLink The NextLink from the previous successful call to List operation.
   * @param callback The callback
   */
  listNext(nextPageLink: string, callback: msRest.ServiceCallback<Models.ConnectedRegistryListResult>): void;
  /**
   * @param nextPageLink The NextLink from the previous successful call to List operation.
   * @param options The optional parameters
   * @param callback The callback
   */
  listNext(nextPageLink: string, options: Models.ConnectedRegistriesListNextOptionalParams, callback: msRest.ServiceCallback<Models.ConnectedRegistryListResult>): void;
  listNext(nextPageLink: string, options?: Models.ConnectedRegistriesListNextOptionalParams | msRest.ServiceCallback<Models.ConnectedRegistryListResult>, callback?: msRest.ServiceCallback<Models.ConnectedRegistryListResult>): Promise<Models.ConnectedRegistriesListNextResponse> {
    return this.client.sendOperationRequest(
      {
        nextPageLink,
        options
      },
      listNextOperationSpec,
      callback) as Promise<Models.ConnectedRegistriesListNextResponse>;
  }
}

// Operation Specifications
const serializer = new msRest.Serializer(Mappers);
const getOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ContainerRegistry/registries/{registryName}/connectedRegistries/{connectedRegistryName}",
  urlParameters: [
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.registryName,
    Parameters.connectedRegistryName
  ],
  queryParameters: [
    Parameters.apiVersion0
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    200: {
      bodyMapper: Mappers.ConnectedRegistry
    },
    default: {
      bodyMapper: Mappers.ErrorResponse
    }
  },
  serializer
};

const listOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ContainerRegistry/registries/{registryName}/connectedRegistries",
  urlParameters: [
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.registryName
  ],
  queryParameters: [
    Parameters.apiVersion0,
    Parameters.filter
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    200: {
      bodyMapper: Mappers.ConnectedRegistryListResult
    },
    default: {
      bodyMapper: Mappers.ErrorResponse
    }
  },
  serializer
};

const beginCreateOperationSpec: msRest.OperationSpec = {
  httpMethod: "PUT",
  path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ContainerRegistry/registries/{registryName}/connectedRegistries/{connectedRegistryName}",
  urlParameters: [
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.registryName,
    Parameters.connectedRegistryName
  ],
  queryParameters: [
    Parameters.apiVersion0
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  requestBody: {
    parameterPath: "connectedRegistryCreateParameters",
    mapper: {
      ...Mappers.ConnectedRegistry,
      required: true
    }
  },
  responses: {
    200: {
      bodyMapper: Mappers.ConnectedRegistry
    },
    201: {
      bodyMapper: Mappers.ConnectedRegistry
    },
    default: {
      bodyMapper: Mappers.ErrorResponse
    }
  },
  serializer
};

const beginDeleteMethodOperationSpec: msRest.OperationSpec = {
  httpMethod: "DELETE",
  path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ContainerRegistry/registries/{registryName}/connectedRegistries/{connectedRegistryName}",
  urlParameters: [
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.registryName,
    Parameters.connectedRegistryName
  ],
  queryParameters: [
    Parameters.apiVersion0
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    200: {},
    202: {},
    204: {},
    default: {
      bodyMapper: Mappers.ErrorResponse
    }
  },
  serializer
};

const beginUpdateOperationSpec: msRest.OperationSpec = {
  httpMethod: "PATCH",
  path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ContainerRegistry/registries/{registryName}/connectedRegistries/{connectedRegistryName}",
  urlParameters: [
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.registryName,
    Parameters.connectedRegistryName
  ],
  queryParameters: [
    Parameters.apiVersion0
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  requestBody: {
    parameterPath: "connectedRegistryUpdateParameters",
    mapper: {
      ...Mappers.ConnectedRegistryUpdateParameters,
      required: true
    }
  },
  responses: {
    200: {
      bodyMapper: Mappers.ConnectedRegistry
    },
    201: {
      bodyMapper: Mappers.ConnectedRegistry
    },
    default: {
      bodyMapper: Mappers.ErrorResponse
    }
  },
  serializer
};

const beginDeactivateOperationSpec: msRest.OperationSpec = {
  httpMethod: "POST",
  path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ContainerRegistry/registries/{registryName}/connectedRegistries/{connectedRegistryName}/deactivate",
  urlParameters: [
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.registryName,
    Parameters.connectedRegistryName
  ],
  queryParameters: [
    Parameters.apiVersion0
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    200: {},
    202: {},
    default: {
      bodyMapper: Mappers.ErrorResponse
    }
  },
  serializer
};

const listNextOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  baseUrl: "https://management.azure.com",
  path: "{nextLink}",
  urlParameters: [
    Parameters.nextPageLink
  ],
  queryParameters: [
    Parameters.apiVersion0,
    Parameters.filter
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    200: {
      bodyMapper: Mappers.ConnectedRegistryListResult
    },
    default: {
      bodyMapper: Mappers.ErrorResponse
    }
  },
  serializer
};
