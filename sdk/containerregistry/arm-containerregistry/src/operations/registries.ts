/*
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is
 * regenerated.
 */

import * as msRest from "@azure/ms-rest-js";
import * as msRestAzure from "@azure/ms-rest-azure-js";
import * as Models from "../models";
import * as Mappers from "../models/registriesMappers";
import * as Parameters from "../models/parameters";
import { ContainerRegistryManagementClientContext } from "../containerRegistryManagementClientContext";

/** Class representing a Registries. */
export class Registries {
  private readonly client: ContainerRegistryManagementClientContext;

  /**
   * Create a Registries.
   * @param {ContainerRegistryManagementClientContext} client Reference to the service client.
   */
  constructor(client: ContainerRegistryManagementClientContext) {
    this.client = client;
  }

  /**
   * Copies an image to this container registry from the specified container registry.
   * @param resourceGroupName The name of the resource group to which the container registry belongs.
   * @param registryName The name of the container registry.
   * @param parameters The parameters specifying the image to copy and the source container registry.
   * @param [options] The optional parameters
   * @returns Promise<msRest.RestResponse>
   */
  importImage(resourceGroupName: string, registryName: string, parameters: Models.ImportImageParameters, options?: msRest.RequestOptionsBase): Promise<msRest.RestResponse> {
    return this.beginImportImage(resourceGroupName,registryName,parameters,options)
      .then(lroPoller => lroPoller.pollUntilFinished());
  }

  /**
   * Checks whether the container registry name is available for use. The name must contain only
   * alphanumeric characters, be globally unique, and between 5 and 50 characters in length.
   * @param registryNameCheckRequest The object containing information for the availability request.
   * @param [options] The optional parameters
   * @returns Promise<Models.RegistriesCheckNameAvailabilityResponse>
   */
  checkNameAvailability(registryNameCheckRequest: Models.RegistryNameCheckRequest, options?: msRest.RequestOptionsBase): Promise<Models.RegistriesCheckNameAvailabilityResponse>;
  /**
   * @param registryNameCheckRequest The object containing information for the availability request.
   * @param callback The callback
   */
  checkNameAvailability(registryNameCheckRequest: Models.RegistryNameCheckRequest, callback: msRest.ServiceCallback<Models.RegistryNameStatus>): void;
  /**
   * @param registryNameCheckRequest The object containing information for the availability request.
   * @param options The optional parameters
   * @param callback The callback
   */
  checkNameAvailability(registryNameCheckRequest: Models.RegistryNameCheckRequest, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.RegistryNameStatus>): void;
  checkNameAvailability(registryNameCheckRequest: Models.RegistryNameCheckRequest, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<Models.RegistryNameStatus>, callback?: msRest.ServiceCallback<Models.RegistryNameStatus>): Promise<Models.RegistriesCheckNameAvailabilityResponse> {
    return this.client.sendOperationRequest(
      {
        registryNameCheckRequest,
        options
      },
      checkNameAvailabilityOperationSpec,
      callback) as Promise<Models.RegistriesCheckNameAvailabilityResponse>;
  }

  /**
   * Gets the properties of the specified container registry.
   * @param resourceGroupName The name of the resource group to which the container registry belongs.
   * @param registryName The name of the container registry.
   * @param [options] The optional parameters
   * @returns Promise<Models.RegistriesGetResponse>
   */
  get(resourceGroupName: string, registryName: string, options?: msRest.RequestOptionsBase): Promise<Models.RegistriesGetResponse>;
  /**
   * @param resourceGroupName The name of the resource group to which the container registry belongs.
   * @param registryName The name of the container registry.
   * @param callback The callback
   */
  get(resourceGroupName: string, registryName: string, callback: msRest.ServiceCallback<Models.Registry>): void;
  /**
   * @param resourceGroupName The name of the resource group to which the container registry belongs.
   * @param registryName The name of the container registry.
   * @param options The optional parameters
   * @param callback The callback
   */
  get(resourceGroupName: string, registryName: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.Registry>): void;
  get(resourceGroupName: string, registryName: string, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<Models.Registry>, callback?: msRest.ServiceCallback<Models.Registry>): Promise<Models.RegistriesGetResponse> {
    return this.client.sendOperationRequest(
      {
        resourceGroupName,
        registryName,
        options
      },
      getOperationSpec,
      callback) as Promise<Models.RegistriesGetResponse>;
  }

  /**
   * Creates a container registry with the specified parameters.
   * @param resourceGroupName The name of the resource group to which the container registry belongs.
   * @param registryName The name of the container registry.
   * @param registry The parameters for creating a container registry.
   * @param [options] The optional parameters
   * @returns Promise<Models.RegistriesCreateResponse>
   */
  create(resourceGroupName: string, registryName: string, registry: Models.Registry, options?: msRest.RequestOptionsBase): Promise<Models.RegistriesCreateResponse> {
    return this.beginCreate(resourceGroupName,registryName,registry,options)
      .then(lroPoller => lroPoller.pollUntilFinished()) as Promise<Models.RegistriesCreateResponse>;
  }

  /**
   * Deletes a container registry.
   * @param resourceGroupName The name of the resource group to which the container registry belongs.
   * @param registryName The name of the container registry.
   * @param [options] The optional parameters
   * @returns Promise<msRest.RestResponse>
   */
  deleteMethod(resourceGroupName: string, registryName: string, options?: msRest.RequestOptionsBase): Promise<msRest.RestResponse> {
    return this.beginDeleteMethod(resourceGroupName,registryName,options)
      .then(lroPoller => lroPoller.pollUntilFinished());
  }

  /**
   * Updates a container registry with the specified parameters.
   * @param resourceGroupName The name of the resource group to which the container registry belongs.
   * @param registryName The name of the container registry.
   * @param registryUpdateParameters The parameters for updating a container registry.
   * @param [options] The optional parameters
   * @returns Promise<Models.RegistriesUpdateResponse>
   */
  update(resourceGroupName: string, registryName: string, registryUpdateParameters: Models.RegistryUpdateParameters, options?: msRest.RequestOptionsBase): Promise<Models.RegistriesUpdateResponse> {
    return this.beginUpdate(resourceGroupName,registryName,registryUpdateParameters,options)
      .then(lroPoller => lroPoller.pollUntilFinished()) as Promise<Models.RegistriesUpdateResponse>;
  }

  /**
   * Lists all the container registries under the specified resource group.
   * @param resourceGroupName The name of the resource group to which the container registry belongs.
   * @param [options] The optional parameters
   * @returns Promise<Models.RegistriesListByResourceGroupResponse>
   */
  listByResourceGroup(resourceGroupName: string, options?: msRest.RequestOptionsBase): Promise<Models.RegistriesListByResourceGroupResponse>;
  /**
   * @param resourceGroupName The name of the resource group to which the container registry belongs.
   * @param callback The callback
   */
  listByResourceGroup(resourceGroupName: string, callback: msRest.ServiceCallback<Models.RegistryListResult>): void;
  /**
   * @param resourceGroupName The name of the resource group to which the container registry belongs.
   * @param options The optional parameters
   * @param callback The callback
   */
  listByResourceGroup(resourceGroupName: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.RegistryListResult>): void;
  listByResourceGroup(resourceGroupName: string, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<Models.RegistryListResult>, callback?: msRest.ServiceCallback<Models.RegistryListResult>): Promise<Models.RegistriesListByResourceGroupResponse> {
    return this.client.sendOperationRequest(
      {
        resourceGroupName,
        options
      },
      listByResourceGroupOperationSpec,
      callback) as Promise<Models.RegistriesListByResourceGroupResponse>;
  }

  /**
   * Lists all the container registries under the specified subscription.
   * @param [options] The optional parameters
   * @returns Promise<Models.RegistriesListResponse>
   */
  list(options?: msRest.RequestOptionsBase): Promise<Models.RegistriesListResponse>;
  /**
   * @param callback The callback
   */
  list(callback: msRest.ServiceCallback<Models.RegistryListResult>): void;
  /**
   * @param options The optional parameters
   * @param callback The callback
   */
  list(options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.RegistryListResult>): void;
  list(options?: msRest.RequestOptionsBase | msRest.ServiceCallback<Models.RegistryListResult>, callback?: msRest.ServiceCallback<Models.RegistryListResult>): Promise<Models.RegistriesListResponse> {
    return this.client.sendOperationRequest(
      {
        options
      },
      listOperationSpec,
      callback) as Promise<Models.RegistriesListResponse>;
  }

  /**
   * Lists the login credentials for the specified container registry.
   * @param resourceGroupName The name of the resource group to which the container registry belongs.
   * @param registryName The name of the container registry.
   * @param [options] The optional parameters
   * @returns Promise<Models.RegistriesListCredentialsResponse>
   */
  listCredentials(resourceGroupName: string, registryName: string, options?: msRest.RequestOptionsBase): Promise<Models.RegistriesListCredentialsResponse>;
  /**
   * @param resourceGroupName The name of the resource group to which the container registry belongs.
   * @param registryName The name of the container registry.
   * @param callback The callback
   */
  listCredentials(resourceGroupName: string, registryName: string, callback: msRest.ServiceCallback<Models.RegistryListCredentialsResult>): void;
  /**
   * @param resourceGroupName The name of the resource group to which the container registry belongs.
   * @param registryName The name of the container registry.
   * @param options The optional parameters
   * @param callback The callback
   */
  listCredentials(resourceGroupName: string, registryName: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.RegistryListCredentialsResult>): void;
  listCredentials(resourceGroupName: string, registryName: string, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<Models.RegistryListCredentialsResult>, callback?: msRest.ServiceCallback<Models.RegistryListCredentialsResult>): Promise<Models.RegistriesListCredentialsResponse> {
    return this.client.sendOperationRequest(
      {
        resourceGroupName,
        registryName,
        options
      },
      listCredentialsOperationSpec,
      callback) as Promise<Models.RegistriesListCredentialsResponse>;
  }

  /**
   * Regenerates one of the login credentials for the specified container registry.
   * @param resourceGroupName The name of the resource group to which the container registry belongs.
   * @param registryName The name of the container registry.
   * @param regenerateCredentialParameters Specifies name of the password which should be regenerated
   * -- password or password2.
   * @param [options] The optional parameters
   * @returns Promise<Models.RegistriesRegenerateCredentialResponse>
   */
  regenerateCredential(resourceGroupName: string, registryName: string, regenerateCredentialParameters: Models.RegenerateCredentialParameters, options?: msRest.RequestOptionsBase): Promise<Models.RegistriesRegenerateCredentialResponse>;
  /**
   * @param resourceGroupName The name of the resource group to which the container registry belongs.
   * @param registryName The name of the container registry.
   * @param regenerateCredentialParameters Specifies name of the password which should be regenerated
   * -- password or password2.
   * @param callback The callback
   */
  regenerateCredential(resourceGroupName: string, registryName: string, regenerateCredentialParameters: Models.RegenerateCredentialParameters, callback: msRest.ServiceCallback<Models.RegistryListCredentialsResult>): void;
  /**
   * @param resourceGroupName The name of the resource group to which the container registry belongs.
   * @param registryName The name of the container registry.
   * @param regenerateCredentialParameters Specifies name of the password which should be regenerated
   * -- password or password2.
   * @param options The optional parameters
   * @param callback The callback
   */
  regenerateCredential(resourceGroupName: string, registryName: string, regenerateCredentialParameters: Models.RegenerateCredentialParameters, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.RegistryListCredentialsResult>): void;
  regenerateCredential(resourceGroupName: string, registryName: string, regenerateCredentialParameters: Models.RegenerateCredentialParameters, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<Models.RegistryListCredentialsResult>, callback?: msRest.ServiceCallback<Models.RegistryListCredentialsResult>): Promise<Models.RegistriesRegenerateCredentialResponse> {
    return this.client.sendOperationRequest(
      {
        resourceGroupName,
        registryName,
        regenerateCredentialParameters,
        options
      },
      regenerateCredentialOperationSpec,
      callback) as Promise<Models.RegistriesRegenerateCredentialResponse>;
  }

  /**
   * Gets the quota usages for the specified container registry.
   * @param resourceGroupName The name of the resource group to which the container registry belongs.
   * @param registryName The name of the container registry.
   * @param [options] The optional parameters
   * @returns Promise<Models.RegistriesListUsagesResponse>
   */
  listUsages(resourceGroupName: string, registryName: string, options?: msRest.RequestOptionsBase): Promise<Models.RegistriesListUsagesResponse>;
  /**
   * @param resourceGroupName The name of the resource group to which the container registry belongs.
   * @param registryName The name of the container registry.
   * @param callback The callback
   */
  listUsages(resourceGroupName: string, registryName: string, callback: msRest.ServiceCallback<Models.RegistryUsageListResult>): void;
  /**
   * @param resourceGroupName The name of the resource group to which the container registry belongs.
   * @param registryName The name of the container registry.
   * @param options The optional parameters
   * @param callback The callback
   */
  listUsages(resourceGroupName: string, registryName: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.RegistryUsageListResult>): void;
  listUsages(resourceGroupName: string, registryName: string, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<Models.RegistryUsageListResult>, callback?: msRest.ServiceCallback<Models.RegistryUsageListResult>): Promise<Models.RegistriesListUsagesResponse> {
    return this.client.sendOperationRequest(
      {
        resourceGroupName,
        registryName,
        options
      },
      listUsagesOperationSpec,
      callback) as Promise<Models.RegistriesListUsagesResponse>;
  }

  /**
   * Lists the private link resources for a container registry.
   * @param resourceGroupName The name of the resource group to which the container registry belongs.
   * @param registryName The name of the container registry.
   * @param [options] The optional parameters
   * @returns Promise<Models.RegistriesListPrivateLinkResourcesResponse>
   */
  listPrivateLinkResources(resourceGroupName: string, registryName: string, options?: msRest.RequestOptionsBase): Promise<Models.RegistriesListPrivateLinkResourcesResponse>;
  /**
   * @param resourceGroupName The name of the resource group to which the container registry belongs.
   * @param registryName The name of the container registry.
   * @param callback The callback
   */
  listPrivateLinkResources(resourceGroupName: string, registryName: string, callback: msRest.ServiceCallback<Models.PrivateLinkResourceListResult>): void;
  /**
   * @param resourceGroupName The name of the resource group to which the container registry belongs.
   * @param registryName The name of the container registry.
   * @param options The optional parameters
   * @param callback The callback
   */
  listPrivateLinkResources(resourceGroupName: string, registryName: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.PrivateLinkResourceListResult>): void;
  listPrivateLinkResources(resourceGroupName: string, registryName: string, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<Models.PrivateLinkResourceListResult>, callback?: msRest.ServiceCallback<Models.PrivateLinkResourceListResult>): Promise<Models.RegistriesListPrivateLinkResourcesResponse> {
    return this.client.sendOperationRequest(
      {
        resourceGroupName,
        registryName,
        options
      },
      listPrivateLinkResourcesOperationSpec,
      callback) as Promise<Models.RegistriesListPrivateLinkResourcesResponse>;
  }

  /**
   * Schedules a new run based on the request parameters and add it to the run queue.
   * @param resourceGroupName The name of the resource group to which the container registry belongs.
   * @param registryName The name of the container registry.
   * @param runRequest The parameters of a run that needs to scheduled.
   * @param [options] The optional parameters
   * @returns Promise<Models.RegistriesScheduleRunResponse>
   */
  scheduleRun(resourceGroupName: string, registryName: string, runRequest: Models.RunRequestUnion, options?: msRest.RequestOptionsBase): Promise<Models.RegistriesScheduleRunResponse> {
    return this.beginScheduleRun(resourceGroupName,registryName,runRequest,options)
      .then(lroPoller => lroPoller.pollUntilFinished()) as Promise<Models.RegistriesScheduleRunResponse>;
  }

  /**
   * Get the upload location for the user to be able to upload the source.
   * @param resourceGroupName The name of the resource group to which the container registry belongs.
   * @param registryName The name of the container registry.
   * @param [options] The optional parameters
   * @returns Promise<Models.RegistriesGetBuildSourceUploadUrlResponse>
   */
  getBuildSourceUploadUrl(resourceGroupName: string, registryName: string, options?: msRest.RequestOptionsBase): Promise<Models.RegistriesGetBuildSourceUploadUrlResponse>;
  /**
   * @param resourceGroupName The name of the resource group to which the container registry belongs.
   * @param registryName The name of the container registry.
   * @param callback The callback
   */
  getBuildSourceUploadUrl(resourceGroupName: string, registryName: string, callback: msRest.ServiceCallback<Models.SourceUploadDefinition>): void;
  /**
   * @param resourceGroupName The name of the resource group to which the container registry belongs.
   * @param registryName The name of the container registry.
   * @param options The optional parameters
   * @param callback The callback
   */
  getBuildSourceUploadUrl(resourceGroupName: string, registryName: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.SourceUploadDefinition>): void;
  getBuildSourceUploadUrl(resourceGroupName: string, registryName: string, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<Models.SourceUploadDefinition>, callback?: msRest.ServiceCallback<Models.SourceUploadDefinition>): Promise<Models.RegistriesGetBuildSourceUploadUrlResponse> {
    return this.client.sendOperationRequest(
      {
        resourceGroupName,
        registryName,
        options
      },
      getBuildSourceUploadUrlOperationSpec,
      callback) as Promise<Models.RegistriesGetBuildSourceUploadUrlResponse>;
  }

  /**
   * Generate keys for a token of a specified container registry.
   * @param resourceGroupName The name of the resource group to which the container registry belongs.
   * @param registryName The name of the container registry.
   * @param generateCredentialsParameters The parameters for generating credentials.
   * @param [options] The optional parameters
   * @returns Promise<Models.RegistriesGenerateCredentialsResponse>
   */
  generateCredentials(resourceGroupName: string, registryName: string, generateCredentialsParameters: Models.GenerateCredentialsParameters, options?: msRest.RequestOptionsBase): Promise<Models.RegistriesGenerateCredentialsResponse> {
    return this.beginGenerateCredentials(resourceGroupName,registryName,generateCredentialsParameters,options)
      .then(lroPoller => lroPoller.pollUntilFinished()) as Promise<Models.RegistriesGenerateCredentialsResponse>;
  }

  /**
   * Copies an image to this container registry from the specified container registry.
   * @param resourceGroupName The name of the resource group to which the container registry belongs.
   * @param registryName The name of the container registry.
   * @param parameters The parameters specifying the image to copy and the source container registry.
   * @param [options] The optional parameters
   * @returns Promise<msRestAzure.LROPoller>
   */
  beginImportImage(resourceGroupName: string, registryName: string, parameters: Models.ImportImageParameters, options?: msRest.RequestOptionsBase): Promise<msRestAzure.LROPoller> {
    return this.client.sendLRORequest(
      {
        resourceGroupName,
        registryName,
        parameters,
        options
      },
      beginImportImageOperationSpec,
      options);
  }

  /**
   * Creates a container registry with the specified parameters.
   * @param resourceGroupName The name of the resource group to which the container registry belongs.
   * @param registryName The name of the container registry.
   * @param registry The parameters for creating a container registry.
   * @param [options] The optional parameters
   * @returns Promise<msRestAzure.LROPoller>
   */
  beginCreate(resourceGroupName: string, registryName: string, registry: Models.Registry, options?: msRest.RequestOptionsBase): Promise<msRestAzure.LROPoller> {
    return this.client.sendLRORequest(
      {
        resourceGroupName,
        registryName,
        registry,
        options
      },
      beginCreateOperationSpec,
      options);
  }

  /**
   * Deletes a container registry.
   * @param resourceGroupName The name of the resource group to which the container registry belongs.
   * @param registryName The name of the container registry.
   * @param [options] The optional parameters
   * @returns Promise<msRestAzure.LROPoller>
   */
  beginDeleteMethod(resourceGroupName: string, registryName: string, options?: msRest.RequestOptionsBase): Promise<msRestAzure.LROPoller> {
    return this.client.sendLRORequest(
      {
        resourceGroupName,
        registryName,
        options
      },
      beginDeleteMethodOperationSpec,
      options);
  }

  /**
   * Updates a container registry with the specified parameters.
   * @param resourceGroupName The name of the resource group to which the container registry belongs.
   * @param registryName The name of the container registry.
   * @param registryUpdateParameters The parameters for updating a container registry.
   * @param [options] The optional parameters
   * @returns Promise<msRestAzure.LROPoller>
   */
  beginUpdate(resourceGroupName: string, registryName: string, registryUpdateParameters: Models.RegistryUpdateParameters, options?: msRest.RequestOptionsBase): Promise<msRestAzure.LROPoller> {
    return this.client.sendLRORequest(
      {
        resourceGroupName,
        registryName,
        registryUpdateParameters,
        options
      },
      beginUpdateOperationSpec,
      options);
  }

  /**
   * Schedules a new run based on the request parameters and add it to the run queue.
   * @param resourceGroupName The name of the resource group to which the container registry belongs.
   * @param registryName The name of the container registry.
   * @param runRequest The parameters of a run that needs to scheduled.
   * @param [options] The optional parameters
   * @returns Promise<msRestAzure.LROPoller>
   */
  beginScheduleRun(resourceGroupName: string, registryName: string, runRequest: Models.RunRequestUnion, options?: msRest.RequestOptionsBase): Promise<msRestAzure.LROPoller> {
    return this.client.sendLRORequest(
      {
        resourceGroupName,
        registryName,
        runRequest,
        options
      },
      beginScheduleRunOperationSpec,
      options);
  }

  /**
   * Generate keys for a token of a specified container registry.
   * @param resourceGroupName The name of the resource group to which the container registry belongs.
   * @param registryName The name of the container registry.
   * @param generateCredentialsParameters The parameters for generating credentials.
   * @param [options] The optional parameters
   * @returns Promise<msRestAzure.LROPoller>
   */
  beginGenerateCredentials(resourceGroupName: string, registryName: string, generateCredentialsParameters: Models.GenerateCredentialsParameters, options?: msRest.RequestOptionsBase): Promise<msRestAzure.LROPoller> {
    return this.client.sendLRORequest(
      {
        resourceGroupName,
        registryName,
        generateCredentialsParameters,
        options
      },
      beginGenerateCredentialsOperationSpec,
      options);
  }

  /**
   * Lists all the container registries under the specified resource group.
   * @param nextPageLink The NextLink from the previous successful call to List operation.
   * @param [options] The optional parameters
   * @returns Promise<Models.RegistriesListByResourceGroupNextResponse>
   */
  listByResourceGroupNext(nextPageLink: string, options?: msRest.RequestOptionsBase): Promise<Models.RegistriesListByResourceGroupNextResponse>;
  /**
   * @param nextPageLink The NextLink from the previous successful call to List operation.
   * @param callback The callback
   */
  listByResourceGroupNext(nextPageLink: string, callback: msRest.ServiceCallback<Models.RegistryListResult>): void;
  /**
   * @param nextPageLink The NextLink from the previous successful call to List operation.
   * @param options The optional parameters
   * @param callback The callback
   */
  listByResourceGroupNext(nextPageLink: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.RegistryListResult>): void;
  listByResourceGroupNext(nextPageLink: string, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<Models.RegistryListResult>, callback?: msRest.ServiceCallback<Models.RegistryListResult>): Promise<Models.RegistriesListByResourceGroupNextResponse> {
    return this.client.sendOperationRequest(
      {
        nextPageLink,
        options
      },
      listByResourceGroupNextOperationSpec,
      callback) as Promise<Models.RegistriesListByResourceGroupNextResponse>;
  }

  /**
   * Lists all the container registries under the specified subscription.
   * @param nextPageLink The NextLink from the previous successful call to List operation.
   * @param [options] The optional parameters
   * @returns Promise<Models.RegistriesListNextResponse>
   */
  listNext(nextPageLink: string, options?: msRest.RequestOptionsBase): Promise<Models.RegistriesListNextResponse>;
  /**
   * @param nextPageLink The NextLink from the previous successful call to List operation.
   * @param callback The callback
   */
  listNext(nextPageLink: string, callback: msRest.ServiceCallback<Models.RegistryListResult>): void;
  /**
   * @param nextPageLink The NextLink from the previous successful call to List operation.
   * @param options The optional parameters
   * @param callback The callback
   */
  listNext(nextPageLink: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.RegistryListResult>): void;
  listNext(nextPageLink: string, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<Models.RegistryListResult>, callback?: msRest.ServiceCallback<Models.RegistryListResult>): Promise<Models.RegistriesListNextResponse> {
    return this.client.sendOperationRequest(
      {
        nextPageLink,
        options
      },
      listNextOperationSpec,
      callback) as Promise<Models.RegistriesListNextResponse>;
  }

  /**
   * Lists the private link resources for a container registry.
   * @param nextPageLink The NextLink from the previous successful call to List operation.
   * @param [options] The optional parameters
   * @returns Promise<Models.RegistriesListPrivateLinkResourcesNextResponse>
   */
  listPrivateLinkResourcesNext(nextPageLink: string, options?: msRest.RequestOptionsBase): Promise<Models.RegistriesListPrivateLinkResourcesNextResponse>;
  /**
   * @param nextPageLink The NextLink from the previous successful call to List operation.
   * @param callback The callback
   */
  listPrivateLinkResourcesNext(nextPageLink: string, callback: msRest.ServiceCallback<Models.PrivateLinkResourceListResult>): void;
  /**
   * @param nextPageLink The NextLink from the previous successful call to List operation.
   * @param options The optional parameters
   * @param callback The callback
   */
  listPrivateLinkResourcesNext(nextPageLink: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.PrivateLinkResourceListResult>): void;
  listPrivateLinkResourcesNext(nextPageLink: string, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<Models.PrivateLinkResourceListResult>, callback?: msRest.ServiceCallback<Models.PrivateLinkResourceListResult>): Promise<Models.RegistriesListPrivateLinkResourcesNextResponse> {
    return this.client.sendOperationRequest(
      {
        nextPageLink,
        options
      },
      listPrivateLinkResourcesNextOperationSpec,
      callback) as Promise<Models.RegistriesListPrivateLinkResourcesNextResponse>;
  }
}

// Operation Specifications
const serializer = new msRest.Serializer(Mappers);
const checkNameAvailabilityOperationSpec: msRest.OperationSpec = {
  httpMethod: "POST",
  path: "subscriptions/{subscriptionId}/providers/Microsoft.ContainerRegistry/checkNameAvailability",
  urlParameters: [
    Parameters.subscriptionId
  ],
  queryParameters: [
    Parameters.apiVersion0
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  requestBody: {
    parameterPath: "registryNameCheckRequest",
    mapper: {
      ...Mappers.RegistryNameCheckRequest,
      required: true
    }
  },
  responses: {
    200: {
      bodyMapper: Mappers.RegistryNameStatus
    },
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  serializer
};

const getOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ContainerRegistry/registries/{registryName}",
  urlParameters: [
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.registryName
  ],
  queryParameters: [
    Parameters.apiVersion0
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    200: {
      bodyMapper: Mappers.Registry
    },
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  serializer
};

const listByResourceGroupOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ContainerRegistry/registries",
  urlParameters: [
    Parameters.subscriptionId,
    Parameters.resourceGroupName
  ],
  queryParameters: [
    Parameters.apiVersion0
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    200: {
      bodyMapper: Mappers.RegistryListResult
    },
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  serializer
};

const listOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "subscriptions/{subscriptionId}/providers/Microsoft.ContainerRegistry/registries",
  urlParameters: [
    Parameters.subscriptionId
  ],
  queryParameters: [
    Parameters.apiVersion0
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    200: {
      bodyMapper: Mappers.RegistryListResult
    },
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  serializer
};

const listCredentialsOperationSpec: msRest.OperationSpec = {
  httpMethod: "POST",
  path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ContainerRegistry/registries/{registryName}/listCredentials",
  urlParameters: [
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.registryName
  ],
  queryParameters: [
    Parameters.apiVersion0
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    200: {
      bodyMapper: Mappers.RegistryListCredentialsResult
    },
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  serializer
};

const regenerateCredentialOperationSpec: msRest.OperationSpec = {
  httpMethod: "POST",
  path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ContainerRegistry/registries/{registryName}/regenerateCredential",
  urlParameters: [
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.registryName
  ],
  queryParameters: [
    Parameters.apiVersion0
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  requestBody: {
    parameterPath: "regenerateCredentialParameters",
    mapper: {
      ...Mappers.RegenerateCredentialParameters,
      required: true
    }
  },
  responses: {
    200: {
      bodyMapper: Mappers.RegistryListCredentialsResult
    },
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  serializer
};

const listUsagesOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ContainerRegistry/registries/{registryName}/listUsages",
  urlParameters: [
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.registryName
  ],
  queryParameters: [
    Parameters.apiVersion0
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    200: {
      bodyMapper: Mappers.RegistryUsageListResult
    },
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  serializer
};

const listPrivateLinkResourcesOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ContainerRegistry/registries/{registryName}/privateLinkResources",
  urlParameters: [
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.registryName
  ],
  queryParameters: [
    Parameters.apiVersion0
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    200: {
      bodyMapper: Mappers.PrivateLinkResourceListResult
    },
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  serializer
};

const getBuildSourceUploadUrlOperationSpec: msRest.OperationSpec = {
  httpMethod: "POST",
  path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ContainerRegistry/registries/{registryName}/listBuildSourceUploadUrl",
  urlParameters: [
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.registryName
  ],
  queryParameters: [
    Parameters.apiVersion1
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    200: {
      bodyMapper: Mappers.SourceUploadDefinition
    },
    default: {
      bodyMapper: Mappers.ErrorResponse
    }
  },
  serializer
};

const beginImportImageOperationSpec: msRest.OperationSpec = {
  httpMethod: "POST",
  path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ContainerRegistry/registries/{registryName}/importImage",
  urlParameters: [
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.registryName
  ],
  queryParameters: [
    Parameters.apiVersion0
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  requestBody: {
    parameterPath: "parameters",
    mapper: {
      ...Mappers.ImportImageParameters,
      required: true
    }
  },
  responses: {
    200: {},
    202: {},
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  serializer
};

const beginCreateOperationSpec: msRest.OperationSpec = {
  httpMethod: "PUT",
  path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ContainerRegistry/registries/{registryName}",
  urlParameters: [
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.registryName
  ],
  queryParameters: [
    Parameters.apiVersion0
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  requestBody: {
    parameterPath: "registry",
    mapper: {
      ...Mappers.Registry,
      required: true
    }
  },
  responses: {
    200: {
      bodyMapper: Mappers.Registry
    },
    201: {
      bodyMapper: Mappers.Registry
    },
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  serializer
};

const beginDeleteMethodOperationSpec: msRest.OperationSpec = {
  httpMethod: "DELETE",
  path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ContainerRegistry/registries/{registryName}",
  urlParameters: [
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.registryName
  ],
  queryParameters: [
    Parameters.apiVersion0
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    200: {},
    202: {},
    204: {},
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  serializer
};

const beginUpdateOperationSpec: msRest.OperationSpec = {
  httpMethod: "PATCH",
  path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ContainerRegistry/registries/{registryName}",
  urlParameters: [
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.registryName
  ],
  queryParameters: [
    Parameters.apiVersion0
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  requestBody: {
    parameterPath: "registryUpdateParameters",
    mapper: {
      ...Mappers.RegistryUpdateParameters,
      required: true
    }
  },
  responses: {
    200: {
      bodyMapper: Mappers.Registry
    },
    201: {
      bodyMapper: Mappers.Registry
    },
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  serializer
};

const beginScheduleRunOperationSpec: msRest.OperationSpec = {
  httpMethod: "POST",
  path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ContainerRegistry/registries/{registryName}/scheduleRun",
  urlParameters: [
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.registryName
  ],
  queryParameters: [
    Parameters.apiVersion1
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  requestBody: {
    parameterPath: "runRequest",
    mapper: {
      ...Mappers.RunRequest,
      required: true
    }
  },
  responses: {
    200: {
      bodyMapper: Mappers.Run
    },
    202: {},
    default: {
      bodyMapper: Mappers.ErrorResponse
    }
  },
  serializer
};

const beginGenerateCredentialsOperationSpec: msRest.OperationSpec = {
  httpMethod: "POST",
  path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ContainerRegistry/registries/{registryName}/generateCredentials",
  urlParameters: [
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.registryName
  ],
  queryParameters: [
    Parameters.apiVersion2
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  requestBody: {
    parameterPath: "generateCredentialsParameters",
    mapper: {
      ...Mappers.GenerateCredentialsParameters,
      required: true
    }
  },
  responses: {
    200: {
      bodyMapper: Mappers.GenerateCredentialsResult
    },
    202: {},
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  serializer
};

const listByResourceGroupNextOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  baseUrl: "https://management.azure.com",
  path: "{nextLink}",
  urlParameters: [
    Parameters.nextPageLink
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    200: {
      bodyMapper: Mappers.RegistryListResult
    },
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  serializer
};

const listNextOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  baseUrl: "https://management.azure.com",
  path: "{nextLink}",
  urlParameters: [
    Parameters.nextPageLink
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    200: {
      bodyMapper: Mappers.RegistryListResult
    },
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  serializer
};

const listPrivateLinkResourcesNextOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  baseUrl: "https://management.azure.com",
  path: "{nextLink}",
  urlParameters: [
    Parameters.nextPageLink
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    200: {
      bodyMapper: Mappers.PrivateLinkResourceListResult
    },
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  serializer
};
