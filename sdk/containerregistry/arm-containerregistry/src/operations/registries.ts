/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */

import { PagedAsyncIterableIterator, PageSettings } from "@azure/core-paging";
import { setContinuationToken } from "../pagingHelper";
import { Registries } from "../operationsInterfaces";
import * as coreClient from "@azure/core-client";
import * as Mappers from "../models/mappers";
import * as Parameters from "../models/parameters";
import { ContainerRegistryManagementClient } from "../containerRegistryManagementClient";
import { PollerLike, PollOperationState, LroEngine } from "@azure/core-lro";
import { LroImpl } from "../lroImpl";
import {
  Registry,
  RegistriesListNextOptionalParams,
  RegistriesListOptionalParams,
  RegistriesListResponse,
  RegistriesListByResourceGroupNextOptionalParams,
  RegistriesListByResourceGroupOptionalParams,
  RegistriesListByResourceGroupResponse,
  PrivateLinkResource,
  RegistriesListPrivateLinkResourcesNextOptionalParams,
  RegistriesListPrivateLinkResourcesOptionalParams,
  RegistriesListPrivateLinkResourcesResponse,
  ImportImageParameters,
  RegistriesImportImageOptionalParams,
  RegistryNameCheckRequest,
  RegistriesCheckNameAvailabilityOptionalParams,
  RegistriesCheckNameAvailabilityResponse,
  RegistriesGetOptionalParams,
  RegistriesGetResponse,
  RegistriesCreateOptionalParams,
  RegistriesCreateResponse,
  RegistriesDeleteOptionalParams,
  RegistryUpdateParameters,
  RegistriesUpdateOptionalParams,
  RegistriesUpdateResponse,
  RegistriesListUsagesOptionalParams,
  RegistriesListUsagesResponse,
  RegistriesGetPrivateLinkResourceOptionalParams,
  RegistriesGetPrivateLinkResourceResponse,
  RegistriesListCredentialsOptionalParams,
  RegistriesListCredentialsResponse,
  RegenerateCredentialParameters,
  RegistriesRegenerateCredentialOptionalParams,
  RegistriesRegenerateCredentialResponse,
  GenerateCredentialsParameters,
  RegistriesGenerateCredentialsOptionalParams,
  RegistriesGenerateCredentialsResponse,
  RunRequestUnion,
  RegistriesScheduleRunOptionalParams,
  RegistriesScheduleRunResponse,
  RegistriesGetBuildSourceUploadUrlOptionalParams,
  RegistriesGetBuildSourceUploadUrlResponse,
  RegistriesListNextResponse,
  RegistriesListByResourceGroupNextResponse,
  RegistriesListPrivateLinkResourcesNextResponse
} from "../models";

/// <reference lib="esnext.asynciterable" />
/** Class containing Registries operations. */
export class RegistriesImpl implements Registries {
  private readonly client: ContainerRegistryManagementClient;

  /**
   * Initialize a new instance of the class Registries class.
   * @param client Reference to the service client
   */
  constructor(client: ContainerRegistryManagementClient) {
    this.client = client;
  }

  /**
   * Lists all the container registries under the specified subscription.
   * @param options The options parameters.
   */
  public list(
    options?: RegistriesListOptionalParams
  ): PagedAsyncIterableIterator<Registry> {
    const iter = this.listPagingAll(options);
    return {
      next() {
        return iter.next();
      },
      [Symbol.asyncIterator]() {
        return this;
      },
      byPage: (settings?: PageSettings) => {
        if (settings?.maxPageSize) {
          throw new Error("maxPageSize is not supported by this operation.");
        }
        return this.listPagingPage(options, settings);
      }
    };
  }

  private async *listPagingPage(
    options?: RegistriesListOptionalParams,
    settings?: PageSettings
  ): AsyncIterableIterator<Registry[]> {
    let result: RegistriesListResponse;
    let continuationToken = settings?.continuationToken;
    if (!continuationToken) {
      result = await this._list(options);
      let page = result.value || [];
      continuationToken = result.nextLink;
      setContinuationToken(page, continuationToken);
      yield page;
    }
    while (continuationToken) {
      result = await this._listNext(continuationToken, options);
      continuationToken = result.nextLink;
      let page = result.value || [];
      setContinuationToken(page, continuationToken);
      yield page;
    }
  }

  private async *listPagingAll(
    options?: RegistriesListOptionalParams
  ): AsyncIterableIterator<Registry> {
    for await (const page of this.listPagingPage(options)) {
      yield* page;
    }
  }

  /**
   * Lists all the container registries under the specified resource group.
   * @param resourceGroupName The name of the resource group to which the container registry belongs.
   * @param options The options parameters.
   */
  public listByResourceGroup(
    resourceGroupName: string,
    options?: RegistriesListByResourceGroupOptionalParams
  ): PagedAsyncIterableIterator<Registry> {
    const iter = this.listByResourceGroupPagingAll(resourceGroupName, options);
    return {
      next() {
        return iter.next();
      },
      [Symbol.asyncIterator]() {
        return this;
      },
      byPage: (settings?: PageSettings) => {
        if (settings?.maxPageSize) {
          throw new Error("maxPageSize is not supported by this operation.");
        }
        return this.listByResourceGroupPagingPage(
          resourceGroupName,
          options,
          settings
        );
      }
    };
  }

  private async *listByResourceGroupPagingPage(
    resourceGroupName: string,
    options?: RegistriesListByResourceGroupOptionalParams,
    settings?: PageSettings
  ): AsyncIterableIterator<Registry[]> {
    let result: RegistriesListByResourceGroupResponse;
    let continuationToken = settings?.continuationToken;
    if (!continuationToken) {
      result = await this._listByResourceGroup(resourceGroupName, options);
      let page = result.value || [];
      continuationToken = result.nextLink;
      setContinuationToken(page, continuationToken);
      yield page;
    }
    while (continuationToken) {
      result = await this._listByResourceGroupNext(
        resourceGroupName,
        continuationToken,
        options
      );
      continuationToken = result.nextLink;
      let page = result.value || [];
      setContinuationToken(page, continuationToken);
      yield page;
    }
  }

  private async *listByResourceGroupPagingAll(
    resourceGroupName: string,
    options?: RegistriesListByResourceGroupOptionalParams
  ): AsyncIterableIterator<Registry> {
    for await (const page of this.listByResourceGroupPagingPage(
      resourceGroupName,
      options
    )) {
      yield* page;
    }
  }

  /**
   * Lists the private link resources for a container registry.
   * @param resourceGroupName The name of the resource group to which the container registry belongs.
   * @param registryName The name of the container registry.
   * @param options The options parameters.
   */
  public listPrivateLinkResources(
    resourceGroupName: string,
    registryName: string,
    options?: RegistriesListPrivateLinkResourcesOptionalParams
  ): PagedAsyncIterableIterator<PrivateLinkResource> {
    const iter = this.listPrivateLinkResourcesPagingAll(
      resourceGroupName,
      registryName,
      options
    );
    return {
      next() {
        return iter.next();
      },
      [Symbol.asyncIterator]() {
        return this;
      },
      byPage: (settings?: PageSettings) => {
        if (settings?.maxPageSize) {
          throw new Error("maxPageSize is not supported by this operation.");
        }
        return this.listPrivateLinkResourcesPagingPage(
          resourceGroupName,
          registryName,
          options,
          settings
        );
      }
    };
  }

  private async *listPrivateLinkResourcesPagingPage(
    resourceGroupName: string,
    registryName: string,
    options?: RegistriesListPrivateLinkResourcesOptionalParams,
    settings?: PageSettings
  ): AsyncIterableIterator<PrivateLinkResource[]> {
    let result: RegistriesListPrivateLinkResourcesResponse;
    let continuationToken = settings?.continuationToken;
    if (!continuationToken) {
      result = await this._listPrivateLinkResources(
        resourceGroupName,
        registryName,
        options
      );
      let page = result.value || [];
      continuationToken = result.nextLink;
      setContinuationToken(page, continuationToken);
      yield page;
    }
    while (continuationToken) {
      result = await this._listPrivateLinkResourcesNext(
        resourceGroupName,
        registryName,
        continuationToken,
        options
      );
      continuationToken = result.nextLink;
      let page = result.value || [];
      setContinuationToken(page, continuationToken);
      yield page;
    }
  }

  private async *listPrivateLinkResourcesPagingAll(
    resourceGroupName: string,
    registryName: string,
    options?: RegistriesListPrivateLinkResourcesOptionalParams
  ): AsyncIterableIterator<PrivateLinkResource> {
    for await (const page of this.listPrivateLinkResourcesPagingPage(
      resourceGroupName,
      registryName,
      options
    )) {
      yield* page;
    }
  }

  /**
   * Copies an image to this container registry from the specified container registry.
   * @param resourceGroupName The name of the resource group to which the container registry belongs.
   * @param registryName The name of the container registry.
   * @param parameters The parameters specifying the image to copy and the source container registry.
   * @param options The options parameters.
   */
  async beginImportImage(
    resourceGroupName: string,
    registryName: string,
    parameters: ImportImageParameters,
    options?: RegistriesImportImageOptionalParams
  ): Promise<PollerLike<PollOperationState<void>, void>> {
    const directSendOperation = async (
      args: coreClient.OperationArguments,
      spec: coreClient.OperationSpec
    ): Promise<void> => {
      return this.client.sendOperationRequest(args, spec);
    };
    const sendOperation = async (
      args: coreClient.OperationArguments,
      spec: coreClient.OperationSpec
    ) => {
      let currentRawResponse:
        | coreClient.FullOperationResponse
        | undefined = undefined;
      const providedCallback = args.options?.onResponse;
      const callback: coreClient.RawResponseCallback = (
        rawResponse: coreClient.FullOperationResponse,
        flatResponse: unknown
      ) => {
        currentRawResponse = rawResponse;
        providedCallback?.(rawResponse, flatResponse);
      };
      const updatedArgs = {
        ...args,
        options: {
          ...args.options,
          onResponse: callback
        }
      };
      const flatResponse = await directSendOperation(updatedArgs, spec);
      return {
        flatResponse,
        rawResponse: {
          statusCode: currentRawResponse!.status,
          body: currentRawResponse!.parsedBody,
          headers: currentRawResponse!.headers.toJSON()
        }
      };
    };

    const lro = new LroImpl(
      sendOperation,
      { resourceGroupName, registryName, parameters, options },
      importImageOperationSpec
    );
    const poller = new LroEngine(lro, {
      resumeFrom: options?.resumeFrom,
      intervalInMs: options?.updateIntervalInMs
    });
    await poller.poll();
    return poller;
  }

  /**
   * Copies an image to this container registry from the specified container registry.
   * @param resourceGroupName The name of the resource group to which the container registry belongs.
   * @param registryName The name of the container registry.
   * @param parameters The parameters specifying the image to copy and the source container registry.
   * @param options The options parameters.
   */
  async beginImportImageAndWait(
    resourceGroupName: string,
    registryName: string,
    parameters: ImportImageParameters,
    options?: RegistriesImportImageOptionalParams
  ): Promise<void> {
    const poller = await this.beginImportImage(
      resourceGroupName,
      registryName,
      parameters,
      options
    );
    return poller.pollUntilDone();
  }

  /**
   * Checks whether the container registry name is available for use. The name must contain only
   * alphanumeric characters, be globally unique, and between 5 and 50 characters in length.
   * @param registryNameCheckRequest The object containing information for the availability request.
   * @param options The options parameters.
   */
  checkNameAvailability(
    registryNameCheckRequest: RegistryNameCheckRequest,
    options?: RegistriesCheckNameAvailabilityOptionalParams
  ): Promise<RegistriesCheckNameAvailabilityResponse> {
    return this.client.sendOperationRequest(
      { registryNameCheckRequest, options },
      checkNameAvailabilityOperationSpec
    );
  }

  /**
   * Lists all the container registries under the specified subscription.
   * @param options The options parameters.
   */
  private _list(
    options?: RegistriesListOptionalParams
  ): Promise<RegistriesListResponse> {
    return this.client.sendOperationRequest({ options }, listOperationSpec);
  }

  /**
   * Lists all the container registries under the specified resource group.
   * @param resourceGroupName The name of the resource group to which the container registry belongs.
   * @param options The options parameters.
   */
  private _listByResourceGroup(
    resourceGroupName: string,
    options?: RegistriesListByResourceGroupOptionalParams
  ): Promise<RegistriesListByResourceGroupResponse> {
    return this.client.sendOperationRequest(
      { resourceGroupName, options },
      listByResourceGroupOperationSpec
    );
  }

  /**
   * Gets the properties of the specified container registry.
   * @param resourceGroupName The name of the resource group to which the container registry belongs.
   * @param registryName The name of the container registry.
   * @param options The options parameters.
   */
  get(
    resourceGroupName: string,
    registryName: string,
    options?: RegistriesGetOptionalParams
  ): Promise<RegistriesGetResponse> {
    return this.client.sendOperationRequest(
      { resourceGroupName, registryName, options },
      getOperationSpec
    );
  }

  /**
   * Creates a container registry with the specified parameters.
   * @param resourceGroupName The name of the resource group to which the container registry belongs.
   * @param registryName The name of the container registry.
   * @param registry The parameters for creating a container registry.
   * @param options The options parameters.
   */
  async beginCreate(
    resourceGroupName: string,
    registryName: string,
    registry: Registry,
    options?: RegistriesCreateOptionalParams
  ): Promise<
    PollerLike<
      PollOperationState<RegistriesCreateResponse>,
      RegistriesCreateResponse
    >
  > {
    const directSendOperation = async (
      args: coreClient.OperationArguments,
      spec: coreClient.OperationSpec
    ): Promise<RegistriesCreateResponse> => {
      return this.client.sendOperationRequest(args, spec);
    };
    const sendOperation = async (
      args: coreClient.OperationArguments,
      spec: coreClient.OperationSpec
    ) => {
      let currentRawResponse:
        | coreClient.FullOperationResponse
        | undefined = undefined;
      const providedCallback = args.options?.onResponse;
      const callback: coreClient.RawResponseCallback = (
        rawResponse: coreClient.FullOperationResponse,
        flatResponse: unknown
      ) => {
        currentRawResponse = rawResponse;
        providedCallback?.(rawResponse, flatResponse);
      };
      const updatedArgs = {
        ...args,
        options: {
          ...args.options,
          onResponse: callback
        }
      };
      const flatResponse = await directSendOperation(updatedArgs, spec);
      return {
        flatResponse,
        rawResponse: {
          statusCode: currentRawResponse!.status,
          body: currentRawResponse!.parsedBody,
          headers: currentRawResponse!.headers.toJSON()
        }
      };
    };

    const lro = new LroImpl(
      sendOperation,
      { resourceGroupName, registryName, registry, options },
      createOperationSpec
    );
    const poller = new LroEngine(lro, {
      resumeFrom: options?.resumeFrom,
      intervalInMs: options?.updateIntervalInMs
    });
    await poller.poll();
    return poller;
  }

  /**
   * Creates a container registry with the specified parameters.
   * @param resourceGroupName The name of the resource group to which the container registry belongs.
   * @param registryName The name of the container registry.
   * @param registry The parameters for creating a container registry.
   * @param options The options parameters.
   */
  async beginCreateAndWait(
    resourceGroupName: string,
    registryName: string,
    registry: Registry,
    options?: RegistriesCreateOptionalParams
  ): Promise<RegistriesCreateResponse> {
    const poller = await this.beginCreate(
      resourceGroupName,
      registryName,
      registry,
      options
    );
    return poller.pollUntilDone();
  }

  /**
   * Deletes a container registry.
   * @param resourceGroupName The name of the resource group to which the container registry belongs.
   * @param registryName The name of the container registry.
   * @param options The options parameters.
   */
  async beginDelete(
    resourceGroupName: string,
    registryName: string,
    options?: RegistriesDeleteOptionalParams
  ): Promise<PollerLike<PollOperationState<void>, void>> {
    const directSendOperation = async (
      args: coreClient.OperationArguments,
      spec: coreClient.OperationSpec
    ): Promise<void> => {
      return this.client.sendOperationRequest(args, spec);
    };
    const sendOperation = async (
      args: coreClient.OperationArguments,
      spec: coreClient.OperationSpec
    ) => {
      let currentRawResponse:
        | coreClient.FullOperationResponse
        | undefined = undefined;
      const providedCallback = args.options?.onResponse;
      const callback: coreClient.RawResponseCallback = (
        rawResponse: coreClient.FullOperationResponse,
        flatResponse: unknown
      ) => {
        currentRawResponse = rawResponse;
        providedCallback?.(rawResponse, flatResponse);
      };
      const updatedArgs = {
        ...args,
        options: {
          ...args.options,
          onResponse: callback
        }
      };
      const flatResponse = await directSendOperation(updatedArgs, spec);
      return {
        flatResponse,
        rawResponse: {
          statusCode: currentRawResponse!.status,
          body: currentRawResponse!.parsedBody,
          headers: currentRawResponse!.headers.toJSON()
        }
      };
    };

    const lro = new LroImpl(
      sendOperation,
      { resourceGroupName, registryName, options },
      deleteOperationSpec
    );
    const poller = new LroEngine(lro, {
      resumeFrom: options?.resumeFrom,
      intervalInMs: options?.updateIntervalInMs
    });
    await poller.poll();
    return poller;
  }

  /**
   * Deletes a container registry.
   * @param resourceGroupName The name of the resource group to which the container registry belongs.
   * @param registryName The name of the container registry.
   * @param options The options parameters.
   */
  async beginDeleteAndWait(
    resourceGroupName: string,
    registryName: string,
    options?: RegistriesDeleteOptionalParams
  ): Promise<void> {
    const poller = await this.beginDelete(
      resourceGroupName,
      registryName,
      options
    );
    return poller.pollUntilDone();
  }

  /**
   * Updates a container registry with the specified parameters.
   * @param resourceGroupName The name of the resource group to which the container registry belongs.
   * @param registryName The name of the container registry.
   * @param registryUpdateParameters The parameters for updating a container registry.
   * @param options The options parameters.
   */
  async beginUpdate(
    resourceGroupName: string,
    registryName: string,
    registryUpdateParameters: RegistryUpdateParameters,
    options?: RegistriesUpdateOptionalParams
  ): Promise<
    PollerLike<
      PollOperationState<RegistriesUpdateResponse>,
      RegistriesUpdateResponse
    >
  > {
    const directSendOperation = async (
      args: coreClient.OperationArguments,
      spec: coreClient.OperationSpec
    ): Promise<RegistriesUpdateResponse> => {
      return this.client.sendOperationRequest(args, spec);
    };
    const sendOperation = async (
      args: coreClient.OperationArguments,
      spec: coreClient.OperationSpec
    ) => {
      let currentRawResponse:
        | coreClient.FullOperationResponse
        | undefined = undefined;
      const providedCallback = args.options?.onResponse;
      const callback: coreClient.RawResponseCallback = (
        rawResponse: coreClient.FullOperationResponse,
        flatResponse: unknown
      ) => {
        currentRawResponse = rawResponse;
        providedCallback?.(rawResponse, flatResponse);
      };
      const updatedArgs = {
        ...args,
        options: {
          ...args.options,
          onResponse: callback
        }
      };
      const flatResponse = await directSendOperation(updatedArgs, spec);
      return {
        flatResponse,
        rawResponse: {
          statusCode: currentRawResponse!.status,
          body: currentRawResponse!.parsedBody,
          headers: currentRawResponse!.headers.toJSON()
        }
      };
    };

    const lro = new LroImpl(
      sendOperation,
      { resourceGroupName, registryName, registryUpdateParameters, options },
      updateOperationSpec
    );
    const poller = new LroEngine(lro, {
      resumeFrom: options?.resumeFrom,
      intervalInMs: options?.updateIntervalInMs
    });
    await poller.poll();
    return poller;
  }

  /**
   * Updates a container registry with the specified parameters.
   * @param resourceGroupName The name of the resource group to which the container registry belongs.
   * @param registryName The name of the container registry.
   * @param registryUpdateParameters The parameters for updating a container registry.
   * @param options The options parameters.
   */
  async beginUpdateAndWait(
    resourceGroupName: string,
    registryName: string,
    registryUpdateParameters: RegistryUpdateParameters,
    options?: RegistriesUpdateOptionalParams
  ): Promise<RegistriesUpdateResponse> {
    const poller = await this.beginUpdate(
      resourceGroupName,
      registryName,
      registryUpdateParameters,
      options
    );
    return poller.pollUntilDone();
  }

  /**
   * Gets the quota usages for the specified container registry.
   * @param resourceGroupName The name of the resource group to which the container registry belongs.
   * @param registryName The name of the container registry.
   * @param options The options parameters.
   */
  listUsages(
    resourceGroupName: string,
    registryName: string,
    options?: RegistriesListUsagesOptionalParams
  ): Promise<RegistriesListUsagesResponse> {
    return this.client.sendOperationRequest(
      { resourceGroupName, registryName, options },
      listUsagesOperationSpec
    );
  }

  /**
   * Lists the private link resources for a container registry.
   * @param resourceGroupName The name of the resource group to which the container registry belongs.
   * @param registryName The name of the container registry.
   * @param options The options parameters.
   */
  private _listPrivateLinkResources(
    resourceGroupName: string,
    registryName: string,
    options?: RegistriesListPrivateLinkResourcesOptionalParams
  ): Promise<RegistriesListPrivateLinkResourcesResponse> {
    return this.client.sendOperationRequest(
      { resourceGroupName, registryName, options },
      listPrivateLinkResourcesOperationSpec
    );
  }

  /**
   * Gets a private link resource by a specified group name for a container registry.
   * @param resourceGroupName The name of the resource group to which the container registry belongs.
   * @param registryName The name of the container registry.
   * @param groupName The name of the private link resource.
   * @param options The options parameters.
   */
  getPrivateLinkResource(
    resourceGroupName: string,
    registryName: string,
    groupName: string,
    options?: RegistriesGetPrivateLinkResourceOptionalParams
  ): Promise<RegistriesGetPrivateLinkResourceResponse> {
    return this.client.sendOperationRequest(
      { resourceGroupName, registryName, groupName, options },
      getPrivateLinkResourceOperationSpec
    );
  }

  /**
   * Lists the login credentials for the specified container registry.
   * @param resourceGroupName The name of the resource group to which the container registry belongs.
   * @param registryName The name of the container registry.
   * @param options The options parameters.
   */
  listCredentials(
    resourceGroupName: string,
    registryName: string,
    options?: RegistriesListCredentialsOptionalParams
  ): Promise<RegistriesListCredentialsResponse> {
    return this.client.sendOperationRequest(
      { resourceGroupName, registryName, options },
      listCredentialsOperationSpec
    );
  }

  /**
   * Regenerates one of the login credentials for the specified container registry.
   * @param resourceGroupName The name of the resource group to which the container registry belongs.
   * @param registryName The name of the container registry.
   * @param regenerateCredentialParameters Specifies name of the password which should be regenerated --
   *                                       password or password2.
   * @param options The options parameters.
   */
  regenerateCredential(
    resourceGroupName: string,
    registryName: string,
    regenerateCredentialParameters: RegenerateCredentialParameters,
    options?: RegistriesRegenerateCredentialOptionalParams
  ): Promise<RegistriesRegenerateCredentialResponse> {
    return this.client.sendOperationRequest(
      {
        resourceGroupName,
        registryName,
        regenerateCredentialParameters,
        options
      },
      regenerateCredentialOperationSpec
    );
  }

  /**
   * Generate keys for a token of a specified container registry.
   * @param resourceGroupName The name of the resource group to which the container registry belongs.
   * @param registryName The name of the container registry.
   * @param generateCredentialsParameters The parameters for generating credentials.
   * @param options The options parameters.
   */
  async beginGenerateCredentials(
    resourceGroupName: string,
    registryName: string,
    generateCredentialsParameters: GenerateCredentialsParameters,
    options?: RegistriesGenerateCredentialsOptionalParams
  ): Promise<
    PollerLike<
      PollOperationState<RegistriesGenerateCredentialsResponse>,
      RegistriesGenerateCredentialsResponse
    >
  > {
    const directSendOperation = async (
      args: coreClient.OperationArguments,
      spec: coreClient.OperationSpec
    ): Promise<RegistriesGenerateCredentialsResponse> => {
      return this.client.sendOperationRequest(args, spec);
    };
    const sendOperation = async (
      args: coreClient.OperationArguments,
      spec: coreClient.OperationSpec
    ) => {
      let currentRawResponse:
        | coreClient.FullOperationResponse
        | undefined = undefined;
      const providedCallback = args.options?.onResponse;
      const callback: coreClient.RawResponseCallback = (
        rawResponse: coreClient.FullOperationResponse,
        flatResponse: unknown
      ) => {
        currentRawResponse = rawResponse;
        providedCallback?.(rawResponse, flatResponse);
      };
      const updatedArgs = {
        ...args,
        options: {
          ...args.options,
          onResponse: callback
        }
      };
      const flatResponse = await directSendOperation(updatedArgs, spec);
      return {
        flatResponse,
        rawResponse: {
          statusCode: currentRawResponse!.status,
          body: currentRawResponse!.parsedBody,
          headers: currentRawResponse!.headers.toJSON()
        }
      };
    };

    const lro = new LroImpl(
      sendOperation,
      {
        resourceGroupName,
        registryName,
        generateCredentialsParameters,
        options
      },
      generateCredentialsOperationSpec
    );
    const poller = new LroEngine(lro, {
      resumeFrom: options?.resumeFrom,
      intervalInMs: options?.updateIntervalInMs
    });
    await poller.poll();
    return poller;
  }

  /**
   * Generate keys for a token of a specified container registry.
   * @param resourceGroupName The name of the resource group to which the container registry belongs.
   * @param registryName The name of the container registry.
   * @param generateCredentialsParameters The parameters for generating credentials.
   * @param options The options parameters.
   */
  async beginGenerateCredentialsAndWait(
    resourceGroupName: string,
    registryName: string,
    generateCredentialsParameters: GenerateCredentialsParameters,
    options?: RegistriesGenerateCredentialsOptionalParams
  ): Promise<RegistriesGenerateCredentialsResponse> {
    const poller = await this.beginGenerateCredentials(
      resourceGroupName,
      registryName,
      generateCredentialsParameters,
      options
    );
    return poller.pollUntilDone();
  }

  /**
   * Schedules a new run based on the request parameters and add it to the run queue.
   * @param resourceGroupName The name of the resource group to which the container registry belongs.
   * @param registryName The name of the container registry.
   * @param runRequest The parameters of a run that needs to scheduled.
   * @param options The options parameters.
   */
  async beginScheduleRun(
    resourceGroupName: string,
    registryName: string,
    runRequest: RunRequestUnion,
    options?: RegistriesScheduleRunOptionalParams
  ): Promise<
    PollerLike<
      PollOperationState<RegistriesScheduleRunResponse>,
      RegistriesScheduleRunResponse
    >
  > {
    const directSendOperation = async (
      args: coreClient.OperationArguments,
      spec: coreClient.OperationSpec
    ): Promise<RegistriesScheduleRunResponse> => {
      return this.client.sendOperationRequest(args, spec);
    };
    const sendOperation = async (
      args: coreClient.OperationArguments,
      spec: coreClient.OperationSpec
    ) => {
      let currentRawResponse:
        | coreClient.FullOperationResponse
        | undefined = undefined;
      const providedCallback = args.options?.onResponse;
      const callback: coreClient.RawResponseCallback = (
        rawResponse: coreClient.FullOperationResponse,
        flatResponse: unknown
      ) => {
        currentRawResponse = rawResponse;
        providedCallback?.(rawResponse, flatResponse);
      };
      const updatedArgs = {
        ...args,
        options: {
          ...args.options,
          onResponse: callback
        }
      };
      const flatResponse = await directSendOperation(updatedArgs, spec);
      return {
        flatResponse,
        rawResponse: {
          statusCode: currentRawResponse!.status,
          body: currentRawResponse!.parsedBody,
          headers: currentRawResponse!.headers.toJSON()
        }
      };
    };

    const lro = new LroImpl(
      sendOperation,
      { resourceGroupName, registryName, runRequest, options },
      scheduleRunOperationSpec
    );
    const poller = new LroEngine(lro, {
      resumeFrom: options?.resumeFrom,
      intervalInMs: options?.updateIntervalInMs
    });
    await poller.poll();
    return poller;
  }

  /**
   * Schedules a new run based on the request parameters and add it to the run queue.
   * @param resourceGroupName The name of the resource group to which the container registry belongs.
   * @param registryName The name of the container registry.
   * @param runRequest The parameters of a run that needs to scheduled.
   * @param options The options parameters.
   */
  async beginScheduleRunAndWait(
    resourceGroupName: string,
    registryName: string,
    runRequest: RunRequestUnion,
    options?: RegistriesScheduleRunOptionalParams
  ): Promise<RegistriesScheduleRunResponse> {
    const poller = await this.beginScheduleRun(
      resourceGroupName,
      registryName,
      runRequest,
      options
    );
    return poller.pollUntilDone();
  }

  /**
   * Get the upload location for the user to be able to upload the source.
   * @param resourceGroupName The name of the resource group to which the container registry belongs.
   * @param registryName The name of the container registry.
   * @param options The options parameters.
   */
  getBuildSourceUploadUrl(
    resourceGroupName: string,
    registryName: string,
    options?: RegistriesGetBuildSourceUploadUrlOptionalParams
  ): Promise<RegistriesGetBuildSourceUploadUrlResponse> {
    return this.client.sendOperationRequest(
      { resourceGroupName, registryName, options },
      getBuildSourceUploadUrlOperationSpec
    );
  }

  /**
   * ListNext
   * @param nextLink The nextLink from the previous successful call to the List method.
   * @param options The options parameters.
   */
  private _listNext(
    nextLink: string,
    options?: RegistriesListNextOptionalParams
  ): Promise<RegistriesListNextResponse> {
    return this.client.sendOperationRequest(
      { nextLink, options },
      listNextOperationSpec
    );
  }

  /**
   * ListByResourceGroupNext
   * @param resourceGroupName The name of the resource group to which the container registry belongs.
   * @param nextLink The nextLink from the previous successful call to the ListByResourceGroup method.
   * @param options The options parameters.
   */
  private _listByResourceGroupNext(
    resourceGroupName: string,
    nextLink: string,
    options?: RegistriesListByResourceGroupNextOptionalParams
  ): Promise<RegistriesListByResourceGroupNextResponse> {
    return this.client.sendOperationRequest(
      { resourceGroupName, nextLink, options },
      listByResourceGroupNextOperationSpec
    );
  }

  /**
   * ListPrivateLinkResourcesNext
   * @param resourceGroupName The name of the resource group to which the container registry belongs.
   * @param registryName The name of the container registry.
   * @param nextLink The nextLink from the previous successful call to the ListPrivateLinkResources
   *                 method.
   * @param options The options parameters.
   */
  private _listPrivateLinkResourcesNext(
    resourceGroupName: string,
    registryName: string,
    nextLink: string,
    options?: RegistriesListPrivateLinkResourcesNextOptionalParams
  ): Promise<RegistriesListPrivateLinkResourcesNextResponse> {
    return this.client.sendOperationRequest(
      { resourceGroupName, registryName, nextLink, options },
      listPrivateLinkResourcesNextOperationSpec
    );
  }
}
// Operation Specifications
const serializer = coreClient.createSerializer(Mappers, /* isXml */ false);

const importImageOperationSpec: coreClient.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ContainerRegistry/registries/{registryName}/importImage",
  httpMethod: "POST",
  responses: { 200: {}, 201: {}, 202: {}, 204: {} },
  requestBody: Parameters.parameters,
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.registryName
  ],
  headerParameters: [Parameters.contentType],
  mediaType: "json",
  serializer
};
const checkNameAvailabilityOperationSpec: coreClient.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/providers/Microsoft.ContainerRegistry/checkNameAvailability",
  httpMethod: "POST",
  responses: {
    200: {
      bodyMapper: Mappers.RegistryNameStatus
    }
  },
  requestBody: Parameters.registryNameCheckRequest,
  queryParameters: [Parameters.apiVersion],
  urlParameters: [Parameters.$host, Parameters.subscriptionId],
  headerParameters: [Parameters.accept, Parameters.contentType],
  mediaType: "json",
  serializer
};
const listOperationSpec: coreClient.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/providers/Microsoft.ContainerRegistry/registries",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.RegistryListResult
    }
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [Parameters.$host, Parameters.subscriptionId],
  headerParameters: [Parameters.accept],
  serializer
};
const listByResourceGroupOperationSpec: coreClient.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ContainerRegistry/registries",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.RegistryListResult
    }
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName
  ],
  headerParameters: [Parameters.accept],
  serializer
};
const getOperationSpec: coreClient.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ContainerRegistry/registries/{registryName}",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.Registry
    }
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.registryName
  ],
  headerParameters: [Parameters.accept],
  serializer
};
const createOperationSpec: coreClient.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ContainerRegistry/registries/{registryName}",
  httpMethod: "PUT",
  responses: {
    200: {
      bodyMapper: Mappers.Registry
    },
    201: {
      bodyMapper: Mappers.Registry
    },
    202: {
      bodyMapper: Mappers.Registry
    },
    204: {
      bodyMapper: Mappers.Registry
    }
  },
  requestBody: Parameters.registry,
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.registryName
  ],
  headerParameters: [Parameters.accept, Parameters.contentType],
  mediaType: "json",
  serializer
};
const deleteOperationSpec: coreClient.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ContainerRegistry/registries/{registryName}",
  httpMethod: "DELETE",
  responses: { 200: {}, 201: {}, 202: {}, 204: {} },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.registryName
  ],
  serializer
};
const updateOperationSpec: coreClient.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ContainerRegistry/registries/{registryName}",
  httpMethod: "PATCH",
  responses: {
    200: {
      bodyMapper: Mappers.Registry
    },
    201: {
      bodyMapper: Mappers.Registry
    },
    202: {
      bodyMapper: Mappers.Registry
    },
    204: {
      bodyMapper: Mappers.Registry
    }
  },
  requestBody: Parameters.registryUpdateParameters,
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.registryName
  ],
  headerParameters: [Parameters.accept, Parameters.contentType],
  mediaType: "json",
  serializer
};
const listUsagesOperationSpec: coreClient.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ContainerRegistry/registries/{registryName}/listUsages",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.RegistryUsageListResult
    }
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.registryName
  ],
  headerParameters: [Parameters.accept],
  serializer
};
const listPrivateLinkResourcesOperationSpec: coreClient.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ContainerRegistry/registries/{registryName}/privateLinkResources",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.PrivateLinkResourceListResult
    }
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.registryName
  ],
  headerParameters: [Parameters.accept],
  serializer
};
const getPrivateLinkResourceOperationSpec: coreClient.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ContainerRegistry/registries/{registryName}/privateLinkResources/{groupName}",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.PrivateLinkResource
    },
    default: {
      bodyMapper: Mappers.ErrorResponse
    }
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.registryName,
    Parameters.groupName
  ],
  headerParameters: [Parameters.accept],
  serializer
};
const listCredentialsOperationSpec: coreClient.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ContainerRegistry/registries/{registryName}/listCredentials",
  httpMethod: "POST",
  responses: {
    200: {
      bodyMapper: Mappers.RegistryListCredentialsResult
    }
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.registryName
  ],
  headerParameters: [Parameters.accept],
  serializer
};
const regenerateCredentialOperationSpec: coreClient.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ContainerRegistry/registries/{registryName}/regenerateCredential",
  httpMethod: "POST",
  responses: {
    200: {
      bodyMapper: Mappers.RegistryListCredentialsResult
    }
  },
  requestBody: Parameters.regenerateCredentialParameters,
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.registryName
  ],
  headerParameters: [Parameters.accept, Parameters.contentType],
  mediaType: "json",
  serializer
};
const generateCredentialsOperationSpec: coreClient.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ContainerRegistry/registries/{registryName}/generateCredentials",
  httpMethod: "POST",
  responses: {
    200: {
      bodyMapper: Mappers.GenerateCredentialsResult
    },
    201: {
      bodyMapper: Mappers.GenerateCredentialsResult
    },
    202: {
      bodyMapper: Mappers.GenerateCredentialsResult
    },
    204: {
      bodyMapper: Mappers.GenerateCredentialsResult
    },
    default: {
      bodyMapper: Mappers.ErrorResponse
    }
  },
  requestBody: Parameters.generateCredentialsParameters,
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.registryName
  ],
  headerParameters: [Parameters.accept, Parameters.contentType],
  mediaType: "json",
  serializer
};
const scheduleRunOperationSpec: coreClient.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ContainerRegistry/registries/{registryName}/scheduleRun",
  httpMethod: "POST",
  responses: {
    200: {
      bodyMapper: Mappers.Run
    },
    201: {
      bodyMapper: Mappers.Run
    },
    202: {
      bodyMapper: Mappers.Run
    },
    204: {
      bodyMapper: Mappers.Run
    },
    default: {
      bodyMapper: Mappers.ErrorResponse
    }
  },
  requestBody: Parameters.runRequest,
  queryParameters: [Parameters.apiVersion1],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.registryName
  ],
  headerParameters: [Parameters.accept, Parameters.contentType],
  mediaType: "json",
  serializer
};
const getBuildSourceUploadUrlOperationSpec: coreClient.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ContainerRegistry/registries/{registryName}/listBuildSourceUploadUrl",
  httpMethod: "POST",
  responses: {
    200: {
      bodyMapper: Mappers.SourceUploadDefinition
    },
    default: {
      bodyMapper: Mappers.ErrorResponse
    }
  },
  queryParameters: [Parameters.apiVersion1],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.registryName
  ],
  headerParameters: [Parameters.accept],
  serializer
};
const listNextOperationSpec: coreClient.OperationSpec = {
  path: "{nextLink}",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.RegistryListResult
    }
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.nextLink
  ],
  headerParameters: [Parameters.accept],
  serializer
};
const listByResourceGroupNextOperationSpec: coreClient.OperationSpec = {
  path: "{nextLink}",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.RegistryListResult
    }
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.nextLink
  ],
  headerParameters: [Parameters.accept],
  serializer
};
const listPrivateLinkResourcesNextOperationSpec: coreClient.OperationSpec = {
  path: "{nextLink}",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.PrivateLinkResourceListResult
    }
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.registryName,
    Parameters.nextLink
  ],
  headerParameters: [Parameters.accept],
  serializer
};
