/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */

import * as coreClient from "@azure/core-client";
import * as coreRestPipeline from "@azure/core-rest-pipeline";
import * as coreAuth from "@azure/core-auth";
import {
  ConnectedRegistriesImpl,
  ExportPipelinesImpl,
  RegistriesImpl,
  ImportPipelinesImpl,
  OperationsImpl,
  PipelineRunsImpl,
  PrivateEndpointConnectionsImpl,
  ReplicationsImpl,
  ScopeMapsImpl,
  TokensImpl,
  WebhooksImpl,
  AgentPoolsImpl,
  RunsImpl,
  TaskRunsImpl,
  TasksImpl
} from "./operations";
import {
  ConnectedRegistries,
  ExportPipelines,
  Registries,
  ImportPipelines,
  Operations,
  PipelineRuns,
  PrivateEndpointConnections,
  Replications,
  ScopeMaps,
  Tokens,
  Webhooks,
  AgentPools,
  Runs,
  TaskRuns,
  Tasks
} from "./operationsInterfaces";
import { ContainerRegistryManagementClientOptionalParams } from "./models";

export class ContainerRegistryManagementClient extends coreClient.ServiceClient {
  $host: string;
  subscriptionId: string;

  /**
   * Initializes a new instance of the ContainerRegistryManagementClient class.
   * @param credentials Subscription credentials which uniquely identify client subscription.
   * @param subscriptionId The Microsoft Azure subscription ID.
   * @param options The parameter options
   */
  constructor(
    credentials: coreAuth.TokenCredential,
    subscriptionId: string,
    options?: ContainerRegistryManagementClientOptionalParams
  ) {
    if (credentials === undefined) {
      throw new Error("'credentials' cannot be null");
    }
    if (subscriptionId === undefined) {
      throw new Error("'subscriptionId' cannot be null");
    }

    // Initializing default values for options
    if (!options) {
      options = {};
    }
    const defaults: ContainerRegistryManagementClientOptionalParams = {
      requestContentType: "application/json; charset=utf-8",
      credential: credentials
    };

    const packageDetails = `azsdk-js-arm-containerregistry/10.1.0-beta.5`;
    const userAgentPrefix =
      options.userAgentOptions && options.userAgentOptions.userAgentPrefix
        ? `${options.userAgentOptions.userAgentPrefix} ${packageDetails}`
        : `${packageDetails}`;

    const optionsWithDefaults = {
      ...defaults,
      ...options,
      userAgentOptions: {
        userAgentPrefix
      },
      endpoint:
        options.endpoint ?? options.baseUri ?? "https://management.azure.com"
    };
    super(optionsWithDefaults);

    let bearerTokenAuthenticationPolicyFound: boolean = false;
    if (options?.pipeline && options.pipeline.getOrderedPolicies().length > 0) {
      const pipelinePolicies: coreRestPipeline.PipelinePolicy[] = options.pipeline.getOrderedPolicies();
      bearerTokenAuthenticationPolicyFound = pipelinePolicies.some(
        (pipelinePolicy) =>
          pipelinePolicy.name ===
          coreRestPipeline.bearerTokenAuthenticationPolicyName
      );
    }
    if (
      !options ||
      !options.pipeline ||
      options.pipeline.getOrderedPolicies().length == 0 ||
      !bearerTokenAuthenticationPolicyFound
    ) {
      this.pipeline.removePolicy({
        name: coreRestPipeline.bearerTokenAuthenticationPolicyName
      });
      this.pipeline.addPolicy(
        coreRestPipeline.bearerTokenAuthenticationPolicy({
          credential: credentials,
          scopes:
            optionsWithDefaults.credentialScopes ??
            `${optionsWithDefaults.endpoint}/.default`,
          challengeCallbacks: {
            authorizeRequestOnChallenge:
              coreClient.authorizeRequestOnClaimChallenge
          }
        })
      );
    }
    // Parameter assignments
    this.subscriptionId = subscriptionId;

    // Assigning values to Constant parameters
    this.$host = options.$host || "https://management.azure.com";
    this.connectedRegistries = new ConnectedRegistriesImpl(this);
    this.exportPipelines = new ExportPipelinesImpl(this);
    this.registries = new RegistriesImpl(this);
    this.importPipelines = new ImportPipelinesImpl(this);
    this.operations = new OperationsImpl(this);
    this.pipelineRuns = new PipelineRunsImpl(this);
    this.privateEndpointConnections = new PrivateEndpointConnectionsImpl(this);
    this.replications = new ReplicationsImpl(this);
    this.scopeMaps = new ScopeMapsImpl(this);
    this.tokens = new TokensImpl(this);
    this.webhooks = new WebhooksImpl(this);
    this.agentPools = new AgentPoolsImpl(this);
    this.runs = new RunsImpl(this);
    this.taskRuns = new TaskRunsImpl(this);
    this.tasks = new TasksImpl(this);
  }

  connectedRegistries: ConnectedRegistries;
  exportPipelines: ExportPipelines;
  registries: Registries;
  importPipelines: ImportPipelines;
  operations: Operations;
  pipelineRuns: PipelineRuns;
  privateEndpointConnections: PrivateEndpointConnections;
  replications: Replications;
  scopeMaps: ScopeMaps;
  tokens: Tokens;
  webhooks: Webhooks;
  agentPools: AgentPools;
  runs: Runs;
  taskRuns: TaskRuns;
  tasks: Tasks;
}
