// Copyright (c) Microsoft Corporation.
// Licensed under the MIT License.

// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

import * as coreClient from "@azure/core-client";

export type RunRequestUnion =
  | RunRequest
  | DockerBuildRequest
  | FileTaskRunRequest
  | TaskRunRequest
  | EncodedTaskRunRequest;
export type TaskStepPropertiesUnion =
  | TaskStepProperties
  | DockerBuildStep
  | FileTaskStep
  | EncodedTaskStep;
export type TaskStepUpdateParametersUnion =
  | TaskStepUpdateParameters
  | DockerBuildStepUpdateParameters
  | FileTaskStepUpdateParameters
  | EncodedTaskStepUpdateParameters;

/** An Azure resource. */
export interface Resource {
  /**
   * The resource ID.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly id?: string;
  /**
   * The name of the resource.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly name?: string;
  /**
   * The type of the resource.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly type?: string;
  /** The location of the resource. This cannot be changed after the resource is created. */
  location: string;
  /** The tags of the resource. */
  tags?: { [propertyName: string]: string };
  /**
   * Metadata pertaining to creation and last modification of the resource.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly systemData?: SystemData;
}

/** Metadata pertaining to creation and last modification of the resource. */
export interface SystemData {
  /** The identity that created the resource. */
  createdBy?: string;
  /** The type of identity that created the resource. */
  createdByType?: CreatedByType;
  /** The timestamp of resource creation (UTC). */
  createdAt?: Date;
  /** The identity that last modified the resource. */
  lastModifiedBy?: string;
  /** The type of identity that last modified the resource. */
  lastModifiedByType?: LastModifiedByType;
  /** The timestamp of resource modification (UTC). */
  lastModifiedAt?: Date;
}

/** Common error response for all Azure Resource Manager APIs to return error details for failed operations. (This also follows the OData error response format.). */
export interface ErrorResponse {
  /** The error object. */
  error?: ErrorDetail;
}

/** The error detail. */
export interface ErrorDetail {
  /**
   * The error code.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly code?: string;
  /**
   * The error message.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly message?: string;
  /**
   * The error target.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly target?: string;
  /**
   * The error details.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly details?: ErrorDetail[];
  /**
   * The error additional info.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly additionalInfo?: ErrorAdditionalInfo[];
}

/** The resource management error additional info. */
export interface ErrorAdditionalInfo {
  /**
   * The additional info type.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly type?: string;
  /**
   * The additional info.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly info?: Record<string, unknown>;
}

/** The parameters for updating an agent pool. */
export interface AgentPoolUpdateParameters {
  /** The ARM resource tags. */
  tags?: { [propertyName: string]: string };
  /** The count of agent machine */
  count?: number;
}

/** The collection of agent pools. */
export interface AgentPoolListResult {
  /** The collection value. */
  value?: AgentPool[];
  /** The URI that can be used to request the next set of paged results. */
  nextLink?: string;
}

/** The QueueStatus of Agent Pool */
export interface AgentPoolQueueStatus {
  /** The number of pending runs in the queue */
  count?: number;
}

/** The request parameters for scheduling a run. */
export interface RunRequest {
  /** Polymorphic discriminator, which specifies the different types this object can be */
  type:
    | "DockerBuildRequest"
    | "FileTaskRunRequest"
    | "TaskRunRequest"
    | "EncodedTaskRunRequest";
  /** The value that indicates whether archiving is enabled for the run or not. */
  isArchiveEnabled?: boolean;
  /** The dedicated agent pool for the run. */
  agentPoolName?: string;
  /** The template that describes the repository and tag information for run log artifact. */
  logTemplate?: string;
}

/** Properties for a registry image. */
export interface ImageDescriptor {
  /** The registry login server. */
  registry?: string;
  /** The repository name. */
  repository?: string;
  /** The tag name. */
  tag?: string;
  /** The sha256-based digest of the image manifest. */
  digest?: string;
}

/** The image update trigger that caused a build. */
export interface ImageUpdateTrigger {
  /** The unique ID of the trigger. */
  id?: string;
  /** The timestamp when the image update happened. */
  timestamp?: Date;
  /** The list of image updates that caused the build. */
  images?: ImageDescriptor[];
}

/** The source trigger that caused a run. */
export interface SourceTriggerDescriptor {
  /** The unique ID of the trigger. */
  id?: string;
  /** The event type of the trigger. */
  eventType?: string;
  /** The unique ID that identifies a commit. */
  commitId?: string;
  /** The unique ID that identifies pull request. */
  pullRequestId?: string;
  /** The repository URL. */
  repositoryUrl?: string;
  /** The branch name in the repository. */
  branchName?: string;
  /** The source control provider type. */
  providerType?: string;
}

export interface TimerTriggerDescriptor {
  /** The timer trigger name that caused the run. */
  timerTriggerName?: string;
  /** The occurrence that triggered the run. */
  scheduleOccurrence?: string;
}

/** The platform properties against which the run has to happen. */
export interface PlatformProperties {
  /** The operating system type required for the run. */
  os: OS;
  /** The OS architecture. */
  architecture?: Architecture;
  /** Variant of the CPU. */
  variant?: Variant;
}

/** The properties that determine the run agent configuration. */
export interface AgentProperties {
  /** The CPU configuration in terms of number of cores required for the run. */
  cpu?: number;
}

/** The resource model definition for a ARM proxy resource. It will have everything other than required location and tags. */
export interface ProxyResource {
  /**
   * The resource ID.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly id?: string;
  /**
   * The name of the resource.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly name?: string;
  /**
   * The type of the resource.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly type?: string;
  /**
   * Metadata pertaining to creation and last modification of the resource.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly systemData?: SystemData;
}

/** The properties of a response to source upload request. */
export interface SourceUploadDefinition {
  /** The URL where the client can upload the source. */
  uploadUrl?: string;
  /** The relative path to the source. This is used to submit the subsequent queue build request. */
  relativePath?: string;
}

/** Collection of runs. */
export interface RunListResult {
  /** The collection value. */
  value?: Run[];
  /** The URI that can be used to request the next set of paged results. */
  nextLink?: string;
}

/** The set of run properties that can be updated. */
export interface RunUpdateParameters {
  /** The value that indicates whether archiving is enabled or not. */
  isArchiveEnabled?: boolean;
}

/** The result of get log link operation. */
export interface RunGetLogResult {
  /** The link to logs for a run on a azure container registry. */
  logLink?: string;
  /** The link to logs in registry for a run on a azure container registry. */
  logArtifactLink?: string;
}

/** Managed identity for the resource. */
export interface IdentityProperties {
  /**
   * The principal ID of resource identity.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly principalId?: string;
  /**
   * The tenant ID of resource.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly tenantId?: string;
  /** The identity type. */
  type?: ResourceIdentityType;
  /**
   * The list of user identities associated with the resource. The user identity
   * dictionary key references will be ARM resource ids in the form:
   * '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/
   *     providers/Microsoft.ManagedIdentity/userAssignedIdentities/{identityName}'.
   */
  userAssignedIdentities?: { [propertyName: string]: UserIdentityProperties };
}

export interface UserIdentityProperties {
  /**
   * The principal id of user assigned identity.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly principalId?: string;
  /**
   * The client id of user assigned identity.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly clientId?: string;
}

/** The parameters for updating a task run. */
export interface TaskRunUpdateParameters {
  /** Identity for the resource. */
  identity?: IdentityProperties;
  /** The location of the resource */
  location?: string;
  /** The ARM resource tags. */
  tags?: { [propertyName: string]: string };
  /** The request (parameters) for the new run */
  runRequest?: RunRequestUnion;
  /** How the run should be forced to rerun even if the run request configuration has not changed */
  forceUpdateTag?: string;
}

/** The collection of task runs. */
export interface TaskRunListResult {
  /** The collection value. */
  value?: TaskRun[];
  /** The URI that can be used to request the next set of paged results. */
  nextLink?: string;
}

/** The collection of tasks. */
export interface TaskListResult {
  /** The collection value. */
  value?: Task[];
  /** The URI that can be used to request the next set of paged results. */
  nextLink?: string;
}

/** Base properties for any task step. */
export interface TaskStepProperties {
  /** Polymorphic discriminator, which specifies the different types this object can be */
  type: "Docker" | "FileTask" | "EncodedTask";
  /**
   * List of base image dependencies for a step.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly baseImageDependencies?: BaseImageDependency[];
  /** The URL(absolute or relative) of the source context for the task step. */
  contextPath?: string;
  /** The token (git PAT or SAS token of storage account blob) associated with the context for a step. */
  contextAccessToken?: string;
}

/** Properties that describe a base image dependency. */
export interface BaseImageDependency {
  /** The type of the base image dependency. */
  type?: BaseImageDependencyType;
  /** The registry login server. */
  registry?: string;
  /** The repository name. */
  repository?: string;
  /** The tag name. */
  tag?: string;
  /** The sha256-based digest of the image manifest. */
  digest?: string;
}

/** The properties of a trigger. */
export interface TriggerProperties {
  /** The collection of timer triggers. */
  timerTriggers?: TimerTrigger[];
  /** The collection of triggers based on source code repository. */
  sourceTriggers?: SourceTrigger[];
  /** The trigger based on base image dependencies. */
  baseImageTrigger?: BaseImageTrigger;
}

/** The properties of a timer trigger. */
export interface TimerTrigger {
  /** The CRON expression for the task schedule */
  schedule: string;
  /** The current status of trigger. */
  status?: TriggerStatus;
  /** The name of the trigger. */
  name: string;
}

/** The properties of a source based trigger. */
export interface SourceTrigger {
  /** The properties that describes the source(code) for the task. */
  sourceRepository: SourceProperties;
  /** The source event corresponding to the trigger. */
  sourceTriggerEvents: SourceTriggerEvent[];
  /** The current status of trigger. */
  status?: TriggerStatus;
  /** The name of the trigger. */
  name: string;
}

/** The properties of the source code repository. */
export interface SourceProperties {
  /** The type of source control service. */
  sourceControlType: SourceControlType;
  /** The full URL to the source code repository */
  repositoryUrl: string;
  /** The branch name of the source code. */
  branch?: string;
  /**
   * The authorization properties for accessing the source code repository and to set up
   * webhooks for notifications.
   */
  sourceControlAuthProperties?: AuthInfo;
}

/** The authorization properties for accessing the source code repository. */
export interface AuthInfo {
  /** The type of Auth token. */
  tokenType: TokenType;
  /** The access token used to access the source control provider. */
  token: string;
  /** The refresh token used to refresh the access token. */
  refreshToken?: string;
  /** The scope of the access token. */
  scope?: string;
  /** Time in seconds that the token remains valid */
  expiresIn?: number;
}

/** The trigger based on base image dependency. */
export interface BaseImageTrigger {
  /** The type of the auto trigger for base image dependency updates. */
  baseImageTriggerType: BaseImageTriggerType;
  /** The endpoint URL for receiving update triggers. */
  updateTriggerEndpoint?: string;
  /** Type of Payload body for Base image update triggers. */
  updateTriggerPayloadType?: UpdateTriggerPayloadType;
  /** The current status of trigger. */
  status?: TriggerStatus;
  /** The name of the trigger. */
  name: string;
}

/** The parameters that describes a set of credentials that will be used when a run is invoked. */
export interface Credentials {
  /** Describes the credential parameters for accessing the source registry. */
  sourceRegistry?: SourceRegistryCredentials;
  /**
   * Describes the credential parameters for accessing other custom registries. The key
   * for the dictionary item will be the registry login server (myregistry.azurecr.io) and
   * the value of the item will be the registry credentials for accessing the registry.
   */
  customRegistries?: { [propertyName: string]: CustomRegistryCredentials };
}

/** Describes the credential parameters for accessing the source registry. */
export interface SourceRegistryCredentials {
  /**
   * The Entra identity used for source registry login.
   * The value is `[system]` for system-assigned managed identity, `[caller]` for caller identity,
   * and client ID for user-assigned managed identity.
   */
  identity?: string;
  /**
   * The authentication mode which determines the source registry login scope. The credentials for the source registry
   * will be generated using the given scope. These credentials will be used to login to
   * the source registry during the run.
   */
  loginMode?: SourceRegistryLoginMode;
}

/** Describes the credentials that will be used to access a custom registry during a run. */
export interface CustomRegistryCredentials {
  /** The username for logging into the custom registry. */
  userName?: SecretObject;
  /**
   * The password for logging into the custom registry. The password is a secret
   * object that allows multiple ways of providing the value for it.
   */
  password?: SecretObject;
  /**
   * Indicates the managed identity assigned to the custom credential. If a user-assigned identity
   * this value is the Client ID. If a system-assigned identity, the value will be `system`. In
   * the case of a system-assigned identity, the Client ID will be determined by the runner. This
   * identity may be used to authenticate to key vault to retrieve credentials or it may be the only
   * source of authentication used for accessing the registry.
   */
  identity?: string;
}

/** Describes the properties of a secret object value. */
export interface SecretObject {
  /**
   * The value of the secret. The format of this value will be determined
   * based on the type of the secret object. If the type is Opaque, the value will be
   * used as is without any modification.
   */
  value?: string;
  /**
   * The type of the secret object which determines how the value of the secret object has to be
   * interpreted.
   */
  type?: SecretObjectType;
}

/** The parameters for updating a task. */
export interface TaskUpdateParameters {
  /** Identity for the resource. */
  identity?: IdentityProperties;
  /** The ARM resource tags. */
  tags?: { [propertyName: string]: string };
  /** The current status of task. */
  status?: TaskStatus;
  /** The platform properties against which the run has to happen. */
  platform?: PlatformUpdateParameters;
  /** The machine configuration of the run agent. */
  agentConfiguration?: AgentProperties;
  /** The dedicated agent pool for the task. */
  agentPoolName?: string;
  /** Run timeout in seconds. */
  timeout?: number;
  /** The properties for updating a task step. */
  step?: TaskStepUpdateParametersUnion;
  /** The properties for updating trigger properties. */
  trigger?: TriggerUpdateParameters;
  /** The parameters that describes a set of credentials that will be used when this run is invoked. */
  credentials?: Credentials;
  /** The template that describes the repository and tag information for run log artifact. */
  logTemplate?: string;
}

/** The properties for updating the platform configuration. */
export interface PlatformUpdateParameters {
  /** The operating system type required for the run. */
  os?: OS;
  /** The OS architecture. */
  architecture?: Architecture;
  /** Variant of the CPU. */
  variant?: Variant;
}

/** Base properties for updating any task step. */
export interface TaskStepUpdateParameters {
  /** Polymorphic discriminator, which specifies the different types this object can be */
  type: "Docker" | "FileTask" | "EncodedTask";
  /** The URL(absolute or relative) of the source context for the task step. */
  contextPath?: string;
  /** The token (git PAT or SAS token of storage account blob) associated with the context for a step. */
  contextAccessToken?: string;
}

/** The properties for updating triggers. */
export interface TriggerUpdateParameters {
  /** The collection of timer triggers. */
  timerTriggers?: TimerTriggerUpdateParameters[];
  /** The collection of triggers based on source code repository. */
  sourceTriggers?: SourceTriggerUpdateParameters[];
  /** The trigger based on base image dependencies. */
  baseImageTrigger?: BaseImageTriggerUpdateParameters;
}

/** The properties for updating a timer trigger. */
export interface TimerTriggerUpdateParameters {
  /** The CRON expression for the task schedule */
  schedule?: string;
  /** The current status of trigger. */
  status?: TriggerStatus;
  /** The name of the trigger. */
  name: string;
}

/** The properties for updating a source based trigger. */
export interface SourceTriggerUpdateParameters {
  /** The properties that describes the source(code) for the task. */
  sourceRepository?: SourceUpdateParameters;
  /** The source event corresponding to the trigger. */
  sourceTriggerEvents?: SourceTriggerEvent[];
  /** The current status of trigger. */
  status?: TriggerStatus;
  /** The name of the trigger. */
  name: string;
}

/** The properties for updating the source code repository. */
export interface SourceUpdateParameters {
  /** The type of source control service. */
  sourceControlType?: SourceControlType;
  /** The full URL to the source code repository */
  repositoryUrl?: string;
  /** The branch name of the source code. */
  branch?: string;
  /**
   * The authorization properties for accessing the source code repository and to set up
   * webhooks for notifications.
   */
  sourceControlAuthProperties?: AuthInfoUpdateParameters;
}

/** The authorization properties for accessing the source code repository. */
export interface AuthInfoUpdateParameters {
  /** The type of Auth token. */
  tokenType?: TokenType;
  /** The access token used to access the source control provider. */
  token?: string;
  /** The refresh token used to refresh the access token. */
  refreshToken?: string;
  /** The scope of the access token. */
  scope?: string;
  /** Time in seconds that the token remains valid */
  expiresIn?: number;
}

/** The properties for updating base image dependency trigger. */
export interface BaseImageTriggerUpdateParameters {
  /** The type of the auto trigger for base image dependency updates. */
  baseImageTriggerType?: BaseImageTriggerType;
  /** The endpoint URL for receiving update triggers. */
  updateTriggerEndpoint?: string;
  /** Type of Payload body for Base image update triggers. */
  updateTriggerPayloadType?: UpdateTriggerPayloadType;
  /** The current status of trigger. */
  status?: TriggerStatus;
  /** The name of the trigger. */
  name: string;
}

/** Properties that are enabled for Odata querying on runs. */
export interface RunFilter {
  /** The unique identifier for the run. */
  runId?: string;
  /** The type of run. */
  runType?: RunType;
  /** The current status of the run. */
  status?: RunStatus;
  /** The create time for a run. */
  createTime?: Date;
  /** The time the run finished. */
  finishTime?: Date;
  /**
   * The list of comma-separated image manifests that were generated from the run. This is applicable if the run is of
   * build type.
   */
  outputImageManifests?: string;
  /** The value that indicates whether archiving is enabled or not. */
  isArchiveEnabled?: boolean;
  /** The name of the task that the run corresponds to. */
  taskName?: string;
  /** The name of the agent pool that the run corresponds to. */
  agentPoolName?: string;
}

/** The properties of a run argument. */
export interface Argument {
  /** The name of the argument. */
  name: string;
  /** The value of the argument. */
  value: string;
  /** Flag to indicate whether the argument represents a secret and want to be removed from build logs. */
  isSecret?: boolean;
}

/** The properties of a overridable value that can be passed to a task template. */
export interface SetValue {
  /** The name of the overridable value. */
  name: string;
  /** The overridable value. */
  value: string;
  /** Flag to indicate whether the value represents a secret or not. */
  isSecret?: boolean;
}

export interface OverrideTaskStepProperties {
  /** The source context against which run has to be queued. */
  contextPath?: string;
  /** The file against which run has to be queued. */
  file?: string;
  /**
   * Gets or sets the collection of override arguments to be used when
   * executing a build step.
   */
  arguments?: Argument[];
  /** The name of the target build stage for the docker build. */
  target?: string;
  /** The collection of overridable values that can be passed when running a Task. */
  values?: SetValue[];
  /** Base64 encoded update trigger token that will be attached with the base image trigger webhook. */
  updateTriggerToken?: string;
}

/**
 * The agentpool that has the ARM resource and properties.
 * The agentpool will have all information to create an agent pool.
 */
export interface AgentPool extends Resource {
  /** The count of agent machine */
  count?: number;
  /** The Tier of agent machine */
  tier?: string;
  /** The OS of agent machine */
  os?: OS;
  /** The Virtual Network Subnet Resource Id of the agent machine */
  virtualNetworkSubnetResourceId?: string;
  /**
   * The provisioning state of this agent pool
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly provisioningState?: ProvisioningState;
}

/**
 * The task that has the ARM resource and task properties.
 * The task will have all information to schedule a run against it.
 */
export interface Task extends Resource {
  /** Identity for the resource. */
  identity?: IdentityProperties;
  /**
   * The provisioning state of the task.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly provisioningState?: ProvisioningState;
  /**
   * The creation date of task.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly creationDate?: Date;
  /** The current status of task. */
  status?: TaskStatus;
  /** The platform properties against which the run has to happen. */
  platform?: PlatformProperties;
  /** The machine configuration of the run agent. */
  agentConfiguration?: AgentProperties;
  /** The dedicated agent pool for the task. */
  agentPoolName?: string;
  /** Run timeout in seconds. */
  timeout?: number;
  /** The properties of a task step. */
  step?: TaskStepPropertiesUnion;
  /** The properties that describe all triggers for the task. */
  trigger?: TriggerProperties;
  /** The properties that describes a set of credentials that will be used when this run is invoked. */
  credentials?: Credentials;
  /** The template that describes the repository and tag information for run log artifact. */
  logTemplate?: string;
  /** The value of this property indicates whether the task resource is system task or not. */
  isSystemTask?: boolean;
}

/** The parameters for a docker quick build. */
export interface DockerBuildRequest extends RunRequest {
  /** Polymorphic discriminator, which specifies the different types this object can be */
  type: "DockerBuildRequest";
  /** The fully qualified image names including the repository and tag. */
  imageNames?: string[];
  /** The value of this property indicates whether the image built should be pushed to the registry or not. */
  isPushEnabled?: boolean;
  /** The value of this property indicates whether the image cache is enabled or not. */
  noCache?: boolean;
  /** The Docker file path relative to the source location. */
  dockerFilePath: string;
  /** The name of the target build stage for the docker build. */
  target?: string;
  /** The collection of override arguments to be used when executing the run. */
  arguments?: Argument[];
  /** Run timeout in seconds. */
  timeout?: number;
  /** The platform properties against which the run has to happen. */
  platform: PlatformProperties;
  /** The machine configuration of the run agent. */
  agentConfiguration?: AgentProperties;
  /**
   * The URL(absolute or relative) of the source context. It can be an URL to a tar or git repository.
   * If it is relative URL, the relative path should be obtained from calling listBuildSourceUploadUrl API.
   */
  sourceLocation?: string;
  /** The properties that describes a set of credentials that will be used when this run is invoked. */
  credentials?: Credentials;
}

/** The request parameters for a scheduling run against a task file. */
export interface FileTaskRunRequest extends RunRequest {
  /** Polymorphic discriminator, which specifies the different types this object can be */
  type: "FileTaskRunRequest";
  /** The template/definition file path relative to the source. */
  taskFilePath: string;
  /** The values/parameters file path relative to the source. */
  valuesFilePath?: string;
  /** The collection of overridable values that can be passed when running a task. */
  values?: SetValue[];
  /** Run timeout in seconds. */
  timeout?: number;
  /** The platform properties against which the run has to happen. */
  platform: PlatformProperties;
  /** The machine configuration of the run agent. */
  agentConfiguration?: AgentProperties;
  /**
   * The URL(absolute or relative) of the source context. It can be an URL to a tar or git repository.
   * If it is relative URL, the relative path should be obtained from calling listBuildSourceUploadUrl API.
   */
  sourceLocation?: string;
  /** The properties that describes a set of credentials that will be used when this run is invoked. */
  credentials?: Credentials;
}

/** The parameters for a task run request. */
export interface TaskRunRequest extends RunRequest {
  /** Polymorphic discriminator, which specifies the different types this object can be */
  type: "TaskRunRequest";
  /** The resource ID of task against which run has to be queued. */
  taskId: string;
  /** Set of overridable parameters that can be passed when running a Task. */
  overrideTaskStepProperties?: OverrideTaskStepProperties;
}

/** The parameters for a quick task run request. */
export interface EncodedTaskRunRequest extends RunRequest {
  /** Polymorphic discriminator, which specifies the different types this object can be */
  type: "EncodedTaskRunRequest";
  /** Base64 encoded value of the template/definition file content. */
  encodedTaskContent: string;
  /** Base64 encoded value of the parameters/values file content. */
  encodedValuesContent?: string;
  /** The collection of overridable values that can be passed when running a task. */
  values?: SetValue[];
  /** Run timeout in seconds. */
  timeout?: number;
  /** The platform properties against which the run has to happen. */
  platform: PlatformProperties;
  /** The machine configuration of the run agent. */
  agentConfiguration?: AgentProperties;
  /**
   * The URL(absolute or relative) of the source context. It can be an URL to a tar or git repository.
   * If it is relative URL, the relative path should be obtained from calling listBuildSourceUploadUrl API.
   */
  sourceLocation?: string;
  /** The properties that describes a set of credentials that will be used when this run is invoked. */
  credentials?: Credentials;
}

/** Run resource properties */
export interface Run extends ProxyResource {
  /** The unique identifier for the run. */
  runId?: string;
  /** The current status of the run. */
  status?: RunStatus;
  /** The last updated time for the run. */
  lastUpdatedTime?: Date;
  /** The type of run. */
  runType?: RunType;
  /** The dedicated agent pool for the run. */
  agentPoolName?: string;
  /** The time the run was scheduled. */
  createTime?: Date;
  /** The time the run started. */
  startTime?: Date;
  /** The time the run finished. */
  finishTime?: Date;
  /** The list of all images that were generated from the run. This is applicable if the run generates base image dependencies. */
  outputImages?: ImageDescriptor[];
  /** The task against which run was scheduled. */
  task?: string;
  /** The image update trigger that caused the run. This is applicable if the task has base image trigger configured. */
  imageUpdateTrigger?: ImageUpdateTrigger;
  /** The source trigger that caused the run. */
  sourceTrigger?: SourceTriggerDescriptor;
  /** The timer trigger that caused the run. */
  timerTrigger?: TimerTriggerDescriptor;
  /** The platform properties against which the run will happen. */
  platform?: PlatformProperties;
  /** The machine configuration of the run agent. */
  agentConfiguration?: AgentProperties;
  /** The scope of the credentials that were used to login to the source registry during this run. */
  sourceRegistryAuth?: string;
  /** The list of custom registries that were logged in during this run. */
  customRegistries?: string[];
  /**
   * The error message received from backend systems after the run is scheduled.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly runErrorMessage?: string;
  /** The update trigger token passed for the Run. */
  updateTriggerToken?: string;
  /**
   * The image description for the log artifact.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly logArtifact?: ImageDescriptor;
  /** The provisioning state of a run. */
  provisioningState?: ProvisioningState;
  /** The value that indicates whether archiving is enabled or not. */
  isArchiveEnabled?: boolean;
}

/**
 * The task run that has the ARM resource and properties.
 * The task run will have the information of request and result of a run.
 */
export interface TaskRun extends ProxyResource {
  /** Identity for the resource. */
  identity?: IdentityProperties;
  /** The location of the resource */
  location?: string;
  /**
   * The provisioning state of this task run
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly provisioningState?: ProvisioningState;
  /** The request (parameters) for the run */
  runRequest?: RunRequestUnion;
  /**
   * The result of this task run
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly runResult?: Run;
  /** How the run should be forced to rerun even if the run request configuration has not changed */
  forceUpdateTag?: string;
}

/** The Docker build step. */
export interface DockerBuildStep extends TaskStepProperties {
  /** Polymorphic discriminator, which specifies the different types this object can be */
  type: "Docker";
  /** The fully qualified image names including the repository and tag. */
  imageNames?: string[];
  /** The value of this property indicates whether the image built should be pushed to the registry or not. */
  isPushEnabled?: boolean;
  /** The value of this property indicates whether the image cache is enabled or not. */
  noCache?: boolean;
  /** The Docker file path relative to the source context. */
  dockerFilePath: string;
  /** The name of the target build stage for the docker build. */
  target?: string;
  /** The collection of override arguments to be used when executing this build step. */
  arguments?: Argument[];
}

/** The properties of a task step. */
export interface FileTaskStep extends TaskStepProperties {
  /** Polymorphic discriminator, which specifies the different types this object can be */
  type: "FileTask";
  /** The task template/definition file path relative to the source context. */
  taskFilePath: string;
  /** The task values/parameters file path relative to the source context. */
  valuesFilePath?: string;
  /** The collection of overridable values that can be passed when running a task. */
  values?: SetValue[];
}

/** The properties of a encoded task step. */
export interface EncodedTaskStep extends TaskStepProperties {
  /** Polymorphic discriminator, which specifies the different types this object can be */
  type: "EncodedTask";
  /** Base64 encoded value of the template/definition file content. */
  encodedTaskContent: string;
  /** Base64 encoded value of the parameters/values file content. */
  encodedValuesContent?: string;
  /** The collection of overridable values that can be passed when running a task. */
  values?: SetValue[];
}

/** The properties for updating a docker build step. */
export interface DockerBuildStepUpdateParameters
  extends TaskStepUpdateParameters {
  /** Polymorphic discriminator, which specifies the different types this object can be */
  type: "Docker";
  /** The fully qualified image names including the repository and tag. */
  imageNames?: string[];
  /** The value of this property indicates whether the image built should be pushed to the registry or not. */
  isPushEnabled?: boolean;
  /** The value of this property indicates whether the image cache is enabled or not. */
  noCache?: boolean;
  /** The Docker file path relative to the source context. */
  dockerFilePath?: string;
  /** The collection of override arguments to be used when executing this build step. */
  arguments?: Argument[];
  /** The name of the target build stage for the docker build. */
  target?: string;
}

/** The properties of updating a task step. */
export interface FileTaskStepUpdateParameters extends TaskStepUpdateParameters {
  /** Polymorphic discriminator, which specifies the different types this object can be */
  type: "FileTask";
  /** The task template/definition file path relative to the source context. */
  taskFilePath?: string;
  /** The values/parameters file path relative to the source context. */
  valuesFilePath?: string;
  /** The collection of overridable values that can be passed when running a task. */
  values?: SetValue[];
}

/** The properties for updating encoded task step. */
export interface EncodedTaskStepUpdateParameters
  extends TaskStepUpdateParameters {
  /** Polymorphic discriminator, which specifies the different types this object can be */
  type: "EncodedTask";
  /** Base64 encoded value of the template/definition file content. */
  encodedTaskContent?: string;
  /** Base64 encoded value of the parameters/values file content. */
  encodedValuesContent?: string;
  /** The collection of overridable values that can be passed when running a task. */
  values?: SetValue[];
}

/** Defines headers for AgentPools_create operation. */
export interface AgentPoolsCreateHeaders {
  azureAsyncOperation?: string;
}

/** Defines headers for AgentPools_delete operation. */
export interface AgentPoolsDeleteHeaders {
  location?: string;
}

/** Defines headers for AgentPools_update operation. */
export interface AgentPoolsUpdateHeaders {
  azureAsyncOperation?: string;
}

/** Defines headers for TaskRuns_create operation. */
export interface TaskRunsCreateHeaders {
  azureAsyncOperation?: string;
}

/** Defines headers for TaskRuns_update operation. */
export interface TaskRunsUpdateHeaders {
  azureAsyncOperation?: string;
}

/** Known values of {@link OS} that the service accepts. */
export enum KnownOS {
  /** Windows */
  Windows = "Windows",
  /** Linux */
  Linux = "Linux",
}

/**
 * Defines values for OS. \
 * {@link KnownOS} can be used interchangeably with OS,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **Windows** \
 * **Linux**
 */
export type OS = string;

/** Known values of {@link ProvisioningState} that the service accepts. */
export enum KnownProvisioningState {
  /** Creating */
  Creating = "Creating",
  /** Updating */
  Updating = "Updating",
  /** Deleting */
  Deleting = "Deleting",
  /** Succeeded */
  Succeeded = "Succeeded",
  /** Failed */
  Failed = "Failed",
  /** Canceled */
  Canceled = "Canceled",
}

/**
 * Defines values for ProvisioningState. \
 * {@link KnownProvisioningState} can be used interchangeably with ProvisioningState,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **Creating** \
 * **Updating** \
 * **Deleting** \
 * **Succeeded** \
 * **Failed** \
 * **Canceled**
 */
export type ProvisioningState = string;

/** Known values of {@link CreatedByType} that the service accepts. */
export enum KnownCreatedByType {
  /** User */
  User = "User",
  /** Application */
  Application = "Application",
  /** ManagedIdentity */
  ManagedIdentity = "ManagedIdentity",
  /** Key */
  Key = "Key",
}

/**
 * Defines values for CreatedByType. \
 * {@link KnownCreatedByType} can be used interchangeably with CreatedByType,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **User** \
 * **Application** \
 * **ManagedIdentity** \
 * **Key**
 */
export type CreatedByType = string;

/** Known values of {@link LastModifiedByType} that the service accepts. */
export enum KnownLastModifiedByType {
  /** User */
  User = "User",
  /** Application */
  Application = "Application",
  /** ManagedIdentity */
  ManagedIdentity = "ManagedIdentity",
  /** Key */
  Key = "Key",
}

/**
 * Defines values for LastModifiedByType. \
 * {@link KnownLastModifiedByType} can be used interchangeably with LastModifiedByType,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **User** \
 * **Application** \
 * **ManagedIdentity** \
 * **Key**
 */
export type LastModifiedByType = string;

/** Known values of {@link RunStatus} that the service accepts. */
export enum KnownRunStatus {
  /** Queued */
  Queued = "Queued",
  /** Started */
  Started = "Started",
  /** Running */
  Running = "Running",
  /** Succeeded */
  Succeeded = "Succeeded",
  /** Failed */
  Failed = "Failed",
  /** Canceled */
  Canceled = "Canceled",
  /** Error */
  Error = "Error",
  /** Timeout */
  Timeout = "Timeout",
}

/**
 * Defines values for RunStatus. \
 * {@link KnownRunStatus} can be used interchangeably with RunStatus,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **Queued** \
 * **Started** \
 * **Running** \
 * **Succeeded** \
 * **Failed** \
 * **Canceled** \
 * **Error** \
 * **Timeout**
 */
export type RunStatus = string;

/** Known values of {@link RunType} that the service accepts. */
export enum KnownRunType {
  /** QuickBuild */
  QuickBuild = "QuickBuild",
  /** QuickRun */
  QuickRun = "QuickRun",
  /** AutoBuild */
  AutoBuild = "AutoBuild",
  /** AutoRun */
  AutoRun = "AutoRun",
}

/**
 * Defines values for RunType. \
 * {@link KnownRunType} can be used interchangeably with RunType,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **QuickBuild** \
 * **QuickRun** \
 * **AutoBuild** \
 * **AutoRun**
 */
export type RunType = string;

/** Known values of {@link Architecture} that the service accepts. */
export enum KnownArchitecture {
  /** Amd64 */
  Amd64 = "amd64",
  /** X86 */
  X86 = "x86",
  /** ThreeHundredEightySix */
  ThreeHundredEightySix = "386",
  /** Arm */
  Arm = "arm",
  /** Arm64 */
  Arm64 = "arm64",
}

/**
 * Defines values for Architecture. \
 * {@link KnownArchitecture} can be used interchangeably with Architecture,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **amd64** \
 * **x86** \
 * **386** \
 * **arm** \
 * **arm64**
 */
export type Architecture = string;

/** Known values of {@link Variant} that the service accepts. */
export enum KnownVariant {
  /** V6 */
  V6 = "v6",
  /** V7 */
  V7 = "v7",
  /** V8 */
  V8 = "v8",
}

/**
 * Defines values for Variant. \
 * {@link KnownVariant} can be used interchangeably with Variant,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **v6** \
 * **v7** \
 * **v8**
 */
export type Variant = string;

/** Known values of {@link TaskStatus} that the service accepts. */
export enum KnownTaskStatus {
  /** Disabled */
  Disabled = "Disabled",
  /** Enabled */
  Enabled = "Enabled",
}

/**
 * Defines values for TaskStatus. \
 * {@link KnownTaskStatus} can be used interchangeably with TaskStatus,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **Disabled** \
 * **Enabled**
 */
export type TaskStatus = string;

/** Known values of {@link StepType} that the service accepts. */
export enum KnownStepType {
  /** Docker */
  Docker = "Docker",
  /** FileTask */
  FileTask = "FileTask",
  /** EncodedTask */
  EncodedTask = "EncodedTask",
}

/**
 * Defines values for StepType. \
 * {@link KnownStepType} can be used interchangeably with StepType,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **Docker** \
 * **FileTask** \
 * **EncodedTask**
 */
export type StepType = string;

/** Known values of {@link BaseImageDependencyType} that the service accepts. */
export enum KnownBaseImageDependencyType {
  /** BuildTime */
  BuildTime = "BuildTime",
  /** RunTime */
  RunTime = "RunTime",
}

/**
 * Defines values for BaseImageDependencyType. \
 * {@link KnownBaseImageDependencyType} can be used interchangeably with BaseImageDependencyType,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **BuildTime** \
 * **RunTime**
 */
export type BaseImageDependencyType = string;

/** Known values of {@link TriggerStatus} that the service accepts. */
export enum KnownTriggerStatus {
  /** Disabled */
  Disabled = "Disabled",
  /** Enabled */
  Enabled = "Enabled",
}

/**
 * Defines values for TriggerStatus. \
 * {@link KnownTriggerStatus} can be used interchangeably with TriggerStatus,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **Disabled** \
 * **Enabled**
 */
export type TriggerStatus = string;

/** Known values of {@link SourceControlType} that the service accepts. */
export enum KnownSourceControlType {
  /** Github */
  Github = "Github",
  /** VisualStudioTeamService */
  VisualStudioTeamService = "VisualStudioTeamService",
}

/**
 * Defines values for SourceControlType. \
 * {@link KnownSourceControlType} can be used interchangeably with SourceControlType,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **Github** \
 * **VisualStudioTeamService**
 */
export type SourceControlType = string;

/** Known values of {@link TokenType} that the service accepts. */
export enum KnownTokenType {
  /** PAT */
  PAT = "PAT",
  /** OAuth */
  OAuth = "OAuth",
}

/**
 * Defines values for TokenType. \
 * {@link KnownTokenType} can be used interchangeably with TokenType,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **PAT** \
 * **OAuth**
 */
export type TokenType = string;

/** Known values of {@link SourceTriggerEvent} that the service accepts. */
export enum KnownSourceTriggerEvent {
  /** Commit */
  Commit = "commit",
  /** Pullrequest */
  Pullrequest = "pullrequest",
}

/**
 * Defines values for SourceTriggerEvent. \
 * {@link KnownSourceTriggerEvent} can be used interchangeably with SourceTriggerEvent,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **commit** \
 * **pullrequest**
 */
export type SourceTriggerEvent = string;

/** Known values of {@link BaseImageTriggerType} that the service accepts. */
export enum KnownBaseImageTriggerType {
  /** All */
  All = "All",
  /** Runtime */
  Runtime = "Runtime",
}

/**
 * Defines values for BaseImageTriggerType. \
 * {@link KnownBaseImageTriggerType} can be used interchangeably with BaseImageTriggerType,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **All** \
 * **Runtime**
 */
export type BaseImageTriggerType = string;

/** Known values of {@link UpdateTriggerPayloadType} that the service accepts. */
export enum KnownUpdateTriggerPayloadType {
  /** Default */
  Default = "Default",
  /** Token */
  Token = "Token",
}

/**
 * Defines values for UpdateTriggerPayloadType. \
 * {@link KnownUpdateTriggerPayloadType} can be used interchangeably with UpdateTriggerPayloadType,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **Default** \
 * **Token**
 */
export type UpdateTriggerPayloadType = string;

/** Known values of {@link SourceRegistryLoginMode} that the service accepts. */
export enum KnownSourceRegistryLoginMode {
  /** None */
  None = "None",
  /** Default */
  Default = "Default",
}

/**
 * Defines values for SourceRegistryLoginMode. \
 * {@link KnownSourceRegistryLoginMode} can be used interchangeably with SourceRegistryLoginMode,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **None** \
 * **Default**
 */
export type SourceRegistryLoginMode = string;

/** Known values of {@link SecretObjectType} that the service accepts. */
export enum KnownSecretObjectType {
  /** Opaque */
  Opaque = "Opaque",
  /** Vaultsecret */
  Vaultsecret = "Vaultsecret",
}

/**
 * Defines values for SecretObjectType. \
 * {@link KnownSecretObjectType} can be used interchangeably with SecretObjectType,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **Opaque** \
 * **Vaultsecret**
 */
export type SecretObjectType = string;
/** Defines values for ResourceIdentityType. */
export type ResourceIdentityType =
  | "SystemAssigned"
  | "UserAssigned"
  | "SystemAssigned, UserAssigned"
  | "None";

/** Optional parameters. */
export interface AgentPoolsGetOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the get operation. */
export type AgentPoolsGetResponse = AgentPool;

/** Optional parameters. */
export interface AgentPoolsCreateOptionalParams
  extends coreClient.OperationOptions {
  /** Delay to wait until next poll, in milliseconds. */
  updateIntervalInMs?: number;
  /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */
  resumeFrom?: string;
}

/** Contains response data for the create operation. */
export type AgentPoolsCreateResponse = AgentPool;

/** Optional parameters. */
export interface AgentPoolsDeleteOptionalParams
  extends coreClient.OperationOptions {
  /** Delay to wait until next poll, in milliseconds. */
  updateIntervalInMs?: number;
  /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */
  resumeFrom?: string;
}

/** Contains response data for the delete operation. */
export type AgentPoolsDeleteResponse = AgentPoolsDeleteHeaders;

/** Optional parameters. */
export interface AgentPoolsUpdateOptionalParams
  extends coreClient.OperationOptions {
  /** Delay to wait until next poll, in milliseconds. */
  updateIntervalInMs?: number;
  /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */
  resumeFrom?: string;
}

/** Contains response data for the update operation. */
export type AgentPoolsUpdateResponse = AgentPool;

/** Optional parameters. */
export interface AgentPoolsListOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the list operation. */
export type AgentPoolsListResponse = AgentPoolListResult;

/** Optional parameters. */
export interface AgentPoolsGetQueueStatusOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the getQueueStatus operation. */
export type AgentPoolsGetQueueStatusResponse = AgentPoolQueueStatus;

/** Optional parameters. */
export interface AgentPoolsListNextOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the listNext operation. */
export type AgentPoolsListNextResponse = AgentPoolListResult;

/** Optional parameters. */
export interface RegistriesScheduleRunOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the scheduleRun operation. */
export type RegistriesScheduleRunResponse = Run;

/** Optional parameters. */
export interface RegistriesGetBuildSourceUploadUrlOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the getBuildSourceUploadUrl operation. */
export type RegistriesGetBuildSourceUploadUrlResponse = SourceUploadDefinition;

/** Optional parameters. */
export interface RunsListOptionalParams extends coreClient.OperationOptions {
  /** The runs filter to apply on the operation. Arithmetic operators are not supported. The allowed string function is 'contains'. All logical operators except 'Not', 'Has', 'All' are allowed. */
  filter?: string;
  /** $top is supported for get list of runs, which limits the maximum number of runs to return. */
  top?: number;
}

/** Contains response data for the list operation. */
export type RunsListResponse = RunListResult;

/** Optional parameters. */
export interface RunsGetOptionalParams extends coreClient.OperationOptions {}

/** Contains response data for the get operation. */
export type RunsGetResponse = Run;

/** Optional parameters. */
export interface RunsUpdateOptionalParams extends coreClient.OperationOptions {}

/** Contains response data for the update operation. */
export type RunsUpdateResponse = Run;

/** Optional parameters. */
export interface RunsGetLogSasUrlOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the getLogSasUrl operation. */
export type RunsGetLogSasUrlResponse = RunGetLogResult;

/** Optional parameters. */
export interface RunsCancelOptionalParams extends coreClient.OperationOptions {}

/** Optional parameters. */
export interface RunsListNextOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the listNext operation. */
export type RunsListNextResponse = RunListResult;

/** Optional parameters. */
export interface TaskRunsGetOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the get operation. */
export type TaskRunsGetResponse = TaskRun;

/** Optional parameters. */
export interface TaskRunsCreateOptionalParams
  extends coreClient.OperationOptions {
  /** Delay to wait until next poll, in milliseconds. */
  updateIntervalInMs?: number;
  /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */
  resumeFrom?: string;
}

/** Contains response data for the create operation. */
export type TaskRunsCreateResponse = TaskRun;

/** Optional parameters. */
export interface TaskRunsDeleteOptionalParams
  extends coreClient.OperationOptions {}

/** Optional parameters. */
export interface TaskRunsUpdateOptionalParams
  extends coreClient.OperationOptions {
  /** Delay to wait until next poll, in milliseconds. */
  updateIntervalInMs?: number;
  /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */
  resumeFrom?: string;
}

/** Contains response data for the update operation. */
export type TaskRunsUpdateResponse = TaskRun;

/** Optional parameters. */
export interface TaskRunsGetDetailsOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the getDetails operation. */
export type TaskRunsGetDetailsResponse = TaskRun;

/** Optional parameters. */
export interface TaskRunsListOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the list operation. */
export type TaskRunsListResponse = TaskRunListResult;

/** Optional parameters. */
export interface TaskRunsListNextOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the listNext operation. */
export type TaskRunsListNextResponse = TaskRunListResult;

/** Optional parameters. */
export interface TasksListOptionalParams extends coreClient.OperationOptions {}

/** Contains response data for the list operation. */
export type TasksListResponse = TaskListResult;

/** Optional parameters. */
export interface TasksGetOptionalParams extends coreClient.OperationOptions {}

/** Contains response data for the get operation. */
export type TasksGetResponse = Task;

/** Optional parameters. */
export interface TasksCreateOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the create operation. */
export type TasksCreateResponse = Task;

/** Optional parameters. */
export interface TasksDeleteOptionalParams
  extends coreClient.OperationOptions {}

/** Optional parameters. */
export interface TasksUpdateOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the update operation. */
export type TasksUpdateResponse = Task;

/** Optional parameters. */
export interface TasksGetDetailsOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the getDetails operation. */
export type TasksGetDetailsResponse = Task;

/** Optional parameters. */
export interface TasksListNextOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the listNext operation. */
export type TasksListNextResponse = TaskListResult;

/** Optional parameters. */
export interface ContainerRegistryManagementClientOptionalParams
  extends coreClient.ServiceClientOptions {
  /** server parameter */
  $host?: string;
  /** Api Version */
  apiVersion?: string;
  /** Overrides client endpoint. */
  endpoint?: string;
}
