// Copyright (c) Microsoft Corporation.
// Licensed under the MIT License.

// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

import * as coreClient from "@azure/core-client";

export const AgentPoolListResult: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "AgentPoolListResult",
    modelProperties: {
      value: {
        serializedName: "value",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "AgentPool",
            },
          },
        },
      },
      nextLink: {
        serializedName: "nextLink",
        type: {
          name: "String",
        },
      },
    },
  },
};

export const Resource: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "Resource",
    modelProperties: {
      id: {
        serializedName: "id",
        readOnly: true,
        type: {
          name: "String",
        },
      },
      name: {
        serializedName: "name",
        readOnly: true,
        type: {
          name: "String",
        },
      },
      type: {
        serializedName: "type",
        readOnly: true,
        type: {
          name: "String",
        },
      },
      systemData: {
        serializedName: "systemData",
        type: {
          name: "Composite",
          className: "SystemData",
        },
      },
    },
  },
};

export const SystemData: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "SystemData",
    modelProperties: {
      createdBy: {
        serializedName: "createdBy",
        type: {
          name: "String",
        },
      },
      createdByType: {
        serializedName: "createdByType",
        type: {
          name: "String",
        },
      },
      createdAt: {
        serializedName: "createdAt",
        type: {
          name: "DateTime",
        },
      },
      lastModifiedBy: {
        serializedName: "lastModifiedBy",
        type: {
          name: "String",
        },
      },
      lastModifiedByType: {
        serializedName: "lastModifiedByType",
        type: {
          name: "String",
        },
      },
      lastModifiedAt: {
        serializedName: "lastModifiedAt",
        type: {
          name: "DateTime",
        },
      },
    },
  },
};

export const ErrorResponse: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "ErrorResponse",
    modelProperties: {
      error: {
        serializedName: "error",
        type: {
          name: "Composite",
          className: "ErrorDetail",
        },
      },
    },
  },
};

export const ErrorDetail: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "ErrorDetail",
    modelProperties: {
      code: {
        serializedName: "code",
        readOnly: true,
        type: {
          name: "String",
        },
      },
      message: {
        serializedName: "message",
        readOnly: true,
        type: {
          name: "String",
        },
      },
      target: {
        serializedName: "target",
        readOnly: true,
        type: {
          name: "String",
        },
      },
      details: {
        serializedName: "details",
        readOnly: true,
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "ErrorDetail",
            },
          },
        },
      },
      additionalInfo: {
        serializedName: "additionalInfo",
        readOnly: true,
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "ErrorAdditionalInfo",
            },
          },
        },
      },
    },
  },
};

export const ErrorAdditionalInfo: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "ErrorAdditionalInfo",
    modelProperties: {
      type: {
        serializedName: "type",
        readOnly: true,
        type: {
          name: "String",
        },
      },
      info: {
        serializedName: "info",
        readOnly: true,
        type: {
          name: "Dictionary",
          value: { type: { name: "any" } },
        },
      },
    },
  },
};

export const AgentPoolUpdateParameters: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "AgentPoolUpdateParameters",
    modelProperties: {
      tags: {
        serializedName: "tags",
        type: {
          name: "Dictionary",
          value: { type: { name: "String" } },
        },
      },
      count: {
        serializedName: "properties.count",
        type: {
          name: "Number",
        },
      },
    },
  },
};

export const AgentPoolQueueStatus: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "AgentPoolQueueStatus",
    modelProperties: {
      count: {
        serializedName: "count",
        type: {
          name: "Number",
        },
      },
    },
  },
};

export const SourceUploadDefinition: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "SourceUploadDefinition",
    modelProperties: {
      uploadUrl: {
        serializedName: "uploadUrl",
        type: {
          name: "String",
        },
      },
      relativePath: {
        serializedName: "relativePath",
        type: {
          name: "String",
        },
      },
    },
  },
};

export const RunListResult: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "RunListResult",
    modelProperties: {
      value: {
        serializedName: "value",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "Run",
            },
          },
        },
      },
      nextLink: {
        serializedName: "nextLink",
        type: {
          name: "String",
        },
      },
    },
  },
};

export const ImageDescriptor: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "ImageDescriptor",
    modelProperties: {
      registry: {
        serializedName: "registry",
        type: {
          name: "String",
        },
      },
      repository: {
        serializedName: "repository",
        type: {
          name: "String",
        },
      },
      tag: {
        serializedName: "tag",
        type: {
          name: "String",
        },
      },
      digest: {
        serializedName: "digest",
        type: {
          name: "String",
        },
      },
    },
  },
};

export const ImageUpdateTrigger: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "ImageUpdateTrigger",
    modelProperties: {
      id: {
        serializedName: "id",
        type: {
          name: "String",
        },
      },
      timestamp: {
        serializedName: "timestamp",
        type: {
          name: "DateTime",
        },
      },
      images: {
        serializedName: "images",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "ImageDescriptor",
            },
          },
        },
      },
    },
  },
};

export const SourceTriggerDescriptor: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "SourceTriggerDescriptor",
    modelProperties: {
      id: {
        serializedName: "id",
        type: {
          name: "String",
        },
      },
      eventType: {
        serializedName: "eventType",
        type: {
          name: "String",
        },
      },
      commitId: {
        serializedName: "commitId",
        type: {
          name: "String",
        },
      },
      pullRequestId: {
        serializedName: "pullRequestId",
        type: {
          name: "String",
        },
      },
      repositoryUrl: {
        serializedName: "repositoryUrl",
        type: {
          name: "String",
        },
      },
      branchName: {
        serializedName: "branchName",
        type: {
          name: "String",
        },
      },
      providerType: {
        serializedName: "providerType",
        type: {
          name: "String",
        },
      },
    },
  },
};

export const TimerTriggerDescriptor: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "TimerTriggerDescriptor",
    modelProperties: {
      timerTriggerName: {
        serializedName: "timerTriggerName",
        type: {
          name: "String",
        },
      },
      scheduleOccurrence: {
        serializedName: "scheduleOccurrence",
        type: {
          name: "String",
        },
      },
    },
  },
};

export const PlatformProperties: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "PlatformProperties",
    modelProperties: {
      os: {
        serializedName: "os",
        required: true,
        type: {
          name: "String",
        },
      },
      architecture: {
        serializedName: "architecture",
        type: {
          name: "String",
        },
      },
      variant: {
        serializedName: "variant",
        type: {
          name: "String",
        },
      },
    },
  },
};

export const AgentProperties: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "AgentProperties",
    modelProperties: {
      cpu: {
        serializedName: "cpu",
        type: {
          name: "Number",
        },
      },
    },
  },
};

export const RunUpdateParameters: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "RunUpdateParameters",
    modelProperties: {
      isArchiveEnabled: {
        serializedName: "isArchiveEnabled",
        type: {
          name: "Boolean",
        },
      },
    },
  },
};

export const RunGetLogResult: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "RunGetLogResult",
    modelProperties: {
      logLink: {
        serializedName: "logLink",
        type: {
          name: "String",
        },
      },
      logArtifactLink: {
        serializedName: "logArtifactLink",
        type: {
          name: "String",
        },
      },
    },
  },
};

export const RunRequest: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "RunRequest",
    uberParent: "RunRequest",
    polymorphicDiscriminator: {
      serializedName: "type",
      clientName: "type",
    },
    modelProperties: {
      type: {
        serializedName: "type",
        required: true,
        type: {
          name: "String",
        },
      },
      isArchiveEnabled: {
        defaultValue: false,
        serializedName: "isArchiveEnabled",
        type: {
          name: "Boolean",
        },
      },
      agentPoolName: {
        serializedName: "agentPoolName",
        type: {
          name: "String",
        },
      },
      logTemplate: {
        serializedName: "logTemplate",
        type: {
          name: "String",
        },
      },
    },
  },
};

export const TaskRunListResult: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "TaskRunListResult",
    modelProperties: {
      value: {
        serializedName: "value",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "TaskRun",
            },
          },
        },
      },
      nextLink: {
        serializedName: "nextLink",
        type: {
          name: "String",
        },
      },
    },
  },
};

export const IdentityProperties: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "IdentityProperties",
    modelProperties: {
      principalId: {
        serializedName: "principalId",
        readOnly: true,
        type: {
          name: "String",
        },
      },
      tenantId: {
        serializedName: "tenantId",
        readOnly: true,
        type: {
          name: "String",
        },
      },
      type: {
        serializedName: "type",
        type: {
          name: "Enum",
          allowedValues: [
            "SystemAssigned",
            "UserAssigned",
            "SystemAssigned, UserAssigned",
            "None",
          ],
        },
      },
      userAssignedIdentities: {
        serializedName: "userAssignedIdentities",
        type: {
          name: "Dictionary",
          value: {
            type: { name: "Composite", className: "UserIdentityProperties" },
          },
        },
      },
    },
  },
};

export const UserIdentityProperties: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "UserIdentityProperties",
    modelProperties: {
      principalId: {
        serializedName: "principalId",
        readOnly: true,
        type: {
          name: "String",
        },
      },
      clientId: {
        serializedName: "clientId",
        readOnly: true,
        type: {
          name: "String",
        },
      },
    },
  },
};

export const TaskRunUpdateParameters: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "TaskRunUpdateParameters",
    modelProperties: {
      identity: {
        serializedName: "identity",
        type: {
          name: "Composite",
          className: "IdentityProperties",
        },
      },
      location: {
        serializedName: "location",
        type: {
          name: "String",
        },
      },
      tags: {
        serializedName: "tags",
        type: {
          name: "Dictionary",
          value: { type: { name: "String" } },
        },
      },
      runRequest: {
        serializedName: "properties.runRequest",
        type: {
          name: "Composite",
          className: "RunRequest",
        },
      },
      forceUpdateTag: {
        serializedName: "properties.forceUpdateTag",
        type: {
          name: "String",
        },
      },
    },
  },
};

export const TaskListResult: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "TaskListResult",
    modelProperties: {
      value: {
        serializedName: "value",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "Task",
            },
          },
        },
      },
      nextLink: {
        serializedName: "nextLink",
        type: {
          name: "String",
        },
      },
    },
  },
};

export const TaskStepProperties: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "TaskStepProperties",
    uberParent: "TaskStepProperties",
    polymorphicDiscriminator: {
      serializedName: "type",
      clientName: "type",
    },
    modelProperties: {
      type: {
        serializedName: "type",
        required: true,
        type: {
          name: "String",
        },
      },
      baseImageDependencies: {
        serializedName: "baseImageDependencies",
        readOnly: true,
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "BaseImageDependency",
            },
          },
        },
      },
      contextPath: {
        serializedName: "contextPath",
        type: {
          name: "String",
        },
      },
      contextAccessToken: {
        serializedName: "contextAccessToken",
        type: {
          name: "String",
        },
      },
    },
  },
};

export const BaseImageDependency: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "BaseImageDependency",
    modelProperties: {
      type: {
        serializedName: "type",
        type: {
          name: "String",
        },
      },
      registry: {
        serializedName: "registry",
        type: {
          name: "String",
        },
      },
      repository: {
        serializedName: "repository",
        type: {
          name: "String",
        },
      },
      tag: {
        serializedName: "tag",
        type: {
          name: "String",
        },
      },
      digest: {
        serializedName: "digest",
        type: {
          name: "String",
        },
      },
    },
  },
};

export const TriggerProperties: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "TriggerProperties",
    modelProperties: {
      timerTriggers: {
        serializedName: "timerTriggers",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "TimerTrigger",
            },
          },
        },
      },
      sourceTriggers: {
        serializedName: "sourceTriggers",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "SourceTrigger",
            },
          },
        },
      },
      baseImageTrigger: {
        serializedName: "baseImageTrigger",
        type: {
          name: "Composite",
          className: "BaseImageTrigger",
        },
      },
    },
  },
};

export const TimerTrigger: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "TimerTrigger",
    modelProperties: {
      schedule: {
        serializedName: "schedule",
        required: true,
        type: {
          name: "String",
        },
      },
      status: {
        serializedName: "status",
        type: {
          name: "String",
        },
      },
      name: {
        serializedName: "name",
        required: true,
        type: {
          name: "String",
        },
      },
    },
  },
};

export const SourceTrigger: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "SourceTrigger",
    modelProperties: {
      sourceRepository: {
        serializedName: "sourceRepository",
        type: {
          name: "Composite",
          className: "SourceProperties",
        },
      },
      sourceTriggerEvents: {
        serializedName: "sourceTriggerEvents",
        required: true,
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "String",
            },
          },
        },
      },
      status: {
        serializedName: "status",
        type: {
          name: "String",
        },
      },
      name: {
        serializedName: "name",
        required: true,
        type: {
          name: "String",
        },
      },
    },
  },
};

export const SourceProperties: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "SourceProperties",
    modelProperties: {
      sourceControlType: {
        serializedName: "sourceControlType",
        required: true,
        type: {
          name: "String",
        },
      },
      repositoryUrl: {
        serializedName: "repositoryUrl",
        required: true,
        type: {
          name: "String",
        },
      },
      branch: {
        serializedName: "branch",
        type: {
          name: "String",
        },
      },
      sourceControlAuthProperties: {
        serializedName: "sourceControlAuthProperties",
        type: {
          name: "Composite",
          className: "AuthInfo",
        },
      },
    },
  },
};

export const AuthInfo: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "AuthInfo",
    modelProperties: {
      tokenType: {
        serializedName: "tokenType",
        required: true,
        type: {
          name: "String",
        },
      },
      token: {
        serializedName: "token",
        required: true,
        type: {
          name: "String",
        },
      },
      refreshToken: {
        serializedName: "refreshToken",
        type: {
          name: "String",
        },
      },
      scope: {
        serializedName: "scope",
        type: {
          name: "String",
        },
      },
      expiresIn: {
        serializedName: "expiresIn",
        type: {
          name: "Number",
        },
      },
    },
  },
};

export const BaseImageTrigger: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "BaseImageTrigger",
    modelProperties: {
      baseImageTriggerType: {
        serializedName: "baseImageTriggerType",
        required: true,
        type: {
          name: "String",
        },
      },
      updateTriggerEndpoint: {
        serializedName: "updateTriggerEndpoint",
        type: {
          name: "String",
        },
      },
      updateTriggerPayloadType: {
        serializedName: "updateTriggerPayloadType",
        type: {
          name: "String",
        },
      },
      status: {
        serializedName: "status",
        type: {
          name: "String",
        },
      },
      name: {
        serializedName: "name",
        required: true,
        type: {
          name: "String",
        },
      },
    },
  },
};

export const Credentials: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "Credentials",
    modelProperties: {
      sourceRegistry: {
        serializedName: "sourceRegistry",
        type: {
          name: "Composite",
          className: "SourceRegistryCredentials",
        },
      },
      customRegistries: {
        serializedName: "customRegistries",
        type: {
          name: "Dictionary",
          value: {
            type: { name: "Composite", className: "CustomRegistryCredentials" },
          },
        },
      },
    },
  },
};

export const SourceRegistryCredentials: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "SourceRegistryCredentials",
    modelProperties: {
      identity: {
        serializedName: "identity",
        type: {
          name: "String",
        },
      },
      loginMode: {
        serializedName: "loginMode",
        type: {
          name: "String",
        },
      },
    },
  },
};

export const CustomRegistryCredentials: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "CustomRegistryCredentials",
    modelProperties: {
      userName: {
        serializedName: "userName",
        type: {
          name: "Composite",
          className: "SecretObject",
        },
      },
      password: {
        serializedName: "password",
        type: {
          name: "Composite",
          className: "SecretObject",
        },
      },
      identity: {
        serializedName: "identity",
        type: {
          name: "String",
        },
      },
    },
  },
};

export const SecretObject: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "SecretObject",
    modelProperties: {
      value: {
        serializedName: "value",
        type: {
          name: "String",
        },
      },
      type: {
        serializedName: "type",
        type: {
          name: "String",
        },
      },
    },
  },
};

export const TaskUpdateParameters: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "TaskUpdateParameters",
    modelProperties: {
      identity: {
        serializedName: "identity",
        type: {
          name: "Composite",
          className: "IdentityProperties",
        },
      },
      tags: {
        serializedName: "tags",
        type: {
          name: "Dictionary",
          value: { type: { name: "String" } },
        },
      },
      status: {
        serializedName: "properties.status",
        type: {
          name: "String",
        },
      },
      platform: {
        serializedName: "properties.platform",
        type: {
          name: "Composite",
          className: "PlatformUpdateParameters",
        },
      },
      agentConfiguration: {
        serializedName: "properties.agentConfiguration",
        type: {
          name: "Composite",
          className: "AgentProperties",
        },
      },
      agentPoolName: {
        serializedName: "properties.agentPoolName",
        type: {
          name: "String",
        },
      },
      timeout: {
        serializedName: "properties.timeout",
        type: {
          name: "Number",
        },
      },
      step: {
        serializedName: "properties.step",
        type: {
          name: "Composite",
          className: "TaskStepUpdateParameters",
        },
      },
      trigger: {
        serializedName: "properties.trigger",
        type: {
          name: "Composite",
          className: "TriggerUpdateParameters",
        },
      },
      credentials: {
        serializedName: "properties.credentials",
        type: {
          name: "Composite",
          className: "Credentials",
        },
      },
      logTemplate: {
        serializedName: "properties.logTemplate",
        type: {
          name: "String",
        },
      },
    },
  },
};

export const PlatformUpdateParameters: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "PlatformUpdateParameters",
    modelProperties: {
      os: {
        serializedName: "os",
        type: {
          name: "String",
        },
      },
      architecture: {
        serializedName: "architecture",
        type: {
          name: "String",
        },
      },
      variant: {
        serializedName: "variant",
        type: {
          name: "String",
        },
      },
    },
  },
};

export const TaskStepUpdateParameters: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "TaskStepUpdateParameters",
    uberParent: "TaskStepUpdateParameters",
    polymorphicDiscriminator: {
      serializedName: "type",
      clientName: "type",
    },
    modelProperties: {
      type: {
        serializedName: "type",
        required: true,
        type: {
          name: "String",
        },
      },
      contextPath: {
        serializedName: "contextPath",
        type: {
          name: "String",
        },
      },
      contextAccessToken: {
        serializedName: "contextAccessToken",
        type: {
          name: "String",
        },
      },
    },
  },
};

export const TriggerUpdateParameters: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "TriggerUpdateParameters",
    modelProperties: {
      timerTriggers: {
        serializedName: "timerTriggers",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "TimerTriggerUpdateParameters",
            },
          },
        },
      },
      sourceTriggers: {
        serializedName: "sourceTriggers",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "SourceTriggerUpdateParameters",
            },
          },
        },
      },
      baseImageTrigger: {
        serializedName: "baseImageTrigger",
        type: {
          name: "Composite",
          className: "BaseImageTriggerUpdateParameters",
        },
      },
    },
  },
};

export const TimerTriggerUpdateParameters: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "TimerTriggerUpdateParameters",
    modelProperties: {
      schedule: {
        serializedName: "schedule",
        type: {
          name: "String",
        },
      },
      status: {
        serializedName: "status",
        type: {
          name: "String",
        },
      },
      name: {
        serializedName: "name",
        required: true,
        type: {
          name: "String",
        },
      },
    },
  },
};

export const SourceTriggerUpdateParameters: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "SourceTriggerUpdateParameters",
    modelProperties: {
      sourceRepository: {
        serializedName: "sourceRepository",
        type: {
          name: "Composite",
          className: "SourceUpdateParameters",
        },
      },
      sourceTriggerEvents: {
        serializedName: "sourceTriggerEvents",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "String",
            },
          },
        },
      },
      status: {
        serializedName: "status",
        type: {
          name: "String",
        },
      },
      name: {
        serializedName: "name",
        required: true,
        type: {
          name: "String",
        },
      },
    },
  },
};

export const SourceUpdateParameters: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "SourceUpdateParameters",
    modelProperties: {
      sourceControlType: {
        serializedName: "sourceControlType",
        type: {
          name: "String",
        },
      },
      repositoryUrl: {
        serializedName: "repositoryUrl",
        type: {
          name: "String",
        },
      },
      branch: {
        serializedName: "branch",
        type: {
          name: "String",
        },
      },
      sourceControlAuthProperties: {
        serializedName: "sourceControlAuthProperties",
        type: {
          name: "Composite",
          className: "AuthInfoUpdateParameters",
        },
      },
    },
  },
};

export const AuthInfoUpdateParameters: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "AuthInfoUpdateParameters",
    modelProperties: {
      tokenType: {
        serializedName: "tokenType",
        type: {
          name: "String",
        },
      },
      token: {
        serializedName: "token",
        type: {
          name: "String",
        },
      },
      refreshToken: {
        serializedName: "refreshToken",
        type: {
          name: "String",
        },
      },
      scope: {
        serializedName: "scope",
        type: {
          name: "String",
        },
      },
      expiresIn: {
        serializedName: "expiresIn",
        type: {
          name: "Number",
        },
      },
    },
  },
};

export const BaseImageTriggerUpdateParameters: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "BaseImageTriggerUpdateParameters",
    modelProperties: {
      baseImageTriggerType: {
        serializedName: "baseImageTriggerType",
        type: {
          name: "String",
        },
      },
      updateTriggerEndpoint: {
        serializedName: "updateTriggerEndpoint",
        type: {
          name: "String",
        },
      },
      updateTriggerPayloadType: {
        serializedName: "updateTriggerPayloadType",
        type: {
          name: "String",
        },
      },
      status: {
        serializedName: "status",
        type: {
          name: "String",
        },
      },
      name: {
        serializedName: "name",
        required: true,
        type: {
          name: "String",
        },
      },
    },
  },
};

export const Argument: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "Argument",
    modelProperties: {
      name: {
        serializedName: "name",
        required: true,
        type: {
          name: "String",
        },
      },
      value: {
        serializedName: "value",
        required: true,
        type: {
          name: "String",
        },
      },
      isSecret: {
        defaultValue: false,
        serializedName: "isSecret",
        type: {
          name: "Boolean",
        },
      },
    },
  },
};

export const SetValue: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "SetValue",
    modelProperties: {
      name: {
        serializedName: "name",
        required: true,
        type: {
          name: "String",
        },
      },
      value: {
        serializedName: "value",
        required: true,
        type: {
          name: "String",
        },
      },
      isSecret: {
        defaultValue: false,
        serializedName: "isSecret",
        type: {
          name: "Boolean",
        },
      },
    },
  },
};

export const OverrideTaskStepProperties: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "OverrideTaskStepProperties",
    modelProperties: {
      contextPath: {
        serializedName: "contextPath",
        type: {
          name: "String",
        },
      },
      file: {
        serializedName: "file",
        type: {
          name: "String",
        },
      },
      arguments: {
        serializedName: "arguments",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "Argument",
            },
          },
        },
      },
      target: {
        serializedName: "target",
        type: {
          name: "String",
        },
      },
      values: {
        serializedName: "values",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "SetValue",
            },
          },
        },
      },
      updateTriggerToken: {
        serializedName: "updateTriggerToken",
        type: {
          name: "String",
        },
      },
    },
  },
};

export const TrackedResource: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "TrackedResource",
    modelProperties: {
      ...Resource.type.modelProperties,
      tags: {
        serializedName: "tags",
        type: {
          name: "Dictionary",
          value: { type: { name: "String" } },
        },
      },
      location: {
        serializedName: "location",
        required: true,
        type: {
          name: "String",
        },
      },
    },
  },
};

export const ProxyResource: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "ProxyResource",
    modelProperties: {
      ...Resource.type.modelProperties,
    },
  },
};

export const DockerBuildRequest: coreClient.CompositeMapper = {
  serializedName: "DockerBuildRequest",
  type: {
    name: "Composite",
    className: "DockerBuildRequest",
    uberParent: "RunRequest",
    polymorphicDiscriminator: RunRequest.type.polymorphicDiscriminator,
    modelProperties: {
      ...RunRequest.type.modelProperties,
      imageNames: {
        serializedName: "imageNames",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "String",
            },
          },
        },
      },
      isPushEnabled: {
        defaultValue: true,
        serializedName: "isPushEnabled",
        type: {
          name: "Boolean",
        },
      },
      noCache: {
        defaultValue: false,
        serializedName: "noCache",
        type: {
          name: "Boolean",
        },
      },
      dockerFilePath: {
        serializedName: "dockerFilePath",
        required: true,
        type: {
          name: "String",
        },
      },
      target: {
        serializedName: "target",
        type: {
          name: "String",
        },
      },
      arguments: {
        serializedName: "arguments",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "Argument",
            },
          },
        },
      },
      timeout: {
        defaultValue: 3600,
        constraints: {
          InclusiveMaximum: 28800,
          InclusiveMinimum: 300,
        },
        serializedName: "timeout",
        type: {
          name: "Number",
        },
      },
      platform: {
        serializedName: "platform",
        type: {
          name: "Composite",
          className: "PlatformProperties",
        },
      },
      agentConfiguration: {
        serializedName: "agentConfiguration",
        type: {
          name: "Composite",
          className: "AgentProperties",
        },
      },
      sourceLocation: {
        serializedName: "sourceLocation",
        type: {
          name: "String",
        },
      },
      credentials: {
        serializedName: "credentials",
        type: {
          name: "Composite",
          className: "Credentials",
        },
      },
    },
  },
};

export const EncodedTaskRunRequest: coreClient.CompositeMapper = {
  serializedName: "EncodedTaskRunRequest",
  type: {
    name: "Composite",
    className: "EncodedTaskRunRequest",
    uberParent: "RunRequest",
    polymorphicDiscriminator: RunRequest.type.polymorphicDiscriminator,
    modelProperties: {
      ...RunRequest.type.modelProperties,
      encodedTaskContent: {
        serializedName: "encodedTaskContent",
        required: true,
        type: {
          name: "String",
        },
      },
      encodedValuesContent: {
        serializedName: "encodedValuesContent",
        type: {
          name: "String",
        },
      },
      values: {
        serializedName: "values",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "SetValue",
            },
          },
        },
      },
      timeout: {
        defaultValue: 3600,
        constraints: {
          InclusiveMaximum: 28800,
          InclusiveMinimum: 300,
        },
        serializedName: "timeout",
        type: {
          name: "Number",
        },
      },
      platform: {
        serializedName: "platform",
        type: {
          name: "Composite",
          className: "PlatformProperties",
        },
      },
      agentConfiguration: {
        serializedName: "agentConfiguration",
        type: {
          name: "Composite",
          className: "AgentProperties",
        },
      },
      sourceLocation: {
        serializedName: "sourceLocation",
        type: {
          name: "String",
        },
      },
      credentials: {
        serializedName: "credentials",
        type: {
          name: "Composite",
          className: "Credentials",
        },
      },
    },
  },
};

export const FileTaskRunRequest: coreClient.CompositeMapper = {
  serializedName: "FileTaskRunRequest",
  type: {
    name: "Composite",
    className: "FileTaskRunRequest",
    uberParent: "RunRequest",
    polymorphicDiscriminator: RunRequest.type.polymorphicDiscriminator,
    modelProperties: {
      ...RunRequest.type.modelProperties,
      taskFilePath: {
        serializedName: "taskFilePath",
        required: true,
        type: {
          name: "String",
        },
      },
      valuesFilePath: {
        serializedName: "valuesFilePath",
        type: {
          name: "String",
        },
      },
      values: {
        serializedName: "values",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "SetValue",
            },
          },
        },
      },
      timeout: {
        defaultValue: 3600,
        constraints: {
          InclusiveMaximum: 28800,
          InclusiveMinimum: 300,
        },
        serializedName: "timeout",
        type: {
          name: "Number",
        },
      },
      platform: {
        serializedName: "platform",
        type: {
          name: "Composite",
          className: "PlatformProperties",
        },
      },
      agentConfiguration: {
        serializedName: "agentConfiguration",
        type: {
          name: "Composite",
          className: "AgentProperties",
        },
      },
      sourceLocation: {
        serializedName: "sourceLocation",
        type: {
          name: "String",
        },
      },
      credentials: {
        serializedName: "credentials",
        type: {
          name: "Composite",
          className: "Credentials",
        },
      },
    },
  },
};

export const TaskRunRequest: coreClient.CompositeMapper = {
  serializedName: "TaskRunRequest",
  type: {
    name: "Composite",
    className: "TaskRunRequest",
    uberParent: "RunRequest",
    polymorphicDiscriminator: RunRequest.type.polymorphicDiscriminator,
    modelProperties: {
      ...RunRequest.type.modelProperties,
      taskId: {
        serializedName: "taskId",
        required: true,
        type: {
          name: "String",
        },
      },
      overrideTaskStepProperties: {
        serializedName: "overrideTaskStepProperties",
        type: {
          name: "Composite",
          className: "OverrideTaskStepProperties",
        },
      },
    },
  },
};

export const DockerBuildStep: coreClient.CompositeMapper = {
  serializedName: "Docker",
  type: {
    name: "Composite",
    className: "DockerBuildStep",
    uberParent: "TaskStepProperties",
    polymorphicDiscriminator: TaskStepProperties.type.polymorphicDiscriminator,
    modelProperties: {
      ...TaskStepProperties.type.modelProperties,
      imageNames: {
        serializedName: "imageNames",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "String",
            },
          },
        },
      },
      isPushEnabled: {
        defaultValue: true,
        serializedName: "isPushEnabled",
        type: {
          name: "Boolean",
        },
      },
      noCache: {
        defaultValue: false,
        serializedName: "noCache",
        type: {
          name: "Boolean",
        },
      },
      dockerFilePath: {
        serializedName: "dockerFilePath",
        required: true,
        type: {
          name: "String",
        },
      },
      target: {
        serializedName: "target",
        type: {
          name: "String",
        },
      },
      arguments: {
        serializedName: "arguments",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "Argument",
            },
          },
        },
      },
    },
  },
};

export const EncodedTaskStep: coreClient.CompositeMapper = {
  serializedName: "EncodedTask",
  type: {
    name: "Composite",
    className: "EncodedTaskStep",
    uberParent: "TaskStepProperties",
    polymorphicDiscriminator: TaskStepProperties.type.polymorphicDiscriminator,
    modelProperties: {
      ...TaskStepProperties.type.modelProperties,
      encodedTaskContent: {
        serializedName: "encodedTaskContent",
        required: true,
        type: {
          name: "String",
        },
      },
      encodedValuesContent: {
        serializedName: "encodedValuesContent",
        type: {
          name: "String",
        },
      },
      values: {
        serializedName: "values",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "SetValue",
            },
          },
        },
      },
    },
  },
};

export const FileTaskStep: coreClient.CompositeMapper = {
  serializedName: "FileTask",
  type: {
    name: "Composite",
    className: "FileTaskStep",
    uberParent: "TaskStepProperties",
    polymorphicDiscriminator: TaskStepProperties.type.polymorphicDiscriminator,
    modelProperties: {
      ...TaskStepProperties.type.modelProperties,
      taskFilePath: {
        serializedName: "taskFilePath",
        required: true,
        type: {
          name: "String",
        },
      },
      valuesFilePath: {
        serializedName: "valuesFilePath",
        type: {
          name: "String",
        },
      },
      values: {
        serializedName: "values",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "SetValue",
            },
          },
        },
      },
    },
  },
};

export const DockerBuildStepUpdateParameters: coreClient.CompositeMapper = {
  serializedName: "Docker",
  type: {
    name: "Composite",
    className: "DockerBuildStepUpdateParameters",
    uberParent: "TaskStepUpdateParameters",
    polymorphicDiscriminator:
      TaskStepUpdateParameters.type.polymorphicDiscriminator,
    modelProperties: {
      ...TaskStepUpdateParameters.type.modelProperties,
      imageNames: {
        serializedName: "imageNames",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "String",
            },
          },
        },
      },
      isPushEnabled: {
        serializedName: "isPushEnabled",
        type: {
          name: "Boolean",
        },
      },
      noCache: {
        serializedName: "noCache",
        type: {
          name: "Boolean",
        },
      },
      dockerFilePath: {
        serializedName: "dockerFilePath",
        type: {
          name: "String",
        },
      },
      arguments: {
        serializedName: "arguments",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "Argument",
            },
          },
        },
      },
      target: {
        serializedName: "target",
        type: {
          name: "String",
        },
      },
    },
  },
};

export const EncodedTaskStepUpdateParameters: coreClient.CompositeMapper = {
  serializedName: "EncodedTask",
  type: {
    name: "Composite",
    className: "EncodedTaskStepUpdateParameters",
    uberParent: "TaskStepUpdateParameters",
    polymorphicDiscriminator:
      TaskStepUpdateParameters.type.polymorphicDiscriminator,
    modelProperties: {
      ...TaskStepUpdateParameters.type.modelProperties,
      encodedTaskContent: {
        serializedName: "encodedTaskContent",
        type: {
          name: "String",
        },
      },
      encodedValuesContent: {
        serializedName: "encodedValuesContent",
        type: {
          name: "String",
        },
      },
      values: {
        serializedName: "values",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "SetValue",
            },
          },
        },
      },
    },
  },
};

export const FileTaskStepUpdateParameters: coreClient.CompositeMapper = {
  serializedName: "FileTask",
  type: {
    name: "Composite",
    className: "FileTaskStepUpdateParameters",
    uberParent: "TaskStepUpdateParameters",
    polymorphicDiscriminator:
      TaskStepUpdateParameters.type.polymorphicDiscriminator,
    modelProperties: {
      ...TaskStepUpdateParameters.type.modelProperties,
      taskFilePath: {
        serializedName: "taskFilePath",
        type: {
          name: "String",
        },
      },
      valuesFilePath: {
        serializedName: "valuesFilePath",
        type: {
          name: "String",
        },
      },
      values: {
        serializedName: "values",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "SetValue",
            },
          },
        },
      },
    },
  },
};

export const AgentPool: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "AgentPool",
    modelProperties: {
      ...TrackedResource.type.modelProperties,
      count: {
        serializedName: "properties.count",
        type: {
          name: "Number",
        },
      },
      tier: {
        serializedName: "properties.tier",
        type: {
          name: "String",
        },
      },
      os: {
        serializedName: "properties.os",
        type: {
          name: "String",
        },
      },
      virtualNetworkSubnetResourceId: {
        serializedName: "properties.virtualNetworkSubnetResourceId",
        type: {
          name: "String",
        },
      },
      provisioningState: {
        serializedName: "properties.provisioningState",
        readOnly: true,
        type: {
          name: "String",
        },
      },
    },
  },
};

export const Task: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "Task",
    modelProperties: {
      ...TrackedResource.type.modelProperties,
      identity: {
        serializedName: "identity",
        type: {
          name: "Composite",
          className: "IdentityProperties",
        },
      },
      provisioningState: {
        serializedName: "properties.provisioningState",
        readOnly: true,
        type: {
          name: "String",
        },
      },
      creationDate: {
        serializedName: "properties.creationDate",
        readOnly: true,
        type: {
          name: "DateTime",
        },
      },
      status: {
        serializedName: "properties.status",
        type: {
          name: "String",
        },
      },
      platform: {
        serializedName: "properties.platform",
        type: {
          name: "Composite",
          className: "PlatformProperties",
        },
      },
      agentConfiguration: {
        serializedName: "properties.agentConfiguration",
        type: {
          name: "Composite",
          className: "AgentProperties",
        },
      },
      agentPoolName: {
        serializedName: "properties.agentPoolName",
        type: {
          name: "String",
        },
      },
      timeout: {
        defaultValue: 3600,
        constraints: {
          InclusiveMaximum: 28800,
          InclusiveMinimum: 300,
        },
        serializedName: "properties.timeout",
        type: {
          name: "Number",
        },
      },
      step: {
        serializedName: "properties.step",
        type: {
          name: "Composite",
          className: "TaskStepProperties",
        },
      },
      trigger: {
        serializedName: "properties.trigger",
        type: {
          name: "Composite",
          className: "TriggerProperties",
        },
      },
      credentials: {
        serializedName: "properties.credentials",
        type: {
          name: "Composite",
          className: "Credentials",
        },
      },
      logTemplate: {
        serializedName: "properties.logTemplate",
        type: {
          name: "String",
        },
      },
      isSystemTask: {
        defaultValue: false,
        serializedName: "properties.isSystemTask",
        type: {
          name: "Boolean",
        },
      },
    },
  },
};

export const Run: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "Run",
    modelProperties: {
      ...ProxyResource.type.modelProperties,
      runId: {
        serializedName: "properties.runId",
        type: {
          name: "String",
        },
      },
      status: {
        serializedName: "properties.status",
        type: {
          name: "String",
        },
      },
      lastUpdatedTime: {
        serializedName: "properties.lastUpdatedTime",
        type: {
          name: "DateTime",
        },
      },
      runType: {
        serializedName: "properties.runType",
        type: {
          name: "String",
        },
      },
      agentPoolName: {
        serializedName: "properties.agentPoolName",
        type: {
          name: "String",
        },
      },
      createTime: {
        serializedName: "properties.createTime",
        type: {
          name: "DateTime",
        },
      },
      startTime: {
        serializedName: "properties.startTime",
        type: {
          name: "DateTime",
        },
      },
      finishTime: {
        serializedName: "properties.finishTime",
        type: {
          name: "DateTime",
        },
      },
      outputImages: {
        serializedName: "properties.outputImages",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "ImageDescriptor",
            },
          },
        },
      },
      task: {
        serializedName: "properties.task",
        type: {
          name: "String",
        },
      },
      imageUpdateTrigger: {
        serializedName: "properties.imageUpdateTrigger",
        type: {
          name: "Composite",
          className: "ImageUpdateTrigger",
        },
      },
      sourceTrigger: {
        serializedName: "properties.sourceTrigger",
        type: {
          name: "Composite",
          className: "SourceTriggerDescriptor",
        },
      },
      timerTrigger: {
        serializedName: "properties.timerTrigger",
        type: {
          name: "Composite",
          className: "TimerTriggerDescriptor",
        },
      },
      platform: {
        serializedName: "properties.platform",
        type: {
          name: "Composite",
          className: "PlatformProperties",
        },
      },
      agentConfiguration: {
        serializedName: "properties.agentConfiguration",
        type: {
          name: "Composite",
          className: "AgentProperties",
        },
      },
      sourceRegistryAuth: {
        serializedName: "properties.sourceRegistryAuth",
        type: {
          name: "String",
        },
      },
      customRegistries: {
        serializedName: "properties.customRegistries",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "String",
            },
          },
        },
      },
      runErrorMessage: {
        serializedName: "properties.runErrorMessage",
        readOnly: true,
        type: {
          name: "String",
        },
      },
      updateTriggerToken: {
        serializedName: "properties.updateTriggerToken",
        type: {
          name: "String",
        },
      },
      logArtifact: {
        serializedName: "properties.logArtifact",
        type: {
          name: "Composite",
          className: "ImageDescriptor",
        },
      },
      provisioningState: {
        serializedName: "properties.provisioningState",
        type: {
          name: "String",
        },
      },
      isArchiveEnabled: {
        defaultValue: false,
        serializedName: "properties.isArchiveEnabled",
        type: {
          name: "Boolean",
        },
      },
    },
  },
};

export const TaskRun: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "TaskRun",
    modelProperties: {
      ...ProxyResource.type.modelProperties,
      identity: {
        serializedName: "identity",
        type: {
          name: "Composite",
          className: "IdentityProperties",
        },
      },
      location: {
        serializedName: "location",
        type: {
          name: "String",
        },
      },
      provisioningState: {
        serializedName: "properties.provisioningState",
        readOnly: true,
        type: {
          name: "String",
        },
      },
      runRequest: {
        serializedName: "properties.runRequest",
        type: {
          name: "Composite",
          className: "RunRequest",
        },
      },
      runResult: {
        serializedName: "properties.runResult",
        type: {
          name: "Composite",
          className: "Run",
        },
      },
      forceUpdateTag: {
        serializedName: "properties.forceUpdateTag",
        type: {
          name: "String",
        },
      },
    },
  },
};

export const AgentPoolsCreateHeaders: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "AgentPoolsCreateHeaders",
    modelProperties: {
      azureAsyncOperation: {
        serializedName: "azure-asyncoperation",
        type: {
          name: "String",
        },
      },
      retryAfter: {
        serializedName: "retry-after",
        type: {
          name: "Number",
        },
      },
    },
  },
};

export const AgentPoolsUpdateHeaders: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "AgentPoolsUpdateHeaders",
    modelProperties: {
      azureAsyncOperation: {
        serializedName: "azure-asyncoperation",
        type: {
          name: "String",
        },
      },
      retryAfter: {
        serializedName: "retry-after",
        type: {
          name: "Number",
        },
      },
    },
  },
};

export const AgentPoolsDeleteHeaders: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "AgentPoolsDeleteHeaders",
    modelProperties: {
      location: {
        serializedName: "location",
        type: {
          name: "String",
        },
      },
      retryAfter: {
        serializedName: "retry-after",
        type: {
          name: "Number",
        },
      },
    },
  },
};

export const TaskRunsCreateHeaders: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "TaskRunsCreateHeaders",
    modelProperties: {
      azureAsyncOperation: {
        serializedName: "azure-asyncoperation",
        type: {
          name: "String",
        },
      },
      retryAfter: {
        serializedName: "retry-after",
        type: {
          name: "Number",
        },
      },
    },
  },
};

export const TaskRunsUpdateHeaders: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "TaskRunsUpdateHeaders",
    modelProperties: {
      azureAsyncOperation: {
        serializedName: "azure-asyncoperation",
        type: {
          name: "String",
        },
      },
      retryAfter: {
        serializedName: "retry-after",
        type: {
          name: "Number",
        },
      },
    },
  },
};

export let discriminators = {
  RunRequest: RunRequest,
  TaskStepProperties: TaskStepProperties,
  TaskStepUpdateParameters: TaskStepUpdateParameters,
  "RunRequest.DockerBuildRequest": DockerBuildRequest,
  "RunRequest.EncodedTaskRunRequest": EncodedTaskRunRequest,
  "RunRequest.FileTaskRunRequest": FileTaskRunRequest,
  "RunRequest.TaskRunRequest": TaskRunRequest,
  "TaskStepProperties.Docker": DockerBuildStep,
  "TaskStepProperties.EncodedTask": EncodedTaskStep,
  "TaskStepProperties.FileTask": FileTaskStep,
  "TaskStepUpdateParameters.Docker": DockerBuildStepUpdateParameters,
  "TaskStepUpdateParameters.EncodedTask": EncodedTaskStepUpdateParameters,
  "TaskStepUpdateParameters.FileTask": FileTaskStepUpdateParameters,
};
