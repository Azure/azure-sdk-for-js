// Copyright (c) Microsoft Corporation.
// Licensed under the MIT License.

// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

import { Registries } from "../operationsInterfaces/index.js";
import * as coreClient from "@azure/core-client";
import * as Mappers from "../models/mappers.js";
import * as Parameters from "../models/parameters.js";
import { ContainerRegistryManagementClient } from "../containerRegistryManagementClient.js";
import {
  RunRequestUnion,
  RegistriesScheduleRunOptionalParams,
  RegistriesScheduleRunResponse,
  RegistriesGetBuildSourceUploadUrlOptionalParams,
  RegistriesGetBuildSourceUploadUrlResponse,
} from "../models/index.js";

/** Class containing Registries operations. */
export class RegistriesImpl implements Registries {
  private readonly client: ContainerRegistryManagementClient;

  /**
   * Initialize a new instance of the class Registries class.
   * @param client Reference to the service client
   */
  constructor(client: ContainerRegistryManagementClient) {
    this.client = client;
  }

  /**
   * Schedules a new run based on the request parameters and add it to the run queue.
   * @param resourceGroupName The name of the resource group to which the container registry belongs.
   * @param registryName The name of the container registry.
   * @param runRequest The parameters of a run that needs to scheduled.
   * @param options The options parameters.
   */
  scheduleRun(
    resourceGroupName: string,
    registryName: string,
    runRequest: RunRequestUnion,
    options?: RegistriesScheduleRunOptionalParams,
  ): Promise<RegistriesScheduleRunResponse> {
    return this.client.sendOperationRequest(
      { resourceGroupName, registryName, runRequest, options },
      scheduleRunOperationSpec,
    );
  }

  /**
   * Get the upload location for the user to be able to upload the source.
   * @param resourceGroupName The name of the resource group to which the container registry belongs.
   * @param registryName The name of the container registry.
   * @param options The options parameters.
   */
  getBuildSourceUploadUrl(
    resourceGroupName: string,
    registryName: string,
    options?: RegistriesGetBuildSourceUploadUrlOptionalParams,
  ): Promise<RegistriesGetBuildSourceUploadUrlResponse> {
    return this.client.sendOperationRequest(
      { resourceGroupName, registryName, options },
      getBuildSourceUploadUrlOperationSpec,
    );
  }
}
// Operation Specifications
const serializer = coreClient.createSerializer(Mappers, /* isXml */ false);

const scheduleRunOperationSpec: coreClient.OperationSpec = {
  path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ContainerRegistry/registries/{registryName}/scheduleRun",
  httpMethod: "POST",
  responses: {
    200: {
      bodyMapper: Mappers.Run,
    },
    default: {
      bodyMapper: Mappers.ErrorResponse,
    },
  },
  requestBody: Parameters.runRequest,
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.registryName,
  ],
  headerParameters: [Parameters.accept, Parameters.contentType],
  mediaType: "json",
  serializer,
};
const getBuildSourceUploadUrlOperationSpec: coreClient.OperationSpec = {
  path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ContainerRegistry/registries/{registryName}/listBuildSourceUploadUrl",
  httpMethod: "POST",
  responses: {
    200: {
      bodyMapper: Mappers.SourceUploadDefinition,
    },
    default: {
      bodyMapper: Mappers.ErrorResponse,
    },
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.registryName,
  ],
  headerParameters: [Parameters.accept],
  serializer,
};
