/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */

import * as coreClient from "@azure/core-client";
import * as coreHttps from "@azure/core-rest-pipeline";

/** Acr error response describing why the operation failed */
export interface AcrErrors {
  /** Array of detailed error */
  errors?: AcrErrorInfo[];
}

/** Error information */
export interface AcrErrorInfo {
  /** Error code */
  code?: string;
  /** Error message */
  message?: string;
  /** Error details */
  detail?: any;
}

/** Returns the requested manifest file */
export interface Manifest {
  /** Schema version */
  schemaVersion?: number;
}

/** List of repositories */
export interface Repositories {
  /** Repository names */
  repositories?: string[];
  link?: string;
}

/** Repository attributes */
export interface RepositoryProperties {
  /**
   * Image name
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly name: string;
  /**
   * Image created time
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly createdOn: Date;
  /**
   * Image last update time
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly lastUpdatedOn: Date;
  /**
   * Number of the manifests
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly manifestCount: number;
  /**
   * Number of the tags
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly tagCount: number;
  /**
   * Writeable properties of the resource
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly writeableProperties: ContentProperties;
}

/** Changeable attributes */
export interface ContentProperties {
  /** Delete enabled */
  canDelete?: boolean;
  /** Write enabled */
  canWrite?: boolean;
  /** List enabled */
  canList?: boolean;
  /** Read enabled */
  canRead?: boolean;
}

/** Deleted repository */
export interface DeleteRepositoryResult {
  /**
   * SHA of the deleted image
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly deletedManifests?: string[];
  /**
   * Tag of the deleted image
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly deletedTags?: string[];
}

/** List of tag details */
export interface TagList {
  /** Image name */
  repository: string;
  /** List of tag attribute details */
  tagAttributeBases: TagAttributesBase[];
  link?: string;
}

/** Tag attribute details */
export interface TagAttributesBase {
  /**
   * Tag name
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly name: string;
  /**
   * Tag digest
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly digest: string;
  /**
   * Tag created time
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly createdOn: Date;
  /**
   * Tag last update time
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly lastUpdatedOn: Date;
  /**
   * Writeable properties of the resource
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly writeableProperties: ContentProperties;
}

/** Tag attributes */
export interface ArtifactTagProperties {
  /**
   * Image name
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly repository: string;
  /**
   * Tag name
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly name: string;
  /**
   * Tag digest
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly digest: string;
  /**
   * Tag created time
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly createdOn: Date;
  /**
   * Tag last update time
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly lastUpdatedOn: Date;
  /**
   * Writeable properties of the resource
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly writeableProperties: ContentProperties;
}

/** Manifest attributes */
export interface AcrManifests {
  /** Image name */
  repository?: string;
  /** List of manifests */
  manifests?: ManifestAttributesBase[];
  link?: string;
}

/** Manifest details */
export interface ManifestAttributesBase {
  /**
   * Manifest
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly digest: string;
  /**
   * Image size
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly size?: number;
  /**
   * Created time
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly createdOn?: Date;
  /**
   * Last update time
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly lastUpdatedOn?: Date;
  /**
   * CPU architecture
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly architecture?: ArtifactArchitecture | null;
  /**
   * Operating system
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly operatingSystem?: ArtifactOperatingSystem | null;
  /**
   * List of manifest attributes details
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly references?: ManifestAttributesManifestReferences[];
  /**
   * List of tags
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly tags?: string[];
  /**
   * Writeable properties of the resource
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly writeableProperties?: ContentProperties;
}

/** Manifest attributes details */
export interface ManifestAttributesManifestReferences {
  /**
   * Manifest digest
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly digest: string;
  /**
   * CPU architecture
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly architecture: ArtifactArchitecture;
  /**
   * Operating system
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly operatingSystem: ArtifactOperatingSystem;
}

/** Manifest attributes details */
export interface ArtifactManifestProperties {
  /**
   * Repository name
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly repositoryName?: string;
  /**
   * Manifest
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly digest?: string;
  /**
   * Image size
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly size?: number;
  /**
   * Created time
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly createdOn?: Date;
  /**
   * Last update time
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly lastUpdatedOn?: Date;
  /**
   * CPU architecture
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly architecture?: ArtifactArchitecture | null;
  /**
   * Operating system
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly operatingSystem?: ArtifactOperatingSystem | null;
  /**
   * List of manifest attributes details
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly references?: ManifestAttributesManifestReferences[];
  /**
   * List of tags
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly tags?: string[];
  /**
   * Writeable properties of the resource
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly writeableProperties?: ContentProperties;
}

export interface Paths108HwamOauth2ExchangePostRequestbodyContentApplicationXWwwFormUrlencodedSchema {
  /** Can take a value of access_token */
  grantType: "access_token";
  /** Indicates the name of your Azure container registry. */
  service: string;
  /** AAD access token, mandatory when grant_type is access_token_refresh_token or access_token. */
  aadAccessToken: string;
}

export interface AcrRefreshToken {
  /** The refresh token to be used for generating access tokens */
  refreshToken?: string;
}

export interface PathsV3R3RxOauth2TokenPostRequestbodyContentApplicationXWwwFormUrlencodedSchema {
  /** Grant type is expected to be refresh_token */
  grantType: "refresh_token";
  /** Indicates the name of your Azure container registry. */
  service: string;
  /** Which is expected to be a valid scope, and can be specified more than once for multiple scope requests. You obtained this from the Www-Authenticate response header from the challenge. */
  scope: string;
  /** Must be a valid ACR refresh token */
  acrRefreshToken: string;
}

export interface AcrAccessToken {
  /** The access token for performing authenticated requests */
  accessToken?: string;
}

/** Result of the request to list tags of the image */
export interface RepositoryTags {
  /** Name of the image */
  name?: string;
  /** List of tags */
  tags?: string[];
}

/** Signature of a signed manifest */
export interface ImageSignature {
  /** A JSON web signature */
  header?: Jwk;
  /** A signature for the image manifest, signed by a libtrust private key */
  signature?: string;
  /** The signed protected header */
  protected?: string;
}

/** A JSON web signature */
export interface Jwk {
  /** JSON web key parameter */
  jwk?: JWKHeader;
  /** The algorithm used to sign or encrypt the JWT */
  alg?: string;
}

/** JSON web key parameter */
export interface JWKHeader {
  /** crv value */
  crv?: string;
  /** kid value */
  kid?: string;
  /** kty value */
  kty?: string;
  /** x value */
  x?: string;
  /** y value */
  y?: string;
}

/** A list of unstructured historical data for v1 compatibility */
export interface History {
  /** The raw v1 compatibility information */
  v1Compatibility?: string;
}

/** Image layer information */
export interface FsLayer {
  /** SHA of an image layer */
  blobSum?: string;
}

/** Docker V2 image layer descriptor including config and layers */
export interface Descriptor {
  /** Layer media type */
  mediaType?: string;
  /** Layer size */
  size?: number;
  /** Layer digest */
  digest?: string;
  /** Specifies a list of URIs from which this object may be downloaded. */
  urls?: string[];
  /** Additional information provided through arbitrary metadata. */
  annotations?: Annotations | null;
}

/** Additional information provided through arbitrary metadata. */
export interface Annotations {
  /** Describes unknown properties. The value of an unknown property can be of "any" type. */
  [property: string]: any;
  /** Date and time on which the image was built (string, date-time as defined by https://tools.ietf.org/html/rfc3339#section-5.6) */
  created?: Date;
  /** Contact details of the people or organization responsible for the image. */
  authors?: string;
  /** URL to find more information on the image. */
  url?: string;
  /** URL to get documentation on the image. */
  documentation?: string;
  /** URL to get source code for building the image. */
  source?: string;
  /** Version of the packaged software. The version MAY match a label or tag in the source code repository, may also be Semantic versioning-compatible */
  version?: string;
  /** Source control revision identifier for the packaged software. */
  revision?: string;
  /** Name of the distributing entity, organization or individual. */
  vendor?: string;
  /** License(s) under which contained software is distributed as an SPDX License Expression. */
  licenses?: string;
  /** Name of the reference for a target. */
  name?: string;
  /** Human-readable title of the image */
  title?: string;
  /** Human-readable description of the software packaged in the image */
  description?: string;
}

/** Tag */
export interface TagAttributesTag {
  /** SignatureRecord value */
  signatureRecord?: string;
}

/** List of manifest attributes */
export interface ManifestAttributesManifest {
  /** List of manifest attributes details */
  references?: ManifestAttributesManifestReferences[];
  /** Quarantine tag name */
  quarantineTag?: string;
}

/** Changeable attributes */
export interface ManifestChangeableAttributes {
  /** Delete enabled */
  deleteEnabled?: boolean;
  /** Write enabled */
  writeEnabled?: boolean;
  /** List enabled */
  listEnabled?: boolean;
  /** Read enabled */
  readEnabled?: boolean;
  /** Quarantine state */
  quarantineState?: string;
  /** Quarantine details */
  quarantineDetails?: string;
}

export interface ManifestListAttributes {
  /** The MIME type of the referenced object. This will generally be application/vnd.docker.image.manifest.v2+json, but it could also be application/vnd.docker.image.manifest.v1+json */
  mediaType?: string;
  /** The size in bytes of the object */
  size?: number;
  /** The digest of the content, as defined by the Registry V2 HTTP API Specification */
  digest?: string;
  /** The platform object describes the platform which the image in the manifest runs on. A full list of valid operating system and architecture values are listed in the Go language documentation for $GOOS and $GOARCH */
  platform?: Platform;
}

/** The platform object describes the platform which the image in the manifest runs on. A full list of valid operating system and architecture values are listed in the Go language documentation for $GOOS and $GOARCH */
export interface Platform {
  /** Specifies the CPU architecture, for example amd64 or ppc64le. */
  architecture?: string;
  /** The os field specifies the operating system, for example linux or windows. */
  os?: string;
  /** The optional os.version field specifies the operating system version, for example 10.0.10586. */
  osVersion?: string;
  /** The optional os.features field specifies an array of strings, each listing a required OS feature (for example on Windows win32k */
  osFeatures?: string[];
  /** The optional variant field specifies a variant of the CPU, for example armv6l to specify a particular CPU variant of the ARM CPU. */
  variant?: string;
  /** The optional features field specifies an array of strings, each listing a required CPU feature (for example sse4 or aes */
  features?: string[];
}

/** Returns the requested manifest file */
export type ManifestWrapper = Manifest & {
  /** Media type for this Manifest */
  mediaType?: string;
  /** (ManifestList, OCIIndex) List of V2 image layer information */
  manifests?: ManifestListAttributes[];
  /** (V2, OCI) Image config descriptor */
  config?: Descriptor;
  /** (V2, OCI) List of V2 image layer information */
  layers?: Descriptor[];
  /** (OCI, OCIIndex) Additional metadata */
  annotations?: Annotations | null;
  /** (V1) CPU architecture */
  architecture?: string;
  /** (V1) Image name */
  name?: string;
  /** (V1) Image tag */
  tag?: string;
  /** (V1) List of layer information */
  fsLayers?: FsLayer[];
  /** (V1) Image history */
  history?: History[];
  /** (V1) Image signature */
  signatures?: ImageSignature[];
};

/** Returns the requested Docker multi-arch-manifest file */
export type ManifestList = Manifest & {
  /** Media type for this Manifest */
  mediaType?: string;
  /** List of V2 image layer information */
  manifests?: ManifestListAttributes[];
};

/** Returns the requested Docker V2 Manifest file */
export type V2Manifest = Manifest & {
  /** Media type for this Manifest */
  mediaType?: string;
  /** V2 image config descriptor */
  config?: Descriptor;
  /** List of V2 image layer information */
  layers?: Descriptor[];
};

/** Returns the requested OCI Manifest file */
export type OCIManifest = Manifest & {
  /** V2 image config descriptor */
  config?: Descriptor;
  /** List of V2 image layer information */
  layers?: Descriptor[];
  /** Additional information provided through arbitrary metadata. */
  annotations?: Annotations | null;
};

/** Returns the requested OCI index file */
export type OCIIndex = Manifest & {
  /** List of OCI image layer information */
  manifests?: ManifestListAttributes[];
  /** Additional information provided through arbitrary metadata. */
  annotations?: Annotations | null;
};

/** Returns the requested V1 manifest file */
export type V1Manifest = Manifest & {
  /** CPU architecture */
  architecture?: string;
  /** Image name */
  name?: string;
  /** Image tag */
  tag?: string;
  /** List of layer information */
  fsLayers?: FsLayer[];
  /** Image history */
  history?: History[];
  /** Image signature */
  signatures?: ImageSignature[];
};

/** Defines headers for ContainerRegistry_createManifest operation. */
export interface ContainerRegistryCreateManifestHeaders {
  /** Identifies the docker upload uuid for the current request. */
  dockerContentDigest?: string;
  /** The canonical location url of the uploaded manifest. */
  location?: string;
  /** The length of the requested blob content. */
  contentLength?: number;
}

/** Defines headers for ContainerRegistry_getRepositories operation. */
export interface ContainerRegistryGetRepositoriesHeaders {
  /** next paginated result */
  link?: string;
}

/** Defines headers for ContainerRegistry_getTags operation. */
export interface ContainerRegistryGetTagsHeaders {
  /** next paginated result */
  link?: string;
}

/** Defines headers for ContainerRegistry_getManifests operation. */
export interface ContainerRegistryGetManifestsHeaders {
  /** next paginated result */
  link?: string;
}

/** Defines headers for ContainerRegistry_getRepositoriesNext operation. */
export interface ContainerRegistryGetRepositoriesNextHeaders {
  /** next paginated result */
  link?: string;
}

/** Defines headers for ContainerRegistry_getTagsNext operation. */
export interface ContainerRegistryGetTagsNextHeaders {
  /** next paginated result */
  link?: string;
}

/** Defines headers for ContainerRegistry_getManifestsNext operation. */
export interface ContainerRegistryGetManifestsNextHeaders {
  /** next paginated result */
  link?: string;
}

/** Defines headers for ContainerRegistryBlob_getBlob operation. */
export interface ContainerRegistryBlobGetBlobHeaders {
  /** The length of the requested blob content. */
  contentLength?: number;
  /** Digest of the targeted content for the request. */
  dockerContentDigest?: string;
}

/** Defines headers for ContainerRegistryBlob_checkBlobExists operation. */
export interface ContainerRegistryBlobCheckBlobExistsHeaders {
  /** The length of the requested blob content. */
  contentLength?: number;
  /** Digest of the targeted content for the request. */
  dockerContentDigest?: string;
}

/** Defines headers for ContainerRegistryBlob_deleteBlob operation. */
export interface ContainerRegistryBlobDeleteBlobHeaders {
  /** Digest of the targeted content for the request. */
  dockerContentDigest?: string;
}

/** Defines headers for ContainerRegistryBlob_mountBlob operation. */
export interface ContainerRegistryBlobMountBlobHeaders {
  /** Provided location for blob */
  location?: string;
  /** Identifies the docker upload uuid for the current request. */
  dockerUploadUuid?: string;
  /** Digest of the targeted content for the request. */
  dockerContentDigest?: string;
}

/** Defines headers for ContainerRegistryBlob_getUploadStatus operation. */
export interface ContainerRegistryBlobGetUploadStatusHeaders {
  /** Range indicating the current progress of the upload. */
  range?: string;
  /** Identifies the docker upload uuid for the current request. */
  dockerUploadUuid?: string;
}

/** Defines headers for ContainerRegistryBlob_uploadChunk operation. */
export interface ContainerRegistryBlobUploadChunkHeaders {
  /** Provided location for blob */
  location?: string;
  /** Range indicating the current progress of the upload. */
  range?: string;
  /** Identifies the docker upload uuid for the current request. */
  dockerUploadUuid?: string;
}

/** Defines headers for ContainerRegistryBlob_completeUpload operation. */
export interface ContainerRegistryBlobCompleteUploadHeaders {
  /** Provided location for blob */
  location?: string;
  /** Range indicating the current progress of the upload. */
  range?: string;
  /** Digest of the targeted content for the request. */
  dockerContentDigest?: string;
}

/** Defines headers for ContainerRegistryBlob_startUpload operation. */
export interface ContainerRegistryBlobStartUploadHeaders {
  /** Provided location for blob */
  location?: string;
  /** Range indicating the current progress of the upload. */
  range?: string;
  /** Identifies the docker upload uuid for the current request. */
  dockerUploadUuid?: string;
}

/** Defines headers for ContainerRegistryBlob_getChunk operation. */
export interface ContainerRegistryBlobGetChunkHeaders {
  /** The length of the requested blob content. */
  contentLength?: number;
  /** Content range of blob chunk. */
  contentRange?: string;
}

/** Defines headers for ContainerRegistryBlob_checkChunkExists operation. */
export interface ContainerRegistryBlobCheckChunkExistsHeaders {
  /** The length of the requested blob content. */
  contentLength?: number;
  /** Content range of blob chunk. */
  contentRange?: string;
}

/** Known values of {@link ArtifactArchitecture} that the service accepts. */
export const enum KnownArtifactArchitecture {
  I386 = "386",
  Amd64 = "amd64",
  Arm = "arm",
  Arm64 = "arm64",
  Mips = "mips",
  MipsLe = "mipsle",
  Mips64 = "mips64",
  Mips64Le = "mips64le",
  Ppc64 = "ppc64",
  Ppc64Le = "ppc64le",
  RiscV64 = "riscv64",
  S390X = "s390x",
  Wasm = "wasm"
}

/**
 * Defines values for ArtifactArchitecture. \
 * {@link KnownArtifactArchitecture} can be used interchangeably with ArtifactArchitecture,
 *  this enum contains the known values that the service supports.
 * ### Know values supported by the service
 * **386** \
 * **amd64** \
 * **arm** \
 * **arm64** \
 * **mips** \
 * **mipsle** \
 * **mips64** \
 * **mips64le** \
 * **ppc64** \
 * **ppc64le** \
 * **riscv64** \
 * **s390x** \
 * **wasm**
 */
export type ArtifactArchitecture = string;

/** Known values of {@link ArtifactOperatingSystem} that the service accepts. */
export const enum KnownArtifactOperatingSystem {
  Aix = "aix",
  Android = "android",
  Darwin = "darwin",
  Dragonfly = "dragonfly",
  FreeBsd = "freebsd",
  Illumos = "illumos",
  IOs = "ios",
  Js = "js",
  Linux = "linux",
  NetBsd = "netbsd",
  OpenBsd = "openbsd",
  Plan9 = "plan9",
  Solaris = "solaris",
  Windows = "windows"
}

/**
 * Defines values for ArtifactOperatingSystem. \
 * {@link KnownArtifactOperatingSystem} can be used interchangeably with ArtifactOperatingSystem,
 *  this enum contains the known values that the service supports.
 * ### Know values supported by the service
 * **aix** \
 * **android** \
 * **darwin** \
 * **dragonfly** \
 * **freebsd** \
 * **illumos** \
 * **ios** \
 * **js** \
 * **linux** \
 * **netbsd** \
 * **openbsd** \
 * **plan9** \
 * **solaris** \
 * **windows**
 */
export type ArtifactOperatingSystem = string;
/** Defines values for TagOrderBy. */
export type TagOrderBy = "none" | "timedesc" | "timeasc";
/** Defines values for ManifestOrderBy. */
export type ManifestOrderBy = "none" | "timedesc" | "timeasc";

/** Optional parameters. */
export interface ContainerRegistryGetManifestOptionalParams
  extends coreClient.OperationOptions {
  /** Accept header string delimited by comma. For example, application/vnd.docker.distribution.manifest.v2+json */
  accept?: string;
}

/** Contains response data for the getManifest operation. */
export type ContainerRegistryGetManifestResponse = Manifest;

/** Contains response data for the createManifest operation. */
export type ContainerRegistryCreateManifestResponse = ContainerRegistryCreateManifestHeaders & {
  /** The parsed response body. */
  body: any;
};

/** Optional parameters. */
export interface ContainerRegistryGetRepositoriesOptionalParams
  extends coreClient.OperationOptions {
  /** Query parameter for the last item in previous query. Result set will include values lexically after last. */
  last?: string;
  /** query parameter for max number of items */
  n?: number;
}

/** Contains response data for the getRepositories operation. */
export type ContainerRegistryGetRepositoriesResponse = ContainerRegistryGetRepositoriesHeaders &
  Repositories;

/** Contains response data for the getProperties operation. */
export type ContainerRegistryGetPropertiesResponse = RepositoryProperties;

/** Contains response data for the deleteRepository operation. */
export type ContainerRegistryDeleteRepositoryResponse = DeleteRepositoryResult;

/** Optional parameters. */
export interface ContainerRegistrySetPropertiesOptionalParams
  extends coreClient.OperationOptions {
  /** Repository attribute value */
  value?: ContentProperties;
}

/** Contains response data for the setProperties operation. */
export type ContainerRegistrySetPropertiesResponse = RepositoryProperties;

/** Optional parameters. */
export interface ContainerRegistryGetTagsOptionalParams
  extends coreClient.OperationOptions {
  /** Query parameter for the last item in previous query. Result set will include values lexically after last. */
  last?: string;
  /** query parameter for max number of items */
  n?: number;
  /** orderby query parameter */
  orderby?: string;
  /** filter by digest */
  digest?: string;
}

/** Contains response data for the getTags operation. */
export type ContainerRegistryGetTagsResponse = ContainerRegistryGetTagsHeaders &
  TagList;

/** Contains response data for the getTagProperties operation. */
export type ContainerRegistryGetTagPropertiesResponse = ArtifactTagProperties;

/** Optional parameters. */
export interface ContainerRegistryUpdateTagAttributesOptionalParams
  extends coreClient.OperationOptions {
  /** Repository attribute value */
  value?: ContentProperties;
}

/** Contains response data for the updateTagAttributes operation. */
export type ContainerRegistryUpdateTagAttributesResponse = ArtifactTagProperties;

/** Optional parameters. */
export interface ContainerRegistryGetManifestsOptionalParams
  extends coreClient.OperationOptions {
  /** Query parameter for the last item in previous query. Result set will include values lexically after last. */
  last?: string;
  /** query parameter for max number of items */
  n?: number;
  /** orderby query parameter */
  orderby?: string;
}

/** Contains response data for the getManifests operation. */
export type ContainerRegistryGetManifestsResponse = ContainerRegistryGetManifestsHeaders &
  AcrManifests;

/** Contains response data for the getManifestProperties operation. */
export type ContainerRegistryGetManifestPropertiesResponse = ArtifactManifestProperties;

/** Optional parameters. */
export interface ContainerRegistryUpdateManifestPropertiesOptionalParams
  extends coreClient.OperationOptions {
  /** Repository attribute value */
  value?: ContentProperties;
}

/** Contains response data for the updateManifestProperties operation. */
export type ContainerRegistryUpdateManifestPropertiesResponse = ArtifactManifestProperties;

/** Optional parameters. */
export interface ContainerRegistryGetRepositoriesNextOptionalParams
  extends coreClient.OperationOptions {
  /** Query parameter for the last item in previous query. Result set will include values lexically after last. */
  last?: string;
  /** query parameter for max number of items */
  n?: number;
}

/** Contains response data for the getRepositoriesNext operation. */
export type ContainerRegistryGetRepositoriesNextResponse = ContainerRegistryGetRepositoriesNextHeaders &
  Repositories;

/** Optional parameters. */
export interface ContainerRegistryGetTagsNextOptionalParams
  extends coreClient.OperationOptions {
  /** Query parameter for the last item in previous query. Result set will include values lexically after last. */
  last?: string;
  /** query parameter for max number of items */
  n?: number;
  /** orderby query parameter */
  orderby?: string;
  /** filter by digest */
  digest?: string;
}

/** Contains response data for the getTagsNext operation. */
export type ContainerRegistryGetTagsNextResponse = ContainerRegistryGetTagsNextHeaders &
  TagList;

/** Optional parameters. */
export interface ContainerRegistryGetManifestsNextOptionalParams
  extends coreClient.OperationOptions {
  /** Query parameter for the last item in previous query. Result set will include values lexically after last. */
  last?: string;
  /** query parameter for max number of items */
  n?: number;
  /** orderby query parameter */
  orderby?: string;
}

/** Contains response data for the getManifestsNext operation. */
export type ContainerRegistryGetManifestsNextResponse = ContainerRegistryGetManifestsNextHeaders &
  AcrManifests;

/** Contains response data for the getBlob operation. */
export type ContainerRegistryBlobGetBlobResponse = ContainerRegistryBlobGetBlobHeaders & {
  /**
   * BROWSER ONLY
   *
   * The response body as a browser Blob.
   * Always `undefined` in node.js.
   */
  blobBody?: Promise<Blob>;
  /**
   * NODEJS ONLY
   *
   * The response body as a node.js Readable stream.
   * Always `undefined` in the browser.
   */
  readableStreamBody?: NodeJS.ReadableStream;
};

/** Contains response data for the checkBlobExists operation. */
export type ContainerRegistryBlobCheckBlobExistsResponse = ContainerRegistryBlobCheckBlobExistsHeaders;

/** Contains response data for the deleteBlob operation. */
export type ContainerRegistryBlobDeleteBlobResponse = ContainerRegistryBlobDeleteBlobHeaders & {
  /**
   * BROWSER ONLY
   *
   * The response body as a browser Blob.
   * Always `undefined` in node.js.
   */
  blobBody?: Promise<Blob>;
  /**
   * NODEJS ONLY
   *
   * The response body as a node.js Readable stream.
   * Always `undefined` in the browser.
   */
  readableStreamBody?: NodeJS.ReadableStream;
};

/** Contains response data for the mountBlob operation. */
export type ContainerRegistryBlobMountBlobResponse = ContainerRegistryBlobMountBlobHeaders;

/** Contains response data for the getUploadStatus operation. */
export type ContainerRegistryBlobGetUploadStatusResponse = ContainerRegistryBlobGetUploadStatusHeaders;

/** Contains response data for the uploadChunk operation. */
export type ContainerRegistryBlobUploadChunkResponse = ContainerRegistryBlobUploadChunkHeaders;

/** Optional parameters. */
export interface ContainerRegistryBlobCompleteUploadOptionalParams
  extends coreClient.OperationOptions {
  /** Optional raw data of blob */
  value?: coreHttps.RequestBodyType;
}

/** Contains response data for the completeUpload operation. */
export type ContainerRegistryBlobCompleteUploadResponse = ContainerRegistryBlobCompleteUploadHeaders;

/** Contains response data for the startUpload operation. */
export type ContainerRegistryBlobStartUploadResponse = ContainerRegistryBlobStartUploadHeaders;

/** Contains response data for the getChunk operation. */
export type ContainerRegistryBlobGetChunkResponse = ContainerRegistryBlobGetChunkHeaders & {
  /**
   * BROWSER ONLY
   *
   * The response body as a browser Blob.
   * Always `undefined` in node.js.
   */
  blobBody?: Promise<Blob>;
  /**
   * NODEJS ONLY
   *
   * The response body as a node.js Readable stream.
   * Always `undefined` in the browser.
   */
  readableStreamBody?: NodeJS.ReadableStream;
};

/** Contains response data for the checkChunkExists operation. */
export type ContainerRegistryBlobCheckChunkExistsResponse = ContainerRegistryBlobCheckChunkExistsHeaders;

/** Optional parameters. */
export interface AuthenticationExchangeAadAccessTokenForAcrRefreshTokenOptionalParams
  extends coreClient.OperationOptions {
  aadAccessToken?: Paths108HwamOauth2ExchangePostRequestbodyContentApplicationXWwwFormUrlencodedSchema;
}

/** Contains response data for the exchangeAadAccessTokenForAcrRefreshToken operation. */
export type AuthenticationExchangeAadAccessTokenForAcrRefreshTokenResponse = AcrRefreshToken;

/** Optional parameters. */
export interface AuthenticationExchangeAcrRefreshTokenForAcrAccessTokenOptionalParams
  extends coreClient.OperationOptions {
  acrRefreshToken?: PathsV3R3RxOauth2TokenPostRequestbodyContentApplicationXWwwFormUrlencodedSchema;
}

/** Contains response data for the exchangeAcrRefreshTokenForAcrAccessToken operation. */
export type AuthenticationExchangeAcrRefreshTokenForAcrAccessTokenResponse = AcrAccessToken;

/** Optional parameters. */
export interface GeneratedClientOptionalParams
  extends coreClient.ServiceClientOptions {
  /** Overrides client endpoint. */
  endpoint?: string;
}
