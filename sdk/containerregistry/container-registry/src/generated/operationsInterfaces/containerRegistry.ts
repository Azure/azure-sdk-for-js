/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */

import * as coreRestPipeline from "@azure/core-rest-pipeline";
import {
  ContainerRegistryCheckDockerV2SupportOptionalParams,
  ContainerRegistryGetManifestOptionalParams,
  ContainerRegistryGetManifestResponse,
  ContainerRegistryCreateManifestOptionalParams,
  ContainerRegistryCreateManifestResponse,
  ContainerRegistryDeleteManifestOptionalParams,
  ContainerRegistryGetRepositoriesOptionalParams,
  ContainerRegistryGetRepositoriesResponse,
  ContainerRegistryGetPropertiesOptionalParams,
  ContainerRegistryGetPropertiesResponse,
  ContainerRegistryDeleteRepositoryOptionalParams,
  ContainerRegistryUpdatePropertiesOptionalParams,
  ContainerRegistryUpdatePropertiesResponse,
  ContainerRegistryGetTagsOptionalParams,
  ContainerRegistryGetTagsResponse,
  ContainerRegistryGetTagPropertiesOptionalParams,
  ContainerRegistryGetTagPropertiesResponse,
  ContainerRegistryUpdateTagAttributesOptionalParams,
  ContainerRegistryUpdateTagAttributesResponse,
  ContainerRegistryDeleteTagOptionalParams,
  ContainerRegistryGetManifestsOptionalParams,
  ContainerRegistryGetManifestsResponse,
  ContainerRegistryGetManifestPropertiesOptionalParams,
  ContainerRegistryGetManifestPropertiesResponse,
  ContainerRegistryUpdateManifestPropertiesOptionalParams,
  ContainerRegistryUpdateManifestPropertiesResponse,
  ContainerRegistryGetRepositoriesNextOptionalParams,
  ContainerRegistryGetRepositoriesNextResponse,
  ContainerRegistryGetTagsNextOptionalParams,
  ContainerRegistryGetTagsNextResponse,
  ContainerRegistryGetManifestsNextOptionalParams,
  ContainerRegistryGetManifestsNextResponse
} from "../models";

/** Interface representing a ContainerRegistry. */
export interface ContainerRegistry {
  /**
   * Tells whether this Docker Registry instance supports Docker Registry HTTP API v2
   * @param options The options parameters.
   */
  checkDockerV2Support(
    options?: ContainerRegistryCheckDockerV2SupportOptionalParams
  ): Promise<void>;
  /**
   * Get the manifest identified by `name` and `reference` where `reference` can be a tag or digest.
   * @param name Name of the image (including the namespace)
   * @param reference A tag or a digest, pointing to a specific image
   * @param options The options parameters.
   */
  getManifest(
    name: string,
    reference: string,
    options?: ContainerRegistryGetManifestOptionalParams
  ): Promise<ContainerRegistryGetManifestResponse>;
  /**
   * Put the manifest identified by `name` and `reference` where `reference` can be a tag or digest.
   * @param name Name of the image (including the namespace)
   * @param reference A tag or a digest, pointing to a specific image
   * @param payload Manifest body, can take v1 or v2 values depending on accept header
   * @param options The options parameters.
   */
  createManifest(
    name: string,
    reference: string,
    payload: coreRestPipeline.RequestBodyType,
    options?: ContainerRegistryCreateManifestOptionalParams
  ): Promise<ContainerRegistryCreateManifestResponse>;
  /**
   * Delete the manifest identified by `name` and `reference`. Note that a manifest can _only_ be deleted
   * by `digest`.
   * @param name Name of the image (including the namespace)
   * @param reference Digest of a BLOB
   * @param options The options parameters.
   */
  deleteManifest(
    name: string,
    reference: string,
    options?: ContainerRegistryDeleteManifestOptionalParams
  ): Promise<void>;
  /**
   * List repositories
   * @param options The options parameters.
   */
  getRepositories(
    options?: ContainerRegistryGetRepositoriesOptionalParams
  ): Promise<ContainerRegistryGetRepositoriesResponse>;
  /**
   * Get repository attributes
   * @param name Name of the image (including the namespace)
   * @param options The options parameters.
   */
  getProperties(
    name: string,
    options?: ContainerRegistryGetPropertiesOptionalParams
  ): Promise<ContainerRegistryGetPropertiesResponse>;
  /**
   * Delete the repository identified by `name`
   * @param name Name of the image (including the namespace)
   * @param options The options parameters.
   */
  deleteRepository(
    name: string,
    options?: ContainerRegistryDeleteRepositoryOptionalParams
  ): Promise<void>;
  /**
   * Update the attribute identified by `name` where `reference` is the name of the repository.
   * @param name Name of the image (including the namespace)
   * @param options The options parameters.
   */
  updateProperties(
    name: string,
    options?: ContainerRegistryUpdatePropertiesOptionalParams
  ): Promise<ContainerRegistryUpdatePropertiesResponse>;
  /**
   * List tags of a repository
   * @param name Name of the image (including the namespace)
   * @param options The options parameters.
   */
  getTags(
    name: string,
    options?: ContainerRegistryGetTagsOptionalParams
  ): Promise<ContainerRegistryGetTagsResponse>;
  /**
   * Get tag attributes by tag
   * @param name Name of the image (including the namespace)
   * @param reference Tag name
   * @param options The options parameters.
   */
  getTagProperties(
    name: string,
    reference: string,
    options?: ContainerRegistryGetTagPropertiesOptionalParams
  ): Promise<ContainerRegistryGetTagPropertiesResponse>;
  /**
   * Update tag attributes
   * @param name Name of the image (including the namespace)
   * @param reference Tag name
   * @param options The options parameters.
   */
  updateTagAttributes(
    name: string,
    reference: string,
    options?: ContainerRegistryUpdateTagAttributesOptionalParams
  ): Promise<ContainerRegistryUpdateTagAttributesResponse>;
  /**
   * Delete tag
   * @param name Name of the image (including the namespace)
   * @param reference Tag name
   * @param options The options parameters.
   */
  deleteTag(
    name: string,
    reference: string,
    options?: ContainerRegistryDeleteTagOptionalParams
  ): Promise<void>;
  /**
   * List manifests of a repository
   * @param name Name of the image (including the namespace)
   * @param options The options parameters.
   */
  getManifests(
    name: string,
    options?: ContainerRegistryGetManifestsOptionalParams
  ): Promise<ContainerRegistryGetManifestsResponse>;
  /**
   * Get manifest attributes
   * @param name Name of the image (including the namespace)
   * @param digest Digest of a BLOB
   * @param options The options parameters.
   */
  getManifestProperties(
    name: string,
    digest: string,
    options?: ContainerRegistryGetManifestPropertiesOptionalParams
  ): Promise<ContainerRegistryGetManifestPropertiesResponse>;
  /**
   * Update properties of a manifest
   * @param name Name of the image (including the namespace)
   * @param digest Digest of a BLOB
   * @param options The options parameters.
   */
  updateManifestProperties(
    name: string,
    digest: string,
    options?: ContainerRegistryUpdateManifestPropertiesOptionalParams
  ): Promise<ContainerRegistryUpdateManifestPropertiesResponse>;
  /**
   * GetRepositoriesNext
   * @param nextLink The nextLink from the previous successful call to the GetRepositories method.
   * @param options The options parameters.
   */
  getRepositoriesNext(
    nextLink: string,
    options?: ContainerRegistryGetRepositoriesNextOptionalParams
  ): Promise<ContainerRegistryGetRepositoriesNextResponse>;
  /**
   * GetTagsNext
   * @param name Name of the image (including the namespace)
   * @param nextLink The nextLink from the previous successful call to the GetTags method.
   * @param options The options parameters.
   */
  getTagsNext(
    name: string,
    nextLink: string,
    options?: ContainerRegistryGetTagsNextOptionalParams
  ): Promise<ContainerRegistryGetTagsNextResponse>;
  /**
   * GetManifestsNext
   * @param name Name of the image (including the namespace)
   * @param nextLink The nextLink from the previous successful call to the GetManifests method.
   * @param options The options parameters.
   */
  getManifestsNext(
    name: string,
    nextLink: string,
    options?: ContainerRegistryGetManifestsNextOptionalParams
  ): Promise<ContainerRegistryGetManifestsNextResponse>;
}
