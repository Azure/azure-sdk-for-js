/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */

import * as coreRestPipeline from "@azure/core-rest-pipeline";
import {
  ContainerRegistryBlobGetBlobOptionalParams,
  ContainerRegistryBlobGetBlobResponse,
  ContainerRegistryBlobCheckBlobExistsOptionalParams,
  ContainerRegistryBlobCheckBlobExistsResponse,
  ContainerRegistryBlobDeleteBlobOptionalParams,
  ContainerRegistryBlobDeleteBlobResponse,
  ContainerRegistryBlobMountBlobOptionalParams,
  ContainerRegistryBlobMountBlobResponse,
  ContainerRegistryBlobGetUploadStatusOptionalParams,
  ContainerRegistryBlobGetUploadStatusResponse,
  ContainerRegistryBlobUploadChunkOptionalParams,
  ContainerRegistryBlobUploadChunkResponse,
  ContainerRegistryBlobCompleteUploadOptionalParams,
  ContainerRegistryBlobCompleteUploadResponse,
  ContainerRegistryBlobCancelUploadOptionalParams,
  ContainerRegistryBlobStartUploadOptionalParams,
  ContainerRegistryBlobStartUploadResponse,
  ContainerRegistryBlobGetChunkOptionalParams,
  ContainerRegistryBlobGetChunkResponse,
  ContainerRegistryBlobCheckChunkExistsOptionalParams,
  ContainerRegistryBlobCheckChunkExistsResponse
} from "../models";

/** Interface representing a ContainerRegistryBlob. */
export interface ContainerRegistryBlob {
  /**
   * Retrieve the blob from the registry identified by digest.
   * @param name Name of the image (including the namespace)
   * @param digest Digest of a BLOB
   * @param options The options parameters.
   */
  getBlob(
    name: string,
    digest: string,
    options?: ContainerRegistryBlobGetBlobOptionalParams
  ): Promise<ContainerRegistryBlobGetBlobResponse>;
  /**
   * Same as GET, except only the headers are returned.
   * @param name Name of the image (including the namespace)
   * @param digest Digest of a BLOB
   * @param options The options parameters.
   */
  checkBlobExists(
    name: string,
    digest: string,
    options?: ContainerRegistryBlobCheckBlobExistsOptionalParams
  ): Promise<ContainerRegistryBlobCheckBlobExistsResponse>;
  /**
   * Removes an already uploaded blob.
   * @param name Name of the image (including the namespace)
   * @param digest Digest of a BLOB
   * @param options The options parameters.
   */
  deleteBlob(
    name: string,
    digest: string,
    options?: ContainerRegistryBlobDeleteBlobOptionalParams
  ): Promise<ContainerRegistryBlobDeleteBlobResponse>;
  /**
   * Mount a blob identified by the `mount` parameter from another repository.
   * @param name Name of the image (including the namespace)
   * @param mount Digest of blob to mount from the source repository.
   * @param fromParam Name of the source repository.
   * @param options The options parameters.
   */
  mountBlob(
    name: string,
    mount: string,
    fromParam: string,
    options?: ContainerRegistryBlobMountBlobOptionalParams
  ): Promise<ContainerRegistryBlobMountBlobResponse>;
  /**
   * Retrieve status of upload identified by uuid. The primary purpose of this endpoint is to resolve the
   * current status of a resumable upload.
   * @param nextLink Link acquired from upload start or previous chunk. Note, do not include initial /
   *                 (must do substring(1) )
   * @param options The options parameters.
   */
  getUploadStatus(
    nextLink: string,
    options?: ContainerRegistryBlobGetUploadStatusOptionalParams
  ): Promise<ContainerRegistryBlobGetUploadStatusResponse>;
  /**
   * Upload a stream of data without completing the upload.
   * @param nextLink Link acquired from upload start or previous chunk. Note, do not include initial /
   *                 (must do substring(1) )
   * @param value Raw data of blob
   * @param options The options parameters.
   */
  uploadChunk(
    nextLink: string,
    value: coreRestPipeline.RequestBodyType,
    options?: ContainerRegistryBlobUploadChunkOptionalParams
  ): Promise<ContainerRegistryBlobUploadChunkResponse>;
  /**
   * Complete the upload, providing all the data in the body, if necessary. A request without a body will
   * just complete the upload with previously uploaded content.
   * @param digest Digest of a BLOB
   * @param nextLink Link acquired from upload start or previous chunk. Note, do not include initial /
   *                 (must do substring(1) )
   * @param options The options parameters.
   */
  completeUpload(
    digest: string,
    nextLink: string,
    options?: ContainerRegistryBlobCompleteUploadOptionalParams
  ): Promise<ContainerRegistryBlobCompleteUploadResponse>;
  /**
   * Cancel outstanding upload processes, releasing associated resources. If this is not called, the
   * unfinished uploads will eventually timeout.
   * @param nextLink Link acquired from upload start or previous chunk. Note, do not include initial /
   *                 (must do substring(1) )
   * @param options The options parameters.
   */
  cancelUpload(
    nextLink: string,
    options?: ContainerRegistryBlobCancelUploadOptionalParams
  ): Promise<void>;
  /**
   * Initiate a resumable blob upload with an empty request body.
   * @param name Name of the image (including the namespace)
   * @param options The options parameters.
   */
  startUpload(
    name: string,
    options?: ContainerRegistryBlobStartUploadOptionalParams
  ): Promise<ContainerRegistryBlobStartUploadResponse>;
  /**
   * Retrieve the blob from the registry identified by `digest`. This endpoint may also support RFC7233
   * compliant range requests. Support can be detected by issuing a HEAD request. If the header
   * `Accept-Range: bytes` is returned, range requests can be used to fetch partial content.
   * @param name Name of the image (including the namespace)
   * @param digest Digest of a BLOB
   * @param range Format : bytes=<start>-<end>,  HTTP Range header specifying blob chunk.
   * @param options The options parameters.
   */
  getChunk(
    name: string,
    digest: string,
    range: string,
    options?: ContainerRegistryBlobGetChunkOptionalParams
  ): Promise<ContainerRegistryBlobGetChunkResponse>;
  /**
   * Same as GET, except only the headers are returned.
   * @param name Name of the image (including the namespace)
   * @param digest Digest of a BLOB
   * @param range Format : bytes=<start>-<end>,  HTTP Range header specifying blob chunk.
   * @param options The options parameters.
   */
  checkChunkExists(
    name: string,
    digest: string,
    range: string,
    options?: ContainerRegistryBlobCheckChunkExistsOptionalParams
  ): Promise<ContainerRegistryBlobCheckChunkExistsResponse>;
}
