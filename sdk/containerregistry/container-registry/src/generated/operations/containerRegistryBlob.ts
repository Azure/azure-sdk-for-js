/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */

import { ContainerRegistryBlob } from "../operationsInterfaces";
import * as coreClient from "@azure/core-client";
import * as coreRestPipeline from "@azure/core-rest-pipeline";
import * as Mappers from "../models/mappers";
import * as Parameters from "../models/parameters";
import { GeneratedClient } from "../generatedClient";
import {
  ContainerRegistryBlobGetBlobOptionalParams,
  ContainerRegistryBlobGetBlobResponse,
  ContainerRegistryBlobCheckBlobExistsOptionalParams,
  ContainerRegistryBlobCheckBlobExistsResponse,
  ContainerRegistryBlobDeleteBlobOptionalParams,
  ContainerRegistryBlobDeleteBlobResponse,
  ContainerRegistryBlobMountBlobOptionalParams,
  ContainerRegistryBlobMountBlobResponse,
  ContainerRegistryBlobGetUploadStatusOptionalParams,
  ContainerRegistryBlobGetUploadStatusResponse,
  ContainerRegistryBlobUploadChunkOptionalParams,
  ContainerRegistryBlobUploadChunkResponse,
  ContainerRegistryBlobCompleteUploadOptionalParams,
  ContainerRegistryBlobCompleteUploadResponse,
  ContainerRegistryBlobCancelUploadOptionalParams,
  ContainerRegistryBlobStartUploadOptionalParams,
  ContainerRegistryBlobStartUploadResponse,
  ContainerRegistryBlobGetChunkOptionalParams,
  ContainerRegistryBlobGetChunkResponse,
  ContainerRegistryBlobCheckChunkExistsOptionalParams,
  ContainerRegistryBlobCheckChunkExistsResponse
} from "../models";

/** Class containing ContainerRegistryBlob operations. */
export class ContainerRegistryBlobImpl implements ContainerRegistryBlob {
  private readonly client: GeneratedClient;

  /**
   * Initialize a new instance of the class ContainerRegistryBlob class.
   * @param client Reference to the service client
   */
  constructor(client: GeneratedClient) {
    this.client = client;
  }

  /**
   * Retrieve the blob from the registry identified by digest.
   * @param name Name of the image (including the namespace)
   * @param digest Digest of a BLOB
   * @param options The options parameters.
   */
  getBlob(
    name: string,
    digest: string,
    options?: ContainerRegistryBlobGetBlobOptionalParams
  ): Promise<ContainerRegistryBlobGetBlobResponse> {
    return this.client.sendOperationRequest(
      { name, digest, options },
      getBlobOperationSpec
    );
  }

  /**
   * Same as GET, except only the headers are returned.
   * @param name Name of the image (including the namespace)
   * @param digest Digest of a BLOB
   * @param options The options parameters.
   */
  checkBlobExists(
    name: string,
    digest: string,
    options?: ContainerRegistryBlobCheckBlobExistsOptionalParams
  ): Promise<ContainerRegistryBlobCheckBlobExistsResponse> {
    return this.client.sendOperationRequest(
      { name, digest, options },
      checkBlobExistsOperationSpec
    );
  }

  /**
   * Removes an already uploaded blob.
   * @param name Name of the image (including the namespace)
   * @param digest Digest of a BLOB
   * @param options The options parameters.
   */
  deleteBlob(
    name: string,
    digest: string,
    options?: ContainerRegistryBlobDeleteBlobOptionalParams
  ): Promise<ContainerRegistryBlobDeleteBlobResponse> {
    return this.client.sendOperationRequest(
      { name, digest, options },
      deleteBlobOperationSpec
    );
  }

  /**
   * Mount a blob identified by the `mount` parameter from another repository.
   * @param name Name of the image (including the namespace)
   * @param fromParam Name of the source repository.
   * @param mount Digest of blob to mount from the source repository.
   * @param options The options parameters.
   */
  mountBlob(
    name: string,
    fromParam: string,
    mount: string,
    options?: ContainerRegistryBlobMountBlobOptionalParams
  ): Promise<ContainerRegistryBlobMountBlobResponse> {
    return this.client.sendOperationRequest(
      { name, fromParam, mount, options },
      mountBlobOperationSpec
    );
  }

  /**
   * Retrieve status of upload identified by uuid. The primary purpose of this endpoint is to resolve the
   * current status of a resumable upload.
   * @param nextLink Link acquired from upload start or previous chunk. Note, do not include initial /
   *                 (must do substring(1) )
   * @param options The options parameters.
   */
  getUploadStatus(
    nextLink: string,
    options?: ContainerRegistryBlobGetUploadStatusOptionalParams
  ): Promise<ContainerRegistryBlobGetUploadStatusResponse> {
    return this.client.sendOperationRequest(
      { nextLink, options },
      getUploadStatusOperationSpec
    );
  }

  /**
   * Upload a stream of data without completing the upload.
   * @param nextLink Link acquired from upload start or previous chunk. Note, do not include initial /
   *                 (must do substring(1) )
   * @param value Raw data of blob
   * @param options The options parameters.
   */
  uploadChunk(
    nextLink: string,
    value: coreRestPipeline.RequestBodyType,
    options?: ContainerRegistryBlobUploadChunkOptionalParams
  ): Promise<ContainerRegistryBlobUploadChunkResponse> {
    return this.client.sendOperationRequest(
      { nextLink, value, options },
      uploadChunkOperationSpec
    );
  }

  /**
   * Complete the upload, providing all the data in the body, if necessary. A request without a body will
   * just complete the upload with previously uploaded content.
   * @param digest Digest of a BLOB
   * @param nextLink Link acquired from upload start or previous chunk. Note, do not include initial /
   *                 (must do substring(1) )
   * @param options The options parameters.
   */
  completeUpload(
    digest: string,
    nextLink: string,
    options?: ContainerRegistryBlobCompleteUploadOptionalParams
  ): Promise<ContainerRegistryBlobCompleteUploadResponse> {
    return this.client.sendOperationRequest(
      { digest, nextLink, options },
      completeUploadOperationSpec
    );
  }

  /**
   * Cancel outstanding upload processes, releasing associated resources. If this is not called, the
   * unfinished uploads will eventually timeout.
   * @param nextLink Link acquired from upload start or previous chunk. Note, do not include initial /
   *                 (must do substring(1) )
   * @param options The options parameters.
   */
  cancelUpload(
    nextLink: string,
    options?: ContainerRegistryBlobCancelUploadOptionalParams
  ): Promise<void> {
    return this.client.sendOperationRequest(
      { nextLink, options },
      cancelUploadOperationSpec
    );
  }

  /**
   * Initiate a resumable blob upload with an empty request body.
   * @param name Name of the image (including the namespace)
   * @param options The options parameters.
   */
  startUpload(
    name: string,
    options?: ContainerRegistryBlobStartUploadOptionalParams
  ): Promise<ContainerRegistryBlobStartUploadResponse> {
    return this.client.sendOperationRequest(
      { name, options },
      startUploadOperationSpec
    );
  }

  /**
   * Retrieve the blob from the registry identified by `digest`. This endpoint may also support RFC7233
   * compliant range requests. Support can be detected by issuing a HEAD request. If the header
   * `Accept-Range: bytes` is returned, range requests can be used to fetch partial content.
   * @param name Name of the image (including the namespace)
   * @param digest Digest of a BLOB
   * @param range Format : bytes=<start>-<end>,  HTTP Range header specifying blob chunk.
   * @param options The options parameters.
   */
  getChunk(
    name: string,
    digest: string,
    range: string,
    options?: ContainerRegistryBlobGetChunkOptionalParams
  ): Promise<ContainerRegistryBlobGetChunkResponse> {
    return this.client.sendOperationRequest(
      { name, digest, range, options },
      getChunkOperationSpec
    );
  }

  /**
   * Same as GET, except only the headers are returned.
   * @param name Name of the image (including the namespace)
   * @param digest Digest of a BLOB
   * @param range Format : bytes=<start>-<end>,  HTTP Range header specifying blob chunk.
   * @param options The options parameters.
   */
  checkChunkExists(
    name: string,
    digest: string,
    range: string,
    options?: ContainerRegistryBlobCheckChunkExistsOptionalParams
  ): Promise<ContainerRegistryBlobCheckChunkExistsResponse> {
    return this.client.sendOperationRequest(
      { name, digest, range, options },
      checkChunkExistsOperationSpec
    );
  }
}
// Operation Specifications
const serializer = coreClient.createSerializer(Mappers, /* isXml */ false);

const getBlobOperationSpec: coreClient.OperationSpec = {
  path: "/v2/{name}/blobs/{digest}",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: {
        type: { name: "Stream" },
        serializedName: "parsedResponse"
      },
      headersMapper: Mappers.ContainerRegistryBlobGetBlobHeaders
    },
    307: {
      headersMapper: Mappers.ContainerRegistryBlobGetBlobHeaders
    },
    default: {}
  },
  urlParameters: [Parameters.url, Parameters.name, Parameters.digest1],
  headerParameters: [Parameters.accept3],
  serializer
};
const checkBlobExistsOperationSpec: coreClient.OperationSpec = {
  path: "/v2/{name}/blobs/{digest}",
  httpMethod: "HEAD",
  responses: {
    200: {
      headersMapper: Mappers.ContainerRegistryBlobCheckBlobExistsHeaders
    },
    307: {
      headersMapper: Mappers.ContainerRegistryBlobCheckBlobExistsHeaders
    },
    default: {
      bodyMapper: Mappers.AcrErrors
    }
  },
  urlParameters: [Parameters.url, Parameters.name, Parameters.digest1],
  headerParameters: [Parameters.accept],
  serializer
};
const deleteBlobOperationSpec: coreClient.OperationSpec = {
  path: "/v2/{name}/blobs/{digest}",
  httpMethod: "DELETE",
  responses: {
    202: {
      bodyMapper: {
        type: { name: "Stream" },
        serializedName: "parsedResponse"
      },
      headersMapper: Mappers.ContainerRegistryBlobDeleteBlobHeaders
    },
    404: {},
    default: {}
  },
  urlParameters: [Parameters.url, Parameters.name, Parameters.digest1],
  headerParameters: [Parameters.accept3],
  serializer
};
const mountBlobOperationSpec: coreClient.OperationSpec = {
  path: "/v2/{name}/blobs/uploads/",
  httpMethod: "POST",
  responses: {
    201: {
      headersMapper: Mappers.ContainerRegistryBlobMountBlobHeaders
    },
    default: {
      bodyMapper: Mappers.AcrErrors
    }
  },
  queryParameters: [Parameters.fromParam, Parameters.mount],
  urlParameters: [Parameters.url, Parameters.name],
  headerParameters: [Parameters.accept],
  serializer
};
const getUploadStatusOperationSpec: coreClient.OperationSpec = {
  path: "/{nextBlobUuidLink}",
  httpMethod: "GET",
  responses: {
    204: {
      headersMapper: Mappers.ContainerRegistryBlobGetUploadStatusHeaders
    },
    default: {
      bodyMapper: Mappers.AcrErrors
    }
  },
  urlParameters: [Parameters.url, Parameters.nextLink1],
  headerParameters: [Parameters.accept],
  serializer
};
const uploadChunkOperationSpec: coreClient.OperationSpec = {
  path: "/{nextBlobUuidLink}",
  httpMethod: "PATCH",
  responses: {
    202: {
      headersMapper: Mappers.ContainerRegistryBlobUploadChunkHeaders
    },
    default: {
      bodyMapper: Mappers.AcrErrors
    }
  },
  requestBody: Parameters.value3,
  urlParameters: [Parameters.url, Parameters.nextLink1],
  headerParameters: [Parameters.accept2, Parameters.contentType2],
  mediaType: "binary",
  serializer
};
const completeUploadOperationSpec: coreClient.OperationSpec = {
  path: "/{nextBlobUuidLink}",
  httpMethod: "PUT",
  responses: {
    201: {
      headersMapper: Mappers.ContainerRegistryBlobCompleteUploadHeaders
    },
    default: {
      bodyMapper: Mappers.AcrErrors
    }
  },
  requestBody: Parameters.value4,
  queryParameters: [Parameters.digest2],
  urlParameters: [Parameters.url, Parameters.nextLink1],
  headerParameters: [Parameters.accept2, Parameters.contentType2],
  mediaType: "binary",
  serializer
};
const cancelUploadOperationSpec: coreClient.OperationSpec = {
  path: "/{nextBlobUuidLink}",
  httpMethod: "DELETE",
  responses: {
    204: {},
    default: {
      bodyMapper: Mappers.AcrErrors
    }
  },
  urlParameters: [Parameters.url, Parameters.nextLink1],
  headerParameters: [Parameters.accept],
  serializer
};
const startUploadOperationSpec: coreClient.OperationSpec = {
  path: "/v2/{name}/blobs/uploads/",
  httpMethod: "POST",
  responses: {
    202: {
      headersMapper: Mappers.ContainerRegistryBlobStartUploadHeaders
    },
    default: {
      bodyMapper: Mappers.AcrErrors
    }
  },
  urlParameters: [Parameters.url, Parameters.name],
  headerParameters: [Parameters.accept],
  serializer
};
const getChunkOperationSpec: coreClient.OperationSpec = {
  path: "/v2/{name}/blobs/{digest}",
  httpMethod: "GET",
  responses: {
    206: {
      bodyMapper: {
        type: { name: "Stream" },
        serializedName: "parsedResponse"
      },
      headersMapper: Mappers.ContainerRegistryBlobGetChunkHeaders
    },
    default: {}
  },
  urlParameters: [Parameters.url, Parameters.name, Parameters.digest1],
  headerParameters: [Parameters.accept3, Parameters.range],
  serializer
};
const checkChunkExistsOperationSpec: coreClient.OperationSpec = {
  path: "/v2/{name}/blobs/{digest}",
  httpMethod: "HEAD",
  responses: {
    200: {
      headersMapper: Mappers.ContainerRegistryBlobCheckChunkExistsHeaders
    },
    default: {
      bodyMapper: Mappers.AcrErrors
    }
  },
  urlParameters: [Parameters.url, Parameters.name, Parameters.digest1],
  headerParameters: [Parameters.accept, Parameters.range],
  serializer
};
