/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */

import * as coreHttp from "@azure/core-http";
import * as Mappers from "../models/mappers";
import * as Parameters from "../models/parameters";
import { GeneratedClient } from "../generatedClient";
import {
  ContainerRegistryBlobGetBlobResponse,
  ContainerRegistryBlobCheckBlobExistsResponse,
  ContainerRegistryBlobDeleteBlobResponse,
  ContainerRegistryBlobMountBlobResponse,
  ContainerRegistryBlobGetUploadStatusResponse,
  ContainerRegistryBlobUploadChunkResponse,
  ContainerRegistryBlobCompleteUploadResponse,
  ContainerRegistryBlobStartUploadResponse,
  ContainerRegistryBlobGetChunkResponse,
  ContainerRegistryBlobCheckChunkExistsResponse
} from "../models";

/** Class representing a ContainerRegistryBlob. */
export class ContainerRegistryBlob {
  private readonly client: GeneratedClient;

  /**
   * Initialize a new instance of the class ContainerRegistryBlob class.
   * @param client Reference to the service client
   */
  constructor(client: GeneratedClient) {
    this.client = client;
  }

  /**
   * Retrieve the blob from the registry identified by digest.
   * @param name Name of the image (including the namespace)
   * @param digest Digest of a BLOB
   * @param options The options parameters.
   */
  getBlob(
    name: string,
    digest: string,
    options?: coreHttp.OperationOptions
  ): Promise<ContainerRegistryBlobGetBlobResponse> {
    const operationArguments: coreHttp.OperationArguments = {
      name,
      digest,
      options: coreHttp.operationOptionsToRequestOptionsBase(options || {})
    };
    return this.client.sendOperationRequest(
      operationArguments,
      getBlobOperationSpec
    ) as Promise<ContainerRegistryBlobGetBlobResponse>;
  }

  /**
   * Same as GET, except only the headers are returned.
   * @param name Name of the image (including the namespace)
   * @param digest Digest of a BLOB
   * @param options The options parameters.
   */
  checkBlobExists(
    name: string,
    digest: string,
    options?: coreHttp.OperationOptions
  ): Promise<ContainerRegistryBlobCheckBlobExistsResponse> {
    const operationArguments: coreHttp.OperationArguments = {
      name,
      digest,
      options: coreHttp.operationOptionsToRequestOptionsBase(options || {})
    };
    return this.client.sendOperationRequest(
      operationArguments,
      checkBlobExistsOperationSpec
    ) as Promise<ContainerRegistryBlobCheckBlobExistsResponse>;
  }

  /**
   * Removes an already uploaded blob.
   * @param name Name of the image (including the namespace)
   * @param digest Digest of a BLOB
   * @param options The options parameters.
   */
  deleteBlob(
    name: string,
    digest: string,
    options?: coreHttp.OperationOptions
  ): Promise<ContainerRegistryBlobDeleteBlobResponse> {
    const operationArguments: coreHttp.OperationArguments = {
      name,
      digest,
      options: coreHttp.operationOptionsToRequestOptionsBase(options || {})
    };
    return this.client.sendOperationRequest(
      operationArguments,
      deleteBlobOperationSpec
    ) as Promise<ContainerRegistryBlobDeleteBlobResponse>;
  }

  /**
   * Mount a blob identified by the `mount` parameter from another repository.
   * @param name Name of the image (including the namespace)
   * @param mount Digest of blob to mount from the source repository.
   * @param fromParam Name of the source repository.
   * @param options The options parameters.
   */
  mountBlob(
    name: string,
    mount: string,
    fromParam: string,
    options?: coreHttp.OperationOptions
  ): Promise<ContainerRegistryBlobMountBlobResponse> {
    const operationArguments: coreHttp.OperationArguments = {
      name,
      mount,
      fromParam,
      options: coreHttp.operationOptionsToRequestOptionsBase(options || {})
    };
    return this.client.sendOperationRequest(
      operationArguments,
      mountBlobOperationSpec
    ) as Promise<ContainerRegistryBlobMountBlobResponse>;
  }

  /**
   * Retrieve status of upload identified by uuid. The primary purpose of this endpoint is to resolve the
   * current status of a resumable upload.
   * @param location Link acquired from upload start or previous chunk. Note, do not include initial /
   *                 (must do substring(1) )
   * @param options The options parameters.
   */
  getUploadStatus(
    location: string,
    options?: coreHttp.OperationOptions
  ): Promise<ContainerRegistryBlobGetUploadStatusResponse> {
    const operationArguments: coreHttp.OperationArguments = {
      location,
      options: coreHttp.operationOptionsToRequestOptionsBase(options || {})
    };
    return this.client.sendOperationRequest(
      operationArguments,
      getUploadStatusOperationSpec
    ) as Promise<ContainerRegistryBlobGetUploadStatusResponse>;
  }

  /**
   * Upload a stream of data without completing the upload.
   * @param location Link acquired from upload start or previous chunk. Note, do not include initial /
   *                 (must do substring(1) )
   * @param value Raw data of blob
   * @param options The options parameters.
   */
  uploadChunk(
    location: string,
    value: coreHttp.HttpRequestBody,
    options?: coreHttp.OperationOptions
  ): Promise<ContainerRegistryBlobUploadChunkResponse> {
    const operationArguments: coreHttp.OperationArguments = {
      location,
      value,
      options: coreHttp.operationOptionsToRequestOptionsBase(options || {})
    };
    return this.client.sendOperationRequest(
      operationArguments,
      uploadChunkOperationSpec
    ) as Promise<ContainerRegistryBlobUploadChunkResponse>;
  }

  /**
   * Complete the upload, providing all the data in the body, if necessary. A request without a body will
   * just complete the upload with previously uploaded content.
   * @param digest Digest of a BLOB
   * @param location Link acquired from upload start or previous chunk. Note, do not include initial /
   *                 (must do substring(1) )
   * @param value Optional raw data of blob
   * @param options The options parameters.
   */
  completeUpload(
    digest: string,
    location: string,
    value: coreHttp.HttpRequestBody,
    options?: coreHttp.OperationOptions
  ): Promise<ContainerRegistryBlobCompleteUploadResponse> {
    const operationArguments: coreHttp.OperationArguments = {
      digest,
      location,
      value,
      options: coreHttp.operationOptionsToRequestOptionsBase(options || {})
    };
    return this.client.sendOperationRequest(
      operationArguments,
      completeUploadOperationSpec
    ) as Promise<ContainerRegistryBlobCompleteUploadResponse>;
  }

  /**
   * Cancel outstanding upload processes, releasing associated resources. If this is not called, the
   * unfinished uploads will eventually timeout.
   * @param location Link acquired from upload start or previous chunk. Note, do not include initial /
   *                 (must do substring(1) )
   * @param options The options parameters.
   */
  cancelUpload(
    location: string,
    options?: coreHttp.OperationOptions
  ): Promise<coreHttp.RestResponse> {
    const operationArguments: coreHttp.OperationArguments = {
      location,
      options: coreHttp.operationOptionsToRequestOptionsBase(options || {})
    };
    return this.client.sendOperationRequest(
      operationArguments,
      cancelUploadOperationSpec
    ) as Promise<coreHttp.RestResponse>;
  }

  /**
   * Initiate a resumable blob upload with an empty request body.
   * @param name Name of the image (including the namespace)
   * @param options The options parameters.
   */
  startUpload(
    name: string,
    options?: coreHttp.OperationOptions
  ): Promise<ContainerRegistryBlobStartUploadResponse> {
    const operationArguments: coreHttp.OperationArguments = {
      name,
      options: coreHttp.operationOptionsToRequestOptionsBase(options || {})
    };
    return this.client.sendOperationRequest(
      operationArguments,
      startUploadOperationSpec
    ) as Promise<ContainerRegistryBlobStartUploadResponse>;
  }

  /**
   * Retrieve the blob from the registry identified by `digest`. This endpoint may also support RFC7233
   * compliant range requests. Support can be detected by issuing a HEAD request. If the header
   * `Accept-Range: bytes` is returned, range requests can be used to fetch partial content.
   * @param name Name of the image (including the namespace)
   * @param digest Digest of a BLOB
   * @param range Format : bytes=<start>-<end>,  HTTP Range header specifying blob chunk.
   * @param options The options parameters.
   */
  getChunk(
    name: string,
    digest: string,
    range: string,
    options?: coreHttp.OperationOptions
  ): Promise<ContainerRegistryBlobGetChunkResponse> {
    const operationArguments: coreHttp.OperationArguments = {
      name,
      digest,
      range,
      options: coreHttp.operationOptionsToRequestOptionsBase(options || {})
    };
    return this.client.sendOperationRequest(
      operationArguments,
      getChunkOperationSpec
    ) as Promise<ContainerRegistryBlobGetChunkResponse>;
  }

  /**
   * Same as GET, except only the headers are returned.
   * @param name Name of the image (including the namespace)
   * @param digest Digest of a BLOB
   * @param range Format : bytes=<start>-<end>,  HTTP Range header specifying blob chunk.
   * @param options The options parameters.
   */
  checkChunkExists(
    name: string,
    digest: string,
    range: string,
    options?: coreHttp.OperationOptions
  ): Promise<ContainerRegistryBlobCheckChunkExistsResponse> {
    const operationArguments: coreHttp.OperationArguments = {
      name,
      digest,
      range,
      options: coreHttp.operationOptionsToRequestOptionsBase(options || {})
    };
    return this.client.sendOperationRequest(
      operationArguments,
      checkChunkExistsOperationSpec
    ) as Promise<ContainerRegistryBlobCheckChunkExistsResponse>;
  }
}
// Operation Specifications
const serializer = new coreHttp.Serializer(Mappers, /* isXml */ false);

const getBlobOperationSpec: coreHttp.OperationSpec = {
  path: "/v2/{name}/blobs/{digest}",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: {
        type: { name: "Stream" },
        serializedName: "parsedResponse"
      },
      headersMapper: Mappers.ContainerRegistryBlobGetBlobHeaders
    },
    307: {
      headersMapper: Mappers.ContainerRegistryBlobGetBlobHeaders
    },
    default: {}
  },
  urlParameters: [Parameters.url, Parameters.name, Parameters.digest1],
  headerParameters: [Parameters.accept2],
  serializer
};
const checkBlobExistsOperationSpec: coreHttp.OperationSpec = {
  path: "/v2/{name}/blobs/{digest}",
  httpMethod: "HEAD",
  responses: {
    200: {
      headersMapper: Mappers.ContainerRegistryBlobCheckBlobExistsHeaders
    },
    307: {
      headersMapper: Mappers.ContainerRegistryBlobCheckBlobExistsHeaders
    },
    default: {
      bodyMapper: Mappers.AcrErrors
    }
  },
  urlParameters: [Parameters.url, Parameters.name, Parameters.digest1],
  headerParameters: [Parameters.accept],
  serializer
};
const deleteBlobOperationSpec: coreHttp.OperationSpec = {
  path: "/v2/{name}/blobs/{digest}",
  httpMethod: "DELETE",
  responses: {
    202: {
      bodyMapper: {
        type: { name: "Stream" },
        serializedName: "parsedResponse"
      },
      headersMapper: Mappers.ContainerRegistryBlobDeleteBlobHeaders
    },
    default: {}
  },
  urlParameters: [Parameters.url, Parameters.name, Parameters.digest1],
  headerParameters: [Parameters.accept2],
  serializer
};
const mountBlobOperationSpec: coreHttp.OperationSpec = {
  path: "/v2/{name}/blobs/uploads/",
  httpMethod: "POST",
  responses: {
    201: {
      headersMapper: Mappers.ContainerRegistryBlobMountBlobHeaders
    },
    default: {
      bodyMapper: Mappers.AcrErrors
    }
  },
  queryParameters: [Parameters.fromParam, Parameters.mount],
  urlParameters: [Parameters.url, Parameters.name],
  headerParameters: [Parameters.accept],
  serializer
};
const getUploadStatusOperationSpec: coreHttp.OperationSpec = {
  path: "/{nextBlobUuidLink}",
  httpMethod: "GET",
  responses: {
    204: {
      headersMapper: Mappers.ContainerRegistryBlobGetUploadStatusHeaders
    },
    default: {
      bodyMapper: Mappers.AcrErrors
    }
  },
  urlParameters: [Parameters.url, Parameters.location],
  headerParameters: [Parameters.accept],
  serializer
};
const uploadChunkOperationSpec: coreHttp.OperationSpec = {
  path: "/{nextBlobUuidLink}",
  httpMethod: "PATCH",
  responses: {
    202: {
      headersMapper: Mappers.ContainerRegistryBlobUploadChunkHeaders
    },
    default: {
      bodyMapper: Mappers.AcrErrors
    }
  },
  requestBody: Parameters.value1,
  urlParameters: [Parameters.url, Parameters.location],
  headerParameters: [Parameters.contentType2, Parameters.accept3],
  mediaType: "binary",
  serializer
};
const completeUploadOperationSpec: coreHttp.OperationSpec = {
  path: "/{nextBlobUuidLink}",
  httpMethod: "PUT",
  responses: {
    201: {
      headersMapper: Mappers.ContainerRegistryBlobCompleteUploadHeaders
    },
    default: {
      bodyMapper: Mappers.AcrErrors
    }
  },
  requestBody: Parameters.value1,
  queryParameters: [Parameters.digest2],
  urlParameters: [Parameters.url, Parameters.location],
  headerParameters: [Parameters.contentType2, Parameters.accept3],
  mediaType: "binary",
  serializer
};
const cancelUploadOperationSpec: coreHttp.OperationSpec = {
  path: "/{nextBlobUuidLink}",
  httpMethod: "DELETE",
  responses: {
    204: {},
    default: {
      bodyMapper: Mappers.AcrErrors
    }
  },
  urlParameters: [Parameters.url, Parameters.location],
  headerParameters: [Parameters.accept],
  serializer
};
const startUploadOperationSpec: coreHttp.OperationSpec = {
  path: "/v2/{name}/blobs/uploads/",
  httpMethod: "POST",
  responses: {
    202: {
      headersMapper: Mappers.ContainerRegistryBlobStartUploadHeaders
    },
    default: {
      bodyMapper: Mappers.AcrErrors
    }
  },
  urlParameters: [Parameters.url, Parameters.name],
  headerParameters: [Parameters.accept],
  serializer
};
const getChunkOperationSpec: coreHttp.OperationSpec = {
  path: "/v2/{name}/blobs/{digest}",
  httpMethod: "GET",
  responses: {
    206: {
      bodyMapper: {
        type: { name: "Stream" },
        serializedName: "parsedResponse"
      },
      headersMapper: Mappers.ContainerRegistryBlobGetChunkHeaders
    },
    default: {}
  },
  urlParameters: [Parameters.url, Parameters.name, Parameters.digest1],
  headerParameters: [Parameters.accept2, Parameters.range],
  serializer
};
const checkChunkExistsOperationSpec: coreHttp.OperationSpec = {
  path: "/v2/{name}/blobs/{digest}",
  httpMethod: "HEAD",
  responses: {
    200: {
      headersMapper: Mappers.ContainerRegistryBlobCheckChunkExistsHeaders
    },
    default: {
      bodyMapper: Mappers.AcrErrors
    }
  },
  urlParameters: [Parameters.url, Parameters.name, Parameters.digest1],
  headerParameters: [Parameters.accept, Parameters.range],
  serializer
};
