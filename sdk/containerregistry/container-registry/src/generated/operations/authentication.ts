/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */

import * as coreHttp from "@azure/core-http";
import * as Mappers from "../models/mappers";
import * as Parameters from "../models/parameters";
import { GeneratedClient } from "../generatedClient";
import {
  AuthenticationExchangeAadAccessTokenForAcrRefreshTokenOptionalParams,
  AuthenticationExchangeAadAccessTokenForAcrRefreshTokenResponse,
  AuthenticationExchangeAcrRefreshTokenForAcrAccessTokenOptionalParams,
  AuthenticationExchangeAcrRefreshTokenForAcrAccessTokenResponse
} from "../models";

/** Class representing a Authentication. */
export class Authentication {
  private readonly client: GeneratedClient;

  /**
   * Initialize a new instance of the class Authentication class.
   * @param client Reference to the service client
   */
  constructor(client: GeneratedClient) {
    this.client = client;
  }

  /**
   * Exchange AAD tokens for an ACR refresh Token
   * @param options The options parameters.
   */
  exchangeAadAccessTokenForAcrRefreshToken(
    options?: AuthenticationExchangeAadAccessTokenForAcrRefreshTokenOptionalParams
  ): Promise<AuthenticationExchangeAadAccessTokenForAcrRefreshTokenResponse> {
    const operationArguments: coreHttp.OperationArguments = {
      options: coreHttp.operationOptionsToRequestOptionsBase(options || {})
    };
    return this.client.sendOperationRequest(
      operationArguments,
      exchangeAadAccessTokenForAcrRefreshTokenOperationSpec
    ) as Promise<
      AuthenticationExchangeAadAccessTokenForAcrRefreshTokenResponse
    >;
  }

  /**
   * Exchange ACR Refresh token for an ACR Access Token
   * @param options The options parameters.
   */
  exchangeAcrRefreshTokenForAcrAccessToken(
    options?: AuthenticationExchangeAcrRefreshTokenForAcrAccessTokenOptionalParams
  ): Promise<AuthenticationExchangeAcrRefreshTokenForAcrAccessTokenResponse> {
    const operationArguments: coreHttp.OperationArguments = {
      options: coreHttp.operationOptionsToRequestOptionsBase(options || {})
    };
    return this.client.sendOperationRequest(
      operationArguments,
      exchangeAcrRefreshTokenForAcrAccessTokenOperationSpec
    ) as Promise<
      AuthenticationExchangeAcrRefreshTokenForAcrAccessTokenResponse
    >;
  }
}
// Operation Specifications
const serializer = new coreHttp.Serializer(Mappers, /* isXml */ false);

const exchangeAadAccessTokenForAcrRefreshTokenOperationSpec: coreHttp.OperationSpec = {
  path: "/oauth2/exchange",
  httpMethod: "POST",
  responses: {
    200: {
      bodyMapper: Mappers.AcrRefreshToken
    },
    default: {
      bodyMapper: Mappers.AcrErrors
    }
  },
  formDataParameters: [Parameters.aadAccesstoken],
  urlParameters: [Parameters.url],
  headerParameters: [Parameters.contentType3, Parameters.accept4],
  serializer
};
const exchangeAcrRefreshTokenForAcrAccessTokenOperationSpec: coreHttp.OperationSpec = {
  path: "/oauth2/token",
  httpMethod: "POST",
  responses: {
    200: {
      bodyMapper: Mappers.AcrAccessToken
    },
    default: {
      bodyMapper: Mappers.AcrErrors
    }
  },
  formDataParameters: [Parameters.acrRefreshToken],
  urlParameters: [Parameters.url],
  headerParameters: [Parameters.contentType3, Parameters.accept4],
  serializer
};
