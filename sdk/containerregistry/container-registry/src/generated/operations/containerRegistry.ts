/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */

import * as coreClient from "@azure/core-client";
import * as Mappers from "../models/mappers";
import * as Parameters from "../models/parameters";
import { GeneratedClientContext } from "../generatedClientContext";
import {
  ContainerRegistryGetRepositoriesOptionalParams,
  ContainerRegistryGetRepositoriesResponse,
  ContainerRegistryDeleteRepositoryResponse,
  ContainerRegistryGetRepositoriesNextOptionalParams,
  ContainerRegistryGetRepositoriesNextResponse
} from "../models";

/** Class representing a ContainerRegistry. */
export class ContainerRegistry {
  private readonly client: GeneratedClientContext;

  /**
   * Initialize a new instance of the class ContainerRegistry class.
   * @param client Reference to the service client
   */
  constructor(client: GeneratedClientContext) {
    this.client = client;
  }

  /**
   * Tells whether this Docker Registry instance supports Docker Registry HTTP API v2
   * @param options The options parameters.
   */
  checkDockerV2Support(options?: coreClient.OperationOptions): Promise<void> {
    return this.client.sendOperationRequest(
      { options },
      checkDockerV2SupportOperationSpec
    );
  }

  /**
   * List repositories
   * @param options The options parameters.
   */
  getRepositories(
    options?: ContainerRegistryGetRepositoriesOptionalParams
  ): Promise<ContainerRegistryGetRepositoriesResponse> {
    return this.client.sendOperationRequest(
      { options },
      getRepositoriesOperationSpec
    );
  }

  /**
   * Delete the repository identified by `name`
   * @param name Name of the image (including the namespace)
   * @param options The options parameters.
   */
  deleteRepository(
    name: string,
    options?: coreClient.OperationOptions
  ): Promise<ContainerRegistryDeleteRepositoryResponse> {
    return this.client.sendOperationRequest(
      { name, options },
      deleteRepositoryOperationSpec
    );
  }

  /**
   * GetRepositoriesNext
   * @param nextLink The nextLink from the previous successful call to the GetRepositories method.
   * @param options The options parameters.
   */
  getRepositoriesNext(
    nextLink: string,
    options?: ContainerRegistryGetRepositoriesNextOptionalParams
  ): Promise<ContainerRegistryGetRepositoriesNextResponse> {
    return this.client.sendOperationRequest(
      { nextLink, options },
      getRepositoriesNextOperationSpec
    );
  }
}
// Operation Specifications
const serializer = coreClient.createSerializer(Mappers, /* isXml */ false);

const checkDockerV2SupportOperationSpec: coreClient.OperationSpec = {
  path: "/v2/",
  httpMethod: "GET",
  responses: {
    200: {},
    default: {
      bodyMapper: Mappers.AcrErrors
    }
  },
  urlParameters: [Parameters.url],
  headerParameters: [Parameters.accept],
  serializer
};
const getRepositoriesOperationSpec: coreClient.OperationSpec = {
  path: "/acr/v1/_catalog",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.Repositories,
      headersMapper: Mappers.ContainerRegistryGetRepositoriesHeaders
    },
    default: {
      bodyMapper: Mappers.AcrErrors
    }
  },
  queryParameters: [Parameters.last, Parameters.n],
  urlParameters: [Parameters.url],
  headerParameters: [Parameters.accept],
  serializer
};
const deleteRepositoryOperationSpec: coreClient.OperationSpec = {
  path: "/acr/v1/{name}",
  httpMethod: "DELETE",
  responses: {
    202: {
      bodyMapper: Mappers.DeleteRepositoryResult
    },
    default: {
      bodyMapper: Mappers.AcrErrors
    }
  },
  urlParameters: [Parameters.url, Parameters.name],
  headerParameters: [Parameters.accept],
  serializer
};
const getRepositoriesNextOperationSpec: coreClient.OperationSpec = {
  path: "{nextLink}",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.Repositories,
      headersMapper: Mappers.ContainerRegistryGetRepositoriesNextHeaders
    },
    default: {
      bodyMapper: Mappers.AcrErrors
    }
  },
  queryParameters: [Parameters.last, Parameters.n],
  urlParameters: [Parameters.url, Parameters.nextLink],
  headerParameters: [Parameters.accept],
  serializer
};
