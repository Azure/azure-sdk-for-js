/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */

import * as coreHttp from "@azure/core-http";
import * as Mappers from "../models/mappers";
import * as Parameters from "../models/parameters";
import { GeneratedClient } from "../generatedClient";
import {
  ContainerRegistryGetRepositoriesOptionalParams,
  ContainerRegistryGetRepositoriesResponse,
  ContainerRegistryDeleteRepositoryResponse,
  ContainerRegistryGetRepositoriesNextOptionalParams,
  ContainerRegistryGetRepositoriesNextResponse
} from "../models";

/** Class representing a ContainerRegistry. */
export class ContainerRegistry {
  private readonly client: GeneratedClient;

  /**
   * Initialize a new instance of the class ContainerRegistry class.
   * @param client Reference to the service client
   */
  constructor(client: GeneratedClient) {
    this.client = client;
  }

  /**
   * Tells whether this Docker Registry instance supports Docker Registry HTTP API v2
   * @param options The options parameters.
   */
  checkDockerV2Support(
    options?: coreHttp.OperationOptions
  ): Promise<coreHttp.RestResponse> {
    const operationArguments: coreHttp.OperationArguments = {
      options: coreHttp.operationOptionsToRequestOptionsBase(options || {})
    };
    return this.client.sendOperationRequest(
      operationArguments,
      checkDockerV2SupportOperationSpec
    ) as Promise<coreHttp.RestResponse>;
  }

  /**
   * List repositories
   * @param options The options parameters.
   */
  getRepositories(
    options?: ContainerRegistryGetRepositoriesOptionalParams
  ): Promise<ContainerRegistryGetRepositoriesResponse> {
    const operationArguments: coreHttp.OperationArguments = {
      options: coreHttp.operationOptionsToRequestOptionsBase(options || {})
    };
    return this.client.sendOperationRequest(
      operationArguments,
      getRepositoriesOperationSpec
    ) as Promise<ContainerRegistryGetRepositoriesResponse>;
  }

  /**
   * Delete the repository identified by `name`
   * @param name Name of the image (including the namespace)
   * @param options The options parameters.
   */
  deleteRepository(
    name: string,
    options?: coreHttp.OperationOptions
  ): Promise<ContainerRegistryDeleteRepositoryResponse> {
    const operationArguments: coreHttp.OperationArguments = {
      name,
      options: coreHttp.operationOptionsToRequestOptionsBase(options || {})
    };
    return this.client.sendOperationRequest(
      operationArguments,
      deleteRepositoryOperationSpec
    ) as Promise<ContainerRegistryDeleteRepositoryResponse>;
  }

  /**
   * GetRepositoriesNext
   * @param nextLink The nextLink from the previous successful call to the GetRepositories method.
   * @param options The options parameters.
   */
  getRepositoriesNext(
    nextLink: string,
    options?: ContainerRegistryGetRepositoriesNextOptionalParams
  ): Promise<ContainerRegistryGetRepositoriesNextResponse> {
    const operationArguments: coreHttp.OperationArguments = {
      nextLink,
      options: coreHttp.operationOptionsToRequestOptionsBase(options || {})
    };
    return this.client.sendOperationRequest(
      operationArguments,
      getRepositoriesNextOperationSpec
    ) as Promise<ContainerRegistryGetRepositoriesNextResponse>;
  }
}
// Operation Specifications
const serializer = new coreHttp.Serializer(Mappers, /* isXml */ false);

const checkDockerV2SupportOperationSpec: coreHttp.OperationSpec = {
  path: "/v2/",
  httpMethod: "GET",
  responses: {
    200: {},
    default: {
      bodyMapper: Mappers.AcrErrors
    }
  },
  urlParameters: [Parameters.url],
  headerParameters: [Parameters.accept],
  serializer
};
const getRepositoriesOperationSpec: coreHttp.OperationSpec = {
  path: "/acr/v1/_catalog",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.Repositories,
      headersMapper: Mappers.ContainerRegistryGetRepositoriesHeaders
    },
    default: {
      bodyMapper: Mappers.AcrErrors
    }
  },
  queryParameters: [Parameters.last, Parameters.n],
  urlParameters: [Parameters.url],
  headerParameters: [Parameters.accept],
  serializer
};
const deleteRepositoryOperationSpec: coreHttp.OperationSpec = {
  path: "/acr/v1/{name}",
  httpMethod: "DELETE",
  responses: {
    202: {
      bodyMapper: Mappers.DeleteRepositoryResult
    },
    default: {
      bodyMapper: Mappers.AcrErrors
    }
  },
  urlParameters: [Parameters.url, Parameters.name],
  headerParameters: [Parameters.accept],
  serializer
};
const getRepositoriesNextOperationSpec: coreHttp.OperationSpec = {
  path: "{nextLink}",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.Repositories,
      headersMapper: Mappers.ContainerRegistryGetRepositoriesNextHeaders
    },
    default: {
      bodyMapper: Mappers.AcrErrors
    }
  },
  queryParameters: [Parameters.last, Parameters.n],
  urlParameters: [Parameters.url, Parameters.nextLink],
  headerParameters: [Parameters.accept],
  serializer
};
