/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */

import * as coreClient from "@azure/core-client";
import * as Mappers from "../models/mappers";
import * as Parameters from "../models/parameters";
import { GeneratedClientContext } from "../generatedClientContext";
import {
  ContainerRegistryRepositoryGetManifestOptionalParams,
  ContainerRegistryRepositoryGetManifestResponse,
  Manifest,
  ContainerRegistryRepositoryCreateManifestResponse,
  ContainerRegistryRepositoryGetPropertiesResponse,
  ContainerRegistryRepositorySetPropertiesOptionalParams,
  ContainerRegistryRepositoryGetTagsOptionalParams,
  ContainerRegistryRepositoryGetTagsResponse,
  ContainerRegistryRepositoryGetTagPropertiesResponse,
  ContainerRegistryRepositoryUpdateTagAttributesOptionalParams,
  ContainerRegistryRepositoryGetManifestsOptionalParams,
  ContainerRegistryRepositoryGetManifestsResponse,
  ContainerRegistryRepositoryGetRegistryArtifactPropertiesResponse,
  ContainerRegistryRepositoryUpdateManifestAttributesOptionalParams,
  ContainerRegistryRepositoryGetTagsNextOptionalParams,
  ContainerRegistryRepositoryGetTagsNextResponse,
  ContainerRegistryRepositoryGetManifestsNextOptionalParams,
  ContainerRegistryRepositoryGetManifestsNextResponse
} from "../models";

/** Class representing a ContainerRegistryRepository. */
export class ContainerRegistryRepository {
  private readonly client: GeneratedClientContext;

  /**
   * Initialize a new instance of the class ContainerRegistryRepository class.
   * @param client Reference to the service client
   */
  constructor(client: GeneratedClientContext) {
    this.client = client;
  }

  /**
   * Get the manifest identified by `name` and `reference` where `reference` can be a tag or digest.
   * @param name Name of the image (including the namespace)
   * @param reference A tag or a digest, pointing to a specific image
   * @param options The options parameters.
   */
  getManifest(
    name: string,
    reference: string,
    options?: ContainerRegistryRepositoryGetManifestOptionalParams
  ): Promise<ContainerRegistryRepositoryGetManifestResponse> {
    return this.client.sendOperationRequest(
      { name, reference, options },
      getManifestOperationSpec
    );
  }

  /**
   * Put the manifest identified by `name` and `reference` where `reference` can be a tag or digest.
   * @param name Name of the image (including the namespace)
   * @param reference A tag or a digest, pointing to a specific image
   * @param payload Manifest body, can take v1 or v2 values depending on accept header
   * @param options The options parameters.
   */
  createManifest(
    name: string,
    reference: string,
    payload: Manifest,
    options?: coreClient.OperationOptions
  ): Promise<ContainerRegistryRepositoryCreateManifestResponse> {
    return this.client.sendOperationRequest(
      { name, reference, payload, options },
      createManifestOperationSpec
    );
  }

  /**
   * Delete the manifest identified by `name` and `reference`. Note that a manifest can _only_ be deleted
   * by `digest`.
   * @param name Name of the image (including the namespace)
   * @param reference Digest of a BLOB
   * @param options The options parameters.
   */
  deleteManifest(
    name: string,
    reference: string,
    options?: coreClient.OperationOptions
  ): Promise<void> {
    return this.client.sendOperationRequest(
      { name, reference, options },
      deleteManifestOperationSpec
    );
  }

  /**
   * Get repository attributes
   * @param name Name of the image (including the namespace)
   * @param options The options parameters.
   */
  getProperties(
    name: string,
    options?: coreClient.OperationOptions
  ): Promise<ContainerRegistryRepositoryGetPropertiesResponse> {
    return this.client.sendOperationRequest(
      { name, options },
      getPropertiesOperationSpec
    );
  }

  /**
   * Update the attribute identified by `name` where `reference` is the name of the repository.
   * @param name Name of the image (including the namespace)
   * @param options The options parameters.
   */
  setProperties(
    name: string,
    options?: ContainerRegistryRepositorySetPropertiesOptionalParams
  ): Promise<void> {
    return this.client.sendOperationRequest(
      { name, options },
      setPropertiesOperationSpec
    );
  }

  /**
   * List tags of a repository
   * @param name Name of the image (including the namespace)
   * @param options The options parameters.
   */
  getTags(
    name: string,
    options?: ContainerRegistryRepositoryGetTagsOptionalParams
  ): Promise<ContainerRegistryRepositoryGetTagsResponse> {
    return this.client.sendOperationRequest(
      { name, options },
      getTagsOperationSpec
    );
  }

  /**
   * Get tag attributes by tag
   * @param name Name of the image (including the namespace)
   * @param reference Tag name
   * @param options The options parameters.
   */
  getTagProperties(
    name: string,
    reference: string,
    options?: coreClient.OperationOptions
  ): Promise<ContainerRegistryRepositoryGetTagPropertiesResponse> {
    return this.client.sendOperationRequest(
      { name, reference, options },
      getTagPropertiesOperationSpec
    );
  }

  /**
   * Update tag attributes
   * @param name Name of the image (including the namespace)
   * @param reference Tag name
   * @param options The options parameters.
   */
  updateTagAttributes(
    name: string,
    reference: string,
    options?: ContainerRegistryRepositoryUpdateTagAttributesOptionalParams
  ): Promise<void> {
    return this.client.sendOperationRequest(
      { name, reference, options },
      updateTagAttributesOperationSpec
    );
  }

  /**
   * Delete tag
   * @param name Name of the image (including the namespace)
   * @param reference Tag name
   * @param options The options parameters.
   */
  deleteTag(
    name: string,
    reference: string,
    options?: coreClient.OperationOptions
  ): Promise<void> {
    return this.client.sendOperationRequest(
      { name, reference, options },
      deleteTagOperationSpec
    );
  }

  /**
   * List manifests of a repository
   * @param name Name of the image (including the namespace)
   * @param options The options parameters.
   */
  getManifests(
    name: string,
    options?: ContainerRegistryRepositoryGetManifestsOptionalParams
  ): Promise<ContainerRegistryRepositoryGetManifestsResponse> {
    return this.client.sendOperationRequest(
      { name, options },
      getManifestsOperationSpec
    );
  }

  /**
   * Get manifest attributes
   * @param name Name of the image (including the namespace)
   * @param digest Digest of a BLOB
   * @param options The options parameters.
   */
  getRegistryArtifactProperties(
    name: string,
    digest: string,
    options?: coreClient.OperationOptions
  ): Promise<ContainerRegistryRepositoryGetRegistryArtifactPropertiesResponse> {
    return this.client.sendOperationRequest(
      { name, digest, options },
      getRegistryArtifactPropertiesOperationSpec
    );
  }

  /**
   * Update attributes of a manifest
   * @param name Name of the image (including the namespace)
   * @param digest Digest of a BLOB
   * @param options The options parameters.
   */
  updateManifestAttributes(
    name: string,
    digest: string,
    options?: ContainerRegistryRepositoryUpdateManifestAttributesOptionalParams
  ): Promise<void> {
    return this.client.sendOperationRequest(
      { name, digest, options },
      updateManifestAttributesOperationSpec
    );
  }

  /**
   * GetTagsNext
   * @param name Name of the image (including the namespace)
   * @param nextLink The nextLink from the previous successful call to the GetTags method.
   * @param options The options parameters.
   */
  getTagsNext(
    name: string,
    nextLink: string,
    options?: ContainerRegistryRepositoryGetTagsNextOptionalParams
  ): Promise<ContainerRegistryRepositoryGetTagsNextResponse> {
    return this.client.sendOperationRequest(
      { name, nextLink, options },
      getTagsNextOperationSpec
    );
  }

  /**
   * GetManifestsNext
   * @param name Name of the image (including the namespace)
   * @param nextLink The nextLink from the previous successful call to the GetManifests method.
   * @param options The options parameters.
   */
  getManifestsNext(
    name: string,
    nextLink: string,
    options?: ContainerRegistryRepositoryGetManifestsNextOptionalParams
  ): Promise<ContainerRegistryRepositoryGetManifestsNextResponse> {
    return this.client.sendOperationRequest(
      { name, nextLink, options },
      getManifestsNextOperationSpec
    );
  }
}
// Operation Specifications
const serializer = coreClient.createSerializer(Mappers, /* isXml */ false);

const getManifestOperationSpec: coreClient.OperationSpec = {
  path: "/v2/{name}/manifests/{reference}",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.Manifest
    },
    default: {
      bodyMapper: Mappers.AcrErrors
    }
  },
  urlParameters: [Parameters.url, Parameters.name, Parameters.reference],
  headerParameters: [Parameters.accept, Parameters.accept1],
  serializer
};
const createManifestOperationSpec: coreClient.OperationSpec = {
  path: "/v2/{name}/manifests/{reference}",
  httpMethod: "PUT",
  responses: {
    201: {
      bodyMapper: { type: { name: "any" } },
      headersMapper: Mappers.ContainerRegistryRepositoryCreateManifestHeaders
    },
    default: {
      bodyMapper: Mappers.AcrErrors
    }
  },
  requestBody: Parameters.payload,
  urlParameters: [Parameters.url, Parameters.name, Parameters.reference],
  headerParameters: [Parameters.accept, Parameters.contentType],
  mediaType: "json",
  serializer
};
const deleteManifestOperationSpec: coreClient.OperationSpec = {
  path: "/v2/{name}/manifests/{reference}",
  httpMethod: "DELETE",
  responses: {
    202: {},
    default: {
      bodyMapper: Mappers.AcrErrors
    }
  },
  urlParameters: [Parameters.url, Parameters.name, Parameters.reference],
  headerParameters: [Parameters.accept],
  serializer
};
const getPropertiesOperationSpec: coreClient.OperationSpec = {
  path: "/acr/v1/{name}",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.RepositoryProperties
    },
    default: {
      bodyMapper: Mappers.AcrErrors
    }
  },
  urlParameters: [Parameters.url, Parameters.name],
  headerParameters: [Parameters.accept],
  serializer
};
const setPropertiesOperationSpec: coreClient.OperationSpec = {
  path: "/acr/v1/{name}",
  httpMethod: "PATCH",
  responses: {
    200: {},
    default: {
      bodyMapper: Mappers.AcrErrors
    }
  },
  requestBody: Parameters.value,
  urlParameters: [Parameters.url, Parameters.name],
  headerParameters: [Parameters.accept, Parameters.contentType1],
  mediaType: "json",
  serializer
};
const getTagsOperationSpec: coreClient.OperationSpec = {
  path: "/acr/v1/{name}/_tags",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.TagList,
      headersMapper: Mappers.ContainerRegistryRepositoryGetTagsHeaders
    },
    default: {
      bodyMapper: Mappers.AcrErrors
    }
  },
  queryParameters: [
    Parameters.last,
    Parameters.n,
    Parameters.orderby,
    Parameters.digest
  ],
  urlParameters: [Parameters.url, Parameters.name],
  headerParameters: [Parameters.accept],
  serializer
};
const getTagPropertiesOperationSpec: coreClient.OperationSpec = {
  path: "/acr/v1/{name}/_tags/{reference}",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.TagProperties
    },
    default: {
      bodyMapper: Mappers.AcrErrors
    }
  },
  urlParameters: [Parameters.url, Parameters.name, Parameters.reference],
  headerParameters: [Parameters.accept],
  serializer
};
const updateTagAttributesOperationSpec: coreClient.OperationSpec = {
  path: "/acr/v1/{name}/_tags/{reference}",
  httpMethod: "PATCH",
  responses: {
    200: {},
    default: {
      bodyMapper: Mappers.AcrErrors
    }
  },
  requestBody: Parameters.value,
  urlParameters: [Parameters.url, Parameters.name, Parameters.reference],
  headerParameters: [Parameters.accept, Parameters.contentType1],
  mediaType: "json",
  serializer
};
const deleteTagOperationSpec: coreClient.OperationSpec = {
  path: "/acr/v1/{name}/_tags/{reference}",
  httpMethod: "DELETE",
  responses: {
    202: {},
    default: {
      bodyMapper: Mappers.AcrErrors
    }
  },
  urlParameters: [Parameters.url, Parameters.name, Parameters.reference],
  headerParameters: [Parameters.accept],
  serializer
};
const getManifestsOperationSpec: coreClient.OperationSpec = {
  path: "/acr/v1/{name}/_manifests",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.AcrManifests,
      headersMapper: Mappers.ContainerRegistryRepositoryGetManifestsHeaders
    },
    default: {
      bodyMapper: Mappers.AcrErrors
    }
  },
  queryParameters: [Parameters.last, Parameters.n, Parameters.orderby],
  urlParameters: [Parameters.url, Parameters.name],
  headerParameters: [Parameters.accept],
  serializer
};
const getRegistryArtifactPropertiesOperationSpec: coreClient.OperationSpec = {
  path: "/acr/v1/{name}/_manifests/{digest}",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.RegistryArtifactProperties
    },
    default: {
      bodyMapper: Mappers.AcrErrors
    }
  },
  urlParameters: [Parameters.url, Parameters.name, Parameters.digest1],
  headerParameters: [Parameters.accept],
  serializer
};
const updateManifestAttributesOperationSpec: coreClient.OperationSpec = {
  path: "/acr/v1/{name}/_manifests/{digest}",
  httpMethod: "PATCH",
  responses: {
    200: {},
    default: {
      bodyMapper: Mappers.AcrErrors
    }
  },
  requestBody: Parameters.value,
  urlParameters: [Parameters.url, Parameters.name, Parameters.digest1],
  headerParameters: [Parameters.accept, Parameters.contentType1],
  mediaType: "json",
  serializer
};
const getTagsNextOperationSpec: coreClient.OperationSpec = {
  path: "{nextLink}",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.TagList,
      headersMapper: Mappers.ContainerRegistryRepositoryGetTagsNextHeaders
    },
    default: {
      bodyMapper: Mappers.AcrErrors
    }
  },
  queryParameters: [
    Parameters.last,
    Parameters.n,
    Parameters.orderby,
    Parameters.digest
  ],
  urlParameters: [Parameters.url, Parameters.name, Parameters.nextLink],
  headerParameters: [Parameters.accept],
  serializer
};
const getManifestsNextOperationSpec: coreClient.OperationSpec = {
  path: "{nextLink}",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.AcrManifests,
      headersMapper: Mappers.ContainerRegistryRepositoryGetManifestsNextHeaders
    },
    default: {
      bodyMapper: Mappers.AcrErrors
    }
  },
  queryParameters: [Parameters.last, Parameters.n, Parameters.orderby],
  urlParameters: [Parameters.url, Parameters.name, Parameters.nextLink],
  headerParameters: [Parameters.accept],
  serializer
};
