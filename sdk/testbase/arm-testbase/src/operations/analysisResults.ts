/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */

import { PagedAsyncIterableIterator } from "@azure/core-paging";
import { AnalysisResults } from "../operationsInterfaces";
import * as coreClient from "@azure/core-client";
import * as Mappers from "../models/mappers";
import * as Parameters from "../models/parameters";
import { TestBase } from "../testBase";
import {
  AnalysisResultSingletonResource,
  AnalysisResultType,
  AnalysisResultsListOptionalParams,
  AnalysisResultsListResponse,
  AnalysisResultName,
  AnalysisResultsGetOptionalParams,
  AnalysisResultsGetResponse
} from "../models";

/// <reference lib="esnext.asynciterable" />
/** Class containing AnalysisResults operations. */
export class AnalysisResultsImpl implements AnalysisResults {
  private readonly client: TestBase;

  /**
   * Initialize a new instance of the class AnalysisResults class.
   * @param client Reference to the service client
   */
  constructor(client: TestBase) {
    this.client = client;
  }

  /**
   * Lists the Analysis Results of a Test Result. The result collection will only contain one element as
   * all the data will be nested in a singleton object.
   * @param resourceGroupName The name of the resource group that contains the resource.
   * @param testBaseAccountName The resource name of the Test Base Account.
   * @param packageName The resource name of the Test Base Package.
   * @param testResultName The Test Result Name. It equals to {osName}-{TestResultId} string.
   * @param analysisResultType The type of the Analysis Result of a Test Result.
   * @param options The options parameters.
   */
  public list(
    resourceGroupName: string,
    testBaseAccountName: string,
    packageName: string,
    testResultName: string,
    analysisResultType: AnalysisResultType,
    options?: AnalysisResultsListOptionalParams
  ): PagedAsyncIterableIterator<AnalysisResultSingletonResource> {
    const iter = this.listPagingAll(
      resourceGroupName,
      testBaseAccountName,
      packageName,
      testResultName,
      analysisResultType,
      options
    );
    return {
      next() {
        return iter.next();
      },
      [Symbol.asyncIterator]() {
        return this;
      },
      byPage: () => {
        return this.listPagingPage(
          resourceGroupName,
          testBaseAccountName,
          packageName,
          testResultName,
          analysisResultType,
          options
        );
      }
    };
  }

  private async *listPagingPage(
    resourceGroupName: string,
    testBaseAccountName: string,
    packageName: string,
    testResultName: string,
    analysisResultType: AnalysisResultType,
    options?: AnalysisResultsListOptionalParams
  ): AsyncIterableIterator<AnalysisResultSingletonResource[]> {
    let result = await this._list(
      resourceGroupName,
      testBaseAccountName,
      packageName,
      testResultName,
      analysisResultType,
      options
    );
    yield result.value || [];
  }

  private async *listPagingAll(
    resourceGroupName: string,
    testBaseAccountName: string,
    packageName: string,
    testResultName: string,
    analysisResultType: AnalysisResultType,
    options?: AnalysisResultsListOptionalParams
  ): AsyncIterableIterator<AnalysisResultSingletonResource> {
    for await (const page of this.listPagingPage(
      resourceGroupName,
      testBaseAccountName,
      packageName,
      testResultName,
      analysisResultType,
      options
    )) {
      yield* page;
    }
  }

  /**
   * Lists the Analysis Results of a Test Result. The result collection will only contain one element as
   * all the data will be nested in a singleton object.
   * @param resourceGroupName The name of the resource group that contains the resource.
   * @param testBaseAccountName The resource name of the Test Base Account.
   * @param packageName The resource name of the Test Base Package.
   * @param testResultName The Test Result Name. It equals to {osName}-{TestResultId} string.
   * @param analysisResultType The type of the Analysis Result of a Test Result.
   * @param options The options parameters.
   */
  private _list(
    resourceGroupName: string,
    testBaseAccountName: string,
    packageName: string,
    testResultName: string,
    analysisResultType: AnalysisResultType,
    options?: AnalysisResultsListOptionalParams
  ): Promise<AnalysisResultsListResponse> {
    return this.client.sendOperationRequest(
      {
        resourceGroupName,
        testBaseAccountName,
        packageName,
        testResultName,
        analysisResultType,
        options
      },
      listOperationSpec
    );
  }

  /**
   * Gets an Analysis Result of a Test Result by name.
   * @param resourceGroupName The name of the resource group that contains the resource.
   * @param testBaseAccountName The resource name of the Test Base Account.
   * @param packageName The resource name of the Test Base Package.
   * @param testResultName The Test Result Name. It equals to {osName}-{TestResultId} string.
   * @param analysisResultName The name of the Analysis Result of a Test Result.
   * @param options The options parameters.
   */
  get(
    resourceGroupName: string,
    testBaseAccountName: string,
    packageName: string,
    testResultName: string,
    analysisResultName: AnalysisResultName,
    options?: AnalysisResultsGetOptionalParams
  ): Promise<AnalysisResultsGetResponse> {
    return this.client.sendOperationRequest(
      {
        resourceGroupName,
        testBaseAccountName,
        packageName,
        testResultName,
        analysisResultName,
        options
      },
      getOperationSpec
    );
  }
}
// Operation Specifications
const serializer = coreClient.createSerializer(Mappers, /* isXml */ false);

const listOperationSpec: coreClient.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.TestBase/testBaseAccounts/{testBaseAccountName}/packages/{packageName}/testResults/{testResultName}/analysisResults",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.AnalysisResultListResult
    },
    default: {
      bodyMapper: Mappers.ErrorResponse
    }
  },
  queryParameters: [Parameters.apiVersion, Parameters.analysisResultType],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.testBaseAccountName,
    Parameters.packageName,
    Parameters.testResultName
  ],
  headerParameters: [Parameters.accept],
  serializer
};
const getOperationSpec: coreClient.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.TestBase/testBaseAccounts/{testBaseAccountName}/packages/{packageName}/testResults/{testResultName}/analysisResults/{analysisResultName}",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.AnalysisResultSingletonResource
    },
    default: {
      bodyMapper: Mappers.ErrorResponse
    }
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.testBaseAccountName,
    Parameters.packageName,
    Parameters.testResultName,
    Parameters.analysisResultName
  ],
  headerParameters: [Parameters.accept],
  serializer
};
