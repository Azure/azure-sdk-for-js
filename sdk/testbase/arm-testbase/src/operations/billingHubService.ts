/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */

import { BillingHubService } from "../operationsInterfaces";
import * as coreClient from "@azure/core-client";
import * as Mappers from "../models/mappers";
import * as Parameters from "../models/parameters";
import { TestBase } from "../testBase";
import {
  BillingHubServiceGetFreeHourBalanceOptionalParams,
  BillingHubServiceGetFreeHourBalanceResponse,
  BillingHubServiceGetUsageOptionalParams,
  BillingHubServiceGetUsageResponse
} from "../models";

/** Class containing BillingHubService operations. */
export class BillingHubServiceImpl implements BillingHubService {
  private readonly client: TestBase;

  /**
   * Initialize a new instance of the class BillingHubService class.
   * @param client Reference to the service client
   */
  constructor(client: TestBase) {
    this.client = client;
  }

  /**
   * @param resourceGroupName The name of the resource group that contains the resource.
   * @param testBaseAccountName The resource name of the Test Base Account.
   * @param options The options parameters.
   */
  getFreeHourBalance(
    resourceGroupName: string,
    testBaseAccountName: string,
    options?: BillingHubServiceGetFreeHourBalanceOptionalParams
  ): Promise<BillingHubServiceGetFreeHourBalanceResponse> {
    return this.client.sendOperationRequest(
      { resourceGroupName, testBaseAccountName, options },
      getFreeHourBalanceOperationSpec
    );
  }

  /**
   * @param resourceGroupName The name of the resource group that contains the resource.
   * @param testBaseAccountName The resource name of the Test Base Account.
   * @param options The options parameters.
   */
  getUsage(
    resourceGroupName: string,
    testBaseAccountName: string,
    options?: BillingHubServiceGetUsageOptionalParams
  ): Promise<BillingHubServiceGetUsageResponse> {
    return this.client.sendOperationRequest(
      { resourceGroupName, testBaseAccountName, options },
      getUsageOperationSpec
    );
  }
}
// Operation Specifications
const serializer = coreClient.createSerializer(Mappers, /* isXml */ false);

const getFreeHourBalanceOperationSpec: coreClient.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.TestBase/testBaseAccounts/{testBaseAccountName}/getFreeHourBalance",
  httpMethod: "POST",
  responses: {
    200: {
      bodyMapper: Mappers.BillingHubGetFreeHourBalanceResponse
    },
    default: {
      bodyMapper: Mappers.ErrorResponse
    }
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.testBaseAccountName
  ],
  headerParameters: [Parameters.accept],
  serializer
};
const getUsageOperationSpec: coreClient.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.TestBase/testBaseAccounts/{testBaseAccountName}/getUsage",
  httpMethod: "POST",
  responses: {
    200: {
      bodyMapper: Mappers.BillingHubGetUsageResponse
    },
    default: {
      bodyMapper: Mappers.ErrorResponse
    }
  },
  requestBody: Parameters.getUsageRequest,
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.testBaseAccountName
  ],
  headerParameters: [Parameters.accept, Parameters.contentType],
  mediaType: "json",
  serializer
};
