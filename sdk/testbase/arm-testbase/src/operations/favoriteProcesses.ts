/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */

import { PagedAsyncIterableIterator } from "@azure/core-paging";
import { FavoriteProcesses } from "../operationsInterfaces";
import * as coreClient from "@azure/core-client";
import * as Mappers from "../models/mappers";
import * as Parameters from "../models/parameters";
import { TestBase } from "../testBase";
import {
  FavoriteProcessResource,
  FavoriteProcessesListNextOptionalParams,
  FavoriteProcessesListOptionalParams,
  FavoriteProcessesListResponse,
  FavoriteProcessesCreateOptionalParams,
  FavoriteProcessesCreateResponse,
  FavoriteProcessesDeleteOptionalParams,
  FavoriteProcessesGetOptionalParams,
  FavoriteProcessesGetResponse,
  FavoriteProcessesListNextResponse
} from "../models";

/// <reference lib="esnext.asynciterable" />
/** Class containing FavoriteProcesses operations. */
export class FavoriteProcessesImpl implements FavoriteProcesses {
  private readonly client: TestBase;

  /**
   * Initialize a new instance of the class FavoriteProcesses class.
   * @param client Reference to the service client
   */
  constructor(client: TestBase) {
    this.client = client;
  }

  /**
   * Lists the favorite processes for a specific package.
   * @param resourceGroupName The name of the resource group that contains the resource.
   * @param testBaseAccountName The resource name of the Test Base Account.
   * @param packageName The resource name of the Test Base Package.
   * @param options The options parameters.
   */
  public list(
    resourceGroupName: string,
    testBaseAccountName: string,
    packageName: string,
    options?: FavoriteProcessesListOptionalParams
  ): PagedAsyncIterableIterator<FavoriteProcessResource> {
    const iter = this.listPagingAll(
      resourceGroupName,
      testBaseAccountName,
      packageName,
      options
    );
    return {
      next() {
        return iter.next();
      },
      [Symbol.asyncIterator]() {
        return this;
      },
      byPage: () => {
        return this.listPagingPage(
          resourceGroupName,
          testBaseAccountName,
          packageName,
          options
        );
      }
    };
  }

  private async *listPagingPage(
    resourceGroupName: string,
    testBaseAccountName: string,
    packageName: string,
    options?: FavoriteProcessesListOptionalParams
  ): AsyncIterableIterator<FavoriteProcessResource[]> {
    let result = await this._list(
      resourceGroupName,
      testBaseAccountName,
      packageName,
      options
    );
    yield result.value || [];
    let continuationToken = result.nextLink;
    while (continuationToken) {
      result = await this._listNext(
        resourceGroupName,
        testBaseAccountName,
        packageName,
        continuationToken,
        options
      );
      continuationToken = result.nextLink;
      yield result.value || [];
    }
  }

  private async *listPagingAll(
    resourceGroupName: string,
    testBaseAccountName: string,
    packageName: string,
    options?: FavoriteProcessesListOptionalParams
  ): AsyncIterableIterator<FavoriteProcessResource> {
    for await (const page of this.listPagingPage(
      resourceGroupName,
      testBaseAccountName,
      packageName,
      options
    )) {
      yield* page;
    }
  }

  /**
   * Lists the favorite processes for a specific package.
   * @param resourceGroupName The name of the resource group that contains the resource.
   * @param testBaseAccountName The resource name of the Test Base Account.
   * @param packageName The resource name of the Test Base Package.
   * @param options The options parameters.
   */
  private _list(
    resourceGroupName: string,
    testBaseAccountName: string,
    packageName: string,
    options?: FavoriteProcessesListOptionalParams
  ): Promise<FavoriteProcessesListResponse> {
    return this.client.sendOperationRequest(
      { resourceGroupName, testBaseAccountName, packageName, options },
      listOperationSpec
    );
  }

  /**
   * Create or replace a favorite process for a Test Base Package.
   * @param resourceGroupName The name of the resource group that contains the resource.
   * @param testBaseAccountName The resource name of the Test Base Account.
   * @param packageName The resource name of the Test Base Package.
   * @param favoriteProcessResourceName The resource name of a favorite process in a package. If the
   *                                    process name contains characters that are not allowed in Azure Resource Name, we use
   *                                    'actualProcessName' in request body to submit the name.
   * @param parameters Parameters supplied to create a favorite process in a package.
   * @param options The options parameters.
   */
  create(
    resourceGroupName: string,
    testBaseAccountName: string,
    packageName: string,
    favoriteProcessResourceName: string,
    parameters: FavoriteProcessResource,
    options?: FavoriteProcessesCreateOptionalParams
  ): Promise<FavoriteProcessesCreateResponse> {
    return this.client.sendOperationRequest(
      {
        resourceGroupName,
        testBaseAccountName,
        packageName,
        favoriteProcessResourceName,
        parameters,
        options
      },
      createOperationSpec
    );
  }

  /**
   * Deletes a favorite process for a specific package.
   * @param resourceGroupName The name of the resource group that contains the resource.
   * @param testBaseAccountName The resource name of the Test Base Account.
   * @param packageName The resource name of the Test Base Package.
   * @param favoriteProcessResourceName The resource name of a favorite process in a package. If the
   *                                    process name contains characters that are not allowed in Azure Resource Name, we use
   *                                    'actualProcessName' in request body to submit the name.
   * @param options The options parameters.
   */
  delete(
    resourceGroupName: string,
    testBaseAccountName: string,
    packageName: string,
    favoriteProcessResourceName: string,
    options?: FavoriteProcessesDeleteOptionalParams
  ): Promise<void> {
    return this.client.sendOperationRequest(
      {
        resourceGroupName,
        testBaseAccountName,
        packageName,
        favoriteProcessResourceName,
        options
      },
      deleteOperationSpec
    );
  }

  /**
   * Gets a favorite process for a Test Base Package.
   * @param resourceGroupName The name of the resource group that contains the resource.
   * @param testBaseAccountName The resource name of the Test Base Account.
   * @param packageName The resource name of the Test Base Package.
   * @param favoriteProcessResourceName The resource name of a favorite process in a package. If the
   *                                    process name contains characters that are not allowed in Azure Resource Name, we use
   *                                    'actualProcessName' in request body to submit the name.
   * @param options The options parameters.
   */
  get(
    resourceGroupName: string,
    testBaseAccountName: string,
    packageName: string,
    favoriteProcessResourceName: string,
    options?: FavoriteProcessesGetOptionalParams
  ): Promise<FavoriteProcessesGetResponse> {
    return this.client.sendOperationRequest(
      {
        resourceGroupName,
        testBaseAccountName,
        packageName,
        favoriteProcessResourceName,
        options
      },
      getOperationSpec
    );
  }

  /**
   * ListNext
   * @param resourceGroupName The name of the resource group that contains the resource.
   * @param testBaseAccountName The resource name of the Test Base Account.
   * @param packageName The resource name of the Test Base Package.
   * @param nextLink The nextLink from the previous successful call to the List method.
   * @param options The options parameters.
   */
  private _listNext(
    resourceGroupName: string,
    testBaseAccountName: string,
    packageName: string,
    nextLink: string,
    options?: FavoriteProcessesListNextOptionalParams
  ): Promise<FavoriteProcessesListNextResponse> {
    return this.client.sendOperationRequest(
      {
        resourceGroupName,
        testBaseAccountName,
        packageName,
        nextLink,
        options
      },
      listNextOperationSpec
    );
  }
}
// Operation Specifications
const serializer = coreClient.createSerializer(Mappers, /* isXml */ false);

const listOperationSpec: coreClient.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.TestBase/testBaseAccounts/{testBaseAccountName}/packages/{packageName}/favoriteProcesses",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.FavoriteProcessListResult
    },
    default: {
      bodyMapper: Mappers.ErrorResponse
    }
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.testBaseAccountName,
    Parameters.packageName
  ],
  headerParameters: [Parameters.accept],
  serializer
};
const createOperationSpec: coreClient.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.TestBase/testBaseAccounts/{testBaseAccountName}/packages/{packageName}/favoriteProcesses/{favoriteProcessResourceName}",
  httpMethod: "PUT",
  responses: {
    200: {
      bodyMapper: Mappers.FavoriteProcessResource
    },
    default: {
      bodyMapper: Mappers.ErrorResponse
    }
  },
  requestBody: Parameters.parameters6,
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.testBaseAccountName,
    Parameters.packageName,
    Parameters.favoriteProcessResourceName
  ],
  headerParameters: [Parameters.accept, Parameters.contentType],
  mediaType: "json",
  serializer
};
const deleteOperationSpec: coreClient.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.TestBase/testBaseAccounts/{testBaseAccountName}/packages/{packageName}/favoriteProcesses/{favoriteProcessResourceName}",
  httpMethod: "DELETE",
  responses: {
    200: {},
    204: {},
    default: {
      bodyMapper: Mappers.ErrorResponse
    }
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.testBaseAccountName,
    Parameters.packageName,
    Parameters.favoriteProcessResourceName
  ],
  headerParameters: [Parameters.accept],
  serializer
};
const getOperationSpec: coreClient.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.TestBase/testBaseAccounts/{testBaseAccountName}/packages/{packageName}/favoriteProcesses/{favoriteProcessResourceName}",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.FavoriteProcessResource
    },
    default: {
      bodyMapper: Mappers.ErrorResponse
    }
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.testBaseAccountName,
    Parameters.packageName,
    Parameters.favoriteProcessResourceName
  ],
  headerParameters: [Parameters.accept],
  serializer
};
const listNextOperationSpec: coreClient.OperationSpec = {
  path: "{nextLink}",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.FavoriteProcessListResult
    },
    default: {
      bodyMapper: Mappers.ErrorResponse
    }
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.nextLink,
    Parameters.resourceGroupName,
    Parameters.testBaseAccountName,
    Parameters.packageName
  ],
  headerParameters: [Parameters.accept],
  serializer
};
