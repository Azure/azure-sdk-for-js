/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */

import { PagedAsyncIterableIterator } from "@azure/core-paging";
import { EmailEvents } from "../operationsInterfaces";
import * as coreClient from "@azure/core-client";
import * as Mappers from "../models/mappers";
import * as Parameters from "../models/parameters";
import { TestBase } from "../testBase";
import {
  EmailEventResource,
  EmailEventsListNextOptionalParams,
  EmailEventsListOptionalParams,
  EmailEventsListResponse,
  EmailEventsGetOptionalParams,
  EmailEventsGetResponse,
  EmailEventsListNextResponse
} from "../models";

/// <reference lib="esnext.asynciterable" />
/** Class containing EmailEvents operations. */
export class EmailEventsImpl implements EmailEvents {
  private readonly client: TestBase;

  /**
   * Initialize a new instance of the class EmailEvents class.
   * @param client Reference to the service client
   */
  constructor(client: TestBase) {
    this.client = client;
  }

  /**
   * Lists all the email events of a Test Base Account.
   * @param resourceGroupName The name of the resource group that contains the resource.
   * @param testBaseAccountName The resource name of the Test Base Account.
   * @param options The options parameters.
   */
  public list(
    resourceGroupName: string,
    testBaseAccountName: string,
    options?: EmailEventsListOptionalParams
  ): PagedAsyncIterableIterator<EmailEventResource> {
    const iter = this.listPagingAll(
      resourceGroupName,
      testBaseAccountName,
      options
    );
    return {
      next() {
        return iter.next();
      },
      [Symbol.asyncIterator]() {
        return this;
      },
      byPage: () => {
        return this.listPagingPage(
          resourceGroupName,
          testBaseAccountName,
          options
        );
      }
    };
  }

  private async *listPagingPage(
    resourceGroupName: string,
    testBaseAccountName: string,
    options?: EmailEventsListOptionalParams
  ): AsyncIterableIterator<EmailEventResource[]> {
    let result = await this._list(
      resourceGroupName,
      testBaseAccountName,
      options
    );
    yield result.value || [];
    let continuationToken = result.nextLink;
    while (continuationToken) {
      result = await this._listNext(
        resourceGroupName,
        testBaseAccountName,
        continuationToken,
        options
      );
      continuationToken = result.nextLink;
      yield result.value || [];
    }
  }

  private async *listPagingAll(
    resourceGroupName: string,
    testBaseAccountName: string,
    options?: EmailEventsListOptionalParams
  ): AsyncIterableIterator<EmailEventResource> {
    for await (const page of this.listPagingPage(
      resourceGroupName,
      testBaseAccountName,
      options
    )) {
      yield* page;
    }
  }

  /**
   * Lists all the email events of a Test Base Account.
   * @param resourceGroupName The name of the resource group that contains the resource.
   * @param testBaseAccountName The resource name of the Test Base Account.
   * @param options The options parameters.
   */
  private _list(
    resourceGroupName: string,
    testBaseAccountName: string,
    options?: EmailEventsListOptionalParams
  ): Promise<EmailEventsListResponse> {
    return this.client.sendOperationRequest(
      { resourceGroupName, testBaseAccountName, options },
      listOperationSpec
    );
  }

  /**
   * Gets a email event of a Test Base Account.
   * @param resourceGroupName The name of the resource group that contains the resource.
   * @param testBaseAccountName The resource name of the Test Base Account.
   * @param emailEventResourceName The resource name of an email event.
   * @param options The options parameters.
   */
  get(
    resourceGroupName: string,
    testBaseAccountName: string,
    emailEventResourceName: string,
    options?: EmailEventsGetOptionalParams
  ): Promise<EmailEventsGetResponse> {
    return this.client.sendOperationRequest(
      {
        resourceGroupName,
        testBaseAccountName,
        emailEventResourceName,
        options
      },
      getOperationSpec
    );
  }

  /**
   * ListNext
   * @param resourceGroupName The name of the resource group that contains the resource.
   * @param testBaseAccountName The resource name of the Test Base Account.
   * @param nextLink The nextLink from the previous successful call to the List method.
   * @param options The options parameters.
   */
  private _listNext(
    resourceGroupName: string,
    testBaseAccountName: string,
    nextLink: string,
    options?: EmailEventsListNextOptionalParams
  ): Promise<EmailEventsListNextResponse> {
    return this.client.sendOperationRequest(
      { resourceGroupName, testBaseAccountName, nextLink, options },
      listNextOperationSpec
    );
  }
}
// Operation Specifications
const serializer = coreClient.createSerializer(Mappers, /* isXml */ false);

const listOperationSpec: coreClient.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.TestBase/testBaseAccounts/{testBaseAccountName}/emailEvents",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.EmailEventListResult
    },
    default: {
      bodyMapper: Mappers.ErrorResponse
    }
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.testBaseAccountName
  ],
  headerParameters: [Parameters.accept],
  serializer
};
const getOperationSpec: coreClient.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.TestBase/testBaseAccounts/{testBaseAccountName}/emailEvents/{emailEventResourceName}",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.EmailEventResource
    },
    default: {
      bodyMapper: Mappers.ErrorResponse
    }
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.testBaseAccountName,
    Parameters.emailEventResourceName
  ],
  headerParameters: [Parameters.accept],
  serializer
};
const listNextOperationSpec: coreClient.OperationSpec = {
  path: "{nextLink}",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.EmailEventListResult
    },
    default: {
      bodyMapper: Mappers.ErrorResponse
    }
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.nextLink,
    Parameters.resourceGroupName,
    Parameters.testBaseAccountName
  ],
  headerParameters: [Parameters.accept],
  serializer
};
