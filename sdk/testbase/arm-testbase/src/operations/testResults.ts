/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */

import { PagedAsyncIterableIterator } from "@azure/core-paging";
import { TestResults } from "../operationsInterfaces";
import * as coreClient from "@azure/core-client";
import * as Mappers from "../models/mappers";
import * as Parameters from "../models/parameters";
import { TestBase } from "../testBase";
import {
  TestResultResource,
  OsUpdateType,
  TestResultsListNextOptionalParams,
  TestResultsListOptionalParams,
  TestResultsListResponse,
  TestResultsGetOptionalParams,
  TestResultsGetResponse,
  TestResultsGetDownloadURLOptionalParams,
  TestResultsGetDownloadURLResponse,
  TestResultsGetVideoDownloadURLOptionalParams,
  TestResultsGetVideoDownloadURLResponse,
  TestResultConsoleLogDownloadURLParameters,
  TestResultsGetConsoleLogDownloadURLOptionalParams,
  TestResultsGetConsoleLogDownloadURLResponse,
  TestResultsListNextResponse
} from "../models";

/// <reference lib="esnext.asynciterable" />
/** Class containing TestResults operations. */
export class TestResultsImpl implements TestResults {
  private readonly client: TestBase;

  /**
   * Initialize a new instance of the class TestResults class.
   * @param client Reference to the service client
   */
  constructor(client: TestBase) {
    this.client = client;
  }

  /**
   * Lists all the Test Results with specified OS Update type for a Test Base Package. Can be filtered by
   * osName, releaseName, flightingRing, buildVersion, buildRevision.
   * @param resourceGroupName The name of the resource group that contains the resource.
   * @param testBaseAccountName The resource name of the Test Base Account.
   * @param packageName The resource name of the Test Base Package.
   * @param osUpdateType The type of the OS Update.
   * @param options The options parameters.
   */
  public list(
    resourceGroupName: string,
    testBaseAccountName: string,
    packageName: string,
    osUpdateType: OsUpdateType,
    options?: TestResultsListOptionalParams
  ): PagedAsyncIterableIterator<TestResultResource> {
    const iter = this.listPagingAll(
      resourceGroupName,
      testBaseAccountName,
      packageName,
      osUpdateType,
      options
    );
    return {
      next() {
        return iter.next();
      },
      [Symbol.asyncIterator]() {
        return this;
      },
      byPage: () => {
        return this.listPagingPage(
          resourceGroupName,
          testBaseAccountName,
          packageName,
          osUpdateType,
          options
        );
      }
    };
  }

  private async *listPagingPage(
    resourceGroupName: string,
    testBaseAccountName: string,
    packageName: string,
    osUpdateType: OsUpdateType,
    options?: TestResultsListOptionalParams
  ): AsyncIterableIterator<TestResultResource[]> {
    let result = await this._list(
      resourceGroupName,
      testBaseAccountName,
      packageName,
      osUpdateType,
      options
    );
    yield result.value || [];
    let continuationToken = result.nextLink;
    while (continuationToken) {
      result = await this._listNext(
        resourceGroupName,
        testBaseAccountName,
        packageName,
        osUpdateType,
        continuationToken,
        options
      );
      continuationToken = result.nextLink;
      yield result.value || [];
    }
  }

  private async *listPagingAll(
    resourceGroupName: string,
    testBaseAccountName: string,
    packageName: string,
    osUpdateType: OsUpdateType,
    options?: TestResultsListOptionalParams
  ): AsyncIterableIterator<TestResultResource> {
    for await (const page of this.listPagingPage(
      resourceGroupName,
      testBaseAccountName,
      packageName,
      osUpdateType,
      options
    )) {
      yield* page;
    }
  }

  /**
   * Lists all the Test Results with specified OS Update type for a Test Base Package. Can be filtered by
   * osName, releaseName, flightingRing, buildVersion, buildRevision.
   * @param resourceGroupName The name of the resource group that contains the resource.
   * @param testBaseAccountName The resource name of the Test Base Account.
   * @param packageName The resource name of the Test Base Package.
   * @param osUpdateType The type of the OS Update.
   * @param options The options parameters.
   */
  private _list(
    resourceGroupName: string,
    testBaseAccountName: string,
    packageName: string,
    osUpdateType: OsUpdateType,
    options?: TestResultsListOptionalParams
  ): Promise<TestResultsListResponse> {
    return this.client.sendOperationRequest(
      {
        resourceGroupName,
        testBaseAccountName,
        packageName,
        osUpdateType,
        options
      },
      listOperationSpec
    );
  }

  /**
   * Get the Test Result by Id with specified OS Update type for a Test Base Package.
   * @param resourceGroupName The name of the resource group that contains the resource.
   * @param testBaseAccountName The resource name of the Test Base Account.
   * @param packageName The resource name of the Test Base Package.
   * @param testResultName The Test Result Name. It equals to TestResult-{TestResultId} string.
   * @param options The options parameters.
   */
  get(
    resourceGroupName: string,
    testBaseAccountName: string,
    packageName: string,
    testResultName: string,
    options?: TestResultsGetOptionalParams
  ): Promise<TestResultsGetResponse> {
    return this.client.sendOperationRequest(
      {
        resourceGroupName,
        testBaseAccountName,
        packageName,
        testResultName,
        options
      },
      getOperationSpec
    );
  }

  /**
   * Gets the download URL of the test result.
   * @param resourceGroupName The name of the resource group that contains the resource.
   * @param testBaseAccountName The resource name of the Test Base Account.
   * @param packageName The resource name of the Test Base Package.
   * @param testResultName The Test Result Name. It equals to TestResult-{TestResultId} string.
   * @param options The options parameters.
   */
  getDownloadURL(
    resourceGroupName: string,
    testBaseAccountName: string,
    packageName: string,
    testResultName: string,
    options?: TestResultsGetDownloadURLOptionalParams
  ): Promise<TestResultsGetDownloadURLResponse> {
    return this.client.sendOperationRequest(
      {
        resourceGroupName,
        testBaseAccountName,
        packageName,
        testResultName,
        options
      },
      getDownloadURLOperationSpec
    );
  }

  /**
   * Gets the download URL of the test execution screen recording.
   * @param resourceGroupName The name of the resource group that contains the resource.
   * @param testBaseAccountName The resource name of the Test Base Account.
   * @param packageName The resource name of the Test Base Package.
   * @param testResultName The Test Result Name. It equals to TestResult-{TestResultId} string.
   * @param options The options parameters.
   */
  getVideoDownloadURL(
    resourceGroupName: string,
    testBaseAccountName: string,
    packageName: string,
    testResultName: string,
    options?: TestResultsGetVideoDownloadURLOptionalParams
  ): Promise<TestResultsGetVideoDownloadURLResponse> {
    return this.client.sendOperationRequest(
      {
        resourceGroupName,
        testBaseAccountName,
        packageName,
        testResultName,
        options
      },
      getVideoDownloadURLOperationSpec
    );
  }

  /**
   * Gets the download URL of the test execution console log file.
   * @param resourceGroupName The name of the resource group that contains the resource.
   * @param testBaseAccountName The resource name of the Test Base Account.
   * @param packageName The resource name of the Test Base Package.
   * @param testResultName The Test Result Name. It equals to TestResult-{TestResultId} string.
   * @param parameters Parameters supplied to the Test Result GetConsoleLogDownloadUrl operation.
   * @param options The options parameters.
   */
  getConsoleLogDownloadURL(
    resourceGroupName: string,
    testBaseAccountName: string,
    packageName: string,
    testResultName: string,
    parameters: TestResultConsoleLogDownloadURLParameters,
    options?: TestResultsGetConsoleLogDownloadURLOptionalParams
  ): Promise<TestResultsGetConsoleLogDownloadURLResponse> {
    return this.client.sendOperationRequest(
      {
        resourceGroupName,
        testBaseAccountName,
        packageName,
        testResultName,
        parameters,
        options
      },
      getConsoleLogDownloadURLOperationSpec
    );
  }

  /**
   * ListNext
   * @param resourceGroupName The name of the resource group that contains the resource.
   * @param testBaseAccountName The resource name of the Test Base Account.
   * @param packageName The resource name of the Test Base Package.
   * @param osUpdateType The type of the OS Update.
   * @param nextLink The nextLink from the previous successful call to the List method.
   * @param options The options parameters.
   */
  private _listNext(
    resourceGroupName: string,
    testBaseAccountName: string,
    packageName: string,
    osUpdateType: OsUpdateType,
    nextLink: string,
    options?: TestResultsListNextOptionalParams
  ): Promise<TestResultsListNextResponse> {
    return this.client.sendOperationRequest(
      {
        resourceGroupName,
        testBaseAccountName,
        packageName,
        osUpdateType,
        nextLink,
        options
      },
      listNextOperationSpec
    );
  }
}
// Operation Specifications
const serializer = coreClient.createSerializer(Mappers, /* isXml */ false);

const listOperationSpec: coreClient.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.TestBase/testBaseAccounts/{testBaseAccountName}/packages/{packageName}/testResults",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.TestResultListResult
    },
    default: {
      bodyMapper: Mappers.ErrorResponse
    }
  },
  queryParameters: [
    Parameters.apiVersion,
    Parameters.filter,
    Parameters.osUpdateType
  ],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.testBaseAccountName,
    Parameters.packageName
  ],
  headerParameters: [Parameters.accept],
  serializer
};
const getOperationSpec: coreClient.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.TestBase/testBaseAccounts/{testBaseAccountName}/packages/{packageName}/testResults/{testResultName}",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.TestResultResource
    },
    default: {
      bodyMapper: Mappers.ErrorResponse
    }
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.testBaseAccountName,
    Parameters.packageName,
    Parameters.testResultName
  ],
  headerParameters: [Parameters.accept],
  serializer
};
const getDownloadURLOperationSpec: coreClient.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.TestBase/testBaseAccounts/{testBaseAccountName}/packages/{packageName}/testResults/{testResultName}/getDownloadUrl",
  httpMethod: "POST",
  responses: {
    200: {
      bodyMapper: Mappers.DownloadURLResponse
    },
    default: {
      bodyMapper: Mappers.ErrorResponse
    }
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.testBaseAccountName,
    Parameters.packageName,
    Parameters.testResultName
  ],
  headerParameters: [Parameters.accept],
  serializer
};
const getVideoDownloadURLOperationSpec: coreClient.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.TestBase/testBaseAccounts/{testBaseAccountName}/packages/{packageName}/testResults/{testResultName}/getVideoDownloadUrl",
  httpMethod: "POST",
  responses: {
    200: {
      bodyMapper: Mappers.DownloadURLResponse
    },
    default: {
      bodyMapper: Mappers.ErrorResponse
    }
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.testBaseAccountName,
    Parameters.packageName,
    Parameters.testResultName
  ],
  headerParameters: [Parameters.accept],
  serializer
};
const getConsoleLogDownloadURLOperationSpec: coreClient.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.TestBase/testBaseAccounts/{testBaseAccountName}/packages/{packageName}/testResults/{testResultName}/getConsoleLogDownloadUrl",
  httpMethod: "POST",
  responses: {
    200: {
      bodyMapper: Mappers.DownloadURLResponse
    },
    default: {
      bodyMapper: Mappers.ErrorResponse
    }
  },
  requestBody: Parameters.parameters7,
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.testBaseAccountName,
    Parameters.packageName,
    Parameters.testResultName
  ],
  headerParameters: [Parameters.accept, Parameters.contentType],
  mediaType: "json",
  serializer
};
const listNextOperationSpec: coreClient.OperationSpec = {
  path: "{nextLink}",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.TestResultListResult
    },
    default: {
      bodyMapper: Mappers.ErrorResponse
    }
  },
  queryParameters: [
    Parameters.apiVersion,
    Parameters.filter,
    Parameters.osUpdateType
  ],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.nextLink,
    Parameters.resourceGroupName,
    Parameters.testBaseAccountName,
    Parameters.packageName
  ],
  headerParameters: [Parameters.accept],
  serializer
};
