/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is
 * regenerated.
 */

import * as msRest from "@azure/ms-rest-js";
import * as msRestAzure from "@azure/ms-rest-azure-js";
import * as Models from "../models";
import * as Mappers from "../models/testBaseAccountMappers";
import * as Parameters from "../models/parameters";
import { RESTAPIforTestBaseContext } from "../rESTAPIforTestBaseContext";

/** Class representing a TestBaseAccount. */
export class TestBaseAccount {
  private readonly client: RESTAPIforTestBaseContext;

  /**
   * Create a TestBaseAccount.
   * @param {RESTAPIforTestBaseContext} client Reference to the service client.
   */
  constructor(client: RESTAPIforTestBaseContext) {
    this.client = client;
  }

  /**
   * Create or replace (overwrite/recreate, with potential downtime) a Test Base Account in the
   * specified subscription.
   * @param parameters Parameters supplied to create a Test Base Account.
   * @param resourceGroupName The name of the resource group that contains the resource.
   * @param testBaseAccountName The resource name of the Test Base Account.
   * @param [options] The optional parameters
   * @returns Promise<Models.TestBaseAccountCreateResponse>
   */
  create(parameters: Models.TestBaseAccountResource, resourceGroupName: string, testBaseAccountName: string, options?: Models.TestBaseAccountCreateOptionalParams): Promise<Models.TestBaseAccountCreateResponse> {
    return this.beginCreate(parameters,resourceGroupName,testBaseAccountName,options)
      .then(lroPoller => lroPoller.pollUntilFinished()) as Promise<Models.TestBaseAccountCreateResponse>;
  }

  /**
   * Update an existing Test Base Account.
   * @param parameters Parameters supplied to update a Test Base Account.
   * @param resourceGroupName The name of the resource group that contains the resource.
   * @param testBaseAccountName The resource name of the Test Base Account.
   * @param [options] The optional parameters
   * @returns Promise<Models.TestBaseAccountUpdateResponse>
   */
  update(parameters: Models.TestBaseAccountUpdateParameters, resourceGroupName: string, testBaseAccountName: string, options?: msRest.RequestOptionsBase): Promise<Models.TestBaseAccountUpdateResponse> {
    return this.beginUpdate(parameters,resourceGroupName,testBaseAccountName,options)
      .then(lroPoller => lroPoller.pollUntilFinished()) as Promise<Models.TestBaseAccountUpdateResponse>;
  }

  /**
   * Deletes a Test Base Account.
   * @param resourceGroupName The name of the resource group that contains the resource.
   * @param testBaseAccountName The resource name of the Test Base Account.
   * @param [options] The optional parameters
   * @returns Promise<Models.TestBaseAccountDeleteResponse>
   */
  deleteMethod(resourceGroupName: string, testBaseAccountName: string, options?: msRest.RequestOptionsBase): Promise<Models.TestBaseAccountDeleteResponse> {
    return this.beginDeleteMethod(resourceGroupName,testBaseAccountName,options)
      .then(lroPoller => lroPoller.pollUntilFinished()) as Promise<Models.TestBaseAccountDeleteResponse>;
  }

  /**
   * Gets a Test Base Account.
   * @param resourceGroupName The name of the resource group that contains the resource.
   * @param testBaseAccountName The resource name of the Test Base Account.
   * @param [options] The optional parameters
   * @returns Promise<Models.TestBaseAccountGetResponse>
   */
  get(resourceGroupName: string, testBaseAccountName: string, options?: msRest.RequestOptionsBase): Promise<Models.TestBaseAccountGetResponse>;
  /**
   * @param resourceGroupName The name of the resource group that contains the resource.
   * @param testBaseAccountName The resource name of the Test Base Account.
   * @param callback The callback
   */
  get(resourceGroupName: string, testBaseAccountName: string, callback: msRest.ServiceCallback<Models.TestBaseAccountResource>): void;
  /**
   * @param resourceGroupName The name of the resource group that contains the resource.
   * @param testBaseAccountName The resource name of the Test Base Account.
   * @param options The optional parameters
   * @param callback The callback
   */
  get(resourceGroupName: string, testBaseAccountName: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.TestBaseAccountResource>): void;
  get(resourceGroupName: string, testBaseAccountName: string, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<Models.TestBaseAccountResource>, callback?: msRest.ServiceCallback<Models.TestBaseAccountResource>): Promise<Models.TestBaseAccountGetResponse> {
    return this.client.sendOperationRequest(
      {
        resourceGroupName,
        testBaseAccountName,
        options
      },
      getOperationSpec,
      callback) as Promise<Models.TestBaseAccountGetResponse>;
  }

  /**
   * Offboard a Test Base Account.
   * @param resourceGroupName The name of the resource group that contains the resource.
   * @param testBaseAccountName The resource name of the Test Base Account.
   * @param [options] The optional parameters
   * @returns Promise<Models.TestBaseAccountOffboardResponse>
   */
  offboard(resourceGroupName: string, testBaseAccountName: string, options?: msRest.RequestOptionsBase): Promise<Models.TestBaseAccountOffboardResponse> {
    return this.beginOffboard(resourceGroupName,testBaseAccountName,options)
      .then(lroPoller => lroPoller.pollUntilFinished()) as Promise<Models.TestBaseAccountOffboardResponse>;
  }

  /**
   * Create or replace (overwrite/recreate, with potential downtime) a Test Base Account in the
   * specified subscription.
   * @param parameters Parameters supplied to create a Test Base Account.
   * @param resourceGroupName The name of the resource group that contains the resource.
   * @param testBaseAccountName The resource name of the Test Base Account.
   * @param [options] The optional parameters
   * @returns Promise<msRestAzure.LROPoller>
   */
  beginCreate(parameters: Models.TestBaseAccountResource, resourceGroupName: string, testBaseAccountName: string, options?: Models.TestBaseAccountBeginCreateOptionalParams): Promise<msRestAzure.LROPoller> {
    return this.client.sendLRORequest(
      {
        parameters,
        resourceGroupName,
        testBaseAccountName,
        options
      },
      beginCreateOperationSpec,
      options);
  }

  /**
   * Update an existing Test Base Account.
   * @param parameters Parameters supplied to update a Test Base Account.
   * @param resourceGroupName The name of the resource group that contains the resource.
   * @param testBaseAccountName The resource name of the Test Base Account.
   * @param [options] The optional parameters
   * @returns Promise<msRestAzure.LROPoller>
   */
  beginUpdate(parameters: Models.TestBaseAccountUpdateParameters, resourceGroupName: string, testBaseAccountName: string, options?: msRest.RequestOptionsBase): Promise<msRestAzure.LROPoller> {
    return this.client.sendLRORequest(
      {
        parameters,
        resourceGroupName,
        testBaseAccountName,
        options
      },
      beginUpdateOperationSpec,
      options);
  }

  /**
   * Deletes a Test Base Account.
   * @param resourceGroupName The name of the resource group that contains the resource.
   * @param testBaseAccountName The resource name of the Test Base Account.
   * @param [options] The optional parameters
   * @returns Promise<msRestAzure.LROPoller>
   */
  beginDeleteMethod(resourceGroupName: string, testBaseAccountName: string, options?: msRest.RequestOptionsBase): Promise<msRestAzure.LROPoller> {
    return this.client.sendLRORequest(
      {
        resourceGroupName,
        testBaseAccountName,
        options
      },
      beginDeleteMethodOperationSpec,
      options);
  }

  /**
   * Offboard a Test Base Account.
   * @param resourceGroupName The name of the resource group that contains the resource.
   * @param testBaseAccountName The resource name of the Test Base Account.
   * @param [options] The optional parameters
   * @returns Promise<msRestAzure.LROPoller>
   */
  beginOffboard(resourceGroupName: string, testBaseAccountName: string, options?: msRest.RequestOptionsBase): Promise<msRestAzure.LROPoller> {
    return this.client.sendLRORequest(
      {
        resourceGroupName,
        testBaseAccountName,
        options
      },
      beginOffboardOperationSpec,
      options);
  }
}

// Operation Specifications
const serializer = new msRest.Serializer(Mappers);
const getOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.TestBase/testBaseAccounts/{testBaseAccountName}",
  urlParameters: [
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.testBaseAccountName
  ],
  queryParameters: [
    Parameters.apiVersion
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    200: {
      bodyMapper: Mappers.TestBaseAccountResource
    },
    default: {
      bodyMapper: Mappers.ErrorResponse
    }
  },
  serializer
};

const beginCreateOperationSpec: msRest.OperationSpec = {
  httpMethod: "PUT",
  path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.TestBase/testBaseAccounts/{testBaseAccountName}",
  urlParameters: [
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.testBaseAccountName
  ],
  queryParameters: [
    Parameters.restore,
    Parameters.apiVersion
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  requestBody: {
    parameterPath: "parameters",
    mapper: {
      ...Mappers.TestBaseAccountResource,
      required: true
    }
  },
  responses: {
    200: {
      bodyMapper: Mappers.TestBaseAccountResource,
      headersMapper: Mappers.TestBaseAccountCreateHeaders
    },
    201: {
      bodyMapper: Mappers.TestBaseAccountResource,
      headersMapper: Mappers.TestBaseAccountCreateHeaders
    },
    default: {
      bodyMapper: Mappers.ErrorResponse,
      headersMapper: Mappers.TestBaseAccountCreateHeaders
    }
  },
  serializer
};

const beginUpdateOperationSpec: msRest.OperationSpec = {
  httpMethod: "PATCH",
  path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.TestBase/testBaseAccounts/{testBaseAccountName}",
  urlParameters: [
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.testBaseAccountName
  ],
  queryParameters: [
    Parameters.apiVersion
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  requestBody: {
    parameterPath: "parameters",
    mapper: {
      ...Mappers.TestBaseAccountUpdateParameters,
      required: true
    }
  },
  responses: {
    200: {
      bodyMapper: Mappers.TestBaseAccountResource,
      headersMapper: Mappers.TestBaseAccountUpdateHeaders
    },
    201: {
      headersMapper: Mappers.TestBaseAccountUpdateHeaders
    },
    202: {
      headersMapper: Mappers.TestBaseAccountUpdateHeaders
    },
    default: {
      bodyMapper: Mappers.ErrorResponse,
      headersMapper: Mappers.TestBaseAccountUpdateHeaders
    }
  },
  serializer
};

const beginDeleteMethodOperationSpec: msRest.OperationSpec = {
  httpMethod: "DELETE",
  path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.TestBase/testBaseAccounts/{testBaseAccountName}",
  urlParameters: [
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.testBaseAccountName
  ],
  queryParameters: [
    Parameters.apiVersion
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    200: {
      headersMapper: Mappers.TestBaseAccountDeleteHeaders
    },
    202: {
      headersMapper: Mappers.TestBaseAccountDeleteHeaders
    },
    204: {
      headersMapper: Mappers.TestBaseAccountDeleteHeaders
    },
    default: {
      bodyMapper: Mappers.ErrorResponse,
      headersMapper: Mappers.TestBaseAccountDeleteHeaders
    }
  },
  serializer
};

const beginOffboardOperationSpec: msRest.OperationSpec = {
  httpMethod: "POST",
  path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.TestBase/testBaseAccounts/{testBaseAccountName}/offboard",
  urlParameters: [
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.testBaseAccountName
  ],
  queryParameters: [
    Parameters.apiVersion
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    200: {
      headersMapper: Mappers.TestBaseAccountOffboardHeaders
    },
    202: {
      headersMapper: Mappers.TestBaseAccountOffboardHeaders
    },
    204: {
      headersMapper: Mappers.TestBaseAccountOffboardHeaders
    },
    default: {
      bodyMapper: Mappers.ErrorResponse,
      headersMapper: Mappers.TestBaseAccountOffboardHeaders
    }
  },
  serializer
};
