/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */

import { PagedAsyncIterableIterator } from "@azure/core-paging";
import { CustomerEvents } from "../operationsInterfaces";
import * as coreClient from "@azure/core-client";
import * as Mappers from "../models/mappers";
import * as Parameters from "../models/parameters";
import { TestBase } from "../testBase";
import { PollerLike, PollOperationState, LroEngine } from "@azure/core-lro";
import { LroImpl } from "../lroImpl";
import {
  CustomerEventResource,
  CustomerEventsListByTestBaseAccountNextOptionalParams,
  CustomerEventsListByTestBaseAccountOptionalParams,
  CustomerEventsListByTestBaseAccountResponse,
  CustomerEventsCreateOptionalParams,
  CustomerEventsCreateResponse,
  CustomerEventsDeleteOptionalParams,
  CustomerEventsGetOptionalParams,
  CustomerEventsGetResponse,
  CustomerEventsListByTestBaseAccountNextResponse
} from "../models";

/// <reference lib="esnext.asynciterable" />
/** Class containing CustomerEvents operations. */
export class CustomerEventsImpl implements CustomerEvents {
  private readonly client: TestBase;

  /**
   * Initialize a new instance of the class CustomerEvents class.
   * @param client Reference to the service client
   */
  constructor(client: TestBase) {
    this.client = client;
  }

  /**
   * Lists all notification events subscribed under a Test Base Account.
   * @param resourceGroupName The name of the resource group that contains the resource.
   * @param testBaseAccountName The resource name of the Test Base Account.
   * @param options The options parameters.
   */
  public listByTestBaseAccount(
    resourceGroupName: string,
    testBaseAccountName: string,
    options?: CustomerEventsListByTestBaseAccountOptionalParams
  ): PagedAsyncIterableIterator<CustomerEventResource> {
    const iter = this.listByTestBaseAccountPagingAll(
      resourceGroupName,
      testBaseAccountName,
      options
    );
    return {
      next() {
        return iter.next();
      },
      [Symbol.asyncIterator]() {
        return this;
      },
      byPage: () => {
        return this.listByTestBaseAccountPagingPage(
          resourceGroupName,
          testBaseAccountName,
          options
        );
      }
    };
  }

  private async *listByTestBaseAccountPagingPage(
    resourceGroupName: string,
    testBaseAccountName: string,
    options?: CustomerEventsListByTestBaseAccountOptionalParams
  ): AsyncIterableIterator<CustomerEventResource[]> {
    let result = await this._listByTestBaseAccount(
      resourceGroupName,
      testBaseAccountName,
      options
    );
    yield result.value || [];
    let continuationToken = result.nextLink;
    while (continuationToken) {
      result = await this._listByTestBaseAccountNext(
        resourceGroupName,
        testBaseAccountName,
        continuationToken,
        options
      );
      continuationToken = result.nextLink;
      yield result.value || [];
    }
  }

  private async *listByTestBaseAccountPagingAll(
    resourceGroupName: string,
    testBaseAccountName: string,
    options?: CustomerEventsListByTestBaseAccountOptionalParams
  ): AsyncIterableIterator<CustomerEventResource> {
    for await (const page of this.listByTestBaseAccountPagingPage(
      resourceGroupName,
      testBaseAccountName,
      options
    )) {
      yield* page;
    }
  }

  /**
   * Lists all notification events subscribed under a Test Base Account.
   * @param resourceGroupName The name of the resource group that contains the resource.
   * @param testBaseAccountName The resource name of the Test Base Account.
   * @param options The options parameters.
   */
  private _listByTestBaseAccount(
    resourceGroupName: string,
    testBaseAccountName: string,
    options?: CustomerEventsListByTestBaseAccountOptionalParams
  ): Promise<CustomerEventsListByTestBaseAccountResponse> {
    return this.client.sendOperationRequest(
      { resourceGroupName, testBaseAccountName, options },
      listByTestBaseAccountOperationSpec
    );
  }

  /**
   * Create or replace a Test Base Customer Event.
   * @param resourceGroupName The name of the resource group that contains the resource.
   * @param testBaseAccountName The resource name of the Test Base Account.
   * @param customerEventName The resource name of the Test Base Customer event.
   * @param parameters Parameters supplied to create a Test Base CustomerEvent.
   * @param options The options parameters.
   */
  async beginCreate(
    resourceGroupName: string,
    testBaseAccountName: string,
    customerEventName: string,
    parameters: CustomerEventResource,
    options?: CustomerEventsCreateOptionalParams
  ): Promise<
    PollerLike<
      PollOperationState<CustomerEventsCreateResponse>,
      CustomerEventsCreateResponse
    >
  > {
    const directSendOperation = async (
      args: coreClient.OperationArguments,
      spec: coreClient.OperationSpec
    ): Promise<CustomerEventsCreateResponse> => {
      return this.client.sendOperationRequest(args, spec);
    };
    const sendOperation = async (
      args: coreClient.OperationArguments,
      spec: coreClient.OperationSpec
    ) => {
      let currentRawResponse:
        | coreClient.FullOperationResponse
        | undefined = undefined;
      const providedCallback = args.options?.onResponse;
      const callback: coreClient.RawResponseCallback = (
        rawResponse: coreClient.FullOperationResponse,
        flatResponse: unknown
      ) => {
        currentRawResponse = rawResponse;
        providedCallback?.(rawResponse, flatResponse);
      };
      const updatedArgs = {
        ...args,
        options: {
          ...args.options,
          onResponse: callback
        }
      };
      const flatResponse = await directSendOperation(updatedArgs, spec);
      return {
        flatResponse,
        rawResponse: {
          statusCode: currentRawResponse!.status,
          body: currentRawResponse!.parsedBody,
          headers: currentRawResponse!.headers.toJSON()
        }
      };
    };

    const lro = new LroImpl(
      sendOperation,
      {
        resourceGroupName,
        testBaseAccountName,
        customerEventName,
        parameters,
        options
      },
      createOperationSpec
    );
    return new LroEngine(lro, {
      resumeFrom: options?.resumeFrom,
      intervalInMs: options?.updateIntervalInMs,
      lroResourceLocationConfig: "azure-async-operation"
    });
  }

  /**
   * Create or replace a Test Base Customer Event.
   * @param resourceGroupName The name of the resource group that contains the resource.
   * @param testBaseAccountName The resource name of the Test Base Account.
   * @param customerEventName The resource name of the Test Base Customer event.
   * @param parameters Parameters supplied to create a Test Base CustomerEvent.
   * @param options The options parameters.
   */
  async beginCreateAndWait(
    resourceGroupName: string,
    testBaseAccountName: string,
    customerEventName: string,
    parameters: CustomerEventResource,
    options?: CustomerEventsCreateOptionalParams
  ): Promise<CustomerEventsCreateResponse> {
    const poller = await this.beginCreate(
      resourceGroupName,
      testBaseAccountName,
      customerEventName,
      parameters,
      options
    );
    return poller.pollUntilDone();
  }

  /**
   * Deletes a Test Base Customer Event.
   * @param resourceGroupName The name of the resource group that contains the resource.
   * @param testBaseAccountName The resource name of the Test Base Account.
   * @param customerEventName The resource name of the Test Base Customer event.
   * @param options The options parameters.
   */
  async beginDelete(
    resourceGroupName: string,
    testBaseAccountName: string,
    customerEventName: string,
    options?: CustomerEventsDeleteOptionalParams
  ): Promise<PollerLike<PollOperationState<void>, void>> {
    const directSendOperation = async (
      args: coreClient.OperationArguments,
      spec: coreClient.OperationSpec
    ): Promise<void> => {
      return this.client.sendOperationRequest(args, spec);
    };
    const sendOperation = async (
      args: coreClient.OperationArguments,
      spec: coreClient.OperationSpec
    ) => {
      let currentRawResponse:
        | coreClient.FullOperationResponse
        | undefined = undefined;
      const providedCallback = args.options?.onResponse;
      const callback: coreClient.RawResponseCallback = (
        rawResponse: coreClient.FullOperationResponse,
        flatResponse: unknown
      ) => {
        currentRawResponse = rawResponse;
        providedCallback?.(rawResponse, flatResponse);
      };
      const updatedArgs = {
        ...args,
        options: {
          ...args.options,
          onResponse: callback
        }
      };
      const flatResponse = await directSendOperation(updatedArgs, spec);
      return {
        flatResponse,
        rawResponse: {
          statusCode: currentRawResponse!.status,
          body: currentRawResponse!.parsedBody,
          headers: currentRawResponse!.headers.toJSON()
        }
      };
    };

    const lro = new LroImpl(
      sendOperation,
      { resourceGroupName, testBaseAccountName, customerEventName, options },
      deleteOperationSpec
    );
    return new LroEngine(lro, {
      resumeFrom: options?.resumeFrom,
      intervalInMs: options?.updateIntervalInMs,
      lroResourceLocationConfig: "azure-async-operation"
    });
  }

  /**
   * Deletes a Test Base Customer Event.
   * @param resourceGroupName The name of the resource group that contains the resource.
   * @param testBaseAccountName The resource name of the Test Base Account.
   * @param customerEventName The resource name of the Test Base Customer event.
   * @param options The options parameters.
   */
  async beginDeleteAndWait(
    resourceGroupName: string,
    testBaseAccountName: string,
    customerEventName: string,
    options?: CustomerEventsDeleteOptionalParams
  ): Promise<void> {
    const poller = await this.beginDelete(
      resourceGroupName,
      testBaseAccountName,
      customerEventName,
      options
    );
    return poller.pollUntilDone();
  }

  /**
   * Gets a Test Base CustomerEvent.
   * @param resourceGroupName The name of the resource group that contains the resource.
   * @param testBaseAccountName The resource name of the Test Base Account.
   * @param customerEventName The resource name of the Test Base Customer event.
   * @param options The options parameters.
   */
  get(
    resourceGroupName: string,
    testBaseAccountName: string,
    customerEventName: string,
    options?: CustomerEventsGetOptionalParams
  ): Promise<CustomerEventsGetResponse> {
    return this.client.sendOperationRequest(
      { resourceGroupName, testBaseAccountName, customerEventName, options },
      getOperationSpec
    );
  }

  /**
   * ListByTestBaseAccountNext
   * @param resourceGroupName The name of the resource group that contains the resource.
   * @param testBaseAccountName The resource name of the Test Base Account.
   * @param nextLink The nextLink from the previous successful call to the ListByTestBaseAccount method.
   * @param options The options parameters.
   */
  private _listByTestBaseAccountNext(
    resourceGroupName: string,
    testBaseAccountName: string,
    nextLink: string,
    options?: CustomerEventsListByTestBaseAccountNextOptionalParams
  ): Promise<CustomerEventsListByTestBaseAccountNextResponse> {
    return this.client.sendOperationRequest(
      { resourceGroupName, testBaseAccountName, nextLink, options },
      listByTestBaseAccountNextOperationSpec
    );
  }
}
// Operation Specifications
const serializer = coreClient.createSerializer(Mappers, /* isXml */ false);

const listByTestBaseAccountOperationSpec: coreClient.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.TestBase/testBaseAccounts/{testBaseAccountName}/customerEvents",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.CustomerEventListResult
    },
    default: {
      bodyMapper: Mappers.ErrorResponse
    }
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.testBaseAccountName
  ],
  headerParameters: [Parameters.accept],
  serializer
};
const createOperationSpec: coreClient.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.TestBase/testBaseAccounts/{testBaseAccountName}/customerEvents/{customerEventName}",
  httpMethod: "PUT",
  responses: {
    200: {
      bodyMapper: Mappers.CustomerEventResource
    },
    201: {
      bodyMapper: Mappers.CustomerEventResource
    },
    202: {
      bodyMapper: Mappers.CustomerEventResource
    },
    204: {
      bodyMapper: Mappers.CustomerEventResource
    },
    default: {
      bodyMapper: Mappers.ErrorResponse
    }
  },
  requestBody: Parameters.parameters7,
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.testBaseAccountName,
    Parameters.customerEventName
  ],
  headerParameters: [Parameters.accept, Parameters.contentType],
  mediaType: "json",
  serializer
};
const deleteOperationSpec: coreClient.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.TestBase/testBaseAccounts/{testBaseAccountName}/customerEvents/{customerEventName}",
  httpMethod: "DELETE",
  responses: {
    200: {},
    201: {},
    202: {},
    204: {},
    default: {
      bodyMapper: Mappers.ErrorResponse
    }
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.testBaseAccountName,
    Parameters.customerEventName
  ],
  headerParameters: [Parameters.accept],
  serializer
};
const getOperationSpec: coreClient.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.TestBase/testBaseAccounts/{testBaseAccountName}/customerEvents/{customerEventName}",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.CustomerEventResource
    },
    default: {
      bodyMapper: Mappers.ErrorResponse
    }
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.testBaseAccountName,
    Parameters.customerEventName
  ],
  headerParameters: [Parameters.accept],
  serializer
};
const listByTestBaseAccountNextOperationSpec: coreClient.OperationSpec = {
  path: "{nextLink}",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.CustomerEventListResult
    },
    default: {
      bodyMapper: Mappers.ErrorResponse
    }
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.nextLink,
    Parameters.resourceGroupName,
    Parameters.testBaseAccountName
  ],
  headerParameters: [Parameters.accept],
  serializer
};
