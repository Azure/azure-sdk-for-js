/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */

import { PagedAsyncIterableIterator } from "@azure/core-paging";
import { PollerLike, PollOperationState } from "@azure/core-lro";
import {
  TestBaseAccountResource,
  TestBaseAccountsListBySubscriptionOptionalParams,
  TestBaseAccountsListByResourceGroupOptionalParams,
  TestBaseAccountsCreateOptionalParams,
  TestBaseAccountsCreateResponse,
  TestBaseAccountUpdateParameters,
  TestBaseAccountsUpdateOptionalParams,
  TestBaseAccountsUpdateResponse,
  TestBaseAccountsDeleteOptionalParams,
  TestBaseAccountsGetOptionalParams,
  TestBaseAccountsGetResponse,
  TestBaseAccountsOffboardOptionalParams,
  TestBaseAccountsGetFileUploadUrlOptionalParams,
  TestBaseAccountsGetFileUploadUrlResponse,
  PackageCheckNameAvailabilityParameters,
  TestBaseAccountsCheckPackageNameAvailabilityOptionalParams,
  TestBaseAccountsCheckPackageNameAvailabilityResponse
} from "../models";

/// <reference lib="esnext.asynciterable" />
/** Interface representing a TestBaseAccounts. */
export interface TestBaseAccounts {
  /**
   * Lists all the Test Base Accounts in a subscription. This API is required by ARM guidelines.
   * @param options The options parameters.
   */
  listBySubscription(
    options?: TestBaseAccountsListBySubscriptionOptionalParams
  ): PagedAsyncIterableIterator<TestBaseAccountResource>;
  /**
   * Lists all the Test Base Accounts in a resource group.
   * @param resourceGroupName The name of the resource group that contains the resource.
   * @param options The options parameters.
   */
  listByResourceGroup(
    resourceGroupName: string,
    options?: TestBaseAccountsListByResourceGroupOptionalParams
  ): PagedAsyncIterableIterator<TestBaseAccountResource>;
  /**
   * Create or replace (overwrite/recreate, with potential downtime) a Test Base Account in the specified
   * subscription.
   * @param resourceGroupName The name of the resource group that contains the resource.
   * @param testBaseAccountName The resource name of the Test Base Account.
   * @param parameters Parameters supplied to create a Test Base Account.
   * @param options The options parameters.
   */
  beginCreate(
    resourceGroupName: string,
    testBaseAccountName: string,
    parameters: TestBaseAccountResource,
    options?: TestBaseAccountsCreateOptionalParams
  ): Promise<
    PollerLike<
      PollOperationState<TestBaseAccountsCreateResponse>,
      TestBaseAccountsCreateResponse
    >
  >;
  /**
   * Create or replace (overwrite/recreate, with potential downtime) a Test Base Account in the specified
   * subscription.
   * @param resourceGroupName The name of the resource group that contains the resource.
   * @param testBaseAccountName The resource name of the Test Base Account.
   * @param parameters Parameters supplied to create a Test Base Account.
   * @param options The options parameters.
   */
  beginCreateAndWait(
    resourceGroupName: string,
    testBaseAccountName: string,
    parameters: TestBaseAccountResource,
    options?: TestBaseAccountsCreateOptionalParams
  ): Promise<TestBaseAccountsCreateResponse>;
  /**
   * Update an existing Test Base Account.
   * @param resourceGroupName The name of the resource group that contains the resource.
   * @param testBaseAccountName The resource name of the Test Base Account.
   * @param parameters Parameters supplied to update a Test Base Account.
   * @param options The options parameters.
   */
  beginUpdate(
    resourceGroupName: string,
    testBaseAccountName: string,
    parameters: TestBaseAccountUpdateParameters,
    options?: TestBaseAccountsUpdateOptionalParams
  ): Promise<
    PollerLike<
      PollOperationState<TestBaseAccountsUpdateResponse>,
      TestBaseAccountsUpdateResponse
    >
  >;
  /**
   * Update an existing Test Base Account.
   * @param resourceGroupName The name of the resource group that contains the resource.
   * @param testBaseAccountName The resource name of the Test Base Account.
   * @param parameters Parameters supplied to update a Test Base Account.
   * @param options The options parameters.
   */
  beginUpdateAndWait(
    resourceGroupName: string,
    testBaseAccountName: string,
    parameters: TestBaseAccountUpdateParameters,
    options?: TestBaseAccountsUpdateOptionalParams
  ): Promise<TestBaseAccountsUpdateResponse>;
  /**
   * Deletes a Test Base Account.
   * @param resourceGroupName The name of the resource group that contains the resource.
   * @param testBaseAccountName The resource name of the Test Base Account.
   * @param options The options parameters.
   */
  beginDelete(
    resourceGroupName: string,
    testBaseAccountName: string,
    options?: TestBaseAccountsDeleteOptionalParams
  ): Promise<PollerLike<PollOperationState<void>, void>>;
  /**
   * Deletes a Test Base Account.
   * @param resourceGroupName The name of the resource group that contains the resource.
   * @param testBaseAccountName The resource name of the Test Base Account.
   * @param options The options parameters.
   */
  beginDeleteAndWait(
    resourceGroupName: string,
    testBaseAccountName: string,
    options?: TestBaseAccountsDeleteOptionalParams
  ): Promise<void>;
  /**
   * Gets a Test Base Account.
   * @param resourceGroupName The name of the resource group that contains the resource.
   * @param testBaseAccountName The resource name of the Test Base Account.
   * @param options The options parameters.
   */
  get(
    resourceGroupName: string,
    testBaseAccountName: string,
    options?: TestBaseAccountsGetOptionalParams
  ): Promise<TestBaseAccountsGetResponse>;
  /**
   * Offboard a Test Base Account.
   * @param resourceGroupName The name of the resource group that contains the resource.
   * @param testBaseAccountName The resource name of the Test Base Account.
   * @param options The options parameters.
   */
  beginOffboard(
    resourceGroupName: string,
    testBaseAccountName: string,
    options?: TestBaseAccountsOffboardOptionalParams
  ): Promise<PollerLike<PollOperationState<void>, void>>;
  /**
   * Offboard a Test Base Account.
   * @param resourceGroupName The name of the resource group that contains the resource.
   * @param testBaseAccountName The resource name of the Test Base Account.
   * @param options The options parameters.
   */
  beginOffboardAndWait(
    resourceGroupName: string,
    testBaseAccountName: string,
    options?: TestBaseAccountsOffboardOptionalParams
  ): Promise<void>;
  /**
   * Gets the file upload URL of a Test Base Account.
   * @param resourceGroupName The name of the resource group that contains the resource.
   * @param testBaseAccountName The resource name of the Test Base Account.
   * @param options The options parameters.
   */
  getFileUploadUrl(
    resourceGroupName: string,
    testBaseAccountName: string,
    options?: TestBaseAccountsGetFileUploadUrlOptionalParams
  ): Promise<TestBaseAccountsGetFileUploadUrlResponse>;
  /**
   * Checks that the Test Base Package name and version is valid and is not already in use.
   * @param resourceGroupName The name of the resource group that contains the resource.
   * @param testBaseAccountName The resource name of the Test Base Account.
   * @param parameters Parameters supplied to the Test Base Package CheckNameAvailability operation.
   * @param options The options parameters.
   */
  checkPackageNameAvailability(
    resourceGroupName: string,
    testBaseAccountName: string,
    parameters: PackageCheckNameAvailabilityParameters,
    options?: TestBaseAccountsCheckPackageNameAvailabilityOptionalParams
  ): Promise<TestBaseAccountsCheckPackageNameAvailabilityResponse>;
}
