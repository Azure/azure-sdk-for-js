/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */

import * as coreClient from "@azure/core-client";
import * as coreAuth from "@azure/core-auth";
import {
  SkusImpl,
  TestBaseAccountsImpl,
  UsageImpl,
  AvailableOSImpl,
  FlightingRingsImpl,
  TestTypesImpl,
  PackagesImpl,
  TestSummariesImpl,
  TestResultsImpl,
  OSUpdatesImpl,
  FavoriteProcessesImpl,
  AnalysisResultsImpl,
  EmailEventsImpl,
  CustomerEventsImpl,
  OperationsImpl
} from "./operations";
import {
  Skus,
  TestBaseAccounts,
  Usage,
  AvailableOS,
  FlightingRings,
  TestTypes,
  Packages,
  TestSummaries,
  TestResults,
  OSUpdates,
  FavoriteProcesses,
  AnalysisResults,
  EmailEvents,
  CustomerEvents,
  Operations
} from "./operationsInterfaces";
import { TestBaseOptionalParams } from "./models";

export class TestBase extends coreClient.ServiceClient {
  $host: string;
  subscriptionId: string;
  apiVersion: string;

  /**
   * Initializes a new instance of the TestBase class.
   * @param credentials Subscription credentials which uniquely identify client subscription.
   * @param subscriptionId The Azure subscription ID. This is a GUID-formatted string.
   * @param options The parameter options
   */
  constructor(
    credentials: coreAuth.TokenCredential,
    subscriptionId: string,
    options?: TestBaseOptionalParams
  ) {
    if (credentials === undefined) {
      throw new Error("'credentials' cannot be null");
    }
    if (subscriptionId === undefined) {
      throw new Error("'subscriptionId' cannot be null");
    }

    // Initializing default values for options
    if (!options) {
      options = {};
    }
    const defaults: TestBaseOptionalParams = {
      requestContentType: "application/json; charset=utf-8",
      credential: credentials
    };

    const packageDetails = `azsdk-js-arm-testbase/1.0.0-beta.1`;
    const userAgentPrefix =
      options.userAgentOptions && options.userAgentOptions.userAgentPrefix
        ? `${options.userAgentOptions.userAgentPrefix} ${packageDetails}`
        : `${packageDetails}`;

    if (!options.credentialScopes) {
      options.credentialScopes = ["https://management.azure.com/.default"];
    }
    const optionsWithDefaults = {
      ...defaults,
      ...options,
      userAgentOptions: {
        userAgentPrefix
      },
      baseUri: options.endpoint || "https://management.azure.com"
    };
    super(optionsWithDefaults);
    // Parameter assignments
    this.subscriptionId = subscriptionId;

    // Assigning values to Constant parameters
    this.$host = options.$host || "https://management.azure.com";
    this.apiVersion = options.apiVersion || "2020-12-16-preview";
    this.skus = new SkusImpl(this);
    this.testBaseAccounts = new TestBaseAccountsImpl(this);
    this.usage = new UsageImpl(this);
    this.availableOS = new AvailableOSImpl(this);
    this.flightingRings = new FlightingRingsImpl(this);
    this.testTypes = new TestTypesImpl(this);
    this.packages = new PackagesImpl(this);
    this.testSummaries = new TestSummariesImpl(this);
    this.testResults = new TestResultsImpl(this);
    this.oSUpdates = new OSUpdatesImpl(this);
    this.favoriteProcesses = new FavoriteProcessesImpl(this);
    this.analysisResults = new AnalysisResultsImpl(this);
    this.emailEvents = new EmailEventsImpl(this);
    this.customerEvents = new CustomerEventsImpl(this);
    this.operations = new OperationsImpl(this);
  }

  skus: Skus;
  testBaseAccounts: TestBaseAccounts;
  usage: Usage;
  availableOS: AvailableOS;
  flightingRings: FlightingRings;
  testTypes: TestTypes;
  packages: Packages;
  testSummaries: TestSummaries;
  testResults: TestResults;
  oSUpdates: OSUpdates;
  favoriteProcesses: FavoriteProcesses;
  analysisResults: AnalysisResults;
  emailEvents: EmailEvents;
  customerEvents: CustomerEvents;
  operations: Operations;
}
