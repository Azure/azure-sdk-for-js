/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */

import * as coreClient from "@azure/core-client";

export const TestBaseAccountSKUListResult: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "TestBaseAccountSKUListResult",
    modelProperties: {
      value: {
        serializedName: "value",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "TestBaseAccountSKU"
            }
          }
        }
      },
      nextLink: {
        serializedName: "nextLink",
        readOnly: true,
        type: {
          name: "String"
        }
      }
    }
  }
};

export const TestBaseAccountSKU: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "TestBaseAccountSKU",
    modelProperties: {
      resourceType: {
        serializedName: "resourceType",
        type: {
          name: "String"
        }
      },
      name: {
        serializedName: "name",
        required: true,
        type: {
          name: "String"
        }
      },
      tier: {
        serializedName: "tier",
        required: true,
        type: {
          name: "String"
        }
      },
      capabilities: {
        serializedName: "capabilities",
        readOnly: true,
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "TestBaseAccountSKUCapability"
            }
          }
        }
      },
      locations: {
        serializedName: "locations",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "String"
            }
          }
        }
      }
    }
  }
};

export const TestBaseAccountSKUCapability: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "TestBaseAccountSKUCapability",
    modelProperties: {
      name: {
        serializedName: "name",
        required: true,
        type: {
          name: "String"
        }
      },
      value: {
        serializedName: "value",
        required: true,
        type: {
          name: "String"
        }
      }
    }
  }
};

export const ErrorResponse: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "ErrorResponse",
    modelProperties: {
      error: {
        serializedName: "error",
        type: {
          name: "Composite",
          className: "ErrorDefinition"
        }
      }
    }
  }
};

export const ErrorDefinition: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "ErrorDefinition",
    modelProperties: {
      code: {
        serializedName: "code",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      message: {
        serializedName: "message",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      target: {
        serializedName: "target",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      details: {
        serializedName: "details",
        readOnly: true,
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "ErrorDefinition"
            }
          }
        }
      }
    }
  }
};

export const TestBaseAccountListResult: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "TestBaseAccountListResult",
    modelProperties: {
      value: {
        serializedName: "value",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "TestBaseAccountResource"
            }
          }
        }
      },
      nextLink: {
        serializedName: "nextLink",
        readOnly: true,
        type: {
          name: "String"
        }
      }
    }
  }
};

export const SystemData: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "SystemData",
    modelProperties: {
      createdBy: {
        serializedName: "createdBy",
        type: {
          name: "String"
        }
      },
      createdByType: {
        serializedName: "createdByType",
        type: {
          name: "String"
        }
      },
      createdAt: {
        serializedName: "createdAt",
        type: {
          name: "DateTime"
        }
      },
      lastModifiedBy: {
        serializedName: "lastModifiedBy",
        type: {
          name: "String"
        }
      },
      lastModifiedByType: {
        serializedName: "lastModifiedByType",
        type: {
          name: "String"
        }
      },
      lastModifiedAt: {
        serializedName: "lastModifiedAt",
        type: {
          name: "DateTime"
        }
      }
    }
  }
};

export const Resource: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "Resource",
    modelProperties: {
      id: {
        serializedName: "id",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      name: {
        serializedName: "name",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      type: {
        serializedName: "type",
        readOnly: true,
        type: {
          name: "String"
        }
      }
    }
  }
};

export const TestBaseAccountUpdateParameters: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "TestBaseAccountUpdateParameters",
    modelProperties: {
      tags: {
        serializedName: "tags",
        type: {
          name: "Dictionary",
          value: { type: { name: "String" } }
        }
      },
      sku: {
        serializedName: "properties.sku",
        type: {
          name: "Composite",
          className: "TestBaseAccountSKU"
        }
      }
    }
  }
};

export const TestBaseAccountUsageDataList: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "TestBaseAccountUsageDataList",
    modelProperties: {
      value: {
        serializedName: "value",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "TestBaseAccountUsageData"
            }
          }
        }
      },
      nextLink: {
        serializedName: "nextLink",
        readOnly: true,
        type: {
          name: "String"
        }
      }
    }
  }
};

export const TestBaseAccountUsageData: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "TestBaseAccountUsageData",
    modelProperties: {
      id: {
        serializedName: "id",
        type: {
          name: "String"
        }
      },
      name: {
        serializedName: "name",
        type: {
          name: "Composite",
          className: "TestBaseAccountUsageName"
        }
      },
      unit: {
        serializedName: "unit",
        type: {
          name: "String"
        }
      },
      limit: {
        serializedName: "limit",
        type: {
          name: "Number"
        }
      },
      currentValue: {
        serializedName: "currentValue",
        type: {
          name: "Number"
        }
      }
    }
  }
};

export const TestBaseAccountUsageName: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "TestBaseAccountUsageName",
    modelProperties: {
      value: {
        serializedName: "value",
        type: {
          name: "String"
        }
      },
      localizedValue: {
        serializedName: "localizedValue",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const GetFileUploadURLParameters: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "GetFileUploadURLParameters",
    modelProperties: {
      blobName: {
        serializedName: "blobName",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const FileUploadURLResponse: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "FileUploadURLResponse",
    modelProperties: {
      uploadUrl: {
        serializedName: "uploadUrl",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      blobPath: {
        serializedName: "blobPath",
        readOnly: true,
        type: {
          name: "String"
        }
      }
    }
  }
};

export const AvailableOSListResult: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "AvailableOSListResult",
    modelProperties: {
      value: {
        serializedName: "value",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "AvailableOSResource"
            }
          }
        }
      },
      nextLink: {
        serializedName: "nextLink",
        readOnly: true,
        type: {
          name: "String"
        }
      }
    }
  }
};

export const FlightingRingListResult: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "FlightingRingListResult",
    modelProperties: {
      value: {
        serializedName: "value",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "FlightingRingResource"
            }
          }
        }
      },
      nextLink: {
        serializedName: "nextLink",
        readOnly: true,
        type: {
          name: "String"
        }
      }
    }
  }
};

export const TestTypeListResult: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "TestTypeListResult",
    modelProperties: {
      value: {
        serializedName: "value",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "TestTypeResource"
            }
          }
        }
      },
      nextLink: {
        serializedName: "nextLink",
        readOnly: true,
        type: {
          name: "String"
        }
      }
    }
  }
};

export const PackageCheckNameAvailabilityParameters: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "PackageCheckNameAvailabilityParameters",
    modelProperties: {
      name: {
        serializedName: "name",
        required: true,
        type: {
          name: "String"
        }
      },
      applicationName: {
        serializedName: "applicationName",
        required: true,
        type: {
          name: "String"
        }
      },
      version: {
        serializedName: "version",
        required: true,
        type: {
          name: "String"
        }
      },
      type: {
        serializedName: "type",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const CheckNameAvailabilityResult: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "CheckNameAvailabilityResult",
    modelProperties: {
      nameAvailable: {
        serializedName: "nameAvailable",
        type: {
          name: "Boolean"
        }
      },
      reason: {
        serializedName: "reason",
        type: {
          name: "String"
        }
      },
      message: {
        serializedName: "message",
        readOnly: true,
        type: {
          name: "String"
        }
      }
    }
  }
};

export const PackageListResult: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "PackageListResult",
    modelProperties: {
      value: {
        serializedName: "value",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "PackageResource"
            }
          }
        }
      },
      nextLink: {
        serializedName: "nextLink",
        readOnly: true,
        type: {
          name: "String"
        }
      }
    }
  }
};

export const TargetOSInfo: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "TargetOSInfo",
    modelProperties: {
      osUpdateType: {
        serializedName: "osUpdateType",
        required: true,
        type: {
          name: "String"
        }
      },
      targetOSs: {
        serializedName: "targetOSs",
        required: true,
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "String"
            }
          }
        }
      },
      baselineOSs: {
        serializedName: "baselineOSs",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "String"
            }
          }
        }
      }
    }
  }
};

export const PackageValidationResult: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "PackageValidationResult",
    modelProperties: {
      validationName: {
        serializedName: "validationName",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      isValid: {
        serializedName: "isValid",
        readOnly: true,
        type: {
          name: "Boolean"
        }
      },
      errors: {
        serializedName: "errors",
        readOnly: true,
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "String"
            }
          }
        }
      }
    }
  }
};

export const Test: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "Test",
    modelProperties: {
      testType: {
        serializedName: "testType",
        required: true,
        type: {
          name: "String"
        }
      },
      validationRunStatus: {
        serializedName: "validationRunStatus",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      validationResultId: {
        serializedName: "validationResultId",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      isActive: {
        serializedName: "isActive",
        type: {
          name: "Boolean"
        }
      },
      commands: {
        serializedName: "commands",
        required: true,
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "Command"
            }
          }
        }
      }
    }
  }
};

export const Command: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "Command",
    modelProperties: {
      name: {
        serializedName: "name",
        required: true,
        type: {
          name: "String"
        }
      },
      action: {
        serializedName: "action",
        required: true,
        type: {
          name: "String"
        }
      },
      contentType: {
        serializedName: "contentType",
        required: true,
        type: {
          name: "String"
        }
      },
      content: {
        serializedName: "content",
        required: true,
        type: {
          name: "String"
        }
      },
      runElevated: {
        serializedName: "runElevated",
        type: {
          name: "Boolean"
        }
      },
      restartAfter: {
        serializedName: "restartAfter",
        type: {
          name: "Boolean"
        }
      },
      maxRunTime: {
        serializedName: "maxRunTime",
        type: {
          name: "Number"
        }
      },
      runAsInteractive: {
        serializedName: "runAsInteractive",
        type: {
          name: "Boolean"
        }
      },
      alwaysRun: {
        serializedName: "alwaysRun",
        type: {
          name: "Boolean"
        }
      },
      applyUpdateBefore: {
        serializedName: "applyUpdateBefore",
        type: {
          name: "Boolean"
        }
      }
    }
  }
};

export const PackageUpdateParameters: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "PackageUpdateParameters",
    modelProperties: {
      tags: {
        serializedName: "tags",
        type: {
          name: "Dictionary",
          value: { type: { name: "String" } }
        }
      },
      targetOSList: {
        serializedName: "properties.targetOSList",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "TargetOSInfo"
            }
          }
        }
      },
      flightingRing: {
        serializedName: "properties.flightingRing",
        type: {
          name: "String"
        }
      },
      isEnabled: {
        serializedName: "properties.isEnabled",
        type: {
          name: "Boolean"
        }
      },
      blobPath: {
        serializedName: "properties.blobPath",
        type: {
          name: "String"
        }
      },
      tests: {
        serializedName: "properties.tests",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "Test"
            }
          }
        }
      }
    }
  }
};

export const DownloadURLResponse: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "DownloadURLResponse",
    modelProperties: {
      downloadUrl: {
        serializedName: "downloadUrl",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      expirationTime: {
        serializedName: "expirationTime",
        readOnly: true,
        type: {
          name: "DateTime"
        }
      }
    }
  }
};

export const PackageRunTestParameters: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "PackageRunTestParameters",
    modelProperties: {
      testType: {
        serializedName: "testType",
        required: true,
        type: {
          name: "String"
        }
      },
      osUpdateType: {
        serializedName: "osUpdateType",
        type: {
          name: "String"
        }
      },
      osName: {
        serializedName: "osName",
        required: true,
        type: {
          name: "String"
        }
      },
      releaseName: {
        serializedName: "releaseName",
        type: {
          name: "String"
        }
      },
      flightingRing: {
        serializedName: "flightingRing",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const TestSummaryListResult: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "TestSummaryListResult",
    modelProperties: {
      value: {
        serializedName: "value",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "TestSummaryResource"
            }
          }
        }
      },
      nextLink: {
        serializedName: "nextLink",
        readOnly: true,
        type: {
          name: "String"
        }
      }
    }
  }
};

export const OSUpdatesTestSummary: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "OSUpdatesTestSummary",
    modelProperties: {
      executionStatus: {
        serializedName: "executionStatus",
        type: {
          name: "String"
        }
      },
      testStatus: {
        serializedName: "testStatus",
        type: {
          name: "String"
        }
      },
      grade: {
        serializedName: "grade",
        type: {
          name: "String"
        }
      },
      testRunTime: {
        serializedName: "testRunTime",
        type: {
          name: "String"
        }
      },
      osUpdateTestSummaries: {
        serializedName: "osUpdateTestSummaries",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "OSUpdateTestSummary"
            }
          }
        }
      }
    }
  }
};

export const OSUpdateTestSummary: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "OSUpdateTestSummary",
    modelProperties: {
      osName: {
        serializedName: "osName",
        type: {
          name: "String"
        }
      },
      releaseName: {
        serializedName: "releaseName",
        type: {
          name: "String"
        }
      },
      buildVersion: {
        serializedName: "buildVersion",
        type: {
          name: "String"
        }
      },
      buildRevision: {
        serializedName: "buildRevision",
        type: {
          name: "String"
        }
      },
      releaseVersionDate: {
        serializedName: "releaseVersionDate",
        type: {
          name: "DateTime"
        }
      },
      flightingRing: {
        serializedName: "flightingRing",
        type: {
          name: "String"
        }
      },
      executionStatus: {
        serializedName: "executionStatus",
        type: {
          name: "String"
        }
      },
      testStatus: {
        serializedName: "testStatus",
        type: {
          name: "String"
        }
      },
      grade: {
        serializedName: "grade",
        type: {
          name: "String"
        }
      },
      testRunTime: {
        serializedName: "testRunTime",
        type: {
          name: "String"
        }
      },
      testType: {
        serializedName: "testType",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const TestResultListResult: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "TestResultListResult",
    modelProperties: {
      value: {
        serializedName: "value",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "TestResultResource"
            }
          }
        }
      },
      nextLink: {
        serializedName: "nextLink",
        readOnly: true,
        type: {
          name: "String"
        }
      }
    }
  }
};

export const TestResultAnalysisSummary: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "TestResultAnalysisSummary",
    modelProperties: {
      name: {
        serializedName: "name",
        type: {
          name: "String"
        }
      },
      analysisStatus: {
        serializedName: "analysisStatus",
        type: {
          name: "String"
        }
      },
      grade: {
        serializedName: "grade",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const OSUpdateListResult: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "OSUpdateListResult",
    modelProperties: {
      value: {
        serializedName: "value",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "OSUpdateResource"
            }
          }
        }
      },
      nextLink: {
        serializedName: "nextLink",
        readOnly: true,
        type: {
          name: "String"
        }
      }
    }
  }
};

export const FavoriteProcessListResult: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "FavoriteProcessListResult",
    modelProperties: {
      value: {
        serializedName: "value",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "FavoriteProcessResource"
            }
          }
        }
      },
      nextLink: {
        serializedName: "nextLink",
        readOnly: true,
        type: {
          name: "String"
        }
      }
    }
  }
};

export const AnalysisResultListResult: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "AnalysisResultListResult",
    modelProperties: {
      value: {
        serializedName: "value",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "AnalysisResultSingletonResource"
            }
          }
        }
      },
      nextLink: {
        serializedName: "nextLink",
        readOnly: true,
        type: {
          name: "String"
        }
      }
    }
  }
};

export const AnalysisResultSingletonResourceProperties: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "AnalysisResultSingletonResourceProperties",
    uberParent: "AnalysisResultSingletonResourceProperties",
    polymorphicDiscriminator: {
      serializedName: "analysisResultType",
      clientName: "analysisResultType"
    },
    modelProperties: {
      grade: {
        serializedName: "grade",
        type: {
          name: "String"
        }
      },
      analysisResultType: {
        serializedName: "analysisResultType",
        required: true,
        type: {
          name: "String"
        }
      }
    }
  }
};

export const TestResultConsoleLogDownloadURLParameters: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "TestResultConsoleLogDownloadURLParameters",
    modelProperties: {
      logFileName: {
        serializedName: "logFileName",
        required: true,
        type: {
          name: "String"
        }
      }
    }
  }
};

export const EmailEventListResult: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "EmailEventListResult",
    modelProperties: {
      value: {
        serializedName: "value",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "EmailEventResource"
            }
          }
        }
      },
      nextLink: {
        serializedName: "nextLink",
        readOnly: true,
        type: {
          name: "String"
        }
      }
    }
  }
};

export const CustomerEventListResult: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "CustomerEventListResult",
    modelProperties: {
      value: {
        serializedName: "value",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "CustomerEventResource"
            }
          }
        }
      },
      nextLink: {
        serializedName: "nextLink",
        readOnly: true,
        type: {
          name: "String"
        }
      }
    }
  }
};

export const NotificationEventReceiver: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "NotificationEventReceiver",
    modelProperties: {
      receiverType: {
        serializedName: "receiverType",
        type: {
          name: "String"
        }
      },
      receiverValue: {
        serializedName: "receiverValue",
        type: {
          name: "Composite",
          className: "NotificationReceiverValue"
        }
      }
    }
  }
};

export const NotificationReceiverValue: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "NotificationReceiverValue",
    modelProperties: {
      userObjectReceiverValue: {
        serializedName: "userObjectReceiverValue",
        type: {
          name: "Composite",
          className: "UserObjectReceiverValue"
        }
      },
      subscriptionReceiverValue: {
        serializedName: "subscriptionReceiverValue",
        type: {
          name: "Composite",
          className: "SubscriptionReceiverValue"
        }
      },
      distributionGroupListReceiverValue: {
        serializedName: "distributionGroupListReceiverValue",
        type: {
          name: "Composite",
          className: "DistributionGroupListReceiverValue"
        }
      }
    }
  }
};

export const UserObjectReceiverValue: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "UserObjectReceiverValue",
    modelProperties: {
      userObjectIds: {
        serializedName: "userObjectIds",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "String"
            }
          }
        }
      }
    }
  }
};

export const SubscriptionReceiverValue: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "SubscriptionReceiverValue",
    modelProperties: {
      subscriptionId: {
        serializedName: "subscriptionId",
        type: {
          name: "String"
        }
      },
      subscriptionName: {
        serializedName: "subscriptionName",
        type: {
          name: "String"
        }
      },
      role: {
        serializedName: "role",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const DistributionGroupListReceiverValue: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "DistributionGroupListReceiverValue",
    modelProperties: {
      distributionGroups: {
        serializedName: "distributionGroups",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "String"
            }
          }
        }
      }
    }
  }
};

export const OperationListResult: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "OperationListResult",
    modelProperties: {
      value: {
        serializedName: "value",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "Operation"
            }
          }
        }
      },
      nextLink: {
        serializedName: "nextLink",
        readOnly: true,
        type: {
          name: "String"
        }
      }
    }
  }
};

export const Operation: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "Operation",
    modelProperties: {
      name: {
        serializedName: "name",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      isDataAction: {
        serializedName: "isDataAction",
        readOnly: true,
        type: {
          name: "Boolean"
        }
      },
      origin: {
        serializedName: "origin",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      display: {
        serializedName: "display",
        type: {
          name: "Composite",
          className: "OperationDisplay"
        }
      },
      properties: {
        serializedName: "properties",
        type: {
          name: "Dictionary",
          value: { type: { name: "any" } }
        }
      }
    }
  }
};

export const OperationDisplay: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "OperationDisplay",
    modelProperties: {
      provider: {
        serializedName: "provider",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      operation: {
        serializedName: "operation",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      resource: {
        serializedName: "resource",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      description: {
        serializedName: "description",
        readOnly: true,
        type: {
          name: "String"
        }
      }
    }
  }
};

export const BillingHubGetFreeHourBalanceResponse: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "BillingHubGetFreeHourBalanceResponse",
    modelProperties: {
      totalRemainingFreeHours: {
        serializedName: "totalRemainingFreeHours",
        type: {
          name: "Number"
        }
      },
      incrementEntries: {
        serializedName: "incrementEntries",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "BillingHubFreeHourIncrementEntry"
            }
          }
        }
      }
    }
  }
};

export const BillingHubFreeHourIncrementEntry: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "BillingHubFreeHourIncrementEntry",
    modelProperties: {
      createTimeStamp: {
        serializedName: "createTimeStamp",
        type: {
          name: "DateTime"
        }
      },
      expirationTimeStamp: {
        serializedName: "expirationTimeStamp",
        type: {
          name: "DateTime"
        }
      },
      incrementalFreeHours: {
        serializedName: "incrementalFreeHours",
        type: {
          name: "Number"
        }
      },
      remainingFreeHours: {
        serializedName: "remainingFreeHours",
        type: {
          name: "Number"
        }
      }
    }
  }
};

export const BillingHubGetUsageRequest: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "BillingHubGetUsageRequest",
    modelProperties: {
      startTimeStamp: {
        serializedName: "startTimeStamp",
        required: true,
        type: {
          name: "DateTime"
        }
      },
      endTimeStamp: {
        serializedName: "endTimeStamp",
        required: true,
        type: {
          name: "DateTime"
        }
      },
      pageSize: {
        serializedName: "pageSize",
        type: {
          name: "Number"
        }
      },
      pageIndex: {
        serializedName: "pageIndex",
        type: {
          name: "Number"
        }
      }
    }
  }
};

export const BillingHubGetUsageResponse: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "BillingHubGetUsageResponse",
    modelProperties: {
      totalUsedFreeHours: {
        serializedName: "totalUsedFreeHours",
        type: {
          name: "Number"
        }
      },
      totalUsedBillableHours: {
        serializedName: "totalUsedBillableHours",
        type: {
          name: "Number"
        }
      },
      totalCharges: {
        serializedName: "totalCharges",
        type: {
          name: "Number"
        }
      },
      packageUsageEntries: {
        serializedName: "packageUsageEntries",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "BillingHubPackageUsage"
            }
          }
        }
      },
      nextRequest: {
        serializedName: "nextRequest",
        type: {
          name: "Composite",
          className: "BillingHubGetUsageRequest"
        }
      }
    }
  }
};

export const BillingHubPackageUsage: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "BillingHubPackageUsage",
    modelProperties: {
      applicationName: {
        serializedName: "applicationName",
        type: {
          name: "String"
        }
      },
      applicationVersion: {
        serializedName: "applicationVersion",
        type: {
          name: "String"
        }
      },
      azureResourceUri: {
        serializedName: "azureResourceUri",
        type: {
          name: "String"
        }
      },
      totalUsedFreeHours: {
        serializedName: "totalUsedFreeHours",
        type: {
          name: "Number"
        }
      },
      totalUsedBillableHours: {
        serializedName: "totalUsedBillableHours",
        type: {
          name: "Number"
        }
      },
      totalCharges: {
        serializedName: "totalCharges",
        type: {
          name: "Number"
        }
      },
      usageEntriesGroupedByUpdateType: {
        serializedName: "usageEntriesGroupedByUpdateType",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "BillingHubUsageGroupedByUpdateType"
            }
          }
        }
      }
    }
  }
};

export const BillingHubUsageGroupedByUpdateType: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "BillingHubUsageGroupedByUpdateType",
    modelProperties: {
      updateType: {
        serializedName: "updateType",
        type: {
          name: "String"
        }
      },
      totalUsedFreeHours: {
        serializedName: "totalUsedFreeHours",
        type: {
          name: "Number"
        }
      },
      totalUsedBillableHours: {
        serializedName: "totalUsedBillableHours",
        type: {
          name: "Number"
        }
      },
      totalCharges: {
        serializedName: "totalCharges",
        type: {
          name: "Number"
        }
      },
      usageGroups: {
        serializedName: "usageGroups",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "BillingHubUsageGroup"
            }
          }
        }
      }
    }
  }
};

export const BillingHubUsageGroup: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "BillingHubUsageGroup",
    modelProperties: {
      totalUsedFreeHours: {
        serializedName: "totalUsedFreeHours",
        type: {
          name: "Number"
        }
      },
      totalUsedBillableHours: {
        serializedName: "totalUsedBillableHours",
        type: {
          name: "Number"
        }
      },
      totalCharges: {
        serializedName: "totalCharges",
        type: {
          name: "Number"
        }
      },
      releaseBuildRevision: {
        serializedName: "releaseBuildRevision",
        type: {
          name: "Number"
        }
      },
      releaseBuildNumber: {
        serializedName: "releaseBuildNumber",
        type: {
          name: "Number"
        }
      },
      releaseBuildDate: {
        serializedName: "releaseBuildDate",
        type: {
          name: "DateTime"
        }
      },
      osBuild: {
        serializedName: "osBuild",
        type: {
          name: "String"
        }
      },
      release: {
        serializedName: "release",
        type: {
          name: "String"
        }
      },
      testType: {
        serializedName: "testType",
        type: {
          name: "String"
        }
      },
      productFamily: {
        serializedName: "productFamily",
        type: {
          name: "String"
        }
      },
      executionUsageDetails: {
        serializedName: "executionUsageDetails",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "BillingHubExecutionUsageDetail"
            }
          }
        }
      }
    }
  }
};

export const BillingHubExecutionUsageDetail: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "BillingHubExecutionUsageDetail",
    modelProperties: {
      applicationName: {
        serializedName: "applicationName",
        type: {
          name: "String"
        }
      },
      applicationVersion: {
        serializedName: "applicationVersion",
        type: {
          name: "String"
        }
      },
      executionRequestId: {
        serializedName: "executionRequestId",
        type: {
          name: "String"
        }
      },
      sku: {
        serializedName: "sku",
        type: {
          name: "String"
        }
      },
      meterId: {
        serializedName: "meterId",
        type: {
          name: "String"
        }
      },
      startTimeStamp: {
        serializedName: "startTimeStamp",
        type: {
          name: "DateTime"
        }
      },
      endTimeStamp: {
        serializedName: "endTimeStamp",
        type: {
          name: "DateTime"
        }
      },
      osBuild: {
        serializedName: "osBuild",
        type: {
          name: "String"
        }
      },
      release: {
        serializedName: "release",
        type: {
          name: "String"
        }
      },
      testType: {
        serializedName: "testType",
        type: {
          name: "String"
        }
      },
      updateType: {
        serializedName: "updateType",
        type: {
          name: "String"
        }
      },
      usedFreeHours: {
        serializedName: "usedFreeHours",
        type: {
          name: "Number"
        }
      },
      usedBillableHours: {
        serializedName: "usedBillableHours",
        type: {
          name: "Number"
        }
      },
      billedCharges: {
        serializedName: "billedCharges",
        type: {
          name: "Number"
        }
      }
    }
  }
};

export const ScriptExecutionResult: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "ScriptExecutionResult",
    modelProperties: {
      scriptName: {
        serializedName: "scriptName",
        type: {
          name: "String"
        }
      },
      startTime: {
        serializedName: "startTime",
        type: {
          name: "DateTime"
        }
      },
      endTime: {
        serializedName: "endTime",
        type: {
          name: "DateTime"
        }
      },
      exitCode: {
        serializedName: "exitCode",
        type: {
          name: "Number"
        }
      },
      timedOut: {
        serializedName: "timedOut",
        type: {
          name: "Boolean"
        }
      },
      stdoutLogFileName: {
        serializedName: "stdoutLogFileName",
        type: {
          name: "String"
        }
      },
      stderrLogFileName: {
        serializedName: "stderrLogFileName",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const ReliabilityResult: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "ReliabilityResult",
    modelProperties: {
      fileName: {
        serializedName: "fileName",
        type: {
          name: "String"
        }
      },
      launchCount: {
        serializedName: "launchCount",
        type: {
          name: "Number"
        }
      },
      crashCount: {
        serializedName: "crashCount",
        type: {
          name: "Number"
        }
      },
      hangCount: {
        serializedName: "hangCount",
        type: {
          name: "Number"
        }
      },
      regressionGrade: {
        serializedName: "regressionGrade",
        type: {
          name: "String"
        }
      },
      crashRegressionGrade: {
        serializedName: "crashRegressionGrade",
        type: {
          name: "String"
        }
      },
      crashRegressionTestDetails: {
        serializedName: "crashRegressionTestDetails",
        type: {
          name: "Composite",
          className: "RegressionTestDetails"
        }
      },
      hangRegressionGrade: {
        serializedName: "hangRegressionGrade",
        type: {
          name: "String"
        }
      },
      hangRegressionTestDetails: {
        serializedName: "hangRegressionTestDetails",
        type: {
          name: "Composite",
          className: "RegressionTestDetails"
        }
      }
    }
  }
};

export const RegressionTestDetails: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "RegressionTestDetails",
    modelProperties: {
      diff: {
        serializedName: "diff",
        type: {
          name: "Number"
        }
      },
      isRegressed: {
        serializedName: "isRegressed",
        type: {
          name: "Boolean"
        }
      }
    }
  }
};

export const UtilizationResult: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "UtilizationResult",
    modelProperties: {
      process: {
        serializedName: "process",
        type: {
          name: "String"
        }
      },
      upperBound: {
        serializedName: "upperBound",
        type: {
          name: "Composite",
          className: "UtilizationBound"
        }
      },
      lowerBound: {
        serializedName: "lowerBound",
        type: {
          name: "Composite",
          className: "UtilizationBound"
        }
      },
      utilization: {
        serializedName: "utilization",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "UtilizationEntry"
            }
          }
        }
      }
    }
  }
};

export const UtilizationBound: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "UtilizationBound",
    modelProperties: {
      percentile: {
        serializedName: "percentile",
        type: {
          name: "Number"
        }
      },
      value: {
        serializedName: "value",
        type: {
          name: "Number"
        }
      }
    }
  }
};

export const UtilizationEntry: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "UtilizationEntry",
    modelProperties: {
      timestamp: {
        serializedName: "timestamp",
        type: {
          name: "DateTime"
        }
      },
      value: {
        serializedName: "value",
        type: {
          name: "Number"
        }
      }
    }
  }
};

export const RegressionResult: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "RegressionResult",
    modelProperties: {
      fileName: {
        serializedName: "fileName",
        type: {
          name: "String"
        }
      },
      grade: {
        serializedName: "grade",
        type: {
          name: "String"
        }
      },
      details: {
        serializedName: "details",
        type: {
          name: "String"
        }
      },
      diff: {
        serializedName: "diff",
        type: {
          name: "Number"
        }
      },
      isRegressed: {
        serializedName: "isRegressed",
        type: {
          name: "Boolean"
        }
      }
    }
  }
};

export const TestAnalysisResult: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "TestAnalysisResult",
    modelProperties: {
      blobData: {
        serializedName: "blobData",
        type: {
          name: "String"
        }
      },
      testAnalysisStatus: {
        serializedName: "testAnalysisStatus",
        type: {
          name: "String"
        }
      },
      identifiedFailures: {
        serializedName: "identifiedFailures",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "IdentifiedFailure"
            }
          }
        }
      }
    }
  }
};

export const IdentifiedFailure: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "IdentifiedFailure",
    modelProperties: {
      failureId: {
        serializedName: "failureId",
        type: {
          name: "String"
        }
      },
      category: {
        serializedName: "category",
        type: {
          name: "String"
        }
      },
      errorMessage: {
        serializedName: "errorMessage",
        type: {
          name: "String"
        }
      },
      guidance: {
        serializedName: "guidance",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const BillingHubUsage: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "BillingHubUsage",
    modelProperties: {
      applicationName: {
        serializedName: "applicationName",
        type: {
          name: "String"
        }
      },
      applicationVersion: {
        serializedName: "applicationVersion",
        type: {
          name: "String"
        }
      },
      azureResourceUri: {
        serializedName: "azureResourceUri",
        type: {
          name: "String"
        }
      },
      totalUsedFreeHours: {
        serializedName: "totalUsedFreeHours",
        type: {
          name: "Number"
        }
      },
      totalUsedBillableHours: {
        serializedName: "totalUsedBillableHours",
        type: {
          name: "Number"
        }
      },
      totalCharges: {
        serializedName: "totalCharges",
        type: {
          name: "Number"
        }
      },
      usageGroups: {
        serializedName: "usageGroups",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "BillingHubUsageGroup"
            }
          }
        }
      }
    }
  }
};

export const TrackedResource: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "TrackedResource",
    modelProperties: {
      ...Resource.type.modelProperties,
      tags: {
        serializedName: "tags",
        type: {
          name: "Dictionary",
          value: { type: { name: "String" } }
        }
      },
      location: {
        serializedName: "location",
        required: true,
        type: {
          name: "String"
        }
      },
      etag: {
        serializedName: "etag",
        readOnly: true,
        type: {
          name: "String"
        }
      }
    }
  }
};

export const ProxyResource: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "ProxyResource",
    modelProperties: {
      ...Resource.type.modelProperties
    }
  }
};

export const ScriptExecutionResultSingletonResourceProperties: coreClient.CompositeMapper = {
  serializedName: "ScriptExecution",
  type: {
    name: "Composite",
    className: "ScriptExecutionResultSingletonResourceProperties",
    uberParent: "AnalysisResultSingletonResourceProperties",
    polymorphicDiscriminator:
      AnalysisResultSingletonResourceProperties.type.polymorphicDiscriminator,
    modelProperties: {
      ...AnalysisResultSingletonResourceProperties.type.modelProperties,
      scriptExecutionResults: {
        serializedName: "scriptExecutionResults",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "ScriptExecutionResult"
            }
          }
        }
      }
    }
  }
};

export const ReliabilityResultSingletonResourceProperties: coreClient.CompositeMapper = {
  serializedName: "Reliability",
  type: {
    name: "Composite",
    className: "ReliabilityResultSingletonResourceProperties",
    uberParent: "AnalysisResultSingletonResourceProperties",
    polymorphicDiscriminator:
      AnalysisResultSingletonResourceProperties.type.polymorphicDiscriminator,
    modelProperties: {
      ...AnalysisResultSingletonResourceProperties.type.modelProperties,
      reliabilityResults: {
        serializedName: "reliabilityResults",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "ReliabilityResult"
            }
          }
        }
      }
    }
  }
};

export const CPUUtilizationResultSingletonResourceProperties: coreClient.CompositeMapper = {
  serializedName: "CPUUtilization",
  type: {
    name: "Composite",
    className: "CPUUtilizationResultSingletonResourceProperties",
    uberParent: "AnalysisResultSingletonResourceProperties",
    polymorphicDiscriminator:
      AnalysisResultSingletonResourceProperties.type.polymorphicDiscriminator,
    modelProperties: {
      ...AnalysisResultSingletonResourceProperties.type.modelProperties,
      cpuUtilizationResults: {
        serializedName: "cpuUtilizationResults",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "UtilizationResult"
            }
          }
        }
      }
    }
  }
};

export const MemoryUtilizationResultSingletonResourceProperties: coreClient.CompositeMapper = {
  serializedName: "MemoryUtilization",
  type: {
    name: "Composite",
    className: "MemoryUtilizationResultSingletonResourceProperties",
    uberParent: "AnalysisResultSingletonResourceProperties",
    polymorphicDiscriminator:
      AnalysisResultSingletonResourceProperties.type.polymorphicDiscriminator,
    modelProperties: {
      ...AnalysisResultSingletonResourceProperties.type.modelProperties,
      memoryUtilizationResults: {
        serializedName: "memoryUtilizationResults",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "UtilizationResult"
            }
          }
        }
      }
    }
  }
};

export const CPURegressionResultSingletonResourceProperties: coreClient.CompositeMapper = {
  serializedName: "CPURegression",
  type: {
    name: "Composite",
    className: "CPURegressionResultSingletonResourceProperties",
    uberParent: "AnalysisResultSingletonResourceProperties",
    polymorphicDiscriminator:
      AnalysisResultSingletonResourceProperties.type.polymorphicDiscriminator,
    modelProperties: {
      ...AnalysisResultSingletonResourceProperties.type.modelProperties,
      cpuRegressionResults: {
        serializedName: "cpuRegressionResults",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "RegressionResult"
            }
          }
        }
      }
    }
  }
};

export const MemoryRegressionResultSingletonResourceProperties: coreClient.CompositeMapper = {
  serializedName: "MemoryRegression",
  type: {
    name: "Composite",
    className: "MemoryRegressionResultSingletonResourceProperties",
    uberParent: "AnalysisResultSingletonResourceProperties",
    polymorphicDiscriminator:
      AnalysisResultSingletonResourceProperties.type.polymorphicDiscriminator,
    modelProperties: {
      ...AnalysisResultSingletonResourceProperties.type.modelProperties,
      memoryRegressionResults: {
        serializedName: "memoryRegressionResults",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "RegressionResult"
            }
          }
        }
      }
    }
  }
};

export const TestAnalysisResultSingletonResourceProperties: coreClient.CompositeMapper = {
  serializedName: "TestAnalysis",
  type: {
    name: "Composite",
    className: "TestAnalysisResultSingletonResourceProperties",
    uberParent: "AnalysisResultSingletonResourceProperties",
    polymorphicDiscriminator:
      AnalysisResultSingletonResourceProperties.type.polymorphicDiscriminator,
    modelProperties: {
      ...AnalysisResultSingletonResourceProperties.type.modelProperties,
      testAnalysisResult: {
        serializedName: "testAnalysisResult",
        type: {
          name: "Composite",
          className: "TestAnalysisResult"
        }
      }
    }
  }
};

export const TestBaseAccountResource: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "TestBaseAccountResource",
    modelProperties: {
      ...TrackedResource.type.modelProperties,
      systemData: {
        serializedName: "systemData",
        type: {
          name: "Composite",
          className: "SystemData"
        }
      },
      provisioningState: {
        serializedName: "properties.provisioningState",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      sku: {
        serializedName: "properties.sku",
        type: {
          name: "Composite",
          className: "TestBaseAccountSKU"
        }
      },
      accessLevel: {
        serializedName: "properties.accessLevel",
        readOnly: true,
        type: {
          name: "String"
        }
      }
    }
  }
};

export const PackageResource: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "PackageResource",
    modelProperties: {
      ...TrackedResource.type.modelProperties,
      systemData: {
        serializedName: "systemData",
        type: {
          name: "Composite",
          className: "SystemData"
        }
      },
      provisioningState: {
        serializedName: "properties.provisioningState",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      applicationName: {
        serializedName: "properties.applicationName",
        type: {
          name: "String"
        }
      },
      version: {
        serializedName: "properties.version",
        type: {
          name: "String"
        }
      },
      testTypes: {
        serializedName: "properties.testTypes",
        readOnly: true,
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "String"
            }
          }
        }
      },
      targetOSList: {
        serializedName: "properties.targetOSList",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "TargetOSInfo"
            }
          }
        }
      },
      packageStatus: {
        serializedName: "properties.packageStatus",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      lastModifiedTime: {
        serializedName: "properties.lastModifiedTime",
        readOnly: true,
        type: {
          name: "DateTime"
        }
      },
      flightingRing: {
        serializedName: "properties.flightingRing",
        type: {
          name: "String"
        }
      },
      isEnabled: {
        serializedName: "properties.isEnabled",
        readOnly: true,
        type: {
          name: "Boolean"
        }
      },
      blobPath: {
        serializedName: "properties.blobPath",
        type: {
          name: "String"
        }
      },
      validationResults: {
        serializedName: "properties.validationResults",
        readOnly: true,
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "PackageValidationResult"
            }
          }
        }
      },
      tests: {
        serializedName: "properties.tests",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "Test"
            }
          }
        }
      }
    }
  }
};

export const AvailableOSResource: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "AvailableOSResource",
    modelProperties: {
      ...ProxyResource.type.modelProperties,
      systemData: {
        serializedName: "systemData",
        type: {
          name: "Composite",
          className: "SystemData"
        }
      },
      osId: {
        serializedName: "properties.osId",
        type: {
          name: "String"
        }
      },
      osName: {
        serializedName: "properties.osName",
        type: {
          name: "String"
        }
      },
      osVersion: {
        serializedName: "properties.osVersion",
        type: {
          name: "String"
        }
      },
      insiderChannel: {
        serializedName: "properties.insiderChannel",
        type: {
          name: "String"
        }
      },
      osUpdateType: {
        serializedName: "properties.osUpdateType",
        type: {
          name: "String"
        }
      },
      osPlatform: {
        serializedName: "properties.osPlatform",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const FlightingRingResource: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "FlightingRingResource",
    modelProperties: {
      ...ProxyResource.type.modelProperties,
      systemData: {
        serializedName: "systemData",
        type: {
          name: "Composite",
          className: "SystemData"
        }
      },
      actualFlightingRingName: {
        serializedName: "properties.actualFlightingRingName",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const TestTypeResource: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "TestTypeResource",
    modelProperties: {
      ...ProxyResource.type.modelProperties,
      systemData: {
        serializedName: "systemData",
        type: {
          name: "Composite",
          className: "SystemData"
        }
      },
      actualTestTypeName: {
        serializedName: "properties.actualTestTypeName",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const TestSummaryResource: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "TestSummaryResource",
    modelProperties: {
      ...ProxyResource.type.modelProperties,
      systemData: {
        serializedName: "systemData",
        type: {
          name: "Composite",
          className: "SystemData"
        }
      },
      testSummaryId: {
        serializedName: "properties.testSummaryId",
        type: {
          name: "String"
        }
      },
      packageId: {
        serializedName: "properties.packageId",
        type: {
          name: "String"
        }
      },
      applicationName: {
        serializedName: "properties.applicationName",
        type: {
          name: "String"
        }
      },
      applicationVersion: {
        serializedName: "properties.applicationVersion",
        type: {
          name: "String"
        }
      },
      executionStatus: {
        serializedName: "properties.executionStatus",
        type: {
          name: "String"
        }
      },
      testStatus: {
        serializedName: "properties.testStatus",
        type: {
          name: "String"
        }
      },
      grade: {
        serializedName: "properties.grade",
        type: {
          name: "String"
        }
      },
      testRunTime: {
        serializedName: "properties.testRunTime",
        type: {
          name: "String"
        }
      },
      featureUpdatesTestSummary: {
        serializedName: "properties.featureUpdatesTestSummary",
        type: {
          name: "Composite",
          className: "OSUpdatesTestSummary"
        }
      },
      securityUpdatesTestSummary: {
        serializedName: "properties.securityUpdatesTestSummary",
        type: {
          name: "Composite",
          className: "OSUpdatesTestSummary"
        }
      },
      packageTags: {
        serializedName: "properties.packageTags",
        type: {
          name: "Dictionary",
          value: { type: { name: "String" } }
        }
      }
    }
  }
};

export const TestResultResource: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "TestResultResource",
    modelProperties: {
      ...ProxyResource.type.modelProperties,
      systemData: {
        serializedName: "systemData",
        type: {
          name: "Composite",
          className: "SystemData"
        }
      },
      baselineTestResultId: {
        serializedName: "properties.baselineTestResultId",
        type: {
          name: "String"
        }
      },
      packageId: {
        serializedName: "properties.packageId",
        type: {
          name: "String"
        }
      },
      applicationName: {
        serializedName: "properties.applicationName",
        type: {
          name: "String"
        }
      },
      applicationVersion: {
        serializedName: "properties.applicationVersion",
        type: {
          name: "String"
        }
      },
      osName: {
        serializedName: "properties.osName",
        type: {
          name: "String"
        }
      },
      releaseName: {
        serializedName: "properties.releaseName",
        type: {
          name: "String"
        }
      },
      releaseVersionDate: {
        serializedName: "properties.releaseVersionDate",
        type: {
          name: "DateTime"
        }
      },
      flightingRing: {
        serializedName: "properties.flightingRing",
        type: {
          name: "String"
        }
      },
      buildVersion: {
        serializedName: "properties.buildVersion",
        type: {
          name: "String"
        }
      },
      buildRevision: {
        serializedName: "properties.buildRevision",
        type: {
          name: "String"
        }
      },
      testType: {
        serializedName: "properties.testType",
        type: {
          name: "String"
        }
      },
      testRunTime: {
        serializedName: "properties.testRunTime",
        type: {
          name: "String"
        }
      },
      isDownloadDataAvailable: {
        serializedName: "properties.isDownloadDataAvailable",
        type: {
          name: "Boolean"
        }
      },
      isVideoAvailable: {
        serializedName: "properties.isVideoAvailable",
        type: {
          name: "Boolean"
        }
      },
      executionStatus: {
        serializedName: "properties.executionStatus",
        type: {
          name: "String"
        }
      },
      testStatus: {
        serializedName: "properties.testStatus",
        type: {
          name: "String"
        }
      },
      grade: {
        serializedName: "properties.grade",
        type: {
          name: "String"
        }
      },
      kbNumber: {
        serializedName: "properties.kbNumber",
        type: {
          name: "String"
        }
      },
      interopMediaType: {
        serializedName: "properties.interopMediaType",
        type: {
          name: "String"
        }
      },
      interopMediaVersion: {
        serializedName: "properties.interopMediaVersion",
        type: {
          name: "String"
        }
      },
      packageVersion: {
        serializedName: "properties.packageVersion",
        type: {
          name: "String"
        }
      },
      analysisSummaries: {
        serializedName: "properties.analysisSummaries",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "TestResultAnalysisSummary"
            }
          }
        }
      }
    }
  }
};

export const OSUpdateResource: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "OSUpdateResource",
    modelProperties: {
      ...ProxyResource.type.modelProperties,
      systemData: {
        serializedName: "systemData",
        type: {
          name: "Composite",
          className: "SystemData"
        }
      },
      osName: {
        serializedName: "properties.osName",
        type: {
          name: "String"
        }
      },
      release: {
        serializedName: "properties.release",
        type: {
          name: "String"
        }
      },
      flightingRing: {
        serializedName: "properties.flightingRing",
        type: {
          name: "String"
        }
      },
      buildVersion: {
        serializedName: "properties.buildVersion",
        type: {
          name: "String"
        }
      },
      buildRevision: {
        serializedName: "properties.buildRevision",
        type: {
          name: "String"
        }
      },
      typePropertiesType: {
        serializedName: "properties.type",
        type: {
          name: "String"
        }
      },
      releaseVersionDate: {
        serializedName: "properties.releaseVersionDate",
        type: {
          name: "DateTime"
        }
      }
    }
  }
};

export const FavoriteProcessResource: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "FavoriteProcessResource",
    modelProperties: {
      ...ProxyResource.type.modelProperties,
      systemData: {
        serializedName: "systemData",
        type: {
          name: "Composite",
          className: "SystemData"
        }
      },
      actualProcessName: {
        serializedName: "properties.actualProcessName",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const AnalysisResultSingletonResource: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "AnalysisResultSingletonResource",
    modelProperties: {
      ...ProxyResource.type.modelProperties,
      systemData: {
        serializedName: "systemData",
        type: {
          name: "Composite",
          className: "SystemData"
        }
      },
      grade: {
        serializedName: "properties.grade",
        type: {
          name: "String"
        }
      },
      analysisResultType: {
        serializedName: "properties.analysisResultType",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const EmailEventResource: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "EmailEventResource",
    modelProperties: {
      ...ProxyResource.type.modelProperties,
      systemData: {
        serializedName: "systemData",
        type: {
          name: "Composite",
          className: "SystemData"
        }
      },
      eventId: {
        serializedName: "properties.eventId",
        type: {
          name: "String"
        }
      },
      eventName: {
        serializedName: "properties.eventName",
        type: {
          name: "String"
        }
      },
      displayName: {
        serializedName: "properties.displayName",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const CustomerEventResource: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "CustomerEventResource",
    modelProperties: {
      ...ProxyResource.type.modelProperties,
      systemData: {
        serializedName: "systemData",
        type: {
          name: "Composite",
          className: "SystemData"
        }
      },
      eventName: {
        serializedName: "properties.eventName",
        type: {
          name: "String"
        }
      },
      receivers: {
        serializedName: "properties.receivers",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "NotificationEventReceiver"
            }
          }
        }
      }
    }
  }
};

export const TestBaseAccountsCreateHeaders: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "TestBaseAccountsCreateHeaders",
    modelProperties: {
      azureAsyncOperation: {
        serializedName: "azure-asyncoperation",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const TestBaseAccountsUpdateHeaders: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "TestBaseAccountsUpdateHeaders",
    modelProperties: {
      azureAsyncOperation: {
        serializedName: "azure-asyncoperation",
        type: {
          name: "String"
        }
      },
      location: {
        serializedName: "location",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const TestBaseAccountsDeleteHeaders: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "TestBaseAccountsDeleteHeaders",
    modelProperties: {
      azureAsyncOperation: {
        serializedName: "azure-asyncoperation",
        type: {
          name: "String"
        }
      },
      location: {
        serializedName: "location",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const TestBaseAccountsOffboardHeaders: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "TestBaseAccountsOffboardHeaders",
    modelProperties: {
      azureAsyncOperation: {
        serializedName: "azure-asyncoperation",
        type: {
          name: "String"
        }
      },
      location: {
        serializedName: "location",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const PackagesCreateHeaders: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "PackagesCreateHeaders",
    modelProperties: {
      azureAsyncOperation: {
        serializedName: "azure-asyncoperation",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const PackagesUpdateHeaders: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "PackagesUpdateHeaders",
    modelProperties: {
      azureAsyncOperation: {
        serializedName: "azure-asyncoperation",
        type: {
          name: "String"
        }
      },
      location: {
        serializedName: "location",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const PackagesDeleteHeaders: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "PackagesDeleteHeaders",
    modelProperties: {
      azureAsyncOperation: {
        serializedName: "azure-asyncoperation",
        type: {
          name: "String"
        }
      },
      location: {
        serializedName: "location",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const PackagesHardDeleteHeaders: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "PackagesHardDeleteHeaders",
    modelProperties: {
      azureAsyncOperation: {
        serializedName: "azure-asyncoperation",
        type: {
          name: "String"
        }
      },
      location: {
        serializedName: "location",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const PackagesRunTestHeaders: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "PackagesRunTestHeaders",
    modelProperties: {
      azureAsyncOperation: {
        serializedName: "azure-asyncoperation",
        type: {
          name: "String"
        }
      },
      location: {
        serializedName: "location",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const CustomerEventsCreateHeaders: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "CustomerEventsCreateHeaders",
    modelProperties: {
      azureAsyncOperation: {
        serializedName: "azure-asyncoperation",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const CustomerEventsDeleteHeaders: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "CustomerEventsDeleteHeaders",
    modelProperties: {
      azureAsyncOperation: {
        serializedName: "azure-asyncoperation",
        type: {
          name: "String"
        }
      },
      location: {
        serializedName: "location",
        type: {
          name: "String"
        }
      }
    }
  }
};

export let discriminators = {
  AnalysisResultSingletonResourceProperties: AnalysisResultSingletonResourceProperties,
  "AnalysisResultSingletonResourceProperties.ScriptExecution": ScriptExecutionResultSingletonResourceProperties,
  "AnalysisResultSingletonResourceProperties.Reliability": ReliabilityResultSingletonResourceProperties,
  "AnalysisResultSingletonResourceProperties.CPUUtilization": CPUUtilizationResultSingletonResourceProperties,
  "AnalysisResultSingletonResourceProperties.MemoryUtilization": MemoryUtilizationResultSingletonResourceProperties,
  "AnalysisResultSingletonResourceProperties.CPURegression": CPURegressionResultSingletonResourceProperties,
  "AnalysisResultSingletonResourceProperties.MemoryRegression": MemoryRegressionResultSingletonResourceProperties,
  "AnalysisResultSingletonResourceProperties.TestAnalysis": TestAnalysisResultSingletonResourceProperties
};
