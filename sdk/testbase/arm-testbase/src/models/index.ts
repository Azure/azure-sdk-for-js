/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */

import { BaseResource, CloudError, AzureServiceClientOptions } from "@azure/ms-rest-azure-js";
import * as msRest from "@azure/ms-rest-js";

export { BaseResource, CloudError };

/**
 * The Resource definition.
 */
export interface Resource extends BaseResource {
  /**
   * Resource ID.
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly id?: string;
  /**
   * Resource name.
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly name?: string;
  /**
   * Resource type.
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly type?: string;
}

/**
 * The resource model definition for an ARM proxy resource. It will have everything other than
 * required location and tags
 */
export interface ProxyResource extends Resource {
}

/**
 * The resource model definition for an ARM tracked top level resource
 */
export interface TrackedResource extends Resource {
  /**
   * The tags of the resource.
   */
  tags?: { [propertyName: string]: string };
  /**
   * The geo-location where the resource lives
   */
  location: string;
  /**
   * Resource Etag.
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly etag?: string;
}

/**
 * Error definition.
 */
export interface ErrorDefinition {
  /**
   * The error code.
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly code?: string;
  /**
   * The error message.
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly message?: string;
  /**
   * The target of the particular error.
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly target?: string;
  /**
   * The error details.
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly details?: ErrorDefinition[];
}

/**
 * The error response send when an operation fails.
 */
export interface ErrorResponse {
  /**
   * The error details.
   */
  error?: ErrorDefinition;
}

/**
 * Properties of the Test Base Account SKU Capability.
 */
export interface TestBaseAccountSKUCapability {
  /**
   * An invariant to describe the feature, such as 'SLA'.
   */
  name: string;
  /**
   * An invariant if the feature is measured by quantity, such as 99.9%.
   */
  value: string;
}

/**
 * Describes a Test Base Account SKU.
 */
export interface TestBaseAccountSKU {
  /**
   * The type of resource the SKU applies to.
   */
  resourceType?: string;
  /**
   * The name of the SKU. This is typically a letter + number code, such as B0 or S0.
   */
  name: string;
  /**
   * The tier of this particular SKU. Possible values include: 'Basic', 'Standard'
   */
  tier: Tier;
  /**
   * The capabilities of a SKU.
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly capabilities?: TestBaseAccountSKUCapability[];
  /**
   * The locations that the SKU is available.
   */
  locations?: string[];
}

/**
 * Metadata pertaining to creation and last modification of the resource.
 */
export interface SystemData {
  /**
   * The identity that created the resource.
   */
  createdBy?: string;
  /**
   * The type of identity that created the resource. Possible values include: 'User',
   * 'Application', 'ManagedIdentity', 'Key'
   */
  createdByType?: CreatedByType;
  /**
   * The timestamp of resource creation (UTC).
   */
  createdAt?: Date;
  /**
   * The identity that last modified the resource.
   */
  lastModifiedBy?: string;
  /**
   * The type of identity that last modified the resource. Possible values include: 'User',
   * 'Application', 'ManagedIdentity', 'Key'
   */
  lastModifiedByType?: CreatedByType;
  /**
   * The type of identity that last modified the resource.
   */
  lastModifiedAt?: Date;
}

/**
 * The Test Base Account resource.
 */
export interface TestBaseAccountResource extends TrackedResource {
  /**
   * The system metadata relating to this resource
   */
  systemData?: SystemData;
  /**
   * The provisioning state of the resource. Possible values include: 'Succeeded', 'Failed',
   * 'Cancelled', 'Creating', 'Deleting', 'Updating'
   */
  provisioningState?: ProvisioningState;
  /**
   * The SKU of the Test Base Account.
   */
  sku: TestBaseAccountSKU;
  /**
   * The access level of the Test Base Account.
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly accessLevel?: string;
}

/**
 * Parameters supplied to update a Test Base Account.
 */
export interface TestBaseAccountUpdateParameters {
  /**
   * The SKU of the Test Base Account.
   */
  sku?: TestBaseAccountSKU;
  /**
   * The tags of the Test Base Account.
   */
  tags?: { [propertyName: string]: string };
}

/**
 * Localizable String object containing the name and a localized value.
 */
export interface TestBaseAccountUsageName {
  /**
   * The identifier of the usage.
   */
  value?: string;
  /**
   * Localized name of the usage.
   */
  localizedValue?: string;
}

/**
 * The usage data of a Test Base Account.
 */
export interface TestBaseAccountUsageData {
  /**
   * Fully qualified ARM resource id
   */
  id?: string;
  /**
   * Localizable String object containing the name and a localized value.
   */
  name?: TestBaseAccountUsageName;
  /**
   * Representing the units of the usage quota. Possible values are: Count, Bytes, Seconds,
   * Percent, CountPerSecond, BytesPerSecond.
   */
  unit?: string;
  /**
   * The maximum permitted value for the usage quota. If there is no limit, this value will be -1.
   */
  limit?: number;
  /**
   * Current value for the usage quota.
   */
  currentValue?: number;
}

/**
 * The parameters supplied to the Test Base Account GetFileUploadURL action.
 */
export interface GetFileUploadURLParameters {
  /**
   * The custom file name of the uploaded blob.
   */
  blobName?: string;
}

/**
 * The URL response
 */
export interface FileUploadURLResponse {
  /**
   * The URL used for uploading the package.
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly uploadUrl?: string;
  /**
   * The blob path of the uploaded package. It will be used as the 'blobPath' property of
   * PackageResource.
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly blobPath?: string;
}

/**
 * The Available OS resource.
 */
export interface AvailableOSResource extends ProxyResource {
  /**
   * The system metadata relating to this resource
   */
  systemData?: SystemData;
  /**
   * The Id of an Available OS of a Test Base Account.
   */
  osId?: string;
  /**
   * The name of an Available OS of a Test Base Account.
   */
  osName?: string;
  /**
   * The version of an Available OS of a Test Base Account.
   */
  osVersion?: string;
  /**
   * The insider channel of an Available OS of a Test Base Account.
   */
  insiderChannel?: string;
  /**
   * The OS update type of an Available OS of a Test Base Account.
   */
  osUpdateType?: string;
  /**
   * The Platform of an Available OS of a Test Base Account.
   */
  osPlatform?: string;
}

/**
 * The flighting ring resource.
 */
export interface FlightingRingResource extends ProxyResource {
  /**
   * The system metadata relating to this resource
   */
  systemData?: SystemData;
  /**
   * The actual name of a flighting ring of a Test Base Account.
   */
  actualFlightingRingName?: string;
}

/**
 * The test type resource.
 */
export interface TestTypeResource extends ProxyResource {
  /**
   * The system metadata relating to this resource
   */
  systemData?: SystemData;
  /**
   * The actual name of a test type of a Test Base Account.
   */
  actualTestTypeName?: string;
}

/**
 * Parameters body to pass for Test Base Package name availability check.
 */
export interface PackageCheckNameAvailabilityParameters {
  /**
   * Resource name to verify.
   */
  name: string;
  /**
   * Application name to verify.
   */
  applicationName: string;
  /**
   * Version name to verify.
   */
  version: string;
  /**
   * fully qualified resource type which includes provider namespace.
   */
  type: string;
}

/**
 * Description of a Check Name availability response properties.
 */
export interface CheckNameAvailabilityResult {
  /**
   * Value indicating the availability of the name: true if the name is available; otherwise,
   * false.
   */
  nameAvailable?: boolean;
  /**
   * The reason for unavailability of a name. Required if nameAvailable == false. Possible values
   * include: 'Invalid', 'AlreadyExists'
   */
  reason?: Reason;
  /**
   * The detailed info regarding the reason associated with the name. Required if nameAvailable ==
   * false.
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly message?: string;
}

/**
 * The information of the target OS to be tested.
 */
export interface TargetOSInfo {
  /**
   * Specifies the OS update type to test against, e.g., 'Security updates' or 'Feature updates'.
   */
  osUpdateType: string;
  /**
   * Specifies the target OSs to be tested.
   */
  targetOSs: string[];
}

/**
 * The validation results. There's validation on package when it's created or updated.
 */
export interface PackageValidationResult {
  /**
   * Validation name.
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly validationName?: string;
  /**
   * Indicates whether the package passed the validation.
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly isValid?: boolean;
  /**
   * Error information.
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly errors?: string[];
}

/**
 * The command used in the test
 */
export interface Command {
  /**
   * The name of the command.
   */
  name: string;
  /**
   * The action of the command. Possible values include: 'Install', 'Launch', 'Close', 'Uninstall',
   * 'Custom'
   */
  action: Action;
  /**
   * The type of command content. Possible values include: 'Inline', 'File', 'Path'
   */
  contentType: ContentType;
  /**
   * The content of the command. The content depends on source type.
   */
  content: string;
  /**
   * Specifies whether to run the command as administrator.
   */
  runElevated?: boolean;
  /**
   * Specifies whether to restart the VM after the command executed.
   */
  restartAfter?: boolean;
  /**
   * Specifies the max run time of the command.
   */
  maxRunTime?: number;
  /**
   * Specifies whether to run the command in interactive mode.
   */
  runAsInteractive?: boolean;
  /**
   * Specifies whether to run the command even if a previous command is failed.
   */
  alwaysRun?: boolean;
  /**
   * Specifies whether to apply update before the command.
   */
  applyUpdateBefore?: boolean;
}

/**
 * The definition of a Test.
 */
export interface Test {
  /**
   * The type of the test. Possible values include: 'OutOfBoxTest', 'FunctionalTest'
   */
  testType: TestType;
  /**
   * The status of the validation run of the package. Possible values include: 'Unknown',
   * 'Pending', 'Passed', 'Failed'
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly validationRunStatus?: ValidationRunStatus;
  /**
   * Indicates if this test is active.It doesn't schedule test for not active Test.
   */
  isActive?: boolean;
  /**
   * The commands used in the test.
   */
  commands: Command[];
}

/**
 * The Test Base Package resource.
 */
export interface PackageResource extends TrackedResource {
  /**
   * The system metadata relating to this resource
   */
  systemData?: SystemData;
  /**
   * The provisioning state of the resource. Possible values include: 'Succeeded', 'Failed',
   * 'Cancelled', 'Creating', 'Deleting', 'Updating'
   */
  provisioningState?: ProvisioningState;
  /**
   * Application name
   */
  applicationName: string;
  /**
   * Application version
   */
  version: string;
  /**
   * OOB, functional or both. Mapped to the data in 'tests' property.
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly testTypes?: TestType[];
  /**
   * Specifies the target OSs of specific OS Update types.
   */
  targetOSList: TargetOSInfo[];
  /**
   * The status of the package. Possible values include: 'Unknown', 'Registered', 'Ready', 'Error',
   * 'ValidatingPackage', 'PreValidationCheckPass', 'Deleted', 'ValidationLongerThanUsual',
   * 'VerifyingPackage'
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly packageStatus?: PackageStatus;
  /**
   * The UTC timestamp when the package was last modified.
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly lastModifiedTime?: Date;
  /**
   * The flighting ring for feature update.
   */
  flightingRing: string;
  /**
   * Flag showing that whether the package is enabled. It doesn't schedule test for package which
   * is not enabled.
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly isEnabled?: boolean;
  /**
   * The file path of the package.
   */
  blobPath: string;
  /**
   * The validation results. There's validation on package when it's created or updated.
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly validationResults?: PackageValidationResult[];
  /**
   * The detailed test information.
   */
  tests: Test[];
}

/**
 * Parameters supplied to update a Test Base Package.
 */
export interface PackageUpdateParameters {
  /**
   * Specifies the target OSs of specific OS Update types.
   */
  targetOSList?: TargetOSInfo[];
  /**
   * The flighting ring for feature update.
   */
  flightingRing?: string;
  /**
   * Specifies whether the package is enabled. It doesn't schedule test for package which is not
   * enabled.
   */
  isEnabled?: boolean;
  /**
   * The file name of the package.
   */
  blobPath?: string;
  /**
   * The detailed test information.
   */
  tests?: Test[];
  /**
   * The tags of the Package.
   */
  tags?: { [propertyName: string]: string };
}

/**
 * The response of getting a download URL.
 */
export interface DownloadURLResponse {
  /**
   * The download URL.
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly downloadUrl?: string;
  /**
   * Expiry date of the download URL.
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly expirationTime?: Date;
}

/**
 * The summary of a test.
 */
export interface OSUpdateTestSummary {
  /**
   * The operating system name. e.g. Windows 10 1809.
   */
  osName?: string;
  /**
   * The name of the tested release (OS update).
   */
  releaseName?: string;
  /**
   * The build version of the tested release (OS update)
   */
  buildVersion?: string;
  /**
   * The build revision of the tested release (OS update)
   */
  buildRevision?: string;
  /**
   * The release version date.
   */
  releaseVersionDate?: Date;
  /**
   * The flighting ring, only for release of feature updates.
   */
  flightingRing?: string;
  /**
   * The execution status of the test. Possible values include: 'None', 'InProgress', 'Processing',
   * 'Completed', 'NotExecuted', 'Incomplete', 'Failed', 'Succeeded'
   */
  executionStatus?: ExecutionStatus;
  /**
   * The grade of the test. Possible values include: 'None', 'NotAvailable', 'Pass', 'Fail'
   */
  grade?: Grade;
  /**
   * The run time of the test.
   */
  testRunTime?: string;
  /**
   * The test type of the package
   */
  testType?: string;
}

/**
 * The summary of some tests.
 */
export interface OSUpdatesTestSummary {
  /**
   * The status of the last test. Possible values include: 'None', 'InProgress', 'Processing',
   * 'Completed', 'NotExecuted', 'Incomplete', 'Failed', 'Succeeded'
   */
  executionStatus?: ExecutionStatus;
  /**
   * The grade of last test. Possible values include: 'None', 'NotAvailable', 'Pass', 'Fail'
   */
  grade?: Grade;
  /**
   * The run time of the last test.
   */
  testRunTime?: string;
  /**
   * Detailed summary for each OS update
   */
  osUpdateTestSummaries?: OSUpdateTestSummary[];
}

/**
 * Summary of a Test.
 */
export interface TestSummaryResource extends ProxyResource {
  /**
   * The system metadata relating to this resource
   */
  systemData?: SystemData;
  /**
   * The Id of the current Test Summary.
   */
  testSummaryId?: string;
  /**
   * The Azure resource Id of package.
   */
  packageId?: string;
  /**
   * Application name.
   */
  applicationName?: string;
  /**
   * Application version.
   */
  applicationVersion?: string;
  /**
   * The execution status of last test. Possible values include: 'None', 'InProgress',
   * 'Processing', 'Completed', 'NotExecuted', 'Incomplete', 'Failed', 'Succeeded'
   */
  executionStatus?: ExecutionStatus;
  /**
   * The grade of the test. Possible values include: 'None', 'NotAvailable', 'Pass', 'Fail'
   */
  grade?: Grade;
  /**
   * The run time of the last test.
   */
  testRunTime?: string;
  /**
   * The result summary of tests triggered by feature updates
   */
  featureUpdatesTestSummary?: OSUpdatesTestSummary;
  /**
   * The result summary of tests triggered by security updates
   */
  securityUpdatesTestSummary?: OSUpdatesTestSummary;
}

/**
 * The summary of a Test Analysis Result.
 */
export interface TestResultAnalysisSummary {
  /**
   * Metric name
   */
  name?: string;
  /**
   * The analysis status. Possible values include: 'None', 'Completed', 'InProgress', 'Failed',
   * 'Succeeded', 'Available', 'NotAvailable'
   */
  analysisStatus?: AnalysisStatus;
  /**
   * The grade of the test result. Possible values include: 'None', 'NotAvailable', 'Pass', 'Fail'
   */
  grade?: Grade;
}

/**
 * The Test Result Resource.
 */
export interface TestResultResource extends ProxyResource {
  /**
   * The system metadata relating to this resource
   */
  systemData?: SystemData;
  /**
   * Azure Id of the baseline test result.
   */
  baselineTestResultId?: string;
  /**
   * Resource Id of the package.
   */
  packageId?: string;
  /**
   * Application name.
   */
  applicationName?: string;
  /**
   * Application version.
   */
  applicationVersion?: string;
  /**
   * The operating system name, e.g. Windows 10 1809.
   */
  osName?: string;
  /**
   * The name of the tested release (OS update).
   */
  releaseName?: string;
  /**
   * The release version date of the tested release.
   */
  releaseVersionDate?: Date;
  /**
   * The flighting ring, only for release of feature updates.
   */
  flightingRing?: string;
  /**
   * The build version of the tested release (OS update).
   */
  buildVersion?: string;
  /**
   * The build revision of the tested release (OS update).
   */
  buildRevision?: string;
  /**
   * Test type. E.g. 'Out of box test' or 'Functional test'.
   */
  testType?: string;
  /**
   * The run time of the test.
   */
  testRunTime?: string;
  /**
   * Whether download data is available.
   */
  isDownloadDataAvailable?: boolean;
  /**
   * Whether video data is available.
   */
  isVideoAvailable?: boolean;
  /**
   * The execution status of the test. Possible values include: 'None', 'InProgress', 'Processing',
   * 'Completed', 'NotExecuted', 'Incomplete', 'Failed', 'Succeeded'
   */
  executionStatus?: ExecutionStatus;
  /**
   * The grade of the test. Possible values include: 'None', 'NotAvailable', 'Pass', 'Fail'
   */
  grade?: Grade;
  /**
   * KB number.
   */
  kbNumber?: string;
  /**
   * The version of the Windows update package.
   */
  packageVersion?: string;
  /**
   * List of analysis summaries.
   */
  analysisSummaries?: TestResultAnalysisSummary[];
}

/**
 * An OS Update.
 */
export interface OSUpdateResource extends ProxyResource {
  /**
   * The system metadata relating to this resource
   */
  systemData?: SystemData;
  /**
   * The name of the OS.
   */
  osName?: string;
  /**
   * The name of tested release.
   */
  release?: string;
  /**
   * The flighting ring, only for release of feature updates.
   */
  flightingRing?: string;
  /**
   * The build version of the tested release (OS update).
   */
  buildVersion?: string;
  /**
   * The build revision of the tested release (OS update)
   */
  buildRevision?: string;
  /**
   * The type of this release (OS update). Possible values include: 'SecurityUpdate',
   * 'FeatureUpdate'
   */
  oSUpdateResourceType?: Type;
  /**
   * The release version date the tested release (OS update)
   */
  releaseVersionDate?: Date;
}

/**
 * A favorite process identifier.
 */
export interface FavoriteProcessResource extends ProxyResource {
  /**
   * The system metadata relating to this resource
   */
  systemData?: SystemData;
  /**
   * The actual name of the favorite process. It will be equal to resource name except for the
   * scenario that the process name contains characters that are not allowed in the resource name.
   */
  actualProcessName: string;
}

/**
 * Contains the possible cases for AnalysisResultSingletonResourceProperties.
 */
export type AnalysisResultSingletonResourcePropertiesUnion = AnalysisResultSingletonResourceProperties | ScriptExecutionResultSingletonResourceProperties | ReliabilityResultSingletonResourceProperties | CPUUtilizationResultSingletonResourceProperties | MemoryUtilizationResultSingletonResourceProperties | CPURegressionResultSingletonResourceProperties | MemoryRegressionResultSingletonResourceProperties;

/**
 * The properties of Analysis Result resource.
 */
export interface AnalysisResultSingletonResourceProperties {
  /**
   * Polymorphic Discriminator
   */
  analysisResultType: "AnalysisResultSingletonResourceProperties";
  /**
   * The grade of the test. Possible values include: 'None', 'NotAvailable', 'Pass', 'Fail'
   */
  grade?: Grade;
}

/**
 * The Analysis Result Singleton Resource.
 */
export interface AnalysisResultSingletonResource extends ProxyResource {
  /**
   * The system metadata relating to this resource
   */
  systemData?: SystemData;
  /**
   * The grade of the test. Possible values include: 'None', 'NotAvailable', 'Pass', 'Fail'
   */
  grade?: Grade;
  /**
   * Polymorphic Discriminator
   */
  analysisResultType: string;
}

/**
 * The Script Execution Result.
 */
export interface ScriptExecutionResult {
  /**
   * Name of script.
   */
  scriptName?: string;
  /**
   * Start time of script execution.
   */
  startTime?: Date;
  /**
   * End time of script execution.
   */
  endTime?: Date;
  /**
   * Exit code.
   */
  exitCode?: number;
  /**
   * Whether the subscription execution is timeout.
   */
  timeOut?: boolean;
}

/**
 * The properties of Script Execution Result.
 */
export interface ScriptExecutionResultSingletonResourceProperties {
  /**
   * Polymorphic Discriminator
   */
  analysisResultType: "ScriptExecution";
  /**
   * The grade of the test. Possible values include: 'None', 'NotAvailable', 'Pass', 'Fail'
   */
  grade?: Grade;
  /**
   * The result array data.
   */
  scriptExecutionResults?: ScriptExecutionResult[];
}

/**
 * The details of a regression test.
 */
export interface RegressionTestDetails {
  /**
   * Difference between the two datasets being analyzed.
   */
  diff?: number;
  /**
   * Indicates if a regression was inferred.
   */
  isRegressed?: boolean;
}

/**
 * The Reliability Result.
 */
export interface ReliabilityResult {
  /**
   * File name.
   */
  fileName?: string;
  /**
   * Count of number of launches.
   */
  launchCount?: number;
  /**
   * Count of number of crashes.
   */
  crashCount?: number;
  /**
   * Count of number of hangs.
   */
  hangCount?: number;
  /**
   * The regression grade. Possible values include: 'None', 'NotAvailable', 'Pass', 'Fail'
   */
  regressionGrade?: Grade;
  /**
   * The statistic regression grade for crash signal. Possible values include: 'None',
   * 'NotAvailable', 'Pass', 'Fail'
   */
  crashRegressionGrade?: Grade;
  /**
   * Details related to the crash regression analysis.
   */
  crashRegressionTestDetails?: RegressionTestDetails;
  /**
   * The statistic regression grade for hang signal. Possible values include: 'None',
   * 'NotAvailable', 'Pass', 'Fail'
   */
  hangRegressionGrade?: Grade;
  /**
   * Details related to the hang regression analysis.
   */
  hangRegressionTestDetails?: RegressionTestDetails;
}

/**
 * The properties of Reliability Result.
 */
export interface ReliabilityResultSingletonResourceProperties {
  /**
   * Polymorphic Discriminator
   */
  analysisResultType: "Reliability";
  /**
   * The grade of the test. Possible values include: 'None', 'NotAvailable', 'Pass', 'Fail'
   */
  grade?: Grade;
  /**
   * The result array data.
   */
  reliabilityResults?: ReliabilityResult[];
}

/**
 * The bound of a utilization result.
 */
export interface UtilizationBound {
  /**
   * The percentile of the bound.
   */
  percentile?: number;
  /**
   * The value of the bound.
   */
  value?: number;
}

/**
 * The utilization entry.
 */
export interface UtilizationEntry {
  /**
   * The timestamp.
   */
  timestamp?: Date;
  /**
   * The value.
   */
  value?: number;
}

/**
 * The Utilization Result.
 */
export interface UtilizationResult {
  /**
   * Process name, or '_total' for all processes
   */
  process?: string;
  /**
   * Upper bound
   */
  upperBound?: UtilizationBound;
  /**
   * Lower bound
   */
  lowerBound?: UtilizationBound;
  /**
   * Utilization data
   */
  utilization?: UtilizationEntry[];
}

/**
 * The properties of CPU Utilization Result.
 */
export interface CPUUtilizationResultSingletonResourceProperties {
  /**
   * Polymorphic Discriminator
   */
  analysisResultType: "CPUUtilization";
  /**
   * The grade of the test. Possible values include: 'None', 'NotAvailable', 'Pass', 'Fail'
   */
  grade?: Grade;
  /**
   * The result array data.
   */
  cpuUtilizationResults?: UtilizationResult[];
}

/**
 * The properties of Memory Utilization Result.
 */
export interface MemoryUtilizationResultSingletonResourceProperties {
  /**
   * Polymorphic Discriminator
   */
  analysisResultType: "MemoryUtilization";
  /**
   * The grade of the test. Possible values include: 'None', 'NotAvailable', 'Pass', 'Fail'
   */
  grade?: Grade;
  /**
   * The result array data.
   */
  memoryUtilizationResults?: UtilizationResult[];
}

/**
 * The regression result.
 */
export interface RegressionResult {
  /**
   * FileName of the binary being analyzed.
   */
  fileName?: string;
  /**
   * The grade of the test. Possible values include: 'None', 'NotAvailable', 'Pass', 'Fail'
   */
  grade?: Grade;
  /**
   * Message that facilitates debugging a particular regression, if any was inferred.
   */
  details?: string;
  /**
   * Difference between the two datasets being analyzed.
   */
  diff?: number;
  /**
   * Indicates if a regression was inferred.
   */
  isRegressed?: boolean;
}

/**
 * The properties of CPU Regression Result.
 */
export interface CPURegressionResultSingletonResourceProperties {
  /**
   * Polymorphic Discriminator
   */
  analysisResultType: "CPURegression";
  /**
   * The grade of the test. Possible values include: 'None', 'NotAvailable', 'Pass', 'Fail'
   */
  grade?: Grade;
  /**
   * The result array data.
   */
  cpuRegressionResults?: RegressionResult[];
}

/**
 * The properties of Memory Regression Result.
 */
export interface MemoryRegressionResultSingletonResourceProperties {
  /**
   * Polymorphic Discriminator
   */
  analysisResultType: "MemoryRegression";
  /**
   * The grade of the test. Possible values include: 'None', 'NotAvailable', 'Pass', 'Fail'
   */
  grade?: Grade;
  /**
   * The result array data.
   */
  memoryRegressionResults?: RegressionResult[];
}

/**
 * The object that describes the operation.
 */
export interface OperationDisplay {
  /**
   * The resource provider name: Microsoft.TestBase.
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly provider?: string;
  /**
   * Operation type: read, write, delete, listPackages, etc.
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly operation?: string;
  /**
   * Resource type on which the operation is performed.
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly resource?: string;
  /**
   * Friendly name of the operation.
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly description?: string;
}

/**
 * REST API operation
 */
export interface Operation {
  /**
   * Operation name: {provider}/{resource}/{operation}.
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly name?: string;
  /**
   * Indicates whether the operation is a data action
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly isDataAction?: boolean;
  /**
   * Origin of the operation
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly origin?: string;
  /**
   * The object that describes the operation.
   */
  display?: OperationDisplay;
  /**
   * Extra properties of the operation.
   */
  properties?: any;
}

/**
 * Optional Parameters.
 */
export interface TestBaseAccountsListBySubscriptionOptionalParams extends msRest.RequestOptionsBase {
  /**
   * The flag indicating if we need to include the Test Base Accounts which were soft deleted
   * before.
   */
  getDeleted?: boolean;
}

/**
 * Optional Parameters.
 */
export interface TestBaseAccountsListByResourceGroupOptionalParams extends msRest.RequestOptionsBase {
  /**
   * The flag indicating if we need to include the Test Base Accounts which were soft deleted
   * before.
   */
  getDeleted?: boolean;
}

/**
 * Optional Parameters.
 */
export interface TestBaseAccountsListBySubscriptionNextOptionalParams extends msRest.RequestOptionsBase {
  /**
   * The flag indicating if we need to include the Test Base Accounts which were soft deleted
   * before.
   */
  getDeleted?: boolean;
}

/**
 * Optional Parameters.
 */
export interface TestBaseAccountsListByResourceGroupNextOptionalParams extends msRest.RequestOptionsBase {
  /**
   * The flag indicating if we need to include the Test Base Accounts which were soft deleted
   * before.
   */
  getDeleted?: boolean;
}

/**
 * Optional Parameters.
 */
export interface TestBaseAccountCreateOptionalParams extends msRest.RequestOptionsBase {
  /**
   * The flag indicating if we would like to restore the Test Base Accounts which were soft deleted
   * before.
   */
  restore?: boolean;
}

/**
 * Optional Parameters.
 */
export interface TestBaseAccountBeginCreateOptionalParams extends msRest.RequestOptionsBase {
  /**
   * The flag indicating if we would like to restore the Test Base Accounts which were soft deleted
   * before.
   */
  restore?: boolean;
}

/**
 * Optional Parameters.
 */
export interface TestBaseAccountUsageListOptionalParams extends msRest.RequestOptionsBase {
  /**
   * Odata filter
   */
  filter?: string;
}

/**
 * Optional Parameters.
 */
export interface TestBaseAccountUsageListNextOptionalParams extends msRest.RequestOptionsBase {
  /**
   * Odata filter
   */
  filter?: string;
}

/**
 * Optional Parameters.
 */
export interface RESTAPIforTestBaseTestBaseAccountGetFileUploadUrlOptionalParams extends msRest.RequestOptionsBase {
  /**
   * The custom file name of the uploaded blob.
   */
  blobName?: string;
}

/**
 * Optional Parameters.
 */
export interface TestResultsListOptionalParams extends msRest.RequestOptionsBase {
  /**
   * Odata filter
   */
  filter?: string;
}

/**
 * Optional Parameters.
 */
export interface TestResultsListNextOptionalParams extends msRest.RequestOptionsBase {
  /**
   * Odata filter
   */
  filter?: string;
}

/**
 * An interface representing RESTAPIforTestBaseOptions.
 */
export interface RESTAPIforTestBaseOptions extends AzureServiceClientOptions {
  baseUri?: string;
}

/**
 * Defines headers for Create operation.
 */
export interface TestBaseAccountCreateHeaders {
  /**
   * URL to query for status of the operation.
   */
  azureAsyncOperation: string;
}

/**
 * Defines headers for Update operation.
 */
export interface TestBaseAccountUpdateHeaders {
  /**
   * URL to query for status of the operation.
   */
  azureAsyncOperation: string;
  /**
   * URL to query for status of the operation.
   */
  locationHeader: string;
}

/**
 * Defines headers for Delete operation.
 */
export interface TestBaseAccountDeleteHeaders {
  /**
   * URL to query for status of the operation.
   */
  azureAsyncOperation: string;
  /**
   * URL to query for status of the operation.
   */
  location: string;
}

/**
 * Defines headers for Offboard operation.
 */
export interface TestBaseAccountOffboardHeaders {
  /**
   * URL to query for status of the operation.
   */
  azureAsyncOperation: string;
  /**
   * URL to query for status of the operation.
   */
  location: string;
}

/**
 * Defines headers for Create operation.
 */
export interface PackageCreateHeaders {
  /**
   * URL to query for status of the operation.
   */
  azureAsyncOperation: string;
}

/**
 * Defines headers for Update operation.
 */
export interface PackageUpdateHeaders {
  /**
   * URL to query for status of the operation.
   */
  azureAsyncOperation: string;
  /**
   * URL to query for status of the operation.
   */
  locationHeader: string;
}

/**
 * Defines headers for Delete operation.
 */
export interface PackageDeleteHeaders {
  /**
   * URL to query for status of the operation.
   */
  azureAsyncOperation: string;
  /**
   * URL to query for status of the operation.
   */
  location: string;
}

/**
 * Defines headers for HardDelete operation.
 */
export interface PackageHardDeleteHeaders {
  /**
   * URL to query for status of the operation.
   */
  azureAsyncOperation: string;
  /**
   * URL to query for status of the operation.
   */
  location: string;
}

/**
 * @interface
 * A list of Test Base Account SKUs.
 * @extends Array<TestBaseAccountSKU>
 */
export interface TestBaseAccountSKUListResult extends Array<TestBaseAccountSKU> {
  /**
   * Link to the next set of results. Not empty if value contains incomplete list of results.
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly nextLink?: string;
}

/**
 * @interface
 * A list of Test Base Accounts.
 * @extends Array<TestBaseAccountResource>
 */
export interface TestBaseAccountListResult extends Array<TestBaseAccountResource> {
  /**
   * Link to the next set of results. Not empty if value contains incomplete list of results.
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly nextLink?: string;
}

/**
 * @interface
 * A list of Test Base Account usage data.
 * @extends Array<TestBaseAccountUsageData>
 */
export interface TestBaseAccountUsageDataList extends Array<TestBaseAccountUsageData> {
  /**
   * Link to the next set of results. Not empty if value contains incomplete list of results.
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly nextLink?: string;
}

/**
 * @interface
 * A list of available OSs.
 * @extends Array<AvailableOSResource>
 */
export interface AvailableOSListResult extends Array<AvailableOSResource> {
  /**
   * Link to the next set of results. Not empty if value contains incomplete list of results.
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly nextLink?: string;
}

/**
 * @interface
 * A list of flighting rings.
 * @extends Array<FlightingRingResource>
 */
export interface FlightingRingListResult extends Array<FlightingRingResource> {
  /**
   * Link to the next set of results. Not empty if value contains incomplete list of results.
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly nextLink?: string;
}

/**
 * @interface
 * A list of test types.
 * @extends Array<TestTypeResource>
 */
export interface TestTypeListResult extends Array<TestTypeResource> {
  /**
   * Link to the next set of results. Not empty if value contains incomplete list of results.
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly nextLink?: string;
}

/**
 * @interface
 * A list of Test Base Packages.
 * @extends Array<PackageResource>
 */
export interface PackageListResult extends Array<PackageResource> {
  /**
   * Link to the next set of results. Not empty if value contains incomplete list of results.
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly nextLink?: string;
}

/**
 * @interface
 * A list of Test Summaries.
 * @extends Array<TestSummaryResource>
 */
export interface TestSummaryListResult extends Array<TestSummaryResource> {
  /**
   * Link to the next set of results. Not empty if value contains incomplete list of results.
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly nextLink?: string;
}

/**
 * @interface
 * A list of Test Results.
 * @extends Array<TestResultResource>
 */
export interface TestResultListResult extends Array<TestResultResource> {
  /**
   * Link to the next set of results. Not empty if value contains incomplete list of results.
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly nextLink?: string;
}

/**
 * @interface
 * A list of OS Updates.
 * @extends Array<OSUpdateResource>
 */
export interface OSUpdateListResult extends Array<OSUpdateResource> {
  /**
   * Link to the next set of results. Not empty if value contains incomplete list of results.
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly nextLink?: string;
}

/**
 * @interface
 * A list of favorite processes for a package.
 * @extends Array<FavoriteProcessResource>
 */
export interface FavoriteProcessListResult extends Array<FavoriteProcessResource> {
  /**
   * Link to the next set of results. Not empty if value contains incomplete list of results.
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly nextLink?: string;
}

/**
 * @interface
 * A list of Analysis Results. It will only contain one element as all the data will be nested in a
 * singleton object.
 * @extends Array<AnalysisResultSingletonResource>
 */
export interface AnalysisResultListResult extends Array<AnalysisResultSingletonResource> {
  /**
   * Link to the next set of results. Not empty if value contains incomplete list of results.
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly nextLink?: string;
}

/**
 * @interface
 * A list of operations supported by the resource provider.
 * @extends Array<Operation>
 */
export interface OperationListResult extends Array<Operation> {
  /**
   * URL to get the next set of operation list results if there are any.
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly nextLink?: string;
}

/**
 * Defines values for Tier.
 * Possible values include: 'Basic', 'Standard'
 * @readonly
 * @enum {string}
 */
export type Tier = 'Basic' | 'Standard';

/**
 * Defines values for CreatedByType.
 * Possible values include: 'User', 'Application', 'ManagedIdentity', 'Key'
 * @readonly
 * @enum {string}
 */
export type CreatedByType = 'User' | 'Application' | 'ManagedIdentity' | 'Key';

/**
 * Defines values for ProvisioningState.
 * Possible values include: 'Succeeded', 'Failed', 'Cancelled', 'Creating', 'Deleting', 'Updating'
 * @readonly
 * @enum {string}
 */
export type ProvisioningState = 'Succeeded' | 'Failed' | 'Cancelled' | 'Creating' | 'Deleting' | 'Updating';

/**
 * Defines values for Reason.
 * Possible values include: 'Invalid', 'AlreadyExists'
 * @readonly
 * @enum {string}
 */
export type Reason = 'Invalid' | 'AlreadyExists';

/**
 * Defines values for TestType.
 * Possible values include: 'OutOfBoxTest', 'FunctionalTest'
 * @readonly
 * @enum {string}
 */
export type TestType = 'OutOfBoxTest' | 'FunctionalTest';

/**
 * Defines values for PackageStatus.
 * Possible values include: 'Unknown', 'Registered', 'Ready', 'Error', 'ValidatingPackage',
 * 'PreValidationCheckPass', 'Deleted', 'ValidationLongerThanUsual', 'VerifyingPackage'
 * @readonly
 * @enum {string}
 */
export type PackageStatus = 'Unknown' | 'Registered' | 'Ready' | 'Error' | 'ValidatingPackage' | 'PreValidationCheckPass' | 'Deleted' | 'ValidationLongerThanUsual' | 'VerifyingPackage';

/**
 * Defines values for ValidationRunStatus.
 * Possible values include: 'Unknown', 'Pending', 'Passed', 'Failed'
 * @readonly
 * @enum {string}
 */
export type ValidationRunStatus = 'Unknown' | 'Pending' | 'Passed' | 'Failed';

/**
 * Defines values for Action.
 * Possible values include: 'Install', 'Launch', 'Close', 'Uninstall', 'Custom'
 * @readonly
 * @enum {string}
 */
export type Action = 'Install' | 'Launch' | 'Close' | 'Uninstall' | 'Custom';

/**
 * Defines values for ContentType.
 * Possible values include: 'Inline', 'File', 'Path'
 * @readonly
 * @enum {string}
 */
export type ContentType = 'Inline' | 'File' | 'Path';

/**
 * Defines values for ExecutionStatus.
 * Possible values include: 'None', 'InProgress', 'Processing', 'Completed', 'NotExecuted',
 * 'Incomplete', 'Failed', 'Succeeded'
 * @readonly
 * @enum {string}
 */
export type ExecutionStatus = 'None' | 'InProgress' | 'Processing' | 'Completed' | 'NotExecuted' | 'Incomplete' | 'Failed' | 'Succeeded';

/**
 * Defines values for Grade.
 * Possible values include: 'None', 'NotAvailable', 'Pass', 'Fail'
 * @readonly
 * @enum {string}
 */
export type Grade = 'None' | 'NotAvailable' | 'Pass' | 'Fail';

/**
 * Defines values for AnalysisStatus.
 * Possible values include: 'None', 'Completed', 'InProgress', 'Failed', 'Succeeded', 'Available',
 * 'NotAvailable'
 * @readonly
 * @enum {string}
 */
export type AnalysisStatus = 'None' | 'Completed' | 'InProgress' | 'Failed' | 'Succeeded' | 'Available' | 'NotAvailable';

/**
 * Defines values for Type.
 * Possible values include: 'SecurityUpdate', 'FeatureUpdate'
 * @readonly
 * @enum {string}
 */
export type Type = 'SecurityUpdate' | 'FeatureUpdate';

/**
 * Defines values for OsUpdateType.
 * Possible values include: 'SecurityUpdate', 'FeatureUpdate'
 * @readonly
 * @enum {string}
 */
export type OsUpdateType = 'SecurityUpdate' | 'FeatureUpdate';

/**
 * Defines values for AnalysisResultType.
 * Possible values include: 'ScriptExecution', 'Reliability', 'MemoryUtilization',
 * 'CPUUtilization', 'MemoryRegression', 'CPURegression'
 * @readonly
 * @enum {string}
 */
export type AnalysisResultType = 'ScriptExecution' | 'Reliability' | 'MemoryUtilization' | 'CPUUtilization' | 'MemoryRegression' | 'CPURegression';

/**
 * Defines values for AnalysisResultName.
 * Possible values include: 'scriptExecution', 'reliability', 'memoryUtilization',
 * 'cpuUtilization', 'memoryRegression', 'cpuRegression'
 * @readonly
 * @enum {string}
 */
export type AnalysisResultName = 'scriptExecution' | 'reliability' | 'memoryUtilization' | 'cpuUtilization' | 'memoryRegression' | 'cpuRegression';

/**
 * Contains response data for the list operation.
 */
export type SKUsListResponse = TestBaseAccountSKUListResult & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;

      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: TestBaseAccountSKUListResult;
    };
};

/**
 * Contains response data for the listNext operation.
 */
export type SKUsListNextResponse = TestBaseAccountSKUListResult & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;

      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: TestBaseAccountSKUListResult;
    };
};

/**
 * Contains response data for the listBySubscription operation.
 */
export type TestBaseAccountsListBySubscriptionResponse = TestBaseAccountListResult & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;

      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: TestBaseAccountListResult;
    };
};

/**
 * Contains response data for the listByResourceGroup operation.
 */
export type TestBaseAccountsListByResourceGroupResponse = TestBaseAccountListResult & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;

      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: TestBaseAccountListResult;
    };
};

/**
 * Contains response data for the listBySubscriptionNext operation.
 */
export type TestBaseAccountsListBySubscriptionNextResponse = TestBaseAccountListResult & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;

      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: TestBaseAccountListResult;
    };
};

/**
 * Contains response data for the listByResourceGroupNext operation.
 */
export type TestBaseAccountsListByResourceGroupNextResponse = TestBaseAccountListResult & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;

      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: TestBaseAccountListResult;
    };
};

/**
 * Contains response data for the create operation.
 */
export type TestBaseAccountCreateResponse = TestBaseAccountResource & TestBaseAccountCreateHeaders & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The parsed HTTP response headers.
       */
      parsedHeaders: TestBaseAccountCreateHeaders;

      /**
       * The response body as text (string format)
       */
      bodyAsText: string;

      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: TestBaseAccountResource;
    };
};

/**
 * Contains response data for the update operation.
 */
export type TestBaseAccountUpdateResponse = TestBaseAccountResource & TestBaseAccountUpdateHeaders & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The parsed HTTP response headers.
       */
      parsedHeaders: TestBaseAccountUpdateHeaders;

      /**
       * The response body as text (string format)
       */
      bodyAsText: string;

      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: TestBaseAccountResource;
    };
};

/**
 * Contains response data for the deleteMethod operation.
 */
export type TestBaseAccountDeleteResponse = TestBaseAccountDeleteHeaders & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The parsed HTTP response headers.
       */
      parsedHeaders: TestBaseAccountDeleteHeaders;
    };
};

/**
 * Contains response data for the get operation.
 */
export type TestBaseAccountGetResponse = TestBaseAccountResource & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;

      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: TestBaseAccountResource;
    };
};

/**
 * Contains response data for the offboard operation.
 */
export type TestBaseAccountOffboardResponse = TestBaseAccountOffboardHeaders & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The parsed HTTP response headers.
       */
      parsedHeaders: TestBaseAccountOffboardHeaders;
    };
};

/**
 * Contains response data for the list operation.
 */
export type TestBaseAccountUsageListResponse = TestBaseAccountUsageDataList & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;

      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: TestBaseAccountUsageDataList;
    };
};

/**
 * Contains response data for the listNext operation.
 */
export type TestBaseAccountUsageListNextResponse = TestBaseAccountUsageDataList & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;

      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: TestBaseAccountUsageDataList;
    };
};

/**
 * Contains response data for the testBaseAccountGetFileUploadUrl operation.
 */
export type TestBaseAccountGetFileUploadUrlResponse = FileUploadURLResponse & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;

      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: FileUploadURLResponse;
    };
};

/**
 * Contains response data for the checkPackageNameAvailability operation.
 */
export type CheckPackageNameAvailabilityResponse = CheckNameAvailabilityResult & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;

      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: CheckNameAvailabilityResult;
    };
};

/**
 * Contains response data for the packageGetDownloadURL operation.
 */
export type PackageGetDownloadURLResponse = DownloadURLResponse & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;

      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: DownloadURLResponse;
    };
};

/**
 * Contains response data for the testResultGetDownloadURL operation.
 */
export type TestResultGetDownloadURLResponse = DownloadURLResponse & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;

      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: DownloadURLResponse;
    };
};

/**
 * Contains response data for the testResultGetVideoDownloadURL operation.
 */
export type TestResultGetVideoDownloadURLResponse = DownloadURLResponse & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;

      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: DownloadURLResponse;
    };
};

/**
 * Contains response data for the list operation.
 */
export type TestBaseAccountAvailableOSsListResponse = AvailableOSListResult & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;

      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: AvailableOSListResult;
    };
};

/**
 * Contains response data for the listNext operation.
 */
export type TestBaseAccountAvailableOSsListNextResponse = AvailableOSListResult & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;

      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: AvailableOSListResult;
    };
};

/**
 * Contains response data for the get operation.
 */
export type TestBaseAccountAvailableOSGetResponse = AvailableOSResource & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;

      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: AvailableOSResource;
    };
};

/**
 * Contains response data for the list operation.
 */
export type TestBaseAccountFlightingRingsListResponse = FlightingRingListResult & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;

      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: FlightingRingListResult;
    };
};

/**
 * Contains response data for the listNext operation.
 */
export type TestBaseAccountFlightingRingsListNextResponse = FlightingRingListResult & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;

      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: FlightingRingListResult;
    };
};

/**
 * Contains response data for the get operation.
 */
export type TestBaseAccountFlightingRingGetResponse = FlightingRingResource & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;

      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: FlightingRingResource;
    };
};

/**
 * Contains response data for the list operation.
 */
export type TestBaseAccountTestTypesListResponse = TestTypeListResult & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;

      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: TestTypeListResult;
    };
};

/**
 * Contains response data for the listNext operation.
 */
export type TestBaseAccountTestTypesListNextResponse = TestTypeListResult & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;

      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: TestTypeListResult;
    };
};

/**
 * Contains response data for the get operation.
 */
export type TestBaseAccountTestTypeGetResponse = TestTypeResource & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;

      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: TestTypeResource;
    };
};

/**
 * Contains response data for the listByTestBaseAccount operation.
 */
export type PackagesListByTestBaseAccountResponse = PackageListResult & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;

      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: PackageListResult;
    };
};

/**
 * Contains response data for the listByTestBaseAccountNext operation.
 */
export type PackagesListByTestBaseAccountNextResponse = PackageListResult & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;

      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: PackageListResult;
    };
};

/**
 * Contains response data for the create operation.
 */
export type PackageCreateResponse = PackageResource & PackageCreateHeaders & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The parsed HTTP response headers.
       */
      parsedHeaders: PackageCreateHeaders;

      /**
       * The response body as text (string format)
       */
      bodyAsText: string;

      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: PackageResource;
    };
};

/**
 * Contains response data for the update operation.
 */
export type PackageUpdateResponse = PackageResource & PackageUpdateHeaders & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The parsed HTTP response headers.
       */
      parsedHeaders: PackageUpdateHeaders;

      /**
       * The response body as text (string format)
       */
      bodyAsText: string;

      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: PackageResource;
    };
};

/**
 * Contains response data for the deleteMethod operation.
 */
export type PackageDeleteResponse = PackageDeleteHeaders & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The parsed HTTP response headers.
       */
      parsedHeaders: PackageDeleteHeaders;
    };
};

/**
 * Contains response data for the get operation.
 */
export type PackageModelGetResponse = PackageResource & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;

      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: PackageResource;
    };
};

/**
 * Contains response data for the hardDelete operation.
 */
export type PackageHardDeleteResponse = PackageHardDeleteHeaders & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The parsed HTTP response headers.
       */
      parsedHeaders: PackageHardDeleteHeaders;
    };
};

/**
 * Contains response data for the list operation.
 */
export type TestSummariesListResponse = TestSummaryListResult & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;

      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: TestSummaryListResult;
    };
};

/**
 * Contains response data for the listNext operation.
 */
export type TestSummariesListNextResponse = TestSummaryListResult & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;

      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: TestSummaryListResult;
    };
};

/**
 * Contains response data for the get operation.
 */
export type TestSummaryGetResponse = TestSummaryResource & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;

      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: TestSummaryResource;
    };
};

/**
 * Contains response data for the list operation.
 */
export type TestResultsListResponse = TestResultListResult & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;

      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: TestResultListResult;
    };
};

/**
 * Contains response data for the listNext operation.
 */
export type TestResultsListNextResponse = TestResultListResult & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;

      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: TestResultListResult;
    };
};

/**
 * Contains response data for the get operation.
 */
export type TestResultGetResponse = TestResultResource & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;

      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: TestResultResource;
    };
};

/**
 * Contains response data for the list operation.
 */
export type OSUpdatesListResponse = OSUpdateListResult & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;

      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: OSUpdateListResult;
    };
};

/**
 * Contains response data for the listNext operation.
 */
export type OSUpdatesListNextResponse = OSUpdateListResult & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;

      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: OSUpdateListResult;
    };
};

/**
 * Contains response data for the get operation.
 */
export type OSUpdateGetResponse = OSUpdateResource & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;

      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: OSUpdateResource;
    };
};

/**
 * Contains response data for the list operation.
 */
export type FavoriteProcessesListResponse = FavoriteProcessListResult & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;

      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: FavoriteProcessListResult;
    };
};

/**
 * Contains response data for the listNext operation.
 */
export type FavoriteProcessesListNextResponse = FavoriteProcessListResult & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;

      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: FavoriteProcessListResult;
    };
};

/**
 * Contains response data for the create operation.
 */
export type FavoriteProcessCreateResponse = FavoriteProcessResource & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;

      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: FavoriteProcessResource;
    };
};

/**
 * Contains response data for the get operation.
 */
export type FavoriteProcessGetResponse = FavoriteProcessResource & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;

      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: FavoriteProcessResource;
    };
};

/**
 * Contains response data for the list operation.
 */
export type AnalysisResultsListResponse = AnalysisResultListResult & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;

      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: AnalysisResultListResult;
    };
};

/**
 * Contains response data for the get operation.
 */
export type AnalysisResultGetResponse = AnalysisResultSingletonResource & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;

      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: AnalysisResultSingletonResource;
    };
};

/**
 * Contains response data for the list operation.
 */
export type OperationsListResponse = OperationListResult & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;

      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: OperationListResult;
    };
};

/**
 * Contains response data for the listNext operation.
 */
export type OperationsListNextResponse = OperationListResult & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;

      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: OperationListResult;
    };
};
