/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is
 * regenerated.
 */

import * as msRest from "@azure/ms-rest-js";
import * as Models from "./models";
import * as Mappers from "./models/mappers";
import * as Parameters from "./models/parameters";
import * as operations from "./operations";
import { RESTAPIforTestBaseContext } from "./rESTAPIforTestBaseContext";


class RESTAPIforTestBase extends RESTAPIforTestBaseContext {
  // Operation groups
  sKUs: operations.SKUs;
  testBaseAccounts: operations.TestBaseAccounts;
  testBaseAccount: operations.TestBaseAccount;
  testBaseAccountUsage: operations.TestBaseAccountUsage;
  testBaseAccountAvailableOSs: operations.TestBaseAccountAvailableOSs;
  testBaseAccountAvailableOS: operations.TestBaseAccountAvailableOS;
  testBaseAccountFlightingRings: operations.TestBaseAccountFlightingRings;
  testBaseAccountFlightingRing: operations.TestBaseAccountFlightingRing;
  testBaseAccountTestTypes: operations.TestBaseAccountTestTypes;
  testBaseAccountTestType: operations.TestBaseAccountTestType;
  packages: operations.Packages;
  packageModel: operations.PackageModel;
  testSummaries: operations.TestSummaries;
  testSummary: operations.TestSummary;
  testResults: operations.TestResults;
  testResult: operations.TestResult;
  oSUpdates: operations.OSUpdates;
  oSUpdate: operations.OSUpdate;
  favoriteProcesses: operations.FavoriteProcesses;
  favoriteProcess: operations.FavoriteProcess;
  analysisResults: operations.AnalysisResults;
  analysisResult: operations.AnalysisResult;
  operations: operations.Operations;

  /**
   * Initializes a new instance of the RESTAPIforTestBase class.
   * @param credentials Credentials needed for the client to connect to Azure.
   * @param subscriptionId The Azure subscription ID. This is a GUID-formatted string.
   * @param [options] The parameter options
   */
  constructor(credentials: msRest.ServiceClientCredentials, subscriptionId: string, options?: Models.RESTAPIforTestBaseOptions) {
    super(credentials, subscriptionId, options);
    this.sKUs = new operations.SKUs(this);
    this.testBaseAccounts = new operations.TestBaseAccounts(this);
    this.testBaseAccount = new operations.TestBaseAccount(this);
    this.testBaseAccountUsage = new operations.TestBaseAccountUsage(this);
    this.testBaseAccountAvailableOSs = new operations.TestBaseAccountAvailableOSs(this);
    this.testBaseAccountAvailableOS = new operations.TestBaseAccountAvailableOS(this);
    this.testBaseAccountFlightingRings = new operations.TestBaseAccountFlightingRings(this);
    this.testBaseAccountFlightingRing = new operations.TestBaseAccountFlightingRing(this);
    this.testBaseAccountTestTypes = new operations.TestBaseAccountTestTypes(this);
    this.testBaseAccountTestType = new operations.TestBaseAccountTestType(this);
    this.packages = new operations.Packages(this);
    this.packageModel = new operations.PackageModel(this);
    this.testSummaries = new operations.TestSummaries(this);
    this.testSummary = new operations.TestSummary(this);
    this.testResults = new operations.TestResults(this);
    this.testResult = new operations.TestResult(this);
    this.oSUpdates = new operations.OSUpdates(this);
    this.oSUpdate = new operations.OSUpdate(this);
    this.favoriteProcesses = new operations.FavoriteProcesses(this);
    this.favoriteProcess = new operations.FavoriteProcess(this);
    this.analysisResults = new operations.AnalysisResults(this);
    this.analysisResult = new operations.AnalysisResult(this);
    this.operations = new operations.Operations(this);
  }

  /**
   * Gets the file upload URL of a Test Base Account.
   * @param resourceGroupName The name of the resource group that contains the resource.
   * @param testBaseAccountName The resource name of the Test Base Account.
   * @param [options] The optional parameters
   * @returns Promise<Models.TestBaseAccountGetFileUploadUrlResponse>
   */
  testBaseAccountGetFileUploadUrl(resourceGroupName: string, testBaseAccountName: string, options?: Models.RESTAPIforTestBaseTestBaseAccountGetFileUploadUrlOptionalParams): Promise<Models.TestBaseAccountGetFileUploadUrlResponse>;
  /**
   * @param resourceGroupName The name of the resource group that contains the resource.
   * @param testBaseAccountName The resource name of the Test Base Account.
   * @param callback The callback
   */
  testBaseAccountGetFileUploadUrl(resourceGroupName: string, testBaseAccountName: string, callback: msRest.ServiceCallback<Models.FileUploadURLResponse>): void;
  /**
   * @param resourceGroupName The name of the resource group that contains the resource.
   * @param testBaseAccountName The resource name of the Test Base Account.
   * @param options The optional parameters
   * @param callback The callback
   */
  testBaseAccountGetFileUploadUrl(resourceGroupName: string, testBaseAccountName: string, options: Models.RESTAPIforTestBaseTestBaseAccountGetFileUploadUrlOptionalParams, callback: msRest.ServiceCallback<Models.FileUploadURLResponse>): void;
  testBaseAccountGetFileUploadUrl(resourceGroupName: string, testBaseAccountName: string, options?: Models.RESTAPIforTestBaseTestBaseAccountGetFileUploadUrlOptionalParams | msRest.ServiceCallback<Models.FileUploadURLResponse>, callback?: msRest.ServiceCallback<Models.FileUploadURLResponse>): Promise<Models.TestBaseAccountGetFileUploadUrlResponse> {
    return this.sendOperationRequest(
      {
        resourceGroupName,
        testBaseAccountName,
        options
      },
      testBaseAccountGetFileUploadUrlOperationSpec,
      callback) as Promise<Models.TestBaseAccountGetFileUploadUrlResponse>;
  }

  /**
   * Checks that the Test Base Package name and version is valid and is not already in use.
   * @param resourceGroupName The name of the resource group that contains the resource.
   * @param testBaseAccountName The resource name of the Test Base Account.
   * @param parameters Parameters supplied to the Test Base Package CheckNameAvailability operation.
   * @param [options] The optional parameters
   * @returns Promise<Models.CheckPackageNameAvailabilityResponse>
   */
  checkPackageNameAvailability(resourceGroupName: string, testBaseAccountName: string, parameters: Models.PackageCheckNameAvailabilityParameters, options?: msRest.RequestOptionsBase): Promise<Models.CheckPackageNameAvailabilityResponse>;
  /**
   * @param resourceGroupName The name of the resource group that contains the resource.
   * @param testBaseAccountName The resource name of the Test Base Account.
   * @param parameters Parameters supplied to the Test Base Package CheckNameAvailability operation.
   * @param callback The callback
   */
  checkPackageNameAvailability(resourceGroupName: string, testBaseAccountName: string, parameters: Models.PackageCheckNameAvailabilityParameters, callback: msRest.ServiceCallback<Models.CheckNameAvailabilityResult>): void;
  /**
   * @param resourceGroupName The name of the resource group that contains the resource.
   * @param testBaseAccountName The resource name of the Test Base Account.
   * @param parameters Parameters supplied to the Test Base Package CheckNameAvailability operation.
   * @param options The optional parameters
   * @param callback The callback
   */
  checkPackageNameAvailability(resourceGroupName: string, testBaseAccountName: string, parameters: Models.PackageCheckNameAvailabilityParameters, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.CheckNameAvailabilityResult>): void;
  checkPackageNameAvailability(resourceGroupName: string, testBaseAccountName: string, parameters: Models.PackageCheckNameAvailabilityParameters, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<Models.CheckNameAvailabilityResult>, callback?: msRest.ServiceCallback<Models.CheckNameAvailabilityResult>): Promise<Models.CheckPackageNameAvailabilityResponse> {
    return this.sendOperationRequest(
      {
        resourceGroupName,
        testBaseAccountName,
        parameters,
        options
      },
      checkPackageNameAvailabilityOperationSpec,
      callback) as Promise<Models.CheckPackageNameAvailabilityResponse>;
  }

  /**
   * Gets the download URL of a package.
   * @param resourceGroupName The name of the resource group that contains the resource.
   * @param testBaseAccountName The resource name of the Test Base Account.
   * @param packageName The resource name of the Test Base Package.
   * @param [options] The optional parameters
   * @returns Promise<Models.PackageGetDownloadURLResponse>
   */
  packageGetDownloadURL(resourceGroupName: string, testBaseAccountName: string, packageName: string, options?: msRest.RequestOptionsBase): Promise<Models.PackageGetDownloadURLResponse>;
  /**
   * @param resourceGroupName The name of the resource group that contains the resource.
   * @param testBaseAccountName The resource name of the Test Base Account.
   * @param packageName The resource name of the Test Base Package.
   * @param callback The callback
   */
  packageGetDownloadURL(resourceGroupName: string, testBaseAccountName: string, packageName: string, callback: msRest.ServiceCallback<Models.DownloadURLResponse>): void;
  /**
   * @param resourceGroupName The name of the resource group that contains the resource.
   * @param testBaseAccountName The resource name of the Test Base Account.
   * @param packageName The resource name of the Test Base Package.
   * @param options The optional parameters
   * @param callback The callback
   */
  packageGetDownloadURL(resourceGroupName: string, testBaseAccountName: string, packageName: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.DownloadURLResponse>): void;
  packageGetDownloadURL(resourceGroupName: string, testBaseAccountName: string, packageName: string, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<Models.DownloadURLResponse>, callback?: msRest.ServiceCallback<Models.DownloadURLResponse>): Promise<Models.PackageGetDownloadURLResponse> {
    return this.sendOperationRequest(
      {
        resourceGroupName,
        testBaseAccountName,
        packageName,
        options
      },
      packageGetDownloadURLOperationSpec,
      callback) as Promise<Models.PackageGetDownloadURLResponse>;
  }

  /**
   * Gets the download URL or the test result.
   * @param resourceGroupName The name of the resource group that contains the resource.
   * @param testBaseAccountName The resource name of the Test Base Account.
   * @param packageName The resource name of the Test Base Package.
   * @param testResultName The Test Result Name. It equals to {osName}-{TestResultId} string.
   * @param [options] The optional parameters
   * @returns Promise<Models.TestResultGetDownloadURLResponse>
   */
  testResultGetDownloadURL(resourceGroupName: string, testBaseAccountName: string, packageName: string, testResultName: string, options?: msRest.RequestOptionsBase): Promise<Models.TestResultGetDownloadURLResponse>;
  /**
   * @param resourceGroupName The name of the resource group that contains the resource.
   * @param testBaseAccountName The resource name of the Test Base Account.
   * @param packageName The resource name of the Test Base Package.
   * @param testResultName The Test Result Name. It equals to {osName}-{TestResultId} string.
   * @param callback The callback
   */
  testResultGetDownloadURL(resourceGroupName: string, testBaseAccountName: string, packageName: string, testResultName: string, callback: msRest.ServiceCallback<Models.DownloadURLResponse>): void;
  /**
   * @param resourceGroupName The name of the resource group that contains the resource.
   * @param testBaseAccountName The resource name of the Test Base Account.
   * @param packageName The resource name of the Test Base Package.
   * @param testResultName The Test Result Name. It equals to {osName}-{TestResultId} string.
   * @param options The optional parameters
   * @param callback The callback
   */
  testResultGetDownloadURL(resourceGroupName: string, testBaseAccountName: string, packageName: string, testResultName: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.DownloadURLResponse>): void;
  testResultGetDownloadURL(resourceGroupName: string, testBaseAccountName: string, packageName: string, testResultName: string, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<Models.DownloadURLResponse>, callback?: msRest.ServiceCallback<Models.DownloadURLResponse>): Promise<Models.TestResultGetDownloadURLResponse> {
    return this.sendOperationRequest(
      {
        resourceGroupName,
        testBaseAccountName,
        packageName,
        testResultName,
        options
      },
      testResultGetDownloadURLOperationSpec,
      callback) as Promise<Models.TestResultGetDownloadURLResponse>;
  }

  /**
   * Gets the download URL of the test execution screen recording.
   * @param resourceGroupName The name of the resource group that contains the resource.
   * @param testBaseAccountName The resource name of the Test Base Account.
   * @param packageName The resource name of the Test Base Package.
   * @param testResultName The Test Result Name. It equals to {osName}-{TestResultId} string.
   * @param [options] The optional parameters
   * @returns Promise<Models.TestResultGetVideoDownloadURLResponse>
   */
  testResultGetVideoDownloadURL(resourceGroupName: string, testBaseAccountName: string, packageName: string, testResultName: string, options?: msRest.RequestOptionsBase): Promise<Models.TestResultGetVideoDownloadURLResponse>;
  /**
   * @param resourceGroupName The name of the resource group that contains the resource.
   * @param testBaseAccountName The resource name of the Test Base Account.
   * @param packageName The resource name of the Test Base Package.
   * @param testResultName The Test Result Name. It equals to {osName}-{TestResultId} string.
   * @param callback The callback
   */
  testResultGetVideoDownloadURL(resourceGroupName: string, testBaseAccountName: string, packageName: string, testResultName: string, callback: msRest.ServiceCallback<Models.DownloadURLResponse>): void;
  /**
   * @param resourceGroupName The name of the resource group that contains the resource.
   * @param testBaseAccountName The resource name of the Test Base Account.
   * @param packageName The resource name of the Test Base Package.
   * @param testResultName The Test Result Name. It equals to {osName}-{TestResultId} string.
   * @param options The optional parameters
   * @param callback The callback
   */
  testResultGetVideoDownloadURL(resourceGroupName: string, testBaseAccountName: string, packageName: string, testResultName: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.DownloadURLResponse>): void;
  testResultGetVideoDownloadURL(resourceGroupName: string, testBaseAccountName: string, packageName: string, testResultName: string, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<Models.DownloadURLResponse>, callback?: msRest.ServiceCallback<Models.DownloadURLResponse>): Promise<Models.TestResultGetVideoDownloadURLResponse> {
    return this.sendOperationRequest(
      {
        resourceGroupName,
        testBaseAccountName,
        packageName,
        testResultName,
        options
      },
      testResultGetVideoDownloadURLOperationSpec,
      callback) as Promise<Models.TestResultGetVideoDownloadURLResponse>;
  }
}

// Operation Specifications
const serializer = new msRest.Serializer(Mappers);
const testBaseAccountGetFileUploadUrlOperationSpec: msRest.OperationSpec = {
  httpMethod: "POST",
  path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.TestBase/testBaseAccounts/{testBaseAccountName}/getFileUploadUrl",
  urlParameters: [
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.testBaseAccountName
  ],
  queryParameters: [
    Parameters.apiVersion
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  requestBody: {
    parameterPath: {
      blobName: [
        "options",
        "blobName"
      ]
    },
    mapper: Mappers.GetFileUploadURLParameters
  },
  responses: {
    200: {
      bodyMapper: Mappers.FileUploadURLResponse
    },
    default: {
      bodyMapper: Mappers.ErrorResponse
    }
  },
  serializer
};

const checkPackageNameAvailabilityOperationSpec: msRest.OperationSpec = {
  httpMethod: "POST",
  path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.TestBase/testBaseAccounts/{testBaseAccountName}/checkPackageNameAvailability",
  urlParameters: [
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.testBaseAccountName
  ],
  queryParameters: [
    Parameters.apiVersion
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  requestBody: {
    parameterPath: "parameters",
    mapper: {
      ...Mappers.PackageCheckNameAvailabilityParameters,
      required: true
    }
  },
  responses: {
    200: {
      bodyMapper: Mappers.CheckNameAvailabilityResult
    },
    default: {
      bodyMapper: Mappers.ErrorResponse
    }
  },
  serializer
};

const packageGetDownloadURLOperationSpec: msRest.OperationSpec = {
  httpMethod: "POST",
  path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.TestBase/testBaseAccounts/{testBaseAccountName}/packages/{packageName}/getDownloadUrl",
  urlParameters: [
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.testBaseAccountName,
    Parameters.packageName
  ],
  queryParameters: [
    Parameters.apiVersion
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    200: {
      bodyMapper: Mappers.DownloadURLResponse
    },
    default: {
      bodyMapper: Mappers.ErrorResponse
    }
  },
  serializer
};

const testResultGetDownloadURLOperationSpec: msRest.OperationSpec = {
  httpMethod: "POST",
  path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.TestBase/testBaseAccounts/{testBaseAccountName}/packages/{packageName}/testResults/{testResultName}/getDownloadUrl",
  urlParameters: [
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.testBaseAccountName,
    Parameters.packageName,
    Parameters.testResultName
  ],
  queryParameters: [
    Parameters.apiVersion
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    200: {
      bodyMapper: Mappers.DownloadURLResponse
    },
    default: {
      bodyMapper: Mappers.ErrorResponse
    }
  },
  serializer
};

const testResultGetVideoDownloadURLOperationSpec: msRest.OperationSpec = {
  httpMethod: "POST",
  path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.TestBase/testBaseAccounts/{testBaseAccountName}/packages/{packageName}/testResults/{testResultName}/getVideoDownloadUrl",
  urlParameters: [
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.testBaseAccountName,
    Parameters.packageName,
    Parameters.testResultName
  ],
  queryParameters: [
    Parameters.apiVersion
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    200: {
      bodyMapper: Mappers.DownloadURLResponse
    },
    default: {
      bodyMapper: Mappers.ErrorResponse
    }
  },
  serializer
};

export {
  RESTAPIforTestBase,
  RESTAPIforTestBaseContext,
  Models as RESTAPIforTestBaseModels,
  Mappers as RESTAPIforTestBaseMappers
};
export * from "./operations";
