/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */

import * as coreClient from "@azure/core-client";

/** Dynatrace account API Key */
export interface AccountInfoSecure {
  /**
   * Account Id of the account this environment is linked to
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly accountId?: string;
  /**
   * API Key of the user account
   * This value contains a credential. Consider obscuring before showing to users
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly apiKey?: string;
  /**
   * Region in which the account is created
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly regionId?: string;
}

/** Common error response for all Azure Resource Manager APIs to return error details for failed operations. (This also follows the OData error response format.). */
export interface ErrorResponse {
  /** The error object. */
  error?: ErrorDetail;
}

/** The error detail. */
export interface ErrorDetail {
  /**
   * The error code.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly code?: string;
  /**
   * The error message.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly message?: string;
  /**
   * The error target.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly target?: string;
  /**
   * The error details.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly details?: ErrorDetail[];
  /**
   * The error additional info.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly additionalInfo?: ErrorAdditionalInfo[];
}

/** The resource management error additional info. */
export interface ErrorAdditionalInfo {
  /**
   * The additional info type.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly type?: string;
  /**
   * The additional info.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly info?: Record<string, unknown>;
}

/** List of all the resources being monitored by Dynatrace monitor resource */
export interface MonitoredResourceListResponse {
  /** The items on this page */
  value?: MonitoredResource[];
  /** The link to the next page of items */
  nextLink?: string;
}

/** Details of resource being monitored by Dynatrace monitor resource */
export interface MonitoredResource {
  /** The ARM id of the resource. */
  id?: string;
  /** Flag indicating if resource is sending metrics to Dynatrace. */
  sendingMetrics?: SendingMetricsStatus;
  /** Reason for why the resource is sending metrics (or why it is not sending). */
  reasonForMetricsStatus?: string;
  /** Flag indicating if resource is sending logs to Dynatrace. */
  sendingLogs?: SendingLogsStatus;
  /** Reason for why the resource is sending logs (or why it is not sending). */
  reasonForLogsStatus?: string;
}

/** Response of payload to be passed while installing VM agent. */
export interface VMExtensionPayload {
  /** Ingestion key of the environment */
  ingestionKey?: string;
  /** Id of the environment created */
  environmentId?: string;
}

/** Properties of the Dynatrace environment. */
export interface DynatraceEnvironmentProperties {
  /** User id */
  userId?: string;
  /** Dynatrace Account Information */
  accountInfo?: AccountInfo;
  /** Dynatrace Environment Information */
  environmentInfo?: EnvironmentInfo;
  /** The details of a Dynatrace single sign-on. */
  singleSignOnProperties?: DynatraceSingleSignOnProperties;
}

/** Dynatrace Account Information */
export interface AccountInfo {
  /** Account Id of the account this environment is linked to */
  accountId?: string;
  /** Region in which the account is created */
  regionId?: string;
}

/** Dynatrace Environment Information */
export interface EnvironmentInfo {
  /** Id of the environment created */
  environmentId?: string;
  /** Ingestion key of the environment */
  ingestionKey?: string;
  /** Ingestion endpoint used for sending logs */
  logsIngestionEndpoint?: string;
  /** Landing URL for Dynatrace environment */
  landingURL?: string;
}

/** The details of a Dynatrace single sign-on. */
export interface DynatraceSingleSignOnProperties {
  /** State of Single Sign On */
  singleSignOnState?: SingleSignOnStates;
  /** Version of the Dynatrace agent installed on the VM. */
  enterpriseAppId?: string;
  /** The login URL specific to this Dynatrace Environment */
  singleSignOnUrl?: string;
  /** array of Aad(azure active directory) domains */
  aadDomains?: string[];
  /**
   * Provisioning state of the resource.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly provisioningState?: ProvisioningState;
}

/** User info. */
export interface UserInfo {
  /** First Name of the user */
  firstName?: string;
  /** Last Name of the user */
  lastName?: string;
  /** Email of the user used by Dynatrace for contacting them if needed */
  emailAddress?: string;
  /** Phone number of the user used by Dynatrace for contacting them if needed */
  phoneNumber?: string;
  /** Country of the user */
  country?: string;
}

/** Billing plan information. */
export interface PlanData {
  /** different usage type like PAYG/COMMITTED. this could be enum */
  usageType?: string;
  /** different billing cycles like MONTHLY/WEEKLY. this could be enum */
  billingCycle?: string;
  /** plan id as published by Dynatrace */
  planDetails?: string;
  /** date when plan was applied */
  effectiveDate?: Date;
}

/** Metadata pertaining to creation and last modification of the resource. */
export interface SystemData {
  /** The identity that created the resource. */
  createdBy?: string;
  /** The type of identity that created the resource. */
  createdByType?: CreatedByType;
  /** The timestamp of resource creation (UTC). */
  createdAt?: Date;
  /** The identity that last modified the resource. */
  lastModifiedBy?: string;
  /** The type of identity that last modified the resource. */
  lastModifiedByType?: CreatedByType;
  /** The timestamp of resource last modification (UTC) */
  lastModifiedAt?: Date;
}

/** The properties of the managed service identities assigned to this resource. */
export interface IdentityProperties {
  /**
   * The Active Directory tenant id of the principal.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly tenantId?: string;
  /**
   * The active directory identifier of this principal.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly principalId?: string;
  /** The type of managed identity assigned to this resource. */
  type: ManagedIdentityType;
  /** The identities assigned to this resource by the user. */
  userAssignedIdentities?: { [propertyName: string]: UserAssignedIdentity };
}

/** A managed identity assigned by the user. */
export interface UserAssignedIdentity {
  /** The active directory client identifier for this principal. */
  clientId: string;
  /** The active directory identifier for this principal. */
  principalId: string;
}

/** Common fields that are returned in the response for all Azure Resource Manager resources */
export interface Resource {
  /**
   * Fully qualified resource ID for the resource. Ex - /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly id?: string;
  /**
   * The name of the resource
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly name?: string;
  /**
   * The type of the resource. E.g. "Microsoft.Compute/virtualMachines" or "Microsoft.Storage/storageAccounts"
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly type?: string;
}

/** The updatable properties of the MonitorResource. */
export interface MonitorResourceUpdate {
  /** Resource tags. */
  tags?: { [propertyName: string]: string };
  /** Status of the monitor. */
  monitoringStatus?: MonitoringStatus;
  /** Marketplace subscription status. */
  marketplaceSubscriptionStatus?: MarketplaceSubscriptionStatus;
  /** Properties of the Dynatrace environment. */
  dynatraceEnvironmentProperties?: DynatraceEnvironmentProperties;
  /** User info. */
  userInfo?: UserInfo;
  /** Billing plan information. */
  planData?: PlanData;
}

/** A list of REST API operations supported by an Azure Resource Provider. It contains an URL link to get the next set of results. */
export interface OperationListResult {
  /**
   * List of operations supported by the resource provider
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly value?: Operation[];
  /**
   * URL to get the next set of operation list results (if there are any).
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly nextLink?: string;
}

/** Details of a REST API operation, returned from the Resource Provider Operations API */
export interface Operation {
  /**
   * The name of the operation, as per Resource-Based Access Control (RBAC). Examples: "Microsoft.Compute/virtualMachines/write", "Microsoft.Compute/virtualMachines/capture/action"
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly name?: string;
  /**
   * Whether the operation applies to data-plane. This is "true" for data-plane operations and "false" for ARM/control-plane operations.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly isDataAction?: boolean;
  /** Localized display information for this particular operation. */
  display?: OperationDisplay;
  /**
   * The intended executor of the operation; as in Resource Based Access Control (RBAC) and audit logs UX. Default value is "user,system"
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly origin?: Origin;
  /**
   * Enum. Indicates the action type. "Internal" refers to actions that are for internal only APIs.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly actionType?: ActionType;
}

/** Localized display information for this particular operation. */
export interface OperationDisplay {
  /**
   * The localized friendly form of the resource provider name, e.g. "Microsoft Monitoring Insights" or "Microsoft Compute".
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly provider?: string;
  /**
   * The localized friendly name of the resource type related to this operation. E.g. "Virtual Machines" or "Job Schedule Collections".
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly resource?: string;
  /**
   * The concise, localized friendly name for the operation; suitable for dropdowns. E.g. "Create or Update Virtual Machine", "Restart Virtual Machine".
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly operation?: string;
  /**
   * The short, localized friendly description of the operation; suitable for tool tips and detailed views.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly description?: string;
}

/** The response of a MonitorResource list operation. */
export interface MonitorResourceListResult {
  /** The items on this page */
  value: MonitorResource[];
  /** The link to the next page of items */
  nextLink?: string;
}

/** Set of rules for sending logs for the Monitor resource. */
export interface LogRules {
  /** Flag specifying if AAD logs should be sent for the Monitor resource. */
  sendAadLogs?: SendAadLogsStatus;
  /** Flag specifying if subscription logs should be sent for the Monitor resource. */
  sendSubscriptionLogs?: SendSubscriptionLogsStatus;
  /** Flag specifying if activity logs from Azure resources should be sent for the Monitor resource. */
  sendActivityLogs?: SendActivityLogsStatus;
  /**
   * List of filtering tags to be used for capturing logs. This only takes effect if SendActivityLogs flag is enabled. If empty, all resources will be captured.
   * If only Exclude action is specified, the rules will apply to the list of all available resources. If Include actions are specified, the rules will only include resources with the associated tags.
   */
  filteringTags?: FilteringTag[];
}

/** The definition of a filtering tag. Filtering tags are used for capturing resources and include/exclude them from being monitored. */
export interface FilteringTag {
  /** The name (also known as the key) of the tag. */
  name?: string;
  /** The value of the tag. */
  value?: string;
  /** Valid actions for a filtering tag. Exclusion takes priority over inclusion. */
  action?: TagAction;
}

/** Set of rules for sending metrics for the Monitor resource. */
export interface MetricRules {
  /** List of filtering tags to be used for capturing metrics. If empty, all resources will be captured. If only Exclude action is specified, the rules will apply to the list of all available resources. If Include actions are specified, the rules will only include resources with the associated tags. */
  filteringTags?: FilteringTag[];
}

/** The updatable properties of the TagRule. */
export interface TagRuleUpdate {
  /** Set of rules for sending logs for the Monitor resource. */
  logRules?: LogRules;
  /** Set of rules for sending metrics for the Monitor resource. */
  metricRules?: MetricRules;
}

/** The response of a TagRule list operation. */
export interface TagRuleListResult {
  /** The items on this page */
  value: TagRule[];
  /** The link to the next page of items */
  nextLink?: string;
}

/** The response of a DynatraceSingleSignOnResource list operation. */
export interface DynatraceSingleSignOnResourceListResult {
  /** The items on this page */
  value: DynatraceSingleSignOnResource[];
  /** The link to the next page of items */
  nextLink?: string;
}

/** Response of a list VM Host Operation. */
export interface VMHostsListResponse {
  /** The items on this page */
  value?: VMInfo[];
  /** The link to the next page of items */
  nextLink?: string;
}

/** Details of VM Resource having Dynatrace OneAgent installed */
export interface VMInfo {
  /** Azure VM resource ID */
  resourceId?: string;
  /** Version of the Dynatrace agent installed on the VM. */
  version?: string;
  /** The monitoring mode of OneAgent */
  monitoringType?: MonitoringType;
  /** Update settings of OneAgent. */
  autoUpdateSetting?: AutoUpdateSetting;
  /** The current update status of OneAgent. */
  updateStatus?: UpdateStatus;
  /** The availability state of OneAgent. */
  availabilityState?: AvailabilityState;
  /** Tells whether log modules are enabled or not */
  logModule?: LogModule;
  /** The name of the host group */
  hostGroup?: string;
  /** The name of the host */
  hostName?: string;
}

/** Response of a list App Services Operation. */
export interface AppServiceListResponse {
  /** The items on this page */
  value?: AppServiceInfo[];
  /** The link to the next page of items */
  nextLink?: string;
}

/** Details of App Services having Dynatrace OneAgent installed */
export interface AppServiceInfo {
  /** App service resource ID */
  resourceId?: string;
  /** Version of the Dynatrace agent installed on the App Service. */
  version?: string;
  /** The monitoring mode of OneAgent */
  monitoringType?: MonitoringType;
  /** Update settings of OneAgent. */
  autoUpdateSetting?: AutoUpdateSetting;
  /** The current update status of OneAgent. */
  updateStatus?: UpdateStatus;
  /** The availability state of OneAgent. */
  availabilityState?: AvailabilityState;
  /** Tells whether log modules are enabled or not */
  logModule?: LogModule;
  /** The name of the host group */
  hostGroup?: string;
  /** The name of the host */
  hostName?: string;
}

/** Request for getting sso details for a user */
export interface SSODetailsRequest {
  /** user principal id of the user */
  userPrincipal?: string;
}

/** SSO details from the Dynatrace partner */
export interface SSODetailsResponse {
  /** Whether the SSO is enabled for this resource or not. */
  isSsoEnabled?: SSOStatus;
  /** URL for Azure AD metadata */
  metadataUrl?: string;
  /** The login URL specific to this Dynatrace Environment */
  singleSignOnUrl?: string;
  /** array of Aad(azure active directory) domains */
  aadDomains?: string[];
  /** Array of admin user emails. */
  adminUsers?: string[];
}

/** Request for getting all the linkable environments for a user */
export interface LinkableEnvironmentRequest {
  /** Tenant Id of the user in which they want to link the environment */
  tenantId?: string;
  /** user principal id of the user */
  userPrincipal?: string;
  /** Azure region in which we want to link the environment */
  region?: string;
}

/** Response for getting all the linkable environments */
export interface LinkableEnvironmentListResponse {
  /** List of environments for which user is an admin */
  value?: LinkableEnvironmentResponse[];
  /** Link to the next set of results, if any. */
  nextLink?: string;
}

/** Response for getting all the linkable environments */
export interface LinkableEnvironmentResponse {
  /** environment id for which user is an admin */
  environmentId?: string;
  /** Name of the environment */
  environmentName?: string;
  /** Billing plan information. */
  planData?: PlanData;
}

/** The resource model definition for an Azure Resource Manager tracked top level resource which has 'tags' and a 'location' */
export interface TrackedResource extends Resource {
  /** Resource tags. */
  tags?: { [propertyName: string]: string };
  /** The geo-location where the resource lives */
  location: string;
}

/** The resource model definition for a Azure Resource Manager proxy resource. It will not have tags and a location */
export interface ProxyResource extends Resource {}

/** Dynatrace Monitor Resource */
export interface MonitorResource extends TrackedResource {
  /**
   * System metadata for this resource.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly systemData?: SystemData;
  /** The managed service identities assigned to this resource. */
  identity?: IdentityProperties;
  /** Status of the monitor. */
  monitoringStatus?: MonitoringStatus;
  /** Marketplace subscription status. */
  marketplaceSubscriptionStatus?: MarketplaceSubscriptionStatus;
  /** Properties of the Dynatrace environment. */
  dynatraceEnvironmentProperties?: DynatraceEnvironmentProperties;
  /** User info. */
  userInfo?: UserInfo;
  /** Billing plan information. */
  planData?: PlanData;
  /**
   * Liftr Resource category.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly liftrResourceCategory?: LiftrResourceCategories;
  /**
   * The priority of the resource.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly liftrResourcePreference?: number;
  /**
   * Provisioning state of the resource.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly provisioningState?: ProvisioningState;
}

/** Tag rules for a monitor resource */
export interface TagRule extends ProxyResource {
  /**
   * System metadata for this resource.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly systemData?: SystemData;
  /** Set of rules for sending logs for the Monitor resource. */
  logRules?: LogRules;
  /** Set of rules for sending metrics for the Monitor resource. */
  metricRules?: MetricRules;
  /**
   * Provisioning state of the resource.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly provisioningState?: ProvisioningState;
}

/** Single sign-on configurations for a given monitor resource. */
export interface DynatraceSingleSignOnResource extends ProxyResource {
  /**
   * System metadata for this resource.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly systemData?: SystemData;
  /** State of Single Sign On */
  singleSignOnState?: SingleSignOnStates;
  /** Version of the Dynatrace agent installed on the VM. */
  enterpriseAppId?: string;
  /** The login URL specific to this Dynatrace Environment */
  singleSignOnUrl?: string;
  /** array of Aad(azure active directory) domains */
  aadDomains?: string[];
  /**
   * Provisioning state of the resource.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly provisioningState?: ProvisioningState;
}

/** Known values of {@link SendingMetricsStatus} that the service accepts. */
export enum KnownSendingMetricsStatus {
  /** Enabled */
  Enabled = "Enabled",
  /** Disabled */
  Disabled = "Disabled"
}

/**
 * Defines values for SendingMetricsStatus. \
 * {@link KnownSendingMetricsStatus} can be used interchangeably with SendingMetricsStatus,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **Enabled** \
 * **Disabled**
 */
export type SendingMetricsStatus = string;

/** Known values of {@link SendingLogsStatus} that the service accepts. */
export enum KnownSendingLogsStatus {
  /** Enabled */
  Enabled = "Enabled",
  /** Disabled */
  Disabled = "Disabled"
}

/**
 * Defines values for SendingLogsStatus. \
 * {@link KnownSendingLogsStatus} can be used interchangeably with SendingLogsStatus,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **Enabled** \
 * **Disabled**
 */
export type SendingLogsStatus = string;

/** Known values of {@link MonitoringStatus} that the service accepts. */
export enum KnownMonitoringStatus {
  /** Enabled */
  Enabled = "Enabled",
  /** Disabled */
  Disabled = "Disabled"
}

/**
 * Defines values for MonitoringStatus. \
 * {@link KnownMonitoringStatus} can be used interchangeably with MonitoringStatus,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **Enabled** \
 * **Disabled**
 */
export type MonitoringStatus = string;

/** Known values of {@link MarketplaceSubscriptionStatus} that the service accepts. */
export enum KnownMarketplaceSubscriptionStatus {
  /** Active */
  Active = "Active",
  /** Suspended */
  Suspended = "Suspended"
}

/**
 * Defines values for MarketplaceSubscriptionStatus. \
 * {@link KnownMarketplaceSubscriptionStatus} can be used interchangeably with MarketplaceSubscriptionStatus,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **Active** \
 * **Suspended**
 */
export type MarketplaceSubscriptionStatus = string;

/** Known values of {@link SingleSignOnStates} that the service accepts. */
export enum KnownSingleSignOnStates {
  /** Initial */
  Initial = "Initial",
  /** Enable */
  Enable = "Enable",
  /** Disable */
  Disable = "Disable",
  /** Existing */
  Existing = "Existing"
}

/**
 * Defines values for SingleSignOnStates. \
 * {@link KnownSingleSignOnStates} can be used interchangeably with SingleSignOnStates,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **Initial** \
 * **Enable** \
 * **Disable** \
 * **Existing**
 */
export type SingleSignOnStates = string;

/** Known values of {@link ProvisioningState} that the service accepts. */
export enum KnownProvisioningState {
  /** Accepted */
  Accepted = "Accepted",
  /** Creating */
  Creating = "Creating",
  /** Updating */
  Updating = "Updating",
  /** Deleting */
  Deleting = "Deleting",
  /** Succeeded */
  Succeeded = "Succeeded",
  /** Failed */
  Failed = "Failed",
  /** Canceled */
  Canceled = "Canceled",
  /** Deleted */
  Deleted = "Deleted",
  /** NotSpecified */
  NotSpecified = "NotSpecified"
}

/**
 * Defines values for ProvisioningState. \
 * {@link KnownProvisioningState} can be used interchangeably with ProvisioningState,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **Accepted** \
 * **Creating** \
 * **Updating** \
 * **Deleting** \
 * **Succeeded** \
 * **Failed** \
 * **Canceled** \
 * **Deleted** \
 * **NotSpecified**
 */
export type ProvisioningState = string;

/** Known values of {@link LiftrResourceCategories} that the service accepts. */
export enum KnownLiftrResourceCategories {
  /** Unknown */
  Unknown = "Unknown",
  /** MonitorLogs */
  MonitorLogs = "MonitorLogs"
}

/**
 * Defines values for LiftrResourceCategories. \
 * {@link KnownLiftrResourceCategories} can be used interchangeably with LiftrResourceCategories,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **Unknown** \
 * **MonitorLogs**
 */
export type LiftrResourceCategories = string;

/** Known values of {@link CreatedByType} that the service accepts. */
export enum KnownCreatedByType {
  /** User */
  User = "User",
  /** Application */
  Application = "Application",
  /** ManagedIdentity */
  ManagedIdentity = "ManagedIdentity",
  /** Key */
  Key = "Key"
}

/**
 * Defines values for CreatedByType. \
 * {@link KnownCreatedByType} can be used interchangeably with CreatedByType,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **User** \
 * **Application** \
 * **ManagedIdentity** \
 * **Key**
 */
export type CreatedByType = string;

/** Known values of {@link ManagedIdentityType} that the service accepts. */
export enum KnownManagedIdentityType {
  /** SystemAssigned */
  SystemAssigned = "SystemAssigned",
  /** UserAssigned */
  UserAssigned = "UserAssigned",
  /** SystemAndUserAssigned */
  SystemAndUserAssigned = "SystemAndUserAssigned"
}

/**
 * Defines values for ManagedIdentityType. \
 * {@link KnownManagedIdentityType} can be used interchangeably with ManagedIdentityType,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **SystemAssigned** \
 * **UserAssigned** \
 * **SystemAndUserAssigned**
 */
export type ManagedIdentityType = string;

/** Known values of {@link Origin} that the service accepts. */
export enum KnownOrigin {
  /** User */
  User = "user",
  /** System */
  System = "system",
  /** UserSystem */
  UserSystem = "user,system"
}

/**
 * Defines values for Origin. \
 * {@link KnownOrigin} can be used interchangeably with Origin,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **user** \
 * **system** \
 * **user,system**
 */
export type Origin = string;

/** Known values of {@link ActionType} that the service accepts. */
export enum KnownActionType {
  /** Internal */
  Internal = "Internal"
}

/**
 * Defines values for ActionType. \
 * {@link KnownActionType} can be used interchangeably with ActionType,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **Internal**
 */
export type ActionType = string;

/** Known values of {@link SendAadLogsStatus} that the service accepts. */
export enum KnownSendAadLogsStatus {
  /** Enabled */
  Enabled = "Enabled",
  /** Disabled */
  Disabled = "Disabled"
}

/**
 * Defines values for SendAadLogsStatus. \
 * {@link KnownSendAadLogsStatus} can be used interchangeably with SendAadLogsStatus,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **Enabled** \
 * **Disabled**
 */
export type SendAadLogsStatus = string;

/** Known values of {@link SendSubscriptionLogsStatus} that the service accepts. */
export enum KnownSendSubscriptionLogsStatus {
  /** Enabled */
  Enabled = "Enabled",
  /** Disabled */
  Disabled = "Disabled"
}

/**
 * Defines values for SendSubscriptionLogsStatus. \
 * {@link KnownSendSubscriptionLogsStatus} can be used interchangeably with SendSubscriptionLogsStatus,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **Enabled** \
 * **Disabled**
 */
export type SendSubscriptionLogsStatus = string;

/** Known values of {@link SendActivityLogsStatus} that the service accepts. */
export enum KnownSendActivityLogsStatus {
  /** Enabled */
  Enabled = "Enabled",
  /** Disabled */
  Disabled = "Disabled"
}

/**
 * Defines values for SendActivityLogsStatus. \
 * {@link KnownSendActivityLogsStatus} can be used interchangeably with SendActivityLogsStatus,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **Enabled** \
 * **Disabled**
 */
export type SendActivityLogsStatus = string;

/** Known values of {@link TagAction} that the service accepts. */
export enum KnownTagAction {
  /** Include */
  Include = "Include",
  /** Exclude */
  Exclude = "Exclude"
}

/**
 * Defines values for TagAction. \
 * {@link KnownTagAction} can be used interchangeably with TagAction,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **Include** \
 * **Exclude**
 */
export type TagAction = string;

/** Known values of {@link MonitoringType} that the service accepts. */
export enum KnownMonitoringType {
  /** CloudInfrastructure */
  CloudInfrastructure = "CLOUD_INFRASTRUCTURE",
  /** FullStack */
  FullStack = "FULL_STACK"
}

/**
 * Defines values for MonitoringType. \
 * {@link KnownMonitoringType} can be used interchangeably with MonitoringType,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **CLOUD_INFRASTRUCTURE** \
 * **FULL_STACK**
 */
export type MonitoringType = string;

/** Known values of {@link AutoUpdateSetting} that the service accepts. */
export enum KnownAutoUpdateSetting {
  /** Enabled */
  Enabled = "ENABLED",
  /** Disabled */
  Disabled = "DISABLED"
}

/**
 * Defines values for AutoUpdateSetting. \
 * {@link KnownAutoUpdateSetting} can be used interchangeably with AutoUpdateSetting,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **ENABLED** \
 * **DISABLED**
 */
export type AutoUpdateSetting = string;

/** Known values of {@link UpdateStatus} that the service accepts. */
export enum KnownUpdateStatus {
  /** Incompatible */
  Incompatible = "INCOMPATIBLE",
  /** Outdated */
  Outdated = "OUTDATED",
  /** Scheduled */
  Scheduled = "SCHEDULED",
  /** Suppressed */
  Suppressed = "SUPPRESSED",
  /** Unknown */
  Unknown = "UNKNOWN",
  /** UP2Date */
  UP2Date = "UP2DATE",
  /** UpdateINProgress */
  UpdateINProgress = "UPDATE_IN_PROGRESS",
  /** UpdatePending */
  UpdatePending = "UPDATE_PENDING",
  /** UpdateProblem */
  UpdateProblem = "UPDATE_PROBLEM"
}

/**
 * Defines values for UpdateStatus. \
 * {@link KnownUpdateStatus} can be used interchangeably with UpdateStatus,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **INCOMPATIBLE** \
 * **OUTDATED** \
 * **SCHEDULED** \
 * **SUPPRESSED** \
 * **UNKNOWN** \
 * **UP2DATE** \
 * **UPDATE_IN_PROGRESS** \
 * **UPDATE_PENDING** \
 * **UPDATE_PROBLEM**
 */
export type UpdateStatus = string;

/** Known values of {@link AvailabilityState} that the service accepts. */
export enum KnownAvailabilityState {
  /** Crashed */
  Crashed = "CRASHED",
  /** Lost */
  Lost = "LOST",
  /** Monitored */
  Monitored = "MONITORED",
  /** PREMonitored */
  PREMonitored = "PRE_MONITORED",
  /** Shutdown */
  Shutdown = "SHUTDOWN",
  /** UnexpectedShutdown */
  UnexpectedShutdown = "UNEXPECTED_SHUTDOWN",
  /** Unknown */
  Unknown = "UNKNOWN",
  /** Unmonitored */
  Unmonitored = "UNMONITORED"
}

/**
 * Defines values for AvailabilityState. \
 * {@link KnownAvailabilityState} can be used interchangeably with AvailabilityState,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **CRASHED** \
 * **LOST** \
 * **MONITORED** \
 * **PRE_MONITORED** \
 * **SHUTDOWN** \
 * **UNEXPECTED_SHUTDOWN** \
 * **UNKNOWN** \
 * **UNMONITORED**
 */
export type AvailabilityState = string;

/** Known values of {@link LogModule} that the service accepts. */
export enum KnownLogModule {
  /** Enabled */
  Enabled = "ENABLED",
  /** Disabled */
  Disabled = "DISABLED"
}

/**
 * Defines values for LogModule. \
 * {@link KnownLogModule} can be used interchangeably with LogModule,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **ENABLED** \
 * **DISABLED**
 */
export type LogModule = string;

/** Known values of {@link SSOStatus} that the service accepts. */
export enum KnownSSOStatus {
  /** Enabled */
  Enabled = "Enabled",
  /** Disabled */
  Disabled = "Disabled"
}

/**
 * Defines values for SSOStatus. \
 * {@link KnownSSOStatus} can be used interchangeably with SSOStatus,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **Enabled** \
 * **Disabled**
 */
export type SSOStatus = string;

/** Optional parameters. */
export interface MonitorsGetAccountCredentialsOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the getAccountCredentials operation. */
export type MonitorsGetAccountCredentialsResponse = AccountInfoSecure;

/** Optional parameters. */
export interface MonitorsListMonitoredResourcesOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the listMonitoredResources operation. */
export type MonitorsListMonitoredResourcesResponse = MonitoredResourceListResponse;

/** Optional parameters. */
export interface MonitorsGetVMHostPayloadOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the getVMHostPayload operation. */
export type MonitorsGetVMHostPayloadResponse = VMExtensionPayload;

/** Optional parameters. */
export interface MonitorsGetOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the get operation. */
export type MonitorsGetResponse = MonitorResource;

/** Optional parameters. */
export interface MonitorsCreateOrUpdateOptionalParams
  extends coreClient.OperationOptions {
  /** Delay to wait until next poll, in milliseconds. */
  updateIntervalInMs?: number;
  /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */
  resumeFrom?: string;
}

/** Contains response data for the createOrUpdate operation. */
export type MonitorsCreateOrUpdateResponse = MonitorResource;

/** Optional parameters. */
export interface MonitorsUpdateOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the update operation. */
export type MonitorsUpdateResponse = MonitorResource;

/** Optional parameters. */
export interface MonitorsDeleteOptionalParams
  extends coreClient.OperationOptions {
  /** Delay to wait until next poll, in milliseconds. */
  updateIntervalInMs?: number;
  /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */
  resumeFrom?: string;
}

/** Optional parameters. */
export interface MonitorsListBySubscriptionIdOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the listBySubscriptionId operation. */
export type MonitorsListBySubscriptionIdResponse = MonitorResourceListResult;

/** Optional parameters. */
export interface MonitorsListByResourceGroupOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the listByResourceGroup operation. */
export type MonitorsListByResourceGroupResponse = MonitorResourceListResult;

/** Optional parameters. */
export interface MonitorsListHostsOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the listHosts operation. */
export type MonitorsListHostsResponse = VMHostsListResponse;

/** Optional parameters. */
export interface MonitorsListAppServicesOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the listAppServices operation. */
export type MonitorsListAppServicesResponse = AppServiceListResponse;

/** Optional parameters. */
export interface MonitorsGetSSODetailsOptionalParams
  extends coreClient.OperationOptions {
  /** The details of the get sso details request. */
  request?: SSODetailsRequest;
}

/** Contains response data for the getSSODetails operation. */
export type MonitorsGetSSODetailsResponse = SSODetailsResponse;

/** Optional parameters. */
export interface MonitorsListLinkableEnvironmentsOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the listLinkableEnvironments operation. */
export type MonitorsListLinkableEnvironmentsResponse = LinkableEnvironmentListResponse;

/** Optional parameters. */
export interface MonitorsListMonitoredResourcesNextOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the listMonitoredResourcesNext operation. */
export type MonitorsListMonitoredResourcesNextResponse = MonitoredResourceListResponse;

/** Optional parameters. */
export interface MonitorsListBySubscriptionIdNextOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the listBySubscriptionIdNext operation. */
export type MonitorsListBySubscriptionIdNextResponse = MonitorResourceListResult;

/** Optional parameters. */
export interface MonitorsListByResourceGroupNextOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the listByResourceGroupNext operation. */
export type MonitorsListByResourceGroupNextResponse = MonitorResourceListResult;

/** Optional parameters. */
export interface MonitorsListHostsNextOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the listHostsNext operation. */
export type MonitorsListHostsNextResponse = VMHostsListResponse;

/** Optional parameters. */
export interface MonitorsListAppServicesNextOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the listAppServicesNext operation. */
export type MonitorsListAppServicesNextResponse = AppServiceListResponse;

/** Optional parameters. */
export interface MonitorsListLinkableEnvironmentsNextOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the listLinkableEnvironmentsNext operation. */
export type MonitorsListLinkableEnvironmentsNextResponse = LinkableEnvironmentListResponse;

/** Optional parameters. */
export interface OperationsListOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the list operation. */
export type OperationsListResponse = OperationListResult;

/** Optional parameters. */
export interface OperationsListNextOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the listNext operation. */
export type OperationsListNextResponse = OperationListResult;

/** Optional parameters. */
export interface TagRulesGetOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the get operation. */
export type TagRulesGetResponse = TagRule;

/** Optional parameters. */
export interface TagRulesCreateOrUpdateOptionalParams
  extends coreClient.OperationOptions {
  /** Delay to wait until next poll, in milliseconds. */
  updateIntervalInMs?: number;
  /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */
  resumeFrom?: string;
}

/** Contains response data for the createOrUpdate operation. */
export type TagRulesCreateOrUpdateResponse = TagRule;

/** Optional parameters. */
export interface TagRulesUpdateOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the update operation. */
export type TagRulesUpdateResponse = TagRule;

/** Optional parameters. */
export interface TagRulesDeleteOptionalParams
  extends coreClient.OperationOptions {
  /** Delay to wait until next poll, in milliseconds. */
  updateIntervalInMs?: number;
  /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */
  resumeFrom?: string;
}

/** Optional parameters. */
export interface TagRulesListOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the list operation. */
export type TagRulesListResponse = TagRuleListResult;

/** Optional parameters. */
export interface TagRulesListNextOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the listNext operation. */
export type TagRulesListNextResponse = TagRuleListResult;

/** Optional parameters. */
export interface SingleSignOnCreateOrUpdateOptionalParams
  extends coreClient.OperationOptions {
  /** Delay to wait until next poll, in milliseconds. */
  updateIntervalInMs?: number;
  /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */
  resumeFrom?: string;
}

/** Contains response data for the createOrUpdate operation. */
export type SingleSignOnCreateOrUpdateResponse = DynatraceSingleSignOnResource;

/** Optional parameters. */
export interface SingleSignOnGetOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the get operation. */
export type SingleSignOnGetResponse = DynatraceSingleSignOnResource;

/** Optional parameters. */
export interface SingleSignOnListOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the list operation. */
export type SingleSignOnListResponse = DynatraceSingleSignOnResourceListResult;

/** Optional parameters. */
export interface SingleSignOnListNextOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the listNext operation. */
export type SingleSignOnListNextResponse = DynatraceSingleSignOnResourceListResult;

/** Optional parameters. */
export interface DynatraceObservabilityOptionalParams
  extends coreClient.ServiceClientOptions {
  /** server parameter */
  $host?: string;
  /** Api Version */
  apiVersion?: string;
  /** Overrides client endpoint. */
  endpoint?: string;
}
