/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */

import { PagedAsyncIterableIterator } from "@azure/core-paging";
import { DocumentClassifiers } from "../operationsInterfaces";
import * as coreClient from "@azure/core-client";
import * as Mappers from "../models/mappers";
import * as Parameters from "../models/parameters";
import { GeneratedClient } from "../generatedClient";
import {
  DocumentClassifierDetails,
  DocumentClassifiersListClassifiersNextOptionalParams,
  DocumentClassifiersListClassifiersOptionalParams,
  BuildDocumentClassifierRequest,
  DocumentClassifiersBuildClassifierOptionalParams,
  DocumentClassifiersBuildClassifierResponse,
  DocumentClassifiersListClassifiersResponse,
  DocumentClassifiersGetClassifierOptionalParams,
  DocumentClassifiersGetClassifierResponse,
  DocumentClassifiersDeleteClassifierOptionalParams,
  ContentType,
  DocumentClassifiersClassifyDocument$binaryOptionalParams,
  DocumentClassifiersClassifyDocument$textOptionalParams,
  DocumentClassifiersClassifyDocument$jsonOptionalParams,
  DocumentClassifiersClassifyDocumentResponse,
  DocumentClassifiersGetClassifyResultOptionalParams,
  DocumentClassifiersGetClassifyResultResponse,
  DocumentClassifiersListClassifiersNextResponse
} from "../models";

/// <reference lib="esnext.asynciterable" />
/** Class containing DocumentClassifiers operations. */
export class DocumentClassifiersImpl implements DocumentClassifiers {
  private readonly client: GeneratedClient;

  /**
   * Initialize a new instance of the class DocumentClassifiers class.
   * @param client Reference to the service client
   */
  constructor(client: GeneratedClient) {
    this.client = client;
  }

  /**
   * List all document classifiers.
   * @param options The options parameters.
   */
  public listClassifiers(
    options?: DocumentClassifiersListClassifiersOptionalParams
  ): PagedAsyncIterableIterator<DocumentClassifierDetails> {
    const iter = this.listClassifiersPagingAll(options);
    return {
      next() {
        return iter.next();
      },
      [Symbol.asyncIterator]() {
        return this;
      },
      byPage: () => {
        return this.listClassifiersPagingPage(options);
      }
    };
  }

  private async *listClassifiersPagingPage(
    options?: DocumentClassifiersListClassifiersOptionalParams
  ): AsyncIterableIterator<DocumentClassifierDetails[]> {
    let result = await this._listClassifiers(options);
    yield result.value || [];
    let continuationToken = result.nextLink;
    while (continuationToken) {
      result = await this._listClassifiersNext(continuationToken, options);
      continuationToken = result.nextLink;
      yield result.value || [];
    }
  }

  private async *listClassifiersPagingAll(
    options?: DocumentClassifiersListClassifiersOptionalParams
  ): AsyncIterableIterator<DocumentClassifierDetails> {
    for await (const page of this.listClassifiersPagingPage(options)) {
      yield* page;
    }
  }

  /**
   * Builds a custom document classifier.
   * @param buildRequest Building request parameters.
   * @param options The options parameters.
   */
  buildClassifier(
    buildRequest: BuildDocumentClassifierRequest,
    options?: DocumentClassifiersBuildClassifierOptionalParams
  ): Promise<DocumentClassifiersBuildClassifierResponse> {
    return this.client.sendOperationRequest(
      { buildRequest, options },
      buildClassifierOperationSpec
    );
  }

  /**
   * List all document classifiers.
   * @param options The options parameters.
   */
  private _listClassifiers(
    options?: DocumentClassifiersListClassifiersOptionalParams
  ): Promise<DocumentClassifiersListClassifiersResponse> {
    return this.client.sendOperationRequest(
      { options },
      listClassifiersOperationSpec
    );
  }

  /**
   * Gets detailed document classifier information.
   * @param classifierId Unique document classifier name.
   * @param options The options parameters.
   */
  getClassifier(
    classifierId: string,
    options?: DocumentClassifiersGetClassifierOptionalParams
  ): Promise<DocumentClassifiersGetClassifierResponse> {
    return this.client.sendOperationRequest(
      { classifierId, options },
      getClassifierOperationSpec
    );
  }

  /**
   * Deletes document classifier.
   * @param classifierId Unique document classifier name.
   * @param options The options parameters.
   */
  deleteClassifier(
    classifierId: string,
    options?: DocumentClassifiersDeleteClassifierOptionalParams
  ): Promise<void> {
    return this.client.sendOperationRequest(
      { classifierId, options },
      deleteClassifierOperationSpec
    );
  }

  /**
   * Classifies document with document classifier.
   * @param classifierId Unique document classifier name.
   * @param contentType Upload file type
   * @param options The options parameters.
   */
  classifyDocument(
    classifierId: string,
    contentType: ContentType,
    options?: DocumentClassifiersClassifyDocument$binaryOptionalParams
  ): Promise<DocumentClassifiersClassifyDocumentResponse>;
  /**
   * Classifies document with document classifier.
   * @param classifierId Unique document classifier name.
   * @param contentType Upload file type
   * @param options The options parameters.
   */
  classifyDocument(
    classifierId: string,
    contentType: "text/html",
    options?: DocumentClassifiersClassifyDocument$textOptionalParams
  ): Promise<DocumentClassifiersClassifyDocumentResponse>;
  /**
   * Classifies document with document classifier.
   * @param classifierId Unique document classifier name.
   * @param contentType Body Parameter content-type
   * @param options The options parameters.
   */
  classifyDocument(
    classifierId: string,
    contentType: "application/json",
    options?: DocumentClassifiersClassifyDocument$jsonOptionalParams
  ): Promise<DocumentClassifiersClassifyDocumentResponse>;
  /**
   * Classifies document with document classifier.
   * @param args Includes all the parameters for this operation.
   */
  classifyDocument(
    ...args:
      | [
          string,
          ContentType,
          DocumentClassifiersClassifyDocument$binaryOptionalParams?
        ]
      | [
          string,
          "text/html",
          DocumentClassifiersClassifyDocument$textOptionalParams?
        ]
      | [
          string,
          "application/json",
          DocumentClassifiersClassifyDocument$jsonOptionalParams?
        ]
  ): Promise<DocumentClassifiersClassifyDocumentResponse> {
    let operationSpec: coreClient.OperationSpec;
    let operationArguments: coreClient.OperationArguments;
    let options;
    if (
      args[1] === "application/octet-stream" ||
      args[1] === "application/pdf" ||
      args[1] ===
        "application/vnd.openxmlformats-officedocument.presentationml.presentation" ||
      args[1] ===
        "application/vnd.openxmlformats-officedocument.spreadsheetml.sheet" ||
      args[1] ===
        "application/vnd.openxmlformats-officedocument.wordprocessingml.document" ||
      args[1] === "image/bmp" ||
      args[1] === "image/heif" ||
      args[1] === "image/jpeg" ||
      args[1] === "image/png" ||
      args[1] === "image/tiff"
    ) {
      operationSpec = classifyDocument$binaryOperationSpec;
      operationArguments = {
        classifierId: args[0],
        contentType: args[1],
        options: args[2]
      };
      options = args[2];
    } else if (args[1] === "text/html") {
      operationSpec = classifyDocument$textOperationSpec;
      operationArguments = {
        classifierId: args[0],
        contentType: args[1],
        options: args[2]
      };
      options = args[2];
    } else if (args[1] === "application/json") {
      operationSpec = classifyDocument$jsonOperationSpec;
      operationArguments = {
        classifierId: args[0],
        contentType: args[1],
        options: args[2]
      };
      options = args[2];
    } else {
      throw new TypeError(
        `"contentType" must be a valid value but instead was "${args[1]}".`
      );
    }
    operationArguments.options = options || {};
    return this.client.sendOperationRequest(operationArguments, operationSpec);
  }

  /**
   * Gets the result of document classifier.
   * @param classifierId Unique document classifier name.
   * @param resultId Analyze operation result ID.
   * @param options The options parameters.
   */
  getClassifyResult(
    classifierId: string,
    resultId: string,
    options?: DocumentClassifiersGetClassifyResultOptionalParams
  ): Promise<DocumentClassifiersGetClassifyResultResponse> {
    return this.client.sendOperationRequest(
      { classifierId, resultId, options },
      getClassifyResultOperationSpec
    );
  }

  /**
   * ListClassifiersNext
   * @param nextLink The nextLink from the previous successful call to the ListClassifiers method.
   * @param options The options parameters.
   */
  private _listClassifiersNext(
    nextLink: string,
    options?: DocumentClassifiersListClassifiersNextOptionalParams
  ): Promise<DocumentClassifiersListClassifiersNextResponse> {
    return this.client.sendOperationRequest(
      { nextLink, options },
      listClassifiersNextOperationSpec
    );
  }
}
// Operation Specifications
const serializer = coreClient.createSerializer(Mappers, /* isXml */ false);

const buildClassifierOperationSpec: coreClient.OperationSpec = {
  path: "/documentClassifiers:build",
  httpMethod: "POST",
  responses: {
    202: {
      headersMapper: Mappers.DocumentClassifiersBuildClassifierHeaders
    },
    default: {
      bodyMapper: Mappers.ErrorResponse
    }
  },
  requestBody: Parameters.buildRequest1,
  queryParameters: [Parameters.apiVersion],
  urlParameters: [Parameters.endpoint],
  headerParameters: [Parameters.accept2, Parameters.contentType3],
  mediaType: "json",
  serializer
};
const listClassifiersOperationSpec: coreClient.OperationSpec = {
  path: "/documentClassifiers",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.GetDocumentClassifiersResponse
    },
    default: {
      bodyMapper: Mappers.ErrorResponse
    }
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [Parameters.endpoint],
  headerParameters: [Parameters.accept2],
  serializer
};
const getClassifierOperationSpec: coreClient.OperationSpec = {
  path: "/documentClassifiers/{classifierId}",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.DocumentClassifierDetails
    },
    default: {
      bodyMapper: Mappers.ErrorResponse
    }
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [Parameters.endpoint, Parameters.classifierId],
  headerParameters: [Parameters.accept2],
  serializer
};
const deleteClassifierOperationSpec: coreClient.OperationSpec = {
  path: "/documentClassifiers/{classifierId}",
  httpMethod: "DELETE",
  responses: {
    204: {},
    default: {
      bodyMapper: Mappers.ErrorResponse
    }
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [Parameters.endpoint, Parameters.classifierId],
  headerParameters: [Parameters.accept2],
  serializer
};
const classifyDocument$binaryOperationSpec: coreClient.OperationSpec = {
  path: "/documentClassifiers/{classifierId}:analyze",
  httpMethod: "POST",
  responses: {
    202: {
      headersMapper: Mappers.DocumentClassifiersClassifyDocumentHeaders
    },
    default: {
      bodyMapper: Mappers.ErrorResponse
    }
  },
  requestBody: Parameters.classifyRequest,
  queryParameters: [Parameters.stringIndexType, Parameters.apiVersion],
  urlParameters: [Parameters.endpoint, Parameters.classifierId],
  headerParameters: [Parameters.contentType, Parameters.accept],
  mediaType: "binary",
  serializer
};
const classifyDocument$textOperationSpec: coreClient.OperationSpec = {
  path: "/documentClassifiers/{classifierId}:analyze",
  httpMethod: "POST",
  responses: {
    202: {
      headersMapper: Mappers.DocumentClassifiersClassifyDocumentHeaders
    },
    default: {
      bodyMapper: Mappers.ErrorResponse
    }
  },
  requestBody: Parameters.classifyRequest1,
  queryParameters: [Parameters.stringIndexType, Parameters.apiVersion],
  urlParameters: [Parameters.endpoint, Parameters.classifierId],
  headerParameters: [Parameters.contentType1, Parameters.accept1],
  mediaType: "text",
  serializer
};
const classifyDocument$jsonOperationSpec: coreClient.OperationSpec = {
  path: "/documentClassifiers/{classifierId}:analyze",
  httpMethod: "POST",
  responses: {
    202: {
      headersMapper: Mappers.DocumentClassifiersClassifyDocumentHeaders
    },
    default: {
      bodyMapper: Mappers.ErrorResponse
    }
  },
  requestBody: Parameters.classifyRequest2,
  queryParameters: [Parameters.stringIndexType, Parameters.apiVersion],
  urlParameters: [Parameters.endpoint, Parameters.classifierId],
  headerParameters: [Parameters.contentType2, Parameters.accept2],
  mediaType: "json",
  serializer
};
const getClassifyResultOperationSpec: coreClient.OperationSpec = {
  path: "/documentClassifiers/{classifierId}/analyzeResults/{resultId}",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.AnalyzeResultOperation
    },
    default: {
      bodyMapper: Mappers.ErrorResponse
    }
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.endpoint,
    Parameters.resultId,
    Parameters.classifierId
  ],
  headerParameters: [Parameters.accept2],
  serializer
};
const listClassifiersNextOperationSpec: coreClient.OperationSpec = {
  path: "{nextLink}",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.GetDocumentClassifiersResponse
    },
    default: {
      bodyMapper: Mappers.ErrorResponse
    }
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [Parameters.endpoint, Parameters.nextLink],
  headerParameters: [Parameters.accept2],
  serializer
};
