/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */

import * as coreHttp from "@azure/core-http";
import * as Parameters from "./models/parameters";
import * as Models from "./models";
import * as Mappers from "./models/mappers";
import { GeneratedClientContext } from "./generatedClientContext";

class GeneratedClient extends GeneratedClientContext {
  /**
   * Initializes a new instance of the GeneratedClient class.
   * @param credentials Subscription credentials which uniquely identify client subscription.
   * @param endpoint Supported Cognitive Services endpoints (protocol and hostname, for example:
   *                 https://westus2.api.cognitive.microsoft.com).
   * @param options The parameter options
   */
  constructor(
    credentials: coreHttp.TokenCredential | coreHttp.ServiceClientCredentials,
    endpoint: string,
    options?: Models.GeneratedClientOptionalParams
  ) {
    super(credentials, endpoint, options);
  }

  /**
   * Create and train a custom model. The request must include a source parameter that is either an
   * externally accessible Azure storage blob container Uri (preferably a Shared Access Signature Uri) or
   * valid path to a data folder in a locally mounted drive. When local paths are specified, they must
   * follow the Linux/Unix path format and be an absolute path rooted to the input mount configuration
   * setting value e.g., if '{Mounts:Input}' configuration setting value is '/input' then a valid source
   * path would be '/input/contosodataset'. All data to be trained is expected to be under the source
   * folder or sub folders under it. Models are trained using documents that are of the following content
   * type - 'application/pdf', 'image/jpeg', 'image/png', 'image/tiff'. Other type of content is ignored.
   * @param trainRequest Training request parameters.
   * @param options The options parameters.
   */
  trainCustomModelAsync(
    trainRequest: Models.TrainRequest,
    options?: coreHttp.OperationOptions
  ): Promise<Models.GeneratedClientTrainCustomModelAsyncResponse> {
    return this.sendOperationRequest(
      { trainRequest, options },
      trainCustomModelAsyncOperationSpec
    ) as Promise<Models.GeneratedClientTrainCustomModelAsyncResponse>;
  }

  /**
   * Get detailed information about a custom model.
   * @param modelId Model identifier.
   * @param options The options parameters.
   */
  getCustomModel(
    modelId: string,
    options?: Models.GeneratedClientGetCustomModelOptionalParams
  ): Promise<Models.GeneratedClientGetCustomModelResponse> {
    return this.sendOperationRequest(
      { modelId, options },
      getCustomModelOperationSpec
    ) as Promise<Models.GeneratedClientGetCustomModelResponse>;
  }

  /**
   * Mark model for deletion. Model artifacts will be permanently removed within a predetermined period.
   * @param modelId Model identifier.
   * @param options The options parameters.
   */
  deleteCustomModel(
    modelId: string,
    options?: coreHttp.OperationOptions
  ): Promise<coreHttp.RestResponse> {
    return this.sendOperationRequest(
      { modelId, options },
      deleteCustomModelOperationSpec
    ) as Promise<coreHttp.RestResponse>;
  }

  /**
   * Extract key-value pairs, tables, and semantic values from a given document. The input document must
   * be of one of the supported content types - 'application/pdf', 'image/jpeg', 'image/png' or
   * 'image/tiff'. Alternatively, use 'application/json' type to specify the location (Uri or local path)
   * of the document to be analyzed.
   * @param modelId Model identifier.
   * @param options The options parameters.
   */
  analyzeWithCustomModel(
    modelId: string,
    options?: Models.GeneratedClientAnalyzeWithCustomModelOptionalParams
  ): Promise<Models.GeneratedClientAnalyzeWithCustomModelResponse> {
    let operationSpec: coreHttp.OperationSpec;
    if (
      options &&
      "contentType" in options &&
      ["application/pdf", "image/jpeg", "image/png", "image/tiff"].indexOf(
        options.contentType ?? ""
      ) > -1
    ) {
      operationSpec = analyzeWithCustomModel$binaryOperationSpec;
    } else {
      operationSpec = analyzeWithCustomModel$jsonOperationSpec;
    }
    return this.sendOperationRequest(
      { modelId, options },
      operationSpec
    ) as Promise<Models.GeneratedClientAnalyzeWithCustomModelResponse>;
  }

  /**
   * Obtain current status and the result of the analyze form operation.
   * @param modelId Model identifier.
   * @param resultId Analyze operation result identifier.
   * @param options The options parameters.
   */
  getAnalyzeFormResult(
    modelId: string,
    resultId: string,
    options?: coreHttp.OperationOptions
  ): Promise<Models.GeneratedClientGetAnalyzeFormResultResponse> {
    return this.sendOperationRequest(
      { modelId, resultId, options },
      getAnalyzeFormResultOperationSpec
    ) as Promise<Models.GeneratedClientGetAnalyzeFormResultResponse>;
  }

  /**
   * Extract field text and semantic values from a given receipt document. The input document must be of
   * one of the supported content types - 'application/pdf', 'image/jpeg', 'image/png' or 'image/tiff'.
   * Alternatively, use 'application/json' type to specify the location (Uri or local path) of the
   * document to be analyzed.
   * @param options The options parameters.
   */
  analyzeReceiptAsync(
    options?: Models.GeneratedClientAnalyzeReceiptAsyncOptionalParams
  ): Promise<Models.GeneratedClientAnalyzeReceiptAsyncResponse> {
    let operationSpec: coreHttp.OperationSpec;
    if (
      options &&
      "contentType" in options &&
      ["application/pdf", "image/jpeg", "image/png", "image/tiff"].indexOf(
        options.contentType ?? ""
      ) > -1
    ) {
      operationSpec = analyzeReceiptAsync$binaryOperationSpec;
    } else {
      operationSpec = analyzeReceiptAsync$jsonOperationSpec;
    }
    return this.sendOperationRequest({ options }, operationSpec) as Promise<
      Models.GeneratedClientAnalyzeReceiptAsyncResponse
    >;
  }

  /**
   * Track the progress and obtain the result of the analyze receipt operation.
   * @param resultId Analyze operation result identifier.
   * @param options The options parameters.
   */
  getAnalyzeReceiptResult(
    resultId: string,
    options?: coreHttp.OperationOptions
  ): Promise<Models.GeneratedClientGetAnalyzeReceiptResultResponse> {
    return this.sendOperationRequest(
      { resultId, options },
      getAnalyzeReceiptResultOperationSpec
    ) as Promise<Models.GeneratedClientGetAnalyzeReceiptResultResponse>;
  }

  /**
   * Extract text and layout information from a given document. The input document must be of one of the
   * supported content types - 'application/pdf', 'image/jpeg', 'image/png' or 'image/tiff'.
   * Alternatively, use 'application/json' type to specify the location (Uri or local path) of the
   * document to be analyzed.
   * @param options The options parameters.
   */
  analyzeLayoutAsync(
    options?: Models.GeneratedClientAnalyzeLayoutAsyncOptionalParams
  ): Promise<Models.GeneratedClientAnalyzeLayoutAsyncResponse> {
    let operationSpec: coreHttp.OperationSpec;
    if (
      options &&
      "contentType" in options &&
      ["application/pdf", "image/jpeg", "image/png", "image/tiff"].indexOf(
        options.contentType ?? ""
      ) > -1
    ) {
      operationSpec = analyzeLayoutAsync$binaryOperationSpec;
    } else {
      operationSpec = analyzeLayoutAsync$jsonOperationSpec;
    }
    return this.sendOperationRequest({ options }, operationSpec) as Promise<
      Models.GeneratedClientAnalyzeLayoutAsyncResponse
    >;
  }

  /**
   * Track the progress and obtain the result of the analyze layout operation
   * @param resultId Analyze operation result identifier.
   * @param options The options parameters.
   */
  getAnalyzeLayoutResult(
    resultId: string,
    options?: coreHttp.OperationOptions
  ): Promise<Models.GeneratedClientGetAnalyzeLayoutResultResponse> {
    return this.sendOperationRequest(
      { resultId, options },
      getAnalyzeLayoutResultOperationSpec
    ) as Promise<Models.GeneratedClientGetAnalyzeLayoutResultResponse>;
  }

  /**
   * Get information about all custom models
   * @param options The options parameters.
   */
  listCustomModels(
    options?: coreHttp.OperationOptions
  ): Promise<Models.GeneratedClientListCustomModelsResponse> {
    return this.sendOperationRequest(
      { options },
      listCustomModelsOperationSpec
    ) as Promise<Models.GeneratedClientListCustomModelsResponse>;
  }

  /**
   * Get information about all custom models
   * @param options The options parameters.
   */
  getCustomModels(
    options?: coreHttp.OperationOptions
  ): Promise<Models.GeneratedClientGetCustomModelsResponse> {
    return this.sendOperationRequest(
      { options },
      getCustomModelsOperationSpec
    ) as Promise<Models.GeneratedClientGetCustomModelsResponse>;
  }

  /**
   * ListCustomModelsNext
   * @param nextLink The nextLink from the previous successful call to the ListCustomModels method.
   * @param options The options parameters.
   */
  listCustomModelsNext(
    nextLink: string,
    options?: coreHttp.OperationOptions
  ): Promise<Models.GeneratedClientListCustomModelsNextResponse> {
    return this.sendOperationRequest(
      { nextLink, options },
      listCustomModelsNextOperationSpec
    ) as Promise<Models.GeneratedClientListCustomModelsNextResponse>;
  }
}
// Operation Specifications

const serializer = new coreHttp.Serializer(Mappers, /* isXml */ false);

const trainCustomModelAsyncOperationSpec: coreHttp.OperationSpec = {
  path: "/custom/models",
  httpMethod: "POST",
  responses: {
    201: {
      headersMapper: Mappers.GeneratedClientTrainCustomModelAsyncHeaders
    },
    default: {
      bodyMapper: Mappers.ErrorResponse
    }
  },
  requestBody: Parameters.trainRequest,
  urlParameters: [Parameters.endpoint],
  serializer
};
const getCustomModelOperationSpec: coreHttp.OperationSpec = {
  path: "/custom/models/{modelId}",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.Model
    },
    default: {
      bodyMapper: Mappers.ErrorResponse
    }
  },
  queryParameters: [Parameters.includeKeys],
  urlParameters: [Parameters.endpoint, Parameters.modelId],
  serializer
};
const deleteCustomModelOperationSpec: coreHttp.OperationSpec = {
  path: "/custom/models/{modelId}",
  httpMethod: "DELETE",
  responses: {
    204: {},
    default: {
      bodyMapper: Mappers.ErrorResponse
    }
  },
  urlParameters: [Parameters.endpoint, Parameters.modelId],
  serializer
};
const analyzeWithCustomModel$binaryOperationSpec: coreHttp.OperationSpec = {
  path: "/custom/models/{modelId}/analyze",
  httpMethod: "POST",
  responses: {
    202: {
      headersMapper: Mappers.GeneratedClientAnalyzeWithCustomModelHeaders
    },
    default: {
      bodyMapper: Mappers.ErrorResponse
    }
  },
  requestBody: Parameters.fileStream,
  queryParameters: [Parameters.includeTextDetails],
  urlParameters: [Parameters.endpoint, Parameters.modelId],
  headerParameters: [Parameters.contentType],
  serializer
};
const analyzeWithCustomModel$jsonOperationSpec: coreHttp.OperationSpec = {
  path: "/custom/models/{modelId}/analyze",
  httpMethod: "POST",
  responses: {
    202: {
      headersMapper: Mappers.GeneratedClientAnalyzeWithCustomModelHeaders
    },
    default: {
      bodyMapper: Mappers.ErrorResponse
    }
  },
  requestBody: Parameters.fileStream1,
  queryParameters: [Parameters.includeTextDetails],
  urlParameters: [Parameters.endpoint, Parameters.modelId],
  serializer
};
const getAnalyzeFormResultOperationSpec: coreHttp.OperationSpec = {
  path: "/custom/models/{modelId}/analyzeResults/{resultId}",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.AnalyzeOperationResult
    },
    default: {
      bodyMapper: Mappers.ErrorResponse
    }
  },
  urlParameters: [Parameters.endpoint, Parameters.modelId, Parameters.resultId],
  serializer
};
const analyzeReceiptAsync$binaryOperationSpec: coreHttp.OperationSpec = {
  path: "/prebuilt/receipt/analyze",
  httpMethod: "POST",
  responses: {
    202: {
      headersMapper: Mappers.GeneratedClientAnalyzeReceiptAsyncHeaders
    },
    default: {
      bodyMapper: Mappers.ErrorResponse
    }
  },
  requestBody: Parameters.fileStream,
  queryParameters: [Parameters.includeTextDetails],
  urlParameters: [Parameters.endpoint],
  headerParameters: [Parameters.contentType],
  serializer
};
const analyzeReceiptAsync$jsonOperationSpec: coreHttp.OperationSpec = {
  path: "/prebuilt/receipt/analyze",
  httpMethod: "POST",
  responses: {
    202: {
      headersMapper: Mappers.GeneratedClientAnalyzeReceiptAsyncHeaders
    },
    default: {
      bodyMapper: Mappers.ErrorResponse
    }
  },
  requestBody: Parameters.fileStream1,
  queryParameters: [Parameters.includeTextDetails],
  urlParameters: [Parameters.endpoint],
  serializer
};
const getAnalyzeReceiptResultOperationSpec: coreHttp.OperationSpec = {
  path: "/prebuilt/receipt/analyzeResults/{resultId}",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.AnalyzeOperationResult
    },
    default: {
      bodyMapper: Mappers.ErrorResponse
    }
  },
  urlParameters: [Parameters.endpoint, Parameters.resultId],
  serializer
};
const analyzeLayoutAsync$binaryOperationSpec: coreHttp.OperationSpec = {
  path: "/layout/analyze",
  httpMethod: "POST",
  responses: {
    202: {
      headersMapper: Mappers.GeneratedClientAnalyzeLayoutAsyncHeaders
    },
    default: {
      bodyMapper: Mappers.ErrorResponse
    }
  },
  requestBody: Parameters.fileStream,
  urlParameters: [Parameters.endpoint],
  headerParameters: [Parameters.contentType],
  serializer
};
const analyzeLayoutAsync$jsonOperationSpec: coreHttp.OperationSpec = {
  path: "/layout/analyze",
  httpMethod: "POST",
  responses: {
    202: {
      headersMapper: Mappers.GeneratedClientAnalyzeLayoutAsyncHeaders
    },
    default: {
      bodyMapper: Mappers.ErrorResponse
    }
  },
  requestBody: Parameters.fileStream1,
  urlParameters: [Parameters.endpoint],
  serializer
};
const getAnalyzeLayoutResultOperationSpec: coreHttp.OperationSpec = {
  path: "/layout/analyzeResults/{resultId}",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.AnalyzeOperationResult
    },
    default: {
      bodyMapper: Mappers.ErrorResponse
    }
  },
  urlParameters: [Parameters.endpoint, Parameters.resultId],
  serializer
};
const listCustomModelsOperationSpec: coreHttp.OperationSpec = {
  path: "/custom/models",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.Models
    },
    default: {
      bodyMapper: Mappers.ErrorResponse
    }
  },
  queryParameters: [Parameters.op],
  urlParameters: [Parameters.endpoint],
  serializer
};
const getCustomModelsOperationSpec: coreHttp.OperationSpec = {
  path: "/custom/models",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.Models
    },
    default: {
      bodyMapper: Mappers.ErrorResponse
    }
  },
  queryParameters: [Parameters.op1],
  urlParameters: [Parameters.endpoint],
  serializer
};
const listCustomModelsNextOperationSpec: coreHttp.OperationSpec = {
  path: "{nextLink}",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.Models
    },
    default: {
      bodyMapper: Mappers.ErrorResponse
    }
  },
  queryParameters: [Parameters.op],
  urlParameters: [Parameters.endpoint, Parameters.nextLink],
  serializer
};

// Operation Specifications

export {
  GeneratedClient,
  GeneratedClientContext,
  Models as GeneratedModels,
  Mappers as GeneratedMappers
};
