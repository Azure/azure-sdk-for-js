/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */

import * as coreClient from "@azure/core-client";
import { PagedAsyncIterableIterator } from "@azure/core-paging";
import * as Parameters from "./models/parameters";
import * as Mappers from "./models/mappers";
import { GeneratedClientContext } from "./generatedClientContext";
import {
  GeneratedClientOptionalParams,
  OperationInfo,
  GetOperationsNextOptionalParams,
  GetOperationsOptionalParams,
  ModelSummary,
  GetModelsNextOptionalParams,
  GetModelsOptionalParams,
  ContentType,
  AnalyzeDocument$binaryOptionalParams,
  AnalyzeDocument$jsonOptionalParams,
  AnalyzeDocumentResponse,
  GetAnalyzeDocumentResultOptionalParams,
  GetAnalyzeDocumentResultResponse,
  BuildDocumentModelRequest,
  BuildDocumentModelOptionalParams,
  BuildDocumentModelResponse,
  ComposeDocumentModelRequest,
  ComposeDocumentModelOptionalParams,
  ComposeDocumentModelResponse,
  AuthorizeCopyRequest,
  AuthorizeCopyDocumentModelOptionalParams,
  AuthorizeCopyDocumentModelResponse,
  CopyAuthorization,
  CopyDocumentModelToOptionalParams,
  CopyDocumentModelToResponse,
  GetOperationsOperationResponse,
  GetOperationOptionalParams,
  GetOperationOperationResponse,
  GetModelsOperationResponse,
  GetModelOptionalParams,
  GetModelResponse,
  DeleteModelOptionalParams,
  GetInfoOptionalParams,
  GetInfoOperationResponse,
  GetOperationsNextResponse,
  GetModelsNextResponse
} from "./models";

/// <reference lib="esnext.asynciterable" />
export class GeneratedClient extends GeneratedClientContext {
  /**
   * Initializes a new instance of the GeneratedClient class.
   * @param endpoint Supported Cognitive Services endpoints (protocol and hostname, for
   *                 example: https://westus2.api.cognitive.microsoft.com).
   * @param options The parameter options
   */
  constructor(endpoint: string, options?: GeneratedClientOptionalParams) {
    super(endpoint, options);
  }

  /**
   * Lists all operations.
   * @param options The options parameters.
   */
  public listOperations(
    options?: GetOperationsOptionalParams
  ): PagedAsyncIterableIterator<OperationInfo> {
    const iter = this.getOperationsPagingAll(options);
    return {
      next() {
        return iter.next();
      },
      [Symbol.asyncIterator]() {
        return this;
      },
      byPage: () => {
        return this.getOperationsPagingPage(options);
      }
    };
  }

  private async *getOperationsPagingPage(
    options?: GetOperationsOptionalParams
  ): AsyncIterableIterator<OperationInfo[]> {
    let result = await this._getOperations(options);
    yield result.value || [];
    let continuationToken = result.nextLink;
    while (continuationToken) {
      result = await this._getOperationsNext(continuationToken, options);
      continuationToken = result.nextLink;
      yield result.value || [];
    }
  }

  private async *getOperationsPagingAll(
    options?: GetOperationsOptionalParams
  ): AsyncIterableIterator<OperationInfo> {
    for await (const page of this.getOperationsPagingPage(options)) {
      yield* page;
    }
  }

  /**
   * List all models
   * @param options The options parameters.
   */
  public listModels(
    options?: GetModelsOptionalParams
  ): PagedAsyncIterableIterator<ModelSummary> {
    const iter = this.getModelsPagingAll(options);
    return {
      next() {
        return iter.next();
      },
      [Symbol.asyncIterator]() {
        return this;
      },
      byPage: () => {
        return this.getModelsPagingPage(options);
      }
    };
  }

  private async *getModelsPagingPage(
    options?: GetModelsOptionalParams
  ): AsyncIterableIterator<ModelSummary[]> {
    let result = await this._getModels(options);
    yield result.value || [];
    let continuationToken = result.nextLink;
    while (continuationToken) {
      result = await this._getModelsNext(continuationToken, options);
      continuationToken = result.nextLink;
      yield result.value || [];
    }
  }

  private async *getModelsPagingAll(
    options?: GetModelsOptionalParams
  ): AsyncIterableIterator<ModelSummary> {
    for await (const page of this.getModelsPagingPage(options)) {
      yield* page;
    }
  }

  /**
   * Analyzes document with model.
   * @param modelId Unique model name.
   * @param contentType Upload file type
   * @param options The options parameters.
   */
  analyzeDocument(
    modelId: string,
    contentType: ContentType,
    options?: AnalyzeDocument$binaryOptionalParams
  ): Promise<AnalyzeDocumentResponse>;
  /**
   * Analyzes document with model.
   * @param modelId Unique model name.
   * @param contentType Body Parameter content-type
   * @param options The options parameters.
   */
  analyzeDocument(
    modelId: string,
    contentType: "application/json",
    options?: AnalyzeDocument$jsonOptionalParams
  ): Promise<AnalyzeDocumentResponse>;
  /**
   * Analyzes document with model.
   * @param args Includes all the parameters for this operation.
   */
  analyzeDocument(
    ...args:
      | [string, ContentType, AnalyzeDocument$binaryOptionalParams?]
      | [string, "application/json", AnalyzeDocument$jsonOptionalParams?]
  ): Promise<AnalyzeDocumentResponse> {
    let operationSpec: coreClient.OperationSpec;
    let operationArguments: coreClient.OperationArguments;
    let options;
    if (
      args[1] === "application/octet-stream" ||
      args[1] === "application/pdf" ||
      args[1] === "image/bmp" ||
      args[1] === "image/jpeg" ||
      args[1] === "image/png" ||
      args[1] === "image/tiff"
    ) {
      operationSpec = analyzeDocument$binaryOperationSpec;
      operationArguments = {
        modelId: args[0],
        contentType: args[1],
        options: args[2]
      };
      options = args[2];
    } else if (args[1] === "application/json") {
      operationSpec = analyzeDocument$jsonOperationSpec;
      operationArguments = {
        modelId: args[0],
        contentType: args[1],
        options: args[2]
      };
      options = args[2];
    } else {
      throw new TypeError(
        `"contentType" must be a valid value but instead was "${args[1]}".`
      );
    }
    operationArguments.options = options || {};
    return this.sendOperationRequest(operationArguments, operationSpec);
  }

  /**
   * Gets the result of document analysis.
   * @param modelId Unique model name.
   * @param resultId Analyze operation result ID.
   * @param options The options parameters.
   */
  getAnalyzeDocumentResult(
    modelId: string,
    resultId: string,
    options?: GetAnalyzeDocumentResultOptionalParams
  ): Promise<GetAnalyzeDocumentResultResponse> {
    return this.sendOperationRequest(
      { modelId, resultId, options },
      getAnalyzeDocumentResultOperationSpec
    );
  }

  /**
   * Builds a custom document analysis model.
   * @param buildRequest Building request parameters.
   * @param options The options parameters.
   */
  buildDocumentModel(
    buildRequest: BuildDocumentModelRequest,
    options?: BuildDocumentModelOptionalParams
  ): Promise<BuildDocumentModelResponse> {
    return this.sendOperationRequest(
      { buildRequest, options },
      buildDocumentModelOperationSpec
    );
  }

  /**
   * Creates a new model from document types of existing models.
   * @param composeRequest Compose request parameters.
   * @param options The options parameters.
   */
  composeDocumentModel(
    composeRequest: ComposeDocumentModelRequest,
    options?: ComposeDocumentModelOptionalParams
  ): Promise<ComposeDocumentModelResponse> {
    return this.sendOperationRequest(
      { composeRequest, options },
      composeDocumentModelOperationSpec
    );
  }

  /**
   * Generates authorization to copy a model to this location with specified modelId and optional
   * description.
   * @param authorizeCopyRequest Authorize copy request parameters.
   * @param options The options parameters.
   */
  authorizeCopyDocumentModel(
    authorizeCopyRequest: AuthorizeCopyRequest,
    options?: AuthorizeCopyDocumentModelOptionalParams
  ): Promise<AuthorizeCopyDocumentModelResponse> {
    return this.sendOperationRequest(
      { authorizeCopyRequest, options },
      authorizeCopyDocumentModelOperationSpec
    );
  }

  /**
   * Copies model to the target resource, region, and modelId.
   * @param modelId Unique model name.
   * @param copyToRequest Copy to request parameters.
   * @param options The options parameters.
   */
  copyDocumentModelTo(
    modelId: string,
    copyToRequest: CopyAuthorization,
    options?: CopyDocumentModelToOptionalParams
  ): Promise<CopyDocumentModelToResponse> {
    return this.sendOperationRequest(
      { modelId, copyToRequest, options },
      copyDocumentModelToOperationSpec
    );
  }

  /**
   * Lists all operations.
   * @param options The options parameters.
   */
  private _getOperations(
    options?: GetOperationsOptionalParams
  ): Promise<GetOperationsOperationResponse> {
    return this.sendOperationRequest({ options }, getOperationsOperationSpec);
  }

  /**
   * Gets operation info.
   * @param operationId Unique operation ID.
   * @param options The options parameters.
   */
  getOperation(
    operationId: string,
    options?: GetOperationOptionalParams
  ): Promise<GetOperationOperationResponse> {
    return this.sendOperationRequest(
      { operationId, options },
      getOperationOperationSpec
    );
  }

  /**
   * List all models
   * @param options The options parameters.
   */
  private _getModels(
    options?: GetModelsOptionalParams
  ): Promise<GetModelsOperationResponse> {
    return this.sendOperationRequest({ options }, getModelsOperationSpec);
  }

  /**
   * Gets detailed model information.
   * @param modelId Unique model name.
   * @param options The options parameters.
   */
  getModel(
    modelId: string,
    options?: GetModelOptionalParams
  ): Promise<GetModelResponse> {
    return this.sendOperationRequest(
      { modelId, options },
      getModelOperationSpec
    );
  }

  /**
   * Deletes model.
   * @param modelId Unique model name.
   * @param options The options parameters.
   */
  deleteModel(
    modelId: string,
    options?: DeleteModelOptionalParams
  ): Promise<void> {
    return this.sendOperationRequest(
      { modelId, options },
      deleteModelOperationSpec
    );
  }

  /**
   * Return basic info about the current resource.
   * @param options The options parameters.
   */
  getInfo(options?: GetInfoOptionalParams): Promise<GetInfoOperationResponse> {
    return this.sendOperationRequest({ options }, getInfoOperationSpec);
  }

  /**
   * GetOperationsNext
   * @param nextLink The nextLink from the previous successful call to the GetOperations method.
   * @param options The options parameters.
   */
  private _getOperationsNext(
    nextLink: string,
    options?: GetOperationsNextOptionalParams
  ): Promise<GetOperationsNextResponse> {
    return this.sendOperationRequest(
      { nextLink, options },
      getOperationsNextOperationSpec
    );
  }

  /**
   * GetModelsNext
   * @param nextLink The nextLink from the previous successful call to the GetModels method.
   * @param options The options parameters.
   */
  private _getModelsNext(
    nextLink: string,
    options?: GetModelsNextOptionalParams
  ): Promise<GetModelsNextResponse> {
    return this.sendOperationRequest(
      { nextLink, options },
      getModelsNextOperationSpec
    );
  }
}
// Operation Specifications
const serializer = coreClient.createSerializer(Mappers, /* isXml */ false);

const analyzeDocument$binaryOperationSpec: coreClient.OperationSpec = {
  path: "/documentModels/{modelId}:analyze",
  httpMethod: "POST",
  responses: {
    202: {
      headersMapper: Mappers.GeneratedClientAnalyzeDocumentHeaders
    },
    default: {
      bodyMapper: Mappers.ErrorResponse
    }
  },
  requestBody: Parameters.analyzeRequest,
  queryParameters: [
    Parameters.pages,
    Parameters.locale,
    Parameters.stringIndexType,
    Parameters.apiVersion
  ],
  urlParameters: [Parameters.endpoint, Parameters.modelId],
  headerParameters: [Parameters.contentType, Parameters.accept],
  mediaType: "binary",
  serializer
};
const analyzeDocument$jsonOperationSpec: coreClient.OperationSpec = {
  path: "/documentModels/{modelId}:analyze",
  httpMethod: "POST",
  responses: {
    202: {
      headersMapper: Mappers.GeneratedClientAnalyzeDocumentHeaders
    },
    default: {
      bodyMapper: Mappers.ErrorResponse
    }
  },
  requestBody: Parameters.analyzeRequest1,
  queryParameters: [
    Parameters.pages,
    Parameters.locale,
    Parameters.stringIndexType,
    Parameters.apiVersion
  ],
  urlParameters: [Parameters.endpoint, Parameters.modelId],
  headerParameters: [Parameters.contentType1, Parameters.accept1],
  mediaType: "json",
  serializer
};
const getAnalyzeDocumentResultOperationSpec: coreClient.OperationSpec = {
  path: "/documentModels/{modelId}/analyzeResults/{resultId}",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.AnalyzeResultOperation
    },
    default: {
      bodyMapper: Mappers.ErrorResponse
    }
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [Parameters.endpoint, Parameters.modelId, Parameters.resultId],
  headerParameters: [Parameters.accept1],
  serializer
};
const buildDocumentModelOperationSpec: coreClient.OperationSpec = {
  path: "/documentModels:build",
  httpMethod: "POST",
  responses: {
    202: {
      headersMapper: Mappers.GeneratedClientBuildDocumentModelHeaders
    },
    default: {
      bodyMapper: Mappers.ErrorResponse
    }
  },
  requestBody: Parameters.buildRequest,
  queryParameters: [Parameters.apiVersion],
  urlParameters: [Parameters.endpoint],
  headerParameters: [Parameters.accept1, Parameters.contentType2],
  mediaType: "json",
  serializer
};
const composeDocumentModelOperationSpec: coreClient.OperationSpec = {
  path: "/documentModels:compose",
  httpMethod: "POST",
  responses: {
    202: {
      headersMapper: Mappers.GeneratedClientComposeDocumentModelHeaders
    },
    default: {
      bodyMapper: Mappers.ErrorResponse
    }
  },
  requestBody: Parameters.composeRequest,
  queryParameters: [Parameters.apiVersion],
  urlParameters: [Parameters.endpoint],
  headerParameters: [Parameters.accept1, Parameters.contentType2],
  mediaType: "json",
  serializer
};
const authorizeCopyDocumentModelOperationSpec: coreClient.OperationSpec = {
  path: "/documentModels:authorizeCopy",
  httpMethod: "POST",
  responses: {
    200: {
      bodyMapper: Mappers.CopyAuthorization
    },
    default: {
      bodyMapper: Mappers.ErrorResponse
    }
  },
  requestBody: Parameters.authorizeCopyRequest,
  queryParameters: [Parameters.apiVersion],
  urlParameters: [Parameters.endpoint],
  headerParameters: [Parameters.accept1, Parameters.contentType2],
  mediaType: "json",
  serializer
};
const copyDocumentModelToOperationSpec: coreClient.OperationSpec = {
  path: "/documentModels/{modelId}:copyTo",
  httpMethod: "POST",
  responses: {
    202: {
      headersMapper: Mappers.GeneratedClientCopyDocumentModelToHeaders
    },
    default: {
      bodyMapper: Mappers.ErrorResponse
    }
  },
  requestBody: Parameters.copyToRequest,
  queryParameters: [Parameters.apiVersion],
  urlParameters: [Parameters.endpoint, Parameters.modelId],
  headerParameters: [Parameters.accept1, Parameters.contentType2],
  mediaType: "json",
  serializer
};
const getOperationsOperationSpec: coreClient.OperationSpec = {
  path: "/operations",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.GetOperationsResponse
    },
    default: {
      bodyMapper: Mappers.ErrorResponse
    }
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [Parameters.endpoint],
  headerParameters: [Parameters.accept1],
  serializer
};
const getOperationOperationSpec: coreClient.OperationSpec = {
  path: "/operations/{operationId}",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.GetOperationResponse
    },
    default: {
      bodyMapper: Mappers.ErrorResponse
    }
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [Parameters.endpoint, Parameters.operationId],
  headerParameters: [Parameters.accept1],
  serializer
};
const getModelsOperationSpec: coreClient.OperationSpec = {
  path: "/documentModels",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.GetModelsResponse
    },
    default: {
      bodyMapper: Mappers.ErrorResponse
    }
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [Parameters.endpoint],
  headerParameters: [Parameters.accept1],
  serializer
};
const getModelOperationSpec: coreClient.OperationSpec = {
  path: "/documentModels/{modelId}",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.ModelInfo
    },
    default: {
      bodyMapper: Mappers.ErrorResponse
    }
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [Parameters.endpoint, Parameters.modelId],
  headerParameters: [Parameters.accept1],
  serializer
};
const deleteModelOperationSpec: coreClient.OperationSpec = {
  path: "/documentModels/{modelId}",
  httpMethod: "DELETE",
  responses: {
    204: {},
    default: {
      bodyMapper: Mappers.ErrorResponse
    }
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [Parameters.endpoint, Parameters.modelId],
  headerParameters: [Parameters.accept1],
  serializer
};
const getInfoOperationSpec: coreClient.OperationSpec = {
  path: "/info",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.GetInfoResponse
    },
    default: {
      bodyMapper: Mappers.ErrorResponse
    }
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [Parameters.endpoint],
  headerParameters: [Parameters.accept1],
  serializer
};
const getOperationsNextOperationSpec: coreClient.OperationSpec = {
  path: "{nextLink}",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.GetOperationsResponse
    },
    default: {
      bodyMapper: Mappers.ErrorResponse
    }
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [Parameters.endpoint, Parameters.nextLink],
  headerParameters: [Parameters.accept1],
  serializer
};
const getModelsNextOperationSpec: coreClient.OperationSpec = {
  path: "{nextLink}",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.GetModelsResponse
    },
    default: {
      bodyMapper: Mappers.ErrorResponse
    }
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [Parameters.endpoint, Parameters.nextLink],
  headerParameters: [Parameters.accept1],
  serializer
};
