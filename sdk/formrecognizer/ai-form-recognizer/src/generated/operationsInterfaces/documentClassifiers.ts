/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */

import { PagedAsyncIterableIterator } from "@azure/core-paging";
import {
  DocumentClassifierDetails,
  DocumentClassifiersListClassifiersOptionalParams,
  BuildDocumentClassifierRequest,
  DocumentClassifiersBuildClassifierOptionalParams,
  DocumentClassifiersBuildClassifierResponse,
  DocumentClassifiersGetClassifierOptionalParams,
  DocumentClassifiersGetClassifierResponse,
  DocumentClassifiersDeleteClassifierOptionalParams,
  ContentType,
  DocumentClassifiersClassifyDocument$binaryOptionalParams,
  DocumentClassifiersClassifyDocument$textOptionalParams,
  DocumentClassifiersClassifyDocument$jsonOptionalParams,
  DocumentClassifiersClassifyDocumentResponse,
  DocumentClassifiersGetClassifyResultOptionalParams,
  DocumentClassifiersGetClassifyResultResponse
} from "../models";

/// <reference lib="esnext.asynciterable" />
/** Interface representing a DocumentClassifiers. */
export interface DocumentClassifiers {
  /**
   * List all document classifiers.
   * @param options The options parameters.
   */
  listClassifiers(
    options?: DocumentClassifiersListClassifiersOptionalParams
  ): PagedAsyncIterableIterator<DocumentClassifierDetails>;
  /**
   * Builds a custom document classifier.
   * @param buildRequest Building request parameters.
   * @param options The options parameters.
   */
  buildClassifier(
    buildRequest: BuildDocumentClassifierRequest,
    options?: DocumentClassifiersBuildClassifierOptionalParams
  ): Promise<DocumentClassifiersBuildClassifierResponse>;
  /**
   * Gets detailed document classifier information.
   * @param classifierId Unique document classifier name.
   * @param options The options parameters.
   */
  getClassifier(
    classifierId: string,
    options?: DocumentClassifiersGetClassifierOptionalParams
  ): Promise<DocumentClassifiersGetClassifierResponse>;
  /**
   * Deletes document classifier.
   * @param classifierId Unique document classifier name.
   * @param options The options parameters.
   */
  deleteClassifier(
    classifierId: string,
    options?: DocumentClassifiersDeleteClassifierOptionalParams
  ): Promise<void>;
  /**
   * Classifies document with document classifier.
   * @param args Includes all the parameters for this operation.
   */
  classifyDocument(
    ...args:
      | [
          string,
          ContentType,
          DocumentClassifiersClassifyDocument$binaryOptionalParams?
        ]
      | [
          string,
          "text/html",
          DocumentClassifiersClassifyDocument$textOptionalParams?
        ]
      | [
          string,
          "application/json",
          DocumentClassifiersClassifyDocument$jsonOptionalParams?
        ]
  ): Promise<DocumentClassifiersClassifyDocumentResponse>;
  /**
   * Gets the result of document classifier.
   * @param classifierId Unique document classifier name.
   * @param resultId Analyze operation result ID.
   * @param options The options parameters.
   */
  getClassifyResult(
    classifierId: string,
    resultId: string,
    options?: DocumentClassifiersGetClassifyResultOptionalParams
  ): Promise<DocumentClassifiersGetClassifyResultResponse>;
}
