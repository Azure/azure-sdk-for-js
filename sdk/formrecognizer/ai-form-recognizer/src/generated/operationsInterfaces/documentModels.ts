/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */

import { PagedAsyncIterableIterator } from "@azure/core-paging";
import {
  DocumentModelSummary,
  DocumentModelsListModelsOptionalParams,
  ContentType,
  DocumentModelsAnalyzeDocument$binaryOptionalParams,
  DocumentModelsAnalyzeDocument$textOptionalParams,
  DocumentModelsAnalyzeDocument$jsonOptionalParams,
  DocumentModelsAnalyzeDocumentResponse,
  DocumentModelsGetAnalyzeResultOptionalParams,
  DocumentModelsGetAnalyzeResultResponse,
  BuildDocumentModelRequest,
  DocumentModelsBuildModelOptionalParams,
  DocumentModelsBuildModelResponse,
  ComposeDocumentModelRequest,
  DocumentModelsComposeModelOptionalParams,
  DocumentModelsComposeModelResponse,
  AuthorizeCopyRequest,
  DocumentModelsAuthorizeModelCopyOptionalParams,
  DocumentModelsAuthorizeModelCopyResponse,
  CopyAuthorization,
  DocumentModelsCopyModelToOptionalParams,
  DocumentModelsCopyModelToResponse,
  DocumentModelsGetModelOptionalParams,
  DocumentModelsGetModelResponse,
  DocumentModelsDeleteModelOptionalParams
} from "../models";

/// <reference lib="esnext.asynciterable" />
/** Interface representing a DocumentModels. */
export interface DocumentModels {
  /**
   * List all document models
   * @param options The options parameters.
   */
  listModels(
    options?: DocumentModelsListModelsOptionalParams
  ): PagedAsyncIterableIterator<DocumentModelSummary>;
  /**
   * Analyzes document with document model.
   * @param args Includes all the parameters for this operation.
   */
  analyzeDocument(
    ...args:
      | [
          string,
          ContentType,
          DocumentModelsAnalyzeDocument$binaryOptionalParams?
        ]
      | [string, "text/html", DocumentModelsAnalyzeDocument$textOptionalParams?]
      | [
          string,
          "application/json",
          DocumentModelsAnalyzeDocument$jsonOptionalParams?
        ]
  ): Promise<DocumentModelsAnalyzeDocumentResponse>;
  /**
   * Gets the result of document analysis.
   * @param modelId Unique document model name.
   * @param resultId Analyze operation result ID.
   * @param options The options parameters.
   */
  getAnalyzeResult(
    modelId: string,
    resultId: string,
    options?: DocumentModelsGetAnalyzeResultOptionalParams
  ): Promise<DocumentModelsGetAnalyzeResultResponse>;
  /**
   * Builds a custom document analysis model.
   * @param buildRequest Building request parameters.
   * @param options The options parameters.
   */
  buildModel(
    buildRequest: BuildDocumentModelRequest,
    options?: DocumentModelsBuildModelOptionalParams
  ): Promise<DocumentModelsBuildModelResponse>;
  /**
   * Creates a new document model from document types of existing document models.
   * @param composeRequest Compose request parameters.
   * @param options The options parameters.
   */
  composeModel(
    composeRequest: ComposeDocumentModelRequest,
    options?: DocumentModelsComposeModelOptionalParams
  ): Promise<DocumentModelsComposeModelResponse>;
  /**
   * Generates authorization to copy a document model to this location with specified modelId and
   * optional description.
   * @param authorizeCopyRequest Authorize copy request parameters.
   * @param options The options parameters.
   */
  authorizeModelCopy(
    authorizeCopyRequest: AuthorizeCopyRequest,
    options?: DocumentModelsAuthorizeModelCopyOptionalParams
  ): Promise<DocumentModelsAuthorizeModelCopyResponse>;
  /**
   * Copies document model to the target resource, region, and modelId.
   * @param modelId Unique document model name.
   * @param copyToRequest Copy to request parameters.
   * @param options The options parameters.
   */
  copyModelTo(
    modelId: string,
    copyToRequest: CopyAuthorization,
    options?: DocumentModelsCopyModelToOptionalParams
  ): Promise<DocumentModelsCopyModelToResponse>;
  /**
   * Gets detailed document model information.
   * @param modelId Unique document model name.
   * @param options The options parameters.
   */
  getModel(
    modelId: string,
    options?: DocumentModelsGetModelOptionalParams
  ): Promise<DocumentModelsGetModelResponse>;
  /**
   * Deletes document model.
   * @param modelId Unique document model name.
   * @param options The options parameters.
   */
  deleteModel(
    modelId: string,
    options?: DocumentModelsDeleteModelOptionalParams
  ): Promise<void>;
}
