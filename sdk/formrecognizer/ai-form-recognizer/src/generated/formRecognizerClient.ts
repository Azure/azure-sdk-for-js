/*
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is
 * regenerated.
 */

import * as coreHttp from "@azure/core-http";
import * as Models from "./models";
import * as Mappers from "./models/mappers";
import * as Parameters from "./models/parameters";
import { FormRecognizerClientContext } from "./formRecognizerClientContext";

class FormRecognizerClient extends FormRecognizerClientContext {
  /**
   * Initializes a new instance of the FormRecognizerClient class.
   * @param endpoint Supported Cognitive Services endpoints (protocol and hostname, for example:
   * https://westus2.api.cognitive.microsoft.com).
   * @param credentials Subscription credentials which uniquely identify client subscription.
   * @param [options] The parameter options
   */
  constructor(credentials: coreHttp.TokenCredential | coreHttp.ServiceClientCredentials, endpoint: string, options?: coreHttp.ServiceClientOptions) {
    super(credentials, endpoint, options);
  }

  /**
   * Create and train a custom model. The request must include a source parameter that is either an
   * externally accessible Azure storage blob container Uri (preferably a Shared Access Signature
   * Uri) or valid path to a data folder in a locally mounted drive. When local paths are specified,
   * they must follow the Linux/Unix path format and be an absolute path rooted to the input mount
   * configuration setting value e.g., if '{Mounts:Input}' configuration setting value is '/input'
   * then a valid source path would be '/input/contosodataset'. All data to be trained is expected to
   * be under the source folder or sub folders under it. Models are trained using documents that are
   * of the following content type - 'application/pdf', 'image/jpeg', 'image/png', 'image/tiff'.
   * Other type of content is ignored.
   * @summary Train Custom Model
   * @param trainRequest Training request parameters.
   * @param [options] The optional parameters
   * @returns Promise<Models.TrainCustomModelAsyncResponse>
   */
  trainCustomModelAsync(trainRequest: Models.TrainRequest, options?: coreHttp.RequestOptionsBase): Promise<Models.TrainCustomModelAsyncResponse>;
  /**
   * @param trainRequest Training request parameters.
   * @param callback The callback
   */
  trainCustomModelAsync(trainRequest: Models.TrainRequest, callback: coreHttp.ServiceCallback<void>): void;
  /**
   * @param trainRequest Training request parameters.
   * @param options The optional parameters
   * @param callback The callback
   */
  trainCustomModelAsync(trainRequest: Models.TrainRequest, options: coreHttp.RequestOptionsBase, callback: coreHttp.ServiceCallback<void>): void;
  trainCustomModelAsync(trainRequest: Models.TrainRequest, options?: coreHttp.RequestOptionsBase | coreHttp.ServiceCallback<void>, callback?: coreHttp.ServiceCallback<void>): Promise<Models.TrainCustomModelAsyncResponse> {
    return this.sendOperationRequest(
      {
        trainRequest,
        options
      },
      trainCustomModelAsyncOperationSpec,
      callback) as Promise<Models.TrainCustomModelAsyncResponse>;
  }

  /**
   * Get information about all custom models
   * @summary List Custom Models
   * @param [options] The optional parameters
   * @returns Promise<Models.GetCustomModelsResponse>
   */
  getCustomModels(options?: Models.FormRecognizerClientGetCustomModelsOptionalParams): Promise<Models.GetCustomModelsResponse>;
  /**
   * @param callback The callback
   */
  getCustomModels(callback: coreHttp.ServiceCallback<Models.ModelsModel>): void;
  /**
   * @param options The optional parameters
   * @param callback The callback
   */
  getCustomModels(options: Models.FormRecognizerClientGetCustomModelsOptionalParams, callback: coreHttp.ServiceCallback<Models.ModelsModel>): void;
  getCustomModels(options?: Models.FormRecognizerClientGetCustomModelsOptionalParams | coreHttp.ServiceCallback<Models.ModelsModel>, callback?: coreHttp.ServiceCallback<Models.ModelsModel>): Promise<Models.GetCustomModelsResponse> {
    return this.sendOperationRequest(
      {
        options
      },
      getCustomModelsOperationSpec,
      callback) as Promise<Models.GetCustomModelsResponse>;
  }

  /**
   * Get detailed information about a custom model.
   * @summary Get Custom Model
   * @param modelId Model identifier.
   * @param [options] The optional parameters
   * @returns Promise<Models.GetCustomModelResponse>
   */
  getCustomModel(modelId: string, options?: Models.FormRecognizerClientGetCustomModelOptionalParams): Promise<Models.GetCustomModelResponse>;
  /**
   * @param modelId Model identifier.
   * @param callback The callback
   */
  getCustomModel(modelId: string, callback: coreHttp.ServiceCallback<Models.Model>): void;
  /**
   * @param modelId Model identifier.
   * @param options The optional parameters
   * @param callback The callback
   */
  getCustomModel(modelId: string, options: Models.FormRecognizerClientGetCustomModelOptionalParams, callback: coreHttp.ServiceCallback<Models.Model>): void;
  getCustomModel(modelId: string, options?: Models.FormRecognizerClientGetCustomModelOptionalParams | coreHttp.ServiceCallback<Models.Model>, callback?: coreHttp.ServiceCallback<Models.Model>): Promise<Models.GetCustomModelResponse> {
    return this.sendOperationRequest(
      {
        modelId,
        options
      },
      getCustomModelOperationSpec,
      callback) as Promise<Models.GetCustomModelResponse>;
  }

  /**
   * Mark model for deletion. Model artifacts will be permanently removed within a predetermined
   * period.
   * @summary Delete Custom Model
   * @param modelId Model identifier.
   * @param [options] The optional parameters
   * @returns Promise<coreHttp.RestResponse>
   */
  deleteCustomModel(modelId: string, options?: coreHttp.RequestOptionsBase): Promise<coreHttp.RestResponse>;
  /**
   * @param modelId Model identifier.
   * @param callback The callback
   */
  deleteCustomModel(modelId: string, callback: coreHttp.ServiceCallback<void>): void;
  /**
   * @param modelId Model identifier.
   * @param options The optional parameters
   * @param callback The callback
   */
  deleteCustomModel(modelId: string, options: coreHttp.RequestOptionsBase, callback: coreHttp.ServiceCallback<void>): void;
  deleteCustomModel(modelId: string, options?: coreHttp.RequestOptionsBase | coreHttp.ServiceCallback<void>, callback?: coreHttp.ServiceCallback<void>): Promise<coreHttp.RestResponse> {
    return this.sendOperationRequest(
      {
        modelId,
        options
      },
      deleteCustomModelOperationSpec,
      callback);
  }

  /**
   * Extract key-value pairs, tables, and semantic values from a given document. The input document
   * must be of one of the supported content types - 'application/pdf', 'image/jpeg', 'image/png' or
   * 'image/tiff'. Alternatively, use 'application/json' type to specify the location (Uri or local
   * path) of the document to be analyzed.
   * @summary Analyze Form
   * @param modelId Model identifier.
   * @param [options] The optional parameters
   * @returns Promise<Models.AnalyzeWithCustomModelResponse>
   */
  analyzeWithCustomModel(modelId: string, options?: Models.FormRecognizerClientAnalyzeWithCustomModelOptionalParams): Promise<Models.AnalyzeWithCustomModelResponse>;
  /**
   * @param modelId Model identifier.
   * @param callback The callback
   */
  analyzeWithCustomModel(modelId: string, callback: coreHttp.ServiceCallback<void>): void;
  /**
   * @param modelId Model identifier.
   * @param options The optional parameters
   * @param callback The callback
   */
  analyzeWithCustomModel(modelId: string, options: Models.FormRecognizerClientAnalyzeWithCustomModelOptionalParams, callback: coreHttp.ServiceCallback<void>): void;
  analyzeWithCustomModel(modelId: string, options?: Models.FormRecognizerClientAnalyzeWithCustomModelOptionalParams | coreHttp.ServiceCallback<void>, callback?: coreHttp.ServiceCallback<void>): Promise<Models.AnalyzeWithCustomModelResponse> {
    return this.sendOperationRequest(
      {
        modelId,
        options
      },
      analyzeWithCustomModelOperationSpec,
      callback) as Promise<Models.AnalyzeWithCustomModelResponse>;
  }

  /**
   * Obtain current status and the result of the analyze form operation.
   * @summary Get Analyze Form Result
   * @param modelId Model identifier.
   * @param resultId Analyze operation result identifier.
   * @param [options] The optional parameters
   * @returns Promise<Models.GetAnalyzeFormResultResponse>
   */
  getAnalyzeFormResult(modelId: string, resultId: string, options?: coreHttp.RequestOptionsBase): Promise<Models.GetAnalyzeFormResultResponse>;
  /**
   * @param modelId Model identifier.
   * @param resultId Analyze operation result identifier.
   * @param callback The callback
   */
  getAnalyzeFormResult(modelId: string, resultId: string, callback: coreHttp.ServiceCallback<Models.AnalyzeOperationResult>): void;
  /**
   * @param modelId Model identifier.
   * @param resultId Analyze operation result identifier.
   * @param options The optional parameters
   * @param callback The callback
   */
  getAnalyzeFormResult(modelId: string, resultId: string, options: coreHttp.RequestOptionsBase, callback: coreHttp.ServiceCallback<Models.AnalyzeOperationResult>): void;
  getAnalyzeFormResult(modelId: string, resultId: string, options?: coreHttp.RequestOptionsBase | coreHttp.ServiceCallback<Models.AnalyzeOperationResult>, callback?: coreHttp.ServiceCallback<Models.AnalyzeOperationResult>): Promise<Models.GetAnalyzeFormResultResponse> {
    return this.sendOperationRequest(
      {
        modelId,
        resultId,
        options
      },
      getAnalyzeFormResultOperationSpec,
      callback) as Promise<Models.GetAnalyzeFormResultResponse>;
  }

  /**
   * Extract field text and semantic values from a given receipt document. The input document must be
   * of one of the supported content types - 'application/pdf', 'image/jpeg', 'image/png' or
   * 'image/tiff'. Alternatively, use 'application/json' type to specify the location (Uri or local
   * path) of the document to be analyzed.
   * @summary Analyze Receipt
   * @param [options] The optional parameters
   * @returns Promise<Models.AnalyzeReceiptAsyncResponse>
   */
  analyzeReceiptAsync(options?: Models.FormRecognizerClientAnalyzeReceiptAsyncOptionalParams): Promise<Models.AnalyzeReceiptAsyncResponse>;
  /**
   * @param callback The callback
   */
  analyzeReceiptAsync(callback: coreHttp.ServiceCallback<void>): void;
  /**
   * @param options The optional parameters
   * @param callback The callback
   */
  analyzeReceiptAsync(options: Models.FormRecognizerClientAnalyzeReceiptAsyncOptionalParams, callback: coreHttp.ServiceCallback<void>): void;
  analyzeReceiptAsync(options?: Models.FormRecognizerClientAnalyzeReceiptAsyncOptionalParams | coreHttp.ServiceCallback<void>, callback?: coreHttp.ServiceCallback<void>): Promise<Models.AnalyzeReceiptAsyncResponse> {
    return this.sendOperationRequest(
      {
        options
      },
      analyzeReceiptAsyncOperationSpec,
      callback) as Promise<Models.AnalyzeReceiptAsyncResponse>;
  }

  /**
   * Track the progress and obtain the result of the analyze receipt operation.
   * @summary Get Analyze Receipt Result
   * @param resultId Analyze operation result identifier.
   * @param [options] The optional parameters
   * @returns Promise<Models.GetAnalyzeReceiptResultResponse>
   */
  getAnalyzeReceiptResult(resultId: string, options?: coreHttp.RequestOptionsBase): Promise<Models.GetAnalyzeReceiptResultResponse>;
  /**
   * @param resultId Analyze operation result identifier.
   * @param callback The callback
   */
  getAnalyzeReceiptResult(resultId: string, callback: coreHttp.ServiceCallback<Models.AnalyzeOperationResult>): void;
  /**
   * @param resultId Analyze operation result identifier.
   * @param options The optional parameters
   * @param callback The callback
   */
  getAnalyzeReceiptResult(resultId: string, options: coreHttp.RequestOptionsBase, callback: coreHttp.ServiceCallback<Models.AnalyzeOperationResult>): void;
  getAnalyzeReceiptResult(resultId: string, options?: coreHttp.RequestOptionsBase | coreHttp.ServiceCallback<Models.AnalyzeOperationResult>, callback?: coreHttp.ServiceCallback<Models.AnalyzeOperationResult>): Promise<Models.GetAnalyzeReceiptResultResponse> {
    return this.sendOperationRequest(
      {
        resultId,
        options
      },
      getAnalyzeReceiptResultOperationSpec,
      callback) as Promise<Models.GetAnalyzeReceiptResultResponse>;
  }

  /**
   * Extract text and layout information from a given document. The input document must be of one of
   * the supported content types - 'application/pdf', 'image/jpeg', 'image/png' or 'image/tiff'.
   * Alternatively, use 'application/json' type to specify the location (Uri or local path) of the
   * document to be analyzed.
   * @summary Analyze Layout
   * @param [options] The optional parameters
   * @returns Promise<Models.AnalyzeLayoutAsyncResponse>
   */
  analyzeLayoutAsync(options?: Models.FormRecognizerClientAnalyzeLayoutAsyncOptionalParams): Promise<Models.AnalyzeLayoutAsyncResponse>;
  /**
   * @param callback The callback
   */
  analyzeLayoutAsync(callback: coreHttp.ServiceCallback<void>): void;
  /**
   * @param options The optional parameters
   * @param callback The callback
   */
  analyzeLayoutAsync(options: Models.FormRecognizerClientAnalyzeLayoutAsyncOptionalParams, callback: coreHttp.ServiceCallback<void>): void;
  analyzeLayoutAsync(options?: Models.FormRecognizerClientAnalyzeLayoutAsyncOptionalParams | coreHttp.ServiceCallback<void>, callback?: coreHttp.ServiceCallback<void>): Promise<Models.AnalyzeLayoutAsyncResponse> {
    return this.sendOperationRequest(
      {
        options
      },
      analyzeLayoutAsyncOperationSpec,
      callback) as Promise<Models.AnalyzeLayoutAsyncResponse>;
  }

  /**
   * Track the progress and obtain the result of the analyze layout operation
   * @summary Get Analyze Layout Result
   * @param resultId Analyze operation result identifier.
   * @param [options] The optional parameters
   * @returns Promise<Models.GetAnalyzeLayoutResultResponse>
   */
  getAnalyzeLayoutResult(resultId: string, options?: coreHttp.RequestOptionsBase): Promise<Models.GetAnalyzeLayoutResultResponse>;
  /**
   * @param resultId Analyze operation result identifier.
   * @param callback The callback
   */
  getAnalyzeLayoutResult(resultId: string, callback: coreHttp.ServiceCallback<Models.AnalyzeOperationResult>): void;
  /**
   * @param resultId Analyze operation result identifier.
   * @param options The optional parameters
   * @param callback The callback
   */
  getAnalyzeLayoutResult(resultId: string, options: coreHttp.RequestOptionsBase, callback: coreHttp.ServiceCallback<Models.AnalyzeOperationResult>): void;
  getAnalyzeLayoutResult(resultId: string, options?: coreHttp.RequestOptionsBase | coreHttp.ServiceCallback<Models.AnalyzeOperationResult>, callback?: coreHttp.ServiceCallback<Models.AnalyzeOperationResult>): Promise<Models.GetAnalyzeLayoutResultResponse> {
    return this.sendOperationRequest(
      {
        resultId,
        options
      },
      getAnalyzeLayoutResultOperationSpec,
      callback) as Promise<Models.GetAnalyzeLayoutResultResponse>;
  }
}

// Operation Specifications
const serializer = new coreHttp.Serializer(Mappers);
const trainCustomModelAsyncOperationSpec: coreHttp.OperationSpec = {
  httpMethod: "POST",
  path: "custom/models",
  urlParameters: [
    Parameters.endpoint
  ],
  requestBody: {
    parameterPath: "trainRequest",
    mapper: {
      ...Mappers.TrainRequest,
      required: true
    }
  },
  responses: {
    201: {
      headersMapper: Mappers.TrainCustomModelAsyncHeaders
    },
    default: {
      bodyMapper: Mappers.ErrorResponse,
      headersMapper: Mappers.TrainCustomModelAsyncHeaders
    }
  },
  serializer
};

const getCustomModelsOperationSpec: coreHttp.OperationSpec = {
  httpMethod: "GET",
  path: "custom/models",
  urlParameters: [
    Parameters.endpoint
  ],
  queryParameters: [
    Parameters.op
  ],
  responses: {
    200: {
      bodyMapper: Mappers.ModelsModel
    },
    default: {
      bodyMapper: Mappers.ErrorResponse
    }
  },
  serializer
};

const getCustomModelOperationSpec: coreHttp.OperationSpec = {
  httpMethod: "GET",
  path: "custom/models/{modelId}",
  urlParameters: [
    Parameters.endpoint,
    Parameters.modelId
  ],
  queryParameters: [
    Parameters.includeKeys
  ],
  responses: {
    200: {
      bodyMapper: Mappers.Model
    },
    default: {
      bodyMapper: Mappers.ErrorResponse
    }
  },
  serializer
};

const deleteCustomModelOperationSpec: coreHttp.OperationSpec = {
  httpMethod: "DELETE",
  path: "custom/models/{modelId}",
  urlParameters: [
    Parameters.endpoint,
    Parameters.modelId
  ],
  responses: {
    204: {},
    default: {
      bodyMapper: Mappers.ErrorResponse
    }
  },
  serializer
};

const analyzeWithCustomModelOperationSpec: coreHttp.OperationSpec = {
  httpMethod: "POST",
  path: "custom/models/{modelId}/analyze",
  urlParameters: [
    Parameters.endpoint,
    Parameters.modelId
  ],
  queryParameters: [
    Parameters.includeTextDetails
  ],
  requestBody: {
    parameterPath: [
      "options",
      "fileStream"
    ],
    mapper: {
      serializedName: "fileStream",
      type: {
        name: "Object"
      }
    }
  },
  responses: {
    202: {
      headersMapper: Mappers.AnalyzeWithCustomModelHeaders
    },
    default: {
      bodyMapper: Mappers.ErrorResponse,
      headersMapper: Mappers.AnalyzeWithCustomModelHeaders
    }
  },
  serializer
};

const getAnalyzeFormResultOperationSpec: coreHttp.OperationSpec = {
  httpMethod: "GET",
  path: "custom/models/{modelId}/analyzeResults/{resultId}",
  urlParameters: [
    Parameters.endpoint,
    Parameters.modelId,
    Parameters.resultId
  ],
  responses: {
    200: {
      bodyMapper: Mappers.AnalyzeOperationResult
    },
    default: {
      bodyMapper: Mappers.ErrorResponse
    }
  },
  serializer
};

const analyzeReceiptAsyncOperationSpec: coreHttp.OperationSpec = {
  httpMethod: "POST",
  path: "prebuilt/receipt/analyze",
  urlParameters: [
    Parameters.endpoint
  ],
  queryParameters: [
    Parameters.includeTextDetails
  ],
  requestBody: {
    parameterPath: [
      "options",
      "fileStream"
    ],
    mapper: {
      serializedName: "fileStream",
      type: {
        name: "Object"
      }
    }
  },
  responses: {
    202: {
      headersMapper: Mappers.AnalyzeReceiptAsyncHeaders
    },
    default: {
      bodyMapper: Mappers.ErrorResponse,
      headersMapper: Mappers.AnalyzeReceiptAsyncHeaders
    }
  },
  serializer
};

const getAnalyzeReceiptResultOperationSpec: coreHttp.OperationSpec = {
  httpMethod: "GET",
  path: "prebuilt/receipt/analyzeResults/{resultId}",
  urlParameters: [
    Parameters.endpoint,
    Parameters.resultId
  ],
  responses: {
    200: {
      bodyMapper: Mappers.AnalyzeOperationResult
    },
    default: {
      bodyMapper: Mappers.ErrorResponse
    }
  },
  serializer
};

const analyzeLayoutAsyncOperationSpec: coreHttp.OperationSpec = {
  httpMethod: "POST",
  path: "layout/analyze",
  urlParameters: [
    Parameters.endpoint
  ],
  requestBody: {
    parameterPath: [
      "options",
      "fileStream"
    ],
    mapper: {
      serializedName: "fileStream",
      type: {
        name: "Object"
      }
    }
  },
  responses: {
    202: {
      headersMapper: Mappers.AnalyzeLayoutAsyncHeaders
    },
    default: {
      bodyMapper: Mappers.ErrorResponse,
      headersMapper: Mappers.AnalyzeLayoutAsyncHeaders
    }
  },
  serializer
};

const getAnalyzeLayoutResultOperationSpec: coreHttp.OperationSpec = {
  httpMethod: "GET",
  path: "layout/analyzeResults/{resultId}",
  urlParameters: [
    Parameters.endpoint,
    Parameters.resultId
  ],
  responses: {
    200: {
      bodyMapper: Mappers.AnalyzeOperationResult
    },
    default: {
      bodyMapper: Mappers.ErrorResponse
    }
  },
  serializer
};

export {
  FormRecognizerClient,
  FormRecognizerClientContext,
  Models as FormRecognizerModels,
  Mappers as FormRecognizerMappers
};
