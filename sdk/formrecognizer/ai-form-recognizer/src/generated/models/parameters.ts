/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */

import {
  OperationParameter,
  OperationURLParameter,
  OperationQueryParameter
} from "@azure/core-client";
import {
  AnalyzeDocumentRequest as AnalyzeDocumentRequestMapper,
  BuildDocumentModelRequest as BuildDocumentModelRequestMapper,
  ComposeDocumentModelRequest as ComposeDocumentModelRequestMapper,
  AuthorizeCopyRequest as AuthorizeCopyRequestMapper,
  CopyAuthorization as CopyAuthorizationMapper,
  BuildDocumentClassifierRequest as BuildDocumentClassifierRequestMapper,
  ClassifyDocumentRequest as ClassifyDocumentRequestMapper
} from "../models/mappers";

export const contentType: OperationParameter = {
  parameterPath: "contentType",
  mapper: {
    serializedName: "Content-Type",
    required: true,
    type: {
      name: "Enum",
      allowedValues: [
        "application/octet-stream",
        "application/pdf",
        "application/vnd.openxmlformats-officedocument.presentationml.presentation",
        "application/vnd.openxmlformats-officedocument.spreadsheetml.sheet",
        "application/vnd.openxmlformats-officedocument.wordprocessingml.document",
        "image/bmp",
        "image/heif",
        "image/jpeg",
        "image/png",
        "image/tiff"
      ]
    }
  }
};

export const analyzeRequest: OperationParameter = {
  parameterPath: ["options", "analyzeRequest"],
  mapper: {
    serializedName: "analyzeRequest",
    type: {
      name: "Stream"
    }
  }
};

export const accept: OperationParameter = {
  parameterPath: "accept",
  mapper: {
    defaultValue: "application/json",
    isConstant: true,
    serializedName: "Accept",
    type: {
      name: "String"
    }
  }
};

export const contentType1: OperationParameter = {
  parameterPath: "contentType",
  mapper: {
    defaultValue: "text/html",
    isConstant: true,
    serializedName: "Content-Type",
    type: {
      name: "String"
    }
  }
};

export const analyzeRequest1: OperationParameter = {
  parameterPath: ["options", "analyzeRequest"],
  mapper: {
    serializedName: "analyzeRequest",
    type: {
      name: "String"
    }
  }
};

export const accept1: OperationParameter = {
  parameterPath: "accept",
  mapper: {
    defaultValue: "application/json",
    isConstant: true,
    serializedName: "Accept",
    type: {
      name: "String"
    }
  }
};

export const contentType2: OperationParameter = {
  parameterPath: "contentType",
  mapper: {
    defaultValue: "application/json",
    isConstant: true,
    serializedName: "Content-Type",
    type: {
      name: "String"
    }
  }
};

export const analyzeRequest2: OperationParameter = {
  parameterPath: ["options", "analyzeRequest"],
  mapper: AnalyzeDocumentRequestMapper
};

export const accept2: OperationParameter = {
  parameterPath: "accept",
  mapper: {
    defaultValue: "application/json",
    isConstant: true,
    serializedName: "Accept",
    type: {
      name: "String"
    }
  }
};

export const endpoint: OperationURLParameter = {
  parameterPath: "endpoint",
  mapper: {
    serializedName: "endpoint",
    required: true,
    type: {
      name: "String"
    }
  },
  skipEncoding: true
};

export const modelId: OperationURLParameter = {
  parameterPath: "modelId",
  mapper: {
    constraints: {
      Pattern: new RegExp("^[a-zA-Z0-9][a-zA-Z0-9._~-]{1,63}$"),
      MaxLength: 64
    },
    serializedName: "modelId",
    required: true,
    type: {
      name: "String"
    }
  }
};

export const pages: OperationQueryParameter = {
  parameterPath: ["options", "pages"],
  mapper: {
    constraints: {
      Pattern: new RegExp("^(\\d+(-\\d+)?)(,\\s*(\\d+(-\\d+)?))*$")
    },
    serializedName: "pages",
    type: {
      name: "String"
    }
  }
};

export const locale: OperationQueryParameter = {
  parameterPath: ["options", "locale"],
  mapper: {
    serializedName: "locale",
    type: {
      name: "String"
    }
  }
};

export const stringIndexType: OperationQueryParameter = {
  parameterPath: "stringIndexType",
  mapper: {
    serializedName: "stringIndexType",
    type: {
      name: "String"
    }
  }
};

export const apiVersion: OperationQueryParameter = {
  parameterPath: "apiVersion",
  mapper: {
    defaultValue: "2023-07-31",
    isConstant: true,
    serializedName: "api-version",
    type: {
      name: "String"
    }
  }
};

export const features: OperationQueryParameter = {
  parameterPath: ["options", "features"],
  mapper: {
    serializedName: "features",
    type: {
      name: "Sequence",
      element: {
        type: {
          name: "String"
        }
      }
    }
  },
  collectionFormat: "CSV"
};

export const resultId: OperationURLParameter = {
  parameterPath: "resultId",
  mapper: {
    serializedName: "resultId",
    required: true,
    type: {
      name: "Uuid"
    }
  }
};

export const contentType3: OperationParameter = {
  parameterPath: ["options", "contentType"],
  mapper: {
    defaultValue: "application/json",
    isConstant: true,
    serializedName: "Content-Type",
    type: {
      name: "String"
    }
  }
};

export const buildRequest: OperationParameter = {
  parameterPath: "buildRequest",
  mapper: BuildDocumentModelRequestMapper
};

export const composeRequest: OperationParameter = {
  parameterPath: "composeRequest",
  mapper: ComposeDocumentModelRequestMapper
};

export const authorizeCopyRequest: OperationParameter = {
  parameterPath: "authorizeCopyRequest",
  mapper: AuthorizeCopyRequestMapper
};

export const copyToRequest: OperationParameter = {
  parameterPath: "copyToRequest",
  mapper: CopyAuthorizationMapper
};

export const nextLink: OperationURLParameter = {
  parameterPath: "nextLink",
  mapper: {
    serializedName: "nextLink",
    required: true,
    type: {
      name: "String"
    }
  },
  skipEncoding: true
};

export const operationId: OperationURLParameter = {
  parameterPath: "operationId",
  mapper: {
    constraints: {
      Pattern: new RegExp(
        "^[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12}$"
      ),
      MaxLength: 36
    },
    serializedName: "operationId",
    required: true,
    type: {
      name: "String"
    }
  }
};

export const buildRequest1: OperationParameter = {
  parameterPath: "buildRequest",
  mapper: BuildDocumentClassifierRequestMapper
};

export const classifierId: OperationURLParameter = {
  parameterPath: "classifierId",
  mapper: {
    constraints: {
      Pattern: new RegExp("^[a-zA-Z0-9][a-zA-Z0-9._~-]{1,63}$"),
      MaxLength: 64
    },
    serializedName: "classifierId",
    required: true,
    type: {
      name: "String"
    }
  }
};

export const classifyRequest: OperationParameter = {
  parameterPath: ["options", "classifyRequest"],
  mapper: {
    serializedName: "classifyRequest",
    type: {
      name: "Stream"
    }
  }
};

export const classifyRequest1: OperationParameter = {
  parameterPath: ["options", "classifyRequest"],
  mapper: {
    serializedName: "classifyRequest",
    type: {
      name: "String"
    }
  }
};

export const classifyRequest2: OperationParameter = {
  parameterPath: ["options", "classifyRequest"],
  mapper: ClassifyDocumentRequestMapper
};
