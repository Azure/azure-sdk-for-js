/*
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for license information.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */

import * as coreHttp from "@azure/core-http";


export const TextWord: coreHttp.CompositeMapper = {
  serializedName: "TextWord",
  type: {
    name: "Composite",
    className: "TextWord",
    modelProperties: {
      text: {
        required: true,
        serializedName: "text",
        type: {
          name: "String"
        }
      },
      boundingBox: {
        required: true,
        serializedName: "boundingBox",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Number"
            }
          }
        }
      },
      confidence: {
        serializedName: "confidence",
        type: {
          name: "Number"
        }
      }
    }
  }
};

export const TextLine: coreHttp.CompositeMapper = {
  serializedName: "TextLine",
  type: {
    name: "Composite",
    className: "TextLine",
    modelProperties: {
      text: {
        required: true,
        serializedName: "text",
        type: {
          name: "String"
        }
      },
      boundingBox: {
        required: true,
        serializedName: "boundingBox",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Number"
            }
          }
        }
      },
      language: {
        nullable: false,
        serializedName: "language",
        type: {
          name: "String"
        }
      },
      words: {
        required: true,
        serializedName: "words",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "TextWord"
            }
          }
        }
      }
    }
  }
};

export const ReadResult: coreHttp.CompositeMapper = {
  serializedName: "ReadResult",
  type: {
    name: "Composite",
    className: "ReadResult",
    modelProperties: {
      page: {
        required: true,
        nullable: false,
        serializedName: "page",
        constraints: {
          InclusiveMinimum: 1
        },
        type: {
          name: "Number"
        }
      },
      angle: {
        required: true,
        nullable: false,
        serializedName: "angle",
        constraints: {
          InclusiveMaximum: 180,
          ExclusiveMinimum: -180
        },
        type: {
          name: "Number"
        }
      },
      width: {
        required: true,
        nullable: false,
        serializedName: "width",
        constraints: {
          InclusiveMinimum: 0
        },
        type: {
          name: "Number"
        }
      },
      height: {
        required: true,
        nullable: false,
        serializedName: "height",
        constraints: {
          InclusiveMinimum: 0
        },
        type: {
          name: "Number"
        }
      },
      unit: {
        required: true,
        nullable: false,
        serializedName: "unit",
        type: {
          name: "Enum",
          allowedValues: [
            "pixel",
            "inch"
          ]
        }
      },
      language: {
        nullable: false,
        serializedName: "language",
        type: {
          name: "String"
        }
      },
      lines: {
        serializedName: "lines",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "TextLine"
            }
          }
        }
      }
    }
  }
};

export const KeyValueElement: coreHttp.CompositeMapper = {
  serializedName: "KeyValueElement",
  type: {
    name: "Composite",
    className: "KeyValueElement",
    modelProperties: {
      text: {
        required: true,
        serializedName: "text",
        type: {
          name: "String"
        }
      },
      boundingBox: {
        serializedName: "boundingBox",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Number"
            }
          }
        }
      },
      elements: {
        serializedName: "elements",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "String"
            }
          }
        }
      }
    }
  }
};

export const KeyValuePair: coreHttp.CompositeMapper = {
  serializedName: "KeyValuePair",
  type: {
    name: "Composite",
    className: "KeyValuePair",
    modelProperties: {
      label: {
        serializedName: "label",
        type: {
          name: "String"
        }
      },
      key: {
        required: true,
        serializedName: "key",
        type: {
          name: "Composite",
          className: "KeyValueElement"
        }
      },
      value: {
        required: true,
        serializedName: "value",
        type: {
          name: "Composite",
          className: "KeyValueElement"
        }
      },
      confidence: {
        required: true,
        serializedName: "confidence",
        type: {
          name: "Number"
        }
      }
    }
  }
};

export const DataTableCell: coreHttp.CompositeMapper = {
  serializedName: "DataTableCell",
  type: {
    name: "Composite",
    className: "DataTableCell",
    modelProperties: {
      rowIndex: {
        required: true,
        nullable: false,
        serializedName: "rowIndex",
        constraints: {
          InclusiveMinimum: 0
        },
        type: {
          name: "Number"
        }
      },
      columnIndex: {
        required: true,
        nullable: false,
        serializedName: "columnIndex",
        constraints: {
          InclusiveMinimum: 0
        },
        type: {
          name: "Number"
        }
      },
      rowSpan: {
        nullable: false,
        serializedName: "rowSpan",
        defaultValue: 1,
        constraints: {
          InclusiveMinimum: 1
        },
        type: {
          name: "Number"
        }
      },
      columnSpan: {
        nullable: false,
        serializedName: "columnSpan",
        defaultValue: 1,
        constraints: {
          InclusiveMinimum: 1
        },
        type: {
          name: "Number"
        }
      },
      text: {
        required: true,
        serializedName: "text",
        type: {
          name: "String"
        }
      },
      boundingBox: {
        required: true,
        serializedName: "boundingBox",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Number"
            }
          }
        }
      },
      confidence: {
        required: true,
        serializedName: "confidence",
        type: {
          name: "Number"
        }
      },
      elements: {
        serializedName: "elements",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "String"
            }
          }
        }
      },
      isHeader: {
        nullable: false,
        serializedName: "isHeader",
        defaultValue: false,
        type: {
          name: "Boolean"
        }
      },
      isFooter: {
        nullable: false,
        serializedName: "isFooter",
        defaultValue: false,
        type: {
          name: "Boolean"
        }
      }
    }
  }
};

export const DataTable: coreHttp.CompositeMapper = {
  serializedName: "DataTable",
  type: {
    name: "Composite",
    className: "DataTable",
    modelProperties: {
      rows: {
        required: true,
        nullable: false,
        serializedName: "rows",
        constraints: {
          InclusiveMinimum: 1
        },
        type: {
          name: "Number"
        }
      },
      columns: {
        required: true,
        nullable: false,
        serializedName: "columns",
        constraints: {
          InclusiveMinimum: 1
        },
        type: {
          name: "Number"
        }
      },
      cells: {
        required: true,
        serializedName: "cells",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "DataTableCell"
            }
          }
        }
      }
    }
  }
};

export const PageResult: coreHttp.CompositeMapper = {
  serializedName: "PageResult",
  type: {
    name: "Composite",
    className: "PageResult",
    modelProperties: {
      page: {
        required: true,
        nullable: false,
        serializedName: "page",
        constraints: {
          InclusiveMinimum: 1
        },
        type: {
          name: "Number"
        }
      },
      clusterId: {
        nullable: false,
        serializedName: "clusterId",
        constraints: {
          InclusiveMinimum: 0
        },
        type: {
          name: "Number"
        }
      },
      keyValuePairs: {
        serializedName: "keyValuePairs",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "KeyValuePair"
            }
          }
        }
      },
      tables: {
        serializedName: "tables",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "DataTable"
            }
          }
        }
      }
    }
  }
};

export const FieldValue: coreHttp.CompositeMapper = {
  serializedName: "FieldValue",
  type: {
    name: "Composite",
    className: "FieldValue",
    modelProperties: {
      type: {
        required: true,
        nullable: false,
        serializedName: "type",
        type: {
          name: "Enum",
          allowedValues: [
            "string",
            "date",
            "time",
            "phoneNumber",
            "number",
            "integer",
            "array",
            "object"
          ]
        }
      },
      valueString: {
        serializedName: "valueString",
        type: {
          name: "String"
        }
      },
      valueDate: {
        nullable: false,
        serializedName: "valueDate",
        type: {
          name: "String"
        }
      },
      valueTime: {
        nullable: false,
        serializedName: "valueTime",
        type: {
          name: "String"
        }
      },
      valuePhoneNumber: {
        serializedName: "valuePhoneNumber",
        type: {
          name: "String"
        }
      },
      valueNumber: {
        nullable: false,
        serializedName: "valueNumber",
        type: {
          name: "Number"
        }
      },
      valueInteger: {
        nullable: false,
        serializedName: "valueInteger",
        type: {
          name: "Number"
        }
      },
      valueArray: {
        serializedName: "valueArray",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "FieldValue"
            }
          }
        }
      },
      valueObject: {
        serializedName: "valueObject",
        type: {
          name: "Dictionary",
          value: {
            type: {
              name: "Composite",
              className: "FieldValue"
            }
          }
        }
      },
      text: {
        serializedName: "text",
        type: {
          name: "String"
        }
      },
      boundingBox: {
        serializedName: "boundingBox",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Number"
            }
          }
        }
      },
      confidence: {
        serializedName: "confidence",
        type: {
          name: "Number"
        }
      },
      elements: {
        serializedName: "elements",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "String"
            }
          }
        }
      },
      page: {
        nullable: false,
        serializedName: "page",
        constraints: {
          InclusiveMinimum: 1
        },
        type: {
          name: "Number"
        }
      }
    }
  }
};

export const DocumentResult: coreHttp.CompositeMapper = {
  serializedName: "DocumentResult",
  type: {
    name: "Composite",
    className: "DocumentResult",
    modelProperties: {
      docType: {
        required: true,
        serializedName: "docType",
        type: {
          name: "String"
        }
      },
      pageRange: {
        required: true,
        serializedName: "pageRange",
        constraints: {
          MaxItems: 2,
          MinItems: 2
        },
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Number"
            }
          }
        }
      },
      fields: {
        required: true,
        serializedName: "fields",
        type: {
          name: "Dictionary",
          value: {
            type: {
              name: "Composite",
              className: "FieldValue"
            }
          }
        }
      }
    }
  }
};

export const ErrorInformation: coreHttp.CompositeMapper = {
  serializedName: "ErrorInformation",
  type: {
    name: "Composite",
    className: "ErrorInformation",
    modelProperties: {
      code: {
        required: true,
        serializedName: "code",
        type: {
          name: "String"
        }
      },
      message: {
        required: true,
        serializedName: "message",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const AnalyzeResult: coreHttp.CompositeMapper = {
  serializedName: "AnalyzeResult",
  type: {
    name: "Composite",
    className: "AnalyzeResult",
    modelProperties: {
      version: {
        required: true,
        serializedName: "version",
        type: {
          name: "String"
        }
      },
      readResults: {
        required: true,
        serializedName: "readResults",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "ReadResult"
            }
          }
        }
      },
      pageResults: {
        serializedName: "pageResults",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "PageResult"
            }
          }
        }
      },
      documentResults: {
        serializedName: "documentResults",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "DocumentResult"
            }
          }
        }
      },
      errors: {
        serializedName: "errors",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "ErrorInformation"
            }
          }
        }
      }
    }
  }
};

export const AnalyzeOperationResult: coreHttp.CompositeMapper = {
  serializedName: "AnalyzeOperationResult",
  type: {
    name: "Composite",
    className: "AnalyzeOperationResult",
    modelProperties: {
      status: {
        required: true,
        nullable: false,
        serializedName: "status",
        type: {
          name: "Enum",
          allowedValues: [
            "notStarted",
            "running",
            "succeeded",
            "failed"
          ]
        }
      },
      createdDateTime: {
        required: true,
        nullable: false,
        serializedName: "createdDateTime",
        type: {
          name: "DateTime"
        }
      },
      lastUpdatedDateTime: {
        required: true,
        nullable: false,
        serializedName: "lastUpdatedDateTime",
        type: {
          name: "DateTime"
        }
      },
      analyzeResult: {
        serializedName: "analyzeResult",
        type: {
          name: "Composite",
          className: "AnalyzeResult"
        }
      }
    }
  }
};

export const TrainSourceFilter: coreHttp.CompositeMapper = {
  serializedName: "TrainSourceFilter",
  type: {
    name: "Composite",
    className: "TrainSourceFilter",
    modelProperties: {
      prefix: {
        serializedName: "prefix",
        constraints: {
          MaxLength: 1024,
          MinLength: 0
        },
        type: {
          name: "String"
        }
      },
      includeSubFolders: {
        nullable: false,
        serializedName: "includeSubFolders",
        defaultValue: false,
        type: {
          name: "Boolean"
        }
      }
    }
  }
};

export const TrainRequest: coreHttp.CompositeMapper = {
  serializedName: "TrainRequest",
  type: {
    name: "Composite",
    className: "TrainRequest",
    modelProperties: {
      source: {
        required: true,
        serializedName: "source",
        constraints: {
          MaxLength: 2048,
          MinLength: 0
        },
        type: {
          name: "String"
        }
      },
      sourceFilter: {
        serializedName: "sourceFilter",
        type: {
          name: "Composite",
          className: "TrainSourceFilter"
        }
      },
      useLabelFile: {
        serializedName: "useLabelFile",
        defaultValue: false,
        type: {
          name: "Boolean"
        }
      }
    }
  }
};

export const TrainingDocumentInfo: coreHttp.CompositeMapper = {
  serializedName: "TrainingDocumentInfo",
  type: {
    name: "Composite",
    className: "TrainingDocumentInfo",
    modelProperties: {
      documentName: {
        required: true,
        serializedName: "documentName",
        type: {
          name: "String"
        }
      },
      pages: {
        required: true,
        nullable: false,
        serializedName: "pages",
        type: {
          name: "Number"
        }
      },
      errors: {
        required: true,
        serializedName: "errors",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "ErrorInformation"
            }
          }
        }
      },
      status: {
        required: true,
        nullable: false,
        serializedName: "status",
        type: {
          name: "Enum",
          allowedValues: [
            "succeeded",
            "partiallySucceeded",
            "failed"
          ]
        }
      }
    }
  }
};

export const FormFieldsReport: coreHttp.CompositeMapper = {
  serializedName: "FormFieldsReport",
  type: {
    name: "Composite",
    className: "FormFieldsReport",
    modelProperties: {
      fieldName: {
        required: true,
        serializedName: "fieldName",
        type: {
          name: "String"
        }
      },
      accuracy: {
        required: true,
        nullable: false,
        serializedName: "accuracy",
        type: {
          name: "Number"
        }
      }
    }
  }
};

export const TrainResult: coreHttp.CompositeMapper = {
  serializedName: "TrainResult",
  type: {
    name: "Composite",
    className: "TrainResult",
    modelProperties: {
      trainingDocuments: {
        required: true,
        serializedName: "trainingDocuments",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "TrainingDocumentInfo"
            }
          }
        }
      },
      fields: {
        serializedName: "fields",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "FormFieldsReport"
            }
          }
        }
      },
      averageModelAccuracy: {
        nullable: false,
        serializedName: "averageModelAccuracy",
        type: {
          name: "Number"
        }
      },
      errors: {
        serializedName: "errors",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "ErrorInformation"
            }
          }
        }
      }
    }
  }
};

export const SourcePath: coreHttp.CompositeMapper = {
  serializedName: "SourcePath",
  type: {
    name: "Composite",
    className: "SourcePath",
    modelProperties: {
      source: {
        serializedName: "source",
        constraints: {
          MaxLength: 2048,
          MinLength: 0
        },
        type: {
          name: "String"
        }
      }
    }
  }
};

export const ModelInfo: coreHttp.CompositeMapper = {
  serializedName: "ModelInfo",
  type: {
    name: "Composite",
    className: "ModelInfo",
    modelProperties: {
      modelId: {
        required: true,
        nullable: false,
        serializedName: "modelId",
        type: {
          name: "Uuid"
        }
      },
      status: {
        required: true,
        nullable: false,
        serializedName: "status",
        type: {
          name: "Enum",
          allowedValues: [
            "creating",
            "ready",
            "invalid"
          ]
        }
      },
      createdDateTime: {
        required: true,
        nullable: false,
        serializedName: "createdDateTime",
        type: {
          name: "DateTime"
        }
      },
      lastUpdatedDateTime: {
        required: true,
        nullable: false,
        serializedName: "lastUpdatedDateTime",
        type: {
          name: "DateTime"
        }
      }
    }
  }
};

export const ModelsSummary: coreHttp.CompositeMapper = {
  serializedName: "Models_summary",
  type: {
    name: "Composite",
    className: "ModelsSummary",
    modelProperties: {
      count: {
        required: true,
        nullable: false,
        serializedName: "count",
        type: {
          name: "Number"
        }
      },
      limit: {
        required: true,
        nullable: false,
        serializedName: "limit",
        type: {
          name: "Number"
        }
      },
      lastUpdatedDateTime: {
        required: true,
        nullable: false,
        serializedName: "lastUpdatedDateTime",
        type: {
          name: "DateTime"
        }
      }
    }
  }
};

export const ModelsModel: coreHttp.CompositeMapper = {
  serializedName: "Models",
  type: {
    name: "Composite",
    className: "ModelsModel",
    modelProperties: {
      summary: {
        serializedName: "summary",
        type: {
          name: "Composite",
          className: "ModelsSummary"
        }
      },
      modelList: {
        serializedName: "modelList",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "ModelInfo"
            }
          }
        }
      },
      nextLink: {
        serializedName: "nextLink",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const KeysResult: coreHttp.CompositeMapper = {
  serializedName: "KeysResult",
  type: {
    name: "Composite",
    className: "KeysResult",
    modelProperties: {
      clusters: {
        required: true,
        serializedName: "clusters",
        type: {
          name: "Dictionary",
          value: {
            type: {
              name: "Sequence",
              element: {
                type: {
                  name: "String"
                }
              }
            }
          }
        }
      }
    }
  }
};

export const Model: coreHttp.CompositeMapper = {
  serializedName: "Model",
  type: {
    name: "Composite",
    className: "Model",
    modelProperties: {
      modelInfo: {
        required: true,
        serializedName: "modelInfo",
        type: {
          name: "Composite",
          className: "ModelInfo"
        }
      },
      keys: {
        serializedName: "keys",
        type: {
          name: "Composite",
          className: "KeysResult"
        }
      },
      trainResult: {
        serializedName: "trainResult",
        type: {
          name: "Composite",
          className: "TrainResult"
        }
      }
    }
  }
};

export const ErrorResponse: coreHttp.CompositeMapper = {
  serializedName: "ErrorResponse",
  type: {
    name: "Composite",
    className: "ErrorResponse",
    modelProperties: {
      error: {
        required: true,
        serializedName: "error",
        type: {
          name: "Composite",
          className: "ErrorInformation"
        }
      }
    }
  }
};

export const TrainCustomModelAsyncHeaders: coreHttp.CompositeMapper = {
  serializedName: "traincustommodelasync-headers",
  type: {
    name: "Composite",
    className: "TrainCustomModelAsyncHeaders",
    modelProperties: {
      location: {
        serializedName: "location",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const AnalyzeWithCustomModelHeaders: coreHttp.CompositeMapper = {
  serializedName: "analyzewithcustommodel-headers",
  type: {
    name: "Composite",
    className: "AnalyzeWithCustomModelHeaders",
    modelProperties: {
      operationLocation: {
        serializedName: "operation-location",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const AnalyzeReceiptAsyncHeaders: coreHttp.CompositeMapper = {
  serializedName: "analyzereceiptasync-headers",
  type: {
    name: "Composite",
    className: "AnalyzeReceiptAsyncHeaders",
    modelProperties: {
      operationLocation: {
        serializedName: "operation-location",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const AnalyzeLayoutAsyncHeaders: coreHttp.CompositeMapper = {
  serializedName: "analyzelayoutasync-headers",
  type: {
    name: "Composite",
    className: "AnalyzeLayoutAsyncHeaders",
    modelProperties: {
      operationLocation: {
        serializedName: "operation-location",
        type: {
          name: "String"
        }
      }
    }
  }
};
