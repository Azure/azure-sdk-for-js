/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */

import * as coreClient from "@azure/core-client";

export const AnalyzeDocumentRequest: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "AnalyzeDocumentRequest",
    modelProperties: {
      urlSource: {
        serializedName: "urlSource",
        type: {
          name: "String"
        }
      },
      base64Source: {
        serializedName: "base64Source",
        type: {
          name: "ByteArray"
        }
      }
    }
  }
};

export const ErrorResponse: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "ErrorResponse",
    modelProperties: {
      error: {
        serializedName: "error",
        type: {
          name: "Composite",
          className: "ErrorModel"
        }
      }
    }
  }
};

export const ErrorModel: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "ErrorModel",
    modelProperties: {
      code: {
        serializedName: "code",
        required: true,
        type: {
          name: "String"
        }
      },
      message: {
        serializedName: "message",
        required: true,
        type: {
          name: "String"
        }
      },
      target: {
        serializedName: "target",
        type: {
          name: "String"
        }
      },
      details: {
        serializedName: "details",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "ErrorModel"
            }
          }
        }
      },
      innererror: {
        serializedName: "innererror",
        type: {
          name: "Composite",
          className: "InnerError"
        }
      }
    }
  }
};

export const InnerError: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "InnerError",
    modelProperties: {
      code: {
        serializedName: "code",
        required: true,
        type: {
          name: "String"
        }
      },
      message: {
        serializedName: "message",
        type: {
          name: "String"
        }
      },
      innererror: {
        serializedName: "innererror",
        type: {
          name: "Composite",
          className: "InnerError"
        }
      }
    }
  }
};

export const AnalyzeResultOperation: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "AnalyzeResultOperation",
    modelProperties: {
      status: {
        serializedName: "status",
        required: true,
        type: {
          name: "Enum",
          allowedValues: ["notStarted", "running", "failed", "succeeded"]
        }
      },
      createdOn: {
        serializedName: "createdDateTime",
        required: true,
        type: {
          name: "DateTime"
        }
      },
      lastUpdatedOn: {
        serializedName: "lastUpdatedDateTime",
        required: true,
        type: {
          name: "DateTime"
        }
      },
      error: {
        serializedName: "error",
        type: {
          name: "Composite",
          className: "ErrorModel"
        }
      },
      analyzeResult: {
        serializedName: "analyzeResult",
        type: {
          name: "Composite",
          className: "AnalyzeResult"
        }
      }
    }
  }
};

export const AnalyzeResult: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "AnalyzeResult",
    modelProperties: {
      apiVersion: {
        serializedName: "apiVersion",
        required: true,
        type: {
          name: "String"
        }
      },
      modelId: {
        constraints: {
          Pattern: new RegExp("^[a-zA-Z0-9][a-zA-Z0-9._~-]{1,63}$")
        },
        serializedName: "modelId",
        required: true,
        type: {
          name: "String"
        }
      },
      stringIndexType: {
        serializedName: "stringIndexType",
        required: true,
        type: {
          name: "String"
        }
      },
      content: {
        serializedName: "content",
        required: true,
        type: {
          name: "String"
        }
      },
      pages: {
        serializedName: "pages",
        required: true,
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "DocumentPage"
            }
          }
        }
      },
      paragraphs: {
        serializedName: "paragraphs",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "DocumentParagraph"
            }
          }
        }
      },
      tables: {
        serializedName: "tables",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "DocumentTable"
            }
          }
        }
      },
      keyValuePairs: {
        serializedName: "keyValuePairs",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "DocumentKeyValuePair"
            }
          }
        }
      },
      styles: {
        serializedName: "styles",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "DocumentStyle"
            }
          }
        }
      },
      languages: {
        serializedName: "languages",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "DocumentLanguage"
            }
          }
        }
      },
      documents: {
        serializedName: "documents",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "Document"
            }
          }
        }
      }
    }
  }
};

export const DocumentPage: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "DocumentPage",
    modelProperties: {
      pageNumber: {
        constraints: {
          InclusiveMinimum: 1
        },
        serializedName: "pageNumber",
        required: true,
        type: {
          name: "Number"
        }
      },
      angle: {
        constraints: {
          InclusiveMaximum: 180,
          ExclusiveMinimum: -180
        },
        serializedName: "angle",
        type: {
          name: "Number"
        }
      },
      width: {
        constraints: {
          InclusiveMinimum: 0
        },
        serializedName: "width",
        type: {
          name: "Number"
        }
      },
      height: {
        constraints: {
          InclusiveMinimum: 0
        },
        serializedName: "height",
        type: {
          name: "Number"
        }
      },
      unit: {
        serializedName: "unit",
        type: {
          name: "String"
        }
      },
      spans: {
        serializedName: "spans",
        required: true,
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "DocumentSpan"
            }
          }
        }
      },
      words: {
        serializedName: "words",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "DocumentWord"
            }
          }
        }
      },
      selectionMarks: {
        serializedName: "selectionMarks",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "DocumentSelectionMark"
            }
          }
        }
      },
      lines: {
        serializedName: "lines",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "DocumentLine"
            }
          }
        }
      },
      barcodes: {
        serializedName: "barcodes",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "DocumentBarcode"
            }
          }
        }
      },
      formulas: {
        serializedName: "formulas",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "DocumentFormula"
            }
          }
        }
      }
    }
  }
};

export const DocumentSpan: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "DocumentSpan",
    modelProperties: {
      offset: {
        constraints: {
          InclusiveMinimum: 0
        },
        serializedName: "offset",
        required: true,
        type: {
          name: "Number"
        }
      },
      length: {
        constraints: {
          InclusiveMinimum: 0
        },
        serializedName: "length",
        required: true,
        type: {
          name: "Number"
        }
      }
    }
  }
};

export const DocumentWord: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "DocumentWord",
    modelProperties: {
      content: {
        serializedName: "content",
        required: true,
        type: {
          name: "String"
        }
      },
      polygon: {
        serializedName: "polygon",
        type: {
          name: "Sequence",
          element: {
            constraints: {
              InclusiveMinimum: 0
            },
            type: {
              name: "Number"
            }
          }
        }
      },
      span: {
        serializedName: "span",
        type: {
          name: "Composite",
          className: "DocumentSpan"
        }
      },
      confidence: {
        constraints: {
          InclusiveMaximum: 1,
          InclusiveMinimum: 0
        },
        serializedName: "confidence",
        required: true,
        type: {
          name: "Number"
        }
      }
    }
  }
};

export const DocumentSelectionMark: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "DocumentSelectionMark",
    modelProperties: {
      state: {
        serializedName: "state",
        required: true,
        type: {
          name: "String"
        }
      },
      polygon: {
        serializedName: "polygon",
        type: {
          name: "Sequence",
          element: {
            constraints: {
              InclusiveMinimum: 0
            },
            type: {
              name: "Number"
            }
          }
        }
      },
      span: {
        serializedName: "span",
        type: {
          name: "Composite",
          className: "DocumentSpan"
        }
      },
      confidence: {
        constraints: {
          InclusiveMaximum: 1,
          InclusiveMinimum: 0
        },
        serializedName: "confidence",
        required: true,
        type: {
          name: "Number"
        }
      }
    }
  }
};

export const DocumentLine: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "DocumentLine",
    modelProperties: {
      content: {
        serializedName: "content",
        required: true,
        type: {
          name: "String"
        }
      },
      polygon: {
        serializedName: "polygon",
        type: {
          name: "Sequence",
          element: {
            constraints: {
              InclusiveMinimum: 0
            },
            type: {
              name: "Number"
            }
          }
        }
      },
      spans: {
        serializedName: "spans",
        required: true,
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "DocumentSpan"
            }
          }
        }
      }
    }
  }
};

export const DocumentBarcode: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "DocumentBarcode",
    modelProperties: {
      kind: {
        serializedName: "kind",
        required: true,
        type: {
          name: "String"
        }
      },
      value: {
        serializedName: "value",
        required: true,
        type: {
          name: "String"
        }
      },
      polygon: {
        serializedName: "polygon",
        type: {
          name: "Sequence",
          element: {
            constraints: {
              InclusiveMinimum: 0
            },
            type: {
              name: "Number"
            }
          }
        }
      },
      span: {
        serializedName: "span",
        type: {
          name: "Composite",
          className: "DocumentSpan"
        }
      },
      confidence: {
        constraints: {
          InclusiveMaximum: 1,
          InclusiveMinimum: 0
        },
        serializedName: "confidence",
        required: true,
        type: {
          name: "Number"
        }
      }
    }
  }
};

export const DocumentFormula: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "DocumentFormula",
    modelProperties: {
      kind: {
        serializedName: "kind",
        required: true,
        type: {
          name: "String"
        }
      },
      value: {
        serializedName: "value",
        required: true,
        type: {
          name: "String"
        }
      },
      polygon: {
        serializedName: "polygon",
        type: {
          name: "Sequence",
          element: {
            constraints: {
              InclusiveMinimum: 0
            },
            type: {
              name: "Number"
            }
          }
        }
      },
      span: {
        serializedName: "span",
        type: {
          name: "Composite",
          className: "DocumentSpan"
        }
      },
      confidence: {
        constraints: {
          InclusiveMaximum: 1,
          InclusiveMinimum: 0
        },
        serializedName: "confidence",
        required: true,
        type: {
          name: "Number"
        }
      }
    }
  }
};

export const DocumentParagraph: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "DocumentParagraph",
    modelProperties: {
      role: {
        serializedName: "role",
        type: {
          name: "String"
        }
      },
      content: {
        serializedName: "content",
        required: true,
        type: {
          name: "String"
        }
      },
      boundingRegions: {
        serializedName: "boundingRegions",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "BoundingRegion"
            }
          }
        }
      },
      spans: {
        serializedName: "spans",
        required: true,
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "DocumentSpan"
            }
          }
        }
      }
    }
  }
};

export const BoundingRegion: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "BoundingRegion",
    modelProperties: {
      pageNumber: {
        constraints: {
          InclusiveMinimum: 1
        },
        serializedName: "pageNumber",
        required: true,
        type: {
          name: "Number"
        }
      },
      polygon: {
        serializedName: "polygon",
        required: true,
        type: {
          name: "Sequence",
          element: {
            constraints: {
              InclusiveMinimum: 0
            },
            type: {
              name: "Number"
            }
          }
        }
      }
    }
  }
};

export const DocumentTable: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "DocumentTable",
    modelProperties: {
      rowCount: {
        constraints: {
          InclusiveMinimum: 1
        },
        serializedName: "rowCount",
        required: true,
        type: {
          name: "Number"
        }
      },
      columnCount: {
        constraints: {
          InclusiveMinimum: 1
        },
        serializedName: "columnCount",
        required: true,
        type: {
          name: "Number"
        }
      },
      cells: {
        serializedName: "cells",
        required: true,
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "DocumentTableCell"
            }
          }
        }
      },
      boundingRegions: {
        serializedName: "boundingRegions",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "BoundingRegion"
            }
          }
        }
      },
      spans: {
        serializedName: "spans",
        required: true,
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "DocumentSpan"
            }
          }
        }
      }
    }
  }
};

export const DocumentTableCell: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "DocumentTableCell",
    modelProperties: {
      kind: {
        defaultValue: "content",
        serializedName: "kind",
        type: {
          name: "String"
        }
      },
      rowIndex: {
        serializedName: "rowIndex",
        required: true,
        type: {
          name: "Number"
        }
      },
      columnIndex: {
        serializedName: "columnIndex",
        required: true,
        type: {
          name: "Number"
        }
      },
      rowSpan: {
        defaultValue: 1,
        constraints: {
          InclusiveMinimum: 1
        },
        serializedName: "rowSpan",
        type: {
          name: "Number"
        }
      },
      columnSpan: {
        defaultValue: 1,
        constraints: {
          InclusiveMinimum: 1
        },
        serializedName: "columnSpan",
        type: {
          name: "Number"
        }
      },
      content: {
        serializedName: "content",
        required: true,
        type: {
          name: "String"
        }
      },
      boundingRegions: {
        serializedName: "boundingRegions",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "BoundingRegion"
            }
          }
        }
      },
      spans: {
        serializedName: "spans",
        required: true,
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "DocumentSpan"
            }
          }
        }
      }
    }
  }
};

export const DocumentKeyValuePair: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "DocumentKeyValuePair",
    modelProperties: {
      key: {
        serializedName: "key",
        type: {
          name: "Composite",
          className: "DocumentKeyValueElement"
        }
      },
      value: {
        serializedName: "value",
        type: {
          name: "Composite",
          className: "DocumentKeyValueElement"
        }
      },
      confidence: {
        constraints: {
          InclusiveMaximum: 1,
          InclusiveMinimum: 0
        },
        serializedName: "confidence",
        required: true,
        type: {
          name: "Number"
        }
      }
    }
  }
};

export const DocumentKeyValueElement: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "DocumentKeyValueElement",
    modelProperties: {
      content: {
        serializedName: "content",
        required: true,
        type: {
          name: "String"
        }
      },
      boundingRegions: {
        serializedName: "boundingRegions",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "BoundingRegion"
            }
          }
        }
      },
      spans: {
        serializedName: "spans",
        required: true,
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "DocumentSpan"
            }
          }
        }
      }
    }
  }
};

export const DocumentStyle: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "DocumentStyle",
    modelProperties: {
      isHandwritten: {
        serializedName: "isHandwritten",
        type: {
          name: "Boolean"
        }
      },
      similarFontFamily: {
        serializedName: "similarFontFamily",
        type: {
          name: "String"
        }
      },
      fontStyle: {
        serializedName: "fontStyle",
        type: {
          name: "String"
        }
      },
      fontWeight: {
        serializedName: "fontWeight",
        type: {
          name: "String"
        }
      },
      color: {
        constraints: {
          Pattern: new RegExp("^#[0-9a-f]{6}$")
        },
        serializedName: "color",
        type: {
          name: "String"
        }
      },
      backgroundColor: {
        constraints: {
          Pattern: new RegExp("^#[0-9a-f]{6}$")
        },
        serializedName: "backgroundColor",
        type: {
          name: "String"
        }
      },
      spans: {
        serializedName: "spans",
        required: true,
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "DocumentSpan"
            }
          }
        }
      },
      confidence: {
        constraints: {
          InclusiveMaximum: 1,
          InclusiveMinimum: 0
        },
        serializedName: "confidence",
        required: true,
        type: {
          name: "Number"
        }
      }
    }
  }
};

export const DocumentLanguage: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "DocumentLanguage",
    modelProperties: {
      locale: {
        serializedName: "locale",
        required: true,
        type: {
          name: "String"
        }
      },
      spans: {
        serializedName: "spans",
        required: true,
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "DocumentSpan"
            }
          }
        }
      },
      confidence: {
        constraints: {
          InclusiveMaximum: 1,
          InclusiveMinimum: 0
        },
        serializedName: "confidence",
        required: true,
        type: {
          name: "Number"
        }
      }
    }
  }
};

export const Document: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "Document",
    modelProperties: {
      docType: {
        constraints: {
          MaxLength: 64,
          MinLength: 2
        },
        serializedName: "docType",
        required: true,
        type: {
          name: "String"
        }
      },
      boundingRegions: {
        serializedName: "boundingRegions",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "BoundingRegion"
            }
          }
        }
      },
      spans: {
        serializedName: "spans",
        required: true,
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "DocumentSpan"
            }
          }
        }
      },
      fields: {
        serializedName: "fields",
        type: {
          name: "Dictionary",
          value: { type: { name: "Composite", className: "DocumentField" } }
        }
      },
      confidence: {
        constraints: {
          InclusiveMaximum: 1,
          InclusiveMinimum: 0
        },
        serializedName: "confidence",
        required: true,
        type: {
          name: "Number"
        }
      }
    }
  }
};

export const DocumentField: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "DocumentField",
    modelProperties: {
      type: {
        serializedName: "type",
        required: true,
        type: {
          name: "String"
        }
      },
      valueString: {
        serializedName: "valueString",
        type: {
          name: "String"
        }
      },
      valueDate: {
        serializedName: "valueDate",
        type: {
          name: "Date"
        }
      },
      valueTime: {
        serializedName: "valueTime",
        type: {
          name: "String"
        }
      },
      valuePhoneNumber: {
        serializedName: "valuePhoneNumber",
        type: {
          name: "String"
        }
      },
      valueNumber: {
        serializedName: "valueNumber",
        type: {
          name: "Number"
        }
      },
      valueInteger: {
        serializedName: "valueInteger",
        type: {
          name: "Number"
        }
      },
      valueSelectionMark: {
        serializedName: "valueSelectionMark",
        type: {
          name: "String"
        }
      },
      valueSignature: {
        serializedName: "valueSignature",
        type: {
          name: "String"
        }
      },
      valueCountryRegion: {
        serializedName: "valueCountryRegion",
        type: {
          name: "String"
        }
      },
      valueArray: {
        serializedName: "valueArray",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "DocumentField"
            }
          }
        }
      },
      valueObject: {
        serializedName: "valueObject",
        type: {
          name: "Dictionary",
          value: { type: { name: "Composite", className: "DocumentField" } }
        }
      },
      valueCurrency: {
        serializedName: "valueCurrency",
        type: {
          name: "Composite",
          className: "CurrencyValue"
        }
      },
      valueAddress: {
        serializedName: "valueAddress",
        type: {
          name: "Composite",
          className: "AddressValue"
        }
      },
      valueBoolean: {
        serializedName: "valueBoolean",
        type: {
          name: "Boolean"
        }
      },
      content: {
        serializedName: "content",
        type: {
          name: "String"
        }
      },
      boundingRegions: {
        serializedName: "boundingRegions",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "BoundingRegion"
            }
          }
        }
      },
      spans: {
        serializedName: "spans",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "DocumentSpan"
            }
          }
        }
      },
      confidence: {
        constraints: {
          InclusiveMaximum: 1,
          InclusiveMinimum: 0
        },
        serializedName: "confidence",
        type: {
          name: "Number"
        }
      }
    }
  }
};

export const CurrencyValue: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "CurrencyValue",
    modelProperties: {
      amount: {
        serializedName: "amount",
        required: true,
        type: {
          name: "Number"
        }
      },
      currencySymbol: {
        serializedName: "currencySymbol",
        type: {
          name: "String"
        }
      },
      currencyCode: {
        serializedName: "currencyCode",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const AddressValue: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "AddressValue",
    modelProperties: {
      houseNumber: {
        serializedName: "houseNumber",
        type: {
          name: "String"
        }
      },
      poBox: {
        serializedName: "poBox",
        type: {
          name: "String"
        }
      },
      road: {
        serializedName: "road",
        type: {
          name: "String"
        }
      },
      city: {
        serializedName: "city",
        type: {
          name: "String"
        }
      },
      state: {
        serializedName: "state",
        type: {
          name: "String"
        }
      },
      postalCode: {
        serializedName: "postalCode",
        type: {
          name: "String"
        }
      },
      countryRegion: {
        serializedName: "countryRegion",
        type: {
          name: "String"
        }
      },
      streetAddress: {
        serializedName: "streetAddress",
        type: {
          name: "String"
        }
      },
      unit: {
        serializedName: "unit",
        type: {
          name: "String"
        }
      },
      cityDistrict: {
        serializedName: "cityDistrict",
        type: {
          name: "String"
        }
      },
      stateDistrict: {
        serializedName: "stateDistrict",
        type: {
          name: "String"
        }
      },
      suburb: {
        serializedName: "suburb",
        type: {
          name: "String"
        }
      },
      house: {
        serializedName: "house",
        type: {
          name: "String"
        }
      },
      level: {
        serializedName: "level",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const BuildDocumentModelRequest: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "BuildDocumentModelRequest",
    modelProperties: {
      modelId: {
        constraints: {
          Pattern: new RegExp("^[a-zA-Z0-9][a-zA-Z0-9._~-]{1,63}$")
        },
        serializedName: "modelId",
        required: true,
        type: {
          name: "String"
        }
      },
      description: {
        constraints: {
          MaxLength: 4096
        },
        serializedName: "description",
        type: {
          name: "String"
        }
      },
      buildMode: {
        serializedName: "buildMode",
        required: true,
        type: {
          name: "String"
        }
      },
      azureBlobSource: {
        serializedName: "azureBlobSource",
        type: {
          name: "Composite",
          className: "AzureBlobContentSource"
        }
      },
      azureBlobFileListSource: {
        serializedName: "azureBlobFileListSource",
        type: {
          name: "Composite",
          className: "AzureBlobFileListContentSource"
        }
      },
      tags: {
        serializedName: "tags",
        type: {
          name: "Dictionary",
          value: { type: { name: "String" } }
        }
      }
    }
  }
};

export const AzureBlobContentSource: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "AzureBlobContentSource",
    modelProperties: {
      containerUrl: {
        serializedName: "containerUrl",
        required: true,
        type: {
          name: "String"
        }
      },
      prefix: {
        serializedName: "prefix",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const AzureBlobFileListContentSource: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "AzureBlobFileListContentSource",
    modelProperties: {
      containerUrl: {
        serializedName: "containerUrl",
        required: true,
        type: {
          name: "String"
        }
      },
      fileList: {
        serializedName: "fileList",
        required: true,
        type: {
          name: "String"
        }
      }
    }
  }
};

export const ComposeDocumentModelRequest: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "ComposeDocumentModelRequest",
    modelProperties: {
      modelId: {
        constraints: {
          Pattern: new RegExp("^[a-zA-Z0-9][a-zA-Z0-9._~-]{1,63}$")
        },
        serializedName: "modelId",
        required: true,
        type: {
          name: "String"
        }
      },
      description: {
        constraints: {
          MaxLength: 4096
        },
        serializedName: "description",
        type: {
          name: "String"
        }
      },
      componentModels: {
        constraints: {
          UniqueItems: true
        },
        serializedName: "componentModels",
        required: true,
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "ComponentDocumentModelDetails"
            }
          }
        }
      },
      tags: {
        serializedName: "tags",
        type: {
          name: "Dictionary",
          value: { type: { name: "String" } }
        }
      }
    }
  }
};

export const ComponentDocumentModelDetails: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "ComponentDocumentModelDetails",
    modelProperties: {
      modelId: {
        constraints: {
          Pattern: new RegExp("^[a-zA-Z0-9][a-zA-Z0-9._~-]{1,63}$")
        },
        serializedName: "modelId",
        required: true,
        type: {
          name: "String"
        }
      }
    }
  }
};

export const AuthorizeCopyRequest: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "AuthorizeCopyRequest",
    modelProperties: {
      modelId: {
        constraints: {
          Pattern: new RegExp("^[a-zA-Z0-9][a-zA-Z0-9._~-]{1,63}$")
        },
        serializedName: "modelId",
        required: true,
        type: {
          name: "String"
        }
      },
      description: {
        constraints: {
          MaxLength: 4096
        },
        serializedName: "description",
        type: {
          name: "String"
        }
      },
      tags: {
        serializedName: "tags",
        type: {
          name: "Dictionary",
          value: { type: { name: "String" } }
        }
      }
    }
  }
};

export const CopyAuthorization: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "CopyAuthorization",
    modelProperties: {
      targetResourceId: {
        serializedName: "targetResourceId",
        required: true,
        type: {
          name: "String"
        }
      },
      targetResourceRegion: {
        serializedName: "targetResourceRegion",
        required: true,
        type: {
          name: "String"
        }
      },
      targetModelId: {
        constraints: {
          Pattern: new RegExp("^[a-zA-Z0-9][a-zA-Z0-9._~-]{1,63}$")
        },
        serializedName: "targetModelId",
        required: true,
        type: {
          name: "String"
        }
      },
      targetModelLocation: {
        serializedName: "targetModelLocation",
        required: true,
        type: {
          name: "String"
        }
      },
      accessToken: {
        serializedName: "accessToken",
        required: true,
        type: {
          name: "String"
        }
      },
      expirationDateTime: {
        serializedName: "expirationDateTime",
        required: true,
        type: {
          name: "DateTime"
        }
      }
    }
  }
};

export const GetOperationsResponse: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "GetOperationsResponse",
    modelProperties: {
      value: {
        serializedName: "value",
        required: true,
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "OperationSummary"
            }
          }
        }
      },
      nextLink: {
        serializedName: "nextLink",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const OperationSummary: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "OperationSummary",
    modelProperties: {
      operationId: {
        serializedName: "operationId",
        required: true,
        type: {
          name: "String"
        }
      },
      status: {
        serializedName: "status",
        required: true,
        type: {
          name: "Enum",
          allowedValues: [
            "notStarted",
            "running",
            "failed",
            "succeeded",
            "canceled"
          ]
        }
      },
      percentCompleted: {
        constraints: {
          InclusiveMaximum: 100,
          InclusiveMinimum: 0
        },
        serializedName: "percentCompleted",
        type: {
          name: "Number"
        }
      },
      createdOn: {
        serializedName: "createdDateTime",
        required: true,
        type: {
          name: "DateTime"
        }
      },
      lastUpdatedOn: {
        serializedName: "lastUpdatedDateTime",
        required: true,
        type: {
          name: "DateTime"
        }
      },
      kind: {
        serializedName: "kind",
        required: true,
        type: {
          name: "String"
        }
      },
      resourceLocation: {
        serializedName: "resourceLocation",
        required: true,
        type: {
          name: "String"
        }
      },
      apiVersion: {
        serializedName: "apiVersion",
        type: {
          name: "String"
        }
      },
      tags: {
        serializedName: "tags",
        type: {
          name: "Dictionary",
          value: { type: { name: "String" } }
        }
      }
    }
  }
};

export const OperationDetails: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "OperationDetails",
    uberParent: "OperationDetails",
    polymorphicDiscriminator: {
      serializedName: "kind",
      clientName: "kind"
    },
    modelProperties: {
      operationId: {
        serializedName: "operationId",
        required: true,
        type: {
          name: "String"
        }
      },
      status: {
        serializedName: "status",
        required: true,
        type: {
          name: "Enum",
          allowedValues: [
            "notStarted",
            "running",
            "failed",
            "succeeded",
            "canceled"
          ]
        }
      },
      percentCompleted: {
        constraints: {
          InclusiveMaximum: 100,
          InclusiveMinimum: 0
        },
        serializedName: "percentCompleted",
        type: {
          name: "Number"
        }
      },
      createdOn: {
        serializedName: "createdDateTime",
        required: true,
        type: {
          name: "DateTime"
        }
      },
      lastUpdatedOn: {
        serializedName: "lastUpdatedDateTime",
        required: true,
        type: {
          name: "DateTime"
        }
      },
      kind: {
        serializedName: "kind",
        required: true,
        type: {
          name: "String"
        }
      },
      resourceLocation: {
        serializedName: "resourceLocation",
        required: true,
        type: {
          name: "String"
        }
      },
      apiVersion: {
        serializedName: "apiVersion",
        type: {
          name: "String"
        }
      },
      tags: {
        serializedName: "tags",
        type: {
          name: "Dictionary",
          value: { type: { name: "String" } }
        }
      },
      error: {
        serializedName: "error",
        type: {
          name: "Composite",
          className: "ErrorModel"
        }
      }
    }
  }
};

export const GetDocumentModelsResponse: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "GetDocumentModelsResponse",
    modelProperties: {
      value: {
        serializedName: "value",
        required: true,
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "DocumentModelSummary"
            }
          }
        }
      },
      nextLink: {
        serializedName: "nextLink",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const DocumentModelSummary: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "DocumentModelSummary",
    modelProperties: {
      modelId: {
        constraints: {
          Pattern: new RegExp("^[a-zA-Z0-9][a-zA-Z0-9._~-]{1,63}$")
        },
        serializedName: "modelId",
        required: true,
        type: {
          name: "String"
        }
      },
      description: {
        constraints: {
          MaxLength: 4096
        },
        serializedName: "description",
        type: {
          name: "String"
        }
      },
      createdOn: {
        serializedName: "createdDateTime",
        required: true,
        type: {
          name: "DateTime"
        }
      },
      expiresOn: {
        serializedName: "expirationDateTime",
        type: {
          name: "DateTime"
        }
      },
      apiVersion: {
        serializedName: "apiVersion",
        type: {
          name: "String"
        }
      },
      tags: {
        serializedName: "tags",
        type: {
          name: "Dictionary",
          value: { type: { name: "String" } }
        }
      }
    }
  }
};

export const DocumentModelDetails: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "DocumentModelDetails",
    modelProperties: {
      modelId: {
        constraints: {
          Pattern: new RegExp("^[a-zA-Z0-9][a-zA-Z0-9._~-]{1,63}$")
        },
        serializedName: "modelId",
        required: true,
        type: {
          name: "String"
        }
      },
      description: {
        constraints: {
          MaxLength: 4096
        },
        serializedName: "description",
        type: {
          name: "String"
        }
      },
      createdOn: {
        serializedName: "createdDateTime",
        required: true,
        type: {
          name: "DateTime"
        }
      },
      expiresOn: {
        serializedName: "expirationDateTime",
        type: {
          name: "DateTime"
        }
      },
      apiVersion: {
        serializedName: "apiVersion",
        type: {
          name: "String"
        }
      },
      tags: {
        serializedName: "tags",
        type: {
          name: "Dictionary",
          value: { type: { name: "String" } }
        }
      },
      docTypes: {
        serializedName: "docTypes",
        type: {
          name: "Dictionary",
          value: {
            type: { name: "Composite", className: "DocumentTypeDetails" }
          }
        }
      }
    }
  }
};

export const DocumentTypeDetails: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "DocumentTypeDetails",
    modelProperties: {
      description: {
        constraints: {
          MaxLength: 4096
        },
        serializedName: "description",
        type: {
          name: "String"
        }
      },
      buildMode: {
        serializedName: "buildMode",
        type: {
          name: "String"
        }
      },
      fieldSchema: {
        serializedName: "fieldSchema",
        required: true,
        type: {
          name: "Dictionary",
          value: {
            type: { name: "Composite", className: "DocumentFieldSchema" }
          }
        }
      },
      fieldConfidence: {
        serializedName: "fieldConfidence",
        type: {
          name: "Dictionary",
          value: {
            type: { name: "Number" },
            constraints: { InclusiveMaximum: 1, InclusiveMinimum: 0 }
          }
        }
      }
    }
  }
};

export const DocumentFieldSchema: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "DocumentFieldSchema",
    modelProperties: {
      type: {
        serializedName: "type",
        required: true,
        type: {
          name: "String"
        }
      },
      description: {
        serializedName: "description",
        type: {
          name: "String"
        }
      },
      example: {
        serializedName: "example",
        type: {
          name: "String"
        }
      },
      items: {
        serializedName: "items",
        type: {
          name: "Composite",
          className: "DocumentFieldSchema"
        }
      },
      properties: {
        serializedName: "properties",
        type: {
          name: "Dictionary",
          value: {
            type: { name: "Composite", className: "DocumentFieldSchema" }
          }
        }
      }
    }
  }
};

export const BuildDocumentClassifierRequest: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "BuildDocumentClassifierRequest",
    modelProperties: {
      classifierId: {
        constraints: {
          Pattern: new RegExp("^[a-zA-Z0-9][a-zA-Z0-9._~-]{1,63}$")
        },
        serializedName: "classifierId",
        required: true,
        type: {
          name: "String"
        }
      },
      description: {
        constraints: {
          MaxLength: 4096
        },
        serializedName: "description",
        type: {
          name: "String"
        }
      },
      docTypes: {
        serializedName: "docTypes",
        required: true,
        type: {
          name: "Dictionary",
          value: {
            type: {
              name: "Composite",
              className: "ClassifierDocumentTypeDetails"
            }
          }
        }
      }
    }
  }
};

export const ClassifierDocumentTypeDetails: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "ClassifierDocumentTypeDetails",
    modelProperties: {
      azureBlobSource: {
        serializedName: "azureBlobSource",
        type: {
          name: "Composite",
          className: "AzureBlobContentSource"
        }
      },
      azureBlobFileListSource: {
        serializedName: "azureBlobFileListSource",
        type: {
          name: "Composite",
          className: "AzureBlobFileListContentSource"
        }
      }
    }
  }
};

export const GetDocumentClassifiersResponse: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "GetDocumentClassifiersResponse",
    modelProperties: {
      value: {
        serializedName: "value",
        required: true,
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "DocumentClassifierDetails"
            }
          }
        }
      },
      nextLink: {
        serializedName: "nextLink",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const DocumentClassifierDetails: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "DocumentClassifierDetails",
    modelProperties: {
      classifierId: {
        constraints: {
          Pattern: new RegExp("^[a-zA-Z0-9][a-zA-Z0-9._~-]{1,63}$")
        },
        serializedName: "classifierId",
        required: true,
        type: {
          name: "String"
        }
      },
      description: {
        constraints: {
          MaxLength: 4096
        },
        serializedName: "description",
        type: {
          name: "String"
        }
      },
      createdOn: {
        serializedName: "createdDateTime",
        required: true,
        type: {
          name: "DateTime"
        }
      },
      expiresOn: {
        serializedName: "expirationDateTime",
        type: {
          name: "DateTime"
        }
      },
      apiVersion: {
        serializedName: "apiVersion",
        required: true,
        type: {
          name: "String"
        }
      },
      docTypes: {
        serializedName: "docTypes",
        required: true,
        type: {
          name: "Dictionary",
          value: {
            type: {
              name: "Composite",
              className: "ClassifierDocumentTypeDetails"
            }
          }
        }
      }
    }
  }
};

export const ClassifyDocumentRequest: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "ClassifyDocumentRequest",
    modelProperties: {
      urlSource: {
        serializedName: "urlSource",
        type: {
          name: "String"
        }
      },
      base64Source: {
        serializedName: "base64Source",
        type: {
          name: "ByteArray"
        }
      }
    }
  }
};

export const ResourceDetails: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "ResourceDetails",
    modelProperties: {
      customDocumentModels: {
        serializedName: "customDocumentModels",
        type: {
          name: "Composite",
          className: "CustomDocumentModelsDetails"
        }
      },
      customNeuralDocumentModelBuilds: {
        serializedName: "customNeuralDocumentModelBuilds",
        type: {
          name: "Composite",
          className: "QuotaDetails"
        }
      }
    }
  }
};

export const CustomDocumentModelsDetails: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "CustomDocumentModelsDetails",
    modelProperties: {
      count: {
        serializedName: "count",
        required: true,
        type: {
          name: "Number"
        }
      },
      limit: {
        serializedName: "limit",
        required: true,
        type: {
          name: "Number"
        }
      }
    }
  }
};

export const QuotaDetails: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "QuotaDetails",
    modelProperties: {
      used: {
        serializedName: "used",
        required: true,
        type: {
          name: "Number"
        }
      },
      quota: {
        serializedName: "quota",
        required: true,
        type: {
          name: "Number"
        }
      },
      quotaResetOn: {
        serializedName: "quotaResetDateTime",
        required: true,
        type: {
          name: "DateTime"
        }
      }
    }
  }
};

export const DocumentModelBuildOperationDetails: coreClient.CompositeMapper = {
  serializedName: "documentModelBuild",
  type: {
    name: "Composite",
    className: "DocumentModelBuildOperationDetails",
    uberParent: "OperationDetails",
    polymorphicDiscriminator: OperationDetails.type.polymorphicDiscriminator,
    modelProperties: {
      ...OperationDetails.type.modelProperties,
      result: {
        serializedName: "result",
        type: {
          name: "Composite",
          className: "DocumentModelDetails"
        }
      }
    }
  }
};

export const DocumentModelComposeOperationDetails: coreClient.CompositeMapper = {
  serializedName: "documentModelCompose",
  type: {
    name: "Composite",
    className: "DocumentModelComposeOperationDetails",
    uberParent: "OperationDetails",
    polymorphicDiscriminator: OperationDetails.type.polymorphicDiscriminator,
    modelProperties: {
      ...OperationDetails.type.modelProperties,
      result: {
        serializedName: "result",
        type: {
          name: "Composite",
          className: "DocumentModelDetails"
        }
      }
    }
  }
};

export const DocumentModelCopyToOperationDetails: coreClient.CompositeMapper = {
  serializedName: "documentModelCopyTo",
  type: {
    name: "Composite",
    className: "DocumentModelCopyToOperationDetails",
    uberParent: "OperationDetails",
    polymorphicDiscriminator: OperationDetails.type.polymorphicDiscriminator,
    modelProperties: {
      ...OperationDetails.type.modelProperties,
      result: {
        serializedName: "result",
        type: {
          name: "Composite",
          className: "DocumentModelDetails"
        }
      }
    }
  }
};

export const DocumentClassifierBuildOperationDetails: coreClient.CompositeMapper = {
  serializedName: "documentClassifierBuild",
  type: {
    name: "Composite",
    className: "DocumentClassifierBuildOperationDetails",
    uberParent: "OperationDetails",
    polymorphicDiscriminator: OperationDetails.type.polymorphicDiscriminator,
    modelProperties: {
      ...OperationDetails.type.modelProperties,
      result: {
        serializedName: "result",
        type: {
          name: "Composite",
          className: "DocumentClassifierDetails"
        }
      }
    }
  }
};

export const DocumentModelsAnalyzeDocumentHeaders: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "DocumentModelsAnalyzeDocumentHeaders",
    modelProperties: {
      operationLocation: {
        serializedName: "operation-location",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const DocumentModelsBuildModelHeaders: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "DocumentModelsBuildModelHeaders",
    modelProperties: {
      operationLocation: {
        serializedName: "operation-location",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const DocumentModelsComposeModelHeaders: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "DocumentModelsComposeModelHeaders",
    modelProperties: {
      operationLocation: {
        serializedName: "operation-location",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const DocumentModelsCopyModelToHeaders: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "DocumentModelsCopyModelToHeaders",
    modelProperties: {
      operationLocation: {
        serializedName: "operation-location",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const DocumentClassifiersBuildClassifierHeaders: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "DocumentClassifiersBuildClassifierHeaders",
    modelProperties: {
      operationLocation: {
        serializedName: "operation-location",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const DocumentClassifiersClassifyDocumentHeaders: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "DocumentClassifiersClassifyDocumentHeaders",
    modelProperties: {
      operationLocation: {
        serializedName: "operation-location",
        type: {
          name: "String"
        }
      }
    }
  }
};

export let discriminators = {
  OperationDetails: OperationDetails,
  "OperationDetails.documentModelBuild": DocumentModelBuildOperationDetails,
  "OperationDetails.documentModelCompose": DocumentModelComposeOperationDetails,
  "OperationDetails.documentModelCopyTo": DocumentModelCopyToOperationDetails,
  "OperationDetails.documentClassifierBuild": DocumentClassifierBuildOperationDetails
};
