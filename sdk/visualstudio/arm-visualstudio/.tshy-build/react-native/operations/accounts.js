/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */
import * as coreClient from "@azure/core-client";
import * as Mappers from "../models/mappers.js";
import * as Parameters from "../models/parameters.js";
/** Class containing Accounts operations. */
export class AccountsImpl {
    /**
     * Initialize a new instance of the class Accounts class.
     * @param client Reference to the service client
     */
    constructor(client) {
        this.client = client;
    }
    /**
     * Checks if the specified Visual Studio Team Services account name is available. Resource name can be
     * either an account name or an account name and PUID.
     * @param body Parameters describing the name to check availability for.
     * @param options The options parameters.
     */
    checkNameAvailability(body, options) {
        return this.client.sendOperationRequest({ body, options }, checkNameAvailabilityOperationSpec);
    }
    /**
     * Gets all Visual Studio Team Services account resources under the resource group linked to the
     * specified Azure subscription.
     * @param resourceGroupName Name of the resource group within the Azure subscription.
     * @param options The options parameters.
     */
    listByResourceGroup(resourceGroupName, options) {
        return this.client.sendOperationRequest({ resourceGroupName, options }, listByResourceGroupOperationSpec);
    }
    /**
     * Creates or updates a Visual Studio Team Services account resource.
     * @param resourceGroupName Name of the resource group within the Azure subscription.
     * @param resourceName Name of the resource.
     * @param body The request data.
     * @param options The options parameters.
     */
    createOrUpdate(resourceGroupName, resourceName, body, options) {
        return this.client.sendOperationRequest({ resourceGroupName, resourceName, body, options }, createOrUpdateOperationSpec);
    }
    /**
     * Deletes a Visual Studio Team Services account resource.
     * @param resourceGroupName Name of the resource group within the Azure subscription.
     * @param resourceName Name of the resource.
     * @param options The options parameters.
     */
    delete(resourceGroupName, resourceName, options) {
        return this.client.sendOperationRequest({ resourceGroupName, resourceName, options }, deleteOperationSpec);
    }
    /**
     * Gets the Visual Studio Team Services account resource details.
     * @param resourceGroupName Name of the resource group within the Azure subscription.
     * @param resourceName Name of the resource.
     * @param options The options parameters.
     */
    get(resourceGroupName, resourceName, options) {
        return this.client.sendOperationRequest({ resourceGroupName, resourceName, options }, getOperationSpec);
    }
    /**
     * Updates tags for Visual Studio Team Services account resource.
     * @param resourceGroupName Name of the resource group within the Azure subscription.
     * @param resourceName Name of the resource.
     * @param body The request data.
     * @param options The options parameters.
     */
    update(resourceGroupName, resourceName, body, options) {
        return this.client.sendOperationRequest({ resourceGroupName, resourceName, body, options }, updateOperationSpec);
    }
}
// Operation Specifications
const serializer = coreClient.createSerializer(Mappers, /* isXml */ false);
const checkNameAvailabilityOperationSpec = {
    path: "/subscriptions/{subscriptionId}/providers/microsoft.visualstudio/checkNameAvailability",
    httpMethod: "POST",
    responses: {
        200: {
            bodyMapper: Mappers.CheckNameAvailabilityResult
        }
    },
    requestBody: Parameters.body,
    queryParameters: [Parameters.apiVersion],
    urlParameters: [Parameters.$host, Parameters.subscriptionId],
    headerParameters: [Parameters.accept, Parameters.contentType],
    mediaType: "json",
    serializer
};
const listByResourceGroupOperationSpec = {
    path: "/subscriptions/{subscriptionId}/resourcegroups/{resourceGroupName}/providers/microsoft.visualstudio/account",
    httpMethod: "GET",
    responses: {
        200: {
            bodyMapper: Mappers.AccountResourceListResult
        }
    },
    queryParameters: [Parameters.apiVersion],
    urlParameters: [
        Parameters.$host,
        Parameters.subscriptionId,
        Parameters.resourceGroupName
    ],
    headerParameters: [Parameters.accept],
    serializer
};
const createOrUpdateOperationSpec = {
    path: "/subscriptions/{subscriptionId}/resourcegroups/{resourceGroupName}/providers/microsoft.visualstudio/account/{resourceName}",
    httpMethod: "PUT",
    responses: {
        200: {
            bodyMapper: Mappers.AccountResource
        },
        404: {}
    },
    requestBody: Parameters.body1,
    queryParameters: [Parameters.apiVersion],
    urlParameters: [
        Parameters.$host,
        Parameters.subscriptionId,
        Parameters.resourceGroupName,
        Parameters.resourceName
    ],
    headerParameters: [Parameters.accept, Parameters.contentType],
    mediaType: "json",
    serializer
};
const deleteOperationSpec = {
    path: "/subscriptions/{subscriptionId}/resourcegroups/{resourceGroupName}/providers/microsoft.visualstudio/account/{resourceName}",
    httpMethod: "DELETE",
    responses: { 200: {} },
    queryParameters: [Parameters.apiVersion],
    urlParameters: [
        Parameters.$host,
        Parameters.subscriptionId,
        Parameters.resourceGroupName,
        Parameters.resourceName
    ],
    serializer
};
const getOperationSpec = {
    path: "/subscriptions/{subscriptionId}/resourcegroups/{resourceGroupName}/providers/microsoft.visualstudio/account/{resourceName}",
    httpMethod: "GET",
    responses: {
        200: {
            bodyMapper: Mappers.AccountResource
        },
        404: {}
    },
    queryParameters: [Parameters.apiVersion],
    urlParameters: [
        Parameters.$host,
        Parameters.subscriptionId,
        Parameters.resourceGroupName,
        Parameters.resourceName
    ],
    headerParameters: [Parameters.accept],
    serializer
};
const updateOperationSpec = {
    path: "/subscriptions/{subscriptionId}/resourcegroups/{resourceGroupName}/providers/microsoft.visualstudio/account/{resourceName}",
    httpMethod: "PATCH",
    responses: {
        200: {
            bodyMapper: Mappers.AccountResource
        },
        404: {}
    },
    requestBody: Parameters.body2,
    queryParameters: [Parameters.apiVersion],
    urlParameters: [
        Parameters.$host,
        Parameters.subscriptionId,
        Parameters.resourceGroupName,
        Parameters.resourceName
    ],
    headerParameters: [Parameters.accept, Parameters.contentType],
    mediaType: "json",
    serializer
};
//# sourceMappingURL=accounts.js.map