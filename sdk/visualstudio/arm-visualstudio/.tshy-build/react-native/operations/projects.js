/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */
import * as coreClient from "@azure/core-client";
import * as Mappers from "../models/mappers.js";
import * as Parameters from "../models/parameters.js";
import { LroEngine } from "@azure/core-lro";
import { LroImpl } from "../lroImpl.js";
/** Class containing Projects operations. */
export class ProjectsImpl {
    /**
     * Initialize a new instance of the class Projects class.
     * @param client Reference to the service client
     */
    constructor(client) {
        this.client = client;
    }
    /**
     * Gets all Visual Studio Team Services project resources created in the specified Team Services
     * account.
     * @param resourceGroupName Name of the resource group within the Azure subscription.
     * @param rootResourceName Name of the Team Services account.
     * @param options The options parameters.
     */
    listByResourceGroup(resourceGroupName, rootResourceName, options) {
        return this.client.sendOperationRequest({ resourceGroupName, rootResourceName, options }, listByResourceGroupOperationSpec);
    }
    /**
     * Creates a Team Services project in the collection with the specified name. 'VersionControlOption'
     * and 'ProcessTemplateId' must be specified in the resource properties. Valid values for
     * VersionControlOption: Git, Tfvc. Valid values for ProcessTemplateId:
     * 6B724908-EF14-45CF-84F8-768B5384DA45, ADCC42AB-9882-485E-A3ED-7678F01F66BC,
     * 27450541-8E31-4150-9947-DC59F998FC01 (these IDs correspond to Scrum, Agile, and CMMI process
     * templates).
     * @param resourceGroupName Name of the resource group within the Azure subscription.
     * @param rootResourceName Name of the Team Services account.
     * @param resourceName Name of the Team Services project.
     * @param body The request data.
     * @param options The options parameters.
     */
    async beginCreate(resourceGroupName, rootResourceName, resourceName, body, options) {
        const directSendOperation = async (args, spec) => {
            return this.client.sendOperationRequest(args, spec);
        };
        const sendOperation = async (args, spec) => {
            var _a;
            let currentRawResponse = undefined;
            const providedCallback = (_a = args.options) === null || _a === void 0 ? void 0 : _a.onResponse;
            const callback = (rawResponse, flatResponse) => {
                currentRawResponse = rawResponse;
                providedCallback === null || providedCallback === void 0 ? void 0 : providedCallback(rawResponse, flatResponse);
            };
            const updatedArgs = Object.assign(Object.assign({}, args), { options: Object.assign(Object.assign({}, args.options), { onResponse: callback }) });
            const flatResponse = await directSendOperation(updatedArgs, spec);
            return {
                flatResponse,
                rawResponse: {
                    statusCode: currentRawResponse.status,
                    body: currentRawResponse.parsedBody,
                    headers: currentRawResponse.headers.toJSON()
                }
            };
        };
        const lro = new LroImpl(sendOperation, { resourceGroupName, rootResourceName, resourceName, body, options }, createOperationSpec);
        const poller = new LroEngine(lro, {
            resumeFrom: options === null || options === void 0 ? void 0 : options.resumeFrom,
            intervalInMs: options === null || options === void 0 ? void 0 : options.updateIntervalInMs
        });
        await poller.poll();
        return poller;
    }
    /**
     * Creates a Team Services project in the collection with the specified name. 'VersionControlOption'
     * and 'ProcessTemplateId' must be specified in the resource properties. Valid values for
     * VersionControlOption: Git, Tfvc. Valid values for ProcessTemplateId:
     * 6B724908-EF14-45CF-84F8-768B5384DA45, ADCC42AB-9882-485E-A3ED-7678F01F66BC,
     * 27450541-8E31-4150-9947-DC59F998FC01 (these IDs correspond to Scrum, Agile, and CMMI process
     * templates).
     * @param resourceGroupName Name of the resource group within the Azure subscription.
     * @param rootResourceName Name of the Team Services account.
     * @param resourceName Name of the Team Services project.
     * @param body The request data.
     * @param options The options parameters.
     */
    async beginCreateAndWait(resourceGroupName, rootResourceName, resourceName, body, options) {
        const poller = await this.beginCreate(resourceGroupName, rootResourceName, resourceName, body, options);
        return poller.pollUntilDone();
    }
    /**
     * Gets the details of a Team Services project resource.
     * @param resourceGroupName Name of the resource group within the Azure subscription.
     * @param rootResourceName Name of the Team Services account.
     * @param resourceName Name of the Team Services project.
     * @param options The options parameters.
     */
    get(resourceGroupName, rootResourceName, resourceName, options) {
        return this.client.sendOperationRequest({ resourceGroupName, rootResourceName, resourceName, options }, getOperationSpec);
    }
    /**
     * Updates the tags of the specified Team Services project.
     * @param resourceGroupName Name of the resource group within the Azure subscription.
     * @param rootResourceName Name of the Team Services account.
     * @param resourceName Name of the Team Services project.
     * @param body The request data.
     * @param options The options parameters.
     */
    update(resourceGroupName, rootResourceName, resourceName, body, options) {
        return this.client.sendOperationRequest({ resourceGroupName, rootResourceName, resourceName, body, options }, updateOperationSpec);
    }
    /**
     * Gets the status of the project resource creation job.
     * @param resourceGroupName Name of the resource group within the Azure subscription.
     * @param rootResourceName Name of the Team Services account.
     * @param resourceName Name of the Team Services project.
     * @param subContainerName This parameter should be set to the resourceName.
     * @param operation The operation type. The only supported value is 'put'.
     * @param options The options parameters.
     */
    getJobStatus(resourceGroupName, rootResourceName, resourceName, subContainerName, operation, options) {
        return this.client.sendOperationRequest({
            resourceGroupName,
            rootResourceName,
            resourceName,
            subContainerName,
            operation,
            options
        }, getJobStatusOperationSpec);
    }
}
// Operation Specifications
const serializer = coreClient.createSerializer(Mappers, /* isXml */ false);
const listByResourceGroupOperationSpec = {
    path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/microsoft.visualstudio/account/{rootResourceName}/project",
    httpMethod: "GET",
    responses: {
        200: {
            bodyMapper: Mappers.ProjectResourceListResult
        }
    },
    queryParameters: [Parameters.apiVersion],
    urlParameters: [
        Parameters.$host,
        Parameters.subscriptionId,
        Parameters.resourceGroupName,
        Parameters.rootResourceName
    ],
    headerParameters: [Parameters.accept],
    serializer
};
const createOperationSpec = {
    path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/microsoft.visualstudio/account/{rootResourceName}/project/{resourceName}",
    httpMethod: "PUT",
    responses: {
        200: {
            bodyMapper: Mappers.ProjectResource
        },
        201: {
            bodyMapper: Mappers.ProjectResource
        },
        202: {
            bodyMapper: Mappers.ProjectResource
        },
        204: {
            bodyMapper: Mappers.ProjectResource
        }
    },
    requestBody: Parameters.body4,
    queryParameters: [Parameters.apiVersion, Parameters.validating],
    urlParameters: [
        Parameters.$host,
        Parameters.subscriptionId,
        Parameters.resourceGroupName,
        Parameters.resourceName,
        Parameters.rootResourceName
    ],
    headerParameters: [Parameters.accept, Parameters.contentType],
    mediaType: "json",
    serializer
};
const getOperationSpec = {
    path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/microsoft.visualstudio/account/{rootResourceName}/project/{resourceName}",
    httpMethod: "GET",
    responses: {
        200: {
            bodyMapper: Mappers.ProjectResource
        },
        404: {}
    },
    queryParameters: [Parameters.apiVersion],
    urlParameters: [
        Parameters.$host,
        Parameters.subscriptionId,
        Parameters.resourceGroupName,
        Parameters.resourceName,
        Parameters.rootResourceName
    ],
    headerParameters: [Parameters.accept],
    serializer
};
const updateOperationSpec = {
    path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/microsoft.visualstudio/account/{rootResourceName}/project/{resourceName}",
    httpMethod: "PATCH",
    responses: {
        200: {
            bodyMapper: Mappers.ProjectResource
        }
    },
    requestBody: Parameters.body4,
    queryParameters: [Parameters.apiVersion],
    urlParameters: [
        Parameters.$host,
        Parameters.subscriptionId,
        Parameters.resourceGroupName,
        Parameters.resourceName,
        Parameters.rootResourceName
    ],
    headerParameters: [Parameters.accept, Parameters.contentType],
    mediaType: "json",
    serializer
};
const getJobStatusOperationSpec = {
    path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/microsoft.visualstudio/account/{rootResourceName}/project/{resourceName}/subContainers/{subContainerName}/status",
    httpMethod: "GET",
    responses: {
        200: {
            bodyMapper: Mappers.ProjectResource
        },
        202: {}
    },
    queryParameters: [
        Parameters.apiVersion,
        Parameters.operation,
        Parameters.jobId
    ],
    urlParameters: [
        Parameters.$host,
        Parameters.subscriptionId,
        Parameters.resourceGroupName,
        Parameters.resourceName,
        Parameters.rootResourceName,
        Parameters.subContainerName
    ],
    headerParameters: [Parameters.accept],
    serializer
};
//# sourceMappingURL=projects.js.map