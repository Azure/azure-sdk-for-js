/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */

import {
  OperationParameter,
  OperationURLParameter,
  OperationQueryParameter
} from "@azure/core-client";
import {
  CheckNameAvailabilityParameter as CheckNameAvailabilityParameterMapper,
  AccountResourceRequest as AccountResourceRequestMapper,
  AccountTagRequest as AccountTagRequestMapper,
  ExtensionResourceRequest as ExtensionResourceRequestMapper,
  ProjectResource as ProjectResourceMapper
} from "../models/mappers";

export const accept: OperationParameter = {
  parameterPath: "accept",
  mapper: {
    defaultValue: "application/json",
    isConstant: true,
    serializedName: "Accept",
    type: {
      name: "String"
    }
  }
};

export const $host: OperationURLParameter = {
  parameterPath: "$host",
  mapper: {
    serializedName: "$host",
    required: true,
    type: {
      name: "String"
    }
  },
  skipEncoding: true
};

export const contentType: OperationParameter = {
  parameterPath: ["options", "contentType"],
  mapper: {
    defaultValue: "application/json",
    isConstant: true,
    serializedName: "Content-Type",
    type: {
      name: "String"
    }
  }
};

export const body: OperationParameter = {
  parameterPath: "body",
  mapper: CheckNameAvailabilityParameterMapper
};

export const subscriptionId: OperationURLParameter = {
  parameterPath: "subscriptionId",
  mapper: {
    serializedName: "subscriptionId",
    required: true,
    type: {
      name: "String"
    }
  }
};

export const apiVersion: OperationQueryParameter = {
  parameterPath: "apiVersion",
  mapper: {
    defaultValue: "2014-04-01-preview",
    isConstant: true,
    serializedName: "api-version",
    type: {
      name: "String"
    }
  }
};

export const resourceGroupName: OperationURLParameter = {
  parameterPath: "resourceGroupName",
  mapper: {
    serializedName: "resourceGroupName",
    required: true,
    type: {
      name: "String"
    }
  }
};

export const body1: OperationParameter = {
  parameterPath: "body",
  mapper: AccountResourceRequestMapper
};

export const resourceName: OperationURLParameter = {
  parameterPath: "resourceName",
  mapper: {
    serializedName: "resourceName",
    required: true,
    type: {
      name: "String"
    }
  }
};

export const body2: OperationParameter = {
  parameterPath: "body",
  mapper: AccountTagRequestMapper
};

export const accountResourceName: OperationURLParameter = {
  parameterPath: "accountResourceName",
  mapper: {
    serializedName: "accountResourceName",
    required: true,
    type: {
      name: "String"
    }
  }
};

export const body3: OperationParameter = {
  parameterPath: "body",
  mapper: ExtensionResourceRequestMapper
};

export const extensionResourceName: OperationURLParameter = {
  parameterPath: "extensionResourceName",
  mapper: {
    serializedName: "extensionResourceName",
    required: true,
    type: {
      name: "String"
    }
  }
};

export const rootResourceName: OperationURLParameter = {
  parameterPath: "rootResourceName",
  mapper: {
    serializedName: "rootResourceName",
    required: true,
    type: {
      name: "String"
    }
  }
};

export const body4: OperationParameter = {
  parameterPath: "body",
  mapper: ProjectResourceMapper
};

export const validating: OperationQueryParameter = {
  parameterPath: ["options", "validating"],
  mapper: {
    serializedName: "validating",
    type: {
      name: "String"
    }
  }
};

export const subContainerName: OperationURLParameter = {
  parameterPath: "subContainerName",
  mapper: {
    serializedName: "subContainerName",
    required: true,
    type: {
      name: "String"
    }
  }
};

export const operation: OperationQueryParameter = {
  parameterPath: "operation",
  mapper: {
    serializedName: "operation",
    required: true,
    type: {
      name: "String"
    }
  }
};

export const jobId: OperationQueryParameter = {
  parameterPath: ["options", "jobId"],
  mapper: {
    serializedName: "jobId",
    type: {
      name: "Uuid"
    }
  }
};
