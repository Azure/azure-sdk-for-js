/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */

import { PagedAsyncIterableIterator } from "@azure/core-paging";
import { PollerLike, PollOperationState } from "@azure/core-lro";
import {
  DiskPool,
  DiskPoolsListBySubscriptionOptionalParams,
  DiskPoolsListByResourceGroupOptionalParams,
  OutboundEnvironmentEndpoint,
  DiskPoolsListOutboundNetworkDependenciesEndpointsOptionalParams,
  DiskPoolCreate,
  DiskPoolsCreateOrUpdateOptionalParams,
  DiskPoolsCreateOrUpdateResponse,
  DiskPoolUpdate,
  DiskPoolsUpdateOptionalParams,
  DiskPoolsUpdateResponse,
  DiskPoolsDeleteOptionalParams,
  DiskPoolsGetOptionalParams,
  DiskPoolsGetResponse,
  DiskPoolsStartOptionalParams,
  DiskPoolsDeallocateOptionalParams,
  DiskPoolsUpgradeOptionalParams
} from "../models";

/// <reference lib="esnext.asynciterable" />
/** Interface representing a DiskPools. */
export interface DiskPools {
  /**
   * Gets a list of Disk Pools in a subscription
   * @param options The options parameters.
   */
  listBySubscription(
    options?: DiskPoolsListBySubscriptionOptionalParams
  ): PagedAsyncIterableIterator<DiskPool>;
  /**
   * Gets a list of DiskPools in a resource group.
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param options The options parameters.
   */
  listByResourceGroup(
    resourceGroupName: string,
    options?: DiskPoolsListByResourceGroupOptionalParams
  ): PagedAsyncIterableIterator<DiskPool>;
  /**
   * Gets the network endpoints of all outbound dependencies of a Disk Pool
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param diskPoolName The name of the Disk Pool.
   * @param options The options parameters.
   */
  listOutboundNetworkDependenciesEndpoints(
    resourceGroupName: string,
    diskPoolName: string,
    options?: DiskPoolsListOutboundNetworkDependenciesEndpointsOptionalParams
  ): PagedAsyncIterableIterator<OutboundEnvironmentEndpoint>;
  /**
   * Create or Update Disk pool. This create or update operation can take 15 minutes to complete. This is
   * expected service behavior.
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param diskPoolName The name of the Disk Pool.
   * @param diskPoolCreatePayload Request payload for Disk Pool create operation
   * @param options The options parameters.
   */
  beginCreateOrUpdate(
    resourceGroupName: string,
    diskPoolName: string,
    diskPoolCreatePayload: DiskPoolCreate,
    options?: DiskPoolsCreateOrUpdateOptionalParams
  ): Promise<
    PollerLike<
      PollOperationState<DiskPoolsCreateOrUpdateResponse>,
      DiskPoolsCreateOrUpdateResponse
    >
  >;
  /**
   * Create or Update Disk pool. This create or update operation can take 15 minutes to complete. This is
   * expected service behavior.
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param diskPoolName The name of the Disk Pool.
   * @param diskPoolCreatePayload Request payload for Disk Pool create operation
   * @param options The options parameters.
   */
  beginCreateOrUpdateAndWait(
    resourceGroupName: string,
    diskPoolName: string,
    diskPoolCreatePayload: DiskPoolCreate,
    options?: DiskPoolsCreateOrUpdateOptionalParams
  ): Promise<DiskPoolsCreateOrUpdateResponse>;
  /**
   * Update a Disk pool.
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param diskPoolName The name of the Disk Pool.
   * @param diskPoolUpdatePayload Request payload for Disk Pool update operation.
   * @param options The options parameters.
   */
  beginUpdate(
    resourceGroupName: string,
    diskPoolName: string,
    diskPoolUpdatePayload: DiskPoolUpdate,
    options?: DiskPoolsUpdateOptionalParams
  ): Promise<
    PollerLike<
      PollOperationState<DiskPoolsUpdateResponse>,
      DiskPoolsUpdateResponse
    >
  >;
  /**
   * Update a Disk pool.
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param diskPoolName The name of the Disk Pool.
   * @param diskPoolUpdatePayload Request payload for Disk Pool update operation.
   * @param options The options parameters.
   */
  beginUpdateAndWait(
    resourceGroupName: string,
    diskPoolName: string,
    diskPoolUpdatePayload: DiskPoolUpdate,
    options?: DiskPoolsUpdateOptionalParams
  ): Promise<DiskPoolsUpdateResponse>;
  /**
   * Delete a Disk pool; attached disks are not affected. This delete operation can take 10 minutes to
   * complete. This is expected service behavior.
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param diskPoolName The name of the Disk Pool.
   * @param options The options parameters.
   */
  beginDelete(
    resourceGroupName: string,
    diskPoolName: string,
    options?: DiskPoolsDeleteOptionalParams
  ): Promise<PollerLike<PollOperationState<void>, void>>;
  /**
   * Delete a Disk pool; attached disks are not affected. This delete operation can take 10 minutes to
   * complete. This is expected service behavior.
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param diskPoolName The name of the Disk Pool.
   * @param options The options parameters.
   */
  beginDeleteAndWait(
    resourceGroupName: string,
    diskPoolName: string,
    options?: DiskPoolsDeleteOptionalParams
  ): Promise<void>;
  /**
   * Get a Disk pool.
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param diskPoolName The name of the Disk Pool.
   * @param options The options parameters.
   */
  get(
    resourceGroupName: string,
    diskPoolName: string,
    options?: DiskPoolsGetOptionalParams
  ): Promise<DiskPoolsGetResponse>;
  /**
   * The operation to start a Disk Pool. This start operation can take 10 minutes to complete. This is
   * expected service behavior.
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param diskPoolName The name of the Disk Pool.
   * @param options The options parameters.
   */
  beginStart(
    resourceGroupName: string,
    diskPoolName: string,
    options?: DiskPoolsStartOptionalParams
  ): Promise<PollerLike<PollOperationState<void>, void>>;
  /**
   * The operation to start a Disk Pool. This start operation can take 10 minutes to complete. This is
   * expected service behavior.
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param diskPoolName The name of the Disk Pool.
   * @param options The options parameters.
   */
  beginStartAndWait(
    resourceGroupName: string,
    diskPoolName: string,
    options?: DiskPoolsStartOptionalParams
  ): Promise<void>;
  /**
   * Shuts down the Disk Pool and releases the compute resources. You are not billed for the compute
   * resources that this Disk Pool uses. This operation can take 10 minutes to complete. This is expected
   * service behavior.
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param diskPoolName The name of the Disk Pool.
   * @param options The options parameters.
   */
  beginDeallocate(
    resourceGroupName: string,
    diskPoolName: string,
    options?: DiskPoolsDeallocateOptionalParams
  ): Promise<PollerLike<PollOperationState<void>, void>>;
  /**
   * Shuts down the Disk Pool and releases the compute resources. You are not billed for the compute
   * resources that this Disk Pool uses. This operation can take 10 minutes to complete. This is expected
   * service behavior.
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param diskPoolName The name of the Disk Pool.
   * @param options The options parameters.
   */
  beginDeallocateAndWait(
    resourceGroupName: string,
    diskPoolName: string,
    options?: DiskPoolsDeallocateOptionalParams
  ): Promise<void>;
  /**
   * Upgrade replaces the underlying virtual machine hosts one at a time. This operation can take 10-15
   * minutes to complete. This is expected service behavior.
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param diskPoolName The name of the Disk Pool.
   * @param options The options parameters.
   */
  beginUpgrade(
    resourceGroupName: string,
    diskPoolName: string,
    options?: DiskPoolsUpgradeOptionalParams
  ): Promise<PollerLike<PollOperationState<void>, void>>;
  /**
   * Upgrade replaces the underlying virtual machine hosts one at a time. This operation can take 10-15
   * minutes to complete. This is expected service behavior.
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param diskPoolName The name of the Disk Pool.
   * @param options The options parameters.
   */
  beginUpgradeAndWait(
    resourceGroupName: string,
    diskPoolName: string,
    options?: DiskPoolsUpgradeOptionalParams
  ): Promise<void>;
}
