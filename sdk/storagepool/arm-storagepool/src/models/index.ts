/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */

import * as coreClient from "@azure/core-client";

/** List of operations supported by the RP. */
export interface StoragePoolOperationListResult {
  /** An array of operations supported by the StoragePool RP. */
  value: StoragePoolRPOperation[];
  /** URI to fetch the next section of the paginated response. */
  nextLink?: string;
}

/** Description of a StoragePool RP Operation */
export interface StoragePoolRPOperation {
  /** The name of the operation being performed on this particular object */
  name: string;
  /** Indicates whether the operation applies to data-plane. */
  isDataAction: boolean;
  /** Indicates the action type. */
  actionType?: string;
  /** Additional metadata about RP operation. */
  display: StoragePoolOperationDisplay;
  /** The intended executor of the operation; governs the display of the operation in the RBAC UX and the audit logs UX. */
  origin?: string;
}

/** Metadata about an operation. */
export interface StoragePoolOperationDisplay {
  /** Localized friendly form of the resource provider name. */
  provider: string;
  /** Localized friendly form of the resource type related to this action/operation. */
  resource: string;
  /** Localized friendly name for the operation, as it should be shown to the user. */
  operation: string;
  /** Localized friendly description for the operation, as it should be shown to the user. */
  description: string;
}

/** The resource management error response. */
export interface ErrorModel {
  /** RP error response. */
  error?: ErrorResponse;
}

/** The resource management error response. */
export interface ErrorResponse {
  /**
   * The error code.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly code?: string;
  /**
   * The error message.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly message?: string;
  /**
   * The error target.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly target?: string;
  /**
   * The error details.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly details?: ErrorResponse[];
  /**
   * The error additional info.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly additionalInfo?: ErrorAdditionalInfo[];
}

/** The resource management error additional info. */
export interface ErrorAdditionalInfo {
  /**
   * The additional info type.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly type?: string;
  /**
   * The additional info.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly info?: Record<string, unknown>;
}

/** List of Disk Pools */
export interface DiskPoolListResult {
  /** An array of Disk pool objects. */
  value: DiskPool[];
  /**
   * URI to fetch the next section of the paginated response.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly nextLink?: string;
}

/** Sku for ARM resource */
export interface Sku {
  /** Sku name */
  name: string;
  /** Sku tier */
  tier?: string;
}

/** Azure Managed Disk to attach to the Disk Pool. */
export interface Disk {
  /** Unique Azure Resource ID of the Managed Disk. */
  id: string;
}

/** Metadata pertaining to creation and last modification of the resource. */
export interface SystemMetadata {
  /** The identity that created the resource. */
  createdBy?: string;
  /** The type of identity that created the resource. */
  createdByType?: CreatedByType;
  /** The timestamp of resource creation (UTC). */
  createdAt?: Date;
  /** The identity that last modified the resource. */
  lastModifiedBy?: string;
  /** The type of identity that last modified the resource. */
  lastModifiedByType?: CreatedByType;
  /** The type of identity that last modified the resource. */
  lastModifiedAt?: Date;
}

/** ARM resource model definition. */
export interface Resource {
  /**
   * Fully qualified resource Id for the resource. Ex - /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly id?: string;
  /**
   * The name of the resource
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly name?: string;
  /**
   * The type of the resource. Ex- Microsoft.Compute/virtualMachines or Microsoft.Storage/storageAccounts.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly type?: string;
}

/** Request payload for create or update Disk Pool request. */
export interface DiskPoolCreate {
  /** Determines the SKU of the Disk Pool */
  sku: Sku;
  /** Resource tags. */
  tags?: { [propertyName: string]: string };
  /** The geo-location where the resource lives. */
  location: string;
  /**
   * Fully qualified resource Id for the resource. Ex - /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly id?: string;
  /**
   * The name of the resource
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly name?: string;
  /**
   * The type of the resource. Ex- Microsoft.Compute/virtualMachines or Microsoft.Storage/storageAccounts.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly type?: string;
  /** Azure resource id. Indicates if this resource is managed by another Azure resource. */
  managedBy?: string;
  /** List of Azure resource ids that manage this resource. */
  managedByExtended?: string[];
  /** Logical zone for Disk Pool resource; example: ["1"]. */
  availabilityZones?: string[];
  /** List of Azure Managed Disks to attach to a Disk Pool. */
  disks?: Disk[];
  /** Azure Resource ID of a Subnet for the Disk Pool. */
  subnetId: string;
  /** List of additional capabilities for a Disk Pool. */
  additionalCapabilities?: string[];
}

/** Request payload for Update Disk Pool request. */
export interface DiskPoolUpdate {
  /** Azure resource id. Indicates if this resource is managed by another Azure resource. */
  managedBy?: string;
  /** List of Azure resource ids that manage this resource. */
  managedByExtended?: string[];
  /** Determines the SKU of the Disk Pool */
  sku?: Sku;
  /** Resource tags. */
  tags?: { [propertyName: string]: string };
  /** List of Azure Managed Disks to attach to a Disk Pool. */
  disks?: Disk[];
}

/** List Disk Pool skus operation response. */
export interface DiskPoolZoneListResult {
  /**
   * The list of Disk Pool Skus.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly value?: DiskPoolZoneInfo[];
  /**
   * URI to fetch the next section of the paginated response.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly nextLink?: string;
}

/** Disk Pool SKU Details */
export interface DiskPoolZoneInfo {
  /**
   * Logical zone for Disk Pool resource; example: ["1"].
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly availabilityZones?: string[];
  /**
   * List of additional capabilities for Disk Pool.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly additionalCapabilities?: string[];
  /**
   * Determines the SKU of VM deployed for Disk Pool
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly sku?: Sku;
}

/** List Disk Pool skus operation response. */
export interface ResourceSkuListResult {
  /** The list of StoragePool resource skus. */
  value?: ResourceSkuInfo[];
  /** URI to fetch the next section of the paginated response. */
  nextLink?: string;
}

/** Resource SKU Details */
export interface ResourceSkuInfo {
  /**
   * StoragePool RP API version
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly apiVersion?: string;
  /**
   * StoragePool resource type
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly resourceType?: string;
  /**
   * List of additional capabilities for StoragePool resource.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly capabilities?: ResourceSkuCapability[];
  /**
   * Zones and zone capabilities in those locations where the SKU is available.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly locationInfo?: ResourceSkuLocationInfo;
  /**
   * Sku name
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly name?: string;
  /**
   * Sku tier
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly tier?: string;
  /**
   * The restrictions because of which SKU cannot be used. This is empty if there are no restrictions.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly restrictions?: ResourceSkuRestrictions[];
}

/** Capability a resource SKU has. */
export interface ResourceSkuCapability {
  /**
   * Capability name
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly name?: string;
  /**
   * Capability value
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly value?: string;
}

/** Zone and capability info for resource sku */
export interface ResourceSkuLocationInfo {
  /**
   * Location of the SKU
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly location?: string;
  /**
   * List of availability zones where the SKU is supported.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly zones?: string[];
  /**
   * Details of capabilities available to a SKU in specific zones.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly zoneDetails?: ResourceSkuZoneDetails[];
}

/** Describes The zonal capabilities of a SKU. */
export interface ResourceSkuZoneDetails {
  /**
   * The set of zones that the SKU is available in with the specified capabilities.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly name?: string[];
  /**
   * A list of capabilities that are available for the SKU in the specified list of zones.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly capabilities?: ResourceSkuCapability[];
}

/** Describes scaling information of a SKU. */
export interface ResourceSkuRestrictions {
  /**
   * The type of restrictions.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly type?: ResourceSkuRestrictionsType;
  /**
   * The value of restrictions. If the restriction type is set to location. This would be different locations where the SKU is restricted.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly values?: string[];
  /**
   * The information about the restriction where the SKU cannot be used.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly restrictionInfo?: ResourceSkuRestrictionInfo;
  /**
   * The reason for restriction.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly reasonCode?: ResourceSkuRestrictionsReasonCode;
}

/** Describes an available Compute SKU Restriction Information. */
export interface ResourceSkuRestrictionInfo {
  /**
   * Locations where the SKU is restricted
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly locations?: string[];
  /**
   * List of availability zones where the SKU is restricted.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly zones?: string[];
}

/** Collection of Outbound Environment Endpoints */
export interface OutboundEnvironmentEndpointList {
  /** Collection of resources. */
  value: OutboundEnvironmentEndpoint[];
  /**
   * Link to next page of resources.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly nextLink?: string;
}

/** Endpoints accessed for a common purpose that the App Service Environment requires outbound network access to. */
export interface OutboundEnvironmentEndpoint {
  /** The type of service accessed by the App Service Environment, e.g., Azure Storage, Azure SQL Database, and Azure Active Directory. */
  category?: string;
  /** The endpoints that the App Service Environment reaches the service at. */
  endpoints?: EndpointDependency[];
}

/** A domain name that a service is reached at, including details of the current connection status. */
export interface EndpointDependency {
  /** The domain name of the dependency. */
  domainName?: string;
  /** The IP Addresses and Ports used when connecting to DomainName. */
  endpointDetails?: EndpointDetail[];
}

/** Current TCP connectivity information from the App Service Environment to a single endpoint. */
export interface EndpointDetail {
  /** An IP Address that Domain Name currently resolves to. */
  ipAddress?: string;
  /** The port an endpoint is connected to. */
  port?: number;
  /** The time in milliseconds it takes for a TCP connection to be created from the App Service Environment to this IpAddress at this Port. */
  latency?: number;
  /** Whether it is possible to create a TCP connection from the App Service Environment to this IpAddress at this Port. */
  isAccessible?: boolean;
}

/** List of iSCSI Targets. */
export interface IscsiTargetList {
  /** An array of iSCSI Targets in a Disk Pool. */
  value: IscsiTarget[];
  /**
   * URI to fetch the next section of the paginated response.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly nextLink?: string;
}

/** Access Control List (ACL) for an iSCSI Target; defines LUN masking policy */
export interface Acl {
  /** iSCSI initiator IQN (iSCSI Qualified Name); example: "iqn.2005-03.org.iscsi:client". */
  initiatorIqn: string;
  /** List of LUN names mapped to the ACL. */
  mappedLuns: string[];
}

/** LUN to expose the Azure Managed Disk. */
export interface IscsiLun {
  /** User defined name for iSCSI LUN; example: "lun0" */
  name: string;
  /** Azure Resource ID of the Managed Disk. */
  managedDiskAzureResourceId: string;
  /**
   * Specifies the Logical Unit Number of the iSCSI LUN.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly lun?: number;
}

/** The resource model definition for a ARM tracked top level resource. */
export type TrackedResource = Resource & {
  /** Resource tags. */
  tags?: { [propertyName: string]: string };
  /** The geo-location where the resource lives. */
  location: string;
};

/** The resource model definition for a ARM proxy resource. It will have everything other than required location and tags */
export type ProxyResource = Resource & {};

/** Response for Disk Pool request. */
export type DiskPool = TrackedResource & {
  /**
   * Azure resource id. Indicates if this resource is managed by another Azure resource.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly managedBy?: string;
  /**
   * List of Azure resource ids that manage this resource.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly managedByExtended?: string[];
  /**
   * Resource metadata required by ARM RPC
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly systemData?: SystemMetadata;
  /**
   * State of the operation on the resource.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly provisioningState: ProvisioningStates;
  /** Logical zone for Disk Pool resource; example: ["1"]. */
  availabilityZones: string[];
  /** Operational status of the Disk Pool. */
  status: OperationalStatus;
  /** List of Azure Managed Disks to attach to a Disk Pool. */
  disks?: Disk[];
  /** Azure Resource ID of a Subnet for the Disk Pool. */
  subnetId: string;
  /** List of additional capabilities for Disk Pool. */
  additionalCapabilities?: string[];
  /** Sku name */
  nameSkuName?: string;
  /** Sku tier */
  tier?: string;
};

/** Response for iSCSI Target requests. */
export type IscsiTarget = ProxyResource & {
  /**
   * Resource metadata required by ARM RPC
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly systemData?: SystemMetadata;
  /**
   * Azure resource id. Indicates if this resource is managed by another Azure resource.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly managedBy?: string;
  /**
   * List of Azure resource ids that manage this resource.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly managedByExtended?: string[];
  /** Mode for Target connectivity. */
  aclMode: IscsiTargetAclMode;
  /** Access Control List (ACL) for an iSCSI Target; defines LUN masking policy */
  staticAcls?: Acl[];
  /** List of LUNs to be exposed through iSCSI Target. */
  luns?: IscsiLun[];
  /** iSCSI Target IQN (iSCSI Qualified Name); example: "iqn.2005-03.org.iscsi:server". */
  targetIqn: string;
  /**
   * State of the operation on the resource.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly provisioningState: ProvisioningStates;
  /** Operational status of the iSCSI Target. */
  status: OperationalStatus;
  /** List of private IPv4 addresses to connect to the iSCSI Target. */
  endpoints?: string[];
  /** The port used by iSCSI Target portal group. */
  port?: number;
  /**
   * List of identifiers for active sessions on the iSCSI target
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly sessions?: string[];
};

/** Payload for iSCSI Target create or update requests. */
export type IscsiTargetCreate = ProxyResource & {
  /** Azure resource id. Indicates if this resource is managed by another Azure resource. */
  managedBy?: string;
  /** List of Azure resource ids that manage this resource. */
  managedByExtended?: string[];
  /** Mode for Target connectivity. */
  aclMode: IscsiTargetAclMode;
  /** iSCSI Target IQN (iSCSI Qualified Name); example: "iqn.2005-03.org.iscsi:server". */
  targetIqn?: string;
  /** Access Control List (ACL) for an iSCSI Target; defines LUN masking policy */
  staticAcls?: Acl[];
  /** List of LUNs to be exposed through iSCSI Target. */
  luns?: IscsiLun[];
};

/** Payload for iSCSI Target update requests. */
export type IscsiTargetUpdate = ProxyResource & {
  /** Azure resource id. Indicates if this resource is managed by another Azure resource. */
  managedBy?: string;
  /** List of Azure resource ids that manage this resource. */
  managedByExtended?: string[];
  /** Access Control List (ACL) for an iSCSI Target; defines LUN masking policy */
  staticAcls?: Acl[];
  /** List of LUNs to be exposed through iSCSI Target. */
  luns?: IscsiLun[];
};

/** Known values of {@link ProvisioningStates} that the service accepts. */
export enum KnownProvisioningStates {
  Invalid = "Invalid",
  Succeeded = "Succeeded",
  Failed = "Failed",
  Canceled = "Canceled",
  Pending = "Pending",
  Creating = "Creating",
  Updating = "Updating",
  Deleting = "Deleting"
}

/**
 * Defines values for ProvisioningStates. \
 * {@link KnownProvisioningStates} can be used interchangeably with ProvisioningStates,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **Invalid** \
 * **Succeeded** \
 * **Failed** \
 * **Canceled** \
 * **Pending** \
 * **Creating** \
 * **Updating** \
 * **Deleting**
 */
export type ProvisioningStates = string;

/** Known values of {@link OperationalStatus} that the service accepts. */
export enum KnownOperationalStatus {
  Invalid = "Invalid",
  Unknown = "Unknown",
  Healthy = "Healthy",
  Unhealthy = "Unhealthy",
  Updating = "Updating",
  Running = "Running",
  Stopped = "Stopped",
  StoppedDeallocated = "Stopped (deallocated)"
}

/**
 * Defines values for OperationalStatus. \
 * {@link KnownOperationalStatus} can be used interchangeably with OperationalStatus,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **Invalid** \
 * **Unknown** \
 * **Healthy** \
 * **Unhealthy** \
 * **Updating** \
 * **Running** \
 * **Stopped** \
 * **Stopped (deallocated)**
 */
export type OperationalStatus = string;

/** Known values of {@link CreatedByType} that the service accepts. */
export enum KnownCreatedByType {
  User = "User",
  Application = "Application",
  ManagedIdentity = "ManagedIdentity",
  Key = "Key"
}

/**
 * Defines values for CreatedByType. \
 * {@link KnownCreatedByType} can be used interchangeably with CreatedByType,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **User** \
 * **Application** \
 * **ManagedIdentity** \
 * **Key**
 */
export type CreatedByType = string;

/** Known values of {@link IscsiTargetAclMode} that the service accepts. */
export enum KnownIscsiTargetAclMode {
  Dynamic = "Dynamic",
  Static = "Static"
}

/**
 * Defines values for IscsiTargetAclMode. \
 * {@link KnownIscsiTargetAclMode} can be used interchangeably with IscsiTargetAclMode,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **Dynamic** \
 * **Static**
 */
export type IscsiTargetAclMode = string;

/** Known values of {@link DiskPoolTier} that the service accepts. */
export enum KnownDiskPoolTier {
  Basic = "Basic",
  Standard = "Standard",
  Premium = "Premium"
}

/**
 * Defines values for DiskPoolTier. \
 * {@link KnownDiskPoolTier} can be used interchangeably with DiskPoolTier,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **Basic** \
 * **Standard** \
 * **Premium**
 */
export type DiskPoolTier = string;
/** Defines values for ResourceSkuRestrictionsType. */
export type ResourceSkuRestrictionsType = "Location" | "Zone";
/** Defines values for ResourceSkuRestrictionsReasonCode. */
export type ResourceSkuRestrictionsReasonCode =
  | "QuotaId"
  | "NotAvailableForSubscription";

/** Optional parameters. */
export interface OperationsListOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the list operation. */
export type OperationsListResponse = StoragePoolOperationListResult;

/** Optional parameters. */
export interface DiskPoolsListBySubscriptionOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the listBySubscription operation. */
export type DiskPoolsListBySubscriptionResponse = DiskPoolListResult;

/** Optional parameters. */
export interface DiskPoolsListByResourceGroupOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the listByResourceGroup operation. */
export type DiskPoolsListByResourceGroupResponse = DiskPoolListResult;

/** Optional parameters. */
export interface DiskPoolsCreateOrUpdateOptionalParams
  extends coreClient.OperationOptions {
  /** Delay to wait until next poll, in milliseconds. */
  updateIntervalInMs?: number;
  /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */
  resumeFrom?: string;
}

/** Contains response data for the createOrUpdate operation. */
export type DiskPoolsCreateOrUpdateResponse = DiskPool;

/** Optional parameters. */
export interface DiskPoolsUpdateOptionalParams
  extends coreClient.OperationOptions {
  /** Delay to wait until next poll, in milliseconds. */
  updateIntervalInMs?: number;
  /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */
  resumeFrom?: string;
}

/** Contains response data for the update operation. */
export type DiskPoolsUpdateResponse = DiskPool;

/** Optional parameters. */
export interface DiskPoolsDeleteOptionalParams
  extends coreClient.OperationOptions {
  /** Delay to wait until next poll, in milliseconds. */
  updateIntervalInMs?: number;
  /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */
  resumeFrom?: string;
}

/** Optional parameters. */
export interface DiskPoolsGetOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the get operation. */
export type DiskPoolsGetResponse = DiskPool;

/** Optional parameters. */
export interface DiskPoolsListOutboundNetworkDependenciesEndpointsOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the listOutboundNetworkDependenciesEndpoints operation. */
export type DiskPoolsListOutboundNetworkDependenciesEndpointsResponse = OutboundEnvironmentEndpointList;

/** Optional parameters. */
export interface DiskPoolsStartOptionalParams
  extends coreClient.OperationOptions {
  /** Delay to wait until next poll, in milliseconds. */
  updateIntervalInMs?: number;
  /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */
  resumeFrom?: string;
}

/** Optional parameters. */
export interface DiskPoolsDeallocateOptionalParams
  extends coreClient.OperationOptions {
  /** Delay to wait until next poll, in milliseconds. */
  updateIntervalInMs?: number;
  /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */
  resumeFrom?: string;
}

/** Optional parameters. */
export interface DiskPoolsUpgradeOptionalParams
  extends coreClient.OperationOptions {
  /** Delay to wait until next poll, in milliseconds. */
  updateIntervalInMs?: number;
  /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */
  resumeFrom?: string;
}

/** Optional parameters. */
export interface DiskPoolsListBySubscriptionNextOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the listBySubscriptionNext operation. */
export type DiskPoolsListBySubscriptionNextResponse = DiskPoolListResult;

/** Optional parameters. */
export interface DiskPoolsListByResourceGroupNextOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the listByResourceGroupNext operation. */
export type DiskPoolsListByResourceGroupNextResponse = DiskPoolListResult;

/** Optional parameters. */
export interface DiskPoolsListOutboundNetworkDependenciesEndpointsNextOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the listOutboundNetworkDependenciesEndpointsNext operation. */
export type DiskPoolsListOutboundNetworkDependenciesEndpointsNextResponse = OutboundEnvironmentEndpointList;

/** Optional parameters. */
export interface DiskPoolZonesListOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the list operation. */
export type DiskPoolZonesListResponse = DiskPoolZoneListResult;

/** Optional parameters. */
export interface DiskPoolZonesListNextOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the listNext operation. */
export type DiskPoolZonesListNextResponse = DiskPoolZoneListResult;

/** Optional parameters. */
export interface ResourceSkusListOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the list operation. */
export type ResourceSkusListResponse = ResourceSkuListResult;

/** Optional parameters. */
export interface ResourceSkusListNextOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the listNext operation. */
export type ResourceSkusListNextResponse = ResourceSkuListResult;

/** Optional parameters. */
export interface IscsiTargetsListByDiskPoolOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the listByDiskPool operation. */
export type IscsiTargetsListByDiskPoolResponse = IscsiTargetList;

/** Optional parameters. */
export interface IscsiTargetsCreateOrUpdateOptionalParams
  extends coreClient.OperationOptions {
  /** Delay to wait until next poll, in milliseconds. */
  updateIntervalInMs?: number;
  /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */
  resumeFrom?: string;
}

/** Contains response data for the createOrUpdate operation. */
export type IscsiTargetsCreateOrUpdateResponse = IscsiTarget;

/** Optional parameters. */
export interface IscsiTargetsUpdateOptionalParams
  extends coreClient.OperationOptions {
  /** Delay to wait until next poll, in milliseconds. */
  updateIntervalInMs?: number;
  /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */
  resumeFrom?: string;
}

/** Contains response data for the update operation. */
export type IscsiTargetsUpdateResponse = IscsiTarget;

/** Optional parameters. */
export interface IscsiTargetsDeleteOptionalParams
  extends coreClient.OperationOptions {
  /** Delay to wait until next poll, in milliseconds. */
  updateIntervalInMs?: number;
  /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */
  resumeFrom?: string;
}

/** Optional parameters. */
export interface IscsiTargetsGetOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the get operation. */
export type IscsiTargetsGetResponse = IscsiTarget;

/** Optional parameters. */
export interface IscsiTargetsListByDiskPoolNextOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the listByDiskPoolNext operation. */
export type IscsiTargetsListByDiskPoolNextResponse = IscsiTargetList;

/** Optional parameters. */
export interface StoragePoolManagementOptionalParams
  extends coreClient.ServiceClientOptions {
  /** server parameter */
  $host?: string;
  /** Api Version */
  apiVersion?: string;
  /** Overrides client endpoint. */
  endpoint?: string;
}
