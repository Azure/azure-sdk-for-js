/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */

import { BaseResource, CloudError, AzureServiceClientOptions } from "@azure/ms-rest-azure-js";
import * as msRest from "@azure/ms-rest-js";

export { BaseResource, CloudError };

/**
 * Metadata about an operation.
 */
export interface StoragePoolOperationDisplay {
  /**
   * Localized friendly form of the resource provider name.
   */
  provider: string;
  /**
   * Localized friendly form of the resource type related to this action/operation.
   */
  resource: string;
  /**
   * Localized friendly name for the operation, as it should be shown to the user.
   */
  operation: string;
  /**
   * Localized friendly description for the operation, as it should be shown to the user.
   */
  description: string;
}

/**
 * Description of a StoragePool RP Operation
 */
export interface StoragePoolRPOperation {
  /**
   * The name of the operation being performed on this particular object
   */
  name: string;
  /**
   * Indicates whether the operation applies to data-plane.
   */
  isDataAction: boolean;
  /**
   * Indicates the action type.
   */
  actionType?: string;
  /**
   * Additional metadata about RP operation.
   */
  display: StoragePoolOperationDisplay;
  /**
   * The intended executor of the operation; governs the display of the operation in the RBAC UX
   * and the audit logs UX.
   */
  origin?: string;
}

/**
 * Managed disk to attach to the DiskPool. Required.
 */
export interface Disk {
  /**
   * Unique Azure resource id of the managed disk. Required.
   */
  id: string;
}

/**
 * The resource model definition representing SKU
 */
export interface Sku {
  /**
   * The name of the SKU. Ex - P3. It is typically a letter+number code
   */
  name: string;
  /**
   * This field is required to be implemented by the Resource Provider if the service has more than
   * one tier, but is not required on a PUT. Possible values include: 'Free', 'Basic', 'Standard',
   * 'Premium'
   */
  tier?: SkuTier;
  /**
   * The SKU size. When the name field is the combination of tier and some other value, this would
   * be the standalone code.
   */
  size?: string;
  /**
   * If the service has different generations of hardware, for the same SKU, then that can be
   * captured here.
   */
  family?: string;
  /**
   * If the SKU supports scale out/in then the capacity integer should be included. If scale out/in
   * is not possible for the resource this may be omitted.
   */
  capacity?: number;
}

/**
 * Resource metadata required by ARM RPC
 */
export interface SystemMetadata {
  /**
   * A string identifier for the identity that created the resource.
   */
  createdBy?: string;
  /**
   * The type of identity that created the resource: user, application, managedIdentity
   */
  createdByType?: string;
  /**
   * The timestamp of resource creation (UTC)
   */
  createdAt?: string;
  /**
   * A string identifier for the identity that last modified the resource
   */
  lastModifiedBy?: string;
  /**
   * The type of identity that last modified the resource: user, application, managedIdentity
   */
  lastModifiedByType?: string;
  /**
   * The timestamp of resource last modification (UTC)
   */
  lastModifiedAt?: string;
}

/**
 * ARM resource model definition.
 */
export interface Resource extends BaseResource {
  /**
   * Fully qualified resource Id for the resource. Ex -
   * /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly id?: string;
  /**
   * The name of the resource
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly name?: string;
  /**
   * The type of the resource. Ex- Microsoft.Compute/virtualMachines or
   * Microsoft.Storage/storageAccounts.
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly type?: string;
}

/**
 * The resource model definition for a ARM tracked top level resource
 */
export interface TrackedResource extends Resource {
  /**
   * Resource tags.
   */
  tags?: { [propertyName: string]: string };
  /**
   * The geo-location where the resource lives
   */
  location: string;
}

/**
 * Request payload for Create or Update Disk Pool requests.
 */
export interface DiskPool extends TrackedResource {
  /**
   * State of the operation on the resource. Possible values include: 'Invalid', 'Succeeded',
   * 'Failed', 'Canceled', 'Pending', 'Creating', 'Updating', 'Deleting'
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly provisioningState?: ProvisioningStates;
  /**
   * Logical zone for DiskPool resource.
   */
  availabilityZones: string[];
  /**
   * Operational status of the Disk pool. Possible values include: 'Invalid', 'Unknown', 'Healthy',
   * 'Unhealthy'
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly status?: OperationalStatus;
  /**
   * List of Azure managed disks to attach to a DiskPool
   */
  disks?: Disk[];
  /**
   * Azure resource id of the subnet for the DiskPool
   */
  subnetId: string;
  /**
   * Sku description.
   */
  sku?: Sku;
  /**
   * Resource metadata required by ARM RPC
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly systemData?: SystemMetadata;
}

/**
 * Lun to expose the ManagedDisk.
 */
export interface IscsiLun {
  /**
   * Lun name.
   */
  name: string;
  /**
   * Unique Azure resource id of the managed disk. Required.
   */
  managedDiskAzureResourceId: string;
}

/**
 * Access Control List (ACL) for an iSCSI target lun
 */
export interface Acl {
  /**
   * iSCSI initiator iqn (iSCSI Qualified Name); example: iqn.2005-03.org.iscsi:client
   */
  initiatorIqn: string;
  /**
   * Array of lun names mapped to the ACL
   */
  mappedLuns: string[];
  /**
   * Username for Challenge Handshake Authentication Protocol (CHAP) authentication
   */
  username: string;
  /**
   * Password for Challenge Handshake Authentication Protocol (CHAP) authentication
   */
  password: string;
}

/**
 * Attributes of an iSCSI target
 */
export interface Attributes {
  /**
   * Indicates whether or not authentication is enabled on the ACL.
   */
  authentication: boolean;
  /**
   * Indicates whether or not write protect is enabled on the luns.
   */
  prodModeWriteProtect: boolean;
}

/**
 * iSCSI target portal group
 */
export interface TargetPortalGroup {
  /**
   * Lun list to be exposed through the iSCSI target. Required
   */
  luns: IscsiLun[];
  /**
   * Access Control List (ACL) for an iSCSI target lun
   */
  acls: Acl[];
  /**
   * Attributes of an iSCSI target
   */
  attributes: Attributes;
  /**
   * list of public ip addresses to connect to the iSCSI target
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly endpoints?: string[];
  /**
   * The tag associated with the iSCSI target portal group
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly tag?: number;
  /**
   * The port at which the iSCSI target is available
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly port?: number;
}

/**
 * The resource model definition for a ARM proxy resource. It will have everything other than
 * required location and tags
 */
export interface ProxyResource extends Resource {
}

/**
 * Payload for iSCSI Target Create or Update requests.
 */
export interface IscsiTarget extends ProxyResource {
  /**
   * State of the operation on the resource. Possible values include: 'Invalid', 'Succeeded',
   * 'Failed', 'Canceled', 'Pending', 'Creating', 'Updating', 'Deleting'
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly provisioningState?: ProvisioningStates;
  /**
   * Operational status of the Disk pool. Possible values include: 'Invalid', 'Unknown', 'Healthy',
   * 'Unhealthy'
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly status?: OperationalStatus;
  /**
   * list of iSCSI target portal groups
   */
  tpgs: TargetPortalGroup[];
  /**
   * iSCSI target iqn (iSCSI Qualified Name); example: iqn.2005-03.org.iscsi:server
   */
  targetIqn: string;
}

/**
 * The resource management error additional info.
 */
export interface ErrorAdditionalInfo {
  /**
   * The additional info type.
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly type?: string;
  /**
   * The additional info.
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly info?: any;
}

/**
 * The resource management error response.
 */
export interface ErrorResponse {
  /**
   * The error code.
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly code?: string;
  /**
   * The error message.
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly message?: string;
  /**
   * The error target.
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly target?: string;
  /**
   * The error details.
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly details?: ErrorResponse[];
  /**
   * The error additional info.
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly additionalInfo?: ErrorAdditionalInfo[];
}

/**
 * The resource management error response.
 */
export interface ErrorModel {
  /**
   * RP error response
   */
  error?: ErrorResponse;
}

/**
 * An interface representing StoragePoolManagementOptions.
 */
export interface StoragePoolManagementOptions extends AzureServiceClientOptions {
  baseUri?: string;
}

/**
 * @interface
 * List of operations supported by the RP.
 * @extends Array<StoragePoolRPOperation>
 */
export interface StoragePoolOperationListResult extends Array<StoragePoolRPOperation> {
  /**
   * URI to fetch the next section of the paginated response.
   */
  nextLink?: string;
}

/**
 * @interface
 * List of Disk Pools
 * @extends Array<DiskPool>
 */
export interface DiskPoolListResult extends Array<DiskPool> {
  /**
   * URI to fetch the next section of the paginated response.
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly nextLink?: string;
}

/**
 * @interface
 * List of iSCSI Targets.
 * @extends Array<IscsiTarget>
 */
export interface IscsiTargetList extends Array<IscsiTarget> {
  /**
   * URI to fetch the next section of the paginated response.
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly nextLink?: string;
}

/**
 * Defines values for ProvisioningStates.
 * Possible values include: 'Invalid', 'Succeeded', 'Failed', 'Canceled', 'Pending', 'Creating',
 * 'Updating', 'Deleting'
 * @readonly
 * @enum {string}
 */
export type ProvisioningStates = 'Invalid' | 'Succeeded' | 'Failed' | 'Canceled' | 'Pending' | 'Creating' | 'Updating' | 'Deleting';

/**
 * Defines values for OperationalStatus.
 * Possible values include: 'Invalid', 'Unknown', 'Healthy', 'Unhealthy'
 * @readonly
 * @enum {string}
 */
export type OperationalStatus = 'Invalid' | 'Unknown' | 'Healthy' | 'Unhealthy';

/**
 * Defines values for SkuTier.
 * Possible values include: 'Free', 'Basic', 'Standard', 'Premium'
 * @readonly
 * @enum {string}
 */
export type SkuTier = 'Free' | 'Basic' | 'Standard' | 'Premium';

/**
 * Contains response data for the list operation.
 */
export type OperationsListResponse = StoragePoolOperationListResult & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;

      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: StoragePoolOperationListResult;
    };
};

/**
 * Contains response data for the listBySubscription operation.
 */
export type DiskPoolsListBySubscriptionResponse = DiskPoolListResult & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;

      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: DiskPoolListResult;
    };
};

/**
 * Contains response data for the listByResourceGroup operation.
 */
export type DiskPoolsListByResourceGroupResponse = DiskPoolListResult & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;

      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: DiskPoolListResult;
    };
};

/**
 * Contains response data for the createOrUpdate operation.
 */
export type DiskPoolsCreateOrUpdateResponse = DiskPool & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;

      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: DiskPool;
    };
};

/**
 * Contains response data for the update operation.
 */
export type DiskPoolsUpdateResponse = DiskPool & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;

      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: DiskPool;
    };
};

/**
 * Contains response data for the get operation.
 */
export type DiskPoolsGetResponse = DiskPool & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;

      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: DiskPool;
    };
};

/**
 * Contains response data for the beginCreateOrUpdate operation.
 */
export type DiskPoolsBeginCreateOrUpdateResponse = DiskPool & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;

      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: DiskPool;
    };
};

/**
 * Contains response data for the listBySubscriptionNext operation.
 */
export type DiskPoolsListBySubscriptionNextResponse = DiskPoolListResult & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;

      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: DiskPoolListResult;
    };
};

/**
 * Contains response data for the listByResourceGroupNext operation.
 */
export type DiskPoolsListByResourceGroupNextResponse = DiskPoolListResult & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;

      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: DiskPoolListResult;
    };
};

/**
 * Contains response data for the listByDiskPool operation.
 */
export type IscsiTargetsListByDiskPoolResponse = IscsiTargetList & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;

      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: IscsiTargetList;
    };
};

/**
 * Contains response data for the createOrUpdate operation.
 */
export type IscsiTargetsCreateOrUpdateResponse = IscsiTarget & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;

      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: IscsiTarget;
    };
};

/**
 * Contains response data for the get operation.
 */
export type IscsiTargetsGetResponse = IscsiTarget & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;

      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: IscsiTarget;
    };
};

/**
 * Contains response data for the beginCreateOrUpdate operation.
 */
export type IscsiTargetsBeginCreateOrUpdateResponse = IscsiTarget & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;

      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: IscsiTarget;
    };
};

/**
 * Contains response data for the listByDiskPoolNext operation.
 */
export type IscsiTargetsListByDiskPoolNextResponse = IscsiTargetList & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;

      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: IscsiTargetList;
    };
};
