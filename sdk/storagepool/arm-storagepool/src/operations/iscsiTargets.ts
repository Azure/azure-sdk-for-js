/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */

import { PagedAsyncIterableIterator } from "@azure/core-paging";
import { IscsiTargets } from "../operationsInterfaces";
import * as coreClient from "@azure/core-client";
import * as Mappers from "../models/mappers";
import * as Parameters from "../models/parameters";
import { StoragePoolManagement } from "../storagePoolManagement";
import { PollerLike, PollOperationState, LroEngine } from "@azure/core-lro";
import { LroImpl } from "../lroImpl";
import {
  IscsiTarget,
  IscsiTargetsListByDiskPoolNextOptionalParams,
  IscsiTargetsListByDiskPoolOptionalParams,
  IscsiTargetsListByDiskPoolResponse,
  IscsiTargetCreate,
  IscsiTargetsCreateOrUpdateOptionalParams,
  IscsiTargetsCreateOrUpdateResponse,
  IscsiTargetUpdate,
  IscsiTargetsUpdateOptionalParams,
  IscsiTargetsUpdateResponse,
  IscsiTargetsDeleteOptionalParams,
  IscsiTargetsGetOptionalParams,
  IscsiTargetsGetResponse,
  IscsiTargetsListByDiskPoolNextResponse
} from "../models";

/// <reference lib="esnext.asynciterable" />
/** Class containing IscsiTargets operations. */
export class IscsiTargetsImpl implements IscsiTargets {
  private readonly client: StoragePoolManagement;

  /**
   * Initialize a new instance of the class IscsiTargets class.
   * @param client Reference to the service client
   */
  constructor(client: StoragePoolManagement) {
    this.client = client;
  }

  /**
   * Get iSCSI Targets in a Disk pool.
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param diskPoolName The name of the Disk Pool.
   * @param options The options parameters.
   */
  public listByDiskPool(
    resourceGroupName: string,
    diskPoolName: string,
    options?: IscsiTargetsListByDiskPoolOptionalParams
  ): PagedAsyncIterableIterator<IscsiTarget> {
    const iter = this.listByDiskPoolPagingAll(
      resourceGroupName,
      diskPoolName,
      options
    );
    return {
      next() {
        return iter.next();
      },
      [Symbol.asyncIterator]() {
        return this;
      },
      byPage: () => {
        return this.listByDiskPoolPagingPage(
          resourceGroupName,
          diskPoolName,
          options
        );
      }
    };
  }

  private async *listByDiskPoolPagingPage(
    resourceGroupName: string,
    diskPoolName: string,
    options?: IscsiTargetsListByDiskPoolOptionalParams
  ): AsyncIterableIterator<IscsiTarget[]> {
    let result = await this._listByDiskPool(
      resourceGroupName,
      diskPoolName,
      options
    );
    yield result.value || [];
    let continuationToken = result.nextLink;
    while (continuationToken) {
      result = await this._listByDiskPoolNext(
        resourceGroupName,
        diskPoolName,
        continuationToken,
        options
      );
      continuationToken = result.nextLink;
      yield result.value || [];
    }
  }

  private async *listByDiskPoolPagingAll(
    resourceGroupName: string,
    diskPoolName: string,
    options?: IscsiTargetsListByDiskPoolOptionalParams
  ): AsyncIterableIterator<IscsiTarget> {
    for await (const page of this.listByDiskPoolPagingPage(
      resourceGroupName,
      diskPoolName,
      options
    )) {
      yield* page;
    }
  }

  /**
   * Get iSCSI Targets in a Disk pool.
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param diskPoolName The name of the Disk Pool.
   * @param options The options parameters.
   */
  private _listByDiskPool(
    resourceGroupName: string,
    diskPoolName: string,
    options?: IscsiTargetsListByDiskPoolOptionalParams
  ): Promise<IscsiTargetsListByDiskPoolResponse> {
    return this.client.sendOperationRequest(
      { resourceGroupName, diskPoolName, options },
      listByDiskPoolOperationSpec
    );
  }

  /**
   * Create or Update an iSCSI Target.
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param diskPoolName The name of the Disk Pool.
   * @param iscsiTargetName The name of the iSCSI Target.
   * @param iscsiTargetCreatePayload Request payload for iSCSI Target create operation.
   * @param options The options parameters.
   */
  async beginCreateOrUpdate(
    resourceGroupName: string,
    diskPoolName: string,
    iscsiTargetName: string,
    iscsiTargetCreatePayload: IscsiTargetCreate,
    options?: IscsiTargetsCreateOrUpdateOptionalParams
  ): Promise<
    PollerLike<
      PollOperationState<IscsiTargetsCreateOrUpdateResponse>,
      IscsiTargetsCreateOrUpdateResponse
    >
  > {
    const directSendOperation = async (
      args: coreClient.OperationArguments,
      spec: coreClient.OperationSpec
    ): Promise<IscsiTargetsCreateOrUpdateResponse> => {
      return this.client.sendOperationRequest(args, spec);
    };
    const sendOperation = async (
      args: coreClient.OperationArguments,
      spec: coreClient.OperationSpec
    ) => {
      let currentRawResponse:
        | coreClient.FullOperationResponse
        | undefined = undefined;
      const providedCallback = args.options?.onResponse;
      const callback: coreClient.RawResponseCallback = (
        rawResponse: coreClient.FullOperationResponse,
        flatResponse: unknown
      ) => {
        currentRawResponse = rawResponse;
        providedCallback?.(rawResponse, flatResponse);
      };
      const updatedArgs = {
        ...args,
        options: {
          ...args.options,
          onResponse: callback
        }
      };
      const flatResponse = await directSendOperation(updatedArgs, spec);
      return {
        flatResponse,
        rawResponse: {
          statusCode: currentRawResponse!.status,
          body: currentRawResponse!.parsedBody,
          headers: currentRawResponse!.headers.toJSON()
        }
      };
    };

    const lro = new LroImpl(
      sendOperation,
      {
        resourceGroupName,
        diskPoolName,
        iscsiTargetName,
        iscsiTargetCreatePayload,
        options
      },
      createOrUpdateOperationSpec
    );
    const poller = new LroEngine(lro, {
      resumeFrom: options?.resumeFrom,
      intervalInMs: options?.updateIntervalInMs,
      lroResourceLocationConfig: "azure-async-operation"
    });
    await poller.poll();
    return poller;
  }

  /**
   * Create or Update an iSCSI Target.
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param diskPoolName The name of the Disk Pool.
   * @param iscsiTargetName The name of the iSCSI Target.
   * @param iscsiTargetCreatePayload Request payload for iSCSI Target create operation.
   * @param options The options parameters.
   */
  async beginCreateOrUpdateAndWait(
    resourceGroupName: string,
    diskPoolName: string,
    iscsiTargetName: string,
    iscsiTargetCreatePayload: IscsiTargetCreate,
    options?: IscsiTargetsCreateOrUpdateOptionalParams
  ): Promise<IscsiTargetsCreateOrUpdateResponse> {
    const poller = await this.beginCreateOrUpdate(
      resourceGroupName,
      diskPoolName,
      iscsiTargetName,
      iscsiTargetCreatePayload,
      options
    );
    return poller.pollUntilDone();
  }

  /**
   * Update an iSCSI Target.
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param diskPoolName The name of the Disk Pool.
   * @param iscsiTargetName The name of the iSCSI Target.
   * @param iscsiTargetUpdatePayload Request payload for iSCSI Target update operation.
   * @param options The options parameters.
   */
  async beginUpdate(
    resourceGroupName: string,
    diskPoolName: string,
    iscsiTargetName: string,
    iscsiTargetUpdatePayload: IscsiTargetUpdate,
    options?: IscsiTargetsUpdateOptionalParams
  ): Promise<
    PollerLike<
      PollOperationState<IscsiTargetsUpdateResponse>,
      IscsiTargetsUpdateResponse
    >
  > {
    const directSendOperation = async (
      args: coreClient.OperationArguments,
      spec: coreClient.OperationSpec
    ): Promise<IscsiTargetsUpdateResponse> => {
      return this.client.sendOperationRequest(args, spec);
    };
    const sendOperation = async (
      args: coreClient.OperationArguments,
      spec: coreClient.OperationSpec
    ) => {
      let currentRawResponse:
        | coreClient.FullOperationResponse
        | undefined = undefined;
      const providedCallback = args.options?.onResponse;
      const callback: coreClient.RawResponseCallback = (
        rawResponse: coreClient.FullOperationResponse,
        flatResponse: unknown
      ) => {
        currentRawResponse = rawResponse;
        providedCallback?.(rawResponse, flatResponse);
      };
      const updatedArgs = {
        ...args,
        options: {
          ...args.options,
          onResponse: callback
        }
      };
      const flatResponse = await directSendOperation(updatedArgs, spec);
      return {
        flatResponse,
        rawResponse: {
          statusCode: currentRawResponse!.status,
          body: currentRawResponse!.parsedBody,
          headers: currentRawResponse!.headers.toJSON()
        }
      };
    };

    const lro = new LroImpl(
      sendOperation,
      {
        resourceGroupName,
        diskPoolName,
        iscsiTargetName,
        iscsiTargetUpdatePayload,
        options
      },
      updateOperationSpec
    );
    const poller = new LroEngine(lro, {
      resumeFrom: options?.resumeFrom,
      intervalInMs: options?.updateIntervalInMs,
      lroResourceLocationConfig: "azure-async-operation"
    });
    await poller.poll();
    return poller;
  }

  /**
   * Update an iSCSI Target.
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param diskPoolName The name of the Disk Pool.
   * @param iscsiTargetName The name of the iSCSI Target.
   * @param iscsiTargetUpdatePayload Request payload for iSCSI Target update operation.
   * @param options The options parameters.
   */
  async beginUpdateAndWait(
    resourceGroupName: string,
    diskPoolName: string,
    iscsiTargetName: string,
    iscsiTargetUpdatePayload: IscsiTargetUpdate,
    options?: IscsiTargetsUpdateOptionalParams
  ): Promise<IscsiTargetsUpdateResponse> {
    const poller = await this.beginUpdate(
      resourceGroupName,
      diskPoolName,
      iscsiTargetName,
      iscsiTargetUpdatePayload,
      options
    );
    return poller.pollUntilDone();
  }

  /**
   * Delete an iSCSI Target.
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param diskPoolName The name of the Disk Pool.
   * @param iscsiTargetName The name of the iSCSI Target.
   * @param options The options parameters.
   */
  async beginDelete(
    resourceGroupName: string,
    diskPoolName: string,
    iscsiTargetName: string,
    options?: IscsiTargetsDeleteOptionalParams
  ): Promise<PollerLike<PollOperationState<void>, void>> {
    const directSendOperation = async (
      args: coreClient.OperationArguments,
      spec: coreClient.OperationSpec
    ): Promise<void> => {
      return this.client.sendOperationRequest(args, spec);
    };
    const sendOperation = async (
      args: coreClient.OperationArguments,
      spec: coreClient.OperationSpec
    ) => {
      let currentRawResponse:
        | coreClient.FullOperationResponse
        | undefined = undefined;
      const providedCallback = args.options?.onResponse;
      const callback: coreClient.RawResponseCallback = (
        rawResponse: coreClient.FullOperationResponse,
        flatResponse: unknown
      ) => {
        currentRawResponse = rawResponse;
        providedCallback?.(rawResponse, flatResponse);
      };
      const updatedArgs = {
        ...args,
        options: {
          ...args.options,
          onResponse: callback
        }
      };
      const flatResponse = await directSendOperation(updatedArgs, spec);
      return {
        flatResponse,
        rawResponse: {
          statusCode: currentRawResponse!.status,
          body: currentRawResponse!.parsedBody,
          headers: currentRawResponse!.headers.toJSON()
        }
      };
    };

    const lro = new LroImpl(
      sendOperation,
      { resourceGroupName, diskPoolName, iscsiTargetName, options },
      deleteOperationSpec
    );
    const poller = new LroEngine(lro, {
      resumeFrom: options?.resumeFrom,
      intervalInMs: options?.updateIntervalInMs,
      lroResourceLocationConfig: "azure-async-operation"
    });
    await poller.poll();
    return poller;
  }

  /**
   * Delete an iSCSI Target.
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param diskPoolName The name of the Disk Pool.
   * @param iscsiTargetName The name of the iSCSI Target.
   * @param options The options parameters.
   */
  async beginDeleteAndWait(
    resourceGroupName: string,
    diskPoolName: string,
    iscsiTargetName: string,
    options?: IscsiTargetsDeleteOptionalParams
  ): Promise<void> {
    const poller = await this.beginDelete(
      resourceGroupName,
      diskPoolName,
      iscsiTargetName,
      options
    );
    return poller.pollUntilDone();
  }

  /**
   * Get an iSCSI Target.
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param diskPoolName The name of the Disk Pool.
   * @param iscsiTargetName The name of the iSCSI Target.
   * @param options The options parameters.
   */
  get(
    resourceGroupName: string,
    diskPoolName: string,
    iscsiTargetName: string,
    options?: IscsiTargetsGetOptionalParams
  ): Promise<IscsiTargetsGetResponse> {
    return this.client.sendOperationRequest(
      { resourceGroupName, diskPoolName, iscsiTargetName, options },
      getOperationSpec
    );
  }

  /**
   * ListByDiskPoolNext
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param diskPoolName The name of the Disk Pool.
   * @param nextLink The nextLink from the previous successful call to the ListByDiskPool method.
   * @param options The options parameters.
   */
  private _listByDiskPoolNext(
    resourceGroupName: string,
    diskPoolName: string,
    nextLink: string,
    options?: IscsiTargetsListByDiskPoolNextOptionalParams
  ): Promise<IscsiTargetsListByDiskPoolNextResponse> {
    return this.client.sendOperationRequest(
      { resourceGroupName, diskPoolName, nextLink, options },
      listByDiskPoolNextOperationSpec
    );
  }
}
// Operation Specifications
const serializer = coreClient.createSerializer(Mappers, /* isXml */ false);

const listByDiskPoolOperationSpec: coreClient.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.StoragePool/diskPools/{diskPoolName}/iscsiTargets",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.IscsiTargetList
    },
    default: {
      bodyMapper: Mappers.ErrorModel
    }
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.diskPoolName
  ],
  headerParameters: [Parameters.accept],
  serializer
};
const createOrUpdateOperationSpec: coreClient.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.StoragePool/diskPools/{diskPoolName}/iscsiTargets/{iscsiTargetName}",
  httpMethod: "PUT",
  responses: {
    200: {
      bodyMapper: Mappers.IscsiTarget
    },
    201: {
      bodyMapper: Mappers.IscsiTarget
    },
    202: {
      bodyMapper: Mappers.IscsiTarget
    },
    204: {
      bodyMapper: Mappers.IscsiTarget
    },
    default: {
      bodyMapper: Mappers.ErrorModel
    }
  },
  requestBody: Parameters.iscsiTargetCreatePayload,
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.diskPoolName,
    Parameters.iscsiTargetName
  ],
  headerParameters: [Parameters.accept, Parameters.contentType],
  mediaType: "json",
  serializer
};
const updateOperationSpec: coreClient.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.StoragePool/diskPools/{diskPoolName}/iscsiTargets/{iscsiTargetName}",
  httpMethod: "PATCH",
  responses: {
    200: {
      bodyMapper: Mappers.IscsiTarget
    },
    201: {
      bodyMapper: Mappers.IscsiTarget
    },
    202: {
      bodyMapper: Mappers.IscsiTarget
    },
    204: {
      bodyMapper: Mappers.IscsiTarget
    },
    default: {
      bodyMapper: Mappers.ErrorModel
    }
  },
  requestBody: Parameters.iscsiTargetUpdatePayload,
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.diskPoolName,
    Parameters.iscsiTargetName
  ],
  headerParameters: [Parameters.accept, Parameters.contentType],
  mediaType: "json",
  serializer
};
const deleteOperationSpec: coreClient.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.StoragePool/diskPools/{diskPoolName}/iscsiTargets/{iscsiTargetName}",
  httpMethod: "DELETE",
  responses: {
    200: {},
    201: {},
    202: {},
    204: {},
    default: {
      bodyMapper: Mappers.ErrorModel
    }
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.diskPoolName,
    Parameters.iscsiTargetName
  ],
  headerParameters: [Parameters.accept],
  serializer
};
const getOperationSpec: coreClient.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.StoragePool/diskPools/{diskPoolName}/iscsiTargets/{iscsiTargetName}",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.IscsiTarget
    },
    default: {
      bodyMapper: Mappers.ErrorModel
    }
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.diskPoolName,
    Parameters.iscsiTargetName
  ],
  headerParameters: [Parameters.accept],
  serializer
};
const listByDiskPoolNextOperationSpec: coreClient.OperationSpec = {
  path: "{nextLink}",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.IscsiTargetList
    },
    default: {
      bodyMapper: Mappers.ErrorModel
    }
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.diskPoolName,
    Parameters.nextLink
  ],
  headerParameters: [Parameters.accept],
  serializer
};
