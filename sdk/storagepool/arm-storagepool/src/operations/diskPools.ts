/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */

import { PagedAsyncIterableIterator } from "@azure/core-paging";
import { DiskPools } from "../operationsInterfaces";
import * as coreClient from "@azure/core-client";
import * as Mappers from "../models/mappers";
import * as Parameters from "../models/parameters";
import { StoragePoolManagement } from "../storagePoolManagement";
import { PollerLike, PollOperationState, LroEngine } from "@azure/core-lro";
import { LroImpl } from "../lroImpl";
import {
  DiskPool,
  DiskPoolsListBySubscriptionNextOptionalParams,
  DiskPoolsListBySubscriptionOptionalParams,
  DiskPoolsListByResourceGroupNextOptionalParams,
  DiskPoolsListByResourceGroupOptionalParams,
  OutboundEnvironmentEndpoint,
  DiskPoolsListOutboundNetworkDependenciesEndpointsNextOptionalParams,
  DiskPoolsListOutboundNetworkDependenciesEndpointsOptionalParams,
  DiskPoolsListBySubscriptionResponse,
  DiskPoolsListByResourceGroupResponse,
  DiskPoolCreate,
  DiskPoolsCreateOrUpdateOptionalParams,
  DiskPoolsCreateOrUpdateResponse,
  DiskPoolUpdate,
  DiskPoolsUpdateOptionalParams,
  DiskPoolsUpdateResponse,
  DiskPoolsDeleteOptionalParams,
  DiskPoolsGetOptionalParams,
  DiskPoolsGetResponse,
  DiskPoolsListOutboundNetworkDependenciesEndpointsResponse,
  DiskPoolsStartOptionalParams,
  DiskPoolsDeallocateOptionalParams,
  DiskPoolsUpgradeOptionalParams,
  DiskPoolsListBySubscriptionNextResponse,
  DiskPoolsListByResourceGroupNextResponse,
  DiskPoolsListOutboundNetworkDependenciesEndpointsNextResponse
} from "../models";

/// <reference lib="esnext.asynciterable" />
/** Class containing DiskPools operations. */
export class DiskPoolsImpl implements DiskPools {
  private readonly client: StoragePoolManagement;

  /**
   * Initialize a new instance of the class DiskPools class.
   * @param client Reference to the service client
   */
  constructor(client: StoragePoolManagement) {
    this.client = client;
  }

  /**
   * Gets a list of Disk Pools in a subscription
   * @param options The options parameters.
   */
  public listBySubscription(
    options?: DiskPoolsListBySubscriptionOptionalParams
  ): PagedAsyncIterableIterator<DiskPool> {
    const iter = this.listBySubscriptionPagingAll(options);
    return {
      next() {
        return iter.next();
      },
      [Symbol.asyncIterator]() {
        return this;
      },
      byPage: () => {
        return this.listBySubscriptionPagingPage(options);
      }
    };
  }

  private async *listBySubscriptionPagingPage(
    options?: DiskPoolsListBySubscriptionOptionalParams
  ): AsyncIterableIterator<DiskPool[]> {
    let result = await this._listBySubscription(options);
    yield result.value || [];
    let continuationToken = result.nextLink;
    while (continuationToken) {
      result = await this._listBySubscriptionNext(continuationToken, options);
      continuationToken = result.nextLink;
      yield result.value || [];
    }
  }

  private async *listBySubscriptionPagingAll(
    options?: DiskPoolsListBySubscriptionOptionalParams
  ): AsyncIterableIterator<DiskPool> {
    for await (const page of this.listBySubscriptionPagingPage(options)) {
      yield* page;
    }
  }

  /**
   * Gets a list of DiskPools in a resource group.
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param options The options parameters.
   */
  public listByResourceGroup(
    resourceGroupName: string,
    options?: DiskPoolsListByResourceGroupOptionalParams
  ): PagedAsyncIterableIterator<DiskPool> {
    const iter = this.listByResourceGroupPagingAll(resourceGroupName, options);
    return {
      next() {
        return iter.next();
      },
      [Symbol.asyncIterator]() {
        return this;
      },
      byPage: () => {
        return this.listByResourceGroupPagingPage(resourceGroupName, options);
      }
    };
  }

  private async *listByResourceGroupPagingPage(
    resourceGroupName: string,
    options?: DiskPoolsListByResourceGroupOptionalParams
  ): AsyncIterableIterator<DiskPool[]> {
    let result = await this._listByResourceGroup(resourceGroupName, options);
    yield result.value || [];
    let continuationToken = result.nextLink;
    while (continuationToken) {
      result = await this._listByResourceGroupNext(
        resourceGroupName,
        continuationToken,
        options
      );
      continuationToken = result.nextLink;
      yield result.value || [];
    }
  }

  private async *listByResourceGroupPagingAll(
    resourceGroupName: string,
    options?: DiskPoolsListByResourceGroupOptionalParams
  ): AsyncIterableIterator<DiskPool> {
    for await (const page of this.listByResourceGroupPagingPage(
      resourceGroupName,
      options
    )) {
      yield* page;
    }
  }

  /**
   * Gets the network endpoints of all outbound dependencies of a Disk Pool
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param diskPoolName The name of the Disk Pool.
   * @param options The options parameters.
   */
  public listOutboundNetworkDependenciesEndpoints(
    resourceGroupName: string,
    diskPoolName: string,
    options?: DiskPoolsListOutboundNetworkDependenciesEndpointsOptionalParams
  ): PagedAsyncIterableIterator<OutboundEnvironmentEndpoint> {
    const iter = this.listOutboundNetworkDependenciesEndpointsPagingAll(
      resourceGroupName,
      diskPoolName,
      options
    );
    return {
      next() {
        return iter.next();
      },
      [Symbol.asyncIterator]() {
        return this;
      },
      byPage: () => {
        return this.listOutboundNetworkDependenciesEndpointsPagingPage(
          resourceGroupName,
          diskPoolName,
          options
        );
      }
    };
  }

  private async *listOutboundNetworkDependenciesEndpointsPagingPage(
    resourceGroupName: string,
    diskPoolName: string,
    options?: DiskPoolsListOutboundNetworkDependenciesEndpointsOptionalParams
  ): AsyncIterableIterator<OutboundEnvironmentEndpoint[]> {
    let result = await this._listOutboundNetworkDependenciesEndpoints(
      resourceGroupName,
      diskPoolName,
      options
    );
    yield result.value || [];
    let continuationToken = result.nextLink;
    while (continuationToken) {
      result = await this._listOutboundNetworkDependenciesEndpointsNext(
        resourceGroupName,
        diskPoolName,
        continuationToken,
        options
      );
      continuationToken = result.nextLink;
      yield result.value || [];
    }
  }

  private async *listOutboundNetworkDependenciesEndpointsPagingAll(
    resourceGroupName: string,
    diskPoolName: string,
    options?: DiskPoolsListOutboundNetworkDependenciesEndpointsOptionalParams
  ): AsyncIterableIterator<OutboundEnvironmentEndpoint> {
    for await (const page of this.listOutboundNetworkDependenciesEndpointsPagingPage(
      resourceGroupName,
      diskPoolName,
      options
    )) {
      yield* page;
    }
  }

  /**
   * Gets a list of Disk Pools in a subscription
   * @param options The options parameters.
   */
  private _listBySubscription(
    options?: DiskPoolsListBySubscriptionOptionalParams
  ): Promise<DiskPoolsListBySubscriptionResponse> {
    return this.client.sendOperationRequest(
      { options },
      listBySubscriptionOperationSpec
    );
  }

  /**
   * Gets a list of DiskPools in a resource group.
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param options The options parameters.
   */
  private _listByResourceGroup(
    resourceGroupName: string,
    options?: DiskPoolsListByResourceGroupOptionalParams
  ): Promise<DiskPoolsListByResourceGroupResponse> {
    return this.client.sendOperationRequest(
      { resourceGroupName, options },
      listByResourceGroupOperationSpec
    );
  }

  /**
   * Create or Update Disk pool. This create or update operation can take 15 minutes to complete. This is
   * expected service behavior.
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param diskPoolName The name of the Disk Pool.
   * @param diskPoolCreatePayload Request payload for Disk Pool create operation
   * @param options The options parameters.
   */
  async beginCreateOrUpdate(
    resourceGroupName: string,
    diskPoolName: string,
    diskPoolCreatePayload: DiskPoolCreate,
    options?: DiskPoolsCreateOrUpdateOptionalParams
  ): Promise<
    PollerLike<
      PollOperationState<DiskPoolsCreateOrUpdateResponse>,
      DiskPoolsCreateOrUpdateResponse
    >
  > {
    const directSendOperation = async (
      args: coreClient.OperationArguments,
      spec: coreClient.OperationSpec
    ): Promise<DiskPoolsCreateOrUpdateResponse> => {
      return this.client.sendOperationRequest(args, spec);
    };
    const sendOperation = async (
      args: coreClient.OperationArguments,
      spec: coreClient.OperationSpec
    ) => {
      let currentRawResponse:
        | coreClient.FullOperationResponse
        | undefined = undefined;
      const providedCallback = args.options?.onResponse;
      const callback: coreClient.RawResponseCallback = (
        rawResponse: coreClient.FullOperationResponse,
        flatResponse: unknown
      ) => {
        currentRawResponse = rawResponse;
        providedCallback?.(rawResponse, flatResponse);
      };
      const updatedArgs = {
        ...args,
        options: {
          ...args.options,
          onResponse: callback
        }
      };
      const flatResponse = await directSendOperation(updatedArgs, spec);
      return {
        flatResponse,
        rawResponse: {
          statusCode: currentRawResponse!.status,
          body: currentRawResponse!.parsedBody,
          headers: currentRawResponse!.headers.toJSON()
        }
      };
    };

    const lro = new LroImpl(
      sendOperation,
      { resourceGroupName, diskPoolName, diskPoolCreatePayload, options },
      createOrUpdateOperationSpec
    );
    const poller = new LroEngine(lro, {
      resumeFrom: options?.resumeFrom,
      intervalInMs: options?.updateIntervalInMs,
      lroResourceLocationConfig: "azure-async-operation"
    });
    await poller.poll();
    return poller;
  }

  /**
   * Create or Update Disk pool. This create or update operation can take 15 minutes to complete. This is
   * expected service behavior.
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param diskPoolName The name of the Disk Pool.
   * @param diskPoolCreatePayload Request payload for Disk Pool create operation
   * @param options The options parameters.
   */
  async beginCreateOrUpdateAndWait(
    resourceGroupName: string,
    diskPoolName: string,
    diskPoolCreatePayload: DiskPoolCreate,
    options?: DiskPoolsCreateOrUpdateOptionalParams
  ): Promise<DiskPoolsCreateOrUpdateResponse> {
    const poller = await this.beginCreateOrUpdate(
      resourceGroupName,
      diskPoolName,
      diskPoolCreatePayload,
      options
    );
    return poller.pollUntilDone();
  }

  /**
   * Update a Disk pool.
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param diskPoolName The name of the Disk Pool.
   * @param diskPoolUpdatePayload Request payload for Disk Pool update operation.
   * @param options The options parameters.
   */
  async beginUpdate(
    resourceGroupName: string,
    diskPoolName: string,
    diskPoolUpdatePayload: DiskPoolUpdate,
    options?: DiskPoolsUpdateOptionalParams
  ): Promise<
    PollerLike<
      PollOperationState<DiskPoolsUpdateResponse>,
      DiskPoolsUpdateResponse
    >
  > {
    const directSendOperation = async (
      args: coreClient.OperationArguments,
      spec: coreClient.OperationSpec
    ): Promise<DiskPoolsUpdateResponse> => {
      return this.client.sendOperationRequest(args, spec);
    };
    const sendOperation = async (
      args: coreClient.OperationArguments,
      spec: coreClient.OperationSpec
    ) => {
      let currentRawResponse:
        | coreClient.FullOperationResponse
        | undefined = undefined;
      const providedCallback = args.options?.onResponse;
      const callback: coreClient.RawResponseCallback = (
        rawResponse: coreClient.FullOperationResponse,
        flatResponse: unknown
      ) => {
        currentRawResponse = rawResponse;
        providedCallback?.(rawResponse, flatResponse);
      };
      const updatedArgs = {
        ...args,
        options: {
          ...args.options,
          onResponse: callback
        }
      };
      const flatResponse = await directSendOperation(updatedArgs, spec);
      return {
        flatResponse,
        rawResponse: {
          statusCode: currentRawResponse!.status,
          body: currentRawResponse!.parsedBody,
          headers: currentRawResponse!.headers.toJSON()
        }
      };
    };

    const lro = new LroImpl(
      sendOperation,
      { resourceGroupName, diskPoolName, diskPoolUpdatePayload, options },
      updateOperationSpec
    );
    const poller = new LroEngine(lro, {
      resumeFrom: options?.resumeFrom,
      intervalInMs: options?.updateIntervalInMs,
      lroResourceLocationConfig: "azure-async-operation"
    });
    await poller.poll();
    return poller;
  }

  /**
   * Update a Disk pool.
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param diskPoolName The name of the Disk Pool.
   * @param diskPoolUpdatePayload Request payload for Disk Pool update operation.
   * @param options The options parameters.
   */
  async beginUpdateAndWait(
    resourceGroupName: string,
    diskPoolName: string,
    diskPoolUpdatePayload: DiskPoolUpdate,
    options?: DiskPoolsUpdateOptionalParams
  ): Promise<DiskPoolsUpdateResponse> {
    const poller = await this.beginUpdate(
      resourceGroupName,
      diskPoolName,
      diskPoolUpdatePayload,
      options
    );
    return poller.pollUntilDone();
  }

  /**
   * Delete a Disk pool; attached disks are not affected. This delete operation can take 10 minutes to
   * complete. This is expected service behavior.
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param diskPoolName The name of the Disk Pool.
   * @param options The options parameters.
   */
  async beginDelete(
    resourceGroupName: string,
    diskPoolName: string,
    options?: DiskPoolsDeleteOptionalParams
  ): Promise<PollerLike<PollOperationState<void>, void>> {
    const directSendOperation = async (
      args: coreClient.OperationArguments,
      spec: coreClient.OperationSpec
    ): Promise<void> => {
      return this.client.sendOperationRequest(args, spec);
    };
    const sendOperation = async (
      args: coreClient.OperationArguments,
      spec: coreClient.OperationSpec
    ) => {
      let currentRawResponse:
        | coreClient.FullOperationResponse
        | undefined = undefined;
      const providedCallback = args.options?.onResponse;
      const callback: coreClient.RawResponseCallback = (
        rawResponse: coreClient.FullOperationResponse,
        flatResponse: unknown
      ) => {
        currentRawResponse = rawResponse;
        providedCallback?.(rawResponse, flatResponse);
      };
      const updatedArgs = {
        ...args,
        options: {
          ...args.options,
          onResponse: callback
        }
      };
      const flatResponse = await directSendOperation(updatedArgs, spec);
      return {
        flatResponse,
        rawResponse: {
          statusCode: currentRawResponse!.status,
          body: currentRawResponse!.parsedBody,
          headers: currentRawResponse!.headers.toJSON()
        }
      };
    };

    const lro = new LroImpl(
      sendOperation,
      { resourceGroupName, diskPoolName, options },
      deleteOperationSpec
    );
    const poller = new LroEngine(lro, {
      resumeFrom: options?.resumeFrom,
      intervalInMs: options?.updateIntervalInMs,
      lroResourceLocationConfig: "azure-async-operation"
    });
    await poller.poll();
    return poller;
  }

  /**
   * Delete a Disk pool; attached disks are not affected. This delete operation can take 10 minutes to
   * complete. This is expected service behavior.
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param diskPoolName The name of the Disk Pool.
   * @param options The options parameters.
   */
  async beginDeleteAndWait(
    resourceGroupName: string,
    diskPoolName: string,
    options?: DiskPoolsDeleteOptionalParams
  ): Promise<void> {
    const poller = await this.beginDelete(
      resourceGroupName,
      diskPoolName,
      options
    );
    return poller.pollUntilDone();
  }

  /**
   * Get a Disk pool.
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param diskPoolName The name of the Disk Pool.
   * @param options The options parameters.
   */
  get(
    resourceGroupName: string,
    diskPoolName: string,
    options?: DiskPoolsGetOptionalParams
  ): Promise<DiskPoolsGetResponse> {
    return this.client.sendOperationRequest(
      { resourceGroupName, diskPoolName, options },
      getOperationSpec
    );
  }

  /**
   * Gets the network endpoints of all outbound dependencies of a Disk Pool
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param diskPoolName The name of the Disk Pool.
   * @param options The options parameters.
   */
  private _listOutboundNetworkDependenciesEndpoints(
    resourceGroupName: string,
    diskPoolName: string,
    options?: DiskPoolsListOutboundNetworkDependenciesEndpointsOptionalParams
  ): Promise<DiskPoolsListOutboundNetworkDependenciesEndpointsResponse> {
    return this.client.sendOperationRequest(
      { resourceGroupName, diskPoolName, options },
      listOutboundNetworkDependenciesEndpointsOperationSpec
    );
  }

  /**
   * The operation to start a Disk Pool. This start operation can take 10 minutes to complete. This is
   * expected service behavior.
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param diskPoolName The name of the Disk Pool.
   * @param options The options parameters.
   */
  async beginStart(
    resourceGroupName: string,
    diskPoolName: string,
    options?: DiskPoolsStartOptionalParams
  ): Promise<PollerLike<PollOperationState<void>, void>> {
    const directSendOperation = async (
      args: coreClient.OperationArguments,
      spec: coreClient.OperationSpec
    ): Promise<void> => {
      return this.client.sendOperationRequest(args, spec);
    };
    const sendOperation = async (
      args: coreClient.OperationArguments,
      spec: coreClient.OperationSpec
    ) => {
      let currentRawResponse:
        | coreClient.FullOperationResponse
        | undefined = undefined;
      const providedCallback = args.options?.onResponse;
      const callback: coreClient.RawResponseCallback = (
        rawResponse: coreClient.FullOperationResponse,
        flatResponse: unknown
      ) => {
        currentRawResponse = rawResponse;
        providedCallback?.(rawResponse, flatResponse);
      };
      const updatedArgs = {
        ...args,
        options: {
          ...args.options,
          onResponse: callback
        }
      };
      const flatResponse = await directSendOperation(updatedArgs, spec);
      return {
        flatResponse,
        rawResponse: {
          statusCode: currentRawResponse!.status,
          body: currentRawResponse!.parsedBody,
          headers: currentRawResponse!.headers.toJSON()
        }
      };
    };

    const lro = new LroImpl(
      sendOperation,
      { resourceGroupName, diskPoolName, options },
      startOperationSpec
    );
    const poller = new LroEngine(lro, {
      resumeFrom: options?.resumeFrom,
      intervalInMs: options?.updateIntervalInMs,
      lroResourceLocationConfig: "azure-async-operation"
    });
    await poller.poll();
    return poller;
  }

  /**
   * The operation to start a Disk Pool. This start operation can take 10 minutes to complete. This is
   * expected service behavior.
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param diskPoolName The name of the Disk Pool.
   * @param options The options parameters.
   */
  async beginStartAndWait(
    resourceGroupName: string,
    diskPoolName: string,
    options?: DiskPoolsStartOptionalParams
  ): Promise<void> {
    const poller = await this.beginStart(
      resourceGroupName,
      diskPoolName,
      options
    );
    return poller.pollUntilDone();
  }

  /**
   * Shuts down the Disk Pool and releases the compute resources. You are not billed for the compute
   * resources that this Disk Pool uses. This operation can take 10 minutes to complete. This is expected
   * service behavior.
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param diskPoolName The name of the Disk Pool.
   * @param options The options parameters.
   */
  async beginDeallocate(
    resourceGroupName: string,
    diskPoolName: string,
    options?: DiskPoolsDeallocateOptionalParams
  ): Promise<PollerLike<PollOperationState<void>, void>> {
    const directSendOperation = async (
      args: coreClient.OperationArguments,
      spec: coreClient.OperationSpec
    ): Promise<void> => {
      return this.client.sendOperationRequest(args, spec);
    };
    const sendOperation = async (
      args: coreClient.OperationArguments,
      spec: coreClient.OperationSpec
    ) => {
      let currentRawResponse:
        | coreClient.FullOperationResponse
        | undefined = undefined;
      const providedCallback = args.options?.onResponse;
      const callback: coreClient.RawResponseCallback = (
        rawResponse: coreClient.FullOperationResponse,
        flatResponse: unknown
      ) => {
        currentRawResponse = rawResponse;
        providedCallback?.(rawResponse, flatResponse);
      };
      const updatedArgs = {
        ...args,
        options: {
          ...args.options,
          onResponse: callback
        }
      };
      const flatResponse = await directSendOperation(updatedArgs, spec);
      return {
        flatResponse,
        rawResponse: {
          statusCode: currentRawResponse!.status,
          body: currentRawResponse!.parsedBody,
          headers: currentRawResponse!.headers.toJSON()
        }
      };
    };

    const lro = new LroImpl(
      sendOperation,
      { resourceGroupName, diskPoolName, options },
      deallocateOperationSpec
    );
    const poller = new LroEngine(lro, {
      resumeFrom: options?.resumeFrom,
      intervalInMs: options?.updateIntervalInMs,
      lroResourceLocationConfig: "azure-async-operation"
    });
    await poller.poll();
    return poller;
  }

  /**
   * Shuts down the Disk Pool and releases the compute resources. You are not billed for the compute
   * resources that this Disk Pool uses. This operation can take 10 minutes to complete. This is expected
   * service behavior.
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param diskPoolName The name of the Disk Pool.
   * @param options The options parameters.
   */
  async beginDeallocateAndWait(
    resourceGroupName: string,
    diskPoolName: string,
    options?: DiskPoolsDeallocateOptionalParams
  ): Promise<void> {
    const poller = await this.beginDeallocate(
      resourceGroupName,
      diskPoolName,
      options
    );
    return poller.pollUntilDone();
  }

  /**
   * Upgrade replaces the underlying virtual machine hosts one at a time. This operation can take 10-15
   * minutes to complete. This is expected service behavior.
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param diskPoolName The name of the Disk Pool.
   * @param options The options parameters.
   */
  async beginUpgrade(
    resourceGroupName: string,
    diskPoolName: string,
    options?: DiskPoolsUpgradeOptionalParams
  ): Promise<PollerLike<PollOperationState<void>, void>> {
    const directSendOperation = async (
      args: coreClient.OperationArguments,
      spec: coreClient.OperationSpec
    ): Promise<void> => {
      return this.client.sendOperationRequest(args, spec);
    };
    const sendOperation = async (
      args: coreClient.OperationArguments,
      spec: coreClient.OperationSpec
    ) => {
      let currentRawResponse:
        | coreClient.FullOperationResponse
        | undefined = undefined;
      const providedCallback = args.options?.onResponse;
      const callback: coreClient.RawResponseCallback = (
        rawResponse: coreClient.FullOperationResponse,
        flatResponse: unknown
      ) => {
        currentRawResponse = rawResponse;
        providedCallback?.(rawResponse, flatResponse);
      };
      const updatedArgs = {
        ...args,
        options: {
          ...args.options,
          onResponse: callback
        }
      };
      const flatResponse = await directSendOperation(updatedArgs, spec);
      return {
        flatResponse,
        rawResponse: {
          statusCode: currentRawResponse!.status,
          body: currentRawResponse!.parsedBody,
          headers: currentRawResponse!.headers.toJSON()
        }
      };
    };

    const lro = new LroImpl(
      sendOperation,
      { resourceGroupName, diskPoolName, options },
      upgradeOperationSpec
    );
    const poller = new LroEngine(lro, {
      resumeFrom: options?.resumeFrom,
      intervalInMs: options?.updateIntervalInMs,
      lroResourceLocationConfig: "azure-async-operation"
    });
    await poller.poll();
    return poller;
  }

  /**
   * Upgrade replaces the underlying virtual machine hosts one at a time. This operation can take 10-15
   * minutes to complete. This is expected service behavior.
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param diskPoolName The name of the Disk Pool.
   * @param options The options parameters.
   */
  async beginUpgradeAndWait(
    resourceGroupName: string,
    diskPoolName: string,
    options?: DiskPoolsUpgradeOptionalParams
  ): Promise<void> {
    const poller = await this.beginUpgrade(
      resourceGroupName,
      diskPoolName,
      options
    );
    return poller.pollUntilDone();
  }

  /**
   * ListBySubscriptionNext
   * @param nextLink The nextLink from the previous successful call to the ListBySubscription method.
   * @param options The options parameters.
   */
  private _listBySubscriptionNext(
    nextLink: string,
    options?: DiskPoolsListBySubscriptionNextOptionalParams
  ): Promise<DiskPoolsListBySubscriptionNextResponse> {
    return this.client.sendOperationRequest(
      { nextLink, options },
      listBySubscriptionNextOperationSpec
    );
  }

  /**
   * ListByResourceGroupNext
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param nextLink The nextLink from the previous successful call to the ListByResourceGroup method.
   * @param options The options parameters.
   */
  private _listByResourceGroupNext(
    resourceGroupName: string,
    nextLink: string,
    options?: DiskPoolsListByResourceGroupNextOptionalParams
  ): Promise<DiskPoolsListByResourceGroupNextResponse> {
    return this.client.sendOperationRequest(
      { resourceGroupName, nextLink, options },
      listByResourceGroupNextOperationSpec
    );
  }

  /**
   * ListOutboundNetworkDependenciesEndpointsNext
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param diskPoolName The name of the Disk Pool.
   * @param nextLink The nextLink from the previous successful call to the
   *                 ListOutboundNetworkDependenciesEndpoints method.
   * @param options The options parameters.
   */
  private _listOutboundNetworkDependenciesEndpointsNext(
    resourceGroupName: string,
    diskPoolName: string,
    nextLink: string,
    options?: DiskPoolsListOutboundNetworkDependenciesEndpointsNextOptionalParams
  ): Promise<DiskPoolsListOutboundNetworkDependenciesEndpointsNextResponse> {
    return this.client.sendOperationRequest(
      { resourceGroupName, diskPoolName, nextLink, options },
      listOutboundNetworkDependenciesEndpointsNextOperationSpec
    );
  }
}
// Operation Specifications
const serializer = coreClient.createSerializer(Mappers, /* isXml */ false);

const listBySubscriptionOperationSpec: coreClient.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/providers/Microsoft.StoragePool/diskPools",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.DiskPoolListResult
    },
    default: {
      bodyMapper: Mappers.ErrorModel
    }
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [Parameters.$host, Parameters.subscriptionId],
  headerParameters: [Parameters.accept],
  serializer
};
const listByResourceGroupOperationSpec: coreClient.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.StoragePool/diskPools",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.DiskPoolListResult
    },
    default: {
      bodyMapper: Mappers.ErrorModel
    }
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName
  ],
  headerParameters: [Parameters.accept],
  serializer
};
const createOrUpdateOperationSpec: coreClient.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.StoragePool/diskPools/{diskPoolName}",
  httpMethod: "PUT",
  responses: {
    200: {
      bodyMapper: Mappers.DiskPool
    },
    201: {
      bodyMapper: Mappers.DiskPool
    },
    202: {
      bodyMapper: Mappers.DiskPool
    },
    204: {
      bodyMapper: Mappers.DiskPool
    },
    default: {
      bodyMapper: Mappers.ErrorModel
    }
  },
  requestBody: Parameters.diskPoolCreatePayload,
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.diskPoolName
  ],
  headerParameters: [Parameters.accept, Parameters.contentType],
  mediaType: "json",
  serializer
};
const updateOperationSpec: coreClient.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.StoragePool/diskPools/{diskPoolName}",
  httpMethod: "PATCH",
  responses: {
    200: {
      bodyMapper: Mappers.DiskPool
    },
    201: {
      bodyMapper: Mappers.DiskPool
    },
    202: {
      bodyMapper: Mappers.DiskPool
    },
    204: {
      bodyMapper: Mappers.DiskPool
    },
    default: {
      bodyMapper: Mappers.ErrorModel
    }
  },
  requestBody: Parameters.diskPoolUpdatePayload,
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.diskPoolName
  ],
  headerParameters: [Parameters.accept, Parameters.contentType],
  mediaType: "json",
  serializer
};
const deleteOperationSpec: coreClient.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.StoragePool/diskPools/{diskPoolName}",
  httpMethod: "DELETE",
  responses: {
    200: {},
    201: {},
    202: {},
    204: {},
    default: {
      bodyMapper: Mappers.ErrorModel
    }
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.diskPoolName
  ],
  headerParameters: [Parameters.accept],
  serializer
};
const getOperationSpec: coreClient.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.StoragePool/diskPools/{diskPoolName}",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.DiskPool
    },
    default: {
      bodyMapper: Mappers.ErrorModel
    }
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.diskPoolName
  ],
  headerParameters: [Parameters.accept],
  serializer
};
const listOutboundNetworkDependenciesEndpointsOperationSpec: coreClient.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.StoragePool/diskPools/{diskPoolName}/outboundNetworkDependenciesEndpoints",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.OutboundEnvironmentEndpointList
    },
    default: {
      bodyMapper: Mappers.ErrorModel
    }
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.diskPoolName
  ],
  headerParameters: [Parameters.accept],
  serializer
};
const startOperationSpec: coreClient.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.StoragePool/diskPools/{diskPoolName}/start",
  httpMethod: "POST",
  responses: {
    200: {},
    201: {},
    202: {},
    204: {},
    default: {
      bodyMapper: Mappers.ErrorModel
    }
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.diskPoolName
  ],
  headerParameters: [Parameters.accept],
  serializer
};
const deallocateOperationSpec: coreClient.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.StoragePool/diskPools/{diskPoolName}/deallocate",
  httpMethod: "POST",
  responses: {
    200: {},
    201: {},
    202: {},
    204: {},
    default: {
      bodyMapper: Mappers.ErrorModel
    }
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.diskPoolName
  ],
  headerParameters: [Parameters.accept],
  serializer
};
const upgradeOperationSpec: coreClient.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.StoragePool/diskPools/{diskPoolName}/upgrade",
  httpMethod: "POST",
  responses: {
    200: {},
    201: {},
    202: {},
    204: {},
    default: {
      bodyMapper: Mappers.ErrorModel
    }
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.diskPoolName
  ],
  headerParameters: [Parameters.accept],
  serializer
};
const listBySubscriptionNextOperationSpec: coreClient.OperationSpec = {
  path: "{nextLink}",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.DiskPoolListResult
    },
    default: {
      bodyMapper: Mappers.ErrorModel
    }
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.nextLink
  ],
  headerParameters: [Parameters.accept],
  serializer
};
const listByResourceGroupNextOperationSpec: coreClient.OperationSpec = {
  path: "{nextLink}",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.DiskPoolListResult
    },
    default: {
      bodyMapper: Mappers.ErrorModel
    }
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.nextLink
  ],
  headerParameters: [Parameters.accept],
  serializer
};
const listOutboundNetworkDependenciesEndpointsNextOperationSpec: coreClient.OperationSpec = {
  path: "{nextLink}",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.OutboundEnvironmentEndpointList
    },
    default: {
      bodyMapper: Mappers.ErrorModel
    }
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.diskPoolName,
    Parameters.nextLink
  ],
  headerParameters: [Parameters.accept],
  serializer
};
