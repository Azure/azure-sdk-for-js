/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is
 * regenerated.
 */

import * as msRest from "@azure/ms-rest-js";
import * as Models from "../models";
import * as Mappers from "../models/generateMappers";
import * as Parameters from "../models/parameters";
import { ViManagementClientContext } from "../viManagementClientContext";

/** Class representing a Generate. */
export class Generate {
  private readonly client: ViManagementClientContext;

  /**
   * Create a Generate.
   * @param {ViManagementClientContext} client Reference to the service client.
   */
  constructor(client: ViManagementClientContext) {
    this.client = client;
  }

  /**
   * Generate an Azure Video Analyzer for Media access token.
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param accountName The name of the Azure Video Analyzer for Media account.
   * @param permissionType The requested permission. Possible values include: 'Contributor', 'Reader'
   * @param scope The requested media type. Possible values include: 'Video', 'Account', 'Project'
   * @param [options] The optional parameters
   * @returns Promise<Models.GenerateAccessTokenMethodResponse>
   */
  accessTokenMethod(resourceGroupName: string, accountName: string, permissionType: Models.PermissionType, scope: Models.Scope, options?: Models.GenerateAccessTokenMethodOptionalParams): Promise<Models.GenerateAccessTokenMethodResponse>;
  /**
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param accountName The name of the Azure Video Analyzer for Media account.
   * @param permissionType The requested permission. Possible values include: 'Contributor', 'Reader'
   * @param scope The requested media type. Possible values include: 'Video', 'Account', 'Project'
   * @param callback The callback
   */
  accessTokenMethod(resourceGroupName: string, accountName: string, permissionType: Models.PermissionType, scope: Models.Scope, callback: msRest.ServiceCallback<Models.AccessToken>): void;
  /**
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param accountName The name of the Azure Video Analyzer for Media account.
   * @param permissionType The requested permission. Possible values include: 'Contributor', 'Reader'
   * @param scope The requested media type. Possible values include: 'Video', 'Account', 'Project'
   * @param options The optional parameters
   * @param callback The callback
   */
  accessTokenMethod(resourceGroupName: string, accountName: string, permissionType: Models.PermissionType, scope: Models.Scope, options: Models.GenerateAccessTokenMethodOptionalParams, callback: msRest.ServiceCallback<Models.AccessToken>): void;
  accessTokenMethod(resourceGroupName: string, accountName: string, permissionType: Models.PermissionType, scope: Models.Scope, options?: Models.GenerateAccessTokenMethodOptionalParams | msRest.ServiceCallback<Models.AccessToken>, callback?: msRest.ServiceCallback<Models.AccessToken>): Promise<Models.GenerateAccessTokenMethodResponse> {
    return this.client.sendOperationRequest(
      {
        resourceGroupName,
        accountName,
        permissionType,
        scope,
        options
      },
      accessTokenMethodOperationSpec,
      callback) as Promise<Models.GenerateAccessTokenMethodResponse>;
  }
}

// Operation Specifications
const serializer = new msRest.Serializer(Mappers);
const accessTokenMethodOperationSpec: msRest.OperationSpec = {
  httpMethod: "POST",
  path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.VideoIndexer/accounts/{accountName}/generateAccessToken",
  urlParameters: [
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.accountName
  ],
  queryParameters: [
    Parameters.apiVersion
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  requestBody: {
    parameterPath: {
      permissionType: "permissionType",
      scope: "scope",
      videoId: [
        "options",
        "videoId"
      ],
      projectId: [
        "options",
        "projectId"
      ]
    },
    mapper: Mappers.GenerateAccessTokenParameters
  },
  responses: {
    200: {
      bodyMapper: Mappers.AccessToken
    },
    400: {
      bodyMapper: Mappers.ErrorResponse
    },
    404: {
      bodyMapper: Mappers.ErrorResponse
    },
    409: {
      bodyMapper: Mappers.ErrorResponse
    },
    500: {
      bodyMapper: Mappers.ErrorResponse
    },
    default: {
      bodyMapper: Mappers.ErrorResponse
    }
  },
  serializer
};
