/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */

import { ClassicAccounts } from "../operationsInterfaces";
import * as coreClient from "@azure/core-client";
import * as Mappers from "../models/mappers";
import * as Parameters from "../models/parameters";
import { ViManagementClient } from "../viManagementClient";
import {
  ClassicAccountsGetDetailsOptionalParams,
  ClassicAccountsGetDetailsResponse
} from "../models";

/** Class containing ClassicAccounts operations. */
export class ClassicAccountsImpl implements ClassicAccounts {
  private readonly client: ViManagementClient;

  /**
   * Initialize a new instance of the class ClassicAccounts class.
   * @param client Reference to the service client
   */
  constructor(client: ViManagementClient) {
    this.client = client;
  }

  /**
   * Gets the properties of an Azure Video Indexer Classic account.
   * @param location The name of Azure region.
   * @param accountName The name of the Azure Video Indexer account.
   * @param options The options parameters.
   */
  getDetails(
    location: string,
    accountName: string,
    options?: ClassicAccountsGetDetailsOptionalParams
  ): Promise<ClassicAccountsGetDetailsResponse> {
    return this.client.sendOperationRequest(
      { location, accountName, options },
      getDetailsOperationSpec
    );
  }
}
// Operation Specifications
const serializer = coreClient.createSerializer(Mappers, /* isXml */ false);

const getDetailsOperationSpec: coreClient.OperationSpec = {
  path:
    "/providers/Microsoft.VideoIndexer/locations/{location}/classicAccounts/{accountName}",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.ClassicAccount
    },
    400: {
      bodyMapper: Mappers.ErrorResponse,
      isError: true
    },
    401: {
      bodyMapper: Mappers.ErrorResponse,
      isError: true
    },
    404: {
      bodyMapper: Mappers.ErrorResponse,
      isError: true
    },
    500: {
      bodyMapper: Mappers.ErrorResponse,
      isError: true
    },
    default: {
      bodyMapper: Mappers.ErrorResponse
    }
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.accountName,
    Parameters.location
  ],
  headerParameters: [Parameters.accept],
  serializer
};
