/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */

import * as coreClient from "@azure/core-client";

/** Available operations of the service. */
export interface OperationListResult {
  /**
   * List of operations supported by the Resource Provider.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly value?: Operation[];
  /**
   * URL to get the next set of operation list results if there are any.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly nextLink?: string;
}

/** Operation detail payload */
export interface Operation {
  /**
   * Name of the operation
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly name?: string;
  /**
   * Indicates whether the operation is a data action
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly isDataAction?: boolean;
  /**
   * Indicates the action type.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly actionType?: string;
  /**
   * Display of the operation
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly display?: OperationDisplay;
  /**
   * Origin of the operation
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly origin?: string;
}

/** Operation display payload */
export interface OperationDisplay {
  /**
   * Resource provider of the operation
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly provider?: string;
  /**
   * Resource of the operation
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly resource?: string;
  /**
   * Localized friendly name for the operation
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly operation?: string;
  /**
   * Localized friendly description for the operation
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly description?: string;
}

/** Error response. */
export interface ErrorResponse {
  /** The error details. */
  error?: ErrorDefinition;
}

/** Error definition. */
export interface ErrorDefinition {
  /**
   * Service specific error code which serves as the substatus for the HTTP error code.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly code?: string;
  /**
   * Description of the error.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly message?: string;
  /**
   * Internal error details.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly details?: ErrorDefinition[];
}

/** The parameters used to check the availability of the Video Indexer account name. */
export interface AccountCheckNameAvailabilityParameters {
  /** The VideoIndexer account name. */
  name: string;
  /** The type of resource, Microsoft.VideoIndexer/accounts */
  type: Type;
}

/** The CheckNameAvailability operation response. */
export interface CheckNameAvailabilityResult {
  /**
   * Gets a boolean value that indicates whether the name is available for you to use. If true, the name is available. If false, the name has already been taken.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly nameAvailable?: boolean;
  /**
   * Gets the reason that a Video Indexer account name could not be used. The Reason element is only returned if NameAvailable is false.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly reason?: Reason;
  /**
   * Gets an error message explaining the Reason value in more detail.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly message?: string;
}

/** The list operation response, that contains the data pools and their properties. */
export interface AccountList {
  /**
   * List of accounts and their properties.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly value?: Account[];
  /** URL to get the next set of operation list results if there are any. */
  nextLink?: string;
}

/** The media services details */
export interface MediaServicesForPutRequest {
  /** The media services resource id */
  resourceId?: string;
  /** The user assigned identity to be used to grant permissions */
  userAssignedIdentity?: string;
}

/** Managed service identity (system assigned and/or user assigned identities) */
export interface ManagedServiceIdentity {
  /**
   * The service principal ID of the system assigned identity. This property will only be provided for a system assigned identity.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly principalId?: string;
  /**
   * The tenant ID of the system assigned identity. This property will only be provided for a system assigned identity.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly tenantId?: string;
  /** Type of managed service identity (where both SystemAssigned and UserAssigned types are allowed). */
  type: ManagedServiceIdentityType;
  /** The set of user assigned identities associated with the resource. The userAssignedIdentities dictionary keys will be ARM resource ids in the form: '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ManagedIdentity/userAssignedIdentities/{identityName}. The dictionary values can be empty objects ({}) in requests. */
  userAssignedIdentities?: { [propertyName: string]: UserAssignedIdentity };
}

/** User assigned identity properties */
export interface UserAssignedIdentity {
  /**
   * The principal ID of the assigned identity.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly principalId?: string;
  /**
   * The client ID of the assigned identity.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly clientId?: string;
}

/** Metadata pertaining to creation and last modification of the resource. */
export interface SystemData {
  /** The identity that created the resource. */
  createdBy?: string;
  /** The type of identity that created the resource. */
  createdByType?: CreatedByType;
  /** The timestamp of resource creation (UTC). */
  createdAt?: Date;
  /** The identity that last modified the resource. */
  lastModifiedBy?: string;
  /** The type of identity that last modified the resource. */
  lastModifiedByType?: CreatedByType;
  /** The timestamp of resource last modification (UTC) */
  lastModifiedAt?: Date;
}

/** Common fields that are returned in the response for all Azure Resource Manager resources */
export interface Resource {
  /**
   * Fully qualified resource ID for the resource. Ex - /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly id?: string;
  /**
   * The name of the resource
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly name?: string;
  /**
   * The type of the resource. E.g. "Microsoft.Compute/virtualMachines" or "Microsoft.Storage/storageAccounts"
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly type?: string;
}

/** The media services details */
export interface MediaServicesForPatchRequest {
  /** The user assigned identity to be used to grant permissions */
  userAssignedIdentity?: string;
}

/** Resource tags */
export interface Tags {
  /** Resource tags */
  tags?: { [propertyName: string]: string };
}

/** The list of user classic accounts. */
export interface UserClassicAccountList {
  /**
   * List of classic account names and their location.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly value?: ClassicAccountSlim[];
  /** URL to get the next set of operation list results if there are any. */
  nextLink?: string;
}

/** An Azure Video Indexer classic account. */
export interface ClassicAccountSlim {
  /**
   * The account's name
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly name?: string;
  /**
   * The account's location
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly location?: string;
  /**
   * The account's id
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly id?: string;
}

/** An Azure Video Indexer classic account. */
export interface ClassicAccount {
  /**
   * The account's name
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly name?: string;
  /** The account's location */
  location?: string;
  /**
   * The account's id
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly id?: string;
  /** The media services details */
  mediaServices?: ClassicAccountMediaServices;
}

/** Azure Video Indexer classic account properties */
export interface ClassicAccountMediaServices {
  /** The aad application id */
  aadApplicationId?: string;
  /** The aad tenant id */
  aadTenantId?: string;
  /** Represents wether the media services is connected or not */
  connected?: boolean;
  /** Represents if the media services event grid is connected or not */
  eventGridProviderRegistered?: boolean;
  /** The media services name */
  name?: string;
  /** The resource group that the media services belong to */
  resourceGroup?: string;
  /** Represents wether the media services streaming endpoint has started */
  streamingEndpointStarted?: boolean;
  /** The media services subscriptionId */
  subscriptionId?: string;
}

/** Access token generation request's parameters */
export interface GenerateAccessTokenParameters {
  /** The requested permission */
  permissionType: PermissionType;
  /** The requested media type */
  scope: Scope;
  /** The video ID */
  videoId?: string;
  /** The project ID */
  projectId?: string;
}

/** Azure Video Indexer access token. */
export interface AccessToken {
  /**
   * The access token.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly accessToken?: string;
}

/** The resource model definition for an Azure Resource Manager tracked top level resource which has 'tags' and a 'location' */
export type TrackedResource = Resource & {
  /** Resource tags. */
  tags?: { [propertyName: string]: string };
  /** The geo-location where the resource lives */
  location: string;
};

/** Azure Video Indexer account */
export type AccountPatch = Tags & {
  /** Managed service identity (system assigned and/or user assigned identities) */
  identity?: ManagedServiceIdentity;
  /**
   * The account's tenant id
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly tenantId?: string;
  /**
   * The account's data-plane ID
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly accountId?: string;
  /** The media services details */
  mediaServices?: MediaServicesForPatchRequest;
  /**
   * Gets the status of the account at the time the operation was called.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly provisioningState?: ProvisioningState;
};

/** An Azure Video Indexer account. */
export type Account = TrackedResource & {
  /** Managed service identity (system assigned and/or user assigned identities) */
  identity?: ManagedServiceIdentity;
  /**
   * The system meta data relating to this resource.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly systemData?: SystemData;
  /**
   * The account's tenant id
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly tenantId?: string;
  /** The account's data-plane ID */
  accountId?: string;
  /**
   * The account's name
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly accountName?: string;
  /** The media services details */
  mediaServices?: MediaServicesForPutRequest;
  /**
   * An integer representing the total seconds that have been indexed on the account
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly totalSecondsIndexed?: number;
  /**
   * Gets the status of the account at the time the operation was called.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly provisioningState?: ProvisioningState;
};

/** Known values of {@link Type} that the service accepts. */
export enum KnownType {
  MicrosoftVideoIndexerAccounts = "Microsoft.VideoIndexer/accounts"
}

/**
 * Defines values for Type. \
 * {@link KnownType} can be used interchangeably with Type,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **Microsoft.VideoIndexer\/accounts**
 */
export type Type = string;

/** Known values of {@link Reason} that the service accepts. */
export enum KnownReason {
  AlreadyExists = "AlreadyExists"
}

/**
 * Defines values for Reason. \
 * {@link KnownReason} can be used interchangeably with Reason,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **AlreadyExists**
 */
export type Reason = string;

/** Known values of {@link ProvisioningState} that the service accepts. */
export enum KnownProvisioningState {
  Succeeded = "Succeeded",
  Failed = "Failed",
  Canceled = "Canceled",
  Accepted = "Accepted",
  Provisioning = "Provisioning",
  Deleting = "Deleting"
}

/**
 * Defines values for ProvisioningState. \
 * {@link KnownProvisioningState} can be used interchangeably with ProvisioningState,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **Succeeded** \
 * **Failed** \
 * **Canceled** \
 * **Accepted** \
 * **Provisioning** \
 * **Deleting**
 */
export type ProvisioningState = string;

/** Known values of {@link ManagedServiceIdentityType} that the service accepts. */
export enum KnownManagedServiceIdentityType {
  None = "None",
  SystemAssigned = "SystemAssigned",
  UserAssigned = "UserAssigned",
  SystemAssignedUserAssigned = "SystemAssigned,UserAssigned"
}

/**
 * Defines values for ManagedServiceIdentityType. \
 * {@link KnownManagedServiceIdentityType} can be used interchangeably with ManagedServiceIdentityType,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **None** \
 * **SystemAssigned** \
 * **UserAssigned** \
 * **SystemAssigned,UserAssigned**
 */
export type ManagedServiceIdentityType = string;

/** Known values of {@link CreatedByType} that the service accepts. */
export enum KnownCreatedByType {
  User = "User",
  Application = "Application",
  ManagedIdentity = "ManagedIdentity",
  Key = "Key"
}

/**
 * Defines values for CreatedByType. \
 * {@link KnownCreatedByType} can be used interchangeably with CreatedByType,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **User** \
 * **Application** \
 * **ManagedIdentity** \
 * **Key**
 */
export type CreatedByType = string;

/** Known values of {@link PermissionType} that the service accepts. */
export enum KnownPermissionType {
  Contributor = "Contributor",
  Reader = "Reader"
}

/**
 * Defines values for PermissionType. \
 * {@link KnownPermissionType} can be used interchangeably with PermissionType,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **Contributor** \
 * **Reader**
 */
export type PermissionType = string;

/** Known values of {@link Scope} that the service accepts. */
export enum KnownScope {
  Video = "Video",
  Account = "Account",
  Project = "Project"
}

/**
 * Defines values for Scope. \
 * {@link KnownScope} can be used interchangeably with Scope,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **Video** \
 * **Account** \
 * **Project**
 */
export type Scope = string;

/** Optional parameters. */
export interface OperationsListOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the list operation. */
export type OperationsListResponse = OperationListResult;

/** Optional parameters. */
export interface OperationsListNextOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the listNext operation. */
export type OperationsListNextResponse = OperationListResult;

/** Optional parameters. */
export interface AccountsCheckNameAvailabilityOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the checkNameAvailability operation. */
export type AccountsCheckNameAvailabilityResponse = CheckNameAvailabilityResult;

/** Optional parameters. */
export interface AccountsListOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the list operation. */
export type AccountsListResponse = AccountList;

/** Optional parameters. */
export interface AccountsListByResourceGroupOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the listByResourceGroup operation. */
export type AccountsListByResourceGroupResponse = AccountList;

/** Optional parameters. */
export interface AccountsGetOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the get operation. */
export type AccountsGetResponse = Account;

/** Optional parameters. */
export interface AccountsUpdateOptionalParams
  extends coreClient.OperationOptions {
  /** The parameters to provide for the current Azure Video Indexer account. */
  parameters?: AccountPatch;
}

/** Contains response data for the update operation. */
export type AccountsUpdateResponse = Account;

/** Optional parameters. */
export interface AccountsCreateOrUpdateOptionalParams
  extends coreClient.OperationOptions {
  /** The parameters to provide for the Azure Video Indexer account. */
  parameters?: Account;
}

/** Contains response data for the createOrUpdate operation. */
export type AccountsCreateOrUpdateResponse = Account;

/** Optional parameters. */
export interface AccountsDeleteOptionalParams
  extends coreClient.OperationOptions {}

/** Optional parameters. */
export interface AccountsListNextOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the listNext operation. */
export type AccountsListNextResponse = AccountList;

/** Optional parameters. */
export interface AccountsListByResourceGroupNextOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the listByResourceGroupNext operation. */
export type AccountsListByResourceGroupNextResponse = AccountList;

/** Optional parameters. */
export interface UserClassicAccountsListOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the list operation. */
export type UserClassicAccountsListResponse = UserClassicAccountList;

/** Optional parameters. */
export interface UserClassicAccountsListNextOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the listNext operation. */
export type UserClassicAccountsListNextResponse = UserClassicAccountList;

/** Optional parameters. */
export interface ClassicAccountsGetDetailsOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the getDetails operation. */
export type ClassicAccountsGetDetailsResponse = ClassicAccount;

/** Optional parameters. */
export interface GenerateAccessTokenOptionalParams
  extends coreClient.OperationOptions {
  /** The video ID */
  videoId?: string;
  /** The project ID */
  projectId?: string;
}

/** Contains response data for the accessToken operation. */
export type GenerateAccessTokenResponse = AccessToken;

/** Optional parameters. */
export interface ViManagementClientOptionalParams
  extends coreClient.ServiceClientOptions {
  /** server parameter */
  $host?: string;
  /** Api Version */
  apiVersion?: string;
  /** Overrides client endpoint. */
  endpoint?: string;
}
