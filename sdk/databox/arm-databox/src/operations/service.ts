/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */

import { PagedAsyncIterableIterator, PageSettings } from "@azure/core-paging";
import { setContinuationToken } from "../pagingHelper";
import { Service } from "../operationsInterfaces";
import * as coreClient from "@azure/core-client";
import * as Mappers from "../models/mappers";
import * as Parameters from "../models/parameters";
import { DataBoxManagementClient } from "../dataBoxManagementClient";
import {
  SkuInformation,
  AvailableSkuRequest,
  ServiceListAvailableSkusByResourceGroupNextOptionalParams,
  ServiceListAvailableSkusByResourceGroupOptionalParams,
  ServiceListAvailableSkusByResourceGroupResponse,
  ValidateAddress,
  ServiceValidateAddressOptionalParams,
  ServiceValidateAddressResponse,
  ValidationRequestUnion,
  ServiceValidateInputsByResourceGroupOptionalParams,
  ServiceValidateInputsByResourceGroupResponse,
  ServiceValidateInputsOptionalParams,
  ServiceValidateInputsResponse,
  RegionConfigurationRequest,
  ServiceRegionConfigurationOptionalParams,
  ServiceRegionConfigurationResponse,
  ServiceRegionConfigurationByResourceGroupOptionalParams,
  ServiceRegionConfigurationByResourceGroupResponse,
  ServiceListAvailableSkusByResourceGroupNextResponse
} from "../models";

/// <reference lib="esnext.asynciterable" />
/** Class containing Service operations. */
export class ServiceImpl implements Service {
  private readonly client: DataBoxManagementClient;

  /**
   * Initialize a new instance of the class Service class.
   * @param client Reference to the service client
   */
  constructor(client: DataBoxManagementClient) {
    this.client = client;
  }

  /**
   * This method provides the list of available skus for the given subscription, resource group and
   * location.
   * @param resourceGroupName The Resource Group Name
   * @param location The location of the resource
   * @param availableSkuRequest Filters for showing the available skus.
   * @param options The options parameters.
   */
  public listAvailableSkusByResourceGroup(
    resourceGroupName: string,
    location: string,
    availableSkuRequest: AvailableSkuRequest,
    options?: ServiceListAvailableSkusByResourceGroupOptionalParams
  ): PagedAsyncIterableIterator<SkuInformation> {
    const iter = this.listAvailableSkusByResourceGroupPagingAll(
      resourceGroupName,
      location,
      availableSkuRequest,
      options
    );
    return {
      next() {
        return iter.next();
      },
      [Symbol.asyncIterator]() {
        return this;
      },
      byPage: (settings?: PageSettings) => {
        if (settings?.maxPageSize) {
          throw new Error("maxPageSize is not supported by this operation.");
        }
        return this.listAvailableSkusByResourceGroupPagingPage(
          resourceGroupName,
          location,
          availableSkuRequest,
          options,
          settings
        );
      }
    };
  }

  private async *listAvailableSkusByResourceGroupPagingPage(
    resourceGroupName: string,
    location: string,
    availableSkuRequest: AvailableSkuRequest,
    options?: ServiceListAvailableSkusByResourceGroupOptionalParams,
    settings?: PageSettings
  ): AsyncIterableIterator<SkuInformation[]> {
    let result: ServiceListAvailableSkusByResourceGroupResponse;
    let continuationToken = settings?.continuationToken;
    if (!continuationToken) {
      result = await this._listAvailableSkusByResourceGroup(
        resourceGroupName,
        location,
        availableSkuRequest,
        options
      );
      let page = result.value || [];
      continuationToken = result.nextLink;
      setContinuationToken(page, continuationToken);
      yield page;
    }
    while (continuationToken) {
      result = await this._listAvailableSkusByResourceGroupNext(
        resourceGroupName,
        location,
        availableSkuRequest,
        continuationToken,
        options
      );
      continuationToken = result.nextLink;
      let page = result.value || [];
      setContinuationToken(page, continuationToken);
      yield page;
    }
  }

  private async *listAvailableSkusByResourceGroupPagingAll(
    resourceGroupName: string,
    location: string,
    availableSkuRequest: AvailableSkuRequest,
    options?: ServiceListAvailableSkusByResourceGroupOptionalParams
  ): AsyncIterableIterator<SkuInformation> {
    for await (const page of this.listAvailableSkusByResourceGroupPagingPage(
      resourceGroupName,
      location,
      availableSkuRequest,
      options
    )) {
      yield* page;
    }
  }

  /**
   * This method provides the list of available skus for the given subscription, resource group and
   * location.
   * @param resourceGroupName The Resource Group Name
   * @param location The location of the resource
   * @param availableSkuRequest Filters for showing the available skus.
   * @param options The options parameters.
   */
  private _listAvailableSkusByResourceGroup(
    resourceGroupName: string,
    location: string,
    availableSkuRequest: AvailableSkuRequest,
    options?: ServiceListAvailableSkusByResourceGroupOptionalParams
  ): Promise<ServiceListAvailableSkusByResourceGroupResponse> {
    return this.client.sendOperationRequest(
      { resourceGroupName, location, availableSkuRequest, options },
      listAvailableSkusByResourceGroupOperationSpec
    );
  }

  /**
   * [DEPRECATED NOTICE: This operation will soon be removed]. This method validates the customer
   * shipping address and provide alternate addresses if any.
   * @param location The location of the resource
   * @param validateAddress Shipping address of the customer.
   * @param options The options parameters.
   */
  validateAddress(
    location: string,
    validateAddress: ValidateAddress,
    options?: ServiceValidateAddressOptionalParams
  ): Promise<ServiceValidateAddressResponse> {
    return this.client.sendOperationRequest(
      { location, validateAddress, options },
      validateAddressOperationSpec
    );
  }

  /**
   * This method does all necessary pre-job creation validation under resource group.
   * @param resourceGroupName The Resource Group Name
   * @param location The location of the resource
   * @param validationRequest Inputs of the customer.
   * @param options The options parameters.
   */
  validateInputsByResourceGroup(
    resourceGroupName: string,
    location: string,
    validationRequest: ValidationRequestUnion,
    options?: ServiceValidateInputsByResourceGroupOptionalParams
  ): Promise<ServiceValidateInputsByResourceGroupResponse> {
    return this.client.sendOperationRequest(
      { resourceGroupName, location, validationRequest, options },
      validateInputsByResourceGroupOperationSpec
    );
  }

  /**
   * This method does all necessary pre-job creation validation under subscription.
   * @param location The location of the resource
   * @param validationRequest Inputs of the customer.
   * @param options The options parameters.
   */
  validateInputs(
    location: string,
    validationRequest: ValidationRequestUnion,
    options?: ServiceValidateInputsOptionalParams
  ): Promise<ServiceValidateInputsResponse> {
    return this.client.sendOperationRequest(
      { location, validationRequest, options },
      validateInputsOperationSpec
    );
  }

  /**
   * This API provides configuration details specific to given region/location at Subscription level.
   * @param location The location of the resource
   * @param regionConfigurationRequest Request body to get the configuration for the region.
   * @param options The options parameters.
   */
  regionConfiguration(
    location: string,
    regionConfigurationRequest: RegionConfigurationRequest,
    options?: ServiceRegionConfigurationOptionalParams
  ): Promise<ServiceRegionConfigurationResponse> {
    return this.client.sendOperationRequest(
      { location, regionConfigurationRequest, options },
      regionConfigurationOperationSpec
    );
  }

  /**
   * This API provides configuration details specific to given region/location at Resource group level.
   * @param resourceGroupName The Resource Group Name
   * @param location The location of the resource
   * @param regionConfigurationRequest Request body to get the configuration for the region at resource
   *                                   group level.
   * @param options The options parameters.
   */
  regionConfigurationByResourceGroup(
    resourceGroupName: string,
    location: string,
    regionConfigurationRequest: RegionConfigurationRequest,
    options?: ServiceRegionConfigurationByResourceGroupOptionalParams
  ): Promise<ServiceRegionConfigurationByResourceGroupResponse> {
    return this.client.sendOperationRequest(
      { resourceGroupName, location, regionConfigurationRequest, options },
      regionConfigurationByResourceGroupOperationSpec
    );
  }

  /**
   * ListAvailableSkusByResourceGroupNext
   * @param resourceGroupName The Resource Group Name
   * @param location The location of the resource
   * @param availableSkuRequest Filters for showing the available skus.
   * @param nextLink The nextLink from the previous successful call to the
   *                 ListAvailableSkusByResourceGroup method.
   * @param options The options parameters.
   */
  private _listAvailableSkusByResourceGroupNext(
    resourceGroupName: string,
    location: string,
    availableSkuRequest: AvailableSkuRequest,
    nextLink: string,
    options?: ServiceListAvailableSkusByResourceGroupNextOptionalParams
  ): Promise<ServiceListAvailableSkusByResourceGroupNextResponse> {
    return this.client.sendOperationRequest(
      { resourceGroupName, location, availableSkuRequest, nextLink, options },
      listAvailableSkusByResourceGroupNextOperationSpec
    );
  }
}
// Operation Specifications
const serializer = coreClient.createSerializer(Mappers, /* isXml */ false);

const listAvailableSkusByResourceGroupOperationSpec: coreClient.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DataBox/locations/{location}/availableSkus",
  httpMethod: "POST",
  responses: {
    200: {
      bodyMapper: Mappers.AvailableSkusResult
    },
    default: {
      bodyMapper: Mappers.ApiError
    }
  },
  requestBody: Parameters.availableSkuRequest,
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.location
  ],
  headerParameters: [Parameters.accept, Parameters.contentType],
  mediaType: "json",
  serializer
};
const validateAddressOperationSpec: coreClient.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/providers/Microsoft.DataBox/locations/{location}/validateAddress",
  httpMethod: "POST",
  responses: {
    200: {
      bodyMapper: Mappers.AddressValidationOutput
    },
    default: {
      bodyMapper: Mappers.ApiError
    }
  },
  requestBody: Parameters.validateAddress,
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.location
  ],
  headerParameters: [Parameters.accept, Parameters.contentType],
  mediaType: "json",
  serializer
};
const validateInputsByResourceGroupOperationSpec: coreClient.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DataBox/locations/{location}/validateInputs",
  httpMethod: "POST",
  responses: {
    200: {
      bodyMapper: Mappers.ValidationResponse
    },
    default: {
      bodyMapper: Mappers.ApiError
    }
  },
  requestBody: Parameters.validationRequest,
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.location
  ],
  headerParameters: [Parameters.accept, Parameters.contentType],
  mediaType: "json",
  serializer
};
const validateInputsOperationSpec: coreClient.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/providers/Microsoft.DataBox/locations/{location}/validateInputs",
  httpMethod: "POST",
  responses: {
    200: {
      bodyMapper: Mappers.ValidationResponse
    },
    default: {
      bodyMapper: Mappers.ApiError
    }
  },
  requestBody: Parameters.validationRequest,
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.location
  ],
  headerParameters: [Parameters.accept, Parameters.contentType],
  mediaType: "json",
  serializer
};
const regionConfigurationOperationSpec: coreClient.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/providers/Microsoft.DataBox/locations/{location}/regionConfiguration",
  httpMethod: "POST",
  responses: {
    200: {
      bodyMapper: Mappers.RegionConfigurationResponse
    },
    default: {
      bodyMapper: Mappers.ApiError
    }
  },
  requestBody: Parameters.regionConfigurationRequest,
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.location
  ],
  headerParameters: [Parameters.accept, Parameters.contentType],
  mediaType: "json",
  serializer
};
const regionConfigurationByResourceGroupOperationSpec: coreClient.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DataBox/locations/{location}/regionConfiguration",
  httpMethod: "POST",
  responses: {
    200: {
      bodyMapper: Mappers.RegionConfigurationResponse
    },
    default: {
      bodyMapper: Mappers.ApiError
    }
  },
  requestBody: Parameters.regionConfigurationRequest,
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.location
  ],
  headerParameters: [Parameters.accept, Parameters.contentType],
  mediaType: "json",
  serializer
};
const listAvailableSkusByResourceGroupNextOperationSpec: coreClient.OperationSpec = {
  path: "{nextLink}",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.AvailableSkusResult
    },
    default: {
      bodyMapper: Mappers.ApiError
    }
  },
  urlParameters: [
    Parameters.$host,
    Parameters.nextLink,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.location
  ],
  headerParameters: [Parameters.accept, Parameters.contentType],
  mediaType: "json",
  serializer
};
