/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is
 * regenerated.
 */

import * as msRest from "@azure/ms-rest-js";
import { TokenCredential } from "@azure/core-auth";
import * as Models from "./models";
import * as Mappers from "./models/mappers";
import * as Parameters from "./models/parameters";
import * as operations from "./operations";
import { DataBoxManagementClientContext } from "./dataBoxManagementClientContext";


class DataBoxManagementClient extends DataBoxManagementClientContext {
  // Operation groups
  operations: operations.Operations;
  jobs: operations.Jobs;
  service: operations.Service;

  /**
   * Initializes a new instance of the DataBoxManagementClient class.
   * @param credentials Credentials needed for the client to connect to Azure. Credentials
   * implementing the TokenCredential interface from the @azure/identity package are recommended. For
   * more information about these credentials, see
   * {@link https://www.npmjs.com/package/@azure/identity}. Credentials implementing the
   * ServiceClientCredentials interface from the older packages @azure/ms-rest-nodeauth and
   * @azure/ms-rest-browserauth are also supported.
   * @param subscriptionId The Subscription Id
   * @param [options] The parameter options
   */
  constructor(credentials: msRest.ServiceClientCredentials | TokenCredential, subscriptionId: string, options?: Models.DataBoxManagementClientOptions) {
    super(credentials, subscriptionId, options);
    this.operations = new operations.Operations(this);
    this.jobs = new operations.Jobs(this);
    this.service = new operations.Service(this);
  }

  /**
   * Request to mitigate for a given job
   * @param jobName The name of the job Resource within the specified resource group. job names must
   * be between 3 and 24 characters in length and use any alphanumeric and underscore only
   * @param resourceGroupName The Resource Group Name
   * @param customerResolutionCode Resolution code for the job. Possible values include: 'None',
   * 'MoveToCleanUpDevice', 'Resume'
   * @param [options] The optional parameters
   * @returns Promise<msRest.RestResponse>
   */
  mitigate(jobName: string, resourceGroupName: string, customerResolutionCode: Models.CustomerResolutionCode, options?: msRest.RequestOptionsBase): Promise<msRest.RestResponse>;
  /**
   * @param jobName The name of the job Resource within the specified resource group. job names must
   * be between 3 and 24 characters in length and use any alphanumeric and underscore only
   * @param resourceGroupName The Resource Group Name
   * @param customerResolutionCode Resolution code for the job. Possible values include: 'None',
   * 'MoveToCleanUpDevice', 'Resume'
   * @param callback The callback
   */
  mitigate(jobName: string, resourceGroupName: string, customerResolutionCode: Models.CustomerResolutionCode, callback: msRest.ServiceCallback<void>): void;
  /**
   * @param jobName The name of the job Resource within the specified resource group. job names must
   * be between 3 and 24 characters in length and use any alphanumeric and underscore only
   * @param resourceGroupName The Resource Group Name
   * @param customerResolutionCode Resolution code for the job. Possible values include: 'None',
   * 'MoveToCleanUpDevice', 'Resume'
   * @param options The optional parameters
   * @param callback The callback
   */
  mitigate(jobName: string, resourceGroupName: string, customerResolutionCode: Models.CustomerResolutionCode, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<void>): void;
  mitigate(jobName: string, resourceGroupName: string, customerResolutionCode: Models.CustomerResolutionCode, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<void>, callback?: msRest.ServiceCallback<void>): Promise<msRest.RestResponse> {
    return this.sendOperationRequest(
      {
        jobName,
        resourceGroupName,
        customerResolutionCode,
        options
      },
      mitigateOperationSpec,
      callback);
  }
}

// Operation Specifications
const serializer = new msRest.Serializer(Mappers);
const mitigateOperationSpec: msRest.OperationSpec = {
  httpMethod: "POST",
  path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.DataBox/jobs/{jobName}/mitigate",
  urlParameters: [
    Parameters.jobName,
    Parameters.subscriptionId,
    Parameters.resourceGroupName
  ],
  queryParameters: [
    Parameters.apiVersion
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  requestBody: {
    parameterPath: {
      customerResolutionCode: "customerResolutionCode"
    },
    mapper: {
      ...Mappers.MitigateJobRequest,
      required: true
    }
  },
  responses: {
    204: {},
    default: {
      bodyMapper: Mappers.ApiError
    }
  },
  serializer
};

export {
  DataBoxManagementClient,
  DataBoxManagementClientContext,
  Models as DataBoxManagementModels,
  Mappers as DataBoxManagementMappers
};
export * from "./operations";
