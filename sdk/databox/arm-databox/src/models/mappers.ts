/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */

import * as coreClient from "@azure/core-client";

export const OperationList: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "OperationList",
    modelProperties: {
      value: {
        serializedName: "value",
        readOnly: true,
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "Operation"
            }
          }
        }
      },
      nextLink: {
        serializedName: "nextLink",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const Operation: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "Operation",
    modelProperties: {
      name: {
        serializedName: "name",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      display: {
        serializedName: "display",
        type: {
          name: "Composite",
          className: "OperationDisplay"
        }
      },
      properties: {
        serializedName: "properties",
        readOnly: true,
        type: {
          name: "Dictionary",
          value: { type: { name: "any" } }
        }
      },
      origin: {
        serializedName: "origin",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      isDataAction: {
        serializedName: "isDataAction",
        type: {
          name: "Boolean"
        }
      }
    }
  }
};

export const OperationDisplay: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "OperationDisplay",
    modelProperties: {
      provider: {
        serializedName: "provider",
        type: {
          name: "String"
        }
      },
      resource: {
        serializedName: "resource",
        type: {
          name: "String"
        }
      },
      operation: {
        serializedName: "operation",
        type: {
          name: "String"
        }
      },
      description: {
        serializedName: "description",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const ApiError: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "ApiError",
    modelProperties: {
      error: {
        serializedName: "error",
        type: {
          name: "Composite",
          className: "ErrorDetail"
        }
      }
    }
  }
};

export const ErrorDetail: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "ErrorDetail",
    modelProperties: {
      code: {
        serializedName: "code",
        required: true,
        type: {
          name: "String"
        }
      },
      message: {
        serializedName: "message",
        required: true,
        type: {
          name: "String"
        }
      },
      details: {
        serializedName: "details",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "Details"
            }
          }
        }
      },
      target: {
        serializedName: "target",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const Details: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "Details",
    modelProperties: {
      code: {
        serializedName: "code",
        required: true,
        type: {
          name: "String"
        }
      },
      message: {
        serializedName: "message",
        required: true,
        type: {
          name: "String"
        }
      }
    }
  }
};

export const JobResourceList: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "JobResourceList",
    modelProperties: {
      value: {
        serializedName: "value",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "JobResource"
            }
          }
        }
      },
      nextLink: {
        serializedName: "nextLink",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const CloudError: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "CloudError",
    modelProperties: {
      code: {
        serializedName: "code",
        type: {
          name: "String"
        }
      },
      message: {
        serializedName: "message",
        type: {
          name: "String"
        }
      },
      target: {
        serializedName: "target",
        type: {
          name: "String"
        }
      },
      details: {
        serializedName: "details",
        readOnly: true,
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "CloudError"
            }
          }
        }
      },
      additionalInfo: {
        serializedName: "additionalInfo",
        readOnly: true,
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "AdditionalErrorInfo"
            }
          }
        }
      }
    }
  }
};

export const AdditionalErrorInfo: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "AdditionalErrorInfo",
    modelProperties: {
      type: {
        serializedName: "type",
        type: {
          name: "String"
        }
      },
      info: {
        serializedName: "info",
        type: {
          name: "Dictionary",
          value: { type: { name: "any" } }
        }
      }
    }
  }
};

export const JobDetails: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "JobDetails",
    uberParent: "JobDetails",
    polymorphicDiscriminator: {
      serializedName: "jobDetailsType",
      clientName: "jobDetailsType"
    },
    modelProperties: {
      jobStages: {
        serializedName: "jobStages",
        readOnly: true,
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "JobStages"
            }
          }
        }
      },
      contactDetails: {
        serializedName: "contactDetails",
        type: {
          name: "Composite",
          className: "ContactDetails"
        }
      },
      shippingAddress: {
        serializedName: "shippingAddress",
        type: {
          name: "Composite",
          className: "ShippingAddress"
        }
      },
      deliveryPackage: {
        serializedName: "deliveryPackage",
        type: {
          name: "Composite",
          className: "PackageShippingDetails"
        }
      },
      returnPackage: {
        serializedName: "returnPackage",
        type: {
          name: "Composite",
          className: "PackageShippingDetails"
        }
      },
      dataImportDetails: {
        serializedName: "dataImportDetails",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "DataImportDetails"
            }
          }
        }
      },
      dataExportDetails: {
        serializedName: "dataExportDetails",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "DataExportDetails"
            }
          }
        }
      },
      jobDetailsType: {
        serializedName: "jobDetailsType",
        required: true,
        type: {
          name: "Enum",
          allowedValues: [
            "DataBox",
            "DataBoxDisk",
            "DataBoxHeavy",
            "DataBoxCustomerDisk"
          ]
        }
      },
      preferences: {
        serializedName: "preferences",
        type: {
          name: "Composite",
          className: "Preferences"
        }
      },
      copyLogDetails: {
        serializedName: "copyLogDetails",
        readOnly: true,
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "CopyLogDetails"
            }
          }
        }
      },
      reverseShipmentLabelSasKey: {
        serializedName: "reverseShipmentLabelSasKey",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      chainOfCustodySasKey: {
        serializedName: "chainOfCustodySasKey",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      keyEncryptionKey: {
        serializedName: "keyEncryptionKey",
        type: {
          name: "Composite",
          className: "KeyEncryptionKey"
        }
      },
      expectedDataSizeInTeraBytes: {
        serializedName: "expectedDataSizeInTeraBytes",
        type: {
          name: "Number"
        }
      },
      actions: {
        serializedName: "actions",
        readOnly: true,
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Enum",
              allowedValues: ["None", "MoveToCleanUpDevice", "Resume"]
            }
          }
        }
      },
      lastMitigationActionOnJob: {
        serializedName: "lastMitigationActionOnJob",
        type: {
          name: "Composite",
          className: "LastMitigationActionOnJob"
        }
      },
      datacenterAddress: {
        serializedName: "datacenterAddress",
        type: {
          name: "Composite",
          className: "DatacenterAddressResponse"
        }
      },
      dataCenterCode: {
        serializedName: "dataCenterCode",
        readOnly: true,
        type: {
          name: "String"
        }
      }
    }
  }
};

export const JobStages: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "JobStages",
    modelProperties: {
      stageName: {
        serializedName: "stageName",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      displayName: {
        serializedName: "displayName",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      stageStatus: {
        serializedName: "stageStatus",
        readOnly: true,
        type: {
          name: "Enum",
          allowedValues: [
            "None",
            "InProgress",
            "Succeeded",
            "Failed",
            "Cancelled",
            "Cancelling",
            "SucceededWithErrors",
            "WaitingForCustomerAction",
            "SucceededWithWarnings",
            "WaitingForCustomerActionForKek",
            "WaitingForCustomerActionForCleanUp",
            "CustomerActionPerformedForCleanUp"
          ]
        }
      },
      stageTime: {
        serializedName: "stageTime",
        readOnly: true,
        type: {
          name: "DateTime"
        }
      },
      jobStageDetails: {
        serializedName: "jobStageDetails",
        readOnly: true,
        type: {
          name: "Dictionary",
          value: { type: { name: "any" } }
        }
      }
    }
  }
};

export const ContactDetails: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "ContactDetails",
    modelProperties: {
      contactName: {
        serializedName: "contactName",
        required: true,
        type: {
          name: "String"
        }
      },
      phone: {
        serializedName: "phone",
        required: true,
        type: {
          name: "String"
        }
      },
      phoneExtension: {
        serializedName: "phoneExtension",
        type: {
          name: "String"
        }
      },
      mobile: {
        serializedName: "mobile",
        type: {
          name: "String"
        }
      },
      emailList: {
        serializedName: "emailList",
        required: true,
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "String"
            }
          }
        }
      },
      notificationPreference: {
        serializedName: "notificationPreference",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "NotificationPreference"
            }
          }
        }
      }
    }
  }
};

export const NotificationPreference: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "NotificationPreference",
    modelProperties: {
      stageName: {
        serializedName: "stageName",
        required: true,
        type: {
          name: "String"
        }
      },
      sendNotification: {
        defaultValue: true,
        serializedName: "sendNotification",
        required: true,
        type: {
          name: "Boolean"
        }
      }
    }
  }
};

export const ShippingAddress: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "ShippingAddress",
    modelProperties: {
      streetAddress1: {
        serializedName: "streetAddress1",
        required: true,
        type: {
          name: "String"
        }
      },
      streetAddress2: {
        serializedName: "streetAddress2",
        type: {
          name: "String"
        }
      },
      streetAddress3: {
        serializedName: "streetAddress3",
        type: {
          name: "String"
        }
      },
      city: {
        serializedName: "city",
        type: {
          name: "String"
        }
      },
      stateOrProvince: {
        serializedName: "stateOrProvince",
        type: {
          name: "String"
        }
      },
      country: {
        serializedName: "country",
        required: true,
        type: {
          name: "String"
        }
      },
      postalCode: {
        serializedName: "postalCode",
        type: {
          name: "String"
        }
      },
      zipExtendedCode: {
        serializedName: "zipExtendedCode",
        type: {
          name: "String"
        }
      },
      companyName: {
        serializedName: "companyName",
        type: {
          name: "String"
        }
      },
      addressType: {
        defaultValue: "None",
        serializedName: "addressType",
        type: {
          name: "Enum",
          allowedValues: ["None", "Residential", "Commercial"]
        }
      }
    }
  }
};

export const PackageShippingDetails: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "PackageShippingDetails",
    modelProperties: {
      trackingUrl: {
        serializedName: "trackingUrl",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      carrierName: {
        serializedName: "carrierName",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      trackingId: {
        serializedName: "trackingId",
        readOnly: true,
        type: {
          name: "String"
        }
      }
    }
  }
};

export const DataImportDetails: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "DataImportDetails",
    modelProperties: {
      accountDetails: {
        serializedName: "accountDetails",
        type: {
          name: "Composite",
          className: "DataAccountDetails"
        }
      },
      logCollectionLevel: {
        serializedName: "logCollectionLevel",
        type: {
          name: "Enum",
          allowedValues: ["Error", "Verbose"]
        }
      }
    }
  }
};

export const DataAccountDetails: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "DataAccountDetails",
    uberParent: "DataAccountDetails",
    polymorphicDiscriminator: {
      serializedName: "dataAccountType",
      clientName: "dataAccountType"
    },
    modelProperties: {
      dataAccountType: {
        serializedName: "dataAccountType",
        required: true,
        type: {
          name: "Enum",
          allowedValues: ["StorageAccount", "ManagedDisk"]
        }
      },
      sharePassword: {
        serializedName: "sharePassword",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const DataExportDetails: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "DataExportDetails",
    modelProperties: {
      transferConfiguration: {
        serializedName: "transferConfiguration",
        type: {
          name: "Composite",
          className: "TransferConfiguration"
        }
      },
      logCollectionLevel: {
        serializedName: "logCollectionLevel",
        type: {
          name: "Enum",
          allowedValues: ["Error", "Verbose"]
        }
      },
      accountDetails: {
        serializedName: "accountDetails",
        type: {
          name: "Composite",
          className: "DataAccountDetails"
        }
      }
    }
  }
};

export const TransferConfiguration: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "TransferConfiguration",
    modelProperties: {
      transferConfigurationType: {
        serializedName: "transferConfigurationType",
        required: true,
        type: {
          name: "Enum",
          allowedValues: ["TransferAll", "TransferUsingFilter"]
        }
      },
      transferFilterDetails: {
        serializedName: "transferFilterDetails",
        type: {
          name: "Composite",
          className: "TransferConfigurationTransferFilterDetails"
        }
      },
      transferAllDetails: {
        serializedName: "transferAllDetails",
        type: {
          name: "Composite",
          className: "TransferConfigurationTransferAllDetails"
        }
      }
    }
  }
};

export const TransferConfigurationTransferFilterDetails: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "TransferConfigurationTransferFilterDetails",
    modelProperties: {
      include: {
        serializedName: "include",
        type: {
          name: "Composite",
          className: "TransferFilterDetails"
        }
      }
    }
  }
};

export const TransferFilterDetails: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "TransferFilterDetails",
    modelProperties: {
      dataAccountType: {
        serializedName: "dataAccountType",
        required: true,
        type: {
          name: "Enum",
          allowedValues: ["StorageAccount", "ManagedDisk"]
        }
      },
      blobFilterDetails: {
        serializedName: "blobFilterDetails",
        type: {
          name: "Composite",
          className: "BlobFilterDetails"
        }
      },
      azureFileFilterDetails: {
        serializedName: "azureFileFilterDetails",
        type: {
          name: "Composite",
          className: "AzureFileFilterDetails"
        }
      },
      filterFileDetails: {
        serializedName: "filterFileDetails",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "FilterFileDetails"
            }
          }
        }
      }
    }
  }
};

export const BlobFilterDetails: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "BlobFilterDetails",
    modelProperties: {
      blobPrefixList: {
        serializedName: "blobPrefixList",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "String"
            }
          }
        }
      },
      blobPathList: {
        serializedName: "blobPathList",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "String"
            }
          }
        }
      },
      containerList: {
        serializedName: "containerList",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "String"
            }
          }
        }
      }
    }
  }
};

export const AzureFileFilterDetails: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "AzureFileFilterDetails",
    modelProperties: {
      filePrefixList: {
        serializedName: "filePrefixList",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "String"
            }
          }
        }
      },
      filePathList: {
        serializedName: "filePathList",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "String"
            }
          }
        }
      },
      fileShareList: {
        serializedName: "fileShareList",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "String"
            }
          }
        }
      }
    }
  }
};

export const FilterFileDetails: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "FilterFileDetails",
    modelProperties: {
      filterFileType: {
        serializedName: "filterFileType",
        required: true,
        type: {
          name: "Enum",
          allowedValues: ["AzureBlob", "AzureFile"]
        }
      },
      filterFilePath: {
        serializedName: "filterFilePath",
        required: true,
        type: {
          name: "String"
        }
      }
    }
  }
};

export const TransferConfigurationTransferAllDetails: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "TransferConfigurationTransferAllDetails",
    modelProperties: {
      include: {
        serializedName: "include",
        type: {
          name: "Composite",
          className: "TransferAllDetails"
        }
      }
    }
  }
};

export const TransferAllDetails: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "TransferAllDetails",
    modelProperties: {
      dataAccountType: {
        serializedName: "dataAccountType",
        required: true,
        type: {
          name: "Enum",
          allowedValues: ["StorageAccount", "ManagedDisk"]
        }
      },
      transferAllBlobs: {
        serializedName: "transferAllBlobs",
        type: {
          name: "Boolean"
        }
      },
      transferAllFiles: {
        serializedName: "transferAllFiles",
        type: {
          name: "Boolean"
        }
      }
    }
  }
};

export const Preferences: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "Preferences",
    modelProperties: {
      preferredDataCenterRegion: {
        serializedName: "preferredDataCenterRegion",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "String"
            }
          }
        }
      },
      transportPreferences: {
        serializedName: "transportPreferences",
        type: {
          name: "Composite",
          className: "TransportPreferences"
        }
      },
      encryptionPreferences: {
        serializedName: "encryptionPreferences",
        type: {
          name: "Composite",
          className: "EncryptionPreferences"
        }
      }
    }
  }
};

export const TransportPreferences: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "TransportPreferences",
    modelProperties: {
      preferredShipmentType: {
        serializedName: "preferredShipmentType",
        required: true,
        type: {
          name: "Enum",
          allowedValues: ["CustomerManaged", "MicrosoftManaged"]
        }
      }
    }
  }
};

export const EncryptionPreferences: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "EncryptionPreferences",
    modelProperties: {
      doubleEncryption: {
        defaultValue: "Disabled",
        serializedName: "doubleEncryption",
        type: {
          name: "Enum",
          allowedValues: ["Enabled", "Disabled"]
        }
      }
    }
  }
};

export const CopyLogDetails: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "CopyLogDetails",
    uberParent: "CopyLogDetails",
    polymorphicDiscriminator: {
      serializedName: "copyLogDetailsType",
      clientName: "copyLogDetailsType"
    },
    modelProperties: {
      copyLogDetailsType: {
        serializedName: "copyLogDetailsType",
        required: true,
        type: {
          name: "Enum",
          allowedValues: [
            "DataBox",
            "DataBoxDisk",
            "DataBoxHeavy",
            "DataBoxCustomerDisk"
          ]
        }
      }
    }
  }
};

export const KeyEncryptionKey: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "KeyEncryptionKey",
    modelProperties: {
      kekType: {
        defaultValue: "MicrosoftManaged",
        serializedName: "kekType",
        required: true,
        type: {
          name: "Enum",
          allowedValues: ["MicrosoftManaged", "CustomerManaged"]
        }
      },
      identityProperties: {
        serializedName: "identityProperties",
        type: {
          name: "Composite",
          className: "IdentityProperties"
        }
      },
      kekUrl: {
        serializedName: "kekUrl",
        type: {
          name: "String"
        }
      },
      kekVaultResourceID: {
        serializedName: "kekVaultResourceID",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const IdentityProperties: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "IdentityProperties",
    modelProperties: {
      type: {
        serializedName: "type",
        type: {
          name: "String"
        }
      },
      userAssigned: {
        serializedName: "userAssigned",
        type: {
          name: "Composite",
          className: "UserAssignedProperties"
        }
      }
    }
  }
};

export const UserAssignedProperties: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "UserAssignedProperties",
    modelProperties: {
      resourceId: {
        serializedName: "resourceId",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const LastMitigationActionOnJob: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "LastMitigationActionOnJob",
    modelProperties: {
      actionDateTimeInUtc: {
        serializedName: "actionDateTimeInUtc",
        type: {
          name: "DateTime"
        }
      },
      isPerformedByCustomer: {
        serializedName: "isPerformedByCustomer",
        type: {
          name: "Boolean"
        }
      },
      customerResolution: {
        serializedName: "customerResolution",
        type: {
          name: "Enum",
          allowedValues: ["None", "MoveToCleanUpDevice", "Resume"]
        }
      }
    }
  }
};

export const DatacenterAddressResponse: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "DatacenterAddressResponse",
    uberParent: "DatacenterAddressResponse",
    polymorphicDiscriminator: {
      serializedName: "datacenterAddressType",
      clientName: "datacenterAddressType"
    },
    modelProperties: {
      datacenterAddressType: {
        serializedName: "datacenterAddressType",
        required: true,
        type: {
          name: "Enum",
          allowedValues: [
            "DatacenterAddressLocation",
            "DatacenterAddressInstruction"
          ]
        }
      },
      supportedCarriersForReturnShipment: {
        serializedName: "supportedCarriersForReturnShipment",
        readOnly: true,
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "String"
            }
          }
        }
      },
      dataCenterAzureLocation: {
        serializedName: "dataCenterAzureLocation",
        readOnly: true,
        type: {
          name: "String"
        }
      }
    }
  }
};

export const JobDeliveryInfo: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "JobDeliveryInfo",
    modelProperties: {
      scheduledDateTime: {
        serializedName: "scheduledDateTime",
        type: {
          name: "DateTime"
        }
      }
    }
  }
};

export const SystemData: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "SystemData",
    modelProperties: {
      createdBy: {
        serializedName: "createdBy",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      createdByType: {
        serializedName: "createdByType",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      createdAt: {
        serializedName: "createdAt",
        readOnly: true,
        type: {
          name: "DateTime"
        }
      },
      lastModifiedBy: {
        serializedName: "lastModifiedBy",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      lastModifiedByType: {
        serializedName: "lastModifiedByType",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      lastModifiedAt: {
        serializedName: "lastModifiedAt",
        readOnly: true,
        type: {
          name: "DateTime"
        }
      }
    }
  }
};

export const Resource: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "Resource",
    modelProperties: {
      location: {
        serializedName: "location",
        required: true,
        type: {
          name: "String"
        }
      },
      tags: {
        serializedName: "tags",
        type: {
          name: "Dictionary",
          value: { type: { name: "String" } }
        }
      },
      sku: {
        serializedName: "sku",
        type: {
          name: "Composite",
          className: "Sku"
        }
      },
      identity: {
        serializedName: "identity",
        type: {
          name: "Composite",
          className: "ResourceIdentity"
        }
      }
    }
  }
};

export const Sku: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "Sku",
    modelProperties: {
      name: {
        serializedName: "name",
        required: true,
        type: {
          name: "Enum",
          allowedValues: [
            "DataBox",
            "DataBoxDisk",
            "DataBoxHeavy",
            "DataBoxCustomerDisk"
          ]
        }
      },
      displayName: {
        serializedName: "displayName",
        type: {
          name: "String"
        }
      },
      family: {
        serializedName: "family",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const ResourceIdentity: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "ResourceIdentity",
    modelProperties: {
      type: {
        defaultValue: "None",
        serializedName: "type",
        type: {
          name: "String"
        }
      },
      principalId: {
        serializedName: "principalId",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      tenantId: {
        serializedName: "tenantId",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      userAssignedIdentities: {
        serializedName: "userAssignedIdentities",
        type: {
          name: "Dictionary",
          value: {
            type: { name: "Composite", className: "UserAssignedIdentity" }
          }
        }
      }
    }
  }
};

export const UserAssignedIdentity: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "UserAssignedIdentity",
    modelProperties: {
      principalId: {
        serializedName: "principalId",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      clientId: {
        serializedName: "clientId",
        readOnly: true,
        type: {
          name: "String"
        }
      }
    }
  }
};

export const MitigateJobRequest: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "MitigateJobRequest",
    modelProperties: {
      customerResolutionCode: {
        serializedName: "customerResolutionCode",
        required: true,
        type: {
          name: "Enum",
          allowedValues: ["None", "MoveToCleanUpDevice", "Resume"]
        }
      }
    }
  }
};

export const MarkDevicesShippedRequest: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "MarkDevicesShippedRequest",
    modelProperties: {
      deliverToDcPackageDetails: {
        serializedName: "deliverToDcPackageDetails",
        type: {
          name: "Composite",
          className: "PackageCarrierInfo"
        }
      }
    }
  }
};

export const PackageCarrierInfo: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "PackageCarrierInfo",
    modelProperties: {
      carrierName: {
        serializedName: "carrierName",
        type: {
          name: "String"
        }
      },
      trackingId: {
        serializedName: "trackingId",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const AvailableSkuRequest: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "AvailableSkuRequest",
    modelProperties: {
      transferType: {
        serializedName: "transferType",
        required: true,
        type: {
          name: "Enum",
          allowedValues: ["ImportToAzure", "ExportFromAzure"]
        }
      },
      country: {
        serializedName: "country",
        required: true,
        type: {
          name: "String"
        }
      },
      location: {
        serializedName: "location",
        required: true,
        type: {
          name: "String"
        }
      },
      skuNames: {
        serializedName: "skuNames",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Enum",
              allowedValues: [
                "DataBox",
                "DataBoxDisk",
                "DataBoxHeavy",
                "DataBoxCustomerDisk"
              ]
            }
          }
        }
      }
    }
  }
};

export const AvailableSkusResult: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "AvailableSkusResult",
    modelProperties: {
      value: {
        serializedName: "value",
        readOnly: true,
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "SkuInformation"
            }
          }
        }
      },
      nextLink: {
        serializedName: "nextLink",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const SkuInformation: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "SkuInformation",
    modelProperties: {
      sku: {
        serializedName: "sku",
        type: {
          name: "Composite",
          className: "Sku"
        }
      },
      enabled: {
        serializedName: "enabled",
        readOnly: true,
        type: {
          name: "Boolean"
        }
      },
      dataLocationToServiceLocationMap: {
        serializedName: "properties.dataLocationToServiceLocationMap",
        readOnly: true,
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "DataLocationToServiceLocationMap"
            }
          }
        }
      },
      capacity: {
        serializedName: "properties.capacity",
        type: {
          name: "Composite",
          className: "SkuCapacity"
        }
      },
      costs: {
        serializedName: "properties.costs",
        readOnly: true,
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "SkuCost"
            }
          }
        }
      },
      apiVersions: {
        serializedName: "properties.apiVersions",
        readOnly: true,
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "String"
            }
          }
        }
      },
      disabledReason: {
        serializedName: "properties.disabledReason",
        readOnly: true,
        type: {
          name: "Enum",
          allowedValues: [
            "None",
            "Country",
            "Region",
            "Feature",
            "OfferType",
            "NoSubscriptionInfo"
          ]
        }
      },
      disabledReasonMessage: {
        serializedName: "properties.disabledReasonMessage",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      requiredFeature: {
        serializedName: "properties.requiredFeature",
        readOnly: true,
        type: {
          name: "String"
        }
      }
    }
  }
};

export const DataLocationToServiceLocationMap: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "DataLocationToServiceLocationMap",
    modelProperties: {
      dataLocation: {
        serializedName: "dataLocation",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      serviceLocation: {
        serializedName: "serviceLocation",
        readOnly: true,
        type: {
          name: "String"
        }
      }
    }
  }
};

export const SkuCapacity: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "SkuCapacity",
    modelProperties: {
      usable: {
        serializedName: "usable",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      maximum: {
        serializedName: "maximum",
        readOnly: true,
        type: {
          name: "String"
        }
      }
    }
  }
};

export const SkuCost: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "SkuCost",
    modelProperties: {
      meterId: {
        serializedName: "meterId",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      meterType: {
        serializedName: "meterType",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      multiplier: {
        serializedName: "multiplier",
        readOnly: true,
        type: {
          name: "Number"
        }
      }
    }
  }
};

export const ValidationInputRequest: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "ValidationInputRequest",
    uberParent: "ValidationInputRequest",
    polymorphicDiscriminator: {
      serializedName: "validationType",
      clientName: "validationType"
    },
    modelProperties: {
      validationType: {
        serializedName: "validationType",
        required: true,
        type: {
          name: "Enum",
          allowedValues: [
            "ValidateAddress",
            "ValidateSubscriptionIsAllowedToCreateJob",
            "ValidatePreferences",
            "ValidateCreateOrderLimit",
            "ValidateSkuAvailability",
            "ValidateDataTransferDetails"
          ]
        }
      }
    }
  }
};

export const AddressValidationOutput: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "AddressValidationOutput",
    modelProperties: {
      validationType: {
        serializedName: "properties.validationType",
        type: {
          name: "Enum",
          allowedValues: [
            "ValidateAddress",
            "ValidateSubscriptionIsAllowedToCreateJob",
            "ValidatePreferences",
            "ValidateCreateOrderLimit",
            "ValidateSkuAvailability",
            "ValidateDataTransferDetails"
          ]
        }
      },
      error: {
        serializedName: "properties.error",
        type: {
          name: "Composite",
          className: "CloudError"
        }
      },
      validationStatus: {
        serializedName: "properties.validationStatus",
        readOnly: true,
        type: {
          name: "Enum",
          allowedValues: ["Valid", "Invalid", "Ambiguous"]
        }
      },
      alternateAddresses: {
        serializedName: "properties.alternateAddresses",
        readOnly: true,
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "ShippingAddress"
            }
          }
        }
      }
    }
  }
};

export const ValidationInputResponse: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "ValidationInputResponse",
    uberParent: "ValidationInputResponse",
    polymorphicDiscriminator: {
      serializedName: "validationType",
      clientName: "validationType"
    },
    modelProperties: {
      validationType: {
        serializedName: "validationType",
        required: true,
        type: {
          name: "Enum",
          allowedValues: [
            "ValidateAddress",
            "ValidateSubscriptionIsAllowedToCreateJob",
            "ValidatePreferences",
            "ValidateCreateOrderLimit",
            "ValidateSkuAvailability",
            "ValidateDataTransferDetails"
          ]
        }
      },
      error: {
        serializedName: "error",
        type: {
          name: "Composite",
          className: "CloudError"
        }
      }
    }
  }
};

export const ValidationRequest: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "ValidationRequest",
    uberParent: "ValidationRequest",
    polymorphicDiscriminator: {
      serializedName: "validationCategory",
      clientName: "validationCategory"
    },
    modelProperties: {
      validationCategory: {
        defaultValue: "JobCreationValidation",
        isConstant: true,
        serializedName: "validationCategory",
        type: {
          name: "String"
        }
      },
      individualRequestDetails: {
        serializedName: "individualRequestDetails",
        required: true,
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "ValidationInputRequest"
            }
          }
        }
      }
    }
  }
};

export const ValidationResponse: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "ValidationResponse",
    modelProperties: {
      status: {
        serializedName: "properties.status",
        readOnly: true,
        type: {
          name: "Enum",
          allowedValues: [
            "AllValidToProceed",
            "InputsRevisitRequired",
            "CertainInputValidationsSkipped"
          ]
        }
      },
      individualResponseDetails: {
        serializedName: "properties.individualResponseDetails",
        readOnly: true,
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "ValidationInputResponse"
            }
          }
        }
      }
    }
  }
};

export const JobResourceUpdateParameter: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "JobResourceUpdateParameter",
    modelProperties: {
      tags: {
        serializedName: "tags",
        type: {
          name: "Dictionary",
          value: { type: { name: "String" } }
        }
      },
      identity: {
        serializedName: "identity",
        type: {
          name: "Composite",
          className: "ResourceIdentity"
        }
      },
      details: {
        serializedName: "properties.details",
        type: {
          name: "Composite",
          className: "UpdateJobDetails"
        }
      }
    }
  }
};

export const UpdateJobDetails: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "UpdateJobDetails",
    modelProperties: {
      contactDetails: {
        serializedName: "contactDetails",
        type: {
          name: "Composite",
          className: "ContactDetails"
        }
      },
      shippingAddress: {
        serializedName: "shippingAddress",
        type: {
          name: "Composite",
          className: "ShippingAddress"
        }
      },
      keyEncryptionKey: {
        serializedName: "keyEncryptionKey",
        type: {
          name: "Composite",
          className: "KeyEncryptionKey"
        }
      },
      returnToCustomerPackageDetails: {
        serializedName: "returnToCustomerPackageDetails",
        type: {
          name: "Composite",
          className: "PackageCarrierDetails"
        }
      }
    }
  }
};

export const PackageCarrierDetails: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "PackageCarrierDetails",
    modelProperties: {
      carrierAccountNumber: {
        serializedName: "carrierAccountNumber",
        type: {
          name: "String"
        }
      },
      carrierName: {
        serializedName: "carrierName",
        type: {
          name: "String"
        }
      },
      trackingId: {
        serializedName: "trackingId",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const ShipmentPickUpRequest: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "ShipmentPickUpRequest",
    modelProperties: {
      startTime: {
        serializedName: "startTime",
        required: true,
        type: {
          name: "DateTime"
        }
      },
      endTime: {
        serializedName: "endTime",
        required: true,
        type: {
          name: "DateTime"
        }
      },
      shipmentLocation: {
        serializedName: "shipmentLocation",
        required: true,
        type: {
          name: "String"
        }
      }
    }
  }
};

export const ShipmentPickUpResponse: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "ShipmentPickUpResponse",
    modelProperties: {
      confirmationNumber: {
        serializedName: "confirmationNumber",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      readyByTime: {
        serializedName: "readyByTime",
        readOnly: true,
        type: {
          name: "DateTime"
        }
      }
    }
  }
};

export const CancellationReason: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "CancellationReason",
    modelProperties: {
      reason: {
        serializedName: "reason",
        required: true,
        type: {
          name: "String"
        }
      }
    }
  }
};

export const UnencryptedCredentialsList: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "UnencryptedCredentialsList",
    modelProperties: {
      value: {
        serializedName: "value",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "UnencryptedCredentials"
            }
          }
        }
      },
      nextLink: {
        serializedName: "nextLink",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const UnencryptedCredentials: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "UnencryptedCredentials",
    modelProperties: {
      jobName: {
        serializedName: "jobName",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      jobSecrets: {
        serializedName: "jobSecrets",
        type: {
          name: "Composite",
          className: "JobSecrets"
        }
      }
    }
  }
};

export const JobSecrets: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "JobSecrets",
    uberParent: "JobSecrets",
    polymorphicDiscriminator: {
      serializedName: "jobSecretsType",
      clientName: "jobSecretsType"
    },
    modelProperties: {
      jobSecretsType: {
        serializedName: "jobSecretsType",
        required: true,
        type: {
          name: "Enum",
          allowedValues: [
            "DataBox",
            "DataBoxDisk",
            "DataBoxHeavy",
            "DataBoxCustomerDisk"
          ]
        }
      },
      dcAccessSecurityCode: {
        serializedName: "dcAccessSecurityCode",
        type: {
          name: "Composite",
          className: "DcAccessSecurityCode"
        }
      },
      error: {
        serializedName: "error",
        type: {
          name: "Composite",
          className: "CloudError"
        }
      }
    }
  }
};

export const DcAccessSecurityCode: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "DcAccessSecurityCode",
    modelProperties: {
      reverseDCAccessCode: {
        serializedName: "reverseDCAccessCode",
        type: {
          name: "String"
        }
      },
      forwardDCAccessCode: {
        serializedName: "forwardDCAccessCode",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const RegionConfigurationRequest: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "RegionConfigurationRequest",
    modelProperties: {
      scheduleAvailabilityRequest: {
        serializedName: "scheduleAvailabilityRequest",
        type: {
          name: "Composite",
          className: "ScheduleAvailabilityRequest"
        }
      },
      transportAvailabilityRequest: {
        serializedName: "transportAvailabilityRequest",
        type: {
          name: "Composite",
          className: "TransportAvailabilityRequest"
        }
      },
      datacenterAddressRequest: {
        serializedName: "datacenterAddressRequest",
        type: {
          name: "Composite",
          className: "DatacenterAddressRequest"
        }
      }
    }
  }
};

export const ScheduleAvailabilityRequest: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "ScheduleAvailabilityRequest",
    uberParent: "ScheduleAvailabilityRequest",
    polymorphicDiscriminator: {
      serializedName: "skuName",
      clientName: "skuName"
    },
    modelProperties: {
      storageLocation: {
        serializedName: "storageLocation",
        required: true,
        type: {
          name: "String"
        }
      },
      skuName: {
        serializedName: "skuName",
        required: true,
        type: {
          name: "Enum",
          allowedValues: [
            "DataBox",
            "DataBoxDisk",
            "DataBoxHeavy",
            "DataBoxCustomerDisk"
          ]
        }
      },
      country: {
        serializedName: "country",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const TransportAvailabilityRequest: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "TransportAvailabilityRequest",
    modelProperties: {
      skuName: {
        serializedName: "skuName",
        type: {
          name: "Enum",
          allowedValues: [
            "DataBox",
            "DataBoxDisk",
            "DataBoxHeavy",
            "DataBoxCustomerDisk"
          ]
        }
      }
    }
  }
};

export const DatacenterAddressRequest: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "DatacenterAddressRequest",
    modelProperties: {
      storageLocation: {
        serializedName: "storageLocation",
        required: true,
        type: {
          name: "String"
        }
      },
      skuName: {
        serializedName: "skuName",
        required: true,
        type: {
          name: "Enum",
          allowedValues: [
            "DataBox",
            "DataBoxDisk",
            "DataBoxHeavy",
            "DataBoxCustomerDisk"
          ]
        }
      }
    }
  }
};

export const RegionConfigurationResponse: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "RegionConfigurationResponse",
    modelProperties: {
      scheduleAvailabilityResponse: {
        serializedName: "scheduleAvailabilityResponse",
        type: {
          name: "Composite",
          className: "ScheduleAvailabilityResponse"
        }
      },
      transportAvailabilityResponse: {
        serializedName: "transportAvailabilityResponse",
        type: {
          name: "Composite",
          className: "TransportAvailabilityResponse"
        }
      },
      datacenterAddressResponse: {
        serializedName: "datacenterAddressResponse",
        type: {
          name: "Composite",
          className: "DatacenterAddressResponse"
        }
      }
    }
  }
};

export const ScheduleAvailabilityResponse: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "ScheduleAvailabilityResponse",
    modelProperties: {
      availableDates: {
        serializedName: "availableDates",
        readOnly: true,
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "DateTime"
            }
          }
        }
      }
    }
  }
};

export const TransportAvailabilityResponse: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "TransportAvailabilityResponse",
    modelProperties: {
      transportAvailabilityDetails: {
        serializedName: "transportAvailabilityDetails",
        readOnly: true,
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "TransportAvailabilityDetails"
            }
          }
        }
      }
    }
  }
};

export const TransportAvailabilityDetails: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "TransportAvailabilityDetails",
    modelProperties: {
      shipmentType: {
        serializedName: "shipmentType",
        readOnly: true,
        type: {
          name: "Enum",
          allowedValues: ["CustomerManaged", "MicrosoftManaged"]
        }
      }
    }
  }
};

export const AccountCredentialDetails: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "AccountCredentialDetails",
    modelProperties: {
      accountName: {
        serializedName: "accountName",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      dataAccountType: {
        serializedName: "dataAccountType",
        readOnly: true,
        type: {
          name: "Enum",
          allowedValues: ["StorageAccount", "ManagedDisk"]
        }
      },
      accountConnectionString: {
        serializedName: "accountConnectionString",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      shareCredentialDetails: {
        serializedName: "shareCredentialDetails",
        readOnly: true,
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "ShareCredentialDetails"
            }
          }
        }
      }
    }
  }
};

export const ShareCredentialDetails: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "ShareCredentialDetails",
    modelProperties: {
      shareName: {
        serializedName: "shareName",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      shareType: {
        serializedName: "shareType",
        readOnly: true,
        type: {
          name: "Enum",
          allowedValues: [
            "UnknownType",
            "HCS",
            "BlockBlob",
            "PageBlob",
            "AzureFile",
            "ManagedDisk"
          ]
        }
      },
      userName: {
        serializedName: "userName",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      password: {
        serializedName: "password",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      supportedAccessProtocols: {
        serializedName: "supportedAccessProtocols",
        readOnly: true,
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Enum",
              allowedValues: ["SMB", "NFS"]
            }
          }
        }
      }
    }
  }
};

export const ApplianceNetworkConfiguration: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "ApplianceNetworkConfiguration",
    modelProperties: {
      name: {
        serializedName: "name",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      macAddress: {
        serializedName: "macAddress",
        readOnly: true,
        type: {
          name: "String"
        }
      }
    }
  }
};

export const ArmBaseObject: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "ArmBaseObject",
    modelProperties: {
      name: {
        serializedName: "name",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      id: {
        serializedName: "id",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      type: {
        serializedName: "type",
        readOnly: true,
        type: {
          name: "String"
        }
      }
    }
  }
};

export const CopyProgress: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "CopyProgress",
    modelProperties: {
      storageAccountName: {
        serializedName: "storageAccountName",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      transferType: {
        serializedName: "transferType",
        readOnly: true,
        type: {
          name: "Enum",
          allowedValues: ["ImportToAzure", "ExportFromAzure"]
        }
      },
      dataAccountType: {
        serializedName: "dataAccountType",
        readOnly: true,
        type: {
          name: "Enum",
          allowedValues: ["StorageAccount", "ManagedDisk"]
        }
      },
      accountId: {
        serializedName: "accountId",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      bytesProcessed: {
        serializedName: "bytesProcessed",
        readOnly: true,
        type: {
          name: "Number"
        }
      },
      totalBytesToProcess: {
        serializedName: "totalBytesToProcess",
        readOnly: true,
        type: {
          name: "Number"
        }
      },
      filesProcessed: {
        serializedName: "filesProcessed",
        readOnly: true,
        type: {
          name: "Number"
        }
      },
      totalFilesToProcess: {
        serializedName: "totalFilesToProcess",
        readOnly: true,
        type: {
          name: "Number"
        }
      },
      invalidFilesProcessed: {
        serializedName: "invalidFilesProcessed",
        readOnly: true,
        type: {
          name: "Number"
        }
      },
      invalidFileBytesUploaded: {
        serializedName: "invalidFileBytesUploaded",
        readOnly: true,
        type: {
          name: "Number"
        }
      },
      renamedContainerCount: {
        serializedName: "renamedContainerCount",
        readOnly: true,
        type: {
          name: "Number"
        }
      },
      filesErroredOut: {
        serializedName: "filesErroredOut",
        readOnly: true,
        type: {
          name: "Number"
        }
      },
      directoriesErroredOut: {
        serializedName: "directoriesErroredOut",
        readOnly: true,
        type: {
          name: "Number"
        }
      },
      invalidDirectoriesProcessed: {
        serializedName: "invalidDirectoriesProcessed",
        readOnly: true,
        type: {
          name: "Number"
        }
      },
      isEnumerationInProgress: {
        serializedName: "isEnumerationInProgress",
        readOnly: true,
        type: {
          name: "Boolean"
        }
      }
    }
  }
};

export const ImportDiskDetails: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "ImportDiskDetails",
    modelProperties: {
      manifestFile: {
        serializedName: "manifestFile",
        required: true,
        type: {
          name: "String"
        }
      },
      manifestHash: {
        serializedName: "manifestHash",
        required: true,
        type: {
          name: "String"
        }
      },
      bitLockerKey: {
        serializedName: "bitLockerKey",
        required: true,
        type: {
          name: "String"
        }
      },
      backupManifestCloudPath: {
        serializedName: "backupManifestCloudPath",
        readOnly: true,
        type: {
          name: "String"
        }
      }
    }
  }
};

export const ExportDiskDetails: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "ExportDiskDetails",
    modelProperties: {
      manifestFile: {
        serializedName: "manifestFile",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      manifestHash: {
        serializedName: "manifestHash",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      backupManifestCloudPath: {
        serializedName: "backupManifestCloudPath",
        readOnly: true,
        type: {
          name: "String"
        }
      }
    }
  }
};

export const DiskSecret: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "DiskSecret",
    modelProperties: {
      diskSerialNumber: {
        serializedName: "diskSerialNumber",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      bitLockerKey: {
        serializedName: "bitLockerKey",
        readOnly: true,
        type: {
          name: "String"
        }
      }
    }
  }
};

export const DataBoxDiskCopyProgress: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "DataBoxDiskCopyProgress",
    modelProperties: {
      serialNumber: {
        serializedName: "serialNumber",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      bytesCopied: {
        serializedName: "bytesCopied",
        readOnly: true,
        type: {
          name: "Number"
        }
      },
      percentComplete: {
        serializedName: "percentComplete",
        readOnly: true,
        type: {
          name: "Number"
        }
      },
      status: {
        serializedName: "status",
        readOnly: true,
        type: {
          name: "String"
        }
      }
    }
  }
};

export const DataBoxHeavySecret: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "DataBoxHeavySecret",
    modelProperties: {
      deviceSerialNumber: {
        serializedName: "deviceSerialNumber",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      devicePassword: {
        serializedName: "devicePassword",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      networkConfigurations: {
        serializedName: "networkConfigurations",
        readOnly: true,
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "ApplianceNetworkConfiguration"
            }
          }
        }
      },
      encodedValidationCertPubKey: {
        serializedName: "encodedValidationCertPubKey",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      accountCredentialDetails: {
        serializedName: "accountCredentialDetails",
        readOnly: true,
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "AccountCredentialDetails"
            }
          }
        }
      }
    }
  }
};

export const DataBoxSecret: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "DataBoxSecret",
    modelProperties: {
      deviceSerialNumber: {
        serializedName: "deviceSerialNumber",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      devicePassword: {
        serializedName: "devicePassword",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      networkConfigurations: {
        serializedName: "networkConfigurations",
        readOnly: true,
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "ApplianceNetworkConfiguration"
            }
          }
        }
      },
      encodedValidationCertPubKey: {
        serializedName: "encodedValidationCertPubKey",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      accountCredentialDetails: {
        serializedName: "accountCredentialDetails",
        readOnly: true,
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "AccountCredentialDetails"
            }
          }
        }
      }
    }
  }
};

export const DataBoxCustomerDiskJobDetails: coreClient.CompositeMapper = {
  serializedName: "DataBoxCustomerDisk",
  type: {
    name: "Composite",
    className: "DataBoxCustomerDiskJobDetails",
    uberParent: "JobDetails",
    polymorphicDiscriminator: JobDetails.type.polymorphicDiscriminator,
    modelProperties: {
      ...JobDetails.type.modelProperties,
      importDiskDetailsCollection: {
        serializedName: "importDiskDetailsCollection",
        type: {
          name: "Dictionary",
          value: { type: { name: "Composite", className: "ImportDiskDetails" } }
        }
      },
      exportDiskDetailsCollection: {
        serializedName: "exportDiskDetailsCollection",
        readOnly: true,
        type: {
          name: "Dictionary",
          value: { type: { name: "Composite", className: "ExportDiskDetails" } }
        }
      },
      copyProgress: {
        serializedName: "copyProgress",
        readOnly: true,
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "DataBoxCustomerDiskCopyProgress"
            }
          }
        }
      },
      deliverToDcPackageDetails: {
        serializedName: "deliverToDcPackageDetails",
        type: {
          name: "Composite",
          className: "PackageCarrierInfo"
        }
      },
      returnToCustomerPackageDetails: {
        serializedName: "returnToCustomerPackageDetails",
        type: {
          name: "Composite",
          className: "PackageCarrierDetails"
        }
      },
      enableManifestBackup: {
        defaultValue: false,
        serializedName: "enableManifestBackup",
        type: {
          name: "Boolean"
        }
      }
    }
  }
};

export const DataBoxDiskJobDetails: coreClient.CompositeMapper = {
  serializedName: "DataBoxDisk",
  type: {
    name: "Composite",
    className: "DataBoxDiskJobDetails",
    uberParent: "JobDetails",
    polymorphicDiscriminator: JobDetails.type.polymorphicDiscriminator,
    modelProperties: {
      ...JobDetails.type.modelProperties,
      preferredDisks: {
        serializedName: "preferredDisks",
        type: {
          name: "Dictionary",
          value: { type: { name: "Number" } }
        }
      },
      copyProgress: {
        serializedName: "copyProgress",
        readOnly: true,
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "DataBoxDiskCopyProgress"
            }
          }
        }
      },
      disksAndSizeDetails: {
        serializedName: "disksAndSizeDetails",
        readOnly: true,
        type: {
          name: "Dictionary",
          value: { type: { name: "Number" } }
        }
      },
      passkey: {
        serializedName: "passkey",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const DataBoxHeavyJobDetails: coreClient.CompositeMapper = {
  serializedName: "DataBoxHeavy",
  type: {
    name: "Composite",
    className: "DataBoxHeavyJobDetails",
    uberParent: "JobDetails",
    polymorphicDiscriminator: JobDetails.type.polymorphicDiscriminator,
    modelProperties: {
      ...JobDetails.type.modelProperties,
      copyProgress: {
        serializedName: "copyProgress",
        readOnly: true,
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "CopyProgress"
            }
          }
        }
      },
      devicePassword: {
        serializedName: "devicePassword",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const DataBoxJobDetails: coreClient.CompositeMapper = {
  serializedName: "DataBox",
  type: {
    name: "Composite",
    className: "DataBoxJobDetails",
    uberParent: "JobDetails",
    polymorphicDiscriminator: JobDetails.type.polymorphicDiscriminator,
    modelProperties: {
      ...JobDetails.type.modelProperties,
      copyProgress: {
        serializedName: "copyProgress",
        readOnly: true,
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "CopyProgress"
            }
          }
        }
      },
      devicePassword: {
        serializedName: "devicePassword",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const ManagedDiskDetails: coreClient.CompositeMapper = {
  serializedName: "ManagedDisk",
  type: {
    name: "Composite",
    className: "ManagedDiskDetails",
    uberParent: "DataAccountDetails",
    polymorphicDiscriminator: DataAccountDetails.type.polymorphicDiscriminator,
    modelProperties: {
      ...DataAccountDetails.type.modelProperties,
      resourceGroupId: {
        serializedName: "resourceGroupId",
        required: true,
        type: {
          name: "String"
        }
      },
      stagingStorageAccountId: {
        serializedName: "stagingStorageAccountId",
        required: true,
        type: {
          name: "String"
        }
      }
    }
  }
};

export const StorageAccountDetails: coreClient.CompositeMapper = {
  serializedName: "StorageAccount",
  type: {
    name: "Composite",
    className: "StorageAccountDetails",
    uberParent: "DataAccountDetails",
    polymorphicDiscriminator: DataAccountDetails.type.polymorphicDiscriminator,
    modelProperties: {
      ...DataAccountDetails.type.modelProperties,
      storageAccountId: {
        serializedName: "storageAccountId",
        required: true,
        type: {
          name: "String"
        }
      }
    }
  }
};

export const DataBoxAccountCopyLogDetails: coreClient.CompositeMapper = {
  serializedName: "DataBox",
  type: {
    name: "Composite",
    className: "DataBoxAccountCopyLogDetails",
    uberParent: "CopyLogDetails",
    polymorphicDiscriminator: CopyLogDetails.type.polymorphicDiscriminator,
    modelProperties: {
      ...CopyLogDetails.type.modelProperties,
      accountName: {
        serializedName: "accountName",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      copyLogLink: {
        serializedName: "copyLogLink",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      copyVerboseLogLink: {
        serializedName: "copyVerboseLogLink",
        readOnly: true,
        type: {
          name: "String"
        }
      }
    }
  }
};

export const DataBoxCustomerDiskCopyLogDetails: coreClient.CompositeMapper = {
  serializedName: "DataBoxCustomerDisk",
  type: {
    name: "Composite",
    className: "DataBoxCustomerDiskCopyLogDetails",
    uberParent: "CopyLogDetails",
    polymorphicDiscriminator: CopyLogDetails.type.polymorphicDiscriminator,
    modelProperties: {
      ...CopyLogDetails.type.modelProperties,
      serialNumber: {
        serializedName: "serialNumber",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      errorLogLink: {
        serializedName: "errorLogLink",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      verboseLogLink: {
        serializedName: "verboseLogLink",
        readOnly: true,
        type: {
          name: "String"
        }
      }
    }
  }
};

export const DataBoxDiskCopyLogDetails: coreClient.CompositeMapper = {
  serializedName: "DataBoxDisk",
  type: {
    name: "Composite",
    className: "DataBoxDiskCopyLogDetails",
    uberParent: "CopyLogDetails",
    polymorphicDiscriminator: CopyLogDetails.type.polymorphicDiscriminator,
    modelProperties: {
      ...CopyLogDetails.type.modelProperties,
      diskSerialNumber: {
        serializedName: "diskSerialNumber",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      errorLogLink: {
        serializedName: "errorLogLink",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      verboseLogLink: {
        serializedName: "verboseLogLink",
        readOnly: true,
        type: {
          name: "String"
        }
      }
    }
  }
};

export const DataBoxHeavyAccountCopyLogDetails: coreClient.CompositeMapper = {
  serializedName: "DataBoxHeavy",
  type: {
    name: "Composite",
    className: "DataBoxHeavyAccountCopyLogDetails",
    uberParent: "CopyLogDetails",
    polymorphicDiscriminator: CopyLogDetails.type.polymorphicDiscriminator,
    modelProperties: {
      ...CopyLogDetails.type.modelProperties,
      accountName: {
        serializedName: "accountName",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      copyLogLink: {
        serializedName: "copyLogLink",
        readOnly: true,
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "String"
            }
          }
        }
      },
      copyVerboseLogLink: {
        serializedName: "copyVerboseLogLink",
        readOnly: true,
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "String"
            }
          }
        }
      }
    }
  }
};

export const DatacenterAddressInstructionResponse: coreClient.CompositeMapper = {
  serializedName: "DatacenterAddressInstruction",
  type: {
    name: "Composite",
    className: "DatacenterAddressInstructionResponse",
    uberParent: "DatacenterAddressResponse",
    polymorphicDiscriminator:
      DatacenterAddressResponse.type.polymorphicDiscriminator,
    modelProperties: {
      ...DatacenterAddressResponse.type.modelProperties,
      communicationInstruction: {
        serializedName: "communicationInstruction",
        readOnly: true,
        type: {
          name: "String"
        }
      }
    }
  }
};

export const DatacenterAddressLocationResponse: coreClient.CompositeMapper = {
  serializedName: "DatacenterAddressLocation",
  type: {
    name: "Composite",
    className: "DatacenterAddressLocationResponse",
    uberParent: "DatacenterAddressResponse",
    polymorphicDiscriminator:
      DatacenterAddressResponse.type.polymorphicDiscriminator,
    modelProperties: {
      ...DatacenterAddressResponse.type.modelProperties,
      contactPersonName: {
        serializedName: "contactPersonName",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      company: {
        serializedName: "company",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      street1: {
        serializedName: "street1",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      street2: {
        serializedName: "street2",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      street3: {
        serializedName: "street3",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      city: {
        serializedName: "city",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      state: {
        serializedName: "state",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      zip: {
        serializedName: "zip",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      country: {
        serializedName: "country",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      phone: {
        serializedName: "phone",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      phoneExtension: {
        serializedName: "phoneExtension",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      addressType: {
        serializedName: "addressType",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      additionalShippingInformation: {
        serializedName: "additionalShippingInformation",
        readOnly: true,
        type: {
          name: "String"
        }
      }
    }
  }
};

export const JobResource: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "JobResource",
    modelProperties: {
      ...Resource.type.modelProperties,
      name: {
        serializedName: "name",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      id: {
        serializedName: "id",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      type: {
        serializedName: "type",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      systemData: {
        serializedName: "systemData",
        type: {
          name: "Composite",
          className: "SystemData"
        }
      },
      transferType: {
        serializedName: "properties.transferType",
        required: true,
        type: {
          name: "Enum",
          allowedValues: ["ImportToAzure", "ExportFromAzure"]
        }
      },
      isCancellable: {
        serializedName: "properties.isCancellable",
        readOnly: true,
        type: {
          name: "Boolean"
        }
      },
      isDeletable: {
        serializedName: "properties.isDeletable",
        readOnly: true,
        type: {
          name: "Boolean"
        }
      },
      isShippingAddressEditable: {
        serializedName: "properties.isShippingAddressEditable",
        readOnly: true,
        type: {
          name: "Boolean"
        }
      },
      isPrepareToShipEnabled: {
        serializedName: "properties.isPrepareToShipEnabled",
        readOnly: true,
        type: {
          name: "Boolean"
        }
      },
      status: {
        serializedName: "properties.status",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      startTime: {
        serializedName: "properties.startTime",
        readOnly: true,
        type: {
          name: "DateTime"
        }
      },
      error: {
        serializedName: "properties.error",
        type: {
          name: "Composite",
          className: "CloudError"
        }
      },
      details: {
        serializedName: "properties.details",
        type: {
          name: "Composite",
          className: "JobDetails"
        }
      },
      cancellationReason: {
        serializedName: "properties.cancellationReason",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      deliveryType: {
        defaultValue: "NonScheduled",
        serializedName: "properties.deliveryType",
        type: {
          name: "Enum",
          allowedValues: ["NonScheduled", "Scheduled"]
        }
      },
      deliveryInfo: {
        serializedName: "properties.deliveryInfo",
        type: {
          name: "Composite",
          className: "JobDeliveryInfo"
        }
      },
      isCancellableWithoutFee: {
        serializedName: "properties.isCancellableWithoutFee",
        readOnly: true,
        type: {
          name: "Boolean"
        }
      }
    }
  }
};

export const ValidateAddress: coreClient.CompositeMapper = {
  serializedName: "ValidateAddress",
  type: {
    name: "Composite",
    className: "ValidateAddress",
    uberParent: "ValidationInputRequest",
    polymorphicDiscriminator:
      ValidationInputRequest.type.polymorphicDiscriminator,
    modelProperties: {
      ...ValidationInputRequest.type.modelProperties,
      shippingAddress: {
        serializedName: "shippingAddress",
        type: {
          name: "Composite",
          className: "ShippingAddress"
        }
      },
      deviceType: {
        serializedName: "deviceType",
        required: true,
        type: {
          name: "Enum",
          allowedValues: [
            "DataBox",
            "DataBoxDisk",
            "DataBoxHeavy",
            "DataBoxCustomerDisk"
          ]
        }
      },
      transportPreferences: {
        serializedName: "transportPreferences",
        type: {
          name: "Composite",
          className: "TransportPreferences"
        }
      }
    }
  }
};

export const CreateOrderLimitForSubscriptionValidationRequest: coreClient.CompositeMapper = {
  serializedName: "ValidateCreateOrderLimit",
  type: {
    name: "Composite",
    className: "CreateOrderLimitForSubscriptionValidationRequest",
    uberParent: "ValidationInputRequest",
    polymorphicDiscriminator:
      ValidationInputRequest.type.polymorphicDiscriminator,
    modelProperties: {
      ...ValidationInputRequest.type.modelProperties,
      deviceType: {
        serializedName: "deviceType",
        required: true,
        type: {
          name: "Enum",
          allowedValues: [
            "DataBox",
            "DataBoxDisk",
            "DataBoxHeavy",
            "DataBoxCustomerDisk"
          ]
        }
      }
    }
  }
};

export const DataTransferDetailsValidationRequest: coreClient.CompositeMapper = {
  serializedName: "ValidateDataTransferDetails",
  type: {
    name: "Composite",
    className: "DataTransferDetailsValidationRequest",
    uberParent: "ValidationInputRequest",
    polymorphicDiscriminator:
      ValidationInputRequest.type.polymorphicDiscriminator,
    modelProperties: {
      ...ValidationInputRequest.type.modelProperties,
      dataExportDetails: {
        serializedName: "dataExportDetails",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "DataExportDetails"
            }
          }
        }
      },
      dataImportDetails: {
        serializedName: "dataImportDetails",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "DataImportDetails"
            }
          }
        }
      },
      deviceType: {
        serializedName: "deviceType",
        required: true,
        type: {
          name: "Enum",
          allowedValues: [
            "DataBox",
            "DataBoxDisk",
            "DataBoxHeavy",
            "DataBoxCustomerDisk"
          ]
        }
      },
      transferType: {
        serializedName: "transferType",
        required: true,
        type: {
          name: "Enum",
          allowedValues: ["ImportToAzure", "ExportFromAzure"]
        }
      }
    }
  }
};

export const PreferencesValidationRequest: coreClient.CompositeMapper = {
  serializedName: "ValidatePreferences",
  type: {
    name: "Composite",
    className: "PreferencesValidationRequest",
    uberParent: "ValidationInputRequest",
    polymorphicDiscriminator:
      ValidationInputRequest.type.polymorphicDiscriminator,
    modelProperties: {
      ...ValidationInputRequest.type.modelProperties,
      preference: {
        serializedName: "preference",
        type: {
          name: "Composite",
          className: "Preferences"
        }
      },
      deviceType: {
        serializedName: "deviceType",
        required: true,
        type: {
          name: "Enum",
          allowedValues: [
            "DataBox",
            "DataBoxDisk",
            "DataBoxHeavy",
            "DataBoxCustomerDisk"
          ]
        }
      }
    }
  }
};

export const SkuAvailabilityValidationRequest: coreClient.CompositeMapper = {
  serializedName: "ValidateSkuAvailability",
  type: {
    name: "Composite",
    className: "SkuAvailabilityValidationRequest",
    uberParent: "ValidationInputRequest",
    polymorphicDiscriminator:
      ValidationInputRequest.type.polymorphicDiscriminator,
    modelProperties: {
      ...ValidationInputRequest.type.modelProperties,
      deviceType: {
        serializedName: "deviceType",
        required: true,
        type: {
          name: "Enum",
          allowedValues: [
            "DataBox",
            "DataBoxDisk",
            "DataBoxHeavy",
            "DataBoxCustomerDisk"
          ]
        }
      },
      transferType: {
        serializedName: "transferType",
        required: true,
        type: {
          name: "Enum",
          allowedValues: ["ImportToAzure", "ExportFromAzure"]
        }
      },
      country: {
        serializedName: "country",
        required: true,
        type: {
          name: "String"
        }
      },
      location: {
        serializedName: "location",
        required: true,
        type: {
          name: "String"
        }
      }
    }
  }
};

export const SubscriptionIsAllowedToCreateJobValidationRequest: coreClient.CompositeMapper = {
  serializedName: "ValidateSubscriptionIsAllowedToCreateJob",
  type: {
    name: "Composite",
    className: "SubscriptionIsAllowedToCreateJobValidationRequest",
    uberParent: "ValidationInputRequest",
    polymorphicDiscriminator:
      ValidationInputRequest.type.polymorphicDiscriminator,
    modelProperties: {
      ...ValidationInputRequest.type.modelProperties
    }
  }
};

export const AddressValidationProperties: coreClient.CompositeMapper = {
  serializedName: "ValidateAddress",
  type: {
    name: "Composite",
    className: "AddressValidationProperties",
    uberParent: "ValidationInputResponse",
    polymorphicDiscriminator:
      ValidationInputResponse.type.polymorphicDiscriminator,
    modelProperties: {
      ...ValidationInputResponse.type.modelProperties,
      validationStatus: {
        serializedName: "validationStatus",
        readOnly: true,
        type: {
          name: "Enum",
          allowedValues: ["Valid", "Invalid", "Ambiguous"]
        }
      },
      alternateAddresses: {
        serializedName: "alternateAddresses",
        readOnly: true,
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "ShippingAddress"
            }
          }
        }
      }
    }
  }
};

export const CreateOrderLimitForSubscriptionValidationResponseProperties: coreClient.CompositeMapper = {
  serializedName: "ValidateCreateOrderLimit",
  type: {
    name: "Composite",
    className: "CreateOrderLimitForSubscriptionValidationResponseProperties",
    uberParent: "ValidationInputResponse",
    polymorphicDiscriminator:
      ValidationInputResponse.type.polymorphicDiscriminator,
    modelProperties: {
      ...ValidationInputResponse.type.modelProperties,
      status: {
        serializedName: "status",
        readOnly: true,
        type: {
          name: "Enum",
          allowedValues: ["Valid", "Invalid", "Skipped"]
        }
      }
    }
  }
};

export const DataTransferDetailsValidationResponseProperties: coreClient.CompositeMapper = {
  serializedName: "ValidateDataTransferDetails",
  type: {
    name: "Composite",
    className: "DataTransferDetailsValidationResponseProperties",
    uberParent: "ValidationInputResponse",
    polymorphicDiscriminator:
      ValidationInputResponse.type.polymorphicDiscriminator,
    modelProperties: {
      ...ValidationInputResponse.type.modelProperties,
      status: {
        serializedName: "status",
        readOnly: true,
        type: {
          name: "Enum",
          allowedValues: ["Valid", "Invalid", "Skipped"]
        }
      }
    }
  }
};

export const PreferencesValidationResponseProperties: coreClient.CompositeMapper = {
  serializedName: "ValidatePreferences",
  type: {
    name: "Composite",
    className: "PreferencesValidationResponseProperties",
    uberParent: "ValidationInputResponse",
    polymorphicDiscriminator:
      ValidationInputResponse.type.polymorphicDiscriminator,
    modelProperties: {
      ...ValidationInputResponse.type.modelProperties,
      status: {
        serializedName: "status",
        readOnly: true,
        type: {
          name: "Enum",
          allowedValues: ["Valid", "Invalid", "Skipped"]
        }
      }
    }
  }
};

export const SkuAvailabilityValidationResponseProperties: coreClient.CompositeMapper = {
  serializedName: "ValidateSkuAvailability",
  type: {
    name: "Composite",
    className: "SkuAvailabilityValidationResponseProperties",
    uberParent: "ValidationInputResponse",
    polymorphicDiscriminator:
      ValidationInputResponse.type.polymorphicDiscriminator,
    modelProperties: {
      ...ValidationInputResponse.type.modelProperties,
      status: {
        serializedName: "status",
        readOnly: true,
        type: {
          name: "Enum",
          allowedValues: ["Valid", "Invalid", "Skipped"]
        }
      }
    }
  }
};

export const SubscriptionIsAllowedToCreateJobValidationResponseProperties: coreClient.CompositeMapper = {
  serializedName: "ValidateSubscriptionIsAllowedToCreateJob",
  type: {
    name: "Composite",
    className: "SubscriptionIsAllowedToCreateJobValidationResponseProperties",
    uberParent: "ValidationInputResponse",
    polymorphicDiscriminator:
      ValidationInputResponse.type.polymorphicDiscriminator,
    modelProperties: {
      ...ValidationInputResponse.type.modelProperties,
      status: {
        serializedName: "status",
        readOnly: true,
        type: {
          name: "Enum",
          allowedValues: ["Valid", "Invalid", "Skipped"]
        }
      }
    }
  }
};

export const CreateJobValidations: coreClient.CompositeMapper = {
  serializedName: "JobCreationValidation",
  type: {
    name: "Composite",
    className: "CreateJobValidations",
    uberParent: "ValidationRequest",
    polymorphicDiscriminator: ValidationRequest.type.polymorphicDiscriminator,
    modelProperties: {
      ...ValidationRequest.type.modelProperties
    }
  }
};

export const CustomerDiskJobSecrets: coreClient.CompositeMapper = {
  serializedName: "DataBoxCustomerDisk",
  type: {
    name: "Composite",
    className: "CustomerDiskJobSecrets",
    uberParent: "JobSecrets",
    polymorphicDiscriminator: JobSecrets.type.polymorphicDiscriminator,
    modelProperties: {
      ...JobSecrets.type.modelProperties,
      diskSecrets: {
        serializedName: "diskSecrets",
        readOnly: true,
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "DiskSecret"
            }
          }
        }
      },
      carrierAccountNumber: {
        serializedName: "carrierAccountNumber",
        readOnly: true,
        type: {
          name: "String"
        }
      }
    }
  }
};

export const DataBoxDiskJobSecrets: coreClient.CompositeMapper = {
  serializedName: "DataBoxDisk",
  type: {
    name: "Composite",
    className: "DataBoxDiskJobSecrets",
    uberParent: "JobSecrets",
    polymorphicDiscriminator: JobSecrets.type.polymorphicDiscriminator,
    modelProperties: {
      ...JobSecrets.type.modelProperties,
      diskSecrets: {
        serializedName: "diskSecrets",
        readOnly: true,
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "DiskSecret"
            }
          }
        }
      },
      passKey: {
        serializedName: "passKey",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      isPasskeyUserDefined: {
        serializedName: "isPasskeyUserDefined",
        readOnly: true,
        type: {
          name: "Boolean"
        }
      }
    }
  }
};

export const DataBoxHeavyJobSecrets: coreClient.CompositeMapper = {
  serializedName: "DataBoxHeavy",
  type: {
    name: "Composite",
    className: "DataBoxHeavyJobSecrets",
    uberParent: "JobSecrets",
    polymorphicDiscriminator: JobSecrets.type.polymorphicDiscriminator,
    modelProperties: {
      ...JobSecrets.type.modelProperties,
      cabinetPodSecrets: {
        serializedName: "cabinetPodSecrets",
        readOnly: true,
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "DataBoxHeavySecret"
            }
          }
        }
      }
    }
  }
};

export const DataboxJobSecrets: coreClient.CompositeMapper = {
  serializedName: "DataBox",
  type: {
    name: "Composite",
    className: "DataboxJobSecrets",
    uberParent: "JobSecrets",
    polymorphicDiscriminator: JobSecrets.type.polymorphicDiscriminator,
    modelProperties: {
      ...JobSecrets.type.modelProperties,
      podSecrets: {
        serializedName: "podSecrets",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "DataBoxSecret"
            }
          }
        }
      }
    }
  }
};

export const DataBoxScheduleAvailabilityRequest: coreClient.CompositeMapper = {
  serializedName: "DataBox",
  type: {
    name: "Composite",
    className: "DataBoxScheduleAvailabilityRequest",
    uberParent: "ScheduleAvailabilityRequest",
    polymorphicDiscriminator:
      ScheduleAvailabilityRequest.type.polymorphicDiscriminator,
    modelProperties: {
      ...ScheduleAvailabilityRequest.type.modelProperties
    }
  }
};

export const DiskScheduleAvailabilityRequest: coreClient.CompositeMapper = {
  serializedName: "DataBoxDisk",
  type: {
    name: "Composite",
    className: "DiskScheduleAvailabilityRequest",
    uberParent: "ScheduleAvailabilityRequest",
    polymorphicDiscriminator:
      ScheduleAvailabilityRequest.type.polymorphicDiscriminator,
    modelProperties: {
      ...ScheduleAvailabilityRequest.type.modelProperties,
      expectedDataSizeInTeraBytes: {
        serializedName: "expectedDataSizeInTeraBytes",
        required: true,
        type: {
          name: "Number"
        }
      }
    }
  }
};

export const HeavyScheduleAvailabilityRequest: coreClient.CompositeMapper = {
  serializedName: "DataBoxHeavy",
  type: {
    name: "Composite",
    className: "HeavyScheduleAvailabilityRequest",
    uberParent: "ScheduleAvailabilityRequest",
    polymorphicDiscriminator:
      ScheduleAvailabilityRequest.type.polymorphicDiscriminator,
    modelProperties: {
      ...ScheduleAvailabilityRequest.type.modelProperties
    }
  }
};

export const DataBoxCustomerDiskCopyProgress: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "DataBoxCustomerDiskCopyProgress",
    modelProperties: {
      ...CopyProgress.type.modelProperties,
      serialNumber: {
        serializedName: "serialNumber",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      copyStatus: {
        serializedName: "copyStatus",
        readOnly: true,
        type: {
          name: "String"
        }
      }
    }
  }
};

export let discriminators = {
  JobDetails: JobDetails,
  DataAccountDetails: DataAccountDetails,
  CopyLogDetails: CopyLogDetails,
  DatacenterAddressResponse: DatacenterAddressResponse,
  ValidationInputRequest: ValidationInputRequest,
  ValidationInputResponse: ValidationInputResponse,
  ValidationRequest: ValidationRequest,
  JobSecrets: JobSecrets,
  ScheduleAvailabilityRequest: ScheduleAvailabilityRequest,
  "JobDetails.DataBoxCustomerDisk": DataBoxCustomerDiskJobDetails,
  "JobDetails.DataBoxDisk": DataBoxDiskJobDetails,
  "JobDetails.DataBoxHeavy": DataBoxHeavyJobDetails,
  "JobDetails.DataBox": DataBoxJobDetails,
  "DataAccountDetails.ManagedDisk": ManagedDiskDetails,
  "DataAccountDetails.StorageAccount": StorageAccountDetails,
  "CopyLogDetails.DataBox": DataBoxAccountCopyLogDetails,
  "CopyLogDetails.DataBoxCustomerDisk": DataBoxCustomerDiskCopyLogDetails,
  "CopyLogDetails.DataBoxDisk": DataBoxDiskCopyLogDetails,
  "CopyLogDetails.DataBoxHeavy": DataBoxHeavyAccountCopyLogDetails,
  "DatacenterAddressResponse.DatacenterAddressInstruction": DatacenterAddressInstructionResponse,
  "DatacenterAddressResponse.DatacenterAddressLocation": DatacenterAddressLocationResponse,
  "ValidationInputRequest.ValidateAddress": ValidateAddress,
  "ValidationInputRequest.ValidateCreateOrderLimit": CreateOrderLimitForSubscriptionValidationRequest,
  "ValidationInputRequest.ValidateDataTransferDetails": DataTransferDetailsValidationRequest,
  "ValidationInputRequest.ValidatePreferences": PreferencesValidationRequest,
  "ValidationInputRequest.ValidateSkuAvailability": SkuAvailabilityValidationRequest,
  "ValidationInputRequest.ValidateSubscriptionIsAllowedToCreateJob": SubscriptionIsAllowedToCreateJobValidationRequest,
  "ValidationInputResponse.ValidateAddress": AddressValidationProperties,
  "ValidationInputResponse.ValidateCreateOrderLimit": CreateOrderLimitForSubscriptionValidationResponseProperties,
  "ValidationInputResponse.ValidateDataTransferDetails": DataTransferDetailsValidationResponseProperties,
  "ValidationInputResponse.ValidatePreferences": PreferencesValidationResponseProperties,
  "ValidationInputResponse.ValidateSkuAvailability": SkuAvailabilityValidationResponseProperties,
  "ValidationInputResponse.ValidateSubscriptionIsAllowedToCreateJob": SubscriptionIsAllowedToCreateJobValidationResponseProperties,
  "ValidationRequest.JobCreationValidation": CreateJobValidations,
  "JobSecrets.DataBoxCustomerDisk": CustomerDiskJobSecrets,
  "JobSecrets.DataBoxDisk": DataBoxDiskJobSecrets,
  "JobSecrets.DataBoxHeavy": DataBoxHeavyJobSecrets,
  "JobSecrets.DataBox": DataboxJobSecrets,
  "ScheduleAvailabilityRequest.DataBox": DataBoxScheduleAvailabilityRequest,
  "ScheduleAvailabilityRequest.DataBoxDisk": DiskScheduleAvailabilityRequest,
  "ScheduleAvailabilityRequest.DataBoxHeavy": HeavyScheduleAvailabilityRequest
};
