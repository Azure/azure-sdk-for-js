/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */

import { CloudErrorMapper, BaseResourceMapper } from "@azure/ms-rest-azure-js";
import * as msRest from "@azure/ms-rest-js";

export const CloudError = CloudErrorMapper;
export const BaseResource = BaseResourceMapper;

export const ShareCredentialDetails: msRest.CompositeMapper = {
  serializedName: "ShareCredentialDetails",
  type: {
    name: "Composite",
    className: "ShareCredentialDetails",
    modelProperties: {
      shareName: {
        readOnly: true,
        serializedName: "shareName",
        type: {
          name: "String"
        }
      },
      shareType: {
        readOnly: true,
        serializedName: "shareType",
        type: {
          name: "Enum",
          allowedValues: [
            "UnknownType",
            "HCS",
            "BlockBlob",
            "PageBlob",
            "AzureFile",
            "ManagedDisk",
            "AzurePremiumFiles"
          ]
        }
      },
      userName: {
        readOnly: true,
        serializedName: "userName",
        type: {
          name: "String"
        }
      },
      password: {
        readOnly: true,
        serializedName: "password",
        type: {
          name: "String"
        }
      },
      supportedAccessProtocols: {
        readOnly: true,
        serializedName: "supportedAccessProtocols",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Enum",
              allowedValues: [
                "SMB",
                "NFS"
              ]
            }
          }
        }
      }
    }
  }
};

export const AccountCredentialDetails: msRest.CompositeMapper = {
  serializedName: "AccountCredentialDetails",
  type: {
    name: "Composite",
    className: "AccountCredentialDetails",
    modelProperties: {
      accountName: {
        readOnly: true,
        serializedName: "accountName",
        type: {
          name: "String"
        }
      },
      dataAccountType: {
        readOnly: true,
        serializedName: "dataAccountType",
        type: {
          name: "Enum",
          allowedValues: [
            "StorageAccount",
            "ManagedDisk"
          ]
        }
      },
      accountConnectionString: {
        readOnly: true,
        serializedName: "accountConnectionString",
        type: {
          name: "String"
        }
      },
      shareCredentialDetails: {
        readOnly: true,
        serializedName: "shareCredentialDetails",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "ShareCredentialDetails"
            }
          }
        }
      }
    }
  }
};

export const AdditionalErrorInfo: msRest.CompositeMapper = {
  serializedName: "AdditionalErrorInfo",
  type: {
    name: "Composite",
    className: "AdditionalErrorInfo",
    modelProperties: {
      type: {
        serializedName: "type",
        type: {
          name: "String"
        }
      },
      info: {
        serializedName: "info",
        type: {
          name: "Object"
        }
      }
    }
  }
};

export const ShippingAddress: msRest.CompositeMapper = {
  serializedName: "ShippingAddress",
  type: {
    name: "Composite",
    className: "ShippingAddress",
    modelProperties: {
      streetAddress1: {
        required: true,
        serializedName: "streetAddress1",
        type: {
          name: "String"
        }
      },
      streetAddress2: {
        serializedName: "streetAddress2",
        type: {
          name: "String"
        }
      },
      streetAddress3: {
        serializedName: "streetAddress3",
        type: {
          name: "String"
        }
      },
      city: {
        serializedName: "city",
        type: {
          name: "String"
        }
      },
      stateOrProvince: {
        serializedName: "stateOrProvince",
        type: {
          name: "String"
        }
      },
      country: {
        required: true,
        serializedName: "country",
        type: {
          name: "String"
        }
      },
      postalCode: {
        serializedName: "postalCode",
        type: {
          name: "String"
        }
      },
      zipExtendedCode: {
        serializedName: "zipExtendedCode",
        type: {
          name: "String"
        }
      },
      companyName: {
        serializedName: "companyName",
        type: {
          name: "String"
        }
      },
      addressType: {
        serializedName: "addressType",
        type: {
          name: "Enum",
          allowedValues: [
            "None",
            "Residential",
            "Commercial"
          ]
        }
      }
    }
  }
};

export const AddressValidationOutput: msRest.CompositeMapper = {
  serializedName: "AddressValidationOutput",
  type: {
    name: "Composite",
    className: "AddressValidationOutput",
    modelProperties: {
      error: {
        readOnly: true,
        serializedName: "properties.error",
        type: {
          name: "Composite",
          className: "CloudError"
        }
      },
      validationType: {
        required: true,
        serializedName: "properties.validationType",
        type: {
          name: "String"
        }
      },
      validationStatus: {
        readOnly: true,
        serializedName: "properties.validationStatus",
        type: {
          name: "Enum",
          allowedValues: [
            "Valid",
            "Invalid",
            "Ambiguous"
          ]
        }
      },
      alternateAddresses: {
        readOnly: true,
        serializedName: "properties.alternateAddresses",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "ShippingAddress"
            }
          }
        }
      }
    }
  }
};

export const Details: msRest.CompositeMapper = {
  serializedName: "Details",
  type: {
    name: "Composite",
    className: "Details",
    modelProperties: {
      code: {
        required: true,
        serializedName: "code",
        type: {
          name: "String"
        }
      },
      message: {
        required: true,
        serializedName: "message",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const ErrorDetail: msRest.CompositeMapper = {
  serializedName: "ErrorDetail",
  type: {
    name: "Composite",
    className: "ErrorDetail",
    modelProperties: {
      code: {
        required: true,
        serializedName: "code",
        type: {
          name: "String"
        }
      },
      message: {
        required: true,
        serializedName: "message",
        type: {
          name: "String"
        }
      },
      details: {
        serializedName: "details",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "Details"
            }
          }
        }
      },
      target: {
        serializedName: "target",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const ApiError: msRest.CompositeMapper = {
  serializedName: "ApiError",
  type: {
    name: "Composite",
    className: "ApiError",
    modelProperties: {
      error: {
        required: true,
        serializedName: "error",
        type: {
          name: "Composite",
          className: "ErrorDetail"
        }
      }
    }
  }
};

export const ApplianceNetworkConfiguration: msRest.CompositeMapper = {
  serializedName: "ApplianceNetworkConfiguration",
  type: {
    name: "Composite",
    className: "ApplianceNetworkConfiguration",
    modelProperties: {
      name: {
        readOnly: true,
        serializedName: "name",
        type: {
          name: "String"
        }
      },
      macAddress: {
        readOnly: true,
        serializedName: "macAddress",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const ArmBaseObject: msRest.CompositeMapper = {
  serializedName: "ArmBaseObject",
  type: {
    name: "Composite",
    className: "ArmBaseObject",
    modelProperties: {
      name: {
        readOnly: true,
        serializedName: "name",
        type: {
          name: "String"
        }
      },
      id: {
        readOnly: true,
        serializedName: "id",
        type: {
          name: "String"
        }
      },
      type: {
        readOnly: true,
        serializedName: "type",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const AvailableSkuRequest: msRest.CompositeMapper = {
  serializedName: "AvailableSkuRequest",
  type: {
    name: "Composite",
    className: "AvailableSkuRequest",
    modelProperties: {
      transferType: {
        required: true,
        serializedName: "transferType",
        type: {
          name: "Enum",
          allowedValues: [
            "ImportToAzure",
            "ExportFromAzure"
          ]
        }
      },
      country: {
        required: true,
        serializedName: "country",
        type: {
          name: "String"
        }
      },
      location: {
        required: true,
        serializedName: "location",
        type: {
          name: "String"
        }
      },
      skuNames: {
        serializedName: "skuNames",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Enum",
              allowedValues: [
                "DataBox",
                "DataBoxDisk",
                "DataBoxHeavy"
              ]
            }
          }
        }
      }
    }
  }
};

export const Sku: msRest.CompositeMapper = {
  serializedName: "Sku",
  type: {
    name: "Composite",
    className: "Sku",
    modelProperties: {
      name: {
        required: true,
        serializedName: "name",
        type: {
          name: "Enum",
          allowedValues: [
            "DataBox",
            "DataBoxDisk",
            "DataBoxHeavy"
          ]
        }
      },
      displayName: {
        serializedName: "displayName",
        type: {
          name: "String"
        }
      },
      family: {
        serializedName: "family",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const DataLocationToServiceLocationMap: msRest.CompositeMapper = {
  serializedName: "DataLocationToServiceLocationMap",
  type: {
    name: "Composite",
    className: "DataLocationToServiceLocationMap",
    modelProperties: {
      dataLocation: {
        readOnly: true,
        serializedName: "dataLocation",
        type: {
          name: "String"
        }
      },
      serviceLocation: {
        readOnly: true,
        serializedName: "serviceLocation",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const SkuCapacity: msRest.CompositeMapper = {
  serializedName: "SkuCapacity",
  type: {
    name: "Composite",
    className: "SkuCapacity",
    modelProperties: {
      usable: {
        readOnly: true,
        serializedName: "usable",
        type: {
          name: "String"
        }
      },
      maximum: {
        readOnly: true,
        serializedName: "maximum",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const SkuCost: msRest.CompositeMapper = {
  serializedName: "SkuCost",
  type: {
    name: "Composite",
    className: "SkuCost",
    modelProperties: {
      meterId: {
        readOnly: true,
        serializedName: "meterId",
        type: {
          name: "String"
        }
      },
      meterType: {
        readOnly: true,
        serializedName: "meterType",
        type: {
          name: "String"
        }
      },
      multiplier: {
        readOnly: true,
        serializedName: "multiplier",
        type: {
          name: "Number"
        }
      }
    }
  }
};

export const SkuInformation: msRest.CompositeMapper = {
  serializedName: "SkuInformation",
  type: {
    name: "Composite",
    className: "SkuInformation",
    modelProperties: {
      sku: {
        readOnly: true,
        serializedName: "sku",
        type: {
          name: "Composite",
          className: "Sku"
        }
      },
      enabled: {
        readOnly: true,
        serializedName: "enabled",
        type: {
          name: "Boolean"
        }
      },
      dataLocationToServiceLocationMap: {
        readOnly: true,
        serializedName: "properties.dataLocationToServiceLocationMap",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "DataLocationToServiceLocationMap"
            }
          }
        }
      },
      capacity: {
        readOnly: true,
        serializedName: "properties.capacity",
        type: {
          name: "Composite",
          className: "SkuCapacity"
        }
      },
      costs: {
        readOnly: true,
        serializedName: "properties.costs",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "SkuCost"
            }
          }
        }
      },
      apiVersions: {
        readOnly: true,
        serializedName: "properties.apiVersions",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "String"
            }
          }
        }
      },
      disabledReason: {
        readOnly: true,
        serializedName: "properties.disabledReason",
        type: {
          name: "Enum",
          allowedValues: [
            "None",
            "Country",
            "Region",
            "Feature",
            "OfferType",
            "NoSubscriptionInfo"
          ]
        }
      },
      disabledReasonMessage: {
        readOnly: true,
        serializedName: "properties.disabledReasonMessage",
        type: {
          name: "String"
        }
      },
      requiredFeature: {
        readOnly: true,
        serializedName: "properties.requiredFeature",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const AzureFileFilterDetails: msRest.CompositeMapper = {
  serializedName: "AzureFileFilterDetails",
  type: {
    name: "Composite",
    className: "AzureFileFilterDetails",
    modelProperties: {
      filePrefixList: {
        serializedName: "filePrefixList",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "String"
            }
          }
        }
      },
      filePathList: {
        serializedName: "filePathList",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "String"
            }
          }
        }
      },
      fileShareList: {
        serializedName: "fileShareList",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "String"
            }
          }
        }
      }
    }
  }
};

export const BlobFilterDetails: msRest.CompositeMapper = {
  serializedName: "BlobFilterDetails",
  type: {
    name: "Composite",
    className: "BlobFilterDetails",
    modelProperties: {
      blobPrefixList: {
        serializedName: "blobPrefixList",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "String"
            }
          }
        }
      },
      blobPathList: {
        serializedName: "blobPathList",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "String"
            }
          }
        }
      },
      containerList: {
        serializedName: "containerList",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "String"
            }
          }
        }
      }
    }
  }
};

export const CancellationReason: msRest.CompositeMapper = {
  serializedName: "CancellationReason",
  type: {
    name: "Composite",
    className: "CancellationReason",
    modelProperties: {
      reason: {
        required: true,
        serializedName: "reason",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const NotificationPreference: msRest.CompositeMapper = {
  serializedName: "NotificationPreference",
  type: {
    name: "Composite",
    className: "NotificationPreference",
    modelProperties: {
      stageName: {
        required: true,
        serializedName: "stageName",
        type: {
          name: "Enum",
          allowedValues: [
            "DevicePrepared",
            "Dispatched",
            "Delivered",
            "PickedUp",
            "AtAzureDC",
            "DataCopy"
          ]
        }
      },
      sendNotification: {
        required: true,
        serializedName: "sendNotification",
        type: {
          name: "Boolean"
        }
      }
    }
  }
};

export const ContactDetails: msRest.CompositeMapper = {
  serializedName: "ContactDetails",
  type: {
    name: "Composite",
    className: "ContactDetails",
    modelProperties: {
      contactName: {
        required: true,
        serializedName: "contactName",
        type: {
          name: "String"
        }
      },
      phone: {
        required: true,
        serializedName: "phone",
        type: {
          name: "String"
        }
      },
      phoneExtension: {
        serializedName: "phoneExtension",
        type: {
          name: "String"
        }
      },
      mobile: {
        serializedName: "mobile",
        type: {
          name: "String"
        }
      },
      emailList: {
        required: true,
        serializedName: "emailList",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "String"
            }
          }
        }
      },
      notificationPreference: {
        serializedName: "notificationPreference",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "NotificationPreference"
            }
          }
        }
      }
    }
  }
};

export const CopyLogDetails: msRest.CompositeMapper = {
  serializedName: "CopyLogDetails",
  type: {
    name: "Composite",
    polymorphicDiscriminator: {
      serializedName: "copyLogDetailsType",
      clientName: "copyLogDetailsType"
    },
    uberParent: "CopyLogDetails",
    className: "CopyLogDetails",
    modelProperties: {
      copyLogDetailsType: {
        required: true,
        serializedName: "copyLogDetailsType",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const CopyProgress: msRest.CompositeMapper = {
  serializedName: "CopyProgress",
  type: {
    name: "Composite",
    className: "CopyProgress",
    modelProperties: {
      storageAccountName: {
        readOnly: true,
        serializedName: "storageAccountName",
        type: {
          name: "String"
        }
      },
      transferType: {
        readOnly: true,
        serializedName: "transferType",
        type: {
          name: "Enum",
          allowedValues: [
            "ImportToAzure",
            "ExportFromAzure"
          ]
        }
      },
      dataAccountType: {
        readOnly: true,
        serializedName: "dataAccountType",
        type: {
          name: "Enum",
          allowedValues: [
            "StorageAccount",
            "ManagedDisk"
          ]
        }
      },
      accountId: {
        readOnly: true,
        serializedName: "accountId",
        type: {
          name: "String"
        }
      },
      bytesProcessed: {
        readOnly: true,
        serializedName: "bytesProcessed",
        type: {
          name: "Number"
        }
      },
      totalBytesToProcess: {
        readOnly: true,
        serializedName: "totalBytesToProcess",
        type: {
          name: "Number"
        }
      },
      filesProcessed: {
        readOnly: true,
        serializedName: "filesProcessed",
        type: {
          name: "Number"
        }
      },
      totalFilesToProcess: {
        readOnly: true,
        serializedName: "totalFilesToProcess",
        type: {
          name: "Number"
        }
      },
      invalidFilesProcessed: {
        readOnly: true,
        serializedName: "invalidFilesProcessed",
        type: {
          name: "Number"
        }
      },
      invalidFileBytesUploaded: {
        readOnly: true,
        serializedName: "invalidFileBytesUploaded",
        type: {
          name: "Number"
        }
      },
      renamedContainerCount: {
        readOnly: true,
        serializedName: "renamedContainerCount",
        type: {
          name: "Number"
        }
      },
      filesErroredOut: {
        readOnly: true,
        serializedName: "filesErroredOut",
        type: {
          name: "Number"
        }
      },
      directoriesErroredOut: {
        readOnly: true,
        serializedName: "directoriesErroredOut",
        type: {
          name: "Number"
        }
      },
      invalidDirectoriesProcessed: {
        readOnly: true,
        serializedName: "invalidDirectoriesProcessed",
        type: {
          name: "Number"
        }
      },
      isEnumerationInProgress: {
        readOnly: true,
        serializedName: "isEnumerationInProgress",
        type: {
          name: "Boolean"
        }
      }
    }
  }
};

export const ValidationRequest: msRest.CompositeMapper = {
  serializedName: "ValidationRequest",
  type: {
    name: "Composite",
    polymorphicDiscriminator: {
      serializedName: "validationCategory",
      clientName: "validationCategory"
    },
    uberParent: "ValidationRequest",
    className: "ValidationRequest",
    modelProperties: {
      individualRequestDetails: {
        required: true,
        serializedName: "individualRequestDetails",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "ValidationInputRequest"
            }
          }
        }
      },
      validationCategory: {
        required: true,
        serializedName: "validationCategory",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const CreateJobValidations: msRest.CompositeMapper = {
  serializedName: "JobCreationValidation",
  type: {
    name: "Composite",
    polymorphicDiscriminator: ValidationRequest.type.polymorphicDiscriminator,
    uberParent: "ValidationRequest",
    className: "CreateJobValidations",
    modelProperties: {
      ...ValidationRequest.type.modelProperties
    }
  }
};

export const ValidationInputRequest: msRest.CompositeMapper = {
  serializedName: "ValidationInputRequest",
  type: {
    name: "Composite",
    polymorphicDiscriminator: {
      serializedName: "validationType",
      clientName: "validationType"
    },
    uberParent: "ValidationInputRequest",
    className: "ValidationInputRequest",
    modelProperties: {
      validationType: {
        required: true,
        serializedName: "validationType",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const CreateOrderLimitForSubscriptionValidationRequest: msRest.CompositeMapper = {
  serializedName: "ValidateCreateOrderLimit",
  type: {
    name: "Composite",
    polymorphicDiscriminator: ValidationInputRequest.type.polymorphicDiscriminator,
    uberParent: "ValidationInputRequest",
    className: "CreateOrderLimitForSubscriptionValidationRequest",
    modelProperties: {
      ...ValidationInputRequest.type.modelProperties,
      deviceType: {
        required: true,
        serializedName: "deviceType",
        type: {
          name: "Enum",
          allowedValues: [
            "DataBox",
            "DataBoxDisk",
            "DataBoxHeavy"
          ]
        }
      }
    }
  }
};

export const ValidationInputResponse: msRest.CompositeMapper = {
  serializedName: "ValidationInputResponse",
  type: {
    name: "Composite",
    polymorphicDiscriminator: {
      serializedName: "validationType",
      clientName: "validationType"
    },
    uberParent: "ValidationInputResponse",
    className: "ValidationInputResponse",
    modelProperties: {
      error: {
        readOnly: true,
        serializedName: "error",
        type: {
          name: "Composite",
          className: "CloudError"
        }
      },
      validationType: {
        required: true,
        serializedName: "validationType",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const CreateOrderLimitForSubscriptionValidationResponseProperties: msRest.CompositeMapper = {
  serializedName: "ValidateCreateOrderLimit",
  type: {
    name: "Composite",
    polymorphicDiscriminator: ValidationInputResponse.type.polymorphicDiscriminator,
    uberParent: "ValidationInputResponse",
    className: "CreateOrderLimitForSubscriptionValidationResponseProperties",
    modelProperties: {
      ...ValidationInputResponse.type.modelProperties,
      status: {
        readOnly: true,
        serializedName: "status",
        type: {
          name: "Enum",
          allowedValues: [
            "Valid",
            "Invalid",
            "Skipped"
          ]
        }
      }
    }
  }
};

export const DataAccountDetails: msRest.CompositeMapper = {
  serializedName: "DataAccountDetails",
  type: {
    name: "Composite",
    polymorphicDiscriminator: {
      serializedName: "dataAccountType",
      clientName: "dataAccountType"
    },
    uberParent: "DataAccountDetails",
    className: "DataAccountDetails",
    modelProperties: {
      sharePassword: {
        serializedName: "sharePassword",
        type: {
          name: "String"
        }
      },
      dataAccountType: {
        required: true,
        serializedName: "dataAccountType",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const DataBoxAccountCopyLogDetails: msRest.CompositeMapper = {
  serializedName: "DataBox",
  type: {
    name: "Composite",
    polymorphicDiscriminator: CopyLogDetails.type.polymorphicDiscriminator,
    uberParent: "CopyLogDetails",
    className: "DataBoxAccountCopyLogDetails",
    modelProperties: {
      ...CopyLogDetails.type.modelProperties,
      accountName: {
        readOnly: true,
        serializedName: "accountName",
        type: {
          name: "String"
        }
      },
      copyLogLink: {
        readOnly: true,
        serializedName: "copyLogLink",
        type: {
          name: "String"
        }
      },
      copyVerboseLogLink: {
        readOnly: true,
        serializedName: "copyVerboseLogLink",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const DataBoxDiskCopyLogDetails: msRest.CompositeMapper = {
  serializedName: "DataBoxDisk",
  type: {
    name: "Composite",
    polymorphicDiscriminator: CopyLogDetails.type.polymorphicDiscriminator,
    uberParent: "CopyLogDetails",
    className: "DataBoxDiskCopyLogDetails",
    modelProperties: {
      ...CopyLogDetails.type.modelProperties,
      diskSerialNumber: {
        readOnly: true,
        serializedName: "diskSerialNumber",
        type: {
          name: "String"
        }
      },
      errorLogLink: {
        readOnly: true,
        serializedName: "errorLogLink",
        type: {
          name: "String"
        }
      },
      verboseLogLink: {
        readOnly: true,
        serializedName: "verboseLogLink",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const DataBoxDiskCopyProgress: msRest.CompositeMapper = {
  serializedName: "DataBoxDiskCopyProgress",
  type: {
    name: "Composite",
    className: "DataBoxDiskCopyProgress",
    modelProperties: {
      serialNumber: {
        readOnly: true,
        serializedName: "serialNumber",
        type: {
          name: "String"
        }
      },
      bytesCopied: {
        readOnly: true,
        serializedName: "bytesCopied",
        type: {
          name: "Number"
        }
      },
      percentComplete: {
        readOnly: true,
        serializedName: "percentComplete",
        type: {
          name: "Number"
        }
      },
      status: {
        readOnly: true,
        serializedName: "status",
        type: {
          name: "Enum",
          allowedValues: [
            "NotStarted",
            "InProgress",
            "Completed",
            "CompletedWithErrors",
            "Failed",
            "NotReturned",
            "HardwareError",
            "DeviceFormatted",
            "DeviceMetadataModified",
            "StorageAccountNotAccessible",
            "UnsupportedData"
          ]
        }
      }
    }
  }
};

export const JobDetails: msRest.CompositeMapper = {
  serializedName: "JobDetails",
  type: {
    name: "Composite",
    polymorphicDiscriminator: {
      serializedName: "jobDetailsType",
      clientName: "jobDetailsType"
    },
    uberParent: "JobDetails",
    className: "JobDetails",
    modelProperties: {
      jobStages: {
        readOnly: true,
        serializedName: "jobStages",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "JobStages"
            }
          }
        }
      },
      contactDetails: {
        required: true,
        serializedName: "contactDetails",
        type: {
          name: "Composite",
          className: "ContactDetails"
        }
      },
      shippingAddress: {
        serializedName: "shippingAddress",
        type: {
          name: "Composite",
          className: "ShippingAddress"
        }
      },
      deliveryPackage: {
        readOnly: true,
        serializedName: "deliveryPackage",
        type: {
          name: "Composite",
          className: "PackageShippingDetails"
        }
      },
      returnPackage: {
        readOnly: true,
        serializedName: "returnPackage",
        type: {
          name: "Composite",
          className: "PackageShippingDetails"
        }
      },
      dataImportDetails: {
        serializedName: "dataImportDetails",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "DataImportDetails"
            }
          }
        }
      },
      dataExportDetails: {
        serializedName: "dataExportDetails",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "DataExportDetails"
            }
          }
        }
      },
      preferences: {
        serializedName: "preferences",
        type: {
          name: "Composite",
          className: "Preferences"
        }
      },
      copyLogDetails: {
        readOnly: true,
        serializedName: "copyLogDetails",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "CopyLogDetails"
            }
          }
        }
      },
      reverseShipmentLabelSasKey: {
        readOnly: true,
        serializedName: "reverseShipmentLabelSasKey",
        type: {
          name: "String"
        }
      },
      chainOfCustodySasKey: {
        readOnly: true,
        serializedName: "chainOfCustodySasKey",
        type: {
          name: "String"
        }
      },
      keyEncryptionKey: {
        readOnly: true,
        serializedName: "keyEncryptionKey",
        type: {
          name: "Composite",
          className: "KeyEncryptionKey"
        }
      },
      expectedDataSizeInTerabytes: {
        serializedName: "expectedDataSizeInTerabytes",
        type: {
          name: "Number"
        }
      },
      jobDetailsType: {
        required: true,
        serializedName: "jobDetailsType",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const DataBoxDiskJobDetails: msRest.CompositeMapper = {
  serializedName: "DataBoxDisk",
  type: {
    name: "Composite",
    polymorphicDiscriminator: JobDetails.type.polymorphicDiscriminator,
    uberParent: "JobDetails",
    className: "DataBoxDiskJobDetails",
    modelProperties: {
      ...JobDetails.type.modelProperties,
      preferredDisks: {
        serializedName: "preferredDisks",
        type: {
          name: "Dictionary",
          value: {
            type: {
              name: "Number"
            }
          }
        }
      },
      copyProgress: {
        readOnly: true,
        serializedName: "copyProgress",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "DataBoxDiskCopyProgress"
            }
          }
        }
      },
      disksAndSizeDetails: {
        readOnly: true,
        serializedName: "disksAndSizeDetails",
        type: {
          name: "Dictionary",
          value: {
            type: {
              name: "Number"
            }
          }
        }
      },
      passkey: {
        serializedName: "passkey",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const DiskSecret: msRest.CompositeMapper = {
  serializedName: "DiskSecret",
  type: {
    name: "Composite",
    className: "DiskSecret",
    modelProperties: {
      diskSerialNumber: {
        readOnly: true,
        serializedName: "diskSerialNumber",
        type: {
          name: "String"
        }
      },
      bitLockerKey: {
        readOnly: true,
        serializedName: "bitLockerKey",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const JobSecrets: msRest.CompositeMapper = {
  serializedName: "JobSecrets",
  type: {
    name: "Composite",
    polymorphicDiscriminator: {
      serializedName: "jobSecretsType",
      clientName: "jobSecretsType"
    },
    uberParent: "JobSecrets",
    className: "JobSecrets",
    modelProperties: {
      dcAccessSecurityCode: {
        readOnly: true,
        serializedName: "dcAccessSecurityCode",
        type: {
          name: "Composite",
          className: "DcAccessSecurityCode"
        }
      },
      error: {
        readOnly: true,
        serializedName: "error",
        type: {
          name: "Composite",
          className: "CloudError"
        }
      },
      jobSecretsType: {
        required: true,
        serializedName: "jobSecretsType",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const DataBoxDiskJobSecrets: msRest.CompositeMapper = {
  serializedName: "DataBoxDisk",
  type: {
    name: "Composite",
    polymorphicDiscriminator: JobSecrets.type.polymorphicDiscriminator,
    uberParent: "JobSecrets",
    className: "DataBoxDiskJobSecrets",
    modelProperties: {
      ...JobSecrets.type.modelProperties,
      diskSecrets: {
        readOnly: true,
        serializedName: "diskSecrets",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "DiskSecret"
            }
          }
        }
      },
      passKey: {
        readOnly: true,
        serializedName: "passKey",
        type: {
          name: "String"
        }
      },
      isPasskeyUserDefined: {
        readOnly: true,
        serializedName: "isPasskeyUserDefined",
        type: {
          name: "Boolean"
        }
      }
    }
  }
};

export const DataBoxHeavyAccountCopyLogDetails: msRest.CompositeMapper = {
  serializedName: "DataBoxHeavy",
  type: {
    name: "Composite",
    polymorphicDiscriminator: CopyLogDetails.type.polymorphicDiscriminator,
    uberParent: "CopyLogDetails",
    className: "DataBoxHeavyAccountCopyLogDetails",
    modelProperties: {
      ...CopyLogDetails.type.modelProperties,
      accountName: {
        readOnly: true,
        serializedName: "accountName",
        type: {
          name: "String"
        }
      },
      copyLogLink: {
        readOnly: true,
        serializedName: "copyLogLink",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "String"
            }
          }
        }
      },
      copyVerboseLogLink: {
        readOnly: true,
        serializedName: "copyVerboseLogLink",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "String"
            }
          }
        }
      }
    }
  }
};

export const DataBoxHeavyJobDetails: msRest.CompositeMapper = {
  serializedName: "DataBoxHeavy",
  type: {
    name: "Composite",
    polymorphicDiscriminator: JobDetails.type.polymorphicDiscriminator,
    uberParent: "JobDetails",
    className: "DataBoxHeavyJobDetails",
    modelProperties: {
      ...JobDetails.type.modelProperties,
      copyProgress: {
        readOnly: true,
        serializedName: "copyProgress",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "CopyProgress"
            }
          }
        }
      },
      devicePassword: {
        serializedName: "devicePassword",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const DataBoxHeavySecret: msRest.CompositeMapper = {
  serializedName: "DataBoxHeavySecret",
  type: {
    name: "Composite",
    className: "DataBoxHeavySecret",
    modelProperties: {
      deviceSerialNumber: {
        readOnly: true,
        serializedName: "deviceSerialNumber",
        type: {
          name: "String"
        }
      },
      devicePassword: {
        readOnly: true,
        serializedName: "devicePassword",
        type: {
          name: "String"
        }
      },
      networkConfigurations: {
        readOnly: true,
        serializedName: "networkConfigurations",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "ApplianceNetworkConfiguration"
            }
          }
        }
      },
      encodedValidationCertPubKey: {
        readOnly: true,
        serializedName: "encodedValidationCertPubKey",
        type: {
          name: "String"
        }
      },
      accountCredentialDetails: {
        readOnly: true,
        serializedName: "accountCredentialDetails",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "AccountCredentialDetails"
            }
          }
        }
      }
    }
  }
};

export const DataBoxHeavyJobSecrets: msRest.CompositeMapper = {
  serializedName: "DataBoxHeavy",
  type: {
    name: "Composite",
    polymorphicDiscriminator: JobSecrets.type.polymorphicDiscriminator,
    uberParent: "JobSecrets",
    className: "DataBoxHeavyJobSecrets",
    modelProperties: {
      ...JobSecrets.type.modelProperties,
      cabinetPodSecrets: {
        readOnly: true,
        serializedName: "cabinetPodSecrets",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "DataBoxHeavySecret"
            }
          }
        }
      }
    }
  }
};

export const DataBoxJobDetails: msRest.CompositeMapper = {
  serializedName: "DataBox",
  type: {
    name: "Composite",
    polymorphicDiscriminator: JobDetails.type.polymorphicDiscriminator,
    uberParent: "JobDetails",
    className: "DataBoxJobDetails",
    modelProperties: {
      ...JobDetails.type.modelProperties,
      copyProgress: {
        readOnly: true,
        serializedName: "copyProgress",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "CopyProgress"
            }
          }
        }
      },
      devicePassword: {
        serializedName: "devicePassword",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const DataBoxSecret: msRest.CompositeMapper = {
  serializedName: "DataBoxSecret",
  type: {
    name: "Composite",
    className: "DataBoxSecret",
    modelProperties: {
      deviceSerialNumber: {
        readOnly: true,
        serializedName: "deviceSerialNumber",
        type: {
          name: "String"
        }
      },
      devicePassword: {
        readOnly: true,
        serializedName: "devicePassword",
        type: {
          name: "String"
        }
      },
      networkConfigurations: {
        readOnly: true,
        serializedName: "networkConfigurations",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "ApplianceNetworkConfiguration"
            }
          }
        }
      },
      encodedValidationCertPubKey: {
        readOnly: true,
        serializedName: "encodedValidationCertPubKey",
        type: {
          name: "String"
        }
      },
      accountCredentialDetails: {
        readOnly: true,
        serializedName: "accountCredentialDetails",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "AccountCredentialDetails"
            }
          }
        }
      }
    }
  }
};

export const DataboxJobSecrets: msRest.CompositeMapper = {
  serializedName: "DataBox",
  type: {
    name: "Composite",
    polymorphicDiscriminator: JobSecrets.type.polymorphicDiscriminator,
    uberParent: "JobSecrets",
    className: "DataboxJobSecrets",
    modelProperties: {
      ...JobSecrets.type.modelProperties,
      podSecrets: {
        serializedName: "podSecrets",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "DataBoxSecret"
            }
          }
        }
      }
    }
  }
};

export const ScheduleAvailabilityRequest: msRest.CompositeMapper = {
  serializedName: "ScheduleAvailabilityRequest",
  type: {
    name: "Composite",
    polymorphicDiscriminator: {
      serializedName: "skuName",
      clientName: "skuName"
    },
    uberParent: "ScheduleAvailabilityRequest",
    className: "ScheduleAvailabilityRequest",
    modelProperties: {
      storageLocation: {
        required: true,
        serializedName: "storageLocation",
        type: {
          name: "String"
        }
      },
      country: {
        serializedName: "country",
        type: {
          name: "String"
        }
      },
      skuName: {
        required: true,
        serializedName: "skuName",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const DataBoxScheduleAvailabilityRequest: msRest.CompositeMapper = {
  serializedName: "DataBox",
  type: {
    name: "Composite",
    polymorphicDiscriminator: ScheduleAvailabilityRequest.type.polymorphicDiscriminator,
    uberParent: "ScheduleAvailabilityRequest",
    className: "DataBoxScheduleAvailabilityRequest",
    modelProperties: {
      ...ScheduleAvailabilityRequest.type.modelProperties
    }
  }
};

export const FilterFileDetails: msRest.CompositeMapper = {
  serializedName: "FilterFileDetails",
  type: {
    name: "Composite",
    className: "FilterFileDetails",
    modelProperties: {
      filterFileType: {
        required: true,
        serializedName: "filterFileType",
        type: {
          name: "Enum",
          allowedValues: [
            "AzureBlob",
            "AzureFile"
          ]
        }
      },
      filterFilePath: {
        required: true,
        serializedName: "filterFilePath",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const TransferFilterDetails: msRest.CompositeMapper = {
  serializedName: "TransferFilterDetails",
  type: {
    name: "Composite",
    className: "TransferFilterDetails",
    modelProperties: {
      dataAccountType: {
        required: true,
        serializedName: "dataAccountType",
        type: {
          name: "Enum",
          allowedValues: [
            "StorageAccount",
            "ManagedDisk"
          ]
        }
      },
      blobFilterDetails: {
        serializedName: "blobFilterDetails",
        type: {
          name: "Composite",
          className: "BlobFilterDetails"
        }
      },
      azureFileFilterDetails: {
        serializedName: "azureFileFilterDetails",
        type: {
          name: "Composite",
          className: "AzureFileFilterDetails"
        }
      },
      filterFileDetails: {
        serializedName: "filterFileDetails",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "FilterFileDetails"
            }
          }
        }
      }
    }
  }
};

export const TransferConfigurationTransferFilterDetails: msRest.CompositeMapper = {
  serializedName: "TransferConfiguration_transferFilterDetails",
  type: {
    name: "Composite",
    className: "TransferConfigurationTransferFilterDetails",
    modelProperties: {
      include: {
        serializedName: "include",
        type: {
          name: "Composite",
          className: "TransferFilterDetails"
        }
      }
    }
  }
};

export const TransferAllDetails: msRest.CompositeMapper = {
  serializedName: "TransferAllDetails",
  type: {
    name: "Composite",
    className: "TransferAllDetails",
    modelProperties: {
      dataAccountType: {
        required: true,
        serializedName: "dataAccountType",
        type: {
          name: "Enum",
          allowedValues: [
            "StorageAccount",
            "ManagedDisk"
          ]
        }
      },
      transferAllBlobs: {
        serializedName: "transferAllBlobs",
        type: {
          name: "Boolean"
        }
      },
      transferAllFiles: {
        serializedName: "transferAllFiles",
        type: {
          name: "Boolean"
        }
      }
    }
  }
};

export const TransferConfigurationTransferAllDetails: msRest.CompositeMapper = {
  serializedName: "TransferConfiguration_transferAllDetails",
  type: {
    name: "Composite",
    className: "TransferConfigurationTransferAllDetails",
    modelProperties: {
      include: {
        serializedName: "include",
        type: {
          name: "Composite",
          className: "TransferAllDetails"
        }
      }
    }
  }
};

export const TransferConfiguration: msRest.CompositeMapper = {
  serializedName: "TransferConfiguration",
  type: {
    name: "Composite",
    className: "TransferConfiguration",
    modelProperties: {
      transferConfigurationType: {
        required: true,
        serializedName: "transferConfigurationType",
        type: {
          name: "Enum",
          allowedValues: [
            "TransferAll",
            "TransferUsingFilter"
          ]
        }
      },
      transferFilterDetails: {
        serializedName: "transferFilterDetails",
        type: {
          name: "Composite",
          className: "TransferConfigurationTransferFilterDetails"
        }
      },
      transferAllDetails: {
        serializedName: "transferAllDetails",
        type: {
          name: "Composite",
          className: "TransferConfigurationTransferAllDetails"
        }
      }
    }
  }
};

export const DataExportDetails: msRest.CompositeMapper = {
  serializedName: "DataExportDetails",
  type: {
    name: "Composite",
    className: "DataExportDetails",
    modelProperties: {
      transferConfiguration: {
        required: true,
        serializedName: "transferConfiguration",
        type: {
          name: "Composite",
          className: "TransferConfiguration"
        }
      },
      logCollectionLevel: {
        serializedName: "logCollectionLevel",
        type: {
          name: "Enum",
          allowedValues: [
            "Error",
            "Verbose"
          ]
        }
      },
      accountDetails: {
        required: true,
        serializedName: "accountDetails",
        type: {
          name: "Composite",
          className: "DataAccountDetails"
        }
      }
    }
  }
};

export const DataImportDetails: msRest.CompositeMapper = {
  serializedName: "DataImportDetails",
  type: {
    name: "Composite",
    className: "DataImportDetails",
    modelProperties: {
      accountDetails: {
        required: true,
        serializedName: "accountDetails",
        type: {
          name: "Composite",
          className: "DataAccountDetails"
        }
      }
    }
  }
};

export const DataTransferDetailsValidationRequest: msRest.CompositeMapper = {
  serializedName: "ValidateDataTransferDetails",
  type: {
    name: "Composite",
    polymorphicDiscriminator: ValidationInputRequest.type.polymorphicDiscriminator,
    uberParent: "ValidationInputRequest",
    className: "DataTransferDetailsValidationRequest",
    modelProperties: {
      ...ValidationInputRequest.type.modelProperties,
      dataExportDetails: {
        serializedName: "dataExportDetails",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "DataExportDetails"
            }
          }
        }
      },
      dataImportDetails: {
        serializedName: "dataImportDetails",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "DataImportDetails"
            }
          }
        }
      },
      deviceType: {
        required: true,
        serializedName: "deviceType",
        type: {
          name: "Enum",
          allowedValues: [
            "DataBox",
            "DataBoxDisk",
            "DataBoxHeavy"
          ]
        }
      },
      transferType: {
        required: true,
        serializedName: "transferType",
        type: {
          name: "Enum",
          allowedValues: [
            "ImportToAzure",
            "ExportFromAzure"
          ]
        }
      }
    }
  }
};

export const DataTransferDetailsValidationResponseProperties: msRest.CompositeMapper = {
  serializedName: "ValidateDataTransferDetails",
  type: {
    name: "Composite",
    polymorphicDiscriminator: ValidationInputResponse.type.polymorphicDiscriminator,
    uberParent: "ValidationInputResponse",
    className: "DataTransferDetailsValidationResponseProperties",
    modelProperties: {
      ...ValidationInputResponse.type.modelProperties,
      status: {
        readOnly: true,
        serializedName: "status",
        type: {
          name: "Enum",
          allowedValues: [
            "Valid",
            "Invalid",
            "Skipped"
          ]
        }
      }
    }
  }
};

export const DcAccessSecurityCode: msRest.CompositeMapper = {
  serializedName: "DcAccessSecurityCode",
  type: {
    name: "Composite",
    className: "DcAccessSecurityCode",
    modelProperties: {
      reverseDcAccessCode: {
        serializedName: "reverseDcAccessCode",
        type: {
          name: "String"
        }
      },
      forwardDcAccessCode: {
        serializedName: "forwardDcAccessCode",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const DiskScheduleAvailabilityRequest: msRest.CompositeMapper = {
  serializedName: "DataBoxDisk",
  type: {
    name: "Composite",
    polymorphicDiscriminator: ScheduleAvailabilityRequest.type.polymorphicDiscriminator,
    uberParent: "ScheduleAvailabilityRequest",
    className: "DiskScheduleAvailabilityRequest",
    modelProperties: {
      ...ScheduleAvailabilityRequest.type.modelProperties,
      expectedDataSizeInTerabytes: {
        required: true,
        serializedName: "expectedDataSizeInTerabytes",
        type: {
          name: "Number"
        }
      }
    }
  }
};

export const EncryptionPreferences: msRest.CompositeMapper = {
  serializedName: "EncryptionPreferences",
  type: {
    name: "Composite",
    className: "EncryptionPreferences",
    modelProperties: {
      doubleEncryption: {
        serializedName: "doubleEncryption",
        type: {
          name: "Enum",
          allowedValues: [
            "Enabled",
            "Disabled"
          ]
        }
      }
    }
  }
};

export const HeavyScheduleAvailabilityRequest: msRest.CompositeMapper = {
  serializedName: "DataBoxHeavy",
  type: {
    name: "Composite",
    polymorphicDiscriminator: ScheduleAvailabilityRequest.type.polymorphicDiscriminator,
    uberParent: "ScheduleAvailabilityRequest",
    className: "HeavyScheduleAvailabilityRequest",
    modelProperties: {
      ...ScheduleAvailabilityRequest.type.modelProperties
    }
  }
};

export const UserAssignedProperties: msRest.CompositeMapper = {
  serializedName: "UserAssignedProperties",
  type: {
    name: "Composite",
    className: "UserAssignedProperties",
    modelProperties: {
      resourceId: {
        serializedName: "resourceId",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const IdentityProperties: msRest.CompositeMapper = {
  serializedName: "IdentityProperties",
  type: {
    name: "Composite",
    className: "IdentityProperties",
    modelProperties: {
      type: {
        serializedName: "type",
        type: {
          name: "String"
        }
      },
      userAssigned: {
        serializedName: "userAssigned",
        type: {
          name: "Composite",
          className: "UserAssignedProperties"
        }
      }
    }
  }
};

export const JobDeliveryInfo: msRest.CompositeMapper = {
  serializedName: "JobDeliveryInfo",
  type: {
    name: "Composite",
    className: "JobDeliveryInfo",
    modelProperties: {
      scheduledDateTime: {
        serializedName: "scheduledDateTime",
        type: {
          name: "DateTime"
        }
      }
    }
  }
};

export const JobStages: msRest.CompositeMapper = {
  serializedName: "JobStages",
  type: {
    name: "Composite",
    className: "JobStages",
    modelProperties: {
      stageName: {
        readOnly: true,
        serializedName: "stageName",
        type: {
          name: "Enum",
          allowedValues: [
            "DeviceOrdered",
            "DevicePrepared",
            "Dispatched",
            "Delivered",
            "PickedUp",
            "AtAzureDC",
            "DataCopy",
            "Completed",
            "CompletedWithErrors",
            "Cancelled",
            "Failed_IssueReportedAtCustomer",
            "Failed_IssueDetectedAtAzureDC",
            "Aborted",
            "CompletedWithWarnings",
            "ReadyToDispatchFromAzureDC",
            "ReadyToReceiveAtAzureDC"
          ]
        }
      },
      displayName: {
        readOnly: true,
        serializedName: "displayName",
        type: {
          name: "String"
        }
      },
      stageStatus: {
        readOnly: true,
        serializedName: "stageStatus",
        type: {
          name: "Enum",
          allowedValues: [
            "None",
            "InProgress",
            "Succeeded",
            "Failed",
            "Cancelled",
            "Cancelling",
            "SucceededWithErrors",
            "WaitingForCustomerAction",
            "SucceededWithWarnings"
          ]
        }
      },
      stageTime: {
        readOnly: true,
        serializedName: "stageTime",
        type: {
          name: "DateTime"
        }
      },
      jobStageDetails: {
        readOnly: true,
        serializedName: "jobStageDetails",
        type: {
          name: "Object"
        }
      }
    }
  }
};

export const PackageShippingDetails: msRest.CompositeMapper = {
  serializedName: "PackageShippingDetails",
  type: {
    name: "Composite",
    className: "PackageShippingDetails",
    modelProperties: {
      carrierName: {
        readOnly: true,
        serializedName: "carrierName",
        type: {
          name: "String"
        }
      },
      trackingId: {
        readOnly: true,
        serializedName: "trackingId",
        type: {
          name: "String"
        }
      },
      trackingUrl: {
        readOnly: true,
        serializedName: "trackingUrl",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const TransportPreferences: msRest.CompositeMapper = {
  serializedName: "TransportPreferences",
  type: {
    name: "Composite",
    className: "TransportPreferences",
    modelProperties: {
      preferredShipmentType: {
        required: true,
        serializedName: "preferredShipmentType",
        type: {
          name: "Enum",
          allowedValues: [
            "CustomerManaged",
            "MicrosoftManaged"
          ]
        }
      }
    }
  }
};

export const Preferences: msRest.CompositeMapper = {
  serializedName: "Preferences",
  type: {
    name: "Composite",
    className: "Preferences",
    modelProperties: {
      preferredDataCenterRegion: {
        serializedName: "preferredDataCenterRegion",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "String"
            }
          }
        }
      },
      transportPreferences: {
        serializedName: "transportPreferences",
        type: {
          name: "Composite",
          className: "TransportPreferences"
        }
      },
      encryptionPreferences: {
        serializedName: "encryptionPreferences",
        type: {
          name: "Composite",
          className: "EncryptionPreferences"
        }
      }
    }
  }
};

export const KeyEncryptionKey: msRest.CompositeMapper = {
  serializedName: "KeyEncryptionKey",
  type: {
    name: "Composite",
    className: "KeyEncryptionKey",
    modelProperties: {
      kekType: {
        required: true,
        serializedName: "kekType",
        type: {
          name: "Enum",
          allowedValues: [
            "MicrosoftManaged",
            "CustomerManaged"
          ]
        }
      },
      identityProperties: {
        serializedName: "identityProperties",
        type: {
          name: "Composite",
          className: "IdentityProperties"
        }
      },
      kekUrl: {
        serializedName: "kekUrl",
        type: {
          name: "String"
        }
      },
      kekVaultResourceID: {
        serializedName: "kekVaultResourceID",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const Resource: msRest.CompositeMapper = {
  serializedName: "Resource",
  type: {
    name: "Composite",
    className: "Resource",
    modelProperties: {
      location: {
        required: true,
        serializedName: "location",
        type: {
          name: "String"
        }
      },
      tags: {
        serializedName: "tags",
        type: {
          name: "Dictionary",
          value: {
            type: {
              name: "String"
            }
          }
        }
      },
      sku: {
        required: true,
        serializedName: "sku",
        type: {
          name: "Composite",
          className: "Sku"
        }
      },
      identity: {
        serializedName: "identity",
        type: {
          name: "Composite",
          className: "ResourceIdentity"
        }
      }
    }
  }
};

export const JobResource: msRest.CompositeMapper = {
  serializedName: "JobResource",
  type: {
    name: "Composite",
    className: "JobResource",
    modelProperties: {
      ...Resource.type.modelProperties,
      transferType: {
        required: true,
        serializedName: "properties.transferType",
        type: {
          name: "Enum",
          allowedValues: [
            "ImportToAzure",
            "ExportFromAzure"
          ]
        }
      },
      isCancellable: {
        readOnly: true,
        serializedName: "properties.isCancellable",
        type: {
          name: "Boolean"
        }
      },
      isDeletable: {
        readOnly: true,
        serializedName: "properties.isDeletable",
        type: {
          name: "Boolean"
        }
      },
      isShippingAddressEditable: {
        readOnly: true,
        serializedName: "properties.isShippingAddressEditable",
        type: {
          name: "Boolean"
        }
      },
      isPrepareToShipEnabled: {
        readOnly: true,
        serializedName: "properties.isPrepareToShipEnabled",
        type: {
          name: "Boolean"
        }
      },
      status: {
        readOnly: true,
        serializedName: "properties.status",
        type: {
          name: "Enum",
          allowedValues: [
            "DeviceOrdered",
            "DevicePrepared",
            "Dispatched",
            "Delivered",
            "PickedUp",
            "AtAzureDC",
            "DataCopy",
            "Completed",
            "CompletedWithErrors",
            "Cancelled",
            "Failed_IssueReportedAtCustomer",
            "Failed_IssueDetectedAtAzureDC",
            "Aborted",
            "CompletedWithWarnings",
            "ReadyToDispatchFromAzureDC",
            "ReadyToReceiveAtAzureDC"
          ]
        }
      },
      startTime: {
        readOnly: true,
        serializedName: "properties.startTime",
        type: {
          name: "DateTime"
        }
      },
      error: {
        readOnly: true,
        serializedName: "properties.error",
        type: {
          name: "Composite",
          className: "CloudError"
        }
      },
      details: {
        serializedName: "properties.details",
        type: {
          name: "Composite",
          className: "JobDetails"
        }
      },
      cancellationReason: {
        readOnly: true,
        serializedName: "properties.cancellationReason",
        type: {
          name: "String"
        }
      },
      deliveryType: {
        serializedName: "properties.deliveryType",
        type: {
          name: "Enum",
          allowedValues: [
            "NonScheduled",
            "Scheduled"
          ]
        }
      },
      deliveryInfo: {
        serializedName: "properties.deliveryInfo",
        type: {
          name: "Composite",
          className: "JobDeliveryInfo"
        }
      },
      isCancellableWithoutFee: {
        readOnly: true,
        serializedName: "properties.isCancellableWithoutFee",
        type: {
          name: "Boolean"
        }
      },
      name: {
        readOnly: true,
        serializedName: "name",
        type: {
          name: "String"
        }
      },
      id: {
        readOnly: true,
        serializedName: "id",
        type: {
          name: "String"
        }
      },
      type: {
        readOnly: true,
        serializedName: "type",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const UpdateJobDetails: msRest.CompositeMapper = {
  serializedName: "UpdateJobDetails",
  type: {
    name: "Composite",
    className: "UpdateJobDetails",
    modelProperties: {
      contactDetails: {
        serializedName: "contactDetails",
        type: {
          name: "Composite",
          className: "ContactDetails"
        }
      },
      shippingAddress: {
        serializedName: "shippingAddress",
        type: {
          name: "Composite",
          className: "ShippingAddress"
        }
      },
      keyEncryptionKey: {
        serializedName: "keyEncryptionKey",
        type: {
          name: "Composite",
          className: "KeyEncryptionKey"
        }
      }
    }
  }
};

export const UserAssignedIdentity: msRest.CompositeMapper = {
  serializedName: "UserAssignedIdentity",
  type: {
    name: "Composite",
    className: "UserAssignedIdentity",
    modelProperties: {
      principalId: {
        readOnly: true,
        serializedName: "principalId",
        type: {
          name: "String"
        }
      },
      clientId: {
        readOnly: true,
        serializedName: "clientId",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const ResourceIdentity: msRest.CompositeMapper = {
  serializedName: "ResourceIdentity",
  type: {
    name: "Composite",
    className: "ResourceIdentity",
    modelProperties: {
      type: {
        serializedName: "type",
        type: {
          name: "String"
        }
      },
      principalId: {
        readOnly: true,
        serializedName: "principalId",
        type: {
          name: "String"
        }
      },
      tenantId: {
        readOnly: true,
        serializedName: "tenantId",
        type: {
          name: "String"
        }
      },
      userAssignedIdentities: {
        serializedName: "userAssignedIdentities",
        type: {
          name: "Dictionary",
          value: {
            type: {
              name: "Composite",
              className: "UserAssignedIdentity"
            }
          }
        }
      }
    }
  }
};

export const JobResourceUpdateParameter: msRest.CompositeMapper = {
  serializedName: "JobResourceUpdateParameter",
  type: {
    name: "Composite",
    className: "JobResourceUpdateParameter",
    modelProperties: {
      details: {
        serializedName: "properties.details",
        type: {
          name: "Composite",
          className: "UpdateJobDetails"
        }
      },
      tags: {
        serializedName: "tags",
        type: {
          name: "Dictionary",
          value: {
            type: {
              name: "String"
            }
          }
        }
      },
      identity: {
        serializedName: "identity",
        type: {
          name: "Composite",
          className: "ResourceIdentity"
        }
      }
    }
  }
};

export const ManagedDiskDetails: msRest.CompositeMapper = {
  serializedName: "ManagedDisk",
  type: {
    name: "Composite",
    polymorphicDiscriminator: DataAccountDetails.type.polymorphicDiscriminator,
    uberParent: "DataAccountDetails",
    className: "ManagedDiskDetails",
    modelProperties: {
      ...DataAccountDetails.type.modelProperties,
      resourceGroupId: {
        required: true,
        serializedName: "resourceGroupId",
        type: {
          name: "String"
        }
      },
      stagingStorageAccountId: {
        required: true,
        serializedName: "stagingStorageAccountId",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const OperationDisplay: msRest.CompositeMapper = {
  serializedName: "OperationDisplay",
  type: {
    name: "Composite",
    className: "OperationDisplay",
    modelProperties: {
      provider: {
        serializedName: "provider",
        type: {
          name: "String"
        }
      },
      resource: {
        serializedName: "resource",
        type: {
          name: "String"
        }
      },
      operation: {
        serializedName: "operation",
        type: {
          name: "String"
        }
      },
      description: {
        serializedName: "description",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const Operation: msRest.CompositeMapper = {
  serializedName: "Operation",
  type: {
    name: "Composite",
    className: "Operation",
    modelProperties: {
      name: {
        readOnly: true,
        serializedName: "name",
        type: {
          name: "String"
        }
      },
      display: {
        readOnly: true,
        serializedName: "display",
        type: {
          name: "Composite",
          className: "OperationDisplay"
        }
      },
      properties: {
        readOnly: true,
        serializedName: "properties",
        type: {
          name: "Object"
        }
      },
      origin: {
        readOnly: true,
        serializedName: "origin",
        type: {
          name: "String"
        }
      },
      isDataAction: {
        serializedName: "isDataAction",
        type: {
          name: "Boolean"
        }
      }
    }
  }
};

export const PreferencesValidationRequest: msRest.CompositeMapper = {
  serializedName: "ValidatePreferences",
  type: {
    name: "Composite",
    polymorphicDiscriminator: ValidationInputRequest.type.polymorphicDiscriminator,
    uberParent: "ValidationInputRequest",
    className: "PreferencesValidationRequest",
    modelProperties: {
      ...ValidationInputRequest.type.modelProperties,
      preference: {
        serializedName: "preference",
        type: {
          name: "Composite",
          className: "Preferences"
        }
      },
      deviceType: {
        required: true,
        serializedName: "deviceType",
        type: {
          name: "Enum",
          allowedValues: [
            "DataBox",
            "DataBoxDisk",
            "DataBoxHeavy"
          ]
        }
      }
    }
  }
};

export const PreferencesValidationResponseProperties: msRest.CompositeMapper = {
  serializedName: "ValidatePreferences",
  type: {
    name: "Composite",
    polymorphicDiscriminator: ValidationInputResponse.type.polymorphicDiscriminator,
    uberParent: "ValidationInputResponse",
    className: "PreferencesValidationResponseProperties",
    modelProperties: {
      ...ValidationInputResponse.type.modelProperties,
      status: {
        readOnly: true,
        serializedName: "status",
        type: {
          name: "Enum",
          allowedValues: [
            "Valid",
            "Invalid",
            "Skipped"
          ]
        }
      }
    }
  }
};

export const TransportAvailabilityRequest: msRest.CompositeMapper = {
  serializedName: "TransportAvailabilityRequest",
  type: {
    name: "Composite",
    className: "TransportAvailabilityRequest",
    modelProperties: {
      skuName: {
        serializedName: "skuName",
        type: {
          name: "Enum",
          allowedValues: [
            "DataBox",
            "DataBoxDisk",
            "DataBoxHeavy"
          ]
        }
      }
    }
  }
};

export const RegionConfigurationRequest: msRest.CompositeMapper = {
  serializedName: "RegionConfigurationRequest",
  type: {
    name: "Composite",
    className: "RegionConfigurationRequest",
    modelProperties: {
      scheduleAvailabilityRequest: {
        serializedName: "scheduleAvailabilityRequest",
        type: {
          name: "Composite",
          className: "ScheduleAvailabilityRequest"
        }
      },
      transportAvailabilityRequest: {
        serializedName: "transportAvailabilityRequest",
        type: {
          name: "Composite",
          className: "TransportAvailabilityRequest"
        }
      }
    }
  }
};

export const ScheduleAvailabilityResponse: msRest.CompositeMapper = {
  serializedName: "ScheduleAvailabilityResponse",
  type: {
    name: "Composite",
    className: "ScheduleAvailabilityResponse",
    modelProperties: {
      availableDates: {
        readOnly: true,
        serializedName: "availableDates",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "DateTime"
            }
          }
        }
      }
    }
  }
};

export const TransportAvailabilityDetails: msRest.CompositeMapper = {
  serializedName: "TransportAvailabilityDetails",
  type: {
    name: "Composite",
    className: "TransportAvailabilityDetails",
    modelProperties: {
      shipmentType: {
        readOnly: true,
        serializedName: "shipmentType",
        type: {
          name: "Enum",
          allowedValues: [
            "CustomerManaged",
            "MicrosoftManaged"
          ]
        }
      }
    }
  }
};

export const TransportAvailabilityResponse: msRest.CompositeMapper = {
  serializedName: "TransportAvailabilityResponse",
  type: {
    name: "Composite",
    className: "TransportAvailabilityResponse",
    modelProperties: {
      transportAvailabilityDetails: {
        readOnly: true,
        serializedName: "transportAvailabilityDetails",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "TransportAvailabilityDetails"
            }
          }
        }
      }
    }
  }
};

export const RegionConfigurationResponse: msRest.CompositeMapper = {
  serializedName: "RegionConfigurationResponse",
  type: {
    name: "Composite",
    className: "RegionConfigurationResponse",
    modelProperties: {
      scheduleAvailabilityResponse: {
        readOnly: true,
        serializedName: "scheduleAvailabilityResponse",
        type: {
          name: "Composite",
          className: "ScheduleAvailabilityResponse"
        }
      },
      transportAvailabilityResponse: {
        readOnly: true,
        serializedName: "transportAvailabilityResponse",
        type: {
          name: "Composite",
          className: "TransportAvailabilityResponse"
        }
      }
    }
  }
};

export const ShipmentPickUpRequest: msRest.CompositeMapper = {
  serializedName: "ShipmentPickUpRequest",
  type: {
    name: "Composite",
    className: "ShipmentPickUpRequest",
    modelProperties: {
      startTime: {
        required: true,
        serializedName: "startTime",
        type: {
          name: "DateTime"
        }
      },
      endTime: {
        required: true,
        serializedName: "endTime",
        type: {
          name: "DateTime"
        }
      },
      shipmentLocation: {
        required: true,
        serializedName: "shipmentLocation",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const ShipmentPickUpResponse: msRest.CompositeMapper = {
  serializedName: "ShipmentPickUpResponse",
  type: {
    name: "Composite",
    className: "ShipmentPickUpResponse",
    modelProperties: {
      confirmationNumber: {
        readOnly: true,
        serializedName: "confirmationNumber",
        type: {
          name: "String"
        }
      },
      readyByTime: {
        readOnly: true,
        serializedName: "readyByTime",
        type: {
          name: "DateTime"
        }
      }
    }
  }
};

export const SkuAvailabilityValidationRequest: msRest.CompositeMapper = {
  serializedName: "ValidateSkuAvailability",
  type: {
    name: "Composite",
    polymorphicDiscriminator: ValidationInputRequest.type.polymorphicDiscriminator,
    uberParent: "ValidationInputRequest",
    className: "SkuAvailabilityValidationRequest",
    modelProperties: {
      ...ValidationInputRequest.type.modelProperties,
      deviceType: {
        required: true,
        serializedName: "deviceType",
        type: {
          name: "Enum",
          allowedValues: [
            "DataBox",
            "DataBoxDisk",
            "DataBoxHeavy"
          ]
        }
      },
      transferType: {
        required: true,
        serializedName: "transferType",
        type: {
          name: "Enum",
          allowedValues: [
            "ImportToAzure",
            "ExportFromAzure"
          ]
        }
      },
      country: {
        required: true,
        serializedName: "country",
        type: {
          name: "String"
        }
      },
      location: {
        required: true,
        serializedName: "location",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const SkuAvailabilityValidationResponseProperties: msRest.CompositeMapper = {
  serializedName: "ValidateSkuAvailability",
  type: {
    name: "Composite",
    polymorphicDiscriminator: ValidationInputResponse.type.polymorphicDiscriminator,
    uberParent: "ValidationInputResponse",
    className: "SkuAvailabilityValidationResponseProperties",
    modelProperties: {
      ...ValidationInputResponse.type.modelProperties,
      status: {
        readOnly: true,
        serializedName: "status",
        type: {
          name: "Enum",
          allowedValues: [
            "Valid",
            "Invalid",
            "Skipped"
          ]
        }
      }
    }
  }
};

export const StorageAccountDetails: msRest.CompositeMapper = {
  serializedName: "StorageAccount",
  type: {
    name: "Composite",
    polymorphicDiscriminator: DataAccountDetails.type.polymorphicDiscriminator,
    uberParent: "DataAccountDetails",
    className: "StorageAccountDetails",
    modelProperties: {
      ...DataAccountDetails.type.modelProperties,
      storageAccountId: {
        required: true,
        serializedName: "storageAccountId",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const SubscriptionIsAllowedToCreateJobValidationRequest: msRest.CompositeMapper = {
  serializedName: "ValidateSubscriptionIsAllowedToCreateJob",
  type: {
    name: "Composite",
    polymorphicDiscriminator: ValidationInputRequest.type.polymorphicDiscriminator,
    uberParent: "ValidationInputRequest",
    className: "SubscriptionIsAllowedToCreateJobValidationRequest",
    modelProperties: {
      ...ValidationInputRequest.type.modelProperties
    }
  }
};

export const SubscriptionIsAllowedToCreateJobValidationResponseProperties: msRest.CompositeMapper = {
  serializedName: "ValidateSubscriptionIsAllowedToCreateJob",
  type: {
    name: "Composite",
    polymorphicDiscriminator: ValidationInputResponse.type.polymorphicDiscriminator,
    uberParent: "ValidationInputResponse",
    className: "SubscriptionIsAllowedToCreateJobValidationResponseProperties",
    modelProperties: {
      ...ValidationInputResponse.type.modelProperties,
      status: {
        readOnly: true,
        serializedName: "status",
        type: {
          name: "Enum",
          allowedValues: [
            "Valid",
            "Invalid",
            "Skipped"
          ]
        }
      }
    }
  }
};

export const UnencryptedCredentials: msRest.CompositeMapper = {
  serializedName: "UnencryptedCredentials",
  type: {
    name: "Composite",
    className: "UnencryptedCredentials",
    modelProperties: {
      jobName: {
        readOnly: true,
        serializedName: "jobName",
        type: {
          name: "String"
        }
      },
      jobSecrets: {
        readOnly: true,
        serializedName: "jobSecrets",
        type: {
          name: "Composite",
          className: "JobSecrets"
        }
      }
    }
  }
};

export const ValidateAddress: msRest.CompositeMapper = {
  serializedName: "ValidateAddress",
  type: {
    name: "Composite",
    polymorphicDiscriminator: ValidationInputRequest.type.polymorphicDiscriminator,
    uberParent: "ValidationInputRequest",
    className: "ValidateAddress",
    modelProperties: {
      ...ValidationInputRequest.type.modelProperties,
      shippingAddress: {
        required: true,
        serializedName: "shippingAddress",
        type: {
          name: "Composite",
          className: "ShippingAddress"
        }
      },
      deviceType: {
        required: true,
        serializedName: "deviceType",
        type: {
          name: "Enum",
          allowedValues: [
            "DataBox",
            "DataBoxDisk",
            "DataBoxHeavy"
          ]
        }
      },
      transportPreferences: {
        serializedName: "transportPreferences",
        type: {
          name: "Composite",
          className: "TransportPreferences"
        }
      }
    }
  }
};

export const ValidationResponse: msRest.CompositeMapper = {
  serializedName: "ValidationResponse",
  type: {
    name: "Composite",
    className: "ValidationResponse",
    modelProperties: {
      status: {
        readOnly: true,
        serializedName: "properties.status",
        type: {
          name: "Enum",
          allowedValues: [
            "AllValidToProceed",
            "InputsRevisitRequired",
            "CertainInputValidationsSkipped"
          ]
        }
      },
      individualResponseDetails: {
        readOnly: true,
        serializedName: "properties.individualResponseDetails",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "ValidationInputResponse"
            }
          }
        }
      }
    }
  }
};

export const OperationList: msRest.CompositeMapper = {
  serializedName: "OperationList",
  type: {
    name: "Composite",
    className: "OperationList",
    modelProperties: {
      value: {
        readOnly: true,
        serializedName: "",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "Operation"
            }
          }
        }
      },
      nextLink: {
        serializedName: "nextLink",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const JobResourceList: msRest.CompositeMapper = {
  serializedName: "JobResourceList",
  type: {
    name: "Composite",
    className: "JobResourceList",
    modelProperties: {
      value: {
        serializedName: "",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "JobResource"
            }
          }
        }
      },
      nextLink: {
        serializedName: "nextLink",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const UnencryptedCredentialsList: msRest.CompositeMapper = {
  serializedName: "UnencryptedCredentialsList",
  type: {
    name: "Composite",
    className: "UnencryptedCredentialsList",
    modelProperties: {
      value: {
        serializedName: "",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "UnencryptedCredentials"
            }
          }
        }
      }
    }
  }
};

export const AvailableSkusResult: msRest.CompositeMapper = {
  serializedName: "AvailableSkusResult",
  type: {
    name: "Composite",
    className: "AvailableSkusResult",
    modelProperties: {
      value: {
        readOnly: true,
        serializedName: "",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "SkuInformation"
            }
          }
        }
      },
      nextLink: {
        serializedName: "nextLink",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const discriminators = {
  'CopyLogDetails' : CopyLogDetails,
  'ValidationRequest.JobCreationValidation' : CreateJobValidations,
  'ValidationInputRequest.ValidateCreateOrderLimit' : CreateOrderLimitForSubscriptionValidationRequest,
  'ValidationInputResponse.ValidateCreateOrderLimit' : CreateOrderLimitForSubscriptionValidationResponseProperties,
  'DataAccountDetails' : DataAccountDetails,
  'CopyLogDetails.DataBox' : DataBoxAccountCopyLogDetails,
  'CopyLogDetails.DataBoxDisk' : DataBoxDiskCopyLogDetails,
  'JobDetails.DataBoxDisk' : DataBoxDiskJobDetails,
  'JobSecrets.DataBoxDisk' : DataBoxDiskJobSecrets,
  'CopyLogDetails.DataBoxHeavy' : DataBoxHeavyAccountCopyLogDetails,
  'JobDetails.DataBoxHeavy' : DataBoxHeavyJobDetails,
  'JobSecrets.DataBoxHeavy' : DataBoxHeavyJobSecrets,
  'JobDetails.DataBox' : DataBoxJobDetails,
  'JobSecrets.DataBox' : DataboxJobSecrets,
  'ScheduleAvailabilityRequest.DataBox' : DataBoxScheduleAvailabilityRequest,
  'ValidationInputRequest.ValidateDataTransferDetails' : DataTransferDetailsValidationRequest,
  'ValidationInputResponse.ValidateDataTransferDetails' : DataTransferDetailsValidationResponseProperties,
  'ScheduleAvailabilityRequest.DataBoxDisk' : DiskScheduleAvailabilityRequest,
  'ScheduleAvailabilityRequest.DataBoxHeavy' : HeavyScheduleAvailabilityRequest,
  'JobDetails' : JobDetails,
  'JobSecrets' : JobSecrets,
  'DataAccountDetails.ManagedDisk' : ManagedDiskDetails,
  'ValidationInputRequest.ValidatePreferences' : PreferencesValidationRequest,
  'ValidationInputResponse.ValidatePreferences' : PreferencesValidationResponseProperties,
  'ScheduleAvailabilityRequest' : ScheduleAvailabilityRequest,
  'ValidationInputRequest.ValidateSkuAvailability' : SkuAvailabilityValidationRequest,
  'ValidationInputResponse.ValidateSkuAvailability' : SkuAvailabilityValidationResponseProperties,
  'DataAccountDetails.StorageAccount' : StorageAccountDetails,
  'ValidationInputRequest.ValidateSubscriptionIsAllowedToCreateJob' : SubscriptionIsAllowedToCreateJobValidationRequest,
  'ValidationInputResponse.ValidateSubscriptionIsAllowedToCreateJob' : SubscriptionIsAllowedToCreateJobValidationResponseProperties,
  'ValidationInputRequest.ValidateAddress' : ValidateAddress,
  'ValidationInputRequest' : ValidationInputRequest,
  'ValidationInputResponse' : ValidationInputResponse,
  'ValidationRequest' : ValidationRequest

};
