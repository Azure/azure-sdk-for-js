{"version":3,"file":"index.js","sourceRoot":"","sources":["../../src/index.ts"],"names":[],"mappings":"AAAA,uCAAuC;AACvC,kCAAkC;;AAElC,OAAO,EACL,kBAAkB,EAClB,2BAA2B,EAC3B,wBAAwB,EACxB,yBAAyB,EACzB,sBAAsB,EAItB,qBAAqB,GACtB,MAAM,iBAAiB,CAAC;AACzB,OAAO,EAAE,cAAc,EAAE,MAAM,4BAA4B,CAAC;AAC5D,OAAO,EAAE,cAAc,EAAE,MAAM,qBAAqB,CAAC;AAErD,OAAO,EAAE,SAAS,EAAE,MAAM,kBAAkB,CAAC;AAC7C,OAAO,EAAE,4BAA4B,EAAE,MAAM,6BAA6B,CAAC;AAsB3E;;;;;;;;;;GAUG;AACH,MAAM,UAAU,oBAAoB,CAClC,yBAAsD,EAAE;IAExD,IAAI,cAAc,EAAE,EAAE,CAAC;QACrB,OAAO,IAAI,cAAc,EAAE,CAAC;IAC9B,CAAC;SAAM,CAAC;QACN,OAAO,oBAAoB,CAAC,sBAAsB,CAAC,CAAC;IACtD,CAAC;AACH,CAAC;AAED;;;;;GAKG;AACH,MAAM,UAAU,oBAAoB,CAClC,yBAAsD,EAAE;IAExD,IAAI,SAAS,EAAE,CAAC;QACd,OAAO,4BAA4B,CAAC,sBAAsB,CAAC,CAAC;IAC9D,CAAC;SAAM,CAAC;QACN,MAAM,EAAE,qBAAqB,EAAE,CAAC,KAAoB,sBAAsB,EAArC,UAAU,UAAK,sBAAsB,EAApE,yBAA2C,CAAyB,CAAC;QAC3E,MAAM,iBAAiB,GAAG,OAAO,CAAC,GAAG,CAAC,kBAAkB,CAAC;QACzD,8DAA8D;QAC9D,IAAI,iBAAiB,EAAE,CAAC;YACtB,MAAM,mBAAmB,GAAG,OAAO,CAAC,GAAG,CAAC,uCAAuC,CAAC;YAChF,MAAM,QAAQ,GAAG,OAAO,CAAC,GAAG,CAAC,2BAA2B,CAAC;YACzD,MAAM,QAAQ,GAAG,OAAO,CAAC,GAAG,CAAC,2BAA2B,CAAC;YACzD,IAAI,mBAAmB,IAAI,QAAQ,IAAI,QAAQ,EAAE,CAAC;gBAChD,OAAO,IAAI,wBAAwB,CACjC,QAAQ,EACR,QAAQ,EACR,mBAAmB,EACnB,iBAAiB,EACjB,UAAU,CACX,CAAC;YACJ,CAAC;YACD,MAAM,IAAI,KAAK,CAAC;+BACS,mBAAmB,eAAe,QAAQ,eAAe,QAAQ,EAAE,CAAC,CAAC;QAChG,CAAC;QACD,OAAO,IAAI,sBAAsB,CAC/B,IAAI,yBAAyB,CAAC,UAAU,CAAC,EACzC,IAAI,kBAAkB,CAAC,UAAU,CAAC,EAClC,IAAI,2BAA2B,CAAC,UAAU,CAAC;QAC3C,8FAA8F;QAC9F,+CAA+C;QAC/C,gGAAgG;QAChG,IAAI,qBAAqB,CAAC,UAAU,CAAC,CACtC,CAAC;IACJ,CAAC;AACH,CAAC;AAED,OAAO,EAAE,cAAc,EAAE,CAAC","sourcesContent":["// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT License.\n\nimport {\n  AzureCliCredential,\n  AzureDeveloperCliCredential,\n  AzurePipelinesCredential,\n  AzurePowerShellCredential,\n  ChainedTokenCredential,\n  DefaultAzureCredentialClientIdOptions,\n  DefaultAzureCredentialOptions,\n  DefaultAzureCredentialResourceIdOptions,\n  EnvironmentCredential,\n} from \"@azure/identity\";\nimport { isPlaybackMode } from \"@azure-tools/test-recorder\";\nimport { NoOpCredential } from \"./noOpCredential.js\";\nimport { TokenCredential } from \"@azure/core-auth\";\nimport { isBrowser } from \"@azure/core-util\";\nimport { createBrowserRelayCredential } from \"./browserRelayCredential.js\";\n\n/**\n * Alias of the different possible options shapes for the DefaultAzureCredential constructor.\n */\nexport type DefaultAzureCredentialCombinedOptions =\n  | DefaultAzureCredentialClientIdOptions\n  | DefaultAzureCredentialResourceIdOptions\n  | DefaultAzureCredentialOptions;\n\n/**\n * Options to be passed to createTestCredential.\n * These options are the same as DefaultAzureCredential, with the addition of an option for the relay server\n * URL used in browser tests.\n */\nexport type CreateTestCredentialOptions = DefaultAzureCredentialCombinedOptions & {\n  /**\n   * URL of the relay server for the browser relay credential used in browser tests.\n   */\n  browserRelayServerUrl?: string;\n};\n\n/**\n * ## Credential to be used in the tests.\n *\n * ### In playback mode\n *  - returns the NoOpCredential (helps bypass the AAD traffic)\n *\n * ### In record/live modes\n *  - returns the ChainedTokenCredential in Node (expects that you used [`User Auth` or `Auth via development tools`](https://github.com/Azure/azure-sdk-for-js/tree/main/sdk/identity/identity#authenticate-users) credentials)\n *  - Returns browser relay credential in browser. Requires the dev-tool browser relay server to be running (dev-tool run start-browser-relay, or is automatically started when using the dev-tool browser test command)\n *  - AAD traffic won't be recorded if this credential is used.\n */\nexport function createTestCredential(\n  tokenCredentialOptions: CreateTestCredentialOptions = {},\n): TokenCredential {\n  if (isPlaybackMode()) {\n    return new NoOpCredential();\n  } else {\n    return createLiveCredential(tokenCredentialOptions);\n  }\n}\n\n/**\n * ## Credential to be used in live tests.\n *  - returns the ChainedTokenCredential in Node (expects that you used [`User Auth` or `Auth via development tools`](https://github.com/Azure/azure-sdk-for-js/tree/main/sdk/identity/identity#authenticate-users) credentials)\n *  - Returns browser relay credential in browser. Requires the dev-tool browser relay server to be running (dev-tool run start-browser-relay, or is automatically started when using the dev-tool browser test command)\n *  - AAD traffic won't be recorded if this credential is used.\n */\nexport function createLiveCredential(\n  tokenCredentialOptions: CreateTestCredentialOptions = {},\n): TokenCredential {\n  if (isBrowser) {\n    return createBrowserRelayCredential(tokenCredentialOptions);\n  } else {\n    const { browserRelayServerUrl: _, ...dacOptions } = tokenCredentialOptions;\n    const systemAccessToken = process.env.SYSTEM_ACCESSTOKEN;\n    // If we have a system access token, we are in Azure Pipelines\n    if (systemAccessToken) {\n      const serviceConnectionID = process.env.AZURESUBSCRIPTION_SERVICE_CONNECTION_ID;\n      const clientID = process.env.AZURESUBSCRIPTION_CLIENT_ID;\n      const tenantID = process.env.AZURESUBSCRIPTION_TENANT_ID;\n      if (serviceConnectionID && clientID && tenantID) {\n        return new AzurePipelinesCredential(\n          tenantID,\n          clientID,\n          serviceConnectionID,\n          systemAccessToken,\n          dacOptions,\n        );\n      }\n      throw new Error(`Running in Azure Pipelines environment. Missing environment variables: \n        serviceConnectionID: ${serviceConnectionID}, tenantID: ${tenantID}, clientID: ${clientID}`);\n    }\n    return new ChainedTokenCredential(\n      new AzurePowerShellCredential(dacOptions),\n      new AzureCliCredential(dacOptions),\n      new AzureDeveloperCliCredential(dacOptions),\n      // Keep Environment Credential for packages that have not migrated to Federated Authentication\n      // See the migration guide for more information\n      // https://dev.azure.com/azure-sdk/internal/_wiki/wikis/internal.wiki/1080/Secret-auth-migration\n      new EnvironmentCredential(dacOptions),\n    );\n  }\n}\n\nexport { NoOpCredential };\n"]}