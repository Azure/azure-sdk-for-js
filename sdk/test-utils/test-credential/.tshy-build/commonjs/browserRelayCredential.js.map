{"version":3,"file":"browserRelayCredential.js","sourceRoot":"","sources":["../../src/browserRelayCredential.ts"],"names":[],"mappings":";AAAA,uCAAuC;AACvC,kCAAkC;;;AAmGlC,oEAgBC;;AA3GD;;GAEG;AACH,MAAa,wBAAyB,SAAQ,KAAK;IACjD,YACE,OAAe,EACR,KAAe;QAEtB,KAAK,CAAC,OAAO,CAAC,CAAC;QAFR,UAAK,GAAL,KAAK,CAAU;QAGtB,IAAI,CAAC,IAAI,GAAG,0BAA0B,CAAC;IACzC,CAAC;CACF;AARD,4DAQC;AAED;;;;GAIG;AACH,KAAK,UAAU,gBAAgB,CAC7B,WAAmB,EACnB,UAAiD,EAAE;IAEnD,MAAM,QAAQ,GAAG,MAAM,KAAK,CAAC,GAAG,WAAW,aAAa,EAAE;QACxD,MAAM,EAAE,KAAK;QACb,IAAI,EAAE,IAAI,CAAC,SAAS,CAAC,OAAO,CAAC;QAC7B,OAAO,EAAE,EAAE,cAAc,EAAE,kBAAkB,EAAE;KAChD,CAAC,CAAC;IAEH,IAAI,CAAC,QAAQ,CAAC,EAAE,EAAE,CAAC;QACjB,IAAI,QAAQ,CAAC,MAAM,KAAK,GAAG,EAAE,CAAC;YAC5B,0CAA0C;YAC1C,MAAM,IAAI,wBAAwB,CAChC,mCAAmC,EAClC,CAAC,MAAM,QAAQ,CAAC,IAAI,EAAE,CAAwB,CAAC,KAAK,CACtD,CAAC;QACJ,CAAC;QAED,MAAM,IAAI,wBAAwB,CAChC,qDAAqD,QAAQ,CAAC,MAAM,EAAE,CACvE,CAAC;IACJ,CAAC;IAED,OAAQ,CAAC,MAAM,QAAQ,CAAC,IAAI,EAAE,CAAoB,CAAC,EAAE,CAAC;AACxD,CAAC;AAED;;;;;;;GAOG;AACH,KAAK,UAAU,iBAAiB,CAC9B,WAAmB,EACnB,YAAoB,EACpB,MAAyB,EACzB,UAA2B,EAAE;IAE7B,MAAM,KAAK,GAAG,OAAO,MAAM,KAAK,QAAQ,CAAC,CAAC,CAAC,MAAM,CAAC,CAAC,CAAC,MAAM,CAAC,CAAC,CAAC,CAAC;IAC9D,MAAM,MAAM,GAAG,IAAI,eAAe,CAAC;QACjC,MAAM,EAAE,KAAK;QACb,OAAO,EAAE,IAAI,CAAC,SAAS,CAAC,OAAO,CAAC;KACjC,CAAC,CAAC;IAEH,MAAM,QAAQ,GAAG,MAAM,KAAK,CAAC,GAAG,WAAW,cAAc,YAAY,UAAU,MAAM,EAAE,CAAC,CAAC;IAEzF,IAAI,CAAC,QAAQ,CAAC,EAAE,EAAE,CAAC;QACjB,IAAI,QAAQ,CAAC,MAAM,KAAK,GAAG,EAAE,CAAC;YAC5B,0CAA0C;YAC1C,MAAM,IAAI,wBAAwB,CAChC,+BAA+B,EAC9B,CAAC,MAAM,QAAQ,CAAC,IAAI,EAAE,CAAwB,CAAC,KAAK,CACtD,CAAC;QACJ,CAAC;QAED,MAAM,IAAI,wBAAwB,CAChC,yDAAyD,QAAQ,CAAC,MAAM,EAAE,CAC3E,CAAC;IACJ,CAAC;IAED,OAAO,CAAC,MAAM,QAAQ,CAAC,IAAI,EAAE,CAAgB,CAAC;AAChD,CAAC;AAED;;;;;;GAMG;AACH,SAAgB,4BAA4B,CAC1C,UAAuC,EAAE;IAEzC,IAAI,YAAY,GAAuB,SAAS,CAAC;IAEjD,MAAM,EAAE,qBAAqB,GAAG,wBAAwB,KAAoB,OAAO,EAAtB,UAAU,kBAAK,OAAO,EAA7E,yBAAmE,CAAU,CAAC;IAEpF,OAAO;QACL,KAAK,CAAC,QAAQ,CAAC,MAAM,EAAE,eAAe;YACpC,IAAI,CAAC,YAAY,EAAE,CAAC;gBAClB,YAAY,GAAG,MAAM,gBAAgB,CAAC,qBAAqB,EAAE,UAAU,CAAC,CAAC;YAC3E,CAAC;YAED,OAAO,MAAM,iBAAiB,CAAC,qBAAqB,EAAE,YAAY,EAAE,MAAM,EAAE,eAAe,CAAC,CAAC;QAC/F,CAAC;KACF,CAAC;AACJ,CAAC","sourcesContent":["// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT License.\n\nimport type { AccessToken, GetTokenOptions, TokenCredential } from \"@azure/core-auth\";\nimport type {\n  CreateTestCredentialOptions,\n  DefaultAzureCredentialCombinedOptions,\n} from \"./index.js\";\n\n/**\n * Authentication error thrown when the relay server could not authenticate.\n */\nexport class RelayAuthenticationError extends Error {\n  constructor(\n    message: string,\n    public cause?: unknown,\n  ) {\n    super(message);\n    this.name = \"RelayAuthenticationError\";\n  }\n}\n\n/**\n * Ask the relay server to create a credential\n * @param relayServer Relay server URL\n * @returns id of the created credential, to be passed back to the relay when calling getToken\n */\nasync function createCredential(\n  relayServer: string,\n  options: DefaultAzureCredentialCombinedOptions = {},\n): Promise<string> {\n  const response = await fetch(`${relayServer}credential/`, {\n    method: \"PUT\",\n    body: JSON.stringify(options),\n    headers: { \"Content-Type\": \"application/json\" },\n  });\n\n  if (!response.ok) {\n    if (response.status === 400) {\n      // Throw the error that the relay received\n      throw new RelayAuthenticationError(\n        \"Relay could not create credential\",\n        ((await response.json()) as { error: unknown }).error,\n      );\n    }\n\n    throw new RelayAuthenticationError(\n      `Relay could not create credential: got error code ${response.status}`,\n    );\n  }\n\n  return ((await response.json()) as { id: string }).id;\n}\n\n/**\n * Get a token from the relay\n * @param relayServer Relay server URL\n * @param credentialId ID of the credential (created using createCredential) to get the token with\n * @param scopes Scopes\n * @param options Credential options to be passed to getToken\n * @returns Access token from the relay\n */\nasync function getTokenFromRelay(\n  relayServer: string,\n  credentialId: string,\n  scopes: string | string[],\n  options: GetTokenOptions = {},\n): Promise<AccessToken> {\n  const scope = typeof scopes === \"string\" ? scopes : scopes[0];\n  const params = new URLSearchParams({\n    scopes: scope,\n    options: JSON.stringify(options),\n  });\n\n  const response = await fetch(`${relayServer}credential/${credentialId}/token?${params}`);\n\n  if (!response.ok) {\n    if (response.status === 400) {\n      // Throw the error that the relay received\n      throw new RelayAuthenticationError(\n        \"Relay was unable to get token\",\n        ((await response.json()) as { error: unknown }).error,\n      );\n    }\n\n    throw new RelayAuthenticationError(\n      `Could not get token from relay server: got error code ${response.status}`,\n    );\n  }\n\n  return (await response.json()) as AccessToken;\n}\n\n/**\n * Create a credential that can be used in the browser to get tokens from a relay server.\n * This credential should be used in conjunction with the relay server provided by the dev-tool package.\n *\n * @param options options for creating the credential.\n * @returns a credential which will use the relay endpoint to get access tokens.\n */\nexport function createBrowserRelayCredential(\n  options: CreateTestCredentialOptions = {},\n): TokenCredential {\n  let credentialId: string | undefined = undefined;\n\n  const { browserRelayServerUrl = \"http://localhost:4895/\", ...dacOptions } = options;\n\n  return {\n    async getToken(scopes, getTokenOptions) {\n      if (!credentialId) {\n        credentialId = await createCredential(browserRelayServerUrl, dacOptions);\n      }\n\n      return await getTokenFromRelay(browserRelayServerUrl, credentialId, scopes, getTokenOptions);\n    },\n  };\n}\n"]}