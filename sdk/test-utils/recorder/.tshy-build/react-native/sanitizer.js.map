{"version":3,"file":"sanitizer.js","sourceRoot":"","sources":["../../src/sanitizer.ts"],"names":[],"mappings":"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","sourcesContent":["// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT License.\n\nimport { HttpClient } from \"@azure/core-rest-pipeline\";\nimport { logger } from \"./log.js\";\nimport { getRealAndFakePairs } from \"./utils/connectionStringHelpers.js\";\nimport { createRecordingRequest } from \"./utils/createRecordingRequest.js\";\nimport { paths } from \"./utils/paths.js\";\nimport {\n  BodyKeySanitizer,\n  ConnectionStringSanitizer,\n  ContinuationSanitizer,\n  FindReplaceSanitizer,\n  getTestMode,\n  HeaderSanitizer,\n  isStringSanitizer,\n  ProxyToolSanitizers,\n  RecorderError,\n  SanitizerOptions,\n} from \"./utils/utils.js\";\n\n/**\n * Returns the html document of all the available transforms in the proxy-tool\n */\nexport async function transformsInfo(\n  httpClient: HttpClient,\n  url: string,\n  recordingId: string,\n): Promise<string | null | undefined> {\n  if (recordingId) {\n    const infoUri = `${url}${paths.info}${paths.available}`;\n    const req = createRecordingRequest(infoUri, undefined, recordingId, \"GET\");\n    if (!httpClient) {\n      throw new RecorderError(\n        `Something went wrong, Sanitizer.httpClient should not have been undefined in ${getTestMode()} mode.`,\n      );\n    }\n    const rsp = await httpClient.sendRequest({\n      ...req,\n      allowInsecureConnection: true,\n    });\n    if (rsp.status !== 200) {\n      throw new RecorderError(\"Info request failed.\");\n    }\n    return rsp.bodyAsText;\n  } else {\n    throw new RecorderError(\"Bad state, recordingId is not defined when called transformsInfo().\");\n  }\n}\n\n/**\n * Array of objects of this type would constitute to be the request body of /addSanitizers\n */\ntype SanitizerRequestBody = {\n  Name: string;\n  Body: Record<string, unknown> | undefined;\n};\n\n/**\n * Extract sanitizers for each key and make SanitizerRequestBody[] array out of them for /addSanitizers request\n */\nfunction makeBatchSanitizerBody(sanitizers: SanitizerOptions): SanitizerRequestBody[] {\n  const {\n    generalSanitizers,\n    bodySanitizers,\n    headerSanitizers,\n    uriSanitizers,\n    connectionStringSanitizers,\n    bodyKeySanitizers,\n    continuationSanitizers,\n    removeHeaderSanitizer,\n    oAuthResponseSanitizer,\n    uriSubscriptionIdSanitizer,\n    resetSanitizer,\n  } = sanitizers;\n  let connectionStringSanitizersBodies: SanitizerRequestBody[] = [];\n  for (const sanitizer of connectionStringSanitizers ?? []) {\n    connectionStringSanitizersBodies = connectionStringSanitizersBodies.concat(\n      makeConnectionStringSanitizerBody(sanitizer),\n    );\n  }\n\n  return (<SanitizerRequestBody[]>[]).concat(\n    getSanitizerBodies(\n      generalSanitizers,\n      makeFindReplaceSanitizerBody(\"GeneralRegexSanitizer\", \"GeneralStringSanitizer\"),\n    ),\n    getSanitizerBodies(\n      bodySanitizers,\n      makeFindReplaceSanitizerBody(\"BodyRegexSanitizer\", \"BodyStringSanitizer\"),\n    ),\n    getSanitizerBodies(headerSanitizers, makeHeaderSanitizerBody),\n    getSanitizerBodies(\n      uriSanitizers,\n      makeFindReplaceSanitizerBody(\"UriRegexSanitizer\", \"UriStringSanitizer\"),\n    ),\n    connectionStringSanitizersBodies,\n    getSanitizerBodies(bodyKeySanitizers, makeBodyKeySanitizerBody),\n    getSanitizerBodies(continuationSanitizers, makeContinuationSanitizerBody),\n    removeHeaderSanitizer\n      ? [\n          {\n            Name: \"RemoveHeaderSanitizer\",\n            Body: {\n              headersForRemoval: removeHeaderSanitizer.headersForRemoval.toString(),\n            },\n          },\n        ]\n      : [],\n    oAuthResponseSanitizer ? [{ Name: \"OAuthResponseSanitizer\", Body: undefined }] : [],\n    uriSubscriptionIdSanitizer\n      ? [{ Name: \"UriSubscriptionIdSanitizer\", Body: uriSubscriptionIdSanitizer }]\n      : [],\n    resetSanitizer ? [{ Name: \"Reset\", Body: undefined }] : [],\n  );\n}\n\n/**\n * Makes a /removeSanitizers request to the test proxy\n * This API is meant to remove the central sanitizers that were added by the proxy-tool\n * You'd need to pass the sanitizer ids that you want the test-proxy to remove for your recording\n *\n * Read more at https://github.com/Azure/azure-sdk-tools/pull/8142/files\n */\nexport async function removeCentralSanitizers(\n  httpClient: HttpClient,\n  url: string,\n  recordingId: string | undefined,\n  removalList: string[],\n): Promise<void> {\n  const uri = `${url}${paths.admin}${paths.removeSanitizers}`;\n  const req = createRecordingRequest(uri, undefined, recordingId);\n  req.headers.set(\"Content-Type\", \"application/json\");\n  req.body = JSON.stringify({\n    Sanitizers: removalList,\n  });\n  logger.info(\"[removeSanitizers] Removing sanitizers\", removalList);\n  const rsp = await httpClient.sendRequest({\n    ...req,\n    allowInsecureConnection: true,\n  });\n  if (rsp.status !== 200) {\n    logger.error(\"[removeSanitizers] removeSanitizers request failed\", rsp);\n    throw new RecorderError(\"removeSanitizers request failed.\");\n  }\n}\n\n/**\n * Makes an /addSanitizers request to the test proxy\n */\nexport async function addSanitizers(\n  httpClient: HttpClient,\n  url: string,\n  recordingId: string | undefined,\n  options: SanitizerOptions,\n): Promise<void> {\n  const sanitizerBodies = makeBatchSanitizerBody(options);\n\n  if (sanitizerBodies.length === 0) return;\n  const uri = `${url}${paths.admin}${paths.addSanitizers}`;\n  const req = createRecordingRequest(uri, undefined, recordingId);\n\n  req.headers.set(\"Content-Type\", \"application/json\");\n  req.body = JSON.stringify(sanitizerBodies);\n\n  logger.info(\"[addSanitizers] Adding sanitizers\", options);\n  const rsp = await httpClient.sendRequest({\n    ...req,\n    allowInsecureConnection: true,\n  });\n  if (rsp.status !== 200) {\n    logger.error(\"[addSanitizers] addSanitizers request failed\", rsp);\n    throw new RecorderError(\"addSanitizers request failed.\");\n  }\n}\n\n// Batch sanitizer body makers\n\n/**\n * Makes a sanitizer-bodies array from the sanitizers provided that is sent over as the addSanitizers request body.\n * Also takes in the function that makes the body for each sanitizer.\n */\nfunction getSanitizerBodies<T>(\n  sanitizers: T[] | undefined,\n  func: (sanitizer: T) => SanitizerRequestBody,\n): SanitizerRequestBody[] {\n  return sanitizers?.map(func) ?? [];\n}\n\n/**\n * Makes a sanitizer-body array, part of the array that is sent over as the addSanitizers request body.\n * for a FindReplaceSanitizer, for example a bodySanitizer.\n *\n * Depending on the input FindReplaceSanitizer options, either adds a sanitizer named `regexSanitizerName`\n * or `stringSanitizerName`.\n */\nfunction makeFindReplaceSanitizerBody(\n  regexSanitizerName: ProxyToolSanitizers,\n  stringSanitizerName: ProxyToolSanitizers,\n): (sanitizer: FindReplaceSanitizer) => SanitizerRequestBody {\n  return (sanitizer: FindReplaceSanitizer): SanitizerRequestBody => {\n    if (isStringSanitizer(sanitizer)) {\n      return {\n        Name: stringSanitizerName,\n        Body: {\n          target: sanitizer.target,\n          value: sanitizer.value,\n        },\n      };\n    }\n    return {\n      Name: regexSanitizerName,\n      Body: {\n        regex: sanitizer.target,\n        value: sanitizer.value,\n        groupForReplace: sanitizer.groupForReplace,\n      },\n    };\n  };\n}\n\n/**\n * Adds a HeaderRegexSanitizer or HeaderStringSanitizer.\n *\n * HeaderSanitizer is a special case of FindReplaceSanitizer where a header name ('key') must be provided.\n * Additionally, the 'target' option is not required. If target is unspecified, the header's value will always\n * be replaced.\n */\nfunction makeHeaderSanitizerBody(sanitizer: HeaderSanitizer): SanitizerRequestBody {\n  if (sanitizer.regex || !sanitizer.target) {\n    return {\n      Name: \"HeaderRegexSanitizer\",\n      Body: {\n        key: sanitizer.key,\n        value: sanitizer.value,\n        regex: sanitizer.target,\n        groupForReplace: sanitizer.groupForReplace,\n      },\n    };\n  }\n  return {\n    Name: \"HeaderStringSanitizer\",\n    Body: {\n      key: sanitizer.key,\n      target: sanitizer.target,\n      value: sanitizer.value,\n    },\n  };\n}\n\n/**\n *  Internally,\n * - connection strings are parsed and\n * - each part of the connection string is mapped with its corresponding fake value\n * - GeneralStringSanitizer is applied for each of the parts with the real and fake values that are parsed\n */\nfunction makeConnectionStringSanitizerBody(\n  sanitizer: ConnectionStringSanitizer,\n): SanitizerRequestBody[] {\n  if (!sanitizer.actualConnString) {\n    throw new RecorderError(\n      `Attempted to add an invalid sanitizer - ${JSON.stringify({\n        actualConnString: sanitizer.actualConnString,\n        fakeConnString: sanitizer.fakeConnString,\n      })}`,\n    );\n  }\n  const pairsMatched = getRealAndFakePairs(sanitizer.actualConnString, sanitizer.fakeConnString);\n  return Object.entries(pairsMatched).map(([key, value]) => {\n    return { Name: \"GeneralStringSanitizer\", Body: { value, target: key } };\n  });\n}\n\n/**\n * Makes a sanitizer-body, part of the array that is sent over as the addSanitizers request body.\n */\nfunction makeBodyKeySanitizerBody(sanitizer: BodyKeySanitizer): SanitizerRequestBody {\n  return {\n    Name: \"BodyKeySanitizer\",\n    Body: sanitizer,\n  };\n}\n\n/**\n * Makes a sanitizer-body, part of the array that is sent over as the addSanitizers request body.\n */\nfunction makeContinuationSanitizerBody(sanitizer: ContinuationSanitizer): SanitizerRequestBody {\n  return {\n    Name: \"ContinuationSanitizer\",\n    Body: {\n      ...sanitizer,\n      resetAfterFirst: sanitizer.resetAfterFirst.toString(),\n    },\n  };\n}\n"]}