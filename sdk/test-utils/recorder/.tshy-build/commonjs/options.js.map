{"version":3,"file":"options.js","sourceRoot":"","sources":["../../src/options.ts"],"names":[],"mappings":";AAAA,uCAAuC;AACvC,kCAAkC;;AAWlC,kDA+BC;AAxCD,kEAAiG;AACjG,+CAAyC;AACzC,+CAAiD;AAO1C,KAAK,UAAU,mBAAmB,CACvC,WAAmB,EACnB,UAAsB,EACtB,EAAE,eAAe,EAAE,iBAAiB,EAAoB;IAExD,8DAA8D;IAC9D,MAAM,OAAO,GAAwB;QACnC,eAAe,EAAE,eAAe;KACjC,CAAC;IACF,IAAI,iBAAiB,EAAE,CAAC;QACtB,OAAO,CAAC,SAAS,GAAG;YAClB,iBAAiB,EAAE,iBAAiB;SACrC,CAAC;IACJ,CAAC;IACD,MAAM,IAAI,GAAG,IAAI,CAAC,SAAS,CAAC,OAAO,CAAC,CAAC;IAErC,MAAM,OAAO,GAAG,IAAA,0CAAqB,EAAC;QACpC,GAAG,EAAE,GAAG,WAAW,GAAG,gBAAK,CAAC,KAAK,GAAG,gBAAK,CAAC,mBAAmB,EAAE;QAC/D,MAAM,EAAE,MAAM;QACd,IAAI;QACJ,uBAAuB,EAAE,IAAI;QAC7B,OAAO,EAAE,IAAA,sCAAiB,EAAC;YACzB,cAAc,EAAE,kBAAkB;SACnC,CAAC;KACH,CAAC,CAAC;IAEH,MAAM,QAAQ,GAAG,MAAM,UAAU,CAAC,WAAW,CAAC,OAAO,CAAC,CAAC;IAEvD,IAAI,QAAQ,CAAC,MAAM,GAAG,GAAG,IAAI,QAAQ,CAAC,MAAM,GAAG,GAAG,EAAE,CAAC;QACnD,MAAM,IAAI,wBAAa,CAAC,+BAA+B,QAAQ,CAAC,UAAU,EAAE,CAAC,CAAC;IAChF,CAAC;AACH,CAAC","sourcesContent":["// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT License.\n\nimport { createHttpHeaders, createPipelineRequest, HttpClient } from \"@azure/core-rest-pipeline\";\nimport { paths } from \"./utils/paths.js\";\nimport { RecorderError } from \"./utils/utils.js\";\n\nexport type RecordingOptions = {\n  handleRedirects?: boolean;\n  tlsValidationCert?: string;\n};\n\nexport async function setRecordingOptions(\n  recorderUrl: string,\n  httpClient: HttpClient,\n  { handleRedirects, tlsValidationCert }: RecordingOptions,\n): Promise<void> {\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  const rawBody: Record<string, any> = {\n    HandleRedirects: handleRedirects,\n  };\n  if (tlsValidationCert) {\n    rawBody.Transport = {\n      TLSValidationCert: tlsValidationCert,\n    };\n  }\n  const body = JSON.stringify(rawBody);\n\n  const request = createPipelineRequest({\n    url: `${recorderUrl}${paths.admin}${paths.setRecordingOptions}`,\n    method: \"POST\",\n    body,\n    allowInsecureConnection: true,\n    headers: createHttpHeaders({\n      \"Content-Type\": \"application/json\",\n    }),\n  });\n\n  const response = await httpClient.sendRequest(request);\n\n  if (response.status < 200 || response.status > 299) {\n    throw new RecorderError(`setRecordingOptions failed: ${response.bodyAsText}`);\n  }\n}\n"]}