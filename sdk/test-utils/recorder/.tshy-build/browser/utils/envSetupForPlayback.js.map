{"version":3,"file":"envSetupForPlayback.js","sourceRoot":"","sources":["../../../src/utils/envSetupForPlayback.ts"],"names":[],"mappings":"AAAA,uCAAuC;AACvC,kCAAkC;AAGlC,OAAO,EAAE,MAAM,EAAE,MAAM,WAAW,CAAC;AACnC,OAAO,EAAE,aAAa,EAAE,MAAM,iBAAiB,CAAC;AAChD,OAAO,EACL,cAAc,EACd,YAAY,EACZ,uBAAuB,GAExB,MAAM,YAAY,CAAC;AACpB,OAAO,EAAE,GAAG,EAAE,MAAM,UAAU,CAAC;AAE/B;;;;;;GAMG;AACH,MAAM,CAAC,KAAK,UAAU,cAAc,CAClC,UAAsB,EACtB,GAAW,EACX,WAAmB,EACnB,mBAA2C;IAE3C,IAAI,mBAAmB,EAAE,CAAC;QACxB,IAAI,cAAc,EAAE,EAAE,CAAC;YACrB,mGAAmG;YACnG,MAAM,CAAC,OAAO,CACZ,qFAAqF,CACtF,CAAC;YACF,uBAAuB,CAAC,mBAAmB,CAAC,CAAC;QAC/C,CAAC;aAAM,IAAI,YAAY,EAAE,EAAE,CAAC;YAC1B,MAAM,CAAC,OAAO,CACZ,6GAA6G,EAC7G,mBAAmB,CACpB,CAAC;YAEF,qIAAqI;YACrI,MAAM,uBAAuB,GAAG,MAAM,CAAC,OAAO,CAAC,mBAAmB,CAAC;gBACjE,4DAA4D;iBAC3D,GAAG,CAAC,CAAC,CAAC,GAAG,EAAE,KAAK,CAAC,EAAE,EAAE,CAAC,CAAC,GAAG,CAAC,GAAG,CAAC,EAAE,KAAK,CAAC,CAAC;gBACzC,6FAA6F;iBAC5F,MAAM,CAAC,CAAC,CAAC,GAAG,CAAC,EAAE,EAAE,CAAC,GAAG,KAAK,SAAS,CAAuB,CAAC;YAE9D,kIAAkI;YAClI,mGAAmG;YACnG,MAAM,iBAAiB,GAA2B,uBAAuB;iBACtE,IAAI,CAAC,CAAC,CAAC,IAAI,CAAC,EAAE,CAAC,IAAI,CAAC,EAAE,EAAE,CAAC,IAAI,CAAC,MAAM,GAAG,IAAI,CAAC,MAAM,CAAC;iBACnD,GAAG,CAAC,CAAC,CAAC,MAAM,EAAE,KAAK,CAAC,EAAE,EAAE,CAAC,CAAC,EAAE,MAAM,EAAE,MAAM,EAAE,KAAK,EAAE,CAAC,CAAC,CAAC;YAEzD,MAAM,aAAa,CAAC,UAAU,EAAE,GAAG,EAAE,WAAW,EAAE;gBAChD,iBAAiB;aAClB,CAAC,CAAC;YAEH,MAAM,CAAC,OAAO,CAAC,sEAAsE,CAAC,CAAC;QACzF,CAAC;IACH,CAAC;AACH,CAAC","sourcesContent":["// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT License.\n\nimport { HttpClient } from \"@azure/core-rest-pipeline\";\nimport { logger } from \"../log.js\";\nimport { addSanitizers } from \"../sanitizer.js\";\nimport {\n  isPlaybackMode,\n  isRecordMode,\n  setEnvironmentVariables,\n  FindReplaceSanitizer,\n} from \"./utils.js\";\nimport { env } from \"./env.js\";\n\n/**\n * Supposed to be used in record and playback modes.\n * Has no effect in live mode.\n *\n *  1. The key-value pairs will be used as the environment variables in playback mode.\n *  2. If the env variables are present in the recordings as plain strings, they will be replaced with the provided values in record mode\n */\nexport async function handleEnvSetup(\n  httpClient: HttpClient,\n  url: string,\n  recordingId: string,\n  envSetupForPlayback: Record<string, string>,\n): Promise<void> {\n  if (envSetupForPlayback) {\n    if (isPlaybackMode()) {\n      // Loads the \"fake\" environment variables in `process.env` or `window.__env__` based on the runtime\n      logger.verbose(\n        \"[handleEnvSetup] Playback mode: updating environment variables to their fake values\",\n      );\n      setEnvironmentVariables(envSetupForPlayback);\n    } else if (isRecordMode()) {\n      logger.verbose(\n        \"[handleEnvSetup] Record mode: adding sanitizers to remove environment variables set in envSetupForPlayback:\",\n        envSetupForPlayback,\n      );\n\n      // If the env variables are present in the recordings as plain strings, they will be replaced with the provided values in record mode\n      const valueToReplacementPairs = Object.entries(envSetupForPlayback)\n        // Map the values from the environment to their replacements\n        .map(([key, value]) => [env[key], value])\n        // Don't perform a replacement if the environment variable to replace is not actually defined\n        .filter(([key]) => key !== undefined) as [string, string][];\n\n      // Sort so that we add the sanitizers from longest replacement value to shortest to ensure if one value is a substring of another,\n      // the replacement of the shorter value doesn't interfere with the replacement of the longer value.\n      const generalSanitizers: FindReplaceSanitizer[] = valueToReplacementPairs\n        .sort(([aKey], [bKey]) => bKey.length - aKey.length)\n        .map(([envKey, value]) => ({ target: envKey, value }));\n\n      await addSanitizers(httpClient, url, recordingId, {\n        generalSanitizers,\n      });\n\n      logger.verbose(\"[handleEnvSetup] Added environment variable sanitizers successfully.\");\n    }\n  }\n}\n"]}