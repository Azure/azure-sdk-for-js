{"version":3,"file":"delay.js","sourceRoot":"","sources":["../../../src/utils/delay.ts"],"names":[],"mappings":"AAAA,uCAAuC;AACvC,kCAAkC;AAElC,OAAO,EAAE,cAAc,EAAE,MAAM,YAAY,CAAC;AAE5C;;;;;;GAMG;AACH,MAAM,UAAU,KAAK,CAAC,YAAoB;IACxC,IAAI,cAAc,EAAE,EAAE,CAAC;QACrB,OAAO;IACT,CAAC;IACD,OAAO,IAAI,OAAO,CAAC,CAAC,OAAO,EAAE,EAAE,CAAC,UAAU,CAAC,OAAO,EAAE,YAAY,CAAC,CAAC,CAAC;AACrE,CAAC","sourcesContent":["// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT License.\n\nimport { isPlaybackMode } from \"./utils.js\";\n\n/**\n * Usage - `await delay(<milliseconds>)`\n * This `delay` has no effect if the `TEST_MODE` is `\"playback\"`.\n * If the `TEST_MODE` is not `\"playback\"`, `delay` is a wrapper for setTimeout that resolves a promise after t milliseconds.\n *\n * @param {number} milliseconds - The number of milliseconds to be delayed.\n */\nexport function delay(milliseconds: number): Promise<void> | void {\n  if (isPlaybackMode()) {\n    return;\n  }\n  return new Promise((resolve) => setTimeout(resolve, milliseconds));\n}\n"]}