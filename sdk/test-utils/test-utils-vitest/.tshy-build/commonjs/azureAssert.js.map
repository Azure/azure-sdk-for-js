{"version":3,"file":"azureAssert.js","sourceRoot":"","sources":["../../src/azureAssert.ts"],"names":[],"mappings":";AAAA,uCAAuC;AACvC,kCAAkC;;AAsBlC,8BAUC;AA9BD,mCAAgC;AAEhC,uEAAgE;AAEhE;;;;;;;;;;;;;;;GAeG;AACH,SAAgB,SAAS,CAAC,IAAqB;IAC7C,+CAA+C;IAC/C,IAAI,CAAC,SAAS,CAAC,SAAS,CAAC,gBAAgB,EAAE,UAEb,iBAA2B,EAAE,OAAW;QACpE,OAAO,eAAM,CAAC,eAAe,CAAC,IAAI,CAAC,IAAI,EAAE,iBAAiB,EAAE,OAAO,EAAE,IAAI,CAAC,IAAI,CAAC,CAAC;IAClF,CAAC,CAAC,CAAC;IAEH,0CAA0C;IAC1C,IAAI,CAAC,MAAM,CAAC,eAAe,GAAG,qCAAe,CAAC;AAChD,CAAC","sourcesContent":["// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT License.\n\nimport { assert } from \"vitest\";\nimport { OperationTracingOptions } from \"@azure/core-tracing\";\nimport { supportsTracing } from \"./tracing/azureTraceAssert.js\";\n\n/**\n * Augments Chai with support for Azure specific assertions.\n *\n * Sample usage:\n *\n * ```ts\n * import chai from \"chai\";\n * import { chaiAzure } from \"@azure-tools/test-utils-vitest\";\n * chai.use(chaiAzure);\n *\n * it(\"supportsTracing\", async () => {\n *   await assert.supportsTracing((updatedOptions) => myClient.doSomething(updatedOptions), [\"myClient.doSomething\"]);\n * });\n * ```\n * @param chai - The Chai instance\n */\nexport function chaiAzure(chai: Chai.ChaiStatic): void {\n  // expect(() => {}).to.supportsTracing() syntax\n  chai.Assertion.addMethod(\"supportTracing\", function <\n    T extends { tracingOptions?: OperationTracingOptions },\n  >(this: Chai.AssertionStatic, expectedSpanNames: string[], options?: T) {\n    return assert.supportsTracing(this._obj, expectedSpanNames, options, this._obj);\n  });\n\n  // assert.supportsTracing(() => {}) syntax\n  chai.assert.supportsTracing = supportsTracing;\n}\n\n/* eslint-disable @typescript-eslint/no-namespace */\ndeclare global {\n  export namespace Chai {\n    interface Assertion {\n      supportTracing<T>(expectedSpanNames: string[], options?: T): Promise<void>;\n    }\n    interface Assert {\n      supportsTracing<\n        Options extends { tracingOptions?: OperationTracingOptions },\n        Callback extends (options: Options) => Promise<unknown>,\n      >(\n        callback: Callback,\n        expectedSpanNames: string[],\n        options?: Options,\n        thisArg?: ThisParameterType<Callback>,\n      ): Promise<void>;\n    }\n  }\n}\n"]}