{"version":3,"file":"azureMatchers.js","sourceRoot":"","sources":["../../src/azureMatchers.ts"],"names":[],"mappings":";AAAA,uCAAuC;AACvC,kCAAkC;;AAiBlC,4CAgCC;AA1CD,yEAAiE;AAEjE;;;;;;;GAOG;AACI,KAAK,UAAU,gBAAgB,CAMpC,QAAkB,EAClB,iBAA2B,EAC3B,OAAiB,EACjB,OAAqC;IAErC,MAAM,WAAW,GAAG,kBAAkB,CAAC;IACvC,MAAM,EAAE,IAAI,EAAE,OAAO,EAAE,MAAM,EAAE,QAAQ,EAAE,GAAG,MAAM,IAAA,sCAAe,EAC/D,QAAQ,EACR,iBAAiB,EACjB,OAAO,EACP,OAAO,CACR,CAAC;IACF,MAAM,EAAE,WAAW,EAAE,aAAa,EAAE,aAAa,EAAE,GAAG,IAAI,CAAC,KAAK,CAAC;IAEjE,OAAO;QACL,IAAI,EAAE,IAAI;QACV,OAAO,EAAE,GAAG,EAAE,CACZ,IAAI;YACF,CAAC,CAAC,WAAW,CAAC,WAAW,CAAC;gBACxB,MAAM;gBACN,OAAO;gBACP,YAAY,aAAa,CAAC,MAAM,CAAC,aAAa,aAAa,CAAC,QAAQ,CAAC,GAAG;YAC1E,CAAC,CAAC,WAAW,CAAC,WAAW,CAAC;gBACxB,MAAM;gBACN,mCAAmC,aAAa,CAAC,iBAAiB,CAAC,EAAE;KAC5E,CAAC;AACJ,CAAC","sourcesContent":["// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT License.\n\nimport type { OperationTracingOptions } from \"@azure/core-tracing\";\nimport type {\n  AsyncExpectationResult,\n  MatcherState,\n} from \"@vitest/expect\" with { \"resolution-mode\": \"import\" };\nimport { supportsTracing } from \"./tracing/azureTraceMatcher.js\";\n\n/**\n * The supports Tracing function does the verification of whether the core-tracing is supported correctly with the client method\n * This function verifies the root span, if all the correct spans are called as expected and if they are closed.\n * @param callback - Callback function of the client that should be invoked\n * @param expectedSpanNames - List of span names that are expected to be generated\n * @param options - Options for either Core HTTP operations or custom options for the callback\n * @param thisArg - optional this parameter for the callback\n */\nexport async function toSupportTracing<\n  ThisState extends MatcherState,\n  Options extends { tracingOptions?: OperationTracingOptions },\n  Callback extends (options: Options) => Promise<unknown>,\n>(\n  this: ThisState,\n  callback: Callback,\n  expectedSpanNames: string[],\n  options?: Options,\n  thisArg?: ThisParameterType<Callback>,\n): AsyncExpectationResult {\n  const matcherName = \"toSupportTracing\";\n  const { pass, message, actual, expected } = await supportsTracing(\n    callback,\n    expectedSpanNames,\n    options,\n    thisArg,\n  );\n  const { matcherHint, printReceived, printExpected } = this.utils;\n\n  return {\n    pass: pass,\n    message: () =>\n      pass\n        ? matcherHint(matcherName) +\n          \"\\n\\n\" +\n          message +\n          `Expected ${printReceived(actual)} to equal ${printExpected(expected)}.`\n        : matcherHint(matcherName) +\n          \"\\n\\n\" +\n          `Expected spans to be generated: ${printExpected(expectedSpanNames)}`,\n  };\n}\n\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\ninterface AzureMatchers<R> extends Record<string, any> {\n  toSupportTracing<\n    Options extends { tracingOptions?: OperationTracingOptions },\n    Callback extends (options: Options) => Promise<unknown>,\n  >(\n    expectedSpanNames: string[],\n    options?: { tracingOptions?: OperationTracingOptions },\n    thisArg?: ThisParameterType<Callback>,\n  ): Promise<R>;\n}\n\ndeclare module \"vitest\" {\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any, @typescript-eslint/no-empty-object-type\n  interface Assertion<T = any> extends AzureMatchers<T> {}\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any, @typescript-eslint/no-empty-object-type\n  interface AsymmetricMatchersContaining<T = any> extends AzureMatchers<T> {}\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any, @typescript-eslint/no-empty-object-type\n  interface ExpectStatic<T = any> extends AzureMatchers<T> {}\n}\n"]}