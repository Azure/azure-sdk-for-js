{"version":3,"file":"mockTracingSpan.js","sourceRoot":"","sources":["../../../src/tracing/mockTracingSpan.ts"],"names":[],"mappings":";AAAA,uCAAuC;AACvC,kCAAkC;;;AASlC,qDAA2C;AAE3C;;GAEG;AACH,MAAa,eAAe;IAkD1B;;;;;;OAMG;IACH,YACE,IAAY,EACZ,OAAe,EACf,MAAc,EACd,cAA+B,EAC/B,WAAgC,EAChC,OAAO,GAAG,IAAI;QAlChB;;WAEG;QACH,eAAU,GAA4B,EAAE,CAAC;QAEzC;;WAEG;QACH,cAAS,GAAG,KAAK,CAAC;QA4BhB,IAAI,CAAC,IAAI,GAAG,IAAI,CAAC;QACjB,IAAI,CAAC,QAAQ,GAAG,WAAW,aAAX,WAAW,uBAAX,WAAW,CAAE,QAAQ,CAAC;QACtC,IAAI,CAAC,cAAc,GAAG,cAAc,CAAC;QACrC,IAAI,CAAC,OAAO,GAAG,OAAO,CAAC;QACvB,IAAI,CAAC,MAAM,GAAG,MAAM,CAAC;QACrB,IAAI,CAAC,YAAY,GAAG,OAAO,CAAC;IAC9B,CAAC;IAED,SAAS,CAAC,MAAkB;QAC1B,IAAI,CAAC,UAAU,GAAG,MAAM,CAAC;IAC3B,CAAC;IACD,YAAY,CAAC,IAAY,EAAE,KAAc;QACvC,IAAI,CAAC,UAAU,CAAC,IAAI,CAAC,GAAG,KAAK,CAAC;IAChC,CAAC;IACD,GAAG;QACD,IAAI,CAAC,SAAS,GAAG,IAAI,CAAC;IACxB,CAAC;IACD,eAAe,CAAC,SAAyB;QACvC,IAAI,CAAC,SAAS,GAAG,SAAS,CAAC;IAC7B,CAAC;IAED,cAAc,CAAC,WAAoB;QACjC,IAAI,CAAC,YAAY,GAAG,WAAW,CAAC;IAClC,CAAC;IAED,WAAW;QACT,OAAO,IAAI,CAAC,YAAY,CAAC;IAC3B,CAAC;IAED,UAAU;;QACR,OAAO,MAAA,IAAI,CAAC,cAAc,0CAAE,QAAQ,CAAC,wBAAO,CAAoB,CAAC;IACnE,CAAC;CACF;AAjGD,0CAiGC","sourcesContent":["// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT License.\n\nimport {\n  TracingSpan,\n  SpanStatus,\n  TracingSpanOptions,\n  TracingSpanKind,\n  TracingContext,\n} from \"@azure/core-tracing\";\nimport { spanKey } from \"./mockContext.js\";\n\n/**\n * Represents an implementation of a mock tracing span {@link TracingSpan} used for tests\n */\nexport class MockTracingSpan implements TracingSpan {\n  /**\n   * Name of the current span\n   */\n  name: string;\n  /**\n   * Kind of the current span {@link TracingSpanKind}\n   */\n  spanKind?: TracingSpanKind;\n  /**\n   * Existing or parent tracing context\n   */\n  tracingContext?: TracingContext;\n\n  /**\n   * The generated ID of the span within a given trace\n   */\n  spanId: string;\n\n  /**\n   * The ID of the trace this span belongs to\n   */\n  traceId: string;\n\n  /**\n   * The value passed to {@link TracingSpan.setStatus}, if any.\n   */\n  spanStatus?: SpanStatus;\n\n  /**\n   * All attributes recorded on the span.\n   */\n  attributes: Record<string, unknown> = {};\n\n  /**\n   * Value indictating wheher {@link TracingSpan.end} was called.\n   */\n  endCalled = false;\n\n  /**\n   * The exception captured on the span, if any.\n   */\n  exception?: string | Error;\n\n  /**\n   * Value indicating whether the span is recording. Used to test any\n   * early return when the span is not recording.\n   */\n  private _isRecording: boolean;\n\n  /**\n   *\n   * @param name - Name of the current span\n   * @param spanContext - A unique, serializable identifier for a span\n   * @param tracingContext - Existing or parent tracing context\n   * @param spanOptions - Options to configure the newly created span {@link TracingSpanOptions}\n   */\n  constructor(\n    name: string,\n    traceId: string,\n    spanId: string,\n    tracingContext?: TracingContext,\n    spanOptions?: TracingSpanOptions,\n    enabled = true,\n  ) {\n    this.name = name;\n    this.spanKind = spanOptions?.spanKind;\n    this.tracingContext = tracingContext;\n    this.traceId = traceId;\n    this.spanId = spanId;\n    this._isRecording = enabled;\n  }\n\n  setStatus(status: SpanStatus): void {\n    this.spanStatus = status;\n  }\n  setAttribute(name: string, value: unknown): void {\n    this.attributes[name] = value;\n  }\n  end(): void {\n    this.endCalled = true;\n  }\n  recordException(exception: string | Error): void {\n    this.exception = exception;\n  }\n\n  setIsRecording(isRecording: boolean): void {\n    this._isRecording = isRecording;\n  }\n\n  isRecording(): boolean {\n    return this._isRecording;\n  }\n\n  parentSpan(): MockTracingSpan | undefined {\n    return this.tracingContext?.getValue(spanKey) as MockTracingSpan;\n  }\n}\n"]}