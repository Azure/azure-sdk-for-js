{"version":3,"file":"matrix.js","sourceRoot":"","sources":["../../src/matrix.ts"],"names":[],"mappings":"AAAA,uCAAuC;AACvC,kCAAkC;AAElC;;;;;;;;;;;;;;;;;;;;;;;;;;;GA2BG;AACH,MAAM,UAAU,MAAM,CACpB,MAAS,EACT,OAEkB;IAElB,6BAA6B;IAC7B,IAAI,MAAM,CAAC,MAAM,KAAK,CAAC,EAAE,CAAC;QACvB,OAA+B,EAAE,CAAC;IACrC,CAAC;SAAM,CAAC;QACN,KAAK,MAAM,CAAC,IAAI,MAAM,CAAC,CAAC,CAAC,EAAE,CAAC;YAC1B,8DAA8D;YAC9D,MAAM,CAAC,MAAM,CAAC,KAAK,CAAC,CAAC,CAAC,EAAE,CAAC,GAAG,IAAI,EAAE,EAAE,CAAE,OAAe,CAAC,CAAC,EAAE,GAAG,IAAI,CAAC,CAAC,CAAC;QACrE,CAAC;IACH,CAAC;AACH,CAAC","sourcesContent":["// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT License.\n\n/**\n * Takes a jagged 2D array and a function and runs the function with every\n * possible combination of elements of each of the arrays\n *\n * For strong type-checking, it is important that the `matrix` have a strong\n * type, such as a `const` literal.\n *\n * @param values - jagged 2D array specifying the arguments and their possible\n *                 values\n * @param handler - the function to run with the different argument combinations\n *\n * @example\n * ```typescript\n * matrix([\n *     [true, false],\n *     [1, 2, 3]\n *   ] as const,\n *   (useLabels: boolean, attempts: number) => {\n *     // This body will run six times with the following parameters:\n *     // - true, 1\n *     // - true, 2\n *     // - true, 3\n *     // - false, 1\n *     // - false, 2\n *     // - false, 3\n *   });\n * ```\n */\nexport function matrix<T extends ReadonlyArray<readonly unknown[]>>(\n  values: T,\n  handler: (\n    ...args: { [idx in keyof T]: T[idx] extends ReadonlyArray<infer U> ? U : never }\n  ) => Promise<void>,\n): void {\n  // Classic recursive approach\n  if (values.length === 0) {\n    (handler as () => Promise<void>)();\n  } else {\n    for (const v of values[0]) {\n      // eslint-disable-next-line @typescript-eslint/no-explicit-any\n      matrix(values.slice(1), (...args) => (handler as any)(v, ...args));\n    }\n  }\n}\n"]}