{"version":3,"file":"multiVersion.js","sourceRoot":"","sources":["../../src/multiVersion.ts"],"names":[],"mappings":"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","sourcesContent":["// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT License.\n\nimport { env, isLiveMode } from \"@azure-tools/test-recorder\";\nimport {\n  describe as vitestDescribe,\n  it as vitestIt,\n  SuiteFactory,\n  TestFunction,\n  TestOptions,\n} from \"vitest\";\n\n// eslint-disable-next-line @typescript-eslint/no-namespace\ndeclare namespace globalThis {\n  let describe: typeof vitestDescribe;\n  let it: typeof vitestIt;\n  let xit: typeof vitestIt.skip;\n  let xdescribe: typeof vitestDescribe.skip;\n}\n\nglobalThis.describe = vitestDescribe;\nglobalThis.it = vitestIt;\nglobalThis.xit = vitestIt.skip;\nglobalThis.xdescribe = vitestDescribe.skip;\n\nexport interface TestFunctionWrapper {\n  it: typeof vitestIt;\n  xit: typeof vitestIt.skip;\n  describe: typeof vitestDescribe;\n  xdescribe: typeof vitestDescribe.skip;\n}\n\n/**\n * Specifies service versions that a test/test suite supports. This can be a list of\n * version strings, or a range of versions denoted by minVer/maxVer.\n */\nexport type SupportedVersions =\n  | string[]\n  | {\n      minVer?: string;\n      maxVer?: string;\n    };\n\nfunction skipReason(currentVersion: string, supported: SupportedVersions): string {\n  if (supported instanceof Array) {\n    return `skipping for version ${currentVersion} as it is not in the list [${supported.join()}]`;\n  } else {\n    return `skipping for version ${currentVersion} as it is not in the range: [min ${\n      supported.minVer ?? \"<unspecified>\"\n    }, max ${supported.maxVer ?? \"<unspecified>\"}]`;\n  }\n}\n\n/**\n *\n * @param currentVersion current service version to run test with\n * @param supported service versions supported by a test suite or test case\n * @param allVersions all service versions supported by the SDK library being tested.\n *                    NOTE: The versions must be in order from oldest to latest.\n */\nexport function isVersionInSupportedRange(\n  currentVersion: string,\n  supported: SupportedVersions,\n  allVersions: ReadonlyArray<string>,\n): { isSupported: boolean; skipReason?: string } {\n  const lessThanOrEqual = function (a: string, b: string) {\n    const idxA = allVersions.indexOf(a);\n    const idxB = allVersions.indexOf(b);\n    if (idxA === -1) {\n      throw new Error(`version '${a}' is not in versions supported by the SDK`);\n    }\n    if (idxB === -1) {\n      throw new Error(`version '${b}' is not in versions supported by the SDK`);\n    }\n    return idxA <= idxB;\n  };\n  let run: boolean;\n  if (supported instanceof Array) {\n    // console.log(`Test ${currentVersion} for supported versions [${supported.join()}]?`);\n\n    run = supported.includes(currentVersion);\n\n    if (run) {\n      // console.log(`  Running test on ${currentVersion}`);\n      return { isSupported: true };\n    } else {\n      // console.log(`  Skipping test on ${currentVersion}`);\n      return {\n        isSupported: false,\n        skipReason: skipReason(currentVersion, supported),\n      };\n    }\n  } else {\n    // console.log(\n    //   `Test ${currentVersion} for supported version range: [min ${supported.minVer} max ${supported.maxVer}]?`\n    // );\n    if (supported.minVer && supported.maxVer) {\n      if (\n        lessThanOrEqual(supported.minVer, currentVersion) &&\n        lessThanOrEqual(currentVersion, supported.maxVer)\n      ) {\n        // console.log(`  Test ${currentVersion} because it is within range`);\n        return { isSupported: true };\n      } else {\n        // console.log(`  Skipping ${currentVersion} because it is out of range`);\n        return {\n          isSupported: false,\n          skipReason: skipReason(currentVersion, supported),\n        };\n      }\n    } else if (supported.minVer) {\n      if (lessThanOrEqual(supported.minVer, currentVersion)) {\n        // console.log(`  Test ${currentVersion} because it's above minVer`);\n        return { isSupported: true };\n      } else {\n        // console.log(`  Skip ${currentVersion} because it's below minVer`);\n        return {\n          isSupported: false,\n          skipReason: skipReason(currentVersion, supported),\n        };\n      }\n    } else if (supported.maxVer) {\n      if (lessThanOrEqual(currentVersion, supported.maxVer)) {\n        // console.log(`  Test ${currentVersion} because it's below maxVer`);\n        return { isSupported: true };\n      } else {\n        // console.log(`  Skip ${currentVersion} because it's above maxVer`);\n        return {\n          isSupported: false,\n          skipReason: skipReason(currentVersion, supported),\n        };\n      }\n    } else {\n      throw new Error(\n        \"Must use either minVer, or maxVer, or both to specify supported version range.\",\n      );\n    }\n  }\n}\n\n/**\n * Returns a Vitest wrapper that runs or skips a test/test suite for currentVersion, given a list\n * of versions or a range of versions supported by the test/test suite.\n * @param currentVersion version to check wether to run or skip\n * @param supported supported versions for a test/test suite\n * @param allVersions all service versions supported by the SDK library being tested.\n *                    NOTE: The versions must be in order from oldest to latest.\n */\nexport function supports(\n  currentVersion: string,\n  supported: SupportedVersions,\n  allVersions: ReadonlyArray<string>,\n): TestFunctionWrapper {\n  const run = isVersionInSupportedRange(currentVersion, supported, allVersions);\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  const either = function (match: any, skip: any) {\n    return run.isSupported\n      ? match\n      : isLiveMode()\n        ? // only append skip reason to titles in live TEST_MODE.\n          // Record and playback depends on titles for recording file names so keeping them\n          // in order to be compatible with existing recordings.\n          function (\n            // eslint-disable-next-line @typescript-eslint/no-unsafe-function-type\n            title: string | Function,\n            fn?: TestFunction | undefined,\n            options?: number | TestOptions,\n          ) {\n            return skip(`${title} (${run.skipReason})`, fn, options);\n          }\n        : skip;\n  };\n\n  const it = either(supports.global.it, supports.global.xit);\n  Object.defineProperty(it, \"onlyWithReason\", {\n    value: either(supports.global.it.only, supports.global.xit),\n    configurable: true,\n  });\n  Object.defineProperty(it, \"skipWithReason\", {\n    value: supports.global.it.skip,\n    configurable: true,\n  });\n\n  // add current service version to suite titles in Live TEST_MODE\n  // Record and playback depends on titles for recording file names so keeping them\n  // in order to be compatible with existing recordings.\n  const wrappedDescribe = isLiveMode()\n    ? function (\n        // eslint-disable-next-line @typescript-eslint/no-unsafe-function-type\n        title: string | Function,\n        fn?: SuiteFactory | undefined,\n        options?: number | TestOptions,\n      ) {\n        return supports.global.describe(\n          `${title} (service version ${currentVersion})`,\n          fn,\n          options,\n        );\n      }\n    : supports.global.describe;\n  const wrappedDescribeOnly = isLiveMode()\n    ? function (\n        // eslint-disable-next-line @typescript-eslint/no-unsafe-function-type\n        title: string | Function,\n        fn?: SuiteFactory | undefined,\n        options?: number | TestOptions,\n      ) {\n        return supports.global.describe.only(\n          `${title} (service version ${currentVersion})`,\n          fn,\n          options,\n        );\n      }\n    : supports.global.describe.only;\n\n  const describe = either(wrappedDescribe, supports.global.xdescribe);\n  Object.defineProperty(describe, \"onlyWithReason\", {\n    value: either(wrappedDescribeOnly, supports.global.xdescribe),\n    configurable: true,\n  });\n  Object.defineProperty(describe, \"skipWithReason\", {\n    value: supports.global.describe.skip,\n    configurable: true,\n  });\n\n  const chain: TestFunctionWrapper = {\n    it,\n    xit: supports.global.xit,\n    describe,\n    xdescribe: supports.global.xdescribe,\n  };\n\n  return chain;\n}\n\nsupports.global = globalThis;\n\n/**\n * Options to multi-service-version tests\n */\nexport interface MultiVersionTestOptions {\n  /**\n   * version to used for record/playback\n   */\n  versionForRecording?: string;\n}\n\nfunction isMultiVersionDisabled(): boolean {\n  return Boolean(env.DISABLE_MULTI_VERSION_TESTING);\n}\n\n/**\n * Determines the set of service versions used to run tests based on TEST_MODE\n * - For live tests loop through all the versions and run tests for each version.\n * - For record and playback, use the defaultVersion in options if specified, otherwise use the latest version.\n * @param versions list of service versions to run the tests\n * @param options Optional settings such as version to use for record/playback, and\n *                custom string comparison function to determines order of version strings.\n * @param handler the function to run with each service version\n */\nexport function versionsToTest(\n  versions: ReadonlyArray<string>,\n  options: MultiVersionTestOptions = {},\n  handler: (\n    serviceVersion: string,\n    onVersions: (supported: SupportedVersions) => TestFunctionWrapper,\n  ) => void,\n): void {\n  if (versions.length <= 0) {\n    throw new Error(\"invalid list of service versions to run the tests.\");\n  }\n  let toTest: ReadonlyArray<string>;\n  // all versions are used in live TEST_MODE\n  if (isLiveMode() && !isMultiVersionDisabled()) {\n    toTest = versions;\n  } else {\n    toTest = options.versionForRecording\n      ? [options.versionForRecording]\n      : versions.slice(versions.length - 1);\n  }\n\n  toTest.forEach((serviceVersion) => {\n    const onVersions = function (supported: SupportedVersions) {\n      return supports(serviceVersion, supported, versions);\n    };\n    handler(serviceVersion, onVersions);\n  });\n}\n"]}