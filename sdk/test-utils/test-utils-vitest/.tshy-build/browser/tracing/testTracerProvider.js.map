{"version":3,"file":"testTracerProvider.js","sourceRoot":"","sources":["../../../src/tracing/testTracerProvider.ts"],"names":[],"mappings":"AAAA,uCAAuC;AACvC,kCAAkC;AAElC,OAAO,EAAiC,KAAK,EAAE,MAAM,oBAAoB,CAAC;AAC1E,OAAO,EAAE,UAAU,EAAE,MAAM,iBAAiB,CAAC;AAE7C,sFAAsF;AACtF,MAAM,WAAW,GAAG,oBAAoB,CAAC;AAEzC;;;;;GAKG;AACH,MAAM,OAAO,kBAAkB;IAA/B;QACU,gBAAW,GAA4B,IAAI,GAAG,EAAE,CAAC;IAoC3D,CAAC;IAnCC;;;;;;;;;;OAUG;IACH,SAAS,CAAC,IAAY,EAAE,QAAiB,EAAE,QAAwB;QACjE,IAAI,CAAC,IAAI,CAAC,WAAW,CAAC,GAAG,CAAC,IAAI,CAAC,EAAE,CAAC;YAChC,IAAI,CAAC,WAAW,CAAC,GAAG,CAAC,IAAI,EAAE,IAAI,UAAU,CAAC,IAAI,EAAE,IAAI,CAAC,CAAC,CAAC;QACzD,CAAC;QACD,OAAO,IAAI,CAAC,WAAW,CAAC,GAAG,CAAC,IAAI,CAAE,CAAC;IACrC,CAAC;IAED;;OAEG;IACH,QAAQ;QACN,KAAK,CAAC,uBAAuB,CAAC,IAAI,CAAC,CAAC;IACtC,CAAC;IAED;;OAEG;IACH,OAAO;QACL,KAAK,CAAC,OAAO,EAAE,CAAC;IAClB,CAAC;IAED,SAAS,CAAC,MAAkB;QAC1B,IAAI,CAAC,WAAW,CAAC,GAAG,CAAC,WAAW,EAAE,MAAM,CAAC,CAAC;IAC5C,CAAC;CACF;AAED,IAAI,cAAkC,CAAC;AAEvC,MAAM,UAAU,SAAS,CAAC,MAAmB;IAC3C,WAAW,EAAE,CAAC;IACd,cAAc,GAAG,IAAI,kBAAkB,EAAE,CAAC;IAC1C,cAAc,CAAC,QAAQ,EAAE,CAAC;IAC1B,IAAI,MAAM,EAAE,CAAC;QACX,cAAc,CAAC,SAAS,CAAC,MAAM,CAAC,CAAC;IACnC,CAAC;IACD,OAAO,cAAc,CAAC,SAAS,CAAC,WAAW,CAAe,CAAC;AAC7D,CAAC;AAED,MAAM,UAAU,WAAW;IACzB,cAAc,aAAd,cAAc,uBAAd,cAAc,CAAE,OAAO,EAAE,CAAC;AAC5B,CAAC","sourcesContent":["// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT License.\n\nimport { TracerOptions, TracerProvider, trace } from \"@opentelemetry/api\";\nimport { TestTracer } from \"./testTracer.js\";\n\n// This must be the same as the default tracer name supplied from @azure/core-tracing.\nconst TRACER_NAME = \"azure/core-tracing\";\n\n/**\n * Implementation for TracerProvider from opentelemetry/api package.\n * It is a registry for creating named tracers.\n * This is exported only so that we can support packages using \\@azure/core-tracing \\<= 1.0.0-preview.13\n * while transitioning to \\@azure/core-tracing \\>= 1.0.0-preview.14\n */\nexport class TestTracerProvider implements TracerProvider {\n  private tracerCache: Map<string, TestTracer> = new Map();\n  /**\n   * Returns a Tracer, creating one if one with the given name and version is\n   * not already created.\n   *\n   * This function may return different Tracer types (e.g.\n   * NoopTracerProvider vs. a functional tracer).\n   *\n   * @param name - The name of the tracer or instrumentation library.\n   * @param version - The version of the tracer or instrumentation library.\n   * @returns Tracer A Tracer with the given name and version\n   */\n  getTracer(name: string, _version?: string, _options?: TracerOptions): TestTracer {\n    if (!this.tracerCache.has(name)) {\n      this.tracerCache.set(name, new TestTracer(name, name));\n    }\n    return this.tracerCache.get(name)!;\n  }\n\n  /**\n   * Registers the current tracer provider\n   */\n  register(): void {\n    trace.setGlobalTracerProvider(this);\n  }\n\n  /**\n   * Removes global trace provider\n   */\n  disable(): void {\n    trace.disable();\n  }\n\n  setTracer(tracer: TestTracer): void {\n    this.tracerCache.set(TRACER_NAME, tracer);\n  }\n}\n\nlet tracerProvider: TestTracerProvider;\n\nexport function setTracer(tracer?: TestTracer): TestTracer {\n  resetTracer();\n  tracerProvider = new TestTracerProvider();\n  tracerProvider.register();\n  if (tracer) {\n    tracerProvider.setTracer(tracer);\n  }\n  return tracerProvider.getTracer(TRACER_NAME) as TestTracer;\n}\n\nexport function resetTracer(): void {\n  tracerProvider?.disable();\n}\n"]}