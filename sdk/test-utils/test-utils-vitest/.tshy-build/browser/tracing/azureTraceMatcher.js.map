{"version":3,"file":"azureTraceMatcher.js","sourceRoot":"","sources":["../../../src/tracing/azureTraceMatcher.ts"],"names":[],"mappings":"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","sourcesContent":["// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT License.\n\nimport { OperationTracingOptions, useInstrumenter } from \"@azure/core-tracing\";\nimport { getSpanGraph, sameArrayMembers } from \"./tracingUtils.js\";\nimport { MockInstrumenter } from \"./mockInstrumenter.js\";\nimport { MockTracingSpan } from \"./mockTracingSpan.js\";\n\nconst mockInstrumenter = new MockInstrumenter();\n\n/**\n * The result of the assertion test.\n */\nexport interface ExpectationResult {\n  /** Whether the condition passes. */\n  pass: boolean;\n  /** The message for the conditions. */\n  message?: string;\n  /** The expected value. */\n  expected?: unknown;\n  /** The actual value. */\n  actual?: unknown;\n}\n\n/**\n * The supports Tracing function does the verification of whether the core-tracing is supported correctly with the client method\n * This function verifies the root span, if all the correct spans are called as expected and if they are closed.\n * @param callback - Callback function of the client that should be invoked\n * @param expectedSpanNames - List of span names that are expected to be generated\n * @param options - Options for either Core HTTP operations or custom options for the callback\n * @param thisArg - optional this parameter for the callback\n */\nexport async function supportsTracing<\n  Options extends { tracingOptions?: OperationTracingOptions },\n  Callback extends (options: Options) => Promise<unknown>,\n>(\n  callback: Callback,\n  expectedSpanNames: string[],\n  options?: Options,\n  thisArg?: ThisParameterType<Callback>,\n): Promise<ExpectationResult> {\n  useInstrumenter(mockInstrumenter);\n  mockInstrumenter.reset();\n  try {\n    const startSpanOptions = {\n      packageName: \"test\",\n      ...options,\n    };\n    const { span: rootSpan, tracingContext } = mockInstrumenter.startSpan(\"root\", startSpanOptions);\n\n    const newOptions = {\n      ...options,\n      tracingOptions: {\n        tracingContext: tracingContext,\n      },\n    } as Options;\n    await callback.call(thisArg, newOptions);\n    rootSpan.end();\n    const spanGraph = getSpanGraph((rootSpan as MockTracingSpan).traceId, mockInstrumenter);\n    if (spanGraph.roots.length !== 1) {\n      return {\n        pass: false,\n        message: \"There should be just one root span\",\n        expected: 1,\n        actual: spanGraph.roots.length,\n      };\n    }\n\n    if (spanGraph.roots[0].name !== \"root\") {\n      return {\n        pass: false,\n        message: \"The root span should be named 'root'\",\n        expected: \"root\",\n        actual: spanGraph.roots[0].name,\n      };\n    }\n    if (rootSpan !== mockInstrumenter.startedSpans[0]) {\n      return {\n        pass: false,\n        message: \"The root span should match what was passed in.\",\n        expected: rootSpan,\n        actual: mockInstrumenter.startedSpans[0],\n      };\n    }\n\n    const directChildren = spanGraph.roots[0].children.map((child) => child.name);\n    if (!sameArrayMembers(Array.from(new Set(directChildren)), expectedSpanNames)) {\n      return {\n        pass: false,\n        message: \"The direct children of the root span should match the expected span names.\",\n        expected: expectedSpanNames,\n        actual: directChildren,\n      };\n    }\n    rootSpan.end();\n    const openSpans = mockInstrumenter.startedSpans.filter((s) => !s.endCalled);\n    if (openSpans.length !== 0) {\n      return {\n        pass: false,\n        message: `All spans should have been closed, but found ${openSpans.map((s) => s.name)} open spans.`,\n        expected: 0,\n        actual: openSpans.length,\n      };\n    }\n    return { pass: true };\n  } finally {\n    // By resetting the instrumenter to undefined, we force the next call to instantiate the\n    // no-op instrumenter and prevent test pollution.\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    useInstrumenter(<any>undefined);\n  }\n}\n"]}