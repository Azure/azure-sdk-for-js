{"version":3,"file":"mockContext.js","sourceRoot":"","sources":["../../../src/tracing/mockContext.ts"],"names":[],"mappings":"AAAA,uCAAuC;AACvC,kCAAkC;AAIlC;;;GAGG;AACH,MAAM,OAAO,WAAW;IAMtB;;;OAGG;IACH,YAAY,aAA8B;QACxC,IAAI,aAAa,IAAI,CAAC,CAAC,aAAa,YAAY,WAAW,CAAC,EAAE,CAAC;YAC7D,MAAM,IAAI,KAAK,CAAC,wDAAwD,CAAC,CAAC;QAC5E,CAAC;QACD,IAAI,CAAC,UAAU,GAAG,IAAI,GAAG,CAAC,CAAA,aAAa,aAAb,aAAa,uBAAb,aAAa,CAAE,UAAU,KAAI,IAAI,GAAG,EAAE,CAAC,CAAC;IACpE,CAAC;IAED,QAAQ,CAAC,GAAW,EAAE,KAAc;QAClC,MAAM,UAAU,GAAG,IAAI,WAAW,CAAC,IAAI,CAAC,CAAC;QACzC,UAAU,CAAC,UAAU,CAAC,GAAG,CAAC,GAAG,EAAE,KAAK,CAAC,CAAC;QACtC,OAAO,UAAU,CAAC;IACpB,CAAC;IAED,QAAQ,CAAC,GAAW;QAClB,OAAO,IAAI,CAAC,UAAU,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC;IAClC,CAAC;IAED,WAAW,CAAC,GAAW;QACrB,MAAM,UAAU,GAAG,IAAI,WAAW,CAAC,IAAI,CAAC,CAAC;QACzC,UAAU,CAAC,UAAU,CAAC,MAAM,CAAC,GAAG,CAAC,CAAC;QAClC,OAAO,UAAU,CAAC;IACpB,CAAC;CACF;AAED,MAAM,CAAC,MAAM,OAAO,GAAG,MAAM,CAAC,GAAG,CAAC,MAAM,CAAC,CAAC;AAE1C,MAAM,UAAU,wBAAwB,CAAC,aAA2B;IAClE,OAAO,IAAI,WAAW,CAAC,aAAa,CAAC,CAAC;AACxC,CAAC","sourcesContent":["// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT License.\n\nimport { TracingContext } from \"@azure/core-tracing\";\n\n/**\n * This is the implementation of the {@link TracingContext} interface\n * Represents a tracing context\n */\nexport class MockContext implements TracingContext {\n  /**\n   * Represents a context map for the symbols to record\n   */\n  private contextMap: Map<symbol, unknown>;\n\n  /**\n   * Initializes the context map\n   * @param parentContext - If present the context map is initialized to the contextMap of the parentContext\n   */\n  constructor(parentContext?: TracingContext) {\n    if (parentContext && !(parentContext instanceof MockContext)) {\n      throw new Error(\"received parent context, but it is not mock context...\");\n    }\n    this.contextMap = new Map(parentContext?.contextMap || new Map());\n  }\n\n  setValue(key: symbol, value: unknown): TracingContext {\n    const newContext = new MockContext(this);\n    newContext.contextMap.set(key, value);\n    return newContext;\n  }\n\n  getValue(key: symbol): unknown {\n    return this.contextMap.get(key);\n  }\n\n  deleteValue(key: symbol): TracingContext {\n    const newContext = new MockContext(this);\n    newContext.contextMap.delete(key);\n    return newContext;\n  }\n}\n\nexport const spanKey = Symbol.for(\"span\");\n\nexport function createMockTracingContext(parentContext?: MockContext): TracingContext {\n  return new MockContext(parentContext);\n}\n"]}