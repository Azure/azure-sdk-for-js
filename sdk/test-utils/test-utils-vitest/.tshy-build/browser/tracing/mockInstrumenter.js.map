{"version":3,"file":"mockInstrumenter.js","sourceRoot":"","sources":["../../../src/tracing/mockInstrumenter.ts"],"names":[],"mappings":"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","sourcesContent":["// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT License.\n\nimport {\n  Instrumenter,\n  InstrumenterSpanOptions,\n  TracingContext,\n  TracingSpan,\n} from \"@azure/core-tracing\";\nimport { MockContext, spanKey } from \"./mockContext.js\";\n\nimport { MockTracingSpan } from \"./mockTracingSpan.js\";\n\n/**\n * Represents an implementation of {@link Instrumenter} interface that keeps track of the tracing contexts and spans\n */\nexport class MockInstrumenter implements Instrumenter {\n  private isEnabled: boolean;\n\n  constructor() {\n    this.isEnabled = true;\n  }\n\n  /**\n   * Stack of immutable contexts, each of which is a bag of tracing values for the current operation\n   */\n  public contextStack: TracingContext[] = [new MockContext()];\n  /**\n   * List of started spans\n   */\n  public startedSpans: MockTracingSpan[] = [];\n\n  private traceIdCounter = 0;\n  private getNextTraceId(): string {\n    this.traceIdCounter++;\n    return this.traceIdCounter.toString().padStart(32, \"0\");\n  }\n\n  private spanIdCounter = 0;\n  private getNextSpanId(): string {\n    this.spanIdCounter++;\n    return this.spanIdCounter.toString().padStart(16, \"0\");\n  }\n\n  startSpan(\n    name: string,\n    spanOptions?: InstrumenterSpanOptions,\n  ): { span: TracingSpan; tracingContext: TracingContext } {\n    const tracingContext = spanOptions?.tracingContext || this.currentContext();\n    const parentSpan = tracingContext.getValue(spanKey) as MockTracingSpan | undefined;\n    let traceId;\n    if (parentSpan) {\n      traceId = parentSpan.traceId;\n    } else {\n      traceId = this.getNextTraceId();\n    }\n\n    const spanContext = {\n      spanId: this.getNextSpanId(),\n      traceId: traceId,\n      traceFlags: 0,\n    };\n    const span = new MockTracingSpan(\n      name,\n      spanContext.traceId,\n      spanContext.spanId,\n      tracingContext,\n      spanOptions,\n      this.isEnabled,\n    );\n    let context: TracingContext = new MockContext(tracingContext);\n    context = context.setValue(spanKey, span);\n\n    this.startedSpans.push(span);\n    return { span, tracingContext: context };\n  }\n\n  withContext<\n    CallbackArgs extends unknown[],\n    Callback extends (...args: CallbackArgs) => ReturnType<Callback>,\n  >(\n    context: TracingContext,\n    callback: Callback,\n    ...callbackArgs: CallbackArgs\n  ): ReturnType<Callback> {\n    this.contextStack.push(context);\n    return Promise.resolve(callback(...callbackArgs)).finally(() => {\n      this.contextStack.pop();\n    }) as ReturnType<Callback>;\n  }\n\n  parseTraceparentHeader(_traceparentHeader: string): TracingContext | undefined {\n    return;\n  }\n\n  createRequestHeaders(_tracingContext: TracingContext): Record<string, string> {\n    return {};\n  }\n\n  /**\n   * Gets the currently active context.\n   *\n   * @returns The current context.\n   */\n  currentContext(): TracingContext {\n    return this.contextStack[this.contextStack.length - 1];\n  }\n\n  /**\n   * Resets the state of the instrumenter to a clean slate.\n   */\n  reset(): void {\n    this.contextStack = [new MockContext()];\n    this.startedSpans = [];\n    this.traceIdCounter = 0;\n    this.spanIdCounter = 0;\n  }\n\n  disable(): void {\n    this.isEnabled = false;\n  }\n\n  enable(): void {\n    this.isEnabled = true;\n  }\n}\n"]}