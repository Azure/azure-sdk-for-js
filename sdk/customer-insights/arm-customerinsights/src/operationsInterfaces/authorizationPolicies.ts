/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */

import { PagedAsyncIterableIterator } from "@azure/core-paging";
import {
  AuthorizationPolicyResourceFormat,
  AuthorizationPoliciesListByHubOptionalParams,
  AuthorizationPoliciesCreateOrUpdateOptionalParams,
  AuthorizationPoliciesCreateOrUpdateResponse,
  AuthorizationPoliciesGetOptionalParams,
  AuthorizationPoliciesGetResponse,
  AuthorizationPoliciesRegeneratePrimaryKeyOptionalParams,
  AuthorizationPoliciesRegeneratePrimaryKeyResponse,
  AuthorizationPoliciesRegenerateSecondaryKeyOptionalParams,
  AuthorizationPoliciesRegenerateSecondaryKeyResponse
} from "../models";

/// <reference lib="esnext.asynciterable" />
/** Interface representing a AuthorizationPolicies. */
export interface AuthorizationPolicies {
  /**
   * Gets all the authorization policies in a specified hub.
   * @param resourceGroupName The name of the resource group.
   * @param hubName The name of the hub.
   * @param options The options parameters.
   */
  listByHub(
    resourceGroupName: string,
    hubName: string,
    options?: AuthorizationPoliciesListByHubOptionalParams
  ): PagedAsyncIterableIterator<AuthorizationPolicyResourceFormat>;
  /**
   * Creates an authorization policy or updates an existing authorization policy.
   * @param resourceGroupName The name of the resource group.
   * @param hubName The name of the hub.
   * @param authorizationPolicyName The name of the policy.
   * @param parameters Parameters supplied to the CreateOrUpdate authorization policy operation.
   * @param options The options parameters.
   */
  createOrUpdate(
    resourceGroupName: string,
    hubName: string,
    authorizationPolicyName: string,
    parameters: AuthorizationPolicyResourceFormat,
    options?: AuthorizationPoliciesCreateOrUpdateOptionalParams
  ): Promise<AuthorizationPoliciesCreateOrUpdateResponse>;
  /**
   * Gets an authorization policy in the hub.
   * @param resourceGroupName The name of the resource group.
   * @param hubName The name of the hub.
   * @param authorizationPolicyName The name of the policy.
   * @param options The options parameters.
   */
  get(
    resourceGroupName: string,
    hubName: string,
    authorizationPolicyName: string,
    options?: AuthorizationPoliciesGetOptionalParams
  ): Promise<AuthorizationPoliciesGetResponse>;
  /**
   * Regenerates the primary policy key of the specified authorization policy.
   * @param resourceGroupName The name of the resource group.
   * @param hubName The name of the hub.
   * @param authorizationPolicyName The name of the policy.
   * @param options The options parameters.
   */
  regeneratePrimaryKey(
    resourceGroupName: string,
    hubName: string,
    authorizationPolicyName: string,
    options?: AuthorizationPoliciesRegeneratePrimaryKeyOptionalParams
  ): Promise<AuthorizationPoliciesRegeneratePrimaryKeyResponse>;
  /**
   * Regenerates the secondary policy key of the specified authorization policy.
   * @param resourceGroupName The name of the resource group.
   * @param hubName The name of the hub.
   * @param authorizationPolicyName The name of the policy.
   * @param options The options parameters.
   */
  regenerateSecondaryKey(
    resourceGroupName: string,
    hubName: string,
    authorizationPolicyName: string,
    options?: AuthorizationPoliciesRegenerateSecondaryKeyOptionalParams
  ): Promise<AuthorizationPoliciesRegenerateSecondaryKeyResponse>;
}
