/*
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for license information.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */

import { BaseResource, CloudError, AzureServiceClientOptions } from "@azure/ms-rest-azure-js";
import * as msRest from "@azure/ms-rest-js";

export { BaseResource, CloudError };

/**
 * Hub billing info.
 */
export interface HubBillingInfoFormat {
  /**
   * The sku name.
   */
  skuName?: string;
  /**
   * The minimum number of units will be billed. One unit is 10,000 Profiles and 100,000
   * Interactions.
   */
  minUnits?: number;
  /**
   * The maximum number of units can be used.  One unit is 10,000 Profiles and 100,000
   * Interactions.
   */
  maxUnits?: number;
}

/**
 * Common properties of Azure resource.
 */
export interface Resource extends BaseResource {
  /**
   * Resource ID.
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly id?: string;
  /**
   * Resource name.
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly name?: string;
  /**
   * Resource type.
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly type?: string;
  /**
   * Resource location.
   */
  location?: string;
  /**
   * Resource tags.
   */
  tags?: { [propertyName: string]: string };
}

/**
 * Hub resource.
 */
export interface Hub extends Resource {
  /**
   * API endpoint URL of the hub.
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly apiEndpoint?: string;
  /**
   * Web endpoint URL of the hub.
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly webEndpoint?: string;
  /**
   * Provisioning state of the hub.
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly provisioningState?: string;
  /**
   * The bit flags for enabled hub features. Bit 0 is set to 1 indicates graph is enabled, or
   * disabled if set to 0. Bit 1 is set to 1 indicates the hub is disabled, or enabled if set to 0.
   */
  tenantFeatures?: number;
  /**
   * Billing settings of the hub.
   */
  hubBillingInfo?: HubBillingInfoFormat;
}

/**
 * The Metadata definition base.
 */
export interface MetadataDefinitionBase {
  /**
   * The attributes for the Type.
   */
  attributes?: { [propertyName: string]: string[] };
  /**
   * Localized descriptions for the property.
   */
  description?: { [propertyName: string]: string };
  /**
   * Localized display names for the property.
   */
  displayName?: { [propertyName: string]: string };
  /**
   * Any custom localized attributes for the Type.
   */
  localizedAttributes?: { [propertyName: string]: { [propertyName: string]: string } };
  /**
   * Small Image associated with the Property or EntityType.
   */
  smallImage?: string;
  /**
   * Medium Image associated with the Property or EntityType.
   */
  mediumImage?: string;
  /**
   * Large Image associated with the Property or EntityType.
   */
  largeImage?: string;
}

/**
 * Valid enum values in case of an enum property.
 */
export interface ProfileEnumValidValuesFormat {
  /**
   * The integer value of the enum member.
   */
  value?: number;
  /**
   * Localized names of the enum member.
   */
  localizedValueNames?: { [propertyName: string]: string };
}

/**
 * The data source precedence is a way to know the precedence of each data source.
 */
export interface DataSourcePrecedence {
  /**
   * The data source name
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly name?: string;
  /**
   * The data source type. Possible values include: 'Connector', 'LinkInteraction', 'SystemDefault'
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly dataSourceType?: DataSourceType;
  /**
   * The data source status. Possible values include: 'None', 'Active', 'Deleted'
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly status?: Status;
  /**
   * The data source ID.
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly id?: number;
  /**
   * The data source reference id.
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly dataSourceReferenceId?: string;
  /**
   * the precedence value.
   */
  precedence?: number;
}

/**
 * Property definition.
 */
export interface PropertyDefinition {
  /**
   * Array value separator for properties with isArray set.
   */
  arrayValueSeparator?: string;
  /**
   * Describes valid values for an enum property.
   */
  enumValidValues?: ProfileEnumValidValuesFormat[];
  /**
   * Name of the property.
   */
  fieldName: string;
  /**
   * Type of the property.
   */
  fieldType: string;
  /**
   * Indicates if the property is actually an array of the fieldType above on the data api.
   */
  isArray?: boolean;
  /**
   * Indicates if the property is an enum.
   */
  isEnum?: boolean;
  /**
   * Indicates if the property is an flag enum.
   */
  isFlagEnum?: boolean;
  /**
   * Whether the property is an Image.
   */
  isImage?: boolean;
  /**
   * Whether the property is a localized string.
   */
  isLocalizedString?: boolean;
  /**
   * Whether the property is a name or a part of name.
   */
  isName?: boolean;
  /**
   * Whether property value is required on instances, IsRequired field only for Interaction.
   * Profile Instance will not check for required field.
   */
  isRequired?: boolean;
  /**
   * The ID associated with the property.
   */
  propertyId?: string;
  /**
   * URL encoded schema.org item prop link for the property.
   */
  schemaItemPropLink?: string;
  /**
   * Max length of string. Used only if type is string.
   */
  maxLength?: number;
  /**
   * Whether property is available in graph or not.
   */
  isAvailableInGraph?: boolean;
  /**
   * This is specific to interactions modeled as activities. Data sources are used to determine
   * where data is stored and also in precedence rules.
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly dataSourcePrecedenceRules?: DataSourcePrecedence[];
}

/**
 * Describes an entity.
 */
export interface EntityTypeDefinition extends MetadataDefinitionBase {
  /**
   * The api entity set name. This becomes the odata entity set name for the entity Type being
   * referred in this object.
   */
  apiEntitySetName?: string;
  /**
   * Type of entity. Possible values include: 'None', 'Profile', 'Interaction', 'Relationship'
   */
  entityType?: EntityTypes;
  /**
   * The properties of the Profile.
   */
  fields?: PropertyDefinition[];
  /**
   * The instance count.
   */
  instancesCount?: number;
  /**
   * The last changed time for the type definition.
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly lastChangedUtc?: Date;
  /**
   * Provisioning state. Possible values include: 'Provisioning', 'Succeeded', 'Expiring',
   * 'Deleting', 'HumanIntervention', 'Failed'
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly provisioningState?: ProvisioningStates;
  /**
   * The schema org link. This helps ACI identify and suggest semantic models.
   */
  schemaItemTypeLink?: string;
  /**
   * The hub name.
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly tenantId?: string;
  /**
   * The timestamp property name. Represents the time when the interaction or profile update
   * happened.
   */
  timestampFieldName?: string;
  /**
   * The name of the entity.
   */
  typeName?: string;
}

/**
 * The authorization policy.
 */
export interface AuthorizationPolicy {
  /**
   * Name of the policy.
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly policyName?: string;
  /**
   * The permissions associated with the policy.
   */
  permissions: PermissionTypes[];
  /**
   * Primary key associated with the policy.
   */
  primaryKey?: string;
  /**
   * Secondary key associated with the policy.
   */
  secondaryKey?: string;
}

/**
 * Salesforce discover setting.
 */
export interface SalesforceDiscoverSetting {
  /**
   * The salesforce connection string secret URL.
   */
  salesforceConnectionStringSecretUrl: string;
}

/**
 * Salesforce table.
 */
export interface SalesforceTable {
  /**
   * Indicating whether this instance is profile.
   */
  isProfile?: string;
  /**
   * The table category.
   */
  tableCategory: string;
  /**
   * The name of the table.
   */
  tableName: string;
  /**
   * The table remarks.
   */
  tableRemarks?: string;
  /**
   * The table schema.
   */
  tableSchema: string;
}

/**
 * The Salesforce connector properties.
 */
export interface SalesforceConnectorProperties {
  /**
   * The user settings.
   */
  usersetting: SalesforceDiscoverSetting;
  /**
   * The Salesforce tables.
   */
  salesforcetables: SalesforceTable[];
}

/**
 * The Azure Blob connector properties.
 */
export interface AzureBlobConnectorProperties {
  /**
   * The connection KeyVault URL.
   */
  connectionKeyVaultUrl: string;
}

/**
 * The CRM connector entities.
 */
export interface CrmConnectorEntities {
  /**
   * The logical name.
   */
  logicalName: string;
  /**
   * The display name.
   */
  displayName?: string;
  /**
   * Indicating whether this is profile.
   */
  isProfile?: boolean;
}

/**
 * The CRM connector properties.
 */
export interface CrmConnectorProperties {
  /**
   * The connection string.
   */
  connectionString?: string;
  /**
   * The organization ID.
   */
  organizationId: string;
  /**
   * The organization URL.
   */
  organizationUrl: string;
  /**
   * The entities like account, contact, opportunity.
   */
  entities: CrmConnectorEntities[];
  /**
   * The access token.
   */
  accessToken?: string;
}

/**
 * The error management.
 */
export interface ConnectorMappingErrorManagement {
  /**
   * The type of error management to use for the mapping. Possible values include:
   * 'RejectAndContinue', 'StopImport', 'RejectUntilLimit'
   */
  errorManagementType: ErrorManagementTypes;
  /**
   * The error limit allowed while importing data.
   */
  errorLimit?: number;
}

/**
 * Connector mapping property format.
 */
export interface ConnectorMappingFormat {
  /**
   * The character that signifies a break between columns.
   */
  columnDelimiter?: string;
  /**
   * The oData language.
   */
  acceptLanguage?: string;
  /**
   * Quote character, used to indicate enquoted fields.
   */
  quoteCharacter?: string;
  /**
   * Escape character for quotes, can be the same as the quoteCharacter.
   */
  quoteEscapeCharacter?: string;
  /**
   * Character separating array elements.
   */
  arraySeparator?: string;
}

/**
 * Connector mapping property availability.
 */
export interface ConnectorMappingAvailability {
  /**
   * The frequency to update. Possible values include: 'Minute', 'Hour', 'Day', 'Week', 'Month'
   */
  frequency?: FrequencyTypes;
  /**
   * The interval of the given frequency to use.
   */
  interval: number;
}

/**
 * Connector mapping property structure.
 */
export interface ConnectorMappingStructure {
  /**
   * The property name of the mapping entity.
   */
  propertyName: string;
  /**
   * The column name of the import file.
   */
  columnName: string;
  /**
   * Custom format specifier for input parsing.
   */
  customFormatSpecifier?: string;
  /**
   * Indicates if the column is encrypted.
   */
  isEncrypted?: boolean;
}

/**
 * The complete operation.
 */
export interface ConnectorMappingCompleteOperation {
  /**
   * The type of completion operation. Possible values include: 'DoNothing', 'DeleteFile',
   * 'MoveFile'
   */
  completionOperationType?: CompletionOperationTypes;
  /**
   * The destination folder where files will be moved to once the import is done.
   */
  destinationFolder?: string;
}

/**
 * The connector mapping properties.
 */
export interface ConnectorMappingProperties {
  /**
   * The folder path for the mapping.
   */
  folderPath?: string;
  /**
   * The file filter for the mapping.
   */
  fileFilter?: string;
  /**
   * If the file contains a header or not.
   */
  hasHeader?: boolean;
  /**
   * The error management setting for the mapping.
   */
  errorManagement: ConnectorMappingErrorManagement;
  /**
   * The format of mapping property.
   */
  format: ConnectorMappingFormat;
  /**
   * The availability of mapping property.
   */
  availability: ConnectorMappingAvailability;
  /**
   * Ingestion mapping information at property level.
   */
  structure: ConnectorMappingStructure[];
  /**
   * The operation after import is done.
   */
  completeOperation: ConnectorMappingCompleteOperation;
}

/**
 * Defines the KPI Threshold limits.
 */
export interface KpiThresholds {
  /**
   * The lower threshold limit.
   */
  lowerLimit: number;
  /**
   * The upper threshold limit.
   */
  upperLimit: number;
  /**
   * Whether or not the KPI is an increasing KPI.
   */
  increasingKpi: boolean;
}

/**
 * The KPI GroupBy field metadata.
 */
export interface KpiGroupByMetadata {
  /**
   * The display name.
   */
  displayName?: { [propertyName: string]: string };
  /**
   * The name of the field.
   */
  fieldName?: string;
  /**
   * The type of the field.
   */
  fieldType?: string;
}

/**
 * The KPI participant profile metadata.
 */
export interface KpiParticipantProfilesMetadata {
  /**
   * Name of the type.
   */
  typeName: string;
}

/**
 * The KPI alias.
 */
export interface KpiAlias {
  /**
   * KPI alias name.
   */
  aliasName: string;
  /**
   * The expression.
   */
  expression: string;
}

/**
 * The KPI extract.
 */
export interface KpiExtract {
  /**
   * KPI extract name.
   */
  extractName: string;
  /**
   * The expression.
   */
  expression: string;
}

/**
 * Defines the KPI Threshold limits.
 */
export interface KpiDefinition {
  /**
   * The mapping entity type. Possible values include: 'None', 'Profile', 'Interaction',
   * 'Relationship'
   */
  entityType: EntityTypes;
  /**
   * The mapping entity name.
   */
  entityTypeName: string;
  /**
   * The hub name.
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly tenantId?: string;
  /**
   * The KPI name.
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly kpiName?: string;
  /**
   * Localized display name for the KPI.
   */
  displayName?: { [propertyName: string]: string };
  /**
   * Localized description for the KPI.
   */
  description?: { [propertyName: string]: string };
  /**
   * The calculation window. Possible values include: 'Lifetime', 'Hour', 'Day', 'Week', 'Month'
   */
  calculationWindow: CalculationWindowTypes;
  /**
   * Name of calculation window field.
   */
  calculationWindowFieldName?: string;
  /**
   * The computation function for the KPI. Possible values include: 'Sum', 'Avg', 'Min', 'Max',
   * 'Last', 'Count', 'None', 'CountDistinct'
   */
  functionProperty: KpiFunctions;
  /**
   * The computation expression for the KPI.
   */
  expression: string;
  /**
   * The unit of measurement for the KPI.
   */
  unit?: string;
  /**
   * The filter expression for the KPI.
   */
  filter?: string;
  /**
   * the group by properties for the KPI.
   */
  groupBy?: string[];
  /**
   * The KPI GroupByMetadata.
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly groupByMetadata?: KpiGroupByMetadata[];
  /**
   * The participant profiles.
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly participantProfilesMetadata?: KpiParticipantProfilesMetadata[];
  /**
   * Provisioning state. Possible values include: 'Provisioning', 'Succeeded', 'Expiring',
   * 'Deleting', 'HumanIntervention', 'Failed'
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly provisioningState?: ProvisioningStates;
  /**
   * The KPI thresholds.
   */
  thresHolds?: KpiThresholds;
  /**
   * The aliases.
   */
  aliases?: KpiAlias[];
  /**
   * The KPI extracts.
   */
  extracts?: KpiExtract[];
}

/**
 * Common properties of proxy resource.
 */
export interface ProxyResource extends BaseResource {
  /**
   * Resource ID.
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly id?: string;
  /**
   * Resource name.
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly name?: string;
  /**
   * Resource type.
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly type?: string;
}

/**
 * Metadata for a Link's property mapping.
 */
export interface TypePropertiesMapping {
  /**
   * Property name on the source Entity Type.
   */
  sourcePropertyName: string;
  /**
   * Property name on the target Entity Type.
   */
  targetPropertyName: string;
  /**
   * Link type. Possible values include: 'UpdateAlways', 'CopyIfNull'
   */
  linkType?: LinkTypes;
}

/**
 * The participant property reference.
 */
export interface ParticipantPropertyReference {
  /**
   * The source property that maps to the target property.
   */
  sourcePropertyName: string;
  /**
   * The target property that maps to the source property.
   */
  targetPropertyName: string;
}

/**
 * Map a field of profile to its corresponding StrongId in Related Profile.
 */
export interface RelationshipTypeFieldMapping {
  /**
   * Specifies the fieldName in profile.
   */
  profileFieldName: string;
  /**
   * Specifies the KeyProperty (from StrongId) of the related profile.
   */
  relatedProfileKeyProperty: string;
}

/**
 * Maps fields in Profile to their corresponding StrongIds in Related Profile.
 */
export interface RelationshipTypeMapping {
  /**
   * Maps a profile property with the StrongId of related profile. This is an array to support
   * StrongIds that are composite key as well.
   */
  fieldMappings: RelationshipTypeFieldMapping[];
}

/**
 * The fields mapping for Relationships.
 */
export interface RelationshipLinkFieldMapping {
  /**
   * The field name on the Interaction Type.
   */
  interactionFieldName: string;
  /**
   * Link type. Possible values include: 'UpdateAlways', 'CopyIfNull'
   */
  linkType?: LinkTypes;
  /**
   * The field name on the Relationship metadata.
   */
  relationshipFieldName: string;
}

/**
 * The participant profile property reference.
 */
export interface ParticipantProfilePropertyReference {
  /**
   * The source interaction property that maps to the target profile property.
   */
  interactionPropertyName: string;
  /**
   * The target profile property that maps to the source interaction property.
   */
  profilePropertyName: string;
}

/**
 * Describes a profile type participating in an interaction.
 */
export interface Participant {
  /**
   * Profile type name.
   */
  profileTypeName: string;
  /**
   * The property references.
   */
  participantPropertyReferences: ParticipantPropertyReference[];
  /**
   * Participant name.
   */
  participantName: string;
  /**
   * Localized display name.
   */
  displayName?: { [propertyName: string]: string };
  /**
   * Localized descriptions.
   */
  description?: { [propertyName: string]: string };
  /**
   * The role that the participant is playing in the interaction.
   */
  role?: string;
}

/**
 * Property/Properties which represent a unique ID.
 */
export interface StrongId {
  /**
   * The properties which make up the unique ID.
   */
  keyPropertyNames: string[];
  /**
   * The Name identifying the strong ID.
   */
  strongIdName: string;
  /**
   * Localized display name.
   */
  displayName?: { [propertyName: string]: string };
  /**
   * Localized descriptions.
   */
  description?: { [propertyName: string]: string };
}

/**
 * The profile resource format.
 */
export interface ProfileResourceFormat extends ProxyResource {
  /**
   * The attributes for the Type.
   */
  attributes?: { [propertyName: string]: string[] };
  /**
   * Localized descriptions for the property.
   */
  description?: { [propertyName: string]: string };
  /**
   * Localized display names for the property.
   */
  displayName?: { [propertyName: string]: string };
  /**
   * Any custom localized attributes for the Type.
   */
  localizedAttributes?: { [propertyName: string]: { [propertyName: string]: string } };
  /**
   * Small Image associated with the Property or EntityType.
   */
  smallImage?: string;
  /**
   * Medium Image associated with the Property or EntityType.
   */
  mediumImage?: string;
  /**
   * Large Image associated with the Property or EntityType.
   */
  largeImage?: string;
  /**
   * The api entity set name. This becomes the odata entity set name for the entity Type being
   * referred in this object.
   */
  apiEntitySetName?: string;
  /**
   * Type of entity. Possible values include: 'None', 'Profile', 'Interaction', 'Relationship'
   */
  entityType?: EntityTypes;
  /**
   * The properties of the Profile.
   */
  fields?: PropertyDefinition[];
  /**
   * The instance count.
   */
  instancesCount?: number;
  /**
   * The last changed time for the type definition.
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly lastChangedUtc?: Date;
  /**
   * Provisioning state. Possible values include: 'Provisioning', 'Succeeded', 'Expiring',
   * 'Deleting', 'HumanIntervention', 'Failed'
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly provisioningState?: ProvisioningStates;
  /**
   * The schema org link. This helps ACI identify and suggest semantic models.
   */
  schemaItemTypeLink?: string;
  /**
   * The hub name.
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly tenantId?: string;
  /**
   * The timestamp property name. Represents the time when the interaction or profile update
   * happened.
   */
  timestampFieldName?: string;
  /**
   * The name of the entity.
   */
  typeName?: string;
  /**
   * The strong IDs.
   */
  strongIds?: StrongId[];
}

/**
 * The interaction resource format.
 */
export interface InteractionResourceFormat extends ProxyResource {
  /**
   * The attributes for the Type.
   */
  attributes?: { [propertyName: string]: string[] };
  /**
   * Localized descriptions for the property.
   */
  description?: { [propertyName: string]: string };
  /**
   * Localized display names for the property.
   */
  displayName?: { [propertyName: string]: string };
  /**
   * Any custom localized attributes for the Type.
   */
  localizedAttributes?: { [propertyName: string]: { [propertyName: string]: string } };
  /**
   * Small Image associated with the Property or EntityType.
   */
  smallImage?: string;
  /**
   * Medium Image associated with the Property or EntityType.
   */
  mediumImage?: string;
  /**
   * Large Image associated with the Property or EntityType.
   */
  largeImage?: string;
  /**
   * The api entity set name. This becomes the odata entity set name for the entity Type being
   * referred in this object.
   */
  apiEntitySetName?: string;
  /**
   * Type of entity. Possible values include: 'None', 'Profile', 'Interaction', 'Relationship'
   */
  entityType?: EntityTypes;
  /**
   * The properties of the Profile.
   */
  fields?: PropertyDefinition[];
  /**
   * The instance count.
   */
  instancesCount?: number;
  /**
   * The last changed time for the type definition.
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly lastChangedUtc?: Date;
  /**
   * Provisioning state. Possible values include: 'Provisioning', 'Succeeded', 'Expiring',
   * 'Deleting', 'HumanIntervention', 'Failed'
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly provisioningState?: ProvisioningStates;
  /**
   * The schema org link. This helps ACI identify and suggest semantic models.
   */
  schemaItemTypeLink?: string;
  /**
   * The hub name.
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly tenantId?: string;
  /**
   * The timestamp property name. Represents the time when the interaction or profile update
   * happened.
   */
  timestampFieldName?: string;
  /**
   * The name of the entity.
   */
  typeName?: string;
  /**
   * The id property names. Properties which uniquely identify an interaction instance.
   */
  idPropertyNames?: string[];
  /**
   * Profiles that participated in the interaction.
   */
  participantProfiles?: Participant[];
  /**
   * The primary participant property name for an interaction ,This is used to logically represent
   * the agent of the interaction, Specify the participant name here from ParticipantName.
   */
  primaryParticipantProfilePropertyName?: string;
  /**
   * This is specific to interactions modeled as activities. Data sources are used to determine
   * where data is stored and also in precedence rules.
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly dataSourcePrecedenceRules?: DataSourcePrecedence[];
  /**
   * The data source name
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly interactionResourceFormatName?: string;
  /**
   * The data source type. Possible values include: 'Connector', 'LinkInteraction', 'SystemDefault'
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly dataSourceType?: DataSourceType;
  /**
   * The data source status. Possible values include: 'None', 'Active', 'Deleted'
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly status?: Status;
  /**
   * The data source ID.
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly interactionResourceFormatId?: number;
  /**
   * The data source reference id.
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly dataSourceReferenceId?: string;
  /**
   * An interaction can be tagged as an activity only during create. This enables the interaction
   * to be editable and can enable merging of properties from multiple data sources based on
   * precedence, which is defined at a link level.
   */
  isActivity?: boolean;
}

/**
 * The KPI resource format.
 */
export interface KpiResourceFormat extends ProxyResource {
  /**
   * The mapping entity type. Possible values include: 'None', 'Profile', 'Interaction',
   * 'Relationship'
   */
  entityType: EntityTypes;
  /**
   * The mapping entity name.
   */
  entityTypeName: string;
  /**
   * The hub name.
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly tenantId?: string;
  /**
   * The KPI name.
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly kpiName?: string;
  /**
   * Localized display name for the KPI.
   */
  displayName?: { [propertyName: string]: string };
  /**
   * Localized description for the KPI.
   */
  description?: { [propertyName: string]: string };
  /**
   * The calculation window. Possible values include: 'Lifetime', 'Hour', 'Day', 'Week', 'Month'
   */
  calculationWindow: CalculationWindowTypes;
  /**
   * Name of calculation window field.
   */
  calculationWindowFieldName?: string;
  /**
   * The computation function for the KPI. Possible values include: 'Sum', 'Avg', 'Min', 'Max',
   * 'Last', 'Count', 'None', 'CountDistinct'
   */
  functionProperty: KpiFunctions;
  /**
   * The computation expression for the KPI.
   */
  expression: string;
  /**
   * The unit of measurement for the KPI.
   */
  unit?: string;
  /**
   * The filter expression for the KPI.
   */
  filter?: string;
  /**
   * the group by properties for the KPI.
   */
  groupBy?: string[];
  /**
   * The KPI GroupByMetadata.
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly groupByMetadata?: KpiGroupByMetadata[];
  /**
   * The participant profiles.
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly participantProfilesMetadata?: KpiParticipantProfilesMetadata[];
  /**
   * Provisioning state. Possible values include: 'Provisioning', 'Succeeded', 'Expiring',
   * 'Deleting', 'HumanIntervention', 'Failed'
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly provisioningState?: ProvisioningStates;
  /**
   * The KPI thresholds.
   */
  thresHolds?: KpiThresholds;
  /**
   * The aliases.
   */
  aliases?: KpiAlias[];
  /**
   * The KPI extracts.
   */
  extracts?: KpiExtract[];
}

/**
 * The enriching KPI definition.
 */
export interface EnrichingKpi extends KpiDefinition {
}

/**
 * The connector resource format.
 */
export interface ConnectorResourceFormat extends ProxyResource {
  /**
   * ID of the connector.
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly connectorId?: number;
  /**
   * Name of the connector.
   */
  connectorName?: string;
  /**
   * Type of connector. Possible values include: 'None', 'CRM', 'AzureBlob', 'Salesforce',
   * 'ExchangeOnline', 'Outbound'
   */
  connectorType: ConnectorTypes;
  /**
   * Display name of the connector.
   */
  displayName?: string;
  /**
   * Description of the connector.
   */
  description?: string;
  /**
   * The connector properties.
   */
  connectorProperties: { [propertyName: string]: any };
  /**
   * The created time.
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly created?: Date;
  /**
   * The last modified time.
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly lastModified?: Date;
  /**
   * State of connector. Possible values include: 'Creating', 'Created', 'Ready', 'Expiring',
   * 'Deleting', 'Failed'
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly state?: ConnectorStates;
  /**
   * The hub name.
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly tenantId?: string;
  /**
   * If this is an internal connector.
   */
  isInternal?: boolean;
}

/**
 * The connector mapping resource format.
 */
export interface ConnectorMappingResourceFormat extends ProxyResource {
  /**
   * The connector name.
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly connectorName?: string;
  /**
   * Type of connector. Possible values include: 'None', 'CRM', 'AzureBlob', 'Salesforce',
   * 'ExchangeOnline', 'Outbound'
   */
  connectorType?: ConnectorTypes;
  /**
   * The created time.
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly created?: Date;
  /**
   * The last modified time.
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly lastModified?: Date;
  /**
   * Defines which entity type the file should map to. Possible values include: 'None', 'Profile',
   * 'Interaction', 'Relationship'
   */
  entityType: EntityTypes;
  /**
   * The mapping entity name.
   */
  entityTypeName: string;
  /**
   * The connector mapping name
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly connectorMappingName?: string;
  /**
   * Display name for the connector mapping.
   */
  displayName?: string;
  /**
   * The description of the connector mapping.
   */
  description?: string;
  /**
   * The DataFormat ID.
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly dataFormatId?: string;
  /**
   * The properties of the mapping.
   */
  mappingProperties: ConnectorMappingProperties;
  /**
   * The next run time based on customer's settings.
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly nextRunTime?: Date;
  /**
   * The RunId.
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly runId?: string;
  /**
   * State of connector mapping. Possible values include: 'Creating', 'Created', 'Failed', 'Ready',
   * 'Running', 'Stopped', 'Expiring'
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly state?: ConnectorMappingStates;
  /**
   * The hub name.
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly tenantId?: string;
}

/**
 * The authorization policy resource format.
 */
export interface AuthorizationPolicyResourceFormat extends ProxyResource {
  /**
   * Name of the policy.
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly policyName?: string;
  /**
   * The permissions associated with the policy.
   */
  permissions: PermissionTypes[];
  /**
   * Primary key associated with the policy.
   */
  primaryKey?: string;
  /**
   * Secondary key associated with the policy.
   */
  secondaryKey?: string;
}

/**
 * The link resource format.
 */
export interface LinkResourceFormat extends ProxyResource {
  /**
   * The hub name.
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly tenantId?: string;
  /**
   * The link name.
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly linkName?: string;
  /**
   * Type of source entity. Possible values include: 'None', 'Profile', 'Interaction',
   * 'Relationship'
   */
  sourceEntityType: EntityType;
  /**
   * Type of target entity. Possible values include: 'None', 'Profile', 'Interaction',
   * 'Relationship'
   */
  targetEntityType: EntityType;
  /**
   * Name of the source Entity Type.
   */
  sourceEntityTypeName: string;
  /**
   * Name of the target Entity Type.
   */
  targetEntityTypeName: string;
  /**
   * Localized display name for the Link.
   */
  displayName?: { [propertyName: string]: string };
  /**
   * Localized descriptions for the Link.
   */
  description?: { [propertyName: string]: string };
  /**
   * The set of properties mappings between the source and target Types.
   */
  mappings?: TypePropertiesMapping[];
  /**
   * The properties that represent the participating profile.
   */
  participantPropertyReferences: ParticipantPropertyReference[];
  /**
   * Provisioning state. Possible values include: 'Provisioning', 'Succeeded', 'Expiring',
   * 'Deleting', 'HumanIntervention', 'Failed'
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly provisioningState?: ProvisioningStates;
  /**
   * Indicating whether the link is reference only link. This flag is ignored if the Mappings are
   * defined. If the mappings are not defined and it is set to true, links processing will not
   * create or update profiles.
   */
  referenceOnly?: boolean;
  /**
   * Determines whether this link is supposed to create or delete instances if Link is NOT
   * Reference Only. Possible values include: 'Upsert', 'Delete'
   */
  operationType?: InstanceOperationType;
}

/**
 * The relationship resource format.
 */
export interface RelationshipResourceFormat extends ProxyResource {
  /**
   * The Relationship Cardinality. Possible values include: 'OneToOne', 'OneToMany', 'ManyToMany'
   */
  cardinality?: CardinalityTypes;
  /**
   * Localized display name for the Relationship.
   */
  displayName?: { [propertyName: string]: string };
  /**
   * Localized descriptions for the Relationship.
   */
  description?: { [propertyName: string]: string };
  /**
   * The expiry date time in UTC.
   */
  expiryDateTimeUtc?: Date;
  /**
   * The properties of the Relationship.
   */
  fields?: PropertyDefinition[];
  /**
   * Optional property to be used to map fields in profile to their strong ids in related profile.
   */
  lookupMappings?: RelationshipTypeMapping[];
  /**
   * Profile type.
   */
  profileType: string;
  /**
   * Provisioning state. Possible values include: 'Provisioning', 'Succeeded', 'Expiring',
   * 'Deleting', 'HumanIntervention', 'Failed'
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly provisioningState?: ProvisioningStates;
  /**
   * The Relationship name.
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly relationshipName?: string;
  /**
   * Related profile being referenced.
   */
  relatedProfileType: string;
  /**
   * The relationship guid id.
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly relationshipGuidId?: string;
  /**
   * The hub name.
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly tenantId?: string;
}

/**
 * The relationship link resource format.
 */
export interface RelationshipLinkResourceFormat extends ProxyResource {
  /**
   * Localized display name for the Relationship Link.
   */
  displayName?: { [propertyName: string]: string };
  /**
   * Localized descriptions for the Relationship Link.
   */
  description?: { [propertyName: string]: string };
  /**
   * The InteractionType associated with the Relationship Link.
   */
  interactionType: string;
  /**
   * The name of the Relationship Link.
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly linkName?: string;
  /**
   * The mappings between Interaction and Relationship fields.
   */
  mappings?: RelationshipLinkFieldMapping[];
  /**
   * The property references for the Profile of the Relationship.
   */
  profilePropertyReferences: ParticipantProfilePropertyReference[];
  /**
   * Provisioning state. Possible values include: 'Provisioning', 'Succeeded', 'Expiring',
   * 'Deleting', 'HumanIntervention', 'Failed'
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly provisioningState?: ProvisioningStates;
  /**
   * The property references for the Related Profile of the Relationship.
   */
  relatedProfilePropertyReferences: ParticipantProfilePropertyReference[];
  /**
   * The Relationship associated with the Link.
   */
  relationshipName: string;
  /**
   * The relationship guid id.
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly relationshipGuidId?: string;
  /**
   * The hub name.
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly tenantId?: string;
}

/**
 * The view resource format.
 */
export interface ViewResourceFormat extends ProxyResource {
  /**
   * Name of the view.
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly viewName?: string;
  /**
   * the user ID.
   */
  userId?: string;
  /**
   * the hub name.
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly tenantId?: string;
  /**
   * Localized display name for the view.
   */
  displayName?: { [propertyName: string]: string };
  /**
   * View definition.
   */
  definition: string;
  /**
   * Date time when view was last modified.
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly changed?: Date;
  /**
   * Date time when view was created.
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly created?: Date;
}

/**
 * The WidgetTypeResourceFormat
 */
export interface WidgetTypeResourceFormat extends ProxyResource {
  /**
   * Name of the widget type.
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly widgetTypeName?: string;
  /**
   * Definition for widget type.
   */
  definition: string;
  /**
   * Description for widget type.
   */
  description?: string;
  /**
   * Localized display name for the widget type.
   */
  displayName?: { [propertyName: string]: string };
  /**
   * The image URL.
   */
  imageUrl?: string;
  /**
   * The hub name.
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly tenantId?: string;
  /**
   * The widget version.
   */
  widgetVersion?: string;
  /**
   * Date time when widget type was last modified.
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly changed?: Date;
  /**
   * Date time when widget type was created.
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly created?: Date;
}

/**
 * The AssignmentPrincipal
 */
export interface AssignmentPrincipal {
  /**
   * The principal id being assigned to.
   */
  principalId: string;
  /**
   * The Type of the principal ID.
   */
  principalType: string;
  /**
   * Other metadata for the principal.
   */
  principalMetadata?: { [propertyName: string]: string };
}

/**
 * The resource set description.
 */
export interface ResourceSetDescription {
  /**
   * The elements included in the set.
   */
  elements?: string[];
  /**
   * The elements that are not included in the set, in case elements contains '*' indicating 'all'.
   */
  exceptions?: string[];
}

/**
 * The Role Assignment resource format.
 */
export interface RoleAssignmentResourceFormat extends ProxyResource {
  /**
   * The hub name.
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly tenantId?: string;
  /**
   * The name of the metadata object.
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly assignmentName?: string;
  /**
   * Localized display names for the metadata.
   */
  displayName?: { [propertyName: string]: string };
  /**
   * Localized description for the metadata.
   */
  description?: { [propertyName: string]: string };
  /**
   * Provisioning state. Possible values include: 'Provisioning', 'Succeeded', 'Expiring',
   * 'Deleting', 'HumanIntervention', 'Failed'
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly provisioningState?: ProvisioningStates;
  /**
   * Type of roles. Possible values include: 'Admin', 'Reader', 'ManageAdmin', 'ManageReader',
   * 'DataAdmin', 'DataReader'
   */
  role: RoleTypes;
  /**
   * The principals being assigned to.
   */
  principals: AssignmentPrincipal[];
  /**
   * Profiles set for the assignment.
   */
  profiles?: ResourceSetDescription;
  /**
   * Interactions set for the assignment.
   */
  interactions?: ResourceSetDescription;
  /**
   * Links set for the assignment.
   */
  links?: ResourceSetDescription;
  /**
   * Kpis set for the assignment.
   */
  kpis?: ResourceSetDescription;
  /**
   * Sas Policies set for the assignment.
   */
  sasPolicies?: ResourceSetDescription;
  /**
   * Connectors set for the assignment.
   */
  connectors?: ResourceSetDescription;
  /**
   * Views set for the assignment.
   */
  views?: ResourceSetDescription;
  /**
   * The Role assignments set for the relationship links.
   */
  relationshipLinks?: ResourceSetDescription;
  /**
   * The Role assignments set for the relationships.
   */
  relationships?: ResourceSetDescription;
  /**
   * Widget types set for the assignment.
   */
  widgetTypes?: ResourceSetDescription;
  /**
   * The Role assignments set for the assignment.
   */
  roleAssignments?: ResourceSetDescription;
  /**
   * Widget types set for the assignment.
   */
  conflationPolicies?: ResourceSetDescription;
  /**
   * The Role assignments set for the assignment.
   */
  segments?: ResourceSetDescription;
}

/**
 * The role resource format.
 */
export interface RoleResourceFormat extends ProxyResource {
  /**
   * The role name.
   */
  roleName?: string;
  /**
   * The description of the role.
   */
  description?: string;
}

/**
 * Input type for getting image upload url.
 */
export interface GetImageUploadUrlInput {
  /**
   * Type of entity. Can be Profile or Interaction.
   */
  entityType?: string;
  /**
   * Name of the entity type.
   */
  entityTypeName?: string;
  /**
   * Relative path of the image.
   */
  relativePath?: string;
}

/**
 * The image definition.
 */
export interface ImageDefinition {
  /**
   * Whether image exists already.
   */
  imageExists?: boolean;
  /**
   * Content URL for the image blob.
   */
  contentUrl?: string;
  /**
   * Relative path of the image.
   */
  relativePath?: string;
}

/**
 * The definition of suggested relationship for the type.
 */
export interface RelationshipsLookup {
  /**
   * The relationship profile.
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly profileName?: string;
  /**
   * The property references for the profile type.
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly profilePropertyReferences?: ParticipantProfilePropertyReference[];
  /**
   * The related profile.
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly relatedProfileName?: string;
  /**
   * The property references for the related profile type.
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly relatedProfilePropertyReferences?: ParticipantProfilePropertyReference[];
  /**
   * The name of existing Relationship.
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly existingRelationshipName?: string;
}

/**
 * The response of suggest relationship links operation.
 */
export interface SuggestRelationshipLinksResponse {
  /**
   * The interaction name.
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly interactionName?: string;
  /**
   * Suggested relationships for the type.
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly suggestedRelationships?: RelationshipsLookup[];
}

/**
 * Definition of the link mapping of prediction.
 */
export interface PredictionMappings {
  /**
   * The score of the link mapping.
   */
  score: string;
  /**
   * The grade of the link mapping.
   */
  grade: string;
  /**
   * The reason of the link mapping.
   */
  reason: string;
}

/**
 * The definition of a prediction grade.
 */
export interface PredictionGradesItem {
  /**
   * Name of the grade.
   */
  gradeName?: string;
  /**
   * Minimum score threshold.
   */
  minScoreThreshold?: number;
  /**
   * Maximum score threshold.
   */
  maxScoreThreshold?: number;
}

/**
 * System generated entities.
 */
export interface PredictionSystemGeneratedEntities {
  /**
   * Generated interaction types.
   */
  generatedInteractionTypes?: string[];
  /**
   * Generated links.
   */
  generatedLinks?: string[];
  /**
   * Generated KPIs.
   */
  generatedKpis?: { [propertyName: string]: string };
}

/**
 * The definition of a prediction distribution.
 */
export interface PredictionDistributionDefinitionDistributionsItem {
  /**
   * Score threshold.
   */
  scoreThreshold?: number;
  /**
   * Number of positives.
   */
  positives?: number;
  /**
   * Number of negatives.
   */
  negatives?: number;
  /**
   * Number of positives above threshold.
   */
  positivesAboveThreshold?: number;
  /**
   * Number of negatives above threshold.
   */
  negativesAboveThreshold?: number;
}

/**
 * The definition of the prediction distribution.
 */
export interface PredictionDistributionDefinition {
  /**
   * Total positive in the distribution.
   */
  totalPositives?: number;
  /**
   * Total negatives in the distribution.
   */
  totalNegatives?: number;
  /**
   * Distributions of the prediction.
   */
  distributions?: PredictionDistributionDefinitionDistributionsItem[];
}

/**
 * The definition of a canonical profile property.
 */
export interface CanonicalProfileDefinitionPropertiesItem {
  /**
   * Profile name.
   */
  profileName?: string;
  /**
   * Property name of profile.
   */
  profilePropertyName?: string;
  /**
   * The rank.
   */
  rank?: number;
  /**
   * Type of canonical property value. Possible values include: 'Numeric', 'Categorical',
   * 'DerivedCategorical', 'DerivedNumeric'
   */
  type?: CanonicalPropertyValueType;
  /**
   * Value of the canonical property.
   */
  value?: string;
}

/**
 * Definition of canonical profile.
 */
export interface CanonicalProfileDefinition {
  /**
   * Canonical profile ID.
   */
  canonicalProfileId?: number;
  /**
   * Properties of the canonical profile.
   */
  properties?: CanonicalProfileDefinitionPropertiesItem[];
}

/**
 * The training results of the prediction.
 */
export interface PredictionTrainingResults {
  /**
   * The hub name.
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly tenantId?: string;
  /**
   * Score name.
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly scoreName?: string;
  /**
   * Prediction distribution.
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly predictionDistribution?: PredictionDistributionDefinition;
  /**
   * Canonical profiles.
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly canonicalProfiles?: CanonicalProfileDefinition[];
  /**
   * Instance count of the primary profile.
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly primaryProfileInstanceCount?: number;
}

/**
 * The prediction model status.
 */
export interface PredictionModelStatus {
  /**
   * The hub name.
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly tenantId?: string;
  /**
   * The prediction name.
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly predictionName?: string;
  /**
   * The prediction GUID ID.
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly predictionGuidId?: string;
  /**
   * Prediction model life cycle.  When prediction is in PendingModelConfirmation status, it is
   * allowed to update the status to PendingFeaturing or Active through API. Possible values
   * include: 'New', 'Provisioning', 'ProvisioningFailed', 'PendingDiscovering', 'Discovering',
   * 'PendingFeaturing', 'Featuring', 'FeaturingFailed', 'PendingTraining', 'Training',
   * 'TrainingFailed', 'Evaluating', 'EvaluatingFailed', 'PendingModelConfirmation', 'Active',
   * 'Deleted', 'HumanIntervention', 'Failed'
   */
  status: PredictionModelLifeCycle;
  /**
   * The model status message.
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly message?: string;
  /**
   * Count of the training set.
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly trainingSetCount?: number;
  /**
   * Count of the test set.
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly testSetCount?: number;
  /**
   * Count of the validation set.
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly validationSetCount?: number;
  /**
   * The training accuracy.
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly trainingAccuracy?: number;
  /**
   * The signals used.
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly signalsUsed?: number;
  /**
   * Version of the model.
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly modelVersion?: string;
}

/**
 * The prediction resource format.
 */
export interface PredictionResourceFormat extends ProxyResource {
  /**
   * Description of the prediction.
   */
  description?: { [propertyName: string]: string };
  /**
   * Display name of the prediction.
   */
  displayName?: { [propertyName: string]: string };
  /**
   * Interaction types involved in the prediction.
   */
  involvedInteractionTypes?: string[];
  /**
   * KPI types involved in the prediction.
   */
  involvedKpiTypes?: string[];
  /**
   * Relationships involved in the prediction.
   */
  involvedRelationships?: string[];
  /**
   * Negative outcome expression.
   */
  negativeOutcomeExpression: string;
  /**
   * Positive outcome expression.
   */
  positiveOutcomeExpression: string;
  /**
   * Primary profile type.
   */
  primaryProfileType: string;
  /**
   * Provisioning state. Possible values include: 'Provisioning', 'Succeeded', 'Expiring',
   * 'Deleting', 'HumanIntervention', 'Failed'
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly provisioningState?: ProvisioningStates;
  /**
   * Name of the prediction.
   */
  predictionName?: string;
  /**
   * Scope expression.
   */
  scopeExpression: string;
  /**
   * The hub name.
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly tenantId?: string;
  /**
   * Whether do auto analyze.
   */
  autoAnalyze: boolean;
  /**
   * Definition of the link mapping of prediction.
   */
  mappings: PredictionMappings;
  /**
   * Score label.
   */
  scoreLabel: string;
  /**
   * The prediction grades.
   */
  grades?: PredictionGradesItem[];
  /**
   * System generated entities.
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly systemGeneratedEntities?: PredictionSystemGeneratedEntities;
}

/**
 * The object that represents the operation.
 */
export interface OperationDisplay {
  /**
   * Service provider: Microsoft.CustomerInsights
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly provider?: string;
  /**
   * Resource on which the operation is performed: Invoice, etc.
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly resource?: string;
  /**
   * Operation type: Read, write, delete, etc.
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly operation?: string;
}

/**
 * A Customer Insights REST API operation
 */
export interface Operation {
  /**
   * Operation name: {provider}/{resource}/{operation}
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly name?: string;
  /**
   * The object that represents the operation.
   */
  display?: OperationDisplay;
}

/**
 * Optional Parameters.
 */
export interface ProfilesGetOptionalParams extends msRest.RequestOptionsBase {
  /**
   * Locale of profile to retrieve, default is en-us. Default value: 'en-us'.
   */
  localeCode?: string;
}

/**
 * Optional Parameters.
 */
export interface ProfilesDeleteMethodOptionalParams extends msRest.RequestOptionsBase {
  /**
   * Locale of profile to retrieve, default is en-us. Default value: 'en-us'.
   */
  localeCode?: string;
}

/**
 * Optional Parameters.
 */
export interface ProfilesListByHubOptionalParams extends msRest.RequestOptionsBase {
  /**
   * Locale of profile to retrieve, default is en-us. Default value: 'en-us'.
   */
  localeCode?: string;
}

/**
 * Optional Parameters.
 */
export interface ProfilesBeginDeleteMethodOptionalParams extends msRest.RequestOptionsBase {
  /**
   * Locale of profile to retrieve, default is en-us. Default value: 'en-us'.
   */
  localeCode?: string;
}

/**
 * Optional Parameters.
 */
export interface InteractionsGetOptionalParams extends msRest.RequestOptionsBase {
  /**
   * Locale of interaction to retrieve, default is en-us. Default value: 'en-us'.
   */
  localeCode?: string;
}

/**
 * Optional Parameters.
 */
export interface InteractionsListByHubOptionalParams extends msRest.RequestOptionsBase {
  /**
   * Locale of interaction to retrieve, default is en-us. Default value: 'en-us'.
   */
  localeCode?: string;
}

/**
 * An interface representing CustomerInsightsManagementClientOptions.
 */
export interface CustomerInsightsManagementClientOptions extends AzureServiceClientOptions {
  baseUri?: string;
}

/**
 * @interface
 * Result of the request to list Customer Insights operations. It contains a list of operations and
 * a URL link to get the next set of results.
 * @extends Array<Operation>
 */
export interface OperationListResult extends Array<Operation> {
  /**
   * URL to get the next set of operation list results if there are any.
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly nextLink?: string;
}

/**
 * @interface
 * Response of list hub operation.
 * @extends Array<Hub>
 */
export interface HubListResult extends Array<Hub> {
  /**
   * Link for next set of results.
   */
  nextLink?: string;
}

/**
 * @interface
 * The response of list profile operation.
 * @extends Array<ProfileResourceFormat>
 */
export interface ProfileListResult extends Array<ProfileResourceFormat> {
  /**
   * Link to the next set of results.
   */
  nextLink?: string;
}

/**
 * @interface
 * The response of list interaction operation.
 * @extends Array<InteractionResourceFormat>
 */
export interface InteractionListResult extends Array<InteractionResourceFormat> {
  /**
   * Link to the next set of results.
   */
  nextLink?: string;
}

/**
 * @interface
 * The response of list relationship operation.
 * @extends Array<RelationshipResourceFormat>
 */
export interface RelationshipListResult extends Array<RelationshipResourceFormat> {
  /**
   * Link to the next set of results.
   */
  nextLink?: string;
}

/**
 * @interface
 * The response of list relationship link operation.
 * @extends Array<RelationshipLinkResourceFormat>
 */
export interface RelationshipLinkListResult extends Array<RelationshipLinkResourceFormat> {
  /**
   * Link to the next set of results.
   */
  nextLink?: string;
}

/**
 * @interface
 * The response of list authorization policy operation.
 * @extends Array<AuthorizationPolicyResourceFormat>
 */
export interface AuthorizationPolicyListResult extends Array<AuthorizationPolicyResourceFormat> {
  /**
   * Link to the next set of results.
   */
  nextLink?: string;
}

/**
 * @interface
 * The response of list connector operation.
 * @extends Array<ConnectorResourceFormat>
 */
export interface ConnectorListResult extends Array<ConnectorResourceFormat> {
  /**
   * Link to the next set of results.
   */
  nextLink?: string;
}

/**
 * @interface
 * The response of list connector mapping operation.
 * @extends Array<ConnectorMappingResourceFormat>
 */
export interface ConnectorMappingListResult extends Array<ConnectorMappingResourceFormat> {
  /**
   * Link to the next set of results.
   */
  nextLink?: string;
}

/**
 * @interface
 * The response of list KPI operation.
 * @extends Array<KpiResourceFormat>
 */
export interface KpiListResult extends Array<KpiResourceFormat> {
  /**
   * Link to the next set of results.
   */
  nextLink?: string;
}

/**
 * @interface
 * The response of list widget type operation.
 * @extends Array<WidgetTypeResourceFormat>
 */
export interface WidgetTypeListResult extends Array<WidgetTypeResourceFormat> {
  /**
   * Link to the next set of results.
   */
  nextLink?: string;
}

/**
 * @interface
 * The response of list view operation.
 * @extends Array<ViewResourceFormat>
 */
export interface ViewListResult extends Array<ViewResourceFormat> {
  /**
   * Link to the next set of results.
   */
  nextLink?: string;
}

/**
 * @interface
 * The response of list link operation.
 * @extends Array<LinkResourceFormat>
 */
export interface LinkListResult extends Array<LinkResourceFormat> {
  /**
   * Link to the next set of results.
   */
  nextLink?: string;
}

/**
 * @interface
 * The response of list role assignment operation.
 * @extends Array<RoleResourceFormat>
 */
export interface RoleListResult extends Array<RoleResourceFormat> {
  /**
   * Link to the next set of results.
   */
  nextLink?: string;
}

/**
 * @interface
 * The response of list role assignment operation.
 * @extends Array<RoleAssignmentResourceFormat>
 */
export interface RoleAssignmentListResult extends Array<RoleAssignmentResourceFormat> {
  /**
   * Link to the next set of results.
   */
  nextLink?: string;
}

/**
 * @interface
 * The response of list predictions operation.
 * @extends Array<PredictionResourceFormat>
 */
export interface PredictionListResult extends Array<PredictionResourceFormat> {
  /**
   * Link to the next set of results.
   */
  nextLink?: string;
}

/**
 * Defines values for EntityTypes.
 * Possible values include: 'None', 'Profile', 'Interaction', 'Relationship'
 * @readonly
 * @enum {string}
 */
export type EntityTypes = 'None' | 'Profile' | 'Interaction' | 'Relationship';

/**
 * Defines values for DataSourceType.
 * Possible values include: 'Connector', 'LinkInteraction', 'SystemDefault'
 * @readonly
 * @enum {string}
 */
export type DataSourceType = 'Connector' | 'LinkInteraction' | 'SystemDefault';

/**
 * Defines values for Status.
 * Possible values include: 'None', 'Active', 'Deleted'
 * @readonly
 * @enum {string}
 */
export type Status = 'None' | 'Active' | 'Deleted';

/**
 * Defines values for ProvisioningStates.
 * Possible values include: 'Provisioning', 'Succeeded', 'Expiring', 'Deleting',
 * 'HumanIntervention', 'Failed'
 * @readonly
 * @enum {string}
 */
export type ProvisioningStates = 'Provisioning' | 'Succeeded' | 'Expiring' | 'Deleting' | 'HumanIntervention' | 'Failed';

/**
 * Defines values for PermissionTypes.
 * Possible values include: 'Read', 'Write', 'Manage'
 * @readonly
 * @enum {string}
 */
export type PermissionTypes = 'Read' | 'Write' | 'Manage';

/**
 * Defines values for ConnectorTypes.
 * Possible values include: 'None', 'CRM', 'AzureBlob', 'Salesforce', 'ExchangeOnline', 'Outbound'
 * @readonly
 * @enum {string}
 */
export type ConnectorTypes = 'None' | 'CRM' | 'AzureBlob' | 'Salesforce' | 'ExchangeOnline' | 'Outbound';

/**
 * Defines values for ConnectorStates.
 * Possible values include: 'Creating', 'Created', 'Ready', 'Expiring', 'Deleting', 'Failed'
 * @readonly
 * @enum {string}
 */
export type ConnectorStates = 'Creating' | 'Created' | 'Ready' | 'Expiring' | 'Deleting' | 'Failed';

/**
 * Defines values for ErrorManagementTypes.
 * Possible values include: 'RejectAndContinue', 'StopImport', 'RejectUntilLimit'
 * @readonly
 * @enum {string}
 */
export type ErrorManagementTypes = 'RejectAndContinue' | 'StopImport' | 'RejectUntilLimit';

/**
 * Defines values for FrequencyTypes.
 * Possible values include: 'Minute', 'Hour', 'Day', 'Week', 'Month'
 * @readonly
 * @enum {string}
 */
export type FrequencyTypes = 'Minute' | 'Hour' | 'Day' | 'Week' | 'Month';

/**
 * Defines values for CompletionOperationTypes.
 * Possible values include: 'DoNothing', 'DeleteFile', 'MoveFile'
 * @readonly
 * @enum {string}
 */
export type CompletionOperationTypes = 'DoNothing' | 'DeleteFile' | 'MoveFile';

/**
 * Defines values for ConnectorMappingStates.
 * Possible values include: 'Creating', 'Created', 'Failed', 'Ready', 'Running', 'Stopped',
 * 'Expiring'
 * @readonly
 * @enum {string}
 */
export type ConnectorMappingStates = 'Creating' | 'Created' | 'Failed' | 'Ready' | 'Running' | 'Stopped' | 'Expiring';

/**
 * Defines values for CalculationWindowTypes.
 * Possible values include: 'Lifetime', 'Hour', 'Day', 'Week', 'Month'
 * @readonly
 * @enum {string}
 */
export type CalculationWindowTypes = 'Lifetime' | 'Hour' | 'Day' | 'Week' | 'Month';

/**
 * Defines values for KpiFunctions.
 * Possible values include: 'Sum', 'Avg', 'Min', 'Max', 'Last', 'Count', 'None', 'CountDistinct'
 * @readonly
 * @enum {string}
 */
export type KpiFunctions = 'Sum' | 'Avg' | 'Min' | 'Max' | 'Last' | 'Count' | 'None' | 'CountDistinct';

/**
 * Defines values for EntityType.
 * Possible values include: 'None', 'Profile', 'Interaction', 'Relationship'
 * @readonly
 * @enum {string}
 */
export type EntityType = 'None' | 'Profile' | 'Interaction' | 'Relationship';

/**
 * Defines values for LinkTypes.
 * Possible values include: 'UpdateAlways', 'CopyIfNull'
 * @readonly
 * @enum {string}
 */
export type LinkTypes = 'UpdateAlways' | 'CopyIfNull';

/**
 * Defines values for InstanceOperationType.
 * Possible values include: 'Upsert', 'Delete'
 * @readonly
 * @enum {string}
 */
export type InstanceOperationType = 'Upsert' | 'Delete';

/**
 * Defines values for CardinalityTypes.
 * Possible values include: 'OneToOne', 'OneToMany', 'ManyToMany'
 * @readonly
 * @enum {string}
 */
export type CardinalityTypes = 'OneToOne' | 'OneToMany' | 'ManyToMany';

/**
 * Defines values for RoleTypes.
 * Possible values include: 'Admin', 'Reader', 'ManageAdmin', 'ManageReader', 'DataAdmin',
 * 'DataReader'
 * @readonly
 * @enum {string}
 */
export type RoleTypes = 'Admin' | 'Reader' | 'ManageAdmin' | 'ManageReader' | 'DataAdmin' | 'DataReader';

/**
 * Defines values for CanonicalPropertyValueType.
 * Possible values include: 'Numeric', 'Categorical', 'DerivedCategorical', 'DerivedNumeric'
 * @readonly
 * @enum {string}
 */
export type CanonicalPropertyValueType = 'Numeric' | 'Categorical' | 'DerivedCategorical' | 'DerivedNumeric';

/**
 * Defines values for PredictionModelLifeCycle.
 * Possible values include: 'New', 'Provisioning', 'ProvisioningFailed', 'PendingDiscovering',
 * 'Discovering', 'PendingFeaturing', 'Featuring', 'FeaturingFailed', 'PendingTraining',
 * 'Training', 'TrainingFailed', 'Evaluating', 'EvaluatingFailed', 'PendingModelConfirmation',
 * 'Active', 'Deleted', 'HumanIntervention', 'Failed'
 * @readonly
 * @enum {string}
 */
export type PredictionModelLifeCycle = 'New' | 'Provisioning' | 'ProvisioningFailed' | 'PendingDiscovering' | 'Discovering' | 'PendingFeaturing' | 'Featuring' | 'FeaturingFailed' | 'PendingTraining' | 'Training' | 'TrainingFailed' | 'Evaluating' | 'EvaluatingFailed' | 'PendingModelConfirmation' | 'Active' | 'Deleted' | 'HumanIntervention' | 'Failed';

/**
 * Contains response data for the list operation.
 */
export type OperationsListResponse = OperationListResult & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;

      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: OperationListResult;
    };
};

/**
 * Contains response data for the listNext operation.
 */
export type OperationsListNextResponse = OperationListResult & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;

      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: OperationListResult;
    };
};

/**
 * Contains response data for the createOrUpdate operation.
 */
export type HubsCreateOrUpdateResponse = Hub & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;

      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: Hub;
    };
};

/**
 * Contains response data for the update operation.
 */
export type HubsUpdateResponse = Hub & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;

      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: Hub;
    };
};

/**
 * Contains response data for the get operation.
 */
export type HubsGetResponse = Hub & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;

      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: Hub;
    };
};

/**
 * Contains response data for the listByResourceGroup operation.
 */
export type HubsListByResourceGroupResponse = HubListResult & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;

      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: HubListResult;
    };
};

/**
 * Contains response data for the list operation.
 */
export type HubsListResponse = HubListResult & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;

      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: HubListResult;
    };
};

/**
 * Contains response data for the listByResourceGroupNext operation.
 */
export type HubsListByResourceGroupNextResponse = HubListResult & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;

      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: HubListResult;
    };
};

/**
 * Contains response data for the listNext operation.
 */
export type HubsListNextResponse = HubListResult & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;

      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: HubListResult;
    };
};

/**
 * Contains response data for the createOrUpdate operation.
 */
export type ProfilesCreateOrUpdateResponse = ProfileResourceFormat & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;

      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: ProfileResourceFormat;
    };
};

/**
 * Contains response data for the get operation.
 */
export type ProfilesGetResponse = ProfileResourceFormat & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;

      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: ProfileResourceFormat;
    };
};

/**
 * Contains response data for the listByHub operation.
 */
export type ProfilesListByHubResponse = ProfileListResult & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;

      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: ProfileListResult;
    };
};

/**
 * Contains response data for the getEnrichingKpis operation.
 */
export type ProfilesGetEnrichingKpisResponse = Array<KpiDefinition> & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;

      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: KpiDefinition[];
    };
};

/**
 * Contains response data for the beginCreateOrUpdate operation.
 */
export type ProfilesBeginCreateOrUpdateResponse = ProfileResourceFormat & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;

      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: ProfileResourceFormat;
    };
};

/**
 * Contains response data for the listByHubNext operation.
 */
export type ProfilesListByHubNextResponse = ProfileListResult & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;

      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: ProfileListResult;
    };
};

/**
 * Contains response data for the createOrUpdate operation.
 */
export type InteractionsCreateOrUpdateResponse = InteractionResourceFormat & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;

      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: InteractionResourceFormat;
    };
};

/**
 * Contains response data for the get operation.
 */
export type InteractionsGetResponse = InteractionResourceFormat & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;

      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: InteractionResourceFormat;
    };
};

/**
 * Contains response data for the listByHub operation.
 */
export type InteractionsListByHubResponse = InteractionListResult & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;

      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: InteractionListResult;
    };
};

/**
 * Contains response data for the suggestRelationshipLinks operation.
 */
export type InteractionsSuggestRelationshipLinksResponse = SuggestRelationshipLinksResponse & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;

      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: SuggestRelationshipLinksResponse;
    };
};

/**
 * Contains response data for the beginCreateOrUpdate operation.
 */
export type InteractionsBeginCreateOrUpdateResponse = InteractionResourceFormat & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;

      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: InteractionResourceFormat;
    };
};

/**
 * Contains response data for the listByHubNext operation.
 */
export type InteractionsListByHubNextResponse = InteractionListResult & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;

      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: InteractionListResult;
    };
};

/**
 * Contains response data for the createOrUpdate operation.
 */
export type RelationshipsCreateOrUpdateResponse = RelationshipResourceFormat & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;

      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: RelationshipResourceFormat;
    };
};

/**
 * Contains response data for the get operation.
 */
export type RelationshipsGetResponse = RelationshipResourceFormat & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;

      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: RelationshipResourceFormat;
    };
};

/**
 * Contains response data for the listByHub operation.
 */
export type RelationshipsListByHubResponse = RelationshipListResult & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;

      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: RelationshipListResult;
    };
};

/**
 * Contains response data for the beginCreateOrUpdate operation.
 */
export type RelationshipsBeginCreateOrUpdateResponse = RelationshipResourceFormat & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;

      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: RelationshipResourceFormat;
    };
};

/**
 * Contains response data for the listByHubNext operation.
 */
export type RelationshipsListByHubNextResponse = RelationshipListResult & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;

      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: RelationshipListResult;
    };
};

/**
 * Contains response data for the createOrUpdate operation.
 */
export type RelationshipLinksCreateOrUpdateResponse = RelationshipLinkResourceFormat & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;

      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: RelationshipLinkResourceFormat;
    };
};

/**
 * Contains response data for the get operation.
 */
export type RelationshipLinksGetResponse = RelationshipLinkResourceFormat & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;

      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: RelationshipLinkResourceFormat;
    };
};

/**
 * Contains response data for the listByHub operation.
 */
export type RelationshipLinksListByHubResponse = RelationshipLinkListResult & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;

      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: RelationshipLinkListResult;
    };
};

/**
 * Contains response data for the beginCreateOrUpdate operation.
 */
export type RelationshipLinksBeginCreateOrUpdateResponse = RelationshipLinkResourceFormat & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;

      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: RelationshipLinkResourceFormat;
    };
};

/**
 * Contains response data for the listByHubNext operation.
 */
export type RelationshipLinksListByHubNextResponse = RelationshipLinkListResult & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;

      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: RelationshipLinkListResult;
    };
};

/**
 * Contains response data for the createOrUpdate operation.
 */
export type AuthorizationPoliciesCreateOrUpdateResponse = AuthorizationPolicyResourceFormat & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;

      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: AuthorizationPolicyResourceFormat;
    };
};

/**
 * Contains response data for the get operation.
 */
export type AuthorizationPoliciesGetResponse = AuthorizationPolicyResourceFormat & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;

      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: AuthorizationPolicyResourceFormat;
    };
};

/**
 * Contains response data for the listByHub operation.
 */
export type AuthorizationPoliciesListByHubResponse = AuthorizationPolicyListResult & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;

      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: AuthorizationPolicyListResult;
    };
};

/**
 * Contains response data for the regeneratePrimaryKey operation.
 */
export type AuthorizationPoliciesRegeneratePrimaryKeyResponse = AuthorizationPolicy & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;

      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: AuthorizationPolicy;
    };
};

/**
 * Contains response data for the regenerateSecondaryKey operation.
 */
export type AuthorizationPoliciesRegenerateSecondaryKeyResponse = AuthorizationPolicy & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;

      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: AuthorizationPolicy;
    };
};

/**
 * Contains response data for the listByHubNext operation.
 */
export type AuthorizationPoliciesListByHubNextResponse = AuthorizationPolicyListResult & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;

      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: AuthorizationPolicyListResult;
    };
};

/**
 * Contains response data for the createOrUpdate operation.
 */
export type ConnectorsCreateOrUpdateResponse = ConnectorResourceFormat & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;

      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: ConnectorResourceFormat;
    };
};

/**
 * Contains response data for the get operation.
 */
export type ConnectorsGetResponse = ConnectorResourceFormat & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;

      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: ConnectorResourceFormat;
    };
};

/**
 * Contains response data for the listByHub operation.
 */
export type ConnectorsListByHubResponse = ConnectorListResult & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;

      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: ConnectorListResult;
    };
};

/**
 * Contains response data for the beginCreateOrUpdate operation.
 */
export type ConnectorsBeginCreateOrUpdateResponse = ConnectorResourceFormat & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;

      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: ConnectorResourceFormat;
    };
};

/**
 * Contains response data for the listByHubNext operation.
 */
export type ConnectorsListByHubNextResponse = ConnectorListResult & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;

      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: ConnectorListResult;
    };
};

/**
 * Contains response data for the createOrUpdate operation.
 */
export type ConnectorMappingsCreateOrUpdateResponse = ConnectorMappingResourceFormat & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;

      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: ConnectorMappingResourceFormat;
    };
};

/**
 * Contains response data for the get operation.
 */
export type ConnectorMappingsGetResponse = ConnectorMappingResourceFormat & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;

      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: ConnectorMappingResourceFormat;
    };
};

/**
 * Contains response data for the listByConnector operation.
 */
export type ConnectorMappingsListByConnectorResponse = ConnectorMappingListResult & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;

      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: ConnectorMappingListResult;
    };
};

/**
 * Contains response data for the listByConnectorNext operation.
 */
export type ConnectorMappingsListByConnectorNextResponse = ConnectorMappingListResult & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;

      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: ConnectorMappingListResult;
    };
};

/**
 * Contains response data for the createOrUpdate operation.
 */
export type KpiCreateOrUpdateResponse = KpiResourceFormat & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;

      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: KpiResourceFormat;
    };
};

/**
 * Contains response data for the get operation.
 */
export type KpiGetResponse = KpiResourceFormat & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;

      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: KpiResourceFormat;
    };
};

/**
 * Contains response data for the listByHub operation.
 */
export type KpiListByHubResponse = KpiListResult & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;

      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: KpiListResult;
    };
};

/**
 * Contains response data for the beginCreateOrUpdate operation.
 */
export type KpiBeginCreateOrUpdateResponse = KpiResourceFormat & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;

      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: KpiResourceFormat;
    };
};

/**
 * Contains response data for the listByHubNext operation.
 */
export type KpiListByHubNextResponse = KpiListResult & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;

      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: KpiListResult;
    };
};

/**
 * Contains response data for the listByHub operation.
 */
export type WidgetTypesListByHubResponse = WidgetTypeListResult & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;

      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: WidgetTypeListResult;
    };
};

/**
 * Contains response data for the get operation.
 */
export type WidgetTypesGetResponse = WidgetTypeResourceFormat & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;

      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: WidgetTypeResourceFormat;
    };
};

/**
 * Contains response data for the listByHubNext operation.
 */
export type WidgetTypesListByHubNextResponse = WidgetTypeListResult & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;

      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: WidgetTypeListResult;
    };
};

/**
 * Contains response data for the listByHub operation.
 */
export type ViewsListByHubResponse = ViewListResult & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;

      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: ViewListResult;
    };
};

/**
 * Contains response data for the createOrUpdate operation.
 */
export type ViewsCreateOrUpdateResponse = ViewResourceFormat & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;

      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: ViewResourceFormat;
    };
};

/**
 * Contains response data for the get operation.
 */
export type ViewsGetResponse = ViewResourceFormat & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;

      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: ViewResourceFormat;
    };
};

/**
 * Contains response data for the listByHubNext operation.
 */
export type ViewsListByHubNextResponse = ViewListResult & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;

      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: ViewListResult;
    };
};

/**
 * Contains response data for the createOrUpdate operation.
 */
export type LinksCreateOrUpdateResponse = LinkResourceFormat & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;

      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: LinkResourceFormat;
    };
};

/**
 * Contains response data for the get operation.
 */
export type LinksGetResponse = LinkResourceFormat & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;

      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: LinkResourceFormat;
    };
};

/**
 * Contains response data for the listByHub operation.
 */
export type LinksListByHubResponse = LinkListResult & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;

      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: LinkListResult;
    };
};

/**
 * Contains response data for the beginCreateOrUpdate operation.
 */
export type LinksBeginCreateOrUpdateResponse = LinkResourceFormat & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;

      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: LinkResourceFormat;
    };
};

/**
 * Contains response data for the listByHubNext operation.
 */
export type LinksListByHubNextResponse = LinkListResult & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;

      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: LinkListResult;
    };
};

/**
 * Contains response data for the listByHub operation.
 */
export type RolesListByHubResponse = RoleListResult & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;

      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: RoleListResult;
    };
};

/**
 * Contains response data for the listByHubNext operation.
 */
export type RolesListByHubNextResponse = RoleListResult & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;

      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: RoleListResult;
    };
};

/**
 * Contains response data for the listByHub operation.
 */
export type RoleAssignmentsListByHubResponse = RoleAssignmentListResult & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;

      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: RoleAssignmentListResult;
    };
};

/**
 * Contains response data for the createOrUpdate operation.
 */
export type RoleAssignmentsCreateOrUpdateResponse = RoleAssignmentResourceFormat & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;

      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: RoleAssignmentResourceFormat;
    };
};

/**
 * Contains response data for the get operation.
 */
export type RoleAssignmentsGetResponse = RoleAssignmentResourceFormat & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;

      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: RoleAssignmentResourceFormat;
    };
};

/**
 * Contains response data for the beginCreateOrUpdate operation.
 */
export type RoleAssignmentsBeginCreateOrUpdateResponse = RoleAssignmentResourceFormat & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;

      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: RoleAssignmentResourceFormat;
    };
};

/**
 * Contains response data for the listByHubNext operation.
 */
export type RoleAssignmentsListByHubNextResponse = RoleAssignmentListResult & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;

      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: RoleAssignmentListResult;
    };
};

/**
 * Contains response data for the getUploadUrlForEntityType operation.
 */
export type ImagesGetUploadUrlForEntityTypeResponse = ImageDefinition & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;

      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: ImageDefinition;
    };
};

/**
 * Contains response data for the getUploadUrlForData operation.
 */
export type ImagesGetUploadUrlForDataResponse = ImageDefinition & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;

      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: ImageDefinition;
    };
};

/**
 * Contains response data for the createOrUpdate operation.
 */
export type PredictionsCreateOrUpdateResponse = PredictionResourceFormat & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;

      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: PredictionResourceFormat;
    };
};

/**
 * Contains response data for the get operation.
 */
export type PredictionsGetResponse = PredictionResourceFormat & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;

      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: PredictionResourceFormat;
    };
};

/**
 * Contains response data for the getTrainingResults operation.
 */
export type PredictionsGetTrainingResultsResponse = PredictionTrainingResults & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;

      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: PredictionTrainingResults;
    };
};

/**
 * Contains response data for the getModelStatus operation.
 */
export type PredictionsGetModelStatusResponse = PredictionModelStatus & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;

      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: PredictionModelStatus;
    };
};

/**
 * Contains response data for the listByHub operation.
 */
export type PredictionsListByHubResponse = PredictionListResult & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;

      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: PredictionListResult;
    };
};

/**
 * Contains response data for the beginCreateOrUpdate operation.
 */
export type PredictionsBeginCreateOrUpdateResponse = PredictionResourceFormat & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;

      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: PredictionResourceFormat;
    };
};

/**
 * Contains response data for the listByHubNext operation.
 */
export type PredictionsListByHubNextResponse = PredictionListResult & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;

      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: PredictionListResult;
    };
};
