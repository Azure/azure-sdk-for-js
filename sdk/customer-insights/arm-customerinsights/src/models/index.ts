/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */

import * as coreClient from "@azure/core-client";

/** Result of the request to list Customer Insights operations. It contains a list of operations and a URL link to get the next set of results. */
export interface OperationListResult {
  /**
   * List of Customer Insights operations supported by the Microsoft.CustomerInsights resource provider.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly value?: Operation[];
  /**
   * URL to get the next set of operation list results if there are any.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly nextLink?: string;
}

/** A Customer Insights REST API operation */
export interface Operation {
  /**
   * Operation name: {provider}/{resource}/{operation}
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly name?: string;
  /** The object that represents the operation. */
  display?: OperationDisplay;
}

/** The object that represents the operation. */
export interface OperationDisplay {
  /**
   * Service provider: Microsoft.CustomerInsights
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly provider?: string;
  /**
   * Resource on which the operation is performed: Invoice, etc.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly resource?: string;
  /**
   * Operation type: Read, write, delete, etc.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly operation?: string;
}

/** Hub billing info. */
export interface HubBillingInfoFormat {
  /** The sku name. */
  skuName?: string;
  /** The minimum number of units will be billed. One unit is 10,000 Profiles and 100,000 Interactions. */
  minUnits?: number;
  /** The maximum number of units can be used.  One unit is 10,000 Profiles and 100,000 Interactions. */
  maxUnits?: number;
}

/** Common properties of Azure resource. */
export interface Resource {
  /**
   * Resource ID.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly id?: string;
  /**
   * Resource name.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly name?: string;
  /**
   * Resource type.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly type?: string;
  /** Resource location. */
  location?: string;
  /** Resource tags. */
  tags?: { [propertyName: string]: string };
}

/** Response of list hub operation. */
export interface HubListResult {
  /** Results of the list operation. */
  value?: Hub[];
  /** Link for next set of results. */
  nextLink?: string;
}

/** Property/Properties which represent a unique ID. */
export interface StrongId {
  /** The properties which make up the unique ID. */
  keyPropertyNames: string[];
  /** The Name identifying the strong ID. */
  strongIdName: string;
  /** Localized display name. */
  displayName?: { [propertyName: string]: string };
  /** Localized descriptions. */
  description?: { [propertyName: string]: string };
}

/** Property definition. */
export interface PropertyDefinition {
  /** Array value separator for properties with isArray set. */
  arrayValueSeparator?: string;
  /** Describes valid values for an enum property. */
  enumValidValues?: ProfileEnumValidValuesFormat[];
  /** Name of the property. */
  fieldName: string;
  /** Type of the property. */
  fieldType: string;
  /** Indicates if the property is actually an array of the fieldType above on the data api. */
  isArray?: boolean;
  /** Indicates if the property is an enum. */
  isEnum?: boolean;
  /** Indicates if the property is an flag enum. */
  isFlagEnum?: boolean;
  /** Whether the property is an Image. */
  isImage?: boolean;
  /** Whether the property is a localized string. */
  isLocalizedString?: boolean;
  /** Whether the property is a name or a part of name. */
  isName?: boolean;
  /** Whether property value is required on instances, IsRequired field only for Interaction. Profile Instance will not check for required field. */
  isRequired?: boolean;
  /** The ID associated with the property. */
  propertyId?: string;
  /** URL encoded schema.org item prop link for the property. */
  schemaItemPropLink?: string;
  /** Max length of string. Used only if type is string. */
  maxLength?: number;
  /** Whether property is available in graph or not. */
  isAvailableInGraph?: boolean;
  /**
   * This is specific to interactions modeled as activities. Data sources are used to determine where data is stored and also in precedence rules.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly dataSourcePrecedenceRules?: DataSourcePrecedence[];
}

/** Valid enum values in case of an enum property. */
export interface ProfileEnumValidValuesFormat {
  /** The integer value of the enum member. */
  value?: number;
  /** Localized names of the enum member. */
  localizedValueNames?: { [propertyName: string]: string };
}

/** The data source precedence is a way to know the precedence of each data source. */
export interface DataSourcePrecedence {
  /** the precedence value. */
  precedence?: number;
  /**
   * The data source name
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly name?: string;
  /**
   * The data source type.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly dataSourceType?: DataSourceType;
  /**
   * The data source status.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly status?: Status;
  /**
   * The data source ID.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly id?: number;
  /**
   * The data source reference id.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly dataSourceReferenceId?: string;
}

/** The Metadata definition base. */
export interface MetadataDefinitionBase {
  /** The attributes for the Type. */
  attributes?: { [propertyName: string]: string[] };
  /** Localized descriptions for the property. */
  description?: { [propertyName: string]: string };
  /** Localized display names for the property. */
  displayName?: { [propertyName: string]: string };
  /** Any custom localized attributes for the Type. */
  localizedAttributes?: {
    [propertyName: string]: { [propertyName: string]: string };
  };
  /** Small Image associated with the Property or EntityType. */
  smallImage?: string;
  /** Medium Image associated with the Property or EntityType. */
  mediumImage?: string;
  /** Large Image associated with the Property or EntityType. */
  largeImage?: string;
}

/** Common properties of proxy resource. */
export interface ProxyResource {
  /**
   * Resource ID.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly id?: string;
  /**
   * Resource name.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly name?: string;
  /**
   * Resource type.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly type?: string;
}

/** The response of list profile operation. */
export interface ProfileListResult {
  /** Results of the list operation. */
  value?: ProfileResourceFormat[];
  /** Link to the next set of results. */
  nextLink?: string;
}

/** Defines the KPI Threshold limits. */
export interface KpiDefinition {
  /** The mapping entity type. */
  entityType: EntityTypes;
  /** The mapping entity name. */
  entityTypeName: string;
  /**
   * The hub name.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly tenantId?: string;
  /**
   * The KPI name.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly kpiName?: string;
  /** Localized display name for the KPI. */
  displayName?: { [propertyName: string]: string };
  /** Localized description for the KPI. */
  description?: { [propertyName: string]: string };
  /** The calculation window. */
  calculationWindow: CalculationWindowTypes;
  /** Name of calculation window field. */
  calculationWindowFieldName?: string;
  /** The computation function for the KPI. */
  function: KpiFunctions;
  /** The computation expression for the KPI. */
  expression: string;
  /** The unit of measurement for the KPI. */
  unit?: string;
  /** The filter expression for the KPI. */
  filter?: string;
  /** the group by properties for the KPI. */
  groupBy?: string[];
  /**
   * The KPI GroupByMetadata.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly groupByMetadata?: KpiGroupByMetadata[];
  /**
   * The participant profiles.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly participantProfilesMetadata?: KpiParticipantProfilesMetadata[];
  /**
   * Provisioning state.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly provisioningState?: ProvisioningStates;
  /** The KPI thresholds. */
  thresHolds?: KpiThresholds;
  /** The aliases. */
  aliases?: KpiAlias[];
  /** The KPI extracts. */
  extracts?: KpiExtract[];
}

/** The KPI GroupBy field metadata. */
export interface KpiGroupByMetadata {
  /** The display name. */
  displayName?: { [propertyName: string]: string };
  /** The name of the field. */
  fieldName?: string;
  /** The type of the field. */
  fieldType?: string;
}

/** The KPI participant profile metadata. */
export interface KpiParticipantProfilesMetadata {
  /** Name of the type. */
  typeName: string;
}

/** Defines the KPI Threshold limits. */
export interface KpiThresholds {
  /** The lower threshold limit. */
  lowerLimit: number;
  /** The upper threshold limit. */
  upperLimit: number;
  /** Whether or not the KPI is an increasing KPI. */
  increasingKpi: boolean;
}

/** The KPI alias. */
export interface KpiAlias {
  /** KPI alias name. */
  aliasName: string;
  /** The expression. */
  expression: string;
}

/** The KPI extract. */
export interface KpiExtract {
  /** KPI extract name. */
  extractName: string;
  /** The expression. */
  expression: string;
}

/** Describes a profile type participating in an interaction. */
export interface Participant {
  /** Profile type name. */
  profileTypeName: string;
  /** The property references. */
  participantPropertyReferences: ParticipantPropertyReference[];
  /** Participant name. */
  participantName: string;
  /** Localized display name. */
  displayName?: { [propertyName: string]: string };
  /** Localized descriptions. */
  description?: { [propertyName: string]: string };
  /** The role that the participant is playing in the interaction. */
  role?: string;
}

/** The participant property reference. */
export interface ParticipantPropertyReference {
  /** The source property that maps to the target property. */
  sourcePropertyName: string;
  /** The target property that maps to the source property. */
  targetPropertyName: string;
}

/** The response of list interaction operation. */
export interface InteractionListResult {
  /** Results of the list operation. */
  value?: InteractionResourceFormat[];
  /** Link to the next set of results. */
  nextLink?: string;
}

/** The response of suggest relationship links operation. */
export interface SuggestRelationshipLinksResponse {
  /**
   * The interaction name.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly interactionName?: string;
  /**
   * Suggested relationships for the type.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly suggestedRelationships?: RelationshipsLookup[];
}

/** The definition of suggested relationship for the type. */
export interface RelationshipsLookup {
  /**
   * The relationship profile.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly profileName?: string;
  /**
   * The property references for the profile type.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly profilePropertyReferences?: ParticipantProfilePropertyReference[];
  /**
   * The related profile.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly relatedProfileName?: string;
  /**
   * The property references for the related profile type.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly relatedProfilePropertyReferences?: ParticipantProfilePropertyReference[];
  /**
   * The name of existing Relationship.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly existingRelationshipName?: string;
}

/** The participant profile property reference. */
export interface ParticipantProfilePropertyReference {
  /** The source interaction property that maps to the target profile property. */
  interactionPropertyName: string;
  /** The target profile property that maps to the source interaction property. */
  profilePropertyName: string;
}

/** Maps fields in Profile to their corresponding StrongIds in Related Profile. */
export interface RelationshipTypeMapping {
  /** Maps a profile property with the StrongId of related profile. This is an array to support StrongIds that are composite key as well. */
  fieldMappings: RelationshipTypeFieldMapping[];
}

/** Map a field of profile to its corresponding StrongId in Related Profile. */
export interface RelationshipTypeFieldMapping {
  /** Specifies the fieldName in profile. */
  profileFieldName: string;
  /** Specifies the KeyProperty (from StrongId) of the related profile. */
  relatedProfileKeyProperty: string;
}

/** The response of list relationship operation. */
export interface RelationshipListResult {
  /** Results of the list operation. */
  value?: RelationshipResourceFormat[];
  /** Link to the next set of results. */
  nextLink?: string;
}

/** The fields mapping for Relationships. */
export interface RelationshipLinkFieldMapping {
  /** The field name on the Interaction Type. */
  interactionFieldName: string;
  /** Link type. */
  linkType?: LinkTypes;
  /** The field name on the Relationship metadata. */
  relationshipFieldName: string;
}

/** The response of list relationship link operation. */
export interface RelationshipLinkListResult {
  /** Results of the list operation. */
  value?: RelationshipLinkResourceFormat[];
  /** Link to the next set of results. */
  nextLink?: string;
}

/** The authorization policy. */
export interface AuthorizationPolicy {
  /**
   * Name of the policy.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly policyName?: string;
  /** The permissions associated with the policy. */
  permissions: PermissionTypes[];
  /** Primary key associated with the policy. */
  primaryKey?: string;
  /** Secondary key associated with the policy. */
  secondaryKey?: string;
}

/** The response of list authorization policy operation. */
export interface AuthorizationPolicyListResult {
  /** Results of the list operation. */
  value?: AuthorizationPolicyResourceFormat[];
  /** Link to the next set of results. */
  nextLink?: string;
}

/** The response of list connector operation. */
export interface ConnectorListResult {
  /** Results of the list operation. */
  value?: ConnectorResourceFormat[];
  /** Link to the next set of results. */
  nextLink?: string;
}

/** The connector mapping properties. */
export interface ConnectorMappingProperties {
  /** The folder path for the mapping. */
  folderPath?: string;
  /** The file filter for the mapping. */
  fileFilter?: string;
  /** If the file contains a header or not. */
  hasHeader?: boolean;
  /** The error management setting for the mapping. */
  errorManagement: ConnectorMappingErrorManagement;
  /** The format of mapping property. */
  format: ConnectorMappingFormat;
  /** The availability of mapping property. */
  availability: ConnectorMappingAvailability;
  /** Ingestion mapping information at property level. */
  structure: ConnectorMappingStructure[];
  /** The operation after import is done. */
  completeOperation: ConnectorMappingCompleteOperation;
}

/** The error management. */
export interface ConnectorMappingErrorManagement {
  /** The type of error management to use for the mapping. */
  errorManagementType: ErrorManagementTypes;
  /** The error limit allowed while importing data. */
  errorLimit?: number;
}

/** Connector mapping property format. */
export interface ConnectorMappingFormat {
  /** The type mapping format. */
  formatType: "TextFormat";
  /** The character that signifies a break between columns. */
  columnDelimiter?: string;
  /** The oData language. */
  acceptLanguage?: string;
  /** Quote character, used to indicate enquoted fields. */
  quoteCharacter?: string;
  /** Escape character for quotes, can be the same as the quoteCharacter. */
  quoteEscapeCharacter?: string;
  /** Character separating array elements. */
  arraySeparator?: string;
}

/** Connector mapping property availability. */
export interface ConnectorMappingAvailability {
  /** The frequency to update. */
  frequency?: FrequencyTypes;
  /** The interval of the given frequency to use. */
  interval: number;
}

/** Connector mapping property structure. */
export interface ConnectorMappingStructure {
  /** The property name of the mapping entity. */
  propertyName: string;
  /** The column name of the import file. */
  columnName: string;
  /** Custom format specifier for input parsing. */
  customFormatSpecifier?: string;
  /** Indicates if the column is encrypted. */
  isEncrypted?: boolean;
}

/** The complete operation. */
export interface ConnectorMappingCompleteOperation {
  /** The type of completion operation. */
  completionOperationType?: CompletionOperationTypes;
  /** The destination folder where files will be moved to once the import is done. */
  destinationFolder?: string;
}

/** The response of list connector mapping operation. */
export interface ConnectorMappingListResult {
  /** Results of the list operation. */
  value?: ConnectorMappingResourceFormat[];
  /** Link to the next set of results. */
  nextLink?: string;
}

/** The response of list KPI operation. */
export interface KpiListResult {
  /** Results of the list operation. */
  value?: KpiResourceFormat[];
  /** Link to the next set of results. */
  nextLink?: string;
}

/** The response of list widget type operation. */
export interface WidgetTypeListResult {
  /** Results of the list operation. */
  value?: WidgetTypeResourceFormat[];
  /** Link to the next set of results. */
  nextLink?: string;
}

/** The response of list view operation. */
export interface ViewListResult {
  /** Results of the list operation. */
  value?: ViewResourceFormat[];
  /** Link to the next set of results. */
  nextLink?: string;
}

/** Metadata for a Link's property mapping. */
export interface TypePropertiesMapping {
  /**  Property name on the source Entity Type. */
  sourcePropertyName: string;
  /** Property name on the target Entity Type. */
  targetPropertyName: string;
  /** Link type. */
  linkType?: LinkTypes;
}

/** The response of list link operation. */
export interface LinkListResult {
  /** Results of the list operation. */
  value?: LinkResourceFormat[];
  /** Link to the next set of results. */
  nextLink?: string;
}

/** The response of list role assignment operation. */
export interface RoleListResult {
  /** Results of the list operation. */
  value?: RoleResourceFormat[];
  /** Link to the next set of results. */
  nextLink?: string;
}

/** The response of list role assignment operation. */
export interface RoleAssignmentListResult {
  /** Results of the list operation. */
  value?: RoleAssignmentResourceFormat[];
  /** Link to the next set of results. */
  nextLink?: string;
}

/** The AssignmentPrincipal */
export interface AssignmentPrincipal {
  /** The principal id being assigned to. */
  principalId: string;
  /** The Type of the principal ID. */
  principalType: string;
  /** Other metadata for the principal. */
  principalMetadata?: { [propertyName: string]: string };
}

/** The resource set description. */
export interface ResourceSetDescription {
  /** The elements included in the set. */
  elements?: string[];
  /** The elements that are not included in the set, in case elements contains '*' indicating 'all'. */
  exceptions?: string[];
}

/** Input type for getting image upload url. */
export interface GetImageUploadUrlInput {
  /** Type of entity. Can be Profile or Interaction. */
  entityType?: string;
  /** Name of the entity type. */
  entityTypeName?: string;
  /** Relative path of the image. */
  relativePath?: string;
}

/** The image definition. */
export interface ImageDefinition {
  /** Whether image exists already. */
  imageExists?: boolean;
  /** Content URL for the image blob. */
  contentUrl?: string;
  /** Relative path of the image. */
  relativePath?: string;
}

/** Definition of the link mapping of prediction. */
export interface PredictionMappings {
  /** The score of the link mapping. */
  score: string;
  /** The grade of the link mapping. */
  grade: string;
  /** The reason of the link mapping. */
  reason: string;
}

/** The definition of a prediction grade. */
export interface PredictionGradesItem {
  /** Name of the grade. */
  gradeName?: string;
  /** Minimum score threshold. */
  minScoreThreshold?: number;
  /** Maximum score threshold. */
  maxScoreThreshold?: number;
}

/** System generated entities. */
export interface PredictionSystemGeneratedEntities {
  /** Generated interaction types. */
  generatedInteractionTypes?: string[];
  /** Generated links. */
  generatedLinks?: string[];
  /** Generated KPIs. */
  generatedKpis?: { [propertyName: string]: string };
}

/** The training results of the prediction. */
export interface PredictionTrainingResults {
  /**
   * The hub name.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly tenantId?: string;
  /**
   * Score name.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly scoreName?: string;
  /**
   * Prediction distribution.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly predictionDistribution?: PredictionDistributionDefinition;
  /**
   * Canonical profiles.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly canonicalProfiles?: CanonicalProfileDefinition[];
  /**
   * Instance count of the primary profile.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly primaryProfileInstanceCount?: number;
}

/** The definition of the prediction distribution. */
export interface PredictionDistributionDefinition {
  /** Total positive in the distribution. */
  totalPositives?: number;
  /** Total negatives in the distribution. */
  totalNegatives?: number;
  /** Distributions of the prediction. */
  distributions?: PredictionDistributionDefinitionDistributionsItem[];
}

/** The definition of a prediction distribution. */
export interface PredictionDistributionDefinitionDistributionsItem {
  /** Score threshold. */
  scoreThreshold?: number;
  /** Number of positives. */
  positives?: number;
  /** Number of negatives. */
  negatives?: number;
  /** Number of positives above threshold. */
  positivesAboveThreshold?: number;
  /** Number of negatives above threshold. */
  negativesAboveThreshold?: number;
}

/** Definition of canonical profile. */
export interface CanonicalProfileDefinition {
  /** Canonical profile ID. */
  canonicalProfileId?: number;
  /** Properties of the canonical profile. */
  properties?: CanonicalProfileDefinitionPropertiesItem[];
}

/** The definition of a canonical profile property. */
export interface CanonicalProfileDefinitionPropertiesItem {
  /** Profile name. */
  profileName?: string;
  /** Property name of profile. */
  profilePropertyName?: string;
  /** The rank. */
  rank?: number;
  /** Type of canonical property value. */
  type?: CanonicalPropertyValueType;
  /** Value of the canonical property. */
  value?: string;
}

/** The prediction model status. */
export interface PredictionModelStatus {
  /**
   * The hub name.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly tenantId?: string;
  /**
   * The prediction name.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly predictionName?: string;
  /**
   * The prediction GUID ID.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly predictionGuidId?: string;
  /** Prediction model life cycle.  When prediction is in PendingModelConfirmation status, it is allowed to update the status to PendingFeaturing or Active through API. */
  status: PredictionModelLifeCycle;
  /**
   * The model status message.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly message?: string;
  /**
   * Count of the training set.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly trainingSetCount?: number;
  /**
   * Count of the test set.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly testSetCount?: number;
  /**
   * Count of the validation set.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly validationSetCount?: number;
  /**
   * The training accuracy.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly trainingAccuracy?: number;
  /**
   * The signals used.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly signalsUsed?: number;
  /**
   * Version of the model.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly modelVersion?: string;
}

/** The response of list predictions operation. */
export interface PredictionListResult {
  /** Results of the list operation. */
  value?: PredictionResourceFormat[];
  /** Link to the next set of results. */
  nextLink?: string;
}

/** Salesforce discover setting. */
export interface SalesforceDiscoverSetting {
  /** The salesforce connection string secret URL. */
  salesforceConnectionStringSecretUrl: string;
}

/** Salesforce table. */
export interface SalesforceTable {
  /** Indicating whether this instance is profile. */
  isProfile?: string;
  /** The table category. */
  tableCategory: string;
  /** The name of the table. */
  tableName: string;
  /** The table remarks. */
  tableRemarks?: string;
  /** The table schema. */
  tableSchema: string;
}

/** The Salesforce connector properties. */
export interface SalesforceConnectorProperties {
  /** The user settings. */
  usersetting: SalesforceDiscoverSetting;
  /** The Salesforce tables. */
  salesforcetables: SalesforceTable[];
}

/** The Azure Blob connector properties. */
export interface AzureBlobConnectorProperties {
  /** The connection KeyVault URL. */
  connectionKeyVaultUrl: string;
}

/** The CRM connector properties. */
export interface CrmConnectorProperties {
  /** The connection string. */
  connectionString?: string;
  /** The organization ID. */
  organizationId: string;
  /** The organization URL. */
  organizationUrl: string;
  /** The entities like account, contact, opportunity. */
  entities: CrmConnectorEntities[];
  /** The access token. */
  accessToken?: string;
}

/** The CRM connector entities. */
export interface CrmConnectorEntities {
  /** The logical name. */
  logicalName: string;
  /** The display name. */
  displayName?: string;
  /** Indicating whether this is profile. */
  isProfile?: boolean;
}

/** Hub resource. */
export interface Hub extends Resource {
  /**
   * API endpoint URL of the hub.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly apiEndpoint?: string;
  /**
   * Web endpoint URL of the hub.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly webEndpoint?: string;
  /**
   * Provisioning state of the hub.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly provisioningState?: string;
  /** The bit flags for enabled hub features. Bit 0 is set to 1 indicates graph is enabled, or disabled if set to 0. Bit 1 is set to 1 indicates the hub is disabled, or enabled if set to 0. */
  tenantFeatures?: number;
  /** Billing settings of the hub. */
  hubBillingInfo?: HubBillingInfoFormat;
}

/** Describes an entity. */
export interface EntityTypeDefinition extends MetadataDefinitionBase {
  /** The api entity set name. This becomes the odata entity set name for the entity Type being referred in this object. */
  apiEntitySetName?: string;
  /** Type of entity. */
  entityType?: EntityTypes;
  /** The properties of the Profile. */
  fields?: PropertyDefinition[];
  /** The instance count. */
  instancesCount?: number;
  /**
   * The last changed time for the type definition.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly lastChangedUtc?: Date;
  /**
   * Provisioning state.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly provisioningState?: ProvisioningStates;
  /** The schema org link. This helps ACI identify and suggest semantic models. */
  schemaItemTypeLink?: string;
  /**
   * The hub name.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly tenantId?: string;
  /** The timestamp property name. Represents the time when the interaction or profile update happened. */
  timestampFieldName?: string;
  /** The name of the entity. */
  typeName?: string;
}

/** The profile resource format. */
export interface ProfileResourceFormat extends ProxyResource {
  /** The attributes for the Type. */
  attributes?: { [propertyName: string]: string[] };
  /** Localized descriptions for the property. */
  description?: { [propertyName: string]: string };
  /** Localized display names for the property. */
  displayName?: { [propertyName: string]: string };
  /** Any custom localized attributes for the Type. */
  localizedAttributes?: {
    [propertyName: string]: { [propertyName: string]: string };
  };
  /** Small Image associated with the Property or EntityType. */
  smallImage?: string;
  /** Medium Image associated with the Property or EntityType. */
  mediumImage?: string;
  /** Large Image associated with the Property or EntityType. */
  largeImage?: string;
  /** The api entity set name. This becomes the odata entity set name for the entity Type being referred in this object. */
  apiEntitySetName?: string;
  /** Type of entity. */
  entityType?: EntityTypes;
  /** The properties of the Profile. */
  fields?: PropertyDefinition[];
  /** The instance count. */
  instancesCount?: number;
  /**
   * The last changed time for the type definition.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly lastChangedUtc?: Date;
  /**
   * Provisioning state.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly provisioningState?: ProvisioningStates;
  /** The schema org link. This helps ACI identify and suggest semantic models. */
  schemaItemTypeLink?: string;
  /**
   * The hub name.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly tenantId?: string;
  /** The timestamp property name. Represents the time when the interaction or profile update happened. */
  timestampFieldName?: string;
  /** The name of the entity. */
  typeName?: string;
  /** The strong IDs. */
  strongIds?: StrongId[];
}

/** The interaction resource format. */
export interface InteractionResourceFormat extends ProxyResource {
  /** The attributes for the Type. */
  attributes?: { [propertyName: string]: string[] };
  /** Localized descriptions for the property. */
  description?: { [propertyName: string]: string };
  /** Localized display names for the property. */
  displayName?: { [propertyName: string]: string };
  /** Any custom localized attributes for the Type. */
  localizedAttributes?: {
    [propertyName: string]: { [propertyName: string]: string };
  };
  /** Small Image associated with the Property or EntityType. */
  smallImage?: string;
  /** Medium Image associated with the Property or EntityType. */
  mediumImage?: string;
  /** Large Image associated with the Property or EntityType. */
  largeImage?: string;
  /** The api entity set name. This becomes the odata entity set name for the entity Type being referred in this object. */
  apiEntitySetName?: string;
  /** Type of entity. */
  entityType?: EntityTypes;
  /** The properties of the Profile. */
  fields?: PropertyDefinition[];
  /** The instance count. */
  instancesCount?: number;
  /**
   * The last changed time for the type definition.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly lastChangedUtc?: Date;
  /**
   * Provisioning state.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly provisioningState?: ProvisioningStates;
  /** The schema org link. This helps ACI identify and suggest semantic models. */
  schemaItemTypeLink?: string;
  /**
   * The hub name.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly tenantId?: string;
  /** The timestamp property name. Represents the time when the interaction or profile update happened. */
  timestampFieldName?: string;
  /** The name of the entity. */
  typeName?: string;
  /** The id property names. Properties which uniquely identify an interaction instance. */
  idPropertyNames?: string[];
  /** Profiles that participated in the interaction. */
  participantProfiles?: Participant[];
  /** The primary participant property name for an interaction ,This is used to logically represent the agent of the interaction, Specify the participant name here from ParticipantName. */
  primaryParticipantProfilePropertyName?: string;
  /**
   * This is specific to interactions modeled as activities. Data sources are used to determine where data is stored and also in precedence rules.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly dataSourcePrecedenceRules?: DataSourcePrecedence[];
  /** An interaction can be tagged as an activity only during create. This enables the interaction to be editable and can enable merging of properties from multiple data sources based on precedence, which is defined at a link level. */
  isActivity?: boolean;
  /**
   * The data source name
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly namePropertiesDefaultDataSourceName?: string;
  /**
   * The data source type.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly dataSourceType?: DataSourceType;
  /**
   * The data source status.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly status?: Status;
  /**
   * The data source ID.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly idPropertiesDefaultDataSourceId?: number;
  /**
   * The data source reference id.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly dataSourceReferenceId?: string;
}

/** The relationship resource format. */
export interface RelationshipResourceFormat extends ProxyResource {
  /** The Relationship Cardinality. */
  cardinality?: CardinalityTypes;
  /** Localized display name for the Relationship. */
  displayName?: { [propertyName: string]: string };
  /** Localized descriptions for the Relationship. */
  description?: { [propertyName: string]: string };
  /** The expiry date time in UTC. */
  expiryDateTimeUtc?: Date;
  /** The properties of the Relationship. */
  fields?: PropertyDefinition[];
  /** Optional property to be used to map fields in profile to their strong ids in related profile. */
  lookupMappings?: RelationshipTypeMapping[];
  /** Profile type. */
  profileType?: string;
  /**
   * Provisioning state.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly provisioningState?: ProvisioningStates;
  /**
   * The Relationship name.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly relationshipName?: string;
  /** Related profile being referenced. */
  relatedProfileType?: string;
  /**
   * The relationship guid id.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly relationshipGuidId?: string;
  /**
   * The hub name.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly tenantId?: string;
}

/** The relationship link resource format. */
export interface RelationshipLinkResourceFormat extends ProxyResource {
  /** Localized display name for the Relationship Link. */
  displayName?: { [propertyName: string]: string };
  /** Localized descriptions for the Relationship Link. */
  description?: { [propertyName: string]: string };
  /** The InteractionType associated with the Relationship Link. */
  interactionType?: string;
  /**
   * The name of the Relationship Link.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly linkName?: string;
  /** The mappings between Interaction and Relationship fields. */
  mappings?: RelationshipLinkFieldMapping[];
  /** The property references for the Profile of the Relationship. */
  profilePropertyReferences?: ParticipantProfilePropertyReference[];
  /**
   * Provisioning state.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly provisioningState?: ProvisioningStates;
  /** The property references for the Related Profile of the Relationship. */
  relatedProfilePropertyReferences?: ParticipantProfilePropertyReference[];
  /** The Relationship associated with the Link. */
  relationshipName?: string;
  /**
   * The relationship guid id.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly relationshipGuidId?: string;
  /**
   * The hub name.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly tenantId?: string;
}

/** The authorization policy resource format. */
export interface AuthorizationPolicyResourceFormat extends ProxyResource {
  /**
   * Name of the policy.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly policyName?: string;
  /** The permissions associated with the policy. */
  permissions?: PermissionTypes[];
  /** Primary key associated with the policy. */
  primaryKey?: string;
  /** Secondary key associated with the policy. */
  secondaryKey?: string;
}

/** The connector resource format. */
export interface ConnectorResourceFormat extends ProxyResource {
  /**
   * ID of the connector.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly connectorId?: number;
  /** Name of the connector. */
  connectorName?: string;
  /** Type of connector. */
  connectorType?: ConnectorTypes;
  /** Display name of the connector. */
  displayName?: string;
  /** Description of the connector. */
  description?: string;
  /** The connector properties. */
  connectorProperties?: { [propertyName: string]: Record<string, unknown> };
  /**
   * The created time.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly created?: Date;
  /**
   * The last modified time.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly lastModified?: Date;
  /**
   * State of connector.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly state?: ConnectorStates;
  /**
   * The hub name.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly tenantId?: string;
  /** If this is an internal connector. */
  isInternal?: boolean;
}

/** The connector mapping resource format. */
export interface ConnectorMappingResourceFormat extends ProxyResource {
  /**
   * The connector name.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly connectorName?: string;
  /** Type of connector. */
  connectorType?: ConnectorTypes;
  /**
   * The created time.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly created?: Date;
  /**
   * The last modified time.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly lastModified?: Date;
  /** Defines which entity type the file should map to. */
  entityType?: EntityTypes;
  /** The mapping entity name. */
  entityTypeName?: string;
  /**
   * The connector mapping name
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly connectorMappingName?: string;
  /** Display name for the connector mapping. */
  displayName?: string;
  /** The description of the connector mapping. */
  description?: string;
  /**
   * The DataFormat ID.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly dataFormatId?: string;
  /** The properties of the mapping. */
  mappingProperties?: ConnectorMappingProperties;
  /**
   * The next run time based on customer's settings.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly nextRunTime?: Date;
  /**
   * The RunId.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly runId?: string;
  /**
   * State of connector mapping.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly state?: ConnectorMappingStates;
  /**
   * The hub name.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly tenantId?: string;
}

/** The KPI resource format. */
export interface KpiResourceFormat extends ProxyResource {
  /** The mapping entity type. */
  entityType?: EntityTypes;
  /** The mapping entity name. */
  entityTypeName?: string;
  /**
   * The hub name.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly tenantId?: string;
  /**
   * The KPI name.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly kpiName?: string;
  /** Localized display name for the KPI. */
  displayName?: { [propertyName: string]: string };
  /** Localized description for the KPI. */
  description?: { [propertyName: string]: string };
  /** The calculation window. */
  calculationWindow?: CalculationWindowTypes;
  /** Name of calculation window field. */
  calculationWindowFieldName?: string;
  /** The computation function for the KPI. */
  function?: KpiFunctions;
  /** The computation expression for the KPI. */
  expression?: string;
  /** The unit of measurement for the KPI. */
  unit?: string;
  /** The filter expression for the KPI. */
  filter?: string;
  /** the group by properties for the KPI. */
  groupBy?: string[];
  /**
   * The KPI GroupByMetadata.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly groupByMetadata?: KpiGroupByMetadata[];
  /**
   * The participant profiles.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly participantProfilesMetadata?: KpiParticipantProfilesMetadata[];
  /**
   * Provisioning state.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly provisioningState?: ProvisioningStates;
  /** The KPI thresholds. */
  thresHolds?: KpiThresholds;
  /** The aliases. */
  aliases?: KpiAlias[];
  /** The KPI extracts. */
  extracts?: KpiExtract[];
}

/** The WidgetTypeResourceFormat */
export interface WidgetTypeResourceFormat extends ProxyResource {
  /**
   * Name of the widget type.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly widgetTypeName?: string;
  /** Definition for widget type. */
  definition?: string;
  /** Description for widget type. */
  description?: string;
  /** Localized display name for the widget type. */
  displayName?: { [propertyName: string]: string };
  /** The image URL. */
  imageUrl?: string;
  /**
   * The hub name.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly tenantId?: string;
  /** The widget version. */
  widgetVersion?: string;
  /**
   * Date time when widget type was last modified.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly changed?: Date;
  /**
   * Date time when widget type was created.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly created?: Date;
}

/** The view resource format. */
export interface ViewResourceFormat extends ProxyResource {
  /**
   * Name of the view.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly viewName?: string;
  /** the user ID. */
  userId?: string;
  /**
   * the hub name.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly tenantId?: string;
  /** Localized display name for the view. */
  displayName?: { [propertyName: string]: string };
  /** View definition. */
  definition?: string;
  /**
   * Date time when view was last modified.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly changed?: Date;
  /**
   * Date time when view was created.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly created?: Date;
}

/** The link resource format. */
export interface LinkResourceFormat extends ProxyResource {
  /**
   * The hub name.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly tenantId?: string;
  /**
   * The link name.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly linkName?: string;
  /** Type of source entity. */
  sourceEntityType?: EntityType;
  /** Type of target entity. */
  targetEntityType?: EntityType;
  /** Name of the source Entity Type. */
  sourceEntityTypeName?: string;
  /** Name of the target Entity Type. */
  targetEntityTypeName?: string;
  /** Localized display name for the Link. */
  displayName?: { [propertyName: string]: string };
  /** Localized descriptions for the Link. */
  description?: { [propertyName: string]: string };
  /** The set of properties mappings between the source and target Types. */
  mappings?: TypePropertiesMapping[];
  /** The properties that represent the participating profile. */
  participantPropertyReferences?: ParticipantPropertyReference[];
  /**
   * Provisioning state.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly provisioningState?: ProvisioningStates;
  /** Indicating whether the link is reference only link. This flag is ignored if the Mappings are defined. If the mappings are not defined and it is set to true, links processing will not create or update profiles. */
  referenceOnly?: boolean;
  /** Determines whether this link is supposed to create or delete instances if Link is NOT Reference Only. */
  operationType?: InstanceOperationType;
}

/** The role resource format. */
export interface RoleResourceFormat extends ProxyResource {
  /** The role name. */
  roleName?: string;
  /** The description of the role. */
  description?: string;
}

/** The Role Assignment resource format. */
export interface RoleAssignmentResourceFormat extends ProxyResource {
  /**
   * The hub name.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly tenantId?: string;
  /**
   * The name of the metadata object.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly assignmentName?: string;
  /** Localized display names for the metadata. */
  displayName?: { [propertyName: string]: string };
  /** Localized description for the metadata. */
  description?: { [propertyName: string]: string };
  /**
   * Provisioning state.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly provisioningState?: ProvisioningStates;
  /** Type of roles. */
  role?: RoleTypes;
  /** The principals being assigned to. */
  principals?: AssignmentPrincipal[];
  /** Profiles set for the assignment. */
  profiles?: ResourceSetDescription;
  /** Interactions set for the assignment. */
  interactions?: ResourceSetDescription;
  /** Links set for the assignment. */
  links?: ResourceSetDescription;
  /** Kpis set for the assignment. */
  kpis?: ResourceSetDescription;
  /** Sas Policies set for the assignment. */
  sasPolicies?: ResourceSetDescription;
  /** Connectors set for the assignment. */
  connectors?: ResourceSetDescription;
  /** Views set for the assignment. */
  views?: ResourceSetDescription;
  /** The Role assignments set for the relationship links. */
  relationshipLinks?: ResourceSetDescription;
  /** The Role assignments set for the relationships. */
  relationships?: ResourceSetDescription;
  /** Widget types set for the assignment. */
  widgetTypes?: ResourceSetDescription;
  /** The Role assignments set for the assignment. */
  roleAssignments?: ResourceSetDescription;
  /** Widget types set for the assignment. */
  conflationPolicies?: ResourceSetDescription;
  /** The Role assignments set for the assignment. */
  segments?: ResourceSetDescription;
}

/** The prediction resource format. */
export interface PredictionResourceFormat extends ProxyResource {
  /** Description of the prediction. */
  description?: { [propertyName: string]: string };
  /** Display name of the prediction. */
  displayName?: { [propertyName: string]: string };
  /** Interaction types involved in the prediction. */
  involvedInteractionTypes?: string[];
  /** KPI types involved in the prediction. */
  involvedKpiTypes?: string[];
  /** Relationships involved in the prediction. */
  involvedRelationships?: string[];
  /** Negative outcome expression. */
  negativeOutcomeExpression?: string;
  /** Positive outcome expression. */
  positiveOutcomeExpression?: string;
  /** Primary profile type. */
  primaryProfileType?: string;
  /**
   * Provisioning state.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly provisioningState?: ProvisioningStates;
  /** Name of the prediction. */
  predictionName?: string;
  /** Scope expression. */
  scopeExpression?: string;
  /**
   * The hub name.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly tenantId?: string;
  /** Whether do auto analyze. */
  autoAnalyze?: boolean;
  /** Definition of the link mapping of prediction. */
  mappings?: PredictionMappings;
  /** Score label. */
  scoreLabel?: string;
  /** The prediction grades. */
  grades?: PredictionGradesItem[];
  /**
   * System generated entities.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly systemGeneratedEntities?: PredictionSystemGeneratedEntities;
}

/** The enriching KPI definition. */
export interface EnrichingKpi extends KpiDefinition {}

/** The profile type definition. */
export interface ProfileTypeDefinition extends EntityTypeDefinition {
  /** The strong IDs. */
  strongIds?: StrongId[];
}

/** The Interaction Type Definition */
export interface InteractionTypeDefinition extends EntityTypeDefinition {
  /** The id property names. Properties which uniquely identify an interaction instance. */
  idPropertyNames?: string[];
  /** Profiles that participated in the interaction. */
  participantProfiles?: Participant[];
  /** The primary participant property name for an interaction ,This is used to logically represent the agent of the interaction, Specify the participant name here from ParticipantName. */
  primaryParticipantProfilePropertyName?: string;
  /**
   * This is specific to interactions modeled as activities. Data sources are used to determine where data is stored and also in precedence rules.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly dataSourcePrecedenceRules?: DataSourcePrecedence[];
  /** An interaction can be tagged as an activity only during create. This enables the interaction to be editable and can enable merging of properties from multiple data sources based on precedence, which is defined at a link level. */
  isActivity?: boolean;
  /**
   * The data source name
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly name?: string;
  /**
   * The data source type.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly dataSourceType?: DataSourceType;
  /**
   * The data source status.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly status?: Status;
  /**
   * The data source ID.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly id?: number;
  /**
   * The data source reference id.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly dataSourceReferenceId?: string;
}

/** Known values of {@link DataSourceType} that the service accepts. */
export enum KnownDataSourceType {
  /** Connector */
  Connector = "Connector",
  /** LinkInteraction */
  LinkInteraction = "LinkInteraction",
  /** SystemDefault */
  SystemDefault = "SystemDefault"
}

/**
 * Defines values for DataSourceType. \
 * {@link KnownDataSourceType} can be used interchangeably with DataSourceType,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **Connector** \
 * **LinkInteraction** \
 * **SystemDefault**
 */
export type DataSourceType = string;

/** Known values of {@link Status} that the service accepts. */
export enum KnownStatus {
  /** None */
  None = "None",
  /** Active */
  Active = "Active",
  /** Deleted */
  Deleted = "Deleted"
}

/**
 * Defines values for Status. \
 * {@link KnownStatus} can be used interchangeably with Status,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **None** \
 * **Active** \
 * **Deleted**
 */
export type Status = string;

/** Known values of {@link ProvisioningStates} that the service accepts. */
export enum KnownProvisioningStates {
  /** Provisioning */
  Provisioning = "Provisioning",
  /** Succeeded */
  Succeeded = "Succeeded",
  /** Expiring */
  Expiring = "Expiring",
  /** Deleting */
  Deleting = "Deleting",
  /** HumanIntervention */
  HumanIntervention = "HumanIntervention",
  /** Failed */
  Failed = "Failed"
}

/**
 * Defines values for ProvisioningStates. \
 * {@link KnownProvisioningStates} can be used interchangeably with ProvisioningStates,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **Provisioning** \
 * **Succeeded** \
 * **Expiring** \
 * **Deleting** \
 * **HumanIntervention** \
 * **Failed**
 */
export type ProvisioningStates = string;

/** Known values of {@link ConnectorTypes} that the service accepts. */
export enum KnownConnectorTypes {
  /** None */
  None = "None",
  /** CRM */
  CRM = "CRM",
  /** AzureBlob */
  AzureBlob = "AzureBlob",
  /** Salesforce */
  Salesforce = "Salesforce",
  /** ExchangeOnline */
  ExchangeOnline = "ExchangeOnline",
  /** Outbound */
  Outbound = "Outbound"
}

/**
 * Defines values for ConnectorTypes. \
 * {@link KnownConnectorTypes} can be used interchangeably with ConnectorTypes,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **None** \
 * **CRM** \
 * **AzureBlob** \
 * **Salesforce** \
 * **ExchangeOnline** \
 * **Outbound**
 */
export type ConnectorTypes = string;

/** Known values of {@link CanonicalPropertyValueType} that the service accepts. */
export enum KnownCanonicalPropertyValueType {
  /** Numeric */
  Numeric = "Numeric",
  /** Categorical */
  Categorical = "Categorical",
  /** DerivedCategorical */
  DerivedCategorical = "DerivedCategorical",
  /** DerivedNumeric */
  DerivedNumeric = "DerivedNumeric"
}

/**
 * Defines values for CanonicalPropertyValueType. \
 * {@link KnownCanonicalPropertyValueType} can be used interchangeably with CanonicalPropertyValueType,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **Numeric** \
 * **Categorical** \
 * **DerivedCategorical** \
 * **DerivedNumeric**
 */
export type CanonicalPropertyValueType = string;

/** Known values of {@link PredictionModelLifeCycle} that the service accepts. */
export enum KnownPredictionModelLifeCycle {
  /** New */
  New = "New",
  /** Provisioning */
  Provisioning = "Provisioning",
  /** ProvisioningFailed */
  ProvisioningFailed = "ProvisioningFailed",
  /** PendingDiscovering */
  PendingDiscovering = "PendingDiscovering",
  /** Discovering */
  Discovering = "Discovering",
  /** PendingFeaturing */
  PendingFeaturing = "PendingFeaturing",
  /** Featuring */
  Featuring = "Featuring",
  /** FeaturingFailed */
  FeaturingFailed = "FeaturingFailed",
  /** PendingTraining */
  PendingTraining = "PendingTraining",
  /** Training */
  Training = "Training",
  /** TrainingFailed */
  TrainingFailed = "TrainingFailed",
  /** Evaluating */
  Evaluating = "Evaluating",
  /** EvaluatingFailed */
  EvaluatingFailed = "EvaluatingFailed",
  /** PendingModelConfirmation */
  PendingModelConfirmation = "PendingModelConfirmation",
  /** Active */
  Active = "Active",
  /** Deleted */
  Deleted = "Deleted",
  /** HumanIntervention */
  HumanIntervention = "HumanIntervention",
  /** Failed */
  Failed = "Failed"
}

/**
 * Defines values for PredictionModelLifeCycle. \
 * {@link KnownPredictionModelLifeCycle} can be used interchangeably with PredictionModelLifeCycle,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **New** \
 * **Provisioning** \
 * **ProvisioningFailed** \
 * **PendingDiscovering** \
 * **Discovering** \
 * **PendingFeaturing** \
 * **Featuring** \
 * **FeaturingFailed** \
 * **PendingTraining** \
 * **Training** \
 * **TrainingFailed** \
 * **Evaluating** \
 * **EvaluatingFailed** \
 * **PendingModelConfirmation** \
 * **Active** \
 * **Deleted** \
 * **HumanIntervention** \
 * **Failed**
 */
export type PredictionModelLifeCycle = string;
/** Defines values for EntityTypes. */
export type EntityTypes = "None" | "Profile" | "Interaction" | "Relationship";
/** Defines values for CalculationWindowTypes. */
export type CalculationWindowTypes =
  | "Lifetime"
  | "Hour"
  | "Day"
  | "Week"
  | "Month";
/** Defines values for KpiFunctions. */
export type KpiFunctions =
  | "Sum"
  | "Avg"
  | "Min"
  | "Max"
  | "Last"
  | "Count"
  | "None"
  | "CountDistinct";
/** Defines values for CardinalityTypes. */
export type CardinalityTypes = "OneToOne" | "OneToMany" | "ManyToMany";
/** Defines values for LinkTypes. */
export type LinkTypes = "UpdateAlways" | "CopyIfNull";
/** Defines values for PermissionTypes. */
export type PermissionTypes = "Read" | "Write" | "Manage";
/** Defines values for ConnectorStates. */
export type ConnectorStates =
  | "Creating"
  | "Created"
  | "Ready"
  | "Expiring"
  | "Deleting"
  | "Failed";
/** Defines values for ErrorManagementTypes. */
export type ErrorManagementTypes =
  | "RejectAndContinue"
  | "StopImport"
  | "RejectUntilLimit";
/** Defines values for FrequencyTypes. */
export type FrequencyTypes = "Minute" | "Hour" | "Day" | "Week" | "Month";
/** Defines values for CompletionOperationTypes. */
export type CompletionOperationTypes = "DoNothing" | "DeleteFile" | "MoveFile";
/** Defines values for ConnectorMappingStates. */
export type ConnectorMappingStates =
  | "Creating"
  | "Created"
  | "Failed"
  | "Ready"
  | "Running"
  | "Stopped"
  | "Expiring";
/** Defines values for EntityType. */
export type EntityType = "None" | "Profile" | "Interaction" | "Relationship";
/** Defines values for InstanceOperationType. */
export type InstanceOperationType = "Upsert" | "Delete";
/** Defines values for RoleTypes. */
export type RoleTypes =
  | "Admin"
  | "Reader"
  | "ManageAdmin"
  | "ManageReader"
  | "DataAdmin"
  | "DataReader";

/** Optional parameters. */
export interface OperationsListOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the list operation. */
export type OperationsListResponse = OperationListResult;

/** Optional parameters. */
export interface OperationsListNextOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the listNext operation. */
export type OperationsListNextResponse = OperationListResult;

/** Optional parameters. */
export interface HubsCreateOrUpdateOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the createOrUpdate operation. */
export type HubsCreateOrUpdateResponse = Hub;

/** Optional parameters. */
export interface HubsUpdateOptionalParams extends coreClient.OperationOptions {}

/** Contains response data for the update operation. */
export type HubsUpdateResponse = Hub;

/** Optional parameters. */
export interface HubsDeleteOptionalParams extends coreClient.OperationOptions {
  /** Delay to wait until next poll, in milliseconds. */
  updateIntervalInMs?: number;
  /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */
  resumeFrom?: string;
}

/** Optional parameters. */
export interface HubsGetOptionalParams extends coreClient.OperationOptions {}

/** Contains response data for the get operation. */
export type HubsGetResponse = Hub;

/** Optional parameters. */
export interface HubsListByResourceGroupOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the listByResourceGroup operation. */
export type HubsListByResourceGroupResponse = HubListResult;

/** Optional parameters. */
export interface HubsListOptionalParams extends coreClient.OperationOptions {}

/** Contains response data for the list operation. */
export type HubsListResponse = HubListResult;

/** Optional parameters. */
export interface HubsListByResourceGroupNextOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the listByResourceGroupNext operation. */
export type HubsListByResourceGroupNextResponse = HubListResult;

/** Optional parameters. */
export interface HubsListNextOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the listNext operation. */
export type HubsListNextResponse = HubListResult;

/** Optional parameters. */
export interface ProfilesCreateOrUpdateOptionalParams
  extends coreClient.OperationOptions {
  /** Delay to wait until next poll, in milliseconds. */
  updateIntervalInMs?: number;
  /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */
  resumeFrom?: string;
}

/** Contains response data for the createOrUpdate operation. */
export type ProfilesCreateOrUpdateResponse = ProfileResourceFormat;

/** Optional parameters. */
export interface ProfilesGetOptionalParams extends coreClient.OperationOptions {
  /** Locale of profile to retrieve, default is en-us. */
  localeCode?: string;
}

/** Contains response data for the get operation. */
export type ProfilesGetResponse = ProfileResourceFormat;

/** Optional parameters. */
export interface ProfilesDeleteOptionalParams
  extends coreClient.OperationOptions {
  /** Locale of profile to retrieve, default is en-us. */
  localeCode?: string;
  /** Delay to wait until next poll, in milliseconds. */
  updateIntervalInMs?: number;
  /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */
  resumeFrom?: string;
}

/** Optional parameters. */
export interface ProfilesListByHubOptionalParams
  extends coreClient.OperationOptions {
  /** Locale of profile to retrieve, default is en-us. */
  localeCode?: string;
}

/** Contains response data for the listByHub operation. */
export type ProfilesListByHubResponse = ProfileListResult;

/** Optional parameters. */
export interface ProfilesGetEnrichingKpisOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the getEnrichingKpis operation. */
export type ProfilesGetEnrichingKpisResponse = KpiDefinition[];

/** Optional parameters. */
export interface ProfilesListByHubNextOptionalParams
  extends coreClient.OperationOptions {
  /** Locale of profile to retrieve, default is en-us. */
  localeCode?: string;
}

/** Contains response data for the listByHubNext operation. */
export type ProfilesListByHubNextResponse = ProfileListResult;

/** Optional parameters. */
export interface InteractionsCreateOrUpdateOptionalParams
  extends coreClient.OperationOptions {
  /** Delay to wait until next poll, in milliseconds. */
  updateIntervalInMs?: number;
  /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */
  resumeFrom?: string;
}

/** Contains response data for the createOrUpdate operation. */
export type InteractionsCreateOrUpdateResponse = InteractionResourceFormat;

/** Optional parameters. */
export interface InteractionsGetOptionalParams
  extends coreClient.OperationOptions {
  /** Locale of interaction to retrieve, default is en-us. */
  localeCode?: string;
}

/** Contains response data for the get operation. */
export type InteractionsGetResponse = InteractionResourceFormat;

/** Optional parameters. */
export interface InteractionsListByHubOptionalParams
  extends coreClient.OperationOptions {
  /** Locale of interaction to retrieve, default is en-us. */
  localeCode?: string;
}

/** Contains response data for the listByHub operation. */
export type InteractionsListByHubResponse = InteractionListResult;

/** Optional parameters. */
export interface InteractionsSuggestRelationshipLinksOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the suggestRelationshipLinks operation. */
export type InteractionsSuggestRelationshipLinksResponse = SuggestRelationshipLinksResponse;

/** Optional parameters. */
export interface InteractionsListByHubNextOptionalParams
  extends coreClient.OperationOptions {
  /** Locale of interaction to retrieve, default is en-us. */
  localeCode?: string;
}

/** Contains response data for the listByHubNext operation. */
export type InteractionsListByHubNextResponse = InteractionListResult;

/** Optional parameters. */
export interface RelationshipsCreateOrUpdateOptionalParams
  extends coreClient.OperationOptions {
  /** Delay to wait until next poll, in milliseconds. */
  updateIntervalInMs?: number;
  /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */
  resumeFrom?: string;
}

/** Contains response data for the createOrUpdate operation. */
export type RelationshipsCreateOrUpdateResponse = RelationshipResourceFormat;

/** Optional parameters. */
export interface RelationshipsGetOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the get operation. */
export type RelationshipsGetResponse = RelationshipResourceFormat;

/** Optional parameters. */
export interface RelationshipsDeleteOptionalParams
  extends coreClient.OperationOptions {
  /** Delay to wait until next poll, in milliseconds. */
  updateIntervalInMs?: number;
  /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */
  resumeFrom?: string;
}

/** Optional parameters. */
export interface RelationshipsListByHubOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the listByHub operation. */
export type RelationshipsListByHubResponse = RelationshipListResult;

/** Optional parameters. */
export interface RelationshipsListByHubNextOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the listByHubNext operation. */
export type RelationshipsListByHubNextResponse = RelationshipListResult;

/** Optional parameters. */
export interface RelationshipLinksCreateOrUpdateOptionalParams
  extends coreClient.OperationOptions {
  /** Delay to wait until next poll, in milliseconds. */
  updateIntervalInMs?: number;
  /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */
  resumeFrom?: string;
}

/** Contains response data for the createOrUpdate operation. */
export type RelationshipLinksCreateOrUpdateResponse = RelationshipLinkResourceFormat;

/** Optional parameters. */
export interface RelationshipLinksGetOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the get operation. */
export type RelationshipLinksGetResponse = RelationshipLinkResourceFormat;

/** Optional parameters. */
export interface RelationshipLinksDeleteOptionalParams
  extends coreClient.OperationOptions {
  /** Delay to wait until next poll, in milliseconds. */
  updateIntervalInMs?: number;
  /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */
  resumeFrom?: string;
}

/** Optional parameters. */
export interface RelationshipLinksListByHubOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the listByHub operation. */
export type RelationshipLinksListByHubResponse = RelationshipLinkListResult;

/** Optional parameters. */
export interface RelationshipLinksListByHubNextOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the listByHubNext operation. */
export type RelationshipLinksListByHubNextResponse = RelationshipLinkListResult;

/** Optional parameters. */
export interface AuthorizationPoliciesCreateOrUpdateOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the createOrUpdate operation. */
export type AuthorizationPoliciesCreateOrUpdateResponse = AuthorizationPolicyResourceFormat;

/** Optional parameters. */
export interface AuthorizationPoliciesGetOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the get operation. */
export type AuthorizationPoliciesGetResponse = AuthorizationPolicyResourceFormat;

/** Optional parameters. */
export interface AuthorizationPoliciesListByHubOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the listByHub operation. */
export type AuthorizationPoliciesListByHubResponse = AuthorizationPolicyListResult;

/** Optional parameters. */
export interface AuthorizationPoliciesRegeneratePrimaryKeyOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the regeneratePrimaryKey operation. */
export type AuthorizationPoliciesRegeneratePrimaryKeyResponse = AuthorizationPolicy;

/** Optional parameters. */
export interface AuthorizationPoliciesRegenerateSecondaryKeyOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the regenerateSecondaryKey operation. */
export type AuthorizationPoliciesRegenerateSecondaryKeyResponse = AuthorizationPolicy;

/** Optional parameters. */
export interface AuthorizationPoliciesListByHubNextOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the listByHubNext operation. */
export type AuthorizationPoliciesListByHubNextResponse = AuthorizationPolicyListResult;

/** Optional parameters. */
export interface ConnectorsCreateOrUpdateOptionalParams
  extends coreClient.OperationOptions {
  /** Delay to wait until next poll, in milliseconds. */
  updateIntervalInMs?: number;
  /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */
  resumeFrom?: string;
}

/** Contains response data for the createOrUpdate operation. */
export type ConnectorsCreateOrUpdateResponse = ConnectorResourceFormat;

/** Optional parameters. */
export interface ConnectorsGetOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the get operation. */
export type ConnectorsGetResponse = ConnectorResourceFormat;

/** Optional parameters. */
export interface ConnectorsDeleteOptionalParams
  extends coreClient.OperationOptions {
  /** Delay to wait until next poll, in milliseconds. */
  updateIntervalInMs?: number;
  /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */
  resumeFrom?: string;
}

/** Optional parameters. */
export interface ConnectorsListByHubOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the listByHub operation. */
export type ConnectorsListByHubResponse = ConnectorListResult;

/** Optional parameters. */
export interface ConnectorsListByHubNextOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the listByHubNext operation. */
export type ConnectorsListByHubNextResponse = ConnectorListResult;

/** Optional parameters. */
export interface ConnectorMappingsCreateOrUpdateOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the createOrUpdate operation. */
export type ConnectorMappingsCreateOrUpdateResponse = ConnectorMappingResourceFormat;

/** Optional parameters. */
export interface ConnectorMappingsGetOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the get operation. */
export type ConnectorMappingsGetResponse = ConnectorMappingResourceFormat;

/** Optional parameters. */
export interface ConnectorMappingsDeleteOptionalParams
  extends coreClient.OperationOptions {}

/** Optional parameters. */
export interface ConnectorMappingsListByConnectorOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the listByConnector operation. */
export type ConnectorMappingsListByConnectorResponse = ConnectorMappingListResult;

/** Optional parameters. */
export interface ConnectorMappingsListByConnectorNextOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the listByConnectorNext operation. */
export type ConnectorMappingsListByConnectorNextResponse = ConnectorMappingListResult;

/** Optional parameters. */
export interface KpiCreateOrUpdateOptionalParams
  extends coreClient.OperationOptions {
  /** Delay to wait until next poll, in milliseconds. */
  updateIntervalInMs?: number;
  /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */
  resumeFrom?: string;
}

/** Contains response data for the createOrUpdate operation. */
export type KpiCreateOrUpdateResponse = KpiResourceFormat;

/** Optional parameters. */
export interface KpiGetOptionalParams extends coreClient.OperationOptions {}

/** Contains response data for the get operation. */
export type KpiGetResponse = KpiResourceFormat;

/** Optional parameters. */
export interface KpiDeleteOptionalParams extends coreClient.OperationOptions {
  /** Delay to wait until next poll, in milliseconds. */
  updateIntervalInMs?: number;
  /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */
  resumeFrom?: string;
}

/** Optional parameters. */
export interface KpiReprocessOptionalParams
  extends coreClient.OperationOptions {}

/** Optional parameters. */
export interface KpiListByHubOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the listByHub operation. */
export type KpiListByHubResponse = KpiListResult;

/** Optional parameters. */
export interface KpiListByHubNextOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the listByHubNext operation. */
export type KpiListByHubNextResponse = KpiListResult;

/** Optional parameters. */
export interface WidgetTypesListByHubOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the listByHub operation. */
export type WidgetTypesListByHubResponse = WidgetTypeListResult;

/** Optional parameters. */
export interface WidgetTypesGetOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the get operation. */
export type WidgetTypesGetResponse = WidgetTypeResourceFormat;

/** Optional parameters. */
export interface WidgetTypesListByHubNextOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the listByHubNext operation. */
export type WidgetTypesListByHubNextResponse = WidgetTypeListResult;

/** Optional parameters. */
export interface ViewsListByHubOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the listByHub operation. */
export type ViewsListByHubResponse = ViewListResult;

/** Optional parameters. */
export interface ViewsCreateOrUpdateOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the createOrUpdate operation. */
export type ViewsCreateOrUpdateResponse = ViewResourceFormat;

/** Optional parameters. */
export interface ViewsGetOptionalParams extends coreClient.OperationOptions {}

/** Contains response data for the get operation. */
export type ViewsGetResponse = ViewResourceFormat;

/** Optional parameters. */
export interface ViewsDeleteOptionalParams
  extends coreClient.OperationOptions {}

/** Optional parameters. */
export interface ViewsListByHubNextOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the listByHubNext operation. */
export type ViewsListByHubNextResponse = ViewListResult;

/** Optional parameters. */
export interface LinksCreateOrUpdateOptionalParams
  extends coreClient.OperationOptions {
  /** Delay to wait until next poll, in milliseconds. */
  updateIntervalInMs?: number;
  /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */
  resumeFrom?: string;
}

/** Contains response data for the createOrUpdate operation. */
export type LinksCreateOrUpdateResponse = LinkResourceFormat;

/** Optional parameters. */
export interface LinksGetOptionalParams extends coreClient.OperationOptions {}

/** Contains response data for the get operation. */
export type LinksGetResponse = LinkResourceFormat;

/** Optional parameters. */
export interface LinksDeleteOptionalParams
  extends coreClient.OperationOptions {}

/** Optional parameters. */
export interface LinksListByHubOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the listByHub operation. */
export type LinksListByHubResponse = LinkListResult;

/** Optional parameters. */
export interface LinksListByHubNextOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the listByHubNext operation. */
export type LinksListByHubNextResponse = LinkListResult;

/** Optional parameters. */
export interface RolesListByHubOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the listByHub operation. */
export type RolesListByHubResponse = RoleListResult;

/** Optional parameters. */
export interface RolesListByHubNextOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the listByHubNext operation. */
export type RolesListByHubNextResponse = RoleListResult;

/** Optional parameters. */
export interface RoleAssignmentsListByHubOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the listByHub operation. */
export type RoleAssignmentsListByHubResponse = RoleAssignmentListResult;

/** Optional parameters. */
export interface RoleAssignmentsCreateOrUpdateOptionalParams
  extends coreClient.OperationOptions {
  /** Delay to wait until next poll, in milliseconds. */
  updateIntervalInMs?: number;
  /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */
  resumeFrom?: string;
}

/** Contains response data for the createOrUpdate operation. */
export type RoleAssignmentsCreateOrUpdateResponse = RoleAssignmentResourceFormat;

/** Optional parameters. */
export interface RoleAssignmentsGetOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the get operation. */
export type RoleAssignmentsGetResponse = RoleAssignmentResourceFormat;

/** Optional parameters. */
export interface RoleAssignmentsDeleteOptionalParams
  extends coreClient.OperationOptions {}

/** Optional parameters. */
export interface RoleAssignmentsListByHubNextOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the listByHubNext operation. */
export type RoleAssignmentsListByHubNextResponse = RoleAssignmentListResult;

/** Optional parameters. */
export interface ImagesGetUploadUrlForEntityTypeOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the getUploadUrlForEntityType operation. */
export type ImagesGetUploadUrlForEntityTypeResponse = ImageDefinition;

/** Optional parameters. */
export interface ImagesGetUploadUrlForDataOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the getUploadUrlForData operation. */
export type ImagesGetUploadUrlForDataResponse = ImageDefinition;

/** Optional parameters. */
export interface PredictionsCreateOrUpdateOptionalParams
  extends coreClient.OperationOptions {
  /** Delay to wait until next poll, in milliseconds. */
  updateIntervalInMs?: number;
  /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */
  resumeFrom?: string;
}

/** Contains response data for the createOrUpdate operation. */
export type PredictionsCreateOrUpdateResponse = PredictionResourceFormat;

/** Optional parameters. */
export interface PredictionsGetOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the get operation. */
export type PredictionsGetResponse = PredictionResourceFormat;

/** Optional parameters. */
export interface PredictionsDeleteOptionalParams
  extends coreClient.OperationOptions {
  /** Delay to wait until next poll, in milliseconds. */
  updateIntervalInMs?: number;
  /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */
  resumeFrom?: string;
}

/** Optional parameters. */
export interface PredictionsGetTrainingResultsOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the getTrainingResults operation. */
export type PredictionsGetTrainingResultsResponse = PredictionTrainingResults;

/** Optional parameters. */
export interface PredictionsGetModelStatusOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the getModelStatus operation. */
export type PredictionsGetModelStatusResponse = PredictionModelStatus;

/** Optional parameters. */
export interface PredictionsModelStatusOptionalParams
  extends coreClient.OperationOptions {}

/** Optional parameters. */
export interface PredictionsListByHubOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the listByHub operation. */
export type PredictionsListByHubResponse = PredictionListResult;

/** Optional parameters. */
export interface PredictionsListByHubNextOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the listByHubNext operation. */
export type PredictionsListByHubNextResponse = PredictionListResult;

/** Optional parameters. */
export interface CustomerInsightsManagementClientOptionalParams
  extends coreClient.ServiceClientOptions {
  /** server parameter */
  $host?: string;
  /** Api Version */
  apiVersion?: string;
  /** Overrides client endpoint. */
  endpoint?: string;
}
