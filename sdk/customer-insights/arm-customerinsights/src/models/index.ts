/*
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is
 * regenerated.
 */

import { BaseResource, CloudError, AzureServiceClientOptions } from "@azure/ms-rest-azure-js";
import * as msRest from "@azure/ms-rest-js";

export { BaseResource, CloudError };


/**
 * @interface
 * An interface representing HubBillingInfoFormat.
 * Hub billing info.
 *
 */
export interface HubBillingInfoFormat {
  /**
   * @member {string} [skuName] The sku name.
   */
  skuName?: string;
  /**
   * @member {number} [minUnits] The minimum number of units will be billed.
   * One unit is 10,000 Profiles and 100,000 Interactions.
   */
  minUnits?: number;
  /**
   * @member {number} [maxUnits] The maximum number of units can be used.  One
   * unit is 10,000 Profiles and 100,000 Interactions.
   */
  maxUnits?: number;
}

/**
 * @interface
 * An interface representing Resource.
 * Common properties of Azure resource.
 *
 * @extends BaseResource
 */
export interface Resource extends BaseResource {
  /**
   * @member {string} [id] Resource ID.
   * **NOTE: This property will not be serialized. It can only be populated by
   * the server.**
   */
  readonly id?: string;
  /**
   * @member {string} [name] Resource name.
   * **NOTE: This property will not be serialized. It can only be populated by
   * the server.**
   */
  readonly name?: string;
  /**
   * @member {string} [type] Resource type.
   * **NOTE: This property will not be serialized. It can only be populated by
   * the server.**
   */
  readonly type?: string;
  /**
   * @member {string} [location] Resource location.
   */
  location?: string;
  /**
   * @member {{ [propertyName: string]: string }} [tags] Resource tags.
   */
  tags?: { [propertyName: string]: string };
}

/**
 * @interface
 * An interface representing Hub.
 * Hub resource.
 *
 * @extends Resource
 */
export interface Hub extends Resource {
  /**
   * @member {string} [apiEndpoint] API endpoint URL of the hub.
   * **NOTE: This property will not be serialized. It can only be populated by
   * the server.**
   */
  readonly apiEndpoint?: string;
  /**
   * @member {string} [webEndpoint] Web endpoint URL of the hub.
   * **NOTE: This property will not be serialized. It can only be populated by
   * the server.**
   */
  readonly webEndpoint?: string;
  /**
   * @member {string} [provisioningState] Provisioning state of the hub.
   * **NOTE: This property will not be serialized. It can only be populated by
   * the server.**
   */
  readonly provisioningState?: string;
  /**
   * @member {number} [tenantFeatures] The bit flags for enabled hub features.
   * Bit 0 is set to 1 indicates graph is enabled, or disabled if set to 0. Bit
   * 1 is set to 1 indicates the hub is disabled, or enabled if set to 0.
   */
  tenantFeatures?: number;
  /**
   * @member {HubBillingInfoFormat} [hubBillingInfo] Billing settings of the
   * hub.
   */
  hubBillingInfo?: HubBillingInfoFormat;
}

/**
 * @interface
 * An interface representing MetadataDefinitionBase.
 * The Metadata definition base.
 *
 */
export interface MetadataDefinitionBase {
  /**
   * @member {{ [propertyName: string]: string[] }} [attributes] The attributes
   * for the Type.
   */
  attributes?: { [propertyName: string]: string[] };
  /**
   * @member {{ [propertyName: string]: string }} [description] Localized
   * descriptions for the property.
   */
  description?: { [propertyName: string]: string };
  /**
   * @member {{ [propertyName: string]: string }} [displayName] Localized
   * display names for the property.
   */
  displayName?: { [propertyName: string]: string };
  /**
   * @member {{ [propertyName: string]: { [propertyName: string]: string } }}
   * [localizedAttributes] Any custom localized attributes for the Type.
   */
  localizedAttributes?: { [propertyName: string]: { [propertyName: string]: string } };
  /**
   * @member {string} [smallImage] Small Image associated with the Property or
   * EntityType.
   */
  smallImage?: string;
  /**
   * @member {string} [mediumImage] Medium Image associated with the Property
   * or EntityType.
   */
  mediumImage?: string;
  /**
   * @member {string} [largeImage] Large Image associated with the Property or
   * EntityType.
   */
  largeImage?: string;
}

/**
 * @interface
 * An interface representing ProfileEnumValidValuesFormat.
 * Valid enum values in case of an enum property.
 *
 */
export interface ProfileEnumValidValuesFormat {
  /**
   * @member {number} [value] The integer value of the enum member.
   */
  value?: number;
  /**
   * @member {{ [propertyName: string]: string }} [localizedValueNames]
   * Localized names of the enum member.
   */
  localizedValueNames?: { [propertyName: string]: string };
}

/**
 * @interface
 * An interface representing DataSourcePrecedence.
 * The data source precedence is a way to know the precedence of each data
 * source.
 *
 */
export interface DataSourcePrecedence {
  /**
   * @member {string} [name] The data source name
   * **NOTE: This property will not be serialized. It can only be populated by
   * the server.**
   */
  readonly name?: string;
  /**
   * @member {DataSourceType} [dataSourceType] The data source type. Possible
   * values include: 'Connector', 'LinkInteraction', 'SystemDefault'
   * **NOTE: This property will not be serialized. It can only be populated by
   * the server.**
   */
  readonly dataSourceType?: DataSourceType;
  /**
   * @member {Status} [status] The data source status. Possible values include:
   * 'None', 'Active', 'Deleted'
   * **NOTE: This property will not be serialized. It can only be populated by
   * the server.**
   */
  readonly status?: Status;
  /**
   * @member {number} [id] The data source ID.
   * **NOTE: This property will not be serialized. It can only be populated by
   * the server.**
   */
  readonly id?: number;
  /**
   * @member {string} [dataSourceReferenceId] The data source reference id.
   * **NOTE: This property will not be serialized. It can only be populated by
   * the server.**
   */
  readonly dataSourceReferenceId?: string;
  /**
   * @member {number} [precedence] the precedence value.
   */
  precedence?: number;
}

/**
 * @interface
 * An interface representing PropertyDefinition.
 * Property definition.
 *
 */
export interface PropertyDefinition {
  /**
   * @member {string} [arrayValueSeparator] Array value separator for
   * properties with isArray set.
   */
  arrayValueSeparator?: string;
  /**
   * @member {ProfileEnumValidValuesFormat[]} [enumValidValues] Describes valid
   * values for an enum property.
   */
  enumValidValues?: ProfileEnumValidValuesFormat[];
  /**
   * @member {string} fieldName Name of the property.
   */
  fieldName: string;
  /**
   * @member {string} fieldType Type of the property.
   */
  fieldType: string;
  /**
   * @member {boolean} [isArray] Indicates if the property is actually an array
   * of the fieldType above on the data api.
   */
  isArray?: boolean;
  /**
   * @member {boolean} [isEnum] Indicates if the property is an enum.
   */
  isEnum?: boolean;
  /**
   * @member {boolean} [isFlagEnum] Indicates if the property is an flag enum.
   */
  isFlagEnum?: boolean;
  /**
   * @member {boolean} [isImage] Whether the property is an Image.
   */
  isImage?: boolean;
  /**
   * @member {boolean} [isLocalizedString] Whether the property is a localized
   * string.
   */
  isLocalizedString?: boolean;
  /**
   * @member {boolean} [isName] Whether the property is a name or a part of
   * name.
   */
  isName?: boolean;
  /**
   * @member {boolean} [isRequired] Whether property value is required on
   * instances, IsRequired field only for Intercation. Profile Instance will
   * not check for required field.
   */
  isRequired?: boolean;
  /**
   * @member {string} [propertyId] The ID associated with the property.
   */
  propertyId?: string;
  /**
   * @member {string} [schemaItemPropLink] URL encoded schema.org item prop
   * link for the property.
   */
  schemaItemPropLink?: string;
  /**
   * @member {number} [maxLength] Max length of string. Used only if type is
   * string.
   */
  maxLength?: number;
  /**
   * @member {boolean} [isAvailableInGraph] Whether property is available in
   * graph or not.
   */
  isAvailableInGraph?: boolean;
  /**
   * @member {DataSourcePrecedence[]} [dataSourcePrecedenceRules] This is
   * specific to interactions modeled as activities. Data sources are used to
   * determine where data is stored and also in precedence rules.
   * **NOTE: This property will not be serialized. It can only be populated by
   * the server.**
   */
  readonly dataSourcePrecedenceRules?: DataSourcePrecedence[];
}

/**
 * @interface
 * An interface representing EntityTypeDefinition.
 * Describes an entity.
 *
 * @extends MetadataDefinitionBase
 */
export interface EntityTypeDefinition extends MetadataDefinitionBase {
  /**
   * @member {string} [apiEntitySetName] The api entity set name. This becomes
   * the odata entity set name for the entity Type being refered in this
   * object.
   */
  apiEntitySetName?: string;
  /**
   * @member {EntityTypes} [entityType] Type of entity. Possible values
   * include: 'None', 'Profile', 'Interaction', 'Relationship'
   */
  entityType?: EntityTypes;
  /**
   * @member {PropertyDefinition[]} [fields] The properties of the Profile.
   */
  fields?: PropertyDefinition[];
  /**
   * @member {number} [instancesCount] The instance count.
   */
  instancesCount?: number;
  /**
   * @member {Date} [lastChangedUtc] The last changed time for the type
   * definition.
   * **NOTE: This property will not be serialized. It can only be populated by
   * the server.**
   */
  readonly lastChangedUtc?: Date;
  /**
   * @member {ProvisioningStates} [provisioningState] Provisioning state.
   * Possible values include: 'Provisioning', 'Succeeded', 'Expiring',
   * 'Deleting', 'HumanIntervention', 'Failed'
   * **NOTE: This property will not be serialized. It can only be populated by
   * the server.**
   */
  readonly provisioningState?: ProvisioningStates;
  /**
   * @member {string} [schemaItemTypeLink] The schema org link. This helps ACI
   * identify and suggest semantic models.
   */
  schemaItemTypeLink?: string;
  /**
   * @member {string} [tenantId] The hub name.
   * **NOTE: This property will not be serialized. It can only be populated by
   * the server.**
   */
  readonly tenantId?: string;
  /**
   * @member {string} [timestampFieldName] The timestamp property name.
   * Represents the time when the interaction or profile update happened.
   */
  timestampFieldName?: string;
  /**
   * @member {string} [typeName] The name of the entity.
   */
  typeName?: string;
}

/**
 * @interface
 * An interface representing AuthorizationPolicy.
 * The authorization policy.
 *
 */
export interface AuthorizationPolicy {
  /**
   * @member {string} [policyName] Name of the policy.
   * **NOTE: This property will not be serialized. It can only be populated by
   * the server.**
   */
  readonly policyName?: string;
  /**
   * @member {PermissionTypes[]} permissions The permissions associated with
   * the policy.
   */
  permissions: PermissionTypes[];
  /**
   * @member {string} [primaryKey] Primary key assiciated with the policy.
   */
  primaryKey?: string;
  /**
   * @member {string} [secondaryKey] Secondary key assiciated with the policy.
   */
  secondaryKey?: string;
}

/**
 * @interface
 * An interface representing SalesforceDiscoverSetting.
 * Salesforce discover setting.
 *
 */
export interface SalesforceDiscoverSetting {
  /**
   * @member {string} salesforceConnectionStringSecretUrl The salesforce
   * connection string secret URL.
   */
  salesforceConnectionStringSecretUrl: string;
}

/**
 * @interface
 * An interface representing SalesforceTable.
 * Salesforce table.
 *
 */
export interface SalesforceTable {
  /**
   * @member {string} [isProfile] Indicating whether this instance is profile.
   */
  isProfile?: string;
  /**
   * @member {string} tableCategory The table category.
   */
  tableCategory: string;
  /**
   * @member {string} tableName The name of the table.
   */
  tableName: string;
  /**
   * @member {string} [tableRemarks] The table remarks.
   */
  tableRemarks?: string;
  /**
   * @member {string} tableSchema The table schema.
   */
  tableSchema: string;
}

/**
 * @interface
 * An interface representing SalesforceConnectorProperties.
 * The Salesforce connector properties.
 *
 */
export interface SalesforceConnectorProperties {
  /**
   * @member {SalesforceDiscoverSetting} usersetting The user settings.
   */
  usersetting: SalesforceDiscoverSetting;
  /**
   * @member {SalesforceTable[]} salesforcetables The Salesforce tables.
   */
  salesforcetables: SalesforceTable[];
}

/**
 * @interface
 * An interface representing AzureBlobConnectorProperties.
 * The Azure Blob connector properties.
 *
 */
export interface AzureBlobConnectorProperties {
  /**
   * @member {string} connectionKeyVaultUrl The connection KeyVault URL.
   */
  connectionKeyVaultUrl: string;
}

/**
 * @interface
 * An interface representing CrmConnectorEntities.
 * The CRM connector entities.
 *
 */
export interface CrmConnectorEntities {
  /**
   * @member {string} logicalName The logical name.
   */
  logicalName: string;
  /**
   * @member {string} [displayName] The display name.
   */
  displayName?: string;
  /**
   * @member {boolean} [isProfile] Indicating whether this is profile.
   */
  isProfile?: boolean;
}

/**
 * @interface
 * An interface representing CrmConnectorProperties.
 * The CRM connector properties.
 *
 */
export interface CrmConnectorProperties {
  /**
   * @member {string} [connectionString] The connection string.
   */
  connectionString?: string;
  /**
   * @member {string} organizationId The organization ID.
   */
  organizationId: string;
  /**
   * @member {string} organizationUrl The organization URL.
   */
  organizationUrl: string;
  /**
   * @member {CrmConnectorEntities[]} entities The entities like account,
   * contact, opportunity.
   */
  entities: CrmConnectorEntities[];
  /**
   * @member {string} [accessToken] The access token.
   */
  accessToken?: string;
}

/**
 * @interface
 * An interface representing ConnectorMappingErrorManagement.
 * The error mangement.
 *
 */
export interface ConnectorMappingErrorManagement {
  /**
   * @member {ErrorManagementTypes} errorManagementType The type of error
   * management to use for the mapping. Possible values include:
   * 'RejectAndContinue', 'StopImport', 'RejectUntilLimit'
   */
  errorManagementType: ErrorManagementTypes;
  /**
   * @member {number} [errorLimit] The error limit allowed while importing
   * data.
   */
  errorLimit?: number;
}

/**
 * @interface
 * An interface representing ConnectorMappingFormat.
 * Connector mapping property format.
 *
 */
export interface ConnectorMappingFormat {
  /**
   * @member {string} [columnDelimiter] The character that signifies a break
   * between columns.
   */
  columnDelimiter?: string;
  /**
   * @member {string} [acceptLanguage] The oData language.
   */
  acceptLanguage?: string;
  /**
   * @member {string} [quoteCharacter] Quote character, used to indicate
   * enquoted fields.
   */
  quoteCharacter?: string;
  /**
   * @member {string} [quoteEscapeCharacter] Escape character for quotes, can
   * be the same as the quoteCharacter.
   */
  quoteEscapeCharacter?: string;
  /**
   * @member {string} [arraySeparator] Character separating array elements.
   */
  arraySeparator?: string;
}

/**
 * @interface
 * An interface representing ConnectorMappingAvailability.
 * Connector mapping property availability.
 *
 */
export interface ConnectorMappingAvailability {
  /**
   * @member {FrequencyTypes} [frequency] The frequency to update. Possible
   * values include: 'Minute', 'Hour', 'Day', 'Week', 'Month'
   */
  frequency?: FrequencyTypes;
  /**
   * @member {number} interval The interval of the given frequency to use.
   */
  interval: number;
}

/**
 * @interface
 * An interface representing ConnectorMappingStructure.
 * Connector mapping property structure.
 *
 */
export interface ConnectorMappingStructure {
  /**
   * @member {string} propertyName The property name of the mapping entity.
   */
  propertyName: string;
  /**
   * @member {string} columnName The column name of the import file.
   */
  columnName: string;
  /**
   * @member {string} [customFormatSpecifier] Custom format specifier for input
   * parsing.
   */
  customFormatSpecifier?: string;
  /**
   * @member {boolean} [isEncrypted] Indicates if the column is encrypted.
   */
  isEncrypted?: boolean;
}

/**
 * @interface
 * An interface representing ConnectorMappingCompleteOperation.
 * The complete operation.
 *
 */
export interface ConnectorMappingCompleteOperation {
  /**
   * @member {CompletionOperationTypes} [completionOperationType] The type of
   * completion operation. Possible values include: 'DoNothing', 'DeleteFile',
   * 'MoveFile'
   */
  completionOperationType?: CompletionOperationTypes;
  /**
   * @member {string} [destinationFolder] The destination folder where files
   * will be moved to once the import is done.
   */
  destinationFolder?: string;
}

/**
 * @interface
 * An interface representing ConnectorMappingProperties.
 * The connector mapping properties.
 *
 */
export interface ConnectorMappingProperties {
  /**
   * @member {string} [folderPath] The folder path for the mapping.
   */
  folderPath?: string;
  /**
   * @member {string} [fileFilter] The file filter for the mapping.
   */
  fileFilter?: string;
  /**
   * @member {boolean} [hasHeader] If the file contains a header or not.
   */
  hasHeader?: boolean;
  /**
   * @member {ConnectorMappingErrorManagement} errorManagement The error
   * management setting for the mapping.
   */
  errorManagement: ConnectorMappingErrorManagement;
  /**
   * @member {ConnectorMappingFormat} format The format of mapping property.
   */
  format: ConnectorMappingFormat;
  /**
   * @member {ConnectorMappingAvailability} availability The availability of
   * mapping property.
   */
  availability: ConnectorMappingAvailability;
  /**
   * @member {ConnectorMappingStructure[]} structure Ingestion mapping
   * information at property level.
   */
  structure: ConnectorMappingStructure[];
  /**
   * @member {ConnectorMappingCompleteOperation} completeOperation The
   * operation after import is done.
   */
  completeOperation: ConnectorMappingCompleteOperation;
}

/**
 * @interface
 * An interface representing KpiThresholds.
 * Defines the KPI Threshold limits.
 *
 */
export interface KpiThresholds {
  /**
   * @member {number} lowerLimit The lower threshold limit.
   */
  lowerLimit: number;
  /**
   * @member {number} upperLimit The upper threshold limit.
   */
  upperLimit: number;
  /**
   * @member {boolean} increasingKpi Whether or not the KPI is an increasing
   * KPI.
   */
  increasingKpi: boolean;
}

/**
 * @interface
 * An interface representing KpiGroupByMetadata.
 * The KPI GroupBy field metadata.
 *
 */
export interface KpiGroupByMetadata {
  /**
   * @member {{ [propertyName: string]: string }} [displayName] The display
   * name.
   */
  displayName?: { [propertyName: string]: string };
  /**
   * @member {string} [fieldName] The name of the field.
   */
  fieldName?: string;
  /**
   * @member {string} [fieldType] The type of the field.
   */
  fieldType?: string;
}

/**
 * @interface
 * An interface representing KpiParticipantProfilesMetadata.
 * The KPI participant profile metadata.
 *
 */
export interface KpiParticipantProfilesMetadata {
  /**
   * @member {string} typeName Name of the type.
   */
  typeName: string;
}

/**
 * @interface
 * An interface representing KpiAlias.
 * The KPI alias.
 *
 */
export interface KpiAlias {
  /**
   * @member {string} aliasName KPI alias name.
   */
  aliasName: string;
  /**
   * @member {string} expression The expression.
   */
  expression: string;
}

/**
 * @interface
 * An interface representing KpiExtract.
 * The KPI extract.
 *
 */
export interface KpiExtract {
  /**
   * @member {string} extractName KPI extract name.
   */
  extractName: string;
  /**
   * @member {string} expression The expression.
   */
  expression: string;
}

/**
 * @interface
 * An interface representing KpiDefinition.
 * Defines the KPI Threshold limits.
 *
 */
export interface KpiDefinition {
  /**
   * @member {EntityTypes} entityType The mapping entity type. Possible values
   * include: 'None', 'Profile', 'Interaction', 'Relationship'
   */
  entityType: EntityTypes;
  /**
   * @member {string} entityTypeName The mapping entity name.
   */
  entityTypeName: string;
  /**
   * @member {string} [tenantId] The hub name.
   * **NOTE: This property will not be serialized. It can only be populated by
   * the server.**
   */
  readonly tenantId?: string;
  /**
   * @member {string} [kpiName] The KPI name.
   * **NOTE: This property will not be serialized. It can only be populated by
   * the server.**
   */
  readonly kpiName?: string;
  /**
   * @member {{ [propertyName: string]: string }} [displayName] Localized
   * display name for the KPI.
   */
  displayName?: { [propertyName: string]: string };
  /**
   * @member {{ [propertyName: string]: string }} [description] Localized
   * description for the KPI.
   */
  description?: { [propertyName: string]: string };
  /**
   * @member {CalculationWindowTypes} calculationWindow The calculation window.
   * Possible values include: 'Lifetime', 'Hour', 'Day', 'Week', 'Month'
   */
  calculationWindow: CalculationWindowTypes;
  /**
   * @member {string} [calculationWindowFieldName] Name of calculation window
   * field.
   */
  calculationWindowFieldName?: string;
  /**
   * @member {KpiFunctions} functionProperty The computation function for the
   * KPI. Possible values include: 'Sum', 'Avg', 'Min', 'Max', 'Last', 'Count',
   * 'None', 'CountDistinct'
   */
  functionProperty: KpiFunctions;
  /**
   * @member {string} expression The computation expression for the KPI.
   */
  expression: string;
  /**
   * @member {string} [unit] The unit of measurement for the KPI.
   */
  unit?: string;
  /**
   * @member {string} [filter] The filter expression for the KPI.
   */
  filter?: string;
  /**
   * @member {string[]} [groupBy] the group by properties for the KPI.
   */
  groupBy?: string[];
  /**
   * @member {KpiGroupByMetadata[]} [groupByMetadata] The KPI GroupByMetadata.
   * **NOTE: This property will not be serialized. It can only be populated by
   * the server.**
   */
  readonly groupByMetadata?: KpiGroupByMetadata[];
  /**
   * @member {KpiParticipantProfilesMetadata[]} [participantProfilesMetadata]
   * The participant profiles.
   * **NOTE: This property will not be serialized. It can only be populated by
   * the server.**
   */
  readonly participantProfilesMetadata?: KpiParticipantProfilesMetadata[];
  /**
   * @member {ProvisioningStates} [provisioningState] Provisioning state.
   * Possible values include: 'Provisioning', 'Succeeded', 'Expiring',
   * 'Deleting', 'HumanIntervention', 'Failed'
   * **NOTE: This property will not be serialized. It can only be populated by
   * the server.**
   */
  readonly provisioningState?: ProvisioningStates;
  /**
   * @member {KpiThresholds} [thresHolds] The KPI thresholds.
   */
  thresHolds?: KpiThresholds;
  /**
   * @member {KpiAlias[]} [aliases] The aliases.
   */
  aliases?: KpiAlias[];
  /**
   * @member {KpiExtract[]} [extracts] The KPI extracts.
   */
  extracts?: KpiExtract[];
}

/**
 * @interface
 * An interface representing ProxyResource.
 * Common properties of proxy resource.
 *
 * @extends BaseResource
 */
export interface ProxyResource extends BaseResource {
  /**
   * @member {string} [id] Resource ID.
   * **NOTE: This property will not be serialized. It can only be populated by
   * the server.**
   */
  readonly id?: string;
  /**
   * @member {string} [name] Resource name.
   * **NOTE: This property will not be serialized. It can only be populated by
   * the server.**
   */
  readonly name?: string;
  /**
   * @member {string} [type] Resource type.
   * **NOTE: This property will not be serialized. It can only be populated by
   * the server.**
   */
  readonly type?: string;
}

/**
 * @interface
 * An interface representing TypePropertiesMapping.
 * Metadata for a Link's property mapping.
 *
 */
export interface TypePropertiesMapping {
  /**
   * @member {string} sourcePropertyName Property name on the source Entity
   * Type.
   */
  sourcePropertyName: string;
  /**
   * @member {string} targetPropertyName Property name on the target Entity
   * Type.
   */
  targetPropertyName: string;
  /**
   * @member {LinkTypes} [linkType] Link type. Possible values include:
   * 'UpdateAlways', 'CopyIfNull'
   */
  linkType?: LinkTypes;
}

/**
 * @interface
 * An interface representing ParticipantPropertyReference.
 * The participant property reference.
 *
 */
export interface ParticipantPropertyReference {
  /**
   * @member {string} sourcePropertyName The source property that maps to the
   * target property.
   */
  sourcePropertyName: string;
  /**
   * @member {string} targetPropertyName The target property that maps to the
   * source property.
   */
  targetPropertyName: string;
}

/**
 * @interface
 * An interface representing RelationshipTypeFieldMapping.
 * Map a field of profile to its corresponding StrongId in Related Profile.
 *
 */
export interface RelationshipTypeFieldMapping {
  /**
   * @member {string} profileFieldName Specifies the fieldName in profile.
   */
  profileFieldName: string;
  /**
   * @member {string} relatedProfileKeyProperty Specifies the KeyProperty (from
   * StrongId) of the related profile.
   */
  relatedProfileKeyProperty: string;
}

/**
 * @interface
 * An interface representing RelationshipTypeMapping.
 * Maps fields in Profile to their corresponding StrongIds in Related Profile.
 *
 */
export interface RelationshipTypeMapping {
  /**
   * @member {RelationshipTypeFieldMapping[]} fieldMappings Maps a profile
   * property with the StrongId of related profile. This is an array to support
   * StrongIds that are composite key as well.
   */
  fieldMappings: RelationshipTypeFieldMapping[];
}

/**
 * @interface
 * An interface representing RelationshipLinkFieldMapping.
 * The fields mapping for Relationships.
 *
 */
export interface RelationshipLinkFieldMapping {
  /**
   * @member {string} interactionFieldName The field name on the Interaction
   * Type.
   */
  interactionFieldName: string;
  /**
   * @member {LinkTypes} [linkType] Link type. Possible values include:
   * 'UpdateAlways', 'CopyIfNull'
   */
  linkType?: LinkTypes;
  /**
   * @member {string} relationshipFieldName The field name on the Relationship
   * metadata.
   */
  relationshipFieldName: string;
}

/**
 * @interface
 * An interface representing ParticipantProfilePropertyReference.
 * The participant profile property reference.
 *
 */
export interface ParticipantProfilePropertyReference {
  /**
   * @member {string} interactionPropertyName The source interaction property
   * that maps to the target profile property.
   */
  interactionPropertyName: string;
  /**
   * @member {string} profilePropertyName The target profile property that maps
   * to the source interaction property.
   */
  profilePropertyName: string;
}

/**
 * @interface
 * An interface representing Participant.
 * Describes a profile type participating in an interaction.
 *
 */
export interface Participant {
  /**
   * @member {string} profileTypeName Profile type name.
   */
  profileTypeName: string;
  /**
   * @member {ParticipantPropertyReference[]} participantPropertyReferences The
   * property references.
   */
  participantPropertyReferences: ParticipantPropertyReference[];
  /**
   * @member {string} participantName Participant name.
   */
  participantName: string;
  /**
   * @member {{ [propertyName: string]: string }} [displayName] Localized
   * display name.
   */
  displayName?: { [propertyName: string]: string };
  /**
   * @member {{ [propertyName: string]: string }} [description] Localized
   * descriptions.
   */
  description?: { [propertyName: string]: string };
  /**
   * @member {string} [role] The role that the participant is playing in the
   * interaction.
   */
  role?: string;
}

/**
 * @interface
 * An interface representing StrongId.
 * Property/Properties which represent a unique ID.
 *
 */
export interface StrongId {
  /**
   * @member {string[]} keyPropertyNames The properties which make up the
   * unique ID.
   */
  keyPropertyNames: string[];
  /**
   * @member {string} strongIdName The Name identifying the strong ID.
   */
  strongIdName: string;
  /**
   * @member {{ [propertyName: string]: string }} [displayName] Localized
   * display name.
   */
  displayName?: { [propertyName: string]: string };
  /**
   * @member {{ [propertyName: string]: string }} [description] Localized
   * descriptions.
   */
  description?: { [propertyName: string]: string };
}

/**
 * @interface
 * An interface representing ProfileResourceFormat.
 * The profile resource format.
 *
 * @extends ProxyResource
 */
export interface ProfileResourceFormat extends ProxyResource {
  /**
   * @member {{ [propertyName: string]: string[] }} [attributes] The attributes
   * for the Type.
   */
  attributes?: { [propertyName: string]: string[] };
  /**
   * @member {{ [propertyName: string]: string }} [description] Localized
   * descriptions for the property.
   */
  description?: { [propertyName: string]: string };
  /**
   * @member {{ [propertyName: string]: string }} [displayName] Localized
   * display names for the property.
   */
  displayName?: { [propertyName: string]: string };
  /**
   * @member {{ [propertyName: string]: { [propertyName: string]: string } }}
   * [localizedAttributes] Any custom localized attributes for the Type.
   */
  localizedAttributes?: { [propertyName: string]: { [propertyName: string]: string } };
  /**
   * @member {string} [smallImage] Small Image associated with the Property or
   * EntityType.
   */
  smallImage?: string;
  /**
   * @member {string} [mediumImage] Medium Image associated with the Property
   * or EntityType.
   */
  mediumImage?: string;
  /**
   * @member {string} [largeImage] Large Image associated with the Property or
   * EntityType.
   */
  largeImage?: string;
  /**
   * @member {string} [apiEntitySetName] The api entity set name. This becomes
   * the odata entity set name for the entity Type being refered in this
   * object.
   */
  apiEntitySetName?: string;
  /**
   * @member {EntityTypes} [entityType] Type of entity. Possible values
   * include: 'None', 'Profile', 'Interaction', 'Relationship'
   */
  entityType?: EntityTypes;
  /**
   * @member {PropertyDefinition[]} [fields] The properties of the Profile.
   */
  fields?: PropertyDefinition[];
  /**
   * @member {number} [instancesCount] The instance count.
   */
  instancesCount?: number;
  /**
   * @member {Date} [lastChangedUtc] The last changed time for the type
   * definition.
   * **NOTE: This property will not be serialized. It can only be populated by
   * the server.**
   */
  readonly lastChangedUtc?: Date;
  /**
   * @member {ProvisioningStates} [provisioningState] Provisioning state.
   * Possible values include: 'Provisioning', 'Succeeded', 'Expiring',
   * 'Deleting', 'HumanIntervention', 'Failed'
   * **NOTE: This property will not be serialized. It can only be populated by
   * the server.**
   */
  readonly provisioningState?: ProvisioningStates;
  /**
   * @member {string} [schemaItemTypeLink] The schema org link. This helps ACI
   * identify and suggest semantic models.
   */
  schemaItemTypeLink?: string;
  /**
   * @member {string} [tenantId] The hub name.
   * **NOTE: This property will not be serialized. It can only be populated by
   * the server.**
   */
  readonly tenantId?: string;
  /**
   * @member {string} [timestampFieldName] The timestamp property name.
   * Represents the time when the interaction or profile update happened.
   */
  timestampFieldName?: string;
  /**
   * @member {string} [typeName] The name of the entity.
   */
  typeName?: string;
  /**
   * @member {StrongId[]} [strongIds] The strong IDs.
   */
  strongIds?: StrongId[];
}

/**
 * @interface
 * An interface representing InteractionResourceFormat.
 * The interaction resource format.
 *
 * @extends ProxyResource
 */
export interface InteractionResourceFormat extends ProxyResource {
  /**
   * @member {{ [propertyName: string]: string[] }} [attributes] The attributes
   * for the Type.
   */
  attributes?: { [propertyName: string]: string[] };
  /**
   * @member {{ [propertyName: string]: string }} [description] Localized
   * descriptions for the property.
   */
  description?: { [propertyName: string]: string };
  /**
   * @member {{ [propertyName: string]: string }} [displayName] Localized
   * display names for the property.
   */
  displayName?: { [propertyName: string]: string };
  /**
   * @member {{ [propertyName: string]: { [propertyName: string]: string } }}
   * [localizedAttributes] Any custom localized attributes for the Type.
   */
  localizedAttributes?: { [propertyName: string]: { [propertyName: string]: string } };
  /**
   * @member {string} [smallImage] Small Image associated with the Property or
   * EntityType.
   */
  smallImage?: string;
  /**
   * @member {string} [mediumImage] Medium Image associated with the Property
   * or EntityType.
   */
  mediumImage?: string;
  /**
   * @member {string} [largeImage] Large Image associated with the Property or
   * EntityType.
   */
  largeImage?: string;
  /**
   * @member {string} [apiEntitySetName] The api entity set name. This becomes
   * the odata entity set name for the entity Type being refered in this
   * object.
   */
  apiEntitySetName?: string;
  /**
   * @member {EntityTypes} [entityType] Type of entity. Possible values
   * include: 'None', 'Profile', 'Interaction', 'Relationship'
   */
  entityType?: EntityTypes;
  /**
   * @member {PropertyDefinition[]} [fields] The properties of the Profile.
   */
  fields?: PropertyDefinition[];
  /**
   * @member {number} [instancesCount] The instance count.
   */
  instancesCount?: number;
  /**
   * @member {Date} [lastChangedUtc] The last changed time for the type
   * definition.
   * **NOTE: This property will not be serialized. It can only be populated by
   * the server.**
   */
  readonly lastChangedUtc?: Date;
  /**
   * @member {ProvisioningStates} [provisioningState] Provisioning state.
   * Possible values include: 'Provisioning', 'Succeeded', 'Expiring',
   * 'Deleting', 'HumanIntervention', 'Failed'
   * **NOTE: This property will not be serialized. It can only be populated by
   * the server.**
   */
  readonly provisioningState?: ProvisioningStates;
  /**
   * @member {string} [schemaItemTypeLink] The schema org link. This helps ACI
   * identify and suggest semantic models.
   */
  schemaItemTypeLink?: string;
  /**
   * @member {string} [tenantId] The hub name.
   * **NOTE: This property will not be serialized. It can only be populated by
   * the server.**
   */
  readonly tenantId?: string;
  /**
   * @member {string} [timestampFieldName] The timestamp property name.
   * Represents the time when the interaction or profile update happened.
   */
  timestampFieldName?: string;
  /**
   * @member {string} [typeName] The name of the entity.
   */
  typeName?: string;
  /**
   * @member {string[]} [idPropertyNames] The id property names. Properties
   * which uniquely identify an interaction instance.
   */
  idPropertyNames?: string[];
  /**
   * @member {Participant[]} [participantProfiles] Profiles that participated
   * in the interaction.
   */
  participantProfiles?: Participant[];
  /**
   * @member {string} [primaryParticipantProfilePropertyName] The primary
   * participant property name for an interaction ,This is used to logically
   * represent the agent of the interaction, Specify the participant name here
   * from ParticipantName.
   */
  primaryParticipantProfilePropertyName?: string;
  /**
   * @member {DataSourcePrecedence[]} [dataSourcePrecedenceRules] This is
   * specific to interactions modeled as activities. Data sources are used to
   * determine where data is stored and also in precedence rules.
   * **NOTE: This property will not be serialized. It can only be populated by
   * the server.**
   */
  readonly dataSourcePrecedenceRules?: DataSourcePrecedence[];
  /**
   * @member {string} [interactionResourceFormatName] The data source name
   * **NOTE: This property will not be serialized. It can only be populated by
   * the server.**
   */
  readonly interactionResourceFormatName?: string;
  /**
   * @member {DataSourceType} [dataSourceType] The data source type. Possible
   * values include: 'Connector', 'LinkInteraction', 'SystemDefault'
   * **NOTE: This property will not be serialized. It can only be populated by
   * the server.**
   */
  readonly dataSourceType?: DataSourceType;
  /**
   * @member {Status} [status] The data source status. Possible values include:
   * 'None', 'Active', 'Deleted'
   * **NOTE: This property will not be serialized. It can only be populated by
   * the server.**
   */
  readonly status?: Status;
  /**
   * @member {number} [interactionResourceFormatId] The data source ID.
   * **NOTE: This property will not be serialized. It can only be populated by
   * the server.**
   */
  readonly interactionResourceFormatId?: number;
  /**
   * @member {string} [dataSourceReferenceId] The data source reference id.
   * **NOTE: This property will not be serialized. It can only be populated by
   * the server.**
   */
  readonly dataSourceReferenceId?: string;
  /**
   * @member {boolean} [isActivity] An interaction can be tagged as an activity
   * only during create. This enables the interaction to be editable and can
   * enable merging of properties from multiple data sources based on
   * precedence, which is defined at a link level.
   */
  isActivity?: boolean;
}

/**
 * @interface
 * An interface representing KpiResourceFormat.
 * The KPI resource format.
 *
 * @extends ProxyResource
 */
export interface KpiResourceFormat extends ProxyResource {
  /**
   * @member {EntityTypes} entityType The mapping entity type. Possible values
   * include: 'None', 'Profile', 'Interaction', 'Relationship'
   */
  entityType: EntityTypes;
  /**
   * @member {string} entityTypeName The mapping entity name.
   */
  entityTypeName: string;
  /**
   * @member {string} [tenantId] The hub name.
   * **NOTE: This property will not be serialized. It can only be populated by
   * the server.**
   */
  readonly tenantId?: string;
  /**
   * @member {string} [kpiName] The KPI name.
   * **NOTE: This property will not be serialized. It can only be populated by
   * the server.**
   */
  readonly kpiName?: string;
  /**
   * @member {{ [propertyName: string]: string }} [displayName] Localized
   * display name for the KPI.
   */
  displayName?: { [propertyName: string]: string };
  /**
   * @member {{ [propertyName: string]: string }} [description] Localized
   * description for the KPI.
   */
  description?: { [propertyName: string]: string };
  /**
   * @member {CalculationWindowTypes} calculationWindow The calculation window.
   * Possible values include: 'Lifetime', 'Hour', 'Day', 'Week', 'Month'
   */
  calculationWindow: CalculationWindowTypes;
  /**
   * @member {string} [calculationWindowFieldName] Name of calculation window
   * field.
   */
  calculationWindowFieldName?: string;
  /**
   * @member {KpiFunctions} functionProperty The computation function for the
   * KPI. Possible values include: 'Sum', 'Avg', 'Min', 'Max', 'Last', 'Count',
   * 'None', 'CountDistinct'
   */
  functionProperty: KpiFunctions;
  /**
   * @member {string} expression The computation expression for the KPI.
   */
  expression: string;
  /**
   * @member {string} [unit] The unit of measurement for the KPI.
   */
  unit?: string;
  /**
   * @member {string} [filter] The filter expression for the KPI.
   */
  filter?: string;
  /**
   * @member {string[]} [groupBy] the group by properties for the KPI.
   */
  groupBy?: string[];
  /**
   * @member {KpiGroupByMetadata[]} [groupByMetadata] The KPI GroupByMetadata.
   * **NOTE: This property will not be serialized. It can only be populated by
   * the server.**
   */
  readonly groupByMetadata?: KpiGroupByMetadata[];
  /**
   * @member {KpiParticipantProfilesMetadata[]} [participantProfilesMetadata]
   * The participant profiles.
   * **NOTE: This property will not be serialized. It can only be populated by
   * the server.**
   */
  readonly participantProfilesMetadata?: KpiParticipantProfilesMetadata[];
  /**
   * @member {ProvisioningStates} [provisioningState] Provisioning state.
   * Possible values include: 'Provisioning', 'Succeeded', 'Expiring',
   * 'Deleting', 'HumanIntervention', 'Failed'
   * **NOTE: This property will not be serialized. It can only be populated by
   * the server.**
   */
  readonly provisioningState?: ProvisioningStates;
  /**
   * @member {KpiThresholds} [thresHolds] The KPI thresholds.
   */
  thresHolds?: KpiThresholds;
  /**
   * @member {KpiAlias[]} [aliases] The aliases.
   */
  aliases?: KpiAlias[];
  /**
   * @member {KpiExtract[]} [extracts] The KPI extracts.
   */
  extracts?: KpiExtract[];
}

/**
 * @interface
 * An interface representing EnrichingKpi.
 * The enriching KPI definition.
 *
 * @extends KpiDefinition
 */
export interface EnrichingKpi extends KpiDefinition {
}

/**
 * @interface
 * An interface representing ConnectorResourceFormat.
 * The connector resource format.
 *
 * @extends ProxyResource
 */
export interface ConnectorResourceFormat extends ProxyResource {
  /**
   * @member {number} [connectorId] ID of the connector.
   * **NOTE: This property will not be serialized. It can only be populated by
   * the server.**
   */
  readonly connectorId?: number;
  /**
   * @member {string} [connectorName] Name of the connector.
   */
  connectorName?: string;
  /**
   * @member {ConnectorTypes} connectorType Type of connector. Possible values
   * include: 'None', 'CRM', 'AzureBlob', 'Salesforce', 'ExchangeOnline',
   * 'Outbound'
   */
  connectorType: ConnectorTypes;
  /**
   * @member {string} [displayName] Display name of the connector.
   */
  displayName?: string;
  /**
   * @member {string} [description] Description of the connector.
   */
  description?: string;
  /**
   * @member {{ [propertyName: string]: any }} connectorProperties The
   * connector properties.
   */
  connectorProperties: { [propertyName: string]: any };
  /**
   * @member {Date} [created] The created time.
   * **NOTE: This property will not be serialized. It can only be populated by
   * the server.**
   */
  readonly created?: Date;
  /**
   * @member {Date} [lastModified] The last monified time.
   * **NOTE: This property will not be serialized. It can only be populated by
   * the server.**
   */
  readonly lastModified?: Date;
  /**
   * @member {ConnectorStates} [state] State of connector. Possible values
   * include: 'Creating', 'Created', 'Ready', 'Expiring', 'Deleting', 'Failed'
   * **NOTE: This property will not be serialized. It can only be populated by
   * the server.**
   */
  readonly state?: ConnectorStates;
  /**
   * @member {string} [tenantId] The hub name.
   * **NOTE: This property will not be serialized. It can only be populated by
   * the server.**
   */
  readonly tenantId?: string;
  /**
   * @member {boolean} [isInternal] If this is an internal connector.
   */
  isInternal?: boolean;
}

/**
 * @interface
 * An interface representing ConnectorMappingResourceFormat.
 * The c onnector mapping resource format.
 *
 * @extends ProxyResource
 */
export interface ConnectorMappingResourceFormat extends ProxyResource {
  /**
   * @member {string} [connectorName] The connector name.
   * **NOTE: This property will not be serialized. It can only be populated by
   * the server.**
   */
  readonly connectorName?: string;
  /**
   * @member {ConnectorTypes} [connectorType] Type of connector. Possible
   * values include: 'None', 'CRM', 'AzureBlob', 'Salesforce',
   * 'ExchangeOnline', 'Outbound'
   */
  connectorType?: ConnectorTypes;
  /**
   * @member {Date} [created] The created time.
   * **NOTE: This property will not be serialized. It can only be populated by
   * the server.**
   */
  readonly created?: Date;
  /**
   * @member {Date} [lastModified] The last monified time.
   * **NOTE: This property will not be serialized. It can only be populated by
   * the server.**
   */
  readonly lastModified?: Date;
  /**
   * @member {EntityTypes} entityType Defines which entity type the file should
   * map to. Possible values include: 'None', 'Profile', 'Interaction',
   * 'Relationship'
   */
  entityType: EntityTypes;
  /**
   * @member {string} entityTypeName The mapping entity name.
   */
  entityTypeName: string;
  /**
   * @member {string} [connectorMappingName] The connector mapping name
   * **NOTE: This property will not be serialized. It can only be populated by
   * the server.**
   */
  readonly connectorMappingName?: string;
  /**
   * @member {string} [displayName] Display name for the connector mapping.
   */
  displayName?: string;
  /**
   * @member {string} [description] The description of the connector mapping.
   */
  description?: string;
  /**
   * @member {string} [dataFormatId] The DataFormat ID.
   * **NOTE: This property will not be serialized. It can only be populated by
   * the server.**
   */
  readonly dataFormatId?: string;
  /**
   * @member {ConnectorMappingProperties} mappingProperties The properties of
   * the mapping.
   */
  mappingProperties: ConnectorMappingProperties;
  /**
   * @member {Date} [nextRunTime] The next run time based on customer's
   * settings.
   * **NOTE: This property will not be serialized. It can only be populated by
   * the server.**
   */
  readonly nextRunTime?: Date;
  /**
   * @member {string} [runId] The RunId.
   * **NOTE: This property will not be serialized. It can only be populated by
   * the server.**
   */
  readonly runId?: string;
  /**
   * @member {ConnectorMappingStates} [state] State of connector mapping.
   * Possible values include: 'Creating', 'Created', 'Failed', 'Ready',
   * 'Running', 'Stopped', 'Expiring'
   * **NOTE: This property will not be serialized. It can only be populated by
   * the server.**
   */
  readonly state?: ConnectorMappingStates;
  /**
   * @member {string} [tenantId] The hub name.
   * **NOTE: This property will not be serialized. It can only be populated by
   * the server.**
   */
  readonly tenantId?: string;
}

/**
 * @interface
 * An interface representing AuthorizationPolicyResourceFormat.
 * The authorization policy resource format.
 *
 * @extends ProxyResource
 */
export interface AuthorizationPolicyResourceFormat extends ProxyResource {
  /**
   * @member {string} [policyName] Name of the policy.
   * **NOTE: This property will not be serialized. It can only be populated by
   * the server.**
   */
  readonly policyName?: string;
  /**
   * @member {PermissionTypes[]} permissions The permissions associated with
   * the policy.
   */
  permissions: PermissionTypes[];
  /**
   * @member {string} [primaryKey] Primary key assiciated with the policy.
   */
  primaryKey?: string;
  /**
   * @member {string} [secondaryKey] Secondary key assiciated with the policy.
   */
  secondaryKey?: string;
}

/**
 * @interface
 * An interface representing LinkResourceFormat.
 * The link resource format.
 *
 * @extends ProxyResource
 */
export interface LinkResourceFormat extends ProxyResource {
  /**
   * @member {string} [tenantId] The hub name.
   * **NOTE: This property will not be serialized. It can only be populated by
   * the server.**
   */
  readonly tenantId?: string;
  /**
   * @member {string} [linkName] The link name.
   * **NOTE: This property will not be serialized. It can only be populated by
   * the server.**
   */
  readonly linkName?: string;
  /**
   * @member {EntityType} sourceEntityType Type of source entity. Possible
   * values include: 'None', 'Profile', 'Interaction', 'Relationship'
   */
  sourceEntityType: EntityType;
  /**
   * @member {EntityType} targetEntityType Type of target entity. Possible
   * values include: 'None', 'Profile', 'Interaction', 'Relationship'
   */
  targetEntityType: EntityType;
  /**
   * @member {string} sourceEntityTypeName Name of the source Entity Type.
   */
  sourceEntityTypeName: string;
  /**
   * @member {string} targetEntityTypeName Name of the target Entity Type.
   */
  targetEntityTypeName: string;
  /**
   * @member {{ [propertyName: string]: string }} [displayName] Localized
   * display name for the Link.
   */
  displayName?: { [propertyName: string]: string };
  /**
   * @member {{ [propertyName: string]: string }} [description] Localized
   * descriptions for the Link.
   */
  description?: { [propertyName: string]: string };
  /**
   * @member {TypePropertiesMapping[]} [mappings] The set of properties
   * mappings between the source and target Types.
   */
  mappings?: TypePropertiesMapping[];
  /**
   * @member {ParticipantPropertyReference[]} participantPropertyReferences The
   * properties that represent the participating profile.
   */
  participantPropertyReferences: ParticipantPropertyReference[];
  /**
   * @member {ProvisioningStates} [provisioningState] Provisioning state.
   * Possible values include: 'Provisioning', 'Succeeded', 'Expiring',
   * 'Deleting', 'HumanIntervention', 'Failed'
   * **NOTE: This property will not be serialized. It can only be populated by
   * the server.**
   */
  readonly provisioningState?: ProvisioningStates;
  /**
   * @member {boolean} [referenceOnly] Indicating whether the link is reference
   * only link. This flag is ingored if the Mappings are defined. If the
   * mappings are not defined and it is set to true, links processing will not
   * create or update profiles.
   */
  referenceOnly?: boolean;
  /**
   * @member {InstanceOperationType} [operationType] Determines whether this
   * link is supposed to create or delete instances if Link is NOT Reference
   * Only. Possible values include: 'Upsert', 'Delete'
   */
  operationType?: InstanceOperationType;
}

/**
 * @interface
 * An interface representing RelationshipResourceFormat.
 * The relationship resource format.
 *
 * @extends ProxyResource
 */
export interface RelationshipResourceFormat extends ProxyResource {
  /**
   * @member {CardinalityTypes} [cardinality] The Relationship Cardinality.
   * Possible values include: 'OneToOne', 'OneToMany', 'ManyToMany'
   */
  cardinality?: CardinalityTypes;
  /**
   * @member {{ [propertyName: string]: string }} [displayName] Localized
   * display name for the Relationship.
   */
  displayName?: { [propertyName: string]: string };
  /**
   * @member {{ [propertyName: string]: string }} [description] Localized
   * descriptions for the Relationship.
   */
  description?: { [propertyName: string]: string };
  /**
   * @member {Date} [expiryDateTimeUtc] The expiry date time in UTC.
   */
  expiryDateTimeUtc?: Date;
  /**
   * @member {PropertyDefinition[]} [fields] The properties of the
   * Relationship.
   */
  fields?: PropertyDefinition[];
  /**
   * @member {RelationshipTypeMapping[]} [lookupMappings] Optional property to
   * be used to map fields in profile to their strong ids in related profile.
   */
  lookupMappings?: RelationshipTypeMapping[];
  /**
   * @member {string} profileType Profile type.
   */
  profileType: string;
  /**
   * @member {ProvisioningStates} [provisioningState] Provisioning state.
   * Possible values include: 'Provisioning', 'Succeeded', 'Expiring',
   * 'Deleting', 'HumanIntervention', 'Failed'
   * **NOTE: This property will not be serialized. It can only be populated by
   * the server.**
   */
  readonly provisioningState?: ProvisioningStates;
  /**
   * @member {string} [relationshipName] The Relationship name.
   * **NOTE: This property will not be serialized. It can only be populated by
   * the server.**
   */
  readonly relationshipName?: string;
  /**
   * @member {string} relatedProfileType Related profile being referenced.
   */
  relatedProfileType: string;
  /**
   * @member {string} [relationshipGuidId] The relationship guid id.
   * **NOTE: This property will not be serialized. It can only be populated by
   * the server.**
   */
  readonly relationshipGuidId?: string;
  /**
   * @member {string} [tenantId] The hub name.
   * **NOTE: This property will not be serialized. It can only be populated by
   * the server.**
   */
  readonly tenantId?: string;
}

/**
 * @interface
 * An interface representing RelationshipLinkResourceFormat.
 * The relationship link resource format.
 *
 * @extends ProxyResource
 */
export interface RelationshipLinkResourceFormat extends ProxyResource {
  /**
   * @member {{ [propertyName: string]: string }} [displayName] Localized
   * display name for the Relationship Link.
   */
  displayName?: { [propertyName: string]: string };
  /**
   * @member {{ [propertyName: string]: string }} [description] Localized
   * descriptions for the Relationship Link.
   */
  description?: { [propertyName: string]: string };
  /**
   * @member {string} interactionType The InteractionType associated with the
   * Relationship Link.
   */
  interactionType: string;
  /**
   * @member {string} [linkName] The name of the Relationship Link.
   * **NOTE: This property will not be serialized. It can only be populated by
   * the server.**
   */
  readonly linkName?: string;
  /**
   * @member {RelationshipLinkFieldMapping[]} [mappings] The mappings between
   * Interaction and Relationship fields.
   */
  mappings?: RelationshipLinkFieldMapping[];
  /**
   * @member {ParticipantProfilePropertyReference[]} profilePropertyReferences
   * The property references for the Profile of the Relationship.
   */
  profilePropertyReferences: ParticipantProfilePropertyReference[];
  /**
   * @member {ProvisioningStates} [provisioningState] Provisioning state.
   * Possible values include: 'Provisioning', 'Succeeded', 'Expiring',
   * 'Deleting', 'HumanIntervention', 'Failed'
   * **NOTE: This property will not be serialized. It can only be populated by
   * the server.**
   */
  readonly provisioningState?: ProvisioningStates;
  /**
   * @member {ParticipantProfilePropertyReference[]}
   * relatedProfilePropertyReferences The property references for the Related
   * Profile of the Relationship.
   */
  relatedProfilePropertyReferences: ParticipantProfilePropertyReference[];
  /**
   * @member {string} relationshipName The Relationship associated with the
   * Link.
   */
  relationshipName: string;
  /**
   * @member {string} [relationshipGuidId] The relationship guid id.
   * **NOTE: This property will not be serialized. It can only be populated by
   * the server.**
   */
  readonly relationshipGuidId?: string;
  /**
   * @member {string} [tenantId] The hub name.
   * **NOTE: This property will not be serialized. It can only be populated by
   * the server.**
   */
  readonly tenantId?: string;
}

/**
 * @interface
 * An interface representing ViewResourceFormat.
 * The view resource format.
 *
 * @extends ProxyResource
 */
export interface ViewResourceFormat extends ProxyResource {
  /**
   * @member {string} [viewName] Name of the view.
   * **NOTE: This property will not be serialized. It can only be populated by
   * the server.**
   */
  readonly viewName?: string;
  /**
   * @member {string} [userId] the user ID.
   */
  userId?: string;
  /**
   * @member {string} [tenantId] the hub name.
   * **NOTE: This property will not be serialized. It can only be populated by
   * the server.**
   */
  readonly tenantId?: string;
  /**
   * @member {{ [propertyName: string]: string }} [displayName] Localized
   * display name for the view.
   */
  displayName?: { [propertyName: string]: string };
  /**
   * @member {string} definition View definition.
   */
  definition: string;
  /**
   * @member {Date} [changed] Date time when view was last modified.
   * **NOTE: This property will not be serialized. It can only be populated by
   * the server.**
   */
  readonly changed?: Date;
  /**
   * @member {Date} [created] Date time when view was created.
   * **NOTE: This property will not be serialized. It can only be populated by
   * the server.**
   */
  readonly created?: Date;
}

/**
 * @interface
 * An interface representing WidgetTypeResourceFormat.
 * The WidgetTypeResourceFormat
 *
 * @extends ProxyResource
 */
export interface WidgetTypeResourceFormat extends ProxyResource {
  /**
   * @member {string} [widgetTypeName] Name of the widget type.
   * **NOTE: This property will not be serialized. It can only be populated by
   * the server.**
   */
  readonly widgetTypeName?: string;
  /**
   * @member {string} definition Definition for widget type.
   */
  definition: string;
  /**
   * @member {string} [description] Description for widget type.
   */
  description?: string;
  /**
   * @member {{ [propertyName: string]: string }} [displayName] Localized
   * display name for the widget type.
   */
  displayName?: { [propertyName: string]: string };
  /**
   * @member {string} [imageUrl] The image URL.
   */
  imageUrl?: string;
  /**
   * @member {string} [tenantId] The hub name.
   * **NOTE: This property will not be serialized. It can only be populated by
   * the server.**
   */
  readonly tenantId?: string;
  /**
   * @member {string} [widgetVersion] The widget version.
   */
  widgetVersion?: string;
  /**
   * @member {Date} [changed] Date time when widget type was last modified.
   * **NOTE: This property will not be serialized. It can only be populated by
   * the server.**
   */
  readonly changed?: Date;
  /**
   * @member {Date} [created] Date time when widget type was created.
   * **NOTE: This property will not be serialized. It can only be populated by
   * the server.**
   */
  readonly created?: Date;
}

/**
 * @interface
 * An interface representing AssignmentPrincipal.
 * The AssignmentPrincipal
 *
 */
export interface AssignmentPrincipal {
  /**
   * @member {string} principalId The principal id being assigned to.
   */
  principalId: string;
  /**
   * @member {string} principalType The Type of the principal ID.
   */
  principalType: string;
  /**
   * @member {{ [propertyName: string]: string }} [principalMetadata] Other
   * metadata for the principal.
   */
  principalMetadata?: { [propertyName: string]: string };
}

/**
 * @interface
 * An interface representing ResourceSetDescription.
 * The resource set description.
 *
 */
export interface ResourceSetDescription {
  /**
   * @member {string[]} [elements] The elements included in the set.
   */
  elements?: string[];
  /**
   * @member {string[]} [exceptions] The elements that are not included in the
   * set, in case elements contains '*' indicating 'all'.
   */
  exceptions?: string[];
}

/**
 * @interface
 * An interface representing RoleAssignmentResourceFormat.
 * The Role Assignment resource format.
 *
 * @extends ProxyResource
 */
export interface RoleAssignmentResourceFormat extends ProxyResource {
  /**
   * @member {string} [tenantId] The hub name.
   * **NOTE: This property will not be serialized. It can only be populated by
   * the server.**
   */
  readonly tenantId?: string;
  /**
   * @member {string} [assignmentName] The name of the metadata object.
   * **NOTE: This property will not be serialized. It can only be populated by
   * the server.**
   */
  readonly assignmentName?: string;
  /**
   * @member {{ [propertyName: string]: string }} [displayName] Localized
   * display names for the metadata.
   */
  displayName?: { [propertyName: string]: string };
  /**
   * @member {{ [propertyName: string]: string }} [description] Localized
   * description for the metadata.
   */
  description?: { [propertyName: string]: string };
  /**
   * @member {ProvisioningStates} [provisioningState] Provisioning state.
   * Possible values include: 'Provisioning', 'Succeeded', 'Expiring',
   * 'Deleting', 'HumanIntervention', 'Failed'
   * **NOTE: This property will not be serialized. It can only be populated by
   * the server.**
   */
  readonly provisioningState?: ProvisioningStates;
  /**
   * @member {RoleTypes} role Type of roles. Possible values include: 'Admin',
   * 'Reader', 'ManageAdmin', 'ManageReader', 'DataAdmin', 'DataReader'
   */
  role: RoleTypes;
  /**
   * @member {AssignmentPrincipal[]} principals The principals being assigned
   * to.
   */
  principals: AssignmentPrincipal[];
  /**
   * @member {ResourceSetDescription} [profiles] Profiles set for the
   * assignment.
   */
  profiles?: ResourceSetDescription;
  /**
   * @member {ResourceSetDescription} [interactions] Interactions set for the
   * assignment.
   */
  interactions?: ResourceSetDescription;
  /**
   * @member {ResourceSetDescription} [links] Links set for the assignment.
   */
  links?: ResourceSetDescription;
  /**
   * @member {ResourceSetDescription} [kpis] Kpis set for the assignment.
   */
  kpis?: ResourceSetDescription;
  /**
   * @member {ResourceSetDescription} [sasPolicies] Sas Policies set for the
   * assignment.
   */
  sasPolicies?: ResourceSetDescription;
  /**
   * @member {ResourceSetDescription} [connectors] Connectors set for the
   * assignment.
   */
  connectors?: ResourceSetDescription;
  /**
   * @member {ResourceSetDescription} [views] Views set for the assignment.
   */
  views?: ResourceSetDescription;
  /**
   * @member {ResourceSetDescription} [relationshipLinks] The Role assignments
   * set for the relationship links.
   */
  relationshipLinks?: ResourceSetDescription;
  /**
   * @member {ResourceSetDescription} [relationships] The Role assignments set
   * for the relationships.
   */
  relationships?: ResourceSetDescription;
  /**
   * @member {ResourceSetDescription} [widgetTypes] Widget types set for the
   * assignment.
   */
  widgetTypes?: ResourceSetDescription;
  /**
   * @member {ResourceSetDescription} [roleAssignments] The Role assignments
   * set for the assignment.
   */
  roleAssignments?: ResourceSetDescription;
  /**
   * @member {ResourceSetDescription} [conflationPolicies] Widget types set for
   * the assignment.
   */
  conflationPolicies?: ResourceSetDescription;
  /**
   * @member {ResourceSetDescription} [segments] The Role assignments set for
   * the assignment.
   */
  segments?: ResourceSetDescription;
}

/**
 * @interface
 * An interface representing RoleResourceFormat.
 * The role resource format.
 *
 * @extends ProxyResource
 */
export interface RoleResourceFormat extends ProxyResource {
  /**
   * @member {string} [roleName] The role name.
   */
  roleName?: string;
  /**
   * @member {string} [description] The description of the role.
   */
  description?: string;
}

/**
 * @interface
 * An interface representing GetImageUploadUrlInput.
 * Input type for getting image upload url.
 *
 */
export interface GetImageUploadUrlInput {
  /**
   * @member {string} [entityType] Type of entity. Can be Profile or
   * Interaction.
   */
  entityType?: string;
  /**
   * @member {string} [entityTypeName] Name of the entity type.
   */
  entityTypeName?: string;
  /**
   * @member {string} [relativePath] Relative path of the image.
   */
  relativePath?: string;
}

/**
 * @interface
 * An interface representing ImageDefinition.
 * The image definition.
 *
 */
export interface ImageDefinition {
  /**
   * @member {boolean} [imageExists] Whether image exists already.
   */
  imageExists?: boolean;
  /**
   * @member {string} [contentUrl] Content URL for the image blob.
   */
  contentUrl?: string;
  /**
   * @member {string} [relativePath] Relative path of the image.
   */
  relativePath?: string;
}

/**
 * @interface
 * An interface representing RelationshipsLookup.
 * The definition of suggested relationship for the type.
 *
 */
export interface RelationshipsLookup {
  /**
   * @member {string} [profileName] The relationship profile.
   * **NOTE: This property will not be serialized. It can only be populated by
   * the server.**
   */
  readonly profileName?: string;
  /**
   * @member {ParticipantProfilePropertyReference[]}
   * [profilePropertyReferences] The property references for the profile type.
   * **NOTE: This property will not be serialized. It can only be populated by
   * the server.**
   */
  readonly profilePropertyReferences?: ParticipantProfilePropertyReference[];
  /**
   * @member {string} [relatedProfileName] The related profile.
   * **NOTE: This property will not be serialized. It can only be populated by
   * the server.**
   */
  readonly relatedProfileName?: string;
  /**
   * @member {ParticipantProfilePropertyReference[]}
   * [relatedProfilePropertyReferences] The property references for the related
   * profile type.
   * **NOTE: This property will not be serialized. It can only be populated by
   * the server.**
   */
  readonly relatedProfilePropertyReferences?: ParticipantProfilePropertyReference[];
  /**
   * @member {string} [existingRelationshipName] The name of existing
   * Relationship.
   * **NOTE: This property will not be serialized. It can only be populated by
   * the server.**
   */
  readonly existingRelationshipName?: string;
}

/**
 * @interface
 * An interface representing SuggestRelationshipLinksResponse.
 * The response of suggest relationship links operation.
 *
 */
export interface SuggestRelationshipLinksResponse {
  /**
   * @member {string} [interactionName] The interaction name.
   * **NOTE: This property will not be serialized. It can only be populated by
   * the server.**
   */
  readonly interactionName?: string;
  /**
   * @member {RelationshipsLookup[]} [suggestedRelationships] Suggested
   * relationships for the type.
   * **NOTE: This property will not be serialized. It can only be populated by
   * the server.**
   */
  readonly suggestedRelationships?: RelationshipsLookup[];
}

/**
 * @interface
 * An interface representing PredictionMappings.
 * Definition of the link mapping of prediction.
 *
 */
export interface PredictionMappings {
  /**
   * @member {string} score The score of the link mapping.
   */
  score: string;
  /**
   * @member {string} grade The grade of the link mapping.
   */
  grade: string;
  /**
   * @member {string} reason The reason of the link mapping.
   */
  reason: string;
}

/**
 * @interface
 * An interface representing PredictionGradesItem.
 * The definition of a prediction grade.
 *
 */
export interface PredictionGradesItem {
  /**
   * @member {string} [gradeName] Name of the grade.
   */
  gradeName?: string;
  /**
   * @member {number} [minScoreThreshold] Minimum score threshold.
   */
  minScoreThreshold?: number;
  /**
   * @member {number} [maxScoreThreshold] Maximum score threshold.
   */
  maxScoreThreshold?: number;
}

/**
 * @interface
 * An interface representing PredictionSystemGeneratedEntities.
 * System generated entities.
 *
 */
export interface PredictionSystemGeneratedEntities {
  /**
   * @member {string[]} [generatedInteractionTypes] Generated interaction
   * types.
   */
  generatedInteractionTypes?: string[];
  /**
   * @member {string[]} [generatedLinks] Generated links.
   */
  generatedLinks?: string[];
  /**
   * @member {{ [propertyName: string]: string }} [generatedKpis] Generated
   * KPIs.
   */
  generatedKpis?: { [propertyName: string]: string };
}

/**
 * @interface
 * An interface representing PredictionDistributionDefinitionDistributionsItem.
 * The definition of a prediction distribution.
 *
 */
export interface PredictionDistributionDefinitionDistributionsItem {
  /**
   * @member {number} [scoreThreshold] Score threshold.
   */
  scoreThreshold?: number;
  /**
   * @member {number} [positives] Number of positives.
   */
  positives?: number;
  /**
   * @member {number} [negatives] Number of negatives.
   */
  negatives?: number;
  /**
   * @member {number} [positivesAboveThreshold] Number of positives above
   * threshold.
   */
  positivesAboveThreshold?: number;
  /**
   * @member {number} [negativesAboveThreshold] Number of negatives above
   * threshold.
   */
  negativesAboveThreshold?: number;
}

/**
 * @interface
 * An interface representing PredictionDistributionDefinition.
 * The definition of the prediction distribution.
 *
 */
export interface PredictionDistributionDefinition {
  /**
   * @member {number} [totalPositives] Total positive in the distribution.
   */
  totalPositives?: number;
  /**
   * @member {number} [totalNegatives] Total negatives in the distribution.
   */
  totalNegatives?: number;
  /**
   * @member {PredictionDistributionDefinitionDistributionsItem[]}
   * [distributions] Distributions of the prediction.
   */
  distributions?: PredictionDistributionDefinitionDistributionsItem[];
}

/**
 * @interface
 * An interface representing CanonicalProfileDefinitionPropertiesItem.
 * The definition of a canonical profile property.
 *
 */
export interface CanonicalProfileDefinitionPropertiesItem {
  /**
   * @member {string} [profileName] Profile name.
   */
  profileName?: string;
  /**
   * @member {string} [profilePropertyName] Property name of profile.
   */
  profilePropertyName?: string;
  /**
   * @member {number} [rank] The rank.
   */
  rank?: number;
  /**
   * @member {CanonicalPropertyValueType} [type] Type of canonical property
   * value. Possible values include: 'Numeric', 'Categorical',
   * 'DerivedCategorical', 'DerivedNumeric'
   */
  type?: CanonicalPropertyValueType;
  /**
   * @member {string} [value] Value of the canonical property.
   */
  value?: string;
}

/**
 * @interface
 * An interface representing CanonicalProfileDefinition.
 * Definition of canonical profile.
 *
 */
export interface CanonicalProfileDefinition {
  /**
   * @member {number} [canonicalProfileId] Canonical profile ID.
   */
  canonicalProfileId?: number;
  /**
   * @member {CanonicalProfileDefinitionPropertiesItem[]} [properties]
   * Properties of the canonical profile.
   */
  properties?: CanonicalProfileDefinitionPropertiesItem[];
}

/**
 * @interface
 * An interface representing PredictionTrainingResults.
 * The training results of the prediction.
 *
 */
export interface PredictionTrainingResults {
  /**
   * @member {string} [tenantId] The hub name.
   * **NOTE: This property will not be serialized. It can only be populated by
   * the server.**
   */
  readonly tenantId?: string;
  /**
   * @member {string} [scoreName] Score name.
   * **NOTE: This property will not be serialized. It can only be populated by
   * the server.**
   */
  readonly scoreName?: string;
  /**
   * @member {PredictionDistributionDefinition} [predictionDistribution]
   * Prediction distribution.
   * **NOTE: This property will not be serialized. It can only be populated by
   * the server.**
   */
  readonly predictionDistribution?: PredictionDistributionDefinition;
  /**
   * @member {CanonicalProfileDefinition[]} [canonicalProfiles] Canonical
   * profiles.
   * **NOTE: This property will not be serialized. It can only be populated by
   * the server.**
   */
  readonly canonicalProfiles?: CanonicalProfileDefinition[];
  /**
   * @member {number} [primaryProfileInstanceCount] Instance count of the
   * primary profile.
   * **NOTE: This property will not be serialized. It can only be populated by
   * the server.**
   */
  readonly primaryProfileInstanceCount?: number;
}

/**
 * @interface
 * An interface representing PredictionModelStatus.
 * The prediction model status.
 *
 */
export interface PredictionModelStatus {
  /**
   * @member {string} [tenantId] The hub name.
   * **NOTE: This property will not be serialized. It can only be populated by
   * the server.**
   */
  readonly tenantId?: string;
  /**
   * @member {string} [predictionName] The prediction name.
   * **NOTE: This property will not be serialized. It can only be populated by
   * the server.**
   */
  readonly predictionName?: string;
  /**
   * @member {string} [predictionGuidId] The prediction GUID ID.
   * **NOTE: This property will not be serialized. It can only be populated by
   * the server.**
   */
  readonly predictionGuidId?: string;
  /**
   * @member {PredictionModelLifeCycle} status Prediction model life cycle.
   * When prediction is in PendingModelConfirmation status, it is allowed to
   * update the status to PendingFeaturing or Active through API. Possible
   * values include: 'New', 'Provisioning', 'ProvisioningFailed',
   * 'PendingDiscovering', 'Discovering', 'PendingFeaturing', 'Featuring',
   * 'FeaturingFailed', 'PendingTraining', 'Training', 'TrainingFailed',
   * 'Evaluating', 'EvaluatingFailed', 'PendingModelConfirmation', 'Active',
   * 'Deleted', 'HumanIntervention', 'Failed'
   */
  status: PredictionModelLifeCycle;
  /**
   * @member {string} [message] The model status message.
   * **NOTE: This property will not be serialized. It can only be populated by
   * the server.**
   */
  readonly message?: string;
  /**
   * @member {number} [trainingSetCount] Count of the training set.
   * **NOTE: This property will not be serialized. It can only be populated by
   * the server.**
   */
  readonly trainingSetCount?: number;
  /**
   * @member {number} [testSetCount] Count of the test set.
   * **NOTE: This property will not be serialized. It can only be populated by
   * the server.**
   */
  readonly testSetCount?: number;
  /**
   * @member {number} [validationSetCount] Count of the validation set.
   * **NOTE: This property will not be serialized. It can only be populated by
   * the server.**
   */
  readonly validationSetCount?: number;
  /**
   * @member {number} [trainingAccuracy] The training accuracy.
   * **NOTE: This property will not be serialized. It can only be populated by
   * the server.**
   */
  readonly trainingAccuracy?: number;
  /**
   * @member {number} [signalsUsed] The singnas used.
   * **NOTE: This property will not be serialized. It can only be populated by
   * the server.**
   */
  readonly signalsUsed?: number;
  /**
   * @member {string} [modelVersion] Version of the model.
   * **NOTE: This property will not be serialized. It can only be populated by
   * the server.**
   */
  readonly modelVersion?: string;
}

/**
 * @interface
 * An interface representing PredictionResourceFormat.
 * The prediction resource format.
 *
 * @extends ProxyResource
 */
export interface PredictionResourceFormat extends ProxyResource {
  /**
   * @member {{ [propertyName: string]: string }} [description] Description of
   * the prediction.
   */
  description?: { [propertyName: string]: string };
  /**
   * @member {{ [propertyName: string]: string }} [displayName] Display name of
   * the prediction.
   */
  displayName?: { [propertyName: string]: string };
  /**
   * @member {string[]} [involvedInteractionTypes] Interaction types involved
   * in the prediction.
   */
  involvedInteractionTypes?: string[];
  /**
   * @member {string[]} [involvedKpiTypes] KPI types involved in the
   * prediction.
   */
  involvedKpiTypes?: string[];
  /**
   * @member {string[]} [involvedRelationships] Relationships involved in the
   * prediction.
   */
  involvedRelationships?: string[];
  /**
   * @member {string} negativeOutcomeExpression Negative outcome expression.
   */
  negativeOutcomeExpression: string;
  /**
   * @member {string} positiveOutcomeExpression Positive outcome expression.
   */
  positiveOutcomeExpression: string;
  /**
   * @member {string} primaryProfileType Primary profile type.
   */
  primaryProfileType: string;
  /**
   * @member {ProvisioningStates} [provisioningState] Provisioning state.
   * Possible values include: 'Provisioning', 'Succeeded', 'Expiring',
   * 'Deleting', 'HumanIntervention', 'Failed'
   * **NOTE: This property will not be serialized. It can only be populated by
   * the server.**
   */
  readonly provisioningState?: ProvisioningStates;
  /**
   * @member {string} [predictionName] Name of the prediction.
   */
  predictionName?: string;
  /**
   * @member {string} scopeExpression Scope expression.
   */
  scopeExpression: string;
  /**
   * @member {string} [tenantId] The hub name.
   * **NOTE: This property will not be serialized. It can only be populated by
   * the server.**
   */
  readonly tenantId?: string;
  /**
   * @member {boolean} autoAnalyze Whether do auto analyze.
   */
  autoAnalyze: boolean;
  /**
   * @member {PredictionMappings} mappings Definition of the link mapping of
   * prediction.
   */
  mappings: PredictionMappings;
  /**
   * @member {string} scoreLabel Score label.
   */
  scoreLabel: string;
  /**
   * @member {PredictionGradesItem[]} [grades] The prediction grades.
   */
  grades?: PredictionGradesItem[];
  /**
   * @member {PredictionSystemGeneratedEntities} [systemGeneratedEntities]
   * System generated entities.
   * **NOTE: This property will not be serialized. It can only be populated by
   * the server.**
   */
  readonly systemGeneratedEntities?: PredictionSystemGeneratedEntities;
}

/**
 * @interface
 * An interface representing OperationDisplay.
 * The object that represents the operation.
 *
 */
export interface OperationDisplay {
  /**
   * @member {string} [provider] Service provider: Microsoft.CustomerInsights
   * **NOTE: This property will not be serialized. It can only be populated by
   * the server.**
   */
  readonly provider?: string;
  /**
   * @member {string} [resource] Resource on which the operation is performed:
   * Invoice, etc.
   * **NOTE: This property will not be serialized. It can only be populated by
   * the server.**
   */
  readonly resource?: string;
  /**
   * @member {string} [operation] Operation type: Read, write, delete, etc.
   * **NOTE: This property will not be serialized. It can only be populated by
   * the server.**
   */
  readonly operation?: string;
}

/**
 * @interface
 * An interface representing Operation.
 * A Customer Insights REST API operation
 *
 */
export interface Operation {
  /**
   * @member {string} [name] Operation name: {provider}/{resource}/{operation}
   * **NOTE: This property will not be serialized. It can only be populated by
   * the server.**
   */
  readonly name?: string;
  /**
   * @member {OperationDisplay} [display] The object that represents the
   * operation.
   */
  display?: OperationDisplay;
}

/**
 * @interface
 * An interface representing ProfilesGetOptionalParams.
 * Optional Parameters.
 *
 * @extends RequestOptionsBase
 */
export interface ProfilesGetOptionalParams extends msRest.RequestOptionsBase {
  /**
   * @member {string} [localeCode] Locale of profile to retrieve, default is
   * en-us. Default value: 'en-us' .
   */
  localeCode?: string;
}

/**
 * @interface
 * An interface representing ProfilesDeleteMethodOptionalParams.
 * Optional Parameters.
 *
 * @extends RequestOptionsBase
 */
export interface ProfilesDeleteMethodOptionalParams extends msRest.RequestOptionsBase {
  /**
   * @member {string} [localeCode] Locale of profile to retrieve, default is
   * en-us. Default value: 'en-us' .
   */
  localeCode?: string;
}

/**
 * @interface
 * An interface representing ProfilesListByHubOptionalParams.
 * Optional Parameters.
 *
 * @extends RequestOptionsBase
 */
export interface ProfilesListByHubOptionalParams extends msRest.RequestOptionsBase {
  /**
   * @member {string} [localeCode] Locale of profile to retrieve, default is
   * en-us. Default value: 'en-us' .
   */
  localeCode?: string;
}

/**
 * @interface
 * An interface representing ProfilesBeginDeleteMethodOptionalParams.
 * Optional Parameters.
 *
 * @extends RequestOptionsBase
 */
export interface ProfilesBeginDeleteMethodOptionalParams extends msRest.RequestOptionsBase {
  /**
   * @member {string} [localeCode] Locale of profile to retrieve, default is
   * en-us. Default value: 'en-us' .
   */
  localeCode?: string;
}

/**
 * @interface
 * An interface representing InteractionsGetOptionalParams.
 * Optional Parameters.
 *
 * @extends RequestOptionsBase
 */
export interface InteractionsGetOptionalParams extends msRest.RequestOptionsBase {
  /**
   * @member {string} [localeCode] Locale of interaction to retrieve, default
   * is en-us. Default value: 'en-us' .
   */
  localeCode?: string;
}

/**
 * @interface
 * An interface representing InteractionsListByHubOptionalParams.
 * Optional Parameters.
 *
 * @extends RequestOptionsBase
 */
export interface InteractionsListByHubOptionalParams extends msRest.RequestOptionsBase {
  /**
   * @member {string} [localeCode] Locale of interaction to retrieve, default
   * is en-us. Default value: 'en-us' .
   */
  localeCode?: string;
}

/**
 * @interface
 * An interface representing CustomerInsightsManagementClientOptions.
 * @extends AzureServiceClientOptions
 */
export interface CustomerInsightsManagementClientOptions extends AzureServiceClientOptions {
  /**
   * @member {string} [baseUri]
   */
  baseUri?: string;
}


/**
 * @interface
 * An interface representing the OperationListResult.
 * Result of the request to list Customer Insights operations. It contains a
 * list of operations and a URL link to get the next set of results.
 *
 * @extends Array<Operation>
 */
export interface OperationListResult extends Array<Operation> {
  /**
   * @member {string} [nextLink] URL to get the next set of operation list
   * results if there are any.
   * **NOTE: This property will not be serialized. It can only be populated by
   * the server.**
   */
  readonly nextLink?: string;
}

/**
 * @interface
 * An interface representing the HubListResult.
 * Response of list hub operation.
 *
 * @extends Array<Hub>
 */
export interface HubListResult extends Array<Hub> {
  /**
   * @member {string} [nextLink] Link for next set of results.
   */
  nextLink?: string;
}

/**
 * @interface
 * An interface representing the ProfileListResult.
 * The response of list profile operation.
 *
 * @extends Array<ProfileResourceFormat>
 */
export interface ProfileListResult extends Array<ProfileResourceFormat> {
  /**
   * @member {string} [nextLink] Link to the next set of results.
   */
  nextLink?: string;
}

/**
 * @interface
 * An interface representing the InteractionListResult.
 * The response of list interaction operation.
 *
 * @extends Array<InteractionResourceFormat>
 */
export interface InteractionListResult extends Array<InteractionResourceFormat> {
  /**
   * @member {string} [nextLink] Link to the next set of results.
   */
  nextLink?: string;
}

/**
 * @interface
 * An interface representing the RelationshipListResult.
 * The response of list relationship operation.
 *
 * @extends Array<RelationshipResourceFormat>
 */
export interface RelationshipListResult extends Array<RelationshipResourceFormat> {
  /**
   * @member {string} [nextLink] Link to the next set of results.
   */
  nextLink?: string;
}

/**
 * @interface
 * An interface representing the RelationshipLinkListResult.
 * The response of list relationship link operation.
 *
 * @extends Array<RelationshipLinkResourceFormat>
 */
export interface RelationshipLinkListResult extends Array<RelationshipLinkResourceFormat> {
  /**
   * @member {string} [nextLink] Link to the next set of results.
   */
  nextLink?: string;
}

/**
 * @interface
 * An interface representing the AuthorizationPolicyListResult.
 * The response of list authorization policy operation.
 *
 * @extends Array<AuthorizationPolicyResourceFormat>
 */
export interface AuthorizationPolicyListResult extends Array<AuthorizationPolicyResourceFormat> {
  /**
   * @member {string} [nextLink] Link to the next set of results.
   */
  nextLink?: string;
}

/**
 * @interface
 * An interface representing the ConnectorListResult.
 * The response of list connector operation.
 *
 * @extends Array<ConnectorResourceFormat>
 */
export interface ConnectorListResult extends Array<ConnectorResourceFormat> {
  /**
   * @member {string} [nextLink] Link to the next set of results.
   */
  nextLink?: string;
}

/**
 * @interface
 * An interface representing the ConnectorMappingListResult.
 * The response of list connector mapping operation.
 *
 * @extends Array<ConnectorMappingResourceFormat>
 */
export interface ConnectorMappingListResult extends Array<ConnectorMappingResourceFormat> {
  /**
   * @member {string} [nextLink] Link to the next set of results.
   */
  nextLink?: string;
}

/**
 * @interface
 * An interface representing the KpiListResult.
 * The response of list KPI operation.
 *
 * @extends Array<KpiResourceFormat>
 */
export interface KpiListResult extends Array<KpiResourceFormat> {
  /**
   * @member {string} [nextLink] Link to the next set of results.
   */
  nextLink?: string;
}

/**
 * @interface
 * An interface representing the WidgetTypeListResult.
 * The response of list widget type operation.
 *
 * @extends Array<WidgetTypeResourceFormat>
 */
export interface WidgetTypeListResult extends Array<WidgetTypeResourceFormat> {
  /**
   * @member {string} [nextLink] Link to the next set of results.
   */
  nextLink?: string;
}

/**
 * @interface
 * An interface representing the ViewListResult.
 * The response of list view operation.
 *
 * @extends Array<ViewResourceFormat>
 */
export interface ViewListResult extends Array<ViewResourceFormat> {
  /**
   * @member {string} [nextLink] Link to the next set of results.
   */
  nextLink?: string;
}

/**
 * @interface
 * An interface representing the LinkListResult.
 * The response of list link operation.
 *
 * @extends Array<LinkResourceFormat>
 */
export interface LinkListResult extends Array<LinkResourceFormat> {
  /**
   * @member {string} [nextLink] Link to the next set of results.
   */
  nextLink?: string;
}

/**
 * @interface
 * An interface representing the RoleListResult.
 * The response of list role assignment operation.
 *
 * @extends Array<RoleResourceFormat>
 */
export interface RoleListResult extends Array<RoleResourceFormat> {
  /**
   * @member {string} [nextLink] Link to the next set of results.
   */
  nextLink?: string;
}

/**
 * @interface
 * An interface representing the RoleAssignmentListResult.
 * The response of list role assignment operation.
 *
 * @extends Array<RoleAssignmentResourceFormat>
 */
export interface RoleAssignmentListResult extends Array<RoleAssignmentResourceFormat> {
  /**
   * @member {string} [nextLink] Link to the next set of results.
   */
  nextLink?: string;
}

/**
 * @interface
 * An interface representing the PredictionListResult.
 * The response of list predictions operation.
 *
 * @extends Array<PredictionResourceFormat>
 */
export interface PredictionListResult extends Array<PredictionResourceFormat> {
  /**
   * @member {string} [nextLink] Link to the next set of results.
   */
  nextLink?: string;
}

/**
 * Defines values for EntityTypes.
 * Possible values include: 'None', 'Profile', 'Interaction', 'Relationship'
 * @readonly
 * @enum {string}
 */
export type EntityTypes = 'None' | 'Profile' | 'Interaction' | 'Relationship';

/**
 * Defines values for DataSourceType.
 * Possible values include: 'Connector', 'LinkInteraction', 'SystemDefault'
 * @readonly
 * @enum {string}
 */
export type DataSourceType = 'Connector' | 'LinkInteraction' | 'SystemDefault';

/**
 * Defines values for Status.
 * Possible values include: 'None', 'Active', 'Deleted'
 * @readonly
 * @enum {string}
 */
export type Status = 'None' | 'Active' | 'Deleted';

/**
 * Defines values for ProvisioningStates.
 * Possible values include: 'Provisioning', 'Succeeded', 'Expiring', 'Deleting',
 * 'HumanIntervention', 'Failed'
 * @readonly
 * @enum {string}
 */
export type ProvisioningStates = 'Provisioning' | 'Succeeded' | 'Expiring' | 'Deleting' | 'HumanIntervention' | 'Failed';

/**
 * Defines values for PermissionTypes.
 * Possible values include: 'Read', 'Write', 'Manage'
 * @readonly
 * @enum {string}
 */
export type PermissionTypes = 'Read' | 'Write' | 'Manage';

/**
 * Defines values for ConnectorTypes.
 * Possible values include: 'None', 'CRM', 'AzureBlob', 'Salesforce', 'ExchangeOnline', 'Outbound'
 * @readonly
 * @enum {string}
 */
export type ConnectorTypes = 'None' | 'CRM' | 'AzureBlob' | 'Salesforce' | 'ExchangeOnline' | 'Outbound';

/**
 * Defines values for ConnectorStates.
 * Possible values include: 'Creating', 'Created', 'Ready', 'Expiring', 'Deleting', 'Failed'
 * @readonly
 * @enum {string}
 */
export type ConnectorStates = 'Creating' | 'Created' | 'Ready' | 'Expiring' | 'Deleting' | 'Failed';

/**
 * Defines values for ErrorManagementTypes.
 * Possible values include: 'RejectAndContinue', 'StopImport', 'RejectUntilLimit'
 * @readonly
 * @enum {string}
 */
export type ErrorManagementTypes = 'RejectAndContinue' | 'StopImport' | 'RejectUntilLimit';

/**
 * Defines values for FrequencyTypes.
 * Possible values include: 'Minute', 'Hour', 'Day', 'Week', 'Month'
 * @readonly
 * @enum {string}
 */
export type FrequencyTypes = 'Minute' | 'Hour' | 'Day' | 'Week' | 'Month';

/**
 * Defines values for CompletionOperationTypes.
 * Possible values include: 'DoNothing', 'DeleteFile', 'MoveFile'
 * @readonly
 * @enum {string}
 */
export type CompletionOperationTypes = 'DoNothing' | 'DeleteFile' | 'MoveFile';

/**
 * Defines values for ConnectorMappingStates.
 * Possible values include: 'Creating', 'Created', 'Failed', 'Ready', 'Running', 'Stopped',
 * 'Expiring'
 * @readonly
 * @enum {string}
 */
export type ConnectorMappingStates = 'Creating' | 'Created' | 'Failed' | 'Ready' | 'Running' | 'Stopped' | 'Expiring';

/**
 * Defines values for CalculationWindowTypes.
 * Possible values include: 'Lifetime', 'Hour', 'Day', 'Week', 'Month'
 * @readonly
 * @enum {string}
 */
export type CalculationWindowTypes = 'Lifetime' | 'Hour' | 'Day' | 'Week' | 'Month';

/**
 * Defines values for KpiFunctions.
 * Possible values include: 'Sum', 'Avg', 'Min', 'Max', 'Last', 'Count', 'None', 'CountDistinct'
 * @readonly
 * @enum {string}
 */
export type KpiFunctions = 'Sum' | 'Avg' | 'Min' | 'Max' | 'Last' | 'Count' | 'None' | 'CountDistinct';

/**
 * Defines values for EntityType.
 * Possible values include: 'None', 'Profile', 'Interaction', 'Relationship'
 * @readonly
 * @enum {string}
 */
export type EntityType = 'None' | 'Profile' | 'Interaction' | 'Relationship';

/**
 * Defines values for LinkTypes.
 * Possible values include: 'UpdateAlways', 'CopyIfNull'
 * @readonly
 * @enum {string}
 */
export type LinkTypes = 'UpdateAlways' | 'CopyIfNull';

/**
 * Defines values for InstanceOperationType.
 * Possible values include: 'Upsert', 'Delete'
 * @readonly
 * @enum {string}
 */
export type InstanceOperationType = 'Upsert' | 'Delete';

/**
 * Defines values for CardinalityTypes.
 * Possible values include: 'OneToOne', 'OneToMany', 'ManyToMany'
 * @readonly
 * @enum {string}
 */
export type CardinalityTypes = 'OneToOne' | 'OneToMany' | 'ManyToMany';

/**
 * Defines values for RoleTypes.
 * Possible values include: 'Admin', 'Reader', 'ManageAdmin', 'ManageReader', 'DataAdmin',
 * 'DataReader'
 * @readonly
 * @enum {string}
 */
export type RoleTypes = 'Admin' | 'Reader' | 'ManageAdmin' | 'ManageReader' | 'DataAdmin' | 'DataReader';

/**
 * Defines values for CanonicalPropertyValueType.
 * Possible values include: 'Numeric', 'Categorical', 'DerivedCategorical', 'DerivedNumeric'
 * @readonly
 * @enum {string}
 */
export type CanonicalPropertyValueType = 'Numeric' | 'Categorical' | 'DerivedCategorical' | 'DerivedNumeric';

/**
 * Defines values for PredictionModelLifeCycle.
 * Possible values include: 'New', 'Provisioning', 'ProvisioningFailed', 'PendingDiscovering',
 * 'Discovering', 'PendingFeaturing', 'Featuring', 'FeaturingFailed', 'PendingTraining',
 * 'Training', 'TrainingFailed', 'Evaluating', 'EvaluatingFailed', 'PendingModelConfirmation',
 * 'Active', 'Deleted', 'HumanIntervention', 'Failed'
 * @readonly
 * @enum {string}
 */
export type PredictionModelLifeCycle = 'New' | 'Provisioning' | 'ProvisioningFailed' | 'PendingDiscovering' | 'Discovering' | 'PendingFeaturing' | 'Featuring' | 'FeaturingFailed' | 'PendingTraining' | 'Training' | 'TrainingFailed' | 'Evaluating' | 'EvaluatingFailed' | 'PendingModelConfirmation' | 'Active' | 'Deleted' | 'HumanIntervention' | 'Failed';

/**
 * Contains response data for the list operation.
 */
export type OperationsListResponse = OperationListResult & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;
      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: OperationListResult;
    };
};

/**
 * Contains response data for the listNext operation.
 */
export type OperationsListNextResponse = OperationListResult & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;
      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: OperationListResult;
    };
};

/**
 * Contains response data for the createOrUpdate operation.
 */
export type HubsCreateOrUpdateResponse = Hub & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;
      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: Hub;
    };
};

/**
 * Contains response data for the update operation.
 */
export type HubsUpdateResponse = Hub & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;
      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: Hub;
    };
};

/**
 * Contains response data for the get operation.
 */
export type HubsGetResponse = Hub & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;
      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: Hub;
    };
};

/**
 * Contains response data for the listByResourceGroup operation.
 */
export type HubsListByResourceGroupResponse = HubListResult & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;
      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: HubListResult;
    };
};

/**
 * Contains response data for the list operation.
 */
export type HubsListResponse = HubListResult & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;
      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: HubListResult;
    };
};

/**
 * Contains response data for the listByResourceGroupNext operation.
 */
export type HubsListByResourceGroupNextResponse = HubListResult & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;
      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: HubListResult;
    };
};

/**
 * Contains response data for the listNext operation.
 */
export type HubsListNextResponse = HubListResult & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;
      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: HubListResult;
    };
};

/**
 * Contains response data for the createOrUpdate operation.
 */
export type ProfilesCreateOrUpdateResponse = ProfileResourceFormat & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;
      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: ProfileResourceFormat;
    };
};

/**
 * Contains response data for the get operation.
 */
export type ProfilesGetResponse = ProfileResourceFormat & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;
      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: ProfileResourceFormat;
    };
};

/**
 * Contains response data for the listByHub operation.
 */
export type ProfilesListByHubResponse = ProfileListResult & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;
      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: ProfileListResult;
    };
};

/**
 * Contains response data for the getEnrichingKpis operation.
 */
export type ProfilesGetEnrichingKpisResponse = Array<KpiDefinition> & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;
      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: KpiDefinition[];
    };
};

/**
 * Contains response data for the beginCreateOrUpdate operation.
 */
export type ProfilesBeginCreateOrUpdateResponse = ProfileResourceFormat & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;
      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: ProfileResourceFormat;
    };
};

/**
 * Contains response data for the listByHubNext operation.
 */
export type ProfilesListByHubNextResponse = ProfileListResult & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;
      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: ProfileListResult;
    };
};

/**
 * Contains response data for the createOrUpdate operation.
 */
export type InteractionsCreateOrUpdateResponse = InteractionResourceFormat & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;
      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: InteractionResourceFormat;
    };
};

/**
 * Contains response data for the get operation.
 */
export type InteractionsGetResponse = InteractionResourceFormat & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;
      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: InteractionResourceFormat;
    };
};

/**
 * Contains response data for the listByHub operation.
 */
export type InteractionsListByHubResponse = InteractionListResult & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;
      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: InteractionListResult;
    };
};

/**
 * Contains response data for the suggestRelationshipLinks operation.
 */
export type InteractionsSuggestRelationshipLinksResponse = SuggestRelationshipLinksResponse & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;
      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: SuggestRelationshipLinksResponse;
    };
};

/**
 * Contains response data for the beginCreateOrUpdate operation.
 */
export type InteractionsBeginCreateOrUpdateResponse = InteractionResourceFormat & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;
      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: InteractionResourceFormat;
    };
};

/**
 * Contains response data for the listByHubNext operation.
 */
export type InteractionsListByHubNextResponse = InteractionListResult & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;
      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: InteractionListResult;
    };
};

/**
 * Contains response data for the createOrUpdate operation.
 */
export type RelationshipsCreateOrUpdateResponse = RelationshipResourceFormat & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;
      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: RelationshipResourceFormat;
    };
};

/**
 * Contains response data for the get operation.
 */
export type RelationshipsGetResponse = RelationshipResourceFormat & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;
      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: RelationshipResourceFormat;
    };
};

/**
 * Contains response data for the listByHub operation.
 */
export type RelationshipsListByHubResponse = RelationshipListResult & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;
      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: RelationshipListResult;
    };
};

/**
 * Contains response data for the beginCreateOrUpdate operation.
 */
export type RelationshipsBeginCreateOrUpdateResponse = RelationshipResourceFormat & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;
      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: RelationshipResourceFormat;
    };
};

/**
 * Contains response data for the listByHubNext operation.
 */
export type RelationshipsListByHubNextResponse = RelationshipListResult & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;
      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: RelationshipListResult;
    };
};

/**
 * Contains response data for the createOrUpdate operation.
 */
export type RelationshipLinksCreateOrUpdateResponse = RelationshipLinkResourceFormat & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;
      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: RelationshipLinkResourceFormat;
    };
};

/**
 * Contains response data for the get operation.
 */
export type RelationshipLinksGetResponse = RelationshipLinkResourceFormat & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;
      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: RelationshipLinkResourceFormat;
    };
};

/**
 * Contains response data for the listByHub operation.
 */
export type RelationshipLinksListByHubResponse = RelationshipLinkListResult & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;
      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: RelationshipLinkListResult;
    };
};

/**
 * Contains response data for the beginCreateOrUpdate operation.
 */
export type RelationshipLinksBeginCreateOrUpdateResponse = RelationshipLinkResourceFormat & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;
      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: RelationshipLinkResourceFormat;
    };
};

/**
 * Contains response data for the listByHubNext operation.
 */
export type RelationshipLinksListByHubNextResponse = RelationshipLinkListResult & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;
      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: RelationshipLinkListResult;
    };
};

/**
 * Contains response data for the createOrUpdate operation.
 */
export type AuthorizationPoliciesCreateOrUpdateResponse = AuthorizationPolicyResourceFormat & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;
      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: AuthorizationPolicyResourceFormat;
    };
};

/**
 * Contains response data for the get operation.
 */
export type AuthorizationPoliciesGetResponse = AuthorizationPolicyResourceFormat & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;
      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: AuthorizationPolicyResourceFormat;
    };
};

/**
 * Contains response data for the listByHub operation.
 */
export type AuthorizationPoliciesListByHubResponse = AuthorizationPolicyListResult & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;
      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: AuthorizationPolicyListResult;
    };
};

/**
 * Contains response data for the regeneratePrimaryKey operation.
 */
export type AuthorizationPoliciesRegeneratePrimaryKeyResponse = AuthorizationPolicy & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;
      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: AuthorizationPolicy;
    };
};

/**
 * Contains response data for the regenerateSecondaryKey operation.
 */
export type AuthorizationPoliciesRegenerateSecondaryKeyResponse = AuthorizationPolicy & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;
      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: AuthorizationPolicy;
    };
};

/**
 * Contains response data for the listByHubNext operation.
 */
export type AuthorizationPoliciesListByHubNextResponse = AuthorizationPolicyListResult & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;
      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: AuthorizationPolicyListResult;
    };
};

/**
 * Contains response data for the createOrUpdate operation.
 */
export type ConnectorsCreateOrUpdateResponse = ConnectorResourceFormat & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;
      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: ConnectorResourceFormat;
    };
};

/**
 * Contains response data for the get operation.
 */
export type ConnectorsGetResponse = ConnectorResourceFormat & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;
      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: ConnectorResourceFormat;
    };
};

/**
 * Contains response data for the listByHub operation.
 */
export type ConnectorsListByHubResponse = ConnectorListResult & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;
      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: ConnectorListResult;
    };
};

/**
 * Contains response data for the beginCreateOrUpdate operation.
 */
export type ConnectorsBeginCreateOrUpdateResponse = ConnectorResourceFormat & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;
      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: ConnectorResourceFormat;
    };
};

/**
 * Contains response data for the listByHubNext operation.
 */
export type ConnectorsListByHubNextResponse = ConnectorListResult & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;
      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: ConnectorListResult;
    };
};

/**
 * Contains response data for the createOrUpdate operation.
 */
export type ConnectorMappingsCreateOrUpdateResponse = ConnectorMappingResourceFormat & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;
      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: ConnectorMappingResourceFormat;
    };
};

/**
 * Contains response data for the get operation.
 */
export type ConnectorMappingsGetResponse = ConnectorMappingResourceFormat & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;
      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: ConnectorMappingResourceFormat;
    };
};

/**
 * Contains response data for the listByConnector operation.
 */
export type ConnectorMappingsListByConnectorResponse = ConnectorMappingListResult & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;
      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: ConnectorMappingListResult;
    };
};

/**
 * Contains response data for the listByConnectorNext operation.
 */
export type ConnectorMappingsListByConnectorNextResponse = ConnectorMappingListResult & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;
      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: ConnectorMappingListResult;
    };
};

/**
 * Contains response data for the createOrUpdate operation.
 */
export type KpiCreateOrUpdateResponse = KpiResourceFormat & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;
      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: KpiResourceFormat;
    };
};

/**
 * Contains response data for the get operation.
 */
export type KpiGetResponse = KpiResourceFormat & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;
      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: KpiResourceFormat;
    };
};

/**
 * Contains response data for the listByHub operation.
 */
export type KpiListByHubResponse = KpiListResult & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;
      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: KpiListResult;
    };
};

/**
 * Contains response data for the beginCreateOrUpdate operation.
 */
export type KpiBeginCreateOrUpdateResponse = KpiResourceFormat & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;
      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: KpiResourceFormat;
    };
};

/**
 * Contains response data for the listByHubNext operation.
 */
export type KpiListByHubNextResponse = KpiListResult & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;
      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: KpiListResult;
    };
};

/**
 * Contains response data for the listByHub operation.
 */
export type WidgetTypesListByHubResponse = WidgetTypeListResult & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;
      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: WidgetTypeListResult;
    };
};

/**
 * Contains response data for the get operation.
 */
export type WidgetTypesGetResponse = WidgetTypeResourceFormat & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;
      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: WidgetTypeResourceFormat;
    };
};

/**
 * Contains response data for the listByHubNext operation.
 */
export type WidgetTypesListByHubNextResponse = WidgetTypeListResult & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;
      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: WidgetTypeListResult;
    };
};

/**
 * Contains response data for the listByHub operation.
 */
export type ViewsListByHubResponse = ViewListResult & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;
      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: ViewListResult;
    };
};

/**
 * Contains response data for the createOrUpdate operation.
 */
export type ViewsCreateOrUpdateResponse = ViewResourceFormat & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;
      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: ViewResourceFormat;
    };
};

/**
 * Contains response data for the get operation.
 */
export type ViewsGetResponse = ViewResourceFormat & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;
      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: ViewResourceFormat;
    };
};

/**
 * Contains response data for the listByHubNext operation.
 */
export type ViewsListByHubNextResponse = ViewListResult & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;
      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: ViewListResult;
    };
};

/**
 * Contains response data for the createOrUpdate operation.
 */
export type LinksCreateOrUpdateResponse = LinkResourceFormat & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;
      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: LinkResourceFormat;
    };
};

/**
 * Contains response data for the get operation.
 */
export type LinksGetResponse = LinkResourceFormat & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;
      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: LinkResourceFormat;
    };
};

/**
 * Contains response data for the listByHub operation.
 */
export type LinksListByHubResponse = LinkListResult & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;
      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: LinkListResult;
    };
};

/**
 * Contains response data for the beginCreateOrUpdate operation.
 */
export type LinksBeginCreateOrUpdateResponse = LinkResourceFormat & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;
      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: LinkResourceFormat;
    };
};

/**
 * Contains response data for the listByHubNext operation.
 */
export type LinksListByHubNextResponse = LinkListResult & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;
      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: LinkListResult;
    };
};

/**
 * Contains response data for the listByHub operation.
 */
export type RolesListByHubResponse = RoleListResult & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;
      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: RoleListResult;
    };
};

/**
 * Contains response data for the listByHubNext operation.
 */
export type RolesListByHubNextResponse = RoleListResult & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;
      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: RoleListResult;
    };
};

/**
 * Contains response data for the listByHub operation.
 */
export type RoleAssignmentsListByHubResponse = RoleAssignmentListResult & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;
      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: RoleAssignmentListResult;
    };
};

/**
 * Contains response data for the createOrUpdate operation.
 */
export type RoleAssignmentsCreateOrUpdateResponse = RoleAssignmentResourceFormat & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;
      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: RoleAssignmentResourceFormat;
    };
};

/**
 * Contains response data for the get operation.
 */
export type RoleAssignmentsGetResponse = RoleAssignmentResourceFormat & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;
      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: RoleAssignmentResourceFormat;
    };
};

/**
 * Contains response data for the beginCreateOrUpdate operation.
 */
export type RoleAssignmentsBeginCreateOrUpdateResponse = RoleAssignmentResourceFormat & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;
      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: RoleAssignmentResourceFormat;
    };
};

/**
 * Contains response data for the listByHubNext operation.
 */
export type RoleAssignmentsListByHubNextResponse = RoleAssignmentListResult & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;
      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: RoleAssignmentListResult;
    };
};

/**
 * Contains response data for the getUploadUrlForEntityType operation.
 */
export type ImagesGetUploadUrlForEntityTypeResponse = ImageDefinition & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;
      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: ImageDefinition;
    };
};

/**
 * Contains response data for the getUploadUrlForData operation.
 */
export type ImagesGetUploadUrlForDataResponse = ImageDefinition & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;
      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: ImageDefinition;
    };
};

/**
 * Contains response data for the createOrUpdate operation.
 */
export type PredictionsCreateOrUpdateResponse = PredictionResourceFormat & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;
      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: PredictionResourceFormat;
    };
};

/**
 * Contains response data for the get operation.
 */
export type PredictionsGetResponse = PredictionResourceFormat & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;
      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: PredictionResourceFormat;
    };
};

/**
 * Contains response data for the getTrainingResults operation.
 */
export type PredictionsGetTrainingResultsResponse = PredictionTrainingResults & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;
      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: PredictionTrainingResults;
    };
};

/**
 * Contains response data for the getModelStatus operation.
 */
export type PredictionsGetModelStatusResponse = PredictionModelStatus & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;
      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: PredictionModelStatus;
    };
};

/**
 * Contains response data for the listByHub operation.
 */
export type PredictionsListByHubResponse = PredictionListResult & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;
      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: PredictionListResult;
    };
};

/**
 * Contains response data for the beginCreateOrUpdate operation.
 */
export type PredictionsBeginCreateOrUpdateResponse = PredictionResourceFormat & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;
      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: PredictionResourceFormat;
    };
};

/**
 * Contains response data for the listByHubNext operation.
 */
export type PredictionsListByHubNextResponse = PredictionListResult & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;
      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: PredictionListResult;
    };
};
