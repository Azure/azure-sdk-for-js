/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */

import { PagedAsyncIterableIterator, PageSettings } from "@azure/core-paging";
import { setContinuationToken } from "../pagingHelper";
import { ConnectorMappings } from "../operationsInterfaces";
import * as coreClient from "@azure/core-client";
import * as Mappers from "../models/mappers";
import * as Parameters from "../models/parameters";
import { CustomerInsightsManagementClient } from "../customerInsightsManagementClient";
import {
  ConnectorMappingResourceFormat,
  ConnectorMappingsListByConnectorNextOptionalParams,
  ConnectorMappingsListByConnectorOptionalParams,
  ConnectorMappingsListByConnectorResponse,
  ConnectorMappingsCreateOrUpdateOptionalParams,
  ConnectorMappingsCreateOrUpdateResponse,
  ConnectorMappingsGetOptionalParams,
  ConnectorMappingsGetResponse,
  ConnectorMappingsDeleteOptionalParams,
  ConnectorMappingsListByConnectorNextResponse
} from "../models";

/// <reference lib="esnext.asynciterable" />
/** Class containing ConnectorMappings operations. */
export class ConnectorMappingsImpl implements ConnectorMappings {
  private readonly client: CustomerInsightsManagementClient;

  /**
   * Initialize a new instance of the class ConnectorMappings class.
   * @param client Reference to the service client
   */
  constructor(client: CustomerInsightsManagementClient) {
    this.client = client;
  }

  /**
   * Gets all the connector mappings in the specified connector.
   * @param resourceGroupName The name of the resource group.
   * @param hubName The name of the hub.
   * @param connectorName The name of the connector.
   * @param options The options parameters.
   */
  public listByConnector(
    resourceGroupName: string,
    hubName: string,
    connectorName: string,
    options?: ConnectorMappingsListByConnectorOptionalParams
  ): PagedAsyncIterableIterator<ConnectorMappingResourceFormat> {
    const iter = this.listByConnectorPagingAll(
      resourceGroupName,
      hubName,
      connectorName,
      options
    );
    return {
      next() {
        return iter.next();
      },
      [Symbol.asyncIterator]() {
        return this;
      },
      byPage: (settings?: PageSettings) => {
        if (settings?.maxPageSize) {
          throw new Error("maxPageSize is not supported by this operation.");
        }
        return this.listByConnectorPagingPage(
          resourceGroupName,
          hubName,
          connectorName,
          options,
          settings
        );
      }
    };
  }

  private async *listByConnectorPagingPage(
    resourceGroupName: string,
    hubName: string,
    connectorName: string,
    options?: ConnectorMappingsListByConnectorOptionalParams,
    settings?: PageSettings
  ): AsyncIterableIterator<ConnectorMappingResourceFormat[]> {
    let result: ConnectorMappingsListByConnectorResponse;
    let continuationToken = settings?.continuationToken;
    if (!continuationToken) {
      result = await this._listByConnector(
        resourceGroupName,
        hubName,
        connectorName,
        options
      );
      let page = result.value || [];
      continuationToken = result.nextLink;
      setContinuationToken(page, continuationToken);
      yield page;
    }
    while (continuationToken) {
      result = await this._listByConnectorNext(
        resourceGroupName,
        hubName,
        connectorName,
        continuationToken,
        options
      );
      continuationToken = result.nextLink;
      let page = result.value || [];
      setContinuationToken(page, continuationToken);
      yield page;
    }
  }

  private async *listByConnectorPagingAll(
    resourceGroupName: string,
    hubName: string,
    connectorName: string,
    options?: ConnectorMappingsListByConnectorOptionalParams
  ): AsyncIterableIterator<ConnectorMappingResourceFormat> {
    for await (const page of this.listByConnectorPagingPage(
      resourceGroupName,
      hubName,
      connectorName,
      options
    )) {
      yield* page;
    }
  }

  /**
   * Creates a connector mapping or updates an existing connector mapping in the connector.
   * @param resourceGroupName The name of the resource group.
   * @param hubName The name of the hub.
   * @param connectorName The name of the connector.
   * @param mappingName The name of the connector mapping.
   * @param parameters Parameters supplied to the CreateOrUpdate Connector Mapping operation.
   * @param options The options parameters.
   */
  createOrUpdate(
    resourceGroupName: string,
    hubName: string,
    connectorName: string,
    mappingName: string,
    parameters: ConnectorMappingResourceFormat,
    options?: ConnectorMappingsCreateOrUpdateOptionalParams
  ): Promise<ConnectorMappingsCreateOrUpdateResponse> {
    return this.client.sendOperationRequest(
      {
        resourceGroupName,
        hubName,
        connectorName,
        mappingName,
        parameters,
        options
      },
      createOrUpdateOperationSpec
    );
  }

  /**
   * Gets a connector mapping in the connector.
   * @param resourceGroupName The name of the resource group.
   * @param hubName The name of the hub.
   * @param connectorName The name of the connector.
   * @param mappingName The name of the connector mapping.
   * @param options The options parameters.
   */
  get(
    resourceGroupName: string,
    hubName: string,
    connectorName: string,
    mappingName: string,
    options?: ConnectorMappingsGetOptionalParams
  ): Promise<ConnectorMappingsGetResponse> {
    return this.client.sendOperationRequest(
      { resourceGroupName, hubName, connectorName, mappingName, options },
      getOperationSpec
    );
  }

  /**
   * Deletes a connector mapping in the connector.
   * @param resourceGroupName The name of the resource group.
   * @param hubName The name of the hub.
   * @param connectorName The name of the connector.
   * @param mappingName The name of the connector mapping.
   * @param options The options parameters.
   */
  delete(
    resourceGroupName: string,
    hubName: string,
    connectorName: string,
    mappingName: string,
    options?: ConnectorMappingsDeleteOptionalParams
  ): Promise<void> {
    return this.client.sendOperationRequest(
      { resourceGroupName, hubName, connectorName, mappingName, options },
      deleteOperationSpec
    );
  }

  /**
   * Gets all the connector mappings in the specified connector.
   * @param resourceGroupName The name of the resource group.
   * @param hubName The name of the hub.
   * @param connectorName The name of the connector.
   * @param options The options parameters.
   */
  private _listByConnector(
    resourceGroupName: string,
    hubName: string,
    connectorName: string,
    options?: ConnectorMappingsListByConnectorOptionalParams
  ): Promise<ConnectorMappingsListByConnectorResponse> {
    return this.client.sendOperationRequest(
      { resourceGroupName, hubName, connectorName, options },
      listByConnectorOperationSpec
    );
  }

  /**
   * ListByConnectorNext
   * @param resourceGroupName The name of the resource group.
   * @param hubName The name of the hub.
   * @param connectorName The name of the connector.
   * @param nextLink The nextLink from the previous successful call to the ListByConnector method.
   * @param options The options parameters.
   */
  private _listByConnectorNext(
    resourceGroupName: string,
    hubName: string,
    connectorName: string,
    nextLink: string,
    options?: ConnectorMappingsListByConnectorNextOptionalParams
  ): Promise<ConnectorMappingsListByConnectorNextResponse> {
    return this.client.sendOperationRequest(
      { resourceGroupName, hubName, connectorName, nextLink, options },
      listByConnectorNextOperationSpec
    );
  }
}
// Operation Specifications
const serializer = coreClient.createSerializer(Mappers, /* isXml */ false);

const createOrUpdateOperationSpec: coreClient.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.CustomerInsights/hubs/{hubName}/connectors/{connectorName}/mappings/{mappingName}",
  httpMethod: "PUT",
  responses: {
    200: {
      bodyMapper: Mappers.ConnectorMappingResourceFormat
    },
    201: {
      bodyMapper: Mappers.ConnectorMappingResourceFormat
    }
  },
  requestBody: Parameters.parameters7,
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.resourceGroupName,
    Parameters.subscriptionId,
    Parameters.hubName1,
    Parameters.connectorName1,
    Parameters.mappingName
  ],
  headerParameters: [Parameters.accept, Parameters.contentType],
  mediaType: "json",
  serializer
};
const getOperationSpec: coreClient.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.CustomerInsights/hubs/{hubName}/connectors/{connectorName}/mappings/{mappingName}",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.ConnectorMappingResourceFormat
    }
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.resourceGroupName,
    Parameters.subscriptionId,
    Parameters.hubName1,
    Parameters.connectorName1,
    Parameters.mappingName1
  ],
  headerParameters: [Parameters.accept],
  serializer
};
const deleteOperationSpec: coreClient.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.CustomerInsights/hubs/{hubName}/connectors/{connectorName}/mappings/{mappingName}",
  httpMethod: "DELETE",
  responses: { 200: {}, 204: {} },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.resourceGroupName,
    Parameters.subscriptionId,
    Parameters.hubName1,
    Parameters.connectorName1,
    Parameters.mappingName1
  ],
  serializer
};
const listByConnectorOperationSpec: coreClient.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.CustomerInsights/hubs/{hubName}/connectors/{connectorName}/mappings",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.ConnectorMappingListResult
    }
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.resourceGroupName,
    Parameters.subscriptionId,
    Parameters.hubName1,
    Parameters.connectorName1
  ],
  headerParameters: [Parameters.accept],
  serializer
};
const listByConnectorNextOperationSpec: coreClient.OperationSpec = {
  path: "{nextLink}",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.ConnectorMappingListResult
    }
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.nextLink,
    Parameters.resourceGroupName,
    Parameters.subscriptionId,
    Parameters.hubName1,
    Parameters.connectorName1
  ],
  headerParameters: [Parameters.accept],
  serializer
};
