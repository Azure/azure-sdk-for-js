/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */

import { Images } from "../operationsInterfaces";
import * as coreClient from "@azure/core-client";
import * as Mappers from "../models/mappers";
import * as Parameters from "../models/parameters";
import { CustomerInsightsManagementClient } from "../customerInsightsManagementClient";
import {
  GetImageUploadUrlInput,
  ImagesGetUploadUrlForEntityTypeOptionalParams,
  ImagesGetUploadUrlForEntityTypeResponse,
  ImagesGetUploadUrlForDataOptionalParams,
  ImagesGetUploadUrlForDataResponse
} from "../models";

/** Class containing Images operations. */
export class ImagesImpl implements Images {
  private readonly client: CustomerInsightsManagementClient;

  /**
   * Initialize a new instance of the class Images class.
   * @param client Reference to the service client
   */
  constructor(client: CustomerInsightsManagementClient) {
    this.client = client;
  }

  /**
   * Gets entity type (profile or interaction) image upload URL.
   * @param resourceGroupName The name of the resource group.
   * @param hubName The name of the hub.
   * @param parameters Parameters supplied to the GetUploadUrlForEntityType operation.
   * @param options The options parameters.
   */
  getUploadUrlForEntityType(
    resourceGroupName: string,
    hubName: string,
    parameters: GetImageUploadUrlInput,
    options?: ImagesGetUploadUrlForEntityTypeOptionalParams
  ): Promise<ImagesGetUploadUrlForEntityTypeResponse> {
    return this.client.sendOperationRequest(
      { resourceGroupName, hubName, parameters, options },
      getUploadUrlForEntityTypeOperationSpec
    );
  }

  /**
   * Gets data image upload URL.
   * @param resourceGroupName The name of the resource group.
   * @param hubName The name of the hub.
   * @param parameters Parameters supplied to the GetUploadUrlForData operation.
   * @param options The options parameters.
   */
  getUploadUrlForData(
    resourceGroupName: string,
    hubName: string,
    parameters: GetImageUploadUrlInput,
    options?: ImagesGetUploadUrlForDataOptionalParams
  ): Promise<ImagesGetUploadUrlForDataResponse> {
    return this.client.sendOperationRequest(
      { resourceGroupName, hubName, parameters, options },
      getUploadUrlForDataOperationSpec
    );
  }
}
// Operation Specifications
const serializer = coreClient.createSerializer(Mappers, /* isXml */ false);

const getUploadUrlForEntityTypeOperationSpec: coreClient.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.CustomerInsights/hubs/{hubName}/images/getEntityTypeImageUploadUrl",
  httpMethod: "POST",
  responses: {
    200: {
      bodyMapper: Mappers.ImageDefinition
    }
  },
  requestBody: Parameters.parameters12,
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.resourceGroupName,
    Parameters.subscriptionId,
    Parameters.hubName1
  ],
  headerParameters: [Parameters.accept, Parameters.contentType],
  mediaType: "json",
  serializer
};
const getUploadUrlForDataOperationSpec: coreClient.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.CustomerInsights/hubs/{hubName}/images/getDataImageUploadUrl",
  httpMethod: "POST",
  responses: {
    200: {
      bodyMapper: Mappers.ImageDefinition
    }
  },
  requestBody: Parameters.parameters12,
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.resourceGroupName,
    Parameters.subscriptionId,
    Parameters.hubName1
  ],
  headerParameters: [Parameters.accept, Parameters.contentType],
  mediaType: "json",
  serializer
};
