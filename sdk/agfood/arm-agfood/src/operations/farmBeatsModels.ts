/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is
 * regenerated.
 */

import * as msRest from "@azure/ms-rest-js";
import * as Models from "../models";
import * as Mappers from "../models/farmBeatsModelsMappers";
import * as Parameters from "../models/parameters";
import { AzureAgFoodPlatformRPServiceContext } from "../azureAgFoodPlatformRPServiceContext";

/** Class representing a FarmBeatsModels. */
export class FarmBeatsModels {
  private readonly client: AzureAgFoodPlatformRPServiceContext;

  /**
   * Create a FarmBeatsModels.
   * @param {AzureAgFoodPlatformRPServiceContext} client Reference to the service client.
   */
  constructor(client: AzureAgFoodPlatformRPServiceContext) {
    this.client = client;
  }

  /**
   * Get FarmBeats resource.
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param farmBeatsResourceName FarmBeats resource name.
   * @param [options] The optional parameters
   * @returns Promise<Models.FarmBeatsModelsGetResponse>
   */
  get(resourceGroupName: string, farmBeatsResourceName: string, options?: msRest.RequestOptionsBase): Promise<Models.FarmBeatsModelsGetResponse>;
  /**
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param farmBeatsResourceName FarmBeats resource name.
   * @param callback The callback
   */
  get(resourceGroupName: string, farmBeatsResourceName: string, callback: msRest.ServiceCallback<Models.FarmBeats>): void;
  /**
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param farmBeatsResourceName FarmBeats resource name.
   * @param options The optional parameters
   * @param callback The callback
   */
  get(resourceGroupName: string, farmBeatsResourceName: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.FarmBeats>): void;
  get(resourceGroupName: string, farmBeatsResourceName: string, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<Models.FarmBeats>, callback?: msRest.ServiceCallback<Models.FarmBeats>): Promise<Models.FarmBeatsModelsGetResponse> {
    return this.client.sendOperationRequest(
      {
        resourceGroupName,
        farmBeatsResourceName,
        options
      },
      getOperationSpec,
      callback) as Promise<Models.FarmBeatsModelsGetResponse>;
  }

  /**
   * Create or update FarmBeats resource.
   * @param farmBeatsResourceName FarmBeats resource name.
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param body FarmBeats resource create or update request object.
   * @param [options] The optional parameters
   * @returns Promise<Models.FarmBeatsModelsCreateOrUpdateResponse>
   */
  createOrUpdate(farmBeatsResourceName: string, resourceGroupName: string, body: Models.FarmBeats, options?: msRest.RequestOptionsBase): Promise<Models.FarmBeatsModelsCreateOrUpdateResponse>;
  /**
   * @param farmBeatsResourceName FarmBeats resource name.
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param body FarmBeats resource create or update request object.
   * @param callback The callback
   */
  createOrUpdate(farmBeatsResourceName: string, resourceGroupName: string, body: Models.FarmBeats, callback: msRest.ServiceCallback<Models.FarmBeats>): void;
  /**
   * @param farmBeatsResourceName FarmBeats resource name.
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param body FarmBeats resource create or update request object.
   * @param options The optional parameters
   * @param callback The callback
   */
  createOrUpdate(farmBeatsResourceName: string, resourceGroupName: string, body: Models.FarmBeats, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.FarmBeats>): void;
  createOrUpdate(farmBeatsResourceName: string, resourceGroupName: string, body: Models.FarmBeats, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<Models.FarmBeats>, callback?: msRest.ServiceCallback<Models.FarmBeats>): Promise<Models.FarmBeatsModelsCreateOrUpdateResponse> {
    return this.client.sendOperationRequest(
      {
        farmBeatsResourceName,
        resourceGroupName,
        body,
        options
      },
      createOrUpdateOperationSpec,
      callback) as Promise<Models.FarmBeatsModelsCreateOrUpdateResponse>;
  }

  /**
   * Update a FarmBeats resource.
   * @param farmBeatsResourceName FarmBeats resource name.
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param [options] The optional parameters
   * @returns Promise<Models.FarmBeatsModelsUpdateResponse>
   */
  update(farmBeatsResourceName: string, resourceGroupName: string, options?: Models.FarmBeatsModelsUpdateOptionalParams): Promise<Models.FarmBeatsModelsUpdateResponse>;
  /**
   * @param farmBeatsResourceName FarmBeats resource name.
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param callback The callback
   */
  update(farmBeatsResourceName: string, resourceGroupName: string, callback: msRest.ServiceCallback<Models.FarmBeats>): void;
  /**
   * @param farmBeatsResourceName FarmBeats resource name.
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param options The optional parameters
   * @param callback The callback
   */
  update(farmBeatsResourceName: string, resourceGroupName: string, options: Models.FarmBeatsModelsUpdateOptionalParams, callback: msRest.ServiceCallback<Models.FarmBeats>): void;
  update(farmBeatsResourceName: string, resourceGroupName: string, options?: Models.FarmBeatsModelsUpdateOptionalParams | msRest.ServiceCallback<Models.FarmBeats>, callback?: msRest.ServiceCallback<Models.FarmBeats>): Promise<Models.FarmBeatsModelsUpdateResponse> {
    return this.client.sendOperationRequest(
      {
        farmBeatsResourceName,
        resourceGroupName,
        options
      },
      updateOperationSpec,
      callback) as Promise<Models.FarmBeatsModelsUpdateResponse>;
  }

  /**
   * Delete a FarmBeats resource.
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param farmBeatsResourceName FarmBeats resource name.
   * @param [options] The optional parameters
   * @returns Promise<msRest.RestResponse>
   */
  deleteMethod(resourceGroupName: string, farmBeatsResourceName: string, options?: msRest.RequestOptionsBase): Promise<msRest.RestResponse>;
  /**
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param farmBeatsResourceName FarmBeats resource name.
   * @param callback The callback
   */
  deleteMethod(resourceGroupName: string, farmBeatsResourceName: string, callback: msRest.ServiceCallback<void>): void;
  /**
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param farmBeatsResourceName FarmBeats resource name.
   * @param options The optional parameters
   * @param callback The callback
   */
  deleteMethod(resourceGroupName: string, farmBeatsResourceName: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<void>): void;
  deleteMethod(resourceGroupName: string, farmBeatsResourceName: string, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<void>, callback?: msRest.ServiceCallback<void>): Promise<msRest.RestResponse> {
    return this.client.sendOperationRequest(
      {
        resourceGroupName,
        farmBeatsResourceName,
        options
      },
      deleteMethodOperationSpec,
      callback);
  }

  /**
   * Lists the FarmBeats instances for a subscription.
   * @param [options] The optional parameters
   * @returns Promise<Models.FarmBeatsModelsListBySubscriptionResponse>
   */
  listBySubscription(options?: Models.FarmBeatsModelsListBySubscriptionOptionalParams): Promise<Models.FarmBeatsModelsListBySubscriptionResponse>;
  /**
   * @param callback The callback
   */
  listBySubscription(callback: msRest.ServiceCallback<Models.FarmBeatsListResponse>): void;
  /**
   * @param options The optional parameters
   * @param callback The callback
   */
  listBySubscription(options: Models.FarmBeatsModelsListBySubscriptionOptionalParams, callback: msRest.ServiceCallback<Models.FarmBeatsListResponse>): void;
  listBySubscription(options?: Models.FarmBeatsModelsListBySubscriptionOptionalParams | msRest.ServiceCallback<Models.FarmBeatsListResponse>, callback?: msRest.ServiceCallback<Models.FarmBeatsListResponse>): Promise<Models.FarmBeatsModelsListBySubscriptionResponse> {
    return this.client.sendOperationRequest(
      {
        options
      },
      listBySubscriptionOperationSpec,
      callback) as Promise<Models.FarmBeatsModelsListBySubscriptionResponse>;
  }

  /**
   * Lists the FarmBeats instances for a resource group.
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param [options] The optional parameters
   * @returns Promise<Models.FarmBeatsModelsListByResourceGroupResponse>
   */
  listByResourceGroup(resourceGroupName: string, options?: Models.FarmBeatsModelsListByResourceGroupOptionalParams): Promise<Models.FarmBeatsModelsListByResourceGroupResponse>;
  /**
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param callback The callback
   */
  listByResourceGroup(resourceGroupName: string, callback: msRest.ServiceCallback<Models.FarmBeatsListResponse>): void;
  /**
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param options The optional parameters
   * @param callback The callback
   */
  listByResourceGroup(resourceGroupName: string, options: Models.FarmBeatsModelsListByResourceGroupOptionalParams, callback: msRest.ServiceCallback<Models.FarmBeatsListResponse>): void;
  listByResourceGroup(resourceGroupName: string, options?: Models.FarmBeatsModelsListByResourceGroupOptionalParams | msRest.ServiceCallback<Models.FarmBeatsListResponse>, callback?: msRest.ServiceCallback<Models.FarmBeatsListResponse>): Promise<Models.FarmBeatsModelsListByResourceGroupResponse> {
    return this.client.sendOperationRequest(
      {
        resourceGroupName,
        options
      },
      listByResourceGroupOperationSpec,
      callback) as Promise<Models.FarmBeatsModelsListByResourceGroupResponse>;
  }

  /**
   * Lists the FarmBeats instances for a subscription.
   * @param nextPageLink The NextLink from the previous successful call to List operation.
   * @param [options] The optional parameters
   * @returns Promise<Models.FarmBeatsModelsListBySubscriptionNextResponse>
   */
  listBySubscriptionNext(nextPageLink: string, options?: Models.FarmBeatsModelsListBySubscriptionNextOptionalParams): Promise<Models.FarmBeatsModelsListBySubscriptionNextResponse>;
  /**
   * @param nextPageLink The NextLink from the previous successful call to List operation.
   * @param callback The callback
   */
  listBySubscriptionNext(nextPageLink: string, callback: msRest.ServiceCallback<Models.FarmBeatsListResponse>): void;
  /**
   * @param nextPageLink The NextLink from the previous successful call to List operation.
   * @param options The optional parameters
   * @param callback The callback
   */
  listBySubscriptionNext(nextPageLink: string, options: Models.FarmBeatsModelsListBySubscriptionNextOptionalParams, callback: msRest.ServiceCallback<Models.FarmBeatsListResponse>): void;
  listBySubscriptionNext(nextPageLink: string, options?: Models.FarmBeatsModelsListBySubscriptionNextOptionalParams | msRest.ServiceCallback<Models.FarmBeatsListResponse>, callback?: msRest.ServiceCallback<Models.FarmBeatsListResponse>): Promise<Models.FarmBeatsModelsListBySubscriptionNextResponse> {
    return this.client.sendOperationRequest(
      {
        nextPageLink,
        options
      },
      listBySubscriptionNextOperationSpec,
      callback) as Promise<Models.FarmBeatsModelsListBySubscriptionNextResponse>;
  }

  /**
   * Lists the FarmBeats instances for a resource group.
   * @param nextPageLink The NextLink from the previous successful call to List operation.
   * @param [options] The optional parameters
   * @returns Promise<Models.FarmBeatsModelsListByResourceGroupNextResponse>
   */
  listByResourceGroupNext(nextPageLink: string, options?: Models.FarmBeatsModelsListByResourceGroupNextOptionalParams): Promise<Models.FarmBeatsModelsListByResourceGroupNextResponse>;
  /**
   * @param nextPageLink The NextLink from the previous successful call to List operation.
   * @param callback The callback
   */
  listByResourceGroupNext(nextPageLink: string, callback: msRest.ServiceCallback<Models.FarmBeatsListResponse>): void;
  /**
   * @param nextPageLink The NextLink from the previous successful call to List operation.
   * @param options The optional parameters
   * @param callback The callback
   */
  listByResourceGroupNext(nextPageLink: string, options: Models.FarmBeatsModelsListByResourceGroupNextOptionalParams, callback: msRest.ServiceCallback<Models.FarmBeatsListResponse>): void;
  listByResourceGroupNext(nextPageLink: string, options?: Models.FarmBeatsModelsListByResourceGroupNextOptionalParams | msRest.ServiceCallback<Models.FarmBeatsListResponse>, callback?: msRest.ServiceCallback<Models.FarmBeatsListResponse>): Promise<Models.FarmBeatsModelsListByResourceGroupNextResponse> {
    return this.client.sendOperationRequest(
      {
        nextPageLink,
        options
      },
      listByResourceGroupNextOperationSpec,
      callback) as Promise<Models.FarmBeatsModelsListByResourceGroupNextResponse>;
  }
}

// Operation Specifications
const serializer = new msRest.Serializer(Mappers);
const getOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.AgFoodPlatform/farmBeats/{farmBeatsResourceName}",
  urlParameters: [
    Parameters.resourceGroupName,
    Parameters.subscriptionId,
    Parameters.farmBeatsResourceName
  ],
  queryParameters: [
    Parameters.apiVersion
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    200: {
      bodyMapper: Mappers.FarmBeats
    },
    default: {
      bodyMapper: Mappers.ErrorResponse
    }
  },
  serializer
};

const createOrUpdateOperationSpec: msRest.OperationSpec = {
  httpMethod: "PUT",
  path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.AgFoodPlatform/farmBeats/{farmBeatsResourceName}",
  urlParameters: [
    Parameters.farmBeatsResourceName,
    Parameters.resourceGroupName,
    Parameters.subscriptionId
  ],
  queryParameters: [
    Parameters.apiVersion
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  requestBody: {
    parameterPath: "body",
    mapper: {
      ...Mappers.FarmBeats,
      required: true
    }
  },
  responses: {
    200: {
      bodyMapper: Mappers.FarmBeats
    },
    201: {
      bodyMapper: Mappers.FarmBeats
    },
    default: {
      bodyMapper: Mappers.ErrorResponse
    }
  },
  serializer
};

const updateOperationSpec: msRest.OperationSpec = {
  httpMethod: "PATCH",
  path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.AgFoodPlatform/farmBeats/{farmBeatsResourceName}",
  urlParameters: [
    Parameters.farmBeatsResourceName,
    Parameters.resourceGroupName,
    Parameters.subscriptionId
  ],
  queryParameters: [
    Parameters.apiVersion
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  requestBody: {
    parameterPath: {
      tags: [
        "options",
        "tags"
      ]
    },
    mapper: {
      ...Mappers.FarmBeatsUpdateRequestModel,
      required: true
    }
  },
  responses: {
    200: {
      bodyMapper: Mappers.FarmBeats
    },
    default: {
      bodyMapper: Mappers.ErrorResponse
    }
  },
  serializer
};

const deleteMethodOperationSpec: msRest.OperationSpec = {
  httpMethod: "DELETE",
  path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.AgFoodPlatform/farmBeats/{farmBeatsResourceName}",
  urlParameters: [
    Parameters.resourceGroupName,
    Parameters.subscriptionId,
    Parameters.farmBeatsResourceName
  ],
  queryParameters: [
    Parameters.apiVersion
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    200: {},
    204: {},
    default: {
      bodyMapper: Mappers.ErrorResponse
    }
  },
  serializer
};

const listBySubscriptionOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "subscriptions/{subscriptionId}/providers/Microsoft.AgFoodPlatform/farmBeats",
  urlParameters: [
    Parameters.subscriptionId
  ],
  queryParameters: [
    Parameters.maxPageSize,
    Parameters.skipToken,
    Parameters.apiVersion
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    200: {
      bodyMapper: Mappers.FarmBeatsListResponse
    },
    default: {
      bodyMapper: Mappers.ErrorResponse
    }
  },
  serializer
};

const listByResourceGroupOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.AgFoodPlatform/farmBeats",
  urlParameters: [
    Parameters.resourceGroupName,
    Parameters.subscriptionId
  ],
  queryParameters: [
    Parameters.maxPageSize,
    Parameters.skipToken,
    Parameters.apiVersion
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    200: {
      bodyMapper: Mappers.FarmBeatsListResponse
    },
    default: {
      bodyMapper: Mappers.ErrorResponse
    }
  },
  serializer
};

const listBySubscriptionNextOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  baseUrl: "https://management.azure.com",
  path: "{nextLink}",
  urlParameters: [
    Parameters.nextPageLink
  ],
  queryParameters: [
    Parameters.maxPageSize,
    Parameters.skipToken,
    Parameters.apiVersion
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    200: {
      bodyMapper: Mappers.FarmBeatsListResponse
    },
    default: {
      bodyMapper: Mappers.ErrorResponse
    }
  },
  serializer
};

const listByResourceGroupNextOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  baseUrl: "https://management.azure.com",
  path: "{nextLink}",
  urlParameters: [
    Parameters.nextPageLink
  ],
  queryParameters: [
    Parameters.maxPageSize,
    Parameters.skipToken,
    Parameters.apiVersion
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    200: {
      bodyMapper: Mappers.FarmBeatsListResponse
    },
    default: {
      bodyMapper: Mappers.ErrorResponse
    }
  },
  serializer
};
