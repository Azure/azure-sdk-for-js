/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is
 * regenerated.
 */

import * as msRest from "@azure/ms-rest-js";
import * as Models from "../models";
import * as Mappers from "../models/extensionsMappers";
import * as Parameters from "../models/parameters";
import { AzureAgFoodPlatformRPServiceContext } from "../azureAgFoodPlatformRPServiceContext";

/** Class representing a Extensions. */
export class Extensions {
  private readonly client: AzureAgFoodPlatformRPServiceContext;

  /**
   * Create a Extensions.
   * @param {AzureAgFoodPlatformRPServiceContext} client Reference to the service client.
   */
  constructor(client: AzureAgFoodPlatformRPServiceContext) {
    this.client = client;
  }

  /**
   * Install extension.
   * @param extensionId Id of extension resource.
   * @param farmBeatsResourceName FarmBeats resource name.
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param [options] The optional parameters
   * @returns Promise<Models.ExtensionsCreateResponse>
   */
  create(extensionId: string, farmBeatsResourceName: string, resourceGroupName: string, options?: msRest.RequestOptionsBase): Promise<Models.ExtensionsCreateResponse>;
  /**
   * @param extensionId Id of extension resource.
   * @param farmBeatsResourceName FarmBeats resource name.
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param callback The callback
   */
  create(extensionId: string, farmBeatsResourceName: string, resourceGroupName: string, callback: msRest.ServiceCallback<Models.Extension>): void;
  /**
   * @param extensionId Id of extension resource.
   * @param farmBeatsResourceName FarmBeats resource name.
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param options The optional parameters
   * @param callback The callback
   */
  create(extensionId: string, farmBeatsResourceName: string, resourceGroupName: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.Extension>): void;
  create(extensionId: string, farmBeatsResourceName: string, resourceGroupName: string, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<Models.Extension>, callback?: msRest.ServiceCallback<Models.Extension>): Promise<Models.ExtensionsCreateResponse> {
    return this.client.sendOperationRequest(
      {
        extensionId,
        farmBeatsResourceName,
        resourceGroupName,
        options
      },
      createOperationSpec,
      callback) as Promise<Models.ExtensionsCreateResponse>;
  }

  /**
   * Get installed extension details by extension id.
   * @param extensionId Id of extension resource.
   * @param farmBeatsResourceName FarmBeats resource name.
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param [options] The optional parameters
   * @returns Promise<Models.ExtensionsGetResponse>
   */
  get(extensionId: string, farmBeatsResourceName: string, resourceGroupName: string, options?: msRest.RequestOptionsBase): Promise<Models.ExtensionsGetResponse>;
  /**
   * @param extensionId Id of extension resource.
   * @param farmBeatsResourceName FarmBeats resource name.
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param callback The callback
   */
  get(extensionId: string, farmBeatsResourceName: string, resourceGroupName: string, callback: msRest.ServiceCallback<Models.Extension>): void;
  /**
   * @param extensionId Id of extension resource.
   * @param farmBeatsResourceName FarmBeats resource name.
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param options The optional parameters
   * @param callback The callback
   */
  get(extensionId: string, farmBeatsResourceName: string, resourceGroupName: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.Extension>): void;
  get(extensionId: string, farmBeatsResourceName: string, resourceGroupName: string, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<Models.Extension>, callback?: msRest.ServiceCallback<Models.Extension>): Promise<Models.ExtensionsGetResponse> {
    return this.client.sendOperationRequest(
      {
        extensionId,
        farmBeatsResourceName,
        resourceGroupName,
        options
      },
      getOperationSpec,
      callback) as Promise<Models.ExtensionsGetResponse>;
  }

  /**
   * Upgrade to latest extension.
   * @param extensionId Id of extension resource.
   * @param farmBeatsResourceName FarmBeats resource name.
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param [options] The optional parameters
   * @returns Promise<Models.ExtensionsUpdateResponse>
   */
  update(extensionId: string, farmBeatsResourceName: string, resourceGroupName: string, options?: msRest.RequestOptionsBase): Promise<Models.ExtensionsUpdateResponse>;
  /**
   * @param extensionId Id of extension resource.
   * @param farmBeatsResourceName FarmBeats resource name.
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param callback The callback
   */
  update(extensionId: string, farmBeatsResourceName: string, resourceGroupName: string, callback: msRest.ServiceCallback<Models.Extension>): void;
  /**
   * @param extensionId Id of extension resource.
   * @param farmBeatsResourceName FarmBeats resource name.
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param options The optional parameters
   * @param callback The callback
   */
  update(extensionId: string, farmBeatsResourceName: string, resourceGroupName: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.Extension>): void;
  update(extensionId: string, farmBeatsResourceName: string, resourceGroupName: string, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<Models.Extension>, callback?: msRest.ServiceCallback<Models.Extension>): Promise<Models.ExtensionsUpdateResponse> {
    return this.client.sendOperationRequest(
      {
        extensionId,
        farmBeatsResourceName,
        resourceGroupName,
        options
      },
      updateOperationSpec,
      callback) as Promise<Models.ExtensionsUpdateResponse>;
  }

  /**
   * Uninstall extension.
   * @param extensionId Id of extension resource.
   * @param farmBeatsResourceName FarmBeats resource name.
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param [options] The optional parameters
   * @returns Promise<msRest.RestResponse>
   */
  deleteMethod(extensionId: string, farmBeatsResourceName: string, resourceGroupName: string, options?: msRest.RequestOptionsBase): Promise<msRest.RestResponse>;
  /**
   * @param extensionId Id of extension resource.
   * @param farmBeatsResourceName FarmBeats resource name.
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param callback The callback
   */
  deleteMethod(extensionId: string, farmBeatsResourceName: string, resourceGroupName: string, callback: msRest.ServiceCallback<void>): void;
  /**
   * @param extensionId Id of extension resource.
   * @param farmBeatsResourceName FarmBeats resource name.
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param options The optional parameters
   * @param callback The callback
   */
  deleteMethod(extensionId: string, farmBeatsResourceName: string, resourceGroupName: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<void>): void;
  deleteMethod(extensionId: string, farmBeatsResourceName: string, resourceGroupName: string, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<void>, callback?: msRest.ServiceCallback<void>): Promise<msRest.RestResponse> {
    return this.client.sendOperationRequest(
      {
        extensionId,
        farmBeatsResourceName,
        resourceGroupName,
        options
      },
      deleteMethodOperationSpec,
      callback);
  }

  /**
   * Get installed extensions details.
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param farmBeatsResourceName FarmBeats resource name.
   * @param [options] The optional parameters
   * @returns Promise<Models.ExtensionsListByFarmBeatsResponse>
   */
  listByFarmBeats(resourceGroupName: string, farmBeatsResourceName: string, options?: Models.ExtensionsListByFarmBeatsOptionalParams): Promise<Models.ExtensionsListByFarmBeatsResponse>;
  /**
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param farmBeatsResourceName FarmBeats resource name.
   * @param callback The callback
   */
  listByFarmBeats(resourceGroupName: string, farmBeatsResourceName: string, callback: msRest.ServiceCallback<Models.ExtensionListResponse>): void;
  /**
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param farmBeatsResourceName FarmBeats resource name.
   * @param options The optional parameters
   * @param callback The callback
   */
  listByFarmBeats(resourceGroupName: string, farmBeatsResourceName: string, options: Models.ExtensionsListByFarmBeatsOptionalParams, callback: msRest.ServiceCallback<Models.ExtensionListResponse>): void;
  listByFarmBeats(resourceGroupName: string, farmBeatsResourceName: string, options?: Models.ExtensionsListByFarmBeatsOptionalParams | msRest.ServiceCallback<Models.ExtensionListResponse>, callback?: msRest.ServiceCallback<Models.ExtensionListResponse>): Promise<Models.ExtensionsListByFarmBeatsResponse> {
    return this.client.sendOperationRequest(
      {
        resourceGroupName,
        farmBeatsResourceName,
        options
      },
      listByFarmBeatsOperationSpec,
      callback) as Promise<Models.ExtensionsListByFarmBeatsResponse>;
  }

  /**
   * Get installed extensions details.
   * @param nextPageLink The NextLink from the previous successful call to List operation.
   * @param [options] The optional parameters
   * @returns Promise<Models.ExtensionsListByFarmBeatsNextResponse>
   */
  listByFarmBeatsNext(nextPageLink: string, options?: Models.ExtensionsListByFarmBeatsNextOptionalParams): Promise<Models.ExtensionsListByFarmBeatsNextResponse>;
  /**
   * @param nextPageLink The NextLink from the previous successful call to List operation.
   * @param callback The callback
   */
  listByFarmBeatsNext(nextPageLink: string, callback: msRest.ServiceCallback<Models.ExtensionListResponse>): void;
  /**
   * @param nextPageLink The NextLink from the previous successful call to List operation.
   * @param options The optional parameters
   * @param callback The callback
   */
  listByFarmBeatsNext(nextPageLink: string, options: Models.ExtensionsListByFarmBeatsNextOptionalParams, callback: msRest.ServiceCallback<Models.ExtensionListResponse>): void;
  listByFarmBeatsNext(nextPageLink: string, options?: Models.ExtensionsListByFarmBeatsNextOptionalParams | msRest.ServiceCallback<Models.ExtensionListResponse>, callback?: msRest.ServiceCallback<Models.ExtensionListResponse>): Promise<Models.ExtensionsListByFarmBeatsNextResponse> {
    return this.client.sendOperationRequest(
      {
        nextPageLink,
        options
      },
      listByFarmBeatsNextOperationSpec,
      callback) as Promise<Models.ExtensionsListByFarmBeatsNextResponse>;
  }
}

// Operation Specifications
const serializer = new msRest.Serializer(Mappers);
const createOperationSpec: msRest.OperationSpec = {
  httpMethod: "PUT",
  path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.AgFoodPlatform/farmBeats/{farmBeatsResourceName}/extensions/{extensionId}",
  urlParameters: [
    Parameters.extensionId0,
    Parameters.farmBeatsResourceName,
    Parameters.resourceGroupName,
    Parameters.subscriptionId
  ],
  queryParameters: [
    Parameters.apiVersion
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    201: {
      bodyMapper: Mappers.Extension
    },
    default: {
      bodyMapper: Mappers.ErrorResponse
    }
  },
  serializer
};

const getOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.AgFoodPlatform/farmBeats/{farmBeatsResourceName}/extensions/{extensionId}",
  urlParameters: [
    Parameters.extensionId0,
    Parameters.farmBeatsResourceName,
    Parameters.resourceGroupName,
    Parameters.subscriptionId
  ],
  queryParameters: [
    Parameters.apiVersion
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    200: {
      bodyMapper: Mappers.Extension
    },
    default: {
      bodyMapper: Mappers.ErrorResponse
    }
  },
  serializer
};

const updateOperationSpec: msRest.OperationSpec = {
  httpMethod: "PATCH",
  path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.AgFoodPlatform/farmBeats/{farmBeatsResourceName}/extensions/{extensionId}",
  urlParameters: [
    Parameters.extensionId0,
    Parameters.farmBeatsResourceName,
    Parameters.resourceGroupName,
    Parameters.subscriptionId
  ],
  queryParameters: [
    Parameters.apiVersion
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    200: {
      bodyMapper: Mappers.Extension
    },
    default: {
      bodyMapper: Mappers.ErrorResponse
    }
  },
  serializer
};

const deleteMethodOperationSpec: msRest.OperationSpec = {
  httpMethod: "DELETE",
  path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.AgFoodPlatform/farmBeats/{farmBeatsResourceName}/extensions/{extensionId}",
  urlParameters: [
    Parameters.extensionId0,
    Parameters.farmBeatsResourceName,
    Parameters.resourceGroupName,
    Parameters.subscriptionId
  ],
  queryParameters: [
    Parameters.apiVersion
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    200: {},
    204: {},
    default: {
      bodyMapper: Mappers.ErrorResponse
    }
  },
  serializer
};

const listByFarmBeatsOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.AgFoodPlatform/farmBeats/{farmBeatsResourceName}/extensions",
  urlParameters: [
    Parameters.resourceGroupName,
    Parameters.subscriptionId,
    Parameters.farmBeatsResourceName
  ],
  queryParameters: [
    Parameters.apiVersion,
    Parameters.extensionId1,
    Parameters.extensionCategory,
    Parameters.maxPageSize,
    Parameters.skipToken
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    200: {
      bodyMapper: Mappers.ExtensionListResponse
    },
    default: {
      bodyMapper: Mappers.ErrorResponse
    }
  },
  serializer
};

const listByFarmBeatsNextOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  baseUrl: "https://management.azure.com",
  path: "{nextLink}",
  urlParameters: [
    Parameters.nextPageLink
  ],
  queryParameters: [
    Parameters.apiVersion,
    Parameters.extensionId1,
    Parameters.extensionCategory,
    Parameters.maxPageSize,
    Parameters.skipToken
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    200: {
      bodyMapper: Mappers.ExtensionListResponse
    },
    default: {
      bodyMapper: Mappers.ErrorResponse
    }
  },
  serializer
};
