/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */

import { PagedAsyncIterableIterator } from "@azure/core-paging";
import { SimplePollerLike, OperationState } from "@azure/core-lro";
import {
  StorageTarget,
  StorageTargetsListByCacheOptionalParams,
  StorageTargetsDnsRefreshOptionalParams,
  StorageTargetsDeleteOptionalParams,
  StorageTargetsGetOptionalParams,
  StorageTargetsGetResponse,
  StorageTargetsCreateOrUpdateOptionalParams,
  StorageTargetsCreateOrUpdateResponse,
  StorageTargetsRestoreDefaultsOptionalParams
} from "../models";

/// <reference lib="esnext.asynciterable" />
/** Interface representing a StorageTargets. */
export interface StorageTargets {
  /**
   * Returns a list of Storage Targets for the specified Cache.
   * @param resourceGroupName Target resource group.
   * @param cacheName Name of Cache. Length of name must not be greater than 80 and chars must be from
   *                  the [-0-9a-zA-Z_] char class.
   * @param options The options parameters.
   */
  listByCache(
    resourceGroupName: string,
    cacheName: string,
    options?: StorageTargetsListByCacheOptionalParams
  ): PagedAsyncIterableIterator<StorageTarget>;
  /**
   * Tells a storage target to refresh its DNS information.
   * @param resourceGroupName Target resource group.
   * @param cacheName Name of Cache. Length of name must not be greater than 80 and chars must be from
   *                  the [-0-9a-zA-Z_] char class.
   * @param storageTargetName Name of Storage Target.
   * @param options The options parameters.
   */
  beginDnsRefresh(
    resourceGroupName: string,
    cacheName: string,
    storageTargetName: string,
    options?: StorageTargetsDnsRefreshOptionalParams
  ): Promise<SimplePollerLike<OperationState<void>, void>>;
  /**
   * Tells a storage target to refresh its DNS information.
   * @param resourceGroupName Target resource group.
   * @param cacheName Name of Cache. Length of name must not be greater than 80 and chars must be from
   *                  the [-0-9a-zA-Z_] char class.
   * @param storageTargetName Name of Storage Target.
   * @param options The options parameters.
   */
  beginDnsRefreshAndWait(
    resourceGroupName: string,
    cacheName: string,
    storageTargetName: string,
    options?: StorageTargetsDnsRefreshOptionalParams
  ): Promise<void>;
  /**
   * Removes a Storage Target from a Cache. This operation is allowed at any time, but if the Cache is
   * down or unhealthy, the actual removal of the Storage Target may be delayed until the Cache is
   * healthy again. Note that if the Cache has data to flush to the Storage Target, the data will be
   * flushed before the Storage Target will be deleted.
   * @param resourceGroupName Target resource group.
   * @param cacheName Name of Cache. Length of name must not be greater than 80 and chars must be from
   *                  the [-0-9a-zA-Z_] char class.
   * @param storageTargetName Name of Storage Target.
   * @param options The options parameters.
   */
  beginDelete(
    resourceGroupName: string,
    cacheName: string,
    storageTargetName: string,
    options?: StorageTargetsDeleteOptionalParams
  ): Promise<SimplePollerLike<OperationState<void>, void>>;
  /**
   * Removes a Storage Target from a Cache. This operation is allowed at any time, but if the Cache is
   * down or unhealthy, the actual removal of the Storage Target may be delayed until the Cache is
   * healthy again. Note that if the Cache has data to flush to the Storage Target, the data will be
   * flushed before the Storage Target will be deleted.
   * @param resourceGroupName Target resource group.
   * @param cacheName Name of Cache. Length of name must not be greater than 80 and chars must be from
   *                  the [-0-9a-zA-Z_] char class.
   * @param storageTargetName Name of Storage Target.
   * @param options The options parameters.
   */
  beginDeleteAndWait(
    resourceGroupName: string,
    cacheName: string,
    storageTargetName: string,
    options?: StorageTargetsDeleteOptionalParams
  ): Promise<void>;
  /**
   * Returns a Storage Target from a Cache.
   * @param resourceGroupName Target resource group.
   * @param cacheName Name of Cache. Length of name must not be greater than 80 and chars must be from
   *                  the [-0-9a-zA-Z_] char class.
   * @param storageTargetName Name of Storage Target.
   * @param options The options parameters.
   */
  get(
    resourceGroupName: string,
    cacheName: string,
    storageTargetName: string,
    options?: StorageTargetsGetOptionalParams
  ): Promise<StorageTargetsGetResponse>;
  /**
   * Create or update a Storage Target. This operation is allowed at any time, but if the Cache is down
   * or unhealthy, the actual creation/modification of the Storage Target may be delayed until the Cache
   * is healthy again.
   * @param resourceGroupName Target resource group.
   * @param cacheName Name of Cache. Length of name must not be greater than 80 and chars must be from
   *                  the [-0-9a-zA-Z_] char class.
   * @param storageTargetName Name of Storage Target.
   * @param storagetarget Object containing the definition of a Storage Target.
   * @param options The options parameters.
   */
  beginCreateOrUpdate(
    resourceGroupName: string,
    cacheName: string,
    storageTargetName: string,
    storagetarget: StorageTarget,
    options?: StorageTargetsCreateOrUpdateOptionalParams
  ): Promise<
    SimplePollerLike<
      OperationState<StorageTargetsCreateOrUpdateResponse>,
      StorageTargetsCreateOrUpdateResponse
    >
  >;
  /**
   * Create or update a Storage Target. This operation is allowed at any time, but if the Cache is down
   * or unhealthy, the actual creation/modification of the Storage Target may be delayed until the Cache
   * is healthy again.
   * @param resourceGroupName Target resource group.
   * @param cacheName Name of Cache. Length of name must not be greater than 80 and chars must be from
   *                  the [-0-9a-zA-Z_] char class.
   * @param storageTargetName Name of Storage Target.
   * @param storagetarget Object containing the definition of a Storage Target.
   * @param options The options parameters.
   */
  beginCreateOrUpdateAndWait(
    resourceGroupName: string,
    cacheName: string,
    storageTargetName: string,
    storagetarget: StorageTarget,
    options?: StorageTargetsCreateOrUpdateOptionalParams
  ): Promise<StorageTargetsCreateOrUpdateResponse>;
  /**
   * Tells a storage target to restore its settings to their default values.
   * @param resourceGroupName Target resource group.
   * @param cacheName Name of Cache. Length of name must not be greater than 80 and chars must be from
   *                  the [-0-9a-zA-Z_] char class.
   * @param storageTargetName Name of Storage Target.
   * @param options The options parameters.
   */
  beginRestoreDefaults(
    resourceGroupName: string,
    cacheName: string,
    storageTargetName: string,
    options?: StorageTargetsRestoreDefaultsOptionalParams
  ): Promise<SimplePollerLike<OperationState<void>, void>>;
  /**
   * Tells a storage target to restore its settings to their default values.
   * @param resourceGroupName Target resource group.
   * @param cacheName Name of Cache. Length of name must not be greater than 80 and chars must be from
   *                  the [-0-9a-zA-Z_] char class.
   * @param storageTargetName Name of Storage Target.
   * @param options The options parameters.
   */
  beginRestoreDefaultsAndWait(
    resourceGroupName: string,
    cacheName: string,
    storageTargetName: string,
    options?: StorageTargetsRestoreDefaultsOptionalParams
  ): Promise<void>;
}
