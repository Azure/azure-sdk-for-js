/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is
 * regenerated.
 */

import * as msRest from "@azure/ms-rest-js";
import * as msRestAzure from "@azure/ms-rest-azure-js";
import * as Models from "../models";
import * as Mappers from "../models/cachesMappers";
import * as Parameters from "../models/parameters";
import { StorageCacheManagementClientContext } from "../storageCacheManagementClientContext";

/** Class representing a Caches. */
export class Caches {
  private readonly client: StorageCacheManagementClientContext;

  /**
   * Create a Caches.
   * @param {StorageCacheManagementClientContext} client Reference to the service client.
   */
  constructor(client: StorageCacheManagementClientContext) {
    this.client = client;
  }

  /**
   * Returns all Caches the user has access to under a subscription.
   * @param [options] The optional parameters
   * @returns Promise<Models.CachesListResponse>
   */
  list(options?: msRest.RequestOptionsBase): Promise<Models.CachesListResponse>;
  /**
   * @param callback The callback
   */
  list(callback: msRest.ServiceCallback<Models.CachesListResult>): void;
  /**
   * @param options The optional parameters
   * @param callback The callback
   */
  list(options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.CachesListResult>): void;
  list(options?: msRest.RequestOptionsBase | msRest.ServiceCallback<Models.CachesListResult>, callback?: msRest.ServiceCallback<Models.CachesListResult>): Promise<Models.CachesListResponse> {
    return this.client.sendOperationRequest(
      {
        options
      },
      listOperationSpec,
      callback) as Promise<Models.CachesListResponse>;
  }

  /**
   * Returns all Caches the user has access to under a resource group.
   * @param resourceGroupName Target resource group.
   * @param [options] The optional parameters
   * @returns Promise<Models.CachesListByResourceGroupResponse>
   */
  listByResourceGroup(resourceGroupName: string, options?: msRest.RequestOptionsBase): Promise<Models.CachesListByResourceGroupResponse>;
  /**
   * @param resourceGroupName Target resource group.
   * @param callback The callback
   */
  listByResourceGroup(resourceGroupName: string, callback: msRest.ServiceCallback<Models.CachesListResult>): void;
  /**
   * @param resourceGroupName Target resource group.
   * @param options The optional parameters
   * @param callback The callback
   */
  listByResourceGroup(resourceGroupName: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.CachesListResult>): void;
  listByResourceGroup(resourceGroupName: string, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<Models.CachesListResult>, callback?: msRest.ServiceCallback<Models.CachesListResult>): Promise<Models.CachesListByResourceGroupResponse> {
    return this.client.sendOperationRequest(
      {
        resourceGroupName,
        options
      },
      listByResourceGroupOperationSpec,
      callback) as Promise<Models.CachesListByResourceGroupResponse>;
  }

  /**
   * Schedules a Cache for deletion.
   * @param resourceGroupName Target resource group.
   * @param cacheName Name of Cache. Length of name must not be greater than 80 and chars must be
   * from the [-0-9a-zA-Z_] char class.
   * @param [options] The optional parameters
   * @returns Promise<msRest.RestResponse>
   */
  deleteMethod(resourceGroupName: string, cacheName: string, options?: msRest.RequestOptionsBase): Promise<msRest.RestResponse> {
    return this.beginDeleteMethod(resourceGroupName,cacheName,options)
      .then(lroPoller => lroPoller.pollUntilFinished());
  }

  /**
   * Returns a Cache.
   * @param resourceGroupName Target resource group.
   * @param cacheName Name of Cache. Length of name must not be greater than 80 and chars must be
   * from the [-0-9a-zA-Z_] char class.
   * @param [options] The optional parameters
   * @returns Promise<Models.CachesGetResponse>
   */
  get(resourceGroupName: string, cacheName: string, options?: msRest.RequestOptionsBase): Promise<Models.CachesGetResponse>;
  /**
   * @param resourceGroupName Target resource group.
   * @param cacheName Name of Cache. Length of name must not be greater than 80 and chars must be
   * from the [-0-9a-zA-Z_] char class.
   * @param callback The callback
   */
  get(resourceGroupName: string, cacheName: string, callback: msRest.ServiceCallback<Models.Cache>): void;
  /**
   * @param resourceGroupName Target resource group.
   * @param cacheName Name of Cache. Length of name must not be greater than 80 and chars must be
   * from the [-0-9a-zA-Z_] char class.
   * @param options The optional parameters
   * @param callback The callback
   */
  get(resourceGroupName: string, cacheName: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.Cache>): void;
  get(resourceGroupName: string, cacheName: string, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<Models.Cache>, callback?: msRest.ServiceCallback<Models.Cache>): Promise<Models.CachesGetResponse> {
    return this.client.sendOperationRequest(
      {
        resourceGroupName,
        cacheName,
        options
      },
      getOperationSpec,
      callback) as Promise<Models.CachesGetResponse>;
  }

  /**
   * Create or update a Cache.
   * @param resourceGroupName Target resource group.
   * @param cacheName Name of Cache. Length of name must not be greater than 80 and chars must be
   * from the [-0-9a-zA-Z_] char class.
   * @param [options] The optional parameters
   * @returns Promise<Models.CachesCreateOrUpdateResponse>
   */
  createOrUpdate(resourceGroupName: string, cacheName: string, options?: Models.CachesCreateOrUpdateOptionalParams): Promise<Models.CachesCreateOrUpdateResponse> {
    return this.beginCreateOrUpdate(resourceGroupName,cacheName,options)
      .then(lroPoller => lroPoller.pollUntilFinished()) as Promise<Models.CachesCreateOrUpdateResponse>;
  }

  /**
   * Update a Cache instance.
   * @param resourceGroupName Target resource group.
   * @param cacheName Name of Cache. Length of name must not be greater than 80 and chars must be
   * from the [-0-9a-zA-Z_] char class.
   * @param [options] The optional parameters
   * @returns Promise<Models.CachesUpdateResponse>
   */
  update(resourceGroupName: string, cacheName: string, options?: Models.CachesUpdateOptionalParams): Promise<Models.CachesUpdateResponse>;
  /**
   * @param resourceGroupName Target resource group.
   * @param cacheName Name of Cache. Length of name must not be greater than 80 and chars must be
   * from the [-0-9a-zA-Z_] char class.
   * @param callback The callback
   */
  update(resourceGroupName: string, cacheName: string, callback: msRest.ServiceCallback<Models.Cache>): void;
  /**
   * @param resourceGroupName Target resource group.
   * @param cacheName Name of Cache. Length of name must not be greater than 80 and chars must be
   * from the [-0-9a-zA-Z_] char class.
   * @param options The optional parameters
   * @param callback The callback
   */
  update(resourceGroupName: string, cacheName: string, options: Models.CachesUpdateOptionalParams, callback: msRest.ServiceCallback<Models.Cache>): void;
  update(resourceGroupName: string, cacheName: string, options?: Models.CachesUpdateOptionalParams | msRest.ServiceCallback<Models.Cache>, callback?: msRest.ServiceCallback<Models.Cache>): Promise<Models.CachesUpdateResponse> {
    return this.client.sendOperationRequest(
      {
        resourceGroupName,
        cacheName,
        options
      },
      updateOperationSpec,
      callback) as Promise<Models.CachesUpdateResponse>;
  }

  /**
   * Tells a Cache to write generate debug info for support to process.
   * @param resourceGroupName Target resource group.
   * @param cacheName Name of Cache. Length of name must not be greater than 80 and chars must be
   * from the [-0-9a-zA-Z_] char class.
   * @param [options] The optional parameters
   * @returns Promise<msRest.RestResponse>
   */
  debugInfo(resourceGroupName: string, cacheName: string, options?: msRest.RequestOptionsBase): Promise<msRest.RestResponse> {
    return this.beginDebugInfo(resourceGroupName,cacheName,options)
      .then(lroPoller => lroPoller.pollUntilFinished());
  }

  /**
   * Tells a Cache to write all dirty data to the Storage Target(s). During the flush, clients will
   * see errors returned until the flush is complete.
   * @param resourceGroupName Target resource group.
   * @param cacheName Name of Cache. Length of name must not be greater than 80 and chars must be
   * from the [-0-9a-zA-Z_] char class.
   * @param [options] The optional parameters
   * @returns Promise<msRest.RestResponse>
   */
  flush(resourceGroupName: string, cacheName: string, options?: msRest.RequestOptionsBase): Promise<msRest.RestResponse> {
    return this.beginFlush(resourceGroupName,cacheName,options)
      .then(lroPoller => lroPoller.pollUntilFinished());
  }

  /**
   * Tells a Stopped state Cache to transition to Active state.
   * @param resourceGroupName Target resource group.
   * @param cacheName Name of Cache. Length of name must not be greater than 80 and chars must be
   * from the [-0-9a-zA-Z_] char class.
   * @param [options] The optional parameters
   * @returns Promise<msRest.RestResponse>
   */
  start(resourceGroupName: string, cacheName: string, options?: msRest.RequestOptionsBase): Promise<msRest.RestResponse> {
    return this.beginStart(resourceGroupName,cacheName,options)
      .then(lroPoller => lroPoller.pollUntilFinished());
  }

  /**
   * Tells an Active Cache to transition to Stopped state.
   * @param resourceGroupName Target resource group.
   * @param cacheName Name of Cache. Length of name must not be greater than 80 and chars must be
   * from the [-0-9a-zA-Z_] char class.
   * @param [options] The optional parameters
   * @returns Promise<msRest.RestResponse>
   */
  stop(resourceGroupName: string, cacheName: string, options?: msRest.RequestOptionsBase): Promise<msRest.RestResponse> {
    return this.beginStop(resourceGroupName,cacheName,options)
      .then(lroPoller => lroPoller.pollUntilFinished());
  }

  /**
   * Upgrade a Cache's firmware if a new version is available. Otherwise, this operation has no
   * effect.
   * @param resourceGroupName Target resource group.
   * @param cacheName Name of Cache. Length of name must not be greater than 80 and chars must be
   * from the [-0-9a-zA-Z_] char class.
   * @param [options] The optional parameters
   * @returns Promise<msRest.RestResponse>
   */
  upgradeFirmware(resourceGroupName: string, cacheName: string, options?: msRest.RequestOptionsBase): Promise<msRest.RestResponse> {
    return this.beginUpgradeFirmware(resourceGroupName,cacheName,options)
      .then(lroPoller => lroPoller.pollUntilFinished());
  }

  /**
   * Schedules a Cache for deletion.
   * @param resourceGroupName Target resource group.
   * @param cacheName Name of Cache. Length of name must not be greater than 80 and chars must be
   * from the [-0-9a-zA-Z_] char class.
   * @param [options] The optional parameters
   * @returns Promise<msRestAzure.LROPoller>
   */
  beginDeleteMethod(resourceGroupName: string, cacheName: string, options?: msRest.RequestOptionsBase): Promise<msRestAzure.LROPoller> {
    return this.client.sendLRORequest(
      {
        resourceGroupName,
        cacheName,
        options
      },
      beginDeleteMethodOperationSpec,
      options);
  }

  /**
   * Create or update a Cache.
   * @param resourceGroupName Target resource group.
   * @param cacheName Name of Cache. Length of name must not be greater than 80 and chars must be
   * from the [-0-9a-zA-Z_] char class.
   * @param [options] The optional parameters
   * @returns Promise<msRestAzure.LROPoller>
   */
  beginCreateOrUpdate(resourceGroupName: string, cacheName: string, options?: Models.CachesBeginCreateOrUpdateOptionalParams): Promise<msRestAzure.LROPoller> {
    return this.client.sendLRORequest(
      {
        resourceGroupName,
        cacheName,
        options
      },
      beginCreateOrUpdateOperationSpec,
      options);
  }

  /**
   * Tells a Cache to write generate debug info for support to process.
   * @param resourceGroupName Target resource group.
   * @param cacheName Name of Cache. Length of name must not be greater than 80 and chars must be
   * from the [-0-9a-zA-Z_] char class.
   * @param [options] The optional parameters
   * @returns Promise<msRestAzure.LROPoller>
   */
  beginDebugInfo(resourceGroupName: string, cacheName: string, options?: msRest.RequestOptionsBase): Promise<msRestAzure.LROPoller> {
    return this.client.sendLRORequest(
      {
        resourceGroupName,
        cacheName,
        options
      },
      beginDebugInfoOperationSpec,
      options);
  }

  /**
   * Tells a Cache to write all dirty data to the Storage Target(s). During the flush, clients will
   * see errors returned until the flush is complete.
   * @param resourceGroupName Target resource group.
   * @param cacheName Name of Cache. Length of name must not be greater than 80 and chars must be
   * from the [-0-9a-zA-Z_] char class.
   * @param [options] The optional parameters
   * @returns Promise<msRestAzure.LROPoller>
   */
  beginFlush(resourceGroupName: string, cacheName: string, options?: msRest.RequestOptionsBase): Promise<msRestAzure.LROPoller> {
    return this.client.sendLRORequest(
      {
        resourceGroupName,
        cacheName,
        options
      },
      beginFlushOperationSpec,
      options);
  }

  /**
   * Tells a Stopped state Cache to transition to Active state.
   * @param resourceGroupName Target resource group.
   * @param cacheName Name of Cache. Length of name must not be greater than 80 and chars must be
   * from the [-0-9a-zA-Z_] char class.
   * @param [options] The optional parameters
   * @returns Promise<msRestAzure.LROPoller>
   */
  beginStart(resourceGroupName: string, cacheName: string, options?: msRest.RequestOptionsBase): Promise<msRestAzure.LROPoller> {
    return this.client.sendLRORequest(
      {
        resourceGroupName,
        cacheName,
        options
      },
      beginStartOperationSpec,
      options);
  }

  /**
   * Tells an Active Cache to transition to Stopped state.
   * @param resourceGroupName Target resource group.
   * @param cacheName Name of Cache. Length of name must not be greater than 80 and chars must be
   * from the [-0-9a-zA-Z_] char class.
   * @param [options] The optional parameters
   * @returns Promise<msRestAzure.LROPoller>
   */
  beginStop(resourceGroupName: string, cacheName: string, options?: msRest.RequestOptionsBase): Promise<msRestAzure.LROPoller> {
    return this.client.sendLRORequest(
      {
        resourceGroupName,
        cacheName,
        options
      },
      beginStopOperationSpec,
      options);
  }

  /**
   * Upgrade a Cache's firmware if a new version is available. Otherwise, this operation has no
   * effect.
   * @param resourceGroupName Target resource group.
   * @param cacheName Name of Cache. Length of name must not be greater than 80 and chars must be
   * from the [-0-9a-zA-Z_] char class.
   * @param [options] The optional parameters
   * @returns Promise<msRestAzure.LROPoller>
   */
  beginUpgradeFirmware(resourceGroupName: string, cacheName: string, options?: msRest.RequestOptionsBase): Promise<msRestAzure.LROPoller> {
    return this.client.sendLRORequest(
      {
        resourceGroupName,
        cacheName,
        options
      },
      beginUpgradeFirmwareOperationSpec,
      options);
  }

  /**
   * Returns all Caches the user has access to under a subscription.
   * @param nextPageLink The NextLink from the previous successful call to List operation.
   * @param [options] The optional parameters
   * @returns Promise<Models.CachesListNextResponse>
   */
  listNext(nextPageLink: string, options?: msRest.RequestOptionsBase): Promise<Models.CachesListNextResponse>;
  /**
   * @param nextPageLink The NextLink from the previous successful call to List operation.
   * @param callback The callback
   */
  listNext(nextPageLink: string, callback: msRest.ServiceCallback<Models.CachesListResult>): void;
  /**
   * @param nextPageLink The NextLink from the previous successful call to List operation.
   * @param options The optional parameters
   * @param callback The callback
   */
  listNext(nextPageLink: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.CachesListResult>): void;
  listNext(nextPageLink: string, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<Models.CachesListResult>, callback?: msRest.ServiceCallback<Models.CachesListResult>): Promise<Models.CachesListNextResponse> {
    return this.client.sendOperationRequest(
      {
        nextPageLink,
        options
      },
      listNextOperationSpec,
      callback) as Promise<Models.CachesListNextResponse>;
  }

  /**
   * Returns all Caches the user has access to under a resource group.
   * @param nextPageLink The NextLink from the previous successful call to List operation.
   * @param [options] The optional parameters
   * @returns Promise<Models.CachesListByResourceGroupNextResponse>
   */
  listByResourceGroupNext(nextPageLink: string, options?: msRest.RequestOptionsBase): Promise<Models.CachesListByResourceGroupNextResponse>;
  /**
   * @param nextPageLink The NextLink from the previous successful call to List operation.
   * @param callback The callback
   */
  listByResourceGroupNext(nextPageLink: string, callback: msRest.ServiceCallback<Models.CachesListResult>): void;
  /**
   * @param nextPageLink The NextLink from the previous successful call to List operation.
   * @param options The optional parameters
   * @param callback The callback
   */
  listByResourceGroupNext(nextPageLink: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.CachesListResult>): void;
  listByResourceGroupNext(nextPageLink: string, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<Models.CachesListResult>, callback?: msRest.ServiceCallback<Models.CachesListResult>): Promise<Models.CachesListByResourceGroupNextResponse> {
    return this.client.sendOperationRequest(
      {
        nextPageLink,
        options
      },
      listByResourceGroupNextOperationSpec,
      callback) as Promise<Models.CachesListByResourceGroupNextResponse>;
  }
}

// Operation Specifications
const serializer = new msRest.Serializer(Mappers);
const listOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "subscriptions/{subscriptionId}/providers/Microsoft.StorageCache/caches",
  urlParameters: [
    Parameters.subscriptionId
  ],
  queryParameters: [
    Parameters.apiVersion
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    200: {
      bodyMapper: Mappers.CachesListResult
    },
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  serializer
};

const listByResourceGroupOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "subscriptions/{subscriptionId}/resourcegroups/{resourceGroupName}/providers/Microsoft.StorageCache/caches",
  urlParameters: [
    Parameters.resourceGroupName,
    Parameters.subscriptionId
  ],
  queryParameters: [
    Parameters.apiVersion
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    200: {
      bodyMapper: Mappers.CachesListResult
    },
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  serializer
};

const getOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "subscriptions/{subscriptionId}/resourcegroups/{resourceGroupName}/providers/Microsoft.StorageCache/caches/{cacheName}",
  urlParameters: [
    Parameters.resourceGroupName,
    Parameters.cacheName,
    Parameters.subscriptionId
  ],
  queryParameters: [
    Parameters.apiVersion
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    200: {
      bodyMapper: Mappers.Cache
    },
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  serializer
};

const updateOperationSpec: msRest.OperationSpec = {
  httpMethod: "PATCH",
  path: "subscriptions/{subscriptionId}/resourcegroups/{resourceGroupName}/providers/Microsoft.StorageCache/caches/{cacheName}",
  urlParameters: [
    Parameters.resourceGroupName,
    Parameters.subscriptionId,
    Parameters.cacheName
  ],
  queryParameters: [
    Parameters.apiVersion
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  requestBody: {
    parameterPath: [
      "options",
      "cache"
    ],
    mapper: Mappers.Cache
  },
  responses: {
    200: {
      bodyMapper: Mappers.Cache
    },
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  serializer
};

const beginDeleteMethodOperationSpec: msRest.OperationSpec = {
  httpMethod: "DELETE",
  path: "subscriptions/{subscriptionId}/resourcegroups/{resourceGroupName}/providers/Microsoft.StorageCache/caches/{cacheName}",
  urlParameters: [
    Parameters.resourceGroupName,
    Parameters.cacheName,
    Parameters.subscriptionId
  ],
  queryParameters: [
    Parameters.apiVersion
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    200: {},
    202: {},
    204: {},
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  serializer
};

const beginCreateOrUpdateOperationSpec: msRest.OperationSpec = {
  httpMethod: "PUT",
  path: "subscriptions/{subscriptionId}/resourcegroups/{resourceGroupName}/providers/Microsoft.StorageCache/caches/{cacheName}",
  urlParameters: [
    Parameters.resourceGroupName,
    Parameters.subscriptionId,
    Parameters.cacheName
  ],
  queryParameters: [
    Parameters.apiVersion
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  requestBody: {
    parameterPath: [
      "options",
      "cache"
    ],
    mapper: Mappers.Cache
  },
  responses: {
    200: {
      bodyMapper: Mappers.Cache
    },
    201: {
      bodyMapper: Mappers.Cache
    },
    202: {},
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  serializer
};

const beginDebugInfoOperationSpec: msRest.OperationSpec = {
  httpMethod: "POST",
  path: "subscriptions/{subscriptionId}/resourcegroups/{resourceGroupName}/providers/Microsoft.StorageCache/caches/{cacheName}/debugInfo",
  urlParameters: [
    Parameters.resourceGroupName,
    Parameters.subscriptionId,
    Parameters.cacheName
  ],
  queryParameters: [
    Parameters.apiVersion
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    200: {},
    202: {},
    204: {},
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  serializer
};

const beginFlushOperationSpec: msRest.OperationSpec = {
  httpMethod: "POST",
  path: "subscriptions/{subscriptionId}/resourcegroups/{resourceGroupName}/providers/Microsoft.StorageCache/caches/{cacheName}/flush",
  urlParameters: [
    Parameters.resourceGroupName,
    Parameters.subscriptionId,
    Parameters.cacheName
  ],
  queryParameters: [
    Parameters.apiVersion
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    200: {},
    202: {},
    204: {},
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  serializer
};

const beginStartOperationSpec: msRest.OperationSpec = {
  httpMethod: "POST",
  path: "subscriptions/{subscriptionId}/resourcegroups/{resourceGroupName}/providers/Microsoft.StorageCache/caches/{cacheName}/start",
  urlParameters: [
    Parameters.resourceGroupName,
    Parameters.subscriptionId,
    Parameters.cacheName
  ],
  queryParameters: [
    Parameters.apiVersion
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    200: {},
    202: {},
    204: {},
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  serializer
};

const beginStopOperationSpec: msRest.OperationSpec = {
  httpMethod: "POST",
  path: "subscriptions/{subscriptionId}/resourcegroups/{resourceGroupName}/providers/Microsoft.StorageCache/caches/{cacheName}/stop",
  urlParameters: [
    Parameters.resourceGroupName,
    Parameters.subscriptionId,
    Parameters.cacheName
  ],
  queryParameters: [
    Parameters.apiVersion
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    200: {},
    202: {},
    204: {},
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  serializer
};

const beginUpgradeFirmwareOperationSpec: msRest.OperationSpec = {
  httpMethod: "POST",
  path: "subscriptions/{subscriptionId}/resourcegroups/{resourceGroupName}/providers/Microsoft.StorageCache/caches/{cacheName}/upgrade",
  urlParameters: [
    Parameters.resourceGroupName,
    Parameters.subscriptionId,
    Parameters.cacheName
  ],
  queryParameters: [
    Parameters.apiVersion
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    201: {},
    202: {},
    204: {},
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  serializer
};

const listNextOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  baseUrl: "https://management.azure.com",
  path: "{nextLink}",
  urlParameters: [
    Parameters.nextPageLink
  ],
  queryParameters: [
    Parameters.apiVersion
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    200: {
      bodyMapper: Mappers.CachesListResult
    },
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  serializer
};

const listByResourceGroupNextOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  baseUrl: "https://management.azure.com",
  path: "{nextLink}",
  urlParameters: [
    Parameters.nextPageLink
  ],
  queryParameters: [
    Parameters.apiVersion
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    200: {
      bodyMapper: Mappers.CachesListResult
    },
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  serializer
};
