/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */

import { PagedAsyncIterableIterator, PageSettings } from "@azure/core-paging";
import { setContinuationToken } from "../pagingHelper";
import { Caches } from "../operationsInterfaces";
import * as coreClient from "@azure/core-client";
import * as Mappers from "../models/mappers";
import * as Parameters from "../models/parameters";
import { StorageCacheManagementClient } from "../storageCacheManagementClient";
import {
  SimplePollerLike,
  OperationState,
  createHttpPoller
} from "@azure/core-lro";
import { createLroSpec } from "../lroImpl";
import {
  Cache,
  CachesListNextOptionalParams,
  CachesListOptionalParams,
  CachesListResponse,
  CachesListByResourceGroupNextOptionalParams,
  CachesListByResourceGroupOptionalParams,
  CachesListByResourceGroupResponse,
  CachesDeleteOptionalParams,
  CachesGetOptionalParams,
  CachesGetResponse,
  CachesCreateOrUpdateOptionalParams,
  CachesCreateOrUpdateResponse,
  CachesUpdateOptionalParams,
  CachesUpdateResponse,
  CachesDebugInfoOptionalParams,
  CachesFlushOptionalParams,
  CachesStartOptionalParams,
  CachesStopOptionalParams,
  CachesStartPrimingJobOptionalParams,
  CachesStartPrimingJobResponse,
  CachesStopPrimingJobOptionalParams,
  CachesStopPrimingJobResponse,
  CachesPausePrimingJobOptionalParams,
  CachesPausePrimingJobResponse,
  CachesResumePrimingJobOptionalParams,
  CachesResumePrimingJobResponse,
  CachesUpgradeFirmwareOptionalParams,
  CachesSpaceAllocationOptionalParams,
  CachesSpaceAllocationResponse,
  CachesListNextResponse,
  CachesListByResourceGroupNextResponse
} from "../models";

/// <reference lib="esnext.asynciterable" />
/** Class containing Caches operations. */
export class CachesImpl implements Caches {
  private readonly client: StorageCacheManagementClient;

  /**
   * Initialize a new instance of the class Caches class.
   * @param client Reference to the service client
   */
  constructor(client: StorageCacheManagementClient) {
    this.client = client;
  }

  /**
   * Returns all caches the user has access to under a subscription.
   * @param options The options parameters.
   */
  public list(
    options?: CachesListOptionalParams
  ): PagedAsyncIterableIterator<Cache> {
    const iter = this.listPagingAll(options);
    return {
      next() {
        return iter.next();
      },
      [Symbol.asyncIterator]() {
        return this;
      },
      byPage: (settings?: PageSettings) => {
        if (settings?.maxPageSize) {
          throw new Error("maxPageSize is not supported by this operation.");
        }
        return this.listPagingPage(options, settings);
      }
    };
  }

  private async *listPagingPage(
    options?: CachesListOptionalParams,
    settings?: PageSettings
  ): AsyncIterableIterator<Cache[]> {
    let result: CachesListResponse;
    let continuationToken = settings?.continuationToken;
    if (!continuationToken) {
      result = await this._list(options);
      let page = result.value || [];
      continuationToken = result.nextLink;
      setContinuationToken(page, continuationToken);
      yield page;
    }
    while (continuationToken) {
      result = await this._listNext(continuationToken, options);
      continuationToken = result.nextLink;
      let page = result.value || [];
      setContinuationToken(page, continuationToken);
      yield page;
    }
  }

  private async *listPagingAll(
    options?: CachesListOptionalParams
  ): AsyncIterableIterator<Cache> {
    for await (const page of this.listPagingPage(options)) {
      yield* page;
    }
  }

  /**
   * Returns all caches the user has access to under a resource group.
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param options The options parameters.
   */
  public listByResourceGroup(
    resourceGroupName: string,
    options?: CachesListByResourceGroupOptionalParams
  ): PagedAsyncIterableIterator<Cache> {
    const iter = this.listByResourceGroupPagingAll(resourceGroupName, options);
    return {
      next() {
        return iter.next();
      },
      [Symbol.asyncIterator]() {
        return this;
      },
      byPage: (settings?: PageSettings) => {
        if (settings?.maxPageSize) {
          throw new Error("maxPageSize is not supported by this operation.");
        }
        return this.listByResourceGroupPagingPage(
          resourceGroupName,
          options,
          settings
        );
      }
    };
  }

  private async *listByResourceGroupPagingPage(
    resourceGroupName: string,
    options?: CachesListByResourceGroupOptionalParams,
    settings?: PageSettings
  ): AsyncIterableIterator<Cache[]> {
    let result: CachesListByResourceGroupResponse;
    let continuationToken = settings?.continuationToken;
    if (!continuationToken) {
      result = await this._listByResourceGroup(resourceGroupName, options);
      let page = result.value || [];
      continuationToken = result.nextLink;
      setContinuationToken(page, continuationToken);
      yield page;
    }
    while (continuationToken) {
      result = await this._listByResourceGroupNext(
        resourceGroupName,
        continuationToken,
        options
      );
      continuationToken = result.nextLink;
      let page = result.value || [];
      setContinuationToken(page, continuationToken);
      yield page;
    }
  }

  private async *listByResourceGroupPagingAll(
    resourceGroupName: string,
    options?: CachesListByResourceGroupOptionalParams
  ): AsyncIterableIterator<Cache> {
    for await (const page of this.listByResourceGroupPagingPage(
      resourceGroupName,
      options
    )) {
      yield* page;
    }
  }

  /**
   * Returns all caches the user has access to under a subscription.
   * @param options The options parameters.
   */
  private _list(
    options?: CachesListOptionalParams
  ): Promise<CachesListResponse> {
    return this.client.sendOperationRequest({ options }, listOperationSpec);
  }

  /**
   * Returns all caches the user has access to under a resource group.
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param options The options parameters.
   */
  private _listByResourceGroup(
    resourceGroupName: string,
    options?: CachesListByResourceGroupOptionalParams
  ): Promise<CachesListByResourceGroupResponse> {
    return this.client.sendOperationRequest(
      { resourceGroupName, options },
      listByResourceGroupOperationSpec
    );
  }

  /**
   * Schedules a cache for deletion.
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param cacheName Name of cache. Length of name must not be greater than 80 and chars must be from
   *                  the [-0-9a-zA-Z_] char class.
   * @param options The options parameters.
   */
  async beginDelete(
    resourceGroupName: string,
    cacheName: string,
    options?: CachesDeleteOptionalParams
  ): Promise<SimplePollerLike<OperationState<void>, void>> {
    const directSendOperation = async (
      args: coreClient.OperationArguments,
      spec: coreClient.OperationSpec
    ): Promise<void> => {
      return this.client.sendOperationRequest(args, spec);
    };
    const sendOperationFn = async (
      args: coreClient.OperationArguments,
      spec: coreClient.OperationSpec
    ) => {
      let currentRawResponse:
        | coreClient.FullOperationResponse
        | undefined = undefined;
      const providedCallback = args.options?.onResponse;
      const callback: coreClient.RawResponseCallback = (
        rawResponse: coreClient.FullOperationResponse,
        flatResponse: unknown
      ) => {
        currentRawResponse = rawResponse;
        providedCallback?.(rawResponse, flatResponse);
      };
      const updatedArgs = {
        ...args,
        options: {
          ...args.options,
          onResponse: callback
        }
      };
      const flatResponse = await directSendOperation(updatedArgs, spec);
      return {
        flatResponse,
        rawResponse: {
          statusCode: currentRawResponse!.status,
          body: currentRawResponse!.parsedBody,
          headers: currentRawResponse!.headers.toJSON()
        }
      };
    };

    const lro = createLroSpec({
      sendOperationFn,
      args: { resourceGroupName, cacheName, options },
      spec: deleteOperationSpec
    });
    const poller = await createHttpPoller<void, OperationState<void>>(lro, {
      restoreFrom: options?.resumeFrom,
      intervalInMs: options?.updateIntervalInMs
    });
    await poller.poll();
    return poller;
  }

  /**
   * Schedules a cache for deletion.
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param cacheName Name of cache. Length of name must not be greater than 80 and chars must be from
   *                  the [-0-9a-zA-Z_] char class.
   * @param options The options parameters.
   */
  async beginDeleteAndWait(
    resourceGroupName: string,
    cacheName: string,
    options?: CachesDeleteOptionalParams
  ): Promise<void> {
    const poller = await this.beginDelete(
      resourceGroupName,
      cacheName,
      options
    );
    return poller.pollUntilDone();
  }

  /**
   * Returns a cache.
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param cacheName Name of cache. Length of name must not be greater than 80 and chars must be from
   *                  the [-0-9a-zA-Z_] char class.
   * @param options The options parameters.
   */
  get(
    resourceGroupName: string,
    cacheName: string,
    options?: CachesGetOptionalParams
  ): Promise<CachesGetResponse> {
    return this.client.sendOperationRequest(
      { resourceGroupName, cacheName, options },
      getOperationSpec
    );
  }

  /**
   * Create or update a cache.
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param cacheName Name of cache. Length of name must not be greater than 80 and chars must be from
   *                  the [-0-9a-zA-Z_] char class.
   * @param cache Object containing the user-selectable properties of the new cache. If read-only
   *              properties are included, they must match the existing values of those properties.
   * @param options The options parameters.
   */
  async beginCreateOrUpdate(
    resourceGroupName: string,
    cacheName: string,
    cache: Cache,
    options?: CachesCreateOrUpdateOptionalParams
  ): Promise<
    SimplePollerLike<
      OperationState<CachesCreateOrUpdateResponse>,
      CachesCreateOrUpdateResponse
    >
  > {
    const directSendOperation = async (
      args: coreClient.OperationArguments,
      spec: coreClient.OperationSpec
    ): Promise<CachesCreateOrUpdateResponse> => {
      return this.client.sendOperationRequest(args, spec);
    };
    const sendOperationFn = async (
      args: coreClient.OperationArguments,
      spec: coreClient.OperationSpec
    ) => {
      let currentRawResponse:
        | coreClient.FullOperationResponse
        | undefined = undefined;
      const providedCallback = args.options?.onResponse;
      const callback: coreClient.RawResponseCallback = (
        rawResponse: coreClient.FullOperationResponse,
        flatResponse: unknown
      ) => {
        currentRawResponse = rawResponse;
        providedCallback?.(rawResponse, flatResponse);
      };
      const updatedArgs = {
        ...args,
        options: {
          ...args.options,
          onResponse: callback
        }
      };
      const flatResponse = await directSendOperation(updatedArgs, spec);
      return {
        flatResponse,
        rawResponse: {
          statusCode: currentRawResponse!.status,
          body: currentRawResponse!.parsedBody,
          headers: currentRawResponse!.headers.toJSON()
        }
      };
    };

    const lro = createLroSpec({
      sendOperationFn,
      args: { resourceGroupName, cacheName, cache, options },
      spec: createOrUpdateOperationSpec
    });
    const poller = await createHttpPoller<
      CachesCreateOrUpdateResponse,
      OperationState<CachesCreateOrUpdateResponse>
    >(lro, {
      restoreFrom: options?.resumeFrom,
      intervalInMs: options?.updateIntervalInMs
    });
    await poller.poll();
    return poller;
  }

  /**
   * Create or update a cache.
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param cacheName Name of cache. Length of name must not be greater than 80 and chars must be from
   *                  the [-0-9a-zA-Z_] char class.
   * @param cache Object containing the user-selectable properties of the new cache. If read-only
   *              properties are included, they must match the existing values of those properties.
   * @param options The options parameters.
   */
  async beginCreateOrUpdateAndWait(
    resourceGroupName: string,
    cacheName: string,
    cache: Cache,
    options?: CachesCreateOrUpdateOptionalParams
  ): Promise<CachesCreateOrUpdateResponse> {
    const poller = await this.beginCreateOrUpdate(
      resourceGroupName,
      cacheName,
      cache,
      options
    );
    return poller.pollUntilDone();
  }

  /**
   * Update a cache instance.
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param cacheName Name of cache. Length of name must not be greater than 80 and chars must be from
   *                  the [-0-9a-zA-Z_] char class.
   * @param options The options parameters.
   */
  async beginUpdate(
    resourceGroupName: string,
    cacheName: string,
    options?: CachesUpdateOptionalParams
  ): Promise<
    SimplePollerLike<OperationState<CachesUpdateResponse>, CachesUpdateResponse>
  > {
    const directSendOperation = async (
      args: coreClient.OperationArguments,
      spec: coreClient.OperationSpec
    ): Promise<CachesUpdateResponse> => {
      return this.client.sendOperationRequest(args, spec);
    };
    const sendOperationFn = async (
      args: coreClient.OperationArguments,
      spec: coreClient.OperationSpec
    ) => {
      let currentRawResponse:
        | coreClient.FullOperationResponse
        | undefined = undefined;
      const providedCallback = args.options?.onResponse;
      const callback: coreClient.RawResponseCallback = (
        rawResponse: coreClient.FullOperationResponse,
        flatResponse: unknown
      ) => {
        currentRawResponse = rawResponse;
        providedCallback?.(rawResponse, flatResponse);
      };
      const updatedArgs = {
        ...args,
        options: {
          ...args.options,
          onResponse: callback
        }
      };
      const flatResponse = await directSendOperation(updatedArgs, spec);
      return {
        flatResponse,
        rawResponse: {
          statusCode: currentRawResponse!.status,
          body: currentRawResponse!.parsedBody,
          headers: currentRawResponse!.headers.toJSON()
        }
      };
    };

    const lro = createLroSpec({
      sendOperationFn,
      args: { resourceGroupName, cacheName, options },
      spec: updateOperationSpec
    });
    const poller = await createHttpPoller<
      CachesUpdateResponse,
      OperationState<CachesUpdateResponse>
    >(lro, {
      restoreFrom: options?.resumeFrom,
      intervalInMs: options?.updateIntervalInMs,
      resourceLocationConfig: "azure-async-operation"
    });
    await poller.poll();
    return poller;
  }

  /**
   * Update a cache instance.
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param cacheName Name of cache. Length of name must not be greater than 80 and chars must be from
   *                  the [-0-9a-zA-Z_] char class.
   * @param options The options parameters.
   */
  async beginUpdateAndWait(
    resourceGroupName: string,
    cacheName: string,
    options?: CachesUpdateOptionalParams
  ): Promise<CachesUpdateResponse> {
    const poller = await this.beginUpdate(
      resourceGroupName,
      cacheName,
      options
    );
    return poller.pollUntilDone();
  }

  /**
   * Tells a cache to write generate debug info for support to process.
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param cacheName Name of cache. Length of name must not be greater than 80 and chars must be from
   *                  the [-0-9a-zA-Z_] char class.
   * @param options The options parameters.
   */
  async beginDebugInfo(
    resourceGroupName: string,
    cacheName: string,
    options?: CachesDebugInfoOptionalParams
  ): Promise<SimplePollerLike<OperationState<void>, void>> {
    const directSendOperation = async (
      args: coreClient.OperationArguments,
      spec: coreClient.OperationSpec
    ): Promise<void> => {
      return this.client.sendOperationRequest(args, spec);
    };
    const sendOperationFn = async (
      args: coreClient.OperationArguments,
      spec: coreClient.OperationSpec
    ) => {
      let currentRawResponse:
        | coreClient.FullOperationResponse
        | undefined = undefined;
      const providedCallback = args.options?.onResponse;
      const callback: coreClient.RawResponseCallback = (
        rawResponse: coreClient.FullOperationResponse,
        flatResponse: unknown
      ) => {
        currentRawResponse = rawResponse;
        providedCallback?.(rawResponse, flatResponse);
      };
      const updatedArgs = {
        ...args,
        options: {
          ...args.options,
          onResponse: callback
        }
      };
      const flatResponse = await directSendOperation(updatedArgs, spec);
      return {
        flatResponse,
        rawResponse: {
          statusCode: currentRawResponse!.status,
          body: currentRawResponse!.parsedBody,
          headers: currentRawResponse!.headers.toJSON()
        }
      };
    };

    const lro = createLroSpec({
      sendOperationFn,
      args: { resourceGroupName, cacheName, options },
      spec: debugInfoOperationSpec
    });
    const poller = await createHttpPoller<void, OperationState<void>>(lro, {
      restoreFrom: options?.resumeFrom,
      intervalInMs: options?.updateIntervalInMs,
      resourceLocationConfig: "azure-async-operation"
    });
    await poller.poll();
    return poller;
  }

  /**
   * Tells a cache to write generate debug info for support to process.
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param cacheName Name of cache. Length of name must not be greater than 80 and chars must be from
   *                  the [-0-9a-zA-Z_] char class.
   * @param options The options parameters.
   */
  async beginDebugInfoAndWait(
    resourceGroupName: string,
    cacheName: string,
    options?: CachesDebugInfoOptionalParams
  ): Promise<void> {
    const poller = await this.beginDebugInfo(
      resourceGroupName,
      cacheName,
      options
    );
    return poller.pollUntilDone();
  }

  /**
   * Tells a cache to write all dirty data to the Storage Target(s). During the flush, clients will see
   * errors returned until the flush is complete.
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param cacheName Name of cache. Length of name must not be greater than 80 and chars must be from
   *                  the [-0-9a-zA-Z_] char class.
   * @param options The options parameters.
   */
  async beginFlush(
    resourceGroupName: string,
    cacheName: string,
    options?: CachesFlushOptionalParams
  ): Promise<SimplePollerLike<OperationState<void>, void>> {
    const directSendOperation = async (
      args: coreClient.OperationArguments,
      spec: coreClient.OperationSpec
    ): Promise<void> => {
      return this.client.sendOperationRequest(args, spec);
    };
    const sendOperationFn = async (
      args: coreClient.OperationArguments,
      spec: coreClient.OperationSpec
    ) => {
      let currentRawResponse:
        | coreClient.FullOperationResponse
        | undefined = undefined;
      const providedCallback = args.options?.onResponse;
      const callback: coreClient.RawResponseCallback = (
        rawResponse: coreClient.FullOperationResponse,
        flatResponse: unknown
      ) => {
        currentRawResponse = rawResponse;
        providedCallback?.(rawResponse, flatResponse);
      };
      const updatedArgs = {
        ...args,
        options: {
          ...args.options,
          onResponse: callback
        }
      };
      const flatResponse = await directSendOperation(updatedArgs, spec);
      return {
        flatResponse,
        rawResponse: {
          statusCode: currentRawResponse!.status,
          body: currentRawResponse!.parsedBody,
          headers: currentRawResponse!.headers.toJSON()
        }
      };
    };

    const lro = createLroSpec({
      sendOperationFn,
      args: { resourceGroupName, cacheName, options },
      spec: flushOperationSpec
    });
    const poller = await createHttpPoller<void, OperationState<void>>(lro, {
      restoreFrom: options?.resumeFrom,
      intervalInMs: options?.updateIntervalInMs,
      resourceLocationConfig: "azure-async-operation"
    });
    await poller.poll();
    return poller;
  }

  /**
   * Tells a cache to write all dirty data to the Storage Target(s). During the flush, clients will see
   * errors returned until the flush is complete.
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param cacheName Name of cache. Length of name must not be greater than 80 and chars must be from
   *                  the [-0-9a-zA-Z_] char class.
   * @param options The options parameters.
   */
  async beginFlushAndWait(
    resourceGroupName: string,
    cacheName: string,
    options?: CachesFlushOptionalParams
  ): Promise<void> {
    const poller = await this.beginFlush(resourceGroupName, cacheName, options);
    return poller.pollUntilDone();
  }

  /**
   * Tells a Stopped state cache to transition to Active state.
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param cacheName Name of cache. Length of name must not be greater than 80 and chars must be from
   *                  the [-0-9a-zA-Z_] char class.
   * @param options The options parameters.
   */
  async beginStart(
    resourceGroupName: string,
    cacheName: string,
    options?: CachesStartOptionalParams
  ): Promise<SimplePollerLike<OperationState<void>, void>> {
    const directSendOperation = async (
      args: coreClient.OperationArguments,
      spec: coreClient.OperationSpec
    ): Promise<void> => {
      return this.client.sendOperationRequest(args, spec);
    };
    const sendOperationFn = async (
      args: coreClient.OperationArguments,
      spec: coreClient.OperationSpec
    ) => {
      let currentRawResponse:
        | coreClient.FullOperationResponse
        | undefined = undefined;
      const providedCallback = args.options?.onResponse;
      const callback: coreClient.RawResponseCallback = (
        rawResponse: coreClient.FullOperationResponse,
        flatResponse: unknown
      ) => {
        currentRawResponse = rawResponse;
        providedCallback?.(rawResponse, flatResponse);
      };
      const updatedArgs = {
        ...args,
        options: {
          ...args.options,
          onResponse: callback
        }
      };
      const flatResponse = await directSendOperation(updatedArgs, spec);
      return {
        flatResponse,
        rawResponse: {
          statusCode: currentRawResponse!.status,
          body: currentRawResponse!.parsedBody,
          headers: currentRawResponse!.headers.toJSON()
        }
      };
    };

    const lro = createLroSpec({
      sendOperationFn,
      args: { resourceGroupName, cacheName, options },
      spec: startOperationSpec
    });
    const poller = await createHttpPoller<void, OperationState<void>>(lro, {
      restoreFrom: options?.resumeFrom,
      intervalInMs: options?.updateIntervalInMs,
      resourceLocationConfig: "azure-async-operation"
    });
    await poller.poll();
    return poller;
  }

  /**
   * Tells a Stopped state cache to transition to Active state.
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param cacheName Name of cache. Length of name must not be greater than 80 and chars must be from
   *                  the [-0-9a-zA-Z_] char class.
   * @param options The options parameters.
   */
  async beginStartAndWait(
    resourceGroupName: string,
    cacheName: string,
    options?: CachesStartOptionalParams
  ): Promise<void> {
    const poller = await this.beginStart(resourceGroupName, cacheName, options);
    return poller.pollUntilDone();
  }

  /**
   * Tells an Active cache to transition to Stopped state.
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param cacheName Name of cache. Length of name must not be greater than 80 and chars must be from
   *                  the [-0-9a-zA-Z_] char class.
   * @param options The options parameters.
   */
  async beginStop(
    resourceGroupName: string,
    cacheName: string,
    options?: CachesStopOptionalParams
  ): Promise<SimplePollerLike<OperationState<void>, void>> {
    const directSendOperation = async (
      args: coreClient.OperationArguments,
      spec: coreClient.OperationSpec
    ): Promise<void> => {
      return this.client.sendOperationRequest(args, spec);
    };
    const sendOperationFn = async (
      args: coreClient.OperationArguments,
      spec: coreClient.OperationSpec
    ) => {
      let currentRawResponse:
        | coreClient.FullOperationResponse
        | undefined = undefined;
      const providedCallback = args.options?.onResponse;
      const callback: coreClient.RawResponseCallback = (
        rawResponse: coreClient.FullOperationResponse,
        flatResponse: unknown
      ) => {
        currentRawResponse = rawResponse;
        providedCallback?.(rawResponse, flatResponse);
      };
      const updatedArgs = {
        ...args,
        options: {
          ...args.options,
          onResponse: callback
        }
      };
      const flatResponse = await directSendOperation(updatedArgs, spec);
      return {
        flatResponse,
        rawResponse: {
          statusCode: currentRawResponse!.status,
          body: currentRawResponse!.parsedBody,
          headers: currentRawResponse!.headers.toJSON()
        }
      };
    };

    const lro = createLroSpec({
      sendOperationFn,
      args: { resourceGroupName, cacheName, options },
      spec: stopOperationSpec
    });
    const poller = await createHttpPoller<void, OperationState<void>>(lro, {
      restoreFrom: options?.resumeFrom,
      intervalInMs: options?.updateIntervalInMs,
      resourceLocationConfig: "azure-async-operation"
    });
    await poller.poll();
    return poller;
  }

  /**
   * Tells an Active cache to transition to Stopped state.
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param cacheName Name of cache. Length of name must not be greater than 80 and chars must be from
   *                  the [-0-9a-zA-Z_] char class.
   * @param options The options parameters.
   */
  async beginStopAndWait(
    resourceGroupName: string,
    cacheName: string,
    options?: CachesStopOptionalParams
  ): Promise<void> {
    const poller = await this.beginStop(resourceGroupName, cacheName, options);
    return poller.pollUntilDone();
  }

  /**
   * Create a priming job. This operation is only allowed when the cache is healthy.
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param cacheName Name of cache. Length of name must not be greater than 80 and chars must be from
   *                  the [-0-9a-zA-Z_] char class.
   * @param options The options parameters.
   */
  async beginStartPrimingJob(
    resourceGroupName: string,
    cacheName: string,
    options?: CachesStartPrimingJobOptionalParams
  ): Promise<
    SimplePollerLike<
      OperationState<CachesStartPrimingJobResponse>,
      CachesStartPrimingJobResponse
    >
  > {
    const directSendOperation = async (
      args: coreClient.OperationArguments,
      spec: coreClient.OperationSpec
    ): Promise<CachesStartPrimingJobResponse> => {
      return this.client.sendOperationRequest(args, spec);
    };
    const sendOperationFn = async (
      args: coreClient.OperationArguments,
      spec: coreClient.OperationSpec
    ) => {
      let currentRawResponse:
        | coreClient.FullOperationResponse
        | undefined = undefined;
      const providedCallback = args.options?.onResponse;
      const callback: coreClient.RawResponseCallback = (
        rawResponse: coreClient.FullOperationResponse,
        flatResponse: unknown
      ) => {
        currentRawResponse = rawResponse;
        providedCallback?.(rawResponse, flatResponse);
      };
      const updatedArgs = {
        ...args,
        options: {
          ...args.options,
          onResponse: callback
        }
      };
      const flatResponse = await directSendOperation(updatedArgs, spec);
      return {
        flatResponse,
        rawResponse: {
          statusCode: currentRawResponse!.status,
          body: currentRawResponse!.parsedBody,
          headers: currentRawResponse!.headers.toJSON()
        }
      };
    };

    const lro = createLroSpec({
      sendOperationFn,
      args: { resourceGroupName, cacheName, options },
      spec: startPrimingJobOperationSpec
    });
    const poller = await createHttpPoller<
      CachesStartPrimingJobResponse,
      OperationState<CachesStartPrimingJobResponse>
    >(lro, {
      restoreFrom: options?.resumeFrom,
      intervalInMs: options?.updateIntervalInMs,
      resourceLocationConfig: "azure-async-operation"
    });
    await poller.poll();
    return poller;
  }

  /**
   * Create a priming job. This operation is only allowed when the cache is healthy.
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param cacheName Name of cache. Length of name must not be greater than 80 and chars must be from
   *                  the [-0-9a-zA-Z_] char class.
   * @param options The options parameters.
   */
  async beginStartPrimingJobAndWait(
    resourceGroupName: string,
    cacheName: string,
    options?: CachesStartPrimingJobOptionalParams
  ): Promise<CachesStartPrimingJobResponse> {
    const poller = await this.beginStartPrimingJob(
      resourceGroupName,
      cacheName,
      options
    );
    return poller.pollUntilDone();
  }

  /**
   * Schedule a priming job for deletion.
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param cacheName Name of cache. Length of name must not be greater than 80 and chars must be from
   *                  the [-0-9a-zA-Z_] char class.
   * @param options The options parameters.
   */
  async beginStopPrimingJob(
    resourceGroupName: string,
    cacheName: string,
    options?: CachesStopPrimingJobOptionalParams
  ): Promise<
    SimplePollerLike<
      OperationState<CachesStopPrimingJobResponse>,
      CachesStopPrimingJobResponse
    >
  > {
    const directSendOperation = async (
      args: coreClient.OperationArguments,
      spec: coreClient.OperationSpec
    ): Promise<CachesStopPrimingJobResponse> => {
      return this.client.sendOperationRequest(args, spec);
    };
    const sendOperationFn = async (
      args: coreClient.OperationArguments,
      spec: coreClient.OperationSpec
    ) => {
      let currentRawResponse:
        | coreClient.FullOperationResponse
        | undefined = undefined;
      const providedCallback = args.options?.onResponse;
      const callback: coreClient.RawResponseCallback = (
        rawResponse: coreClient.FullOperationResponse,
        flatResponse: unknown
      ) => {
        currentRawResponse = rawResponse;
        providedCallback?.(rawResponse, flatResponse);
      };
      const updatedArgs = {
        ...args,
        options: {
          ...args.options,
          onResponse: callback
        }
      };
      const flatResponse = await directSendOperation(updatedArgs, spec);
      return {
        flatResponse,
        rawResponse: {
          statusCode: currentRawResponse!.status,
          body: currentRawResponse!.parsedBody,
          headers: currentRawResponse!.headers.toJSON()
        }
      };
    };

    const lro = createLroSpec({
      sendOperationFn,
      args: { resourceGroupName, cacheName, options },
      spec: stopPrimingJobOperationSpec
    });
    const poller = await createHttpPoller<
      CachesStopPrimingJobResponse,
      OperationState<CachesStopPrimingJobResponse>
    >(lro, {
      restoreFrom: options?.resumeFrom,
      intervalInMs: options?.updateIntervalInMs,
      resourceLocationConfig: "azure-async-operation"
    });
    await poller.poll();
    return poller;
  }

  /**
   * Schedule a priming job for deletion.
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param cacheName Name of cache. Length of name must not be greater than 80 and chars must be from
   *                  the [-0-9a-zA-Z_] char class.
   * @param options The options parameters.
   */
  async beginStopPrimingJobAndWait(
    resourceGroupName: string,
    cacheName: string,
    options?: CachesStopPrimingJobOptionalParams
  ): Promise<CachesStopPrimingJobResponse> {
    const poller = await this.beginStopPrimingJob(
      resourceGroupName,
      cacheName,
      options
    );
    return poller.pollUntilDone();
  }

  /**
   * Schedule a priming job to be paused.
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param cacheName Name of cache. Length of name must not be greater than 80 and chars must be from
   *                  the [-0-9a-zA-Z_] char class.
   * @param options The options parameters.
   */
  async beginPausePrimingJob(
    resourceGroupName: string,
    cacheName: string,
    options?: CachesPausePrimingJobOptionalParams
  ): Promise<
    SimplePollerLike<
      OperationState<CachesPausePrimingJobResponse>,
      CachesPausePrimingJobResponse
    >
  > {
    const directSendOperation = async (
      args: coreClient.OperationArguments,
      spec: coreClient.OperationSpec
    ): Promise<CachesPausePrimingJobResponse> => {
      return this.client.sendOperationRequest(args, spec);
    };
    const sendOperationFn = async (
      args: coreClient.OperationArguments,
      spec: coreClient.OperationSpec
    ) => {
      let currentRawResponse:
        | coreClient.FullOperationResponse
        | undefined = undefined;
      const providedCallback = args.options?.onResponse;
      const callback: coreClient.RawResponseCallback = (
        rawResponse: coreClient.FullOperationResponse,
        flatResponse: unknown
      ) => {
        currentRawResponse = rawResponse;
        providedCallback?.(rawResponse, flatResponse);
      };
      const updatedArgs = {
        ...args,
        options: {
          ...args.options,
          onResponse: callback
        }
      };
      const flatResponse = await directSendOperation(updatedArgs, spec);
      return {
        flatResponse,
        rawResponse: {
          statusCode: currentRawResponse!.status,
          body: currentRawResponse!.parsedBody,
          headers: currentRawResponse!.headers.toJSON()
        }
      };
    };

    const lro = createLroSpec({
      sendOperationFn,
      args: { resourceGroupName, cacheName, options },
      spec: pausePrimingJobOperationSpec
    });
    const poller = await createHttpPoller<
      CachesPausePrimingJobResponse,
      OperationState<CachesPausePrimingJobResponse>
    >(lro, {
      restoreFrom: options?.resumeFrom,
      intervalInMs: options?.updateIntervalInMs,
      resourceLocationConfig: "azure-async-operation"
    });
    await poller.poll();
    return poller;
  }

  /**
   * Schedule a priming job to be paused.
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param cacheName Name of cache. Length of name must not be greater than 80 and chars must be from
   *                  the [-0-9a-zA-Z_] char class.
   * @param options The options parameters.
   */
  async beginPausePrimingJobAndWait(
    resourceGroupName: string,
    cacheName: string,
    options?: CachesPausePrimingJobOptionalParams
  ): Promise<CachesPausePrimingJobResponse> {
    const poller = await this.beginPausePrimingJob(
      resourceGroupName,
      cacheName,
      options
    );
    return poller.pollUntilDone();
  }

  /**
   * Resumes a paused priming job.
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param cacheName Name of cache. Length of name must not be greater than 80 and chars must be from
   *                  the [-0-9a-zA-Z_] char class.
   * @param options The options parameters.
   */
  async beginResumePrimingJob(
    resourceGroupName: string,
    cacheName: string,
    options?: CachesResumePrimingJobOptionalParams
  ): Promise<
    SimplePollerLike<
      OperationState<CachesResumePrimingJobResponse>,
      CachesResumePrimingJobResponse
    >
  > {
    const directSendOperation = async (
      args: coreClient.OperationArguments,
      spec: coreClient.OperationSpec
    ): Promise<CachesResumePrimingJobResponse> => {
      return this.client.sendOperationRequest(args, spec);
    };
    const sendOperationFn = async (
      args: coreClient.OperationArguments,
      spec: coreClient.OperationSpec
    ) => {
      let currentRawResponse:
        | coreClient.FullOperationResponse
        | undefined = undefined;
      const providedCallback = args.options?.onResponse;
      const callback: coreClient.RawResponseCallback = (
        rawResponse: coreClient.FullOperationResponse,
        flatResponse: unknown
      ) => {
        currentRawResponse = rawResponse;
        providedCallback?.(rawResponse, flatResponse);
      };
      const updatedArgs = {
        ...args,
        options: {
          ...args.options,
          onResponse: callback
        }
      };
      const flatResponse = await directSendOperation(updatedArgs, spec);
      return {
        flatResponse,
        rawResponse: {
          statusCode: currentRawResponse!.status,
          body: currentRawResponse!.parsedBody,
          headers: currentRawResponse!.headers.toJSON()
        }
      };
    };

    const lro = createLroSpec({
      sendOperationFn,
      args: { resourceGroupName, cacheName, options },
      spec: resumePrimingJobOperationSpec
    });
    const poller = await createHttpPoller<
      CachesResumePrimingJobResponse,
      OperationState<CachesResumePrimingJobResponse>
    >(lro, {
      restoreFrom: options?.resumeFrom,
      intervalInMs: options?.updateIntervalInMs,
      resourceLocationConfig: "azure-async-operation"
    });
    await poller.poll();
    return poller;
  }

  /**
   * Resumes a paused priming job.
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param cacheName Name of cache. Length of name must not be greater than 80 and chars must be from
   *                  the [-0-9a-zA-Z_] char class.
   * @param options The options parameters.
   */
  async beginResumePrimingJobAndWait(
    resourceGroupName: string,
    cacheName: string,
    options?: CachesResumePrimingJobOptionalParams
  ): Promise<CachesResumePrimingJobResponse> {
    const poller = await this.beginResumePrimingJob(
      resourceGroupName,
      cacheName,
      options
    );
    return poller.pollUntilDone();
  }

  /**
   * Upgrade a cache's firmware if a new version is available. Otherwise, this operation has no effect.
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param cacheName Name of cache. Length of name must not be greater than 80 and chars must be from
   *                  the [-0-9a-zA-Z_] char class.
   * @param options The options parameters.
   */
  async beginUpgradeFirmware(
    resourceGroupName: string,
    cacheName: string,
    options?: CachesUpgradeFirmwareOptionalParams
  ): Promise<SimplePollerLike<OperationState<void>, void>> {
    const directSendOperation = async (
      args: coreClient.OperationArguments,
      spec: coreClient.OperationSpec
    ): Promise<void> => {
      return this.client.sendOperationRequest(args, spec);
    };
    const sendOperationFn = async (
      args: coreClient.OperationArguments,
      spec: coreClient.OperationSpec
    ) => {
      let currentRawResponse:
        | coreClient.FullOperationResponse
        | undefined = undefined;
      const providedCallback = args.options?.onResponse;
      const callback: coreClient.RawResponseCallback = (
        rawResponse: coreClient.FullOperationResponse,
        flatResponse: unknown
      ) => {
        currentRawResponse = rawResponse;
        providedCallback?.(rawResponse, flatResponse);
      };
      const updatedArgs = {
        ...args,
        options: {
          ...args.options,
          onResponse: callback
        }
      };
      const flatResponse = await directSendOperation(updatedArgs, spec);
      return {
        flatResponse,
        rawResponse: {
          statusCode: currentRawResponse!.status,
          body: currentRawResponse!.parsedBody,
          headers: currentRawResponse!.headers.toJSON()
        }
      };
    };

    const lro = createLroSpec({
      sendOperationFn,
      args: { resourceGroupName, cacheName, options },
      spec: upgradeFirmwareOperationSpec
    });
    const poller = await createHttpPoller<void, OperationState<void>>(lro, {
      restoreFrom: options?.resumeFrom,
      intervalInMs: options?.updateIntervalInMs,
      resourceLocationConfig: "azure-async-operation"
    });
    await poller.poll();
    return poller;
  }

  /**
   * Upgrade a cache's firmware if a new version is available. Otherwise, this operation has no effect.
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param cacheName Name of cache. Length of name must not be greater than 80 and chars must be from
   *                  the [-0-9a-zA-Z_] char class.
   * @param options The options parameters.
   */
  async beginUpgradeFirmwareAndWait(
    resourceGroupName: string,
    cacheName: string,
    options?: CachesUpgradeFirmwareOptionalParams
  ): Promise<void> {
    const poller = await this.beginUpgradeFirmware(
      resourceGroupName,
      cacheName,
      options
    );
    return poller.pollUntilDone();
  }

  /**
   * Update cache space allocation.
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param cacheName Name of cache. Length of name must not be greater than 80 and chars must be from
   *                  the [-0-9a-zA-Z_] char class.
   * @param options The options parameters.
   */
  async beginSpaceAllocation(
    resourceGroupName: string,
    cacheName: string,
    options?: CachesSpaceAllocationOptionalParams
  ): Promise<
    SimplePollerLike<
      OperationState<CachesSpaceAllocationResponse>,
      CachesSpaceAllocationResponse
    >
  > {
    const directSendOperation = async (
      args: coreClient.OperationArguments,
      spec: coreClient.OperationSpec
    ): Promise<CachesSpaceAllocationResponse> => {
      return this.client.sendOperationRequest(args, spec);
    };
    const sendOperationFn = async (
      args: coreClient.OperationArguments,
      spec: coreClient.OperationSpec
    ) => {
      let currentRawResponse:
        | coreClient.FullOperationResponse
        | undefined = undefined;
      const providedCallback = args.options?.onResponse;
      const callback: coreClient.RawResponseCallback = (
        rawResponse: coreClient.FullOperationResponse,
        flatResponse: unknown
      ) => {
        currentRawResponse = rawResponse;
        providedCallback?.(rawResponse, flatResponse);
      };
      const updatedArgs = {
        ...args,
        options: {
          ...args.options,
          onResponse: callback
        }
      };
      const flatResponse = await directSendOperation(updatedArgs, spec);
      return {
        flatResponse,
        rawResponse: {
          statusCode: currentRawResponse!.status,
          body: currentRawResponse!.parsedBody,
          headers: currentRawResponse!.headers.toJSON()
        }
      };
    };

    const lro = createLroSpec({
      sendOperationFn,
      args: { resourceGroupName, cacheName, options },
      spec: spaceAllocationOperationSpec
    });
    const poller = await createHttpPoller<
      CachesSpaceAllocationResponse,
      OperationState<CachesSpaceAllocationResponse>
    >(lro, {
      restoreFrom: options?.resumeFrom,
      intervalInMs: options?.updateIntervalInMs,
      resourceLocationConfig: "azure-async-operation"
    });
    await poller.poll();
    return poller;
  }

  /**
   * Update cache space allocation.
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param cacheName Name of cache. Length of name must not be greater than 80 and chars must be from
   *                  the [-0-9a-zA-Z_] char class.
   * @param options The options parameters.
   */
  async beginSpaceAllocationAndWait(
    resourceGroupName: string,
    cacheName: string,
    options?: CachesSpaceAllocationOptionalParams
  ): Promise<CachesSpaceAllocationResponse> {
    const poller = await this.beginSpaceAllocation(
      resourceGroupName,
      cacheName,
      options
    );
    return poller.pollUntilDone();
  }

  /**
   * ListNext
   * @param nextLink The nextLink from the previous successful call to the List method.
   * @param options The options parameters.
   */
  private _listNext(
    nextLink: string,
    options?: CachesListNextOptionalParams
  ): Promise<CachesListNextResponse> {
    return this.client.sendOperationRequest(
      { nextLink, options },
      listNextOperationSpec
    );
  }

  /**
   * ListByResourceGroupNext
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param nextLink The nextLink from the previous successful call to the ListByResourceGroup method.
   * @param options The options parameters.
   */
  private _listByResourceGroupNext(
    resourceGroupName: string,
    nextLink: string,
    options?: CachesListByResourceGroupNextOptionalParams
  ): Promise<CachesListByResourceGroupNextResponse> {
    return this.client.sendOperationRequest(
      { resourceGroupName, nextLink, options },
      listByResourceGroupNextOperationSpec
    );
  }
}
// Operation Specifications
const serializer = coreClient.createSerializer(Mappers, /* isXml */ false);

const listOperationSpec: coreClient.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/providers/Microsoft.StorageCache/caches",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.CachesListResult
    },
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [Parameters.$host, Parameters.subscriptionId],
  headerParameters: [Parameters.accept],
  serializer
};
const listByResourceGroupOperationSpec: coreClient.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/resourcegroups/{resourceGroupName}/providers/Microsoft.StorageCache/caches",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.CachesListResult
    },
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName
  ],
  headerParameters: [Parameters.accept],
  serializer
};
const deleteOperationSpec: coreClient.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/resourcegroups/{resourceGroupName}/providers/Microsoft.StorageCache/caches/{cacheName}",
  httpMethod: "DELETE",
  responses: {
    200: {},
    201: {},
    202: {},
    204: {},
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.cacheName
  ],
  headerParameters: [Parameters.accept],
  serializer
};
const getOperationSpec: coreClient.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/resourcegroups/{resourceGroupName}/providers/Microsoft.StorageCache/caches/{cacheName}",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.Cache
    },
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.cacheName
  ],
  headerParameters: [Parameters.accept],
  serializer
};
const createOrUpdateOperationSpec: coreClient.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/resourcegroups/{resourceGroupName}/providers/Microsoft.StorageCache/caches/{cacheName}",
  httpMethod: "PUT",
  responses: {
    200: {
      bodyMapper: Mappers.Cache
    },
    201: {
      bodyMapper: Mappers.Cache
    },
    202: {
      bodyMapper: Mappers.Cache
    },
    204: {
      bodyMapper: Mappers.Cache
    },
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  requestBody: Parameters.cache,
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.cacheName
  ],
  headerParameters: [Parameters.accept, Parameters.contentType],
  mediaType: "json",
  serializer
};
const updateOperationSpec: coreClient.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/resourcegroups/{resourceGroupName}/providers/Microsoft.StorageCache/caches/{cacheName}",
  httpMethod: "PATCH",
  responses: {
    200: {
      bodyMapper: Mappers.Cache
    },
    201: {
      bodyMapper: Mappers.Cache
    },
    202: {
      bodyMapper: Mappers.Cache
    },
    204: {
      bodyMapper: Mappers.Cache
    },
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  requestBody: Parameters.cache1,
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.cacheName
  ],
  headerParameters: [Parameters.accept, Parameters.contentType],
  mediaType: "json",
  serializer
};
const debugInfoOperationSpec: coreClient.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/resourcegroups/{resourceGroupName}/providers/Microsoft.StorageCache/caches/{cacheName}/debugInfo",
  httpMethod: "POST",
  responses: {
    200: {},
    201: {},
    202: {},
    204: {},
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.cacheName
  ],
  headerParameters: [Parameters.accept],
  serializer
};
const flushOperationSpec: coreClient.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/resourcegroups/{resourceGroupName}/providers/Microsoft.StorageCache/caches/{cacheName}/flush",
  httpMethod: "POST",
  responses: {
    200: {},
    201: {},
    202: {},
    204: {},
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.cacheName
  ],
  headerParameters: [Parameters.accept],
  serializer
};
const startOperationSpec: coreClient.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/resourcegroups/{resourceGroupName}/providers/Microsoft.StorageCache/caches/{cacheName}/start",
  httpMethod: "POST",
  responses: {
    200: {},
    201: {},
    202: {},
    204: {},
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.cacheName
  ],
  headerParameters: [Parameters.accept],
  serializer
};
const stopOperationSpec: coreClient.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/resourcegroups/{resourceGroupName}/providers/Microsoft.StorageCache/caches/{cacheName}/stop",
  httpMethod: "POST",
  responses: {
    200: {},
    201: {},
    202: {},
    204: {},
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.cacheName
  ],
  headerParameters: [Parameters.accept],
  serializer
};
const startPrimingJobOperationSpec: coreClient.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/resourcegroups/{resourceGroupName}/providers/Microsoft.StorageCache/caches/{cacheName}/startPrimingJob",
  httpMethod: "POST",
  responses: {
    200: {
      headersMapper: Mappers.CachesStartPrimingJobHeaders
    },
    201: {
      headersMapper: Mappers.CachesStartPrimingJobHeaders
    },
    202: {
      headersMapper: Mappers.CachesStartPrimingJobHeaders
    },
    204: {
      headersMapper: Mappers.CachesStartPrimingJobHeaders
    },
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  requestBody: Parameters.primingjob,
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.cacheName
  ],
  headerParameters: [Parameters.accept, Parameters.contentType],
  mediaType: "json",
  serializer
};
const stopPrimingJobOperationSpec: coreClient.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/resourcegroups/{resourceGroupName}/providers/Microsoft.StorageCache/caches/{cacheName}/stopPrimingJob",
  httpMethod: "POST",
  responses: {
    200: {
      headersMapper: Mappers.CachesStopPrimingJobHeaders
    },
    201: {
      headersMapper: Mappers.CachesStopPrimingJobHeaders
    },
    202: {
      headersMapper: Mappers.CachesStopPrimingJobHeaders
    },
    204: {
      headersMapper: Mappers.CachesStopPrimingJobHeaders
    },
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  requestBody: Parameters.primingJobId,
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.cacheName
  ],
  headerParameters: [Parameters.accept, Parameters.contentType],
  mediaType: "json",
  serializer
};
const pausePrimingJobOperationSpec: coreClient.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/resourcegroups/{resourceGroupName}/providers/Microsoft.StorageCache/caches/{cacheName}/pausePrimingJob",
  httpMethod: "POST",
  responses: {
    200: {
      headersMapper: Mappers.CachesPausePrimingJobHeaders
    },
    201: {
      headersMapper: Mappers.CachesPausePrimingJobHeaders
    },
    202: {
      headersMapper: Mappers.CachesPausePrimingJobHeaders
    },
    204: {
      headersMapper: Mappers.CachesPausePrimingJobHeaders
    },
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  requestBody: Parameters.primingJobId,
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.cacheName
  ],
  headerParameters: [Parameters.accept, Parameters.contentType],
  mediaType: "json",
  serializer
};
const resumePrimingJobOperationSpec: coreClient.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/resourcegroups/{resourceGroupName}/providers/Microsoft.StorageCache/caches/{cacheName}/resumePrimingJob",
  httpMethod: "POST",
  responses: {
    200: {
      headersMapper: Mappers.CachesResumePrimingJobHeaders
    },
    201: {
      headersMapper: Mappers.CachesResumePrimingJobHeaders
    },
    202: {
      headersMapper: Mappers.CachesResumePrimingJobHeaders
    },
    204: {
      headersMapper: Mappers.CachesResumePrimingJobHeaders
    },
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  requestBody: Parameters.primingJobId,
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.cacheName
  ],
  headerParameters: [Parameters.accept, Parameters.contentType],
  mediaType: "json",
  serializer
};
const upgradeFirmwareOperationSpec: coreClient.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/resourcegroups/{resourceGroupName}/providers/Microsoft.StorageCache/caches/{cacheName}/upgrade",
  httpMethod: "POST",
  responses: {
    200: {},
    201: {},
    202: {},
    204: {},
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.cacheName
  ],
  headerParameters: [Parameters.accept],
  serializer
};
const spaceAllocationOperationSpec: coreClient.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/resourcegroups/{resourceGroupName}/providers/Microsoft.StorageCache/caches/{cacheName}/spaceAllocation",
  httpMethod: "POST",
  responses: {
    200: {
      headersMapper: Mappers.CachesSpaceAllocationHeaders
    },
    201: {
      headersMapper: Mappers.CachesSpaceAllocationHeaders
    },
    202: {
      headersMapper: Mappers.CachesSpaceAllocationHeaders
    },
    204: {
      headersMapper: Mappers.CachesSpaceAllocationHeaders
    },
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  requestBody: Parameters.spaceAllocation,
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.cacheName
  ],
  headerParameters: [Parameters.accept, Parameters.contentType],
  mediaType: "json",
  serializer
};
const listNextOperationSpec: coreClient.OperationSpec = {
  path: "{nextLink}",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.CachesListResult
    },
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.nextLink
  ],
  headerParameters: [Parameters.accept],
  serializer
};
const listByResourceGroupNextOperationSpec: coreClient.OperationSpec = {
  path: "{nextLink}",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.CachesListResult
    },
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.nextLink
  ],
  headerParameters: [Parameters.accept],
  serializer
};
