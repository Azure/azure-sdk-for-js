// Copyright (c) Microsoft Corporation.
// Licensed under the MIT License.

// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

import { PagedAsyncIterableIterator, PageSettings } from "@azure/core-paging";
import { setContinuationToken } from "../pagingHelper.js";
import { AutoExportJobs } from "../operationsInterfaces/index.js";
import * as coreClient from "@azure/core-client";
import * as Mappers from "../models/mappers.js";
import * as Parameters from "../models/parameters.js";
import { StorageCacheManagementClient } from "../storageCacheManagementClient.js";
import { SimplePollerLike, OperationState, createHttpPoller } from "@azure/core-lro";
import { createLroSpec } from "../lroImpl.js";
import {
  AutoExportJob,
  AutoExportJobsListByAmlFilesystemNextOptionalParams,
  AutoExportJobsListByAmlFilesystemOptionalParams,
  AutoExportJobsListByAmlFilesystemResponse,
  AutoExportJobsDeleteOptionalParams,
  AutoExportJobsDeleteResponse,
  AutoExportJobsGetOptionalParams,
  AutoExportJobsGetResponse,
  AutoExportJobsCreateOrUpdateOptionalParams,
  AutoExportJobsCreateOrUpdateResponse,
  AutoExportJobUpdate,
  AutoExportJobsUpdateOptionalParams,
  AutoExportJobsUpdateResponse,
  AutoExportJobsListByAmlFilesystemNextResponse,
} from "../models/index.js";

/// <reference lib="esnext.asynciterable" />
/** Class containing AutoExportJobs operations. */
export class AutoExportJobsImpl implements AutoExportJobs {
  private readonly client: StorageCacheManagementClient;

  /**
   * Initialize a new instance of the class AutoExportJobs class.
   * @param client Reference to the service client
   */
  constructor(client: StorageCacheManagementClient) {
    this.client = client;
  }

  /**
   * Returns all the auto export jobs the user has access to under an AML File System.
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param amlFilesystemName Name for the AML file system. Allows alphanumerics, underscores, and
   *                          hyphens. Start and end with alphanumeric.
   * @param options The options parameters.
   */
  public listByAmlFilesystem(
    resourceGroupName: string,
    amlFilesystemName: string,
    options?: AutoExportJobsListByAmlFilesystemOptionalParams,
  ): PagedAsyncIterableIterator<AutoExportJob> {
    const iter = this.listByAmlFilesystemPagingAll(resourceGroupName, amlFilesystemName, options);
    return {
      next() {
        return iter.next();
      },
      [Symbol.asyncIterator]() {
        return this;
      },
      byPage: (settings?: PageSettings) => {
        if (settings?.maxPageSize) {
          throw new Error("maxPageSize is not supported by this operation.");
        }
        return this.listByAmlFilesystemPagingPage(
          resourceGroupName,
          amlFilesystemName,
          options,
          settings,
        );
      },
    };
  }

  private async *listByAmlFilesystemPagingPage(
    resourceGroupName: string,
    amlFilesystemName: string,
    options?: AutoExportJobsListByAmlFilesystemOptionalParams,
    settings?: PageSettings,
  ): AsyncIterableIterator<AutoExportJob[]> {
    let result: AutoExportJobsListByAmlFilesystemResponse;
    let continuationToken = settings?.continuationToken;
    if (!continuationToken) {
      result = await this._listByAmlFilesystem(resourceGroupName, amlFilesystemName, options);
      let page = result.value || [];
      continuationToken = result.nextLink;
      setContinuationToken(page, continuationToken);
      yield page;
    }
    while (continuationToken) {
      result = await this._listByAmlFilesystemNext(
        resourceGroupName,
        amlFilesystemName,
        continuationToken,
        options,
      );
      continuationToken = result.nextLink;
      let page = result.value || [];
      setContinuationToken(page, continuationToken);
      yield page;
    }
  }

  private async *listByAmlFilesystemPagingAll(
    resourceGroupName: string,
    amlFilesystemName: string,
    options?: AutoExportJobsListByAmlFilesystemOptionalParams,
  ): AsyncIterableIterator<AutoExportJob> {
    for await (const page of this.listByAmlFilesystemPagingPage(
      resourceGroupName,
      amlFilesystemName,
      options,
    )) {
      yield* page;
    }
  }

  /**
   * Schedules an auto export job for deletion.
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param amlFilesystemName Name for the AML file system. Allows alphanumerics, underscores, and
   *                          hyphens. Start and end with alphanumeric.
   * @param autoExportJobName Name for the auto export job. Allows alphanumerics, underscores, and
   *                          hyphens. Start and end with alphanumeric.
   * @param options The options parameters.
   */
  async beginDelete(
    resourceGroupName: string,
    amlFilesystemName: string,
    autoExportJobName: string,
    options?: AutoExportJobsDeleteOptionalParams,
  ): Promise<
    SimplePollerLike<OperationState<AutoExportJobsDeleteResponse>, AutoExportJobsDeleteResponse>
  > {
    const directSendOperation = async (
      args: coreClient.OperationArguments,
      spec: coreClient.OperationSpec,
    ): Promise<AutoExportJobsDeleteResponse> => {
      return this.client.sendOperationRequest(args, spec);
    };
    const sendOperationFn = async (
      args: coreClient.OperationArguments,
      spec: coreClient.OperationSpec,
    ) => {
      let currentRawResponse: coreClient.FullOperationResponse | undefined = undefined;
      const providedCallback = args.options?.onResponse;
      const callback: coreClient.RawResponseCallback = (
        rawResponse: coreClient.FullOperationResponse,
        flatResponse: unknown,
      ) => {
        currentRawResponse = rawResponse;
        providedCallback?.(rawResponse, flatResponse);
      };
      const updatedArgs = {
        ...args,
        options: {
          ...args.options,
          onResponse: callback,
        },
      };
      const flatResponse = await directSendOperation(updatedArgs, spec);
      return {
        flatResponse,
        rawResponse: {
          statusCode: currentRawResponse!.status,
          body: currentRawResponse!.parsedBody,
          headers: currentRawResponse!.headers.toJSON(),
        },
      };
    };

    const lro = createLroSpec({
      sendOperationFn,
      args: {
        resourceGroupName,
        amlFilesystemName,
        autoExportJobName,
        options,
      },
      spec: deleteOperationSpec,
    });
    const poller = await createHttpPoller<
      AutoExportJobsDeleteResponse,
      OperationState<AutoExportJobsDeleteResponse>
    >(lro, {
      restoreFrom: options?.resumeFrom,
      intervalInMs: options?.updateIntervalInMs,
      resourceLocationConfig: "location",
    });
    await poller.poll();
    return poller;
  }

  /**
   * Schedules an auto export job for deletion.
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param amlFilesystemName Name for the AML file system. Allows alphanumerics, underscores, and
   *                          hyphens. Start and end with alphanumeric.
   * @param autoExportJobName Name for the auto export job. Allows alphanumerics, underscores, and
   *                          hyphens. Start and end with alphanumeric.
   * @param options The options parameters.
   */
  async beginDeleteAndWait(
    resourceGroupName: string,
    amlFilesystemName: string,
    autoExportJobName: string,
    options?: AutoExportJobsDeleteOptionalParams,
  ): Promise<AutoExportJobsDeleteResponse> {
    const poller = await this.beginDelete(
      resourceGroupName,
      amlFilesystemName,
      autoExportJobName,
      options,
    );
    return poller.pollUntilDone();
  }

  /**
   * Returns an auto export job.
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param amlFilesystemName Name for the AML file system. Allows alphanumerics, underscores, and
   *                          hyphens. Start and end with alphanumeric.
   * @param autoExportJobName Name for the auto export job. Allows alphanumerics, underscores, and
   *                          hyphens. Start and end with alphanumeric.
   * @param options The options parameters.
   */
  get(
    resourceGroupName: string,
    amlFilesystemName: string,
    autoExportJobName: string,
    options?: AutoExportJobsGetOptionalParams,
  ): Promise<AutoExportJobsGetResponse> {
    return this.client.sendOperationRequest(
      { resourceGroupName, amlFilesystemName, autoExportJobName, options },
      getOperationSpec,
    );
  }

  /**
   * Create or update an auto export job.
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param amlFilesystemName Name for the AML file system. Allows alphanumerics, underscores, and
   *                          hyphens. Start and end with alphanumeric.
   * @param autoExportJobName Name for the auto export job. Allows alphanumerics, underscores, and
   *                          hyphens. Start and end with alphanumeric.
   * @param autoExportJob Object containing the user-selectable properties of the auto export job. If
   *                      read-only properties are included, they must match the existing values of those properties.
   * @param options The options parameters.
   */
  async beginCreateOrUpdate(
    resourceGroupName: string,
    amlFilesystemName: string,
    autoExportJobName: string,
    autoExportJob: AutoExportJob,
    options?: AutoExportJobsCreateOrUpdateOptionalParams,
  ): Promise<
    SimplePollerLike<
      OperationState<AutoExportJobsCreateOrUpdateResponse>,
      AutoExportJobsCreateOrUpdateResponse
    >
  > {
    const directSendOperation = async (
      args: coreClient.OperationArguments,
      spec: coreClient.OperationSpec,
    ): Promise<AutoExportJobsCreateOrUpdateResponse> => {
      return this.client.sendOperationRequest(args, spec);
    };
    const sendOperationFn = async (
      args: coreClient.OperationArguments,
      spec: coreClient.OperationSpec,
    ) => {
      let currentRawResponse: coreClient.FullOperationResponse | undefined = undefined;
      const providedCallback = args.options?.onResponse;
      const callback: coreClient.RawResponseCallback = (
        rawResponse: coreClient.FullOperationResponse,
        flatResponse: unknown,
      ) => {
        currentRawResponse = rawResponse;
        providedCallback?.(rawResponse, flatResponse);
      };
      const updatedArgs = {
        ...args,
        options: {
          ...args.options,
          onResponse: callback,
        },
      };
      const flatResponse = await directSendOperation(updatedArgs, spec);
      return {
        flatResponse,
        rawResponse: {
          statusCode: currentRawResponse!.status,
          body: currentRawResponse!.parsedBody,
          headers: currentRawResponse!.headers.toJSON(),
        },
      };
    };

    const lro = createLroSpec({
      sendOperationFn,
      args: {
        resourceGroupName,
        amlFilesystemName,
        autoExportJobName,
        autoExportJob,
        options,
      },
      spec: createOrUpdateOperationSpec,
    });
    const poller = await createHttpPoller<
      AutoExportJobsCreateOrUpdateResponse,
      OperationState<AutoExportJobsCreateOrUpdateResponse>
    >(lro, {
      restoreFrom: options?.resumeFrom,
      intervalInMs: options?.updateIntervalInMs,
      resourceLocationConfig: "azure-async-operation",
    });
    await poller.poll();
    return poller;
  }

  /**
   * Create or update an auto export job.
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param amlFilesystemName Name for the AML file system. Allows alphanumerics, underscores, and
   *                          hyphens. Start and end with alphanumeric.
   * @param autoExportJobName Name for the auto export job. Allows alphanumerics, underscores, and
   *                          hyphens. Start and end with alphanumeric.
   * @param autoExportJob Object containing the user-selectable properties of the auto export job. If
   *                      read-only properties are included, they must match the existing values of those properties.
   * @param options The options parameters.
   */
  async beginCreateOrUpdateAndWait(
    resourceGroupName: string,
    amlFilesystemName: string,
    autoExportJobName: string,
    autoExportJob: AutoExportJob,
    options?: AutoExportJobsCreateOrUpdateOptionalParams,
  ): Promise<AutoExportJobsCreateOrUpdateResponse> {
    const poller = await this.beginCreateOrUpdate(
      resourceGroupName,
      amlFilesystemName,
      autoExportJobName,
      autoExportJob,
      options,
    );
    return poller.pollUntilDone();
  }

  /**
   * Update an auto export job instance.
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param amlFilesystemName Name for the AML file system. Allows alphanumerics, underscores, and
   *                          hyphens. Start and end with alphanumeric.
   * @param autoExportJobName Name for the auto export job. Allows alphanumerics, underscores, and
   *                          hyphens. Start and end with alphanumeric.
   * @param autoExportJob Object containing the user-selectable properties of the auto export job. If
   *                      read-only properties are included, they must match the existing values of those properties.
   * @param options The options parameters.
   */
  async beginUpdate(
    resourceGroupName: string,
    amlFilesystemName: string,
    autoExportJobName: string,
    autoExportJob: AutoExportJobUpdate,
    options?: AutoExportJobsUpdateOptionalParams,
  ): Promise<
    SimplePollerLike<OperationState<AutoExportJobsUpdateResponse>, AutoExportJobsUpdateResponse>
  > {
    const directSendOperation = async (
      args: coreClient.OperationArguments,
      spec: coreClient.OperationSpec,
    ): Promise<AutoExportJobsUpdateResponse> => {
      return this.client.sendOperationRequest(args, spec);
    };
    const sendOperationFn = async (
      args: coreClient.OperationArguments,
      spec: coreClient.OperationSpec,
    ) => {
      let currentRawResponse: coreClient.FullOperationResponse | undefined = undefined;
      const providedCallback = args.options?.onResponse;
      const callback: coreClient.RawResponseCallback = (
        rawResponse: coreClient.FullOperationResponse,
        flatResponse: unknown,
      ) => {
        currentRawResponse = rawResponse;
        providedCallback?.(rawResponse, flatResponse);
      };
      const updatedArgs = {
        ...args,
        options: {
          ...args.options,
          onResponse: callback,
        },
      };
      const flatResponse = await directSendOperation(updatedArgs, spec);
      return {
        flatResponse,
        rawResponse: {
          statusCode: currentRawResponse!.status,
          body: currentRawResponse!.parsedBody,
          headers: currentRawResponse!.headers.toJSON(),
        },
      };
    };

    const lro = createLroSpec({
      sendOperationFn,
      args: {
        resourceGroupName,
        amlFilesystemName,
        autoExportJobName,
        autoExportJob,
        options,
      },
      spec: updateOperationSpec,
    });
    const poller = await createHttpPoller<
      AutoExportJobsUpdateResponse,
      OperationState<AutoExportJobsUpdateResponse>
    >(lro, {
      restoreFrom: options?.resumeFrom,
      intervalInMs: options?.updateIntervalInMs,
      resourceLocationConfig: "azure-async-operation",
    });
    await poller.poll();
    return poller;
  }

  /**
   * Update an auto export job instance.
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param amlFilesystemName Name for the AML file system. Allows alphanumerics, underscores, and
   *                          hyphens. Start and end with alphanumeric.
   * @param autoExportJobName Name for the auto export job. Allows alphanumerics, underscores, and
   *                          hyphens. Start and end with alphanumeric.
   * @param autoExportJob Object containing the user-selectable properties of the auto export job. If
   *                      read-only properties are included, they must match the existing values of those properties.
   * @param options The options parameters.
   */
  async beginUpdateAndWait(
    resourceGroupName: string,
    amlFilesystemName: string,
    autoExportJobName: string,
    autoExportJob: AutoExportJobUpdate,
    options?: AutoExportJobsUpdateOptionalParams,
  ): Promise<AutoExportJobsUpdateResponse> {
    const poller = await this.beginUpdate(
      resourceGroupName,
      amlFilesystemName,
      autoExportJobName,
      autoExportJob,
      options,
    );
    return poller.pollUntilDone();
  }

  /**
   * Returns all the auto export jobs the user has access to under an AML File System.
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param amlFilesystemName Name for the AML file system. Allows alphanumerics, underscores, and
   *                          hyphens. Start and end with alphanumeric.
   * @param options The options parameters.
   */
  private _listByAmlFilesystem(
    resourceGroupName: string,
    amlFilesystemName: string,
    options?: AutoExportJobsListByAmlFilesystemOptionalParams,
  ): Promise<AutoExportJobsListByAmlFilesystemResponse> {
    return this.client.sendOperationRequest(
      { resourceGroupName, amlFilesystemName, options },
      listByAmlFilesystemOperationSpec,
    );
  }

  /**
   * ListByAmlFilesystemNext
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param amlFilesystemName Name for the AML file system. Allows alphanumerics, underscores, and
   *                          hyphens. Start and end with alphanumeric.
   * @param nextLink The nextLink from the previous successful call to the ListByAmlFilesystem method.
   * @param options The options parameters.
   */
  private _listByAmlFilesystemNext(
    resourceGroupName: string,
    amlFilesystemName: string,
    nextLink: string,
    options?: AutoExportJobsListByAmlFilesystemNextOptionalParams,
  ): Promise<AutoExportJobsListByAmlFilesystemNextResponse> {
    return this.client.sendOperationRequest(
      { resourceGroupName, amlFilesystemName, nextLink, options },
      listByAmlFilesystemNextOperationSpec,
    );
  }
}
// Operation Specifications
const serializer = coreClient.createSerializer(Mappers, /* isXml */ false);

const deleteOperationSpec: coreClient.OperationSpec = {
  path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.StorageCache/amlFilesystems/{amlFilesystemName}/autoExportJobs/{autoExportJobName}",
  httpMethod: "DELETE",
  responses: {
    200: {
      headersMapper: Mappers.AutoExportJobsDeleteHeaders,
    },
    201: {
      headersMapper: Mappers.AutoExportJobsDeleteHeaders,
    },
    202: {
      headersMapper: Mappers.AutoExportJobsDeleteHeaders,
    },
    204: {
      headersMapper: Mappers.AutoExportJobsDeleteHeaders,
    },
    default: {
      bodyMapper: Mappers.ErrorResponse,
    },
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.amlFilesystemName,
    Parameters.autoExportJobName,
  ],
  headerParameters: [Parameters.accept],
  serializer,
};
const getOperationSpec: coreClient.OperationSpec = {
  path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.StorageCache/amlFilesystems/{amlFilesystemName}/autoExportJobs/{autoExportJobName}",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.AutoExportJob,
    },
    default: {
      bodyMapper: Mappers.ErrorResponse,
    },
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.amlFilesystemName,
    Parameters.autoExportJobName,
  ],
  headerParameters: [Parameters.accept],
  serializer,
};
const createOrUpdateOperationSpec: coreClient.OperationSpec = {
  path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.StorageCache/amlFilesystems/{amlFilesystemName}/autoExportJobs/{autoExportJobName}",
  httpMethod: "PUT",
  responses: {
    200: {
      bodyMapper: Mappers.AutoExportJob,
    },
    201: {
      bodyMapper: Mappers.AutoExportJob,
    },
    202: {
      bodyMapper: Mappers.AutoExportJob,
    },
    204: {
      bodyMapper: Mappers.AutoExportJob,
    },
    default: {
      bodyMapper: Mappers.ErrorResponse,
    },
  },
  requestBody: Parameters.autoExportJob,
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.amlFilesystemName,
    Parameters.autoExportJobName,
  ],
  headerParameters: [Parameters.accept, Parameters.contentType],
  mediaType: "json",
  serializer,
};
const updateOperationSpec: coreClient.OperationSpec = {
  path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.StorageCache/amlFilesystems/{amlFilesystemName}/autoExportJobs/{autoExportJobName}",
  httpMethod: "PATCH",
  responses: {
    200: {
      bodyMapper: Mappers.AutoExportJob,
    },
    201: {
      bodyMapper: Mappers.AutoExportJob,
    },
    202: {
      bodyMapper: Mappers.AutoExportJob,
    },
    204: {
      bodyMapper: Mappers.AutoExportJob,
    },
    default: {
      bodyMapper: Mappers.ErrorResponse,
    },
  },
  requestBody: Parameters.autoExportJob1,
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.amlFilesystemName,
    Parameters.autoExportJobName,
  ],
  headerParameters: [Parameters.accept, Parameters.contentType],
  mediaType: "json",
  serializer,
};
const listByAmlFilesystemOperationSpec: coreClient.OperationSpec = {
  path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.StorageCache/amlFilesystems/{amlFilesystemName}/autoExportJobs",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.AutoExportJobsListResult,
    },
    default: {
      bodyMapper: Mappers.CloudError,
    },
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.amlFilesystemName,
  ],
  headerParameters: [Parameters.accept],
  serializer,
};
const listByAmlFilesystemNextOperationSpec: coreClient.OperationSpec = {
  path: "{nextLink}",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.AutoExportJobsListResult,
    },
    default: {
      bodyMapper: Mappers.CloudError,
    },
  },
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.amlFilesystemName,
    Parameters.nextLink,
  ],
  headerParameters: [Parameters.accept],
  serializer,
};
