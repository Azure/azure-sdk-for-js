/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is
 * regenerated.
 */

import * as msRest from "@azure/ms-rest-js";
import * as msRestAzure from "@azure/ms-rest-azure-js";
import * as Models from "../models";
import * as Mappers from "../models/storageTargetsMappers";
import * as Parameters from "../models/parameters";
import { StorageCacheManagementClientContext } from "../storageCacheManagementClientContext";

/** Class representing a StorageTargets. */
export class StorageTargets {
  private readonly client: StorageCacheManagementClientContext;

  /**
   * Create a StorageTargets.
   * @param {StorageCacheManagementClientContext} client Reference to the service client.
   */
  constructor(client: StorageCacheManagementClientContext) {
    this.client = client;
  }

  /**
   * Tells a storage target to refresh its DNS information.
   * @param resourceGroupName Target resource group.
   * @param cacheName Name of Cache. Length of name must not be greater than 80 and chars must be
   * from the [-0-9a-zA-Z_] char class.
   * @param storageTargetName Name of Storage Target.
   * @param [options] The optional parameters
   * @returns Promise<msRest.RestResponse>
   */
  dnsRefresh(resourceGroupName: string, cacheName: string, storageTargetName: string, options?: msRest.RequestOptionsBase): Promise<msRest.RestResponse> {
    return this.beginDnsRefresh(resourceGroupName,cacheName,storageTargetName,options)
      .then(lroPoller => lroPoller.pollUntilFinished());
  }

  /**
   * Returns a list of Storage Targets for the specified Cache.
   * @param resourceGroupName Target resource group.
   * @param cacheName Name of Cache. Length of name must not be greater than 80 and chars must be
   * from the [-0-9a-zA-Z_] char class.
   * @param [options] The optional parameters
   * @returns Promise<Models.StorageTargetsListByCacheResponse>
   */
  listByCache(resourceGroupName: string, cacheName: string, options?: msRest.RequestOptionsBase): Promise<Models.StorageTargetsListByCacheResponse>;
  /**
   * @param resourceGroupName Target resource group.
   * @param cacheName Name of Cache. Length of name must not be greater than 80 and chars must be
   * from the [-0-9a-zA-Z_] char class.
   * @param callback The callback
   */
  listByCache(resourceGroupName: string, cacheName: string, callback: msRest.ServiceCallback<Models.StorageTargetsResult>): void;
  /**
   * @param resourceGroupName Target resource group.
   * @param cacheName Name of Cache. Length of name must not be greater than 80 and chars must be
   * from the [-0-9a-zA-Z_] char class.
   * @param options The optional parameters
   * @param callback The callback
   */
  listByCache(resourceGroupName: string, cacheName: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.StorageTargetsResult>): void;
  listByCache(resourceGroupName: string, cacheName: string, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<Models.StorageTargetsResult>, callback?: msRest.ServiceCallback<Models.StorageTargetsResult>): Promise<Models.StorageTargetsListByCacheResponse> {
    return this.client.sendOperationRequest(
      {
        resourceGroupName,
        cacheName,
        options
      },
      listByCacheOperationSpec,
      callback) as Promise<Models.StorageTargetsListByCacheResponse>;
  }

  /**
   * Removes a Storage Target from a Cache. This operation is allowed at any time, but if the Cache
   * is down or unhealthy, the actual removal of the Storage Target may be delayed until the Cache is
   * healthy again. Note that if the Cache has data to flush to the Storage Target, the data will be
   * flushed before the Storage Target will be deleted.
   * @param resourceGroupName Target resource group.
   * @param cacheName Name of Cache. Length of name must not be greater than 80 and chars must be
   * from the [-0-9a-zA-Z_] char class.
   * @param storageTargetName Name of Storage Target.
   * @param [options] The optional parameters
   * @returns Promise<msRest.RestResponse>
   */
  deleteMethod(resourceGroupName: string, cacheName: string, storageTargetName: string, options?: msRest.RequestOptionsBase): Promise<msRest.RestResponse> {
    return this.beginDeleteMethod(resourceGroupName,cacheName,storageTargetName,options)
      .then(lroPoller => lroPoller.pollUntilFinished());
  }

  /**
   * Returns a Storage Target from a Cache.
   * @param resourceGroupName Target resource group.
   * @param cacheName Name of Cache. Length of name must not be greater than 80 and chars must be
   * from the [-0-9a-zA-Z_] char class.
   * @param storageTargetName Name of Storage Target.
   * @param [options] The optional parameters
   * @returns Promise<Models.StorageTargetsGetResponse>
   */
  get(resourceGroupName: string, cacheName: string, storageTargetName: string, options?: msRest.RequestOptionsBase): Promise<Models.StorageTargetsGetResponse>;
  /**
   * @param resourceGroupName Target resource group.
   * @param cacheName Name of Cache. Length of name must not be greater than 80 and chars must be
   * from the [-0-9a-zA-Z_] char class.
   * @param storageTargetName Name of Storage Target.
   * @param callback The callback
   */
  get(resourceGroupName: string, cacheName: string, storageTargetName: string, callback: msRest.ServiceCallback<Models.StorageTarget>): void;
  /**
   * @param resourceGroupName Target resource group.
   * @param cacheName Name of Cache. Length of name must not be greater than 80 and chars must be
   * from the [-0-9a-zA-Z_] char class.
   * @param storageTargetName Name of Storage Target.
   * @param options The optional parameters
   * @param callback The callback
   */
  get(resourceGroupName: string, cacheName: string, storageTargetName: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.StorageTarget>): void;
  get(resourceGroupName: string, cacheName: string, storageTargetName: string, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<Models.StorageTarget>, callback?: msRest.ServiceCallback<Models.StorageTarget>): Promise<Models.StorageTargetsGetResponse> {
    return this.client.sendOperationRequest(
      {
        resourceGroupName,
        cacheName,
        storageTargetName,
        options
      },
      getOperationSpec,
      callback) as Promise<Models.StorageTargetsGetResponse>;
  }

  /**
   * Create or update a Storage Target. This operation is allowed at any time, but if the Cache is
   * down or unhealthy, the actual creation/modification of the Storage Target may be delayed until
   * the Cache is healthy again.
   * @param resourceGroupName Target resource group.
   * @param cacheName Name of Cache. Length of name must not be greater than 80 and chars must be
   * from the [-0-9a-zA-Z_] char class.
   * @param storageTargetName Name of Storage Target.
   * @param [options] The optional parameters
   * @returns Promise<Models.StorageTargetsCreateOrUpdateResponse>
   */
  createOrUpdate(resourceGroupName: string, cacheName: string, storageTargetName: string, options?: Models.StorageTargetsCreateOrUpdateOptionalParams): Promise<Models.StorageTargetsCreateOrUpdateResponse> {
    return this.beginCreateOrUpdate(resourceGroupName,cacheName,storageTargetName,options)
      .then(lroPoller => lroPoller.pollUntilFinished()) as Promise<Models.StorageTargetsCreateOrUpdateResponse>;
  }

  /**
   * Tells a storage target to refresh its DNS information.
   * @param resourceGroupName Target resource group.
   * @param cacheName Name of Cache. Length of name must not be greater than 80 and chars must be
   * from the [-0-9a-zA-Z_] char class.
   * @param storageTargetName Name of Storage Target.
   * @param [options] The optional parameters
   * @returns Promise<msRestAzure.LROPoller>
   */
  beginDnsRefresh(resourceGroupName: string, cacheName: string, storageTargetName: string, options?: msRest.RequestOptionsBase): Promise<msRestAzure.LROPoller> {
    return this.client.sendLRORequest(
      {
        resourceGroupName,
        cacheName,
        storageTargetName,
        options
      },
      beginDnsRefreshOperationSpec,
      options);
  }

  /**
   * Removes a Storage Target from a Cache. This operation is allowed at any time, but if the Cache
   * is down or unhealthy, the actual removal of the Storage Target may be delayed until the Cache is
   * healthy again. Note that if the Cache has data to flush to the Storage Target, the data will be
   * flushed before the Storage Target will be deleted.
   * @param resourceGroupName Target resource group.
   * @param cacheName Name of Cache. Length of name must not be greater than 80 and chars must be
   * from the [-0-9a-zA-Z_] char class.
   * @param storageTargetName Name of Storage Target.
   * @param [options] The optional parameters
   * @returns Promise<msRestAzure.LROPoller>
   */
  beginDeleteMethod(resourceGroupName: string, cacheName: string, storageTargetName: string, options?: msRest.RequestOptionsBase): Promise<msRestAzure.LROPoller> {
    return this.client.sendLRORequest(
      {
        resourceGroupName,
        cacheName,
        storageTargetName,
        options
      },
      beginDeleteMethodOperationSpec,
      options);
  }

  /**
   * Create or update a Storage Target. This operation is allowed at any time, but if the Cache is
   * down or unhealthy, the actual creation/modification of the Storage Target may be delayed until
   * the Cache is healthy again.
   * @param resourceGroupName Target resource group.
   * @param cacheName Name of Cache. Length of name must not be greater than 80 and chars must be
   * from the [-0-9a-zA-Z_] char class.
   * @param storageTargetName Name of Storage Target.
   * @param [options] The optional parameters
   * @returns Promise<msRestAzure.LROPoller>
   */
  beginCreateOrUpdate(resourceGroupName: string, cacheName: string, storageTargetName: string, options?: Models.StorageTargetsBeginCreateOrUpdateOptionalParams): Promise<msRestAzure.LROPoller> {
    return this.client.sendLRORequest(
      {
        resourceGroupName,
        cacheName,
        storageTargetName,
        options
      },
      beginCreateOrUpdateOperationSpec,
      options);
  }

  /**
   * Returns a list of Storage Targets for the specified Cache.
   * @param nextPageLink The NextLink from the previous successful call to List operation.
   * @param [options] The optional parameters
   * @returns Promise<Models.StorageTargetsListByCacheNextResponse>
   */
  listByCacheNext(nextPageLink: string, options?: msRest.RequestOptionsBase): Promise<Models.StorageTargetsListByCacheNextResponse>;
  /**
   * @param nextPageLink The NextLink from the previous successful call to List operation.
   * @param callback The callback
   */
  listByCacheNext(nextPageLink: string, callback: msRest.ServiceCallback<Models.StorageTargetsResult>): void;
  /**
   * @param nextPageLink The NextLink from the previous successful call to List operation.
   * @param options The optional parameters
   * @param callback The callback
   */
  listByCacheNext(nextPageLink: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.StorageTargetsResult>): void;
  listByCacheNext(nextPageLink: string, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<Models.StorageTargetsResult>, callback?: msRest.ServiceCallback<Models.StorageTargetsResult>): Promise<Models.StorageTargetsListByCacheNextResponse> {
    return this.client.sendOperationRequest(
      {
        nextPageLink,
        options
      },
      listByCacheNextOperationSpec,
      callback) as Promise<Models.StorageTargetsListByCacheNextResponse>;
  }
}

// Operation Specifications
const serializer = new msRest.Serializer(Mappers);
const listByCacheOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "subscriptions/{subscriptionId}/resourcegroups/{resourceGroupName}/providers/Microsoft.StorageCache/caches/{cacheName}/storageTargets",
  urlParameters: [
    Parameters.resourceGroupName,
    Parameters.subscriptionId,
    Parameters.cacheName
  ],
  queryParameters: [
    Parameters.apiVersion
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    200: {
      bodyMapper: Mappers.StorageTargetsResult
    },
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  serializer
};

const getOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "subscriptions/{subscriptionId}/resourcegroups/{resourceGroupName}/providers/Microsoft.StorageCache/caches/{cacheName}/storageTargets/{storageTargetName}",
  urlParameters: [
    Parameters.resourceGroupName,
    Parameters.subscriptionId,
    Parameters.cacheName,
    Parameters.storageTargetName
  ],
  queryParameters: [
    Parameters.apiVersion
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    200: {
      bodyMapper: Mappers.StorageTarget
    },
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  serializer
};

const beginDnsRefreshOperationSpec: msRest.OperationSpec = {
  httpMethod: "POST",
  path: "subscriptions/{subscriptionId}/resourcegroups/{resourceGroupName}/providers/Microsoft.StorageCache/caches/{cacheName}/storageTargets/{storageTargetName}/dnsRefresh",
  urlParameters: [
    Parameters.resourceGroupName,
    Parameters.subscriptionId,
    Parameters.cacheName,
    Parameters.storageTargetName
  ],
  queryParameters: [
    Parameters.apiVersion
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    200: {},
    202: {},
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  serializer
};

const beginDeleteMethodOperationSpec: msRest.OperationSpec = {
  httpMethod: "DELETE",
  path: "subscriptions/{subscriptionId}/resourcegroups/{resourceGroupName}/providers/Microsoft.StorageCache/caches/{cacheName}/storageTargets/{storageTargetName}",
  urlParameters: [
    Parameters.resourceGroupName,
    Parameters.subscriptionId,
    Parameters.cacheName,
    Parameters.storageTargetName
  ],
  queryParameters: [
    Parameters.apiVersion
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    200: {},
    202: {},
    204: {},
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  serializer
};

const beginCreateOrUpdateOperationSpec: msRest.OperationSpec = {
  httpMethod: "PUT",
  path: "subscriptions/{subscriptionId}/resourcegroups/{resourceGroupName}/providers/Microsoft.StorageCache/caches/{cacheName}/storageTargets/{storageTargetName}",
  urlParameters: [
    Parameters.resourceGroupName,
    Parameters.subscriptionId,
    Parameters.cacheName,
    Parameters.storageTargetName
  ],
  queryParameters: [
    Parameters.apiVersion
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  requestBody: {
    parameterPath: [
      "options",
      "storagetarget"
    ],
    mapper: Mappers.StorageTarget
  },
  responses: {
    200: {
      bodyMapper: Mappers.StorageTarget
    },
    201: {
      bodyMapper: Mappers.StorageTarget
    },
    202: {},
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  serializer
};

const listByCacheNextOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  baseUrl: "https://management.azure.com",
  path: "{nextLink}",
  urlParameters: [
    Parameters.nextPageLink
  ],
  queryParameters: [
    Parameters.apiVersion
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    200: {
      bodyMapper: Mappers.StorageTargetsResult
    },
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  serializer
};
