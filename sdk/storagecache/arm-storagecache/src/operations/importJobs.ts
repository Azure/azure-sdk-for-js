/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */

import { PagedAsyncIterableIterator, PageSettings } from "@azure/core-paging";
import { setContinuationToken } from "../pagingHelper";
import { ImportJobs } from "../operationsInterfaces";
import * as coreClient from "@azure/core-client";
import * as Mappers from "../models/mappers";
import * as Parameters from "../models/parameters";
import { StorageCacheManagementClient } from "../storageCacheManagementClient";
import {
  SimplePollerLike,
  OperationState,
  createHttpPoller,
} from "@azure/core-lro";
import { createLroSpec } from "../lroImpl";
import {
  ImportJob,
  ImportJobsListByAmlFilesystemNextOptionalParams,
  ImportJobsListByAmlFilesystemOptionalParams,
  ImportJobsListByAmlFilesystemResponse,
  ImportJobsDeleteOptionalParams,
  ImportJobsDeleteResponse,
  ImportJobsGetOptionalParams,
  ImportJobsGetResponse,
  ImportJobsCreateOrUpdateOptionalParams,
  ImportJobsCreateOrUpdateResponse,
  ImportJobUpdate,
  ImportJobsUpdateOptionalParams,
  ImportJobsUpdateResponse,
  ImportJobsListByAmlFilesystemNextResponse,
} from "../models";

/// <reference lib="esnext.asynciterable" />
/** Class containing ImportJobs operations. */
export class ImportJobsImpl implements ImportJobs {
  private readonly client: StorageCacheManagementClient;

  /**
   * Initialize a new instance of the class ImportJobs class.
   * @param client Reference to the service client
   */
  constructor(client: StorageCacheManagementClient) {
    this.client = client;
  }

  /**
   * Returns all import jobs the user has access to under an AML File System.
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param amlFilesystemName Name for the AML file system. Allows alphanumerics, underscores, and
   *                          hyphens. Start and end with alphanumeric.
   * @param options The options parameters.
   */
  public listByAmlFilesystem(
    resourceGroupName: string,
    amlFilesystemName: string,
    options?: ImportJobsListByAmlFilesystemOptionalParams,
  ): PagedAsyncIterableIterator<ImportJob> {
    const iter = this.listByAmlFilesystemPagingAll(
      resourceGroupName,
      amlFilesystemName,
      options,
    );
    return {
      next() {
        return iter.next();
      },
      [Symbol.asyncIterator]() {
        return this;
      },
      byPage: (settings?: PageSettings) => {
        if (settings?.maxPageSize) {
          throw new Error("maxPageSize is not supported by this operation.");
        }
        return this.listByAmlFilesystemPagingPage(
          resourceGroupName,
          amlFilesystemName,
          options,
          settings,
        );
      },
    };
  }

  private async *listByAmlFilesystemPagingPage(
    resourceGroupName: string,
    amlFilesystemName: string,
    options?: ImportJobsListByAmlFilesystemOptionalParams,
    settings?: PageSettings,
  ): AsyncIterableIterator<ImportJob[]> {
    let result: ImportJobsListByAmlFilesystemResponse;
    let continuationToken = settings?.continuationToken;
    if (!continuationToken) {
      result = await this._listByAmlFilesystem(
        resourceGroupName,
        amlFilesystemName,
        options,
      );
      let page = result.value || [];
      continuationToken = result.nextLink;
      setContinuationToken(page, continuationToken);
      yield page;
    }
    while (continuationToken) {
      result = await this._listByAmlFilesystemNext(
        resourceGroupName,
        amlFilesystemName,
        continuationToken,
        options,
      );
      continuationToken = result.nextLink;
      let page = result.value || [];
      setContinuationToken(page, continuationToken);
      yield page;
    }
  }

  private async *listByAmlFilesystemPagingAll(
    resourceGroupName: string,
    amlFilesystemName: string,
    options?: ImportJobsListByAmlFilesystemOptionalParams,
  ): AsyncIterableIterator<ImportJob> {
    for await (const page of this.listByAmlFilesystemPagingPage(
      resourceGroupName,
      amlFilesystemName,
      options,
    )) {
      yield* page;
    }
  }

  /**
   * Schedules an import job for deletion.
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param amlFilesystemName Name for the AML file system. Allows alphanumerics, underscores, and
   *                          hyphens. Start and end with alphanumeric.
   * @param importJobName Name for the import job. Allows alphanumerics, underscores, and hyphens. Start
   *                      and end with alphanumeric.
   * @param options The options parameters.
   */
  async beginDelete(
    resourceGroupName: string,
    amlFilesystemName: string,
    importJobName: string,
    options?: ImportJobsDeleteOptionalParams,
  ): Promise<
    SimplePollerLike<
      OperationState<ImportJobsDeleteResponse>,
      ImportJobsDeleteResponse
    >
  > {
    const directSendOperation = async (
      args: coreClient.OperationArguments,
      spec: coreClient.OperationSpec,
    ): Promise<ImportJobsDeleteResponse> => {
      return this.client.sendOperationRequest(args, spec);
    };
    const sendOperationFn = async (
      args: coreClient.OperationArguments,
      spec: coreClient.OperationSpec,
    ) => {
      let currentRawResponse: coreClient.FullOperationResponse | undefined =
        undefined;
      const providedCallback = args.options?.onResponse;
      const callback: coreClient.RawResponseCallback = (
        rawResponse: coreClient.FullOperationResponse,
        flatResponse: unknown,
      ) => {
        currentRawResponse = rawResponse;
        providedCallback?.(rawResponse, flatResponse);
      };
      const updatedArgs = {
        ...args,
        options: {
          ...args.options,
          onResponse: callback,
        },
      };
      const flatResponse = await directSendOperation(updatedArgs, spec);
      return {
        flatResponse,
        rawResponse: {
          statusCode: currentRawResponse!.status,
          body: currentRawResponse!.parsedBody,
          headers: currentRawResponse!.headers.toJSON(),
        },
      };
    };

    const lro = createLroSpec({
      sendOperationFn,
      args: { resourceGroupName, amlFilesystemName, importJobName, options },
      spec: deleteOperationSpec,
    });
    const poller = await createHttpPoller<
      ImportJobsDeleteResponse,
      OperationState<ImportJobsDeleteResponse>
    >(lro, {
      restoreFrom: options?.resumeFrom,
      intervalInMs: options?.updateIntervalInMs,
      resourceLocationConfig: "location",
    });
    await poller.poll();
    return poller;
  }

  /**
   * Schedules an import job for deletion.
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param amlFilesystemName Name for the AML file system. Allows alphanumerics, underscores, and
   *                          hyphens. Start and end with alphanumeric.
   * @param importJobName Name for the import job. Allows alphanumerics, underscores, and hyphens. Start
   *                      and end with alphanumeric.
   * @param options The options parameters.
   */
  async beginDeleteAndWait(
    resourceGroupName: string,
    amlFilesystemName: string,
    importJobName: string,
    options?: ImportJobsDeleteOptionalParams,
  ): Promise<ImportJobsDeleteResponse> {
    const poller = await this.beginDelete(
      resourceGroupName,
      amlFilesystemName,
      importJobName,
      options,
    );
    return poller.pollUntilDone();
  }

  /**
   * Returns an import job.
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param amlFilesystemName Name for the AML file system. Allows alphanumerics, underscores, and
   *                          hyphens. Start and end with alphanumeric.
   * @param importJobName Name for the import job. Allows alphanumerics, underscores, and hyphens. Start
   *                      and end with alphanumeric.
   * @param options The options parameters.
   */
  get(
    resourceGroupName: string,
    amlFilesystemName: string,
    importJobName: string,
    options?: ImportJobsGetOptionalParams,
  ): Promise<ImportJobsGetResponse> {
    return this.client.sendOperationRequest(
      { resourceGroupName, amlFilesystemName, importJobName, options },
      getOperationSpec,
    );
  }

  /**
   * Create or update an import job. Import jobs are automatically deleted 72 hours after completion.
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param amlFilesystemName Name for the AML file system. Allows alphanumerics, underscores, and
   *                          hyphens. Start and end with alphanumeric.
   * @param importJobName Name for the import job. Allows alphanumerics, underscores, and hyphens. Start
   *                      and end with alphanumeric.
   * @param importJob Object containing the user-selectable properties of the import job. If read-only
   *                  properties are included, they must match the existing values of those properties.
   * @param options The options parameters.
   */
  async beginCreateOrUpdate(
    resourceGroupName: string,
    amlFilesystemName: string,
    importJobName: string,
    importJob: ImportJob,
    options?: ImportJobsCreateOrUpdateOptionalParams,
  ): Promise<
    SimplePollerLike<
      OperationState<ImportJobsCreateOrUpdateResponse>,
      ImportJobsCreateOrUpdateResponse
    >
  > {
    const directSendOperation = async (
      args: coreClient.OperationArguments,
      spec: coreClient.OperationSpec,
    ): Promise<ImportJobsCreateOrUpdateResponse> => {
      return this.client.sendOperationRequest(args, spec);
    };
    const sendOperationFn = async (
      args: coreClient.OperationArguments,
      spec: coreClient.OperationSpec,
    ) => {
      let currentRawResponse: coreClient.FullOperationResponse | undefined =
        undefined;
      const providedCallback = args.options?.onResponse;
      const callback: coreClient.RawResponseCallback = (
        rawResponse: coreClient.FullOperationResponse,
        flatResponse: unknown,
      ) => {
        currentRawResponse = rawResponse;
        providedCallback?.(rawResponse, flatResponse);
      };
      const updatedArgs = {
        ...args,
        options: {
          ...args.options,
          onResponse: callback,
        },
      };
      const flatResponse = await directSendOperation(updatedArgs, spec);
      return {
        flatResponse,
        rawResponse: {
          statusCode: currentRawResponse!.status,
          body: currentRawResponse!.parsedBody,
          headers: currentRawResponse!.headers.toJSON(),
        },
      };
    };

    const lro = createLroSpec({
      sendOperationFn,
      args: {
        resourceGroupName,
        amlFilesystemName,
        importJobName,
        importJob,
        options,
      },
      spec: createOrUpdateOperationSpec,
    });
    const poller = await createHttpPoller<
      ImportJobsCreateOrUpdateResponse,
      OperationState<ImportJobsCreateOrUpdateResponse>
    >(lro, {
      restoreFrom: options?.resumeFrom,
      intervalInMs: options?.updateIntervalInMs,
      resourceLocationConfig: "azure-async-operation",
    });
    await poller.poll();
    return poller;
  }

  /**
   * Create or update an import job. Import jobs are automatically deleted 72 hours after completion.
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param amlFilesystemName Name for the AML file system. Allows alphanumerics, underscores, and
   *                          hyphens. Start and end with alphanumeric.
   * @param importJobName Name for the import job. Allows alphanumerics, underscores, and hyphens. Start
   *                      and end with alphanumeric.
   * @param importJob Object containing the user-selectable properties of the import job. If read-only
   *                  properties are included, they must match the existing values of those properties.
   * @param options The options parameters.
   */
  async beginCreateOrUpdateAndWait(
    resourceGroupName: string,
    amlFilesystemName: string,
    importJobName: string,
    importJob: ImportJob,
    options?: ImportJobsCreateOrUpdateOptionalParams,
  ): Promise<ImportJobsCreateOrUpdateResponse> {
    const poller = await this.beginCreateOrUpdate(
      resourceGroupName,
      amlFilesystemName,
      importJobName,
      importJob,
      options,
    );
    return poller.pollUntilDone();
  }

  /**
   * Update an import job instance.
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param amlFilesystemName Name for the AML file system. Allows alphanumerics, underscores, and
   *                          hyphens. Start and end with alphanumeric.
   * @param importJobName Name for the import job. Allows alphanumerics, underscores, and hyphens. Start
   *                      and end with alphanumeric.
   * @param importJob Object containing the user-selectable properties of the import job. If read-only
   *                  properties are included, they must match the existing values of those properties.
   * @param options The options parameters.
   */
  async beginUpdate(
    resourceGroupName: string,
    amlFilesystemName: string,
    importJobName: string,
    importJob: ImportJobUpdate,
    options?: ImportJobsUpdateOptionalParams,
  ): Promise<
    SimplePollerLike<
      OperationState<ImportJobsUpdateResponse>,
      ImportJobsUpdateResponse
    >
  > {
    const directSendOperation = async (
      args: coreClient.OperationArguments,
      spec: coreClient.OperationSpec,
    ): Promise<ImportJobsUpdateResponse> => {
      return this.client.sendOperationRequest(args, spec);
    };
    const sendOperationFn = async (
      args: coreClient.OperationArguments,
      spec: coreClient.OperationSpec,
    ) => {
      let currentRawResponse: coreClient.FullOperationResponse | undefined =
        undefined;
      const providedCallback = args.options?.onResponse;
      const callback: coreClient.RawResponseCallback = (
        rawResponse: coreClient.FullOperationResponse,
        flatResponse: unknown,
      ) => {
        currentRawResponse = rawResponse;
        providedCallback?.(rawResponse, flatResponse);
      };
      const updatedArgs = {
        ...args,
        options: {
          ...args.options,
          onResponse: callback,
        },
      };
      const flatResponse = await directSendOperation(updatedArgs, spec);
      return {
        flatResponse,
        rawResponse: {
          statusCode: currentRawResponse!.status,
          body: currentRawResponse!.parsedBody,
          headers: currentRawResponse!.headers.toJSON(),
        },
      };
    };

    const lro = createLroSpec({
      sendOperationFn,
      args: {
        resourceGroupName,
        amlFilesystemName,
        importJobName,
        importJob,
        options,
      },
      spec: updateOperationSpec,
    });
    const poller = await createHttpPoller<
      ImportJobsUpdateResponse,
      OperationState<ImportJobsUpdateResponse>
    >(lro, {
      restoreFrom: options?.resumeFrom,
      intervalInMs: options?.updateIntervalInMs,
      resourceLocationConfig: "azure-async-operation",
    });
    await poller.poll();
    return poller;
  }

  /**
   * Update an import job instance.
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param amlFilesystemName Name for the AML file system. Allows alphanumerics, underscores, and
   *                          hyphens. Start and end with alphanumeric.
   * @param importJobName Name for the import job. Allows alphanumerics, underscores, and hyphens. Start
   *                      and end with alphanumeric.
   * @param importJob Object containing the user-selectable properties of the import job. If read-only
   *                  properties are included, they must match the existing values of those properties.
   * @param options The options parameters.
   */
  async beginUpdateAndWait(
    resourceGroupName: string,
    amlFilesystemName: string,
    importJobName: string,
    importJob: ImportJobUpdate,
    options?: ImportJobsUpdateOptionalParams,
  ): Promise<ImportJobsUpdateResponse> {
    const poller = await this.beginUpdate(
      resourceGroupName,
      amlFilesystemName,
      importJobName,
      importJob,
      options,
    );
    return poller.pollUntilDone();
  }

  /**
   * Returns all import jobs the user has access to under an AML File System.
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param amlFilesystemName Name for the AML file system. Allows alphanumerics, underscores, and
   *                          hyphens. Start and end with alphanumeric.
   * @param options The options parameters.
   */
  private _listByAmlFilesystem(
    resourceGroupName: string,
    amlFilesystemName: string,
    options?: ImportJobsListByAmlFilesystemOptionalParams,
  ): Promise<ImportJobsListByAmlFilesystemResponse> {
    return this.client.sendOperationRequest(
      { resourceGroupName, amlFilesystemName, options },
      listByAmlFilesystemOperationSpec,
    );
  }

  /**
   * ListByAmlFilesystemNext
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param amlFilesystemName Name for the AML file system. Allows alphanumerics, underscores, and
   *                          hyphens. Start and end with alphanumeric.
   * @param nextLink The nextLink from the previous successful call to the ListByAmlFilesystem method.
   * @param options The options parameters.
   */
  private _listByAmlFilesystemNext(
    resourceGroupName: string,
    amlFilesystemName: string,
    nextLink: string,
    options?: ImportJobsListByAmlFilesystemNextOptionalParams,
  ): Promise<ImportJobsListByAmlFilesystemNextResponse> {
    return this.client.sendOperationRequest(
      { resourceGroupName, amlFilesystemName, nextLink, options },
      listByAmlFilesystemNextOperationSpec,
    );
  }
}
// Operation Specifications
const serializer = coreClient.createSerializer(Mappers, /* isXml */ false);

const deleteOperationSpec: coreClient.OperationSpec = {
  path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.StorageCache/amlFilesystems/{amlFilesystemName}/importJobs/{importJobName}",
  httpMethod: "DELETE",
  responses: {
    200: {
      headersMapper: Mappers.ImportJobsDeleteHeaders,
    },
    201: {
      headersMapper: Mappers.ImportJobsDeleteHeaders,
    },
    202: {
      headersMapper: Mappers.ImportJobsDeleteHeaders,
    },
    204: {
      headersMapper: Mappers.ImportJobsDeleteHeaders,
    },
    default: {
      bodyMapper: Mappers.ErrorResponse,
    },
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.amlFilesystemName,
    Parameters.importJobName,
  ],
  headerParameters: [Parameters.accept],
  serializer,
};
const getOperationSpec: coreClient.OperationSpec = {
  path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.StorageCache/amlFilesystems/{amlFilesystemName}/importJobs/{importJobName}",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.ImportJob,
    },
    default: {
      bodyMapper: Mappers.ErrorResponse,
    },
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.amlFilesystemName,
    Parameters.importJobName,
  ],
  headerParameters: [Parameters.accept],
  serializer,
};
const createOrUpdateOperationSpec: coreClient.OperationSpec = {
  path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.StorageCache/amlFilesystems/{amlFilesystemName}/importJobs/{importJobName}",
  httpMethod: "PUT",
  responses: {
    200: {
      bodyMapper: Mappers.ImportJob,
    },
    201: {
      bodyMapper: Mappers.ImportJob,
    },
    202: {
      bodyMapper: Mappers.ImportJob,
    },
    204: {
      bodyMapper: Mappers.ImportJob,
    },
    default: {
      bodyMapper: Mappers.ErrorResponse,
    },
  },
  requestBody: Parameters.importJob,
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.amlFilesystemName,
    Parameters.importJobName,
  ],
  headerParameters: [Parameters.accept, Parameters.contentType],
  mediaType: "json",
  serializer,
};
const updateOperationSpec: coreClient.OperationSpec = {
  path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.StorageCache/amlFilesystems/{amlFilesystemName}/importJobs/{importJobName}",
  httpMethod: "PATCH",
  responses: {
    200: {
      bodyMapper: Mappers.ImportJob,
    },
    201: {
      bodyMapper: Mappers.ImportJob,
    },
    202: {
      bodyMapper: Mappers.ImportJob,
    },
    204: {
      bodyMapper: Mappers.ImportJob,
    },
    default: {
      bodyMapper: Mappers.ErrorResponse,
    },
  },
  requestBody: Parameters.importJob1,
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.amlFilesystemName,
    Parameters.importJobName,
  ],
  headerParameters: [Parameters.accept, Parameters.contentType],
  mediaType: "json",
  serializer,
};
const listByAmlFilesystemOperationSpec: coreClient.OperationSpec = {
  path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.StorageCache/amlFilesystems/{amlFilesystemName}/importJobs",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.ImportJobsListResult,
    },
    default: {
      bodyMapper: Mappers.CloudError,
    },
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.amlFilesystemName,
  ],
  headerParameters: [Parameters.accept],
  serializer,
};
const listByAmlFilesystemNextOperationSpec: coreClient.OperationSpec = {
  path: "{nextLink}",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.ImportJobsListResult,
    },
    default: {
      bodyMapper: Mappers.CloudError,
    },
  },
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.amlFilesystemName,
    Parameters.nextLink,
  ],
  headerParameters: [Parameters.accept],
  serializer,
};
