/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */

import { PagedAsyncIterableIterator, PageSettings } from "@azure/core-paging";
import { setContinuationToken } from "../pagingHelper";
import { AmlFilesystems } from "../operationsInterfaces";
import * as coreClient from "@azure/core-client";
import * as Mappers from "../models/mappers";
import * as Parameters from "../models/parameters";
import { StorageCacheManagementClient } from "../storageCacheManagementClient";
import {
  SimplePollerLike,
  OperationState,
  createHttpPoller
} from "@azure/core-lro";
import { createLroSpec } from "../lroImpl";
import {
  AmlFilesystem,
  AmlFilesystemsListNextOptionalParams,
  AmlFilesystemsListOptionalParams,
  AmlFilesystemsListResponse,
  AmlFilesystemsListByResourceGroupNextOptionalParams,
  AmlFilesystemsListByResourceGroupOptionalParams,
  AmlFilesystemsListByResourceGroupResponse,
  AmlFilesystemsDeleteOptionalParams,
  AmlFilesystemsGetOptionalParams,
  AmlFilesystemsGetResponse,
  AmlFilesystemsCreateOrUpdateOptionalParams,
  AmlFilesystemsCreateOrUpdateResponse,
  AmlFilesystemUpdate,
  AmlFilesystemsUpdateOptionalParams,
  AmlFilesystemsUpdateResponse,
  AmlFilesystemsArchiveOptionalParams,
  AmlFilesystemsCancelArchiveOptionalParams,
  AmlFilesystemsListNextResponse,
  AmlFilesystemsListByResourceGroupNextResponse
} from "../models";

/// <reference lib="esnext.asynciterable" />
/** Class containing AmlFilesystems operations. */
export class AmlFilesystemsImpl implements AmlFilesystems {
  private readonly client: StorageCacheManagementClient;

  /**
   * Initialize a new instance of the class AmlFilesystems class.
   * @param client Reference to the service client
   */
  constructor(client: StorageCacheManagementClient) {
    this.client = client;
  }

  /**
   * Returns all AML file systems the user has access to under a subscription.
   * @param options The options parameters.
   */
  public list(
    options?: AmlFilesystemsListOptionalParams
  ): PagedAsyncIterableIterator<AmlFilesystem> {
    const iter = this.listPagingAll(options);
    return {
      next() {
        return iter.next();
      },
      [Symbol.asyncIterator]() {
        return this;
      },
      byPage: (settings?: PageSettings) => {
        if (settings?.maxPageSize) {
          throw new Error("maxPageSize is not supported by this operation.");
        }
        return this.listPagingPage(options, settings);
      }
    };
  }

  private async *listPagingPage(
    options?: AmlFilesystemsListOptionalParams,
    settings?: PageSettings
  ): AsyncIterableIterator<AmlFilesystem[]> {
    let result: AmlFilesystemsListResponse;
    let continuationToken = settings?.continuationToken;
    if (!continuationToken) {
      result = await this._list(options);
      let page = result.value || [];
      continuationToken = result.nextLink;
      setContinuationToken(page, continuationToken);
      yield page;
    }
    while (continuationToken) {
      result = await this._listNext(continuationToken, options);
      continuationToken = result.nextLink;
      let page = result.value || [];
      setContinuationToken(page, continuationToken);
      yield page;
    }
  }

  private async *listPagingAll(
    options?: AmlFilesystemsListOptionalParams
  ): AsyncIterableIterator<AmlFilesystem> {
    for await (const page of this.listPagingPage(options)) {
      yield* page;
    }
  }

  /**
   * Returns all AML file systems the user has access to under a resource group.
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param options The options parameters.
   */
  public listByResourceGroup(
    resourceGroupName: string,
    options?: AmlFilesystemsListByResourceGroupOptionalParams
  ): PagedAsyncIterableIterator<AmlFilesystem> {
    const iter = this.listByResourceGroupPagingAll(resourceGroupName, options);
    return {
      next() {
        return iter.next();
      },
      [Symbol.asyncIterator]() {
        return this;
      },
      byPage: (settings?: PageSettings) => {
        if (settings?.maxPageSize) {
          throw new Error("maxPageSize is not supported by this operation.");
        }
        return this.listByResourceGroupPagingPage(
          resourceGroupName,
          options,
          settings
        );
      }
    };
  }

  private async *listByResourceGroupPagingPage(
    resourceGroupName: string,
    options?: AmlFilesystemsListByResourceGroupOptionalParams,
    settings?: PageSettings
  ): AsyncIterableIterator<AmlFilesystem[]> {
    let result: AmlFilesystemsListByResourceGroupResponse;
    let continuationToken = settings?.continuationToken;
    if (!continuationToken) {
      result = await this._listByResourceGroup(resourceGroupName, options);
      let page = result.value || [];
      continuationToken = result.nextLink;
      setContinuationToken(page, continuationToken);
      yield page;
    }
    while (continuationToken) {
      result = await this._listByResourceGroupNext(
        resourceGroupName,
        continuationToken,
        options
      );
      continuationToken = result.nextLink;
      let page = result.value || [];
      setContinuationToken(page, continuationToken);
      yield page;
    }
  }

  private async *listByResourceGroupPagingAll(
    resourceGroupName: string,
    options?: AmlFilesystemsListByResourceGroupOptionalParams
  ): AsyncIterableIterator<AmlFilesystem> {
    for await (const page of this.listByResourceGroupPagingPage(
      resourceGroupName,
      options
    )) {
      yield* page;
    }
  }

  /**
   * Returns all AML file systems the user has access to under a subscription.
   * @param options The options parameters.
   */
  private _list(
    options?: AmlFilesystemsListOptionalParams
  ): Promise<AmlFilesystemsListResponse> {
    return this.client.sendOperationRequest({ options }, listOperationSpec);
  }

  /**
   * Returns all AML file systems the user has access to under a resource group.
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param options The options parameters.
   */
  private _listByResourceGroup(
    resourceGroupName: string,
    options?: AmlFilesystemsListByResourceGroupOptionalParams
  ): Promise<AmlFilesystemsListByResourceGroupResponse> {
    return this.client.sendOperationRequest(
      { resourceGroupName, options },
      listByResourceGroupOperationSpec
    );
  }

  /**
   * Schedules an AML file system for deletion.
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param amlFilesystemName Name for the AML file system. Allows alphanumerics, underscores, and
   *                          hyphens. Start and end with alphanumeric.
   * @param options The options parameters.
   */
  async beginDelete(
    resourceGroupName: string,
    amlFilesystemName: string,
    options?: AmlFilesystemsDeleteOptionalParams
  ): Promise<SimplePollerLike<OperationState<void>, void>> {
    const directSendOperation = async (
      args: coreClient.OperationArguments,
      spec: coreClient.OperationSpec
    ): Promise<void> => {
      return this.client.sendOperationRequest(args, spec);
    };
    const sendOperationFn = async (
      args: coreClient.OperationArguments,
      spec: coreClient.OperationSpec
    ) => {
      let currentRawResponse:
        | coreClient.FullOperationResponse
        | undefined = undefined;
      const providedCallback = args.options?.onResponse;
      const callback: coreClient.RawResponseCallback = (
        rawResponse: coreClient.FullOperationResponse,
        flatResponse: unknown
      ) => {
        currentRawResponse = rawResponse;
        providedCallback?.(rawResponse, flatResponse);
      };
      const updatedArgs = {
        ...args,
        options: {
          ...args.options,
          onResponse: callback
        }
      };
      const flatResponse = await directSendOperation(updatedArgs, spec);
      return {
        flatResponse,
        rawResponse: {
          statusCode: currentRawResponse!.status,
          body: currentRawResponse!.parsedBody,
          headers: currentRawResponse!.headers.toJSON()
        }
      };
    };

    const lro = createLroSpec({
      sendOperationFn,
      args: { resourceGroupName, amlFilesystemName, options },
      spec: deleteOperationSpec
    });
    const poller = await createHttpPoller<void, OperationState<void>>(lro, {
      restoreFrom: options?.resumeFrom,
      intervalInMs: options?.updateIntervalInMs,
      resourceLocationConfig: "location"
    });
    await poller.poll();
    return poller;
  }

  /**
   * Schedules an AML file system for deletion.
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param amlFilesystemName Name for the AML file system. Allows alphanumerics, underscores, and
   *                          hyphens. Start and end with alphanumeric.
   * @param options The options parameters.
   */
  async beginDeleteAndWait(
    resourceGroupName: string,
    amlFilesystemName: string,
    options?: AmlFilesystemsDeleteOptionalParams
  ): Promise<void> {
    const poller = await this.beginDelete(
      resourceGroupName,
      amlFilesystemName,
      options
    );
    return poller.pollUntilDone();
  }

  /**
   * Returns an AML file system.
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param amlFilesystemName Name for the AML file system. Allows alphanumerics, underscores, and
   *                          hyphens. Start and end with alphanumeric.
   * @param options The options parameters.
   */
  get(
    resourceGroupName: string,
    amlFilesystemName: string,
    options?: AmlFilesystemsGetOptionalParams
  ): Promise<AmlFilesystemsGetResponse> {
    return this.client.sendOperationRequest(
      { resourceGroupName, amlFilesystemName, options },
      getOperationSpec
    );
  }

  /**
   * Create or update an AML file system.
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param amlFilesystemName Name for the AML file system. Allows alphanumerics, underscores, and
   *                          hyphens. Start and end with alphanumeric.
   * @param amlFilesystem Object containing the user-selectable properties of the AML file system. If
   *                      read-only properties are included, they must match the existing values of those properties.
   * @param options The options parameters.
   */
  async beginCreateOrUpdate(
    resourceGroupName: string,
    amlFilesystemName: string,
    amlFilesystem: AmlFilesystem,
    options?: AmlFilesystemsCreateOrUpdateOptionalParams
  ): Promise<
    SimplePollerLike<
      OperationState<AmlFilesystemsCreateOrUpdateResponse>,
      AmlFilesystemsCreateOrUpdateResponse
    >
  > {
    const directSendOperation = async (
      args: coreClient.OperationArguments,
      spec: coreClient.OperationSpec
    ): Promise<AmlFilesystemsCreateOrUpdateResponse> => {
      return this.client.sendOperationRequest(args, spec);
    };
    const sendOperationFn = async (
      args: coreClient.OperationArguments,
      spec: coreClient.OperationSpec
    ) => {
      let currentRawResponse:
        | coreClient.FullOperationResponse
        | undefined = undefined;
      const providedCallback = args.options?.onResponse;
      const callback: coreClient.RawResponseCallback = (
        rawResponse: coreClient.FullOperationResponse,
        flatResponse: unknown
      ) => {
        currentRawResponse = rawResponse;
        providedCallback?.(rawResponse, flatResponse);
      };
      const updatedArgs = {
        ...args,
        options: {
          ...args.options,
          onResponse: callback
        }
      };
      const flatResponse = await directSendOperation(updatedArgs, spec);
      return {
        flatResponse,
        rawResponse: {
          statusCode: currentRawResponse!.status,
          body: currentRawResponse!.parsedBody,
          headers: currentRawResponse!.headers.toJSON()
        }
      };
    };

    const lro = createLroSpec({
      sendOperationFn,
      args: { resourceGroupName, amlFilesystemName, amlFilesystem, options },
      spec: createOrUpdateOperationSpec
    });
    const poller = await createHttpPoller<
      AmlFilesystemsCreateOrUpdateResponse,
      OperationState<AmlFilesystemsCreateOrUpdateResponse>
    >(lro, {
      restoreFrom: options?.resumeFrom,
      intervalInMs: options?.updateIntervalInMs,
      resourceLocationConfig: "azure-async-operation"
    });
    await poller.poll();
    return poller;
  }

  /**
   * Create or update an AML file system.
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param amlFilesystemName Name for the AML file system. Allows alphanumerics, underscores, and
   *                          hyphens. Start and end with alphanumeric.
   * @param amlFilesystem Object containing the user-selectable properties of the AML file system. If
   *                      read-only properties are included, they must match the existing values of those properties.
   * @param options The options parameters.
   */
  async beginCreateOrUpdateAndWait(
    resourceGroupName: string,
    amlFilesystemName: string,
    amlFilesystem: AmlFilesystem,
    options?: AmlFilesystemsCreateOrUpdateOptionalParams
  ): Promise<AmlFilesystemsCreateOrUpdateResponse> {
    const poller = await this.beginCreateOrUpdate(
      resourceGroupName,
      amlFilesystemName,
      amlFilesystem,
      options
    );
    return poller.pollUntilDone();
  }

  /**
   * Update an AML file system instance.
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param amlFilesystemName Name for the AML file system. Allows alphanumerics, underscores, and
   *                          hyphens. Start and end with alphanumeric.
   * @param amlFilesystem Object containing the user-selectable properties of the AML file system. If
   *                      read-only properties are included, they must match the existing values of those properties.
   * @param options The options parameters.
   */
  async beginUpdate(
    resourceGroupName: string,
    amlFilesystemName: string,
    amlFilesystem: AmlFilesystemUpdate,
    options?: AmlFilesystemsUpdateOptionalParams
  ): Promise<
    SimplePollerLike<
      OperationState<AmlFilesystemsUpdateResponse>,
      AmlFilesystemsUpdateResponse
    >
  > {
    const directSendOperation = async (
      args: coreClient.OperationArguments,
      spec: coreClient.OperationSpec
    ): Promise<AmlFilesystemsUpdateResponse> => {
      return this.client.sendOperationRequest(args, spec);
    };
    const sendOperationFn = async (
      args: coreClient.OperationArguments,
      spec: coreClient.OperationSpec
    ) => {
      let currentRawResponse:
        | coreClient.FullOperationResponse
        | undefined = undefined;
      const providedCallback = args.options?.onResponse;
      const callback: coreClient.RawResponseCallback = (
        rawResponse: coreClient.FullOperationResponse,
        flatResponse: unknown
      ) => {
        currentRawResponse = rawResponse;
        providedCallback?.(rawResponse, flatResponse);
      };
      const updatedArgs = {
        ...args,
        options: {
          ...args.options,
          onResponse: callback
        }
      };
      const flatResponse = await directSendOperation(updatedArgs, spec);
      return {
        flatResponse,
        rawResponse: {
          statusCode: currentRawResponse!.status,
          body: currentRawResponse!.parsedBody,
          headers: currentRawResponse!.headers.toJSON()
        }
      };
    };

    const lro = createLroSpec({
      sendOperationFn,
      args: { resourceGroupName, amlFilesystemName, amlFilesystem, options },
      spec: updateOperationSpec
    });
    const poller = await createHttpPoller<
      AmlFilesystemsUpdateResponse,
      OperationState<AmlFilesystemsUpdateResponse>
    >(lro, {
      restoreFrom: options?.resumeFrom,
      intervalInMs: options?.updateIntervalInMs,
      resourceLocationConfig: "azure-async-operation"
    });
    await poller.poll();
    return poller;
  }

  /**
   * Update an AML file system instance.
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param amlFilesystemName Name for the AML file system. Allows alphanumerics, underscores, and
   *                          hyphens. Start and end with alphanumeric.
   * @param amlFilesystem Object containing the user-selectable properties of the AML file system. If
   *                      read-only properties are included, they must match the existing values of those properties.
   * @param options The options parameters.
   */
  async beginUpdateAndWait(
    resourceGroupName: string,
    amlFilesystemName: string,
    amlFilesystem: AmlFilesystemUpdate,
    options?: AmlFilesystemsUpdateOptionalParams
  ): Promise<AmlFilesystemsUpdateResponse> {
    const poller = await this.beginUpdate(
      resourceGroupName,
      amlFilesystemName,
      amlFilesystem,
      options
    );
    return poller.pollUntilDone();
  }

  /**
   * Archive data from the AML file system.
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param amlFilesystemName Name for the AML file system. Allows alphanumerics, underscores, and
   *                          hyphens. Start and end with alphanumeric.
   * @param options The options parameters.
   */
  archive(
    resourceGroupName: string,
    amlFilesystemName: string,
    options?: AmlFilesystemsArchiveOptionalParams
  ): Promise<void> {
    return this.client.sendOperationRequest(
      { resourceGroupName, amlFilesystemName, options },
      archiveOperationSpec
    );
  }

  /**
   * Cancel archiving data from the AML file system.
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param amlFilesystemName Name for the AML file system. Allows alphanumerics, underscores, and
   *                          hyphens. Start and end with alphanumeric.
   * @param options The options parameters.
   */
  cancelArchive(
    resourceGroupName: string,
    amlFilesystemName: string,
    options?: AmlFilesystemsCancelArchiveOptionalParams
  ): Promise<void> {
    return this.client.sendOperationRequest(
      { resourceGroupName, amlFilesystemName, options },
      cancelArchiveOperationSpec
    );
  }

  /**
   * ListNext
   * @param nextLink The nextLink from the previous successful call to the List method.
   * @param options The options parameters.
   */
  private _listNext(
    nextLink: string,
    options?: AmlFilesystemsListNextOptionalParams
  ): Promise<AmlFilesystemsListNextResponse> {
    return this.client.sendOperationRequest(
      { nextLink, options },
      listNextOperationSpec
    );
  }

  /**
   * ListByResourceGroupNext
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param nextLink The nextLink from the previous successful call to the ListByResourceGroup method.
   * @param options The options parameters.
   */
  private _listByResourceGroupNext(
    resourceGroupName: string,
    nextLink: string,
    options?: AmlFilesystemsListByResourceGroupNextOptionalParams
  ): Promise<AmlFilesystemsListByResourceGroupNextResponse> {
    return this.client.sendOperationRequest(
      { resourceGroupName, nextLink, options },
      listByResourceGroupNextOperationSpec
    );
  }
}
// Operation Specifications
const serializer = coreClient.createSerializer(Mappers, /* isXml */ false);

const listOperationSpec: coreClient.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/providers/Microsoft.StorageCache/amlFilesystems",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.AmlFilesystemsListResult
    },
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [Parameters.$host, Parameters.subscriptionId],
  headerParameters: [Parameters.accept],
  serializer
};
const listByResourceGroupOperationSpec: coreClient.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.StorageCache/amlFilesystems",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.AmlFilesystemsListResult
    },
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName
  ],
  headerParameters: [Parameters.accept],
  serializer
};
const deleteOperationSpec: coreClient.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.StorageCache/amlFilesystems/{amlFilesystemName}",
  httpMethod: "DELETE",
  responses: {
    200: {},
    201: {},
    202: {},
    204: {},
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.amlFilesystemName
  ],
  headerParameters: [Parameters.accept],
  serializer
};
const getOperationSpec: coreClient.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.StorageCache/amlFilesystems/{amlFilesystemName}",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.AmlFilesystem
    },
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.amlFilesystemName
  ],
  headerParameters: [Parameters.accept],
  serializer
};
const createOrUpdateOperationSpec: coreClient.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.StorageCache/amlFilesystems/{amlFilesystemName}",
  httpMethod: "PUT",
  responses: {
    200: {
      bodyMapper: Mappers.AmlFilesystem
    },
    201: {
      bodyMapper: Mappers.AmlFilesystem
    },
    202: {
      bodyMapper: Mappers.AmlFilesystem
    },
    204: {
      bodyMapper: Mappers.AmlFilesystem
    },
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  requestBody: Parameters.amlFilesystem,
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.amlFilesystemName
  ],
  headerParameters: [Parameters.accept, Parameters.contentType],
  mediaType: "json",
  serializer
};
const updateOperationSpec: coreClient.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.StorageCache/amlFilesystems/{amlFilesystemName}",
  httpMethod: "PATCH",
  responses: {
    200: {
      bodyMapper: Mappers.AmlFilesystem
    },
    201: {
      bodyMapper: Mappers.AmlFilesystem
    },
    202: {
      bodyMapper: Mappers.AmlFilesystem
    },
    204: {
      bodyMapper: Mappers.AmlFilesystem
    },
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  requestBody: Parameters.amlFilesystem1,
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.amlFilesystemName
  ],
  headerParameters: [Parameters.accept, Parameters.contentType],
  mediaType: "json",
  serializer
};
const archiveOperationSpec: coreClient.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.StorageCache/amlFilesystems/{amlFilesystemName}/archive",
  httpMethod: "POST",
  responses: {
    200: {},
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  requestBody: Parameters.archiveInfo,
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.amlFilesystemName
  ],
  headerParameters: [Parameters.accept, Parameters.contentType],
  mediaType: "json",
  serializer
};
const cancelArchiveOperationSpec: coreClient.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.StorageCache/amlFilesystems/{amlFilesystemName}/cancelArchive",
  httpMethod: "POST",
  responses: {
    200: {},
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.amlFilesystemName
  ],
  headerParameters: [Parameters.accept],
  serializer
};
const listNextOperationSpec: coreClient.OperationSpec = {
  path: "{nextLink}",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.AmlFilesystemsListResult
    },
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  urlParameters: [
    Parameters.$host,
    Parameters.nextLink,
    Parameters.subscriptionId
  ],
  headerParameters: [Parameters.accept],
  serializer
};
const listByResourceGroupNextOperationSpec: coreClient.OperationSpec = {
  path: "{nextLink}",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.AmlFilesystemsListResult
    },
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  urlParameters: [
    Parameters.$host,
    Parameters.nextLink,
    Parameters.subscriptionId,
    Parameters.resourceGroupName
  ],
  headerParameters: [Parameters.accept],
  serializer
};
