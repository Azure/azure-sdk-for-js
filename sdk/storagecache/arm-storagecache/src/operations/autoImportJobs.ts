// Copyright (c) Microsoft Corporation.
// Licensed under the MIT License.

// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is regenerated.

import { PagedAsyncIterableIterator, PageSettings } from "@azure/core-paging";
import { setContinuationToken } from "../pagingHelper.js";
import { AutoImportJobs } from "../operationsInterfaces/index.js";
import * as coreClient from "@azure/core-client";
import * as Mappers from "../models/mappers.js";
import * as Parameters from "../models/parameters.js";
import { StorageCacheManagementClient } from "../storageCacheManagementClient.js";
import { SimplePollerLike, OperationState, createHttpPoller } from "@azure/core-lro";
import { createLroSpec } from "../lroImpl.js";
import {
  AutoImportJob,
  AutoImportJobsListByAmlFilesystemNextOptionalParams,
  AutoImportJobsListByAmlFilesystemOptionalParams,
  AutoImportJobsListByAmlFilesystemResponse,
  AutoImportJobsDeleteOptionalParams,
  AutoImportJobsDeleteResponse,
  AutoImportJobsGetOptionalParams,
  AutoImportJobsGetResponse,
  AutoImportJobsCreateOrUpdateOptionalParams,
  AutoImportJobsCreateOrUpdateResponse,
  AutoImportJobUpdate,
  AutoImportJobsUpdateOptionalParams,
  AutoImportJobsUpdateResponse,
  AutoImportJobsListByAmlFilesystemNextResponse,
} from "../models/index.js";

/// <reference lib="esnext.asynciterable" />
/** Class containing AutoImportJobs operations. */
export class AutoImportJobsImpl implements AutoImportJobs {
  private readonly client: StorageCacheManagementClient;

  /**
   * Initialize a new instance of the class AutoImportJobs class.
   * @param client Reference to the service client
   */
  constructor(client: StorageCacheManagementClient) {
    this.client = client;
  }

  /**
   * Returns all the auto import jobs the user has access to under an AML File System.
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param amlFilesystemName Name for the AML file system. Allows alphanumerics, underscores, and
   *                          hyphens. Start and end with alphanumeric.
   * @param options The options parameters.
   */
  public listByAmlFilesystem(
    resourceGroupName: string,
    amlFilesystemName: string,
    options?: AutoImportJobsListByAmlFilesystemOptionalParams,
  ): PagedAsyncIterableIterator<AutoImportJob> {
    const iter = this.listByAmlFilesystemPagingAll(resourceGroupName, amlFilesystemName, options);
    return {
      next() {
        return iter.next();
      },
      [Symbol.asyncIterator]() {
        return this;
      },
      byPage: (settings?: PageSettings) => {
        if (settings?.maxPageSize) {
          throw new Error("maxPageSize is not supported by this operation.");
        }
        return this.listByAmlFilesystemPagingPage(
          resourceGroupName,
          amlFilesystemName,
          options,
          settings,
        );
      },
    };
  }

  private async *listByAmlFilesystemPagingPage(
    resourceGroupName: string,
    amlFilesystemName: string,
    options?: AutoImportJobsListByAmlFilesystemOptionalParams,
    settings?: PageSettings,
  ): AsyncIterableIterator<AutoImportJob[]> {
    let result: AutoImportJobsListByAmlFilesystemResponse;
    let continuationToken = settings?.continuationToken;
    if (!continuationToken) {
      result = await this._listByAmlFilesystem(resourceGroupName, amlFilesystemName, options);
      let page = result.value || [];
      continuationToken = result.nextLink;
      setContinuationToken(page, continuationToken);
      yield page;
    }
    while (continuationToken) {
      result = await this._listByAmlFilesystemNext(
        resourceGroupName,
        amlFilesystemName,
        continuationToken,
        options,
      );
      continuationToken = result.nextLink;
      let page = result.value || [];
      setContinuationToken(page, continuationToken);
      yield page;
    }
  }

  private async *listByAmlFilesystemPagingAll(
    resourceGroupName: string,
    amlFilesystemName: string,
    options?: AutoImportJobsListByAmlFilesystemOptionalParams,
  ): AsyncIterableIterator<AutoImportJob> {
    for await (const page of this.listByAmlFilesystemPagingPage(
      resourceGroupName,
      amlFilesystemName,
      options,
    )) {
      yield* page;
    }
  }

  /**
   * Schedules an auto import job for deletion.
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param amlFilesystemName Name for the AML file system. Allows alphanumerics, underscores, and
   *                          hyphens. Start and end with alphanumeric.
   * @param autoImportJobName Name for the auto import job. Allows alphanumerics, underscores, and
   *                          hyphens. Start and end with alphanumeric.
   * @param options The options parameters.
   */
  async beginDelete(
    resourceGroupName: string,
    amlFilesystemName: string,
    autoImportJobName: string,
    options?: AutoImportJobsDeleteOptionalParams,
  ): Promise<
    SimplePollerLike<OperationState<AutoImportJobsDeleteResponse>, AutoImportJobsDeleteResponse>
  > {
    const directSendOperation = async (
      args: coreClient.OperationArguments,
      spec: coreClient.OperationSpec,
    ): Promise<AutoImportJobsDeleteResponse> => {
      return this.client.sendOperationRequest(args, spec);
    };
    const sendOperationFn = async (
      args: coreClient.OperationArguments,
      spec: coreClient.OperationSpec,
    ) => {
      let currentRawResponse: coreClient.FullOperationResponse | undefined = undefined;
      const providedCallback = args.options?.onResponse;
      const callback: coreClient.RawResponseCallback = (
        rawResponse: coreClient.FullOperationResponse,
        flatResponse: unknown,
      ) => {
        currentRawResponse = rawResponse;
        providedCallback?.(rawResponse, flatResponse);
      };
      const updatedArgs = {
        ...args,
        options: {
          ...args.options,
          onResponse: callback,
        },
      };
      const flatResponse = await directSendOperation(updatedArgs, spec);
      return {
        flatResponse,
        rawResponse: {
          statusCode: currentRawResponse!.status,
          body: currentRawResponse!.parsedBody,
          headers: currentRawResponse!.headers.toJSON(),
        },
      };
    };

    const lro = createLroSpec({
      sendOperationFn,
      args: {
        resourceGroupName,
        amlFilesystemName,
        autoImportJobName,
        options,
      },
      spec: deleteOperationSpec,
    });
    const poller = await createHttpPoller<
      AutoImportJobsDeleteResponse,
      OperationState<AutoImportJobsDeleteResponse>
    >(lro, {
      restoreFrom: options?.resumeFrom,
      intervalInMs: options?.updateIntervalInMs,
      resourceLocationConfig: "location",
    });
    await poller.poll();
    return poller;
  }

  /**
   * Schedules an auto import job for deletion.
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param amlFilesystemName Name for the AML file system. Allows alphanumerics, underscores, and
   *                          hyphens. Start and end with alphanumeric.
   * @param autoImportJobName Name for the auto import job. Allows alphanumerics, underscores, and
   *                          hyphens. Start and end with alphanumeric.
   * @param options The options parameters.
   */
  async beginDeleteAndWait(
    resourceGroupName: string,
    amlFilesystemName: string,
    autoImportJobName: string,
    options?: AutoImportJobsDeleteOptionalParams,
  ): Promise<AutoImportJobsDeleteResponse> {
    const poller = await this.beginDelete(
      resourceGroupName,
      amlFilesystemName,
      autoImportJobName,
      options,
    );
    return poller.pollUntilDone();
  }

  /**
   * Returns an auto import job.
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param amlFilesystemName Name for the AML file system. Allows alphanumerics, underscores, and
   *                          hyphens. Start and end with alphanumeric.
   * @param autoImportJobName Name for the auto import job. Allows alphanumerics, underscores, and
   *                          hyphens. Start and end with alphanumeric.
   * @param options The options parameters.
   */
  get(
    resourceGroupName: string,
    amlFilesystemName: string,
    autoImportJobName: string,
    options?: AutoImportJobsGetOptionalParams,
  ): Promise<AutoImportJobsGetResponse> {
    return this.client.sendOperationRequest(
      { resourceGroupName, amlFilesystemName, autoImportJobName, options },
      getOperationSpec,
    );
  }

  /**
   * Create or update an auto import job.
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param amlFilesystemName Name for the AML file system. Allows alphanumerics, underscores, and
   *                          hyphens. Start and end with alphanumeric.
   * @param autoImportJobName Name for the auto import job. Allows alphanumerics, underscores, and
   *                          hyphens. Start and end with alphanumeric.
   * @param autoImportJob Object containing the user-selectable properties of the auto import job. If
   *                      read-only properties are included, they must match the existing values of those properties.
   * @param options The options parameters.
   */
  async beginCreateOrUpdate(
    resourceGroupName: string,
    amlFilesystemName: string,
    autoImportJobName: string,
    autoImportJob: AutoImportJob,
    options?: AutoImportJobsCreateOrUpdateOptionalParams,
  ): Promise<
    SimplePollerLike<
      OperationState<AutoImportJobsCreateOrUpdateResponse>,
      AutoImportJobsCreateOrUpdateResponse
    >
  > {
    const directSendOperation = async (
      args: coreClient.OperationArguments,
      spec: coreClient.OperationSpec,
    ): Promise<AutoImportJobsCreateOrUpdateResponse> => {
      return this.client.sendOperationRequest(args, spec);
    };
    const sendOperationFn = async (
      args: coreClient.OperationArguments,
      spec: coreClient.OperationSpec,
    ) => {
      let currentRawResponse: coreClient.FullOperationResponse | undefined = undefined;
      const providedCallback = args.options?.onResponse;
      const callback: coreClient.RawResponseCallback = (
        rawResponse: coreClient.FullOperationResponse,
        flatResponse: unknown,
      ) => {
        currentRawResponse = rawResponse;
        providedCallback?.(rawResponse, flatResponse);
      };
      const updatedArgs = {
        ...args,
        options: {
          ...args.options,
          onResponse: callback,
        },
      };
      const flatResponse = await directSendOperation(updatedArgs, spec);
      return {
        flatResponse,
        rawResponse: {
          statusCode: currentRawResponse!.status,
          body: currentRawResponse!.parsedBody,
          headers: currentRawResponse!.headers.toJSON(),
        },
      };
    };

    const lro = createLroSpec({
      sendOperationFn,
      args: {
        resourceGroupName,
        amlFilesystemName,
        autoImportJobName,
        autoImportJob,
        options,
      },
      spec: createOrUpdateOperationSpec,
    });
    const poller = await createHttpPoller<
      AutoImportJobsCreateOrUpdateResponse,
      OperationState<AutoImportJobsCreateOrUpdateResponse>
    >(lro, {
      restoreFrom: options?.resumeFrom,
      intervalInMs: options?.updateIntervalInMs,
      resourceLocationConfig: "azure-async-operation",
    });
    await poller.poll();
    return poller;
  }

  /**
   * Create or update an auto import job.
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param amlFilesystemName Name for the AML file system. Allows alphanumerics, underscores, and
   *                          hyphens. Start and end with alphanumeric.
   * @param autoImportJobName Name for the auto import job. Allows alphanumerics, underscores, and
   *                          hyphens. Start and end with alphanumeric.
   * @param autoImportJob Object containing the user-selectable properties of the auto import job. If
   *                      read-only properties are included, they must match the existing values of those properties.
   * @param options The options parameters.
   */
  async beginCreateOrUpdateAndWait(
    resourceGroupName: string,
    amlFilesystemName: string,
    autoImportJobName: string,
    autoImportJob: AutoImportJob,
    options?: AutoImportJobsCreateOrUpdateOptionalParams,
  ): Promise<AutoImportJobsCreateOrUpdateResponse> {
    const poller = await this.beginCreateOrUpdate(
      resourceGroupName,
      amlFilesystemName,
      autoImportJobName,
      autoImportJob,
      options,
    );
    return poller.pollUntilDone();
  }

  /**
   * Update an auto import job instance.
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param amlFilesystemName Name for the AML file system. Allows alphanumerics, underscores, and
   *                          hyphens. Start and end with alphanumeric.
   * @param autoImportJobName Name for the auto import job. Allows alphanumerics, underscores, and
   *                          hyphens. Start and end with alphanumeric.
   * @param autoImportJob Object containing the user-selectable properties of the auto import job. If
   *                      read-only properties are included, they must match the existing values of those properties.
   * @param options The options parameters.
   */
  async beginUpdate(
    resourceGroupName: string,
    amlFilesystemName: string,
    autoImportJobName: string,
    autoImportJob: AutoImportJobUpdate,
    options?: AutoImportJobsUpdateOptionalParams,
  ): Promise<
    SimplePollerLike<OperationState<AutoImportJobsUpdateResponse>, AutoImportJobsUpdateResponse>
  > {
    const directSendOperation = async (
      args: coreClient.OperationArguments,
      spec: coreClient.OperationSpec,
    ): Promise<AutoImportJobsUpdateResponse> => {
      return this.client.sendOperationRequest(args, spec);
    };
    const sendOperationFn = async (
      args: coreClient.OperationArguments,
      spec: coreClient.OperationSpec,
    ) => {
      let currentRawResponse: coreClient.FullOperationResponse | undefined = undefined;
      const providedCallback = args.options?.onResponse;
      const callback: coreClient.RawResponseCallback = (
        rawResponse: coreClient.FullOperationResponse,
        flatResponse: unknown,
      ) => {
        currentRawResponse = rawResponse;
        providedCallback?.(rawResponse, flatResponse);
      };
      const updatedArgs = {
        ...args,
        options: {
          ...args.options,
          onResponse: callback,
        },
      };
      const flatResponse = await directSendOperation(updatedArgs, spec);
      return {
        flatResponse,
        rawResponse: {
          statusCode: currentRawResponse!.status,
          body: currentRawResponse!.parsedBody,
          headers: currentRawResponse!.headers.toJSON(),
        },
      };
    };

    const lro = createLroSpec({
      sendOperationFn,
      args: {
        resourceGroupName,
        amlFilesystemName,
        autoImportJobName,
        autoImportJob,
        options,
      },
      spec: updateOperationSpec,
    });
    const poller = await createHttpPoller<
      AutoImportJobsUpdateResponse,
      OperationState<AutoImportJobsUpdateResponse>
    >(lro, {
      restoreFrom: options?.resumeFrom,
      intervalInMs: options?.updateIntervalInMs,
      resourceLocationConfig: "azure-async-operation",
    });
    await poller.poll();
    return poller;
  }

  /**
   * Update an auto import job instance.
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param amlFilesystemName Name for the AML file system. Allows alphanumerics, underscores, and
   *                          hyphens. Start and end with alphanumeric.
   * @param autoImportJobName Name for the auto import job. Allows alphanumerics, underscores, and
   *                          hyphens. Start and end with alphanumeric.
   * @param autoImportJob Object containing the user-selectable properties of the auto import job. If
   *                      read-only properties are included, they must match the existing values of those properties.
   * @param options The options parameters.
   */
  async beginUpdateAndWait(
    resourceGroupName: string,
    amlFilesystemName: string,
    autoImportJobName: string,
    autoImportJob: AutoImportJobUpdate,
    options?: AutoImportJobsUpdateOptionalParams,
  ): Promise<AutoImportJobsUpdateResponse> {
    const poller = await this.beginUpdate(
      resourceGroupName,
      amlFilesystemName,
      autoImportJobName,
      autoImportJob,
      options,
    );
    return poller.pollUntilDone();
  }

  /**
   * Returns all the auto import jobs the user has access to under an AML File System.
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param amlFilesystemName Name for the AML file system. Allows alphanumerics, underscores, and
   *                          hyphens. Start and end with alphanumeric.
   * @param options The options parameters.
   */
  private _listByAmlFilesystem(
    resourceGroupName: string,
    amlFilesystemName: string,
    options?: AutoImportJobsListByAmlFilesystemOptionalParams,
  ): Promise<AutoImportJobsListByAmlFilesystemResponse> {
    return this.client.sendOperationRequest(
      { resourceGroupName, amlFilesystemName, options },
      listByAmlFilesystemOperationSpec,
    );
  }

  /**
   * ListByAmlFilesystemNext
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param amlFilesystemName Name for the AML file system. Allows alphanumerics, underscores, and
   *                          hyphens. Start and end with alphanumeric.
   * @param nextLink The nextLink from the previous successful call to the ListByAmlFilesystem method.
   * @param options The options parameters.
   */
  private _listByAmlFilesystemNext(
    resourceGroupName: string,
    amlFilesystemName: string,
    nextLink: string,
    options?: AutoImportJobsListByAmlFilesystemNextOptionalParams,
  ): Promise<AutoImportJobsListByAmlFilesystemNextResponse> {
    return this.client.sendOperationRequest(
      { resourceGroupName, amlFilesystemName, nextLink, options },
      listByAmlFilesystemNextOperationSpec,
    );
  }
}
// Operation Specifications
const serializer = coreClient.createSerializer(Mappers, /* isXml */ false);

const deleteOperationSpec: coreClient.OperationSpec = {
  path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.StorageCache/amlFilesystems/{amlFilesystemName}/autoImportJobs/{autoImportJobName}",
  httpMethod: "DELETE",
  responses: {
    200: {
      headersMapper: Mappers.AutoImportJobsDeleteHeaders,
    },
    201: {
      headersMapper: Mappers.AutoImportJobsDeleteHeaders,
    },
    202: {
      headersMapper: Mappers.AutoImportJobsDeleteHeaders,
    },
    204: {
      headersMapper: Mappers.AutoImportJobsDeleteHeaders,
    },
    default: {
      bodyMapper: Mappers.ErrorResponse,
    },
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.amlFilesystemName,
    Parameters.autoImportJobName,
  ],
  headerParameters: [Parameters.accept],
  serializer,
};
const getOperationSpec: coreClient.OperationSpec = {
  path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.StorageCache/amlFilesystems/{amlFilesystemName}/autoImportJobs/{autoImportJobName}",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.AutoImportJob,
    },
    default: {
      bodyMapper: Mappers.ErrorResponse,
    },
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.amlFilesystemName,
    Parameters.autoImportJobName,
  ],
  headerParameters: [Parameters.accept],
  serializer,
};
const createOrUpdateOperationSpec: coreClient.OperationSpec = {
  path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.StorageCache/amlFilesystems/{amlFilesystemName}/autoImportJobs/{autoImportJobName}",
  httpMethod: "PUT",
  responses: {
    200: {
      bodyMapper: Mappers.AutoImportJob,
    },
    201: {
      bodyMapper: Mappers.AutoImportJob,
    },
    202: {
      bodyMapper: Mappers.AutoImportJob,
    },
    204: {
      bodyMapper: Mappers.AutoImportJob,
    },
    default: {
      bodyMapper: Mappers.ErrorResponse,
    },
  },
  requestBody: Parameters.autoImportJob,
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.amlFilesystemName,
    Parameters.autoImportJobName,
  ],
  headerParameters: [Parameters.accept, Parameters.contentType],
  mediaType: "json",
  serializer,
};
const updateOperationSpec: coreClient.OperationSpec = {
  path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.StorageCache/amlFilesystems/{amlFilesystemName}/autoImportJobs/{autoImportJobName}",
  httpMethod: "PATCH",
  responses: {
    200: {
      bodyMapper: Mappers.AutoImportJob,
    },
    201: {
      bodyMapper: Mappers.AutoImportJob,
    },
    202: {
      bodyMapper: Mappers.AutoImportJob,
    },
    204: {
      bodyMapper: Mappers.AutoImportJob,
    },
    default: {
      bodyMapper: Mappers.ErrorResponse,
    },
  },
  requestBody: Parameters.autoImportJob1,
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.amlFilesystemName,
    Parameters.autoImportJobName,
  ],
  headerParameters: [Parameters.accept, Parameters.contentType],
  mediaType: "json",
  serializer,
};
const listByAmlFilesystemOperationSpec: coreClient.OperationSpec = {
  path: "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.StorageCache/amlFilesystems/{amlFilesystemName}/autoImportJobs",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.AutoImportJobsListResult,
    },
    default: {
      bodyMapper: Mappers.CloudError,
    },
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.amlFilesystemName,
  ],
  headerParameters: [Parameters.accept],
  serializer,
};
const listByAmlFilesystemNextOperationSpec: coreClient.OperationSpec = {
  path: "{nextLink}",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.AutoImportJobsListResult,
    },
    default: {
      bodyMapper: Mappers.CloudError,
    },
  },
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.amlFilesystemName,
    Parameters.nextLink,
  ],
  headerParameters: [Parameters.accept],
  serializer,
};
