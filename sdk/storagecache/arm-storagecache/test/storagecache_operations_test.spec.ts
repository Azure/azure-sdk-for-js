/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */

import {
  env,
  Recorder,
  RecorderStartOptions,
  delay,
  isPlaybackMode,
} from "@azure-tools/test-recorder";
import { createTestCredential } from "@azure-tools/test-credential";
import { assert } from "chai";
import { Context } from "mocha";
import { StorageCacheManagementClient } from "../src/storageCacheManagementClient";

const replaceableVariables: Record<string, string> = {
  AZURE_CLIENT_ID: "azure_client_id",
  AZURE_CLIENT_SECRET: "azure_client_secret",
  AZURE_TENANT_ID: "88888888-8888-8888-8888-888888888888",
  SUBSCRIPTION_ID: "azure_subscription_id"
};

const recorderOptions: RecorderStartOptions = {
  envSetupForPlayback: replaceableVariables
};

export const testPollingOptions = {
  updateIntervalInMs: isPlaybackMode() ? 0 : undefined,
};

describe("StorageCache test", () => {
  let recorder: Recorder;
  let subscriptionId: string;
  let client: StorageCacheManagementClient;
  let location: string;
  let resourceGroup: string;
  let resourcename: string;

  beforeEach(async function (this: Context) {
    recorder = new Recorder(this.currentTest);
    await recorder.start(recorderOptions);
    subscriptionId = env.SUBSCRIPTION_ID || '';
    // This is an example of how the environment variables are used
    const credential = createTestCredential();
    client = new StorageCacheManagementClient(credential, subscriptionId, recorder.configureClientOptions({}));
    location = "eastus";
    resourceGroup = "myjstest";
    resourcename = "resourcetest";
  });

  afterEach(async function () {
    await recorder.stop();
  });

  it("caches create test", async function () {
    const res = await client.caches.beginCreateOrUpdateAndWait(
      resourceGroup,
      resourcename,
      {
        cacheSizeGB: 3072,
        directoryServicesSettings: {
          activeDirectory: {
            cacheNetBiosName: "contosoSmb",
            credentials: { password: "<password>", username: "consotoAdmin" },
            domainName: "contosoAd.contoso.local",
            domainNetBiosName: "contosoAd",
            primaryDnsIpAddress: "10.0.2.1",
            secondaryDnsIpAddress: "10.0.2.2"
          },
          usernameDownload: {
            credentials: {
              bindDn: "cn=ldapadmin,dc=contosoad,dc=contoso,dc=local",
              bindPassword: "<bindPassword>"
            },
            extendedGroups: true,
            ldapBaseDN: "dc=contosoad,dc=contoso,dc=local",
            ldapServer: "10.0.2.3",
            usernameSource: "LDAP"
          }
        },
        location,
        scalingFactor: 1,
        securitySettings: {
          accessPolicies: [
            {
              name: "default",
              accessRules: [
                {
                  access: "rw",
                  rootSquash: false,
                  scope: "default",
                  submountAccess: true,
                  suid: false
                }
              ]
            }
          ]
        },
        sku: { name: "Standard_2G" },
        subnet:
          "/subscriptions/" + subscriptionId + "/resourceGroups/" + resourceGroup + "/providers/Microsoft.Network/virtualNetworks/scvnet/subnets/sub1",
        tags: { dept: "Contoso" },
        zones: ["1"]
      },
      testPollingOptions);
  });

  it("caches get test", async function () {
    const res = await client.caches.get(resourceGroup, resourcename);
    assert.equal(res.name, resourcename);
  });

  it("caches list test", async function () {
    const resArray = new Array();
    for await (let item of client.caches.listByResourceGroup(resourceGroup)) {
      resArray.push(item);
    }
    assert.equal(resArray.length, 1);
  });

  it("caches delete test", async function () {
    const resArray = new Array();
    const res = await client.caches.beginDeleteAndWait(resourceGroup, resourcename)
    for await (let item of client.caches.listByResourceGroup(resourceGroup)) {
      resArray.push(item);
    }
    assert.equal(resArray.length, 0);
  });
})
