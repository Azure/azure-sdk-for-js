/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */

import { PagedAsyncIterableIterator, PageSettings } from "@azure/core-paging";
import { Devices } from "../operationsInterfaces";
import * as coreClient from "@azure/core-client";
import * as Mappers from "../models/mappers";
import * as Parameters from "../models/parameters";
import { StorSimple8000SeriesManagementClient } from "../storSimple8000SeriesManagementClient";
import { PollerLike, PollOperationState, LroEngine } from "@azure/core-lro";
import { LroImpl } from "../lroImpl";
import {
  Device,
  DevicesListByManagerOptionalParams,
  DevicesListByManagerResponse,
  FailoverSet,
  DevicesListFailoverSetsOptionalParams,
  DevicesListFailoverSetsResponse,
  Metrics,
  DevicesListMetricsOptionalParams,
  DevicesListMetricsResponse,
  MetricDefinition,
  DevicesListMetricDefinitionOptionalParams,
  DevicesListMetricDefinitionResponse,
  FailoverTarget,
  ListFailoverTargetsRequest,
  DevicesListFailoverTargetsOptionalParams,
  DevicesListFailoverTargetsResponse,
  ConfigureDeviceRequest,
  DevicesConfigureOptionalParams,
  DevicesGetOptionalParams,
  DevicesGetResponse,
  DevicesDeleteOptionalParams,
  DevicePatch,
  DevicesUpdateOptionalParams,
  DevicesUpdateResponse,
  DevicesAuthorizeForServiceEncryptionKeyRolloverOptionalParams,
  DevicesDeactivateOptionalParams,
  DevicesInstallUpdatesOptionalParams,
  DevicesScanForUpdatesOptionalParams,
  DevicesGetUpdateSummaryOptionalParams,
  DevicesGetUpdateSummaryResponse,
  FailoverRequest,
  DevicesFailoverOptionalParams
} from "../models";

/// <reference lib="esnext.asynciterable" />
/** Class containing Devices operations. */
export class DevicesImpl implements Devices {
  private readonly client: StorSimple8000SeriesManagementClient;

  /**
   * Initialize a new instance of the class Devices class.
   * @param client Reference to the service client
   */
  constructor(client: StorSimple8000SeriesManagementClient) {
    this.client = client;
  }

  /**
   * Returns the list of devices for the specified manager.
   * @param resourceGroupName The resource group name
   * @param managerName The manager name
   * @param options The options parameters.
   */
  public listByManager(
    resourceGroupName: string,
    managerName: string,
    options?: DevicesListByManagerOptionalParams
  ): PagedAsyncIterableIterator<Device> {
    const iter = this.listByManagerPagingAll(
      resourceGroupName,
      managerName,
      options
    );
    return {
      next() {
        return iter.next();
      },
      [Symbol.asyncIterator]() {
        return this;
      },
      byPage: (settings?: PageSettings) => {
        if (settings?.maxPageSize) {
          throw new Error("maxPageSize is not supported by this operation.");
        }
        return this.listByManagerPagingPage(
          resourceGroupName,
          managerName,
          options,
          settings
        );
      }
    };
  }

  private async *listByManagerPagingPage(
    resourceGroupName: string,
    managerName: string,
    options?: DevicesListByManagerOptionalParams,
    _settings?: PageSettings
  ): AsyncIterableIterator<Device[]> {
    let result: DevicesListByManagerResponse;
    result = await this._listByManager(resourceGroupName, managerName, options);
    yield result.value || [];
  }

  private async *listByManagerPagingAll(
    resourceGroupName: string,
    managerName: string,
    options?: DevicesListByManagerOptionalParams
  ): AsyncIterableIterator<Device> {
    for await (const page of this.listByManagerPagingPage(
      resourceGroupName,
      managerName,
      options
    )) {
      yield* page;
    }
  }

  /**
   * Returns all failover sets for a given device and their eligibility for participating in a failover.
   * A failover set refers to a set of volume containers that need to be failed-over as a single unit to
   * maintain data integrity.
   * @param deviceName The device name
   * @param resourceGroupName The resource group name
   * @param managerName The manager name
   * @param options The options parameters.
   */
  public listFailoverSets(
    deviceName: string,
    resourceGroupName: string,
    managerName: string,
    options?: DevicesListFailoverSetsOptionalParams
  ): PagedAsyncIterableIterator<FailoverSet> {
    const iter = this.listFailoverSetsPagingAll(
      deviceName,
      resourceGroupName,
      managerName,
      options
    );
    return {
      next() {
        return iter.next();
      },
      [Symbol.asyncIterator]() {
        return this;
      },
      byPage: (settings?: PageSettings) => {
        if (settings?.maxPageSize) {
          throw new Error("maxPageSize is not supported by this operation.");
        }
        return this.listFailoverSetsPagingPage(
          deviceName,
          resourceGroupName,
          managerName,
          options,
          settings
        );
      }
    };
  }

  private async *listFailoverSetsPagingPage(
    deviceName: string,
    resourceGroupName: string,
    managerName: string,
    options?: DevicesListFailoverSetsOptionalParams,
    _settings?: PageSettings
  ): AsyncIterableIterator<FailoverSet[]> {
    let result: DevicesListFailoverSetsResponse;
    result = await this._listFailoverSets(
      deviceName,
      resourceGroupName,
      managerName,
      options
    );
    yield result.value || [];
  }

  private async *listFailoverSetsPagingAll(
    deviceName: string,
    resourceGroupName: string,
    managerName: string,
    options?: DevicesListFailoverSetsOptionalParams
  ): AsyncIterableIterator<FailoverSet> {
    for await (const page of this.listFailoverSetsPagingPage(
      deviceName,
      resourceGroupName,
      managerName,
      options
    )) {
      yield* page;
    }
  }

  /**
   * Gets the metrics for the specified device.
   * @param deviceName The device name
   * @param resourceGroupName The resource group name
   * @param managerName The manager name
   * @param filter OData Filter options
   * @param options The options parameters.
   */
  public listMetrics(
    deviceName: string,
    resourceGroupName: string,
    managerName: string,
    filter: string,
    options?: DevicesListMetricsOptionalParams
  ): PagedAsyncIterableIterator<Metrics> {
    const iter = this.listMetricsPagingAll(
      deviceName,
      resourceGroupName,
      managerName,
      filter,
      options
    );
    return {
      next() {
        return iter.next();
      },
      [Symbol.asyncIterator]() {
        return this;
      },
      byPage: (settings?: PageSettings) => {
        if (settings?.maxPageSize) {
          throw new Error("maxPageSize is not supported by this operation.");
        }
        return this.listMetricsPagingPage(
          deviceName,
          resourceGroupName,
          managerName,
          filter,
          options,
          settings
        );
      }
    };
  }

  private async *listMetricsPagingPage(
    deviceName: string,
    resourceGroupName: string,
    managerName: string,
    filter: string,
    options?: DevicesListMetricsOptionalParams,
    _settings?: PageSettings
  ): AsyncIterableIterator<Metrics[]> {
    let result: DevicesListMetricsResponse;
    result = await this._listMetrics(
      deviceName,
      resourceGroupName,
      managerName,
      filter,
      options
    );
    yield result.value || [];
  }

  private async *listMetricsPagingAll(
    deviceName: string,
    resourceGroupName: string,
    managerName: string,
    filter: string,
    options?: DevicesListMetricsOptionalParams
  ): AsyncIterableIterator<Metrics> {
    for await (const page of this.listMetricsPagingPage(
      deviceName,
      resourceGroupName,
      managerName,
      filter,
      options
    )) {
      yield* page;
    }
  }

  /**
   * Gets the metric definitions for the specified device.
   * @param deviceName The device name
   * @param resourceGroupName The resource group name
   * @param managerName The manager name
   * @param options The options parameters.
   */
  public listMetricDefinition(
    deviceName: string,
    resourceGroupName: string,
    managerName: string,
    options?: DevicesListMetricDefinitionOptionalParams
  ): PagedAsyncIterableIterator<MetricDefinition> {
    const iter = this.listMetricDefinitionPagingAll(
      deviceName,
      resourceGroupName,
      managerName,
      options
    );
    return {
      next() {
        return iter.next();
      },
      [Symbol.asyncIterator]() {
        return this;
      },
      byPage: (settings?: PageSettings) => {
        if (settings?.maxPageSize) {
          throw new Error("maxPageSize is not supported by this operation.");
        }
        return this.listMetricDefinitionPagingPage(
          deviceName,
          resourceGroupName,
          managerName,
          options,
          settings
        );
      }
    };
  }

  private async *listMetricDefinitionPagingPage(
    deviceName: string,
    resourceGroupName: string,
    managerName: string,
    options?: DevicesListMetricDefinitionOptionalParams,
    _settings?: PageSettings
  ): AsyncIterableIterator<MetricDefinition[]> {
    let result: DevicesListMetricDefinitionResponse;
    result = await this._listMetricDefinition(
      deviceName,
      resourceGroupName,
      managerName,
      options
    );
    yield result.value || [];
  }

  private async *listMetricDefinitionPagingAll(
    deviceName: string,
    resourceGroupName: string,
    managerName: string,
    options?: DevicesListMetricDefinitionOptionalParams
  ): AsyncIterableIterator<MetricDefinition> {
    for await (const page of this.listMetricDefinitionPagingPage(
      deviceName,
      resourceGroupName,
      managerName,
      options
    )) {
      yield* page;
    }
  }

  /**
   * Given a list of volume containers to be failed over from a source device, this method returns the
   * eligibility result, as a failover target, for all devices under that resource.
   * @param sourceDeviceName The source device name on which failover is performed.
   * @param resourceGroupName The resource group name
   * @param managerName The manager name
   * @param parameters ListFailoverTargetsRequest containing the list of volume containers to be failed
   *                   over.
   * @param options The options parameters.
   */
  public listFailoverTargets(
    sourceDeviceName: string,
    resourceGroupName: string,
    managerName: string,
    parameters: ListFailoverTargetsRequest,
    options?: DevicesListFailoverTargetsOptionalParams
  ): PagedAsyncIterableIterator<FailoverTarget> {
    const iter = this.listFailoverTargetsPagingAll(
      sourceDeviceName,
      resourceGroupName,
      managerName,
      parameters,
      options
    );
    return {
      next() {
        return iter.next();
      },
      [Symbol.asyncIterator]() {
        return this;
      },
      byPage: (settings?: PageSettings) => {
        if (settings?.maxPageSize) {
          throw new Error("maxPageSize is not supported by this operation.");
        }
        return this.listFailoverTargetsPagingPage(
          sourceDeviceName,
          resourceGroupName,
          managerName,
          parameters,
          options,
          settings
        );
      }
    };
  }

  private async *listFailoverTargetsPagingPage(
    sourceDeviceName: string,
    resourceGroupName: string,
    managerName: string,
    parameters: ListFailoverTargetsRequest,
    options?: DevicesListFailoverTargetsOptionalParams,
    _settings?: PageSettings
  ): AsyncIterableIterator<FailoverTarget[]> {
    let result: DevicesListFailoverTargetsResponse;
    result = await this._listFailoverTargets(
      sourceDeviceName,
      resourceGroupName,
      managerName,
      parameters,
      options
    );
    yield result.value || [];
  }

  private async *listFailoverTargetsPagingAll(
    sourceDeviceName: string,
    resourceGroupName: string,
    managerName: string,
    parameters: ListFailoverTargetsRequest,
    options?: DevicesListFailoverTargetsOptionalParams
  ): AsyncIterableIterator<FailoverTarget> {
    for await (const page of this.listFailoverTargetsPagingPage(
      sourceDeviceName,
      resourceGroupName,
      managerName,
      parameters,
      options
    )) {
      yield* page;
    }
  }

  /**
   * Complete minimal setup before using the device.
   * @param resourceGroupName The resource group name
   * @param managerName The manager name
   * @param parameters The minimal properties to configure a device.
   * @param options The options parameters.
   */
  async beginConfigure(
    resourceGroupName: string,
    managerName: string,
    parameters: ConfigureDeviceRequest,
    options?: DevicesConfigureOptionalParams
  ): Promise<PollerLike<PollOperationState<void>, void>> {
    const directSendOperation = async (
      args: coreClient.OperationArguments,
      spec: coreClient.OperationSpec
    ): Promise<void> => {
      return this.client.sendOperationRequest(args, spec);
    };
    const sendOperation = async (
      args: coreClient.OperationArguments,
      spec: coreClient.OperationSpec
    ) => {
      let currentRawResponse:
        | coreClient.FullOperationResponse
        | undefined = undefined;
      const providedCallback = args.options?.onResponse;
      const callback: coreClient.RawResponseCallback = (
        rawResponse: coreClient.FullOperationResponse,
        flatResponse: unknown
      ) => {
        currentRawResponse = rawResponse;
        providedCallback?.(rawResponse, flatResponse);
      };
      const updatedArgs = {
        ...args,
        options: {
          ...args.options,
          onResponse: callback
        }
      };
      const flatResponse = await directSendOperation(updatedArgs, spec);
      return {
        flatResponse,
        rawResponse: {
          statusCode: currentRawResponse!.status,
          body: currentRawResponse!.parsedBody,
          headers: currentRawResponse!.headers.toJSON()
        }
      };
    };

    const lro = new LroImpl(
      sendOperation,
      { resourceGroupName, managerName, parameters, options },
      configureOperationSpec
    );
    const poller = new LroEngine(lro, {
      resumeFrom: options?.resumeFrom,
      intervalInMs: options?.updateIntervalInMs
    });
    await poller.poll();
    return poller;
  }

  /**
   * Complete minimal setup before using the device.
   * @param resourceGroupName The resource group name
   * @param managerName The manager name
   * @param parameters The minimal properties to configure a device.
   * @param options The options parameters.
   */
  async beginConfigureAndWait(
    resourceGroupName: string,
    managerName: string,
    parameters: ConfigureDeviceRequest,
    options?: DevicesConfigureOptionalParams
  ): Promise<void> {
    const poller = await this.beginConfigure(
      resourceGroupName,
      managerName,
      parameters,
      options
    );
    return poller.pollUntilDone();
  }

  /**
   * Returns the list of devices for the specified manager.
   * @param resourceGroupName The resource group name
   * @param managerName The manager name
   * @param options The options parameters.
   */
  private _listByManager(
    resourceGroupName: string,
    managerName: string,
    options?: DevicesListByManagerOptionalParams
  ): Promise<DevicesListByManagerResponse> {
    return this.client.sendOperationRequest(
      { resourceGroupName, managerName, options },
      listByManagerOperationSpec
    );
  }

  /**
   * Returns the properties of the specified device.
   * @param deviceName The device name
   * @param resourceGroupName The resource group name
   * @param managerName The manager name
   * @param options The options parameters.
   */
  get(
    deviceName: string,
    resourceGroupName: string,
    managerName: string,
    options?: DevicesGetOptionalParams
  ): Promise<DevicesGetResponse> {
    return this.client.sendOperationRequest(
      { deviceName, resourceGroupName, managerName, options },
      getOperationSpec
    );
  }

  /**
   * Deletes the device.
   * @param deviceName The device name
   * @param resourceGroupName The resource group name
   * @param managerName The manager name
   * @param options The options parameters.
   */
  async beginDelete(
    deviceName: string,
    resourceGroupName: string,
    managerName: string,
    options?: DevicesDeleteOptionalParams
  ): Promise<PollerLike<PollOperationState<void>, void>> {
    const directSendOperation = async (
      args: coreClient.OperationArguments,
      spec: coreClient.OperationSpec
    ): Promise<void> => {
      return this.client.sendOperationRequest(args, spec);
    };
    const sendOperation = async (
      args: coreClient.OperationArguments,
      spec: coreClient.OperationSpec
    ) => {
      let currentRawResponse:
        | coreClient.FullOperationResponse
        | undefined = undefined;
      const providedCallback = args.options?.onResponse;
      const callback: coreClient.RawResponseCallback = (
        rawResponse: coreClient.FullOperationResponse,
        flatResponse: unknown
      ) => {
        currentRawResponse = rawResponse;
        providedCallback?.(rawResponse, flatResponse);
      };
      const updatedArgs = {
        ...args,
        options: {
          ...args.options,
          onResponse: callback
        }
      };
      const flatResponse = await directSendOperation(updatedArgs, spec);
      return {
        flatResponse,
        rawResponse: {
          statusCode: currentRawResponse!.status,
          body: currentRawResponse!.parsedBody,
          headers: currentRawResponse!.headers.toJSON()
        }
      };
    };

    const lro = new LroImpl(
      sendOperation,
      { deviceName, resourceGroupName, managerName, options },
      deleteOperationSpec
    );
    const poller = new LroEngine(lro, {
      resumeFrom: options?.resumeFrom,
      intervalInMs: options?.updateIntervalInMs
    });
    await poller.poll();
    return poller;
  }

  /**
   * Deletes the device.
   * @param deviceName The device name
   * @param resourceGroupName The resource group name
   * @param managerName The manager name
   * @param options The options parameters.
   */
  async beginDeleteAndWait(
    deviceName: string,
    resourceGroupName: string,
    managerName: string,
    options?: DevicesDeleteOptionalParams
  ): Promise<void> {
    const poller = await this.beginDelete(
      deviceName,
      resourceGroupName,
      managerName,
      options
    );
    return poller.pollUntilDone();
  }

  /**
   * Patches the device.
   * @param deviceName The device name
   * @param resourceGroupName The resource group name
   * @param managerName The manager name
   * @param parameters Patch representation of the device.
   * @param options The options parameters.
   */
  update(
    deviceName: string,
    resourceGroupName: string,
    managerName: string,
    parameters: DevicePatch,
    options?: DevicesUpdateOptionalParams
  ): Promise<DevicesUpdateResponse> {
    return this.client.sendOperationRequest(
      { deviceName, resourceGroupName, managerName, parameters, options },
      updateOperationSpec
    );
  }

  /**
   * Authorizes the specified device for service data encryption key rollover.
   * @param deviceName The device name
   * @param resourceGroupName The resource group name
   * @param managerName The manager name
   * @param options The options parameters.
   */
  authorizeForServiceEncryptionKeyRollover(
    deviceName: string,
    resourceGroupName: string,
    managerName: string,
    options?: DevicesAuthorizeForServiceEncryptionKeyRolloverOptionalParams
  ): Promise<void> {
    return this.client.sendOperationRequest(
      { deviceName, resourceGroupName, managerName, options },
      authorizeForServiceEncryptionKeyRolloverOperationSpec
    );
  }

  /**
   * Deactivates the device.
   * @param deviceName The device name
   * @param resourceGroupName The resource group name
   * @param managerName The manager name
   * @param options The options parameters.
   */
  async beginDeactivate(
    deviceName: string,
    resourceGroupName: string,
    managerName: string,
    options?: DevicesDeactivateOptionalParams
  ): Promise<PollerLike<PollOperationState<void>, void>> {
    const directSendOperation = async (
      args: coreClient.OperationArguments,
      spec: coreClient.OperationSpec
    ): Promise<void> => {
      return this.client.sendOperationRequest(args, spec);
    };
    const sendOperation = async (
      args: coreClient.OperationArguments,
      spec: coreClient.OperationSpec
    ) => {
      let currentRawResponse:
        | coreClient.FullOperationResponse
        | undefined = undefined;
      const providedCallback = args.options?.onResponse;
      const callback: coreClient.RawResponseCallback = (
        rawResponse: coreClient.FullOperationResponse,
        flatResponse: unknown
      ) => {
        currentRawResponse = rawResponse;
        providedCallback?.(rawResponse, flatResponse);
      };
      const updatedArgs = {
        ...args,
        options: {
          ...args.options,
          onResponse: callback
        }
      };
      const flatResponse = await directSendOperation(updatedArgs, spec);
      return {
        flatResponse,
        rawResponse: {
          statusCode: currentRawResponse!.status,
          body: currentRawResponse!.parsedBody,
          headers: currentRawResponse!.headers.toJSON()
        }
      };
    };

    const lro = new LroImpl(
      sendOperation,
      { deviceName, resourceGroupName, managerName, options },
      deactivateOperationSpec
    );
    const poller = new LroEngine(lro, {
      resumeFrom: options?.resumeFrom,
      intervalInMs: options?.updateIntervalInMs
    });
    await poller.poll();
    return poller;
  }

  /**
   * Deactivates the device.
   * @param deviceName The device name
   * @param resourceGroupName The resource group name
   * @param managerName The manager name
   * @param options The options parameters.
   */
  async beginDeactivateAndWait(
    deviceName: string,
    resourceGroupName: string,
    managerName: string,
    options?: DevicesDeactivateOptionalParams
  ): Promise<void> {
    const poller = await this.beginDeactivate(
      deviceName,
      resourceGroupName,
      managerName,
      options
    );
    return poller.pollUntilDone();
  }

  /**
   * Downloads and installs the updates on the device.
   * @param deviceName The device name
   * @param resourceGroupName The resource group name
   * @param managerName The manager name
   * @param options The options parameters.
   */
  async beginInstallUpdates(
    deviceName: string,
    resourceGroupName: string,
    managerName: string,
    options?: DevicesInstallUpdatesOptionalParams
  ): Promise<PollerLike<PollOperationState<void>, void>> {
    const directSendOperation = async (
      args: coreClient.OperationArguments,
      spec: coreClient.OperationSpec
    ): Promise<void> => {
      return this.client.sendOperationRequest(args, spec);
    };
    const sendOperation = async (
      args: coreClient.OperationArguments,
      spec: coreClient.OperationSpec
    ) => {
      let currentRawResponse:
        | coreClient.FullOperationResponse
        | undefined = undefined;
      const providedCallback = args.options?.onResponse;
      const callback: coreClient.RawResponseCallback = (
        rawResponse: coreClient.FullOperationResponse,
        flatResponse: unknown
      ) => {
        currentRawResponse = rawResponse;
        providedCallback?.(rawResponse, flatResponse);
      };
      const updatedArgs = {
        ...args,
        options: {
          ...args.options,
          onResponse: callback
        }
      };
      const flatResponse = await directSendOperation(updatedArgs, spec);
      return {
        flatResponse,
        rawResponse: {
          statusCode: currentRawResponse!.status,
          body: currentRawResponse!.parsedBody,
          headers: currentRawResponse!.headers.toJSON()
        }
      };
    };

    const lro = new LroImpl(
      sendOperation,
      { deviceName, resourceGroupName, managerName, options },
      installUpdatesOperationSpec
    );
    const poller = new LroEngine(lro, {
      resumeFrom: options?.resumeFrom,
      intervalInMs: options?.updateIntervalInMs
    });
    await poller.poll();
    return poller;
  }

  /**
   * Downloads and installs the updates on the device.
   * @param deviceName The device name
   * @param resourceGroupName The resource group name
   * @param managerName The manager name
   * @param options The options parameters.
   */
  async beginInstallUpdatesAndWait(
    deviceName: string,
    resourceGroupName: string,
    managerName: string,
    options?: DevicesInstallUpdatesOptionalParams
  ): Promise<void> {
    const poller = await this.beginInstallUpdates(
      deviceName,
      resourceGroupName,
      managerName,
      options
    );
    return poller.pollUntilDone();
  }

  /**
   * Returns all failover sets for a given device and their eligibility for participating in a failover.
   * A failover set refers to a set of volume containers that need to be failed-over as a single unit to
   * maintain data integrity.
   * @param deviceName The device name
   * @param resourceGroupName The resource group name
   * @param managerName The manager name
   * @param options The options parameters.
   */
  private _listFailoverSets(
    deviceName: string,
    resourceGroupName: string,
    managerName: string,
    options?: DevicesListFailoverSetsOptionalParams
  ): Promise<DevicesListFailoverSetsResponse> {
    return this.client.sendOperationRequest(
      { deviceName, resourceGroupName, managerName, options },
      listFailoverSetsOperationSpec
    );
  }

  /**
   * Gets the metrics for the specified device.
   * @param deviceName The device name
   * @param resourceGroupName The resource group name
   * @param managerName The manager name
   * @param filter OData Filter options
   * @param options The options parameters.
   */
  private _listMetrics(
    deviceName: string,
    resourceGroupName: string,
    managerName: string,
    filter: string,
    options?: DevicesListMetricsOptionalParams
  ): Promise<DevicesListMetricsResponse> {
    return this.client.sendOperationRequest(
      { deviceName, resourceGroupName, managerName, filter, options },
      listMetricsOperationSpec
    );
  }

  /**
   * Gets the metric definitions for the specified device.
   * @param deviceName The device name
   * @param resourceGroupName The resource group name
   * @param managerName The manager name
   * @param options The options parameters.
   */
  private _listMetricDefinition(
    deviceName: string,
    resourceGroupName: string,
    managerName: string,
    options?: DevicesListMetricDefinitionOptionalParams
  ): Promise<DevicesListMetricDefinitionResponse> {
    return this.client.sendOperationRequest(
      { deviceName, resourceGroupName, managerName, options },
      listMetricDefinitionOperationSpec
    );
  }

  /**
   * Scans for updates on the device.
   * @param deviceName The device name
   * @param resourceGroupName The resource group name
   * @param managerName The manager name
   * @param options The options parameters.
   */
  async beginScanForUpdates(
    deviceName: string,
    resourceGroupName: string,
    managerName: string,
    options?: DevicesScanForUpdatesOptionalParams
  ): Promise<PollerLike<PollOperationState<void>, void>> {
    const directSendOperation = async (
      args: coreClient.OperationArguments,
      spec: coreClient.OperationSpec
    ): Promise<void> => {
      return this.client.sendOperationRequest(args, spec);
    };
    const sendOperation = async (
      args: coreClient.OperationArguments,
      spec: coreClient.OperationSpec
    ) => {
      let currentRawResponse:
        | coreClient.FullOperationResponse
        | undefined = undefined;
      const providedCallback = args.options?.onResponse;
      const callback: coreClient.RawResponseCallback = (
        rawResponse: coreClient.FullOperationResponse,
        flatResponse: unknown
      ) => {
        currentRawResponse = rawResponse;
        providedCallback?.(rawResponse, flatResponse);
      };
      const updatedArgs = {
        ...args,
        options: {
          ...args.options,
          onResponse: callback
        }
      };
      const flatResponse = await directSendOperation(updatedArgs, spec);
      return {
        flatResponse,
        rawResponse: {
          statusCode: currentRawResponse!.status,
          body: currentRawResponse!.parsedBody,
          headers: currentRawResponse!.headers.toJSON()
        }
      };
    };

    const lro = new LroImpl(
      sendOperation,
      { deviceName, resourceGroupName, managerName, options },
      scanForUpdatesOperationSpec
    );
    const poller = new LroEngine(lro, {
      resumeFrom: options?.resumeFrom,
      intervalInMs: options?.updateIntervalInMs
    });
    await poller.poll();
    return poller;
  }

  /**
   * Scans for updates on the device.
   * @param deviceName The device name
   * @param resourceGroupName The resource group name
   * @param managerName The manager name
   * @param options The options parameters.
   */
  async beginScanForUpdatesAndWait(
    deviceName: string,
    resourceGroupName: string,
    managerName: string,
    options?: DevicesScanForUpdatesOptionalParams
  ): Promise<void> {
    const poller = await this.beginScanForUpdates(
      deviceName,
      resourceGroupName,
      managerName,
      options
    );
    return poller.pollUntilDone();
  }

  /**
   * Returns the update summary of the specified device name.
   * @param deviceName The device name
   * @param resourceGroupName The resource group name
   * @param managerName The manager name
   * @param options The options parameters.
   */
  getUpdateSummary(
    deviceName: string,
    resourceGroupName: string,
    managerName: string,
    options?: DevicesGetUpdateSummaryOptionalParams
  ): Promise<DevicesGetUpdateSummaryResponse> {
    return this.client.sendOperationRequest(
      { deviceName, resourceGroupName, managerName, options },
      getUpdateSummaryOperationSpec
    );
  }

  /**
   * Failovers a set of volume containers from a specified source device to a target device.
   * @param sourceDeviceName The source device name on which failover is performed.
   * @param resourceGroupName The resource group name
   * @param managerName The manager name
   * @param parameters FailoverRequest containing the source device and the list of volume containers to
   *                   be failed over.
   * @param options The options parameters.
   */
  async beginFailover(
    sourceDeviceName: string,
    resourceGroupName: string,
    managerName: string,
    parameters: FailoverRequest,
    options?: DevicesFailoverOptionalParams
  ): Promise<PollerLike<PollOperationState<void>, void>> {
    const directSendOperation = async (
      args: coreClient.OperationArguments,
      spec: coreClient.OperationSpec
    ): Promise<void> => {
      return this.client.sendOperationRequest(args, spec);
    };
    const sendOperation = async (
      args: coreClient.OperationArguments,
      spec: coreClient.OperationSpec
    ) => {
      let currentRawResponse:
        | coreClient.FullOperationResponse
        | undefined = undefined;
      const providedCallback = args.options?.onResponse;
      const callback: coreClient.RawResponseCallback = (
        rawResponse: coreClient.FullOperationResponse,
        flatResponse: unknown
      ) => {
        currentRawResponse = rawResponse;
        providedCallback?.(rawResponse, flatResponse);
      };
      const updatedArgs = {
        ...args,
        options: {
          ...args.options,
          onResponse: callback
        }
      };
      const flatResponse = await directSendOperation(updatedArgs, spec);
      return {
        flatResponse,
        rawResponse: {
          statusCode: currentRawResponse!.status,
          body: currentRawResponse!.parsedBody,
          headers: currentRawResponse!.headers.toJSON()
        }
      };
    };

    const lro = new LroImpl(
      sendOperation,
      { sourceDeviceName, resourceGroupName, managerName, parameters, options },
      failoverOperationSpec
    );
    const poller = new LroEngine(lro, {
      resumeFrom: options?.resumeFrom,
      intervalInMs: options?.updateIntervalInMs
    });
    await poller.poll();
    return poller;
  }

  /**
   * Failovers a set of volume containers from a specified source device to a target device.
   * @param sourceDeviceName The source device name on which failover is performed.
   * @param resourceGroupName The resource group name
   * @param managerName The manager name
   * @param parameters FailoverRequest containing the source device and the list of volume containers to
   *                   be failed over.
   * @param options The options parameters.
   */
  async beginFailoverAndWait(
    sourceDeviceName: string,
    resourceGroupName: string,
    managerName: string,
    parameters: FailoverRequest,
    options?: DevicesFailoverOptionalParams
  ): Promise<void> {
    const poller = await this.beginFailover(
      sourceDeviceName,
      resourceGroupName,
      managerName,
      parameters,
      options
    );
    return poller.pollUntilDone();
  }

  /**
   * Given a list of volume containers to be failed over from a source device, this method returns the
   * eligibility result, as a failover target, for all devices under that resource.
   * @param sourceDeviceName The source device name on which failover is performed.
   * @param resourceGroupName The resource group name
   * @param managerName The manager name
   * @param parameters ListFailoverTargetsRequest containing the list of volume containers to be failed
   *                   over.
   * @param options The options parameters.
   */
  private _listFailoverTargets(
    sourceDeviceName: string,
    resourceGroupName: string,
    managerName: string,
    parameters: ListFailoverTargetsRequest,
    options?: DevicesListFailoverTargetsOptionalParams
  ): Promise<DevicesListFailoverTargetsResponse> {
    return this.client.sendOperationRequest(
      { sourceDeviceName, resourceGroupName, managerName, parameters, options },
      listFailoverTargetsOperationSpec
    );
  }
}
// Operation Specifications
const serializer = coreClient.createSerializer(Mappers, /* isXml */ false);

const configureOperationSpec: coreClient.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.StorSimple/managers/{managerName}/configureDevice",
  httpMethod: "POST",
  responses: { 200: {}, 201: {}, 202: {}, 204: {} },
  requestBody: Parameters.parameters8,
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.managerName
  ],
  headerParameters: [Parameters.contentType],
  mediaType: "json",
  serializer
};
const listByManagerOperationSpec: coreClient.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.StorSimple/managers/{managerName}/devices",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.DeviceList
    }
  },
  queryParameters: [Parameters.apiVersion, Parameters.expand],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.managerName
  ],
  headerParameters: [Parameters.accept],
  serializer
};
const getOperationSpec: coreClient.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.StorSimple/managers/{managerName}/devices/{deviceName}",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.Device
    }
  },
  queryParameters: [Parameters.apiVersion, Parameters.expand],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.managerName,
    Parameters.deviceName
  ],
  headerParameters: [Parameters.accept],
  serializer
};
const deleteOperationSpec: coreClient.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.StorSimple/managers/{managerName}/devices/{deviceName}",
  httpMethod: "DELETE",
  responses: { 200: {}, 201: {}, 202: {}, 204: {} },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.managerName,
    Parameters.deviceName
  ],
  serializer
};
const updateOperationSpec: coreClient.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.StorSimple/managers/{managerName}/devices/{deviceName}",
  httpMethod: "PATCH",
  responses: {
    200: {
      bodyMapper: Mappers.Device
    }
  },
  requestBody: Parameters.parameters9,
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.managerName,
    Parameters.deviceName
  ],
  headerParameters: [Parameters.accept, Parameters.contentType],
  mediaType: "json",
  serializer
};
const authorizeForServiceEncryptionKeyRolloverOperationSpec: coreClient.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.StorSimple/managers/{managerName}/devices/{deviceName}/authorizeForServiceEncryptionKeyRollover",
  httpMethod: "POST",
  responses: { 204: {} },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.managerName,
    Parameters.deviceName
  ],
  serializer
};
const deactivateOperationSpec: coreClient.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.StorSimple/managers/{managerName}/devices/{deviceName}/deactivate",
  httpMethod: "POST",
  responses: { 200: {}, 201: {}, 202: {}, 204: {} },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.managerName,
    Parameters.deviceName
  ],
  serializer
};
const installUpdatesOperationSpec: coreClient.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.StorSimple/managers/{managerName}/devices/{deviceName}/installUpdates",
  httpMethod: "POST",
  responses: { 200: {}, 201: {}, 202: {}, 204: {} },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.managerName,
    Parameters.deviceName
  ],
  serializer
};
const listFailoverSetsOperationSpec: coreClient.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.StorSimple/managers/{managerName}/devices/{deviceName}/listFailoverSets",
  httpMethod: "POST",
  responses: {
    200: {
      bodyMapper: Mappers.FailoverSetsList
    }
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.managerName,
    Parameters.deviceName
  ],
  headerParameters: [Parameters.accept],
  serializer
};
const listMetricsOperationSpec: coreClient.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.StorSimple/managers/{managerName}/devices/{deviceName}/metrics",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.MetricList
    }
  },
  queryParameters: [Parameters.apiVersion, Parameters.filter1],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.managerName,
    Parameters.deviceName
  ],
  headerParameters: [Parameters.accept],
  serializer
};
const listMetricDefinitionOperationSpec: coreClient.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.StorSimple/managers/{managerName}/devices/{deviceName}/metricsDefinitions",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.MetricDefinitionList
    }
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.managerName,
    Parameters.deviceName
  ],
  headerParameters: [Parameters.accept],
  serializer
};
const scanForUpdatesOperationSpec: coreClient.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.StorSimple/managers/{managerName}/devices/{deviceName}/scanForUpdates",
  httpMethod: "POST",
  responses: { 200: {}, 201: {}, 202: {}, 204: {} },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.managerName,
    Parameters.deviceName
  ],
  serializer
};
const getUpdateSummaryOperationSpec: coreClient.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.StorSimple/managers/{managerName}/devices/{deviceName}/updateSummary/default",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.Updates
    }
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.managerName,
    Parameters.deviceName
  ],
  headerParameters: [Parameters.accept],
  serializer
};
const failoverOperationSpec: coreClient.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.StorSimple/managers/{managerName}/devices/{sourceDeviceName}/failover",
  httpMethod: "POST",
  responses: { 200: {}, 201: {}, 202: {}, 204: {} },
  requestBody: Parameters.parameters10,
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.managerName,
    Parameters.sourceDeviceName
  ],
  headerParameters: [Parameters.contentType],
  mediaType: "json",
  serializer
};
const listFailoverTargetsOperationSpec: coreClient.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.StorSimple/managers/{managerName}/devices/{sourceDeviceName}/listFailoverTargets",
  httpMethod: "POST",
  responses: {
    200: {
      bodyMapper: Mappers.FailoverTargetsList
    }
  },
  requestBody: Parameters.parameters11,
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.managerName,
    Parameters.sourceDeviceName
  ],
  headerParameters: [Parameters.accept, Parameters.contentType],
  mediaType: "json",
  serializer
};
