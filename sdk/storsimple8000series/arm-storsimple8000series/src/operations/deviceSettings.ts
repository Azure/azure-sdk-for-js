/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */

import { DeviceSettings } from "../operationsInterfaces";
import * as coreClient from "@azure/core-client";
import * as Mappers from "../models/mappers";
import * as Parameters from "../models/parameters";
import { StorSimple8000SeriesManagementClient } from "../storSimple8000SeriesManagementClient";
import { PollerLike, PollOperationState, LroEngine } from "@azure/core-lro";
import { LroImpl } from "../lroImpl";
import {
  DeviceSettingsGetAlertSettingsOptionalParams,
  DeviceSettingsGetAlertSettingsResponse,
  AlertSettings,
  DeviceSettingsCreateOrUpdateAlertSettingsOptionalParams,
  DeviceSettingsCreateOrUpdateAlertSettingsResponse,
  DeviceSettingsGetNetworkSettingsOptionalParams,
  DeviceSettingsGetNetworkSettingsResponse,
  NetworkSettingsPatch,
  DeviceSettingsUpdateNetworkSettingsOptionalParams,
  DeviceSettingsUpdateNetworkSettingsResponse,
  DeviceSettingsGetSecuritySettingsOptionalParams,
  DeviceSettingsGetSecuritySettingsResponse,
  SecuritySettingsPatch,
  DeviceSettingsUpdateSecuritySettingsOptionalParams,
  DeviceSettingsUpdateSecuritySettingsResponse,
  DeviceSettingsSyncRemotemanagementCertificateOptionalParams,
  DeviceSettingsGetTimeSettingsOptionalParams,
  DeviceSettingsGetTimeSettingsResponse,
  TimeSettings,
  DeviceSettingsCreateOrUpdateTimeSettingsOptionalParams,
  DeviceSettingsCreateOrUpdateTimeSettingsResponse
} from "../models";

/** Class containing DeviceSettings operations. */
export class DeviceSettingsImpl implements DeviceSettings {
  private readonly client: StorSimple8000SeriesManagementClient;

  /**
   * Initialize a new instance of the class DeviceSettings class.
   * @param client Reference to the service client
   */
  constructor(client: StorSimple8000SeriesManagementClient) {
    this.client = client;
  }

  /**
   * Gets the alert settings of the specified device.
   * @param deviceName The device name
   * @param resourceGroupName The resource group name
   * @param managerName The manager name
   * @param options The options parameters.
   */
  getAlertSettings(
    deviceName: string,
    resourceGroupName: string,
    managerName: string,
    options?: DeviceSettingsGetAlertSettingsOptionalParams
  ): Promise<DeviceSettingsGetAlertSettingsResponse> {
    return this.client.sendOperationRequest(
      { deviceName, resourceGroupName, managerName, options },
      getAlertSettingsOperationSpec
    );
  }

  /**
   * Creates or updates the alert settings of the specified device.
   * @param deviceName The device name
   * @param resourceGroupName The resource group name
   * @param managerName The manager name
   * @param parameters The alert settings to be added or updated.
   * @param options The options parameters.
   */
  async beginCreateOrUpdateAlertSettings(
    deviceName: string,
    resourceGroupName: string,
    managerName: string,
    parameters: AlertSettings,
    options?: DeviceSettingsCreateOrUpdateAlertSettingsOptionalParams
  ): Promise<
    PollerLike<
      PollOperationState<DeviceSettingsCreateOrUpdateAlertSettingsResponse>,
      DeviceSettingsCreateOrUpdateAlertSettingsResponse
    >
  > {
    const directSendOperation = async (
      args: coreClient.OperationArguments,
      spec: coreClient.OperationSpec
    ): Promise<DeviceSettingsCreateOrUpdateAlertSettingsResponse> => {
      return this.client.sendOperationRequest(args, spec);
    };
    const sendOperation = async (
      args: coreClient.OperationArguments,
      spec: coreClient.OperationSpec
    ) => {
      let currentRawResponse:
        | coreClient.FullOperationResponse
        | undefined = undefined;
      const providedCallback = args.options?.onResponse;
      const callback: coreClient.RawResponseCallback = (
        rawResponse: coreClient.FullOperationResponse,
        flatResponse: unknown
      ) => {
        currentRawResponse = rawResponse;
        providedCallback?.(rawResponse, flatResponse);
      };
      const updatedArgs = {
        ...args,
        options: {
          ...args.options,
          onResponse: callback
        }
      };
      const flatResponse = await directSendOperation(updatedArgs, spec);
      return {
        flatResponse,
        rawResponse: {
          statusCode: currentRawResponse!.status,
          body: currentRawResponse!.parsedBody,
          headers: currentRawResponse!.headers.toJSON()
        }
      };
    };

    const lro = new LroImpl(
      sendOperation,
      { deviceName, resourceGroupName, managerName, parameters, options },
      createOrUpdateAlertSettingsOperationSpec
    );
    const poller = new LroEngine(lro, {
      resumeFrom: options?.resumeFrom,
      intervalInMs: options?.updateIntervalInMs
    });
    await poller.poll();
    return poller;
  }

  /**
   * Creates or updates the alert settings of the specified device.
   * @param deviceName The device name
   * @param resourceGroupName The resource group name
   * @param managerName The manager name
   * @param parameters The alert settings to be added or updated.
   * @param options The options parameters.
   */
  async beginCreateOrUpdateAlertSettingsAndWait(
    deviceName: string,
    resourceGroupName: string,
    managerName: string,
    parameters: AlertSettings,
    options?: DeviceSettingsCreateOrUpdateAlertSettingsOptionalParams
  ): Promise<DeviceSettingsCreateOrUpdateAlertSettingsResponse> {
    const poller = await this.beginCreateOrUpdateAlertSettings(
      deviceName,
      resourceGroupName,
      managerName,
      parameters,
      options
    );
    return poller.pollUntilDone();
  }

  /**
   * Gets the network settings of the specified device.
   * @param deviceName The device name
   * @param resourceGroupName The resource group name
   * @param managerName The manager name
   * @param options The options parameters.
   */
  getNetworkSettings(
    deviceName: string,
    resourceGroupName: string,
    managerName: string,
    options?: DeviceSettingsGetNetworkSettingsOptionalParams
  ): Promise<DeviceSettingsGetNetworkSettingsResponse> {
    return this.client.sendOperationRequest(
      { deviceName, resourceGroupName, managerName, options },
      getNetworkSettingsOperationSpec
    );
  }

  /**
   * Updates the network settings on the specified device.
   * @param deviceName The device name
   * @param resourceGroupName The resource group name
   * @param managerName The manager name
   * @param parameters The network settings to be updated.
   * @param options The options parameters.
   */
  async beginUpdateNetworkSettings(
    deviceName: string,
    resourceGroupName: string,
    managerName: string,
    parameters: NetworkSettingsPatch,
    options?: DeviceSettingsUpdateNetworkSettingsOptionalParams
  ): Promise<
    PollerLike<
      PollOperationState<DeviceSettingsUpdateNetworkSettingsResponse>,
      DeviceSettingsUpdateNetworkSettingsResponse
    >
  > {
    const directSendOperation = async (
      args: coreClient.OperationArguments,
      spec: coreClient.OperationSpec
    ): Promise<DeviceSettingsUpdateNetworkSettingsResponse> => {
      return this.client.sendOperationRequest(args, spec);
    };
    const sendOperation = async (
      args: coreClient.OperationArguments,
      spec: coreClient.OperationSpec
    ) => {
      let currentRawResponse:
        | coreClient.FullOperationResponse
        | undefined = undefined;
      const providedCallback = args.options?.onResponse;
      const callback: coreClient.RawResponseCallback = (
        rawResponse: coreClient.FullOperationResponse,
        flatResponse: unknown
      ) => {
        currentRawResponse = rawResponse;
        providedCallback?.(rawResponse, flatResponse);
      };
      const updatedArgs = {
        ...args,
        options: {
          ...args.options,
          onResponse: callback
        }
      };
      const flatResponse = await directSendOperation(updatedArgs, spec);
      return {
        flatResponse,
        rawResponse: {
          statusCode: currentRawResponse!.status,
          body: currentRawResponse!.parsedBody,
          headers: currentRawResponse!.headers.toJSON()
        }
      };
    };

    const lro = new LroImpl(
      sendOperation,
      { deviceName, resourceGroupName, managerName, parameters, options },
      updateNetworkSettingsOperationSpec
    );
    const poller = new LroEngine(lro, {
      resumeFrom: options?.resumeFrom,
      intervalInMs: options?.updateIntervalInMs
    });
    await poller.poll();
    return poller;
  }

  /**
   * Updates the network settings on the specified device.
   * @param deviceName The device name
   * @param resourceGroupName The resource group name
   * @param managerName The manager name
   * @param parameters The network settings to be updated.
   * @param options The options parameters.
   */
  async beginUpdateNetworkSettingsAndWait(
    deviceName: string,
    resourceGroupName: string,
    managerName: string,
    parameters: NetworkSettingsPatch,
    options?: DeviceSettingsUpdateNetworkSettingsOptionalParams
  ): Promise<DeviceSettingsUpdateNetworkSettingsResponse> {
    const poller = await this.beginUpdateNetworkSettings(
      deviceName,
      resourceGroupName,
      managerName,
      parameters,
      options
    );
    return poller.pollUntilDone();
  }

  /**
   * Returns the Security properties of the specified device name.
   * @param deviceName The device name
   * @param resourceGroupName The resource group name
   * @param managerName The manager name
   * @param options The options parameters.
   */
  getSecuritySettings(
    deviceName: string,
    resourceGroupName: string,
    managerName: string,
    options?: DeviceSettingsGetSecuritySettingsOptionalParams
  ): Promise<DeviceSettingsGetSecuritySettingsResponse> {
    return this.client.sendOperationRequest(
      { deviceName, resourceGroupName, managerName, options },
      getSecuritySettingsOperationSpec
    );
  }

  /**
   * Patch Security properties of the specified device name.
   * @param deviceName The device name
   * @param resourceGroupName The resource group name
   * @param managerName The manager name
   * @param parameters The security settings properties to be patched.
   * @param options The options parameters.
   */
  async beginUpdateSecuritySettings(
    deviceName: string,
    resourceGroupName: string,
    managerName: string,
    parameters: SecuritySettingsPatch,
    options?: DeviceSettingsUpdateSecuritySettingsOptionalParams
  ): Promise<
    PollerLike<
      PollOperationState<DeviceSettingsUpdateSecuritySettingsResponse>,
      DeviceSettingsUpdateSecuritySettingsResponse
    >
  > {
    const directSendOperation = async (
      args: coreClient.OperationArguments,
      spec: coreClient.OperationSpec
    ): Promise<DeviceSettingsUpdateSecuritySettingsResponse> => {
      return this.client.sendOperationRequest(args, spec);
    };
    const sendOperation = async (
      args: coreClient.OperationArguments,
      spec: coreClient.OperationSpec
    ) => {
      let currentRawResponse:
        | coreClient.FullOperationResponse
        | undefined = undefined;
      const providedCallback = args.options?.onResponse;
      const callback: coreClient.RawResponseCallback = (
        rawResponse: coreClient.FullOperationResponse,
        flatResponse: unknown
      ) => {
        currentRawResponse = rawResponse;
        providedCallback?.(rawResponse, flatResponse);
      };
      const updatedArgs = {
        ...args,
        options: {
          ...args.options,
          onResponse: callback
        }
      };
      const flatResponse = await directSendOperation(updatedArgs, spec);
      return {
        flatResponse,
        rawResponse: {
          statusCode: currentRawResponse!.status,
          body: currentRawResponse!.parsedBody,
          headers: currentRawResponse!.headers.toJSON()
        }
      };
    };

    const lro = new LroImpl(
      sendOperation,
      { deviceName, resourceGroupName, managerName, parameters, options },
      updateSecuritySettingsOperationSpec
    );
    const poller = new LroEngine(lro, {
      resumeFrom: options?.resumeFrom,
      intervalInMs: options?.updateIntervalInMs
    });
    await poller.poll();
    return poller;
  }

  /**
   * Patch Security properties of the specified device name.
   * @param deviceName The device name
   * @param resourceGroupName The resource group name
   * @param managerName The manager name
   * @param parameters The security settings properties to be patched.
   * @param options The options parameters.
   */
  async beginUpdateSecuritySettingsAndWait(
    deviceName: string,
    resourceGroupName: string,
    managerName: string,
    parameters: SecuritySettingsPatch,
    options?: DeviceSettingsUpdateSecuritySettingsOptionalParams
  ): Promise<DeviceSettingsUpdateSecuritySettingsResponse> {
    const poller = await this.beginUpdateSecuritySettings(
      deviceName,
      resourceGroupName,
      managerName,
      parameters,
      options
    );
    return poller.pollUntilDone();
  }

  /**
   * sync Remote management Certificate between appliance and Service
   * @param deviceName The device name
   * @param resourceGroupName The resource group name
   * @param managerName The manager name
   * @param options The options parameters.
   */
  async beginSyncRemotemanagementCertificate(
    deviceName: string,
    resourceGroupName: string,
    managerName: string,
    options?: DeviceSettingsSyncRemotemanagementCertificateOptionalParams
  ): Promise<PollerLike<PollOperationState<void>, void>> {
    const directSendOperation = async (
      args: coreClient.OperationArguments,
      spec: coreClient.OperationSpec
    ): Promise<void> => {
      return this.client.sendOperationRequest(args, spec);
    };
    const sendOperation = async (
      args: coreClient.OperationArguments,
      spec: coreClient.OperationSpec
    ) => {
      let currentRawResponse:
        | coreClient.FullOperationResponse
        | undefined = undefined;
      const providedCallback = args.options?.onResponse;
      const callback: coreClient.RawResponseCallback = (
        rawResponse: coreClient.FullOperationResponse,
        flatResponse: unknown
      ) => {
        currentRawResponse = rawResponse;
        providedCallback?.(rawResponse, flatResponse);
      };
      const updatedArgs = {
        ...args,
        options: {
          ...args.options,
          onResponse: callback
        }
      };
      const flatResponse = await directSendOperation(updatedArgs, spec);
      return {
        flatResponse,
        rawResponse: {
          statusCode: currentRawResponse!.status,
          body: currentRawResponse!.parsedBody,
          headers: currentRawResponse!.headers.toJSON()
        }
      };
    };

    const lro = new LroImpl(
      sendOperation,
      { deviceName, resourceGroupName, managerName, options },
      syncRemotemanagementCertificateOperationSpec
    );
    const poller = new LroEngine(lro, {
      resumeFrom: options?.resumeFrom,
      intervalInMs: options?.updateIntervalInMs
    });
    await poller.poll();
    return poller;
  }

  /**
   * sync Remote management Certificate between appliance and Service
   * @param deviceName The device name
   * @param resourceGroupName The resource group name
   * @param managerName The manager name
   * @param options The options parameters.
   */
  async beginSyncRemotemanagementCertificateAndWait(
    deviceName: string,
    resourceGroupName: string,
    managerName: string,
    options?: DeviceSettingsSyncRemotemanagementCertificateOptionalParams
  ): Promise<void> {
    const poller = await this.beginSyncRemotemanagementCertificate(
      deviceName,
      resourceGroupName,
      managerName,
      options
    );
    return poller.pollUntilDone();
  }

  /**
   * Gets the time settings of the specified device.
   * @param deviceName The device name
   * @param resourceGroupName The resource group name
   * @param managerName The manager name
   * @param options The options parameters.
   */
  getTimeSettings(
    deviceName: string,
    resourceGroupName: string,
    managerName: string,
    options?: DeviceSettingsGetTimeSettingsOptionalParams
  ): Promise<DeviceSettingsGetTimeSettingsResponse> {
    return this.client.sendOperationRequest(
      { deviceName, resourceGroupName, managerName, options },
      getTimeSettingsOperationSpec
    );
  }

  /**
   * Creates or updates the time settings of the specified device.
   * @param deviceName The device name
   * @param resourceGroupName The resource group name
   * @param managerName The manager name
   * @param parameters The time settings to be added or updated.
   * @param options The options parameters.
   */
  async beginCreateOrUpdateTimeSettings(
    deviceName: string,
    resourceGroupName: string,
    managerName: string,
    parameters: TimeSettings,
    options?: DeviceSettingsCreateOrUpdateTimeSettingsOptionalParams
  ): Promise<
    PollerLike<
      PollOperationState<DeviceSettingsCreateOrUpdateTimeSettingsResponse>,
      DeviceSettingsCreateOrUpdateTimeSettingsResponse
    >
  > {
    const directSendOperation = async (
      args: coreClient.OperationArguments,
      spec: coreClient.OperationSpec
    ): Promise<DeviceSettingsCreateOrUpdateTimeSettingsResponse> => {
      return this.client.sendOperationRequest(args, spec);
    };
    const sendOperation = async (
      args: coreClient.OperationArguments,
      spec: coreClient.OperationSpec
    ) => {
      let currentRawResponse:
        | coreClient.FullOperationResponse
        | undefined = undefined;
      const providedCallback = args.options?.onResponse;
      const callback: coreClient.RawResponseCallback = (
        rawResponse: coreClient.FullOperationResponse,
        flatResponse: unknown
      ) => {
        currentRawResponse = rawResponse;
        providedCallback?.(rawResponse, flatResponse);
      };
      const updatedArgs = {
        ...args,
        options: {
          ...args.options,
          onResponse: callback
        }
      };
      const flatResponse = await directSendOperation(updatedArgs, spec);
      return {
        flatResponse,
        rawResponse: {
          statusCode: currentRawResponse!.status,
          body: currentRawResponse!.parsedBody,
          headers: currentRawResponse!.headers.toJSON()
        }
      };
    };

    const lro = new LroImpl(
      sendOperation,
      { deviceName, resourceGroupName, managerName, parameters, options },
      createOrUpdateTimeSettingsOperationSpec
    );
    const poller = new LroEngine(lro, {
      resumeFrom: options?.resumeFrom,
      intervalInMs: options?.updateIntervalInMs
    });
    await poller.poll();
    return poller;
  }

  /**
   * Creates or updates the time settings of the specified device.
   * @param deviceName The device name
   * @param resourceGroupName The resource group name
   * @param managerName The manager name
   * @param parameters The time settings to be added or updated.
   * @param options The options parameters.
   */
  async beginCreateOrUpdateTimeSettingsAndWait(
    deviceName: string,
    resourceGroupName: string,
    managerName: string,
    parameters: TimeSettings,
    options?: DeviceSettingsCreateOrUpdateTimeSettingsOptionalParams
  ): Promise<DeviceSettingsCreateOrUpdateTimeSettingsResponse> {
    const poller = await this.beginCreateOrUpdateTimeSettings(
      deviceName,
      resourceGroupName,
      managerName,
      parameters,
      options
    );
    return poller.pollUntilDone();
  }
}
// Operation Specifications
const serializer = coreClient.createSerializer(Mappers, /* isXml */ false);

const getAlertSettingsOperationSpec: coreClient.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.StorSimple/managers/{managerName}/devices/{deviceName}/alertSettings/default",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.AlertSettings
    }
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.managerName,
    Parameters.deviceName
  ],
  headerParameters: [Parameters.accept],
  serializer
};
const createOrUpdateAlertSettingsOperationSpec: coreClient.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.StorSimple/managers/{managerName}/devices/{deviceName}/alertSettings/default",
  httpMethod: "PUT",
  responses: {
    200: {
      bodyMapper: Mappers.AlertSettings
    },
    201: {
      bodyMapper: Mappers.AlertSettings
    },
    202: {
      bodyMapper: Mappers.AlertSettings
    },
    204: {
      bodyMapper: Mappers.AlertSettings
    }
  },
  requestBody: Parameters.parameters12,
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.managerName,
    Parameters.deviceName
  ],
  headerParameters: [Parameters.accept, Parameters.contentType],
  mediaType: "json",
  serializer
};
const getNetworkSettingsOperationSpec: coreClient.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.StorSimple/managers/{managerName}/devices/{deviceName}/networkSettings/default",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.NetworkSettings
    }
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.managerName,
    Parameters.deviceName
  ],
  headerParameters: [Parameters.accept],
  serializer
};
const updateNetworkSettingsOperationSpec: coreClient.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.StorSimple/managers/{managerName}/devices/{deviceName}/networkSettings/default",
  httpMethod: "PATCH",
  responses: {
    200: {
      bodyMapper: Mappers.NetworkSettings
    },
    201: {
      bodyMapper: Mappers.NetworkSettings
    },
    202: {
      bodyMapper: Mappers.NetworkSettings
    },
    204: {
      bodyMapper: Mappers.NetworkSettings
    }
  },
  requestBody: Parameters.parameters13,
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.managerName,
    Parameters.deviceName
  ],
  headerParameters: [Parameters.accept, Parameters.contentType],
  mediaType: "json",
  serializer
};
const getSecuritySettingsOperationSpec: coreClient.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.StorSimple/managers/{managerName}/devices/{deviceName}/securitySettings/default",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.SecuritySettings
    }
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.managerName,
    Parameters.deviceName
  ],
  headerParameters: [Parameters.accept],
  serializer
};
const updateSecuritySettingsOperationSpec: coreClient.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.StorSimple/managers/{managerName}/devices/{deviceName}/securitySettings/default",
  httpMethod: "PATCH",
  responses: {
    200: {
      bodyMapper: Mappers.SecuritySettings
    },
    201: {
      bodyMapper: Mappers.SecuritySettings
    },
    202: {
      bodyMapper: Mappers.SecuritySettings
    },
    204: {
      bodyMapper: Mappers.SecuritySettings
    }
  },
  requestBody: Parameters.parameters14,
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.managerName,
    Parameters.deviceName
  ],
  headerParameters: [Parameters.accept, Parameters.contentType],
  mediaType: "json",
  serializer
};
const syncRemotemanagementCertificateOperationSpec: coreClient.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.StorSimple/managers/{managerName}/devices/{deviceName}/securitySettings/default/syncRemoteManagementCertificate",
  httpMethod: "POST",
  responses: { 200: {}, 201: {}, 202: {}, 204: {} },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.managerName,
    Parameters.deviceName
  ],
  serializer
};
const getTimeSettingsOperationSpec: coreClient.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.StorSimple/managers/{managerName}/devices/{deviceName}/timeSettings/default",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.TimeSettings
    }
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.managerName,
    Parameters.deviceName
  ],
  headerParameters: [Parameters.accept],
  serializer
};
const createOrUpdateTimeSettingsOperationSpec: coreClient.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.StorSimple/managers/{managerName}/devices/{deviceName}/timeSettings/default",
  httpMethod: "PUT",
  responses: {
    200: {
      bodyMapper: Mappers.TimeSettings
    },
    201: {
      bodyMapper: Mappers.TimeSettings
    },
    202: {
      bodyMapper: Mappers.TimeSettings
    },
    204: {
      bodyMapper: Mappers.TimeSettings
    }
  },
  requestBody: Parameters.parameters15,
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.managerName,
    Parameters.deviceName
  ],
  headerParameters: [Parameters.accept, Parameters.contentType],
  mediaType: "json",
  serializer
};
