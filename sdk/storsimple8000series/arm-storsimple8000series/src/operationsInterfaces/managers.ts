/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */

import { PagedAsyncIterableIterator } from "@azure/core-paging";
import {
  Manager,
  ManagersListOptionalParams,
  ManagersListByResourceGroupOptionalParams,
  Feature,
  ManagersListFeatureSupportStatusOptionalParams,
  Metrics,
  ManagersListMetricsOptionalParams,
  MetricDefinition,
  ManagersListMetricDefinitionOptionalParams,
  ManagersGetOptionalParams,
  ManagersGetResponse,
  ManagersCreateOrUpdateOptionalParams,
  ManagersCreateOrUpdateResponse,
  ManagersDeleteOptionalParams,
  ManagerPatch,
  ManagersUpdateOptionalParams,
  ManagersUpdateResponse,
  ManagersGetDevicePublicEncryptionKeyOptionalParams,
  ManagersGetDevicePublicEncryptionKeyResponse,
  ManagersGetEncryptionSettingsOptionalParams,
  ManagersGetEncryptionSettingsResponse,
  ManagersGetExtendedInfoOptionalParams,
  ManagersGetExtendedInfoResponse,
  ManagerExtendedInfo,
  ManagersCreateExtendedInfoOptionalParams,
  ManagersCreateExtendedInfoResponse,
  ManagersDeleteExtendedInfoOptionalParams,
  ManagersUpdateExtendedInfoOptionalParams,
  ManagersUpdateExtendedInfoResponse,
  ManagersGetActivationKeyOptionalParams,
  ManagersGetActivationKeyResponse,
  ManagersGetPublicEncryptionKeyOptionalParams,
  ManagersGetPublicEncryptionKeyResponse,
  ManagersRegenerateActivationKeyOptionalParams,
  ManagersRegenerateActivationKeyResponse
} from "../models";

/// <reference lib="esnext.asynciterable" />
/** Interface representing a Managers. */
export interface Managers {
  /**
   * Retrieves all the managers in a subscription.
   * @param options The options parameters.
   */
  list(
    options?: ManagersListOptionalParams
  ): PagedAsyncIterableIterator<Manager>;
  /**
   * Retrieves all the managers in a resource group.
   * @param resourceGroupName The resource group name
   * @param options The options parameters.
   */
  listByResourceGroup(
    resourceGroupName: string,
    options?: ManagersListByResourceGroupOptionalParams
  ): PagedAsyncIterableIterator<Manager>;
  /**
   * Lists the features and their support status
   * @param resourceGroupName The resource group name
   * @param managerName The manager name
   * @param options The options parameters.
   */
  listFeatureSupportStatus(
    resourceGroupName: string,
    managerName: string,
    options?: ManagersListFeatureSupportStatusOptionalParams
  ): PagedAsyncIterableIterator<Feature>;
  /**
   * Gets the metrics for the specified manager.
   * @param resourceGroupName The resource group name
   * @param managerName The manager name
   * @param filter OData Filter options
   * @param options The options parameters.
   */
  listMetrics(
    resourceGroupName: string,
    managerName: string,
    filter: string,
    options?: ManagersListMetricsOptionalParams
  ): PagedAsyncIterableIterator<Metrics>;
  /**
   * Gets the metric definitions for the specified manager.
   * @param resourceGroupName The resource group name
   * @param managerName The manager name
   * @param options The options parameters.
   */
  listMetricDefinition(
    resourceGroupName: string,
    managerName: string,
    options?: ManagersListMetricDefinitionOptionalParams
  ): PagedAsyncIterableIterator<MetricDefinition>;
  /**
   * Returns the properties of the specified manager name.
   * @param resourceGroupName The resource group name
   * @param managerName The manager name
   * @param options The options parameters.
   */
  get(
    resourceGroupName: string,
    managerName: string,
    options?: ManagersGetOptionalParams
  ): Promise<ManagersGetResponse>;
  /**
   * Creates or updates the manager.
   * @param resourceGroupName The resource group name
   * @param managerName The manager name
   * @param parameters The manager.
   * @param options The options parameters.
   */
  createOrUpdate(
    resourceGroupName: string,
    managerName: string,
    parameters: Manager,
    options?: ManagersCreateOrUpdateOptionalParams
  ): Promise<ManagersCreateOrUpdateResponse>;
  /**
   * Deletes the manager.
   * @param resourceGroupName The resource group name
   * @param managerName The manager name
   * @param options The options parameters.
   */
  delete(
    resourceGroupName: string,
    managerName: string,
    options?: ManagersDeleteOptionalParams
  ): Promise<void>;
  /**
   * Updates the StorSimple Manager.
   * @param resourceGroupName The resource group name
   * @param managerName The manager name
   * @param parameters The manager update parameters.
   * @param options The options parameters.
   */
  update(
    resourceGroupName: string,
    managerName: string,
    parameters: ManagerPatch,
    options?: ManagersUpdateOptionalParams
  ): Promise<ManagersUpdateResponse>;
  /**
   * Returns the public encryption key of the device.
   * @param deviceName The device name
   * @param resourceGroupName The resource group name
   * @param managerName The manager name
   * @param options The options parameters.
   */
  getDevicePublicEncryptionKey(
    deviceName: string,
    resourceGroupName: string,
    managerName: string,
    options?: ManagersGetDevicePublicEncryptionKeyOptionalParams
  ): Promise<ManagersGetDevicePublicEncryptionKeyResponse>;
  /**
   * Returns the encryption settings of the manager.
   * @param resourceGroupName The resource group name
   * @param managerName The manager name
   * @param options The options parameters.
   */
  getEncryptionSettings(
    resourceGroupName: string,
    managerName: string,
    options?: ManagersGetEncryptionSettingsOptionalParams
  ): Promise<ManagersGetEncryptionSettingsResponse>;
  /**
   * Returns the extended information of the specified manager name.
   * @param resourceGroupName The resource group name
   * @param managerName The manager name
   * @param options The options parameters.
   */
  getExtendedInfo(
    resourceGroupName: string,
    managerName: string,
    options?: ManagersGetExtendedInfoOptionalParams
  ): Promise<ManagersGetExtendedInfoResponse>;
  /**
   * Creates the extended info of the manager.
   * @param resourceGroupName The resource group name
   * @param managerName The manager name
   * @param parameters The manager extended information.
   * @param options The options parameters.
   */
  createExtendedInfo(
    resourceGroupName: string,
    managerName: string,
    parameters: ManagerExtendedInfo,
    options?: ManagersCreateExtendedInfoOptionalParams
  ): Promise<ManagersCreateExtendedInfoResponse>;
  /**
   * Deletes the extended info of the manager.
   * @param resourceGroupName The resource group name
   * @param managerName The manager name
   * @param options The options parameters.
   */
  deleteExtendedInfo(
    resourceGroupName: string,
    managerName: string,
    options?: ManagersDeleteExtendedInfoOptionalParams
  ): Promise<void>;
  /**
   * Updates the extended info of the manager.
   * @param resourceGroupName The resource group name
   * @param managerName The manager name
   * @param ifMatch Pass the ETag of ExtendedInfo fetched from GET call
   * @param parameters The manager extended information.
   * @param options The options parameters.
   */
  updateExtendedInfo(
    resourceGroupName: string,
    managerName: string,
    ifMatch: string,
    parameters: ManagerExtendedInfo,
    options?: ManagersUpdateExtendedInfoOptionalParams
  ): Promise<ManagersUpdateExtendedInfoResponse>;
  /**
   * Returns the activation key of the manager.
   * @param resourceGroupName The resource group name
   * @param managerName The manager name
   * @param options The options parameters.
   */
  getActivationKey(
    resourceGroupName: string,
    managerName: string,
    options?: ManagersGetActivationKeyOptionalParams
  ): Promise<ManagersGetActivationKeyResponse>;
  /**
   * Returns the symmetric encrypted public encryption key of the manager.
   * @param resourceGroupName The resource group name
   * @param managerName The manager name
   * @param options The options parameters.
   */
  getPublicEncryptionKey(
    resourceGroupName: string,
    managerName: string,
    options?: ManagersGetPublicEncryptionKeyOptionalParams
  ): Promise<ManagersGetPublicEncryptionKeyResponse>;
  /**
   * Re-generates and returns the activation key of the manager.
   * @param resourceGroupName The resource group name
   * @param managerName The manager name
   * @param options The options parameters.
   */
  regenerateActivationKey(
    resourceGroupName: string,
    managerName: string,
    options?: ManagersRegenerateActivationKeyOptionalParams
  ): Promise<ManagersRegenerateActivationKeyResponse>;
}
