/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */

import { PagedAsyncIterableIterator } from "@azure/core-paging";
import { PollerLike, PollOperationState } from "@azure/core-lro";
import {
  Device,
  DevicesListByManagerOptionalParams,
  FailoverSet,
  DevicesListFailoverSetsOptionalParams,
  Metrics,
  DevicesListMetricsOptionalParams,
  MetricDefinition,
  DevicesListMetricDefinitionOptionalParams,
  FailoverTarget,
  ListFailoverTargetsRequest,
  DevicesListFailoverTargetsOptionalParams,
  ConfigureDeviceRequest,
  DevicesConfigureOptionalParams,
  DevicesGetOptionalParams,
  DevicesGetResponse,
  DevicesDeleteOptionalParams,
  DevicePatch,
  DevicesUpdateOptionalParams,
  DevicesUpdateResponse,
  DevicesAuthorizeForServiceEncryptionKeyRolloverOptionalParams,
  DevicesDeactivateOptionalParams,
  DevicesInstallUpdatesOptionalParams,
  DevicesScanForUpdatesOptionalParams,
  DevicesGetUpdateSummaryOptionalParams,
  DevicesGetUpdateSummaryResponse,
  FailoverRequest,
  DevicesFailoverOptionalParams
} from "../models";

/// <reference lib="esnext.asynciterable" />
/** Interface representing a Devices. */
export interface Devices {
  /**
   * Returns the list of devices for the specified manager.
   * @param resourceGroupName The resource group name
   * @param managerName The manager name
   * @param options The options parameters.
   */
  listByManager(
    resourceGroupName: string,
    managerName: string,
    options?: DevicesListByManagerOptionalParams
  ): PagedAsyncIterableIterator<Device>;
  /**
   * Returns all failover sets for a given device and their eligibility for participating in a failover.
   * A failover set refers to a set of volume containers that need to be failed-over as a single unit to
   * maintain data integrity.
   * @param deviceName The device name
   * @param resourceGroupName The resource group name
   * @param managerName The manager name
   * @param options The options parameters.
   */
  listFailoverSets(
    deviceName: string,
    resourceGroupName: string,
    managerName: string,
    options?: DevicesListFailoverSetsOptionalParams
  ): PagedAsyncIterableIterator<FailoverSet>;
  /**
   * Gets the metrics for the specified device.
   * @param deviceName The device name
   * @param resourceGroupName The resource group name
   * @param managerName The manager name
   * @param filter OData Filter options
   * @param options The options parameters.
   */
  listMetrics(
    deviceName: string,
    resourceGroupName: string,
    managerName: string,
    filter: string,
    options?: DevicesListMetricsOptionalParams
  ): PagedAsyncIterableIterator<Metrics>;
  /**
   * Gets the metric definitions for the specified device.
   * @param deviceName The device name
   * @param resourceGroupName The resource group name
   * @param managerName The manager name
   * @param options The options parameters.
   */
  listMetricDefinition(
    deviceName: string,
    resourceGroupName: string,
    managerName: string,
    options?: DevicesListMetricDefinitionOptionalParams
  ): PagedAsyncIterableIterator<MetricDefinition>;
  /**
   * Given a list of volume containers to be failed over from a source device, this method returns the
   * eligibility result, as a failover target, for all devices under that resource.
   * @param sourceDeviceName The source device name on which failover is performed.
   * @param resourceGroupName The resource group name
   * @param managerName The manager name
   * @param parameters ListFailoverTargetsRequest containing the list of volume containers to be failed
   *                   over.
   * @param options The options parameters.
   */
  listFailoverTargets(
    sourceDeviceName: string,
    resourceGroupName: string,
    managerName: string,
    parameters: ListFailoverTargetsRequest,
    options?: DevicesListFailoverTargetsOptionalParams
  ): PagedAsyncIterableIterator<FailoverTarget>;
  /**
   * Complete minimal setup before using the device.
   * @param resourceGroupName The resource group name
   * @param managerName The manager name
   * @param parameters The minimal properties to configure a device.
   * @param options The options parameters.
   */
  beginConfigure(
    resourceGroupName: string,
    managerName: string,
    parameters: ConfigureDeviceRequest,
    options?: DevicesConfigureOptionalParams
  ): Promise<PollerLike<PollOperationState<void>, void>>;
  /**
   * Complete minimal setup before using the device.
   * @param resourceGroupName The resource group name
   * @param managerName The manager name
   * @param parameters The minimal properties to configure a device.
   * @param options The options parameters.
   */
  beginConfigureAndWait(
    resourceGroupName: string,
    managerName: string,
    parameters: ConfigureDeviceRequest,
    options?: DevicesConfigureOptionalParams
  ): Promise<void>;
  /**
   * Returns the properties of the specified device.
   * @param deviceName The device name
   * @param resourceGroupName The resource group name
   * @param managerName The manager name
   * @param options The options parameters.
   */
  get(
    deviceName: string,
    resourceGroupName: string,
    managerName: string,
    options?: DevicesGetOptionalParams
  ): Promise<DevicesGetResponse>;
  /**
   * Deletes the device.
   * @param deviceName The device name
   * @param resourceGroupName The resource group name
   * @param managerName The manager name
   * @param options The options parameters.
   */
  beginDelete(
    deviceName: string,
    resourceGroupName: string,
    managerName: string,
    options?: DevicesDeleteOptionalParams
  ): Promise<PollerLike<PollOperationState<void>, void>>;
  /**
   * Deletes the device.
   * @param deviceName The device name
   * @param resourceGroupName The resource group name
   * @param managerName The manager name
   * @param options The options parameters.
   */
  beginDeleteAndWait(
    deviceName: string,
    resourceGroupName: string,
    managerName: string,
    options?: DevicesDeleteOptionalParams
  ): Promise<void>;
  /**
   * Patches the device.
   * @param deviceName The device name
   * @param resourceGroupName The resource group name
   * @param managerName The manager name
   * @param parameters Patch representation of the device.
   * @param options The options parameters.
   */
  update(
    deviceName: string,
    resourceGroupName: string,
    managerName: string,
    parameters: DevicePatch,
    options?: DevicesUpdateOptionalParams
  ): Promise<DevicesUpdateResponse>;
  /**
   * Authorizes the specified device for service data encryption key rollover.
   * @param deviceName The device name
   * @param resourceGroupName The resource group name
   * @param managerName The manager name
   * @param options The options parameters.
   */
  authorizeForServiceEncryptionKeyRollover(
    deviceName: string,
    resourceGroupName: string,
    managerName: string,
    options?: DevicesAuthorizeForServiceEncryptionKeyRolloverOptionalParams
  ): Promise<void>;
  /**
   * Deactivates the device.
   * @param deviceName The device name
   * @param resourceGroupName The resource group name
   * @param managerName The manager name
   * @param options The options parameters.
   */
  beginDeactivate(
    deviceName: string,
    resourceGroupName: string,
    managerName: string,
    options?: DevicesDeactivateOptionalParams
  ): Promise<PollerLike<PollOperationState<void>, void>>;
  /**
   * Deactivates the device.
   * @param deviceName The device name
   * @param resourceGroupName The resource group name
   * @param managerName The manager name
   * @param options The options parameters.
   */
  beginDeactivateAndWait(
    deviceName: string,
    resourceGroupName: string,
    managerName: string,
    options?: DevicesDeactivateOptionalParams
  ): Promise<void>;
  /**
   * Downloads and installs the updates on the device.
   * @param deviceName The device name
   * @param resourceGroupName The resource group name
   * @param managerName The manager name
   * @param options The options parameters.
   */
  beginInstallUpdates(
    deviceName: string,
    resourceGroupName: string,
    managerName: string,
    options?: DevicesInstallUpdatesOptionalParams
  ): Promise<PollerLike<PollOperationState<void>, void>>;
  /**
   * Downloads and installs the updates on the device.
   * @param deviceName The device name
   * @param resourceGroupName The resource group name
   * @param managerName The manager name
   * @param options The options parameters.
   */
  beginInstallUpdatesAndWait(
    deviceName: string,
    resourceGroupName: string,
    managerName: string,
    options?: DevicesInstallUpdatesOptionalParams
  ): Promise<void>;
  /**
   * Scans for updates on the device.
   * @param deviceName The device name
   * @param resourceGroupName The resource group name
   * @param managerName The manager name
   * @param options The options parameters.
   */
  beginScanForUpdates(
    deviceName: string,
    resourceGroupName: string,
    managerName: string,
    options?: DevicesScanForUpdatesOptionalParams
  ): Promise<PollerLike<PollOperationState<void>, void>>;
  /**
   * Scans for updates on the device.
   * @param deviceName The device name
   * @param resourceGroupName The resource group name
   * @param managerName The manager name
   * @param options The options parameters.
   */
  beginScanForUpdatesAndWait(
    deviceName: string,
    resourceGroupName: string,
    managerName: string,
    options?: DevicesScanForUpdatesOptionalParams
  ): Promise<void>;
  /**
   * Returns the update summary of the specified device name.
   * @param deviceName The device name
   * @param resourceGroupName The resource group name
   * @param managerName The manager name
   * @param options The options parameters.
   */
  getUpdateSummary(
    deviceName: string,
    resourceGroupName: string,
    managerName: string,
    options?: DevicesGetUpdateSummaryOptionalParams
  ): Promise<DevicesGetUpdateSummaryResponse>;
  /**
   * Failovers a set of volume containers from a specified source device to a target device.
   * @param sourceDeviceName The source device name on which failover is performed.
   * @param resourceGroupName The resource group name
   * @param managerName The manager name
   * @param parameters FailoverRequest containing the source device and the list of volume containers to
   *                   be failed over.
   * @param options The options parameters.
   */
  beginFailover(
    sourceDeviceName: string,
    resourceGroupName: string,
    managerName: string,
    parameters: FailoverRequest,
    options?: DevicesFailoverOptionalParams
  ): Promise<PollerLike<PollOperationState<void>, void>>;
  /**
   * Failovers a set of volume containers from a specified source device to a target device.
   * @param sourceDeviceName The source device name on which failover is performed.
   * @param resourceGroupName The resource group name
   * @param managerName The manager name
   * @param parameters FailoverRequest containing the source device and the list of volume containers to
   *                   be failed over.
   * @param options The options parameters.
   */
  beginFailoverAndWait(
    sourceDeviceName: string,
    resourceGroupName: string,
    managerName: string,
    parameters: FailoverRequest,
    options?: DevicesFailoverOptionalParams
  ): Promise<void>;
}
