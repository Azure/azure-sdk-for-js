/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */

import {
  OperationParameter,
  OperationURLParameter,
  OperationQueryParameter
} from "@azure/core-client";
import {
  Manager as ManagerMapper,
  ManagerPatch as ManagerPatchMapper,
  ManagerExtendedInfo as ManagerExtendedInfoMapper,
  AccessControlRecord as AccessControlRecordMapper,
  ClearAlertRequest as ClearAlertRequestMapper,
  SendTestAlertEmailRequest as SendTestAlertEmailRequestMapper,
  BandwidthSetting as BandwidthSettingMapper,
  CloudAppliance as CloudApplianceMapper,
  ConfigureDeviceRequest as ConfigureDeviceRequestMapper,
  DevicePatch as DevicePatchMapper,
  FailoverRequest as FailoverRequestMapper,
  ListFailoverTargetsRequest as ListFailoverTargetsRequestMapper,
  AlertSettings as AlertSettingsMapper,
  NetworkSettingsPatch as NetworkSettingsPatchMapper,
  SecuritySettingsPatch as SecuritySettingsPatchMapper,
  TimeSettings as TimeSettingsMapper,
  BackupPolicy as BackupPolicyMapper,
  BackupSchedule as BackupScheduleMapper,
  CloneRequest as CloneRequestMapper,
  ControllerPowerStateChangeRequest as ControllerPowerStateChangeRequestMapper,
  VolumeContainer as VolumeContainerMapper,
  Volume as VolumeMapper,
  StorageAccountCredential as StorageAccountCredentialMapper
} from "../models/mappers";

export const accept: OperationParameter = {
  parameterPath: "accept",
  mapper: {
    defaultValue: "application/json",
    isConstant: true,
    serializedName: "Accept",
    type: {
      name: "String"
    }
  }
};

export const $host: OperationURLParameter = {
  parameterPath: "$host",
  mapper: {
    serializedName: "$host",
    required: true,
    type: {
      name: "String"
    }
  },
  skipEncoding: true
};

export const apiVersion: OperationQueryParameter = {
  parameterPath: "apiVersion",
  mapper: {
    defaultValue: "2017-06-01",
    isConstant: true,
    serializedName: "api-version",
    type: {
      name: "String"
    }
  }
};

export const nextLink: OperationURLParameter = {
  parameterPath: "nextLink",
  mapper: {
    serializedName: "nextLink",
    required: true,
    type: {
      name: "String"
    }
  },
  skipEncoding: true
};

export const subscriptionId: OperationURLParameter = {
  parameterPath: "subscriptionId",
  mapper: {
    serializedName: "subscriptionId",
    required: true,
    type: {
      name: "String"
    }
  },
  skipEncoding: true
};

export const resourceGroupName: OperationURLParameter = {
  parameterPath: "resourceGroupName",
  mapper: {
    serializedName: "resourceGroupName",
    required: true,
    type: {
      name: "String"
    }
  },
  skipEncoding: true
};

export const managerName: OperationURLParameter = {
  parameterPath: "managerName",
  mapper: {
    constraints: {
      MaxLength: 50,
      MinLength: 2
    },
    serializedName: "managerName",
    required: true,
    type: {
      name: "String"
    }
  },
  skipEncoding: true
};

export const contentType: OperationParameter = {
  parameterPath: ["options", "contentType"],
  mapper: {
    defaultValue: "application/json",
    isConstant: true,
    serializedName: "Content-Type",
    type: {
      name: "String"
    }
  }
};

export const parameters: OperationParameter = {
  parameterPath: "parameters",
  mapper: ManagerMapper
};

export const parameters1: OperationParameter = {
  parameterPath: "parameters",
  mapper: ManagerPatchMapper
};

export const deviceName: OperationURLParameter = {
  parameterPath: "deviceName",
  mapper: {
    serializedName: "deviceName",
    required: true,
    type: {
      name: "String"
    }
  },
  skipEncoding: true
};

export const parameters2: OperationParameter = {
  parameterPath: "parameters",
  mapper: ManagerExtendedInfoMapper
};

export const ifMatch: OperationParameter = {
  parameterPath: "ifMatch",
  mapper: {
    serializedName: "If-Match",
    required: true,
    type: {
      name: "String"
    }
  }
};

export const filter: OperationQueryParameter = {
  parameterPath: ["options", "filter"],
  mapper: {
    serializedName: "$filter",
    type: {
      name: "String"
    }
  }
};

export const filter1: OperationQueryParameter = {
  parameterPath: "filter",
  mapper: {
    serializedName: "$filter",
    required: true,
    type: {
      name: "String"
    }
  }
};

export const accessControlRecordName: OperationURLParameter = {
  parameterPath: "accessControlRecordName",
  mapper: {
    serializedName: "accessControlRecordName",
    required: true,
    type: {
      name: "String"
    }
  },
  skipEncoding: true
};

export const parameters3: OperationParameter = {
  parameterPath: "parameters",
  mapper: AccessControlRecordMapper
};

export const parameters4: OperationParameter = {
  parameterPath: "parameters",
  mapper: ClearAlertRequestMapper
};

export const parameters5: OperationParameter = {
  parameterPath: "parameters",
  mapper: SendTestAlertEmailRequestMapper
};

export const bandwidthSettingName: OperationURLParameter = {
  parameterPath: "bandwidthSettingName",
  mapper: {
    serializedName: "bandwidthSettingName",
    required: true,
    type: {
      name: "String"
    }
  },
  skipEncoding: true
};

export const parameters6: OperationParameter = {
  parameterPath: "parameters",
  mapper: BandwidthSettingMapper
};

export const parameters7: OperationParameter = {
  parameterPath: "parameters",
  mapper: CloudApplianceMapper
};

export const parameters8: OperationParameter = {
  parameterPath: "parameters",
  mapper: ConfigureDeviceRequestMapper
};

export const expand: OperationQueryParameter = {
  parameterPath: ["options", "expand"],
  mapper: {
    serializedName: "$expand",
    type: {
      name: "String"
    }
  }
};

export const parameters9: OperationParameter = {
  parameterPath: "parameters",
  mapper: DevicePatchMapper
};

export const parameters10: OperationParameter = {
  parameterPath: "parameters",
  mapper: FailoverRequestMapper
};

export const sourceDeviceName: OperationURLParameter = {
  parameterPath: "sourceDeviceName",
  mapper: {
    serializedName: "sourceDeviceName",
    required: true,
    type: {
      name: "String"
    }
  },
  skipEncoding: true
};

export const parameters11: OperationParameter = {
  parameterPath: "parameters",
  mapper: ListFailoverTargetsRequestMapper
};

export const parameters12: OperationParameter = {
  parameterPath: "parameters",
  mapper: AlertSettingsMapper
};

export const parameters13: OperationParameter = {
  parameterPath: "parameters",
  mapper: NetworkSettingsPatchMapper
};

export const parameters14: OperationParameter = {
  parameterPath: "parameters",
  mapper: SecuritySettingsPatchMapper
};

export const parameters15: OperationParameter = {
  parameterPath: "parameters",
  mapper: TimeSettingsMapper
};

export const backupPolicyName: OperationURLParameter = {
  parameterPath: "backupPolicyName",
  mapper: {
    serializedName: "backupPolicyName",
    required: true,
    type: {
      name: "String"
    }
  },
  skipEncoding: true
};

export const parameters16: OperationParameter = {
  parameterPath: "parameters",
  mapper: BackupPolicyMapper
};

export const backupType: OperationQueryParameter = {
  parameterPath: "backupType",
  mapper: {
    serializedName: "backupType",
    required: true,
    type: {
      name: "String"
    }
  },
  skipEncoding: true
};

export const backupScheduleName: OperationURLParameter = {
  parameterPath: "backupScheduleName",
  mapper: {
    serializedName: "backupScheduleName",
    required: true,
    type: {
      name: "String"
    }
  },
  skipEncoding: true
};

export const parameters17: OperationParameter = {
  parameterPath: "parameters",
  mapper: BackupScheduleMapper
};

export const backupName: OperationURLParameter = {
  parameterPath: "backupName",
  mapper: {
    serializedName: "backupName",
    required: true,
    type: {
      name: "String"
    }
  },
  skipEncoding: true
};

export const parameters18: OperationParameter = {
  parameterPath: "parameters",
  mapper: CloneRequestMapper
};

export const backupElementName: OperationURLParameter = {
  parameterPath: "backupElementName",
  mapper: {
    serializedName: "backupElementName",
    required: true,
    type: {
      name: "String"
    }
  },
  skipEncoding: true
};

export const parameters19: OperationParameter = {
  parameterPath: "parameters",
  mapper: ControllerPowerStateChangeRequestMapper
};

export const hardwareComponentGroupName: OperationURLParameter = {
  parameterPath: "hardwareComponentGroupName",
  mapper: {
    serializedName: "hardwareComponentGroupName",
    required: true,
    type: {
      name: "String"
    }
  },
  skipEncoding: true
};

export const jobName: OperationURLParameter = {
  parameterPath: "jobName",
  mapper: {
    serializedName: "jobName",
    required: true,
    type: {
      name: "String"
    }
  },
  skipEncoding: true
};

export const volumeContainerName: OperationURLParameter = {
  parameterPath: "volumeContainerName",
  mapper: {
    serializedName: "volumeContainerName",
    required: true,
    type: {
      name: "String"
    }
  },
  skipEncoding: true
};

export const parameters20: OperationParameter = {
  parameterPath: "parameters",
  mapper: VolumeContainerMapper
};

export const volumeName: OperationURLParameter = {
  parameterPath: "volumeName",
  mapper: {
    serializedName: "volumeName",
    required: true,
    type: {
      name: "String"
    }
  },
  skipEncoding: true
};

export const parameters21: OperationParameter = {
  parameterPath: "parameters",
  mapper: VolumeMapper
};

export const storageAccountCredentialName: OperationURLParameter = {
  parameterPath: "storageAccountCredentialName",
  mapper: {
    serializedName: "storageAccountCredentialName",
    required: true,
    type: {
      name: "String"
    }
  },
  skipEncoding: true
};

export const parameters22: OperationParameter = {
  parameterPath: "parameters",
  mapper: StorageAccountCredentialMapper
};
