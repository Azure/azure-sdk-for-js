/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */

import * as coreClient from "@azure/core-client";

/** List of available provider operations. */
export interface AvailableProviderOperationList {
  /** The value. */
  value: AvailableProviderOperation[];
  /** The NextLink. */
  nextLink?: string;
}

/** Represents available provider operation. */
export interface AvailableProviderOperation {
  /** The name of the operation being performed on a particular object. Name format: "{resourceProviderNamespace}/{resourceType}/{read|write|delete|action}". Eg. Microsoft.StorSimple/managers/devices/volumeContainers/read, Microsoft.StorSimple/managers/devices/alerts/clearAlerts/action */
  name?: string;
  /** Contains the localized display information for this particular operation/action. */
  display?: AvailableProviderOperationDisplay;
  /** The intended executor of the operation; governs the display of the operation in the RBAC UX and the audit logs UX. Default value is "user,system" */
  origin?: string;
  /** Reserved for future use. */
  properties?: Record<string, unknown>;
}

/** Contains the localized display information for this particular operation/action. These value will be used by several clients for (a) custom role definitions for RBAC, (b) complex query filters for the event service and (c) audit history/records for management operations. */
export interface AvailableProviderOperationDisplay {
  /** The localized friendly form of the resource provider name - it is expected to also include the publisher/company responsible. It should use Title Casing and begin with 'Microsoft' for 1st party services. */
  provider?: string;
  /** The localized friendly form of the resource type related to this action/operation - it should match the public documentation for the resource provider. It should use Title Casing - for examples, please refer to the 'name' section. */
  resource?: string;
  /** The localized friendly name for the operation, as it should be shown to the user. It should be concise (to fit in drop downs) but clear (i.e. self-documenting). It should use Title Casing and include the entity/resource to which it applies. */
  operation?: string;
  /** The localized friendly description for the operation, as it should be shown to the user. It should be thorough, yet concise - it will be used in tool tips and detailed views. */
  description?: string;
}

/** The list of StorSimple Managers. */
export interface ManagerList {
  /** The list of StorSimple managers. */
  value: Manager[];
}

/** Intrinsic settings which refers to the type of the StorSimple Manager. */
export interface ManagerIntrinsicSettings {
  /** The type of StorSimple Manager. */
  type: ManagerType;
}

/** The Sku. */
export interface ManagerSku {
  /** Refers to the sku name which should be "Standard" */
  name: "Standard";
}

/** The Azure Resource. */
export interface Resource {
  /**
   * The resource ID.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly id?: string;
  /**
   * The resource name.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly name?: string;
  /**
   * The resource type.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly type?: string;
  /** The geo location of the resource. */
  location: string;
  /** The tags attached to the resource. */
  tags?: { [propertyName: string]: string };
}

/** The StorSimple Manager patch. */
export interface ManagerPatch {
  /** The tags attached to the Manager. */
  tags?: { [propertyName: string]: string };
}

/** The collection of access control records. */
export interface AccessControlRecordList {
  /** The value. */
  value: AccessControlRecord[];
}

/** Represents the base class for all other ARM object models */
export interface BaseModel {
  /**
   * The path ID that uniquely identifies the object.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly id?: string;
  /**
   * The name of the object.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly name?: string;
  /**
   * The hierarchical type of the object.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly type?: string;
  /** The Kind of the object. Currently only Series8000 is supported */
  kind?: "Series8000";
}

/** The collection of alerts. */
export interface AlertList {
  /** The value. */
  value: Alert[];
  /** The URI of the next page of alerts. */
  nextLink?: string;
}

/** The source details at which the alert was raised */
export interface AlertSource {
  /** The name of the source */
  name?: string;
  /** The time zone of the source */
  timeZone?: string;
  /** The source type of the alert */
  alertSourceType?: AlertSourceType;
}

/** The details of the error for which the alert was raised */
export interface AlertErrorDetails {
  /** The error code */
  errorCode?: string;
  /** The error message */
  errorMessage?: string;
  /** The number of occurrences */
  occurences?: number;
}

/** The collection of bandwidth setting entities. */
export interface BandwidthSettingList {
  /** The value. */
  value: BandwidthSetting[];
}

/** The schedule for bandwidth setting. */
export interface BandwidthSchedule {
  /** The start time of the schedule. */
  start: Time;
  /** The stop time of the schedule. */
  stop: Time;
  /** The rate in Mbps. */
  rateInMbps: number;
  /** The days of the week when this schedule is applicable. */
  days: DayOfWeek[];
}

/** The time. */
export interface Time {
  /** The hour. */
  hours: number;
  /** The minute. */
  minutes: number;
  /** The second. */
  seconds: number;
}

/** The request for clearing the alert */
export interface ClearAlertRequest {
  /** The resolution message while clearing the alert */
  resolutionMessage?: string;
  /** The list of alert IDs to be cleared */
  alerts: string[];
}

/** The cloud appliance configuration list */
export interface CloudApplianceConfigurationList {
  /** The value. */
  value: CloudApplianceConfiguration[];
}

/** The ACS configuration. */
export interface AcsConfiguration {
  /** The namespace. */
  namespace: string;
  /** The realm. */
  realm: string;
  /** The service URL. */
  serviceUrl: string;
}

/** The virtual machine image. */
export interface VmImage {
  /** The name. */
  name: string;
  /** The version. */
  version: string;
  /** The offer. */
  offer: string;
  /** The publisher. */
  publisher: string;
  /** The SKU. */
  sku: string;
}

/** The secondary DNS settings. */
export interface SecondaryDNSSettings {
  /** The list of secondary DNS Server IP addresses. */
  secondaryDnsServers?: string[];
}

/** The 'Data 0' network interface card settings. */
export interface NetworkInterfaceData0Settings {
  /** The controller 0's IPv4 address. */
  controllerZeroIp?: string;
  /** The controller 1's IPv4 address. */
  controllerOneIp?: string;
}

/** The collection of devices. */
export interface DeviceList {
  /** The value. */
  value: Device[];
}

/** The additional device details regarding the end point count and volume container count. */
export interface DeviceDetails {
  /** The total number of endpoints that are currently on the device ( i.e. number of volumes). */
  endpointCount?: number;
  /** The total number of volume containers on the device. */
  volumeContainerCount?: number;
}

/** The additional device details for the service data encryption key rollover. */
export interface DeviceRolloverDetails {
  /** The eligibility status of device for service data encryption key rollover. */
  authorizationEligibility?: AuthorizationEligibility;
  /** The authorization status of the device for service data encryption key rollover. */
  authorizationStatus?: AuthorizationStatus;
  /** The reason for inEligibility of device, in case it's not eligible for service data encryption key rollover. */
  inEligibilityReason?: InEligibilityCategory;
}

/** The device patch. */
export interface DevicePatch {
  /** Short description given for the device */
  deviceDescription?: string;
}

/** The collection of backup policies. */
export interface BackupPolicyList {
  /** The value. */
  value: BackupPolicy[];
}

/** The backup schedule list. */
export interface BackupScheduleList {
  /** The value. */
  value: BackupSchedule[];
}

/** The schedule recurrence. */
export interface ScheduleRecurrence {
  /** The recurrence type. */
  recurrenceType: RecurrenceType;
  /** The recurrence value. */
  recurrenceValue: number;
  /** The week days list. Applicable only for schedules of recurrence type 'weekly'. */
  weeklyDaysList?: DayOfWeek[];
}

/** The collection of backups. */
export interface BackupList {
  /** The value. */
  value: Backup[];
  /** The NextLink. */
  nextLink?: string;
}

/** The backup element. */
export interface BackupElement {
  /** The path ID that uniquely identifies the backup element. */
  elementId: string;
  /** The name of the backup element. */
  elementName: string;
  /** The hierarchical type of the backup element. */
  elementType: string;
  /** The size in bytes. */
  sizeInBytes: number;
  /** The name of the volume. */
  volumeName: string;
  /** The path ID of the volume container. */
  volumeContainerId: string;
  /** The volume type. */
  volumeType?: VolumeType;
}

/** The clone job request. */
export interface CloneRequest {
  /** The path ID of the device which will act as the clone target. */
  targetDeviceId: string;
  /** The name of the new volume which will be created and the backup will be cloned into. */
  targetVolumeName: string;
  /** The list of path IDs of the access control records to be associated to the new cloned volume. */
  targetAccessControlRecordIds: string[];
  /** The backup element that is cloned. */
  backupElement: BackupElement;
}

/** The collection of hardware component groups. */
export interface HardwareComponentGroupList {
  /** The value. */
  value: HardwareComponentGroup[];
}

/** The hardware component. */
export interface HardwareComponent {
  /** The component ID. */
  componentId: string;
  /** The display name of the hardware component. */
  displayName: string;
  /** The status of the hardware component. */
  status: HardwareComponentStatus;
  /** The display name of the status of hardware component. */
  statusDisplayName: string;
}

/** The collection of jobs. */
export interface JobList {
  /** The value. */
  value: Job[];
  /** The NextLink. */
  nextLink?: string;
}

/** The job error details. Contains list of job error items. */
export interface JobErrorDetails {
  /** The error details. */
  errorDetails?: JobErrorItem[];
  /** The error code intended for programmatic access. */
  code: string;
  /** The error message intended to describe the error in detail. */
  message: string;
}

/** The job error items. */
export interface JobErrorItem {
  /** The recommended actions. */
  recommendations?: string[];
  /** The error code intended for programmatic access. */
  code: string;
  /** The error message intended to describe the error in detail. */
  message: string;
}

/** The additional details related to the data related statistics of a job. Currently applicable only for Backup, Clone and Restore jobs. */
export interface DataStatistics {
  /** The total bytes of data to be processed, as part of the job. */
  totalData?: number;
  /** The number of bytes of data processed till now, as part of the job. */
  processedData?: number;
  /** The number of bytes of data written to cloud, as part of the job. */
  cloudData?: number;
  /** The average throughput of data processed(bytes/sec), as part of the job. */
  throughput?: number;
}

/** The details about the specific stage of a job. */
export interface JobStage {
  /** The message of the job stage. */
  message?: string;
  /** The stage status. */
  stageStatus: JobStatus;
  /** The details of the stage. */
  detail?: string;
  /** The error code of the stage if any. */
  errorCode?: string;
}

/** The list of failover sets. */
export interface FailoverSetsList {
  /** The list of failover sets. */
  value?: FailoverSet[];
}

/** The failover set on a device. */
export interface FailoverSet {
  /** The list of meta data of volume containers, which are part of the failover set. */
  volumeContainers?: VolumeContainerFailoverMetadata[];
  /** The eligibility result of the failover set, for failover. */
  eligibilityResult?: FailoverSetEligibilityResult;
}

/** The metadata of the volume container, that is being considered as part of a failover set. */
export interface VolumeContainerFailoverMetadata {
  /** The path ID of the volume container. */
  volumeContainerId?: string;
  /** The list of metadata of volumes inside the volume container, which contains valid cloud snapshots. */
  volumes?: VolumeFailoverMetadata[];
}

/** The metadata of a volume that has valid cloud snapshot. */
export interface VolumeFailoverMetadata {
  /** The path ID of the volume. */
  volumeId?: string;
  /** The type of the volume. */
  volumeType?: VolumeType;
  /** The size of the volume in bytes at the time the snapshot was taken. */
  sizeInBytes?: number;
  /** The date at which the snapshot was taken. */
  backupCreatedDate?: Date;
  /** The path ID of the backup-element for this volume, inside the backup set. */
  backupElementId?: string;
  /** The path ID of the backup set. */
  backupId?: string;
  /** The path ID of the backup policy using which the snapshot was taken. */
  backupPolicyId?: string;
}

/** The eligibility result of failover set, for failover. */
export interface FailoverSetEligibilityResult {
  /** Represents if this failover set is eligible for failover or not. */
  isEligibleForFailover?: boolean;
  /** The error message, if the failover set is not eligible for failover. */
  errorMessage?: string;
}

/** The metric list. */
export interface MetricList {
  /** The value. */
  value?: Metrics[];
}

/** The monitoring metric. */
export interface Metrics {
  /** The ID of metric source. */
  resourceId?: string;
  /** The start time of the metric data. */
  startTime?: Date;
  /** The end time of the metric data. */
  endTime?: Date;
  /** The time granularity of the metric data. */
  timeGrain?: string;
  /** The metric aggregation type. */
  primaryAggregation?: MetricAggregationType;
  /** The name of the metric. */
  name?: MetricName;
  /** The metric dimensions. */
  dimensions?: MetricDimension[];
  /** The unit of the metric data. */
  unit?: MetricUnit;
  /** The type of the metric data. */
  type?: string;
  /** The list of the metric data. */
  values?: MetricData[];
}

/** The metric name. */
export interface MetricName {
  /** The metric name. */
  value?: string;
  /** The localized metric name. */
  localizedValue?: string;
}

/** The metric dimension. It indicates the source of the metric. */
export interface MetricDimension {
  /** The metric dimension name. */
  name?: string;
  /** The metric dimension values. */
  value?: string;
}

/** The metric data. */
export interface MetricData {
  /** The time stamp of the metric data. */
  timeStamp?: Date;
  /** The sum of all samples at the time stamp. */
  sum?: number;
  /** The count of all samples at the time stamp. */
  count?: number;
  /** The average of all samples at the time stamp. */
  average?: number;
  /** The minimum of all samples at the time stamp. */
  minimum?: number;
  /** The maximum of all samples at the time stamp. */
  maximum?: number;
}

/** The list of metric definitions. */
export interface MetricDefinitionList {
  /** The list of metric definitions. */
  value?: MetricDefinition[];
}

/** The monitoring metric definition. */
export interface MetricDefinition {
  /** The metric name. */
  name?: MetricName;
  /** The metric unit. */
  unit?: MetricUnit;
  /** The metric aggregation type. */
  primaryAggregationType?: MetricAggregationType;
  /** The metric source ID. */
  resourceId?: string;
  /** The available metric granularities. */
  metricAvailabilities?: MetricAvailablity[];
  /** The available metric dimensions. */
  dimensions?: MetricDimension[];
  /** The category of the metric. */
  category?: string;
  /** The metric definition type. */
  type?: string;
}

/** The metric availability. */
export interface MetricAvailablity {
  /** The aggregation interval for the metric. */
  timeGrain?: string;
  /** The retention period for the metric at the specified timegrain. */
  retention?: string;
}

/** The DNS(Domain Name Server) settings of a device. */
export interface DNSSettings {
  /** The primary IPv4 DNS server for the device */
  primaryDnsServer?: string;
  /** The primary IPv6 DNS server for the device */
  primaryIpv6DnsServer?: string;
  /** The secondary IPv4 DNS server for the device */
  secondaryDnsServers?: string[];
  /** The secondary IPv6 DNS server for the device */
  secondaryIpv6DnsServers?: string[];
}

/** The collection of network adapters on the device. */
export interface NetworkAdapterList {
  /** The value. */
  value: NetworkAdapters[];
}

/** Represents the network adapter on device. */
export interface NetworkAdapters {
  /** The ID of the network adapter. */
  interfaceId: NetInterfaceId;
  /** Value indicating status of network adapter. */
  netInterfaceStatus: NetInterfaceStatus;
  /** Value indicating whether this instance is default. */
  isDefault?: boolean;
  /** Value indicating cloud and ISCSI status of network adapter. */
  iscsiAndCloudStatus: IscsiAndCloudStatus;
  /** The speed of the network adapter. */
  speed?: number;
  /** The mode of network adapter, either IPv4, IPv6 or both. */
  mode: NetworkMode;
  /** The IPv4 configuration of the network adapter. */
  nicIpv4Settings?: NicIPv4;
  /** The IPv6 configuration of the network adapter. */
  nicIpv6Settings?: NicIPv6;
}

/** Details related to the IPv4 address configuration. */
export interface NicIPv4 {
  /** The IPv4 address of the network adapter. */
  ipv4Address?: string;
  /** The IPv4 netmask of the network adapter. */
  ipv4Netmask?: string;
  /** The IPv4 gateway of the network adapter. */
  ipv4Gateway?: string;
  /** The IPv4 address of Controller0. */
  controller0Ipv4Address?: string;
  /** The IPv4 address of Controller1. */
  controller1Ipv4Address?: string;
}

/** Details related to the IPv6 address configuration. */
export interface NicIPv6 {
  /** The IPv6 address of the network adapter. */
  ipv6Address?: string;
  /** The IPv6 prefix of the network adapter. */
  ipv6Prefix?: string;
  /** The IPv6 gateway of the network adapter. */
  ipv6Gateway?: string;
  /** The IPv6 address of Controller0. */
  controller0Ipv6Address?: string;
  /** The IPv6 address of Controller1. */
  controller1Ipv6Address?: string;
}

/** The web proxy settings on the device. */
export interface WebproxySettings {
  /** The connection URI. */
  connectionUri?: string;
  /** The authentication type. */
  authentication: AuthenticationType;
  /** The webproxy username. */
  username: string;
}

/** Represents the patch request for the network settings of a device. */
export interface NetworkSettingsPatch {
  /** The DNS (Domain Name System) settings of device. */
  dnsSettings?: DNSSettings;
  /** The network adapter list of device. */
  networkAdapters?: NetworkAdapterList;
}

/** The public key. */
export interface PublicKey {
  /** The key. */
  key: string;
}

/** The settings for remote management of a device. */
export interface RemoteManagementSettings {
  /** The remote management mode. */
  remoteManagementMode: RemoteManagementModeConfiguration;
  /** The remote management certificates. */
  remoteManagementCertificate?: string;
}

/** The Challenge-Handshake Authentication Protocol (CHAP) settings. */
export interface ChapSettings {
  /** The CHAP initiator user. */
  initiatorUser?: string;
  /** The CHAP initiator secret. */
  initiatorSecret?: AsymmetricEncryptedSecret;
  /** The CHAP target user. */
  targetUser?: string;
  /** The target secret. */
  targetSecret?: AsymmetricEncryptedSecret;
}

/** Represent the secrets intended for encryption with asymmetric key pair. */
export interface AsymmetricEncryptedSecret {
  /** The value of the secret. */
  value: string;
  /** Thumbprint certificate that was used to encrypt "Value". If the value in unencrypted, it will be null. */
  encryptionCertThumbprint?: string;
  /** The algorithm used to encrypt "Value". */
  encryptionAlgorithm: EncryptionAlgorithm;
}

/** Represents the patch request for the security settings of a device. */
export interface SecuritySettingsPatch {
  /** The remote management settings. */
  remoteManagementSettings?: RemoteManagementSettingsPatch;
  /** The device administrator password. */
  deviceAdminPassword?: AsymmetricEncryptedSecret;
  /** The snapshot manager password. */
  snapshotPassword?: AsymmetricEncryptedSecret;
  /** The device CHAP and reverse-CHAP settings. */
  chapSettings?: ChapSettings;
  /** The cloud appliance settings. */
  cloudApplianceSettings?: CloudApplianceSettings;
}

/** The settings for updating remote management mode of the device. */
export interface RemoteManagementSettingsPatch {
  /** The remote management mode. */
  remoteManagementMode: RemoteManagementModeConfiguration;
}

/** The cloud appliance settings. */
export interface CloudApplianceSettings {
  /** The service data encryption key (encrypted with DAK). */
  serviceDataEncryptionKey?: AsymmetricEncryptedSecret;
  /** The channel integrity key (encrypted with DAK). */
  channelIntegrityKey?: AsymmetricEncryptedSecret;
}

/** The request for sending test alert email */
export interface SendTestAlertEmailRequest {
  /** The list of email IDs to send the test alert email */
  emailList: string[];
}

/** The collection of volume container entities. */
export interface VolumeContainerList {
  /** The value. */
  value: VolumeContainer[];
}

/** The collection of volumes. */
export interface VolumeList {
  /** The value. */
  value: Volume[];
}

/** The request object for triggering a failover of volume containers, from a source device to a target device. */
export interface FailoverRequest {
  /** The ARM path ID of the device which will act as the failover target. */
  targetDeviceId?: string;
  /** The list of path IDs of the volume containers which needs to be failed-over to the target device. */
  volumeContainers?: string[];
}

/** The request object for fetching the list of failover targets (eligible devices for failover). */
export interface ListFailoverTargetsRequest {
  /** The list of path IDs of the volume containers that needs to be failed-over, for which we want to fetch the eligible targets. */
  volumeContainers?: string[];
}

/** The list of all devices in a resource and their eligibility status as a failover target device. */
export interface FailoverTargetsList {
  /** The list of all the failover targets. */
  value?: FailoverTarget[];
}

/** Represents the eligibility of a device as a failover target device. */
export interface FailoverTarget {
  /** The path ID of the device. */
  deviceId?: string;
  /** The status of the device. */
  deviceStatus?: DeviceStatus;
  /** The model number of the device. */
  modelDescription?: string;
  /** The software version of the device. */
  deviceSoftwareVersion?: string;
  /** The count of data containers on the device. */
  dataContainersCount?: number;
  /** The count of volumes on the device. */
  volumesCount?: number;
  /** The amount of free local storage available on the device in bytes. */
  availableLocalStorageInBytes?: number;
  /** The amount of free tiered storage available for the device in bytes. */
  availableTieredStorageInBytes?: number;
  /** The geo location (applicable only for cloud appliances) of the device. */
  deviceLocation?: string;
  /** The friendly name for the current version of software on the device. */
  friendlyDeviceSoftwareVersion?: string;
  /** The eligibility result of the device, as a failover target device. */
  eligibilityResult?: TargetEligibilityResult;
}

/** The eligibility result of device, as a failover target device. */
export interface TargetEligibilityResult {
  /** The eligibility status of device, as a failover target device. */
  eligibilityStatus?: TargetEligibilityStatus;
  /** The list of error messages, if a device does not qualify as a failover target device. */
  messages?: TargetEligibilityErrorMessage[];
}

/** The error/warning message due to which the device is ineligible as a failover target device. */
export interface TargetEligibilityErrorMessage {
  /** The localized error message stating the reason why the device is not eligible as a target device. */
  message?: string;
  /** The localized resolution message for the error. */
  resolution?: string;
  /** The result code for the error, due to which the device does not qualify as a failover target device. */
  resultCode?: TargetEligibilityResultCode;
}

/** The collections of features. */
export interface FeatureList {
  /** The value. */
  value: Feature[];
}

/** The feature. */
export interface Feature {
  /** The name of the feature. */
  name: string;
  /** The feature support status. */
  status: FeatureSupportStatus;
}

/** The key. */
export interface Key {
  /** The activation key for the device. */
  activationKey: string;
}

/** Represents the secrets encrypted using Symmetric Encryption Key. */
export interface SymmetricEncryptedSecret {
  /** The value of the secret itself. If the secret is in plaintext or null then EncryptionAlgorithm will be none. */
  value: string;
  /** The thumbprint of the cert that was used to encrypt "Value". */
  valueCertificateThumbprint?: string;
  /** The algorithm used to encrypt the "Value". */
  encryptionAlgorithm: EncryptionAlgorithm;
}

/** The cloud appliance. */
export interface CloudAppliance {
  /** The name. */
  name: string;
  /** The name of the virtual network. */
  vnetName?: string;
  /** The virtual network region. */
  vnetRegion: string;
  /** Indicates whether virtual network used is configured with DNS or not. */
  isVnetDnsConfigured?: boolean;
  /** Indicates whether virtual network used is configured with express route or not. */
  isVnetExpressConfigured?: boolean;
  /** The name of the subnet. */
  subnetName?: string;
  /** The name of the storage account. */
  storageAccountName?: string;
  /** The type of the storage account. */
  storageAccountType?: string;
  /** The type of the virtual machine. */
  vmType?: string;
  /** The name of the virtual machine image. */
  vmImageName?: string;
  /** The model number. */
  modelNumber?: string;
}

/** The collection of storage account credential entities. */
export interface StorageAccountCredentialList {
  /** The value. */
  value: StorageAccountCredential[];
}

/** The OData filters to be used for Alert */
export interface AlertFilter {
  /** Specifies the status of the alerts to be filtered. Only 'Equality' operator is supported for this property. */
  status?: AlertStatus;
  /** Specifies the severity of the alerts to be filtered. Only 'Equality' operator is supported for this property. */
  severity?: AlertSeverity;
  /** Specifies the source type of the alerts to be filtered. Only 'Equality' operator is supported for this property. */
  sourceType?: AlertSourceType;
  /** Specifies the source name of the alerts to be filtered. Only 'Equality' operator is supported for this property. */
  sourceName?: string;
  /** Specifies the appeared time (in UTC) of the alerts to be filtered. Only 'Greater-Than' and 'Lesser-Than' operators are supported for this property. */
  appearedOnTime?: Date;
}

/** The OData filters to be used for backups. */
export interface BackupFilter {
  /** Specifies the backupPolicyId of the backups to be filtered. Only 'Equality' operator is supported for this property. */
  backupPolicyId?: string;
  /** Specifies the volumeId of the backups to be filtered. Only 'Equality' operator is supported for this property. */
  volumeId?: string;
  /** Specifies the creation time of the backups to be filtered. Only 'Greater Than or Equal To' and 'Lesser Than or Equal To' operators are supported for this property. */
  createdTime?: Date;
}

/** The dimension filter. */
export interface DimensionFilter {
  /** Specifies the dimension name. E.g., NetworkInterface. Valid values are the ones specified in the field "dimensions" in the ListMetricDefinitions call. Only 'Equality' operator is supported for this property. */
  name?: string;
  /** Specifies the dimension value. E.g., Data0. Valid values are the ones returned in the field "dimensions" in the ListMetricDefinitions call. Only 'Equality' operator is supported for this property. */
  values?: string;
}

/** The OData filter to be used for features. */
export interface FeatureFilter {
  /** Specifies the device ID for which the features are required. Only 'Equality' operator is supported for this property. */
  deviceId?: string;
}

/** The OData filter to be used for jobs. */
export interface JobFilter {
  /** Specifies the status of the jobs to be filtered. For e.g., "Running", "Succeeded", "Failed" or "Canceled". Only 'Equality' operator is supported for this property. */
  status?: string;
  /** Specifies the type of the jobs to be filtered. For e.g., "ScheduledBackup", "ManualBackup", "RestoreBackup", "CloneVolume", "FailoverVolumeContainers", "CreateLocallyPinnedVolume", "ModifyVolume", "InstallUpdates", "SupportPackageLogs", or "CreateCloudAppliance". Only 'Equality' operator can be used for this property. */
  jobType?: string;
  /** Specifies the start time of the jobs to be filtered.  Only 'Greater Than or Equal To' and 'Lesser Than or Equal To' operators are supported for this property. */
  startTime?: Date;
}

/** The OData filters to be used for metrics. */
export interface MetricFilter {
  /** Specifies the metric name filter specifying the name of the metric to be filtered on. Only 'Equality' operator is supported for this property. */
  name?: MetricNameFilter;
  /** Specifies the start time of the time range to be queried. Only 'Greater Than Or Equal To' operator is supported for this property. */
  startTime?: Date;
  /** Specifies the end time of the time range to be queried. Only 'Less Than Or Equal To' operator is supported for this property. */
  endTime?: Date;
  /** Specifies the time granularity of the metrics to be returned. E.g., "P1D". Valid values are the ones returned as the field "timeGrain" in the ListMetricDefinitions call. Only 'Equality' operator is supported for this property. */
  timeGrain?: string;
  /** Specifies the category of the metrics to be filtered. E.g., "CapacityUtilization". Valid values are the ones returned as the field "category" in the ListMetricDefinitions call. Only 'Equality' operator is supported for this property. */
  category: string;
  /** Specifies the source(the dimension) of the metrics to be filtered. Only 'Equality' operator is supported for this property. */
  dimensions?: DimensionFilter;
}

/** The metric name filter, specifying the name of the metric to be filtered on. */
export interface MetricNameFilter {
  /** Specifies the metric name to be filtered on. E.g., CloudStorageUsed. Valid values are the ones returned in the field "name" in the ListMetricDefinitions call. Only 'Equality' operator is supported for this property. */
  value?: string;
}

/** The StorSimple Manager. */
export type Manager = Resource & {
  /** The etag of the manager. */
  etag?: string;
  /** Represents the type of StorSimple Manager. */
  cisIntrinsicSettings?: ManagerIntrinsicSettings;
  /** Specifies the Sku. */
  sku?: ManagerSku;
  /** Specifies the state of the resource as it is getting provisioned. Value of "Succeeded" means the Manager was successfully created. */
  provisioningState?: string;
};

/** The access control record. */
export type AccessControlRecord = BaseModel & {
  /** The iSCSI initiator name (IQN). */
  initiatorName: string;
  /**
   * The number of volumes using the access control record.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly volumeCount?: number;
};

/** The alert. */
export type Alert = BaseModel & {
  /** The title of the alert */
  title: string;
  /** The scope of the alert */
  scope: AlertScope;
  /** The type of the alert */
  alertType: string;
  /** The UTC time at which the alert was raised */
  appearedAtTime: Date;
  /** The source time at which the alert was raised */
  appearedAtSourceTime: Date;
  /** The UTC time at which the alert was cleared */
  clearedAtTime?: Date;
  /** The source time at which the alert was cleared */
  clearedAtSourceTime?: Date;
  /** The source at which the alert was raised */
  source: AlertSource;
  /** The recommended action for the issue raised in the alert */
  recommendation?: string;
  /** The reason for resolving the alert */
  resolutionReason?: string;
  /** The severity of the alert */
  severity: AlertSeverity;
  /** The current status of the alert */
  status: AlertStatus;
  /** The details of the error for which the alert was raised */
  errorDetails?: AlertErrorDetails;
  /** More details about the alert */
  detailedInformation?: { [propertyName: string]: string };
};

/** The bandwidth setting. */
export type BandwidthSetting = BaseModel & {
  /** The schedules. */
  schedules: BandwidthSchedule[];
  /**
   * The number of volumes that uses the bandwidth setting.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly volumeCount?: number;
};

/** The cloud appliance configuration */
export type CloudApplianceConfiguration = BaseModel & {
  /** The model number. */
  modelNumber: string;
  /** The cloud platform. */
  cloudPlatform: string;
  /** The ACS configuration. */
  acsConfiguration: AcsConfiguration;
  /** The supported storage account types. */
  supportedStorageAccountTypes: string[];
  /** The supported regions. */
  supportedRegions: string[];
  /** The supported virtual machine types. */
  supportedVmTypes: string[];
  /** The supported virtual machine images. */
  supportedVmImages: VmImage[];
};

/** The mandatory device configuration request. */
export type ConfigureDeviceRequest = BaseModel & {
  /** The friendly name for the device. */
  friendlyName: string;
  /** The current name of the device. */
  currentDeviceName: string;
  /** The device time zone. For eg: "Pacific Standard Time" */
  timeZone: string;
  /** The secondary DNS Settings of the device. */
  dnsSettings?: SecondaryDNSSettings;
  /** The 'Data 0' network interface card settings. */
  networkInterfaceData0Settings?: NetworkInterfaceData0Settings;
};

/** The StorSimple device. */
export type Device = BaseModel & {
  /** The friendly name of the device. */
  friendlyName: string;
  /** The UTC time at which the device was activated */
  activationTime: Date;
  /** The language culture setting on the device. For eg: "en-US" */
  culture: string;
  /** The device description. */
  deviceDescription: string;
  /** The version number of the software running on the device. */
  deviceSoftwareVersion: string;
  /** The friendly name of the software running on the device. */
  friendlySoftwareName?: string;
  /** The current configuration status of the device. */
  deviceConfigurationStatus: DeviceConfigurationStatus;
  /** The target IQN. */
  targetIqn: string;
  /** The device model. */
  modelDescription: string;
  /** The current status of the device. */
  status: DeviceStatus;
  /** The serial number. */
  serialNumber: string;
  /** The type of the device. */
  deviceType: DeviceType;
  /** The identifier of the active controller of the device. */
  activeController: ControllerId;
  /** The device friendly software version. */
  friendlySoftwareVersion: string;
  /** The storage in bytes that is available locally on the device. */
  availableLocalStorageInBytes?: number;
  /** The storage in bytes that is available on the device for tiered volumes. */
  availableTieredStorageInBytes?: number;
  /** The storage in bytes that has been provisioned on the device for tiered volumes. */
  provisionedTieredStorageInBytes?: number;
  /** The storage in bytes used for locally pinned volumes on the device (including additional local reservation). */
  provisionedLocalStorageInBytes?: number;
  /** Total capacity in bytes of tiered and locally pinned volumes on the device */
  provisionedVolumeSizeInBytes?: number;
  /** The storage in bytes that is currently being used on the device, including both local and cloud. */
  usingStorageInBytes?: number;
  /** The total tiered storage available on the device in bytes. */
  totalTieredStorageInBytes?: number;
  /** The device agent group version. */
  agentGroupVersion?: number;
  /** The number of network interface cards */
  networkInterfaceCardCount?: number;
  /** The location of the virtual appliance. */
  deviceLocation?: string;
  /**
   * The virtual machine API type.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly virtualMachineApiType?: VirtualMachineApiType;
  /** The additional device details regarding the end point count and volume container count. */
  details?: DeviceDetails;
  /** The additional device details for the service data encryption key rollover. */
  rolloverDetails?: DeviceRolloverDetails;
};

/** The alert settings. */
export type AlertSettings = BaseModel & {
  /** Indicates whether email notification enabled or not. */
  emailNotification: AlertEmailNotificationStatus;
  /** The alert notification culture. */
  alertNotificationCulture?: string;
  /** The value indicating whether alert notification enabled for admin or not. */
  notificationToServiceOwners?: AlertEmailNotificationStatus;
  /** The alert notification email list. */
  additionalRecipientEmailList?: string[];
};

/** The backup policy. */
export type BackupPolicy = BaseModel & {
  /** The path IDs of the volumes which are part of the backup policy. */
  volumeIds: string[];
  /**
   * The time of the next backup for the backup policy.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly nextBackupTime?: Date;
  /**
   * The time of the last backup for the backup policy.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly lastBackupTime?: Date;
  /**
   * The count of schedules the backup policy contains.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly schedulesCount?: number;
  /**
   * Indicates whether at least one of the schedules in the backup policy is active or not.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly scheduledBackupStatus?: ScheduledBackupStatus;
  /**
   * The backup policy creation type. Indicates whether this was created through SaaS or through StorSimple Snapshot Manager.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly backupPolicyCreationType?: BackupPolicyCreationType;
  /**
   * If the backup policy was created by StorSimple Snapshot Manager, then this field indicates the hostname of the StorSimple Snapshot Manager.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly ssmHostName?: string;
};

/** The backup schedule. */
export type BackupSchedule = BaseModel & {
  /** The schedule recurrence. */
  scheduleRecurrence: ScheduleRecurrence;
  /** The type of backup which needs to be taken. */
  backupType: BackupType;
  /** The number of backups to be retained. */
  retentionCount: number;
  /** The start time of the schedule. */
  startTime: Date;
  /** The schedule status. */
  scheduleStatus: ScheduleStatus;
  /**
   * The last successful backup run which was triggered for the schedule.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly lastSuccessfulRun?: Date;
};

/** The backup. */
export type Backup = BaseModel & {
  /** The time when the backup was created. */
  createdOn: Date;
  /** The backup size in bytes. */
  sizeInBytes: number;
  /** The type of the backup. */
  backupType?: BackupType;
  /** The backup job creation type. */
  backupJobCreationType?: BackupJobCreationType;
  /** The path ID of the backup policy. */
  backupPolicyId?: string;
  /** The StorSimple Snapshot Manager host name. */
  ssmHostName?: string;
  /** The backup elements. */
  elements: BackupElement[];
};

/** The hardware component group. */
export type HardwareComponentGroup = BaseModel & {
  /** The display name the hardware component group. */
  displayName: string;
  /** The last updated time. */
  lastUpdatedTime: Date;
  /** The list of hardware components. */
  components: HardwareComponent[];
};

/** The controller power state change request. */
export type ControllerPowerStateChangeRequest = BaseModel & {
  /** The power state that the request is expecting for the controller of the device. */
  action: ControllerPowerStateAction;
  /** The active controller that the request is expecting on the device. */
  activeController: ControllerId;
  /** The controller 0's status that the request is expecting on the device. */
  controller0State: ControllerStatus;
  /** The controller 1's status that the request is expecting on the device. */
  controller1State: ControllerStatus;
};

/** The job. */
export type Job = BaseModel & {
  /** The current status of the job. */
  status: JobStatus;
  /** The UTC time at which the job was started. */
  startTime?: Date;
  /** The UTC time at which the job completed. */
  endTime?: Date;
  /** The percentage of the job that is already complete. */
  percentComplete: number;
  /** The error details, if any, for the job. */
  error?: JobErrorDetails;
  /** The type of the job. */
  jobType?: JobType;
  /** The data statistics properties of the job. */
  dataStats?: DataStatistics;
  /** The entity identifier for which the job ran. */
  entityLabel?: string;
  /** The entity type for which the job ran. */
  entityType?: string;
  /** The job stages. */
  jobStages?: JobStage[];
  /** The device ID in which the job ran. */
  deviceId?: string;
  /** Represents whether the job is cancellable or not. */
  isCancellable?: boolean;
  /** The backup type (CloudSnapshot | LocalSnapshot). Applicable only for backup jobs. */
  backupType?: BackupType;
  /** The source device ID of the failover job. */
  sourceDeviceId?: string;
  /** The time of the backup used for the failover. */
  backupPointInTime?: Date;
};

/** Represents the network settings of a device. */
export type NetworkSettings = BaseModel & {
  /** The DNS (Domain Name System) settings of device. */
  dnsSettings: DNSSettings;
  /** The network adapter list of device. */
  networkAdapters: NetworkAdapterList;
  /** The webproxy settings of device. */
  webproxySettings: WebproxySettings;
};

/** The security settings of a device. */
export type SecuritySettings = BaseModel & {
  /** The settings for remote management of a device. */
  remoteManagementSettings: RemoteManagementSettings;
  /** The Challenge-Handshake Authentication Protocol (CHAP) settings. */
  chapSettings: ChapSettings;
};

/** The time settings of a device. */
export type TimeSettings = BaseModel & {
  /** The timezone of device, like '(UTC -06:00) Central America' */
  timeZone: string;
  /** The primary Network Time Protocol (NTP) server name, like 'time.windows.com'. */
  primaryTimeServer?: string;
  /** The secondary Network Time Protocol (NTP) server name, like 'time.contoso.com'. It's optional. */
  secondaryTimeServer?: string[];
};

/** The updates profile of a device. */
export type Updates = BaseModel & {
  /** Set to 'true' if regular updates are available for the device. */
  regularUpdatesAvailable?: boolean;
  /** Set to 'true' if maintenance mode update available. */
  maintenanceModeUpdatesAvailable?: boolean;
  /** Indicates whether an update is in progress or not. */
  isUpdateInProgress?: boolean;
  /** The time when the last update was completed. */
  lastUpdatedTime?: Date;
};

/** The volume container. */
export type VolumeContainer = BaseModel & {
  /** The key used to encrypt data in the volume container. It is required when property 'EncryptionStatus' is "Enabled". */
  encryptionKey?: AsymmetricEncryptedSecret;
  /**
   * The flag to denote whether encryption is enabled or not.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly encryptionStatus?: EncryptionStatus;
  /**
   * The number of volumes in the volume Container.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly volumeCount?: number;
  /** The path ID of storage account associated with the volume container. */
  storageAccountCredentialId: string;
  /**
   * The owner ship status of the volume container. Only when the status is "NotOwned", the delete operation on the volume container is permitted.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly ownerShipStatus?: OwnerShipStatus;
  /** The bandwidth-rate set on the volume container. */
  bandWidthRateInMbps?: number;
  /** The ID of the bandwidth setting associated with the volume container. */
  bandwidthSettingId?: string;
  /**
   * The total cloud storage for the volume container.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly totalCloudStorageUsageInBytes?: number;
};

/** The volume. */
export type Volume = BaseModel & {
  /** The size of the volume in bytes. */
  sizeInBytes: number;
  /** The type of the volume. */
  volumeType: VolumeType;
  /**
   * The ID of the volume container, in which this volume is created.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly volumeContainerId?: string;
  /** The IDs of the access control records, associated with the volume. */
  accessControlRecordIds: string[];
  /** The volume status. */
  volumeStatus: VolumeStatus;
  /**
   * The operation status on the volume.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly operationStatus?: OperationStatus;
  /**
   * The backup status of the volume.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly backupStatus?: BackupStatus;
  /** The monitoring status of the volume. */
  monitoringStatus: MonitoringStatus;
  /**
   * The IDs of the backup policies, in which this volume is part of.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly backupPolicyIds?: string[];
};

/** The encryption settings. */
export type EncryptionSettings = BaseModel & {
  /** The encryption status to indicates if encryption is enabled or not. */
  encryptionStatus: EncryptionStatus;
  /** The key rollover status to indicates if key rollover is required or not. If secret's encryption has been upgraded, then it requires key rollover. */
  keyRolloverStatus: KeyRolloverStatus;
};

/** The extended info of the manager. */
export type ManagerExtendedInfo = BaseModel & {
  /** The etag of the resource. */
  etag?: string;
  /** The version of the extended info being persisted. */
  version?: string;
  /** Represents the CIK of the resource. */
  integrityKey?: string;
  /** Represents the CEK of the resource. */
  encryptionKey?: string;
  /** Represents the Cert thumbprint that was used to encrypt the CEK. */
  encryptionKeyThumbprint?: string;
  /** Represents the portal thumbprint which can be used optionally to encrypt the entire data before storing it. */
  portalCertificateThumbprint?: string;
  /** Represents the encryption algorithm used to encrypt the keys. None - if Key is saved in plain text format. Algorithm name - if key is encrypted */
  algorithm?: string;
};

/** The storage account credential. */
export type StorageAccountCredential = BaseModel & {
  /** The storage endpoint */
  endPoint: string;
  /** Signifies whether SSL needs to be enabled or not. */
  sslStatus: SslStatus;
  /** The details of the storage account password. */
  accessKey?: AsymmetricEncryptedSecret;
  /**
   * The count of volumes using this storage account credential.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly volumesCount?: number;
};
/** Defines values for ManagerType. */
export type ManagerType = "GardaV1" | "HelsinkiV1";
/** Defines values for AlertScope. */
export type AlertScope = "Resource" | "Device";
/** Defines values for AlertSourceType. */
export type AlertSourceType = "Resource" | "Device";
/** Defines values for AlertSeverity. */
export type AlertSeverity = "Informational" | "Warning" | "Critical";
/** Defines values for AlertStatus. */
export type AlertStatus = "Active" | "Cleared";
/** Defines values for DayOfWeek. */
export type DayOfWeek =
  | "Sunday"
  | "Monday"
  | "Tuesday"
  | "Wednesday"
  | "Thursday"
  | "Friday"
  | "Saturday";
/** Defines values for DeviceConfigurationStatus. */
export type DeviceConfigurationStatus = "Complete" | "Pending";
/** Defines values for DeviceStatus. */
export type DeviceStatus =
  | "Unknown"
  | "Online"
  | "Offline"
  | "Deactivated"
  | "RequiresAttention"
  | "MaintenanceMode"
  | "Creating"
  | "Provisioning"
  | "Deactivating"
  | "Deleted"
  | "ReadyToSetup";
/** Defines values for DeviceType. */
export type DeviceType =
  | "Invalid"
  | "Series8000VirtualAppliance"
  | "Series8000PhysicalAppliance";
/** Defines values for ControllerId. */
export type ControllerId = "Unknown" | "None" | "Controller0" | "Controller1";
/** Defines values for VirtualMachineApiType. */
export type VirtualMachineApiType = "Classic" | "Arm";
/** Defines values for AuthorizationEligibility. */
export type AuthorizationEligibility = "InEligible" | "Eligible";
/** Defines values for AuthorizationStatus. */
export type AuthorizationStatus = "Disabled" | "Enabled";
/** Defines values for InEligibilityCategory. */
export type InEligibilityCategory =
  | "DeviceNotOnline"
  | "NotSupportedAppliance"
  | "RolloverPending";
/** Defines values for AlertEmailNotificationStatus. */
export type AlertEmailNotificationStatus = "Enabled" | "Disabled";
/** Defines values for ScheduledBackupStatus. */
export type ScheduledBackupStatus = "Disabled" | "Enabled";
/** Defines values for BackupPolicyCreationType. */
export type BackupPolicyCreationType = "BySaaS" | "BySSM";
/** Defines values for RecurrenceType. */
export type RecurrenceType = "Minutes" | "Hourly" | "Daily" | "Weekly";
/** Defines values for BackupType. */
export type BackupType = "LocalSnapshot" | "CloudSnapshot";
/** Defines values for ScheduleStatus. */
export type ScheduleStatus = "Enabled" | "Disabled";
/** Defines values for BackupJobCreationType. */
export type BackupJobCreationType = "Adhoc" | "BySchedule" | "BySSM";
/** Defines values for VolumeType. */
export type VolumeType = "Tiered" | "Archival" | "LocallyPinned";
/** Defines values for HardwareComponentStatus. */
export type HardwareComponentStatus =
  | "Unknown"
  | "NotPresent"
  | "PoweredOff"
  | "Ok"
  | "Recovering"
  | "Warning"
  | "Failure";
/** Defines values for ControllerPowerStateAction. */
export type ControllerPowerStateAction = "Start" | "Restart" | "Shutdown";
/** Defines values for ControllerStatus. */
export type ControllerStatus =
  | "NotPresent"
  | "PoweredOff"
  | "Ok"
  | "Recovering"
  | "Warning"
  | "Failure";
/** Defines values for JobStatus. */
export type JobStatus = "Running" | "Succeeded" | "Failed" | "Canceled";
/** Defines values for JobType. */
export type JobType =
  | "ScheduledBackup"
  | "ManualBackup"
  | "RestoreBackup"
  | "CloneVolume"
  | "FailoverVolumeContainers"
  | "CreateLocallyPinnedVolume"
  | "ModifyVolume"
  | "InstallUpdates"
  | "SupportPackageLogs"
  | "CreateCloudAppliance";
/** Defines values for MetricAggregationType. */
export type MetricAggregationType =
  | "Average"
  | "Last"
  | "Maximum"
  | "Minimum"
  | "None"
  | "Total";
/** Defines values for MetricUnit. */
export type MetricUnit =
  | "Bytes"
  | "BytesPerSecond"
  | "Count"
  | "CountPerSecond"
  | "Percent"
  | "Seconds";
/** Defines values for NetInterfaceId. */
export type NetInterfaceId =
  | "Invalid"
  | "Data0"
  | "Data1"
  | "Data2"
  | "Data3"
  | "Data4"
  | "Data5";
/** Defines values for NetInterfaceStatus. */
export type NetInterfaceStatus = "Enabled" | "Disabled";
/** Defines values for IscsiAndCloudStatus. */
export type IscsiAndCloudStatus =
  | "Disabled"
  | "IscsiEnabled"
  | "CloudEnabled"
  | "IscsiAndCloudEnabled";
/** Defines values for NetworkMode. */
export type NetworkMode = "Invalid" | "IPV4" | "IPV6" | "BOTH";
/** Defines values for AuthenticationType. */
export type AuthenticationType = "Invalid" | "None" | "Basic" | "NTLM";
/** Defines values for RemoteManagementModeConfiguration. */
export type RemoteManagementModeConfiguration =
  | "Unknown"
  | "Disabled"
  | "HttpsEnabled"
  | "HttpsAndHttpEnabled";
/** Defines values for EncryptionAlgorithm. */
export type EncryptionAlgorithm = "None" | "AES256" | "RSAES_PKCS1_v_1_5";
/** Defines values for EncryptionStatus. */
export type EncryptionStatus = "Enabled" | "Disabled";
/** Defines values for OwnerShipStatus. */
export type OwnerShipStatus = "Owned" | "NotOwned";
/** Defines values for VolumeStatus. */
export type VolumeStatus = "Online" | "Offline";
/** Defines values for OperationStatus. */
export type OperationStatus = "None" | "Updating" | "Deleting" | "Restoring";
/** Defines values for BackupStatus. */
export type BackupStatus = "Enabled" | "Disabled";
/** Defines values for MonitoringStatus. */
export type MonitoringStatus = "Enabled" | "Disabled";
/** Defines values for TargetEligibilityStatus. */
export type TargetEligibilityStatus = "NotEligible" | "Eligible";
/** Defines values for TargetEligibilityResultCode. */
export type TargetEligibilityResultCode =
  | "TargetAndSourceCannotBeSameError"
  | "TargetIsNotOnlineError"
  | "TargetSourceIncompatibleVersionError"
  | "LocalToTieredVolumesConversionWarning"
  | "TargetInsufficientCapacityError"
  | "TargetInsufficientLocalVolumeMemoryError"
  | "TargetInsufficientTieredVolumeMemoryError";
/** Defines values for KeyRolloverStatus. */
export type KeyRolloverStatus = "Required" | "NotRequired";
/** Defines values for FeatureSupportStatus. */
export type FeatureSupportStatus =
  | "NotAvailable"
  | "UnsupportedDeviceVersion"
  | "Supported";
/** Defines values for SslStatus. */
export type SslStatus = "Enabled" | "Disabled";

/** Optional parameters. */
export interface OperationsListOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the list operation. */
export type OperationsListResponse = AvailableProviderOperationList;

/** Optional parameters. */
export interface OperationsListNextOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the listNext operation. */
export type OperationsListNextResponse = AvailableProviderOperationList;

/** Optional parameters. */
export interface ManagersListOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the list operation. */
export type ManagersListResponse = ManagerList;

/** Optional parameters. */
export interface ManagersListByResourceGroupOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the listByResourceGroup operation. */
export type ManagersListByResourceGroupResponse = ManagerList;

/** Optional parameters. */
export interface ManagersGetOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the get operation. */
export type ManagersGetResponse = Manager;

/** Optional parameters. */
export interface ManagersCreateOrUpdateOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the createOrUpdate operation. */
export type ManagersCreateOrUpdateResponse = Manager;

/** Optional parameters. */
export interface ManagersDeleteOptionalParams
  extends coreClient.OperationOptions {}

/** Optional parameters. */
export interface ManagersUpdateOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the update operation. */
export type ManagersUpdateResponse = Manager;

/** Optional parameters. */
export interface ManagersGetDevicePublicEncryptionKeyOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the getDevicePublicEncryptionKey operation. */
export type ManagersGetDevicePublicEncryptionKeyResponse = PublicKey;

/** Optional parameters. */
export interface ManagersGetEncryptionSettingsOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the getEncryptionSettings operation. */
export type ManagersGetEncryptionSettingsResponse = EncryptionSettings;

/** Optional parameters. */
export interface ManagersGetExtendedInfoOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the getExtendedInfo operation. */
export type ManagersGetExtendedInfoResponse = ManagerExtendedInfo;

/** Optional parameters. */
export interface ManagersCreateExtendedInfoOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the createExtendedInfo operation. */
export type ManagersCreateExtendedInfoResponse = ManagerExtendedInfo;

/** Optional parameters. */
export interface ManagersDeleteExtendedInfoOptionalParams
  extends coreClient.OperationOptions {}

/** Optional parameters. */
export interface ManagersUpdateExtendedInfoOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the updateExtendedInfo operation. */
export type ManagersUpdateExtendedInfoResponse = ManagerExtendedInfo;

/** Optional parameters. */
export interface ManagersListFeatureSupportStatusOptionalParams
  extends coreClient.OperationOptions {
  /** OData Filter options */
  filter?: string;
}

/** Contains response data for the listFeatureSupportStatus operation. */
export type ManagersListFeatureSupportStatusResponse = FeatureList;

/** Optional parameters. */
export interface ManagersGetActivationKeyOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the getActivationKey operation. */
export type ManagersGetActivationKeyResponse = Key;

/** Optional parameters. */
export interface ManagersGetPublicEncryptionKeyOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the getPublicEncryptionKey operation. */
export type ManagersGetPublicEncryptionKeyResponse = SymmetricEncryptedSecret;

/** Optional parameters. */
export interface ManagersListMetricsOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the listMetrics operation. */
export type ManagersListMetricsResponse = MetricList;

/** Optional parameters. */
export interface ManagersListMetricDefinitionOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the listMetricDefinition operation. */
export type ManagersListMetricDefinitionResponse = MetricDefinitionList;

/** Optional parameters. */
export interface ManagersRegenerateActivationKeyOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the regenerateActivationKey operation. */
export type ManagersRegenerateActivationKeyResponse = Key;

/** Optional parameters. */
export interface AccessControlRecordsListByManagerOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the listByManager operation. */
export type AccessControlRecordsListByManagerResponse = AccessControlRecordList;

/** Optional parameters. */
export interface AccessControlRecordsGetOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the get operation. */
export type AccessControlRecordsGetResponse = AccessControlRecord;

/** Optional parameters. */
export interface AccessControlRecordsCreateOrUpdateOptionalParams
  extends coreClient.OperationOptions {
  /** Delay to wait until next poll, in milliseconds. */
  updateIntervalInMs?: number;
  /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */
  resumeFrom?: string;
}

/** Contains response data for the createOrUpdate operation. */
export type AccessControlRecordsCreateOrUpdateResponse = AccessControlRecord;

/** Optional parameters. */
export interface AccessControlRecordsDeleteOptionalParams
  extends coreClient.OperationOptions {
  /** Delay to wait until next poll, in milliseconds. */
  updateIntervalInMs?: number;
  /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */
  resumeFrom?: string;
}

/** Optional parameters. */
export interface AlertsListByManagerOptionalParams
  extends coreClient.OperationOptions {
  /** OData Filter options */
  filter?: string;
}

/** Contains response data for the listByManager operation. */
export type AlertsListByManagerResponse = AlertList;

/** Optional parameters. */
export interface AlertsClearOptionalParams
  extends coreClient.OperationOptions {}

/** Optional parameters. */
export interface AlertsSendTestEmailOptionalParams
  extends coreClient.OperationOptions {}

/** Optional parameters. */
export interface AlertsListByManagerNextOptionalParams
  extends coreClient.OperationOptions {
  /** OData Filter options */
  filter?: string;
}

/** Contains response data for the listByManagerNext operation. */
export type AlertsListByManagerNextResponse = AlertList;

/** Optional parameters. */
export interface BandwidthSettingsListByManagerOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the listByManager operation. */
export type BandwidthSettingsListByManagerResponse = BandwidthSettingList;

/** Optional parameters. */
export interface BandwidthSettingsGetOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the get operation. */
export type BandwidthSettingsGetResponse = BandwidthSetting;

/** Optional parameters. */
export interface BandwidthSettingsCreateOrUpdateOptionalParams
  extends coreClient.OperationOptions {
  /** Delay to wait until next poll, in milliseconds. */
  updateIntervalInMs?: number;
  /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */
  resumeFrom?: string;
}

/** Contains response data for the createOrUpdate operation. */
export type BandwidthSettingsCreateOrUpdateResponse = BandwidthSetting;

/** Optional parameters. */
export interface BandwidthSettingsDeleteOptionalParams
  extends coreClient.OperationOptions {
  /** Delay to wait until next poll, in milliseconds. */
  updateIntervalInMs?: number;
  /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */
  resumeFrom?: string;
}

/** Optional parameters. */
export interface CloudAppliancesListSupportedConfigurationsOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the listSupportedConfigurations operation. */
export type CloudAppliancesListSupportedConfigurationsResponse = CloudApplianceConfigurationList;

/** Optional parameters. */
export interface CloudAppliancesProvisionOptionalParams
  extends coreClient.OperationOptions {
  /** Delay to wait until next poll, in milliseconds. */
  updateIntervalInMs?: number;
  /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */
  resumeFrom?: string;
}

/** Optional parameters. */
export interface DevicesConfigureOptionalParams
  extends coreClient.OperationOptions {
  /** Delay to wait until next poll, in milliseconds. */
  updateIntervalInMs?: number;
  /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */
  resumeFrom?: string;
}

/** Optional parameters. */
export interface DevicesListByManagerOptionalParams
  extends coreClient.OperationOptions {
  /** Specify $expand=details to populate additional fields related to the device or $expand=rolloverdetails to populate additional fields related to the service data encryption key rollover on device */
  expand?: string;
}

/** Contains response data for the listByManager operation. */
export type DevicesListByManagerResponse = DeviceList;

/** Optional parameters. */
export interface DevicesGetOptionalParams extends coreClient.OperationOptions {
  /** Specify $expand=details to populate additional fields related to the device or $expand=rolloverdetails to populate additional fields related to the service data encryption key rollover on device */
  expand?: string;
}

/** Contains response data for the get operation. */
export type DevicesGetResponse = Device;

/** Optional parameters. */
export interface DevicesDeleteOptionalParams
  extends coreClient.OperationOptions {
  /** Delay to wait until next poll, in milliseconds. */
  updateIntervalInMs?: number;
  /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */
  resumeFrom?: string;
}

/** Optional parameters. */
export interface DevicesUpdateOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the update operation. */
export type DevicesUpdateResponse = Device;

/** Optional parameters. */
export interface DevicesAuthorizeForServiceEncryptionKeyRolloverOptionalParams
  extends coreClient.OperationOptions {}

/** Optional parameters. */
export interface DevicesDeactivateOptionalParams
  extends coreClient.OperationOptions {
  /** Delay to wait until next poll, in milliseconds. */
  updateIntervalInMs?: number;
  /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */
  resumeFrom?: string;
}

/** Optional parameters. */
export interface DevicesInstallUpdatesOptionalParams
  extends coreClient.OperationOptions {
  /** Delay to wait until next poll, in milliseconds. */
  updateIntervalInMs?: number;
  /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */
  resumeFrom?: string;
}

/** Optional parameters. */
export interface DevicesListFailoverSetsOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the listFailoverSets operation. */
export type DevicesListFailoverSetsResponse = FailoverSetsList;

/** Optional parameters. */
export interface DevicesListMetricsOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the listMetrics operation. */
export type DevicesListMetricsResponse = MetricList;

/** Optional parameters. */
export interface DevicesListMetricDefinitionOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the listMetricDefinition operation. */
export type DevicesListMetricDefinitionResponse = MetricDefinitionList;

/** Optional parameters. */
export interface DevicesScanForUpdatesOptionalParams
  extends coreClient.OperationOptions {
  /** Delay to wait until next poll, in milliseconds. */
  updateIntervalInMs?: number;
  /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */
  resumeFrom?: string;
}

/** Optional parameters. */
export interface DevicesGetUpdateSummaryOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the getUpdateSummary operation. */
export type DevicesGetUpdateSummaryResponse = Updates;

/** Optional parameters. */
export interface DevicesFailoverOptionalParams
  extends coreClient.OperationOptions {
  /** Delay to wait until next poll, in milliseconds. */
  updateIntervalInMs?: number;
  /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */
  resumeFrom?: string;
}

/** Optional parameters. */
export interface DevicesListFailoverTargetsOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the listFailoverTargets operation. */
export type DevicesListFailoverTargetsResponse = FailoverTargetsList;

/** Optional parameters. */
export interface DeviceSettingsGetAlertSettingsOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the getAlertSettings operation. */
export type DeviceSettingsGetAlertSettingsResponse = AlertSettings;

/** Optional parameters. */
export interface DeviceSettingsCreateOrUpdateAlertSettingsOptionalParams
  extends coreClient.OperationOptions {
  /** Delay to wait until next poll, in milliseconds. */
  updateIntervalInMs?: number;
  /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */
  resumeFrom?: string;
}

/** Contains response data for the createOrUpdateAlertSettings operation. */
export type DeviceSettingsCreateOrUpdateAlertSettingsResponse = AlertSettings;

/** Optional parameters. */
export interface DeviceSettingsGetNetworkSettingsOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the getNetworkSettings operation. */
export type DeviceSettingsGetNetworkSettingsResponse = NetworkSettings;

/** Optional parameters. */
export interface DeviceSettingsUpdateNetworkSettingsOptionalParams
  extends coreClient.OperationOptions {
  /** Delay to wait until next poll, in milliseconds. */
  updateIntervalInMs?: number;
  /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */
  resumeFrom?: string;
}

/** Contains response data for the updateNetworkSettings operation. */
export type DeviceSettingsUpdateNetworkSettingsResponse = NetworkSettings;

/** Optional parameters. */
export interface DeviceSettingsGetSecuritySettingsOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the getSecuritySettings operation. */
export type DeviceSettingsGetSecuritySettingsResponse = SecuritySettings;

/** Optional parameters. */
export interface DeviceSettingsUpdateSecuritySettingsOptionalParams
  extends coreClient.OperationOptions {
  /** Delay to wait until next poll, in milliseconds. */
  updateIntervalInMs?: number;
  /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */
  resumeFrom?: string;
}

/** Contains response data for the updateSecuritySettings operation. */
export type DeviceSettingsUpdateSecuritySettingsResponse = SecuritySettings;

/** Optional parameters. */
export interface DeviceSettingsSyncRemotemanagementCertificateOptionalParams
  extends coreClient.OperationOptions {
  /** Delay to wait until next poll, in milliseconds. */
  updateIntervalInMs?: number;
  /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */
  resumeFrom?: string;
}

/** Optional parameters. */
export interface DeviceSettingsGetTimeSettingsOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the getTimeSettings operation. */
export type DeviceSettingsGetTimeSettingsResponse = TimeSettings;

/** Optional parameters. */
export interface DeviceSettingsCreateOrUpdateTimeSettingsOptionalParams
  extends coreClient.OperationOptions {
  /** Delay to wait until next poll, in milliseconds. */
  updateIntervalInMs?: number;
  /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */
  resumeFrom?: string;
}

/** Contains response data for the createOrUpdateTimeSettings operation. */
export type DeviceSettingsCreateOrUpdateTimeSettingsResponse = TimeSettings;

/** Optional parameters. */
export interface BackupPoliciesListByDeviceOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the listByDevice operation. */
export type BackupPoliciesListByDeviceResponse = BackupPolicyList;

/** Optional parameters. */
export interface BackupPoliciesGetOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the get operation. */
export type BackupPoliciesGetResponse = BackupPolicy;

/** Optional parameters. */
export interface BackupPoliciesCreateOrUpdateOptionalParams
  extends coreClient.OperationOptions {
  /** Delay to wait until next poll, in milliseconds. */
  updateIntervalInMs?: number;
  /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */
  resumeFrom?: string;
}

/** Contains response data for the createOrUpdate operation. */
export type BackupPoliciesCreateOrUpdateResponse = BackupPolicy;

/** Optional parameters. */
export interface BackupPoliciesDeleteOptionalParams
  extends coreClient.OperationOptions {
  /** Delay to wait until next poll, in milliseconds. */
  updateIntervalInMs?: number;
  /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */
  resumeFrom?: string;
}

/** Optional parameters. */
export interface BackupPoliciesBackupNowOptionalParams
  extends coreClient.OperationOptions {
  /** Delay to wait until next poll, in milliseconds. */
  updateIntervalInMs?: number;
  /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */
  resumeFrom?: string;
}

/** Optional parameters. */
export interface BackupSchedulesListByBackupPolicyOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the listByBackupPolicy operation. */
export type BackupSchedulesListByBackupPolicyResponse = BackupScheduleList;

/** Optional parameters. */
export interface BackupSchedulesGetOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the get operation. */
export type BackupSchedulesGetResponse = BackupSchedule;

/** Optional parameters. */
export interface BackupSchedulesCreateOrUpdateOptionalParams
  extends coreClient.OperationOptions {
  /** Delay to wait until next poll, in milliseconds. */
  updateIntervalInMs?: number;
  /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */
  resumeFrom?: string;
}

/** Contains response data for the createOrUpdate operation. */
export type BackupSchedulesCreateOrUpdateResponse = BackupSchedule;

/** Optional parameters. */
export interface BackupSchedulesDeleteOptionalParams
  extends coreClient.OperationOptions {
  /** Delay to wait until next poll, in milliseconds. */
  updateIntervalInMs?: number;
  /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */
  resumeFrom?: string;
}

/** Optional parameters. */
export interface BackupsListByDeviceOptionalParams
  extends coreClient.OperationOptions {
  /** OData Filter options */
  filter?: string;
}

/** Contains response data for the listByDevice operation. */
export type BackupsListByDeviceResponse = BackupList;

/** Optional parameters. */
export interface BackupsDeleteOptionalParams
  extends coreClient.OperationOptions {
  /** Delay to wait until next poll, in milliseconds. */
  updateIntervalInMs?: number;
  /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */
  resumeFrom?: string;
}

/** Optional parameters. */
export interface BackupsCloneOptionalParams
  extends coreClient.OperationOptions {
  /** Delay to wait until next poll, in milliseconds. */
  updateIntervalInMs?: number;
  /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */
  resumeFrom?: string;
}

/** Optional parameters. */
export interface BackupsRestoreOptionalParams
  extends coreClient.OperationOptions {
  /** Delay to wait until next poll, in milliseconds. */
  updateIntervalInMs?: number;
  /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */
  resumeFrom?: string;
}

/** Optional parameters. */
export interface BackupsListByDeviceNextOptionalParams
  extends coreClient.OperationOptions {
  /** OData Filter options */
  filter?: string;
}

/** Contains response data for the listByDeviceNext operation. */
export type BackupsListByDeviceNextResponse = BackupList;

/** Optional parameters. */
export interface HardwareComponentGroupsListByDeviceOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the listByDevice operation. */
export type HardwareComponentGroupsListByDeviceResponse = HardwareComponentGroupList;

/** Optional parameters. */
export interface HardwareComponentGroupsChangeControllerPowerStateOptionalParams
  extends coreClient.OperationOptions {
  /** Delay to wait until next poll, in milliseconds. */
  updateIntervalInMs?: number;
  /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */
  resumeFrom?: string;
}

/** Optional parameters. */
export interface JobsListByDeviceOptionalParams
  extends coreClient.OperationOptions {
  /** OData Filter options */
  filter?: string;
}

/** Contains response data for the listByDevice operation. */
export type JobsListByDeviceResponse = JobList;

/** Optional parameters. */
export interface JobsGetOptionalParams extends coreClient.OperationOptions {}

/** Contains response data for the get operation. */
export type JobsGetResponse = Job;

/** Optional parameters. */
export interface JobsCancelOptionalParams extends coreClient.OperationOptions {
  /** Delay to wait until next poll, in milliseconds. */
  updateIntervalInMs?: number;
  /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */
  resumeFrom?: string;
}

/** Optional parameters. */
export interface JobsListByManagerOptionalParams
  extends coreClient.OperationOptions {
  /** OData Filter options */
  filter?: string;
}

/** Contains response data for the listByManager operation. */
export type JobsListByManagerResponse = JobList;

/** Optional parameters. */
export interface JobsListByDeviceNextOptionalParams
  extends coreClient.OperationOptions {
  /** OData Filter options */
  filter?: string;
}

/** Contains response data for the listByDeviceNext operation. */
export type JobsListByDeviceNextResponse = JobList;

/** Optional parameters. */
export interface JobsListByManagerNextOptionalParams
  extends coreClient.OperationOptions {
  /** OData Filter options */
  filter?: string;
}

/** Contains response data for the listByManagerNext operation. */
export type JobsListByManagerNextResponse = JobList;

/** Optional parameters. */
export interface VolumeContainersListByDeviceOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the listByDevice operation. */
export type VolumeContainersListByDeviceResponse = VolumeContainerList;

/** Optional parameters. */
export interface VolumeContainersGetOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the get operation. */
export type VolumeContainersGetResponse = VolumeContainer;

/** Optional parameters. */
export interface VolumeContainersCreateOrUpdateOptionalParams
  extends coreClient.OperationOptions {
  /** Delay to wait until next poll, in milliseconds. */
  updateIntervalInMs?: number;
  /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */
  resumeFrom?: string;
}

/** Contains response data for the createOrUpdate operation. */
export type VolumeContainersCreateOrUpdateResponse = VolumeContainer;

/** Optional parameters. */
export interface VolumeContainersDeleteOptionalParams
  extends coreClient.OperationOptions {
  /** Delay to wait until next poll, in milliseconds. */
  updateIntervalInMs?: number;
  /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */
  resumeFrom?: string;
}

/** Optional parameters. */
export interface VolumeContainersListMetricsOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the listMetrics operation. */
export type VolumeContainersListMetricsResponse = MetricList;

/** Optional parameters. */
export interface VolumeContainersListMetricDefinitionOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the listMetricDefinition operation. */
export type VolumeContainersListMetricDefinitionResponse = MetricDefinitionList;

/** Optional parameters. */
export interface VolumesListByVolumeContainerOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the listByVolumeContainer operation. */
export type VolumesListByVolumeContainerResponse = VolumeList;

/** Optional parameters. */
export interface VolumesGetOptionalParams extends coreClient.OperationOptions {}

/** Contains response data for the get operation. */
export type VolumesGetResponse = Volume;

/** Optional parameters. */
export interface VolumesCreateOrUpdateOptionalParams
  extends coreClient.OperationOptions {
  /** Delay to wait until next poll, in milliseconds. */
  updateIntervalInMs?: number;
  /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */
  resumeFrom?: string;
}

/** Contains response data for the createOrUpdate operation. */
export type VolumesCreateOrUpdateResponse = Volume;

/** Optional parameters. */
export interface VolumesDeleteOptionalParams
  extends coreClient.OperationOptions {
  /** Delay to wait until next poll, in milliseconds. */
  updateIntervalInMs?: number;
  /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */
  resumeFrom?: string;
}

/** Optional parameters. */
export interface VolumesListMetricsOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the listMetrics operation. */
export type VolumesListMetricsResponse = MetricList;

/** Optional parameters. */
export interface VolumesListMetricDefinitionOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the listMetricDefinition operation. */
export type VolumesListMetricDefinitionResponse = MetricDefinitionList;

/** Optional parameters. */
export interface VolumesListByDeviceOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the listByDevice operation. */
export type VolumesListByDeviceResponse = VolumeList;

/** Optional parameters. */
export interface StorageAccountCredentialsListByManagerOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the listByManager operation. */
export type StorageAccountCredentialsListByManagerResponse = StorageAccountCredentialList;

/** Optional parameters. */
export interface StorageAccountCredentialsGetOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the get operation. */
export type StorageAccountCredentialsGetResponse = StorageAccountCredential;

/** Optional parameters. */
export interface StorageAccountCredentialsCreateOrUpdateOptionalParams
  extends coreClient.OperationOptions {
  /** Delay to wait until next poll, in milliseconds. */
  updateIntervalInMs?: number;
  /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */
  resumeFrom?: string;
}

/** Contains response data for the createOrUpdate operation. */
export type StorageAccountCredentialsCreateOrUpdateResponse = StorageAccountCredential;

/** Optional parameters. */
export interface StorageAccountCredentialsDeleteOptionalParams
  extends coreClient.OperationOptions {
  /** Delay to wait until next poll, in milliseconds. */
  updateIntervalInMs?: number;
  /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */
  resumeFrom?: string;
}

/** Optional parameters. */
export interface StorSimple8000SeriesManagementClientOptionalParams
  extends coreClient.ServiceClientOptions {
  /** server parameter */
  $host?: string;
  /** Api Version */
  apiVersion?: string;
  /** Overrides client endpoint. */
  endpoint?: string;
}
