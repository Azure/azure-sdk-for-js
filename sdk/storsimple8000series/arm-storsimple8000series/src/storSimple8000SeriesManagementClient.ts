/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */

import * as coreClient from "@azure/core-client";
import * as coreRestPipeline from "@azure/core-rest-pipeline";
import * as coreAuth from "@azure/core-auth";
import {
  OperationsImpl,
  ManagersImpl,
  AccessControlRecordsImpl,
  AlertsImpl,
  BandwidthSettingsImpl,
  CloudAppliancesImpl,
  DevicesImpl,
  DeviceSettingsImpl,
  BackupPoliciesImpl,
  BackupSchedulesImpl,
  BackupsImpl,
  HardwareComponentGroupsImpl,
  JobsImpl,
  VolumeContainersImpl,
  VolumesImpl,
  StorageAccountCredentialsImpl
} from "./operations";
import {
  Operations,
  Managers,
  AccessControlRecords,
  Alerts,
  BandwidthSettings,
  CloudAppliances,
  Devices,
  DeviceSettings,
  BackupPolicies,
  BackupSchedules,
  Backups,
  HardwareComponentGroups,
  Jobs,
  VolumeContainers,
  Volumes,
  StorageAccountCredentials
} from "./operationsInterfaces";
import { StorSimple8000SeriesManagementClientOptionalParams } from "./models";

export class StorSimple8000SeriesManagementClient extends coreClient.ServiceClient {
  $host: string;
  apiVersion: string;
  subscriptionId: string;

  /**
   * Initializes a new instance of the StorSimple8000SeriesManagementClient class.
   * @param credentials Subscription credentials which uniquely identify client subscription.
   * @param subscriptionId The subscription id
   * @param options The parameter options
   */
  constructor(
    credentials: coreAuth.TokenCredential,
    subscriptionId: string,
    options?: StorSimple8000SeriesManagementClientOptionalParams
  ) {
    if (credentials === undefined) {
      throw new Error("'credentials' cannot be null");
    }
    if (subscriptionId === undefined) {
      throw new Error("'subscriptionId' cannot be null");
    }

    // Initializing default values for options
    if (!options) {
      options = {};
    }
    const defaults: StorSimple8000SeriesManagementClientOptionalParams = {
      requestContentType: "application/json; charset=utf-8",
      credential: credentials
    };

    const packageDetails = `azsdk-js-arm-storsimple8000series/2.0.2`;
    const userAgentPrefix =
      options.userAgentOptions && options.userAgentOptions.userAgentPrefix
        ? `${options.userAgentOptions.userAgentPrefix} ${packageDetails}`
        : `${packageDetails}`;

    if (!options.credentialScopes) {
      options.credentialScopes = ["https://management.azure.com/.default"];
    }
    const optionsWithDefaults = {
      ...defaults,
      ...options,
      userAgentOptions: {
        userAgentPrefix
      },
      baseUri:
        options.endpoint ?? options.baseUri ?? "https://management.azure.com"
    };
    super(optionsWithDefaults);

    if (options?.pipeline && options.pipeline.getOrderedPolicies().length > 0) {
      const pipelinePolicies: coreRestPipeline.PipelinePolicy[] = options.pipeline.getOrderedPolicies();
      const bearerTokenAuthenticationPolicyFound = pipelinePolicies.some(
        (pipelinePolicy) =>
          pipelinePolicy.name ===
          coreRestPipeline.bearerTokenAuthenticationPolicyName
      );
      if (!bearerTokenAuthenticationPolicyFound) {
        this.pipeline.removePolicy({
          name: coreRestPipeline.bearerTokenAuthenticationPolicyName
        });
        this.pipeline.addPolicy(
          coreRestPipeline.bearerTokenAuthenticationPolicy({
            scopes: `${optionsWithDefaults.baseUri}/.default`,
            challengeCallbacks: {
              authorizeRequestOnChallenge:
                coreClient.authorizeRequestOnClaimChallenge
            }
          })
        );
      }
    }
    // Parameter assignments
    this.subscriptionId = subscriptionId;

    // Assigning values to Constant parameters
    this.$host = options.$host || "https://management.azure.com";
    this.apiVersion = options.apiVersion || "2017-06-01";
    this.operations = new OperationsImpl(this);
    this.managers = new ManagersImpl(this);
    this.accessControlRecords = new AccessControlRecordsImpl(this);
    this.alerts = new AlertsImpl(this);
    this.bandwidthSettings = new BandwidthSettingsImpl(this);
    this.cloudAppliances = new CloudAppliancesImpl(this);
    this.devices = new DevicesImpl(this);
    this.deviceSettings = new DeviceSettingsImpl(this);
    this.backupPolicies = new BackupPoliciesImpl(this);
    this.backupSchedules = new BackupSchedulesImpl(this);
    this.backups = new BackupsImpl(this);
    this.hardwareComponentGroups = new HardwareComponentGroupsImpl(this);
    this.jobs = new JobsImpl(this);
    this.volumeContainers = new VolumeContainersImpl(this);
    this.volumes = new VolumesImpl(this);
    this.storageAccountCredentials = new StorageAccountCredentialsImpl(this);
  }

  operations: Operations;
  managers: Managers;
  accessControlRecords: AccessControlRecords;
  alerts: Alerts;
  bandwidthSettings: BandwidthSettings;
  cloudAppliances: CloudAppliances;
  devices: Devices;
  deviceSettings: DeviceSettings;
  backupPolicies: BackupPolicies;
  backupSchedules: BackupSchedules;
  backups: Backups;
  hardwareComponentGroups: HardwareComponentGroups;
  jobs: Jobs;
  volumeContainers: VolumeContainers;
  volumes: Volumes;
  storageAccountCredentials: StorageAccountCredentials;
}
