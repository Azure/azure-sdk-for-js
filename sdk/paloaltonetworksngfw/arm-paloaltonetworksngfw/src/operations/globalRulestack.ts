/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */

import { PagedAsyncIterableIterator, PageSettings } from "@azure/core-paging";
import { setContinuationToken } from "../pagingHelper";
import { GlobalRulestack } from "../operationsInterfaces";
import * as coreClient from "@azure/core-client";
import * as Mappers from "../models/mappers";
import * as Parameters from "../models/parameters";
import { PaloAltoNetworksCloudngfw } from "../paloAltoNetworksCloudngfw";
import {
  SimplePollerLike,
  OperationState,
  createHttpPoller
} from "@azure/core-lro";
import { createLroSpec } from "../lroImpl";
import {
  GlobalRulestackResource,
  GlobalRulestackListNextOptionalParams,
  GlobalRulestackListOptionalParams,
  GlobalRulestackListResponse,
  GlobalRulestackGetOptionalParams,
  GlobalRulestackGetResponse,
  GlobalRulestackCreateOrUpdateOptionalParams,
  GlobalRulestackCreateOrUpdateResponse,
  GlobalRulestackResourceUpdate,
  GlobalRulestackUpdateOptionalParams,
  GlobalRulestackUpdateResponse,
  GlobalRulestackDeleteOptionalParams,
  GlobalRulestackCommitOptionalParams,
  GlobalRulestackGetChangeLogOptionalParams,
  GlobalRulestackGetChangeLogResponse,
  AdvSecurityObjectTypeEnum,
  GlobalRulestackListAdvancedSecurityObjectsOptionalParams,
  GlobalRulestackListAdvancedSecurityObjectsResponse,
  GlobalRulestackListAppIdsOptionalParams,
  GlobalRulestackListAppIdsResponse,
  GlobalRulestackListCountriesOptionalParams,
  GlobalRulestackListCountriesResponse,
  GlobalRulestackListFirewallsOptionalParams,
  GlobalRulestackListFirewallsResponse,
  GlobalRulestackListPredefinedUrlCategoriesOptionalParams,
  GlobalRulestackListPredefinedUrlCategoriesResponse,
  SecurityServicesTypeEnum,
  GlobalRulestackListSecurityServicesOptionalParams,
  GlobalRulestackListSecurityServicesResponse,
  GlobalRulestackRevertOptionalParams,
  GlobalRulestackListNextResponse
} from "../models";

/// <reference lib="esnext.asynciterable" />
/** Class containing GlobalRulestack operations. */
export class GlobalRulestackImpl implements GlobalRulestack {
  private readonly client: PaloAltoNetworksCloudngfw;

  /**
   * Initialize a new instance of the class GlobalRulestack class.
   * @param client Reference to the service client
   */
  constructor(client: PaloAltoNetworksCloudngfw) {
    this.client = client;
  }

  /**
   * List GlobalRulestackResource resources by Tenant
   * @param options The options parameters.
   */
  public list(
    options?: GlobalRulestackListOptionalParams
  ): PagedAsyncIterableIterator<GlobalRulestackResource> {
    const iter = this.listPagingAll(options);
    return {
      next() {
        return iter.next();
      },
      [Symbol.asyncIterator]() {
        return this;
      },
      byPage: (settings?: PageSettings) => {
        if (settings?.maxPageSize) {
          throw new Error("maxPageSize is not supported by this operation.");
        }
        return this.listPagingPage(options, settings);
      }
    };
  }

  private async *listPagingPage(
    options?: GlobalRulestackListOptionalParams,
    settings?: PageSettings
  ): AsyncIterableIterator<GlobalRulestackResource[]> {
    let result: GlobalRulestackListResponse;
    let continuationToken = settings?.continuationToken;
    if (!continuationToken) {
      result = await this._list(options);
      let page = result.value || [];
      continuationToken = result.nextLink;
      setContinuationToken(page, continuationToken);
      yield page;
    }
    while (continuationToken) {
      result = await this._listNext(continuationToken, options);
      continuationToken = result.nextLink;
      let page = result.value || [];
      setContinuationToken(page, continuationToken);
      yield page;
    }
  }

  private async *listPagingAll(
    options?: GlobalRulestackListOptionalParams
  ): AsyncIterableIterator<GlobalRulestackResource> {
    for await (const page of this.listPagingPage(options)) {
      yield* page;
    }
  }

  /**
   * List GlobalRulestackResource resources by Tenant
   * @param options The options parameters.
   */
  private _list(
    options?: GlobalRulestackListOptionalParams
  ): Promise<GlobalRulestackListResponse> {
    return this.client.sendOperationRequest({ options }, listOperationSpec);
  }

  /**
   * Get a GlobalRulestackResource
   * @param globalRulestackName GlobalRulestack resource name
   * @param options The options parameters.
   */
  get(
    globalRulestackName: string,
    options?: GlobalRulestackGetOptionalParams
  ): Promise<GlobalRulestackGetResponse> {
    return this.client.sendOperationRequest(
      { globalRulestackName, options },
      getOperationSpec
    );
  }

  /**
   * Create a GlobalRulestackResource
   * @param globalRulestackName GlobalRulestack resource name
   * @param resource Resource create parameters.
   * @param options The options parameters.
   */
  async beginCreateOrUpdate(
    globalRulestackName: string,
    resource: GlobalRulestackResource,
    options?: GlobalRulestackCreateOrUpdateOptionalParams
  ): Promise<
    SimplePollerLike<
      OperationState<GlobalRulestackCreateOrUpdateResponse>,
      GlobalRulestackCreateOrUpdateResponse
    >
  > {
    const directSendOperation = async (
      args: coreClient.OperationArguments,
      spec: coreClient.OperationSpec
    ): Promise<GlobalRulestackCreateOrUpdateResponse> => {
      return this.client.sendOperationRequest(args, spec);
    };
    const sendOperationFn = async (
      args: coreClient.OperationArguments,
      spec: coreClient.OperationSpec
    ) => {
      let currentRawResponse:
        | coreClient.FullOperationResponse
        | undefined = undefined;
      const providedCallback = args.options?.onResponse;
      const callback: coreClient.RawResponseCallback = (
        rawResponse: coreClient.FullOperationResponse,
        flatResponse: unknown
      ) => {
        currentRawResponse = rawResponse;
        providedCallback?.(rawResponse, flatResponse);
      };
      const updatedArgs = {
        ...args,
        options: {
          ...args.options,
          onResponse: callback
        }
      };
      const flatResponse = await directSendOperation(updatedArgs, spec);
      return {
        flatResponse,
        rawResponse: {
          statusCode: currentRawResponse!.status,
          body: currentRawResponse!.parsedBody,
          headers: currentRawResponse!.headers.toJSON()
        }
      };
    };

    const lro = createLroSpec({
      sendOperationFn,
      args: { globalRulestackName, resource, options },
      spec: createOrUpdateOperationSpec
    });
    const poller = await createHttpPoller<
      GlobalRulestackCreateOrUpdateResponse,
      OperationState<GlobalRulestackCreateOrUpdateResponse>
    >(lro, {
      restoreFrom: options?.resumeFrom,
      intervalInMs: options?.updateIntervalInMs,
      resourceLocationConfig: "azure-async-operation"
    });
    await poller.poll();
    return poller;
  }

  /**
   * Create a GlobalRulestackResource
   * @param globalRulestackName GlobalRulestack resource name
   * @param resource Resource create parameters.
   * @param options The options parameters.
   */
  async beginCreateOrUpdateAndWait(
    globalRulestackName: string,
    resource: GlobalRulestackResource,
    options?: GlobalRulestackCreateOrUpdateOptionalParams
  ): Promise<GlobalRulestackCreateOrUpdateResponse> {
    const poller = await this.beginCreateOrUpdate(
      globalRulestackName,
      resource,
      options
    );
    return poller.pollUntilDone();
  }

  /**
   * Update a GlobalRulestackResource
   * @param globalRulestackName GlobalRulestack resource name
   * @param properties The resource properties to be updated.
   * @param options The options parameters.
   */
  update(
    globalRulestackName: string,
    properties: GlobalRulestackResourceUpdate,
    options?: GlobalRulestackUpdateOptionalParams
  ): Promise<GlobalRulestackUpdateResponse> {
    return this.client.sendOperationRequest(
      { globalRulestackName, properties, options },
      updateOperationSpec
    );
  }

  /**
   * Delete a GlobalRulestackResource
   * @param globalRulestackName GlobalRulestack resource name
   * @param options The options parameters.
   */
  async beginDelete(
    globalRulestackName: string,
    options?: GlobalRulestackDeleteOptionalParams
  ): Promise<SimplePollerLike<OperationState<void>, void>> {
    const directSendOperation = async (
      args: coreClient.OperationArguments,
      spec: coreClient.OperationSpec
    ): Promise<void> => {
      return this.client.sendOperationRequest(args, spec);
    };
    const sendOperationFn = async (
      args: coreClient.OperationArguments,
      spec: coreClient.OperationSpec
    ) => {
      let currentRawResponse:
        | coreClient.FullOperationResponse
        | undefined = undefined;
      const providedCallback = args.options?.onResponse;
      const callback: coreClient.RawResponseCallback = (
        rawResponse: coreClient.FullOperationResponse,
        flatResponse: unknown
      ) => {
        currentRawResponse = rawResponse;
        providedCallback?.(rawResponse, flatResponse);
      };
      const updatedArgs = {
        ...args,
        options: {
          ...args.options,
          onResponse: callback
        }
      };
      const flatResponse = await directSendOperation(updatedArgs, spec);
      return {
        flatResponse,
        rawResponse: {
          statusCode: currentRawResponse!.status,
          body: currentRawResponse!.parsedBody,
          headers: currentRawResponse!.headers.toJSON()
        }
      };
    };

    const lro = createLroSpec({
      sendOperationFn,
      args: { globalRulestackName, options },
      spec: deleteOperationSpec
    });
    const poller = await createHttpPoller<void, OperationState<void>>(lro, {
      restoreFrom: options?.resumeFrom,
      intervalInMs: options?.updateIntervalInMs,
      resourceLocationConfig: "azure-async-operation"
    });
    await poller.poll();
    return poller;
  }

  /**
   * Delete a GlobalRulestackResource
   * @param globalRulestackName GlobalRulestack resource name
   * @param options The options parameters.
   */
  async beginDeleteAndWait(
    globalRulestackName: string,
    options?: GlobalRulestackDeleteOptionalParams
  ): Promise<void> {
    const poller = await this.beginDelete(globalRulestackName, options);
    return poller.pollUntilDone();
  }

  /**
   * Commit rulestack configuration
   * @param globalRulestackName GlobalRulestack resource name
   * @param options The options parameters.
   */
  async beginCommit(
    globalRulestackName: string,
    options?: GlobalRulestackCommitOptionalParams
  ): Promise<SimplePollerLike<OperationState<void>, void>> {
    const directSendOperation = async (
      args: coreClient.OperationArguments,
      spec: coreClient.OperationSpec
    ): Promise<void> => {
      return this.client.sendOperationRequest(args, spec);
    };
    const sendOperationFn = async (
      args: coreClient.OperationArguments,
      spec: coreClient.OperationSpec
    ) => {
      let currentRawResponse:
        | coreClient.FullOperationResponse
        | undefined = undefined;
      const providedCallback = args.options?.onResponse;
      const callback: coreClient.RawResponseCallback = (
        rawResponse: coreClient.FullOperationResponse,
        flatResponse: unknown
      ) => {
        currentRawResponse = rawResponse;
        providedCallback?.(rawResponse, flatResponse);
      };
      const updatedArgs = {
        ...args,
        options: {
          ...args.options,
          onResponse: callback
        }
      };
      const flatResponse = await directSendOperation(updatedArgs, spec);
      return {
        flatResponse,
        rawResponse: {
          statusCode: currentRawResponse!.status,
          body: currentRawResponse!.parsedBody,
          headers: currentRawResponse!.headers.toJSON()
        }
      };
    };

    const lro = createLroSpec({
      sendOperationFn,
      args: { globalRulestackName, options },
      spec: commitOperationSpec
    });
    const poller = await createHttpPoller<void, OperationState<void>>(lro, {
      restoreFrom: options?.resumeFrom,
      intervalInMs: options?.updateIntervalInMs,
      resourceLocationConfig: "location"
    });
    await poller.poll();
    return poller;
  }

  /**
   * Commit rulestack configuration
   * @param globalRulestackName GlobalRulestack resource name
   * @param options The options parameters.
   */
  async beginCommitAndWait(
    globalRulestackName: string,
    options?: GlobalRulestackCommitOptionalParams
  ): Promise<void> {
    const poller = await this.beginCommit(globalRulestackName, options);
    return poller.pollUntilDone();
  }

  /**
   * Get changelog
   * @param globalRulestackName GlobalRulestack resource name
   * @param options The options parameters.
   */
  getChangeLog(
    globalRulestackName: string,
    options?: GlobalRulestackGetChangeLogOptionalParams
  ): Promise<GlobalRulestackGetChangeLogResponse> {
    return this.client.sendOperationRequest(
      { globalRulestackName, options },
      getChangeLogOperationSpec
    );
  }

  /**
   * Get the list of advanced security objects
   * @param globalRulestackName GlobalRulestack resource name
   * @param typeParam
   * @param options The options parameters.
   */
  listAdvancedSecurityObjects(
    globalRulestackName: string,
    typeParam: AdvSecurityObjectTypeEnum,
    options?: GlobalRulestackListAdvancedSecurityObjectsOptionalParams
  ): Promise<GlobalRulestackListAdvancedSecurityObjectsResponse> {
    return this.client.sendOperationRequest(
      { globalRulestackName, typeParam, options },
      listAdvancedSecurityObjectsOperationSpec
    );
  }

  /**
   * List of AppIds for GlobalRulestack ApiVersion
   * @param globalRulestackName GlobalRulestack resource name
   * @param options The options parameters.
   */
  listAppIds(
    globalRulestackName: string,
    options?: GlobalRulestackListAppIdsOptionalParams
  ): Promise<GlobalRulestackListAppIdsResponse> {
    return this.client.sendOperationRequest(
      { globalRulestackName, options },
      listAppIdsOperationSpec
    );
  }

  /**
   * List of countries for Rulestack
   * @param globalRulestackName GlobalRulestack resource name
   * @param options The options parameters.
   */
  listCountries(
    globalRulestackName: string,
    options?: GlobalRulestackListCountriesOptionalParams
  ): Promise<GlobalRulestackListCountriesResponse> {
    return this.client.sendOperationRequest(
      { globalRulestackName, options },
      listCountriesOperationSpec
    );
  }

  /**
   * List of Firewalls associated with Rulestack
   * @param globalRulestackName GlobalRulestack resource name
   * @param options The options parameters.
   */
  listFirewalls(
    globalRulestackName: string,
    options?: GlobalRulestackListFirewallsOptionalParams
  ): Promise<GlobalRulestackListFirewallsResponse> {
    return this.client.sendOperationRequest(
      { globalRulestackName, options },
      listFirewallsOperationSpec
    );
  }

  /**
   * List predefined URL categories for rulestack
   * @param globalRulestackName GlobalRulestack resource name
   * @param options The options parameters.
   */
  listPredefinedUrlCategories(
    globalRulestackName: string,
    options?: GlobalRulestackListPredefinedUrlCategoriesOptionalParams
  ): Promise<GlobalRulestackListPredefinedUrlCategoriesResponse> {
    return this.client.sendOperationRequest(
      { globalRulestackName, options },
      listPredefinedUrlCategoriesOperationSpec
    );
  }

  /**
   * List the security services for rulestack
   * @param globalRulestackName GlobalRulestack resource name
   * @param typeParam
   * @param options The options parameters.
   */
  listSecurityServices(
    globalRulestackName: string,
    typeParam: SecurityServicesTypeEnum,
    options?: GlobalRulestackListSecurityServicesOptionalParams
  ): Promise<GlobalRulestackListSecurityServicesResponse> {
    return this.client.sendOperationRequest(
      { globalRulestackName, typeParam, options },
      listSecurityServicesOperationSpec
    );
  }

  /**
   * Revert rulestack configuration
   * @param globalRulestackName GlobalRulestack resource name
   * @param options The options parameters.
   */
  revert(
    globalRulestackName: string,
    options?: GlobalRulestackRevertOptionalParams
  ): Promise<void> {
    return this.client.sendOperationRequest(
      { globalRulestackName, options },
      revertOperationSpec
    );
  }

  /**
   * ListNext
   * @param nextLink The nextLink from the previous successful call to the List method.
   * @param options The options parameters.
   */
  private _listNext(
    nextLink: string,
    options?: GlobalRulestackListNextOptionalParams
  ): Promise<GlobalRulestackListNextResponse> {
    return this.client.sendOperationRequest(
      { nextLink, options },
      listNextOperationSpec
    );
  }
}
// Operation Specifications
const serializer = coreClient.createSerializer(Mappers, /* isXml */ false);

const listOperationSpec: coreClient.OperationSpec = {
  path: "/providers/PaloAltoNetworks.Cloudngfw/globalRulestacks",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.GlobalRulestackResourceListResult
    },
    default: {
      bodyMapper: Mappers.ErrorResponse
    }
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [Parameters.$host],
  headerParameters: [Parameters.accept],
  serializer
};
const getOperationSpec: coreClient.OperationSpec = {
  path:
    "/providers/PaloAltoNetworks.Cloudngfw/globalRulestacks/{globalRulestackName}",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.GlobalRulestackResource
    },
    default: {
      bodyMapper: Mappers.ErrorResponse
    }
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [Parameters.$host, Parameters.globalRulestackName],
  headerParameters: [Parameters.accept],
  serializer
};
const createOrUpdateOperationSpec: coreClient.OperationSpec = {
  path:
    "/providers/PaloAltoNetworks.Cloudngfw/globalRulestacks/{globalRulestackName}",
  httpMethod: "PUT",
  responses: {
    200: {
      bodyMapper: Mappers.GlobalRulestackResource
    },
    201: {
      bodyMapper: Mappers.GlobalRulestackResource
    },
    202: {
      bodyMapper: Mappers.GlobalRulestackResource
    },
    204: {
      bodyMapper: Mappers.GlobalRulestackResource
    },
    default: {
      bodyMapper: Mappers.ErrorResponse
    }
  },
  requestBody: Parameters.resource,
  queryParameters: [Parameters.apiVersion],
  urlParameters: [Parameters.$host, Parameters.globalRulestackName],
  headerParameters: [Parameters.accept, Parameters.contentType],
  mediaType: "json",
  serializer
};
const updateOperationSpec: coreClient.OperationSpec = {
  path:
    "/providers/PaloAltoNetworks.Cloudngfw/globalRulestacks/{globalRulestackName}",
  httpMethod: "PATCH",
  responses: {
    200: {
      bodyMapper: Mappers.GlobalRulestackResource
    },
    default: {
      bodyMapper: Mappers.ErrorResponse
    }
  },
  requestBody: Parameters.properties,
  queryParameters: [Parameters.apiVersion],
  urlParameters: [Parameters.$host, Parameters.globalRulestackName],
  headerParameters: [Parameters.accept, Parameters.contentType],
  mediaType: "json",
  serializer
};
const deleteOperationSpec: coreClient.OperationSpec = {
  path:
    "/providers/PaloAltoNetworks.Cloudngfw/globalRulestacks/{globalRulestackName}",
  httpMethod: "DELETE",
  responses: {
    200: {},
    201: {},
    202: {},
    204: {},
    default: {
      bodyMapper: Mappers.ErrorResponse
    }
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [Parameters.$host, Parameters.globalRulestackName],
  headerParameters: [Parameters.accept],
  serializer
};
const commitOperationSpec: coreClient.OperationSpec = {
  path:
    "/providers/PaloAltoNetworks.Cloudngfw/globalRulestacks/{globalRulestackName}/commit",
  httpMethod: "POST",
  responses: {
    200: {},
    201: {},
    202: {},
    204: {},
    default: {
      bodyMapper: Mappers.ErrorResponse
    }
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [Parameters.$host, Parameters.globalRulestackName],
  headerParameters: [Parameters.accept],
  serializer
};
const getChangeLogOperationSpec: coreClient.OperationSpec = {
  path:
    "/providers/PaloAltoNetworks.Cloudngfw/globalRulestacks/{globalRulestackName}/getChangeLog",
  httpMethod: "POST",
  responses: {
    200: {
      bodyMapper: Mappers.Changelog
    },
    default: {
      bodyMapper: Mappers.ErrorResponse
    }
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [Parameters.$host, Parameters.globalRulestackName],
  headerParameters: [Parameters.accept],
  serializer
};
const listAdvancedSecurityObjectsOperationSpec: coreClient.OperationSpec = {
  path:
    "/providers/PaloAltoNetworks.Cloudngfw/globalRulestacks/{globalRulestackName}/listAdvancedSecurityObjects",
  httpMethod: "POST",
  responses: {
    200: {
      bodyMapper: Mappers.AdvSecurityObjectListResponse
    },
    default: {
      bodyMapper: Mappers.ErrorResponse
    }
  },
  queryParameters: [
    Parameters.apiVersion,
    Parameters.skip,
    Parameters.top,
    Parameters.typeParam
  ],
  urlParameters: [Parameters.$host, Parameters.globalRulestackName],
  headerParameters: [Parameters.accept],
  serializer
};
const listAppIdsOperationSpec: coreClient.OperationSpec = {
  path:
    "/providers/PaloAltoNetworks.Cloudngfw/globalRulestacks/{globalRulestackName}/listAppIds",
  httpMethod: "POST",
  responses: {
    200: {
      bodyMapper: Mappers.ListAppIdResponse
    },
    default: {
      bodyMapper: Mappers.ErrorResponse
    }
  },
  queryParameters: [
    Parameters.apiVersion,
    Parameters.skip,
    Parameters.top,
    Parameters.appIdVersion,
    Parameters.appPrefix
  ],
  urlParameters: [Parameters.$host, Parameters.globalRulestackName],
  headerParameters: [Parameters.accept],
  serializer
};
const listCountriesOperationSpec: coreClient.OperationSpec = {
  path:
    "/providers/PaloAltoNetworks.Cloudngfw/globalRulestacks/{globalRulestackName}/listCountries",
  httpMethod: "POST",
  responses: {
    200: {
      bodyMapper: Mappers.CountriesResponse
    },
    default: {
      bodyMapper: Mappers.ErrorResponse
    }
  },
  queryParameters: [Parameters.apiVersion, Parameters.skip, Parameters.top],
  urlParameters: [Parameters.$host, Parameters.globalRulestackName],
  headerParameters: [Parameters.accept],
  serializer
};
const listFirewallsOperationSpec: coreClient.OperationSpec = {
  path:
    "/providers/PaloAltoNetworks.Cloudngfw/globalRulestacks/{globalRulestackName}/listFirewalls",
  httpMethod: "POST",
  responses: {
    200: {
      bodyMapper: Mappers.ListFirewallsResponse
    },
    default: {
      bodyMapper: Mappers.ErrorResponse
    }
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [Parameters.$host, Parameters.globalRulestackName],
  headerParameters: [Parameters.accept],
  serializer
};
const listPredefinedUrlCategoriesOperationSpec: coreClient.OperationSpec = {
  path:
    "/providers/PaloAltoNetworks.Cloudngfw/globalRulestacks/{globalRulestackName}/listPredefinedUrlCategories",
  httpMethod: "POST",
  responses: {
    200: {
      bodyMapper: Mappers.PredefinedUrlCategoriesResponse
    },
    default: {
      bodyMapper: Mappers.ErrorResponse
    }
  },
  queryParameters: [Parameters.apiVersion, Parameters.skip, Parameters.top],
  urlParameters: [Parameters.$host, Parameters.globalRulestackName],
  headerParameters: [Parameters.accept],
  serializer
};
const listSecurityServicesOperationSpec: coreClient.OperationSpec = {
  path:
    "/providers/PaloAltoNetworks.Cloudngfw/globalRulestacks/{globalRulestackName}/listSecurityServices",
  httpMethod: "POST",
  responses: {
    200: {
      bodyMapper: Mappers.SecurityServicesResponse
    },
    default: {
      bodyMapper: Mappers.ErrorResponse
    }
  },
  queryParameters: [
    Parameters.apiVersion,
    Parameters.skip,
    Parameters.top,
    Parameters.typeParam1
  ],
  urlParameters: [Parameters.$host, Parameters.globalRulestackName],
  headerParameters: [Parameters.accept],
  serializer
};
const revertOperationSpec: coreClient.OperationSpec = {
  path:
    "/providers/PaloAltoNetworks.Cloudngfw/globalRulestacks/{globalRulestackName}/revert",
  httpMethod: "POST",
  responses: {
    204: {},
    default: {
      bodyMapper: Mappers.ErrorResponse
    }
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [Parameters.$host, Parameters.globalRulestackName],
  headerParameters: [Parameters.accept],
  serializer
};
const listNextOperationSpec: coreClient.OperationSpec = {
  path: "{nextLink}",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.GlobalRulestackResourceListResult
    },
    default: {
      bodyMapper: Mappers.ErrorResponse
    }
  },
  urlParameters: [Parameters.$host, Parameters.nextLink],
  headerParameters: [Parameters.accept],
  serializer
};
