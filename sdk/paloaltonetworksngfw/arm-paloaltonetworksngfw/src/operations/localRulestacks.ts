/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */

import { PagedAsyncIterableIterator, PageSettings } from "@azure/core-paging";
import { setContinuationToken } from "../pagingHelper";
import { LocalRulestacks } from "../operationsInterfaces";
import * as coreClient from "@azure/core-client";
import * as Mappers from "../models/mappers";
import * as Parameters from "../models/parameters";
import { PaloAltoNetworksCloudngfw } from "../paloAltoNetworksCloudngfw";
import {
  SimplePollerLike,
  OperationState,
  createHttpPoller
} from "@azure/core-lro";
import { createLroSpec } from "../lroImpl";
import {
  LocalRulestackResource,
  LocalRulestacksListBySubscriptionNextOptionalParams,
  LocalRulestacksListBySubscriptionOptionalParams,
  LocalRulestacksListBySubscriptionResponse,
  LocalRulestacksListByResourceGroupNextOptionalParams,
  LocalRulestacksListByResourceGroupOptionalParams,
  LocalRulestacksListByResourceGroupResponse,
  LocalRulestacksGetOptionalParams,
  LocalRulestacksGetResponse,
  LocalRulestacksCreateOrUpdateOptionalParams,
  LocalRulestacksCreateOrUpdateResponse,
  LocalRulestackResourceUpdate,
  LocalRulestacksUpdateOptionalParams,
  LocalRulestacksUpdateResponse,
  LocalRulestacksDeleteOptionalParams,
  LocalRulestacksCommitOptionalParams,
  LocalRulestacksGetChangeLogOptionalParams,
  LocalRulestacksGetChangeLogResponse,
  LocalRulestacksGetSupportInfoOptionalParams,
  LocalRulestacksGetSupportInfoResponse,
  AdvSecurityObjectTypeEnum,
  LocalRulestacksListAdvancedSecurityObjectsOptionalParams,
  LocalRulestacksListAdvancedSecurityObjectsResponse,
  LocalRulestacksListAppIdsOptionalParams,
  LocalRulestacksListAppIdsResponse,
  LocalRulestacksListCountriesOptionalParams,
  LocalRulestacksListCountriesResponse,
  LocalRulestacksListFirewallsOptionalParams,
  LocalRulestacksListFirewallsResponse,
  LocalRulestacksListPredefinedUrlCategoriesOptionalParams,
  LocalRulestacksListPredefinedUrlCategoriesResponse,
  SecurityServicesTypeEnum,
  LocalRulestacksListSecurityServicesOptionalParams,
  LocalRulestacksListSecurityServicesResponse,
  LocalRulestacksRevertOptionalParams,
  LocalRulestacksListBySubscriptionNextResponse,
  LocalRulestacksListByResourceGroupNextResponse
} from "../models";

/// <reference lib="esnext.asynciterable" />
/** Class containing LocalRulestacks operations. */
export class LocalRulestacksImpl implements LocalRulestacks {
  private readonly client: PaloAltoNetworksCloudngfw;

  /**
   * Initialize a new instance of the class LocalRulestacks class.
   * @param client Reference to the service client
   */
  constructor(client: PaloAltoNetworksCloudngfw) {
    this.client = client;
  }

  /**
   * List LocalRulestackResource resources by subscription ID
   * @param options The options parameters.
   */
  public listBySubscription(
    options?: LocalRulestacksListBySubscriptionOptionalParams
  ): PagedAsyncIterableIterator<LocalRulestackResource> {
    const iter = this.listBySubscriptionPagingAll(options);
    return {
      next() {
        return iter.next();
      },
      [Symbol.asyncIterator]() {
        return this;
      },
      byPage: (settings?: PageSettings) => {
        if (settings?.maxPageSize) {
          throw new Error("maxPageSize is not supported by this operation.");
        }
        return this.listBySubscriptionPagingPage(options, settings);
      }
    };
  }

  private async *listBySubscriptionPagingPage(
    options?: LocalRulestacksListBySubscriptionOptionalParams,
    settings?: PageSettings
  ): AsyncIterableIterator<LocalRulestackResource[]> {
    let result: LocalRulestacksListBySubscriptionResponse;
    let continuationToken = settings?.continuationToken;
    if (!continuationToken) {
      result = await this._listBySubscription(options);
      let page = result.value || [];
      continuationToken = result.nextLink;
      setContinuationToken(page, continuationToken);
      yield page;
    }
    while (continuationToken) {
      result = await this._listBySubscriptionNext(continuationToken, options);
      continuationToken = result.nextLink;
      let page = result.value || [];
      setContinuationToken(page, continuationToken);
      yield page;
    }
  }

  private async *listBySubscriptionPagingAll(
    options?: LocalRulestacksListBySubscriptionOptionalParams
  ): AsyncIterableIterator<LocalRulestackResource> {
    for await (const page of this.listBySubscriptionPagingPage(options)) {
      yield* page;
    }
  }

  /**
   * List LocalRulestackResource resources by resource group
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param options The options parameters.
   */
  public listByResourceGroup(
    resourceGroupName: string,
    options?: LocalRulestacksListByResourceGroupOptionalParams
  ): PagedAsyncIterableIterator<LocalRulestackResource> {
    const iter = this.listByResourceGroupPagingAll(resourceGroupName, options);
    return {
      next() {
        return iter.next();
      },
      [Symbol.asyncIterator]() {
        return this;
      },
      byPage: (settings?: PageSettings) => {
        if (settings?.maxPageSize) {
          throw new Error("maxPageSize is not supported by this operation.");
        }
        return this.listByResourceGroupPagingPage(
          resourceGroupName,
          options,
          settings
        );
      }
    };
  }

  private async *listByResourceGroupPagingPage(
    resourceGroupName: string,
    options?: LocalRulestacksListByResourceGroupOptionalParams,
    settings?: PageSettings
  ): AsyncIterableIterator<LocalRulestackResource[]> {
    let result: LocalRulestacksListByResourceGroupResponse;
    let continuationToken = settings?.continuationToken;
    if (!continuationToken) {
      result = await this._listByResourceGroup(resourceGroupName, options);
      let page = result.value || [];
      continuationToken = result.nextLink;
      setContinuationToken(page, continuationToken);
      yield page;
    }
    while (continuationToken) {
      result = await this._listByResourceGroupNext(
        resourceGroupName,
        continuationToken,
        options
      );
      continuationToken = result.nextLink;
      let page = result.value || [];
      setContinuationToken(page, continuationToken);
      yield page;
    }
  }

  private async *listByResourceGroupPagingAll(
    resourceGroupName: string,
    options?: LocalRulestacksListByResourceGroupOptionalParams
  ): AsyncIterableIterator<LocalRulestackResource> {
    for await (const page of this.listByResourceGroupPagingPage(
      resourceGroupName,
      options
    )) {
      yield* page;
    }
  }

  /**
   * List LocalRulestackResource resources by subscription ID
   * @param options The options parameters.
   */
  private _listBySubscription(
    options?: LocalRulestacksListBySubscriptionOptionalParams
  ): Promise<LocalRulestacksListBySubscriptionResponse> {
    return this.client.sendOperationRequest(
      { options },
      listBySubscriptionOperationSpec
    );
  }

  /**
   * List LocalRulestackResource resources by resource group
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param options The options parameters.
   */
  private _listByResourceGroup(
    resourceGroupName: string,
    options?: LocalRulestacksListByResourceGroupOptionalParams
  ): Promise<LocalRulestacksListByResourceGroupResponse> {
    return this.client.sendOperationRequest(
      { resourceGroupName, options },
      listByResourceGroupOperationSpec
    );
  }

  /**
   * Get a LocalRulestackResource
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param localRulestackName LocalRulestack resource name
   * @param options The options parameters.
   */
  get(
    resourceGroupName: string,
    localRulestackName: string,
    options?: LocalRulestacksGetOptionalParams
  ): Promise<LocalRulestacksGetResponse> {
    return this.client.sendOperationRequest(
      { resourceGroupName, localRulestackName, options },
      getOperationSpec
    );
  }

  /**
   * Create a LocalRulestackResource
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param localRulestackName LocalRulestack resource name
   * @param resource Resource create parameters.
   * @param options The options parameters.
   */
  async beginCreateOrUpdate(
    resourceGroupName: string,
    localRulestackName: string,
    resource: LocalRulestackResource,
    options?: LocalRulestacksCreateOrUpdateOptionalParams
  ): Promise<
    SimplePollerLike<
      OperationState<LocalRulestacksCreateOrUpdateResponse>,
      LocalRulestacksCreateOrUpdateResponse
    >
  > {
    const directSendOperation = async (
      args: coreClient.OperationArguments,
      spec: coreClient.OperationSpec
    ): Promise<LocalRulestacksCreateOrUpdateResponse> => {
      return this.client.sendOperationRequest(args, spec);
    };
    const sendOperationFn = async (
      args: coreClient.OperationArguments,
      spec: coreClient.OperationSpec
    ) => {
      let currentRawResponse:
        | coreClient.FullOperationResponse
        | undefined = undefined;
      const providedCallback = args.options?.onResponse;
      const callback: coreClient.RawResponseCallback = (
        rawResponse: coreClient.FullOperationResponse,
        flatResponse: unknown
      ) => {
        currentRawResponse = rawResponse;
        providedCallback?.(rawResponse, flatResponse);
      };
      const updatedArgs = {
        ...args,
        options: {
          ...args.options,
          onResponse: callback
        }
      };
      const flatResponse = await directSendOperation(updatedArgs, spec);
      return {
        flatResponse,
        rawResponse: {
          statusCode: currentRawResponse!.status,
          body: currentRawResponse!.parsedBody,
          headers: currentRawResponse!.headers.toJSON()
        }
      };
    };

    const lro = createLroSpec({
      sendOperationFn,
      args: { resourceGroupName, localRulestackName, resource, options },
      spec: createOrUpdateOperationSpec
    });
    const poller = await createHttpPoller<
      LocalRulestacksCreateOrUpdateResponse,
      OperationState<LocalRulestacksCreateOrUpdateResponse>
    >(lro, {
      restoreFrom: options?.resumeFrom,
      intervalInMs: options?.updateIntervalInMs,
      resourceLocationConfig: "azure-async-operation"
    });
    await poller.poll();
    return poller;
  }

  /**
   * Create a LocalRulestackResource
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param localRulestackName LocalRulestack resource name
   * @param resource Resource create parameters.
   * @param options The options parameters.
   */
  async beginCreateOrUpdateAndWait(
    resourceGroupName: string,
    localRulestackName: string,
    resource: LocalRulestackResource,
    options?: LocalRulestacksCreateOrUpdateOptionalParams
  ): Promise<LocalRulestacksCreateOrUpdateResponse> {
    const poller = await this.beginCreateOrUpdate(
      resourceGroupName,
      localRulestackName,
      resource,
      options
    );
    return poller.pollUntilDone();
  }

  /**
   * Update a LocalRulestackResource
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param localRulestackName LocalRulestack resource name
   * @param properties The resource properties to be updated.
   * @param options The options parameters.
   */
  update(
    resourceGroupName: string,
    localRulestackName: string,
    properties: LocalRulestackResourceUpdate,
    options?: LocalRulestacksUpdateOptionalParams
  ): Promise<LocalRulestacksUpdateResponse> {
    return this.client.sendOperationRequest(
      { resourceGroupName, localRulestackName, properties, options },
      updateOperationSpec
    );
  }

  /**
   * Delete a LocalRulestackResource
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param localRulestackName LocalRulestack resource name
   * @param options The options parameters.
   */
  async beginDelete(
    resourceGroupName: string,
    localRulestackName: string,
    options?: LocalRulestacksDeleteOptionalParams
  ): Promise<SimplePollerLike<OperationState<void>, void>> {
    const directSendOperation = async (
      args: coreClient.OperationArguments,
      spec: coreClient.OperationSpec
    ): Promise<void> => {
      return this.client.sendOperationRequest(args, spec);
    };
    const sendOperationFn = async (
      args: coreClient.OperationArguments,
      spec: coreClient.OperationSpec
    ) => {
      let currentRawResponse:
        | coreClient.FullOperationResponse
        | undefined = undefined;
      const providedCallback = args.options?.onResponse;
      const callback: coreClient.RawResponseCallback = (
        rawResponse: coreClient.FullOperationResponse,
        flatResponse: unknown
      ) => {
        currentRawResponse = rawResponse;
        providedCallback?.(rawResponse, flatResponse);
      };
      const updatedArgs = {
        ...args,
        options: {
          ...args.options,
          onResponse: callback
        }
      };
      const flatResponse = await directSendOperation(updatedArgs, spec);
      return {
        flatResponse,
        rawResponse: {
          statusCode: currentRawResponse!.status,
          body: currentRawResponse!.parsedBody,
          headers: currentRawResponse!.headers.toJSON()
        }
      };
    };

    const lro = createLroSpec({
      sendOperationFn,
      args: { resourceGroupName, localRulestackName, options },
      spec: deleteOperationSpec
    });
    const poller = await createHttpPoller<void, OperationState<void>>(lro, {
      restoreFrom: options?.resumeFrom,
      intervalInMs: options?.updateIntervalInMs,
      resourceLocationConfig: "azure-async-operation"
    });
    await poller.poll();
    return poller;
  }

  /**
   * Delete a LocalRulestackResource
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param localRulestackName LocalRulestack resource name
   * @param options The options parameters.
   */
  async beginDeleteAndWait(
    resourceGroupName: string,
    localRulestackName: string,
    options?: LocalRulestacksDeleteOptionalParams
  ): Promise<void> {
    const poller = await this.beginDelete(
      resourceGroupName,
      localRulestackName,
      options
    );
    return poller.pollUntilDone();
  }

  /**
   * Commit rulestack configuration
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param localRulestackName LocalRulestack resource name
   * @param options The options parameters.
   */
  async beginCommit(
    resourceGroupName: string,
    localRulestackName: string,
    options?: LocalRulestacksCommitOptionalParams
  ): Promise<SimplePollerLike<OperationState<void>, void>> {
    const directSendOperation = async (
      args: coreClient.OperationArguments,
      spec: coreClient.OperationSpec
    ): Promise<void> => {
      return this.client.sendOperationRequest(args, spec);
    };
    const sendOperationFn = async (
      args: coreClient.OperationArguments,
      spec: coreClient.OperationSpec
    ) => {
      let currentRawResponse:
        | coreClient.FullOperationResponse
        | undefined = undefined;
      const providedCallback = args.options?.onResponse;
      const callback: coreClient.RawResponseCallback = (
        rawResponse: coreClient.FullOperationResponse,
        flatResponse: unknown
      ) => {
        currentRawResponse = rawResponse;
        providedCallback?.(rawResponse, flatResponse);
      };
      const updatedArgs = {
        ...args,
        options: {
          ...args.options,
          onResponse: callback
        }
      };
      const flatResponse = await directSendOperation(updatedArgs, spec);
      return {
        flatResponse,
        rawResponse: {
          statusCode: currentRawResponse!.status,
          body: currentRawResponse!.parsedBody,
          headers: currentRawResponse!.headers.toJSON()
        }
      };
    };

    const lro = createLroSpec({
      sendOperationFn,
      args: { resourceGroupName, localRulestackName, options },
      spec: commitOperationSpec
    });
    const poller = await createHttpPoller<void, OperationState<void>>(lro, {
      restoreFrom: options?.resumeFrom,
      intervalInMs: options?.updateIntervalInMs,
      resourceLocationConfig: "location"
    });
    await poller.poll();
    return poller;
  }

  /**
   * Commit rulestack configuration
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param localRulestackName LocalRulestack resource name
   * @param options The options parameters.
   */
  async beginCommitAndWait(
    resourceGroupName: string,
    localRulestackName: string,
    options?: LocalRulestacksCommitOptionalParams
  ): Promise<void> {
    const poller = await this.beginCommit(
      resourceGroupName,
      localRulestackName,
      options
    );
    return poller.pollUntilDone();
  }

  /**
   * Get changelog
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param localRulestackName LocalRulestack resource name
   * @param options The options parameters.
   */
  getChangeLog(
    resourceGroupName: string,
    localRulestackName: string,
    options?: LocalRulestacksGetChangeLogOptionalParams
  ): Promise<LocalRulestacksGetChangeLogResponse> {
    return this.client.sendOperationRequest(
      { resourceGroupName, localRulestackName, options },
      getChangeLogOperationSpec
    );
  }

  /**
   * support info for rulestack.
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param localRulestackName LocalRulestack resource name
   * @param options The options parameters.
   */
  getSupportInfo(
    resourceGroupName: string,
    localRulestackName: string,
    options?: LocalRulestacksGetSupportInfoOptionalParams
  ): Promise<LocalRulestacksGetSupportInfoResponse> {
    return this.client.sendOperationRequest(
      { resourceGroupName, localRulestackName, options },
      getSupportInfoOperationSpec
    );
  }

  /**
   * Get the list of advanced security objects
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param localRulestackName LocalRulestack resource name
   * @param typeParam
   * @param options The options parameters.
   */
  listAdvancedSecurityObjects(
    resourceGroupName: string,
    localRulestackName: string,
    typeParam: AdvSecurityObjectTypeEnum,
    options?: LocalRulestacksListAdvancedSecurityObjectsOptionalParams
  ): Promise<LocalRulestacksListAdvancedSecurityObjectsResponse> {
    return this.client.sendOperationRequest(
      { resourceGroupName, localRulestackName, typeParam, options },
      listAdvancedSecurityObjectsOperationSpec
    );
  }

  /**
   * List of AppIds for LocalRulestack ApiVersion
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param localRulestackName LocalRulestack resource name
   * @param options The options parameters.
   */
  listAppIds(
    resourceGroupName: string,
    localRulestackName: string,
    options?: LocalRulestacksListAppIdsOptionalParams
  ): Promise<LocalRulestacksListAppIdsResponse> {
    return this.client.sendOperationRequest(
      { resourceGroupName, localRulestackName, options },
      listAppIdsOperationSpec
    );
  }

  /**
   * List of countries for Rulestack
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param localRulestackName LocalRulestack resource name
   * @param options The options parameters.
   */
  listCountries(
    resourceGroupName: string,
    localRulestackName: string,
    options?: LocalRulestacksListCountriesOptionalParams
  ): Promise<LocalRulestacksListCountriesResponse> {
    return this.client.sendOperationRequest(
      { resourceGroupName, localRulestackName, options },
      listCountriesOperationSpec
    );
  }

  /**
   * List of Firewalls associated with Rulestack
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param localRulestackName LocalRulestack resource name
   * @param options The options parameters.
   */
  listFirewalls(
    resourceGroupName: string,
    localRulestackName: string,
    options?: LocalRulestacksListFirewallsOptionalParams
  ): Promise<LocalRulestacksListFirewallsResponse> {
    return this.client.sendOperationRequest(
      { resourceGroupName, localRulestackName, options },
      listFirewallsOperationSpec
    );
  }

  /**
   * List predefined URL categories for rulestack
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param localRulestackName LocalRulestack resource name
   * @param options The options parameters.
   */
  listPredefinedUrlCategories(
    resourceGroupName: string,
    localRulestackName: string,
    options?: LocalRulestacksListPredefinedUrlCategoriesOptionalParams
  ): Promise<LocalRulestacksListPredefinedUrlCategoriesResponse> {
    return this.client.sendOperationRequest(
      { resourceGroupName, localRulestackName, options },
      listPredefinedUrlCategoriesOperationSpec
    );
  }

  /**
   * List the security services for rulestack
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param localRulestackName LocalRulestack resource name
   * @param typeParam
   * @param options The options parameters.
   */
  listSecurityServices(
    resourceGroupName: string,
    localRulestackName: string,
    typeParam: SecurityServicesTypeEnum,
    options?: LocalRulestacksListSecurityServicesOptionalParams
  ): Promise<LocalRulestacksListSecurityServicesResponse> {
    return this.client.sendOperationRequest(
      { resourceGroupName, localRulestackName, typeParam, options },
      listSecurityServicesOperationSpec
    );
  }

  /**
   * Revert rulestack configuration
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param localRulestackName LocalRulestack resource name
   * @param options The options parameters.
   */
  revert(
    resourceGroupName: string,
    localRulestackName: string,
    options?: LocalRulestacksRevertOptionalParams
  ): Promise<void> {
    return this.client.sendOperationRequest(
      { resourceGroupName, localRulestackName, options },
      revertOperationSpec
    );
  }

  /**
   * ListBySubscriptionNext
   * @param nextLink The nextLink from the previous successful call to the ListBySubscription method.
   * @param options The options parameters.
   */
  private _listBySubscriptionNext(
    nextLink: string,
    options?: LocalRulestacksListBySubscriptionNextOptionalParams
  ): Promise<LocalRulestacksListBySubscriptionNextResponse> {
    return this.client.sendOperationRequest(
      { nextLink, options },
      listBySubscriptionNextOperationSpec
    );
  }

  /**
   * ListByResourceGroupNext
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param nextLink The nextLink from the previous successful call to the ListByResourceGroup method.
   * @param options The options parameters.
   */
  private _listByResourceGroupNext(
    resourceGroupName: string,
    nextLink: string,
    options?: LocalRulestacksListByResourceGroupNextOptionalParams
  ): Promise<LocalRulestacksListByResourceGroupNextResponse> {
    return this.client.sendOperationRequest(
      { resourceGroupName, nextLink, options },
      listByResourceGroupNextOperationSpec
    );
  }
}
// Operation Specifications
const serializer = coreClient.createSerializer(Mappers, /* isXml */ false);

const listBySubscriptionOperationSpec: coreClient.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/providers/PaloAltoNetworks.Cloudngfw/localRulestacks",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.LocalRulestackResourceListResult
    },
    default: {
      bodyMapper: Mappers.ErrorResponse
    }
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [Parameters.$host, Parameters.subscriptionId],
  headerParameters: [Parameters.accept],
  serializer
};
const listByResourceGroupOperationSpec: coreClient.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/PaloAltoNetworks.Cloudngfw/localRulestacks",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.LocalRulestackResourceListResult
    },
    default: {
      bodyMapper: Mappers.ErrorResponse
    }
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName
  ],
  headerParameters: [Parameters.accept],
  serializer
};
const getOperationSpec: coreClient.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/PaloAltoNetworks.Cloudngfw/localRulestacks/{localRulestackName}",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.LocalRulestackResource
    },
    default: {
      bodyMapper: Mappers.ErrorResponse
    }
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.localRulestackName
  ],
  headerParameters: [Parameters.accept],
  serializer
};
const createOrUpdateOperationSpec: coreClient.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/PaloAltoNetworks.Cloudngfw/localRulestacks/{localRulestackName}",
  httpMethod: "PUT",
  responses: {
    200: {
      bodyMapper: Mappers.LocalRulestackResource
    },
    201: {
      bodyMapper: Mappers.LocalRulestackResource
    },
    202: {
      bodyMapper: Mappers.LocalRulestackResource
    },
    204: {
      bodyMapper: Mappers.LocalRulestackResource
    },
    default: {
      bodyMapper: Mappers.ErrorResponse
    }
  },
  requestBody: Parameters.resource7,
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.localRulestackName
  ],
  headerParameters: [Parameters.accept, Parameters.contentType],
  mediaType: "json",
  serializer
};
const updateOperationSpec: coreClient.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/PaloAltoNetworks.Cloudngfw/localRulestacks/{localRulestackName}",
  httpMethod: "PATCH",
  responses: {
    200: {
      bodyMapper: Mappers.LocalRulestackResource
    },
    default: {
      bodyMapper: Mappers.ErrorResponse
    }
  },
  requestBody: Parameters.properties2,
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.localRulestackName
  ],
  headerParameters: [Parameters.accept, Parameters.contentType],
  mediaType: "json",
  serializer
};
const deleteOperationSpec: coreClient.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/PaloAltoNetworks.Cloudngfw/localRulestacks/{localRulestackName}",
  httpMethod: "DELETE",
  responses: {
    200: {},
    201: {},
    202: {},
    204: {},
    default: {
      bodyMapper: Mappers.ErrorResponse
    }
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.localRulestackName
  ],
  headerParameters: [Parameters.accept],
  serializer
};
const commitOperationSpec: coreClient.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/PaloAltoNetworks.Cloudngfw/localRulestacks/{localRulestackName}/commit",
  httpMethod: "POST",
  responses: {
    200: {},
    201: {},
    202: {},
    204: {},
    default: {
      bodyMapper: Mappers.ErrorResponse
    }
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.localRulestackName
  ],
  headerParameters: [Parameters.accept],
  serializer
};
const getChangeLogOperationSpec: coreClient.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/PaloAltoNetworks.Cloudngfw/localRulestacks/{localRulestackName}/getChangeLog",
  httpMethod: "POST",
  responses: {
    200: {
      bodyMapper: Mappers.Changelog
    },
    default: {
      bodyMapper: Mappers.ErrorResponse
    }
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.localRulestackName
  ],
  headerParameters: [Parameters.accept],
  serializer
};
const getSupportInfoOperationSpec: coreClient.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/PaloAltoNetworks.Cloudngfw/localRulestacks/{localRulestackName}/getSupportInfo",
  httpMethod: "POST",
  responses: {
    200: {
      bodyMapper: Mappers.SupportInfo
    },
    default: {
      bodyMapper: Mappers.ErrorResponse
    }
  },
  queryParameters: [Parameters.apiVersion, Parameters.email],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.localRulestackName
  ],
  headerParameters: [Parameters.accept],
  serializer
};
const listAdvancedSecurityObjectsOperationSpec: coreClient.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/PaloAltoNetworks.Cloudngfw/localRulestacks/{localRulestackName}/listAdvancedSecurityObjects",
  httpMethod: "POST",
  responses: {
    200: {
      bodyMapper: Mappers.AdvSecurityObjectListResponse
    },
    default: {
      bodyMapper: Mappers.ErrorResponse
    }
  },
  queryParameters: [
    Parameters.apiVersion,
    Parameters.skip,
    Parameters.top,
    Parameters.typeParam
  ],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.localRulestackName
  ],
  headerParameters: [Parameters.accept],
  serializer
};
const listAppIdsOperationSpec: coreClient.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/PaloAltoNetworks.Cloudngfw/localRulestacks/{localRulestackName}/listAppIds",
  httpMethod: "POST",
  responses: {
    200: {
      bodyMapper: Mappers.ListAppIdResponse
    },
    default: {
      bodyMapper: Mappers.ErrorResponse
    }
  },
  queryParameters: [
    Parameters.apiVersion,
    Parameters.skip,
    Parameters.top,
    Parameters.appIdVersion,
    Parameters.appPrefix
  ],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.localRulestackName
  ],
  headerParameters: [Parameters.accept],
  serializer
};
const listCountriesOperationSpec: coreClient.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/PaloAltoNetworks.Cloudngfw/localRulestacks/{localRulestackName}/listCountries",
  httpMethod: "POST",
  responses: {
    200: {
      bodyMapper: Mappers.CountriesResponse
    },
    default: {
      bodyMapper: Mappers.ErrorResponse
    }
  },
  queryParameters: [Parameters.apiVersion, Parameters.skip, Parameters.top],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.localRulestackName
  ],
  headerParameters: [Parameters.accept],
  serializer
};
const listFirewallsOperationSpec: coreClient.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/PaloAltoNetworks.Cloudngfw/localRulestacks/{localRulestackName}/listFirewalls",
  httpMethod: "POST",
  responses: {
    200: {
      bodyMapper: Mappers.ListFirewallsResponse
    },
    default: {
      bodyMapper: Mappers.ErrorResponse
    }
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.localRulestackName
  ],
  headerParameters: [Parameters.accept],
  serializer
};
const listPredefinedUrlCategoriesOperationSpec: coreClient.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/PaloAltoNetworks.Cloudngfw/localRulestacks/{localRulestackName}/listPredefinedUrlCategories",
  httpMethod: "POST",
  responses: {
    200: {
      bodyMapper: Mappers.PredefinedUrlCategoriesResponse
    },
    default: {
      bodyMapper: Mappers.ErrorResponse
    }
  },
  queryParameters: [Parameters.apiVersion, Parameters.skip, Parameters.top],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.localRulestackName
  ],
  headerParameters: [Parameters.accept],
  serializer
};
const listSecurityServicesOperationSpec: coreClient.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/PaloAltoNetworks.Cloudngfw/localRulestacks/{localRulestackName}/listSecurityServices",
  httpMethod: "POST",
  responses: {
    200: {
      bodyMapper: Mappers.SecurityServicesResponse
    },
    default: {
      bodyMapper: Mappers.ErrorResponse
    }
  },
  queryParameters: [
    Parameters.apiVersion,
    Parameters.skip,
    Parameters.top,
    Parameters.typeParam1
  ],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.localRulestackName
  ],
  headerParameters: [Parameters.accept],
  serializer
};
const revertOperationSpec: coreClient.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/PaloAltoNetworks.Cloudngfw/localRulestacks/{localRulestackName}/revert",
  httpMethod: "POST",
  responses: {
    204: {},
    default: {
      bodyMapper: Mappers.ErrorResponse
    }
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.localRulestackName
  ],
  headerParameters: [Parameters.accept],
  serializer
};
const listBySubscriptionNextOperationSpec: coreClient.OperationSpec = {
  path: "{nextLink}",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.LocalRulestackResourceListResult
    },
    default: {
      bodyMapper: Mappers.ErrorResponse
    }
  },
  urlParameters: [
    Parameters.$host,
    Parameters.nextLink,
    Parameters.subscriptionId
  ],
  headerParameters: [Parameters.accept],
  serializer
};
const listByResourceGroupNextOperationSpec: coreClient.OperationSpec = {
  path: "{nextLink}",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.LocalRulestackResourceListResult
    },
    default: {
      bodyMapper: Mappers.ErrorResponse
    }
  },
  urlParameters: [
    Parameters.$host,
    Parameters.nextLink,
    Parameters.subscriptionId,
    Parameters.resourceGroupName
  ],
  headerParameters: [Parameters.accept],
  serializer
};
