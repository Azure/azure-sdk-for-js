/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */

import { PagedAsyncIterableIterator, PageSettings } from "@azure/core-paging";
import { setContinuationToken } from "../pagingHelper";
import { PostRules } from "../operationsInterfaces";
import * as coreClient from "@azure/core-client";
import * as Mappers from "../models/mappers";
import * as Parameters from "../models/parameters";
import { PaloAltoNetworksCloudngfw } from "../paloAltoNetworksCloudngfw";
import {
  SimplePollerLike,
  OperationState,
  createHttpPoller
} from "@azure/core-lro";
import { createLroSpec } from "../lroImpl";
import {
  PostRulesResource,
  PostRulesListNextOptionalParams,
  PostRulesListOptionalParams,
  PostRulesListResponse,
  PostRulesGetOptionalParams,
  PostRulesGetResponse,
  PostRulesCreateOrUpdateOptionalParams,
  PostRulesCreateOrUpdateResponse,
  PostRulesDeleteOptionalParams,
  PostRulesGetCountersOptionalParams,
  PostRulesGetCountersResponse,
  PostRulesRefreshCountersOptionalParams,
  PostRulesResetCountersOptionalParams,
  PostRulesResetCountersResponse,
  PostRulesListNextResponse
} from "../models";

/// <reference lib="esnext.asynciterable" />
/** Class containing PostRules operations. */
export class PostRulesImpl implements PostRules {
  private readonly client: PaloAltoNetworksCloudngfw;

  /**
   * Initialize a new instance of the class PostRules class.
   * @param client Reference to the service client
   */
  constructor(client: PaloAltoNetworksCloudngfw) {
    this.client = client;
  }

  /**
   * List PostRulesResource resources by Tenant
   * @param globalRulestackName GlobalRulestack resource name
   * @param options The options parameters.
   */
  public list(
    globalRulestackName: string,
    options?: PostRulesListOptionalParams
  ): PagedAsyncIterableIterator<PostRulesResource> {
    const iter = this.listPagingAll(globalRulestackName, options);
    return {
      next() {
        return iter.next();
      },
      [Symbol.asyncIterator]() {
        return this;
      },
      byPage: (settings?: PageSettings) => {
        if (settings?.maxPageSize) {
          throw new Error("maxPageSize is not supported by this operation.");
        }
        return this.listPagingPage(globalRulestackName, options, settings);
      }
    };
  }

  private async *listPagingPage(
    globalRulestackName: string,
    options?: PostRulesListOptionalParams,
    settings?: PageSettings
  ): AsyncIterableIterator<PostRulesResource[]> {
    let result: PostRulesListResponse;
    let continuationToken = settings?.continuationToken;
    if (!continuationToken) {
      result = await this._list(globalRulestackName, options);
      let page = result.value || [];
      continuationToken = result.nextLink;
      setContinuationToken(page, continuationToken);
      yield page;
    }
    while (continuationToken) {
      result = await this._listNext(
        globalRulestackName,
        continuationToken,
        options
      );
      continuationToken = result.nextLink;
      let page = result.value || [];
      setContinuationToken(page, continuationToken);
      yield page;
    }
  }

  private async *listPagingAll(
    globalRulestackName: string,
    options?: PostRulesListOptionalParams
  ): AsyncIterableIterator<PostRulesResource> {
    for await (const page of this.listPagingPage(
      globalRulestackName,
      options
    )) {
      yield* page;
    }
  }

  /**
   * List PostRulesResource resources by Tenant
   * @param globalRulestackName GlobalRulestack resource name
   * @param options The options parameters.
   */
  private _list(
    globalRulestackName: string,
    options?: PostRulesListOptionalParams
  ): Promise<PostRulesListResponse> {
    return this.client.sendOperationRequest(
      { globalRulestackName, options },
      listOperationSpec
    );
  }

  /**
   * Get a PostRulesResource
   * @param globalRulestackName GlobalRulestack resource name
   * @param priority Post Rule priority
   * @param options The options parameters.
   */
  get(
    globalRulestackName: string,
    priority: string,
    options?: PostRulesGetOptionalParams
  ): Promise<PostRulesGetResponse> {
    return this.client.sendOperationRequest(
      { globalRulestackName, priority, options },
      getOperationSpec
    );
  }

  /**
   * Create a PostRulesResource
   * @param globalRulestackName GlobalRulestack resource name
   * @param priority Post Rule priority
   * @param resource Resource create parameters.
   * @param options The options parameters.
   */
  async beginCreateOrUpdate(
    globalRulestackName: string,
    priority: string,
    resource: PostRulesResource,
    options?: PostRulesCreateOrUpdateOptionalParams
  ): Promise<
    SimplePollerLike<
      OperationState<PostRulesCreateOrUpdateResponse>,
      PostRulesCreateOrUpdateResponse
    >
  > {
    const directSendOperation = async (
      args: coreClient.OperationArguments,
      spec: coreClient.OperationSpec
    ): Promise<PostRulesCreateOrUpdateResponse> => {
      return this.client.sendOperationRequest(args, spec);
    };
    const sendOperationFn = async (
      args: coreClient.OperationArguments,
      spec: coreClient.OperationSpec
    ) => {
      let currentRawResponse:
        | coreClient.FullOperationResponse
        | undefined = undefined;
      const providedCallback = args.options?.onResponse;
      const callback: coreClient.RawResponseCallback = (
        rawResponse: coreClient.FullOperationResponse,
        flatResponse: unknown
      ) => {
        currentRawResponse = rawResponse;
        providedCallback?.(rawResponse, flatResponse);
      };
      const updatedArgs = {
        ...args,
        options: {
          ...args.options,
          onResponse: callback
        }
      };
      const flatResponse = await directSendOperation(updatedArgs, spec);
      return {
        flatResponse,
        rawResponse: {
          statusCode: currentRawResponse!.status,
          body: currentRawResponse!.parsedBody,
          headers: currentRawResponse!.headers.toJSON()
        }
      };
    };

    const lro = createLroSpec({
      sendOperationFn,
      args: { globalRulestackName, priority, resource, options },
      spec: createOrUpdateOperationSpec
    });
    const poller = await createHttpPoller<
      PostRulesCreateOrUpdateResponse,
      OperationState<PostRulesCreateOrUpdateResponse>
    >(lro, {
      restoreFrom: options?.resumeFrom,
      intervalInMs: options?.updateIntervalInMs,
      resourceLocationConfig: "azure-async-operation"
    });
    await poller.poll();
    return poller;
  }

  /**
   * Create a PostRulesResource
   * @param globalRulestackName GlobalRulestack resource name
   * @param priority Post Rule priority
   * @param resource Resource create parameters.
   * @param options The options parameters.
   */
  async beginCreateOrUpdateAndWait(
    globalRulestackName: string,
    priority: string,
    resource: PostRulesResource,
    options?: PostRulesCreateOrUpdateOptionalParams
  ): Promise<PostRulesCreateOrUpdateResponse> {
    const poller = await this.beginCreateOrUpdate(
      globalRulestackName,
      priority,
      resource,
      options
    );
    return poller.pollUntilDone();
  }

  /**
   * Delete a PostRulesResource
   * @param globalRulestackName GlobalRulestack resource name
   * @param priority Post Rule priority
   * @param options The options parameters.
   */
  async beginDelete(
    globalRulestackName: string,
    priority: string,
    options?: PostRulesDeleteOptionalParams
  ): Promise<SimplePollerLike<OperationState<void>, void>> {
    const directSendOperation = async (
      args: coreClient.OperationArguments,
      spec: coreClient.OperationSpec
    ): Promise<void> => {
      return this.client.sendOperationRequest(args, spec);
    };
    const sendOperationFn = async (
      args: coreClient.OperationArguments,
      spec: coreClient.OperationSpec
    ) => {
      let currentRawResponse:
        | coreClient.FullOperationResponse
        | undefined = undefined;
      const providedCallback = args.options?.onResponse;
      const callback: coreClient.RawResponseCallback = (
        rawResponse: coreClient.FullOperationResponse,
        flatResponse: unknown
      ) => {
        currentRawResponse = rawResponse;
        providedCallback?.(rawResponse, flatResponse);
      };
      const updatedArgs = {
        ...args,
        options: {
          ...args.options,
          onResponse: callback
        }
      };
      const flatResponse = await directSendOperation(updatedArgs, spec);
      return {
        flatResponse,
        rawResponse: {
          statusCode: currentRawResponse!.status,
          body: currentRawResponse!.parsedBody,
          headers: currentRawResponse!.headers.toJSON()
        }
      };
    };

    const lro = createLroSpec({
      sendOperationFn,
      args: { globalRulestackName, priority, options },
      spec: deleteOperationSpec
    });
    const poller = await createHttpPoller<void, OperationState<void>>(lro, {
      restoreFrom: options?.resumeFrom,
      intervalInMs: options?.updateIntervalInMs,
      resourceLocationConfig: "azure-async-operation"
    });
    await poller.poll();
    return poller;
  }

  /**
   * Delete a PostRulesResource
   * @param globalRulestackName GlobalRulestack resource name
   * @param priority Post Rule priority
   * @param options The options parameters.
   */
  async beginDeleteAndWait(
    globalRulestackName: string,
    priority: string,
    options?: PostRulesDeleteOptionalParams
  ): Promise<void> {
    const poller = await this.beginDelete(
      globalRulestackName,
      priority,
      options
    );
    return poller.pollUntilDone();
  }

  /**
   * Get counters
   * @param globalRulestackName GlobalRulestack resource name
   * @param priority Post Rule priority
   * @param options The options parameters.
   */
  getCounters(
    globalRulestackName: string,
    priority: string,
    options?: PostRulesGetCountersOptionalParams
  ): Promise<PostRulesGetCountersResponse> {
    return this.client.sendOperationRequest(
      { globalRulestackName, priority, options },
      getCountersOperationSpec
    );
  }

  /**
   * Refresh counters
   * @param globalRulestackName GlobalRulestack resource name
   * @param priority Post Rule priority
   * @param options The options parameters.
   */
  refreshCounters(
    globalRulestackName: string,
    priority: string,
    options?: PostRulesRefreshCountersOptionalParams
  ): Promise<void> {
    return this.client.sendOperationRequest(
      { globalRulestackName, priority, options },
      refreshCountersOperationSpec
    );
  }

  /**
   * Reset counters
   * @param globalRulestackName GlobalRulestack resource name
   * @param priority Post Rule priority
   * @param options The options parameters.
   */
  resetCounters(
    globalRulestackName: string,
    priority: string,
    options?: PostRulesResetCountersOptionalParams
  ): Promise<PostRulesResetCountersResponse> {
    return this.client.sendOperationRequest(
      { globalRulestackName, priority, options },
      resetCountersOperationSpec
    );
  }

  /**
   * ListNext
   * @param globalRulestackName GlobalRulestack resource name
   * @param nextLink The nextLink from the previous successful call to the List method.
   * @param options The options parameters.
   */
  private _listNext(
    globalRulestackName: string,
    nextLink: string,
    options?: PostRulesListNextOptionalParams
  ): Promise<PostRulesListNextResponse> {
    return this.client.sendOperationRequest(
      { globalRulestackName, nextLink, options },
      listNextOperationSpec
    );
  }
}
// Operation Specifications
const serializer = coreClient.createSerializer(Mappers, /* isXml */ false);

const listOperationSpec: coreClient.OperationSpec = {
  path:
    "/providers/PaloAltoNetworks.Cloudngfw/globalRulestacks/{globalRulestackName}/postRules",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.PostRulesResourceListResult
    },
    default: {
      bodyMapper: Mappers.ErrorResponse
    }
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [Parameters.$host, Parameters.globalRulestackName],
  headerParameters: [Parameters.accept],
  serializer
};
const getOperationSpec: coreClient.OperationSpec = {
  path:
    "/providers/PaloAltoNetworks.Cloudngfw/globalRulestacks/{globalRulestackName}/postRules/{priority}",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.PostRulesResource
    },
    default: {
      bodyMapper: Mappers.ErrorResponse
    }
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.globalRulestackName,
    Parameters.priority
  ],
  headerParameters: [Parameters.accept],
  serializer
};
const createOrUpdateOperationSpec: coreClient.OperationSpec = {
  path:
    "/providers/PaloAltoNetworks.Cloudngfw/globalRulestacks/{globalRulestackName}/postRules/{priority}",
  httpMethod: "PUT",
  responses: {
    200: {
      bodyMapper: Mappers.PostRulesResource
    },
    201: {
      bodyMapper: Mappers.PostRulesResource
    },
    202: {
      bodyMapper: Mappers.PostRulesResource
    },
    204: {
      bodyMapper: Mappers.PostRulesResource
    },
    default: {
      bodyMapper: Mappers.ErrorResponse
    }
  },
  requestBody: Parameters.resource3,
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.globalRulestackName,
    Parameters.priority
  ],
  headerParameters: [Parameters.accept, Parameters.contentType],
  mediaType: "json",
  serializer
};
const deleteOperationSpec: coreClient.OperationSpec = {
  path:
    "/providers/PaloAltoNetworks.Cloudngfw/globalRulestacks/{globalRulestackName}/postRules/{priority}",
  httpMethod: "DELETE",
  responses: {
    200: {},
    201: {},
    202: {},
    204: {},
    default: {
      bodyMapper: Mappers.ErrorResponse
    }
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.globalRulestackName,
    Parameters.priority
  ],
  headerParameters: [Parameters.accept],
  serializer
};
const getCountersOperationSpec: coreClient.OperationSpec = {
  path:
    "/providers/PaloAltoNetworks.Cloudngfw/globalRulestacks/{globalRulestackName}/postRules/{priority}/getCounters",
  httpMethod: "POST",
  responses: {
    200: {
      bodyMapper: Mappers.RuleCounter
    },
    default: {
      bodyMapper: Mappers.ErrorResponse
    }
  },
  queryParameters: [Parameters.apiVersion, Parameters.firewallName],
  urlParameters: [
    Parameters.$host,
    Parameters.globalRulestackName,
    Parameters.priority
  ],
  headerParameters: [Parameters.accept],
  serializer
};
const refreshCountersOperationSpec: coreClient.OperationSpec = {
  path:
    "/providers/PaloAltoNetworks.Cloudngfw/globalRulestacks/{globalRulestackName}/postRules/{priority}/refreshCounters",
  httpMethod: "POST",
  responses: {
    204: {},
    default: {
      bodyMapper: Mappers.ErrorResponse
    }
  },
  queryParameters: [Parameters.apiVersion, Parameters.firewallName],
  urlParameters: [
    Parameters.$host,
    Parameters.globalRulestackName,
    Parameters.priority
  ],
  headerParameters: [Parameters.accept],
  serializer
};
const resetCountersOperationSpec: coreClient.OperationSpec = {
  path:
    "/providers/PaloAltoNetworks.Cloudngfw/globalRulestacks/{globalRulestackName}/postRules/{priority}/resetCounters",
  httpMethod: "POST",
  responses: {
    200: {
      bodyMapper: Mappers.RuleCounterReset
    },
    default: {
      bodyMapper: Mappers.ErrorResponse
    }
  },
  queryParameters: [Parameters.apiVersion, Parameters.firewallName],
  urlParameters: [
    Parameters.$host,
    Parameters.globalRulestackName,
    Parameters.priority
  ],
  headerParameters: [Parameters.accept],
  serializer
};
const listNextOperationSpec: coreClient.OperationSpec = {
  path: "{nextLink}",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.PostRulesResourceListResult
    },
    default: {
      bodyMapper: Mappers.ErrorResponse
    }
  },
  urlParameters: [
    Parameters.$host,
    Parameters.globalRulestackName,
    Parameters.nextLink
  ],
  headerParameters: [Parameters.accept],
  serializer
};
