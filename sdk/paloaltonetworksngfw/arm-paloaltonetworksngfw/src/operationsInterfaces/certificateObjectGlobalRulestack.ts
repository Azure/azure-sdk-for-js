/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */

import type { PagedAsyncIterableIterator } from "@azure/core-paging";
import type { SimplePollerLike, OperationState } from "@azure/core-lro";
import type {
  CertificateObjectGlobalRulestackResource,
  CertificateObjectGlobalRulestackListOptionalParams,
  CertificateObjectGlobalRulestackGetOptionalParams,
  CertificateObjectGlobalRulestackGetResponse,
  CertificateObjectGlobalRulestackCreateOrUpdateOptionalParams,
  CertificateObjectGlobalRulestackCreateOrUpdateResponse,
  CertificateObjectGlobalRulestackDeleteOptionalParams,
} from "../models/index.js";

/// <reference lib="esnext.asynciterable" />
/** Interface representing a CertificateObjectGlobalRulestack. */
export interface CertificateObjectGlobalRulestack {
  /**
   * List CertificateObjectGlobalRulestackResource resources by Tenant
   * @param globalRulestackName GlobalRulestack resource name
   * @param options The options parameters.
   */
  list(
    globalRulestackName: string,
    options?: CertificateObjectGlobalRulestackListOptionalParams,
  ): PagedAsyncIterableIterator<CertificateObjectGlobalRulestackResource>;
  /**
   * Get a CertificateObjectGlobalRulestackResource
   * @param globalRulestackName GlobalRulestack resource name
   * @param name certificate name
   * @param options The options parameters.
   */
  get(
    globalRulestackName: string,
    name: string,
    options?: CertificateObjectGlobalRulestackGetOptionalParams,
  ): Promise<CertificateObjectGlobalRulestackGetResponse>;
  /**
   * Create a CertificateObjectGlobalRulestackResource
   * @param globalRulestackName GlobalRulestack resource name
   * @param name certificate name
   * @param resource Resource create parameters.
   * @param options The options parameters.
   */
  beginCreateOrUpdate(
    globalRulestackName: string,
    name: string,
    resource: CertificateObjectGlobalRulestackResource,
    options?: CertificateObjectGlobalRulestackCreateOrUpdateOptionalParams,
  ): Promise<
    SimplePollerLike<
      OperationState<CertificateObjectGlobalRulestackCreateOrUpdateResponse>,
      CertificateObjectGlobalRulestackCreateOrUpdateResponse
    >
  >;
  /**
   * Create a CertificateObjectGlobalRulestackResource
   * @param globalRulestackName GlobalRulestack resource name
   * @param name certificate name
   * @param resource Resource create parameters.
   * @param options The options parameters.
   */
  beginCreateOrUpdateAndWait(
    globalRulestackName: string,
    name: string,
    resource: CertificateObjectGlobalRulestackResource,
    options?: CertificateObjectGlobalRulestackCreateOrUpdateOptionalParams,
  ): Promise<CertificateObjectGlobalRulestackCreateOrUpdateResponse>;
  /**
   * Delete a CertificateObjectGlobalRulestackResource
   * @param globalRulestackName GlobalRulestack resource name
   * @param name certificate name
   * @param options The options parameters.
   */
  beginDelete(
    globalRulestackName: string,
    name: string,
    options?: CertificateObjectGlobalRulestackDeleteOptionalParams,
  ): Promise<SimplePollerLike<OperationState<void>, void>>;
  /**
   * Delete a CertificateObjectGlobalRulestackResource
   * @param globalRulestackName GlobalRulestack resource name
   * @param name certificate name
   * @param options The options parameters.
   */
  beginDeleteAndWait(
    globalRulestackName: string,
    name: string,
    options?: CertificateObjectGlobalRulestackDeleteOptionalParams,
  ): Promise<void>;
}
