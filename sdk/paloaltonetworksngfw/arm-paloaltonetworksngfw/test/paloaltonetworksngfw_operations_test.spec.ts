/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */

import type { RecorderStartOptions } from "@azure-tools/test-recorder";
import { env, Recorder, isPlaybackMode } from "@azure-tools/test-recorder";
import { createTestCredential } from "@azure-tools/test-credential";
import { PaloAltoNetworksCloudngfw } from "../src/paloAltoNetworksCloudngfw.js";
import type { LocalRulestackResource } from "../src/models/models.js";
import { describe, it, assert, beforeEach, afterEach } from "vitest";

const replaceableVariables: Record<string, string> = {
  AZURE_CLIENT_ID: "azure_client_id",
  AZURE_CLIENT_SECRET: "azure_client_secret",
  AZURE_TENANT_ID: "88888888-8888-8888-8888-888888888888",
  SUBSCRIPTION_ID: "azure_subscription_id",
};

const recorderOptions: RecorderStartOptions = {
  envSetupForPlayback: replaceableVariables,
  removeCentralSanitizers: [
    "AZSDK3493", // .name in the body is not a secret and is listed below in the beforeEach section
    "AZSDK3430", // .id in the body is not a secret and is listed below in the beforeEach section
  ],
};

export const testPollingOptions = {
  updateIntervalInMs: isPlaybackMode() ? 0 : undefined,
};

// Generate a unique resource name for this test run
const testResourceName = "testjs";

describe("paloaltonetworksngfw test", () => {
  let recorder: Recorder;
  let subscriptionId: string;
  let client: PaloAltoNetworksCloudngfw;
  let location: string;
  let resourceGroup: string;
  let resourcename: string;

  beforeEach(async (ctx) => {
    recorder = new Recorder(ctx);
    await recorder.start(recorderOptions);
    subscriptionId = env.SUBSCRIPTION_ID || "";
    // This is an example of how the environment variables are used
    const credential = createTestCredential();
    client = new PaloAltoNetworksCloudngfw(
      credential,
      subscriptionId,
      recorder.configureClientOptions({}),
    );
    location = "eastus";
    resourceGroup = "test-prakgupta-rg";
    resourcename = testResourceName;
  });

  afterEach(async () => {
    await recorder.stop();
  });

  it("localRulestacks create test", async () => {
    const poller = client.localRulestacks.createOrUpdate(
      resourceGroup,
      resourcename,
      {
        location,
        properties: {
          description: "local rulestacks",
        },
      },
      testPollingOptions,
    );
    const res = await poller.pollUntilDone();
    assert.equal(res.name, resourcename);
  });

  it("localRulestacks get test", async () => {
    const res = await client.localRulestacks.get(resourceGroup, resourcename);
    assert.equal(res.name, resourcename);
  });

  it("localRulestacks list test", async () => {
    const resArray: LocalRulestackResource[] = [];
    for await (const item of client.localRulestacks.listByResourceGroup(resourceGroup)) {
      resArray.push(item);
    }
    // Check that our resource exists in the list
    const foundResource = resArray.find((item) => item.name === resourcename);
    assert.ok(foundResource, `Resource ${resourcename} should exist in the list`);
  });

  it("localRulestacks delete test", async () => {
    const deletePoller = client.localRulestacks.delete(resourceGroup, resourcename);
    await deletePoller.pollUntilDone();

    // Verify the resource no longer exists by trying to get it
    try {
      await client.localRulestacks.get(resourceGroup, resourcename);
      assert.fail("Resource should have been deleted");
    } catch (error: any) {
      // Expected: resource should not be found
      assert.ok(error.statusCode === 404 || error.message.includes("NotFound"));
    }
  });
});
