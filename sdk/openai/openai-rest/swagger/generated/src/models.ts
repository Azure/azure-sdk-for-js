// Copyright (c) Microsoft Corporation.
// Licensed under the MIT license.

export interface Paths1Vtxb06DeploymentsDeploymentIdCompletionsPostRequestbodyContentApplicationJsonSchema {
  /**
   * The prompt(s) to generate completions for, encoded as a string or array of strings.
   * Note that <|endoftext|> is the document separator that the model sees during training, so if a prompt is not specified the model will generate as if from the beginning of a new document. Maximum allowed size of string list is 2048.
   */
  prompt?: PostContentSchemaPrompt;
  /** The token count of your prompt plus max_tokens cannot exceed the model's context length. Most models have a context length of 2048 tokens (except for the newest models, which support 4096). Has minimum of 0. */
  max_tokens?: number;
  /**
   * What sampling temperature to use. Higher values means the model will take more risks. Try 0.9 for more creative applications, and 0 (argmax sampling) for ones with a well-defined answer.
   * We generally recommend altering this or top_p but not both.
   */
  temperature?: number;
  /**
   * An alternative to sampling with temperature, called nucleus sampling, where the model considers the results of the tokens with top_p probability mass. So 0.1 means only the tokens comprising the top 10% probability mass are considered.
   * We generally recommend altering this or temperature but not both.
   */
  top_p?: number;
  /** Defaults to null. Modify the likelihood of specified tokens appearing in the completion. Accepts a json object that maps tokens (specified by their token ID in the GPT tokenizer) to an associated bias value from -100 to 100. You can use this tokenizer tool (which works for both GPT-2 and GPT-3) to convert text to token IDs. Mathematically, the bias is added to the logits generated by the model prior to sampling. The exact effect will vary per model, but values between -1 and 1 should decrease or increase likelihood of selection; values like -100 or 100 should result in a ban or exclusive selection of the relevant token. As an example, you can pass {"50256" &#58; -100} to prevent the <|endoftext|> token from being generated. */
  logit_bias?: Record<string, unknown>;
  /** A unique identifier representing your end-user, which can help monitoring and detecting abuse */
  user?: string;
  /**
   * How many completions to generate for each prompt. Minimum of 1 and maximum of 128 allowed.
   * Note: Because this parameter generates many completions, it can quickly consume your token quota. Use carefully and ensure that you have reasonable settings for max_tokens and stop.
   */
  n?: number;
  /** Whether to stream back partial progress. If set, tokens will be sent as data-only server-sent events as they become available, with the stream terminated by a data: [DONE] message. */
  stream?: boolean;
  /**
   * Include the log probabilities on the logprobs most likely tokens, as well the chosen tokens. For example, if logprobs is 5, the API will return a list of the 5 most likely tokens. The API will always return the logprob of the sampled token, so there may be up to logprobs+1 elements in the response.
   * Minimum of 0 and maximum of 5 allowed.
   */
  logprobs?: number;
  /** ID of the model to use. You can use the Models_List operation to see all of your available models, or see our Models_Get overview for descriptions of them. */
  model?: string;
  /** The suffix that comes after a completion of inserted text. */
  suffix?: string;
  /** Echo back the prompt in addition to the completion */
  echo?: boolean;
  /** Up to 4 sequences where the API will stop generating further tokens. The returned text will not contain the stop sequence. */
  stop?: PostContentSchemaStop;
  completion_config?: string;
  /** can be used to disable any server-side caching, 0=no cache, 1=prompt prefix enabled, 2=full cache */
  cache_level?: number;
  /** Number between -2.0 and 2.0. Positive values penalize new tokens based on whether they appear in the text so far, increasing the model's likelihood to talk about new topics. */
  presence_penalty?: number;
  /** Number between -2.0 and 2.0. Positive values penalize new tokens based on their existing frequency in the text so far, decreasing the model's likelihood to repeat the same line verbatim. */
  frequency_penalty?: number;
  /**
   * Generates best_of completions server-side and returns the "best" (the one with the highest log probability per token). Results cannot be streamed.
   * When used with n, best_of controls the number of candidate completions and n specifies how many to return â€“ best_of must be greater than n.
   * Note: Because this parameter generates many completions, it can quickly consume your token quota. Use carefully and ensure that you have reasonable settings for max_tokens and stop. Has maximum value of 128.
   */
  best_of?: number;
}

/**
 * The prompt(s) to generate completions for, encoded as a string or array of strings.
 * Note that <|endoftext|> is the document separator that the model sees during training, so if a prompt is not specified the model will generate as if from the beginning of a new document. Maximum allowed size of string list is 2048.
 */
export interface PostContentSchemaPrompt {}

/** Up to 4 sequences where the API will stop generating further tokens. The returned text will not contain the stop sequence. */
export interface PostContentSchemaStop {}

export interface Paths13PiqocDeploymentsDeploymentIdEmbeddingsPostRequestbodyContentApplicationJsonSchema
  extends Record<string, unknown> {
  /**
   * Input text to get embeddings for, encoded as a string. To get embeddings for multiple inputs in a single request, pass an array of strings. Each input must not exceed 2048 tokens in length.
   * Unless you are embedding code, we suggest replacing newlines (\n) in your input with a single space, as we have observed inferior results when newlines are present.
   */
  input: PostContentSchemaInput;
  /** A unique identifier representing your end-user, which can help monitoring and detecting abuse. */
  user?: string;
  /** input type of embedding search to use */
  input_type?: string;
  /** ID of the model to use. You can use the Models_List operation to see all of your available models, or see our Models_Get overview for descriptions of them. */
  model?: string;
}

/**
 * Input text to get embeddings for, encoded as a string. To get embeddings for multiple inputs in a single request, pass an array of strings. Each input must not exceed 2048 tokens in length.
 * Unless you are embedding code, we suggest replacing newlines (\n) in your input with a single space, as we have observed inferior results when newlines are present.
 */
export interface PostContentSchemaInput {}

export interface Paths1L1E8YpDeploymentsDeploymentIdChatCompletionsPostRequestbodyContentApplicationJsonSchema {
  /** The messages to generate chat completions for, in the chat format. */
  messages: Array<PostContentSchemaMessagesItem>;
  /**
   * What sampling temperature to use, between 0 and 2. Higher values like 0.8 will make the output more random, while lower values like 0.2 will make it more focused and deterministic.
   * We generally recommend altering this or `top_p` but not both.
   */
  temperature?: number;
  /**
   * An alternative to sampling with temperature, called nucleus sampling, where the model considers the results of the tokens with top_p probability mass. So 0.1 means only the tokens comprising the top 10% probability mass are considered.
   * We generally recommend altering this or `temperature` but not both.
   */
  top_p?: number;
  /** How many chat completion choices to generate for each input message. */
  n?: number;
  /** If set, partial message deltas will be sent, like in ChatGPT. Tokens will be sent as data-only server-sent events as they become available, with the stream terminated by a `data: [DONE]` message. */
  stream?: boolean;
  /** Up to 4 sequences where the API will stop generating further tokens. */
  stop?: PathsAcghv9DeploymentsDeploymentIdChatCompletionsPostRequestbodyContentApplicationJsonSchemaPropertiesStop;
  /** The maximum number of tokens allowed for the generated answer. By default, the number of tokens the model can return will be (4096 - prompt tokens). */
  max_tokens?: number;
  /** Number between -2.0 and 2.0. Positive values penalize new tokens based on whether they appear in the text so far, increasing the model's likelihood to talk about new topics. */
  presence_penalty?: number;
  /** Number between -2.0 and 2.0. Positive values penalize new tokens based on their existing frequency in the text so far, decreasing the model's likelihood to repeat the same line verbatim. */
  frequency_penalty?: number;
  /** Modify the likelihood of specified tokens appearing in the completion. Accepts a json object that maps tokens (specified by their token ID in the tokenizer) to an associated bias value from -100 to 100. Mathematically, the bias is added to the logits generated by the model prior to sampling. The exact effect will vary per model, but values between -1 and 1 should decrease or increase likelihood of selection; values like -100 or 100 should result in a ban or exclusive selection of the relevant token. */
  logit_bias?: Record<string, unknown>;
  /** A unique identifier representing your end-user, which can help Azure OpenAI to monitor and detect abuse. */
  user?: string;
}

export interface PostContentSchemaMessagesItem {
  /** The role of the author of this message. */
  role: "system" | "user" | "assistant";
  /** The contents of the message */
  content: string;
  /** The name of the user in a multi-user chat */
  name?: string;
}

/** Up to 4 sequences where the API will stop generating further tokens. */
export interface PathsAcghv9DeploymentsDeploymentIdChatCompletionsPostRequestbodyContentApplicationJsonSchemaPropertiesStop {}
