/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */

import * as coreClient from "@azure/core-client";

/** A list of REST API operations supported by an Azure Resource Provider. It contains an URL link to get the next set of results. */
export interface OperationListResult {
  /**
   * List of operations supported by the resource provider
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly value?: Operation[];
  /**
   * URL to get the next set of operation list results (if there are any).
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly nextLink?: string;
}

/** Details of a REST API operation, returned from the Resource Provider Operations API */
export interface Operation {
  /**
   * The name of the operation, as per Resource-Based Access Control (RBAC). Examples: "Microsoft.Compute/virtualMachines/write", "Microsoft.Compute/virtualMachines/capture/action"
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly name?: string;
  /**
   * Whether the operation applies to data-plane. This is "true" for data-plane operations and "false" for ARM/control-plane operations.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly isDataAction?: boolean;
  /** Localized display information for this particular operation. */
  display?: OperationDisplay;
  /**
   * The intended executor of the operation; as in Resource Based Access Control (RBAC) and audit logs UX. Default value is "user,system"
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly origin?: Origin;
  /**
   * Enum. Indicates the action type. "Internal" refers to actions that are for internal only APIs.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly actionType?: ActionType;
}

/** Localized display information for this particular operation. */
export interface OperationDisplay {
  /**
   * The localized friendly form of the resource provider name, e.g. "Microsoft Monitoring Insights" or "Microsoft Compute".
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly provider?: string;
  /**
   * The localized friendly name of the resource type related to this operation. E.g. "Virtual Machines" or "Job Schedule Collections".
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly resource?: string;
  /**
   * The concise, localized friendly name for the operation; suitable for dropdowns. E.g. "Create or Update Virtual Machine", "Restart Virtual Machine".
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly operation?: string;
  /**
   * The short, localized friendly description of the operation; suitable for tool tips and detailed views.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly description?: string;
}

/** Common error response for all Azure Resource Manager APIs to return error details for failed operations. (This also follows the OData error response format.). */
export interface ErrorResponse {
  /** The error object. */
  error?: ErrorDetail;
}

/** The error detail. */
export interface ErrorDetail {
  /**
   * The error code.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly code?: string;
  /**
   * The error message.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly message?: string;
  /**
   * The error target.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly target?: string;
  /**
   * The error details.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly details?: ErrorDetail[];
  /**
   * The error additional info.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly additionalInfo?: ErrorAdditionalInfo[];
}

/** The resource management error additional info. */
export interface ErrorAdditionalInfo {
  /**
   * The additional info type.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly type?: string;
  /**
   * The additional info.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly info?: Record<string, unknown>;
}

/** The response of a Catalog list operation. */
export interface CatalogListResult {
  /** The Catalog items on this page */
  value: Catalog[];
  /** The link to the next page of items */
  nextLink?: string;
}

/** Common fields that are returned in the response for all Azure Resource Manager resources */
export interface Resource {
  /**
   * Fully qualified resource ID for the resource. Ex - /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly id?: string;
  /**
   * The name of the resource
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly name?: string;
  /**
   * The type of the resource. E.g. "Microsoft.Compute/virtualMachines" or "Microsoft.Storage/storageAccounts"
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly type?: string;
  /**
   * Azure Resource Manager metadata containing createdBy and modifiedBy information.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly systemData?: SystemData;
}

/** Metadata pertaining to creation and last modification of the resource. */
export interface SystemData {
  /** The identity that created the resource. */
  createdBy?: string;
  /** The type of identity that created the resource. */
  createdByType?: CreatedByType;
  /** The timestamp of resource creation (UTC). */
  createdAt?: Date;
  /** The identity that last modified the resource. */
  lastModifiedBy?: string;
  /** The type of identity that last modified the resource. */
  lastModifiedByType?: CreatedByType;
  /** The timestamp of resource last modification (UTC) */
  lastModifiedAt?: Date;
}

/** The type used for update operations of the Catalog. */
export interface CatalogUpdate {
  /** Resource tags. */
  tags?: { [propertyName: string]: string };
}

/** The response of a Certificate list operation. */
export interface CertificateListResult {
  /** The Certificate items on this page */
  value: Certificate[];
  /** The link to the next page of items */
  nextLink?: string;
}

/** The properties of certificate */
export interface CertificateProperties {
  /**
   * The certificate as a UTF-8 encoded base 64 string.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly certificate?: string;
  /**
   * The certificate status.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly status?: CertificateStatus;
  /**
   * The certificate subject.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly subject?: string;
  /**
   * The certificate thumbprint.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly thumbprint?: string;
  /**
   * The certificate expiry date.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly expiryUtc?: Date;
  /**
   * The certificate not before date.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly notBeforeUtc?: Date;
  /**
   * The status of the last operation.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly provisioningState?: ProvisioningState;
}

/** The certificate chain response. */
export interface CertificateChainResponse {
  /**
   * The certificate chain.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly certificateChain?: string;
}

/** Request for the proof of possession nonce */
export interface ProofOfPossessionNonceRequest {
  /** The proof of possession nonce */
  proofOfPossessionNonce: string;
}

/** Response of the count for elements. */
export interface CountElementsResponse {
  /** Number of children resources in parent resource. */
  value: number;
}

/** The response of a Image list operation. */
export interface ImageListResult {
  /** The Image items on this page */
  value: Image[];
  /** The link to the next page of items */
  nextLink?: string;
}

/** The response of a Deployment list operation. */
export interface DeploymentListResult {
  /** The Deployment items on this page */
  value: Deployment[];
  /** The link to the next page of items */
  nextLink?: string;
}

/** Request of the action to list device groups for a catalog. */
export interface ListDeviceGroupsRequest {
  /** Device Group name. */
  deviceGroupName?: string;
}

/** The response of a DeviceGroup list operation. */
export interface DeviceGroupListResult {
  /** The DeviceGroup items on this page */
  value: DeviceGroup[];
  /** The link to the next page of items */
  nextLink?: string;
}

/** Paged collection of DeviceInsight items */
export interface PagedDeviceInsight {
  /** The DeviceInsight items on this page */
  value: DeviceInsight[];
  /** The link to the next page of items */
  nextLink?: string;
}

/** Device insight report. */
export interface DeviceInsight {
  /** Device ID */
  deviceId: string;
  /** Event description */
  description: string;
  /** Event start timestamp */
  startTimestampUtc: Date;
  /** Event end timestamp */
  endTimestampUtc: Date;
  /** Event category */
  eventCategory: string;
  /** Event class */
  eventClass: string;
  /** Event type */
  eventType: string;
  /** Event count */
  eventCount: number;
}

/** The response of a Device list operation. */
export interface DeviceListResult {
  /** The Device items on this page */
  value: Device[];
  /** The link to the next page of items */
  nextLink?: string;
}

/** The response of a Product list operation. */
export interface ProductListResult {
  /** The Product items on this page */
  value: Product[];
  /** The link to the next page of items */
  nextLink?: string;
}

/** The type used for update operations of the Product. */
export interface ProductUpdate {
  /** Description of the product */
  description?: string;
}

/** The type used for update operations of the DeviceGroup. */
export interface DeviceGroupUpdate {
  /** Description of the device group. */
  description?: string;
  /** Operating system feed type of the device group. */
  osFeedType?: OSFeedType;
  /** Update policy of the device group. */
  updatePolicy?: UpdatePolicy;
  /** Flag to define if the user allows for crash dump collection. */
  allowCrashDumpsCollection?: AllowCrashDumpCollection;
  /** Regional data boundary for the device group. */
  regionalDataBoundary?: RegionalDataBoundary;
}

/** Request to the action call to bulk claim devices. */
export interface ClaimDevicesRequest {
  /** Device identifiers of the devices to be claimed. */
  deviceIdentifiers: string[];
}

/** The type used for update operations of the Device. */
export interface DeviceUpdate {
  /** Device group id */
  deviceGroupId?: string;
}

/** Request of the action to create a signed device capability image */
export interface GenerateCapabilityImageRequest {
  /** List of capabilities to create */
  capabilities: CapabilityType[];
}

/** Signed device capability image response */
export interface SignedCapabilityImageResponse {
  /**
   * The signed device capability image as a UTF-8 encoded base 64 string.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly image?: string;
}

/** The properties of device patch */
export interface DevicePatchProperties {
  /** Device group id */
  deviceGroupId: string;
}

/** Image upload request body. */
export interface ImageUploadRequestBody {
  /** . */
  images: string;
}

/** The resource model definition for an Azure Resource Manager tracked top level resource which has 'tags' and a 'location' */
export interface TrackedResource extends Resource {
  /** Resource tags. */
  tags?: { [propertyName: string]: string };
  /** The geo-location where the resource lives */
  location: string;
}

/** The resource model definition for a Azure Resource Manager proxy resource. It will not have tags and a location */
export interface ProxyResource extends Resource {}

/** Result of the action to generate a proof of possession nonce */
export interface ProofOfPossessionNonceResponse extends CertificateProperties {}

/** Response to the action call for count devices in a catalog. */
export interface CountDeviceResponse extends CountElementsResponse {}

/** An Azure Sphere catalog */
export interface Catalog extends TrackedResource {
  /**
   * The status of the last operation.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly provisioningState?: ProvisioningState;
}

/** An certificate resource belonging to a catalog resource. */
export interface Certificate extends ProxyResource {
  /**
   * The certificate as a UTF-8 encoded base 64 string.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly certificate?: string;
  /**
   * The certificate status.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly status?: CertificateStatus;
  /**
   * The certificate subject.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly subject?: string;
  /**
   * The certificate thumbprint.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly thumbprint?: string;
  /**
   * The certificate expiry date.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly expiryUtc?: Date;
  /**
   * The certificate not before date.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly notBeforeUtc?: Date;
  /**
   * The status of the last operation.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly provisioningState?: ProvisioningState;
}

/** An image resource belonging to a catalog resource. */
export interface Image extends ProxyResource {
  /** Image as a UTF-8 encoded base 64 string on image create. This field contains the image URI on image reads. */
  image?: string;
  /** Image ID */
  imageId?: string;
  /**
   * Image name
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly imageName?: string;
  /** Regional data boundary for an image */
  regionalDataBoundary?: RegionalDataBoundary;
  /**
   * Location the image
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly uri?: string;
  /**
   * The image description.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly description?: string;
  /**
   * The image component id.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly componentId?: string;
  /**
   * The image type.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly imageType?: ImageType;
  /**
   * The status of the last operation.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly provisioningState?: ProvisioningState;
}

/** An deployment resource belonging to a device group resource. */
export interface Deployment extends ProxyResource {
  /** Deployment ID */
  deploymentId?: string;
  /** Images deployed */
  deployedImages?: Image[];
  /**
   * Deployment date UTC
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly deploymentDateUtc?: Date;
  /**
   * The status of the last operation.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly provisioningState?: ProvisioningState;
}

/** An device group resource belonging to a product resource. */
export interface DeviceGroup extends ProxyResource {
  /** Description of the device group. */
  description?: string;
  /** Operating system feed type of the device group. */
  osFeedType?: OSFeedType;
  /** Update policy of the device group. */
  updatePolicy?: UpdatePolicy;
  /** Flag to define if the user allows for crash dump collection. */
  allowCrashDumpsCollection?: AllowCrashDumpCollection;
  /** Regional data boundary for the device group. */
  regionalDataBoundary?: RegionalDataBoundary;
  /**
   * Deployment status for the device group.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly hasDeployment?: boolean;
  /**
   * The status of the last operation.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly provisioningState?: ProvisioningState;
}

/** An device resource belonging to a device group resource. */
export interface Device extends ProxyResource {
  /** Device ID */
  deviceId?: string;
  /**
   * SKU of the chip
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly chipSku?: string;
  /**
   * OS version available for installation when update requested
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly lastAvailableOsVersion?: string;
  /**
   * OS version running on device when update requested
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly lastInstalledOsVersion?: string;
  /**
   * Time when update requested and new OS version available
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly lastOsUpdateUtc?: Date;
  /**
   * Time when update was last requested
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly lastUpdateRequestUtc?: Date;
  /**
   * The status of the last operation.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly provisioningState?: ProvisioningState;
}

/** An product resource belonging to a catalog resource. */
export interface Product extends ProxyResource {
  /** Description of the product */
  description?: string;
  /**
   * The status of the last operation.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly provisioningState?: ProvisioningState;
}

/** Defines headers for Catalogs_createOrUpdate operation. */
export interface CatalogsCreateOrUpdateHeaders {
  /** The Retry-After header can indicate how long the client should wait before polling the operation status. */
  retryAfter?: number;
}

/** Defines headers for Catalogs_delete operation. */
export interface CatalogsDeleteHeaders {
  /** The Retry-After header can indicate how long the client should wait before polling the operation status. */
  retryAfter?: number;
  /** The Location header contains the URL where the status of the long running operation can be checked. */
  location?: string;
}

/** Defines headers for Images_createOrUpdate operation. */
export interface ImagesCreateOrUpdateHeaders {
  /** The Retry-After header can indicate how long the client should wait before polling the operation status. */
  retryAfter?: number;
}

/** Defines headers for Images_delete operation. */
export interface ImagesDeleteHeaders {
  /** The Retry-After header can indicate how long the client should wait before polling the operation status. */
  retryAfter?: number;
  /** The Location header contains the URL where the status of the long running operation can be checked. */
  location?: string;
}

/** Defines headers for Products_createOrUpdate operation. */
export interface ProductsCreateOrUpdateHeaders {
  /** The Retry-After header can indicate how long the client should wait before polling the operation status. */
  retryAfter?: number;
}

/** Defines headers for Products_update operation. */
export interface ProductsUpdateHeaders {
  /** The Retry-After header can indicate how long the client should wait before polling the operation status. */
  retryAfter?: number;
  /** The Location header contains the URL where the status of the long running operation can be checked. */
  location?: string;
}

/** Defines headers for Products_delete operation. */
export interface ProductsDeleteHeaders {
  /** The Retry-After header can indicate how long the client should wait before polling the operation status. */
  retryAfter?: number;
  /** The Location header contains the URL where the status of the long running operation can be checked. */
  location?: string;
}

/** Defines headers for DeviceGroups_createOrUpdate operation. */
export interface DeviceGroupsCreateOrUpdateHeaders {
  /** The Retry-After header can indicate how long the client should wait before polling the operation status. */
  retryAfter?: number;
}

/** Defines headers for DeviceGroups_update operation. */
export interface DeviceGroupsUpdateHeaders {
  /** The Retry-After header can indicate how long the client should wait before polling the operation status. */
  retryAfter?: number;
  /** The Location header contains the URL where the status of the long running operation can be checked. */
  location?: string;
}

/** Defines headers for DeviceGroups_delete operation. */
export interface DeviceGroupsDeleteHeaders {
  /** The Retry-After header can indicate how long the client should wait before polling the operation status. */
  retryAfter?: number;
  /** The Location header contains the URL where the status of the long running operation can be checked. */
  location?: string;
}

/** Defines headers for DeviceGroups_claimDevices operation. */
export interface DeviceGroupsClaimDevicesHeaders {
  /** The Retry-After header can indicate how long the client should wait before polling the operation status. */
  retryAfter?: number;
}

/** Defines headers for Deployments_createOrUpdate operation. */
export interface DeploymentsCreateOrUpdateHeaders {
  /** The Retry-After header can indicate how long the client should wait before polling the operation status. */
  retryAfter?: number;
}

/** Defines headers for Deployments_delete operation. */
export interface DeploymentsDeleteHeaders {
  /** The Retry-After header can indicate how long the client should wait before polling the operation status. */
  retryAfter?: number;
  /** The Location header contains the URL where the status of the long running operation can be checked. */
  location?: string;
}

/** Defines headers for Devices_createOrUpdate operation. */
export interface DevicesCreateOrUpdateHeaders {
  /** The Retry-After header can indicate how long the client should wait before polling the operation status. */
  retryAfter?: number;
}

/** Defines headers for Devices_update operation. */
export interface DevicesUpdateHeaders {
  /** The Retry-After header can indicate how long the client should wait before polling the operation status. */
  retryAfter?: number;
}

/** Defines headers for Devices_delete operation. */
export interface DevicesDeleteHeaders {
  /** The Retry-After header can indicate how long the client should wait before polling the operation status. */
  retryAfter?: number;
  /** The Location header contains the URL where the status of the long running operation can be checked. */
  location?: string;
}

/** Defines headers for Devices_generateCapabilityImage operation. */
export interface DevicesGenerateCapabilityImageHeaders {
  /** The Retry-After header can indicate how long the client should wait before polling the operation status. */
  retryAfter?: number;
}

/** Known values of {@link Origin} that the service accepts. */
export enum KnownOrigin {
  /** User */
  User = "user",
  /** System */
  System = "system",
  /** UserSystem */
  UserSystem = "user,system"
}

/**
 * Defines values for Origin. \
 * {@link KnownOrigin} can be used interchangeably with Origin,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **user** \
 * **system** \
 * **user,system**
 */
export type Origin = string;

/** Known values of {@link ActionType} that the service accepts. */
export enum KnownActionType {
  /** Internal */
  Internal = "Internal"
}

/**
 * Defines values for ActionType. \
 * {@link KnownActionType} can be used interchangeably with ActionType,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **Internal**
 */
export type ActionType = string;

/** Known values of {@link ProvisioningState} that the service accepts. */
export enum KnownProvisioningState {
  /** Resource has been created. */
  Succeeded = "Succeeded",
  /** Resource creation failed. */
  Failed = "Failed",
  /** Resource creation was canceled. */
  Canceled = "Canceled",
  /** The resource is being provisioned */
  Provisioning = "Provisioning",
  /** The resource is being updated */
  Updating = "Updating",
  /** The resource is being deleted */
  Deleting = "Deleting",
  /** The resource create request has been accepted */
  Accepted = "Accepted"
}

/**
 * Defines values for ProvisioningState. \
 * {@link KnownProvisioningState} can be used interchangeably with ProvisioningState,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **Succeeded**: Resource has been created. \
 * **Failed**: Resource creation failed. \
 * **Canceled**: Resource creation was canceled. \
 * **Provisioning**: The resource is being provisioned \
 * **Updating**: The resource is being updated \
 * **Deleting**: The resource is being deleted \
 * **Accepted**: The resource create request has been accepted
 */
export type ProvisioningState = string;

/** Known values of {@link CreatedByType} that the service accepts. */
export enum KnownCreatedByType {
  /** User */
  User = "User",
  /** Application */
  Application = "Application",
  /** ManagedIdentity */
  ManagedIdentity = "ManagedIdentity",
  /** Key */
  Key = "Key"
}

/**
 * Defines values for CreatedByType. \
 * {@link KnownCreatedByType} can be used interchangeably with CreatedByType,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **User** \
 * **Application** \
 * **ManagedIdentity** \
 * **Key**
 */
export type CreatedByType = string;

/** Known values of {@link CertificateStatus} that the service accepts. */
export enum KnownCertificateStatus {
  /** Certificate is active */
  Active = "Active",
  /** Certificate is inactive */
  Inactive = "Inactive",
  /** Certificate has expired */
  Expired = "Expired",
  /** Certificate has been revoked */
  Revoked = "Revoked"
}

/**
 * Defines values for CertificateStatus. \
 * {@link KnownCertificateStatus} can be used interchangeably with CertificateStatus,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **Active**: Certificate is active \
 * **Inactive**: Certificate is inactive \
 * **Expired**: Certificate has expired \
 * **Revoked**: Certificate has been revoked
 */
export type CertificateStatus = string;

/** Known values of {@link RegionalDataBoundary} that the service accepts. */
export enum KnownRegionalDataBoundary {
  /** No data boundary */
  None = "None",
  /** EU data boundary */
  EU = "EU"
}

/**
 * Defines values for RegionalDataBoundary. \
 * {@link KnownRegionalDataBoundary} can be used interchangeably with RegionalDataBoundary,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **None**: No data boundary \
 * **EU**: EU data boundary
 */
export type RegionalDataBoundary = string;

/** Known values of {@link ImageType} that the service accepts. */
export enum KnownImageType {
  /** Invalid image. */
  InvalidImageType = "InvalidImageType",
  /** One Bl image type */
  OneBl = "OneBl",
  /** Pluton image type */
  PlutonRuntime = "PlutonRuntime",
  /** Wifi firmware image type */
  WifiFirmware = "WifiFirmware",
  /** Security monitor image type */
  SecurityMonitor = "SecurityMonitor",
  /** Normal world loader image type */
  NormalWorldLoader = "NormalWorldLoader",
  /** Normal world dtb image type */
  NormalWorldDtb = "NormalWorldDtb",
  /** Normal world kernel image type */
  NormalWorldKernel = "NormalWorldKernel",
  /** Root FS image type */
  RootFs = "RootFs",
  /** Services image type */
  Services = "Services",
  /** Applications image type */
  Applications = "Applications",
  /** FW config image type */
  FwConfig = "FwConfig",
  /** Boot manifest image type */
  BootManifest = "BootManifest",
  /** Nwfs image type */
  Nwfs = "Nwfs",
  /** Trusted key store image type */
  TrustedKeystore = "TrustedKeystore",
  /** Policy image type */
  Policy = "Policy",
  /** Customer board config image type */
  CustomerBoardConfig = "CustomerBoardConfig",
  /** Update certificate store image type */
  UpdateCertStore = "UpdateCertStore",
  /** Base system update manifest image type */
  BaseSystemUpdateManifest = "BaseSystemUpdateManifest",
  /** Firmware update manifest image type */
  FirmwareUpdateManifest = "FirmwareUpdateManifest",
  /** Customer update manifest image type */
  CustomerUpdateManifest = "CustomerUpdateManifest",
  /** Recovery manifest image type */
  RecoveryManifest = "RecoveryManifest",
  /** manifest set image type */
  ManifestSet = "ManifestSet",
  /** Other image type */
  Other = "Other"
}

/**
 * Defines values for ImageType. \
 * {@link KnownImageType} can be used interchangeably with ImageType,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **InvalidImageType**: Invalid image. \
 * **OneBl**: One Bl image type \
 * **PlutonRuntime**: Pluton image type \
 * **WifiFirmware**: Wifi firmware image type \
 * **SecurityMonitor**: Security monitor image type \
 * **NormalWorldLoader**: Normal world loader image type \
 * **NormalWorldDtb**: Normal world dtb image type \
 * **NormalWorldKernel**: Normal world kernel image type \
 * **RootFs**: Root FS image type \
 * **Services**: Services image type \
 * **Applications**: Applications image type \
 * **FwConfig**: FW config image type \
 * **BootManifest**: Boot manifest image type \
 * **Nwfs**: Nwfs image type \
 * **TrustedKeystore**: Trusted key store image type \
 * **Policy**: Policy image type \
 * **CustomerBoardConfig**: Customer board config image type \
 * **UpdateCertStore**: Update certificate store image type \
 * **BaseSystemUpdateManifest**: Base system update manifest image type \
 * **FirmwareUpdateManifest**: Firmware update manifest image type \
 * **CustomerUpdateManifest**: Customer update manifest image type \
 * **RecoveryManifest**: Recovery manifest image type \
 * **ManifestSet**: manifest set image type \
 * **Other**: Other image type
 */
export type ImageType = string;

/** Known values of {@link OSFeedType} that the service accepts. */
export enum KnownOSFeedType {
  /** Retail OS feed type. */
  Retail = "Retail",
  /** Retail evaluation OS feed type. */
  RetailEval = "RetailEval"
}

/**
 * Defines values for OSFeedType. \
 * {@link KnownOSFeedType} can be used interchangeably with OSFeedType,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **Retail**: Retail OS feed type. \
 * **RetailEval**: Retail evaluation OS feed type.
 */
export type OSFeedType = string;

/** Known values of {@link UpdatePolicy} that the service accepts. */
export enum KnownUpdatePolicy {
  /** Update all policy. */
  UpdateAll = "UpdateAll",
  /** No update for 3rd party app policy. */
  No3RdPartyAppUpdates = "No3rdPartyAppUpdates"
}

/**
 * Defines values for UpdatePolicy. \
 * {@link KnownUpdatePolicy} can be used interchangeably with UpdatePolicy,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **UpdateAll**: Update all policy. \
 * **No3rdPartyAppUpdates**: No update for 3rd party app policy.
 */
export type UpdatePolicy = string;

/** Known values of {@link AllowCrashDumpCollection} that the service accepts. */
export enum KnownAllowCrashDumpCollection {
  /** Crash dump collection enabled */
  Enabled = "Enabled",
  /** Crash dump collection disabled */
  Disabled = "Disabled"
}

/**
 * Defines values for AllowCrashDumpCollection. \
 * {@link KnownAllowCrashDumpCollection} can be used interchangeably with AllowCrashDumpCollection,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **Enabled**: Crash dump collection enabled \
 * **Disabled**: Crash dump collection disabled
 */
export type AllowCrashDumpCollection = string;

/** Known values of {@link CapabilityType} that the service accepts. */
export enum KnownCapabilityType {
  /** Application development capability */
  ApplicationDevelopment = "ApplicationDevelopment",
  /** Field servicing capability */
  FieldServicing = "FieldServicing"
}

/**
 * Defines values for CapabilityType. \
 * {@link KnownCapabilityType} can be used interchangeably with CapabilityType,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **ApplicationDevelopment**: Application development capability \
 * **FieldServicing**: Field servicing capability
 */
export type CapabilityType = string;

/** Optional parameters. */
export interface OperationsListOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the list operation. */
export type OperationsListResponse = OperationListResult;

/** Optional parameters. */
export interface OperationsListNextOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the listNext operation. */
export type OperationsListNextResponse = OperationListResult;

/** Optional parameters. */
export interface CatalogsListBySubscriptionOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the listBySubscription operation. */
export type CatalogsListBySubscriptionResponse = CatalogListResult;

/** Optional parameters. */
export interface CatalogsListByResourceGroupOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the listByResourceGroup operation. */
export type CatalogsListByResourceGroupResponse = CatalogListResult;

/** Optional parameters. */
export interface CatalogsGetOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the get operation. */
export type CatalogsGetResponse = Catalog;

/** Optional parameters. */
export interface CatalogsCreateOrUpdateOptionalParams
  extends coreClient.OperationOptions {
  /** Delay to wait until next poll, in milliseconds. */
  updateIntervalInMs?: number;
  /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */
  resumeFrom?: string;
}

/** Contains response data for the createOrUpdate operation. */
export type CatalogsCreateOrUpdateResponse = Catalog;

/** Optional parameters. */
export interface CatalogsUpdateOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the update operation. */
export type CatalogsUpdateResponse = Catalog;

/** Optional parameters. */
export interface CatalogsDeleteOptionalParams
  extends coreClient.OperationOptions {
  /** Delay to wait until next poll, in milliseconds. */
  updateIntervalInMs?: number;
  /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */
  resumeFrom?: string;
}

/** Optional parameters. */
export interface CatalogsCountDevicesOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the countDevices operation. */
export type CatalogsCountDevicesResponse = CountDeviceResponse;

/** Optional parameters. */
export interface CatalogsListDeploymentsOptionalParams
  extends coreClient.OperationOptions {
  /** Filter the result list using the given expression */
  filter?: string;
  /** The number of result items to return. */
  top?: number;
  /** The number of result items to skip. */
  skip?: number;
  /** The maximum number of result items per page. */
  maxpagesize?: number;
}

/** Contains response data for the listDeployments operation. */
export type CatalogsListDeploymentsResponse = DeploymentListResult;

/** Optional parameters. */
export interface CatalogsListDeviceGroupsOptionalParams
  extends coreClient.OperationOptions {
  /** Filter the result list using the given expression */
  filter?: string;
  /** The number of result items to return. */
  top?: number;
  /** The number of result items to skip. */
  skip?: number;
  /** The maximum number of result items per page. */
  maxpagesize?: number;
}

/** Contains response data for the listDeviceGroups operation. */
export type CatalogsListDeviceGroupsResponse = DeviceGroupListResult;

/** Optional parameters. */
export interface CatalogsListDeviceInsightsOptionalParams
  extends coreClient.OperationOptions {
  /** Filter the result list using the given expression */
  filter?: string;
  /** The number of result items to return. */
  top?: number;
  /** The number of result items to skip. */
  skip?: number;
  /** The maximum number of result items per page. */
  maxpagesize?: number;
}

/** Contains response data for the listDeviceInsights operation. */
export type CatalogsListDeviceInsightsResponse = PagedDeviceInsight;

/** Optional parameters. */
export interface CatalogsListDevicesOptionalParams
  extends coreClient.OperationOptions {
  /** Filter the result list using the given expression */
  filter?: string;
  /** The number of result items to return. */
  top?: number;
  /** The number of result items to skip. */
  skip?: number;
  /** The maximum number of result items per page. */
  maxpagesize?: number;
}

/** Contains response data for the listDevices operation. */
export type CatalogsListDevicesResponse = DeviceListResult;

/** Optional parameters. */
export interface CatalogsListBySubscriptionNextOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the listBySubscriptionNext operation. */
export type CatalogsListBySubscriptionNextResponse = CatalogListResult;

/** Optional parameters. */
export interface CatalogsListByResourceGroupNextOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the listByResourceGroupNext operation. */
export type CatalogsListByResourceGroupNextResponse = CatalogListResult;

/** Optional parameters. */
export interface CatalogsListDeploymentsNextOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the listDeploymentsNext operation. */
export type CatalogsListDeploymentsNextResponse = DeploymentListResult;

/** Optional parameters. */
export interface CatalogsListDeviceGroupsNextOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the listDeviceGroupsNext operation. */
export type CatalogsListDeviceGroupsNextResponse = DeviceGroupListResult;

/** Optional parameters. */
export interface CatalogsListDeviceInsightsNextOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the listDeviceInsightsNext operation. */
export type CatalogsListDeviceInsightsNextResponse = PagedDeviceInsight;

/** Optional parameters. */
export interface CatalogsListDevicesNextOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the listDevicesNext operation. */
export type CatalogsListDevicesNextResponse = DeviceListResult;

/** Optional parameters. */
export interface CertificatesListByCatalogOptionalParams
  extends coreClient.OperationOptions {
  /** Filter the result list using the given expression */
  filter?: string;
  /** The number of result items to return. */
  top?: number;
  /** The number of result items to skip. */
  skip?: number;
  /** The maximum number of result items per page. */
  maxpagesize?: number;
}

/** Contains response data for the listByCatalog operation. */
export type CertificatesListByCatalogResponse = CertificateListResult;

/** Optional parameters. */
export interface CertificatesGetOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the get operation. */
export type CertificatesGetResponse = Certificate;

/** Optional parameters. */
export interface CertificatesRetrieveCertChainOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the retrieveCertChain operation. */
export type CertificatesRetrieveCertChainResponse = CertificateChainResponse;

/** Optional parameters. */
export interface CertificatesRetrieveProofOfPossessionNonceOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the retrieveProofOfPossessionNonce operation. */
export type CertificatesRetrieveProofOfPossessionNonceResponse = ProofOfPossessionNonceResponse;

/** Optional parameters. */
export interface CertificatesListByCatalogNextOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the listByCatalogNext operation. */
export type CertificatesListByCatalogNextResponse = CertificateListResult;

/** Optional parameters. */
export interface ImagesListByCatalogOptionalParams
  extends coreClient.OperationOptions {
  /** Filter the result list using the given expression */
  filter?: string;
  /** The number of result items to return. */
  top?: number;
  /** The number of result items to skip. */
  skip?: number;
  /** The maximum number of result items per page. */
  maxpagesize?: number;
}

/** Contains response data for the listByCatalog operation. */
export type ImagesListByCatalogResponse = ImageListResult;

/** Optional parameters. */
export interface ImagesGetOptionalParams extends coreClient.OperationOptions {}

/** Contains response data for the get operation. */
export type ImagesGetResponse = Image;

/** Optional parameters. */
export interface ImagesCreateOrUpdateOptionalParams
  extends coreClient.OperationOptions {
  /** Delay to wait until next poll, in milliseconds. */
  updateIntervalInMs?: number;
  /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */
  resumeFrom?: string;
}

/** Contains response data for the createOrUpdate operation. */
export type ImagesCreateOrUpdateResponse = Image;

/** Optional parameters. */
export interface ImagesDeleteOptionalParams
  extends coreClient.OperationOptions {
  /** Delay to wait until next poll, in milliseconds. */
  updateIntervalInMs?: number;
  /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */
  resumeFrom?: string;
}

/** Optional parameters. */
export interface ImagesListByCatalogNextOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the listByCatalogNext operation. */
export type ImagesListByCatalogNextResponse = ImageListResult;

/** Optional parameters. */
export interface ProductsListByCatalogOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the listByCatalog operation. */
export type ProductsListByCatalogResponse = ProductListResult;

/** Optional parameters. */
export interface ProductsGetOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the get operation. */
export type ProductsGetResponse = Product;

/** Optional parameters. */
export interface ProductsCreateOrUpdateOptionalParams
  extends coreClient.OperationOptions {
  /** Delay to wait until next poll, in milliseconds. */
  updateIntervalInMs?: number;
  /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */
  resumeFrom?: string;
}

/** Contains response data for the createOrUpdate operation. */
export type ProductsCreateOrUpdateResponse = Product;

/** Optional parameters. */
export interface ProductsUpdateOptionalParams
  extends coreClient.OperationOptions {
  /** Delay to wait until next poll, in milliseconds. */
  updateIntervalInMs?: number;
  /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */
  resumeFrom?: string;
}

/** Contains response data for the update operation. */
export type ProductsUpdateResponse = Product;

/** Optional parameters. */
export interface ProductsDeleteOptionalParams
  extends coreClient.OperationOptions {
  /** Delay to wait until next poll, in milliseconds. */
  updateIntervalInMs?: number;
  /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */
  resumeFrom?: string;
}

/** Optional parameters. */
export interface ProductsCountDevicesOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the countDevices operation. */
export type ProductsCountDevicesResponse = CountDeviceResponse;

/** Optional parameters. */
export interface ProductsGenerateDefaultDeviceGroupsOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the generateDefaultDeviceGroups operation. */
export type ProductsGenerateDefaultDeviceGroupsResponse = DeviceGroupListResult;

/** Optional parameters. */
export interface ProductsListByCatalogNextOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the listByCatalogNext operation. */
export type ProductsListByCatalogNextResponse = ProductListResult;

/** Optional parameters. */
export interface ProductsGenerateDefaultDeviceGroupsNextOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the generateDefaultDeviceGroupsNext operation. */
export type ProductsGenerateDefaultDeviceGroupsNextResponse = DeviceGroupListResult;

/** Optional parameters. */
export interface DeviceGroupsListByProductOptionalParams
  extends coreClient.OperationOptions {
  /** Filter the result list using the given expression */
  filter?: string;
  /** The number of result items to return. */
  top?: number;
  /** The number of result items to skip. */
  skip?: number;
  /** The maximum number of result items per page. */
  maxpagesize?: number;
}

/** Contains response data for the listByProduct operation. */
export type DeviceGroupsListByProductResponse = DeviceGroupListResult;

/** Optional parameters. */
export interface DeviceGroupsGetOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the get operation. */
export type DeviceGroupsGetResponse = DeviceGroup;

/** Optional parameters. */
export interface DeviceGroupsCreateOrUpdateOptionalParams
  extends coreClient.OperationOptions {
  /** Delay to wait until next poll, in milliseconds. */
  updateIntervalInMs?: number;
  /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */
  resumeFrom?: string;
}

/** Contains response data for the createOrUpdate operation. */
export type DeviceGroupsCreateOrUpdateResponse = DeviceGroup;

/** Optional parameters. */
export interface DeviceGroupsUpdateOptionalParams
  extends coreClient.OperationOptions {
  /** Delay to wait until next poll, in milliseconds. */
  updateIntervalInMs?: number;
  /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */
  resumeFrom?: string;
}

/** Contains response data for the update operation. */
export type DeviceGroupsUpdateResponse = DeviceGroup;

/** Optional parameters. */
export interface DeviceGroupsDeleteOptionalParams
  extends coreClient.OperationOptions {
  /** Delay to wait until next poll, in milliseconds. */
  updateIntervalInMs?: number;
  /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */
  resumeFrom?: string;
}

/** Optional parameters. */
export interface DeviceGroupsClaimDevicesOptionalParams
  extends coreClient.OperationOptions {
  /** Delay to wait until next poll, in milliseconds. */
  updateIntervalInMs?: number;
  /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */
  resumeFrom?: string;
}

/** Contains response data for the claimDevices operation. */
export type DeviceGroupsClaimDevicesResponse = DeviceGroupsClaimDevicesHeaders;

/** Optional parameters. */
export interface DeviceGroupsCountDevicesOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the countDevices operation. */
export type DeviceGroupsCountDevicesResponse = CountDeviceResponse;

/** Optional parameters. */
export interface DeviceGroupsListByProductNextOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the listByProductNext operation. */
export type DeviceGroupsListByProductNextResponse = DeviceGroupListResult;

/** Optional parameters. */
export interface DeploymentsListByDeviceGroupOptionalParams
  extends coreClient.OperationOptions {
  /** Filter the result list using the given expression */
  filter?: string;
  /** The number of result items to return. */
  top?: number;
  /** The number of result items to skip. */
  skip?: number;
  /** The maximum number of result items per page. */
  maxpagesize?: number;
}

/** Contains response data for the listByDeviceGroup operation. */
export type DeploymentsListByDeviceGroupResponse = DeploymentListResult;

/** Optional parameters. */
export interface DeploymentsGetOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the get operation. */
export type DeploymentsGetResponse = Deployment;

/** Optional parameters. */
export interface DeploymentsCreateOrUpdateOptionalParams
  extends coreClient.OperationOptions {
  /** Delay to wait until next poll, in milliseconds. */
  updateIntervalInMs?: number;
  /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */
  resumeFrom?: string;
}

/** Contains response data for the createOrUpdate operation. */
export type DeploymentsCreateOrUpdateResponse = Deployment;

/** Optional parameters. */
export interface DeploymentsDeleteOptionalParams
  extends coreClient.OperationOptions {
  /** Delay to wait until next poll, in milliseconds. */
  updateIntervalInMs?: number;
  /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */
  resumeFrom?: string;
}

/** Optional parameters. */
export interface DeploymentsListByDeviceGroupNextOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the listByDeviceGroupNext operation. */
export type DeploymentsListByDeviceGroupNextResponse = DeploymentListResult;

/** Optional parameters. */
export interface DevicesListByDeviceGroupOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the listByDeviceGroup operation. */
export type DevicesListByDeviceGroupResponse = DeviceListResult;

/** Optional parameters. */
export interface DevicesGetOptionalParams extends coreClient.OperationOptions {}

/** Contains response data for the get operation. */
export type DevicesGetResponse = Device;

/** Optional parameters. */
export interface DevicesCreateOrUpdateOptionalParams
  extends coreClient.OperationOptions {
  /** Delay to wait until next poll, in milliseconds. */
  updateIntervalInMs?: number;
  /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */
  resumeFrom?: string;
}

/** Contains response data for the createOrUpdate operation. */
export type DevicesCreateOrUpdateResponse = Device;

/** Optional parameters. */
export interface DevicesUpdateOptionalParams
  extends coreClient.OperationOptions {
  /** Delay to wait until next poll, in milliseconds. */
  updateIntervalInMs?: number;
  /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */
  resumeFrom?: string;
}

/** Contains response data for the update operation. */
export type DevicesUpdateResponse = Device;

/** Optional parameters. */
export interface DevicesDeleteOptionalParams
  extends coreClient.OperationOptions {
  /** Delay to wait until next poll, in milliseconds. */
  updateIntervalInMs?: number;
  /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */
  resumeFrom?: string;
}

/** Optional parameters. */
export interface DevicesGenerateCapabilityImageOptionalParams
  extends coreClient.OperationOptions {
  /** Delay to wait until next poll, in milliseconds. */
  updateIntervalInMs?: number;
  /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */
  resumeFrom?: string;
}

/** Contains response data for the generateCapabilityImage operation. */
export type DevicesGenerateCapabilityImageResponse = SignedCapabilityImageResponse;

/** Optional parameters. */
export interface DevicesListByDeviceGroupNextOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the listByDeviceGroupNext operation. */
export type DevicesListByDeviceGroupNextResponse = DeviceListResult;

/** Optional parameters. */
export interface AzureSphereManagementClientOptionalParams
  extends coreClient.ServiceClientOptions {
  /** server parameter */
  $host?: string;
  /** Api Version */
  apiVersion?: string;
  /** Overrides client endpoint. */
  endpoint?: string;
}
