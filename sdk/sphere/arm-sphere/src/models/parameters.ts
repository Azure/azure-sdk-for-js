/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */

import {
  OperationParameter,
  OperationURLParameter,
  OperationQueryParameter
} from "@azure/core-client";
import {
  Catalog as CatalogMapper,
  CatalogUpdate as CatalogUpdateMapper,
  ListDeviceGroupsRequest as ListDeviceGroupsRequestMapper,
  ProofOfPossessionNonceRequest as ProofOfPossessionNonceRequestMapper,
  Image as ImageMapper,
  Product as ProductMapper,
  ProductUpdate as ProductUpdateMapper,
  DeviceGroup as DeviceGroupMapper,
  DeviceGroupUpdate as DeviceGroupUpdateMapper,
  ClaimDevicesRequest as ClaimDevicesRequestMapper,
  Deployment as DeploymentMapper,
  Device as DeviceMapper,
  DeviceUpdate as DeviceUpdateMapper,
  GenerateCapabilityImageRequest as GenerateCapabilityImageRequestMapper
} from "../models/mappers";

export const accept: OperationParameter = {
  parameterPath: "accept",
  mapper: {
    defaultValue: "application/json",
    isConstant: true,
    serializedName: "Accept",
    type: {
      name: "String"
    }
  }
};

export const $host: OperationURLParameter = {
  parameterPath: "$host",
  mapper: {
    serializedName: "$host",
    required: true,
    type: {
      name: "String"
    }
  },
  skipEncoding: true
};

export const apiVersion: OperationQueryParameter = {
  parameterPath: "apiVersion",
  mapper: {
    defaultValue: "2022-09-01-preview",
    isConstant: true,
    serializedName: "api-version",
    type: {
      name: "String"
    }
  }
};

export const nextLink: OperationURLParameter = {
  parameterPath: "nextLink",
  mapper: {
    serializedName: "nextLink",
    required: true,
    type: {
      name: "String"
    }
  },
  skipEncoding: true
};

export const subscriptionId: OperationURLParameter = {
  parameterPath: "subscriptionId",
  mapper: {
    constraints: {
      MinLength: 1
    },
    serializedName: "subscriptionId",
    required: true,
    type: {
      name: "String"
    }
  }
};

export const resourceGroupName: OperationURLParameter = {
  parameterPath: "resourceGroupName",
  mapper: {
    constraints: {
      MaxLength: 90,
      MinLength: 1
    },
    serializedName: "resourceGroupName",
    required: true,
    type: {
      name: "String"
    }
  }
};

export const catalogName: OperationURLParameter = {
  parameterPath: "catalogName",
  mapper: {
    constraints: {
      Pattern: new RegExp("^[A-Za-z0-9_-]{1,50}$")
    },
    serializedName: "catalogName",
    required: true,
    type: {
      name: "String"
    }
  }
};

export const contentType: OperationParameter = {
  parameterPath: ["options", "contentType"],
  mapper: {
    defaultValue: "application/json",
    isConstant: true,
    serializedName: "Content-Type",
    type: {
      name: "String"
    }
  }
};

export const resource: OperationParameter = {
  parameterPath: "resource",
  mapper: CatalogMapper
};

export const properties: OperationParameter = {
  parameterPath: "properties",
  mapper: CatalogUpdateMapper
};

export const filter: OperationQueryParameter = {
  parameterPath: ["options", "filter"],
  mapper: {
    serializedName: "$filter",
    type: {
      name: "String"
    }
  }
};

export const top: OperationQueryParameter = {
  parameterPath: ["options", "top"],
  mapper: {
    serializedName: "$top",
    type: {
      name: "Number"
    }
  }
};

export const skip: OperationQueryParameter = {
  parameterPath: ["options", "skip"],
  mapper: {
    serializedName: "$skip",
    type: {
      name: "Number"
    }
  }
};

export const maxpagesize: OperationQueryParameter = {
  parameterPath: ["options", "maxpagesize"],
  mapper: {
    serializedName: "$maxpagesize",
    type: {
      name: "Number"
    }
  }
};

export const listDeviceGroupsRequest: OperationParameter = {
  parameterPath: "listDeviceGroupsRequest",
  mapper: ListDeviceGroupsRequestMapper
};

export const serialNumber: OperationURLParameter = {
  parameterPath: "serialNumber",
  mapper: {
    serializedName: "serialNumber",
    required: true,
    type: {
      name: "String"
    }
  }
};

export const proofOfPossessionNonceRequest: OperationParameter = {
  parameterPath: "proofOfPossessionNonceRequest",
  mapper: ProofOfPossessionNonceRequestMapper
};

export const imageName: OperationURLParameter = {
  parameterPath: "imageName",
  mapper: {
    serializedName: "imageName",
    required: true,
    type: {
      name: "String"
    }
  }
};

export const resource1: OperationParameter = {
  parameterPath: "resource",
  mapper: ImageMapper
};

export const productName: OperationURLParameter = {
  parameterPath: "productName",
  mapper: {
    constraints: {
      Pattern: new RegExp(
        "^[\\w][\\w\\s]{1,48}[\\w]$|^\\.default$|^\\.unassigned$"
      )
    },
    serializedName: "productName",
    required: true,
    type: {
      name: "String"
    }
  }
};

export const resource2: OperationParameter = {
  parameterPath: "resource",
  mapper: ProductMapper
};

export const properties1: OperationParameter = {
  parameterPath: "properties",
  mapper: ProductUpdateMapper
};

export const deviceGroupName: OperationURLParameter = {
  parameterPath: "deviceGroupName",
  mapper: {
    constraints: {
      Pattern: new RegExp(
        "^[A-Za-z0-9]{1,2}$|^[A-Za-z0-9][A-Za-z0-9\\s]{1,48}[A-Za-z0-9]$|^\\.default$|^\\.unassigned$"
      )
    },
    serializedName: "deviceGroupName",
    required: true,
    type: {
      name: "String"
    }
  }
};

export const resource3: OperationParameter = {
  parameterPath: "resource",
  mapper: DeviceGroupMapper
};

export const properties2: OperationParameter = {
  parameterPath: "properties",
  mapper: DeviceGroupUpdateMapper
};

export const claimDevicesRequest: OperationParameter = {
  parameterPath: "claimDevicesRequest",
  mapper: ClaimDevicesRequestMapper
};

export const deploymentName: OperationURLParameter = {
  parameterPath: "deploymentName",
  mapper: {
    serializedName: "deploymentName",
    required: true,
    type: {
      name: "String"
    }
  }
};

export const resource4: OperationParameter = {
  parameterPath: "resource",
  mapper: DeploymentMapper
};

export const deviceName: OperationURLParameter = {
  parameterPath: "deviceName",
  mapper: {
    constraints: {
      Pattern: new RegExp("^[a-zA-Z0-9-]{128}$")
    },
    serializedName: "deviceName",
    required: true,
    type: {
      name: "String"
    }
  }
};

export const resource5: OperationParameter = {
  parameterPath: "resource",
  mapper: DeviceMapper
};

export const properties3: OperationParameter = {
  parameterPath: "properties",
  mapper: DeviceUpdateMapper
};

export const generateDeviceCapabilityRequest: OperationParameter = {
  parameterPath: "generateDeviceCapabilityRequest",
  mapper: GenerateCapabilityImageRequestMapper
};
