/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */

import * as coreClient from "@azure/core-client";

export const OperationListResult: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "OperationListResult",
    modelProperties: {
      value: {
        serializedName: "value",
        readOnly: true,
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "Operation"
            }
          }
        }
      },
      nextLink: {
        serializedName: "nextLink",
        readOnly: true,
        type: {
          name: "String"
        }
      }
    }
  }
};

export const Operation: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "Operation",
    modelProperties: {
      name: {
        serializedName: "name",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      isDataAction: {
        serializedName: "isDataAction",
        readOnly: true,
        type: {
          name: "Boolean"
        }
      },
      display: {
        serializedName: "display",
        type: {
          name: "Composite",
          className: "OperationDisplay"
        }
      },
      origin: {
        serializedName: "origin",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      actionType: {
        serializedName: "actionType",
        readOnly: true,
        type: {
          name: "String"
        }
      }
    }
  }
};

export const OperationDisplay: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "OperationDisplay",
    modelProperties: {
      provider: {
        serializedName: "provider",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      resource: {
        serializedName: "resource",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      operation: {
        serializedName: "operation",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      description: {
        serializedName: "description",
        readOnly: true,
        type: {
          name: "String"
        }
      }
    }
  }
};

export const ErrorResponse: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "ErrorResponse",
    modelProperties: {
      error: {
        serializedName: "error",
        type: {
          name: "Composite",
          className: "ErrorDetail"
        }
      }
    }
  }
};

export const ErrorDetail: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "ErrorDetail",
    modelProperties: {
      code: {
        serializedName: "code",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      message: {
        serializedName: "message",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      target: {
        serializedName: "target",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      details: {
        serializedName: "details",
        readOnly: true,
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "ErrorDetail"
            }
          }
        }
      },
      additionalInfo: {
        serializedName: "additionalInfo",
        readOnly: true,
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "ErrorAdditionalInfo"
            }
          }
        }
      }
    }
  }
};

export const ErrorAdditionalInfo: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "ErrorAdditionalInfo",
    modelProperties: {
      type: {
        serializedName: "type",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      info: {
        serializedName: "info",
        readOnly: true,
        type: {
          name: "Dictionary",
          value: { type: { name: "any" } }
        }
      }
    }
  }
};

export const CatalogListResult: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "CatalogListResult",
    modelProperties: {
      value: {
        serializedName: "value",
        required: true,
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "Catalog"
            }
          }
        }
      },
      nextLink: {
        serializedName: "nextLink",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const Resource: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "Resource",
    modelProperties: {
      id: {
        serializedName: "id",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      name: {
        serializedName: "name",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      type: {
        serializedName: "type",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      systemData: {
        serializedName: "systemData",
        type: {
          name: "Composite",
          className: "SystemData"
        }
      }
    }
  }
};

export const SystemData: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "SystemData",
    modelProperties: {
      createdBy: {
        serializedName: "createdBy",
        type: {
          name: "String"
        }
      },
      createdByType: {
        serializedName: "createdByType",
        type: {
          name: "String"
        }
      },
      createdAt: {
        serializedName: "createdAt",
        type: {
          name: "DateTime"
        }
      },
      lastModifiedBy: {
        serializedName: "lastModifiedBy",
        type: {
          name: "String"
        }
      },
      lastModifiedByType: {
        serializedName: "lastModifiedByType",
        type: {
          name: "String"
        }
      },
      lastModifiedAt: {
        serializedName: "lastModifiedAt",
        type: {
          name: "DateTime"
        }
      }
    }
  }
};

export const CatalogUpdate: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "CatalogUpdate",
    modelProperties: {
      tags: {
        serializedName: "tags",
        type: {
          name: "Dictionary",
          value: { type: { name: "String" } }
        }
      }
    }
  }
};

export const CertificateListResult: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "CertificateListResult",
    modelProperties: {
      value: {
        serializedName: "value",
        required: true,
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "Certificate"
            }
          }
        }
      },
      nextLink: {
        serializedName: "nextLink",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const CertificateProperties: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "CertificateProperties",
    modelProperties: {
      certificate: {
        serializedName: "certificate",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      status: {
        serializedName: "status",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      subject: {
        serializedName: "subject",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      thumbprint: {
        serializedName: "thumbprint",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      expiryUtc: {
        serializedName: "expiryUtc",
        readOnly: true,
        type: {
          name: "DateTime"
        }
      },
      notBeforeUtc: {
        serializedName: "notBeforeUtc",
        readOnly: true,
        type: {
          name: "DateTime"
        }
      },
      provisioningState: {
        serializedName: "provisioningState",
        readOnly: true,
        type: {
          name: "String"
        }
      }
    }
  }
};

export const CertificateChainResponse: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "CertificateChainResponse",
    modelProperties: {
      certificateChain: {
        serializedName: "certificateChain",
        readOnly: true,
        type: {
          name: "String"
        }
      }
    }
  }
};

export const ProofOfPossessionNonceRequest: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "ProofOfPossessionNonceRequest",
    modelProperties: {
      proofOfPossessionNonce: {
        serializedName: "proofOfPossessionNonce",
        required: true,
        type: {
          name: "String"
        }
      }
    }
  }
};

export const CountElementsResponse: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "CountElementsResponse",
    modelProperties: {
      value: {
        serializedName: "value",
        required: true,
        type: {
          name: "Number"
        }
      }
    }
  }
};

export const ImageListResult: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "ImageListResult",
    modelProperties: {
      value: {
        serializedName: "value",
        required: true,
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "Image"
            }
          }
        }
      },
      nextLink: {
        serializedName: "nextLink",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const DeploymentListResult: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "DeploymentListResult",
    modelProperties: {
      value: {
        serializedName: "value",
        required: true,
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "Deployment"
            }
          }
        }
      },
      nextLink: {
        serializedName: "nextLink",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const ListDeviceGroupsRequest: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "ListDeviceGroupsRequest",
    modelProperties: {
      deviceGroupName: {
        serializedName: "deviceGroupName",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const DeviceGroupListResult: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "DeviceGroupListResult",
    modelProperties: {
      value: {
        serializedName: "value",
        required: true,
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "DeviceGroup"
            }
          }
        }
      },
      nextLink: {
        serializedName: "nextLink",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const PagedDeviceInsight: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "PagedDeviceInsight",
    modelProperties: {
      value: {
        serializedName: "value",
        required: true,
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "DeviceInsight"
            }
          }
        }
      },
      nextLink: {
        serializedName: "nextLink",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const DeviceInsight: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "DeviceInsight",
    modelProperties: {
      deviceId: {
        serializedName: "deviceId",
        required: true,
        type: {
          name: "String"
        }
      },
      description: {
        serializedName: "description",
        required: true,
        type: {
          name: "String"
        }
      },
      startTimestampUtc: {
        serializedName: "startTimestampUtc",
        required: true,
        type: {
          name: "DateTime"
        }
      },
      endTimestampUtc: {
        serializedName: "endTimestampUtc",
        required: true,
        type: {
          name: "DateTime"
        }
      },
      eventCategory: {
        serializedName: "eventCategory",
        required: true,
        type: {
          name: "String"
        }
      },
      eventClass: {
        serializedName: "eventClass",
        required: true,
        type: {
          name: "String"
        }
      },
      eventType: {
        serializedName: "eventType",
        required: true,
        type: {
          name: "String"
        }
      },
      eventCount: {
        serializedName: "eventCount",
        required: true,
        type: {
          name: "Number"
        }
      }
    }
  }
};

export const DeviceListResult: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "DeviceListResult",
    modelProperties: {
      value: {
        serializedName: "value",
        required: true,
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "Device"
            }
          }
        }
      },
      nextLink: {
        serializedName: "nextLink",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const ProductListResult: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "ProductListResult",
    modelProperties: {
      value: {
        serializedName: "value",
        required: true,
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "Product"
            }
          }
        }
      },
      nextLink: {
        serializedName: "nextLink",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const ProductUpdate: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "ProductUpdate",
    modelProperties: {
      description: {
        serializedName: "properties.description",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const DeviceGroupUpdate: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "DeviceGroupUpdate",
    modelProperties: {
      description: {
        serializedName: "properties.description",
        type: {
          name: "String"
        }
      },
      osFeedType: {
        serializedName: "properties.osFeedType",
        type: {
          name: "String"
        }
      },
      updatePolicy: {
        serializedName: "properties.updatePolicy",
        type: {
          name: "String"
        }
      },
      allowCrashDumpsCollection: {
        serializedName: "properties.allowCrashDumpsCollection",
        type: {
          name: "String"
        }
      },
      regionalDataBoundary: {
        serializedName: "properties.regionalDataBoundary",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const ClaimDevicesRequest: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "ClaimDevicesRequest",
    modelProperties: {
      deviceIdentifiers: {
        serializedName: "deviceIdentifiers",
        required: true,
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "String"
            }
          }
        }
      }
    }
  }
};

export const DeviceUpdate: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "DeviceUpdate",
    modelProperties: {
      deviceGroupId: {
        serializedName: "properties.deviceGroupId",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const GenerateCapabilityImageRequest: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "GenerateCapabilityImageRequest",
    modelProperties: {
      capabilities: {
        serializedName: "capabilities",
        required: true,
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "String"
            }
          }
        }
      }
    }
  }
};

export const SignedCapabilityImageResponse: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "SignedCapabilityImageResponse",
    modelProperties: {
      image: {
        serializedName: "image",
        readOnly: true,
        type: {
          name: "String"
        }
      }
    }
  }
};

export const DevicePatchProperties: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "DevicePatchProperties",
    modelProperties: {
      deviceGroupId: {
        serializedName: "deviceGroupId",
        required: true,
        type: {
          name: "String"
        }
      }
    }
  }
};

export const ImageUploadRequestBody: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "ImageUploadRequestBody",
    modelProperties: {
      images: {
        serializedName: "images",
        required: true,
        type: {
          name: "String"
        }
      }
    }
  }
};

export const TrackedResource: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "TrackedResource",
    modelProperties: {
      ...Resource.type.modelProperties,
      tags: {
        serializedName: "tags",
        type: {
          name: "Dictionary",
          value: { type: { name: "String" } }
        }
      },
      location: {
        serializedName: "location",
        required: true,
        type: {
          name: "String"
        }
      }
    }
  }
};

export const ProxyResource: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "ProxyResource",
    modelProperties: {
      ...Resource.type.modelProperties
    }
  }
};

export const ProofOfPossessionNonceResponse: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "ProofOfPossessionNonceResponse",
    modelProperties: {
      ...CertificateProperties.type.modelProperties
    }
  }
};

export const CountDeviceResponse: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "CountDeviceResponse",
    modelProperties: {
      ...CountElementsResponse.type.modelProperties
    }
  }
};

export const Catalog: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "Catalog",
    modelProperties: {
      ...TrackedResource.type.modelProperties,
      provisioningState: {
        serializedName: "properties.provisioningState",
        readOnly: true,
        type: {
          name: "String"
        }
      }
    }
  }
};

export const Certificate: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "Certificate",
    modelProperties: {
      ...ProxyResource.type.modelProperties,
      certificate: {
        serializedName: "properties.certificate",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      status: {
        serializedName: "properties.status",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      subject: {
        serializedName: "properties.subject",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      thumbprint: {
        serializedName: "properties.thumbprint",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      expiryUtc: {
        serializedName: "properties.expiryUtc",
        readOnly: true,
        type: {
          name: "DateTime"
        }
      },
      notBeforeUtc: {
        serializedName: "properties.notBeforeUtc",
        readOnly: true,
        type: {
          name: "DateTime"
        }
      },
      provisioningState: {
        serializedName: "properties.provisioningState",
        readOnly: true,
        type: {
          name: "String"
        }
      }
    }
  }
};

export const Image: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "Image",
    modelProperties: {
      ...ProxyResource.type.modelProperties,
      image: {
        serializedName: "properties.image",
        type: {
          name: "String"
        }
      },
      imageId: {
        serializedName: "properties.imageId",
        type: {
          name: "String"
        }
      },
      imageName: {
        serializedName: "properties.imageName",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      regionalDataBoundary: {
        serializedName: "properties.regionalDataBoundary",
        type: {
          name: "String"
        }
      },
      uri: {
        serializedName: "properties.uri",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      description: {
        serializedName: "properties.description",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      componentId: {
        serializedName: "properties.componentId",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      imageType: {
        serializedName: "properties.imageType",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      provisioningState: {
        serializedName: "properties.provisioningState",
        readOnly: true,
        type: {
          name: "String"
        }
      }
    }
  }
};

export const Deployment: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "Deployment",
    modelProperties: {
      ...ProxyResource.type.modelProperties,
      deploymentId: {
        serializedName: "properties.deploymentId",
        type: {
          name: "String"
        }
      },
      deployedImages: {
        serializedName: "properties.deployedImages",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "Image"
            }
          }
        }
      },
      deploymentDateUtc: {
        serializedName: "properties.deploymentDateUtc",
        readOnly: true,
        type: {
          name: "DateTime"
        }
      },
      provisioningState: {
        serializedName: "properties.provisioningState",
        readOnly: true,
        type: {
          name: "String"
        }
      }
    }
  }
};

export const DeviceGroup: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "DeviceGroup",
    modelProperties: {
      ...ProxyResource.type.modelProperties,
      description: {
        serializedName: "properties.description",
        type: {
          name: "String"
        }
      },
      osFeedType: {
        serializedName: "properties.osFeedType",
        type: {
          name: "String"
        }
      },
      updatePolicy: {
        serializedName: "properties.updatePolicy",
        type: {
          name: "String"
        }
      },
      allowCrashDumpsCollection: {
        serializedName: "properties.allowCrashDumpsCollection",
        type: {
          name: "String"
        }
      },
      regionalDataBoundary: {
        serializedName: "properties.regionalDataBoundary",
        type: {
          name: "String"
        }
      },
      hasDeployment: {
        serializedName: "properties.hasDeployment",
        readOnly: true,
        type: {
          name: "Boolean"
        }
      },
      provisioningState: {
        serializedName: "properties.provisioningState",
        readOnly: true,
        type: {
          name: "String"
        }
      }
    }
  }
};

export const Device: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "Device",
    modelProperties: {
      ...ProxyResource.type.modelProperties,
      deviceId: {
        serializedName: "properties.deviceId",
        type: {
          name: "String"
        }
      },
      chipSku: {
        serializedName: "properties.chipSku",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      lastAvailableOsVersion: {
        serializedName: "properties.lastAvailableOsVersion",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      lastInstalledOsVersion: {
        serializedName: "properties.lastInstalledOsVersion",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      lastOsUpdateUtc: {
        serializedName: "properties.lastOsUpdateUtc",
        readOnly: true,
        type: {
          name: "DateTime"
        }
      },
      lastUpdateRequestUtc: {
        serializedName: "properties.lastUpdateRequestUtc",
        readOnly: true,
        type: {
          name: "DateTime"
        }
      },
      provisioningState: {
        serializedName: "properties.provisioningState",
        readOnly: true,
        type: {
          name: "String"
        }
      }
    }
  }
};

export const Product: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "Product",
    modelProperties: {
      ...ProxyResource.type.modelProperties,
      description: {
        serializedName: "properties.description",
        type: {
          name: "String"
        }
      },
      provisioningState: {
        serializedName: "properties.provisioningState",
        readOnly: true,
        type: {
          name: "String"
        }
      }
    }
  }
};

export const CatalogsCreateOrUpdateHeaders: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "CatalogsCreateOrUpdateHeaders",
    modelProperties: {
      retryAfter: {
        serializedName: "retry-after",
        type: {
          name: "Number"
        }
      }
    }
  }
};

export const CatalogsDeleteHeaders: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "CatalogsDeleteHeaders",
    modelProperties: {
      retryAfter: {
        serializedName: "retry-after",
        type: {
          name: "Number"
        }
      },
      location: {
        serializedName: "location",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const ImagesCreateOrUpdateHeaders: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "ImagesCreateOrUpdateHeaders",
    modelProperties: {
      retryAfter: {
        serializedName: "retry-after",
        type: {
          name: "Number"
        }
      }
    }
  }
};

export const ImagesDeleteHeaders: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "ImagesDeleteHeaders",
    modelProperties: {
      retryAfter: {
        serializedName: "retry-after",
        type: {
          name: "Number"
        }
      },
      location: {
        serializedName: "location",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const ProductsCreateOrUpdateHeaders: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "ProductsCreateOrUpdateHeaders",
    modelProperties: {
      retryAfter: {
        serializedName: "retry-after",
        type: {
          name: "Number"
        }
      }
    }
  }
};

export const ProductsUpdateHeaders: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "ProductsUpdateHeaders",
    modelProperties: {
      retryAfter: {
        serializedName: "retry-after",
        type: {
          name: "Number"
        }
      },
      location: {
        serializedName: "location",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const ProductsDeleteHeaders: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "ProductsDeleteHeaders",
    modelProperties: {
      retryAfter: {
        serializedName: "retry-after",
        type: {
          name: "Number"
        }
      },
      location: {
        serializedName: "location",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const DeviceGroupsCreateOrUpdateHeaders: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "DeviceGroupsCreateOrUpdateHeaders",
    modelProperties: {
      retryAfter: {
        serializedName: "retry-after",
        type: {
          name: "Number"
        }
      }
    }
  }
};

export const DeviceGroupsUpdateHeaders: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "DeviceGroupsUpdateHeaders",
    modelProperties: {
      retryAfter: {
        serializedName: "retry-after",
        type: {
          name: "Number"
        }
      },
      location: {
        serializedName: "location",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const DeviceGroupsDeleteHeaders: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "DeviceGroupsDeleteHeaders",
    modelProperties: {
      retryAfter: {
        serializedName: "retry-after",
        type: {
          name: "Number"
        }
      },
      location: {
        serializedName: "location",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const DeviceGroupsClaimDevicesHeaders: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "DeviceGroupsClaimDevicesHeaders",
    modelProperties: {
      retryAfter: {
        serializedName: "retry-after",
        type: {
          name: "Number"
        }
      }
    }
  }
};

export const DeploymentsCreateOrUpdateHeaders: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "DeploymentsCreateOrUpdateHeaders",
    modelProperties: {
      retryAfter: {
        serializedName: "retry-after",
        type: {
          name: "Number"
        }
      }
    }
  }
};

export const DeploymentsDeleteHeaders: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "DeploymentsDeleteHeaders",
    modelProperties: {
      retryAfter: {
        serializedName: "retry-after",
        type: {
          name: "Number"
        }
      },
      location: {
        serializedName: "location",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const DevicesCreateOrUpdateHeaders: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "DevicesCreateOrUpdateHeaders",
    modelProperties: {
      retryAfter: {
        serializedName: "retry-after",
        type: {
          name: "Number"
        }
      }
    }
  }
};

export const DevicesUpdateHeaders: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "DevicesUpdateHeaders",
    modelProperties: {
      retryAfter: {
        serializedName: "retry-after",
        type: {
          name: "Number"
        }
      }
    }
  }
};

export const DevicesDeleteHeaders: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "DevicesDeleteHeaders",
    modelProperties: {
      retryAfter: {
        serializedName: "retry-after",
        type: {
          name: "Number"
        }
      },
      location: {
        serializedName: "location",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const DevicesGenerateCapabilityImageHeaders: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "DevicesGenerateCapabilityImageHeaders",
    modelProperties: {
      retryAfter: {
        serializedName: "retry-after",
        type: {
          name: "Number"
        }
      }
    }
  }
};
