/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */

import { PagedAsyncIterableIterator, PageSettings } from "@azure/core-paging";
import { setContinuationToken } from "../pagingHelper";
import { Catalogs } from "../operationsInterfaces";
import * as coreClient from "@azure/core-client";
import * as Mappers from "../models/mappers";
import * as Parameters from "../models/parameters";
import { AzureSphereManagementClient } from "../azureSphereManagementClient";
import {
  SimplePollerLike,
  OperationState,
  createHttpPoller
} from "@azure/core-lro";
import { createLroSpec } from "../lroImpl";
import {
  Catalog,
  CatalogsListBySubscriptionNextOptionalParams,
  CatalogsListBySubscriptionOptionalParams,
  CatalogsListBySubscriptionResponse,
  CatalogsListByResourceGroupNextOptionalParams,
  CatalogsListByResourceGroupOptionalParams,
  CatalogsListByResourceGroupResponse,
  Deployment,
  CatalogsListDeploymentsNextOptionalParams,
  CatalogsListDeploymentsOptionalParams,
  CatalogsListDeploymentsResponse,
  DeviceGroup,
  ListDeviceGroupsRequest,
  CatalogsListDeviceGroupsNextOptionalParams,
  CatalogsListDeviceGroupsOptionalParams,
  CatalogsListDeviceGroupsResponse,
  DeviceInsight,
  CatalogsListDeviceInsightsNextOptionalParams,
  CatalogsListDeviceInsightsOptionalParams,
  CatalogsListDeviceInsightsResponse,
  Device,
  CatalogsListDevicesNextOptionalParams,
  CatalogsListDevicesOptionalParams,
  CatalogsListDevicesResponse,
  CatalogsGetOptionalParams,
  CatalogsGetResponse,
  CatalogsCreateOrUpdateOptionalParams,
  CatalogsCreateOrUpdateResponse,
  CatalogUpdate,
  CatalogsUpdateOptionalParams,
  CatalogsUpdateResponse,
  CatalogsDeleteOptionalParams,
  CatalogsCountDevicesOptionalParams,
  CatalogsCountDevicesResponse,
  CatalogsListBySubscriptionNextResponse,
  CatalogsListByResourceGroupNextResponse,
  CatalogsListDeploymentsNextResponse,
  CatalogsListDeviceGroupsNextResponse,
  CatalogsListDeviceInsightsNextResponse,
  CatalogsListDevicesNextResponse
} from "../models";

/// <reference lib="esnext.asynciterable" />
/** Class containing Catalogs operations. */
export class CatalogsImpl implements Catalogs {
  private readonly client: AzureSphereManagementClient;

  /**
   * Initialize a new instance of the class Catalogs class.
   * @param client Reference to the service client
   */
  constructor(client: AzureSphereManagementClient) {
    this.client = client;
  }

  /**
   * List Catalog resources by subscription ID
   * @param options The options parameters.
   */
  public listBySubscription(
    options?: CatalogsListBySubscriptionOptionalParams
  ): PagedAsyncIterableIterator<Catalog> {
    const iter = this.listBySubscriptionPagingAll(options);
    return {
      next() {
        return iter.next();
      },
      [Symbol.asyncIterator]() {
        return this;
      },
      byPage: (settings?: PageSettings) => {
        if (settings?.maxPageSize) {
          throw new Error("maxPageSize is not supported by this operation.");
        }
        return this.listBySubscriptionPagingPage(options, settings);
      }
    };
  }

  private async *listBySubscriptionPagingPage(
    options?: CatalogsListBySubscriptionOptionalParams,
    settings?: PageSettings
  ): AsyncIterableIterator<Catalog[]> {
    let result: CatalogsListBySubscriptionResponse;
    let continuationToken = settings?.continuationToken;
    if (!continuationToken) {
      result = await this._listBySubscription(options);
      let page = result.value || [];
      continuationToken = result.nextLink;
      setContinuationToken(page, continuationToken);
      yield page;
    }
    while (continuationToken) {
      result = await this._listBySubscriptionNext(continuationToken, options);
      continuationToken = result.nextLink;
      let page = result.value || [];
      setContinuationToken(page, continuationToken);
      yield page;
    }
  }

  private async *listBySubscriptionPagingAll(
    options?: CatalogsListBySubscriptionOptionalParams
  ): AsyncIterableIterator<Catalog> {
    for await (const page of this.listBySubscriptionPagingPage(options)) {
      yield* page;
    }
  }

  /**
   * List Catalog resources by resource group
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param options The options parameters.
   */
  public listByResourceGroup(
    resourceGroupName: string,
    options?: CatalogsListByResourceGroupOptionalParams
  ): PagedAsyncIterableIterator<Catalog> {
    const iter = this.listByResourceGroupPagingAll(resourceGroupName, options);
    return {
      next() {
        return iter.next();
      },
      [Symbol.asyncIterator]() {
        return this;
      },
      byPage: (settings?: PageSettings) => {
        if (settings?.maxPageSize) {
          throw new Error("maxPageSize is not supported by this operation.");
        }
        return this.listByResourceGroupPagingPage(
          resourceGroupName,
          options,
          settings
        );
      }
    };
  }

  private async *listByResourceGroupPagingPage(
    resourceGroupName: string,
    options?: CatalogsListByResourceGroupOptionalParams,
    settings?: PageSettings
  ): AsyncIterableIterator<Catalog[]> {
    let result: CatalogsListByResourceGroupResponse;
    let continuationToken = settings?.continuationToken;
    if (!continuationToken) {
      result = await this._listByResourceGroup(resourceGroupName, options);
      let page = result.value || [];
      continuationToken = result.nextLink;
      setContinuationToken(page, continuationToken);
      yield page;
    }
    while (continuationToken) {
      result = await this._listByResourceGroupNext(
        resourceGroupName,
        continuationToken,
        options
      );
      continuationToken = result.nextLink;
      let page = result.value || [];
      setContinuationToken(page, continuationToken);
      yield page;
    }
  }

  private async *listByResourceGroupPagingAll(
    resourceGroupName: string,
    options?: CatalogsListByResourceGroupOptionalParams
  ): AsyncIterableIterator<Catalog> {
    for await (const page of this.listByResourceGroupPagingPage(
      resourceGroupName,
      options
    )) {
      yield* page;
    }
  }

  /**
   * Lists deployments for catalog.
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param catalogName Name of catalog
   * @param options The options parameters.
   */
  public listDeployments(
    resourceGroupName: string,
    catalogName: string,
    options?: CatalogsListDeploymentsOptionalParams
  ): PagedAsyncIterableIterator<Deployment> {
    const iter = this.listDeploymentsPagingAll(
      resourceGroupName,
      catalogName,
      options
    );
    return {
      next() {
        return iter.next();
      },
      [Symbol.asyncIterator]() {
        return this;
      },
      byPage: (settings?: PageSettings) => {
        if (settings?.maxPageSize) {
          throw new Error("maxPageSize is not supported by this operation.");
        }
        return this.listDeploymentsPagingPage(
          resourceGroupName,
          catalogName,
          options,
          settings
        );
      }
    };
  }

  private async *listDeploymentsPagingPage(
    resourceGroupName: string,
    catalogName: string,
    options?: CatalogsListDeploymentsOptionalParams,
    settings?: PageSettings
  ): AsyncIterableIterator<Deployment[]> {
    let result: CatalogsListDeploymentsResponse;
    let continuationToken = settings?.continuationToken;
    if (!continuationToken) {
      result = await this._listDeployments(
        resourceGroupName,
        catalogName,
        options
      );
      let page = result.value || [];
      continuationToken = result.nextLink;
      setContinuationToken(page, continuationToken);
      yield page;
    }
    while (continuationToken) {
      result = await this._listDeploymentsNext(
        resourceGroupName,
        catalogName,
        continuationToken,
        options
      );
      continuationToken = result.nextLink;
      let page = result.value || [];
      setContinuationToken(page, continuationToken);
      yield page;
    }
  }

  private async *listDeploymentsPagingAll(
    resourceGroupName: string,
    catalogName: string,
    options?: CatalogsListDeploymentsOptionalParams
  ): AsyncIterableIterator<Deployment> {
    for await (const page of this.listDeploymentsPagingPage(
      resourceGroupName,
      catalogName,
      options
    )) {
      yield* page;
    }
  }

  /**
   * List the device groups for the catalog.
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param catalogName Name of catalog
   * @param listDeviceGroupsRequest List device groups for catalog.
   * @param options The options parameters.
   */
  public listDeviceGroups(
    resourceGroupName: string,
    catalogName: string,
    listDeviceGroupsRequest: ListDeviceGroupsRequest,
    options?: CatalogsListDeviceGroupsOptionalParams
  ): PagedAsyncIterableIterator<DeviceGroup> {
    const iter = this.listDeviceGroupsPagingAll(
      resourceGroupName,
      catalogName,
      listDeviceGroupsRequest,
      options
    );
    return {
      next() {
        return iter.next();
      },
      [Symbol.asyncIterator]() {
        return this;
      },
      byPage: (settings?: PageSettings) => {
        if (settings?.maxPageSize) {
          throw new Error("maxPageSize is not supported by this operation.");
        }
        return this.listDeviceGroupsPagingPage(
          resourceGroupName,
          catalogName,
          listDeviceGroupsRequest,
          options,
          settings
        );
      }
    };
  }

  private async *listDeviceGroupsPagingPage(
    resourceGroupName: string,
    catalogName: string,
    listDeviceGroupsRequest: ListDeviceGroupsRequest,
    options?: CatalogsListDeviceGroupsOptionalParams,
    settings?: PageSettings
  ): AsyncIterableIterator<DeviceGroup[]> {
    let result: CatalogsListDeviceGroupsResponse;
    let continuationToken = settings?.continuationToken;
    if (!continuationToken) {
      result = await this._listDeviceGroups(
        resourceGroupName,
        catalogName,
        listDeviceGroupsRequest,
        options
      );
      let page = result.value || [];
      continuationToken = result.nextLink;
      setContinuationToken(page, continuationToken);
      yield page;
    }
    while (continuationToken) {
      result = await this._listDeviceGroupsNext(
        resourceGroupName,
        catalogName,
        listDeviceGroupsRequest,
        continuationToken,
        options
      );
      continuationToken = result.nextLink;
      let page = result.value || [];
      setContinuationToken(page, continuationToken);
      yield page;
    }
  }

  private async *listDeviceGroupsPagingAll(
    resourceGroupName: string,
    catalogName: string,
    listDeviceGroupsRequest: ListDeviceGroupsRequest,
    options?: CatalogsListDeviceGroupsOptionalParams
  ): AsyncIterableIterator<DeviceGroup> {
    for await (const page of this.listDeviceGroupsPagingPage(
      resourceGroupName,
      catalogName,
      listDeviceGroupsRequest,
      options
    )) {
      yield* page;
    }
  }

  /**
   * Lists device insights for catalog.
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param catalogName Name of catalog
   * @param options The options parameters.
   */
  public listDeviceInsights(
    resourceGroupName: string,
    catalogName: string,
    options?: CatalogsListDeviceInsightsOptionalParams
  ): PagedAsyncIterableIterator<DeviceInsight> {
    const iter = this.listDeviceInsightsPagingAll(
      resourceGroupName,
      catalogName,
      options
    );
    return {
      next() {
        return iter.next();
      },
      [Symbol.asyncIterator]() {
        return this;
      },
      byPage: (settings?: PageSettings) => {
        if (settings?.maxPageSize) {
          throw new Error("maxPageSize is not supported by this operation.");
        }
        return this.listDeviceInsightsPagingPage(
          resourceGroupName,
          catalogName,
          options,
          settings
        );
      }
    };
  }

  private async *listDeviceInsightsPagingPage(
    resourceGroupName: string,
    catalogName: string,
    options?: CatalogsListDeviceInsightsOptionalParams,
    settings?: PageSettings
  ): AsyncIterableIterator<DeviceInsight[]> {
    let result: CatalogsListDeviceInsightsResponse;
    let continuationToken = settings?.continuationToken;
    if (!continuationToken) {
      result = await this._listDeviceInsights(
        resourceGroupName,
        catalogName,
        options
      );
      let page = result.value || [];
      continuationToken = result.nextLink;
      setContinuationToken(page, continuationToken);
      yield page;
    }
    while (continuationToken) {
      result = await this._listDeviceInsightsNext(
        resourceGroupName,
        catalogName,
        continuationToken,
        options
      );
      continuationToken = result.nextLink;
      let page = result.value || [];
      setContinuationToken(page, continuationToken);
      yield page;
    }
  }

  private async *listDeviceInsightsPagingAll(
    resourceGroupName: string,
    catalogName: string,
    options?: CatalogsListDeviceInsightsOptionalParams
  ): AsyncIterableIterator<DeviceInsight> {
    for await (const page of this.listDeviceInsightsPagingPage(
      resourceGroupName,
      catalogName,
      options
    )) {
      yield* page;
    }
  }

  /**
   * Lists devices for catalog.
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param catalogName Name of catalog
   * @param options The options parameters.
   */
  public listDevices(
    resourceGroupName: string,
    catalogName: string,
    options?: CatalogsListDevicesOptionalParams
  ): PagedAsyncIterableIterator<Device> {
    const iter = this.listDevicesPagingAll(
      resourceGroupName,
      catalogName,
      options
    );
    return {
      next() {
        return iter.next();
      },
      [Symbol.asyncIterator]() {
        return this;
      },
      byPage: (settings?: PageSettings) => {
        if (settings?.maxPageSize) {
          throw new Error("maxPageSize is not supported by this operation.");
        }
        return this.listDevicesPagingPage(
          resourceGroupName,
          catalogName,
          options,
          settings
        );
      }
    };
  }

  private async *listDevicesPagingPage(
    resourceGroupName: string,
    catalogName: string,
    options?: CatalogsListDevicesOptionalParams,
    settings?: PageSettings
  ): AsyncIterableIterator<Device[]> {
    let result: CatalogsListDevicesResponse;
    let continuationToken = settings?.continuationToken;
    if (!continuationToken) {
      result = await this._listDevices(resourceGroupName, catalogName, options);
      let page = result.value || [];
      continuationToken = result.nextLink;
      setContinuationToken(page, continuationToken);
      yield page;
    }
    while (continuationToken) {
      result = await this._listDevicesNext(
        resourceGroupName,
        catalogName,
        continuationToken,
        options
      );
      continuationToken = result.nextLink;
      let page = result.value || [];
      setContinuationToken(page, continuationToken);
      yield page;
    }
  }

  private async *listDevicesPagingAll(
    resourceGroupName: string,
    catalogName: string,
    options?: CatalogsListDevicesOptionalParams
  ): AsyncIterableIterator<Device> {
    for await (const page of this.listDevicesPagingPage(
      resourceGroupName,
      catalogName,
      options
    )) {
      yield* page;
    }
  }

  /**
   * List Catalog resources by subscription ID
   * @param options The options parameters.
   */
  private _listBySubscription(
    options?: CatalogsListBySubscriptionOptionalParams
  ): Promise<CatalogsListBySubscriptionResponse> {
    return this.client.sendOperationRequest(
      { options },
      listBySubscriptionOperationSpec
    );
  }

  /**
   * List Catalog resources by resource group
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param options The options parameters.
   */
  private _listByResourceGroup(
    resourceGroupName: string,
    options?: CatalogsListByResourceGroupOptionalParams
  ): Promise<CatalogsListByResourceGroupResponse> {
    return this.client.sendOperationRequest(
      { resourceGroupName, options },
      listByResourceGroupOperationSpec
    );
  }

  /**
   * Get a Catalog
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param catalogName Name of catalog
   * @param options The options parameters.
   */
  get(
    resourceGroupName: string,
    catalogName: string,
    options?: CatalogsGetOptionalParams
  ): Promise<CatalogsGetResponse> {
    return this.client.sendOperationRequest(
      { resourceGroupName, catalogName, options },
      getOperationSpec
    );
  }

  /**
   * Create a Catalog
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param catalogName Name of catalog
   * @param resource Resource create parameters.
   * @param options The options parameters.
   */
  async beginCreateOrUpdate(
    resourceGroupName: string,
    catalogName: string,
    resource: Catalog,
    options?: CatalogsCreateOrUpdateOptionalParams
  ): Promise<
    SimplePollerLike<
      OperationState<CatalogsCreateOrUpdateResponse>,
      CatalogsCreateOrUpdateResponse
    >
  > {
    const directSendOperation = async (
      args: coreClient.OperationArguments,
      spec: coreClient.OperationSpec
    ): Promise<CatalogsCreateOrUpdateResponse> => {
      return this.client.sendOperationRequest(args, spec);
    };
    const sendOperationFn = async (
      args: coreClient.OperationArguments,
      spec: coreClient.OperationSpec
    ) => {
      let currentRawResponse:
        | coreClient.FullOperationResponse
        | undefined = undefined;
      const providedCallback = args.options?.onResponse;
      const callback: coreClient.RawResponseCallback = (
        rawResponse: coreClient.FullOperationResponse,
        flatResponse: unknown
      ) => {
        currentRawResponse = rawResponse;
        providedCallback?.(rawResponse, flatResponse);
      };
      const updatedArgs = {
        ...args,
        options: {
          ...args.options,
          onResponse: callback
        }
      };
      const flatResponse = await directSendOperation(updatedArgs, spec);
      return {
        flatResponse,
        rawResponse: {
          statusCode: currentRawResponse!.status,
          body: currentRawResponse!.parsedBody,
          headers: currentRawResponse!.headers.toJSON()
        }
      };
    };

    const lro = createLroSpec({
      sendOperationFn,
      args: { resourceGroupName, catalogName, resource, options },
      spec: createOrUpdateOperationSpec
    });
    const poller = await createHttpPoller<
      CatalogsCreateOrUpdateResponse,
      OperationState<CatalogsCreateOrUpdateResponse>
    >(lro, {
      restoreFrom: options?.resumeFrom,
      intervalInMs: options?.updateIntervalInMs,
      resourceLocationConfig: "azure-async-operation"
    });
    await poller.poll();
    return poller;
  }

  /**
   * Create a Catalog
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param catalogName Name of catalog
   * @param resource Resource create parameters.
   * @param options The options parameters.
   */
  async beginCreateOrUpdateAndWait(
    resourceGroupName: string,
    catalogName: string,
    resource: Catalog,
    options?: CatalogsCreateOrUpdateOptionalParams
  ): Promise<CatalogsCreateOrUpdateResponse> {
    const poller = await this.beginCreateOrUpdate(
      resourceGroupName,
      catalogName,
      resource,
      options
    );
    return poller.pollUntilDone();
  }

  /**
   * Update a Catalog
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param catalogName Name of catalog
   * @param properties The resource properties to be updated.
   * @param options The options parameters.
   */
  update(
    resourceGroupName: string,
    catalogName: string,
    properties: CatalogUpdate,
    options?: CatalogsUpdateOptionalParams
  ): Promise<CatalogsUpdateResponse> {
    return this.client.sendOperationRequest(
      { resourceGroupName, catalogName, properties, options },
      updateOperationSpec
    );
  }

  /**
   * Delete a Catalog
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param catalogName Name of catalog
   * @param options The options parameters.
   */
  async beginDelete(
    resourceGroupName: string,
    catalogName: string,
    options?: CatalogsDeleteOptionalParams
  ): Promise<SimplePollerLike<OperationState<void>, void>> {
    const directSendOperation = async (
      args: coreClient.OperationArguments,
      spec: coreClient.OperationSpec
    ): Promise<void> => {
      return this.client.sendOperationRequest(args, spec);
    };
    const sendOperationFn = async (
      args: coreClient.OperationArguments,
      spec: coreClient.OperationSpec
    ) => {
      let currentRawResponse:
        | coreClient.FullOperationResponse
        | undefined = undefined;
      const providedCallback = args.options?.onResponse;
      const callback: coreClient.RawResponseCallback = (
        rawResponse: coreClient.FullOperationResponse,
        flatResponse: unknown
      ) => {
        currentRawResponse = rawResponse;
        providedCallback?.(rawResponse, flatResponse);
      };
      const updatedArgs = {
        ...args,
        options: {
          ...args.options,
          onResponse: callback
        }
      };
      const flatResponse = await directSendOperation(updatedArgs, spec);
      return {
        flatResponse,
        rawResponse: {
          statusCode: currentRawResponse!.status,
          body: currentRawResponse!.parsedBody,
          headers: currentRawResponse!.headers.toJSON()
        }
      };
    };

    const lro = createLroSpec({
      sendOperationFn,
      args: { resourceGroupName, catalogName, options },
      spec: deleteOperationSpec
    });
    const poller = await createHttpPoller<void, OperationState<void>>(lro, {
      restoreFrom: options?.resumeFrom,
      intervalInMs: options?.updateIntervalInMs,
      resourceLocationConfig: "location"
    });
    await poller.poll();
    return poller;
  }

  /**
   * Delete a Catalog
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param catalogName Name of catalog
   * @param options The options parameters.
   */
  async beginDeleteAndWait(
    resourceGroupName: string,
    catalogName: string,
    options?: CatalogsDeleteOptionalParams
  ): Promise<void> {
    const poller = await this.beginDelete(
      resourceGroupName,
      catalogName,
      options
    );
    return poller.pollUntilDone();
  }

  /**
   * Counts devices in catalog.
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param catalogName Name of catalog
   * @param options The options parameters.
   */
  countDevices(
    resourceGroupName: string,
    catalogName: string,
    options?: CatalogsCountDevicesOptionalParams
  ): Promise<CatalogsCountDevicesResponse> {
    return this.client.sendOperationRequest(
      { resourceGroupName, catalogName, options },
      countDevicesOperationSpec
    );
  }

  /**
   * Lists deployments for catalog.
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param catalogName Name of catalog
   * @param options The options parameters.
   */
  private _listDeployments(
    resourceGroupName: string,
    catalogName: string,
    options?: CatalogsListDeploymentsOptionalParams
  ): Promise<CatalogsListDeploymentsResponse> {
    return this.client.sendOperationRequest(
      { resourceGroupName, catalogName, options },
      listDeploymentsOperationSpec
    );
  }

  /**
   * List the device groups for the catalog.
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param catalogName Name of catalog
   * @param listDeviceGroupsRequest List device groups for catalog.
   * @param options The options parameters.
   */
  private _listDeviceGroups(
    resourceGroupName: string,
    catalogName: string,
    listDeviceGroupsRequest: ListDeviceGroupsRequest,
    options?: CatalogsListDeviceGroupsOptionalParams
  ): Promise<CatalogsListDeviceGroupsResponse> {
    return this.client.sendOperationRequest(
      { resourceGroupName, catalogName, listDeviceGroupsRequest, options },
      listDeviceGroupsOperationSpec
    );
  }

  /**
   * Lists device insights for catalog.
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param catalogName Name of catalog
   * @param options The options parameters.
   */
  private _listDeviceInsights(
    resourceGroupName: string,
    catalogName: string,
    options?: CatalogsListDeviceInsightsOptionalParams
  ): Promise<CatalogsListDeviceInsightsResponse> {
    return this.client.sendOperationRequest(
      { resourceGroupName, catalogName, options },
      listDeviceInsightsOperationSpec
    );
  }

  /**
   * Lists devices for catalog.
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param catalogName Name of catalog
   * @param options The options parameters.
   */
  private _listDevices(
    resourceGroupName: string,
    catalogName: string,
    options?: CatalogsListDevicesOptionalParams
  ): Promise<CatalogsListDevicesResponse> {
    return this.client.sendOperationRequest(
      { resourceGroupName, catalogName, options },
      listDevicesOperationSpec
    );
  }

  /**
   * ListBySubscriptionNext
   * @param nextLink The nextLink from the previous successful call to the ListBySubscription method.
   * @param options The options parameters.
   */
  private _listBySubscriptionNext(
    nextLink: string,
    options?: CatalogsListBySubscriptionNextOptionalParams
  ): Promise<CatalogsListBySubscriptionNextResponse> {
    return this.client.sendOperationRequest(
      { nextLink, options },
      listBySubscriptionNextOperationSpec
    );
  }

  /**
   * ListByResourceGroupNext
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param nextLink The nextLink from the previous successful call to the ListByResourceGroup method.
   * @param options The options parameters.
   */
  private _listByResourceGroupNext(
    resourceGroupName: string,
    nextLink: string,
    options?: CatalogsListByResourceGroupNextOptionalParams
  ): Promise<CatalogsListByResourceGroupNextResponse> {
    return this.client.sendOperationRequest(
      { resourceGroupName, nextLink, options },
      listByResourceGroupNextOperationSpec
    );
  }

  /**
   * ListDeploymentsNext
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param catalogName Name of catalog
   * @param nextLink The nextLink from the previous successful call to the ListDeployments method.
   * @param options The options parameters.
   */
  private _listDeploymentsNext(
    resourceGroupName: string,
    catalogName: string,
    nextLink: string,
    options?: CatalogsListDeploymentsNextOptionalParams
  ): Promise<CatalogsListDeploymentsNextResponse> {
    return this.client.sendOperationRequest(
      { resourceGroupName, catalogName, nextLink, options },
      listDeploymentsNextOperationSpec
    );
  }

  /**
   * ListDeviceGroupsNext
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param catalogName Name of catalog
   * @param listDeviceGroupsRequest List device groups for catalog.
   * @param nextLink The nextLink from the previous successful call to the ListDeviceGroups method.
   * @param options The options parameters.
   */
  private _listDeviceGroupsNext(
    resourceGroupName: string,
    catalogName: string,
    listDeviceGroupsRequest: ListDeviceGroupsRequest,
    nextLink: string,
    options?: CatalogsListDeviceGroupsNextOptionalParams
  ): Promise<CatalogsListDeviceGroupsNextResponse> {
    return this.client.sendOperationRequest(
      {
        resourceGroupName,
        catalogName,
        listDeviceGroupsRequest,
        nextLink,
        options
      },
      listDeviceGroupsNextOperationSpec
    );
  }

  /**
   * ListDeviceInsightsNext
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param catalogName Name of catalog
   * @param nextLink The nextLink from the previous successful call to the ListDeviceInsights method.
   * @param options The options parameters.
   */
  private _listDeviceInsightsNext(
    resourceGroupName: string,
    catalogName: string,
    nextLink: string,
    options?: CatalogsListDeviceInsightsNextOptionalParams
  ): Promise<CatalogsListDeviceInsightsNextResponse> {
    return this.client.sendOperationRequest(
      { resourceGroupName, catalogName, nextLink, options },
      listDeviceInsightsNextOperationSpec
    );
  }

  /**
   * ListDevicesNext
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param catalogName Name of catalog
   * @param nextLink The nextLink from the previous successful call to the ListDevices method.
   * @param options The options parameters.
   */
  private _listDevicesNext(
    resourceGroupName: string,
    catalogName: string,
    nextLink: string,
    options?: CatalogsListDevicesNextOptionalParams
  ): Promise<CatalogsListDevicesNextResponse> {
    return this.client.sendOperationRequest(
      { resourceGroupName, catalogName, nextLink, options },
      listDevicesNextOperationSpec
    );
  }
}
// Operation Specifications
const serializer = coreClient.createSerializer(Mappers, /* isXml */ false);

const listBySubscriptionOperationSpec: coreClient.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/providers/Microsoft.AzureSphere/catalogs",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.CatalogListResult
    },
    default: {
      bodyMapper: Mappers.ErrorResponse
    }
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [Parameters.$host, Parameters.subscriptionId],
  headerParameters: [Parameters.accept],
  serializer
};
const listByResourceGroupOperationSpec: coreClient.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.AzureSphere/catalogs",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.CatalogListResult
    },
    default: {
      bodyMapper: Mappers.ErrorResponse
    }
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName
  ],
  headerParameters: [Parameters.accept],
  serializer
};
const getOperationSpec: coreClient.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.AzureSphere/catalogs/{catalogName}",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.Catalog
    },
    default: {
      bodyMapper: Mappers.ErrorResponse
    }
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.catalogName
  ],
  headerParameters: [Parameters.accept],
  serializer
};
const createOrUpdateOperationSpec: coreClient.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.AzureSphere/catalogs/{catalogName}",
  httpMethod: "PUT",
  responses: {
    200: {
      bodyMapper: Mappers.Catalog
    },
    201: {
      bodyMapper: Mappers.Catalog
    },
    202: {
      bodyMapper: Mappers.Catalog
    },
    204: {
      bodyMapper: Mappers.Catalog
    },
    default: {
      bodyMapper: Mappers.ErrorResponse
    }
  },
  requestBody: Parameters.resource,
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.catalogName
  ],
  headerParameters: [Parameters.accept, Parameters.contentType],
  mediaType: "json",
  serializer
};
const updateOperationSpec: coreClient.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.AzureSphere/catalogs/{catalogName}",
  httpMethod: "PATCH",
  responses: {
    200: {
      bodyMapper: Mappers.Catalog
    },
    default: {
      bodyMapper: Mappers.ErrorResponse
    }
  },
  requestBody: Parameters.properties,
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.catalogName
  ],
  headerParameters: [Parameters.accept, Parameters.contentType],
  mediaType: "json",
  serializer
};
const deleteOperationSpec: coreClient.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.AzureSphere/catalogs/{catalogName}",
  httpMethod: "DELETE",
  responses: {
    200: {},
    201: {},
    202: {},
    204: {},
    default: {
      bodyMapper: Mappers.ErrorResponse
    }
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.catalogName
  ],
  headerParameters: [Parameters.accept],
  serializer
};
const countDevicesOperationSpec: coreClient.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.AzureSphere/catalogs/{catalogName}/countDevices",
  httpMethod: "POST",
  responses: {
    200: {
      bodyMapper: Mappers.CountDeviceResponse
    },
    default: {
      bodyMapper: Mappers.ErrorResponse
    }
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.catalogName
  ],
  headerParameters: [Parameters.accept],
  serializer
};
const listDeploymentsOperationSpec: coreClient.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.AzureSphere/catalogs/{catalogName}/listDeployments",
  httpMethod: "POST",
  responses: {
    200: {
      bodyMapper: Mappers.DeploymentListResult
    },
    default: {
      bodyMapper: Mappers.ErrorResponse
    }
  },
  queryParameters: [
    Parameters.apiVersion,
    Parameters.filter,
    Parameters.top,
    Parameters.skip,
    Parameters.maxpagesize
  ],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.catalogName
  ],
  headerParameters: [Parameters.accept],
  serializer
};
const listDeviceGroupsOperationSpec: coreClient.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.AzureSphere/catalogs/{catalogName}/listDeviceGroups",
  httpMethod: "POST",
  responses: {
    200: {
      bodyMapper: Mappers.DeviceGroupListResult
    },
    default: {
      bodyMapper: Mappers.ErrorResponse
    }
  },
  requestBody: Parameters.listDeviceGroupsRequest,
  queryParameters: [
    Parameters.apiVersion,
    Parameters.filter,
    Parameters.top,
    Parameters.skip,
    Parameters.maxpagesize
  ],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.catalogName
  ],
  headerParameters: [Parameters.accept, Parameters.contentType],
  mediaType: "json",
  serializer
};
const listDeviceInsightsOperationSpec: coreClient.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.AzureSphere/catalogs/{catalogName}/listDeviceInsights",
  httpMethod: "POST",
  responses: {
    200: {
      bodyMapper: Mappers.PagedDeviceInsight
    },
    default: {
      bodyMapper: Mappers.ErrorResponse
    }
  },
  queryParameters: [
    Parameters.apiVersion,
    Parameters.filter,
    Parameters.top,
    Parameters.skip,
    Parameters.maxpagesize
  ],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.catalogName
  ],
  headerParameters: [Parameters.accept],
  serializer
};
const listDevicesOperationSpec: coreClient.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.AzureSphere/catalogs/{catalogName}/listDevices",
  httpMethod: "POST",
  responses: {
    200: {
      bodyMapper: Mappers.DeviceListResult
    },
    default: {
      bodyMapper: Mappers.ErrorResponse
    }
  },
  queryParameters: [
    Parameters.apiVersion,
    Parameters.filter,
    Parameters.top,
    Parameters.skip,
    Parameters.maxpagesize
  ],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.catalogName
  ],
  headerParameters: [Parameters.accept],
  serializer
};
const listBySubscriptionNextOperationSpec: coreClient.OperationSpec = {
  path: "{nextLink}",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.CatalogListResult
    },
    default: {
      bodyMapper: Mappers.ErrorResponse
    }
  },
  urlParameters: [
    Parameters.$host,
    Parameters.nextLink,
    Parameters.subscriptionId
  ],
  headerParameters: [Parameters.accept],
  serializer
};
const listByResourceGroupNextOperationSpec: coreClient.OperationSpec = {
  path: "{nextLink}",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.CatalogListResult
    },
    default: {
      bodyMapper: Mappers.ErrorResponse
    }
  },
  urlParameters: [
    Parameters.$host,
    Parameters.nextLink,
    Parameters.subscriptionId,
    Parameters.resourceGroupName
  ],
  headerParameters: [Parameters.accept],
  serializer
};
const listDeploymentsNextOperationSpec: coreClient.OperationSpec = {
  path: "{nextLink}",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.DeploymentListResult
    },
    default: {
      bodyMapper: Mappers.ErrorResponse
    }
  },
  urlParameters: [
    Parameters.$host,
    Parameters.nextLink,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.catalogName
  ],
  headerParameters: [Parameters.accept],
  serializer
};
const listDeviceGroupsNextOperationSpec: coreClient.OperationSpec = {
  path: "{nextLink}",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.DeviceGroupListResult
    },
    default: {
      bodyMapper: Mappers.ErrorResponse
    }
  },
  urlParameters: [
    Parameters.$host,
    Parameters.nextLink,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.catalogName
  ],
  headerParameters: [Parameters.accept, Parameters.contentType],
  mediaType: "json",
  serializer
};
const listDeviceInsightsNextOperationSpec: coreClient.OperationSpec = {
  path: "{nextLink}",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.PagedDeviceInsight
    },
    default: {
      bodyMapper: Mappers.ErrorResponse
    }
  },
  urlParameters: [
    Parameters.$host,
    Parameters.nextLink,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.catalogName
  ],
  headerParameters: [Parameters.accept],
  serializer
};
const listDevicesNextOperationSpec: coreClient.OperationSpec = {
  path: "{nextLink}",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.DeviceListResult
    },
    default: {
      bodyMapper: Mappers.ErrorResponse
    }
  },
  urlParameters: [
    Parameters.$host,
    Parameters.nextLink,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.catalogName
  ],
  headerParameters: [Parameters.accept],
  serializer
};
