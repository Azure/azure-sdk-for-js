/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */

import { PagedAsyncIterableIterator, PageSettings } from "@azure/core-paging";
import { BitLockerKeys } from "../operationsInterfaces";
import * as coreClient from "@azure/core-client";
import * as Mappers from "../models/mappers";
import * as Parameters from "../models/parameters";
import { StorageImportExport } from "../storageImportExport";
import {
  DriveBitLockerKey,
  BitLockerKeysListOptionalParams,
  BitLockerKeysListResponse
} from "../models";

/// <reference lib="esnext.asynciterable" />
/** Class containing BitLockerKeys operations. */
export class BitLockerKeysImpl implements BitLockerKeys {
  private readonly client: StorageImportExport;

  /**
   * Initialize a new instance of the class BitLockerKeys class.
   * @param client Reference to the service client
   */
  constructor(client: StorageImportExport) {
    this.client = client;
  }

  /**
   * Returns the BitLocker Keys for all drives in the specified job.
   * @param jobName The name of the import/export job.
   * @param resourceGroupName The resource group name uniquely identifies the resource group within the
   *                          user subscription.
   * @param options The options parameters.
   */
  public list(
    jobName: string,
    resourceGroupName: string,
    options?: BitLockerKeysListOptionalParams
  ): PagedAsyncIterableIterator<DriveBitLockerKey> {
    const iter = this.listPagingAll(jobName, resourceGroupName, options);
    return {
      next() {
        return iter.next();
      },
      [Symbol.asyncIterator]() {
        return this;
      },
      byPage: (settings?: PageSettings) => {
        if (settings?.maxPageSize) {
          throw new Error("maxPageSize is not supported by this operation.");
        }
        return this.listPagingPage(
          jobName,
          resourceGroupName,
          options,
          settings
        );
      }
    };
  }

  private async *listPagingPage(
    jobName: string,
    resourceGroupName: string,
    options?: BitLockerKeysListOptionalParams,
    _settings?: PageSettings
  ): AsyncIterableIterator<DriveBitLockerKey[]> {
    let result: BitLockerKeysListResponse;
    result = await this._list(jobName, resourceGroupName, options);
    yield result.value || [];
  }

  private async *listPagingAll(
    jobName: string,
    resourceGroupName: string,
    options?: BitLockerKeysListOptionalParams
  ): AsyncIterableIterator<DriveBitLockerKey> {
    for await (const page of this.listPagingPage(
      jobName,
      resourceGroupName,
      options
    )) {
      yield* page;
    }
  }

  /**
   * Returns the BitLocker Keys for all drives in the specified job.
   * @param jobName The name of the import/export job.
   * @param resourceGroupName The resource group name uniquely identifies the resource group within the
   *                          user subscription.
   * @param options The options parameters.
   */
  private _list(
    jobName: string,
    resourceGroupName: string,
    options?: BitLockerKeysListOptionalParams
  ): Promise<BitLockerKeysListResponse> {
    return this.client.sendOperationRequest(
      { jobName, resourceGroupName, options },
      listOperationSpec
    );
  }
}
// Operation Specifications
const serializer = coreClient.createSerializer(Mappers, /* isXml */ false);

const listOperationSpec: coreClient.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ImportExport/jobs/{jobName}/listBitLockerKeys",
  httpMethod: "POST",
  responses: {
    200: {
      bodyMapper: Mappers.GetBitLockerKeysResponse
    },
    default: {
      bodyMapper: Mappers.ErrorResponse
    }
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.jobName
  ],
  headerParameters: [Parameters.accept, Parameters.acceptLanguage],
  serializer
};
