/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */

import { PagedAsyncIterableIterator } from "@azure/core-paging";
import {
  JobResponse,
  JobsListBySubscriptionOptionalParams,
  JobsListByResourceGroupOptionalParams,
  JobsGetOptionalParams,
  JobsGetResponse,
  UpdateJobParameters,
  JobsUpdateOptionalParams,
  JobsUpdateResponse,
  PutJobParameters,
  JobsCreateOptionalParams,
  JobsCreateResponse,
  JobsDeleteOptionalParams
} from "../models";

/// <reference lib="esnext.asynciterable" />
/** Interface representing a Jobs. */
export interface Jobs {
  /**
   * Returns all active and completed jobs in a subscription.
   * @param options The options parameters.
   */
  listBySubscription(
    options?: JobsListBySubscriptionOptionalParams
  ): PagedAsyncIterableIterator<JobResponse>;
  /**
   * Returns all active and completed jobs in a resource group.
   * @param resourceGroupName The resource group name uniquely identifies the resource group within the
   *                          user subscription.
   * @param options The options parameters.
   */
  listByResourceGroup(
    resourceGroupName: string,
    options?: JobsListByResourceGroupOptionalParams
  ): PagedAsyncIterableIterator<JobResponse>;
  /**
   * Gets information about an existing job.
   * @param jobName The name of the import/export job.
   * @param resourceGroupName The resource group name uniquely identifies the resource group within the
   *                          user subscription.
   * @param options The options parameters.
   */
  get(
    jobName: string,
    resourceGroupName: string,
    options?: JobsGetOptionalParams
  ): Promise<JobsGetResponse>;
  /**
   * Updates specific properties of a job. You can call this operation to notify the Import/Export
   * service that the hard drives comprising the import or export job have been shipped to the Microsoft
   * data center. It can also be used to cancel an existing job.
   * @param jobName The name of the import/export job.
   * @param resourceGroupName The resource group name uniquely identifies the resource group within the
   *                          user subscription.
   * @param body The parameters to update in the job
   * @param options The options parameters.
   */
  update(
    jobName: string,
    resourceGroupName: string,
    body: UpdateJobParameters,
    options?: JobsUpdateOptionalParams
  ): Promise<JobsUpdateResponse>;
  /**
   * Creates a new job or updates an existing job in the specified subscription.
   * @param jobName The name of the import/export job.
   * @param resourceGroupName The resource group name uniquely identifies the resource group within the
   *                          user subscription.
   * @param body The parameters used for creating the job
   * @param options The options parameters.
   */
  create(
    jobName: string,
    resourceGroupName: string,
    body: PutJobParameters,
    options?: JobsCreateOptionalParams
  ): Promise<JobsCreateResponse>;
  /**
   * Deletes an existing job. Only jobs in the Creating or Completed states can be deleted.
   * @param jobName The name of the import/export job.
   * @param resourceGroupName The resource group name uniquely identifies the resource group within the
   *                          user subscription.
   * @param options The options parameters.
   */
  delete(
    jobName: string,
    resourceGroupName: string,
    options?: JobsDeleteOptionalParams
  ): Promise<void>;
}
