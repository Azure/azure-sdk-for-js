/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is
 * regenerated.
 */

import * as msRest from "@azure/ms-rest-js";
import * as Models from "../models";
import * as Mappers from "../models/policyMetadataOperationsMappers";
import * as Parameters from "../models/parameters";
import { PolicyInsightsClientContext } from "../policyInsightsClientContext";

/** Class representing a PolicyMetadataOperations. */
export class PolicyMetadataOperations {
  private readonly client: PolicyInsightsClientContext;

  /**
   * Create a PolicyMetadataOperations.
   * @param {PolicyInsightsClientContext} client Reference to the service client.
   */
  constructor(client: PolicyInsightsClientContext) {
    this.client = client;
  }

  /**
   * Get policy metadata resource.
   * @param resourceName The name of the policy metadata resource.
   * @param [options] The optional parameters
   * @returns Promise<Models.PolicyMetadataGetResourceResponse>
   */
  getResource(resourceName: string, options?: msRest.RequestOptionsBase): Promise<Models.PolicyMetadataGetResourceResponse>;
  /**
   * @param resourceName The name of the policy metadata resource.
   * @param callback The callback
   */
  getResource(resourceName: string, callback: msRest.ServiceCallback<Models.PolicyMetadata>): void;
  /**
   * @param resourceName The name of the policy metadata resource.
   * @param options The optional parameters
   * @param callback The callback
   */
  getResource(resourceName: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.PolicyMetadata>): void;
  getResource(resourceName: string, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<Models.PolicyMetadata>, callback?: msRest.ServiceCallback<Models.PolicyMetadata>): Promise<Models.PolicyMetadataGetResourceResponse> {
    return this.client.sendOperationRequest(
      {
        resourceName,
        options
      },
      getResourceOperationSpec,
      callback) as Promise<Models.PolicyMetadataGetResourceResponse>;
  }

  /**
   * Get a list of the policy metadata resources.
   * @param [options] The optional parameters
   * @returns Promise<Models.PolicyMetadataListResponse>
   */
  list(options?: Models.PolicyMetadataListOptionalParams): Promise<Models.PolicyMetadataListResponse>;
  /**
   * @param callback The callback
   */
  list(callback: msRest.ServiceCallback<Models.PolicyMetadataCollection>): void;
  /**
   * @param options The optional parameters
   * @param callback The callback
   */
  list(options: Models.PolicyMetadataListOptionalParams, callback: msRest.ServiceCallback<Models.PolicyMetadataCollection>): void;
  list(options?: Models.PolicyMetadataListOptionalParams | msRest.ServiceCallback<Models.PolicyMetadataCollection>, callback?: msRest.ServiceCallback<Models.PolicyMetadataCollection>): Promise<Models.PolicyMetadataListResponse> {
    return this.client.sendOperationRequest(
      {
        options
      },
      listOperationSpec,
      callback) as Promise<Models.PolicyMetadataListResponse>;
  }

  /**
   * Get a list of the policy metadata resources.
   * @param nextPageLink The NextLink from the previous successful call to List operation.
   * @param [options] The optional parameters
   * @returns Promise<Models.PolicyMetadataListNextResponse>
   */
  listNext(nextPageLink: string, options?: msRest.RequestOptionsBase): Promise<Models.PolicyMetadataListNextResponse>;
  /**
   * @param nextPageLink The NextLink from the previous successful call to List operation.
   * @param callback The callback
   */
  listNext(nextPageLink: string, callback: msRest.ServiceCallback<Models.PolicyMetadataCollection>): void;
  /**
   * @param nextPageLink The NextLink from the previous successful call to List operation.
   * @param options The optional parameters
   * @param callback The callback
   */
  listNext(nextPageLink: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.PolicyMetadataCollection>): void;
  listNext(nextPageLink: string, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<Models.PolicyMetadataCollection>, callback?: msRest.ServiceCallback<Models.PolicyMetadataCollection>): Promise<Models.PolicyMetadataListNextResponse> {
    return this.client.sendOperationRequest(
      {
        nextPageLink,
        options
      },
      listNextOperationSpec,
      callback) as Promise<Models.PolicyMetadataListNextResponse>;
  }
}

// Operation Specifications
const serializer = new msRest.Serializer(Mappers);
const getResourceOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "providers/Microsoft.PolicyInsights/policyMetadata/{resourceName}",
  urlParameters: [
    Parameters.resourceName
  ],
  queryParameters: [
    Parameters.apiVersion2
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    200: {
      bodyMapper: Mappers.PolicyMetadata
    },
    default: {
      bodyMapper: Mappers.ErrorResponse
    }
  },
  serializer
};

const listOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "providers/Microsoft.PolicyInsights/policyMetadata",
  queryParameters: [
    Parameters.apiVersion2,
    Parameters.top
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    200: {
      bodyMapper: Mappers.PolicyMetadataCollection
    },
    default: {
      bodyMapper: Mappers.ErrorResponse
    }
  },
  serializer
};

const listNextOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  baseUrl: "https://management.azure.com",
  path: "{nextLink}",
  urlParameters: [
    Parameters.nextPageLink
  ],
  queryParameters: [
    Parameters.apiVersion2
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    200: {
      bodyMapper: Mappers.PolicyMetadataCollection
    },
    default: {
      bodyMapper: Mappers.ErrorResponse
    }
  },
  serializer
};
