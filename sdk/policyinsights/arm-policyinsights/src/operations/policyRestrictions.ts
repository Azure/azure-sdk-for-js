/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is
 * regenerated.
 */

import * as msRest from "@azure/ms-rest-js";
import * as Models from "../models";
import * as Mappers from "../models/policyRestrictionsMappers";
import * as Parameters from "../models/parameters";
import { PolicyInsightsClientContext } from "../policyInsightsClientContext";

/** Class representing a PolicyRestrictions. */
export class PolicyRestrictions {
  private readonly client: PolicyInsightsClientContext;

  /**
   * Create a PolicyRestrictions.
   * @param {PolicyInsightsClientContext} client Reference to the service client.
   */
  constructor(client: PolicyInsightsClientContext) {
    this.client = client;
  }

  /**
   * Checks what restrictions Azure Policy will place on a resource within a subscription.
   * @param subscriptionId The ID of the target subscription.
   * @param parameters The check policy restrictions parameters.
   * @param [options] The optional parameters
   * @returns Promise<Models.PolicyRestrictionsCheckAtSubscriptionScopeResponse>
   */
  checkAtSubscriptionScope(subscriptionId: string, parameters: Models.CheckRestrictionsRequest, options?: msRest.RequestOptionsBase): Promise<Models.PolicyRestrictionsCheckAtSubscriptionScopeResponse>;
  /**
   * @param subscriptionId The ID of the target subscription.
   * @param parameters The check policy restrictions parameters.
   * @param callback The callback
   */
  checkAtSubscriptionScope(subscriptionId: string, parameters: Models.CheckRestrictionsRequest, callback: msRest.ServiceCallback<Models.CheckRestrictionsResult>): void;
  /**
   * @param subscriptionId The ID of the target subscription.
   * @param parameters The check policy restrictions parameters.
   * @param options The optional parameters
   * @param callback The callback
   */
  checkAtSubscriptionScope(subscriptionId: string, parameters: Models.CheckRestrictionsRequest, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.CheckRestrictionsResult>): void;
  checkAtSubscriptionScope(subscriptionId: string, parameters: Models.CheckRestrictionsRequest, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<Models.CheckRestrictionsResult>, callback?: msRest.ServiceCallback<Models.CheckRestrictionsResult>): Promise<Models.PolicyRestrictionsCheckAtSubscriptionScopeResponse> {
    return this.client.sendOperationRequest(
      {
        subscriptionId,
        parameters,
        options
      },
      checkAtSubscriptionScopeOperationSpec,
      callback) as Promise<Models.PolicyRestrictionsCheckAtSubscriptionScopeResponse>;
  }

  /**
   * Checks what restrictions Azure Policy will place on a resource within a resource group. Use this
   * when the resource group the resource will be created in is already known.
   * @param subscriptionId The ID of the target subscription.
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param parameters The check policy restrictions parameters.
   * @param [options] The optional parameters
   * @returns Promise<Models.PolicyRestrictionsCheckAtResourceGroupScopeResponse>
   */
  checkAtResourceGroupScope(subscriptionId: string, resourceGroupName: string, parameters: Models.CheckRestrictionsRequest, options?: msRest.RequestOptionsBase): Promise<Models.PolicyRestrictionsCheckAtResourceGroupScopeResponse>;
  /**
   * @param subscriptionId The ID of the target subscription.
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param parameters The check policy restrictions parameters.
   * @param callback The callback
   */
  checkAtResourceGroupScope(subscriptionId: string, resourceGroupName: string, parameters: Models.CheckRestrictionsRequest, callback: msRest.ServiceCallback<Models.CheckRestrictionsResult>): void;
  /**
   * @param subscriptionId The ID of the target subscription.
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param parameters The check policy restrictions parameters.
   * @param options The optional parameters
   * @param callback The callback
   */
  checkAtResourceGroupScope(subscriptionId: string, resourceGroupName: string, parameters: Models.CheckRestrictionsRequest, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.CheckRestrictionsResult>): void;
  checkAtResourceGroupScope(subscriptionId: string, resourceGroupName: string, parameters: Models.CheckRestrictionsRequest, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<Models.CheckRestrictionsResult>, callback?: msRest.ServiceCallback<Models.CheckRestrictionsResult>): Promise<Models.PolicyRestrictionsCheckAtResourceGroupScopeResponse> {
    return this.client.sendOperationRequest(
      {
        subscriptionId,
        resourceGroupName,
        parameters,
        options
      },
      checkAtResourceGroupScopeOperationSpec,
      callback) as Promise<Models.PolicyRestrictionsCheckAtResourceGroupScopeResponse>;
  }
}

// Operation Specifications
const serializer = new msRest.Serializer(Mappers);
const checkAtSubscriptionScopeOperationSpec: msRest.OperationSpec = {
  httpMethod: "POST",
  path: "subscriptions/{subscriptionId}/providers/Microsoft.PolicyInsights/checkPolicyRestrictions",
  urlParameters: [
    Parameters.subscriptionId1
  ],
  queryParameters: [
    Parameters.apiVersion3
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  requestBody: {
    parameterPath: "parameters",
    mapper: {
      ...Mappers.CheckRestrictionsRequest,
      required: true
    }
  },
  responses: {
    200: {
      bodyMapper: Mappers.CheckRestrictionsResult
    },
    default: {
      bodyMapper: Mappers.ErrorResponse
    }
  },
  serializer
};

const checkAtResourceGroupScopeOperationSpec: msRest.OperationSpec = {
  httpMethod: "POST",
  path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.PolicyInsights/checkPolicyRestrictions",
  urlParameters: [
    Parameters.subscriptionId1,
    Parameters.resourceGroupName1
  ],
  queryParameters: [
    Parameters.apiVersion3
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  requestBody: {
    parameterPath: "parameters",
    mapper: {
      ...Mappers.CheckRestrictionsRequest,
      required: true
    }
  },
  responses: {
    200: {
      bodyMapper: Mappers.CheckRestrictionsResult
    },
    default: {
      bodyMapper: Mappers.ErrorResponse
    }
  },
  serializer
};
