/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is
 * regenerated.
 */

import * as msRest from "@azure/ms-rest-js";
import * as Models from "../models";
import * as Mappers from "../models/remediationsMappers";
import * as Parameters from "../models/parameters";
import { PolicyInsightsClientContext } from "../policyInsightsClientContext";

/** Class representing a Remediations. */
export class Remediations {
  private readonly client: PolicyInsightsClientContext;

  /**
   * Create a Remediations.
   * @param {PolicyInsightsClientContext} client Reference to the service client.
   */
  constructor(client: PolicyInsightsClientContext) {
    this.client = client;
  }

  /**
   * Gets all deployments for a remediation at management group scope.
   * @param managementGroupId Management group ID.
   * @param remediationName The name of the remediation.
   * @param [options] The optional parameters
   * @returns Promise<Models.RemediationsListDeploymentsAtManagementGroupResponse>
   */
  listDeploymentsAtManagementGroup(managementGroupId: string, remediationName: string, options?: Models.RemediationsListDeploymentsAtManagementGroupOptionalParams): Promise<Models.RemediationsListDeploymentsAtManagementGroupResponse>;
  /**
   * @param managementGroupId Management group ID.
   * @param remediationName The name of the remediation.
   * @param callback The callback
   */
  listDeploymentsAtManagementGroup(managementGroupId: string, remediationName: string, callback: msRest.ServiceCallback<Models.RemediationDeploymentsListResult>): void;
  /**
   * @param managementGroupId Management group ID.
   * @param remediationName The name of the remediation.
   * @param options The optional parameters
   * @param callback The callback
   */
  listDeploymentsAtManagementGroup(managementGroupId: string, remediationName: string, options: Models.RemediationsListDeploymentsAtManagementGroupOptionalParams, callback: msRest.ServiceCallback<Models.RemediationDeploymentsListResult>): void;
  listDeploymentsAtManagementGroup(managementGroupId: string, remediationName: string, options?: Models.RemediationsListDeploymentsAtManagementGroupOptionalParams | msRest.ServiceCallback<Models.RemediationDeploymentsListResult>, callback?: msRest.ServiceCallback<Models.RemediationDeploymentsListResult>): Promise<Models.RemediationsListDeploymentsAtManagementGroupResponse> {
    return this.client.sendOperationRequest(
      {
        managementGroupId,
        remediationName,
        options
      },
      listDeploymentsAtManagementGroupOperationSpec,
      callback) as Promise<Models.RemediationsListDeploymentsAtManagementGroupResponse>;
  }

  /**
   * Cancels a remediation at management group scope.
   * @param managementGroupId Management group ID.
   * @param remediationName The name of the remediation.
   * @param [options] The optional parameters
   * @returns Promise<Models.RemediationsCancelAtManagementGroupResponse>
   */
  cancelAtManagementGroup(managementGroupId: string, remediationName: string, options?: msRest.RequestOptionsBase): Promise<Models.RemediationsCancelAtManagementGroupResponse>;
  /**
   * @param managementGroupId Management group ID.
   * @param remediationName The name of the remediation.
   * @param callback The callback
   */
  cancelAtManagementGroup(managementGroupId: string, remediationName: string, callback: msRest.ServiceCallback<Models.Remediation>): void;
  /**
   * @param managementGroupId Management group ID.
   * @param remediationName The name of the remediation.
   * @param options The optional parameters
   * @param callback The callback
   */
  cancelAtManagementGroup(managementGroupId: string, remediationName: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.Remediation>): void;
  cancelAtManagementGroup(managementGroupId: string, remediationName: string, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<Models.Remediation>, callback?: msRest.ServiceCallback<Models.Remediation>): Promise<Models.RemediationsCancelAtManagementGroupResponse> {
    return this.client.sendOperationRequest(
      {
        managementGroupId,
        remediationName,
        options
      },
      cancelAtManagementGroupOperationSpec,
      callback) as Promise<Models.RemediationsCancelAtManagementGroupResponse>;
  }

  /**
   * Gets all remediations for the management group.
   * @param managementGroupId Management group ID.
   * @param [options] The optional parameters
   * @returns Promise<Models.RemediationsListForManagementGroupResponse>
   */
  listForManagementGroup(managementGroupId: string, options?: Models.RemediationsListForManagementGroupOptionalParams): Promise<Models.RemediationsListForManagementGroupResponse>;
  /**
   * @param managementGroupId Management group ID.
   * @param callback The callback
   */
  listForManagementGroup(managementGroupId: string, callback: msRest.ServiceCallback<Models.RemediationListResult>): void;
  /**
   * @param managementGroupId Management group ID.
   * @param options The optional parameters
   * @param callback The callback
   */
  listForManagementGroup(managementGroupId: string, options: Models.RemediationsListForManagementGroupOptionalParams, callback: msRest.ServiceCallback<Models.RemediationListResult>): void;
  listForManagementGroup(managementGroupId: string, options?: Models.RemediationsListForManagementGroupOptionalParams | msRest.ServiceCallback<Models.RemediationListResult>, callback?: msRest.ServiceCallback<Models.RemediationListResult>): Promise<Models.RemediationsListForManagementGroupResponse> {
    return this.client.sendOperationRequest(
      {
        managementGroupId,
        options
      },
      listForManagementGroupOperationSpec,
      callback) as Promise<Models.RemediationsListForManagementGroupResponse>;
  }

  /**
   * Creates or updates a remediation at management group scope.
   * @param managementGroupId Management group ID.
   * @param remediationName The name of the remediation.
   * @param parameters The remediation parameters.
   * @param [options] The optional parameters
   * @returns Promise<Models.RemediationsCreateOrUpdateAtManagementGroupResponse>
   */
  createOrUpdateAtManagementGroup(managementGroupId: string, remediationName: string, parameters: Models.Remediation, options?: msRest.RequestOptionsBase): Promise<Models.RemediationsCreateOrUpdateAtManagementGroupResponse>;
  /**
   * @param managementGroupId Management group ID.
   * @param remediationName The name of the remediation.
   * @param parameters The remediation parameters.
   * @param callback The callback
   */
  createOrUpdateAtManagementGroup(managementGroupId: string, remediationName: string, parameters: Models.Remediation, callback: msRest.ServiceCallback<Models.Remediation>): void;
  /**
   * @param managementGroupId Management group ID.
   * @param remediationName The name of the remediation.
   * @param parameters The remediation parameters.
   * @param options The optional parameters
   * @param callback The callback
   */
  createOrUpdateAtManagementGroup(managementGroupId: string, remediationName: string, parameters: Models.Remediation, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.Remediation>): void;
  createOrUpdateAtManagementGroup(managementGroupId: string, remediationName: string, parameters: Models.Remediation, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<Models.Remediation>, callback?: msRest.ServiceCallback<Models.Remediation>): Promise<Models.RemediationsCreateOrUpdateAtManagementGroupResponse> {
    return this.client.sendOperationRequest(
      {
        managementGroupId,
        remediationName,
        parameters,
        options
      },
      createOrUpdateAtManagementGroupOperationSpec,
      callback) as Promise<Models.RemediationsCreateOrUpdateAtManagementGroupResponse>;
  }

  /**
   * Gets an existing remediation at management group scope.
   * @param managementGroupId Management group ID.
   * @param remediationName The name of the remediation.
   * @param [options] The optional parameters
   * @returns Promise<Models.RemediationsGetAtManagementGroupResponse>
   */
  getAtManagementGroup(managementGroupId: string, remediationName: string, options?: msRest.RequestOptionsBase): Promise<Models.RemediationsGetAtManagementGroupResponse>;
  /**
   * @param managementGroupId Management group ID.
   * @param remediationName The name of the remediation.
   * @param callback The callback
   */
  getAtManagementGroup(managementGroupId: string, remediationName: string, callback: msRest.ServiceCallback<Models.Remediation>): void;
  /**
   * @param managementGroupId Management group ID.
   * @param remediationName The name of the remediation.
   * @param options The optional parameters
   * @param callback The callback
   */
  getAtManagementGroup(managementGroupId: string, remediationName: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.Remediation>): void;
  getAtManagementGroup(managementGroupId: string, remediationName: string, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<Models.Remediation>, callback?: msRest.ServiceCallback<Models.Remediation>): Promise<Models.RemediationsGetAtManagementGroupResponse> {
    return this.client.sendOperationRequest(
      {
        managementGroupId,
        remediationName,
        options
      },
      getAtManagementGroupOperationSpec,
      callback) as Promise<Models.RemediationsGetAtManagementGroupResponse>;
  }

  /**
   * Deletes an existing remediation at management group scope.
   * @param managementGroupId Management group ID.
   * @param remediationName The name of the remediation.
   * @param [options] The optional parameters
   * @returns Promise<Models.RemediationsDeleteAtManagementGroupResponse>
   */
  deleteAtManagementGroup(managementGroupId: string, remediationName: string, options?: msRest.RequestOptionsBase): Promise<Models.RemediationsDeleteAtManagementGroupResponse>;
  /**
   * @param managementGroupId Management group ID.
   * @param remediationName The name of the remediation.
   * @param callback The callback
   */
  deleteAtManagementGroup(managementGroupId: string, remediationName: string, callback: msRest.ServiceCallback<Models.Remediation>): void;
  /**
   * @param managementGroupId Management group ID.
   * @param remediationName The name of the remediation.
   * @param options The optional parameters
   * @param callback The callback
   */
  deleteAtManagementGroup(managementGroupId: string, remediationName: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.Remediation>): void;
  deleteAtManagementGroup(managementGroupId: string, remediationName: string, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<Models.Remediation>, callback?: msRest.ServiceCallback<Models.Remediation>): Promise<Models.RemediationsDeleteAtManagementGroupResponse> {
    return this.client.sendOperationRequest(
      {
        managementGroupId,
        remediationName,
        options
      },
      deleteAtManagementGroupOperationSpec,
      callback) as Promise<Models.RemediationsDeleteAtManagementGroupResponse>;
  }

  /**
   * Gets all deployments for a remediation at subscription scope.
   * @param subscriptionId Microsoft Azure subscription ID.
   * @param remediationName The name of the remediation.
   * @param [options] The optional parameters
   * @returns Promise<Models.RemediationsListDeploymentsAtSubscriptionResponse>
   */
  listDeploymentsAtSubscription(subscriptionId: string, remediationName: string, options?: Models.RemediationsListDeploymentsAtSubscriptionOptionalParams): Promise<Models.RemediationsListDeploymentsAtSubscriptionResponse>;
  /**
   * @param subscriptionId Microsoft Azure subscription ID.
   * @param remediationName The name of the remediation.
   * @param callback The callback
   */
  listDeploymentsAtSubscription(subscriptionId: string, remediationName: string, callback: msRest.ServiceCallback<Models.RemediationDeploymentsListResult>): void;
  /**
   * @param subscriptionId Microsoft Azure subscription ID.
   * @param remediationName The name of the remediation.
   * @param options The optional parameters
   * @param callback The callback
   */
  listDeploymentsAtSubscription(subscriptionId: string, remediationName: string, options: Models.RemediationsListDeploymentsAtSubscriptionOptionalParams, callback: msRest.ServiceCallback<Models.RemediationDeploymentsListResult>): void;
  listDeploymentsAtSubscription(subscriptionId: string, remediationName: string, options?: Models.RemediationsListDeploymentsAtSubscriptionOptionalParams | msRest.ServiceCallback<Models.RemediationDeploymentsListResult>, callback?: msRest.ServiceCallback<Models.RemediationDeploymentsListResult>): Promise<Models.RemediationsListDeploymentsAtSubscriptionResponse> {
    return this.client.sendOperationRequest(
      {
        subscriptionId,
        remediationName,
        options
      },
      listDeploymentsAtSubscriptionOperationSpec,
      callback) as Promise<Models.RemediationsListDeploymentsAtSubscriptionResponse>;
  }

  /**
   * Cancels a remediation at subscription scope.
   * @param subscriptionId Microsoft Azure subscription ID.
   * @param remediationName The name of the remediation.
   * @param [options] The optional parameters
   * @returns Promise<Models.RemediationsCancelAtSubscriptionResponse>
   */
  cancelAtSubscription(subscriptionId: string, remediationName: string, options?: msRest.RequestOptionsBase): Promise<Models.RemediationsCancelAtSubscriptionResponse>;
  /**
   * @param subscriptionId Microsoft Azure subscription ID.
   * @param remediationName The name of the remediation.
   * @param callback The callback
   */
  cancelAtSubscription(subscriptionId: string, remediationName: string, callback: msRest.ServiceCallback<Models.Remediation>): void;
  /**
   * @param subscriptionId Microsoft Azure subscription ID.
   * @param remediationName The name of the remediation.
   * @param options The optional parameters
   * @param callback The callback
   */
  cancelAtSubscription(subscriptionId: string, remediationName: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.Remediation>): void;
  cancelAtSubscription(subscriptionId: string, remediationName: string, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<Models.Remediation>, callback?: msRest.ServiceCallback<Models.Remediation>): Promise<Models.RemediationsCancelAtSubscriptionResponse> {
    return this.client.sendOperationRequest(
      {
        subscriptionId,
        remediationName,
        options
      },
      cancelAtSubscriptionOperationSpec,
      callback) as Promise<Models.RemediationsCancelAtSubscriptionResponse>;
  }

  /**
   * Gets all remediations for the subscription.
   * @param subscriptionId Microsoft Azure subscription ID.
   * @param [options] The optional parameters
   * @returns Promise<Models.RemediationsListForSubscriptionResponse>
   */
  listForSubscription(subscriptionId: string, options?: Models.RemediationsListForSubscriptionOptionalParams): Promise<Models.RemediationsListForSubscriptionResponse>;
  /**
   * @param subscriptionId Microsoft Azure subscription ID.
   * @param callback The callback
   */
  listForSubscription(subscriptionId: string, callback: msRest.ServiceCallback<Models.RemediationListResult>): void;
  /**
   * @param subscriptionId Microsoft Azure subscription ID.
   * @param options The optional parameters
   * @param callback The callback
   */
  listForSubscription(subscriptionId: string, options: Models.RemediationsListForSubscriptionOptionalParams, callback: msRest.ServiceCallback<Models.RemediationListResult>): void;
  listForSubscription(subscriptionId: string, options?: Models.RemediationsListForSubscriptionOptionalParams | msRest.ServiceCallback<Models.RemediationListResult>, callback?: msRest.ServiceCallback<Models.RemediationListResult>): Promise<Models.RemediationsListForSubscriptionResponse> {
    return this.client.sendOperationRequest(
      {
        subscriptionId,
        options
      },
      listForSubscriptionOperationSpec,
      callback) as Promise<Models.RemediationsListForSubscriptionResponse>;
  }

  /**
   * Creates or updates a remediation at subscription scope.
   * @param subscriptionId Microsoft Azure subscription ID.
   * @param remediationName The name of the remediation.
   * @param parameters The remediation parameters.
   * @param [options] The optional parameters
   * @returns Promise<Models.RemediationsCreateOrUpdateAtSubscriptionResponse>
   */
  createOrUpdateAtSubscription(subscriptionId: string, remediationName: string, parameters: Models.Remediation, options?: msRest.RequestOptionsBase): Promise<Models.RemediationsCreateOrUpdateAtSubscriptionResponse>;
  /**
   * @param subscriptionId Microsoft Azure subscription ID.
   * @param remediationName The name of the remediation.
   * @param parameters The remediation parameters.
   * @param callback The callback
   */
  createOrUpdateAtSubscription(subscriptionId: string, remediationName: string, parameters: Models.Remediation, callback: msRest.ServiceCallback<Models.Remediation>): void;
  /**
   * @param subscriptionId Microsoft Azure subscription ID.
   * @param remediationName The name of the remediation.
   * @param parameters The remediation parameters.
   * @param options The optional parameters
   * @param callback The callback
   */
  createOrUpdateAtSubscription(subscriptionId: string, remediationName: string, parameters: Models.Remediation, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.Remediation>): void;
  createOrUpdateAtSubscription(subscriptionId: string, remediationName: string, parameters: Models.Remediation, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<Models.Remediation>, callback?: msRest.ServiceCallback<Models.Remediation>): Promise<Models.RemediationsCreateOrUpdateAtSubscriptionResponse> {
    return this.client.sendOperationRequest(
      {
        subscriptionId,
        remediationName,
        parameters,
        options
      },
      createOrUpdateAtSubscriptionOperationSpec,
      callback) as Promise<Models.RemediationsCreateOrUpdateAtSubscriptionResponse>;
  }

  /**
   * Gets an existing remediation at subscription scope.
   * @param subscriptionId Microsoft Azure subscription ID.
   * @param remediationName The name of the remediation.
   * @param [options] The optional parameters
   * @returns Promise<Models.RemediationsGetAtSubscriptionResponse>
   */
  getAtSubscription(subscriptionId: string, remediationName: string, options?: msRest.RequestOptionsBase): Promise<Models.RemediationsGetAtSubscriptionResponse>;
  /**
   * @param subscriptionId Microsoft Azure subscription ID.
   * @param remediationName The name of the remediation.
   * @param callback The callback
   */
  getAtSubscription(subscriptionId: string, remediationName: string, callback: msRest.ServiceCallback<Models.Remediation>): void;
  /**
   * @param subscriptionId Microsoft Azure subscription ID.
   * @param remediationName The name of the remediation.
   * @param options The optional parameters
   * @param callback The callback
   */
  getAtSubscription(subscriptionId: string, remediationName: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.Remediation>): void;
  getAtSubscription(subscriptionId: string, remediationName: string, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<Models.Remediation>, callback?: msRest.ServiceCallback<Models.Remediation>): Promise<Models.RemediationsGetAtSubscriptionResponse> {
    return this.client.sendOperationRequest(
      {
        subscriptionId,
        remediationName,
        options
      },
      getAtSubscriptionOperationSpec,
      callback) as Promise<Models.RemediationsGetAtSubscriptionResponse>;
  }

  /**
   * Deletes an existing remediation at subscription scope.
   * @param subscriptionId Microsoft Azure subscription ID.
   * @param remediationName The name of the remediation.
   * @param [options] The optional parameters
   * @returns Promise<Models.RemediationsDeleteAtSubscriptionResponse>
   */
  deleteAtSubscription(subscriptionId: string, remediationName: string, options?: msRest.RequestOptionsBase): Promise<Models.RemediationsDeleteAtSubscriptionResponse>;
  /**
   * @param subscriptionId Microsoft Azure subscription ID.
   * @param remediationName The name of the remediation.
   * @param callback The callback
   */
  deleteAtSubscription(subscriptionId: string, remediationName: string, callback: msRest.ServiceCallback<Models.Remediation>): void;
  /**
   * @param subscriptionId Microsoft Azure subscription ID.
   * @param remediationName The name of the remediation.
   * @param options The optional parameters
   * @param callback The callback
   */
  deleteAtSubscription(subscriptionId: string, remediationName: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.Remediation>): void;
  deleteAtSubscription(subscriptionId: string, remediationName: string, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<Models.Remediation>, callback?: msRest.ServiceCallback<Models.Remediation>): Promise<Models.RemediationsDeleteAtSubscriptionResponse> {
    return this.client.sendOperationRequest(
      {
        subscriptionId,
        remediationName,
        options
      },
      deleteAtSubscriptionOperationSpec,
      callback) as Promise<Models.RemediationsDeleteAtSubscriptionResponse>;
  }

  /**
   * Gets all deployments for a remediation at resource group scope.
   * @param subscriptionId Microsoft Azure subscription ID.
   * @param resourceGroupName Resource group name.
   * @param remediationName The name of the remediation.
   * @param [options] The optional parameters
   * @returns Promise<Models.RemediationsListDeploymentsAtResourceGroupResponse>
   */
  listDeploymentsAtResourceGroup(subscriptionId: string, resourceGroupName: string, remediationName: string, options?: Models.RemediationsListDeploymentsAtResourceGroupOptionalParams): Promise<Models.RemediationsListDeploymentsAtResourceGroupResponse>;
  /**
   * @param subscriptionId Microsoft Azure subscription ID.
   * @param resourceGroupName Resource group name.
   * @param remediationName The name of the remediation.
   * @param callback The callback
   */
  listDeploymentsAtResourceGroup(subscriptionId: string, resourceGroupName: string, remediationName: string, callback: msRest.ServiceCallback<Models.RemediationDeploymentsListResult>): void;
  /**
   * @param subscriptionId Microsoft Azure subscription ID.
   * @param resourceGroupName Resource group name.
   * @param remediationName The name of the remediation.
   * @param options The optional parameters
   * @param callback The callback
   */
  listDeploymentsAtResourceGroup(subscriptionId: string, resourceGroupName: string, remediationName: string, options: Models.RemediationsListDeploymentsAtResourceGroupOptionalParams, callback: msRest.ServiceCallback<Models.RemediationDeploymentsListResult>): void;
  listDeploymentsAtResourceGroup(subscriptionId: string, resourceGroupName: string, remediationName: string, options?: Models.RemediationsListDeploymentsAtResourceGroupOptionalParams | msRest.ServiceCallback<Models.RemediationDeploymentsListResult>, callback?: msRest.ServiceCallback<Models.RemediationDeploymentsListResult>): Promise<Models.RemediationsListDeploymentsAtResourceGroupResponse> {
    return this.client.sendOperationRequest(
      {
        subscriptionId,
        resourceGroupName,
        remediationName,
        options
      },
      listDeploymentsAtResourceGroupOperationSpec,
      callback) as Promise<Models.RemediationsListDeploymentsAtResourceGroupResponse>;
  }

  /**
   * Cancels a remediation at resource group scope.
   * @param subscriptionId Microsoft Azure subscription ID.
   * @param resourceGroupName Resource group name.
   * @param remediationName The name of the remediation.
   * @param [options] The optional parameters
   * @returns Promise<Models.RemediationsCancelAtResourceGroupResponse>
   */
  cancelAtResourceGroup(subscriptionId: string, resourceGroupName: string, remediationName: string, options?: msRest.RequestOptionsBase): Promise<Models.RemediationsCancelAtResourceGroupResponse>;
  /**
   * @param subscriptionId Microsoft Azure subscription ID.
   * @param resourceGroupName Resource group name.
   * @param remediationName The name of the remediation.
   * @param callback The callback
   */
  cancelAtResourceGroup(subscriptionId: string, resourceGroupName: string, remediationName: string, callback: msRest.ServiceCallback<Models.Remediation>): void;
  /**
   * @param subscriptionId Microsoft Azure subscription ID.
   * @param resourceGroupName Resource group name.
   * @param remediationName The name of the remediation.
   * @param options The optional parameters
   * @param callback The callback
   */
  cancelAtResourceGroup(subscriptionId: string, resourceGroupName: string, remediationName: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.Remediation>): void;
  cancelAtResourceGroup(subscriptionId: string, resourceGroupName: string, remediationName: string, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<Models.Remediation>, callback?: msRest.ServiceCallback<Models.Remediation>): Promise<Models.RemediationsCancelAtResourceGroupResponse> {
    return this.client.sendOperationRequest(
      {
        subscriptionId,
        resourceGroupName,
        remediationName,
        options
      },
      cancelAtResourceGroupOperationSpec,
      callback) as Promise<Models.RemediationsCancelAtResourceGroupResponse>;
  }

  /**
   * Gets all remediations for the subscription.
   * @param subscriptionId Microsoft Azure subscription ID.
   * @param resourceGroupName Resource group name.
   * @param [options] The optional parameters
   * @returns Promise<Models.RemediationsListForResourceGroupResponse>
   */
  listForResourceGroup(subscriptionId: string, resourceGroupName: string, options?: Models.RemediationsListForResourceGroupOptionalParams): Promise<Models.RemediationsListForResourceGroupResponse>;
  /**
   * @param subscriptionId Microsoft Azure subscription ID.
   * @param resourceGroupName Resource group name.
   * @param callback The callback
   */
  listForResourceGroup(subscriptionId: string, resourceGroupName: string, callback: msRest.ServiceCallback<Models.RemediationListResult>): void;
  /**
   * @param subscriptionId Microsoft Azure subscription ID.
   * @param resourceGroupName Resource group name.
   * @param options The optional parameters
   * @param callback The callback
   */
  listForResourceGroup(subscriptionId: string, resourceGroupName: string, options: Models.RemediationsListForResourceGroupOptionalParams, callback: msRest.ServiceCallback<Models.RemediationListResult>): void;
  listForResourceGroup(subscriptionId: string, resourceGroupName: string, options?: Models.RemediationsListForResourceGroupOptionalParams | msRest.ServiceCallback<Models.RemediationListResult>, callback?: msRest.ServiceCallback<Models.RemediationListResult>): Promise<Models.RemediationsListForResourceGroupResponse> {
    return this.client.sendOperationRequest(
      {
        subscriptionId,
        resourceGroupName,
        options
      },
      listForResourceGroupOperationSpec,
      callback) as Promise<Models.RemediationsListForResourceGroupResponse>;
  }

  /**
   * Creates or updates a remediation at resource group scope.
   * @param subscriptionId Microsoft Azure subscription ID.
   * @param resourceGroupName Resource group name.
   * @param remediationName The name of the remediation.
   * @param parameters The remediation parameters.
   * @param [options] The optional parameters
   * @returns Promise<Models.RemediationsCreateOrUpdateAtResourceGroupResponse>
   */
  createOrUpdateAtResourceGroup(subscriptionId: string, resourceGroupName: string, remediationName: string, parameters: Models.Remediation, options?: msRest.RequestOptionsBase): Promise<Models.RemediationsCreateOrUpdateAtResourceGroupResponse>;
  /**
   * @param subscriptionId Microsoft Azure subscription ID.
   * @param resourceGroupName Resource group name.
   * @param remediationName The name of the remediation.
   * @param parameters The remediation parameters.
   * @param callback The callback
   */
  createOrUpdateAtResourceGroup(subscriptionId: string, resourceGroupName: string, remediationName: string, parameters: Models.Remediation, callback: msRest.ServiceCallback<Models.Remediation>): void;
  /**
   * @param subscriptionId Microsoft Azure subscription ID.
   * @param resourceGroupName Resource group name.
   * @param remediationName The name of the remediation.
   * @param parameters The remediation parameters.
   * @param options The optional parameters
   * @param callback The callback
   */
  createOrUpdateAtResourceGroup(subscriptionId: string, resourceGroupName: string, remediationName: string, parameters: Models.Remediation, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.Remediation>): void;
  createOrUpdateAtResourceGroup(subscriptionId: string, resourceGroupName: string, remediationName: string, parameters: Models.Remediation, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<Models.Remediation>, callback?: msRest.ServiceCallback<Models.Remediation>): Promise<Models.RemediationsCreateOrUpdateAtResourceGroupResponse> {
    return this.client.sendOperationRequest(
      {
        subscriptionId,
        resourceGroupName,
        remediationName,
        parameters,
        options
      },
      createOrUpdateAtResourceGroupOperationSpec,
      callback) as Promise<Models.RemediationsCreateOrUpdateAtResourceGroupResponse>;
  }

  /**
   * Gets an existing remediation at resource group scope.
   * @param subscriptionId Microsoft Azure subscription ID.
   * @param resourceGroupName Resource group name.
   * @param remediationName The name of the remediation.
   * @param [options] The optional parameters
   * @returns Promise<Models.RemediationsGetAtResourceGroupResponse>
   */
  getAtResourceGroup(subscriptionId: string, resourceGroupName: string, remediationName: string, options?: msRest.RequestOptionsBase): Promise<Models.RemediationsGetAtResourceGroupResponse>;
  /**
   * @param subscriptionId Microsoft Azure subscription ID.
   * @param resourceGroupName Resource group name.
   * @param remediationName The name of the remediation.
   * @param callback The callback
   */
  getAtResourceGroup(subscriptionId: string, resourceGroupName: string, remediationName: string, callback: msRest.ServiceCallback<Models.Remediation>): void;
  /**
   * @param subscriptionId Microsoft Azure subscription ID.
   * @param resourceGroupName Resource group name.
   * @param remediationName The name of the remediation.
   * @param options The optional parameters
   * @param callback The callback
   */
  getAtResourceGroup(subscriptionId: string, resourceGroupName: string, remediationName: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.Remediation>): void;
  getAtResourceGroup(subscriptionId: string, resourceGroupName: string, remediationName: string, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<Models.Remediation>, callback?: msRest.ServiceCallback<Models.Remediation>): Promise<Models.RemediationsGetAtResourceGroupResponse> {
    return this.client.sendOperationRequest(
      {
        subscriptionId,
        resourceGroupName,
        remediationName,
        options
      },
      getAtResourceGroupOperationSpec,
      callback) as Promise<Models.RemediationsGetAtResourceGroupResponse>;
  }

  /**
   * Deletes an existing remediation at resource group scope.
   * @param subscriptionId Microsoft Azure subscription ID.
   * @param resourceGroupName Resource group name.
   * @param remediationName The name of the remediation.
   * @param [options] The optional parameters
   * @returns Promise<Models.RemediationsDeleteAtResourceGroupResponse>
   */
  deleteAtResourceGroup(subscriptionId: string, resourceGroupName: string, remediationName: string, options?: msRest.RequestOptionsBase): Promise<Models.RemediationsDeleteAtResourceGroupResponse>;
  /**
   * @param subscriptionId Microsoft Azure subscription ID.
   * @param resourceGroupName Resource group name.
   * @param remediationName The name of the remediation.
   * @param callback The callback
   */
  deleteAtResourceGroup(subscriptionId: string, resourceGroupName: string, remediationName: string, callback: msRest.ServiceCallback<Models.Remediation>): void;
  /**
   * @param subscriptionId Microsoft Azure subscription ID.
   * @param resourceGroupName Resource group name.
   * @param remediationName The name of the remediation.
   * @param options The optional parameters
   * @param callback The callback
   */
  deleteAtResourceGroup(subscriptionId: string, resourceGroupName: string, remediationName: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.Remediation>): void;
  deleteAtResourceGroup(subscriptionId: string, resourceGroupName: string, remediationName: string, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<Models.Remediation>, callback?: msRest.ServiceCallback<Models.Remediation>): Promise<Models.RemediationsDeleteAtResourceGroupResponse> {
    return this.client.sendOperationRequest(
      {
        subscriptionId,
        resourceGroupName,
        remediationName,
        options
      },
      deleteAtResourceGroupOperationSpec,
      callback) as Promise<Models.RemediationsDeleteAtResourceGroupResponse>;
  }

  /**
   * Gets all deployments for a remediation at resource scope.
   * @param resourceId Resource ID.
   * @param remediationName The name of the remediation.
   * @param [options] The optional parameters
   * @returns Promise<Models.RemediationsListDeploymentsAtResourceResponse>
   */
  listDeploymentsAtResource(resourceId: string, remediationName: string, options?: Models.RemediationsListDeploymentsAtResourceOptionalParams): Promise<Models.RemediationsListDeploymentsAtResourceResponse>;
  /**
   * @param resourceId Resource ID.
   * @param remediationName The name of the remediation.
   * @param callback The callback
   */
  listDeploymentsAtResource(resourceId: string, remediationName: string, callback: msRest.ServiceCallback<Models.RemediationDeploymentsListResult>): void;
  /**
   * @param resourceId Resource ID.
   * @param remediationName The name of the remediation.
   * @param options The optional parameters
   * @param callback The callback
   */
  listDeploymentsAtResource(resourceId: string, remediationName: string, options: Models.RemediationsListDeploymentsAtResourceOptionalParams, callback: msRest.ServiceCallback<Models.RemediationDeploymentsListResult>): void;
  listDeploymentsAtResource(resourceId: string, remediationName: string, options?: Models.RemediationsListDeploymentsAtResourceOptionalParams | msRest.ServiceCallback<Models.RemediationDeploymentsListResult>, callback?: msRest.ServiceCallback<Models.RemediationDeploymentsListResult>): Promise<Models.RemediationsListDeploymentsAtResourceResponse> {
    return this.client.sendOperationRequest(
      {
        resourceId,
        remediationName,
        options
      },
      listDeploymentsAtResourceOperationSpec,
      callback) as Promise<Models.RemediationsListDeploymentsAtResourceResponse>;
  }

  /**
   * Cancel a remediation at resource scope.
   * @param resourceId Resource ID.
   * @param remediationName The name of the remediation.
   * @param [options] The optional parameters
   * @returns Promise<Models.RemediationsCancelAtResourceResponse>
   */
  cancelAtResource(resourceId: string, remediationName: string, options?: msRest.RequestOptionsBase): Promise<Models.RemediationsCancelAtResourceResponse>;
  /**
   * @param resourceId Resource ID.
   * @param remediationName The name of the remediation.
   * @param callback The callback
   */
  cancelAtResource(resourceId: string, remediationName: string, callback: msRest.ServiceCallback<Models.Remediation>): void;
  /**
   * @param resourceId Resource ID.
   * @param remediationName The name of the remediation.
   * @param options The optional parameters
   * @param callback The callback
   */
  cancelAtResource(resourceId: string, remediationName: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.Remediation>): void;
  cancelAtResource(resourceId: string, remediationName: string, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<Models.Remediation>, callback?: msRest.ServiceCallback<Models.Remediation>): Promise<Models.RemediationsCancelAtResourceResponse> {
    return this.client.sendOperationRequest(
      {
        resourceId,
        remediationName,
        options
      },
      cancelAtResourceOperationSpec,
      callback) as Promise<Models.RemediationsCancelAtResourceResponse>;
  }

  /**
   * Gets all remediations for a resource.
   * @param resourceId Resource ID.
   * @param [options] The optional parameters
   * @returns Promise<Models.RemediationsListForResourceResponse>
   */
  listForResource(resourceId: string, options?: Models.RemediationsListForResourceOptionalParams): Promise<Models.RemediationsListForResourceResponse>;
  /**
   * @param resourceId Resource ID.
   * @param callback The callback
   */
  listForResource(resourceId: string, callback: msRest.ServiceCallback<Models.RemediationListResult>): void;
  /**
   * @param resourceId Resource ID.
   * @param options The optional parameters
   * @param callback The callback
   */
  listForResource(resourceId: string, options: Models.RemediationsListForResourceOptionalParams, callback: msRest.ServiceCallback<Models.RemediationListResult>): void;
  listForResource(resourceId: string, options?: Models.RemediationsListForResourceOptionalParams | msRest.ServiceCallback<Models.RemediationListResult>, callback?: msRest.ServiceCallback<Models.RemediationListResult>): Promise<Models.RemediationsListForResourceResponse> {
    return this.client.sendOperationRequest(
      {
        resourceId,
        options
      },
      listForResourceOperationSpec,
      callback) as Promise<Models.RemediationsListForResourceResponse>;
  }

  /**
   * Creates or updates a remediation at resource scope.
   * @param resourceId Resource ID.
   * @param remediationName The name of the remediation.
   * @param parameters The remediation parameters.
   * @param [options] The optional parameters
   * @returns Promise<Models.RemediationsCreateOrUpdateAtResourceResponse>
   */
  createOrUpdateAtResource(resourceId: string, remediationName: string, parameters: Models.Remediation, options?: msRest.RequestOptionsBase): Promise<Models.RemediationsCreateOrUpdateAtResourceResponse>;
  /**
   * @param resourceId Resource ID.
   * @param remediationName The name of the remediation.
   * @param parameters The remediation parameters.
   * @param callback The callback
   */
  createOrUpdateAtResource(resourceId: string, remediationName: string, parameters: Models.Remediation, callback: msRest.ServiceCallback<Models.Remediation>): void;
  /**
   * @param resourceId Resource ID.
   * @param remediationName The name of the remediation.
   * @param parameters The remediation parameters.
   * @param options The optional parameters
   * @param callback The callback
   */
  createOrUpdateAtResource(resourceId: string, remediationName: string, parameters: Models.Remediation, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.Remediation>): void;
  createOrUpdateAtResource(resourceId: string, remediationName: string, parameters: Models.Remediation, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<Models.Remediation>, callback?: msRest.ServiceCallback<Models.Remediation>): Promise<Models.RemediationsCreateOrUpdateAtResourceResponse> {
    return this.client.sendOperationRequest(
      {
        resourceId,
        remediationName,
        parameters,
        options
      },
      createOrUpdateAtResourceOperationSpec,
      callback) as Promise<Models.RemediationsCreateOrUpdateAtResourceResponse>;
  }

  /**
   * Gets an existing remediation at resource scope.
   * @param resourceId Resource ID.
   * @param remediationName The name of the remediation.
   * @param [options] The optional parameters
   * @returns Promise<Models.RemediationsGetAtResourceResponse>
   */
  getAtResource(resourceId: string, remediationName: string, options?: msRest.RequestOptionsBase): Promise<Models.RemediationsGetAtResourceResponse>;
  /**
   * @param resourceId Resource ID.
   * @param remediationName The name of the remediation.
   * @param callback The callback
   */
  getAtResource(resourceId: string, remediationName: string, callback: msRest.ServiceCallback<Models.Remediation>): void;
  /**
   * @param resourceId Resource ID.
   * @param remediationName The name of the remediation.
   * @param options The optional parameters
   * @param callback The callback
   */
  getAtResource(resourceId: string, remediationName: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.Remediation>): void;
  getAtResource(resourceId: string, remediationName: string, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<Models.Remediation>, callback?: msRest.ServiceCallback<Models.Remediation>): Promise<Models.RemediationsGetAtResourceResponse> {
    return this.client.sendOperationRequest(
      {
        resourceId,
        remediationName,
        options
      },
      getAtResourceOperationSpec,
      callback) as Promise<Models.RemediationsGetAtResourceResponse>;
  }

  /**
   * Deletes an existing remediation at individual resource scope.
   * @param resourceId Resource ID.
   * @param remediationName The name of the remediation.
   * @param [options] The optional parameters
   * @returns Promise<Models.RemediationsDeleteAtResourceResponse>
   */
  deleteAtResource(resourceId: string, remediationName: string, options?: msRest.RequestOptionsBase): Promise<Models.RemediationsDeleteAtResourceResponse>;
  /**
   * @param resourceId Resource ID.
   * @param remediationName The name of the remediation.
   * @param callback The callback
   */
  deleteAtResource(resourceId: string, remediationName: string, callback: msRest.ServiceCallback<Models.Remediation>): void;
  /**
   * @param resourceId Resource ID.
   * @param remediationName The name of the remediation.
   * @param options The optional parameters
   * @param callback The callback
   */
  deleteAtResource(resourceId: string, remediationName: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.Remediation>): void;
  deleteAtResource(resourceId: string, remediationName: string, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<Models.Remediation>, callback?: msRest.ServiceCallback<Models.Remediation>): Promise<Models.RemediationsDeleteAtResourceResponse> {
    return this.client.sendOperationRequest(
      {
        resourceId,
        remediationName,
        options
      },
      deleteAtResourceOperationSpec,
      callback) as Promise<Models.RemediationsDeleteAtResourceResponse>;
  }

  /**
   * Gets all deployments for a remediation at management group scope.
   * @param nextPageLink The NextLink from the previous successful call to List operation.
   * @param [options] The optional parameters
   * @returns Promise<Models.RemediationsListDeploymentsAtManagementGroupNextResponse>
   */
  listDeploymentsAtManagementGroupNext(nextPageLink: string, options?: msRest.RequestOptionsBase): Promise<Models.RemediationsListDeploymentsAtManagementGroupNextResponse>;
  /**
   * @param nextPageLink The NextLink from the previous successful call to List operation.
   * @param callback The callback
   */
  listDeploymentsAtManagementGroupNext(nextPageLink: string, callback: msRest.ServiceCallback<Models.RemediationDeploymentsListResult>): void;
  /**
   * @param nextPageLink The NextLink from the previous successful call to List operation.
   * @param options The optional parameters
   * @param callback The callback
   */
  listDeploymentsAtManagementGroupNext(nextPageLink: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.RemediationDeploymentsListResult>): void;
  listDeploymentsAtManagementGroupNext(nextPageLink: string, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<Models.RemediationDeploymentsListResult>, callback?: msRest.ServiceCallback<Models.RemediationDeploymentsListResult>): Promise<Models.RemediationsListDeploymentsAtManagementGroupNextResponse> {
    return this.client.sendOperationRequest(
      {
        nextPageLink,
        options
      },
      listDeploymentsAtManagementGroupNextOperationSpec,
      callback) as Promise<Models.RemediationsListDeploymentsAtManagementGroupNextResponse>;
  }

  /**
   * Gets all remediations for the management group.
   * @param nextPageLink The NextLink from the previous successful call to List operation.
   * @param [options] The optional parameters
   * @returns Promise<Models.RemediationsListForManagementGroupNextResponse>
   */
  listForManagementGroupNext(nextPageLink: string, options?: msRest.RequestOptionsBase): Promise<Models.RemediationsListForManagementGroupNextResponse>;
  /**
   * @param nextPageLink The NextLink from the previous successful call to List operation.
   * @param callback The callback
   */
  listForManagementGroupNext(nextPageLink: string, callback: msRest.ServiceCallback<Models.RemediationListResult>): void;
  /**
   * @param nextPageLink The NextLink from the previous successful call to List operation.
   * @param options The optional parameters
   * @param callback The callback
   */
  listForManagementGroupNext(nextPageLink: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.RemediationListResult>): void;
  listForManagementGroupNext(nextPageLink: string, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<Models.RemediationListResult>, callback?: msRest.ServiceCallback<Models.RemediationListResult>): Promise<Models.RemediationsListForManagementGroupNextResponse> {
    return this.client.sendOperationRequest(
      {
        nextPageLink,
        options
      },
      listForManagementGroupNextOperationSpec,
      callback) as Promise<Models.RemediationsListForManagementGroupNextResponse>;
  }

  /**
   * Gets all deployments for a remediation at subscription scope.
   * @param nextPageLink The NextLink from the previous successful call to List operation.
   * @param [options] The optional parameters
   * @returns Promise<Models.RemediationsListDeploymentsAtSubscriptionNextResponse>
   */
  listDeploymentsAtSubscriptionNext(nextPageLink: string, options?: msRest.RequestOptionsBase): Promise<Models.RemediationsListDeploymentsAtSubscriptionNextResponse>;
  /**
   * @param nextPageLink The NextLink from the previous successful call to List operation.
   * @param callback The callback
   */
  listDeploymentsAtSubscriptionNext(nextPageLink: string, callback: msRest.ServiceCallback<Models.RemediationDeploymentsListResult>): void;
  /**
   * @param nextPageLink The NextLink from the previous successful call to List operation.
   * @param options The optional parameters
   * @param callback The callback
   */
  listDeploymentsAtSubscriptionNext(nextPageLink: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.RemediationDeploymentsListResult>): void;
  listDeploymentsAtSubscriptionNext(nextPageLink: string, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<Models.RemediationDeploymentsListResult>, callback?: msRest.ServiceCallback<Models.RemediationDeploymentsListResult>): Promise<Models.RemediationsListDeploymentsAtSubscriptionNextResponse> {
    return this.client.sendOperationRequest(
      {
        nextPageLink,
        options
      },
      listDeploymentsAtSubscriptionNextOperationSpec,
      callback) as Promise<Models.RemediationsListDeploymentsAtSubscriptionNextResponse>;
  }

  /**
   * Gets all remediations for the subscription.
   * @param nextPageLink The NextLink from the previous successful call to List operation.
   * @param [options] The optional parameters
   * @returns Promise<Models.RemediationsListForSubscriptionNextResponse>
   */
  listForSubscriptionNext(nextPageLink: string, options?: msRest.RequestOptionsBase): Promise<Models.RemediationsListForSubscriptionNextResponse>;
  /**
   * @param nextPageLink The NextLink from the previous successful call to List operation.
   * @param callback The callback
   */
  listForSubscriptionNext(nextPageLink: string, callback: msRest.ServiceCallback<Models.RemediationListResult>): void;
  /**
   * @param nextPageLink The NextLink from the previous successful call to List operation.
   * @param options The optional parameters
   * @param callback The callback
   */
  listForSubscriptionNext(nextPageLink: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.RemediationListResult>): void;
  listForSubscriptionNext(nextPageLink: string, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<Models.RemediationListResult>, callback?: msRest.ServiceCallback<Models.RemediationListResult>): Promise<Models.RemediationsListForSubscriptionNextResponse> {
    return this.client.sendOperationRequest(
      {
        nextPageLink,
        options
      },
      listForSubscriptionNextOperationSpec,
      callback) as Promise<Models.RemediationsListForSubscriptionNextResponse>;
  }

  /**
   * Gets all deployments for a remediation at resource group scope.
   * @param nextPageLink The NextLink from the previous successful call to List operation.
   * @param [options] The optional parameters
   * @returns Promise<Models.RemediationsListDeploymentsAtResourceGroupNextResponse>
   */
  listDeploymentsAtResourceGroupNext(nextPageLink: string, options?: msRest.RequestOptionsBase): Promise<Models.RemediationsListDeploymentsAtResourceGroupNextResponse>;
  /**
   * @param nextPageLink The NextLink from the previous successful call to List operation.
   * @param callback The callback
   */
  listDeploymentsAtResourceGroupNext(nextPageLink: string, callback: msRest.ServiceCallback<Models.RemediationDeploymentsListResult>): void;
  /**
   * @param nextPageLink The NextLink from the previous successful call to List operation.
   * @param options The optional parameters
   * @param callback The callback
   */
  listDeploymentsAtResourceGroupNext(nextPageLink: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.RemediationDeploymentsListResult>): void;
  listDeploymentsAtResourceGroupNext(nextPageLink: string, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<Models.RemediationDeploymentsListResult>, callback?: msRest.ServiceCallback<Models.RemediationDeploymentsListResult>): Promise<Models.RemediationsListDeploymentsAtResourceGroupNextResponse> {
    return this.client.sendOperationRequest(
      {
        nextPageLink,
        options
      },
      listDeploymentsAtResourceGroupNextOperationSpec,
      callback) as Promise<Models.RemediationsListDeploymentsAtResourceGroupNextResponse>;
  }

  /**
   * Gets all remediations for the subscription.
   * @param nextPageLink The NextLink from the previous successful call to List operation.
   * @param [options] The optional parameters
   * @returns Promise<Models.RemediationsListForResourceGroupNextResponse>
   */
  listForResourceGroupNext(nextPageLink: string, options?: msRest.RequestOptionsBase): Promise<Models.RemediationsListForResourceGroupNextResponse>;
  /**
   * @param nextPageLink The NextLink from the previous successful call to List operation.
   * @param callback The callback
   */
  listForResourceGroupNext(nextPageLink: string, callback: msRest.ServiceCallback<Models.RemediationListResult>): void;
  /**
   * @param nextPageLink The NextLink from the previous successful call to List operation.
   * @param options The optional parameters
   * @param callback The callback
   */
  listForResourceGroupNext(nextPageLink: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.RemediationListResult>): void;
  listForResourceGroupNext(nextPageLink: string, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<Models.RemediationListResult>, callback?: msRest.ServiceCallback<Models.RemediationListResult>): Promise<Models.RemediationsListForResourceGroupNextResponse> {
    return this.client.sendOperationRequest(
      {
        nextPageLink,
        options
      },
      listForResourceGroupNextOperationSpec,
      callback) as Promise<Models.RemediationsListForResourceGroupNextResponse>;
  }

  /**
   * Gets all deployments for a remediation at resource scope.
   * @param nextPageLink The NextLink from the previous successful call to List operation.
   * @param [options] The optional parameters
   * @returns Promise<Models.RemediationsListDeploymentsAtResourceNextResponse>
   */
  listDeploymentsAtResourceNext(nextPageLink: string, options?: msRest.RequestOptionsBase): Promise<Models.RemediationsListDeploymentsAtResourceNextResponse>;
  /**
   * @param nextPageLink The NextLink from the previous successful call to List operation.
   * @param callback The callback
   */
  listDeploymentsAtResourceNext(nextPageLink: string, callback: msRest.ServiceCallback<Models.RemediationDeploymentsListResult>): void;
  /**
   * @param nextPageLink The NextLink from the previous successful call to List operation.
   * @param options The optional parameters
   * @param callback The callback
   */
  listDeploymentsAtResourceNext(nextPageLink: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.RemediationDeploymentsListResult>): void;
  listDeploymentsAtResourceNext(nextPageLink: string, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<Models.RemediationDeploymentsListResult>, callback?: msRest.ServiceCallback<Models.RemediationDeploymentsListResult>): Promise<Models.RemediationsListDeploymentsAtResourceNextResponse> {
    return this.client.sendOperationRequest(
      {
        nextPageLink,
        options
      },
      listDeploymentsAtResourceNextOperationSpec,
      callback) as Promise<Models.RemediationsListDeploymentsAtResourceNextResponse>;
  }

  /**
   * Gets all remediations for a resource.
   * @param nextPageLink The NextLink from the previous successful call to List operation.
   * @param [options] The optional parameters
   * @returns Promise<Models.RemediationsListForResourceNextResponse>
   */
  listForResourceNext(nextPageLink: string, options?: msRest.RequestOptionsBase): Promise<Models.RemediationsListForResourceNextResponse>;
  /**
   * @param nextPageLink The NextLink from the previous successful call to List operation.
   * @param callback The callback
   */
  listForResourceNext(nextPageLink: string, callback: msRest.ServiceCallback<Models.RemediationListResult>): void;
  /**
   * @param nextPageLink The NextLink from the previous successful call to List operation.
   * @param options The optional parameters
   * @param callback The callback
   */
  listForResourceNext(nextPageLink: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.RemediationListResult>): void;
  listForResourceNext(nextPageLink: string, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<Models.RemediationListResult>, callback?: msRest.ServiceCallback<Models.RemediationListResult>): Promise<Models.RemediationsListForResourceNextResponse> {
    return this.client.sendOperationRequest(
      {
        nextPageLink,
        options
      },
      listForResourceNextOperationSpec,
      callback) as Promise<Models.RemediationsListForResourceNextResponse>;
  }
}

// Operation Specifications
const serializer = new msRest.Serializer(Mappers);
const listDeploymentsAtManagementGroupOperationSpec: msRest.OperationSpec = {
  httpMethod: "POST",
  path: "providers/{managementGroupsNamespace}/managementGroups/{managementGroupId}/providers/Microsoft.PolicyInsights/remediations/{remediationName}/listDeployments",
  urlParameters: [
    Parameters.managementGroupsNamespace,
    Parameters.managementGroupId,
    Parameters.remediationName
  ],
  queryParameters: [
    Parameters.apiVersion1,
    Parameters.top
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    200: {
      bodyMapper: Mappers.RemediationDeploymentsListResult
    },
    default: {
      bodyMapper: Mappers.ErrorResponse
    }
  },
  serializer
};

const cancelAtManagementGroupOperationSpec: msRest.OperationSpec = {
  httpMethod: "POST",
  path: "providers/{managementGroupsNamespace}/managementGroups/{managementGroupId}/providers/Microsoft.PolicyInsights/remediations/{remediationName}/cancel",
  urlParameters: [
    Parameters.managementGroupsNamespace,
    Parameters.managementGroupId,
    Parameters.remediationName
  ],
  queryParameters: [
    Parameters.apiVersion1
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    200: {
      bodyMapper: Mappers.Remediation
    },
    default: {
      bodyMapper: Mappers.ErrorResponse
    }
  },
  serializer
};

const listForManagementGroupOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "providers/{managementGroupsNamespace}/managementGroups/{managementGroupId}/providers/Microsoft.PolicyInsights/remediations",
  urlParameters: [
    Parameters.managementGroupsNamespace,
    Parameters.managementGroupId
  ],
  queryParameters: [
    Parameters.apiVersion1,
    Parameters.top,
    Parameters.filter
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    200: {
      bodyMapper: Mappers.RemediationListResult
    },
    default: {
      bodyMapper: Mappers.ErrorResponse
    }
  },
  serializer
};

const createOrUpdateAtManagementGroupOperationSpec: msRest.OperationSpec = {
  httpMethod: "PUT",
  path: "providers/{managementGroupsNamespace}/managementGroups/{managementGroupId}/providers/Microsoft.PolicyInsights/remediations/{remediationName}",
  urlParameters: [
    Parameters.managementGroupsNamespace,
    Parameters.managementGroupId,
    Parameters.remediationName
  ],
  queryParameters: [
    Parameters.apiVersion1
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  requestBody: {
    parameterPath: "parameters",
    mapper: {
      ...Mappers.Remediation,
      required: true
    }
  },
  responses: {
    200: {
      bodyMapper: Mappers.Remediation
    },
    201: {
      bodyMapper: Mappers.Remediation
    },
    default: {
      bodyMapper: Mappers.ErrorResponse
    }
  },
  serializer
};

const getAtManagementGroupOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "providers/{managementGroupsNamespace}/managementGroups/{managementGroupId}/providers/Microsoft.PolicyInsights/remediations/{remediationName}",
  urlParameters: [
    Parameters.managementGroupsNamespace,
    Parameters.managementGroupId,
    Parameters.remediationName
  ],
  queryParameters: [
    Parameters.apiVersion1
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    200: {
      bodyMapper: Mappers.Remediation
    },
    default: {
      bodyMapper: Mappers.ErrorResponse
    }
  },
  serializer
};

const deleteAtManagementGroupOperationSpec: msRest.OperationSpec = {
  httpMethod: "DELETE",
  path: "providers/{managementGroupsNamespace}/managementGroups/{managementGroupId}/providers/Microsoft.PolicyInsights/remediations/{remediationName}",
  urlParameters: [
    Parameters.managementGroupsNamespace,
    Parameters.managementGroupId,
    Parameters.remediationName
  ],
  queryParameters: [
    Parameters.apiVersion1
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    200: {
      bodyMapper: Mappers.Remediation
    },
    204: {},
    default: {
      bodyMapper: Mappers.ErrorResponse
    }
  },
  serializer
};

const listDeploymentsAtSubscriptionOperationSpec: msRest.OperationSpec = {
  httpMethod: "POST",
  path: "subscriptions/{subscriptionId}/providers/Microsoft.PolicyInsights/remediations/{remediationName}/listDeployments",
  urlParameters: [
    Parameters.subscriptionId,
    Parameters.remediationName
  ],
  queryParameters: [
    Parameters.apiVersion1,
    Parameters.top
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    200: {
      bodyMapper: Mappers.RemediationDeploymentsListResult
    },
    default: {
      bodyMapper: Mappers.ErrorResponse
    }
  },
  serializer
};

const cancelAtSubscriptionOperationSpec: msRest.OperationSpec = {
  httpMethod: "POST",
  path: "subscriptions/{subscriptionId}/providers/Microsoft.PolicyInsights/remediations/{remediationName}/cancel",
  urlParameters: [
    Parameters.subscriptionId,
    Parameters.remediationName
  ],
  queryParameters: [
    Parameters.apiVersion1
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    200: {
      bodyMapper: Mappers.Remediation
    },
    default: {
      bodyMapper: Mappers.ErrorResponse
    }
  },
  serializer
};

const listForSubscriptionOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "subscriptions/{subscriptionId}/providers/Microsoft.PolicyInsights/remediations",
  urlParameters: [
    Parameters.subscriptionId
  ],
  queryParameters: [
    Parameters.apiVersion1,
    Parameters.top,
    Parameters.filter
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    200: {
      bodyMapper: Mappers.RemediationListResult
    },
    default: {
      bodyMapper: Mappers.ErrorResponse
    }
  },
  serializer
};

const createOrUpdateAtSubscriptionOperationSpec: msRest.OperationSpec = {
  httpMethod: "PUT",
  path: "subscriptions/{subscriptionId}/providers/Microsoft.PolicyInsights/remediations/{remediationName}",
  urlParameters: [
    Parameters.subscriptionId,
    Parameters.remediationName
  ],
  queryParameters: [
    Parameters.apiVersion1
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  requestBody: {
    parameterPath: "parameters",
    mapper: {
      ...Mappers.Remediation,
      required: true
    }
  },
  responses: {
    200: {
      bodyMapper: Mappers.Remediation
    },
    201: {
      bodyMapper: Mappers.Remediation
    },
    default: {
      bodyMapper: Mappers.ErrorResponse
    }
  },
  serializer
};

const getAtSubscriptionOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "subscriptions/{subscriptionId}/providers/Microsoft.PolicyInsights/remediations/{remediationName}",
  urlParameters: [
    Parameters.subscriptionId,
    Parameters.remediationName
  ],
  queryParameters: [
    Parameters.apiVersion1
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    200: {
      bodyMapper: Mappers.Remediation
    },
    default: {
      bodyMapper: Mappers.ErrorResponse
    }
  },
  serializer
};

const deleteAtSubscriptionOperationSpec: msRest.OperationSpec = {
  httpMethod: "DELETE",
  path: "subscriptions/{subscriptionId}/providers/Microsoft.PolicyInsights/remediations/{remediationName}",
  urlParameters: [
    Parameters.subscriptionId,
    Parameters.remediationName
  ],
  queryParameters: [
    Parameters.apiVersion1
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    200: {
      bodyMapper: Mappers.Remediation
    },
    204: {},
    default: {
      bodyMapper: Mappers.ErrorResponse
    }
  },
  serializer
};

const listDeploymentsAtResourceGroupOperationSpec: msRest.OperationSpec = {
  httpMethod: "POST",
  path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.PolicyInsights/remediations/{remediationName}/listDeployments",
  urlParameters: [
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.remediationName
  ],
  queryParameters: [
    Parameters.apiVersion1,
    Parameters.top
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    200: {
      bodyMapper: Mappers.RemediationDeploymentsListResult
    },
    default: {
      bodyMapper: Mappers.ErrorResponse
    }
  },
  serializer
};

const cancelAtResourceGroupOperationSpec: msRest.OperationSpec = {
  httpMethod: "POST",
  path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.PolicyInsights/remediations/{remediationName}/cancel",
  urlParameters: [
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.remediationName
  ],
  queryParameters: [
    Parameters.apiVersion1
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    200: {
      bodyMapper: Mappers.Remediation
    },
    default: {
      bodyMapper: Mappers.ErrorResponse
    }
  },
  serializer
};

const listForResourceGroupOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.PolicyInsights/remediations",
  urlParameters: [
    Parameters.subscriptionId,
    Parameters.resourceGroupName
  ],
  queryParameters: [
    Parameters.apiVersion1,
    Parameters.top,
    Parameters.filter
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    200: {
      bodyMapper: Mappers.RemediationListResult
    },
    default: {
      bodyMapper: Mappers.ErrorResponse
    }
  },
  serializer
};

const createOrUpdateAtResourceGroupOperationSpec: msRest.OperationSpec = {
  httpMethod: "PUT",
  path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.PolicyInsights/remediations/{remediationName}",
  urlParameters: [
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.remediationName
  ],
  queryParameters: [
    Parameters.apiVersion1
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  requestBody: {
    parameterPath: "parameters",
    mapper: {
      ...Mappers.Remediation,
      required: true
    }
  },
  responses: {
    200: {
      bodyMapper: Mappers.Remediation
    },
    201: {
      bodyMapper: Mappers.Remediation
    },
    default: {
      bodyMapper: Mappers.ErrorResponse
    }
  },
  serializer
};

const getAtResourceGroupOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.PolicyInsights/remediations/{remediationName}",
  urlParameters: [
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.remediationName
  ],
  queryParameters: [
    Parameters.apiVersion1
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    200: {
      bodyMapper: Mappers.Remediation
    },
    default: {
      bodyMapper: Mappers.ErrorResponse
    }
  },
  serializer
};

const deleteAtResourceGroupOperationSpec: msRest.OperationSpec = {
  httpMethod: "DELETE",
  path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.PolicyInsights/remediations/{remediationName}",
  urlParameters: [
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.remediationName
  ],
  queryParameters: [
    Parameters.apiVersion1
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    200: {
      bodyMapper: Mappers.Remediation
    },
    204: {},
    default: {
      bodyMapper: Mappers.ErrorResponse
    }
  },
  serializer
};

const listDeploymentsAtResourceOperationSpec: msRest.OperationSpec = {
  httpMethod: "POST",
  path: "{resourceId}/providers/Microsoft.PolicyInsights/remediations/{remediationName}/listDeployments",
  urlParameters: [
    Parameters.resourceId,
    Parameters.remediationName
  ],
  queryParameters: [
    Parameters.apiVersion1,
    Parameters.top
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    200: {
      bodyMapper: Mappers.RemediationDeploymentsListResult
    },
    default: {
      bodyMapper: Mappers.ErrorResponse
    }
  },
  serializer
};

const cancelAtResourceOperationSpec: msRest.OperationSpec = {
  httpMethod: "POST",
  path: "{resourceId}/providers/Microsoft.PolicyInsights/remediations/{remediationName}/cancel",
  urlParameters: [
    Parameters.resourceId,
    Parameters.remediationName
  ],
  queryParameters: [
    Parameters.apiVersion1
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    200: {
      bodyMapper: Mappers.Remediation
    },
    default: {
      bodyMapper: Mappers.ErrorResponse
    }
  },
  serializer
};

const listForResourceOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "{resourceId}/providers/Microsoft.PolicyInsights/remediations",
  urlParameters: [
    Parameters.resourceId
  ],
  queryParameters: [
    Parameters.apiVersion1,
    Parameters.top,
    Parameters.filter
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    200: {
      bodyMapper: Mappers.RemediationListResult
    },
    default: {
      bodyMapper: Mappers.ErrorResponse
    }
  },
  serializer
};

const createOrUpdateAtResourceOperationSpec: msRest.OperationSpec = {
  httpMethod: "PUT",
  path: "{resourceId}/providers/Microsoft.PolicyInsights/remediations/{remediationName}",
  urlParameters: [
    Parameters.resourceId,
    Parameters.remediationName
  ],
  queryParameters: [
    Parameters.apiVersion1
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  requestBody: {
    parameterPath: "parameters",
    mapper: {
      ...Mappers.Remediation,
      required: true
    }
  },
  responses: {
    200: {
      bodyMapper: Mappers.Remediation
    },
    201: {
      bodyMapper: Mappers.Remediation
    },
    default: {
      bodyMapper: Mappers.ErrorResponse
    }
  },
  serializer
};

const getAtResourceOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "{resourceId}/providers/Microsoft.PolicyInsights/remediations/{remediationName}",
  urlParameters: [
    Parameters.resourceId,
    Parameters.remediationName
  ],
  queryParameters: [
    Parameters.apiVersion1
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    200: {
      bodyMapper: Mappers.Remediation
    },
    default: {
      bodyMapper: Mappers.ErrorResponse
    }
  },
  serializer
};

const deleteAtResourceOperationSpec: msRest.OperationSpec = {
  httpMethod: "DELETE",
  path: "{resourceId}/providers/Microsoft.PolicyInsights/remediations/{remediationName}",
  urlParameters: [
    Parameters.resourceId,
    Parameters.remediationName
  ],
  queryParameters: [
    Parameters.apiVersion1
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    200: {
      bodyMapper: Mappers.Remediation
    },
    204: {},
    default: {
      bodyMapper: Mappers.ErrorResponse
    }
  },
  serializer
};

const listDeploymentsAtManagementGroupNextOperationSpec: msRest.OperationSpec = {
  httpMethod: "POST",
  baseUrl: "https://management.azure.com",
  path: "{nextLink}",
  urlParameters: [
    Parameters.nextPageLink
  ],
  queryParameters: [
    Parameters.apiVersion1
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    200: {
      bodyMapper: Mappers.RemediationDeploymentsListResult
    },
    default: {
      bodyMapper: Mappers.ErrorResponse
    }
  },
  serializer
};

const listForManagementGroupNextOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  baseUrl: "https://management.azure.com",
  path: "{nextLink}",
  urlParameters: [
    Parameters.nextPageLink
  ],
  queryParameters: [
    Parameters.apiVersion1
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    200: {
      bodyMapper: Mappers.RemediationListResult
    },
    default: {
      bodyMapper: Mappers.ErrorResponse
    }
  },
  serializer
};

const listDeploymentsAtSubscriptionNextOperationSpec: msRest.OperationSpec = {
  httpMethod: "POST",
  baseUrl: "https://management.azure.com",
  path: "{nextLink}",
  urlParameters: [
    Parameters.nextPageLink
  ],
  queryParameters: [
    Parameters.apiVersion1
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    200: {
      bodyMapper: Mappers.RemediationDeploymentsListResult
    },
    default: {
      bodyMapper: Mappers.ErrorResponse
    }
  },
  serializer
};

const listForSubscriptionNextOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  baseUrl: "https://management.azure.com",
  path: "{nextLink}",
  urlParameters: [
    Parameters.nextPageLink
  ],
  queryParameters: [
    Parameters.apiVersion1
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    200: {
      bodyMapper: Mappers.RemediationListResult
    },
    default: {
      bodyMapper: Mappers.ErrorResponse
    }
  },
  serializer
};

const listDeploymentsAtResourceGroupNextOperationSpec: msRest.OperationSpec = {
  httpMethod: "POST",
  baseUrl: "https://management.azure.com",
  path: "{nextLink}",
  urlParameters: [
    Parameters.nextPageLink
  ],
  queryParameters: [
    Parameters.apiVersion1
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    200: {
      bodyMapper: Mappers.RemediationDeploymentsListResult
    },
    default: {
      bodyMapper: Mappers.ErrorResponse
    }
  },
  serializer
};

const listForResourceGroupNextOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  baseUrl: "https://management.azure.com",
  path: "{nextLink}",
  urlParameters: [
    Parameters.nextPageLink
  ],
  queryParameters: [
    Parameters.apiVersion1
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    200: {
      bodyMapper: Mappers.RemediationListResult
    },
    default: {
      bodyMapper: Mappers.ErrorResponse
    }
  },
  serializer
};

const listDeploymentsAtResourceNextOperationSpec: msRest.OperationSpec = {
  httpMethod: "POST",
  baseUrl: "https://management.azure.com",
  path: "{nextLink}",
  urlParameters: [
    Parameters.nextPageLink
  ],
  queryParameters: [
    Parameters.apiVersion1
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    200: {
      bodyMapper: Mappers.RemediationDeploymentsListResult
    },
    default: {
      bodyMapper: Mappers.ErrorResponse
    }
  },
  serializer
};

const listForResourceNextOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  baseUrl: "https://management.azure.com",
  path: "{nextLink}",
  urlParameters: [
    Parameters.nextPageLink
  ],
  queryParameters: [
    Parameters.apiVersion1
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    200: {
      bodyMapper: Mappers.RemediationListResult
    },
    default: {
      bodyMapper: Mappers.ErrorResponse
    }
  },
  serializer
};
