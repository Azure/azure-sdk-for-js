/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */

import { PagedAsyncIterableIterator } from "@azure/core-paging";
import { Remediations } from "../operationsInterfaces";
import * as coreClient from "@azure/core-client";
import * as Mappers from "../models/mappers";
import * as Parameters from "../models/parameters";
import { PolicyInsightsClient } from "../policyInsightsClient";
import {
  RemediationDeployment,
  RemediationsListDeploymentsAtManagementGroupNextOptionalParams,
  RemediationsListDeploymentsAtManagementGroupOptionalParams,
  Remediation,
  RemediationsListForManagementGroupNextOptionalParams,
  RemediationsListForManagementGroupOptionalParams,
  RemediationsListDeploymentsAtSubscriptionNextOptionalParams,
  RemediationsListDeploymentsAtSubscriptionOptionalParams,
  RemediationsListForSubscriptionNextOptionalParams,
  RemediationsListForSubscriptionOptionalParams,
  RemediationsListDeploymentsAtResourceGroupNextOptionalParams,
  RemediationsListDeploymentsAtResourceGroupOptionalParams,
  RemediationsListForResourceGroupNextOptionalParams,
  RemediationsListForResourceGroupOptionalParams,
  RemediationsListDeploymentsAtResourceNextOptionalParams,
  RemediationsListDeploymentsAtResourceOptionalParams,
  RemediationsListForResourceNextOptionalParams,
  RemediationsListForResourceOptionalParams,
  RemediationsListDeploymentsAtManagementGroupResponse,
  RemediationsCancelAtManagementGroupOptionalParams,
  RemediationsCancelAtManagementGroupResponse,
  RemediationsListForManagementGroupResponse,
  RemediationsCreateOrUpdateAtManagementGroupOptionalParams,
  RemediationsCreateOrUpdateAtManagementGroupResponse,
  RemediationsGetAtManagementGroupOptionalParams,
  RemediationsGetAtManagementGroupResponse,
  RemediationsDeleteAtManagementGroupOptionalParams,
  RemediationsDeleteAtManagementGroupResponse,
  RemediationsListDeploymentsAtSubscriptionResponse,
  RemediationsCancelAtSubscriptionOptionalParams,
  RemediationsCancelAtSubscriptionResponse,
  RemediationsListForSubscriptionResponse,
  RemediationsCreateOrUpdateAtSubscriptionOptionalParams,
  RemediationsCreateOrUpdateAtSubscriptionResponse,
  RemediationsGetAtSubscriptionOptionalParams,
  RemediationsGetAtSubscriptionResponse,
  RemediationsDeleteAtSubscriptionOptionalParams,
  RemediationsDeleteAtSubscriptionResponse,
  RemediationsListDeploymentsAtResourceGroupResponse,
  RemediationsCancelAtResourceGroupOptionalParams,
  RemediationsCancelAtResourceGroupResponse,
  RemediationsListForResourceGroupResponse,
  RemediationsCreateOrUpdateAtResourceGroupOptionalParams,
  RemediationsCreateOrUpdateAtResourceGroupResponse,
  RemediationsGetAtResourceGroupOptionalParams,
  RemediationsGetAtResourceGroupResponse,
  RemediationsDeleteAtResourceGroupOptionalParams,
  RemediationsDeleteAtResourceGroupResponse,
  RemediationsListDeploymentsAtResourceResponse,
  RemediationsCancelAtResourceOptionalParams,
  RemediationsCancelAtResourceResponse,
  RemediationsListForResourceResponse,
  RemediationsCreateOrUpdateAtResourceOptionalParams,
  RemediationsCreateOrUpdateAtResourceResponse,
  RemediationsGetAtResourceOptionalParams,
  RemediationsGetAtResourceResponse,
  RemediationsDeleteAtResourceOptionalParams,
  RemediationsDeleteAtResourceResponse,
  RemediationsListDeploymentsAtManagementGroupNextResponse,
  RemediationsListForManagementGroupNextResponse,
  RemediationsListDeploymentsAtSubscriptionNextResponse,
  RemediationsListForSubscriptionNextResponse,
  RemediationsListDeploymentsAtResourceGroupNextResponse,
  RemediationsListForResourceGroupNextResponse,
  RemediationsListDeploymentsAtResourceNextResponse,
  RemediationsListForResourceNextResponse
} from "../models";

/// <reference lib="esnext.asynciterable" />
/** Class containing Remediations operations. */
export class RemediationsImpl implements Remediations {
  private readonly client: PolicyInsightsClient;

  /**
   * Initialize a new instance of the class Remediations class.
   * @param client Reference to the service client
   */
  constructor(client: PolicyInsightsClient) {
    this.client = client;
  }

  /**
   * Gets all deployments for a remediation at management group scope.
   * @param managementGroupId Management group ID.
   * @param remediationName The name of the remediation.
   * @param options The options parameters.
   */
  public listDeploymentsAtManagementGroup(
    managementGroupId: string,
    remediationName: string,
    options?: RemediationsListDeploymentsAtManagementGroupOptionalParams
  ): PagedAsyncIterableIterator<RemediationDeployment> {
    const iter = this.listDeploymentsAtManagementGroupPagingAll(
      managementGroupId,
      remediationName,
      options
    );
    return {
      next() {
        return iter.next();
      },
      [Symbol.asyncIterator]() {
        return this;
      },
      byPage: () => {
        return this.listDeploymentsAtManagementGroupPagingPage(
          managementGroupId,
          remediationName,
          options
        );
      }
    };
  }

  private async *listDeploymentsAtManagementGroupPagingPage(
    managementGroupId: string,
    remediationName: string,
    options?: RemediationsListDeploymentsAtManagementGroupOptionalParams
  ): AsyncIterableIterator<RemediationDeployment[]> {
    let result = await this._listDeploymentsAtManagementGroup(
      managementGroupId,
      remediationName,
      options
    );
    yield result.value || [];
    let continuationToken = result.nextLink;
    while (continuationToken) {
      result = await this._listDeploymentsAtManagementGroupNext(
        managementGroupId,
        remediationName,
        continuationToken,
        options
      );
      continuationToken = result.nextLink;
      yield result.value || [];
    }
  }

  private async *listDeploymentsAtManagementGroupPagingAll(
    managementGroupId: string,
    remediationName: string,
    options?: RemediationsListDeploymentsAtManagementGroupOptionalParams
  ): AsyncIterableIterator<RemediationDeployment> {
    for await (const page of this.listDeploymentsAtManagementGroupPagingPage(
      managementGroupId,
      remediationName,
      options
    )) {
      yield* page;
    }
  }

  /**
   * Gets all remediations for the management group.
   * @param managementGroupId Management group ID.
   * @param options The options parameters.
   */
  public listForManagementGroup(
    managementGroupId: string,
    options?: RemediationsListForManagementGroupOptionalParams
  ): PagedAsyncIterableIterator<Remediation> {
    const iter = this.listForManagementGroupPagingAll(
      managementGroupId,
      options
    );
    return {
      next() {
        return iter.next();
      },
      [Symbol.asyncIterator]() {
        return this;
      },
      byPage: () => {
        return this.listForManagementGroupPagingPage(
          managementGroupId,
          options
        );
      }
    };
  }

  private async *listForManagementGroupPagingPage(
    managementGroupId: string,
    options?: RemediationsListForManagementGroupOptionalParams
  ): AsyncIterableIterator<Remediation[]> {
    let result = await this._listForManagementGroup(managementGroupId, options);
    yield result.value || [];
    let continuationToken = result.nextLink;
    while (continuationToken) {
      result = await this._listForManagementGroupNext(
        managementGroupId,
        continuationToken,
        options
      );
      continuationToken = result.nextLink;
      yield result.value || [];
    }
  }

  private async *listForManagementGroupPagingAll(
    managementGroupId: string,
    options?: RemediationsListForManagementGroupOptionalParams
  ): AsyncIterableIterator<Remediation> {
    for await (const page of this.listForManagementGroupPagingPage(
      managementGroupId,
      options
    )) {
      yield* page;
    }
  }

  /**
   * Gets all deployments for a remediation at subscription scope.
   * @param remediationName The name of the remediation.
   * @param options The options parameters.
   */
  public listDeploymentsAtSubscription(
    remediationName: string,
    options?: RemediationsListDeploymentsAtSubscriptionOptionalParams
  ): PagedAsyncIterableIterator<RemediationDeployment> {
    const iter = this.listDeploymentsAtSubscriptionPagingAll(
      remediationName,
      options
    );
    return {
      next() {
        return iter.next();
      },
      [Symbol.asyncIterator]() {
        return this;
      },
      byPage: () => {
        return this.listDeploymentsAtSubscriptionPagingPage(
          remediationName,
          options
        );
      }
    };
  }

  private async *listDeploymentsAtSubscriptionPagingPage(
    remediationName: string,
    options?: RemediationsListDeploymentsAtSubscriptionOptionalParams
  ): AsyncIterableIterator<RemediationDeployment[]> {
    let result = await this._listDeploymentsAtSubscription(
      remediationName,
      options
    );
    yield result.value || [];
    let continuationToken = result.nextLink;
    while (continuationToken) {
      result = await this._listDeploymentsAtSubscriptionNext(
        remediationName,
        continuationToken,
        options
      );
      continuationToken = result.nextLink;
      yield result.value || [];
    }
  }

  private async *listDeploymentsAtSubscriptionPagingAll(
    remediationName: string,
    options?: RemediationsListDeploymentsAtSubscriptionOptionalParams
  ): AsyncIterableIterator<RemediationDeployment> {
    for await (const page of this.listDeploymentsAtSubscriptionPagingPage(
      remediationName,
      options
    )) {
      yield* page;
    }
  }

  /**
   * Gets all remediations for the subscription.
   * @param options The options parameters.
   */
  public listForSubscription(
    options?: RemediationsListForSubscriptionOptionalParams
  ): PagedAsyncIterableIterator<Remediation> {
    const iter = this.listForSubscriptionPagingAll(options);
    return {
      next() {
        return iter.next();
      },
      [Symbol.asyncIterator]() {
        return this;
      },
      byPage: () => {
        return this.listForSubscriptionPagingPage(options);
      }
    };
  }

  private async *listForSubscriptionPagingPage(
    options?: RemediationsListForSubscriptionOptionalParams
  ): AsyncIterableIterator<Remediation[]> {
    let result = await this._listForSubscription(options);
    yield result.value || [];
    let continuationToken = result.nextLink;
    while (continuationToken) {
      result = await this._listForSubscriptionNext(continuationToken, options);
      continuationToken = result.nextLink;
      yield result.value || [];
    }
  }

  private async *listForSubscriptionPagingAll(
    options?: RemediationsListForSubscriptionOptionalParams
  ): AsyncIterableIterator<Remediation> {
    for await (const page of this.listForSubscriptionPagingPage(options)) {
      yield* page;
    }
  }

  /**
   * Gets all deployments for a remediation at resource group scope.
   * @param resourceGroupName Resource group name.
   * @param remediationName The name of the remediation.
   * @param options The options parameters.
   */
  public listDeploymentsAtResourceGroup(
    resourceGroupName: string,
    remediationName: string,
    options?: RemediationsListDeploymentsAtResourceGroupOptionalParams
  ): PagedAsyncIterableIterator<RemediationDeployment> {
    const iter = this.listDeploymentsAtResourceGroupPagingAll(
      resourceGroupName,
      remediationName,
      options
    );
    return {
      next() {
        return iter.next();
      },
      [Symbol.asyncIterator]() {
        return this;
      },
      byPage: () => {
        return this.listDeploymentsAtResourceGroupPagingPage(
          resourceGroupName,
          remediationName,
          options
        );
      }
    };
  }

  private async *listDeploymentsAtResourceGroupPagingPage(
    resourceGroupName: string,
    remediationName: string,
    options?: RemediationsListDeploymentsAtResourceGroupOptionalParams
  ): AsyncIterableIterator<RemediationDeployment[]> {
    let result = await this._listDeploymentsAtResourceGroup(
      resourceGroupName,
      remediationName,
      options
    );
    yield result.value || [];
    let continuationToken = result.nextLink;
    while (continuationToken) {
      result = await this._listDeploymentsAtResourceGroupNext(
        resourceGroupName,
        remediationName,
        continuationToken,
        options
      );
      continuationToken = result.nextLink;
      yield result.value || [];
    }
  }

  private async *listDeploymentsAtResourceGroupPagingAll(
    resourceGroupName: string,
    remediationName: string,
    options?: RemediationsListDeploymentsAtResourceGroupOptionalParams
  ): AsyncIterableIterator<RemediationDeployment> {
    for await (const page of this.listDeploymentsAtResourceGroupPagingPage(
      resourceGroupName,
      remediationName,
      options
    )) {
      yield* page;
    }
  }

  /**
   * Gets all remediations for the subscription.
   * @param resourceGroupName Resource group name.
   * @param options The options parameters.
   */
  public listForResourceGroup(
    resourceGroupName: string,
    options?: RemediationsListForResourceGroupOptionalParams
  ): PagedAsyncIterableIterator<Remediation> {
    const iter = this.listForResourceGroupPagingAll(resourceGroupName, options);
    return {
      next() {
        return iter.next();
      },
      [Symbol.asyncIterator]() {
        return this;
      },
      byPage: () => {
        return this.listForResourceGroupPagingPage(resourceGroupName, options);
      }
    };
  }

  private async *listForResourceGroupPagingPage(
    resourceGroupName: string,
    options?: RemediationsListForResourceGroupOptionalParams
  ): AsyncIterableIterator<Remediation[]> {
    let result = await this._listForResourceGroup(resourceGroupName, options);
    yield result.value || [];
    let continuationToken = result.nextLink;
    while (continuationToken) {
      result = await this._listForResourceGroupNext(
        resourceGroupName,
        continuationToken,
        options
      );
      continuationToken = result.nextLink;
      yield result.value || [];
    }
  }

  private async *listForResourceGroupPagingAll(
    resourceGroupName: string,
    options?: RemediationsListForResourceGroupOptionalParams
  ): AsyncIterableIterator<Remediation> {
    for await (const page of this.listForResourceGroupPagingPage(
      resourceGroupName,
      options
    )) {
      yield* page;
    }
  }

  /**
   * Gets all deployments for a remediation at resource scope.
   * @param resourceId Resource ID.
   * @param remediationName The name of the remediation.
   * @param options The options parameters.
   */
  public listDeploymentsAtResource(
    resourceId: string,
    remediationName: string,
    options?: RemediationsListDeploymentsAtResourceOptionalParams
  ): PagedAsyncIterableIterator<RemediationDeployment> {
    const iter = this.listDeploymentsAtResourcePagingAll(
      resourceId,
      remediationName,
      options
    );
    return {
      next() {
        return iter.next();
      },
      [Symbol.asyncIterator]() {
        return this;
      },
      byPage: () => {
        return this.listDeploymentsAtResourcePagingPage(
          resourceId,
          remediationName,
          options
        );
      }
    };
  }

  private async *listDeploymentsAtResourcePagingPage(
    resourceId: string,
    remediationName: string,
    options?: RemediationsListDeploymentsAtResourceOptionalParams
  ): AsyncIterableIterator<RemediationDeployment[]> {
    let result = await this._listDeploymentsAtResource(
      resourceId,
      remediationName,
      options
    );
    yield result.value || [];
    let continuationToken = result.nextLink;
    while (continuationToken) {
      result = await this._listDeploymentsAtResourceNext(
        resourceId,
        remediationName,
        continuationToken,
        options
      );
      continuationToken = result.nextLink;
      yield result.value || [];
    }
  }

  private async *listDeploymentsAtResourcePagingAll(
    resourceId: string,
    remediationName: string,
    options?: RemediationsListDeploymentsAtResourceOptionalParams
  ): AsyncIterableIterator<RemediationDeployment> {
    for await (const page of this.listDeploymentsAtResourcePagingPage(
      resourceId,
      remediationName,
      options
    )) {
      yield* page;
    }
  }

  /**
   * Gets all remediations for a resource.
   * @param resourceId Resource ID.
   * @param options The options parameters.
   */
  public listForResource(
    resourceId: string,
    options?: RemediationsListForResourceOptionalParams
  ): PagedAsyncIterableIterator<Remediation> {
    const iter = this.listForResourcePagingAll(resourceId, options);
    return {
      next() {
        return iter.next();
      },
      [Symbol.asyncIterator]() {
        return this;
      },
      byPage: () => {
        return this.listForResourcePagingPage(resourceId, options);
      }
    };
  }

  private async *listForResourcePagingPage(
    resourceId: string,
    options?: RemediationsListForResourceOptionalParams
  ): AsyncIterableIterator<Remediation[]> {
    let result = await this._listForResource(resourceId, options);
    yield result.value || [];
    let continuationToken = result.nextLink;
    while (continuationToken) {
      result = await this._listForResourceNext(
        resourceId,
        continuationToken,
        options
      );
      continuationToken = result.nextLink;
      yield result.value || [];
    }
  }

  private async *listForResourcePagingAll(
    resourceId: string,
    options?: RemediationsListForResourceOptionalParams
  ): AsyncIterableIterator<Remediation> {
    for await (const page of this.listForResourcePagingPage(
      resourceId,
      options
    )) {
      yield* page;
    }
  }

  /**
   * Gets all deployments for a remediation at management group scope.
   * @param managementGroupId Management group ID.
   * @param remediationName The name of the remediation.
   * @param options The options parameters.
   */
  private _listDeploymentsAtManagementGroup(
    managementGroupId: string,
    remediationName: string,
    options?: RemediationsListDeploymentsAtManagementGroupOptionalParams
  ): Promise<RemediationsListDeploymentsAtManagementGroupResponse> {
    return this.client.sendOperationRequest(
      { managementGroupId, remediationName, options },
      listDeploymentsAtManagementGroupOperationSpec
    );
  }

  /**
   * Cancels a remediation at management group scope.
   * @param managementGroupId Management group ID.
   * @param remediationName The name of the remediation.
   * @param options The options parameters.
   */
  cancelAtManagementGroup(
    managementGroupId: string,
    remediationName: string,
    options?: RemediationsCancelAtManagementGroupOptionalParams
  ): Promise<RemediationsCancelAtManagementGroupResponse> {
    return this.client.sendOperationRequest(
      { managementGroupId, remediationName, options },
      cancelAtManagementGroupOperationSpec
    );
  }

  /**
   * Gets all remediations for the management group.
   * @param managementGroupId Management group ID.
   * @param options The options parameters.
   */
  private _listForManagementGroup(
    managementGroupId: string,
    options?: RemediationsListForManagementGroupOptionalParams
  ): Promise<RemediationsListForManagementGroupResponse> {
    return this.client.sendOperationRequest(
      { managementGroupId, options },
      listForManagementGroupOperationSpec
    );
  }

  /**
   * Creates or updates a remediation at management group scope.
   * @param managementGroupId Management group ID.
   * @param remediationName The name of the remediation.
   * @param parameters The remediation parameters.
   * @param options The options parameters.
   */
  createOrUpdateAtManagementGroup(
    managementGroupId: string,
    remediationName: string,
    parameters: Remediation,
    options?: RemediationsCreateOrUpdateAtManagementGroupOptionalParams
  ): Promise<RemediationsCreateOrUpdateAtManagementGroupResponse> {
    return this.client.sendOperationRequest(
      { managementGroupId, remediationName, parameters, options },
      createOrUpdateAtManagementGroupOperationSpec
    );
  }

  /**
   * Gets an existing remediation at management group scope.
   * @param managementGroupId Management group ID.
   * @param remediationName The name of the remediation.
   * @param options The options parameters.
   */
  getAtManagementGroup(
    managementGroupId: string,
    remediationName: string,
    options?: RemediationsGetAtManagementGroupOptionalParams
  ): Promise<RemediationsGetAtManagementGroupResponse> {
    return this.client.sendOperationRequest(
      { managementGroupId, remediationName, options },
      getAtManagementGroupOperationSpec
    );
  }

  /**
   * Deletes an existing remediation at management group scope.
   * @param managementGroupId Management group ID.
   * @param remediationName The name of the remediation.
   * @param options The options parameters.
   */
  deleteAtManagementGroup(
    managementGroupId: string,
    remediationName: string,
    options?: RemediationsDeleteAtManagementGroupOptionalParams
  ): Promise<RemediationsDeleteAtManagementGroupResponse> {
    return this.client.sendOperationRequest(
      { managementGroupId, remediationName, options },
      deleteAtManagementGroupOperationSpec
    );
  }

  /**
   * Gets all deployments for a remediation at subscription scope.
   * @param remediationName The name of the remediation.
   * @param options The options parameters.
   */
  private _listDeploymentsAtSubscription(
    remediationName: string,
    options?: RemediationsListDeploymentsAtSubscriptionOptionalParams
  ): Promise<RemediationsListDeploymentsAtSubscriptionResponse> {
    return this.client.sendOperationRequest(
      { remediationName, options },
      listDeploymentsAtSubscriptionOperationSpec
    );
  }

  /**
   * Cancels a remediation at subscription scope.
   * @param remediationName The name of the remediation.
   * @param options The options parameters.
   */
  cancelAtSubscription(
    remediationName: string,
    options?: RemediationsCancelAtSubscriptionOptionalParams
  ): Promise<RemediationsCancelAtSubscriptionResponse> {
    return this.client.sendOperationRequest(
      { remediationName, options },
      cancelAtSubscriptionOperationSpec
    );
  }

  /**
   * Gets all remediations for the subscription.
   * @param options The options parameters.
   */
  private _listForSubscription(
    options?: RemediationsListForSubscriptionOptionalParams
  ): Promise<RemediationsListForSubscriptionResponse> {
    return this.client.sendOperationRequest(
      { options },
      listForSubscriptionOperationSpec
    );
  }

  /**
   * Creates or updates a remediation at subscription scope.
   * @param remediationName The name of the remediation.
   * @param parameters The remediation parameters.
   * @param options The options parameters.
   */
  createOrUpdateAtSubscription(
    remediationName: string,
    parameters: Remediation,
    options?: RemediationsCreateOrUpdateAtSubscriptionOptionalParams
  ): Promise<RemediationsCreateOrUpdateAtSubscriptionResponse> {
    return this.client.sendOperationRequest(
      { remediationName, parameters, options },
      createOrUpdateAtSubscriptionOperationSpec
    );
  }

  /**
   * Gets an existing remediation at subscription scope.
   * @param remediationName The name of the remediation.
   * @param options The options parameters.
   */
  getAtSubscription(
    remediationName: string,
    options?: RemediationsGetAtSubscriptionOptionalParams
  ): Promise<RemediationsGetAtSubscriptionResponse> {
    return this.client.sendOperationRequest(
      { remediationName, options },
      getAtSubscriptionOperationSpec
    );
  }

  /**
   * Deletes an existing remediation at subscription scope.
   * @param remediationName The name of the remediation.
   * @param options The options parameters.
   */
  deleteAtSubscription(
    remediationName: string,
    options?: RemediationsDeleteAtSubscriptionOptionalParams
  ): Promise<RemediationsDeleteAtSubscriptionResponse> {
    return this.client.sendOperationRequest(
      { remediationName, options },
      deleteAtSubscriptionOperationSpec
    );
  }

  /**
   * Gets all deployments for a remediation at resource group scope.
   * @param resourceGroupName Resource group name.
   * @param remediationName The name of the remediation.
   * @param options The options parameters.
   */
  private _listDeploymentsAtResourceGroup(
    resourceGroupName: string,
    remediationName: string,
    options?: RemediationsListDeploymentsAtResourceGroupOptionalParams
  ): Promise<RemediationsListDeploymentsAtResourceGroupResponse> {
    return this.client.sendOperationRequest(
      { resourceGroupName, remediationName, options },
      listDeploymentsAtResourceGroupOperationSpec
    );
  }

  /**
   * Cancels a remediation at resource group scope.
   * @param resourceGroupName Resource group name.
   * @param remediationName The name of the remediation.
   * @param options The options parameters.
   */
  cancelAtResourceGroup(
    resourceGroupName: string,
    remediationName: string,
    options?: RemediationsCancelAtResourceGroupOptionalParams
  ): Promise<RemediationsCancelAtResourceGroupResponse> {
    return this.client.sendOperationRequest(
      { resourceGroupName, remediationName, options },
      cancelAtResourceGroupOperationSpec
    );
  }

  /**
   * Gets all remediations for the subscription.
   * @param resourceGroupName Resource group name.
   * @param options The options parameters.
   */
  private _listForResourceGroup(
    resourceGroupName: string,
    options?: RemediationsListForResourceGroupOptionalParams
  ): Promise<RemediationsListForResourceGroupResponse> {
    return this.client.sendOperationRequest(
      { resourceGroupName, options },
      listForResourceGroupOperationSpec
    );
  }

  /**
   * Creates or updates a remediation at resource group scope.
   * @param resourceGroupName Resource group name.
   * @param remediationName The name of the remediation.
   * @param parameters The remediation parameters.
   * @param options The options parameters.
   */
  createOrUpdateAtResourceGroup(
    resourceGroupName: string,
    remediationName: string,
    parameters: Remediation,
    options?: RemediationsCreateOrUpdateAtResourceGroupOptionalParams
  ): Promise<RemediationsCreateOrUpdateAtResourceGroupResponse> {
    return this.client.sendOperationRequest(
      { resourceGroupName, remediationName, parameters, options },
      createOrUpdateAtResourceGroupOperationSpec
    );
  }

  /**
   * Gets an existing remediation at resource group scope.
   * @param resourceGroupName Resource group name.
   * @param remediationName The name of the remediation.
   * @param options The options parameters.
   */
  getAtResourceGroup(
    resourceGroupName: string,
    remediationName: string,
    options?: RemediationsGetAtResourceGroupOptionalParams
  ): Promise<RemediationsGetAtResourceGroupResponse> {
    return this.client.sendOperationRequest(
      { resourceGroupName, remediationName, options },
      getAtResourceGroupOperationSpec
    );
  }

  /**
   * Deletes an existing remediation at resource group scope.
   * @param resourceGroupName Resource group name.
   * @param remediationName The name of the remediation.
   * @param options The options parameters.
   */
  deleteAtResourceGroup(
    resourceGroupName: string,
    remediationName: string,
    options?: RemediationsDeleteAtResourceGroupOptionalParams
  ): Promise<RemediationsDeleteAtResourceGroupResponse> {
    return this.client.sendOperationRequest(
      { resourceGroupName, remediationName, options },
      deleteAtResourceGroupOperationSpec
    );
  }

  /**
   * Gets all deployments for a remediation at resource scope.
   * @param resourceId Resource ID.
   * @param remediationName The name of the remediation.
   * @param options The options parameters.
   */
  private _listDeploymentsAtResource(
    resourceId: string,
    remediationName: string,
    options?: RemediationsListDeploymentsAtResourceOptionalParams
  ): Promise<RemediationsListDeploymentsAtResourceResponse> {
    return this.client.sendOperationRequest(
      { resourceId, remediationName, options },
      listDeploymentsAtResourceOperationSpec
    );
  }

  /**
   * Cancel a remediation at resource scope.
   * @param resourceId Resource ID.
   * @param remediationName The name of the remediation.
   * @param options The options parameters.
   */
  cancelAtResource(
    resourceId: string,
    remediationName: string,
    options?: RemediationsCancelAtResourceOptionalParams
  ): Promise<RemediationsCancelAtResourceResponse> {
    return this.client.sendOperationRequest(
      { resourceId, remediationName, options },
      cancelAtResourceOperationSpec
    );
  }

  /**
   * Gets all remediations for a resource.
   * @param resourceId Resource ID.
   * @param options The options parameters.
   */
  private _listForResource(
    resourceId: string,
    options?: RemediationsListForResourceOptionalParams
  ): Promise<RemediationsListForResourceResponse> {
    return this.client.sendOperationRequest(
      { resourceId, options },
      listForResourceOperationSpec
    );
  }

  /**
   * Creates or updates a remediation at resource scope.
   * @param resourceId Resource ID.
   * @param remediationName The name of the remediation.
   * @param parameters The remediation parameters.
   * @param options The options parameters.
   */
  createOrUpdateAtResource(
    resourceId: string,
    remediationName: string,
    parameters: Remediation,
    options?: RemediationsCreateOrUpdateAtResourceOptionalParams
  ): Promise<RemediationsCreateOrUpdateAtResourceResponse> {
    return this.client.sendOperationRequest(
      { resourceId, remediationName, parameters, options },
      createOrUpdateAtResourceOperationSpec
    );
  }

  /**
   * Gets an existing remediation at resource scope.
   * @param resourceId Resource ID.
   * @param remediationName The name of the remediation.
   * @param options The options parameters.
   */
  getAtResource(
    resourceId: string,
    remediationName: string,
    options?: RemediationsGetAtResourceOptionalParams
  ): Promise<RemediationsGetAtResourceResponse> {
    return this.client.sendOperationRequest(
      { resourceId, remediationName, options },
      getAtResourceOperationSpec
    );
  }

  /**
   * Deletes an existing remediation at individual resource scope.
   * @param resourceId Resource ID.
   * @param remediationName The name of the remediation.
   * @param options The options parameters.
   */
  deleteAtResource(
    resourceId: string,
    remediationName: string,
    options?: RemediationsDeleteAtResourceOptionalParams
  ): Promise<RemediationsDeleteAtResourceResponse> {
    return this.client.sendOperationRequest(
      { resourceId, remediationName, options },
      deleteAtResourceOperationSpec
    );
  }

  /**
   * ListDeploymentsAtManagementGroupNext
   * @param managementGroupId Management group ID.
   * @param remediationName The name of the remediation.
   * @param nextLink The nextLink from the previous successful call to the
   *                 ListDeploymentsAtManagementGroup method.
   * @param options The options parameters.
   */
  private _listDeploymentsAtManagementGroupNext(
    managementGroupId: string,
    remediationName: string,
    nextLink: string,
    options?: RemediationsListDeploymentsAtManagementGroupNextOptionalParams
  ): Promise<RemediationsListDeploymentsAtManagementGroupNextResponse> {
    return this.client.sendOperationRequest(
      { managementGroupId, remediationName, nextLink, options },
      listDeploymentsAtManagementGroupNextOperationSpec
    );
  }

  /**
   * ListForManagementGroupNext
   * @param managementGroupId Management group ID.
   * @param nextLink The nextLink from the previous successful call to the ListForManagementGroup method.
   * @param options The options parameters.
   */
  private _listForManagementGroupNext(
    managementGroupId: string,
    nextLink: string,
    options?: RemediationsListForManagementGroupNextOptionalParams
  ): Promise<RemediationsListForManagementGroupNextResponse> {
    return this.client.sendOperationRequest(
      { managementGroupId, nextLink, options },
      listForManagementGroupNextOperationSpec
    );
  }

  /**
   * ListDeploymentsAtSubscriptionNext
   * @param remediationName The name of the remediation.
   * @param nextLink The nextLink from the previous successful call to the ListDeploymentsAtSubscription
   *                 method.
   * @param options The options parameters.
   */
  private _listDeploymentsAtSubscriptionNext(
    remediationName: string,
    nextLink: string,
    options?: RemediationsListDeploymentsAtSubscriptionNextOptionalParams
  ): Promise<RemediationsListDeploymentsAtSubscriptionNextResponse> {
    return this.client.sendOperationRequest(
      { remediationName, nextLink, options },
      listDeploymentsAtSubscriptionNextOperationSpec
    );
  }

  /**
   * ListForSubscriptionNext
   * @param nextLink The nextLink from the previous successful call to the ListForSubscription method.
   * @param options The options parameters.
   */
  private _listForSubscriptionNext(
    nextLink: string,
    options?: RemediationsListForSubscriptionNextOptionalParams
  ): Promise<RemediationsListForSubscriptionNextResponse> {
    return this.client.sendOperationRequest(
      { nextLink, options },
      listForSubscriptionNextOperationSpec
    );
  }

  /**
   * ListDeploymentsAtResourceGroupNext
   * @param resourceGroupName Resource group name.
   * @param remediationName The name of the remediation.
   * @param nextLink The nextLink from the previous successful call to the ListDeploymentsAtResourceGroup
   *                 method.
   * @param options The options parameters.
   */
  private _listDeploymentsAtResourceGroupNext(
    resourceGroupName: string,
    remediationName: string,
    nextLink: string,
    options?: RemediationsListDeploymentsAtResourceGroupNextOptionalParams
  ): Promise<RemediationsListDeploymentsAtResourceGroupNextResponse> {
    return this.client.sendOperationRequest(
      { resourceGroupName, remediationName, nextLink, options },
      listDeploymentsAtResourceGroupNextOperationSpec
    );
  }

  /**
   * ListForResourceGroupNext
   * @param resourceGroupName Resource group name.
   * @param nextLink The nextLink from the previous successful call to the ListForResourceGroup method.
   * @param options The options parameters.
   */
  private _listForResourceGroupNext(
    resourceGroupName: string,
    nextLink: string,
    options?: RemediationsListForResourceGroupNextOptionalParams
  ): Promise<RemediationsListForResourceGroupNextResponse> {
    return this.client.sendOperationRequest(
      { resourceGroupName, nextLink, options },
      listForResourceGroupNextOperationSpec
    );
  }

  /**
   * ListDeploymentsAtResourceNext
   * @param resourceId Resource ID.
   * @param remediationName The name of the remediation.
   * @param nextLink The nextLink from the previous successful call to the ListDeploymentsAtResource
   *                 method.
   * @param options The options parameters.
   */
  private _listDeploymentsAtResourceNext(
    resourceId: string,
    remediationName: string,
    nextLink: string,
    options?: RemediationsListDeploymentsAtResourceNextOptionalParams
  ): Promise<RemediationsListDeploymentsAtResourceNextResponse> {
    return this.client.sendOperationRequest(
      { resourceId, remediationName, nextLink, options },
      listDeploymentsAtResourceNextOperationSpec
    );
  }

  /**
   * ListForResourceNext
   * @param resourceId Resource ID.
   * @param nextLink The nextLink from the previous successful call to the ListForResource method.
   * @param options The options parameters.
   */
  private _listForResourceNext(
    resourceId: string,
    nextLink: string,
    options?: RemediationsListForResourceNextOptionalParams
  ): Promise<RemediationsListForResourceNextResponse> {
    return this.client.sendOperationRequest(
      { resourceId, nextLink, options },
      listForResourceNextOperationSpec
    );
  }
}
// Operation Specifications
const serializer = coreClient.createSerializer(Mappers, /* isXml */ false);

const listDeploymentsAtManagementGroupOperationSpec: coreClient.OperationSpec = {
  path:
    "/providers/{managementGroupsNamespace}/managementGroups/{managementGroupId}/providers/Microsoft.PolicyInsights/remediations/{remediationName}/listDeployments",
  httpMethod: "POST",
  responses: {
    200: {
      bodyMapper: Mappers.RemediationDeploymentsListResult
    },
    default: {
      bodyMapper: Mappers.ErrorResponse
    }
  },
  queryParameters: [Parameters.top, Parameters.apiVersion1],
  urlParameters: [
    Parameters.$host,
    Parameters.managementGroupsNamespace,
    Parameters.managementGroupId,
    Parameters.remediationName
  ],
  headerParameters: [Parameters.accept],
  serializer
};
const cancelAtManagementGroupOperationSpec: coreClient.OperationSpec = {
  path:
    "/providers/{managementGroupsNamespace}/managementGroups/{managementGroupId}/providers/Microsoft.PolicyInsights/remediations/{remediationName}/cancel",
  httpMethod: "POST",
  responses: {
    200: {
      bodyMapper: Mappers.Remediation
    },
    default: {
      bodyMapper: Mappers.ErrorResponse
    }
  },
  queryParameters: [Parameters.apiVersion1],
  urlParameters: [
    Parameters.$host,
    Parameters.managementGroupsNamespace,
    Parameters.managementGroupId,
    Parameters.remediationName
  ],
  headerParameters: [Parameters.accept],
  serializer
};
const listForManagementGroupOperationSpec: coreClient.OperationSpec = {
  path:
    "/providers/{managementGroupsNamespace}/managementGroups/{managementGroupId}/providers/Microsoft.PolicyInsights/remediations",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.RemediationListResult
    },
    default: {
      bodyMapper: Mappers.ErrorResponse
    }
  },
  queryParameters: [Parameters.top, Parameters.filter, Parameters.apiVersion1],
  urlParameters: [
    Parameters.$host,
    Parameters.managementGroupsNamespace,
    Parameters.managementGroupId
  ],
  headerParameters: [Parameters.accept],
  serializer
};
const createOrUpdateAtManagementGroupOperationSpec: coreClient.OperationSpec = {
  path:
    "/providers/{managementGroupsNamespace}/managementGroups/{managementGroupId}/providers/Microsoft.PolicyInsights/remediations/{remediationName}",
  httpMethod: "PUT",
  responses: {
    200: {
      bodyMapper: Mappers.Remediation
    },
    201: {
      bodyMapper: Mappers.Remediation
    },
    default: {
      bodyMapper: Mappers.ErrorResponse
    }
  },
  requestBody: Parameters.parameters,
  queryParameters: [Parameters.apiVersion1],
  urlParameters: [
    Parameters.$host,
    Parameters.managementGroupsNamespace,
    Parameters.managementGroupId,
    Parameters.remediationName
  ],
  headerParameters: [Parameters.accept, Parameters.contentType],
  mediaType: "json",
  serializer
};
const getAtManagementGroupOperationSpec: coreClient.OperationSpec = {
  path:
    "/providers/{managementGroupsNamespace}/managementGroups/{managementGroupId}/providers/Microsoft.PolicyInsights/remediations/{remediationName}",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.Remediation
    },
    default: {
      bodyMapper: Mappers.ErrorResponse
    }
  },
  queryParameters: [Parameters.apiVersion1],
  urlParameters: [
    Parameters.$host,
    Parameters.managementGroupsNamespace,
    Parameters.managementGroupId,
    Parameters.remediationName
  ],
  headerParameters: [Parameters.accept],
  serializer
};
const deleteAtManagementGroupOperationSpec: coreClient.OperationSpec = {
  path:
    "/providers/{managementGroupsNamespace}/managementGroups/{managementGroupId}/providers/Microsoft.PolicyInsights/remediations/{remediationName}",
  httpMethod: "DELETE",
  responses: {
    200: {
      bodyMapper: Mappers.Remediation
    },
    204: {},
    default: {
      bodyMapper: Mappers.ErrorResponse
    }
  },
  queryParameters: [Parameters.apiVersion1],
  urlParameters: [
    Parameters.$host,
    Parameters.managementGroupsNamespace,
    Parameters.managementGroupId,
    Parameters.remediationName
  ],
  headerParameters: [Parameters.accept],
  serializer
};
const listDeploymentsAtSubscriptionOperationSpec: coreClient.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/providers/Microsoft.PolicyInsights/remediations/{remediationName}/listDeployments",
  httpMethod: "POST",
  responses: {
    200: {
      bodyMapper: Mappers.RemediationDeploymentsListResult
    },
    default: {
      bodyMapper: Mappers.ErrorResponse
    }
  },
  queryParameters: [Parameters.top, Parameters.apiVersion1],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.remediationName
  ],
  headerParameters: [Parameters.accept],
  serializer
};
const cancelAtSubscriptionOperationSpec: coreClient.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/providers/Microsoft.PolicyInsights/remediations/{remediationName}/cancel",
  httpMethod: "POST",
  responses: {
    200: {
      bodyMapper: Mappers.Remediation
    },
    default: {
      bodyMapper: Mappers.ErrorResponse
    }
  },
  queryParameters: [Parameters.apiVersion1],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.remediationName
  ],
  headerParameters: [Parameters.accept],
  serializer
};
const listForSubscriptionOperationSpec: coreClient.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/providers/Microsoft.PolicyInsights/remediations",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.RemediationListResult
    },
    default: {
      bodyMapper: Mappers.ErrorResponse
    }
  },
  queryParameters: [Parameters.top, Parameters.filter, Parameters.apiVersion1],
  urlParameters: [Parameters.$host, Parameters.subscriptionId],
  headerParameters: [Parameters.accept],
  serializer
};
const createOrUpdateAtSubscriptionOperationSpec: coreClient.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/providers/Microsoft.PolicyInsights/remediations/{remediationName}",
  httpMethod: "PUT",
  responses: {
    200: {
      bodyMapper: Mappers.Remediation
    },
    201: {
      bodyMapper: Mappers.Remediation
    },
    default: {
      bodyMapper: Mappers.ErrorResponse
    }
  },
  requestBody: Parameters.parameters,
  queryParameters: [Parameters.apiVersion1],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.remediationName
  ],
  headerParameters: [Parameters.accept, Parameters.contentType],
  mediaType: "json",
  serializer
};
const getAtSubscriptionOperationSpec: coreClient.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/providers/Microsoft.PolicyInsights/remediations/{remediationName}",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.Remediation
    },
    default: {
      bodyMapper: Mappers.ErrorResponse
    }
  },
  queryParameters: [Parameters.apiVersion1],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.remediationName
  ],
  headerParameters: [Parameters.accept],
  serializer
};
const deleteAtSubscriptionOperationSpec: coreClient.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/providers/Microsoft.PolicyInsights/remediations/{remediationName}",
  httpMethod: "DELETE",
  responses: {
    200: {
      bodyMapper: Mappers.Remediation
    },
    204: {},
    default: {
      bodyMapper: Mappers.ErrorResponse
    }
  },
  queryParameters: [Parameters.apiVersion1],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.remediationName
  ],
  headerParameters: [Parameters.accept],
  serializer
};
const listDeploymentsAtResourceGroupOperationSpec: coreClient.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.PolicyInsights/remediations/{remediationName}/listDeployments",
  httpMethod: "POST",
  responses: {
    200: {
      bodyMapper: Mappers.RemediationDeploymentsListResult
    },
    default: {
      bodyMapper: Mappers.ErrorResponse
    }
  },
  queryParameters: [Parameters.top, Parameters.apiVersion1],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.remediationName
  ],
  headerParameters: [Parameters.accept],
  serializer
};
const cancelAtResourceGroupOperationSpec: coreClient.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.PolicyInsights/remediations/{remediationName}/cancel",
  httpMethod: "POST",
  responses: {
    200: {
      bodyMapper: Mappers.Remediation
    },
    default: {
      bodyMapper: Mappers.ErrorResponse
    }
  },
  queryParameters: [Parameters.apiVersion1],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.remediationName
  ],
  headerParameters: [Parameters.accept],
  serializer
};
const listForResourceGroupOperationSpec: coreClient.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.PolicyInsights/remediations",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.RemediationListResult
    },
    default: {
      bodyMapper: Mappers.ErrorResponse
    }
  },
  queryParameters: [Parameters.top, Parameters.filter, Parameters.apiVersion1],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName
  ],
  headerParameters: [Parameters.accept],
  serializer
};
const createOrUpdateAtResourceGroupOperationSpec: coreClient.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.PolicyInsights/remediations/{remediationName}",
  httpMethod: "PUT",
  responses: {
    200: {
      bodyMapper: Mappers.Remediation
    },
    201: {
      bodyMapper: Mappers.Remediation
    },
    default: {
      bodyMapper: Mappers.ErrorResponse
    }
  },
  requestBody: Parameters.parameters,
  queryParameters: [Parameters.apiVersion1],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.remediationName
  ],
  headerParameters: [Parameters.accept, Parameters.contentType],
  mediaType: "json",
  serializer
};
const getAtResourceGroupOperationSpec: coreClient.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.PolicyInsights/remediations/{remediationName}",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.Remediation
    },
    default: {
      bodyMapper: Mappers.ErrorResponse
    }
  },
  queryParameters: [Parameters.apiVersion1],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.remediationName
  ],
  headerParameters: [Parameters.accept],
  serializer
};
const deleteAtResourceGroupOperationSpec: coreClient.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.PolicyInsights/remediations/{remediationName}",
  httpMethod: "DELETE",
  responses: {
    200: {
      bodyMapper: Mappers.Remediation
    },
    204: {},
    default: {
      bodyMapper: Mappers.ErrorResponse
    }
  },
  queryParameters: [Parameters.apiVersion1],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.remediationName
  ],
  headerParameters: [Parameters.accept],
  serializer
};
const listDeploymentsAtResourceOperationSpec: coreClient.OperationSpec = {
  path:
    "/{resourceId}/providers/Microsoft.PolicyInsights/remediations/{remediationName}/listDeployments",
  httpMethod: "POST",
  responses: {
    200: {
      bodyMapper: Mappers.RemediationDeploymentsListResult
    },
    default: {
      bodyMapper: Mappers.ErrorResponse
    }
  },
  queryParameters: [Parameters.top, Parameters.apiVersion1],
  urlParameters: [
    Parameters.$host,
    Parameters.resourceId,
    Parameters.remediationName
  ],
  headerParameters: [Parameters.accept],
  serializer
};
const cancelAtResourceOperationSpec: coreClient.OperationSpec = {
  path:
    "/{resourceId}/providers/Microsoft.PolicyInsights/remediations/{remediationName}/cancel",
  httpMethod: "POST",
  responses: {
    200: {
      bodyMapper: Mappers.Remediation
    },
    default: {
      bodyMapper: Mappers.ErrorResponse
    }
  },
  queryParameters: [Parameters.apiVersion1],
  urlParameters: [
    Parameters.$host,
    Parameters.resourceId,
    Parameters.remediationName
  ],
  headerParameters: [Parameters.accept],
  serializer
};
const listForResourceOperationSpec: coreClient.OperationSpec = {
  path: "/{resourceId}/providers/Microsoft.PolicyInsights/remediations",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.RemediationListResult
    },
    default: {
      bodyMapper: Mappers.ErrorResponse
    }
  },
  queryParameters: [Parameters.top, Parameters.filter, Parameters.apiVersion1],
  urlParameters: [Parameters.$host, Parameters.resourceId],
  headerParameters: [Parameters.accept],
  serializer
};
const createOrUpdateAtResourceOperationSpec: coreClient.OperationSpec = {
  path:
    "/{resourceId}/providers/Microsoft.PolicyInsights/remediations/{remediationName}",
  httpMethod: "PUT",
  responses: {
    200: {
      bodyMapper: Mappers.Remediation
    },
    201: {
      bodyMapper: Mappers.Remediation
    },
    default: {
      bodyMapper: Mappers.ErrorResponse
    }
  },
  requestBody: Parameters.parameters,
  queryParameters: [Parameters.apiVersion1],
  urlParameters: [
    Parameters.$host,
    Parameters.resourceId,
    Parameters.remediationName
  ],
  headerParameters: [Parameters.accept, Parameters.contentType],
  mediaType: "json",
  serializer
};
const getAtResourceOperationSpec: coreClient.OperationSpec = {
  path:
    "/{resourceId}/providers/Microsoft.PolicyInsights/remediations/{remediationName}",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.Remediation
    },
    default: {
      bodyMapper: Mappers.ErrorResponse
    }
  },
  queryParameters: [Parameters.apiVersion1],
  urlParameters: [
    Parameters.$host,
    Parameters.resourceId,
    Parameters.remediationName
  ],
  headerParameters: [Parameters.accept],
  serializer
};
const deleteAtResourceOperationSpec: coreClient.OperationSpec = {
  path:
    "/{resourceId}/providers/Microsoft.PolicyInsights/remediations/{remediationName}",
  httpMethod: "DELETE",
  responses: {
    200: {
      bodyMapper: Mappers.Remediation
    },
    204: {},
    default: {
      bodyMapper: Mappers.ErrorResponse
    }
  },
  queryParameters: [Parameters.apiVersion1],
  urlParameters: [
    Parameters.$host,
    Parameters.resourceId,
    Parameters.remediationName
  ],
  headerParameters: [Parameters.accept],
  serializer
};
const listDeploymentsAtManagementGroupNextOperationSpec: coreClient.OperationSpec = {
  path: "{nextLink}",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.RemediationDeploymentsListResult
    },
    default: {
      bodyMapper: Mappers.ErrorResponse
    }
  },
  queryParameters: [Parameters.top, Parameters.apiVersion1],
  urlParameters: [
    Parameters.$host,
    Parameters.managementGroupsNamespace,
    Parameters.nextLink,
    Parameters.managementGroupId,
    Parameters.remediationName
  ],
  headerParameters: [Parameters.accept],
  serializer
};
const listForManagementGroupNextOperationSpec: coreClient.OperationSpec = {
  path: "{nextLink}",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.RemediationListResult
    },
    default: {
      bodyMapper: Mappers.ErrorResponse
    }
  },
  queryParameters: [Parameters.top, Parameters.filter, Parameters.apiVersion1],
  urlParameters: [
    Parameters.$host,
    Parameters.managementGroupsNamespace,
    Parameters.nextLink,
    Parameters.managementGroupId
  ],
  headerParameters: [Parameters.accept],
  serializer
};
const listDeploymentsAtSubscriptionNextOperationSpec: coreClient.OperationSpec = {
  path: "{nextLink}",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.RemediationDeploymentsListResult
    },
    default: {
      bodyMapper: Mappers.ErrorResponse
    }
  },
  queryParameters: [Parameters.top, Parameters.apiVersion1],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.nextLink,
    Parameters.remediationName
  ],
  headerParameters: [Parameters.accept],
  serializer
};
const listForSubscriptionNextOperationSpec: coreClient.OperationSpec = {
  path: "{nextLink}",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.RemediationListResult
    },
    default: {
      bodyMapper: Mappers.ErrorResponse
    }
  },
  queryParameters: [Parameters.top, Parameters.filter, Parameters.apiVersion1],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.nextLink
  ],
  headerParameters: [Parameters.accept],
  serializer
};
const listDeploymentsAtResourceGroupNextOperationSpec: coreClient.OperationSpec = {
  path: "{nextLink}",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.RemediationDeploymentsListResult
    },
    default: {
      bodyMapper: Mappers.ErrorResponse
    }
  },
  queryParameters: [Parameters.top, Parameters.apiVersion1],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.nextLink,
    Parameters.remediationName
  ],
  headerParameters: [Parameters.accept],
  serializer
};
const listForResourceGroupNextOperationSpec: coreClient.OperationSpec = {
  path: "{nextLink}",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.RemediationListResult
    },
    default: {
      bodyMapper: Mappers.ErrorResponse
    }
  },
  queryParameters: [Parameters.top, Parameters.filter, Parameters.apiVersion1],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.nextLink
  ],
  headerParameters: [Parameters.accept],
  serializer
};
const listDeploymentsAtResourceNextOperationSpec: coreClient.OperationSpec = {
  path: "{nextLink}",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.RemediationDeploymentsListResult
    },
    default: {
      bodyMapper: Mappers.ErrorResponse
    }
  },
  queryParameters: [Parameters.top, Parameters.apiVersion1],
  urlParameters: [
    Parameters.$host,
    Parameters.resourceId,
    Parameters.nextLink,
    Parameters.remediationName
  ],
  headerParameters: [Parameters.accept],
  serializer
};
const listForResourceNextOperationSpec: coreClient.OperationSpec = {
  path: "{nextLink}",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.RemediationListResult
    },
    default: {
      bodyMapper: Mappers.ErrorResponse
    }
  },
  queryParameters: [Parameters.top, Parameters.filter, Parameters.apiVersion1],
  urlParameters: [Parameters.$host, Parameters.resourceId, Parameters.nextLink],
  headerParameters: [Parameters.accept],
  serializer
};
