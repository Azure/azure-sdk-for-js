/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is
 * regenerated.
 */

import * as msRest from "@azure/ms-rest-js";
import * as msRestAzure from "@azure/ms-rest-azure-js";
import * as Models from "../models";
import * as Mappers from "../models/attestationsMappers";
import * as Parameters from "../models/parameters";
import { PolicyInsightsClientContext } from "../policyInsightsClientContext";

/** Class representing a Attestations. */
export class Attestations {
  private readonly client: PolicyInsightsClientContext;

  /**
   * Create a Attestations.
   * @param {PolicyInsightsClientContext} client Reference to the service client.
   */
  constructor(client: PolicyInsightsClientContext) {
    this.client = client;
  }

  /**
   * Gets all attestations for the subscription.
   * @param subscriptionId The ID of the target subscription.
   * @param [options] The optional parameters
   * @returns Promise<Models.AttestationsListForSubscriptionResponse>
   */
  listForSubscription(subscriptionId: string, options?: Models.AttestationsListForSubscriptionOptionalParams): Promise<Models.AttestationsListForSubscriptionResponse>;
  /**
   * @param subscriptionId The ID of the target subscription.
   * @param callback The callback
   */
  listForSubscription(subscriptionId: string, callback: msRest.ServiceCallback<Models.AttestationListResult>): void;
  /**
   * @param subscriptionId The ID of the target subscription.
   * @param options The optional parameters
   * @param callback The callback
   */
  listForSubscription(subscriptionId: string, options: Models.AttestationsListForSubscriptionOptionalParams, callback: msRest.ServiceCallback<Models.AttestationListResult>): void;
  listForSubscription(subscriptionId: string, options?: Models.AttestationsListForSubscriptionOptionalParams | msRest.ServiceCallback<Models.AttestationListResult>, callback?: msRest.ServiceCallback<Models.AttestationListResult>): Promise<Models.AttestationsListForSubscriptionResponse> {
    return this.client.sendOperationRequest(
      {
        subscriptionId,
        options
      },
      listForSubscriptionOperationSpec,
      callback) as Promise<Models.AttestationsListForSubscriptionResponse>;
  }

  /**
   * Creates or updates an attestation at subscription scope.
   * @param subscriptionId The ID of the target subscription.
   * @param attestationName The name of the attestation.
   * @param parameters The attestation parameters.
   * @param [options] The optional parameters
   * @returns Promise<Models.AttestationsCreateOrUpdateAtSubscriptionResponse>
   */
  createOrUpdateAtSubscription(subscriptionId: string, attestationName: string, parameters: Models.Attestation, options?: msRest.RequestOptionsBase): Promise<Models.AttestationsCreateOrUpdateAtSubscriptionResponse> {
    return this.beginCreateOrUpdateAtSubscription(subscriptionId,attestationName,parameters,options)
      .then(lroPoller => lroPoller.pollUntilFinished()) as Promise<Models.AttestationsCreateOrUpdateAtSubscriptionResponse>;
  }

  /**
   * Gets an existing attestation at subscription scope.
   * @param subscriptionId The ID of the target subscription.
   * @param attestationName The name of the attestation.
   * @param [options] The optional parameters
   * @returns Promise<Models.AttestationsGetAtSubscriptionResponse>
   */
  getAtSubscription(subscriptionId: string, attestationName: string, options?: msRest.RequestOptionsBase): Promise<Models.AttestationsGetAtSubscriptionResponse>;
  /**
   * @param subscriptionId The ID of the target subscription.
   * @param attestationName The name of the attestation.
   * @param callback The callback
   */
  getAtSubscription(subscriptionId: string, attestationName: string, callback: msRest.ServiceCallback<Models.Attestation>): void;
  /**
   * @param subscriptionId The ID of the target subscription.
   * @param attestationName The name of the attestation.
   * @param options The optional parameters
   * @param callback The callback
   */
  getAtSubscription(subscriptionId: string, attestationName: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.Attestation>): void;
  getAtSubscription(subscriptionId: string, attestationName: string, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<Models.Attestation>, callback?: msRest.ServiceCallback<Models.Attestation>): Promise<Models.AttestationsGetAtSubscriptionResponse> {
    return this.client.sendOperationRequest(
      {
        subscriptionId,
        attestationName,
        options
      },
      getAtSubscriptionOperationSpec,
      callback) as Promise<Models.AttestationsGetAtSubscriptionResponse>;
  }

  /**
   * Deletes an existing attestation at subscription scope.
   * @param subscriptionId The ID of the target subscription.
   * @param attestationName The name of the attestation.
   * @param [options] The optional parameters
   * @returns Promise<msRest.RestResponse>
   */
  deleteAtSubscription(subscriptionId: string, attestationName: string, options?: msRest.RequestOptionsBase): Promise<msRest.RestResponse>;
  /**
   * @param subscriptionId The ID of the target subscription.
   * @param attestationName The name of the attestation.
   * @param callback The callback
   */
  deleteAtSubscription(subscriptionId: string, attestationName: string, callback: msRest.ServiceCallback<void>): void;
  /**
   * @param subscriptionId The ID of the target subscription.
   * @param attestationName The name of the attestation.
   * @param options The optional parameters
   * @param callback The callback
   */
  deleteAtSubscription(subscriptionId: string, attestationName: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<void>): void;
  deleteAtSubscription(subscriptionId: string, attestationName: string, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<void>, callback?: msRest.ServiceCallback<void>): Promise<msRest.RestResponse> {
    return this.client.sendOperationRequest(
      {
        subscriptionId,
        attestationName,
        options
      },
      deleteAtSubscriptionOperationSpec,
      callback);
  }

  /**
   * Gets all attestations for the resource group.
   * @param subscriptionId The ID of the target subscription.
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param [options] The optional parameters
   * @returns Promise<Models.AttestationsListForResourceGroupResponse>
   */
  listForResourceGroup(subscriptionId: string, resourceGroupName: string, options?: Models.AttestationsListForResourceGroupOptionalParams): Promise<Models.AttestationsListForResourceGroupResponse>;
  /**
   * @param subscriptionId The ID of the target subscription.
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param callback The callback
   */
  listForResourceGroup(subscriptionId: string, resourceGroupName: string, callback: msRest.ServiceCallback<Models.AttestationListResult>): void;
  /**
   * @param subscriptionId The ID of the target subscription.
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param options The optional parameters
   * @param callback The callback
   */
  listForResourceGroup(subscriptionId: string, resourceGroupName: string, options: Models.AttestationsListForResourceGroupOptionalParams, callback: msRest.ServiceCallback<Models.AttestationListResult>): void;
  listForResourceGroup(subscriptionId: string, resourceGroupName: string, options?: Models.AttestationsListForResourceGroupOptionalParams | msRest.ServiceCallback<Models.AttestationListResult>, callback?: msRest.ServiceCallback<Models.AttestationListResult>): Promise<Models.AttestationsListForResourceGroupResponse> {
    return this.client.sendOperationRequest(
      {
        subscriptionId,
        resourceGroupName,
        options
      },
      listForResourceGroupOperationSpec,
      callback) as Promise<Models.AttestationsListForResourceGroupResponse>;
  }

  /**
   * Creates or updates an attestation at resource group scope.
   * @param subscriptionId The ID of the target subscription.
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param attestationName The name of the attestation.
   * @param parameters The attestation parameters.
   * @param [options] The optional parameters
   * @returns Promise<Models.AttestationsCreateOrUpdateAtResourceGroupResponse>
   */
  createOrUpdateAtResourceGroup(subscriptionId: string, resourceGroupName: string, attestationName: string, parameters: Models.Attestation, options?: msRest.RequestOptionsBase): Promise<Models.AttestationsCreateOrUpdateAtResourceGroupResponse> {
    return this.beginCreateOrUpdateAtResourceGroup(subscriptionId,resourceGroupName,attestationName,parameters,options)
      .then(lroPoller => lroPoller.pollUntilFinished()) as Promise<Models.AttestationsCreateOrUpdateAtResourceGroupResponse>;
  }

  /**
   * Gets an existing attestation at resource group scope.
   * @param subscriptionId The ID of the target subscription.
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param attestationName The name of the attestation.
   * @param [options] The optional parameters
   * @returns Promise<Models.AttestationsGetAtResourceGroupResponse>
   */
  getAtResourceGroup(subscriptionId: string, resourceGroupName: string, attestationName: string, options?: msRest.RequestOptionsBase): Promise<Models.AttestationsGetAtResourceGroupResponse>;
  /**
   * @param subscriptionId The ID of the target subscription.
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param attestationName The name of the attestation.
   * @param callback The callback
   */
  getAtResourceGroup(subscriptionId: string, resourceGroupName: string, attestationName: string, callback: msRest.ServiceCallback<Models.Attestation>): void;
  /**
   * @param subscriptionId The ID of the target subscription.
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param attestationName The name of the attestation.
   * @param options The optional parameters
   * @param callback The callback
   */
  getAtResourceGroup(subscriptionId: string, resourceGroupName: string, attestationName: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.Attestation>): void;
  getAtResourceGroup(subscriptionId: string, resourceGroupName: string, attestationName: string, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<Models.Attestation>, callback?: msRest.ServiceCallback<Models.Attestation>): Promise<Models.AttestationsGetAtResourceGroupResponse> {
    return this.client.sendOperationRequest(
      {
        subscriptionId,
        resourceGroupName,
        attestationName,
        options
      },
      getAtResourceGroupOperationSpec,
      callback) as Promise<Models.AttestationsGetAtResourceGroupResponse>;
  }

  /**
   * Deletes an existing attestation at resource group scope.
   * @param subscriptionId The ID of the target subscription.
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param attestationName The name of the attestation.
   * @param [options] The optional parameters
   * @returns Promise<msRest.RestResponse>
   */
  deleteAtResourceGroup(subscriptionId: string, resourceGroupName: string, attestationName: string, options?: msRest.RequestOptionsBase): Promise<msRest.RestResponse>;
  /**
   * @param subscriptionId The ID of the target subscription.
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param attestationName The name of the attestation.
   * @param callback The callback
   */
  deleteAtResourceGroup(subscriptionId: string, resourceGroupName: string, attestationName: string, callback: msRest.ServiceCallback<void>): void;
  /**
   * @param subscriptionId The ID of the target subscription.
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param attestationName The name of the attestation.
   * @param options The optional parameters
   * @param callback The callback
   */
  deleteAtResourceGroup(subscriptionId: string, resourceGroupName: string, attestationName: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<void>): void;
  deleteAtResourceGroup(subscriptionId: string, resourceGroupName: string, attestationName: string, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<void>, callback?: msRest.ServiceCallback<void>): Promise<msRest.RestResponse> {
    return this.client.sendOperationRequest(
      {
        subscriptionId,
        resourceGroupName,
        attestationName,
        options
      },
      deleteAtResourceGroupOperationSpec,
      callback);
  }

  /**
   * Gets all attestations for a resource.
   * @param resourceId Resource ID.
   * @param [options] The optional parameters
   * @returns Promise<Models.AttestationsListForResourceResponse>
   */
  listForResource(resourceId: string, options?: Models.AttestationsListForResourceOptionalParams): Promise<Models.AttestationsListForResourceResponse>;
  /**
   * @param resourceId Resource ID.
   * @param callback The callback
   */
  listForResource(resourceId: string, callback: msRest.ServiceCallback<Models.AttestationListResult>): void;
  /**
   * @param resourceId Resource ID.
   * @param options The optional parameters
   * @param callback The callback
   */
  listForResource(resourceId: string, options: Models.AttestationsListForResourceOptionalParams, callback: msRest.ServiceCallback<Models.AttestationListResult>): void;
  listForResource(resourceId: string, options?: Models.AttestationsListForResourceOptionalParams | msRest.ServiceCallback<Models.AttestationListResult>, callback?: msRest.ServiceCallback<Models.AttestationListResult>): Promise<Models.AttestationsListForResourceResponse> {
    return this.client.sendOperationRequest(
      {
        resourceId,
        options
      },
      listForResourceOperationSpec,
      callback) as Promise<Models.AttestationsListForResourceResponse>;
  }

  /**
   * Creates or updates an attestation at resource scope.
   * @param resourceId Resource ID.
   * @param attestationName The name of the attestation.
   * @param parameters The attestation parameters.
   * @param [options] The optional parameters
   * @returns Promise<Models.AttestationsCreateOrUpdateAtResourceResponse>
   */
  createOrUpdateAtResource(resourceId: string, attestationName: string, parameters: Models.Attestation, options?: msRest.RequestOptionsBase): Promise<Models.AttestationsCreateOrUpdateAtResourceResponse> {
    return this.beginCreateOrUpdateAtResource(resourceId,attestationName,parameters,options)
      .then(lroPoller => lroPoller.pollUntilFinished()) as Promise<Models.AttestationsCreateOrUpdateAtResourceResponse>;
  }

  /**
   * Gets an existing attestation at resource scope.
   * @param resourceId Resource ID.
   * @param attestationName The name of the attestation.
   * @param [options] The optional parameters
   * @returns Promise<Models.AttestationsGetAtResourceResponse>
   */
  getAtResource(resourceId: string, attestationName: string, options?: msRest.RequestOptionsBase): Promise<Models.AttestationsGetAtResourceResponse>;
  /**
   * @param resourceId Resource ID.
   * @param attestationName The name of the attestation.
   * @param callback The callback
   */
  getAtResource(resourceId: string, attestationName: string, callback: msRest.ServiceCallback<Models.Attestation>): void;
  /**
   * @param resourceId Resource ID.
   * @param attestationName The name of the attestation.
   * @param options The optional parameters
   * @param callback The callback
   */
  getAtResource(resourceId: string, attestationName: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.Attestation>): void;
  getAtResource(resourceId: string, attestationName: string, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<Models.Attestation>, callback?: msRest.ServiceCallback<Models.Attestation>): Promise<Models.AttestationsGetAtResourceResponse> {
    return this.client.sendOperationRequest(
      {
        resourceId,
        attestationName,
        options
      },
      getAtResourceOperationSpec,
      callback) as Promise<Models.AttestationsGetAtResourceResponse>;
  }

  /**
   * Deletes an existing attestation at individual resource scope.
   * @param resourceId Resource ID.
   * @param attestationName The name of the attestation.
   * @param [options] The optional parameters
   * @returns Promise<msRest.RestResponse>
   */
  deleteAtResource(resourceId: string, attestationName: string, options?: msRest.RequestOptionsBase): Promise<msRest.RestResponse>;
  /**
   * @param resourceId Resource ID.
   * @param attestationName The name of the attestation.
   * @param callback The callback
   */
  deleteAtResource(resourceId: string, attestationName: string, callback: msRest.ServiceCallback<void>): void;
  /**
   * @param resourceId Resource ID.
   * @param attestationName The name of the attestation.
   * @param options The optional parameters
   * @param callback The callback
   */
  deleteAtResource(resourceId: string, attestationName: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<void>): void;
  deleteAtResource(resourceId: string, attestationName: string, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<void>, callback?: msRest.ServiceCallback<void>): Promise<msRest.RestResponse> {
    return this.client.sendOperationRequest(
      {
        resourceId,
        attestationName,
        options
      },
      deleteAtResourceOperationSpec,
      callback);
  }

  /**
   * Creates or updates an attestation at subscription scope.
   * @param subscriptionId The ID of the target subscription.
   * @param attestationName The name of the attestation.
   * @param parameters The attestation parameters.
   * @param [options] The optional parameters
   * @returns Promise<msRestAzure.LROPoller>
   */
  beginCreateOrUpdateAtSubscription(subscriptionId: string, attestationName: string, parameters: Models.Attestation, options?: msRest.RequestOptionsBase): Promise<msRestAzure.LROPoller> {
    return this.client.sendLRORequest(
      {
        subscriptionId,
        attestationName,
        parameters,
        options
      },
      beginCreateOrUpdateAtSubscriptionOperationSpec,
      options);
  }

  /**
   * Creates or updates an attestation at resource group scope.
   * @param subscriptionId The ID of the target subscription.
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param attestationName The name of the attestation.
   * @param parameters The attestation parameters.
   * @param [options] The optional parameters
   * @returns Promise<msRestAzure.LROPoller>
   */
  beginCreateOrUpdateAtResourceGroup(subscriptionId: string, resourceGroupName: string, attestationName: string, parameters: Models.Attestation, options?: msRest.RequestOptionsBase): Promise<msRestAzure.LROPoller> {
    return this.client.sendLRORequest(
      {
        subscriptionId,
        resourceGroupName,
        attestationName,
        parameters,
        options
      },
      beginCreateOrUpdateAtResourceGroupOperationSpec,
      options);
  }

  /**
   * Creates or updates an attestation at resource scope.
   * @param resourceId Resource ID.
   * @param attestationName The name of the attestation.
   * @param parameters The attestation parameters.
   * @param [options] The optional parameters
   * @returns Promise<msRestAzure.LROPoller>
   */
  beginCreateOrUpdateAtResource(resourceId: string, attestationName: string, parameters: Models.Attestation, options?: msRest.RequestOptionsBase): Promise<msRestAzure.LROPoller> {
    return this.client.sendLRORequest(
      {
        resourceId,
        attestationName,
        parameters,
        options
      },
      beginCreateOrUpdateAtResourceOperationSpec,
      options);
  }

  /**
   * Gets all attestations for the subscription.
   * @param nextPageLink The NextLink from the previous successful call to List operation.
   * @param [options] The optional parameters
   * @returns Promise<Models.AttestationsListForSubscriptionNextResponse>
   */
  listForSubscriptionNext(nextPageLink: string, options?: msRest.RequestOptionsBase): Promise<Models.AttestationsListForSubscriptionNextResponse>;
  /**
   * @param nextPageLink The NextLink from the previous successful call to List operation.
   * @param callback The callback
   */
  listForSubscriptionNext(nextPageLink: string, callback: msRest.ServiceCallback<Models.AttestationListResult>): void;
  /**
   * @param nextPageLink The NextLink from the previous successful call to List operation.
   * @param options The optional parameters
   * @param callback The callback
   */
  listForSubscriptionNext(nextPageLink: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.AttestationListResult>): void;
  listForSubscriptionNext(nextPageLink: string, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<Models.AttestationListResult>, callback?: msRest.ServiceCallback<Models.AttestationListResult>): Promise<Models.AttestationsListForSubscriptionNextResponse> {
    return this.client.sendOperationRequest(
      {
        nextPageLink,
        options
      },
      listForSubscriptionNextOperationSpec,
      callback) as Promise<Models.AttestationsListForSubscriptionNextResponse>;
  }

  /**
   * Gets all attestations for the resource group.
   * @param nextPageLink The NextLink from the previous successful call to List operation.
   * @param [options] The optional parameters
   * @returns Promise<Models.AttestationsListForResourceGroupNextResponse>
   */
  listForResourceGroupNext(nextPageLink: string, options?: msRest.RequestOptionsBase): Promise<Models.AttestationsListForResourceGroupNextResponse>;
  /**
   * @param nextPageLink The NextLink from the previous successful call to List operation.
   * @param callback The callback
   */
  listForResourceGroupNext(nextPageLink: string, callback: msRest.ServiceCallback<Models.AttestationListResult>): void;
  /**
   * @param nextPageLink The NextLink from the previous successful call to List operation.
   * @param options The optional parameters
   * @param callback The callback
   */
  listForResourceGroupNext(nextPageLink: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.AttestationListResult>): void;
  listForResourceGroupNext(nextPageLink: string, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<Models.AttestationListResult>, callback?: msRest.ServiceCallback<Models.AttestationListResult>): Promise<Models.AttestationsListForResourceGroupNextResponse> {
    return this.client.sendOperationRequest(
      {
        nextPageLink,
        options
      },
      listForResourceGroupNextOperationSpec,
      callback) as Promise<Models.AttestationsListForResourceGroupNextResponse>;
  }

  /**
   * Gets all attestations for a resource.
   * @param nextPageLink The NextLink from the previous successful call to List operation.
   * @param [options] The optional parameters
   * @returns Promise<Models.AttestationsListForResourceNextResponse>
   */
  listForResourceNext(nextPageLink: string, options?: msRest.RequestOptionsBase): Promise<Models.AttestationsListForResourceNextResponse>;
  /**
   * @param nextPageLink The NextLink from the previous successful call to List operation.
   * @param callback The callback
   */
  listForResourceNext(nextPageLink: string, callback: msRest.ServiceCallback<Models.AttestationListResult>): void;
  /**
   * @param nextPageLink The NextLink from the previous successful call to List operation.
   * @param options The optional parameters
   * @param callback The callback
   */
  listForResourceNext(nextPageLink: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.AttestationListResult>): void;
  listForResourceNext(nextPageLink: string, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<Models.AttestationListResult>, callback?: msRest.ServiceCallback<Models.AttestationListResult>): Promise<Models.AttestationsListForResourceNextResponse> {
    return this.client.sendOperationRequest(
      {
        nextPageLink,
        options
      },
      listForResourceNextOperationSpec,
      callback) as Promise<Models.AttestationsListForResourceNextResponse>;
  }
}

// Operation Specifications
const serializer = new msRest.Serializer(Mappers);
const listForSubscriptionOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "subscriptions/{subscriptionId}/providers/Microsoft.PolicyInsights/attestations",
  urlParameters: [
    Parameters.subscriptionId1
  ],
  queryParameters: [
    Parameters.apiVersion4,
    Parameters.top,
    Parameters.filter
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    200: {
      bodyMapper: Mappers.AttestationListResult
    },
    default: {
      bodyMapper: Mappers.ErrorResponse
    }
  },
  serializer
};

const getAtSubscriptionOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "subscriptions/{subscriptionId}/providers/Microsoft.PolicyInsights/attestations/{attestationName}",
  urlParameters: [
    Parameters.subscriptionId1,
    Parameters.attestationName
  ],
  queryParameters: [
    Parameters.apiVersion4
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    200: {
      bodyMapper: Mappers.Attestation
    },
    default: {
      bodyMapper: Mappers.ErrorResponse
    }
  },
  serializer
};

const deleteAtSubscriptionOperationSpec: msRest.OperationSpec = {
  httpMethod: "DELETE",
  path: "subscriptions/{subscriptionId}/providers/Microsoft.PolicyInsights/attestations/{attestationName}",
  urlParameters: [
    Parameters.subscriptionId1,
    Parameters.attestationName
  ],
  queryParameters: [
    Parameters.apiVersion4
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    200: {},
    204: {},
    default: {
      bodyMapper: Mappers.ErrorResponse
    }
  },
  serializer
};

const listForResourceGroupOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.PolicyInsights/attestations",
  urlParameters: [
    Parameters.subscriptionId1,
    Parameters.resourceGroupName1
  ],
  queryParameters: [
    Parameters.apiVersion4,
    Parameters.top,
    Parameters.filter
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    200: {
      bodyMapper: Mappers.AttestationListResult
    },
    default: {
      bodyMapper: Mappers.ErrorResponse
    }
  },
  serializer
};

const getAtResourceGroupOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.PolicyInsights/attestations/{attestationName}",
  urlParameters: [
    Parameters.subscriptionId1,
    Parameters.resourceGroupName1,
    Parameters.attestationName
  ],
  queryParameters: [
    Parameters.apiVersion4
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    200: {
      bodyMapper: Mappers.Attestation
    },
    default: {
      bodyMapper: Mappers.ErrorResponse
    }
  },
  serializer
};

const deleteAtResourceGroupOperationSpec: msRest.OperationSpec = {
  httpMethod: "DELETE",
  path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.PolicyInsights/attestations/{attestationName}",
  urlParameters: [
    Parameters.subscriptionId1,
    Parameters.resourceGroupName1,
    Parameters.attestationName
  ],
  queryParameters: [
    Parameters.apiVersion4
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    200: {},
    204: {},
    default: {
      bodyMapper: Mappers.ErrorResponse
    }
  },
  serializer
};

const listForResourceOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "{resourceId}/providers/Microsoft.PolicyInsights/attestations",
  urlParameters: [
    Parameters.resourceId
  ],
  queryParameters: [
    Parameters.apiVersion4,
    Parameters.top,
    Parameters.filter
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    200: {
      bodyMapper: Mappers.AttestationListResult
    },
    default: {
      bodyMapper: Mappers.ErrorResponse
    }
  },
  serializer
};

const getAtResourceOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "{resourceId}/providers/Microsoft.PolicyInsights/attestations/{attestationName}",
  urlParameters: [
    Parameters.resourceId,
    Parameters.attestationName
  ],
  queryParameters: [
    Parameters.apiVersion4
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    200: {
      bodyMapper: Mappers.Attestation
    },
    default: {
      bodyMapper: Mappers.ErrorResponse
    }
  },
  serializer
};

const deleteAtResourceOperationSpec: msRest.OperationSpec = {
  httpMethod: "DELETE",
  path: "{resourceId}/providers/Microsoft.PolicyInsights/attestations/{attestationName}",
  urlParameters: [
    Parameters.resourceId,
    Parameters.attestationName
  ],
  queryParameters: [
    Parameters.apiVersion4
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    200: {},
    204: {},
    default: {
      bodyMapper: Mappers.ErrorResponse
    }
  },
  serializer
};

const beginCreateOrUpdateAtSubscriptionOperationSpec: msRest.OperationSpec = {
  httpMethod: "PUT",
  path: "subscriptions/{subscriptionId}/providers/Microsoft.PolicyInsights/attestations/{attestationName}",
  urlParameters: [
    Parameters.subscriptionId1,
    Parameters.attestationName
  ],
  queryParameters: [
    Parameters.apiVersion4
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  requestBody: {
    parameterPath: "parameters",
    mapper: {
      ...Mappers.Attestation,
      required: true
    }
  },
  responses: {
    200: {
      bodyMapper: Mappers.Attestation
    },
    201: {
      bodyMapper: Mappers.Attestation
    },
    default: {
      bodyMapper: Mappers.ErrorResponse
    }
  },
  serializer
};

const beginCreateOrUpdateAtResourceGroupOperationSpec: msRest.OperationSpec = {
  httpMethod: "PUT",
  path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.PolicyInsights/attestations/{attestationName}",
  urlParameters: [
    Parameters.subscriptionId1,
    Parameters.resourceGroupName1,
    Parameters.attestationName
  ],
  queryParameters: [
    Parameters.apiVersion4
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  requestBody: {
    parameterPath: "parameters",
    mapper: {
      ...Mappers.Attestation,
      required: true
    }
  },
  responses: {
    200: {
      bodyMapper: Mappers.Attestation
    },
    201: {
      bodyMapper: Mappers.Attestation
    },
    default: {
      bodyMapper: Mappers.ErrorResponse
    }
  },
  serializer
};

const beginCreateOrUpdateAtResourceOperationSpec: msRest.OperationSpec = {
  httpMethod: "PUT",
  path: "{resourceId}/providers/Microsoft.PolicyInsights/attestations/{attestationName}",
  urlParameters: [
    Parameters.resourceId,
    Parameters.attestationName
  ],
  queryParameters: [
    Parameters.apiVersion4
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  requestBody: {
    parameterPath: "parameters",
    mapper: {
      ...Mappers.Attestation,
      required: true
    }
  },
  responses: {
    200: {
      bodyMapper: Mappers.Attestation
    },
    201: {
      bodyMapper: Mappers.Attestation
    },
    default: {
      bodyMapper: Mappers.ErrorResponse
    }
  },
  serializer
};

const listForSubscriptionNextOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  baseUrl: "https://management.azure.com",
  path: "{nextLink}",
  urlParameters: [
    Parameters.nextPageLink
  ],
  queryParameters: [
    Parameters.apiVersion4
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    200: {
      bodyMapper: Mappers.AttestationListResult
    },
    default: {
      bodyMapper: Mappers.ErrorResponse
    }
  },
  serializer
};

const listForResourceGroupNextOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  baseUrl: "https://management.azure.com",
  path: "{nextLink}",
  urlParameters: [
    Parameters.nextPageLink
  ],
  queryParameters: [
    Parameters.apiVersion4
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    200: {
      bodyMapper: Mappers.AttestationListResult
    },
    default: {
      bodyMapper: Mappers.ErrorResponse
    }
  },
  serializer
};

const listForResourceNextOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  baseUrl: "https://management.azure.com",
  path: "{nextLink}",
  urlParameters: [
    Parameters.nextPageLink
  ],
  queryParameters: [
    Parameters.apiVersion4
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    200: {
      bodyMapper: Mappers.AttestationListResult
    },
    default: {
      bodyMapper: Mappers.ErrorResponse
    }
  },
  serializer
};
