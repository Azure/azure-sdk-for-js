/*
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is
 * regenerated.
 */

import * as msRest from "@azure/ms-rest-js";
import * as msRestAzure from "@azure/ms-rest-azure-js";
import * as Models from "../models";
import * as Mappers from "../models/policyStatesMappers";
import * as Parameters from "../models/parameters";
import { PolicyInsightsClientContext } from "../policyInsightsClientContext";

/** Class representing a PolicyStates. */
export class PolicyStates {
  private readonly client: PolicyInsightsClientContext;

  /**
   * Create a PolicyStates.
   * @param {PolicyInsightsClientContext} client Reference to the service client.
   */
  constructor(client: PolicyInsightsClientContext) {
    this.client = client;
  }

  /**
   * Queries policy states for the resources under the management group.
   * @param policyStatesResource The virtual resource under PolicyStates resource type. In a given
   * time range, 'latest' represents the latest policy state(s), whereas 'default' represents all
   * policy state(s). Possible values include: 'default', 'latest'
   * @param managementGroupName Management group name.
   * @param [options] The optional parameters
   * @returns Promise<Models.PolicyStatesListQueryResultsForManagementGroupResponse>
   */
  listQueryResultsForManagementGroup(policyStatesResource: Models.PolicyStatesResource, managementGroupName: string, options?: Models.PolicyStatesListQueryResultsForManagementGroupOptionalParams): Promise<Models.PolicyStatesListQueryResultsForManagementGroupResponse>;
  /**
   * @param policyStatesResource The virtual resource under PolicyStates resource type. In a given
   * time range, 'latest' represents the latest policy state(s), whereas 'default' represents all
   * policy state(s). Possible values include: 'default', 'latest'
   * @param managementGroupName Management group name.
   * @param callback The callback
   */
  listQueryResultsForManagementGroup(policyStatesResource: Models.PolicyStatesResource, managementGroupName: string, callback: msRest.ServiceCallback<Models.PolicyStatesQueryResults>): void;
  /**
   * @param policyStatesResource The virtual resource under PolicyStates resource type. In a given
   * time range, 'latest' represents the latest policy state(s), whereas 'default' represents all
   * policy state(s). Possible values include: 'default', 'latest'
   * @param managementGroupName Management group name.
   * @param options The optional parameters
   * @param callback The callback
   */
  listQueryResultsForManagementGroup(policyStatesResource: Models.PolicyStatesResource, managementGroupName: string, options: Models.PolicyStatesListQueryResultsForManagementGroupOptionalParams, callback: msRest.ServiceCallback<Models.PolicyStatesQueryResults>): void;
  listQueryResultsForManagementGroup(policyStatesResource: Models.PolicyStatesResource, managementGroupName: string, options?: Models.PolicyStatesListQueryResultsForManagementGroupOptionalParams | msRest.ServiceCallback<Models.PolicyStatesQueryResults>, callback?: msRest.ServiceCallback<Models.PolicyStatesQueryResults>): Promise<Models.PolicyStatesListQueryResultsForManagementGroupResponse> {
    return this.client.sendOperationRequest(
      {
        policyStatesResource,
        managementGroupName,
        options
      },
      listQueryResultsForManagementGroupOperationSpec,
      callback) as Promise<Models.PolicyStatesListQueryResultsForManagementGroupResponse>;
  }

  /**
   * Summarizes policy states for the resources under the management group.
   * @param managementGroupName Management group name.
   * @param [options] The optional parameters
   * @returns Promise<Models.PolicyStatesSummarizeForManagementGroupResponse>
   */
  summarizeForManagementGroup(managementGroupName: string, options?: Models.PolicyStatesSummarizeForManagementGroupOptionalParams): Promise<Models.PolicyStatesSummarizeForManagementGroupResponse>;
  /**
   * @param managementGroupName Management group name.
   * @param callback The callback
   */
  summarizeForManagementGroup(managementGroupName: string, callback: msRest.ServiceCallback<Models.SummarizeResults>): void;
  /**
   * @param managementGroupName Management group name.
   * @param options The optional parameters
   * @param callback The callback
   */
  summarizeForManagementGroup(managementGroupName: string, options: Models.PolicyStatesSummarizeForManagementGroupOptionalParams, callback: msRest.ServiceCallback<Models.SummarizeResults>): void;
  summarizeForManagementGroup(managementGroupName: string, options?: Models.PolicyStatesSummarizeForManagementGroupOptionalParams | msRest.ServiceCallback<Models.SummarizeResults>, callback?: msRest.ServiceCallback<Models.SummarizeResults>): Promise<Models.PolicyStatesSummarizeForManagementGroupResponse> {
    return this.client.sendOperationRequest(
      {
        managementGroupName,
        options
      },
      summarizeForManagementGroupOperationSpec,
      callback) as Promise<Models.PolicyStatesSummarizeForManagementGroupResponse>;
  }

  /**
   * Queries policy states for the resources under the subscription.
   * @param policyStatesResource The virtual resource under PolicyStates resource type. In a given
   * time range, 'latest' represents the latest policy state(s), whereas 'default' represents all
   * policy state(s). Possible values include: 'default', 'latest'
   * @param subscriptionId Microsoft Azure subscription ID.
   * @param [options] The optional parameters
   * @returns Promise<Models.PolicyStatesListQueryResultsForSubscriptionResponse>
   */
  listQueryResultsForSubscription(policyStatesResource: Models.PolicyStatesResource, subscriptionId: string, options?: Models.PolicyStatesListQueryResultsForSubscriptionOptionalParams): Promise<Models.PolicyStatesListQueryResultsForSubscriptionResponse>;
  /**
   * @param policyStatesResource The virtual resource under PolicyStates resource type. In a given
   * time range, 'latest' represents the latest policy state(s), whereas 'default' represents all
   * policy state(s). Possible values include: 'default', 'latest'
   * @param subscriptionId Microsoft Azure subscription ID.
   * @param callback The callback
   */
  listQueryResultsForSubscription(policyStatesResource: Models.PolicyStatesResource, subscriptionId: string, callback: msRest.ServiceCallback<Models.PolicyStatesQueryResults>): void;
  /**
   * @param policyStatesResource The virtual resource under PolicyStates resource type. In a given
   * time range, 'latest' represents the latest policy state(s), whereas 'default' represents all
   * policy state(s). Possible values include: 'default', 'latest'
   * @param subscriptionId Microsoft Azure subscription ID.
   * @param options The optional parameters
   * @param callback The callback
   */
  listQueryResultsForSubscription(policyStatesResource: Models.PolicyStatesResource, subscriptionId: string, options: Models.PolicyStatesListQueryResultsForSubscriptionOptionalParams, callback: msRest.ServiceCallback<Models.PolicyStatesQueryResults>): void;
  listQueryResultsForSubscription(policyStatesResource: Models.PolicyStatesResource, subscriptionId: string, options?: Models.PolicyStatesListQueryResultsForSubscriptionOptionalParams | msRest.ServiceCallback<Models.PolicyStatesQueryResults>, callback?: msRest.ServiceCallback<Models.PolicyStatesQueryResults>): Promise<Models.PolicyStatesListQueryResultsForSubscriptionResponse> {
    return this.client.sendOperationRequest(
      {
        policyStatesResource,
        subscriptionId,
        options
      },
      listQueryResultsForSubscriptionOperationSpec,
      callback) as Promise<Models.PolicyStatesListQueryResultsForSubscriptionResponse>;
  }

  /**
   * Summarizes policy states for the resources under the subscription.
   * @param subscriptionId Microsoft Azure subscription ID.
   * @param [options] The optional parameters
   * @returns Promise<Models.PolicyStatesSummarizeForSubscriptionResponse>
   */
  summarizeForSubscription(subscriptionId: string, options?: Models.PolicyStatesSummarizeForSubscriptionOptionalParams): Promise<Models.PolicyStatesSummarizeForSubscriptionResponse>;
  /**
   * @param subscriptionId Microsoft Azure subscription ID.
   * @param callback The callback
   */
  summarizeForSubscription(subscriptionId: string, callback: msRest.ServiceCallback<Models.SummarizeResults>): void;
  /**
   * @param subscriptionId Microsoft Azure subscription ID.
   * @param options The optional parameters
   * @param callback The callback
   */
  summarizeForSubscription(subscriptionId: string, options: Models.PolicyStatesSummarizeForSubscriptionOptionalParams, callback: msRest.ServiceCallback<Models.SummarizeResults>): void;
  summarizeForSubscription(subscriptionId: string, options?: Models.PolicyStatesSummarizeForSubscriptionOptionalParams | msRest.ServiceCallback<Models.SummarizeResults>, callback?: msRest.ServiceCallback<Models.SummarizeResults>): Promise<Models.PolicyStatesSummarizeForSubscriptionResponse> {
    return this.client.sendOperationRequest(
      {
        subscriptionId,
        options
      },
      summarizeForSubscriptionOperationSpec,
      callback) as Promise<Models.PolicyStatesSummarizeForSubscriptionResponse>;
  }

  /**
   * Queries policy states for the resources under the resource group.
   * @param policyStatesResource The virtual resource under PolicyStates resource type. In a given
   * time range, 'latest' represents the latest policy state(s), whereas 'default' represents all
   * policy state(s). Possible values include: 'default', 'latest'
   * @param subscriptionId Microsoft Azure subscription ID.
   * @param resourceGroupName Resource group name.
   * @param [options] The optional parameters
   * @returns Promise<Models.PolicyStatesListQueryResultsForResourceGroupResponse>
   */
  listQueryResultsForResourceGroup(policyStatesResource: Models.PolicyStatesResource, subscriptionId: string, resourceGroupName: string, options?: Models.PolicyStatesListQueryResultsForResourceGroupOptionalParams): Promise<Models.PolicyStatesListQueryResultsForResourceGroupResponse>;
  /**
   * @param policyStatesResource The virtual resource under PolicyStates resource type. In a given
   * time range, 'latest' represents the latest policy state(s), whereas 'default' represents all
   * policy state(s). Possible values include: 'default', 'latest'
   * @param subscriptionId Microsoft Azure subscription ID.
   * @param resourceGroupName Resource group name.
   * @param callback The callback
   */
  listQueryResultsForResourceGroup(policyStatesResource: Models.PolicyStatesResource, subscriptionId: string, resourceGroupName: string, callback: msRest.ServiceCallback<Models.PolicyStatesQueryResults>): void;
  /**
   * @param policyStatesResource The virtual resource under PolicyStates resource type. In a given
   * time range, 'latest' represents the latest policy state(s), whereas 'default' represents all
   * policy state(s). Possible values include: 'default', 'latest'
   * @param subscriptionId Microsoft Azure subscription ID.
   * @param resourceGroupName Resource group name.
   * @param options The optional parameters
   * @param callback The callback
   */
  listQueryResultsForResourceGroup(policyStatesResource: Models.PolicyStatesResource, subscriptionId: string, resourceGroupName: string, options: Models.PolicyStatesListQueryResultsForResourceGroupOptionalParams, callback: msRest.ServiceCallback<Models.PolicyStatesQueryResults>): void;
  listQueryResultsForResourceGroup(policyStatesResource: Models.PolicyStatesResource, subscriptionId: string, resourceGroupName: string, options?: Models.PolicyStatesListQueryResultsForResourceGroupOptionalParams | msRest.ServiceCallback<Models.PolicyStatesQueryResults>, callback?: msRest.ServiceCallback<Models.PolicyStatesQueryResults>): Promise<Models.PolicyStatesListQueryResultsForResourceGroupResponse> {
    return this.client.sendOperationRequest(
      {
        policyStatesResource,
        subscriptionId,
        resourceGroupName,
        options
      },
      listQueryResultsForResourceGroupOperationSpec,
      callback) as Promise<Models.PolicyStatesListQueryResultsForResourceGroupResponse>;
  }

  /**
   * Summarizes policy states for the resources under the resource group.
   * @param subscriptionId Microsoft Azure subscription ID.
   * @param resourceGroupName Resource group name.
   * @param [options] The optional parameters
   * @returns Promise<Models.PolicyStatesSummarizeForResourceGroupResponse>
   */
  summarizeForResourceGroup(subscriptionId: string, resourceGroupName: string, options?: Models.PolicyStatesSummarizeForResourceGroupOptionalParams): Promise<Models.PolicyStatesSummarizeForResourceGroupResponse>;
  /**
   * @param subscriptionId Microsoft Azure subscription ID.
   * @param resourceGroupName Resource group name.
   * @param callback The callback
   */
  summarizeForResourceGroup(subscriptionId: string, resourceGroupName: string, callback: msRest.ServiceCallback<Models.SummarizeResults>): void;
  /**
   * @param subscriptionId Microsoft Azure subscription ID.
   * @param resourceGroupName Resource group name.
   * @param options The optional parameters
   * @param callback The callback
   */
  summarizeForResourceGroup(subscriptionId: string, resourceGroupName: string, options: Models.PolicyStatesSummarizeForResourceGroupOptionalParams, callback: msRest.ServiceCallback<Models.SummarizeResults>): void;
  summarizeForResourceGroup(subscriptionId: string, resourceGroupName: string, options?: Models.PolicyStatesSummarizeForResourceGroupOptionalParams | msRest.ServiceCallback<Models.SummarizeResults>, callback?: msRest.ServiceCallback<Models.SummarizeResults>): Promise<Models.PolicyStatesSummarizeForResourceGroupResponse> {
    return this.client.sendOperationRequest(
      {
        subscriptionId,
        resourceGroupName,
        options
      },
      summarizeForResourceGroupOperationSpec,
      callback) as Promise<Models.PolicyStatesSummarizeForResourceGroupResponse>;
  }

  /**
   * Queries policy states for the resource.
   * @param policyStatesResource The virtual resource under PolicyStates resource type. In a given
   * time range, 'latest' represents the latest policy state(s), whereas 'default' represents all
   * policy state(s). Possible values include: 'default', 'latest'
   * @param resourceId Resource ID.
   * @param [options] The optional parameters
   * @returns Promise<Models.PolicyStatesListQueryResultsForResourceResponse>
   */
  listQueryResultsForResource(policyStatesResource: Models.PolicyStatesResource, resourceId: string, options?: Models.PolicyStatesListQueryResultsForResourceOptionalParams): Promise<Models.PolicyStatesListQueryResultsForResourceResponse>;
  /**
   * @param policyStatesResource The virtual resource under PolicyStates resource type. In a given
   * time range, 'latest' represents the latest policy state(s), whereas 'default' represents all
   * policy state(s). Possible values include: 'default', 'latest'
   * @param resourceId Resource ID.
   * @param callback The callback
   */
  listQueryResultsForResource(policyStatesResource: Models.PolicyStatesResource, resourceId: string, callback: msRest.ServiceCallback<Models.PolicyStatesQueryResults>): void;
  /**
   * @param policyStatesResource The virtual resource under PolicyStates resource type. In a given
   * time range, 'latest' represents the latest policy state(s), whereas 'default' represents all
   * policy state(s). Possible values include: 'default', 'latest'
   * @param resourceId Resource ID.
   * @param options The optional parameters
   * @param callback The callback
   */
  listQueryResultsForResource(policyStatesResource: Models.PolicyStatesResource, resourceId: string, options: Models.PolicyStatesListQueryResultsForResourceOptionalParams, callback: msRest.ServiceCallback<Models.PolicyStatesQueryResults>): void;
  listQueryResultsForResource(policyStatesResource: Models.PolicyStatesResource, resourceId: string, options?: Models.PolicyStatesListQueryResultsForResourceOptionalParams | msRest.ServiceCallback<Models.PolicyStatesQueryResults>, callback?: msRest.ServiceCallback<Models.PolicyStatesQueryResults>): Promise<Models.PolicyStatesListQueryResultsForResourceResponse> {
    return this.client.sendOperationRequest(
      {
        policyStatesResource,
        resourceId,
        options
      },
      listQueryResultsForResourceOperationSpec,
      callback) as Promise<Models.PolicyStatesListQueryResultsForResourceResponse>;
  }

  /**
   * Summarizes policy states for the resource.
   * @param resourceId Resource ID.
   * @param [options] The optional parameters
   * @returns Promise<Models.PolicyStatesSummarizeForResourceResponse>
   */
  summarizeForResource(resourceId: string, options?: Models.PolicyStatesSummarizeForResourceOptionalParams): Promise<Models.PolicyStatesSummarizeForResourceResponse>;
  /**
   * @param resourceId Resource ID.
   * @param callback The callback
   */
  summarizeForResource(resourceId: string, callback: msRest.ServiceCallback<Models.SummarizeResults>): void;
  /**
   * @param resourceId Resource ID.
   * @param options The optional parameters
   * @param callback The callback
   */
  summarizeForResource(resourceId: string, options: Models.PolicyStatesSummarizeForResourceOptionalParams, callback: msRest.ServiceCallback<Models.SummarizeResults>): void;
  summarizeForResource(resourceId: string, options?: Models.PolicyStatesSummarizeForResourceOptionalParams | msRest.ServiceCallback<Models.SummarizeResults>, callback?: msRest.ServiceCallback<Models.SummarizeResults>): Promise<Models.PolicyStatesSummarizeForResourceResponse> {
    return this.client.sendOperationRequest(
      {
        resourceId,
        options
      },
      summarizeForResourceOperationSpec,
      callback) as Promise<Models.PolicyStatesSummarizeForResourceResponse>;
  }

  /**
   * Triggers a policy evaluation scan for all the resources under the subscription
   * @param subscriptionId Microsoft Azure subscription ID.
   * @param [options] The optional parameters
   * @returns Promise<msRest.RestResponse>
   */
  triggerSubscriptionEvaluation(subscriptionId: string, options?: msRest.RequestOptionsBase): Promise<msRest.RestResponse> {
    return this.beginTriggerSubscriptionEvaluation(subscriptionId,options)
      .then(lroPoller => lroPoller.pollUntilFinished());
  }

  /**
   * Triggers a policy evaluation scan for all the resources under the resource group.
   * @param subscriptionId Microsoft Azure subscription ID.
   * @param resourceGroupName Resource group name.
   * @param [options] The optional parameters
   * @returns Promise<msRest.RestResponse>
   */
  triggerResourceGroupEvaluation(subscriptionId: string, resourceGroupName: string, options?: msRest.RequestOptionsBase): Promise<msRest.RestResponse> {
    return this.beginTriggerResourceGroupEvaluation(subscriptionId,resourceGroupName,options)
      .then(lroPoller => lroPoller.pollUntilFinished());
  }

  /**
   * Queries policy states for the subscription level policy set definition.
   * @param policyStatesResource The virtual resource under PolicyStates resource type. In a given
   * time range, 'latest' represents the latest policy state(s), whereas 'default' represents all
   * policy state(s). Possible values include: 'default', 'latest'
   * @param subscriptionId Microsoft Azure subscription ID.
   * @param policySetDefinitionName Policy set definition name.
   * @param [options] The optional parameters
   * @returns Promise<Models.PolicyStatesListQueryResultsForPolicySetDefinitionResponse>
   */
  listQueryResultsForPolicySetDefinition(policyStatesResource: Models.PolicyStatesResource, subscriptionId: string, policySetDefinitionName: string, options?: Models.PolicyStatesListQueryResultsForPolicySetDefinitionOptionalParams): Promise<Models.PolicyStatesListQueryResultsForPolicySetDefinitionResponse>;
  /**
   * @param policyStatesResource The virtual resource under PolicyStates resource type. In a given
   * time range, 'latest' represents the latest policy state(s), whereas 'default' represents all
   * policy state(s). Possible values include: 'default', 'latest'
   * @param subscriptionId Microsoft Azure subscription ID.
   * @param policySetDefinitionName Policy set definition name.
   * @param callback The callback
   */
  listQueryResultsForPolicySetDefinition(policyStatesResource: Models.PolicyStatesResource, subscriptionId: string, policySetDefinitionName: string, callback: msRest.ServiceCallback<Models.PolicyStatesQueryResults>): void;
  /**
   * @param policyStatesResource The virtual resource under PolicyStates resource type. In a given
   * time range, 'latest' represents the latest policy state(s), whereas 'default' represents all
   * policy state(s). Possible values include: 'default', 'latest'
   * @param subscriptionId Microsoft Azure subscription ID.
   * @param policySetDefinitionName Policy set definition name.
   * @param options The optional parameters
   * @param callback The callback
   */
  listQueryResultsForPolicySetDefinition(policyStatesResource: Models.PolicyStatesResource, subscriptionId: string, policySetDefinitionName: string, options: Models.PolicyStatesListQueryResultsForPolicySetDefinitionOptionalParams, callback: msRest.ServiceCallback<Models.PolicyStatesQueryResults>): void;
  listQueryResultsForPolicySetDefinition(policyStatesResource: Models.PolicyStatesResource, subscriptionId: string, policySetDefinitionName: string, options?: Models.PolicyStatesListQueryResultsForPolicySetDefinitionOptionalParams | msRest.ServiceCallback<Models.PolicyStatesQueryResults>, callback?: msRest.ServiceCallback<Models.PolicyStatesQueryResults>): Promise<Models.PolicyStatesListQueryResultsForPolicySetDefinitionResponse> {
    return this.client.sendOperationRequest(
      {
        policyStatesResource,
        subscriptionId,
        policySetDefinitionName,
        options
      },
      listQueryResultsForPolicySetDefinitionOperationSpec,
      callback) as Promise<Models.PolicyStatesListQueryResultsForPolicySetDefinitionResponse>;
  }

  /**
   * Summarizes policy states for the subscription level policy set definition.
   * @param subscriptionId Microsoft Azure subscription ID.
   * @param policySetDefinitionName Policy set definition name.
   * @param [options] The optional parameters
   * @returns Promise<Models.PolicyStatesSummarizeForPolicySetDefinitionResponse>
   */
  summarizeForPolicySetDefinition(subscriptionId: string, policySetDefinitionName: string, options?: Models.PolicyStatesSummarizeForPolicySetDefinitionOptionalParams): Promise<Models.PolicyStatesSummarizeForPolicySetDefinitionResponse>;
  /**
   * @param subscriptionId Microsoft Azure subscription ID.
   * @param policySetDefinitionName Policy set definition name.
   * @param callback The callback
   */
  summarizeForPolicySetDefinition(subscriptionId: string, policySetDefinitionName: string, callback: msRest.ServiceCallback<Models.SummarizeResults>): void;
  /**
   * @param subscriptionId Microsoft Azure subscription ID.
   * @param policySetDefinitionName Policy set definition name.
   * @param options The optional parameters
   * @param callback The callback
   */
  summarizeForPolicySetDefinition(subscriptionId: string, policySetDefinitionName: string, options: Models.PolicyStatesSummarizeForPolicySetDefinitionOptionalParams, callback: msRest.ServiceCallback<Models.SummarizeResults>): void;
  summarizeForPolicySetDefinition(subscriptionId: string, policySetDefinitionName: string, options?: Models.PolicyStatesSummarizeForPolicySetDefinitionOptionalParams | msRest.ServiceCallback<Models.SummarizeResults>, callback?: msRest.ServiceCallback<Models.SummarizeResults>): Promise<Models.PolicyStatesSummarizeForPolicySetDefinitionResponse> {
    return this.client.sendOperationRequest(
      {
        subscriptionId,
        policySetDefinitionName,
        options
      },
      summarizeForPolicySetDefinitionOperationSpec,
      callback) as Promise<Models.PolicyStatesSummarizeForPolicySetDefinitionResponse>;
  }

  /**
   * Queries policy states for the subscription level policy definition.
   * @param policyStatesResource The virtual resource under PolicyStates resource type. In a given
   * time range, 'latest' represents the latest policy state(s), whereas 'default' represents all
   * policy state(s). Possible values include: 'default', 'latest'
   * @param subscriptionId Microsoft Azure subscription ID.
   * @param policyDefinitionName Policy definition name.
   * @param [options] The optional parameters
   * @returns Promise<Models.PolicyStatesListQueryResultsForPolicyDefinitionResponse>
   */
  listQueryResultsForPolicyDefinition(policyStatesResource: Models.PolicyStatesResource, subscriptionId: string, policyDefinitionName: string, options?: Models.PolicyStatesListQueryResultsForPolicyDefinitionOptionalParams): Promise<Models.PolicyStatesListQueryResultsForPolicyDefinitionResponse>;
  /**
   * @param policyStatesResource The virtual resource under PolicyStates resource type. In a given
   * time range, 'latest' represents the latest policy state(s), whereas 'default' represents all
   * policy state(s). Possible values include: 'default', 'latest'
   * @param subscriptionId Microsoft Azure subscription ID.
   * @param policyDefinitionName Policy definition name.
   * @param callback The callback
   */
  listQueryResultsForPolicyDefinition(policyStatesResource: Models.PolicyStatesResource, subscriptionId: string, policyDefinitionName: string, callback: msRest.ServiceCallback<Models.PolicyStatesQueryResults>): void;
  /**
   * @param policyStatesResource The virtual resource under PolicyStates resource type. In a given
   * time range, 'latest' represents the latest policy state(s), whereas 'default' represents all
   * policy state(s). Possible values include: 'default', 'latest'
   * @param subscriptionId Microsoft Azure subscription ID.
   * @param policyDefinitionName Policy definition name.
   * @param options The optional parameters
   * @param callback The callback
   */
  listQueryResultsForPolicyDefinition(policyStatesResource: Models.PolicyStatesResource, subscriptionId: string, policyDefinitionName: string, options: Models.PolicyStatesListQueryResultsForPolicyDefinitionOptionalParams, callback: msRest.ServiceCallback<Models.PolicyStatesQueryResults>): void;
  listQueryResultsForPolicyDefinition(policyStatesResource: Models.PolicyStatesResource, subscriptionId: string, policyDefinitionName: string, options?: Models.PolicyStatesListQueryResultsForPolicyDefinitionOptionalParams | msRest.ServiceCallback<Models.PolicyStatesQueryResults>, callback?: msRest.ServiceCallback<Models.PolicyStatesQueryResults>): Promise<Models.PolicyStatesListQueryResultsForPolicyDefinitionResponse> {
    return this.client.sendOperationRequest(
      {
        policyStatesResource,
        subscriptionId,
        policyDefinitionName,
        options
      },
      listQueryResultsForPolicyDefinitionOperationSpec,
      callback) as Promise<Models.PolicyStatesListQueryResultsForPolicyDefinitionResponse>;
  }

  /**
   * Summarizes policy states for the subscription level policy definition.
   * @param subscriptionId Microsoft Azure subscription ID.
   * @param policyDefinitionName Policy definition name.
   * @param [options] The optional parameters
   * @returns Promise<Models.PolicyStatesSummarizeForPolicyDefinitionResponse>
   */
  summarizeForPolicyDefinition(subscriptionId: string, policyDefinitionName: string, options?: Models.PolicyStatesSummarizeForPolicyDefinitionOptionalParams): Promise<Models.PolicyStatesSummarizeForPolicyDefinitionResponse>;
  /**
   * @param subscriptionId Microsoft Azure subscription ID.
   * @param policyDefinitionName Policy definition name.
   * @param callback The callback
   */
  summarizeForPolicyDefinition(subscriptionId: string, policyDefinitionName: string, callback: msRest.ServiceCallback<Models.SummarizeResults>): void;
  /**
   * @param subscriptionId Microsoft Azure subscription ID.
   * @param policyDefinitionName Policy definition name.
   * @param options The optional parameters
   * @param callback The callback
   */
  summarizeForPolicyDefinition(subscriptionId: string, policyDefinitionName: string, options: Models.PolicyStatesSummarizeForPolicyDefinitionOptionalParams, callback: msRest.ServiceCallback<Models.SummarizeResults>): void;
  summarizeForPolicyDefinition(subscriptionId: string, policyDefinitionName: string, options?: Models.PolicyStatesSummarizeForPolicyDefinitionOptionalParams | msRest.ServiceCallback<Models.SummarizeResults>, callback?: msRest.ServiceCallback<Models.SummarizeResults>): Promise<Models.PolicyStatesSummarizeForPolicyDefinitionResponse> {
    return this.client.sendOperationRequest(
      {
        subscriptionId,
        policyDefinitionName,
        options
      },
      summarizeForPolicyDefinitionOperationSpec,
      callback) as Promise<Models.PolicyStatesSummarizeForPolicyDefinitionResponse>;
  }

  /**
   * Queries policy states for the subscription level policy assignment.
   * @param policyStatesResource The virtual resource under PolicyStates resource type. In a given
   * time range, 'latest' represents the latest policy state(s), whereas 'default' represents all
   * policy state(s). Possible values include: 'default', 'latest'
   * @param subscriptionId Microsoft Azure subscription ID.
   * @param policyAssignmentName Policy assignment name.
   * @param [options] The optional parameters
   * @returns
   * Promise<Models.PolicyStatesListQueryResultsForSubscriptionLevelPolicyAssignmentResponse>
   */
  listQueryResultsForSubscriptionLevelPolicyAssignment(policyStatesResource: Models.PolicyStatesResource, subscriptionId: string, policyAssignmentName: string, options?: Models.PolicyStatesListQueryResultsForSubscriptionLevelPolicyAssignmentOptionalParams): Promise<Models.PolicyStatesListQueryResultsForSubscriptionLevelPolicyAssignmentResponse>;
  /**
   * @param policyStatesResource The virtual resource under PolicyStates resource type. In a given
   * time range, 'latest' represents the latest policy state(s), whereas 'default' represents all
   * policy state(s). Possible values include: 'default', 'latest'
   * @param subscriptionId Microsoft Azure subscription ID.
   * @param policyAssignmentName Policy assignment name.
   * @param callback The callback
   */
  listQueryResultsForSubscriptionLevelPolicyAssignment(policyStatesResource: Models.PolicyStatesResource, subscriptionId: string, policyAssignmentName: string, callback: msRest.ServiceCallback<Models.PolicyStatesQueryResults>): void;
  /**
   * @param policyStatesResource The virtual resource under PolicyStates resource type. In a given
   * time range, 'latest' represents the latest policy state(s), whereas 'default' represents all
   * policy state(s). Possible values include: 'default', 'latest'
   * @param subscriptionId Microsoft Azure subscription ID.
   * @param policyAssignmentName Policy assignment name.
   * @param options The optional parameters
   * @param callback The callback
   */
  listQueryResultsForSubscriptionLevelPolicyAssignment(policyStatesResource: Models.PolicyStatesResource, subscriptionId: string, policyAssignmentName: string, options: Models.PolicyStatesListQueryResultsForSubscriptionLevelPolicyAssignmentOptionalParams, callback: msRest.ServiceCallback<Models.PolicyStatesQueryResults>): void;
  listQueryResultsForSubscriptionLevelPolicyAssignment(policyStatesResource: Models.PolicyStatesResource, subscriptionId: string, policyAssignmentName: string, options?: Models.PolicyStatesListQueryResultsForSubscriptionLevelPolicyAssignmentOptionalParams | msRest.ServiceCallback<Models.PolicyStatesQueryResults>, callback?: msRest.ServiceCallback<Models.PolicyStatesQueryResults>): Promise<Models.PolicyStatesListQueryResultsForSubscriptionLevelPolicyAssignmentResponse> {
    return this.client.sendOperationRequest(
      {
        policyStatesResource,
        subscriptionId,
        policyAssignmentName,
        options
      },
      listQueryResultsForSubscriptionLevelPolicyAssignmentOperationSpec,
      callback) as Promise<Models.PolicyStatesListQueryResultsForSubscriptionLevelPolicyAssignmentResponse>;
  }

  /**
   * Summarizes policy states for the subscription level policy assignment.
   * @param subscriptionId Microsoft Azure subscription ID.
   * @param policyAssignmentName Policy assignment name.
   * @param [options] The optional parameters
   * @returns Promise<Models.PolicyStatesSummarizeForSubscriptionLevelPolicyAssignmentResponse>
   */
  summarizeForSubscriptionLevelPolicyAssignment(subscriptionId: string, policyAssignmentName: string, options?: Models.PolicyStatesSummarizeForSubscriptionLevelPolicyAssignmentOptionalParams): Promise<Models.PolicyStatesSummarizeForSubscriptionLevelPolicyAssignmentResponse>;
  /**
   * @param subscriptionId Microsoft Azure subscription ID.
   * @param policyAssignmentName Policy assignment name.
   * @param callback The callback
   */
  summarizeForSubscriptionLevelPolicyAssignment(subscriptionId: string, policyAssignmentName: string, callback: msRest.ServiceCallback<Models.SummarizeResults>): void;
  /**
   * @param subscriptionId Microsoft Azure subscription ID.
   * @param policyAssignmentName Policy assignment name.
   * @param options The optional parameters
   * @param callback The callback
   */
  summarizeForSubscriptionLevelPolicyAssignment(subscriptionId: string, policyAssignmentName: string, options: Models.PolicyStatesSummarizeForSubscriptionLevelPolicyAssignmentOptionalParams, callback: msRest.ServiceCallback<Models.SummarizeResults>): void;
  summarizeForSubscriptionLevelPolicyAssignment(subscriptionId: string, policyAssignmentName: string, options?: Models.PolicyStatesSummarizeForSubscriptionLevelPolicyAssignmentOptionalParams | msRest.ServiceCallback<Models.SummarizeResults>, callback?: msRest.ServiceCallback<Models.SummarizeResults>): Promise<Models.PolicyStatesSummarizeForSubscriptionLevelPolicyAssignmentResponse> {
    return this.client.sendOperationRequest(
      {
        subscriptionId,
        policyAssignmentName,
        options
      },
      summarizeForSubscriptionLevelPolicyAssignmentOperationSpec,
      callback) as Promise<Models.PolicyStatesSummarizeForSubscriptionLevelPolicyAssignmentResponse>;
  }

  /**
   * Queries policy states for the resource group level policy assignment.
   * @param policyStatesResource The virtual resource under PolicyStates resource type. In a given
   * time range, 'latest' represents the latest policy state(s), whereas 'default' represents all
   * policy state(s). Possible values include: 'default', 'latest'
   * @param subscriptionId Microsoft Azure subscription ID.
   * @param resourceGroupName Resource group name.
   * @param policyAssignmentName Policy assignment name.
   * @param [options] The optional parameters
   * @returns
   * Promise<Models.PolicyStatesListQueryResultsForResourceGroupLevelPolicyAssignmentResponse>
   */
  listQueryResultsForResourceGroupLevelPolicyAssignment(policyStatesResource: Models.PolicyStatesResource, subscriptionId: string, resourceGroupName: string, policyAssignmentName: string, options?: Models.PolicyStatesListQueryResultsForResourceGroupLevelPolicyAssignmentOptionalParams): Promise<Models.PolicyStatesListQueryResultsForResourceGroupLevelPolicyAssignmentResponse>;
  /**
   * @param policyStatesResource The virtual resource under PolicyStates resource type. In a given
   * time range, 'latest' represents the latest policy state(s), whereas 'default' represents all
   * policy state(s). Possible values include: 'default', 'latest'
   * @param subscriptionId Microsoft Azure subscription ID.
   * @param resourceGroupName Resource group name.
   * @param policyAssignmentName Policy assignment name.
   * @param callback The callback
   */
  listQueryResultsForResourceGroupLevelPolicyAssignment(policyStatesResource: Models.PolicyStatesResource, subscriptionId: string, resourceGroupName: string, policyAssignmentName: string, callback: msRest.ServiceCallback<Models.PolicyStatesQueryResults>): void;
  /**
   * @param policyStatesResource The virtual resource under PolicyStates resource type. In a given
   * time range, 'latest' represents the latest policy state(s), whereas 'default' represents all
   * policy state(s). Possible values include: 'default', 'latest'
   * @param subscriptionId Microsoft Azure subscription ID.
   * @param resourceGroupName Resource group name.
   * @param policyAssignmentName Policy assignment name.
   * @param options The optional parameters
   * @param callback The callback
   */
  listQueryResultsForResourceGroupLevelPolicyAssignment(policyStatesResource: Models.PolicyStatesResource, subscriptionId: string, resourceGroupName: string, policyAssignmentName: string, options: Models.PolicyStatesListQueryResultsForResourceGroupLevelPolicyAssignmentOptionalParams, callback: msRest.ServiceCallback<Models.PolicyStatesQueryResults>): void;
  listQueryResultsForResourceGroupLevelPolicyAssignment(policyStatesResource: Models.PolicyStatesResource, subscriptionId: string, resourceGroupName: string, policyAssignmentName: string, options?: Models.PolicyStatesListQueryResultsForResourceGroupLevelPolicyAssignmentOptionalParams | msRest.ServiceCallback<Models.PolicyStatesQueryResults>, callback?: msRest.ServiceCallback<Models.PolicyStatesQueryResults>): Promise<Models.PolicyStatesListQueryResultsForResourceGroupLevelPolicyAssignmentResponse> {
    return this.client.sendOperationRequest(
      {
        policyStatesResource,
        subscriptionId,
        resourceGroupName,
        policyAssignmentName,
        options
      },
      listQueryResultsForResourceGroupLevelPolicyAssignmentOperationSpec,
      callback) as Promise<Models.PolicyStatesListQueryResultsForResourceGroupLevelPolicyAssignmentResponse>;
  }

  /**
   * Summarizes policy states for the resource group level policy assignment.
   * @param subscriptionId Microsoft Azure subscription ID.
   * @param resourceGroupName Resource group name.
   * @param policyAssignmentName Policy assignment name.
   * @param [options] The optional parameters
   * @returns Promise<Models.PolicyStatesSummarizeForResourceGroupLevelPolicyAssignmentResponse>
   */
  summarizeForResourceGroupLevelPolicyAssignment(subscriptionId: string, resourceGroupName: string, policyAssignmentName: string, options?: Models.PolicyStatesSummarizeForResourceGroupLevelPolicyAssignmentOptionalParams): Promise<Models.PolicyStatesSummarizeForResourceGroupLevelPolicyAssignmentResponse>;
  /**
   * @param subscriptionId Microsoft Azure subscription ID.
   * @param resourceGroupName Resource group name.
   * @param policyAssignmentName Policy assignment name.
   * @param callback The callback
   */
  summarizeForResourceGroupLevelPolicyAssignment(subscriptionId: string, resourceGroupName: string, policyAssignmentName: string, callback: msRest.ServiceCallback<Models.SummarizeResults>): void;
  /**
   * @param subscriptionId Microsoft Azure subscription ID.
   * @param resourceGroupName Resource group name.
   * @param policyAssignmentName Policy assignment name.
   * @param options The optional parameters
   * @param callback The callback
   */
  summarizeForResourceGroupLevelPolicyAssignment(subscriptionId: string, resourceGroupName: string, policyAssignmentName: string, options: Models.PolicyStatesSummarizeForResourceGroupLevelPolicyAssignmentOptionalParams, callback: msRest.ServiceCallback<Models.SummarizeResults>): void;
  summarizeForResourceGroupLevelPolicyAssignment(subscriptionId: string, resourceGroupName: string, policyAssignmentName: string, options?: Models.PolicyStatesSummarizeForResourceGroupLevelPolicyAssignmentOptionalParams | msRest.ServiceCallback<Models.SummarizeResults>, callback?: msRest.ServiceCallback<Models.SummarizeResults>): Promise<Models.PolicyStatesSummarizeForResourceGroupLevelPolicyAssignmentResponse> {
    return this.client.sendOperationRequest(
      {
        subscriptionId,
        resourceGroupName,
        policyAssignmentName,
        options
      },
      summarizeForResourceGroupLevelPolicyAssignmentOperationSpec,
      callback) as Promise<Models.PolicyStatesSummarizeForResourceGroupLevelPolicyAssignmentResponse>;
  }

  /**
   * Triggers a policy evaluation scan for all the resources under the subscription
   * @param subscriptionId Microsoft Azure subscription ID.
   * @param [options] The optional parameters
   * @returns Promise<msRestAzure.LROPoller>
   */
  beginTriggerSubscriptionEvaluation(subscriptionId: string, options?: msRest.RequestOptionsBase): Promise<msRestAzure.LROPoller> {
    return this.client.sendLRORequest(
      {
        subscriptionId,
        options
      },
      beginTriggerSubscriptionEvaluationOperationSpec,
      options);
  }

  /**
   * Triggers a policy evaluation scan for all the resources under the resource group.
   * @param subscriptionId Microsoft Azure subscription ID.
   * @param resourceGroupName Resource group name.
   * @param [options] The optional parameters
   * @returns Promise<msRestAzure.LROPoller>
   */
  beginTriggerResourceGroupEvaluation(subscriptionId: string, resourceGroupName: string, options?: msRest.RequestOptionsBase): Promise<msRestAzure.LROPoller> {
    return this.client.sendLRORequest(
      {
        subscriptionId,
        resourceGroupName,
        options
      },
      beginTriggerResourceGroupEvaluationOperationSpec,
      options);
  }
}

// Operation Specifications
const serializer = new msRest.Serializer(Mappers);
const listQueryResultsForManagementGroupOperationSpec: msRest.OperationSpec = {
  httpMethod: "POST",
  path: "providers/{managementGroupsNamespace}/managementGroups/{managementGroupName}/providers/Microsoft.PolicyInsights/policyStates/{policyStatesResource}/queryResults",
  urlParameters: [
    Parameters.policyStatesResource,
    Parameters.managementGroupsNamespace,
    Parameters.managementGroupName
  ],
  queryParameters: [
    Parameters.apiVersion3,
    Parameters.top,
    Parameters.orderBy,
    Parameters.select,
    Parameters.from,
    Parameters.to,
    Parameters.filter,
    Parameters.apply
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    200: {
      bodyMapper: Mappers.PolicyStatesQueryResults
    },
    default: {
      bodyMapper: Mappers.QueryFailure
    }
  },
  serializer
};

const summarizeForManagementGroupOperationSpec: msRest.OperationSpec = {
  httpMethod: "POST",
  path: "providers/{managementGroupsNamespace}/managementGroups/{managementGroupName}/providers/Microsoft.PolicyInsights/policyStates/{policyStatesSummaryResource}/summarize",
  urlParameters: [
    Parameters.policyStatesSummaryResource,
    Parameters.managementGroupsNamespace,
    Parameters.managementGroupName
  ],
  queryParameters: [
    Parameters.apiVersion3,
    Parameters.top,
    Parameters.from,
    Parameters.to,
    Parameters.filter
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    200: {
      bodyMapper: Mappers.SummarizeResults
    },
    default: {
      bodyMapper: Mappers.QueryFailure
    }
  },
  serializer
};

const listQueryResultsForSubscriptionOperationSpec: msRest.OperationSpec = {
  httpMethod: "POST",
  path: "subscriptions/{subscriptionId}/providers/Microsoft.PolicyInsights/policyStates/{policyStatesResource}/queryResults",
  urlParameters: [
    Parameters.policyStatesResource,
    Parameters.subscriptionId
  ],
  queryParameters: [
    Parameters.apiVersion3,
    Parameters.top,
    Parameters.orderBy,
    Parameters.select,
    Parameters.from,
    Parameters.to,
    Parameters.filter,
    Parameters.apply
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    200: {
      bodyMapper: Mappers.PolicyStatesQueryResults
    },
    default: {
      bodyMapper: Mappers.QueryFailure
    }
  },
  serializer
};

const summarizeForSubscriptionOperationSpec: msRest.OperationSpec = {
  httpMethod: "POST",
  path: "subscriptions/{subscriptionId}/providers/Microsoft.PolicyInsights/policyStates/{policyStatesSummaryResource}/summarize",
  urlParameters: [
    Parameters.policyStatesSummaryResource,
    Parameters.subscriptionId
  ],
  queryParameters: [
    Parameters.apiVersion3,
    Parameters.top,
    Parameters.from,
    Parameters.to,
    Parameters.filter
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    200: {
      bodyMapper: Mappers.SummarizeResults
    },
    default: {
      bodyMapper: Mappers.QueryFailure
    }
  },
  serializer
};

const listQueryResultsForResourceGroupOperationSpec: msRest.OperationSpec = {
  httpMethod: "POST",
  path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.PolicyInsights/policyStates/{policyStatesResource}/queryResults",
  urlParameters: [
    Parameters.policyStatesResource,
    Parameters.subscriptionId,
    Parameters.resourceGroupName
  ],
  queryParameters: [
    Parameters.apiVersion3,
    Parameters.top,
    Parameters.orderBy,
    Parameters.select,
    Parameters.from,
    Parameters.to,
    Parameters.filter,
    Parameters.apply
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    200: {
      bodyMapper: Mappers.PolicyStatesQueryResults
    },
    default: {
      bodyMapper: Mappers.QueryFailure
    }
  },
  serializer
};

const summarizeForResourceGroupOperationSpec: msRest.OperationSpec = {
  httpMethod: "POST",
  path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.PolicyInsights/policyStates/{policyStatesSummaryResource}/summarize",
  urlParameters: [
    Parameters.policyStatesSummaryResource,
    Parameters.subscriptionId,
    Parameters.resourceGroupName
  ],
  queryParameters: [
    Parameters.apiVersion3,
    Parameters.top,
    Parameters.from,
    Parameters.to,
    Parameters.filter
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    200: {
      bodyMapper: Mappers.SummarizeResults
    },
    default: {
      bodyMapper: Mappers.QueryFailure
    }
  },
  serializer
};

const listQueryResultsForResourceOperationSpec: msRest.OperationSpec = {
  httpMethod: "POST",
  path: "{resourceId}/providers/Microsoft.PolicyInsights/policyStates/{policyStatesResource}/queryResults",
  urlParameters: [
    Parameters.policyStatesResource,
    Parameters.resourceId
  ],
  queryParameters: [
    Parameters.apiVersion3,
    Parameters.top,
    Parameters.orderBy,
    Parameters.select,
    Parameters.from,
    Parameters.to,
    Parameters.filter,
    Parameters.apply,
    Parameters.expand
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    200: {
      bodyMapper: Mappers.PolicyStatesQueryResults
    },
    default: {
      bodyMapper: Mappers.QueryFailure
    }
  },
  serializer
};

const summarizeForResourceOperationSpec: msRest.OperationSpec = {
  httpMethod: "POST",
  path: "{resourceId}/providers/Microsoft.PolicyInsights/policyStates/{policyStatesSummaryResource}/summarize",
  urlParameters: [
    Parameters.policyStatesSummaryResource,
    Parameters.resourceId
  ],
  queryParameters: [
    Parameters.apiVersion3,
    Parameters.top,
    Parameters.from,
    Parameters.to,
    Parameters.filter
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    200: {
      bodyMapper: Mappers.SummarizeResults
    },
    default: {
      bodyMapper: Mappers.QueryFailure
    }
  },
  serializer
};

const listQueryResultsForPolicySetDefinitionOperationSpec: msRest.OperationSpec = {
  httpMethod: "POST",
  path: "subscriptions/{subscriptionId}/providers/{authorizationNamespace}/policySetDefinitions/{policySetDefinitionName}/providers/Microsoft.PolicyInsights/policyStates/{policyStatesResource}/queryResults",
  urlParameters: [
    Parameters.policyStatesResource,
    Parameters.subscriptionId,
    Parameters.authorizationNamespace,
    Parameters.policySetDefinitionName
  ],
  queryParameters: [
    Parameters.apiVersion3,
    Parameters.top,
    Parameters.orderBy,
    Parameters.select,
    Parameters.from,
    Parameters.to,
    Parameters.filter,
    Parameters.apply
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    200: {
      bodyMapper: Mappers.PolicyStatesQueryResults
    },
    default: {
      bodyMapper: Mappers.QueryFailure
    }
  },
  serializer
};

const summarizeForPolicySetDefinitionOperationSpec: msRest.OperationSpec = {
  httpMethod: "POST",
  path: "subscriptions/{subscriptionId}/providers/{authorizationNamespace}/policySetDefinitions/{policySetDefinitionName}/providers/Microsoft.PolicyInsights/policyStates/{policyStatesSummaryResource}/summarize",
  urlParameters: [
    Parameters.policyStatesSummaryResource,
    Parameters.subscriptionId,
    Parameters.authorizationNamespace,
    Parameters.policySetDefinitionName
  ],
  queryParameters: [
    Parameters.apiVersion3,
    Parameters.top,
    Parameters.from,
    Parameters.to,
    Parameters.filter
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    200: {
      bodyMapper: Mappers.SummarizeResults
    },
    default: {
      bodyMapper: Mappers.QueryFailure
    }
  },
  serializer
};

const listQueryResultsForPolicyDefinitionOperationSpec: msRest.OperationSpec = {
  httpMethod: "POST",
  path: "subscriptions/{subscriptionId}/providers/{authorizationNamespace}/policyDefinitions/{policyDefinitionName}/providers/Microsoft.PolicyInsights/policyStates/{policyStatesResource}/queryResults",
  urlParameters: [
    Parameters.policyStatesResource,
    Parameters.subscriptionId,
    Parameters.authorizationNamespace,
    Parameters.policyDefinitionName
  ],
  queryParameters: [
    Parameters.apiVersion3,
    Parameters.top,
    Parameters.orderBy,
    Parameters.select,
    Parameters.from,
    Parameters.to,
    Parameters.filter,
    Parameters.apply
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    200: {
      bodyMapper: Mappers.PolicyStatesQueryResults
    },
    default: {
      bodyMapper: Mappers.QueryFailure
    }
  },
  serializer
};

const summarizeForPolicyDefinitionOperationSpec: msRest.OperationSpec = {
  httpMethod: "POST",
  path: "subscriptions/{subscriptionId}/providers/{authorizationNamespace}/policyDefinitions/{policyDefinitionName}/providers/Microsoft.PolicyInsights/policyStates/{policyStatesSummaryResource}/summarize",
  urlParameters: [
    Parameters.policyStatesSummaryResource,
    Parameters.subscriptionId,
    Parameters.authorizationNamespace,
    Parameters.policyDefinitionName
  ],
  queryParameters: [
    Parameters.apiVersion3,
    Parameters.top,
    Parameters.from,
    Parameters.to,
    Parameters.filter
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    200: {
      bodyMapper: Mappers.SummarizeResults
    },
    default: {
      bodyMapper: Mappers.QueryFailure
    }
  },
  serializer
};

const listQueryResultsForSubscriptionLevelPolicyAssignmentOperationSpec: msRest.OperationSpec = {
  httpMethod: "POST",
  path: "subscriptions/{subscriptionId}/providers/{authorizationNamespace}/policyAssignments/{policyAssignmentName}/providers/Microsoft.PolicyInsights/policyStates/{policyStatesResource}/queryResults",
  urlParameters: [
    Parameters.policyStatesResource,
    Parameters.subscriptionId,
    Parameters.authorizationNamespace,
    Parameters.policyAssignmentName
  ],
  queryParameters: [
    Parameters.apiVersion3,
    Parameters.top,
    Parameters.orderBy,
    Parameters.select,
    Parameters.from,
    Parameters.to,
    Parameters.filter,
    Parameters.apply
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    200: {
      bodyMapper: Mappers.PolicyStatesQueryResults
    },
    default: {
      bodyMapper: Mappers.QueryFailure
    }
  },
  serializer
};

const summarizeForSubscriptionLevelPolicyAssignmentOperationSpec: msRest.OperationSpec = {
  httpMethod: "POST",
  path: "subscriptions/{subscriptionId}/providers/{authorizationNamespace}/policyAssignments/{policyAssignmentName}/providers/Microsoft.PolicyInsights/policyStates/{policyStatesSummaryResource}/summarize",
  urlParameters: [
    Parameters.policyStatesSummaryResource,
    Parameters.subscriptionId,
    Parameters.authorizationNamespace,
    Parameters.policyAssignmentName
  ],
  queryParameters: [
    Parameters.apiVersion3,
    Parameters.top,
    Parameters.from,
    Parameters.to,
    Parameters.filter
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    200: {
      bodyMapper: Mappers.SummarizeResults
    },
    default: {
      bodyMapper: Mappers.QueryFailure
    }
  },
  serializer
};

const listQueryResultsForResourceGroupLevelPolicyAssignmentOperationSpec: msRest.OperationSpec = {
  httpMethod: "POST",
  path: "subscriptions/{subscriptionId}/resourcegroups/{resourceGroupName}/providers/{authorizationNamespace}/policyAssignments/{policyAssignmentName}/providers/Microsoft.PolicyInsights/policyStates/{policyStatesResource}/queryResults",
  urlParameters: [
    Parameters.policyStatesResource,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.authorizationNamespace,
    Parameters.policyAssignmentName
  ],
  queryParameters: [
    Parameters.apiVersion3,
    Parameters.top,
    Parameters.orderBy,
    Parameters.select,
    Parameters.from,
    Parameters.to,
    Parameters.filter,
    Parameters.apply
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    200: {
      bodyMapper: Mappers.PolicyStatesQueryResults
    },
    default: {
      bodyMapper: Mappers.QueryFailure
    }
  },
  serializer
};

const summarizeForResourceGroupLevelPolicyAssignmentOperationSpec: msRest.OperationSpec = {
  httpMethod: "POST",
  path: "subscriptions/{subscriptionId}/resourcegroups/{resourceGroupName}/providers/{authorizationNamespace}/policyAssignments/{policyAssignmentName}/providers/Microsoft.PolicyInsights/policyStates/{policyStatesSummaryResource}/summarize",
  urlParameters: [
    Parameters.policyStatesSummaryResource,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.authorizationNamespace,
    Parameters.policyAssignmentName
  ],
  queryParameters: [
    Parameters.apiVersion3,
    Parameters.top,
    Parameters.from,
    Parameters.to,
    Parameters.filter
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    200: {
      bodyMapper: Mappers.SummarizeResults
    },
    default: {
      bodyMapper: Mappers.QueryFailure
    }
  },
  serializer
};

const beginTriggerSubscriptionEvaluationOperationSpec: msRest.OperationSpec = {
  httpMethod: "POST",
  path: "subscriptions/{subscriptionId}/providers/Microsoft.PolicyInsights/policyStates/latest/triggerEvaluation",
  urlParameters: [
    Parameters.subscriptionId
  ],
  queryParameters: [
    Parameters.apiVersion3
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    200: {},
    202: {},
    default: {
      bodyMapper: Mappers.QueryFailure
    }
  },
  serializer
};

const beginTriggerResourceGroupEvaluationOperationSpec: msRest.OperationSpec = {
  httpMethod: "POST",
  path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.PolicyInsights/policyStates/latest/triggerEvaluation",
  urlParameters: [
    Parameters.subscriptionId,
    Parameters.resourceGroupName
  ],
  queryParameters: [
    Parameters.apiVersion3
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    200: {},
    202: {},
    default: {
      bodyMapper: Mappers.QueryFailure
    }
  },
  serializer
};
