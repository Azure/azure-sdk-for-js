/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */

import { PagedAsyncIterableIterator, PageSettings } from "@azure/core-paging";
import { setContinuationToken } from "../pagingHelper";
import { PolicyStates } from "../operationsInterfaces";
import * as coreClient from "@azure/core-client";
import * as Mappers from "../models/mappers";
import * as Parameters from "../models/parameters";
import { PolicyInsightsClient } from "../policyInsightsClient";
import { PollerLike, PollOperationState, LroEngine } from "@azure/core-lro";
import { LroImpl } from "../lroImpl";
import {
  PolicyState,
  PolicyStatesResource,
  PolicyStatesListQueryResultsForManagementGroupNextOptionalParams,
  PolicyStatesListQueryResultsForManagementGroupOptionalParams,
  PolicyStatesListQueryResultsForManagementGroupResponse,
  PolicyStatesListQueryResultsForSubscriptionNextOptionalParams,
  PolicyStatesListQueryResultsForSubscriptionOptionalParams,
  PolicyStatesListQueryResultsForSubscriptionResponse,
  PolicyStatesListQueryResultsForResourceGroupNextOptionalParams,
  PolicyStatesListQueryResultsForResourceGroupOptionalParams,
  PolicyStatesListQueryResultsForResourceGroupResponse,
  PolicyStatesListQueryResultsForResourceNextOptionalParams,
  PolicyStatesListQueryResultsForResourceOptionalParams,
  PolicyStatesListQueryResultsForResourceResponse,
  PolicyStatesListQueryResultsForPolicySetDefinitionNextOptionalParams,
  PolicyStatesListQueryResultsForPolicySetDefinitionOptionalParams,
  PolicyStatesListQueryResultsForPolicySetDefinitionResponse,
  PolicyStatesListQueryResultsForPolicyDefinitionNextOptionalParams,
  PolicyStatesListQueryResultsForPolicyDefinitionOptionalParams,
  PolicyStatesListQueryResultsForPolicyDefinitionResponse,
  PolicyStatesListQueryResultsForSubscriptionLevelPolicyAssignmentNextOptionalParams,
  PolicyStatesListQueryResultsForSubscriptionLevelPolicyAssignmentOptionalParams,
  PolicyStatesListQueryResultsForSubscriptionLevelPolicyAssignmentResponse,
  PolicyStatesListQueryResultsForResourceGroupLevelPolicyAssignmentNextOptionalParams,
  PolicyStatesListQueryResultsForResourceGroupLevelPolicyAssignmentOptionalParams,
  PolicyStatesListQueryResultsForResourceGroupLevelPolicyAssignmentResponse,
  PolicyStatesSummaryResourceType,
  PolicyStatesSummarizeForManagementGroupOptionalParams,
  PolicyStatesSummarizeForManagementGroupResponse,
  PolicyStatesSummarizeForSubscriptionOptionalParams,
  PolicyStatesSummarizeForSubscriptionResponse,
  PolicyStatesSummarizeForResourceGroupOptionalParams,
  PolicyStatesSummarizeForResourceGroupResponse,
  PolicyStatesSummarizeForResourceOptionalParams,
  PolicyStatesSummarizeForResourceResponse,
  PolicyStatesTriggerSubscriptionEvaluationOptionalParams,
  PolicyStatesTriggerResourceGroupEvaluationOptionalParams,
  PolicyStatesSummarizeForPolicySetDefinitionOptionalParams,
  PolicyStatesSummarizeForPolicySetDefinitionResponse,
  PolicyStatesSummarizeForPolicyDefinitionOptionalParams,
  PolicyStatesSummarizeForPolicyDefinitionResponse,
  PolicyStatesSummarizeForSubscriptionLevelPolicyAssignmentOptionalParams,
  PolicyStatesSummarizeForSubscriptionLevelPolicyAssignmentResponse,
  PolicyStatesSummarizeForResourceGroupLevelPolicyAssignmentOptionalParams,
  PolicyStatesSummarizeForResourceGroupLevelPolicyAssignmentResponse,
  PolicyStatesListQueryResultsForManagementGroupNextResponse,
  PolicyStatesListQueryResultsForSubscriptionNextResponse,
  PolicyStatesListQueryResultsForResourceGroupNextResponse,
  PolicyStatesListQueryResultsForResourceNextResponse,
  PolicyStatesListQueryResultsForPolicySetDefinitionNextResponse,
  PolicyStatesListQueryResultsForPolicyDefinitionNextResponse,
  PolicyStatesListQueryResultsForSubscriptionLevelPolicyAssignmentNextResponse,
  PolicyStatesListQueryResultsForResourceGroupLevelPolicyAssignmentNextResponse
} from "../models";

/// <reference lib="esnext.asynciterable" />
/** Class containing PolicyStates operations. */
export class PolicyStatesImpl implements PolicyStates {
  private readonly client: PolicyInsightsClient;

  /**
   * Initialize a new instance of the class PolicyStates class.
   * @param client Reference to the service client
   */
  constructor(client: PolicyInsightsClient) {
    this.client = client;
  }

  /**
   * Queries policy states for the resources under the management group.
   * @param policyStatesResource The virtual resource under PolicyStates resource type. In a given time
   *                             range, 'latest' represents the latest policy state(s), whereas 'default' represents all policy
   *                             state(s).
   * @param managementGroupName Management group name.
   * @param options The options parameters.
   */
  public listQueryResultsForManagementGroup(
    policyStatesResource: PolicyStatesResource,
    managementGroupName: string,
    options?: PolicyStatesListQueryResultsForManagementGroupOptionalParams
  ): PagedAsyncIterableIterator<PolicyState> {
    const iter = this.listQueryResultsForManagementGroupPagingAll(
      policyStatesResource,
      managementGroupName,
      options
    );
    return {
      next() {
        return iter.next();
      },
      [Symbol.asyncIterator]() {
        return this;
      },
      byPage: (settings?: PageSettings) => {
        if (settings?.maxPageSize) {
          throw new Error("maxPageSize is not supported by this operation.");
        }
        return this.listQueryResultsForManagementGroupPagingPage(
          policyStatesResource,
          managementGroupName,
          options,
          settings
        );
      }
    };
  }

  private async *listQueryResultsForManagementGroupPagingPage(
    policyStatesResource: PolicyStatesResource,
    managementGroupName: string,
    options?: PolicyStatesListQueryResultsForManagementGroupOptionalParams,
    settings?: PageSettings
  ): AsyncIterableIterator<PolicyState[]> {
    let result: PolicyStatesListQueryResultsForManagementGroupResponse;
    let continuationToken = settings?.continuationToken;
    if (!continuationToken) {
      result = await this._listQueryResultsForManagementGroup(
        policyStatesResource,
        managementGroupName,
        options
      );
      let page = result.value || [];
      continuationToken = result.odataNextLink;
      setContinuationToken(page, continuationToken);
      yield page;
    }
    while (continuationToken) {
      result = await this._listQueryResultsForManagementGroupNext(
        policyStatesResource,
        managementGroupName,
        continuationToken,
        options
      );
      continuationToken = result.odataNextLink;
      let page = result.value || [];
      setContinuationToken(page, continuationToken);
      yield page;
    }
  }

  private async *listQueryResultsForManagementGroupPagingAll(
    policyStatesResource: PolicyStatesResource,
    managementGroupName: string,
    options?: PolicyStatesListQueryResultsForManagementGroupOptionalParams
  ): AsyncIterableIterator<PolicyState> {
    for await (const page of this.listQueryResultsForManagementGroupPagingPage(
      policyStatesResource,
      managementGroupName,
      options
    )) {
      yield* page;
    }
  }

  /**
   * Queries policy states for the resources under the subscription.
   * @param policyStatesResource The virtual resource under PolicyStates resource type. In a given time
   *                             range, 'latest' represents the latest policy state(s), whereas 'default' represents all policy
   *                             state(s).
   * @param subscriptionId Microsoft Azure subscription ID.
   * @param options The options parameters.
   */
  public listQueryResultsForSubscription(
    policyStatesResource: PolicyStatesResource,
    subscriptionId: string,
    options?: PolicyStatesListQueryResultsForSubscriptionOptionalParams
  ): PagedAsyncIterableIterator<PolicyState> {
    const iter = this.listQueryResultsForSubscriptionPagingAll(
      policyStatesResource,
      subscriptionId,
      options
    );
    return {
      next() {
        return iter.next();
      },
      [Symbol.asyncIterator]() {
        return this;
      },
      byPage: (settings?: PageSettings) => {
        if (settings?.maxPageSize) {
          throw new Error("maxPageSize is not supported by this operation.");
        }
        return this.listQueryResultsForSubscriptionPagingPage(
          policyStatesResource,
          subscriptionId,
          options,
          settings
        );
      }
    };
  }

  private async *listQueryResultsForSubscriptionPagingPage(
    policyStatesResource: PolicyStatesResource,
    subscriptionId: string,
    options?: PolicyStatesListQueryResultsForSubscriptionOptionalParams,
    settings?: PageSettings
  ): AsyncIterableIterator<PolicyState[]> {
    let result: PolicyStatesListQueryResultsForSubscriptionResponse;
    let continuationToken = settings?.continuationToken;
    if (!continuationToken) {
      result = await this._listQueryResultsForSubscription(
        policyStatesResource,
        subscriptionId,
        options
      );
      let page = result.value || [];
      continuationToken = result.odataNextLink;
      setContinuationToken(page, continuationToken);
      yield page;
    }
    while (continuationToken) {
      result = await this._listQueryResultsForSubscriptionNext(
        policyStatesResource,
        subscriptionId,
        continuationToken,
        options
      );
      continuationToken = result.odataNextLink;
      let page = result.value || [];
      setContinuationToken(page, continuationToken);
      yield page;
    }
  }

  private async *listQueryResultsForSubscriptionPagingAll(
    policyStatesResource: PolicyStatesResource,
    subscriptionId: string,
    options?: PolicyStatesListQueryResultsForSubscriptionOptionalParams
  ): AsyncIterableIterator<PolicyState> {
    for await (const page of this.listQueryResultsForSubscriptionPagingPage(
      policyStatesResource,
      subscriptionId,
      options
    )) {
      yield* page;
    }
  }

  /**
   * Queries policy states for the resources under the resource group.
   * @param policyStatesResource The virtual resource under PolicyStates resource type. In a given time
   *                             range, 'latest' represents the latest policy state(s), whereas 'default' represents all policy
   *                             state(s).
   * @param subscriptionId Microsoft Azure subscription ID.
   * @param resourceGroupName Resource group name.
   * @param options The options parameters.
   */
  public listQueryResultsForResourceGroup(
    policyStatesResource: PolicyStatesResource,
    subscriptionId: string,
    resourceGroupName: string,
    options?: PolicyStatesListQueryResultsForResourceGroupOptionalParams
  ): PagedAsyncIterableIterator<PolicyState> {
    const iter = this.listQueryResultsForResourceGroupPagingAll(
      policyStatesResource,
      subscriptionId,
      resourceGroupName,
      options
    );
    return {
      next() {
        return iter.next();
      },
      [Symbol.asyncIterator]() {
        return this;
      },
      byPage: (settings?: PageSettings) => {
        if (settings?.maxPageSize) {
          throw new Error("maxPageSize is not supported by this operation.");
        }
        return this.listQueryResultsForResourceGroupPagingPage(
          policyStatesResource,
          subscriptionId,
          resourceGroupName,
          options,
          settings
        );
      }
    };
  }

  private async *listQueryResultsForResourceGroupPagingPage(
    policyStatesResource: PolicyStatesResource,
    subscriptionId: string,
    resourceGroupName: string,
    options?: PolicyStatesListQueryResultsForResourceGroupOptionalParams,
    settings?: PageSettings
  ): AsyncIterableIterator<PolicyState[]> {
    let result: PolicyStatesListQueryResultsForResourceGroupResponse;
    let continuationToken = settings?.continuationToken;
    if (!continuationToken) {
      result = await this._listQueryResultsForResourceGroup(
        policyStatesResource,
        subscriptionId,
        resourceGroupName,
        options
      );
      let page = result.value || [];
      continuationToken = result.odataNextLink;
      setContinuationToken(page, continuationToken);
      yield page;
    }
    while (continuationToken) {
      result = await this._listQueryResultsForResourceGroupNext(
        policyStatesResource,
        subscriptionId,
        resourceGroupName,
        continuationToken,
        options
      );
      continuationToken = result.odataNextLink;
      let page = result.value || [];
      setContinuationToken(page, continuationToken);
      yield page;
    }
  }

  private async *listQueryResultsForResourceGroupPagingAll(
    policyStatesResource: PolicyStatesResource,
    subscriptionId: string,
    resourceGroupName: string,
    options?: PolicyStatesListQueryResultsForResourceGroupOptionalParams
  ): AsyncIterableIterator<PolicyState> {
    for await (const page of this.listQueryResultsForResourceGroupPagingPage(
      policyStatesResource,
      subscriptionId,
      resourceGroupName,
      options
    )) {
      yield* page;
    }
  }

  /**
   * Queries policy states for the resource.
   * @param policyStatesResource The virtual resource under PolicyStates resource type. In a given time
   *                             range, 'latest' represents the latest policy state(s), whereas 'default' represents all policy
   *                             state(s).
   * @param resourceId Resource ID.
   * @param options The options parameters.
   */
  public listQueryResultsForResource(
    policyStatesResource: PolicyStatesResource,
    resourceId: string,
    options?: PolicyStatesListQueryResultsForResourceOptionalParams
  ): PagedAsyncIterableIterator<PolicyState> {
    const iter = this.listQueryResultsForResourcePagingAll(
      policyStatesResource,
      resourceId,
      options
    );
    return {
      next() {
        return iter.next();
      },
      [Symbol.asyncIterator]() {
        return this;
      },
      byPage: (settings?: PageSettings) => {
        if (settings?.maxPageSize) {
          throw new Error("maxPageSize is not supported by this operation.");
        }
        return this.listQueryResultsForResourcePagingPage(
          policyStatesResource,
          resourceId,
          options,
          settings
        );
      }
    };
  }

  private async *listQueryResultsForResourcePagingPage(
    policyStatesResource: PolicyStatesResource,
    resourceId: string,
    options?: PolicyStatesListQueryResultsForResourceOptionalParams,
    settings?: PageSettings
  ): AsyncIterableIterator<PolicyState[]> {
    let result: PolicyStatesListQueryResultsForResourceResponse;
    let continuationToken = settings?.continuationToken;
    if (!continuationToken) {
      result = await this._listQueryResultsForResource(
        policyStatesResource,
        resourceId,
        options
      );
      let page = result.value || [];
      continuationToken = result.odataNextLink;
      setContinuationToken(page, continuationToken);
      yield page;
    }
    while (continuationToken) {
      result = await this._listQueryResultsForResourceNext(
        policyStatesResource,
        resourceId,
        continuationToken,
        options
      );
      continuationToken = result.odataNextLink;
      let page = result.value || [];
      setContinuationToken(page, continuationToken);
      yield page;
    }
  }

  private async *listQueryResultsForResourcePagingAll(
    policyStatesResource: PolicyStatesResource,
    resourceId: string,
    options?: PolicyStatesListQueryResultsForResourceOptionalParams
  ): AsyncIterableIterator<PolicyState> {
    for await (const page of this.listQueryResultsForResourcePagingPage(
      policyStatesResource,
      resourceId,
      options
    )) {
      yield* page;
    }
  }

  /**
   * Queries policy states for the subscription level policy set definition.
   * @param policyStatesResource The virtual resource under PolicyStates resource type. In a given time
   *                             range, 'latest' represents the latest policy state(s), whereas 'default' represents all policy
   *                             state(s).
   * @param subscriptionId Microsoft Azure subscription ID.
   * @param policySetDefinitionName Policy set definition name.
   * @param options The options parameters.
   */
  public listQueryResultsForPolicySetDefinition(
    policyStatesResource: PolicyStatesResource,
    subscriptionId: string,
    policySetDefinitionName: string,
    options?: PolicyStatesListQueryResultsForPolicySetDefinitionOptionalParams
  ): PagedAsyncIterableIterator<PolicyState> {
    const iter = this.listQueryResultsForPolicySetDefinitionPagingAll(
      policyStatesResource,
      subscriptionId,
      policySetDefinitionName,
      options
    );
    return {
      next() {
        return iter.next();
      },
      [Symbol.asyncIterator]() {
        return this;
      },
      byPage: (settings?: PageSettings) => {
        if (settings?.maxPageSize) {
          throw new Error("maxPageSize is not supported by this operation.");
        }
        return this.listQueryResultsForPolicySetDefinitionPagingPage(
          policyStatesResource,
          subscriptionId,
          policySetDefinitionName,
          options,
          settings
        );
      }
    };
  }

  private async *listQueryResultsForPolicySetDefinitionPagingPage(
    policyStatesResource: PolicyStatesResource,
    subscriptionId: string,
    policySetDefinitionName: string,
    options?: PolicyStatesListQueryResultsForPolicySetDefinitionOptionalParams,
    settings?: PageSettings
  ): AsyncIterableIterator<PolicyState[]> {
    let result: PolicyStatesListQueryResultsForPolicySetDefinitionResponse;
    let continuationToken = settings?.continuationToken;
    if (!continuationToken) {
      result = await this._listQueryResultsForPolicySetDefinition(
        policyStatesResource,
        subscriptionId,
        policySetDefinitionName,
        options
      );
      let page = result.value || [];
      continuationToken = result.odataNextLink;
      setContinuationToken(page, continuationToken);
      yield page;
    }
    while (continuationToken) {
      result = await this._listQueryResultsForPolicySetDefinitionNext(
        policyStatesResource,
        subscriptionId,
        policySetDefinitionName,
        continuationToken,
        options
      );
      continuationToken = result.odataNextLink;
      let page = result.value || [];
      setContinuationToken(page, continuationToken);
      yield page;
    }
  }

  private async *listQueryResultsForPolicySetDefinitionPagingAll(
    policyStatesResource: PolicyStatesResource,
    subscriptionId: string,
    policySetDefinitionName: string,
    options?: PolicyStatesListQueryResultsForPolicySetDefinitionOptionalParams
  ): AsyncIterableIterator<PolicyState> {
    for await (const page of this.listQueryResultsForPolicySetDefinitionPagingPage(
      policyStatesResource,
      subscriptionId,
      policySetDefinitionName,
      options
    )) {
      yield* page;
    }
  }

  /**
   * Queries policy states for the subscription level policy definition.
   * @param policyStatesResource The virtual resource under PolicyStates resource type. In a given time
   *                             range, 'latest' represents the latest policy state(s), whereas 'default' represents all policy
   *                             state(s).
   * @param subscriptionId Microsoft Azure subscription ID.
   * @param policyDefinitionName Policy definition name.
   * @param options The options parameters.
   */
  public listQueryResultsForPolicyDefinition(
    policyStatesResource: PolicyStatesResource,
    subscriptionId: string,
    policyDefinitionName: string,
    options?: PolicyStatesListQueryResultsForPolicyDefinitionOptionalParams
  ): PagedAsyncIterableIterator<PolicyState> {
    const iter = this.listQueryResultsForPolicyDefinitionPagingAll(
      policyStatesResource,
      subscriptionId,
      policyDefinitionName,
      options
    );
    return {
      next() {
        return iter.next();
      },
      [Symbol.asyncIterator]() {
        return this;
      },
      byPage: (settings?: PageSettings) => {
        if (settings?.maxPageSize) {
          throw new Error("maxPageSize is not supported by this operation.");
        }
        return this.listQueryResultsForPolicyDefinitionPagingPage(
          policyStatesResource,
          subscriptionId,
          policyDefinitionName,
          options,
          settings
        );
      }
    };
  }

  private async *listQueryResultsForPolicyDefinitionPagingPage(
    policyStatesResource: PolicyStatesResource,
    subscriptionId: string,
    policyDefinitionName: string,
    options?: PolicyStatesListQueryResultsForPolicyDefinitionOptionalParams,
    settings?: PageSettings
  ): AsyncIterableIterator<PolicyState[]> {
    let result: PolicyStatesListQueryResultsForPolicyDefinitionResponse;
    let continuationToken = settings?.continuationToken;
    if (!continuationToken) {
      result = await this._listQueryResultsForPolicyDefinition(
        policyStatesResource,
        subscriptionId,
        policyDefinitionName,
        options
      );
      let page = result.value || [];
      continuationToken = result.odataNextLink;
      setContinuationToken(page, continuationToken);
      yield page;
    }
    while (continuationToken) {
      result = await this._listQueryResultsForPolicyDefinitionNext(
        policyStatesResource,
        subscriptionId,
        policyDefinitionName,
        continuationToken,
        options
      );
      continuationToken = result.odataNextLink;
      let page = result.value || [];
      setContinuationToken(page, continuationToken);
      yield page;
    }
  }

  private async *listQueryResultsForPolicyDefinitionPagingAll(
    policyStatesResource: PolicyStatesResource,
    subscriptionId: string,
    policyDefinitionName: string,
    options?: PolicyStatesListQueryResultsForPolicyDefinitionOptionalParams
  ): AsyncIterableIterator<PolicyState> {
    for await (const page of this.listQueryResultsForPolicyDefinitionPagingPage(
      policyStatesResource,
      subscriptionId,
      policyDefinitionName,
      options
    )) {
      yield* page;
    }
  }

  /**
   * Queries policy states for the subscription level policy assignment.
   * @param policyStatesResource The virtual resource under PolicyStates resource type. In a given time
   *                             range, 'latest' represents the latest policy state(s), whereas 'default' represents all policy
   *                             state(s).
   * @param subscriptionId Microsoft Azure subscription ID.
   * @param policyAssignmentName Policy assignment name.
   * @param options The options parameters.
   */
  public listQueryResultsForSubscriptionLevelPolicyAssignment(
    policyStatesResource: PolicyStatesResource,
    subscriptionId: string,
    policyAssignmentName: string,
    options?: PolicyStatesListQueryResultsForSubscriptionLevelPolicyAssignmentOptionalParams
  ): PagedAsyncIterableIterator<PolicyState> {
    const iter = this.listQueryResultsForSubscriptionLevelPolicyAssignmentPagingAll(
      policyStatesResource,
      subscriptionId,
      policyAssignmentName,
      options
    );
    return {
      next() {
        return iter.next();
      },
      [Symbol.asyncIterator]() {
        return this;
      },
      byPage: (settings?: PageSettings) => {
        if (settings?.maxPageSize) {
          throw new Error("maxPageSize is not supported by this operation.");
        }
        return this.listQueryResultsForSubscriptionLevelPolicyAssignmentPagingPage(
          policyStatesResource,
          subscriptionId,
          policyAssignmentName,
          options,
          settings
        );
      }
    };
  }

  private async *listQueryResultsForSubscriptionLevelPolicyAssignmentPagingPage(
    policyStatesResource: PolicyStatesResource,
    subscriptionId: string,
    policyAssignmentName: string,
    options?: PolicyStatesListQueryResultsForSubscriptionLevelPolicyAssignmentOptionalParams,
    settings?: PageSettings
  ): AsyncIterableIterator<PolicyState[]> {
    let result: PolicyStatesListQueryResultsForSubscriptionLevelPolicyAssignmentResponse;
    let continuationToken = settings?.continuationToken;
    if (!continuationToken) {
      result = await this._listQueryResultsForSubscriptionLevelPolicyAssignment(
        policyStatesResource,
        subscriptionId,
        policyAssignmentName,
        options
      );
      let page = result.value || [];
      continuationToken = result.odataNextLink;
      setContinuationToken(page, continuationToken);
      yield page;
    }
    while (continuationToken) {
      result = await this._listQueryResultsForSubscriptionLevelPolicyAssignmentNext(
        policyStatesResource,
        subscriptionId,
        policyAssignmentName,
        continuationToken,
        options
      );
      continuationToken = result.odataNextLink;
      let page = result.value || [];
      setContinuationToken(page, continuationToken);
      yield page;
    }
  }

  private async *listQueryResultsForSubscriptionLevelPolicyAssignmentPagingAll(
    policyStatesResource: PolicyStatesResource,
    subscriptionId: string,
    policyAssignmentName: string,
    options?: PolicyStatesListQueryResultsForSubscriptionLevelPolicyAssignmentOptionalParams
  ): AsyncIterableIterator<PolicyState> {
    for await (const page of this.listQueryResultsForSubscriptionLevelPolicyAssignmentPagingPage(
      policyStatesResource,
      subscriptionId,
      policyAssignmentName,
      options
    )) {
      yield* page;
    }
  }

  /**
   * Queries policy states for the resource group level policy assignment.
   * @param policyStatesResource The virtual resource under PolicyStates resource type. In a given time
   *                             range, 'latest' represents the latest policy state(s), whereas 'default' represents all policy
   *                             state(s).
   * @param subscriptionId Microsoft Azure subscription ID.
   * @param resourceGroupName Resource group name.
   * @param policyAssignmentName Policy assignment name.
   * @param options The options parameters.
   */
  public listQueryResultsForResourceGroupLevelPolicyAssignment(
    policyStatesResource: PolicyStatesResource,
    subscriptionId: string,
    resourceGroupName: string,
    policyAssignmentName: string,
    options?: PolicyStatesListQueryResultsForResourceGroupLevelPolicyAssignmentOptionalParams
  ): PagedAsyncIterableIterator<PolicyState> {
    const iter = this.listQueryResultsForResourceGroupLevelPolicyAssignmentPagingAll(
      policyStatesResource,
      subscriptionId,
      resourceGroupName,
      policyAssignmentName,
      options
    );
    return {
      next() {
        return iter.next();
      },
      [Symbol.asyncIterator]() {
        return this;
      },
      byPage: (settings?: PageSettings) => {
        if (settings?.maxPageSize) {
          throw new Error("maxPageSize is not supported by this operation.");
        }
        return this.listQueryResultsForResourceGroupLevelPolicyAssignmentPagingPage(
          policyStatesResource,
          subscriptionId,
          resourceGroupName,
          policyAssignmentName,
          options,
          settings
        );
      }
    };
  }

  private async *listQueryResultsForResourceGroupLevelPolicyAssignmentPagingPage(
    policyStatesResource: PolicyStatesResource,
    subscriptionId: string,
    resourceGroupName: string,
    policyAssignmentName: string,
    options?: PolicyStatesListQueryResultsForResourceGroupLevelPolicyAssignmentOptionalParams,
    settings?: PageSettings
  ): AsyncIterableIterator<PolicyState[]> {
    let result: PolicyStatesListQueryResultsForResourceGroupLevelPolicyAssignmentResponse;
    let continuationToken = settings?.continuationToken;
    if (!continuationToken) {
      result = await this._listQueryResultsForResourceGroupLevelPolicyAssignment(
        policyStatesResource,
        subscriptionId,
        resourceGroupName,
        policyAssignmentName,
        options
      );
      let page = result.value || [];
      continuationToken = result.odataNextLink;
      setContinuationToken(page, continuationToken);
      yield page;
    }
    while (continuationToken) {
      result = await this._listQueryResultsForResourceGroupLevelPolicyAssignmentNext(
        policyStatesResource,
        subscriptionId,
        resourceGroupName,
        policyAssignmentName,
        continuationToken,
        options
      );
      continuationToken = result.odataNextLink;
      let page = result.value || [];
      setContinuationToken(page, continuationToken);
      yield page;
    }
  }

  private async *listQueryResultsForResourceGroupLevelPolicyAssignmentPagingAll(
    policyStatesResource: PolicyStatesResource,
    subscriptionId: string,
    resourceGroupName: string,
    policyAssignmentName: string,
    options?: PolicyStatesListQueryResultsForResourceGroupLevelPolicyAssignmentOptionalParams
  ): AsyncIterableIterator<PolicyState> {
    for await (const page of this.listQueryResultsForResourceGroupLevelPolicyAssignmentPagingPage(
      policyStatesResource,
      subscriptionId,
      resourceGroupName,
      policyAssignmentName,
      options
    )) {
      yield* page;
    }
  }

  /**
   * Queries policy states for the resources under the management group.
   * @param policyStatesResource The virtual resource under PolicyStates resource type. In a given time
   *                             range, 'latest' represents the latest policy state(s), whereas 'default' represents all policy
   *                             state(s).
   * @param managementGroupName Management group name.
   * @param options The options parameters.
   */
  private _listQueryResultsForManagementGroup(
    policyStatesResource: PolicyStatesResource,
    managementGroupName: string,
    options?: PolicyStatesListQueryResultsForManagementGroupOptionalParams
  ): Promise<PolicyStatesListQueryResultsForManagementGroupResponse> {
    return this.client.sendOperationRequest(
      { policyStatesResource, managementGroupName, options },
      listQueryResultsForManagementGroupOperationSpec
    );
  }

  /**
   * Summarizes policy states for the resources under the management group.
   * @param policyStatesSummaryResource The virtual resource under PolicyStates resource type for
   *                                    summarize action. In a given time range, 'latest' represents the latest policy state(s) and is the
   *                                    only allowed value.
   * @param managementGroupName Management group name.
   * @param options The options parameters.
   */
  summarizeForManagementGroup(
    policyStatesSummaryResource: PolicyStatesSummaryResourceType,
    managementGroupName: string,
    options?: PolicyStatesSummarizeForManagementGroupOptionalParams
  ): Promise<PolicyStatesSummarizeForManagementGroupResponse> {
    return this.client.sendOperationRequest(
      { policyStatesSummaryResource, managementGroupName, options },
      summarizeForManagementGroupOperationSpec
    );
  }

  /**
   * Queries policy states for the resources under the subscription.
   * @param policyStatesResource The virtual resource under PolicyStates resource type. In a given time
   *                             range, 'latest' represents the latest policy state(s), whereas 'default' represents all policy
   *                             state(s).
   * @param subscriptionId Microsoft Azure subscription ID.
   * @param options The options parameters.
   */
  private _listQueryResultsForSubscription(
    policyStatesResource: PolicyStatesResource,
    subscriptionId: string,
    options?: PolicyStatesListQueryResultsForSubscriptionOptionalParams
  ): Promise<PolicyStatesListQueryResultsForSubscriptionResponse> {
    return this.client.sendOperationRequest(
      { policyStatesResource, subscriptionId, options },
      listQueryResultsForSubscriptionOperationSpec
    );
  }

  /**
   * Summarizes policy states for the resources under the subscription.
   * @param policyStatesSummaryResource The virtual resource under PolicyStates resource type for
   *                                    summarize action. In a given time range, 'latest' represents the latest policy state(s) and is the
   *                                    only allowed value.
   * @param subscriptionId Microsoft Azure subscription ID.
   * @param options The options parameters.
   */
  summarizeForSubscription(
    policyStatesSummaryResource: PolicyStatesSummaryResourceType,
    subscriptionId: string,
    options?: PolicyStatesSummarizeForSubscriptionOptionalParams
  ): Promise<PolicyStatesSummarizeForSubscriptionResponse> {
    return this.client.sendOperationRequest(
      { policyStatesSummaryResource, subscriptionId, options },
      summarizeForSubscriptionOperationSpec
    );
  }

  /**
   * Queries policy states for the resources under the resource group.
   * @param policyStatesResource The virtual resource under PolicyStates resource type. In a given time
   *                             range, 'latest' represents the latest policy state(s), whereas 'default' represents all policy
   *                             state(s).
   * @param subscriptionId Microsoft Azure subscription ID.
   * @param resourceGroupName Resource group name.
   * @param options The options parameters.
   */
  private _listQueryResultsForResourceGroup(
    policyStatesResource: PolicyStatesResource,
    subscriptionId: string,
    resourceGroupName: string,
    options?: PolicyStatesListQueryResultsForResourceGroupOptionalParams
  ): Promise<PolicyStatesListQueryResultsForResourceGroupResponse> {
    return this.client.sendOperationRequest(
      { policyStatesResource, subscriptionId, resourceGroupName, options },
      listQueryResultsForResourceGroupOperationSpec
    );
  }

  /**
   * Summarizes policy states for the resources under the resource group.
   * @param policyStatesSummaryResource The virtual resource under PolicyStates resource type for
   *                                    summarize action. In a given time range, 'latest' represents the latest policy state(s) and is the
   *                                    only allowed value.
   * @param subscriptionId Microsoft Azure subscription ID.
   * @param resourceGroupName Resource group name.
   * @param options The options parameters.
   */
  summarizeForResourceGroup(
    policyStatesSummaryResource: PolicyStatesSummaryResourceType,
    subscriptionId: string,
    resourceGroupName: string,
    options?: PolicyStatesSummarizeForResourceGroupOptionalParams
  ): Promise<PolicyStatesSummarizeForResourceGroupResponse> {
    return this.client.sendOperationRequest(
      {
        policyStatesSummaryResource,
        subscriptionId,
        resourceGroupName,
        options
      },
      summarizeForResourceGroupOperationSpec
    );
  }

  /**
   * Queries policy states for the resource.
   * @param policyStatesResource The virtual resource under PolicyStates resource type. In a given time
   *                             range, 'latest' represents the latest policy state(s), whereas 'default' represents all policy
   *                             state(s).
   * @param resourceId Resource ID.
   * @param options The options parameters.
   */
  private _listQueryResultsForResource(
    policyStatesResource: PolicyStatesResource,
    resourceId: string,
    options?: PolicyStatesListQueryResultsForResourceOptionalParams
  ): Promise<PolicyStatesListQueryResultsForResourceResponse> {
    return this.client.sendOperationRequest(
      { policyStatesResource, resourceId, options },
      listQueryResultsForResourceOperationSpec
    );
  }

  /**
   * Summarizes policy states for the resource.
   * @param policyStatesSummaryResource The virtual resource under PolicyStates resource type for
   *                                    summarize action. In a given time range, 'latest' represents the latest policy state(s) and is the
   *                                    only allowed value.
   * @param resourceId Resource ID.
   * @param options The options parameters.
   */
  summarizeForResource(
    policyStatesSummaryResource: PolicyStatesSummaryResourceType,
    resourceId: string,
    options?: PolicyStatesSummarizeForResourceOptionalParams
  ): Promise<PolicyStatesSummarizeForResourceResponse> {
    return this.client.sendOperationRequest(
      { policyStatesSummaryResource, resourceId, options },
      summarizeForResourceOperationSpec
    );
  }

  /**
   * Triggers a policy evaluation scan for all the resources under the subscription
   * @param subscriptionId Microsoft Azure subscription ID.
   * @param options The options parameters.
   */
  async beginTriggerSubscriptionEvaluation(
    subscriptionId: string,
    options?: PolicyStatesTriggerSubscriptionEvaluationOptionalParams
  ): Promise<PollerLike<PollOperationState<void>, void>> {
    const directSendOperation = async (
      args: coreClient.OperationArguments,
      spec: coreClient.OperationSpec
    ): Promise<void> => {
      return this.client.sendOperationRequest(args, spec);
    };
    const sendOperation = async (
      args: coreClient.OperationArguments,
      spec: coreClient.OperationSpec
    ) => {
      let currentRawResponse:
        | coreClient.FullOperationResponse
        | undefined = undefined;
      const providedCallback = args.options?.onResponse;
      const callback: coreClient.RawResponseCallback = (
        rawResponse: coreClient.FullOperationResponse,
        flatResponse: unknown
      ) => {
        currentRawResponse = rawResponse;
        providedCallback?.(rawResponse, flatResponse);
      };
      const updatedArgs = {
        ...args,
        options: {
          ...args.options,
          onResponse: callback
        }
      };
      const flatResponse = await directSendOperation(updatedArgs, spec);
      return {
        flatResponse,
        rawResponse: {
          statusCode: currentRawResponse!.status,
          body: currentRawResponse!.parsedBody,
          headers: currentRawResponse!.headers.toJSON()
        }
      };
    };

    const lro = new LroImpl(
      sendOperation,
      { subscriptionId, options },
      triggerSubscriptionEvaluationOperationSpec
    );
    const poller = new LroEngine(lro, {
      resumeFrom: options?.resumeFrom,
      intervalInMs: options?.updateIntervalInMs,
      lroResourceLocationConfig: "location"
    });
    await poller.poll();
    return poller;
  }

  /**
   * Triggers a policy evaluation scan for all the resources under the subscription
   * @param subscriptionId Microsoft Azure subscription ID.
   * @param options The options parameters.
   */
  async beginTriggerSubscriptionEvaluationAndWait(
    subscriptionId: string,
    options?: PolicyStatesTriggerSubscriptionEvaluationOptionalParams
  ): Promise<void> {
    const poller = await this.beginTriggerSubscriptionEvaluation(
      subscriptionId,
      options
    );
    return poller.pollUntilDone();
  }

  /**
   * Triggers a policy evaluation scan for all the resources under the resource group.
   * @param subscriptionId Microsoft Azure subscription ID.
   * @param resourceGroupName Resource group name.
   * @param options The options parameters.
   */
  async beginTriggerResourceGroupEvaluation(
    subscriptionId: string,
    resourceGroupName: string,
    options?: PolicyStatesTriggerResourceGroupEvaluationOptionalParams
  ): Promise<PollerLike<PollOperationState<void>, void>> {
    const directSendOperation = async (
      args: coreClient.OperationArguments,
      spec: coreClient.OperationSpec
    ): Promise<void> => {
      return this.client.sendOperationRequest(args, spec);
    };
    const sendOperation = async (
      args: coreClient.OperationArguments,
      spec: coreClient.OperationSpec
    ) => {
      let currentRawResponse:
        | coreClient.FullOperationResponse
        | undefined = undefined;
      const providedCallback = args.options?.onResponse;
      const callback: coreClient.RawResponseCallback = (
        rawResponse: coreClient.FullOperationResponse,
        flatResponse: unknown
      ) => {
        currentRawResponse = rawResponse;
        providedCallback?.(rawResponse, flatResponse);
      };
      const updatedArgs = {
        ...args,
        options: {
          ...args.options,
          onResponse: callback
        }
      };
      const flatResponse = await directSendOperation(updatedArgs, spec);
      return {
        flatResponse,
        rawResponse: {
          statusCode: currentRawResponse!.status,
          body: currentRawResponse!.parsedBody,
          headers: currentRawResponse!.headers.toJSON()
        }
      };
    };

    const lro = new LroImpl(
      sendOperation,
      { subscriptionId, resourceGroupName, options },
      triggerResourceGroupEvaluationOperationSpec
    );
    const poller = new LroEngine(lro, {
      resumeFrom: options?.resumeFrom,
      intervalInMs: options?.updateIntervalInMs,
      lroResourceLocationConfig: "location"
    });
    await poller.poll();
    return poller;
  }

  /**
   * Triggers a policy evaluation scan for all the resources under the resource group.
   * @param subscriptionId Microsoft Azure subscription ID.
   * @param resourceGroupName Resource group name.
   * @param options The options parameters.
   */
  async beginTriggerResourceGroupEvaluationAndWait(
    subscriptionId: string,
    resourceGroupName: string,
    options?: PolicyStatesTriggerResourceGroupEvaluationOptionalParams
  ): Promise<void> {
    const poller = await this.beginTriggerResourceGroupEvaluation(
      subscriptionId,
      resourceGroupName,
      options
    );
    return poller.pollUntilDone();
  }

  /**
   * Queries policy states for the subscription level policy set definition.
   * @param policyStatesResource The virtual resource under PolicyStates resource type. In a given time
   *                             range, 'latest' represents the latest policy state(s), whereas 'default' represents all policy
   *                             state(s).
   * @param subscriptionId Microsoft Azure subscription ID.
   * @param policySetDefinitionName Policy set definition name.
   * @param options The options parameters.
   */
  private _listQueryResultsForPolicySetDefinition(
    policyStatesResource: PolicyStatesResource,
    subscriptionId: string,
    policySetDefinitionName: string,
    options?: PolicyStatesListQueryResultsForPolicySetDefinitionOptionalParams
  ): Promise<PolicyStatesListQueryResultsForPolicySetDefinitionResponse> {
    return this.client.sendOperationRequest(
      {
        policyStatesResource,
        subscriptionId,
        policySetDefinitionName,
        options
      },
      listQueryResultsForPolicySetDefinitionOperationSpec
    );
  }

  /**
   * Summarizes policy states for the subscription level policy set definition.
   * @param policyStatesSummaryResource The virtual resource under PolicyStates resource type for
   *                                    summarize action. In a given time range, 'latest' represents the latest policy state(s) and is the
   *                                    only allowed value.
   * @param subscriptionId Microsoft Azure subscription ID.
   * @param policySetDefinitionName Policy set definition name.
   * @param options The options parameters.
   */
  summarizeForPolicySetDefinition(
    policyStatesSummaryResource: PolicyStatesSummaryResourceType,
    subscriptionId: string,
    policySetDefinitionName: string,
    options?: PolicyStatesSummarizeForPolicySetDefinitionOptionalParams
  ): Promise<PolicyStatesSummarizeForPolicySetDefinitionResponse> {
    return this.client.sendOperationRequest(
      {
        policyStatesSummaryResource,
        subscriptionId,
        policySetDefinitionName,
        options
      },
      summarizeForPolicySetDefinitionOperationSpec
    );
  }

  /**
   * Queries policy states for the subscription level policy definition.
   * @param policyStatesResource The virtual resource under PolicyStates resource type. In a given time
   *                             range, 'latest' represents the latest policy state(s), whereas 'default' represents all policy
   *                             state(s).
   * @param subscriptionId Microsoft Azure subscription ID.
   * @param policyDefinitionName Policy definition name.
   * @param options The options parameters.
   */
  private _listQueryResultsForPolicyDefinition(
    policyStatesResource: PolicyStatesResource,
    subscriptionId: string,
    policyDefinitionName: string,
    options?: PolicyStatesListQueryResultsForPolicyDefinitionOptionalParams
  ): Promise<PolicyStatesListQueryResultsForPolicyDefinitionResponse> {
    return this.client.sendOperationRequest(
      { policyStatesResource, subscriptionId, policyDefinitionName, options },
      listQueryResultsForPolicyDefinitionOperationSpec
    );
  }

  /**
   * Summarizes policy states for the subscription level policy definition.
   * @param policyStatesSummaryResource The virtual resource under PolicyStates resource type for
   *                                    summarize action. In a given time range, 'latest' represents the latest policy state(s) and is the
   *                                    only allowed value.
   * @param subscriptionId Microsoft Azure subscription ID.
   * @param policyDefinitionName Policy definition name.
   * @param options The options parameters.
   */
  summarizeForPolicyDefinition(
    policyStatesSummaryResource: PolicyStatesSummaryResourceType,
    subscriptionId: string,
    policyDefinitionName: string,
    options?: PolicyStatesSummarizeForPolicyDefinitionOptionalParams
  ): Promise<PolicyStatesSummarizeForPolicyDefinitionResponse> {
    return this.client.sendOperationRequest(
      {
        policyStatesSummaryResource,
        subscriptionId,
        policyDefinitionName,
        options
      },
      summarizeForPolicyDefinitionOperationSpec
    );
  }

  /**
   * Queries policy states for the subscription level policy assignment.
   * @param policyStatesResource The virtual resource under PolicyStates resource type. In a given time
   *                             range, 'latest' represents the latest policy state(s), whereas 'default' represents all policy
   *                             state(s).
   * @param subscriptionId Microsoft Azure subscription ID.
   * @param policyAssignmentName Policy assignment name.
   * @param options The options parameters.
   */
  private _listQueryResultsForSubscriptionLevelPolicyAssignment(
    policyStatesResource: PolicyStatesResource,
    subscriptionId: string,
    policyAssignmentName: string,
    options?: PolicyStatesListQueryResultsForSubscriptionLevelPolicyAssignmentOptionalParams
  ): Promise<
    PolicyStatesListQueryResultsForSubscriptionLevelPolicyAssignmentResponse
  > {
    return this.client.sendOperationRequest(
      { policyStatesResource, subscriptionId, policyAssignmentName, options },
      listQueryResultsForSubscriptionLevelPolicyAssignmentOperationSpec
    );
  }

  /**
   * Summarizes policy states for the subscription level policy assignment.
   * @param policyStatesSummaryResource The virtual resource under PolicyStates resource type for
   *                                    summarize action. In a given time range, 'latest' represents the latest policy state(s) and is the
   *                                    only allowed value.
   * @param subscriptionId Microsoft Azure subscription ID.
   * @param policyAssignmentName Policy assignment name.
   * @param options The options parameters.
   */
  summarizeForSubscriptionLevelPolicyAssignment(
    policyStatesSummaryResource: PolicyStatesSummaryResourceType,
    subscriptionId: string,
    policyAssignmentName: string,
    options?: PolicyStatesSummarizeForSubscriptionLevelPolicyAssignmentOptionalParams
  ): Promise<
    PolicyStatesSummarizeForSubscriptionLevelPolicyAssignmentResponse
  > {
    return this.client.sendOperationRequest(
      {
        policyStatesSummaryResource,
        subscriptionId,
        policyAssignmentName,
        options
      },
      summarizeForSubscriptionLevelPolicyAssignmentOperationSpec
    );
  }

  /**
   * Queries policy states for the resource group level policy assignment.
   * @param policyStatesResource The virtual resource under PolicyStates resource type. In a given time
   *                             range, 'latest' represents the latest policy state(s), whereas 'default' represents all policy
   *                             state(s).
   * @param subscriptionId Microsoft Azure subscription ID.
   * @param resourceGroupName Resource group name.
   * @param policyAssignmentName Policy assignment name.
   * @param options The options parameters.
   */
  private _listQueryResultsForResourceGroupLevelPolicyAssignment(
    policyStatesResource: PolicyStatesResource,
    subscriptionId: string,
    resourceGroupName: string,
    policyAssignmentName: string,
    options?: PolicyStatesListQueryResultsForResourceGroupLevelPolicyAssignmentOptionalParams
  ): Promise<
    PolicyStatesListQueryResultsForResourceGroupLevelPolicyAssignmentResponse
  > {
    return this.client.sendOperationRequest(
      {
        policyStatesResource,
        subscriptionId,
        resourceGroupName,
        policyAssignmentName,
        options
      },
      listQueryResultsForResourceGroupLevelPolicyAssignmentOperationSpec
    );
  }

  /**
   * Summarizes policy states for the resource group level policy assignment.
   * @param policyStatesSummaryResource The virtual resource under PolicyStates resource type for
   *                                    summarize action. In a given time range, 'latest' represents the latest policy state(s) and is the
   *                                    only allowed value.
   * @param subscriptionId Microsoft Azure subscription ID.
   * @param resourceGroupName Resource group name.
   * @param policyAssignmentName Policy assignment name.
   * @param options The options parameters.
   */
  summarizeForResourceGroupLevelPolicyAssignment(
    policyStatesSummaryResource: PolicyStatesSummaryResourceType,
    subscriptionId: string,
    resourceGroupName: string,
    policyAssignmentName: string,
    options?: PolicyStatesSummarizeForResourceGroupLevelPolicyAssignmentOptionalParams
  ): Promise<
    PolicyStatesSummarizeForResourceGroupLevelPolicyAssignmentResponse
  > {
    return this.client.sendOperationRequest(
      {
        policyStatesSummaryResource,
        subscriptionId,
        resourceGroupName,
        policyAssignmentName,
        options
      },
      summarizeForResourceGroupLevelPolicyAssignmentOperationSpec
    );
  }

  /**
   * ListQueryResultsForManagementGroupNext
   * @param policyStatesResource The virtual resource under PolicyStates resource type. In a given time
   *                             range, 'latest' represents the latest policy state(s), whereas 'default' represents all policy
   *                             state(s).
   * @param managementGroupName Management group name.
   * @param nextLink The nextLink from the previous successful call to the
   *                 ListQueryResultsForManagementGroup method.
   * @param options The options parameters.
   */
  private _listQueryResultsForManagementGroupNext(
    policyStatesResource: PolicyStatesResource,
    managementGroupName: string,
    nextLink: string,
    options?: PolicyStatesListQueryResultsForManagementGroupNextOptionalParams
  ): Promise<PolicyStatesListQueryResultsForManagementGroupNextResponse> {
    return this.client.sendOperationRequest(
      { policyStatesResource, managementGroupName, nextLink, options },
      listQueryResultsForManagementGroupNextOperationSpec
    );
  }

  /**
   * ListQueryResultsForSubscriptionNext
   * @param policyStatesResource The virtual resource under PolicyStates resource type. In a given time
   *                             range, 'latest' represents the latest policy state(s), whereas 'default' represents all policy
   *                             state(s).
   * @param subscriptionId Microsoft Azure subscription ID.
   * @param nextLink The nextLink from the previous successful call to the
   *                 ListQueryResultsForSubscription method.
   * @param options The options parameters.
   */
  private _listQueryResultsForSubscriptionNext(
    policyStatesResource: PolicyStatesResource,
    subscriptionId: string,
    nextLink: string,
    options?: PolicyStatesListQueryResultsForSubscriptionNextOptionalParams
  ): Promise<PolicyStatesListQueryResultsForSubscriptionNextResponse> {
    return this.client.sendOperationRequest(
      { policyStatesResource, subscriptionId, nextLink, options },
      listQueryResultsForSubscriptionNextOperationSpec
    );
  }

  /**
   * ListQueryResultsForResourceGroupNext
   * @param policyStatesResource The virtual resource under PolicyStates resource type. In a given time
   *                             range, 'latest' represents the latest policy state(s), whereas 'default' represents all policy
   *                             state(s).
   * @param subscriptionId Microsoft Azure subscription ID.
   * @param resourceGroupName Resource group name.
   * @param nextLink The nextLink from the previous successful call to the
   *                 ListQueryResultsForResourceGroup method.
   * @param options The options parameters.
   */
  private _listQueryResultsForResourceGroupNext(
    policyStatesResource: PolicyStatesResource,
    subscriptionId: string,
    resourceGroupName: string,
    nextLink: string,
    options?: PolicyStatesListQueryResultsForResourceGroupNextOptionalParams
  ): Promise<PolicyStatesListQueryResultsForResourceGroupNextResponse> {
    return this.client.sendOperationRequest(
      {
        policyStatesResource,
        subscriptionId,
        resourceGroupName,
        nextLink,
        options
      },
      listQueryResultsForResourceGroupNextOperationSpec
    );
  }

  /**
   * ListQueryResultsForResourceNext
   * @param policyStatesResource The virtual resource under PolicyStates resource type. In a given time
   *                             range, 'latest' represents the latest policy state(s), whereas 'default' represents all policy
   *                             state(s).
   * @param resourceId Resource ID.
   * @param nextLink The nextLink from the previous successful call to the ListQueryResultsForResource
   *                 method.
   * @param options The options parameters.
   */
  private _listQueryResultsForResourceNext(
    policyStatesResource: PolicyStatesResource,
    resourceId: string,
    nextLink: string,
    options?: PolicyStatesListQueryResultsForResourceNextOptionalParams
  ): Promise<PolicyStatesListQueryResultsForResourceNextResponse> {
    return this.client.sendOperationRequest(
      { policyStatesResource, resourceId, nextLink, options },
      listQueryResultsForResourceNextOperationSpec
    );
  }

  /**
   * ListQueryResultsForPolicySetDefinitionNext
   * @param policyStatesResource The virtual resource under PolicyStates resource type. In a given time
   *                             range, 'latest' represents the latest policy state(s), whereas 'default' represents all policy
   *                             state(s).
   * @param subscriptionId Microsoft Azure subscription ID.
   * @param policySetDefinitionName Policy set definition name.
   * @param nextLink The nextLink from the previous successful call to the
   *                 ListQueryResultsForPolicySetDefinition method.
   * @param options The options parameters.
   */
  private _listQueryResultsForPolicySetDefinitionNext(
    policyStatesResource: PolicyStatesResource,
    subscriptionId: string,
    policySetDefinitionName: string,
    nextLink: string,
    options?: PolicyStatesListQueryResultsForPolicySetDefinitionNextOptionalParams
  ): Promise<PolicyStatesListQueryResultsForPolicySetDefinitionNextResponse> {
    return this.client.sendOperationRequest(
      {
        policyStatesResource,
        subscriptionId,
        policySetDefinitionName,
        nextLink,
        options
      },
      listQueryResultsForPolicySetDefinitionNextOperationSpec
    );
  }

  /**
   * ListQueryResultsForPolicyDefinitionNext
   * @param policyStatesResource The virtual resource under PolicyStates resource type. In a given time
   *                             range, 'latest' represents the latest policy state(s), whereas 'default' represents all policy
   *                             state(s).
   * @param subscriptionId Microsoft Azure subscription ID.
   * @param policyDefinitionName Policy definition name.
   * @param nextLink The nextLink from the previous successful call to the
   *                 ListQueryResultsForPolicyDefinition method.
   * @param options The options parameters.
   */
  private _listQueryResultsForPolicyDefinitionNext(
    policyStatesResource: PolicyStatesResource,
    subscriptionId: string,
    policyDefinitionName: string,
    nextLink: string,
    options?: PolicyStatesListQueryResultsForPolicyDefinitionNextOptionalParams
  ): Promise<PolicyStatesListQueryResultsForPolicyDefinitionNextResponse> {
    return this.client.sendOperationRequest(
      {
        policyStatesResource,
        subscriptionId,
        policyDefinitionName,
        nextLink,
        options
      },
      listQueryResultsForPolicyDefinitionNextOperationSpec
    );
  }

  /**
   * ListQueryResultsForSubscriptionLevelPolicyAssignmentNext
   * @param policyStatesResource The virtual resource under PolicyStates resource type. In a given time
   *                             range, 'latest' represents the latest policy state(s), whereas 'default' represents all policy
   *                             state(s).
   * @param subscriptionId Microsoft Azure subscription ID.
   * @param policyAssignmentName Policy assignment name.
   * @param nextLink The nextLink from the previous successful call to the
   *                 ListQueryResultsForSubscriptionLevelPolicyAssignment method.
   * @param options The options parameters.
   */
  private _listQueryResultsForSubscriptionLevelPolicyAssignmentNext(
    policyStatesResource: PolicyStatesResource,
    subscriptionId: string,
    policyAssignmentName: string,
    nextLink: string,
    options?: PolicyStatesListQueryResultsForSubscriptionLevelPolicyAssignmentNextOptionalParams
  ): Promise<
    PolicyStatesListQueryResultsForSubscriptionLevelPolicyAssignmentNextResponse
  > {
    return this.client.sendOperationRequest(
      {
        policyStatesResource,
        subscriptionId,
        policyAssignmentName,
        nextLink,
        options
      },
      listQueryResultsForSubscriptionLevelPolicyAssignmentNextOperationSpec
    );
  }

  /**
   * ListQueryResultsForResourceGroupLevelPolicyAssignmentNext
   * @param policyStatesResource The virtual resource under PolicyStates resource type. In a given time
   *                             range, 'latest' represents the latest policy state(s), whereas 'default' represents all policy
   *                             state(s).
   * @param subscriptionId Microsoft Azure subscription ID.
   * @param resourceGroupName Resource group name.
   * @param policyAssignmentName Policy assignment name.
   * @param nextLink The nextLink from the previous successful call to the
   *                 ListQueryResultsForResourceGroupLevelPolicyAssignment method.
   * @param options The options parameters.
   */
  private _listQueryResultsForResourceGroupLevelPolicyAssignmentNext(
    policyStatesResource: PolicyStatesResource,
    subscriptionId: string,
    resourceGroupName: string,
    policyAssignmentName: string,
    nextLink: string,
    options?: PolicyStatesListQueryResultsForResourceGroupLevelPolicyAssignmentNextOptionalParams
  ): Promise<
    PolicyStatesListQueryResultsForResourceGroupLevelPolicyAssignmentNextResponse
  > {
    return this.client.sendOperationRequest(
      {
        policyStatesResource,
        subscriptionId,
        resourceGroupName,
        policyAssignmentName,
        nextLink,
        options
      },
      listQueryResultsForResourceGroupLevelPolicyAssignmentNextOperationSpec
    );
  }
}
// Operation Specifications
const serializer = coreClient.createSerializer(Mappers, /* isXml */ false);

const listQueryResultsForManagementGroupOperationSpec: coreClient.OperationSpec = {
  path:
    "/providers/{managementGroupsNamespace}/managementGroups/{managementGroupName}/providers/Microsoft.PolicyInsights/policyStates/{policyStatesResource}/queryResults",
  httpMethod: "POST",
  responses: {
    200: {
      bodyMapper: Mappers.PolicyStatesQueryResults
    },
    default: {
      bodyMapper: Mappers.QueryFailure
    }
  },
  queryParameters: [
    Parameters.top,
    Parameters.filter,
    Parameters.apiVersion2,
    Parameters.orderBy,
    Parameters.select,
    Parameters.from,
    Parameters.to,
    Parameters.apply,
    Parameters.skipToken
  ],
  urlParameters: [
    Parameters.$host,
    Parameters.managementGroupsNamespace,
    Parameters.managementGroupName,
    Parameters.policyStatesResource
  ],
  headerParameters: [Parameters.accept],
  serializer
};
const summarizeForManagementGroupOperationSpec: coreClient.OperationSpec = {
  path:
    "/providers/{managementGroupsNamespace}/managementGroups/{managementGroupName}/providers/Microsoft.PolicyInsights/policyStates/{policyStatesSummaryResource}/summarize",
  httpMethod: "POST",
  responses: {
    200: {
      bodyMapper: Mappers.SummarizeResults
    },
    default: {
      bodyMapper: Mappers.QueryFailure
    }
  },
  queryParameters: [
    Parameters.top,
    Parameters.filter,
    Parameters.apiVersion2,
    Parameters.from,
    Parameters.to
  ],
  urlParameters: [
    Parameters.$host,
    Parameters.managementGroupsNamespace,
    Parameters.managementGroupName,
    Parameters.policyStatesSummaryResource
  ],
  headerParameters: [Parameters.accept],
  serializer
};
const listQueryResultsForSubscriptionOperationSpec: coreClient.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/providers/Microsoft.PolicyInsights/policyStates/{policyStatesResource}/queryResults",
  httpMethod: "POST",
  responses: {
    200: {
      bodyMapper: Mappers.PolicyStatesQueryResults
    },
    default: {
      bodyMapper: Mappers.QueryFailure
    }
  },
  queryParameters: [
    Parameters.top,
    Parameters.filter,
    Parameters.apiVersion2,
    Parameters.orderBy,
    Parameters.select,
    Parameters.from,
    Parameters.to,
    Parameters.apply,
    Parameters.skipToken
  ],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId1,
    Parameters.policyStatesResource
  ],
  headerParameters: [Parameters.accept],
  serializer
};
const summarizeForSubscriptionOperationSpec: coreClient.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/providers/Microsoft.PolicyInsights/policyStates/{policyStatesSummaryResource}/summarize",
  httpMethod: "POST",
  responses: {
    200: {
      bodyMapper: Mappers.SummarizeResults
    },
    default: {
      bodyMapper: Mappers.QueryFailure
    }
  },
  queryParameters: [
    Parameters.top,
    Parameters.filter,
    Parameters.apiVersion2,
    Parameters.from,
    Parameters.to
  ],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId1,
    Parameters.policyStatesSummaryResource
  ],
  headerParameters: [Parameters.accept],
  serializer
};
const listQueryResultsForResourceGroupOperationSpec: coreClient.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.PolicyInsights/policyStates/{policyStatesResource}/queryResults",
  httpMethod: "POST",
  responses: {
    200: {
      bodyMapper: Mappers.PolicyStatesQueryResults
    },
    default: {
      bodyMapper: Mappers.QueryFailure
    }
  },
  queryParameters: [
    Parameters.top,
    Parameters.filter,
    Parameters.apiVersion2,
    Parameters.orderBy,
    Parameters.select,
    Parameters.from,
    Parameters.to,
    Parameters.apply,
    Parameters.skipToken
  ],
  urlParameters: [
    Parameters.$host,
    Parameters.resourceGroupName,
    Parameters.subscriptionId1,
    Parameters.policyStatesResource
  ],
  headerParameters: [Parameters.accept],
  serializer
};
const summarizeForResourceGroupOperationSpec: coreClient.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.PolicyInsights/policyStates/{policyStatesSummaryResource}/summarize",
  httpMethod: "POST",
  responses: {
    200: {
      bodyMapper: Mappers.SummarizeResults
    },
    default: {
      bodyMapper: Mappers.QueryFailure
    }
  },
  queryParameters: [
    Parameters.top,
    Parameters.filter,
    Parameters.apiVersion2,
    Parameters.from,
    Parameters.to
  ],
  urlParameters: [
    Parameters.$host,
    Parameters.resourceGroupName,
    Parameters.subscriptionId1,
    Parameters.policyStatesSummaryResource
  ],
  headerParameters: [Parameters.accept],
  serializer
};
const listQueryResultsForResourceOperationSpec: coreClient.OperationSpec = {
  path:
    "/{resourceId}/providers/Microsoft.PolicyInsights/policyStates/{policyStatesResource}/queryResults",
  httpMethod: "POST",
  responses: {
    200: {
      bodyMapper: Mappers.PolicyStatesQueryResults
    },
    default: {
      bodyMapper: Mappers.QueryFailure
    }
  },
  queryParameters: [
    Parameters.top,
    Parameters.filter,
    Parameters.apiVersion2,
    Parameters.orderBy,
    Parameters.select,
    Parameters.from,
    Parameters.to,
    Parameters.apply,
    Parameters.skipToken,
    Parameters.expand
  ],
  urlParameters: [
    Parameters.$host,
    Parameters.resourceId,
    Parameters.policyStatesResource
  ],
  headerParameters: [Parameters.accept],
  serializer
};
const summarizeForResourceOperationSpec: coreClient.OperationSpec = {
  path:
    "/{resourceId}/providers/Microsoft.PolicyInsights/policyStates/{policyStatesSummaryResource}/summarize",
  httpMethod: "POST",
  responses: {
    200: {
      bodyMapper: Mappers.SummarizeResults
    },
    default: {
      bodyMapper: Mappers.QueryFailure
    }
  },
  queryParameters: [
    Parameters.top,
    Parameters.filter,
    Parameters.apiVersion2,
    Parameters.from,
    Parameters.to
  ],
  urlParameters: [
    Parameters.$host,
    Parameters.resourceId,
    Parameters.policyStatesSummaryResource
  ],
  headerParameters: [Parameters.accept],
  serializer
};
const triggerSubscriptionEvaluationOperationSpec: coreClient.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/providers/Microsoft.PolicyInsights/policyStates/latest/triggerEvaluation",
  httpMethod: "POST",
  responses: {
    200: {},
    201: {},
    202: {},
    204: {},
    default: {
      bodyMapper: Mappers.QueryFailure
    }
  },
  queryParameters: [Parameters.apiVersion2],
  urlParameters: [Parameters.$host, Parameters.subscriptionId1],
  headerParameters: [Parameters.accept],
  serializer
};
const triggerResourceGroupEvaluationOperationSpec: coreClient.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.PolicyInsights/policyStates/latest/triggerEvaluation",
  httpMethod: "POST",
  responses: {
    200: {},
    201: {},
    202: {},
    204: {},
    default: {
      bodyMapper: Mappers.QueryFailure
    }
  },
  queryParameters: [Parameters.apiVersion2],
  urlParameters: [
    Parameters.$host,
    Parameters.resourceGroupName,
    Parameters.subscriptionId1
  ],
  headerParameters: [Parameters.accept],
  serializer
};
const listQueryResultsForPolicySetDefinitionOperationSpec: coreClient.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/providers/{authorizationNamespace}/policySetDefinitions/{policySetDefinitionName}/providers/Microsoft.PolicyInsights/policyStates/{policyStatesResource}/queryResults",
  httpMethod: "POST",
  responses: {
    200: {
      bodyMapper: Mappers.PolicyStatesQueryResults
    },
    default: {
      bodyMapper: Mappers.QueryFailure
    }
  },
  queryParameters: [
    Parameters.top,
    Parameters.filter,
    Parameters.apiVersion2,
    Parameters.orderBy,
    Parameters.select,
    Parameters.from,
    Parameters.to,
    Parameters.apply,
    Parameters.skipToken
  ],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId1,
    Parameters.authorizationNamespace,
    Parameters.policySetDefinitionName,
    Parameters.policyStatesResource
  ],
  headerParameters: [Parameters.accept],
  serializer
};
const summarizeForPolicySetDefinitionOperationSpec: coreClient.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/providers/{authorizationNamespace}/policySetDefinitions/{policySetDefinitionName}/providers/Microsoft.PolicyInsights/policyStates/{policyStatesSummaryResource}/summarize",
  httpMethod: "POST",
  responses: {
    200: {
      bodyMapper: Mappers.SummarizeResults
    },
    default: {
      bodyMapper: Mappers.QueryFailure
    }
  },
  queryParameters: [
    Parameters.top,
    Parameters.filter,
    Parameters.apiVersion2,
    Parameters.from,
    Parameters.to
  ],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId1,
    Parameters.authorizationNamespace,
    Parameters.policySetDefinitionName,
    Parameters.policyStatesSummaryResource
  ],
  headerParameters: [Parameters.accept],
  serializer
};
const listQueryResultsForPolicyDefinitionOperationSpec: coreClient.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/providers/{authorizationNamespace}/policyDefinitions/{policyDefinitionName}/providers/Microsoft.PolicyInsights/policyStates/{policyStatesResource}/queryResults",
  httpMethod: "POST",
  responses: {
    200: {
      bodyMapper: Mappers.PolicyStatesQueryResults
    },
    default: {
      bodyMapper: Mappers.QueryFailure
    }
  },
  queryParameters: [
    Parameters.top,
    Parameters.filter,
    Parameters.apiVersion2,
    Parameters.orderBy,
    Parameters.select,
    Parameters.from,
    Parameters.to,
    Parameters.apply,
    Parameters.skipToken
  ],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId1,
    Parameters.authorizationNamespace,
    Parameters.policyDefinitionName,
    Parameters.policyStatesResource
  ],
  headerParameters: [Parameters.accept],
  serializer
};
const summarizeForPolicyDefinitionOperationSpec: coreClient.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/providers/{authorizationNamespace}/policyDefinitions/{policyDefinitionName}/providers/Microsoft.PolicyInsights/policyStates/{policyStatesSummaryResource}/summarize",
  httpMethod: "POST",
  responses: {
    200: {
      bodyMapper: Mappers.SummarizeResults
    },
    default: {
      bodyMapper: Mappers.QueryFailure
    }
  },
  queryParameters: [
    Parameters.top,
    Parameters.filter,
    Parameters.apiVersion2,
    Parameters.from,
    Parameters.to
  ],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId1,
    Parameters.authorizationNamespace,
    Parameters.policyDefinitionName,
    Parameters.policyStatesSummaryResource
  ],
  headerParameters: [Parameters.accept],
  serializer
};
const listQueryResultsForSubscriptionLevelPolicyAssignmentOperationSpec: coreClient.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/providers/{authorizationNamespace}/policyAssignments/{policyAssignmentName}/providers/Microsoft.PolicyInsights/policyStates/{policyStatesResource}/queryResults",
  httpMethod: "POST",
  responses: {
    200: {
      bodyMapper: Mappers.PolicyStatesQueryResults
    },
    default: {
      bodyMapper: Mappers.QueryFailure
    }
  },
  queryParameters: [
    Parameters.top,
    Parameters.filter,
    Parameters.apiVersion2,
    Parameters.orderBy,
    Parameters.select,
    Parameters.from,
    Parameters.to,
    Parameters.apply,
    Parameters.skipToken
  ],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId1,
    Parameters.authorizationNamespace,
    Parameters.policyAssignmentName,
    Parameters.policyStatesResource
  ],
  headerParameters: [Parameters.accept],
  serializer
};
const summarizeForSubscriptionLevelPolicyAssignmentOperationSpec: coreClient.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/providers/{authorizationNamespace}/policyAssignments/{policyAssignmentName}/providers/Microsoft.PolicyInsights/policyStates/{policyStatesSummaryResource}/summarize",
  httpMethod: "POST",
  responses: {
    200: {
      bodyMapper: Mappers.SummarizeResults
    },
    default: {
      bodyMapper: Mappers.QueryFailure
    }
  },
  queryParameters: [
    Parameters.top,
    Parameters.filter,
    Parameters.apiVersion2,
    Parameters.from,
    Parameters.to
  ],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId1,
    Parameters.authorizationNamespace,
    Parameters.policyAssignmentName,
    Parameters.policyStatesSummaryResource
  ],
  headerParameters: [Parameters.accept],
  serializer
};
const listQueryResultsForResourceGroupLevelPolicyAssignmentOperationSpec: coreClient.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/resourcegroups/{resourceGroupName}/providers/{authorizationNamespace}/policyAssignments/{policyAssignmentName}/providers/Microsoft.PolicyInsights/policyStates/{policyStatesResource}/queryResults",
  httpMethod: "POST",
  responses: {
    200: {
      bodyMapper: Mappers.PolicyStatesQueryResults
    },
    default: {
      bodyMapper: Mappers.QueryFailure
    }
  },
  queryParameters: [
    Parameters.top,
    Parameters.filter,
    Parameters.apiVersion2,
    Parameters.orderBy,
    Parameters.select,
    Parameters.from,
    Parameters.to,
    Parameters.apply,
    Parameters.skipToken
  ],
  urlParameters: [
    Parameters.$host,
    Parameters.resourceGroupName,
    Parameters.subscriptionId1,
    Parameters.authorizationNamespace,
    Parameters.policyAssignmentName,
    Parameters.policyStatesResource
  ],
  headerParameters: [Parameters.accept],
  serializer
};
const summarizeForResourceGroupLevelPolicyAssignmentOperationSpec: coreClient.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/resourcegroups/{resourceGroupName}/providers/{authorizationNamespace}/policyAssignments/{policyAssignmentName}/providers/Microsoft.PolicyInsights/policyStates/{policyStatesSummaryResource}/summarize",
  httpMethod: "POST",
  responses: {
    200: {
      bodyMapper: Mappers.SummarizeResults
    },
    default: {
      bodyMapper: Mappers.QueryFailure
    }
  },
  queryParameters: [
    Parameters.top,
    Parameters.filter,
    Parameters.apiVersion2,
    Parameters.from,
    Parameters.to
  ],
  urlParameters: [
    Parameters.$host,
    Parameters.resourceGroupName,
    Parameters.subscriptionId1,
    Parameters.authorizationNamespace,
    Parameters.policyAssignmentName,
    Parameters.policyStatesSummaryResource
  ],
  headerParameters: [Parameters.accept],
  serializer
};
const listQueryResultsForManagementGroupNextOperationSpec: coreClient.OperationSpec = {
  path: "{nextLink}",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.PolicyStatesQueryResults
    },
    default: {
      bodyMapper: Mappers.QueryFailure
    }
  },
  urlParameters: [
    Parameters.$host,
    Parameters.managementGroupsNamespace,
    Parameters.managementGroupName,
    Parameters.nextLink,
    Parameters.policyStatesResource
  ],
  headerParameters: [Parameters.accept],
  serializer
};
const listQueryResultsForSubscriptionNextOperationSpec: coreClient.OperationSpec = {
  path: "{nextLink}",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.PolicyStatesQueryResults
    },
    default: {
      bodyMapper: Mappers.QueryFailure
    }
  },
  urlParameters: [
    Parameters.$host,
    Parameters.nextLink,
    Parameters.subscriptionId1,
    Parameters.policyStatesResource
  ],
  headerParameters: [Parameters.accept],
  serializer
};
const listQueryResultsForResourceGroupNextOperationSpec: coreClient.OperationSpec = {
  path: "{nextLink}",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.PolicyStatesQueryResults
    },
    default: {
      bodyMapper: Mappers.QueryFailure
    }
  },
  urlParameters: [
    Parameters.$host,
    Parameters.resourceGroupName,
    Parameters.nextLink,
    Parameters.subscriptionId1,
    Parameters.policyStatesResource
  ],
  headerParameters: [Parameters.accept],
  serializer
};
const listQueryResultsForResourceNextOperationSpec: coreClient.OperationSpec = {
  path: "{nextLink}",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.PolicyStatesQueryResults
    },
    default: {
      bodyMapper: Mappers.QueryFailure
    }
  },
  urlParameters: [
    Parameters.$host,
    Parameters.resourceId,
    Parameters.nextLink,
    Parameters.policyStatesResource
  ],
  headerParameters: [Parameters.accept],
  serializer
};
const listQueryResultsForPolicySetDefinitionNextOperationSpec: coreClient.OperationSpec = {
  path: "{nextLink}",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.PolicyStatesQueryResults
    },
    default: {
      bodyMapper: Mappers.QueryFailure
    }
  },
  urlParameters: [
    Parameters.$host,
    Parameters.nextLink,
    Parameters.subscriptionId1,
    Parameters.authorizationNamespace,
    Parameters.policySetDefinitionName,
    Parameters.policyStatesResource
  ],
  headerParameters: [Parameters.accept],
  serializer
};
const listQueryResultsForPolicyDefinitionNextOperationSpec: coreClient.OperationSpec = {
  path: "{nextLink}",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.PolicyStatesQueryResults
    },
    default: {
      bodyMapper: Mappers.QueryFailure
    }
  },
  urlParameters: [
    Parameters.$host,
    Parameters.nextLink,
    Parameters.subscriptionId1,
    Parameters.authorizationNamespace,
    Parameters.policyDefinitionName,
    Parameters.policyStatesResource
  ],
  headerParameters: [Parameters.accept],
  serializer
};
const listQueryResultsForSubscriptionLevelPolicyAssignmentNextOperationSpec: coreClient.OperationSpec = {
  path: "{nextLink}",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.PolicyStatesQueryResults
    },
    default: {
      bodyMapper: Mappers.QueryFailure
    }
  },
  urlParameters: [
    Parameters.$host,
    Parameters.nextLink,
    Parameters.subscriptionId1,
    Parameters.authorizationNamespace,
    Parameters.policyAssignmentName,
    Parameters.policyStatesResource
  ],
  headerParameters: [Parameters.accept],
  serializer
};
const listQueryResultsForResourceGroupLevelPolicyAssignmentNextOperationSpec: coreClient.OperationSpec = {
  path: "{nextLink}",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.PolicyStatesQueryResults
    },
    default: {
      bodyMapper: Mappers.QueryFailure
    }
  },
  urlParameters: [
    Parameters.$host,
    Parameters.resourceGroupName,
    Parameters.nextLink,
    Parameters.subscriptionId1,
    Parameters.authorizationNamespace,
    Parameters.policyAssignmentName,
    Parameters.policyStatesResource
  ],
  headerParameters: [Parameters.accept],
  serializer
};
