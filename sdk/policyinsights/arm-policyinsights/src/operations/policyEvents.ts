/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is
 * regenerated.
 */

import * as msRest from "@azure/ms-rest-js";
import * as Models from "../models";
import * as Mappers from "../models/policyEventsMappers";
import * as Parameters from "../models/parameters";
import { PolicyInsightsClientContext } from "../policyInsightsClientContext";

/** Class representing a PolicyEvents. */
export class PolicyEvents {
  private readonly client: PolicyInsightsClientContext;

  /**
   * Create a PolicyEvents.
   * @param {PolicyInsightsClientContext} client Reference to the service client.
   */
  constructor(client: PolicyInsightsClientContext) {
    this.client = client;
  }

  /**
   * Queries policy events for the resources under the management group.
   * @param managementGroupName Management group name.
   * @param [options] The optional parameters
   * @returns Promise<Models.PolicyEventsListQueryResultsForManagementGroupResponse>
   */
  listQueryResultsForManagementGroup(managementGroupName: string, options?: Models.PolicyEventsListQueryResultsForManagementGroupOptionalParams): Promise<Models.PolicyEventsListQueryResultsForManagementGroupResponse>;
  /**
   * @param managementGroupName Management group name.
   * @param callback The callback
   */
  listQueryResultsForManagementGroup(managementGroupName: string, callback: msRest.ServiceCallback<Models.PolicyEventsQueryResults>): void;
  /**
   * @param managementGroupName Management group name.
   * @param options The optional parameters
   * @param callback The callback
   */
  listQueryResultsForManagementGroup(managementGroupName: string, options: Models.PolicyEventsListQueryResultsForManagementGroupOptionalParams, callback: msRest.ServiceCallback<Models.PolicyEventsQueryResults>): void;
  listQueryResultsForManagementGroup(managementGroupName: string, options?: Models.PolicyEventsListQueryResultsForManagementGroupOptionalParams | msRest.ServiceCallback<Models.PolicyEventsQueryResults>, callback?: msRest.ServiceCallback<Models.PolicyEventsQueryResults>): Promise<Models.PolicyEventsListQueryResultsForManagementGroupResponse> {
    return this.client.sendOperationRequest(
      {
        managementGroupName,
        options
      },
      listQueryResultsForManagementGroupOperationSpec,
      callback) as Promise<Models.PolicyEventsListQueryResultsForManagementGroupResponse>;
  }

  /**
   * Queries policy events for the resources under the subscription.
   * @param subscriptionId Microsoft Azure subscription ID.
   * @param [options] The optional parameters
   * @returns Promise<Models.PolicyEventsListQueryResultsForSubscriptionResponse>
   */
  listQueryResultsForSubscription(subscriptionId: string, options?: Models.PolicyEventsListQueryResultsForSubscriptionOptionalParams): Promise<Models.PolicyEventsListQueryResultsForSubscriptionResponse>;
  /**
   * @param subscriptionId Microsoft Azure subscription ID.
   * @param callback The callback
   */
  listQueryResultsForSubscription(subscriptionId: string, callback: msRest.ServiceCallback<Models.PolicyEventsQueryResults>): void;
  /**
   * @param subscriptionId Microsoft Azure subscription ID.
   * @param options The optional parameters
   * @param callback The callback
   */
  listQueryResultsForSubscription(subscriptionId: string, options: Models.PolicyEventsListQueryResultsForSubscriptionOptionalParams, callback: msRest.ServiceCallback<Models.PolicyEventsQueryResults>): void;
  listQueryResultsForSubscription(subscriptionId: string, options?: Models.PolicyEventsListQueryResultsForSubscriptionOptionalParams | msRest.ServiceCallback<Models.PolicyEventsQueryResults>, callback?: msRest.ServiceCallback<Models.PolicyEventsQueryResults>): Promise<Models.PolicyEventsListQueryResultsForSubscriptionResponse> {
    return this.client.sendOperationRequest(
      {
        subscriptionId,
        options
      },
      listQueryResultsForSubscriptionOperationSpec,
      callback) as Promise<Models.PolicyEventsListQueryResultsForSubscriptionResponse>;
  }

  /**
   * Queries policy events for the resources under the resource group.
   * @param subscriptionId Microsoft Azure subscription ID.
   * @param resourceGroupName Resource group name.
   * @param [options] The optional parameters
   * @returns Promise<Models.PolicyEventsListQueryResultsForResourceGroupResponse>
   */
  listQueryResultsForResourceGroup(subscriptionId: string, resourceGroupName: string, options?: Models.PolicyEventsListQueryResultsForResourceGroupOptionalParams): Promise<Models.PolicyEventsListQueryResultsForResourceGroupResponse>;
  /**
   * @param subscriptionId Microsoft Azure subscription ID.
   * @param resourceGroupName Resource group name.
   * @param callback The callback
   */
  listQueryResultsForResourceGroup(subscriptionId: string, resourceGroupName: string, callback: msRest.ServiceCallback<Models.PolicyEventsQueryResults>): void;
  /**
   * @param subscriptionId Microsoft Azure subscription ID.
   * @param resourceGroupName Resource group name.
   * @param options The optional parameters
   * @param callback The callback
   */
  listQueryResultsForResourceGroup(subscriptionId: string, resourceGroupName: string, options: Models.PolicyEventsListQueryResultsForResourceGroupOptionalParams, callback: msRest.ServiceCallback<Models.PolicyEventsQueryResults>): void;
  listQueryResultsForResourceGroup(subscriptionId: string, resourceGroupName: string, options?: Models.PolicyEventsListQueryResultsForResourceGroupOptionalParams | msRest.ServiceCallback<Models.PolicyEventsQueryResults>, callback?: msRest.ServiceCallback<Models.PolicyEventsQueryResults>): Promise<Models.PolicyEventsListQueryResultsForResourceGroupResponse> {
    return this.client.sendOperationRequest(
      {
        subscriptionId,
        resourceGroupName,
        options
      },
      listQueryResultsForResourceGroupOperationSpec,
      callback) as Promise<Models.PolicyEventsListQueryResultsForResourceGroupResponse>;
  }

  /**
   * Queries policy events for the resource.
   * @param resourceId Resource ID.
   * @param [options] The optional parameters
   * @returns Promise<Models.PolicyEventsListQueryResultsForResourceResponse>
   */
  listQueryResultsForResource(resourceId: string, options?: Models.PolicyEventsListQueryResultsForResourceOptionalParams): Promise<Models.PolicyEventsListQueryResultsForResourceResponse>;
  /**
   * @param resourceId Resource ID.
   * @param callback The callback
   */
  listQueryResultsForResource(resourceId: string, callback: msRest.ServiceCallback<Models.PolicyEventsQueryResults>): void;
  /**
   * @param resourceId Resource ID.
   * @param options The optional parameters
   * @param callback The callback
   */
  listQueryResultsForResource(resourceId: string, options: Models.PolicyEventsListQueryResultsForResourceOptionalParams, callback: msRest.ServiceCallback<Models.PolicyEventsQueryResults>): void;
  listQueryResultsForResource(resourceId: string, options?: Models.PolicyEventsListQueryResultsForResourceOptionalParams | msRest.ServiceCallback<Models.PolicyEventsQueryResults>, callback?: msRest.ServiceCallback<Models.PolicyEventsQueryResults>): Promise<Models.PolicyEventsListQueryResultsForResourceResponse> {
    return this.client.sendOperationRequest(
      {
        resourceId,
        options
      },
      listQueryResultsForResourceOperationSpec,
      callback) as Promise<Models.PolicyEventsListQueryResultsForResourceResponse>;
  }

  /**
   * Queries policy events for the subscription level policy set definition.
   * @param subscriptionId Microsoft Azure subscription ID.
   * @param policySetDefinitionName Policy set definition name.
   * @param [options] The optional parameters
   * @returns Promise<Models.PolicyEventsListQueryResultsForPolicySetDefinitionResponse>
   */
  listQueryResultsForPolicySetDefinition(subscriptionId: string, policySetDefinitionName: string, options?: Models.PolicyEventsListQueryResultsForPolicySetDefinitionOptionalParams): Promise<Models.PolicyEventsListQueryResultsForPolicySetDefinitionResponse>;
  /**
   * @param subscriptionId Microsoft Azure subscription ID.
   * @param policySetDefinitionName Policy set definition name.
   * @param callback The callback
   */
  listQueryResultsForPolicySetDefinition(subscriptionId: string, policySetDefinitionName: string, callback: msRest.ServiceCallback<Models.PolicyEventsQueryResults>): void;
  /**
   * @param subscriptionId Microsoft Azure subscription ID.
   * @param policySetDefinitionName Policy set definition name.
   * @param options The optional parameters
   * @param callback The callback
   */
  listQueryResultsForPolicySetDefinition(subscriptionId: string, policySetDefinitionName: string, options: Models.PolicyEventsListQueryResultsForPolicySetDefinitionOptionalParams, callback: msRest.ServiceCallback<Models.PolicyEventsQueryResults>): void;
  listQueryResultsForPolicySetDefinition(subscriptionId: string, policySetDefinitionName: string, options?: Models.PolicyEventsListQueryResultsForPolicySetDefinitionOptionalParams | msRest.ServiceCallback<Models.PolicyEventsQueryResults>, callback?: msRest.ServiceCallback<Models.PolicyEventsQueryResults>): Promise<Models.PolicyEventsListQueryResultsForPolicySetDefinitionResponse> {
    return this.client.sendOperationRequest(
      {
        subscriptionId,
        policySetDefinitionName,
        options
      },
      listQueryResultsForPolicySetDefinitionOperationSpec,
      callback) as Promise<Models.PolicyEventsListQueryResultsForPolicySetDefinitionResponse>;
  }

  /**
   * Queries policy events for the subscription level policy definition.
   * @param subscriptionId Microsoft Azure subscription ID.
   * @param policyDefinitionName Policy definition name.
   * @param [options] The optional parameters
   * @returns Promise<Models.PolicyEventsListQueryResultsForPolicyDefinitionResponse>
   */
  listQueryResultsForPolicyDefinition(subscriptionId: string, policyDefinitionName: string, options?: Models.PolicyEventsListQueryResultsForPolicyDefinitionOptionalParams): Promise<Models.PolicyEventsListQueryResultsForPolicyDefinitionResponse>;
  /**
   * @param subscriptionId Microsoft Azure subscription ID.
   * @param policyDefinitionName Policy definition name.
   * @param callback The callback
   */
  listQueryResultsForPolicyDefinition(subscriptionId: string, policyDefinitionName: string, callback: msRest.ServiceCallback<Models.PolicyEventsQueryResults>): void;
  /**
   * @param subscriptionId Microsoft Azure subscription ID.
   * @param policyDefinitionName Policy definition name.
   * @param options The optional parameters
   * @param callback The callback
   */
  listQueryResultsForPolicyDefinition(subscriptionId: string, policyDefinitionName: string, options: Models.PolicyEventsListQueryResultsForPolicyDefinitionOptionalParams, callback: msRest.ServiceCallback<Models.PolicyEventsQueryResults>): void;
  listQueryResultsForPolicyDefinition(subscriptionId: string, policyDefinitionName: string, options?: Models.PolicyEventsListQueryResultsForPolicyDefinitionOptionalParams | msRest.ServiceCallback<Models.PolicyEventsQueryResults>, callback?: msRest.ServiceCallback<Models.PolicyEventsQueryResults>): Promise<Models.PolicyEventsListQueryResultsForPolicyDefinitionResponse> {
    return this.client.sendOperationRequest(
      {
        subscriptionId,
        policyDefinitionName,
        options
      },
      listQueryResultsForPolicyDefinitionOperationSpec,
      callback) as Promise<Models.PolicyEventsListQueryResultsForPolicyDefinitionResponse>;
  }

  /**
   * Queries policy events for the subscription level policy assignment.
   * @param subscriptionId Microsoft Azure subscription ID.
   * @param policyAssignmentName Policy assignment name.
   * @param [options] The optional parameters
   * @returns
   * Promise<Models.PolicyEventsListQueryResultsForSubscriptionLevelPolicyAssignmentResponse>
   */
  listQueryResultsForSubscriptionLevelPolicyAssignment(subscriptionId: string, policyAssignmentName: string, options?: Models.PolicyEventsListQueryResultsForSubscriptionLevelPolicyAssignmentOptionalParams): Promise<Models.PolicyEventsListQueryResultsForSubscriptionLevelPolicyAssignmentResponse>;
  /**
   * @param subscriptionId Microsoft Azure subscription ID.
   * @param policyAssignmentName Policy assignment name.
   * @param callback The callback
   */
  listQueryResultsForSubscriptionLevelPolicyAssignment(subscriptionId: string, policyAssignmentName: string, callback: msRest.ServiceCallback<Models.PolicyEventsQueryResults>): void;
  /**
   * @param subscriptionId Microsoft Azure subscription ID.
   * @param policyAssignmentName Policy assignment name.
   * @param options The optional parameters
   * @param callback The callback
   */
  listQueryResultsForSubscriptionLevelPolicyAssignment(subscriptionId: string, policyAssignmentName: string, options: Models.PolicyEventsListQueryResultsForSubscriptionLevelPolicyAssignmentOptionalParams, callback: msRest.ServiceCallback<Models.PolicyEventsQueryResults>): void;
  listQueryResultsForSubscriptionLevelPolicyAssignment(subscriptionId: string, policyAssignmentName: string, options?: Models.PolicyEventsListQueryResultsForSubscriptionLevelPolicyAssignmentOptionalParams | msRest.ServiceCallback<Models.PolicyEventsQueryResults>, callback?: msRest.ServiceCallback<Models.PolicyEventsQueryResults>): Promise<Models.PolicyEventsListQueryResultsForSubscriptionLevelPolicyAssignmentResponse> {
    return this.client.sendOperationRequest(
      {
        subscriptionId,
        policyAssignmentName,
        options
      },
      listQueryResultsForSubscriptionLevelPolicyAssignmentOperationSpec,
      callback) as Promise<Models.PolicyEventsListQueryResultsForSubscriptionLevelPolicyAssignmentResponse>;
  }

  /**
   * Queries policy events for the resource group level policy assignment.
   * @param subscriptionId Microsoft Azure subscription ID.
   * @param resourceGroupName Resource group name.
   * @param policyAssignmentName Policy assignment name.
   * @param [options] The optional parameters
   * @returns
   * Promise<Models.PolicyEventsListQueryResultsForResourceGroupLevelPolicyAssignmentResponse>
   */
  listQueryResultsForResourceGroupLevelPolicyAssignment(subscriptionId: string, resourceGroupName: string, policyAssignmentName: string, options?: Models.PolicyEventsListQueryResultsForResourceGroupLevelPolicyAssignmentOptionalParams): Promise<Models.PolicyEventsListQueryResultsForResourceGroupLevelPolicyAssignmentResponse>;
  /**
   * @param subscriptionId Microsoft Azure subscription ID.
   * @param resourceGroupName Resource group name.
   * @param policyAssignmentName Policy assignment name.
   * @param callback The callback
   */
  listQueryResultsForResourceGroupLevelPolicyAssignment(subscriptionId: string, resourceGroupName: string, policyAssignmentName: string, callback: msRest.ServiceCallback<Models.PolicyEventsQueryResults>): void;
  /**
   * @param subscriptionId Microsoft Azure subscription ID.
   * @param resourceGroupName Resource group name.
   * @param policyAssignmentName Policy assignment name.
   * @param options The optional parameters
   * @param callback The callback
   */
  listQueryResultsForResourceGroupLevelPolicyAssignment(subscriptionId: string, resourceGroupName: string, policyAssignmentName: string, options: Models.PolicyEventsListQueryResultsForResourceGroupLevelPolicyAssignmentOptionalParams, callback: msRest.ServiceCallback<Models.PolicyEventsQueryResults>): void;
  listQueryResultsForResourceGroupLevelPolicyAssignment(subscriptionId: string, resourceGroupName: string, policyAssignmentName: string, options?: Models.PolicyEventsListQueryResultsForResourceGroupLevelPolicyAssignmentOptionalParams | msRest.ServiceCallback<Models.PolicyEventsQueryResults>, callback?: msRest.ServiceCallback<Models.PolicyEventsQueryResults>): Promise<Models.PolicyEventsListQueryResultsForResourceGroupLevelPolicyAssignmentResponse> {
    return this.client.sendOperationRequest(
      {
        subscriptionId,
        resourceGroupName,
        policyAssignmentName,
        options
      },
      listQueryResultsForResourceGroupLevelPolicyAssignmentOperationSpec,
      callback) as Promise<Models.PolicyEventsListQueryResultsForResourceGroupLevelPolicyAssignmentResponse>;
  }

  /**
   * Queries policy events for the resources under the management group.
   * @param nextPageLink The NextLink from the previous successful call to List operation.
   * @param [options] The optional parameters
   * @returns Promise<Models.PolicyEventsNextLinkResponse>
   */
  nextLink(nextPageLink: string, options?: msRest.RequestOptionsBase): Promise<Models.PolicyEventsNextLinkResponse>;
  /**
   * @param nextPageLink The NextLink from the previous successful call to List operation.
   * @param callback The callback
   */
  nextLink(nextPageLink: string, callback: msRest.ServiceCallback<Models.PolicyEventsQueryResults>): void;
  /**
   * @param nextPageLink The NextLink from the previous successful call to List operation.
   * @param options The optional parameters
   * @param callback The callback
   */
  nextLink(nextPageLink: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.PolicyEventsQueryResults>): void;
  nextLink(nextPageLink: string, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<Models.PolicyEventsQueryResults>, callback?: msRest.ServiceCallback<Models.PolicyEventsQueryResults>): Promise<Models.PolicyEventsNextLinkResponse> {
    return this.client.sendOperationRequest(
      {
        nextPageLink,
        options
      },
      nextLinkOperationSpec,
      callback) as Promise<Models.PolicyEventsNextLinkResponse>;
  }

  /**
   * Queries policy events for the resources under the subscription.
   * @param nextPageLink The NextLink from the previous successful call to List operation.
   * @param [options] The optional parameters
   * @returns Promise<Models.PolicyEventsNextLink1Response>
   */
  nextLink1(nextPageLink: string, options?: msRest.RequestOptionsBase): Promise<Models.PolicyEventsNextLink1Response>;
  /**
   * @param nextPageLink The NextLink from the previous successful call to List operation.
   * @param callback The callback
   */
  nextLink1(nextPageLink: string, callback: msRest.ServiceCallback<Models.PolicyEventsQueryResults>): void;
  /**
   * @param nextPageLink The NextLink from the previous successful call to List operation.
   * @param options The optional parameters
   * @param callback The callback
   */
  nextLink1(nextPageLink: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.PolicyEventsQueryResults>): void;
  nextLink1(nextPageLink: string, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<Models.PolicyEventsQueryResults>, callback?: msRest.ServiceCallback<Models.PolicyEventsQueryResults>): Promise<Models.PolicyEventsNextLink1Response> {
    return this.client.sendOperationRequest(
      {
        nextPageLink,
        options
      },
      nextLink1OperationSpec,
      callback) as Promise<Models.PolicyEventsNextLink1Response>;
  }

  /**
   * Queries policy events for the resources under the resource group.
   * @param nextPageLink The NextLink from the previous successful call to List operation.
   * @param [options] The optional parameters
   * @returns Promise<Models.PolicyEventsNextLink2Response>
   */
  nextLink2(nextPageLink: string, options?: msRest.RequestOptionsBase): Promise<Models.PolicyEventsNextLink2Response>;
  /**
   * @param nextPageLink The NextLink from the previous successful call to List operation.
   * @param callback The callback
   */
  nextLink2(nextPageLink: string, callback: msRest.ServiceCallback<Models.PolicyEventsQueryResults>): void;
  /**
   * @param nextPageLink The NextLink from the previous successful call to List operation.
   * @param options The optional parameters
   * @param callback The callback
   */
  nextLink2(nextPageLink: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.PolicyEventsQueryResults>): void;
  nextLink2(nextPageLink: string, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<Models.PolicyEventsQueryResults>, callback?: msRest.ServiceCallback<Models.PolicyEventsQueryResults>): Promise<Models.PolicyEventsNextLink2Response> {
    return this.client.sendOperationRequest(
      {
        nextPageLink,
        options
      },
      nextLink2OperationSpec,
      callback) as Promise<Models.PolicyEventsNextLink2Response>;
  }

  /**
   * Queries policy events for the resource.
   * @param nextPageLink The NextLink from the previous successful call to List operation.
   * @param [options] The optional parameters
   * @returns Promise<Models.PolicyEventsNextLink3Response>
   */
  nextLink3(nextPageLink: string, options?: msRest.RequestOptionsBase): Promise<Models.PolicyEventsNextLink3Response>;
  /**
   * @param nextPageLink The NextLink from the previous successful call to List operation.
   * @param callback The callback
   */
  nextLink3(nextPageLink: string, callback: msRest.ServiceCallback<Models.PolicyEventsQueryResults>): void;
  /**
   * @param nextPageLink The NextLink from the previous successful call to List operation.
   * @param options The optional parameters
   * @param callback The callback
   */
  nextLink3(nextPageLink: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.PolicyEventsQueryResults>): void;
  nextLink3(nextPageLink: string, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<Models.PolicyEventsQueryResults>, callback?: msRest.ServiceCallback<Models.PolicyEventsQueryResults>): Promise<Models.PolicyEventsNextLink3Response> {
    return this.client.sendOperationRequest(
      {
        nextPageLink,
        options
      },
      nextLink3OperationSpec,
      callback) as Promise<Models.PolicyEventsNextLink3Response>;
  }

  /**
   * Queries policy events for the subscription level policy set definition.
   * @param nextPageLink The NextLink from the previous successful call to List operation.
   * @param [options] The optional parameters
   * @returns Promise<Models.PolicyEventsNextLink4Response>
   */
  nextLink4(nextPageLink: string, options?: msRest.RequestOptionsBase): Promise<Models.PolicyEventsNextLink4Response>;
  /**
   * @param nextPageLink The NextLink from the previous successful call to List operation.
   * @param callback The callback
   */
  nextLink4(nextPageLink: string, callback: msRest.ServiceCallback<Models.PolicyEventsQueryResults>): void;
  /**
   * @param nextPageLink The NextLink from the previous successful call to List operation.
   * @param options The optional parameters
   * @param callback The callback
   */
  nextLink4(nextPageLink: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.PolicyEventsQueryResults>): void;
  nextLink4(nextPageLink: string, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<Models.PolicyEventsQueryResults>, callback?: msRest.ServiceCallback<Models.PolicyEventsQueryResults>): Promise<Models.PolicyEventsNextLink4Response> {
    return this.client.sendOperationRequest(
      {
        nextPageLink,
        options
      },
      nextLink4OperationSpec,
      callback) as Promise<Models.PolicyEventsNextLink4Response>;
  }

  /**
   * Queries policy events for the subscription level policy definition.
   * @param nextPageLink The NextLink from the previous successful call to List operation.
   * @param [options] The optional parameters
   * @returns Promise<Models.PolicyEventsNextLink5Response>
   */
  nextLink5(nextPageLink: string, options?: msRest.RequestOptionsBase): Promise<Models.PolicyEventsNextLink5Response>;
  /**
   * @param nextPageLink The NextLink from the previous successful call to List operation.
   * @param callback The callback
   */
  nextLink5(nextPageLink: string, callback: msRest.ServiceCallback<Models.PolicyEventsQueryResults>): void;
  /**
   * @param nextPageLink The NextLink from the previous successful call to List operation.
   * @param options The optional parameters
   * @param callback The callback
   */
  nextLink5(nextPageLink: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.PolicyEventsQueryResults>): void;
  nextLink5(nextPageLink: string, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<Models.PolicyEventsQueryResults>, callback?: msRest.ServiceCallback<Models.PolicyEventsQueryResults>): Promise<Models.PolicyEventsNextLink5Response> {
    return this.client.sendOperationRequest(
      {
        nextPageLink,
        options
      },
      nextLink5OperationSpec,
      callback) as Promise<Models.PolicyEventsNextLink5Response>;
  }

  /**
   * Queries policy events for the subscription level policy assignment.
   * @param nextPageLink The NextLink from the previous successful call to List operation.
   * @param [options] The optional parameters
   * @returns Promise<Models.PolicyEventsNextLink6Response>
   */
  nextLink6(nextPageLink: string, options?: msRest.RequestOptionsBase): Promise<Models.PolicyEventsNextLink6Response>;
  /**
   * @param nextPageLink The NextLink from the previous successful call to List operation.
   * @param callback The callback
   */
  nextLink6(nextPageLink: string, callback: msRest.ServiceCallback<Models.PolicyEventsQueryResults>): void;
  /**
   * @param nextPageLink The NextLink from the previous successful call to List operation.
   * @param options The optional parameters
   * @param callback The callback
   */
  nextLink6(nextPageLink: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.PolicyEventsQueryResults>): void;
  nextLink6(nextPageLink: string, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<Models.PolicyEventsQueryResults>, callback?: msRest.ServiceCallback<Models.PolicyEventsQueryResults>): Promise<Models.PolicyEventsNextLink6Response> {
    return this.client.sendOperationRequest(
      {
        nextPageLink,
        options
      },
      nextLink6OperationSpec,
      callback) as Promise<Models.PolicyEventsNextLink6Response>;
  }

  /**
   * Queries policy events for the resource group level policy assignment.
   * @param nextPageLink The NextLink from the previous successful call to List operation.
   * @param [options] The optional parameters
   * @returns Promise<Models.PolicyEventsNextLink7Response>
   */
  nextLink7(nextPageLink: string, options?: msRest.RequestOptionsBase): Promise<Models.PolicyEventsNextLink7Response>;
  /**
   * @param nextPageLink The NextLink from the previous successful call to List operation.
   * @param callback The callback
   */
  nextLink7(nextPageLink: string, callback: msRest.ServiceCallback<Models.PolicyEventsQueryResults>): void;
  /**
   * @param nextPageLink The NextLink from the previous successful call to List operation.
   * @param options The optional parameters
   * @param callback The callback
   */
  nextLink7(nextPageLink: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.PolicyEventsQueryResults>): void;
  nextLink7(nextPageLink: string, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<Models.PolicyEventsQueryResults>, callback?: msRest.ServiceCallback<Models.PolicyEventsQueryResults>): Promise<Models.PolicyEventsNextLink7Response> {
    return this.client.sendOperationRequest(
      {
        nextPageLink,
        options
      },
      nextLink7OperationSpec,
      callback) as Promise<Models.PolicyEventsNextLink7Response>;
  }
}

// Operation Specifications
const serializer = new msRest.Serializer(Mappers);
const listQueryResultsForManagementGroupOperationSpec: msRest.OperationSpec = {
  httpMethod: "POST",
  path: "providers/{managementGroupsNamespace}/managementGroups/{managementGroupName}/providers/Microsoft.PolicyInsights/policyEvents/{policyEventsResource}/queryResults",
  urlParameters: [
    Parameters.policyEventsResource,
    Parameters.managementGroupsNamespace,
    Parameters.managementGroupName
  ],
  queryParameters: [
    Parameters.apiVersion2,
    Parameters.top,
    Parameters.orderBy,
    Parameters.select,
    Parameters.from,
    Parameters.to,
    Parameters.filter,
    Parameters.apply,
    Parameters.skipToken
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    200: {
      bodyMapper: Mappers.PolicyEventsQueryResults
    },
    default: {
      bodyMapper: Mappers.QueryFailure
    }
  },
  serializer
};

const listQueryResultsForSubscriptionOperationSpec: msRest.OperationSpec = {
  httpMethod: "POST",
  path: "subscriptions/{subscriptionId}/providers/Microsoft.PolicyInsights/policyEvents/{policyEventsResource}/queryResults",
  urlParameters: [
    Parameters.policyEventsResource,
    Parameters.subscriptionId0
  ],
  queryParameters: [
    Parameters.apiVersion2,
    Parameters.top,
    Parameters.orderBy,
    Parameters.select,
    Parameters.from,
    Parameters.to,
    Parameters.filter,
    Parameters.apply,
    Parameters.skipToken
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    200: {
      bodyMapper: Mappers.PolicyEventsQueryResults
    },
    default: {
      bodyMapper: Mappers.QueryFailure
    }
  },
  serializer
};

const listQueryResultsForResourceGroupOperationSpec: msRest.OperationSpec = {
  httpMethod: "POST",
  path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.PolicyInsights/policyEvents/{policyEventsResource}/queryResults",
  urlParameters: [
    Parameters.policyEventsResource,
    Parameters.subscriptionId0,
    Parameters.resourceGroupName0
  ],
  queryParameters: [
    Parameters.apiVersion2,
    Parameters.top,
    Parameters.orderBy,
    Parameters.select,
    Parameters.from,
    Parameters.to,
    Parameters.filter,
    Parameters.apply,
    Parameters.skipToken
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    200: {
      bodyMapper: Mappers.PolicyEventsQueryResults
    },
    default: {
      bodyMapper: Mappers.QueryFailure
    }
  },
  serializer
};

const listQueryResultsForResourceOperationSpec: msRest.OperationSpec = {
  httpMethod: "POST",
  path: "{resourceId}/providers/Microsoft.PolicyInsights/policyEvents/{policyEventsResource}/queryResults",
  urlParameters: [
    Parameters.policyEventsResource,
    Parameters.resourceId
  ],
  queryParameters: [
    Parameters.apiVersion2,
    Parameters.top,
    Parameters.orderBy,
    Parameters.select,
    Parameters.from,
    Parameters.to,
    Parameters.filter,
    Parameters.apply,
    Parameters.expand,
    Parameters.skipToken
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    200: {
      bodyMapper: Mappers.PolicyEventsQueryResults
    },
    default: {
      bodyMapper: Mappers.QueryFailure
    }
  },
  serializer
};

const listQueryResultsForPolicySetDefinitionOperationSpec: msRest.OperationSpec = {
  httpMethod: "POST",
  path: "subscriptions/{subscriptionId}/providers/{authorizationNamespace}/policySetDefinitions/{policySetDefinitionName}/providers/Microsoft.PolicyInsights/policyEvents/{policyEventsResource}/queryResults",
  urlParameters: [
    Parameters.policyEventsResource,
    Parameters.subscriptionId0,
    Parameters.authorizationNamespace,
    Parameters.policySetDefinitionName
  ],
  queryParameters: [
    Parameters.apiVersion2,
    Parameters.top,
    Parameters.orderBy,
    Parameters.select,
    Parameters.from,
    Parameters.to,
    Parameters.filter,
    Parameters.apply,
    Parameters.skipToken
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    200: {
      bodyMapper: Mappers.PolicyEventsQueryResults
    },
    default: {
      bodyMapper: Mappers.QueryFailure
    }
  },
  serializer
};

const listQueryResultsForPolicyDefinitionOperationSpec: msRest.OperationSpec = {
  httpMethod: "POST",
  path: "subscriptions/{subscriptionId}/providers/{authorizationNamespace}/policyDefinitions/{policyDefinitionName}/providers/Microsoft.PolicyInsights/policyEvents/{policyEventsResource}/queryResults",
  urlParameters: [
    Parameters.policyEventsResource,
    Parameters.subscriptionId0,
    Parameters.authorizationNamespace,
    Parameters.policyDefinitionName
  ],
  queryParameters: [
    Parameters.apiVersion2,
    Parameters.top,
    Parameters.orderBy,
    Parameters.select,
    Parameters.from,
    Parameters.to,
    Parameters.filter,
    Parameters.apply,
    Parameters.skipToken
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    200: {
      bodyMapper: Mappers.PolicyEventsQueryResults
    },
    default: {
      bodyMapper: Mappers.QueryFailure
    }
  },
  serializer
};

const listQueryResultsForSubscriptionLevelPolicyAssignmentOperationSpec: msRest.OperationSpec = {
  httpMethod: "POST",
  path: "subscriptions/{subscriptionId}/providers/{authorizationNamespace}/policyAssignments/{policyAssignmentName}/providers/Microsoft.PolicyInsights/policyEvents/{policyEventsResource}/queryResults",
  urlParameters: [
    Parameters.policyEventsResource,
    Parameters.subscriptionId0,
    Parameters.authorizationNamespace,
    Parameters.policyAssignmentName
  ],
  queryParameters: [
    Parameters.apiVersion2,
    Parameters.top,
    Parameters.orderBy,
    Parameters.select,
    Parameters.from,
    Parameters.to,
    Parameters.filter,
    Parameters.apply,
    Parameters.skipToken
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    200: {
      bodyMapper: Mappers.PolicyEventsQueryResults
    },
    default: {
      bodyMapper: Mappers.QueryFailure
    }
  },
  serializer
};

const listQueryResultsForResourceGroupLevelPolicyAssignmentOperationSpec: msRest.OperationSpec = {
  httpMethod: "POST",
  path: "subscriptions/{subscriptionId}/resourcegroups/{resourceGroupName}/providers/{authorizationNamespace}/policyAssignments/{policyAssignmentName}/providers/Microsoft.PolicyInsights/policyEvents/{policyEventsResource}/queryResults",
  urlParameters: [
    Parameters.policyEventsResource,
    Parameters.subscriptionId0,
    Parameters.resourceGroupName0,
    Parameters.authorizationNamespace,
    Parameters.policyAssignmentName
  ],
  queryParameters: [
    Parameters.apiVersion2,
    Parameters.top,
    Parameters.orderBy,
    Parameters.select,
    Parameters.from,
    Parameters.to,
    Parameters.filter,
    Parameters.apply,
    Parameters.skipToken
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    200: {
      bodyMapper: Mappers.PolicyEventsQueryResults
    },
    default: {
      bodyMapper: Mappers.QueryFailure
    }
  },
  serializer
};

const nextLinkOperationSpec: msRest.OperationSpec = {
  httpMethod: "POST",
  baseUrl: "https://management.azure.com",
  path: "{nextLink}",
  urlParameters: [
    Parameters.nextPageLink
  ],
  queryParameters: [
    Parameters.apiVersion2
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    200: {
      bodyMapper: Mappers.PolicyEventsQueryResults
    },
    default: {
      bodyMapper: Mappers.QueryFailure
    }
  },
  serializer
};

const nextLink1OperationSpec: msRest.OperationSpec = {
  httpMethod: "POST",
  baseUrl: "https://management.azure.com",
  path: "{nextLink}",
  urlParameters: [
    Parameters.nextPageLink
  ],
  queryParameters: [
    Parameters.apiVersion2
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    200: {
      bodyMapper: Mappers.PolicyEventsQueryResults
    },
    default: {
      bodyMapper: Mappers.QueryFailure
    }
  },
  serializer
};

const nextLink2OperationSpec: msRest.OperationSpec = {
  httpMethod: "POST",
  baseUrl: "https://management.azure.com",
  path: "{nextLink}",
  urlParameters: [
    Parameters.nextPageLink
  ],
  queryParameters: [
    Parameters.apiVersion2
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    200: {
      bodyMapper: Mappers.PolicyEventsQueryResults
    },
    default: {
      bodyMapper: Mappers.QueryFailure
    }
  },
  serializer
};

const nextLink3OperationSpec: msRest.OperationSpec = {
  httpMethod: "POST",
  baseUrl: "https://management.azure.com",
  path: "{nextLink}",
  urlParameters: [
    Parameters.nextPageLink
  ],
  queryParameters: [
    Parameters.apiVersion2
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    200: {
      bodyMapper: Mappers.PolicyEventsQueryResults
    },
    default: {
      bodyMapper: Mappers.QueryFailure
    }
  },
  serializer
};

const nextLink4OperationSpec: msRest.OperationSpec = {
  httpMethod: "POST",
  baseUrl: "https://management.azure.com",
  path: "{nextLink}",
  urlParameters: [
    Parameters.nextPageLink
  ],
  queryParameters: [
    Parameters.apiVersion2
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    200: {
      bodyMapper: Mappers.PolicyEventsQueryResults
    },
    default: {
      bodyMapper: Mappers.QueryFailure
    }
  },
  serializer
};

const nextLink5OperationSpec: msRest.OperationSpec = {
  httpMethod: "POST",
  baseUrl: "https://management.azure.com",
  path: "{nextLink}",
  urlParameters: [
    Parameters.nextPageLink
  ],
  queryParameters: [
    Parameters.apiVersion2
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    200: {
      bodyMapper: Mappers.PolicyEventsQueryResults
    },
    default: {
      bodyMapper: Mappers.QueryFailure
    }
  },
  serializer
};

const nextLink6OperationSpec: msRest.OperationSpec = {
  httpMethod: "POST",
  baseUrl: "https://management.azure.com",
  path: "{nextLink}",
  urlParameters: [
    Parameters.nextPageLink
  ],
  queryParameters: [
    Parameters.apiVersion2
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    200: {
      bodyMapper: Mappers.PolicyEventsQueryResults
    },
    default: {
      bodyMapper: Mappers.QueryFailure
    }
  },
  serializer
};

const nextLink7OperationSpec: msRest.OperationSpec = {
  httpMethod: "POST",
  baseUrl: "https://management.azure.com",
  path: "{nextLink}",
  urlParameters: [
    Parameters.nextPageLink
  ],
  queryParameters: [
    Parameters.apiVersion2
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    200: {
      bodyMapper: Mappers.PolicyEventsQueryResults
    },
    default: {
      bodyMapper: Mappers.QueryFailure
    }
  },
  serializer
};
