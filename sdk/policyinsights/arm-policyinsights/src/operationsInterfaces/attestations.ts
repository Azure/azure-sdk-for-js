/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */

import { PagedAsyncIterableIterator } from "@azure/core-paging";
import { PollerLike, PollOperationState } from "@azure/core-lro";
import {
  Attestation,
  AttestationsListForSubscriptionOptionalParams,
  AttestationsListForResourceGroupOptionalParams,
  AttestationsListForResourceOptionalParams,
  AttestationsCreateOrUpdateAtSubscriptionOptionalParams,
  AttestationsCreateOrUpdateAtSubscriptionResponse,
  AttestationsGetAtSubscriptionOptionalParams,
  AttestationsGetAtSubscriptionResponse,
  AttestationsDeleteAtSubscriptionOptionalParams,
  AttestationsCreateOrUpdateAtResourceGroupOptionalParams,
  AttestationsCreateOrUpdateAtResourceGroupResponse,
  AttestationsGetAtResourceGroupOptionalParams,
  AttestationsGetAtResourceGroupResponse,
  AttestationsDeleteAtResourceGroupOptionalParams,
  AttestationsCreateOrUpdateAtResourceOptionalParams,
  AttestationsCreateOrUpdateAtResourceResponse,
  AttestationsGetAtResourceOptionalParams,
  AttestationsGetAtResourceResponse,
  AttestationsDeleteAtResourceOptionalParams
} from "../models";

/// <reference lib="esnext.asynciterable" />
/** Interface representing a Attestations. */
export interface Attestations {
  /**
   * Gets all attestations for the subscription.
   * @param options The options parameters.
   */
  listForSubscription(
    options?: AttestationsListForSubscriptionOptionalParams
  ): PagedAsyncIterableIterator<Attestation>;
  /**
   * Gets all attestations for the resource group.
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param options The options parameters.
   */
  listForResourceGroup(
    resourceGroupName: string,
    options?: AttestationsListForResourceGroupOptionalParams
  ): PagedAsyncIterableIterator<Attestation>;
  /**
   * Gets all attestations for a resource.
   * @param resourceId Resource ID.
   * @param options The options parameters.
   */
  listForResource(
    resourceId: string,
    options?: AttestationsListForResourceOptionalParams
  ): PagedAsyncIterableIterator<Attestation>;
  /**
   * Creates or updates an attestation at subscription scope.
   * @param attestationName The name of the attestation.
   * @param parameters The attestation parameters.
   * @param options The options parameters.
   */
  beginCreateOrUpdateAtSubscription(
    attestationName: string,
    parameters: Attestation,
    options?: AttestationsCreateOrUpdateAtSubscriptionOptionalParams
  ): Promise<
    PollerLike<
      PollOperationState<AttestationsCreateOrUpdateAtSubscriptionResponse>,
      AttestationsCreateOrUpdateAtSubscriptionResponse
    >
  >;
  /**
   * Creates or updates an attestation at subscription scope.
   * @param attestationName The name of the attestation.
   * @param parameters The attestation parameters.
   * @param options The options parameters.
   */
  beginCreateOrUpdateAtSubscriptionAndWait(
    attestationName: string,
    parameters: Attestation,
    options?: AttestationsCreateOrUpdateAtSubscriptionOptionalParams
  ): Promise<AttestationsCreateOrUpdateAtSubscriptionResponse>;
  /**
   * Gets an existing attestation at subscription scope.
   * @param attestationName The name of the attestation.
   * @param options The options parameters.
   */
  getAtSubscription(
    attestationName: string,
    options?: AttestationsGetAtSubscriptionOptionalParams
  ): Promise<AttestationsGetAtSubscriptionResponse>;
  /**
   * Deletes an existing attestation at subscription scope.
   * @param attestationName The name of the attestation.
   * @param options The options parameters.
   */
  deleteAtSubscription(
    attestationName: string,
    options?: AttestationsDeleteAtSubscriptionOptionalParams
  ): Promise<void>;
  /**
   * Creates or updates an attestation at resource group scope.
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param attestationName The name of the attestation.
   * @param parameters The attestation parameters.
   * @param options The options parameters.
   */
  beginCreateOrUpdateAtResourceGroup(
    resourceGroupName: string,
    attestationName: string,
    parameters: Attestation,
    options?: AttestationsCreateOrUpdateAtResourceGroupOptionalParams
  ): Promise<
    PollerLike<
      PollOperationState<AttestationsCreateOrUpdateAtResourceGroupResponse>,
      AttestationsCreateOrUpdateAtResourceGroupResponse
    >
  >;
  /**
   * Creates or updates an attestation at resource group scope.
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param attestationName The name of the attestation.
   * @param parameters The attestation parameters.
   * @param options The options parameters.
   */
  beginCreateOrUpdateAtResourceGroupAndWait(
    resourceGroupName: string,
    attestationName: string,
    parameters: Attestation,
    options?: AttestationsCreateOrUpdateAtResourceGroupOptionalParams
  ): Promise<AttestationsCreateOrUpdateAtResourceGroupResponse>;
  /**
   * Gets an existing attestation at resource group scope.
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param attestationName The name of the attestation.
   * @param options The options parameters.
   */
  getAtResourceGroup(
    resourceGroupName: string,
    attestationName: string,
    options?: AttestationsGetAtResourceGroupOptionalParams
  ): Promise<AttestationsGetAtResourceGroupResponse>;
  /**
   * Deletes an existing attestation at resource group scope.
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param attestationName The name of the attestation.
   * @param options The options parameters.
   */
  deleteAtResourceGroup(
    resourceGroupName: string,
    attestationName: string,
    options?: AttestationsDeleteAtResourceGroupOptionalParams
  ): Promise<void>;
  /**
   * Creates or updates an attestation at resource scope.
   * @param resourceId Resource ID.
   * @param attestationName The name of the attestation.
   * @param parameters The attestation parameters.
   * @param options The options parameters.
   */
  beginCreateOrUpdateAtResource(
    resourceId: string,
    attestationName: string,
    parameters: Attestation,
    options?: AttestationsCreateOrUpdateAtResourceOptionalParams
  ): Promise<
    PollerLike<
      PollOperationState<AttestationsCreateOrUpdateAtResourceResponse>,
      AttestationsCreateOrUpdateAtResourceResponse
    >
  >;
  /**
   * Creates or updates an attestation at resource scope.
   * @param resourceId Resource ID.
   * @param attestationName The name of the attestation.
   * @param parameters The attestation parameters.
   * @param options The options parameters.
   */
  beginCreateOrUpdateAtResourceAndWait(
    resourceId: string,
    attestationName: string,
    parameters: Attestation,
    options?: AttestationsCreateOrUpdateAtResourceOptionalParams
  ): Promise<AttestationsCreateOrUpdateAtResourceResponse>;
  /**
   * Gets an existing attestation at resource scope.
   * @param resourceId Resource ID.
   * @param attestationName The name of the attestation.
   * @param options The options parameters.
   */
  getAtResource(
    resourceId: string,
    attestationName: string,
    options?: AttestationsGetAtResourceOptionalParams
  ): Promise<AttestationsGetAtResourceResponse>;
  /**
   * Deletes an existing attestation at individual resource scope.
   * @param resourceId Resource ID.
   * @param attestationName The name of the attestation.
   * @param options The options parameters.
   */
  deleteAtResource(
    resourceId: string,
    attestationName: string,
    options?: AttestationsDeleteAtResourceOptionalParams
  ): Promise<void>;
}
