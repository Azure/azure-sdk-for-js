/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */

import { PagedAsyncIterableIterator } from "@azure/core-paging";
import { SimplePollerLike, OperationState } from "@azure/core-lro";
import {
  FabricModel,
  FabricListBySubscriptionOptionalParams,
  FabricListOptionalParams,
  FabricGetOptionalParams,
  FabricGetResponse,
  FabricCreateOptionalParams,
  FabricCreateResponse,
  FabricUpdateOptionalParams,
  FabricUpdateResponse,
  FabricDeleteOptionalParams,
  FabricDeleteResponse
} from "../models";

/// <reference lib="esnext.asynciterable" />
/** Interface representing a Fabric. */
export interface Fabric {
  /**
   * Gets the list of fabrics in the given subscription.
   * @param options The options parameters.
   */
  listBySubscription(
    options?: FabricListBySubscriptionOptionalParams
  ): PagedAsyncIterableIterator<FabricModel>;
  /**
   * Gets the list of fabrics in the given subscription and resource group.
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param options The options parameters.
   */
  list(
    resourceGroupName: string,
    options?: FabricListOptionalParams
  ): PagedAsyncIterableIterator<FabricModel>;
  /**
   * Gets the details of the fabric.
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param fabricName The fabric name.
   * @param options The options parameters.
   */
  get(
    resourceGroupName: string,
    fabricName: string,
    options?: FabricGetOptionalParams
  ): Promise<FabricGetResponse>;
  /**
   * Creates the fabric.
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param fabricName The fabric name.
   * @param options The options parameters.
   */
  beginCreate(
    resourceGroupName: string,
    fabricName: string,
    options?: FabricCreateOptionalParams
  ): Promise<
    SimplePollerLike<OperationState<FabricCreateResponse>, FabricCreateResponse>
  >;
  /**
   * Creates the fabric.
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param fabricName The fabric name.
   * @param options The options parameters.
   */
  beginCreateAndWait(
    resourceGroupName: string,
    fabricName: string,
    options?: FabricCreateOptionalParams
  ): Promise<FabricCreateResponse>;
  /**
   * Performs update on the fabric.
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param fabricName The fabric name.
   * @param options The options parameters.
   */
  beginUpdate(
    resourceGroupName: string,
    fabricName: string,
    options?: FabricUpdateOptionalParams
  ): Promise<
    SimplePollerLike<OperationState<FabricUpdateResponse>, FabricUpdateResponse>
  >;
  /**
   * Performs update on the fabric.
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param fabricName The fabric name.
   * @param options The options parameters.
   */
  beginUpdateAndWait(
    resourceGroupName: string,
    fabricName: string,
    options?: FabricUpdateOptionalParams
  ): Promise<FabricUpdateResponse>;
  /**
   * Removes the fabric.
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param fabricName The fabric name.
   * @param options The options parameters.
   */
  beginDelete(
    resourceGroupName: string,
    fabricName: string,
    options?: FabricDeleteOptionalParams
  ): Promise<
    SimplePollerLike<OperationState<FabricDeleteResponse>, FabricDeleteResponse>
  >;
  /**
   * Removes the fabric.
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param fabricName The fabric name.
   * @param options The options parameters.
   */
  beginDeleteAndWait(
    resourceGroupName: string,
    fabricName: string,
    options?: FabricDeleteOptionalParams
  ): Promise<FabricDeleteResponse>;
}
