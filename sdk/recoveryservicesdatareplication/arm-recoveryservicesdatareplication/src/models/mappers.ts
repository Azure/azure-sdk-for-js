/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */

import * as coreClient from "@azure/core-client";

export const DraModel: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "DraModel",
    modelProperties: {
      properties: {
        serializedName: "properties",
        type: {
          name: "Composite",
          className: "DraModelProperties"
        }
      },
      id: {
        serializedName: "id",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      name: {
        serializedName: "name",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      type: {
        serializedName: "type",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      systemData: {
        serializedName: "systemData",
        type: {
          name: "Composite",
          className: "DraModelSystemData"
        }
      }
    }
  }
};

export const DraModelProperties: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "DraModelProperties",
    modelProperties: {
      correlationId: {
        serializedName: "correlationId",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      machineId: {
        constraints: {
          MinLength: 1
        },
        serializedName: "machineId",
        required: true,
        type: {
          name: "String"
        }
      },
      machineName: {
        constraints: {
          MinLength: 1
        },
        serializedName: "machineName",
        required: true,
        type: {
          name: "String"
        }
      },
      authenticationIdentity: {
        serializedName: "authenticationIdentity",
        type: {
          name: "Composite",
          className: "IdentityModel"
        }
      },
      resourceAccessIdentity: {
        serializedName: "resourceAccessIdentity",
        type: {
          name: "Composite",
          className: "IdentityModel"
        }
      },
      isResponsive: {
        serializedName: "isResponsive",
        readOnly: true,
        type: {
          name: "Boolean"
        }
      },
      lastHeartbeat: {
        serializedName: "lastHeartbeat",
        readOnly: true,
        type: {
          name: "DateTime"
        }
      },
      versionNumber: {
        serializedName: "versionNumber",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      provisioningState: {
        serializedName: "provisioningState",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      healthErrors: {
        serializedName: "healthErrors",
        readOnly: true,
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "HealthErrorModel"
            }
          }
        }
      },
      customProperties: {
        serializedName: "customProperties",
        type: {
          name: "Composite",
          className: "DraModelCustomProperties"
        }
      }
    }
  }
};

export const IdentityModel: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "IdentityModel",
    modelProperties: {
      tenantId: {
        constraints: {
          MinLength: 1
        },
        serializedName: "tenantId",
        required: true,
        type: {
          name: "String"
        }
      },
      applicationId: {
        constraints: {
          MinLength: 1
        },
        serializedName: "applicationId",
        required: true,
        type: {
          name: "String"
        }
      },
      objectId: {
        constraints: {
          MinLength: 1
        },
        serializedName: "objectId",
        required: true,
        type: {
          name: "String"
        }
      },
      audience: {
        constraints: {
          MinLength: 1
        },
        serializedName: "audience",
        required: true,
        type: {
          name: "String"
        }
      },
      aadAuthority: {
        constraints: {
          MinLength: 1
        },
        serializedName: "aadAuthority",
        required: true,
        type: {
          name: "String"
        }
      }
    }
  }
};

export const HealthErrorModel: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "HealthErrorModel",
    modelProperties: {
      affectedResourceType: {
        serializedName: "affectedResourceType",
        type: {
          name: "String"
        }
      },
      affectedResourceCorrelationIds: {
        serializedName: "affectedResourceCorrelationIds",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "String"
            }
          }
        }
      },
      childErrors: {
        serializedName: "childErrors",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "InnerHealthErrorModel"
            }
          }
        }
      },
      code: {
        serializedName: "code",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      healthCategory: {
        serializedName: "healthCategory",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      category: {
        serializedName: "category",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      severity: {
        serializedName: "severity",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      source: {
        serializedName: "source",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      creationTime: {
        serializedName: "creationTime",
        readOnly: true,
        type: {
          name: "DateTime"
        }
      },
      isCustomerResolvable: {
        serializedName: "isCustomerResolvable",
        readOnly: true,
        type: {
          name: "Boolean"
        }
      },
      summary: {
        serializedName: "summary",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      message: {
        serializedName: "message",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      causes: {
        serializedName: "causes",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      recommendation: {
        serializedName: "recommendation",
        readOnly: true,
        type: {
          name: "String"
        }
      }
    }
  }
};

export const InnerHealthErrorModel: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "InnerHealthErrorModel",
    modelProperties: {
      code: {
        serializedName: "code",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      healthCategory: {
        serializedName: "healthCategory",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      category: {
        serializedName: "category",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      severity: {
        serializedName: "severity",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      source: {
        serializedName: "source",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      creationTime: {
        serializedName: "creationTime",
        readOnly: true,
        type: {
          name: "DateTime"
        }
      },
      isCustomerResolvable: {
        serializedName: "isCustomerResolvable",
        readOnly: true,
        type: {
          name: "Boolean"
        }
      },
      summary: {
        serializedName: "summary",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      message: {
        serializedName: "message",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      causes: {
        serializedName: "causes",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      recommendation: {
        serializedName: "recommendation",
        readOnly: true,
        type: {
          name: "String"
        }
      }
    }
  }
};

export const DraModelCustomProperties: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "DraModelCustomProperties",
    uberParent: "DraModelCustomProperties",
    polymorphicDiscriminator: {
      serializedName: "instanceType",
      clientName: "instanceType"
    },
    modelProperties: {
      instanceType: {
        constraints: {
          MinLength: 1
        },
        serializedName: "instanceType",
        required: true,
        type: {
          name: "String"
        }
      }
    }
  }
};

export const SystemDataModel: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "SystemDataModel",
    modelProperties: {
      createdBy: {
        serializedName: "createdBy",
        type: {
          name: "String"
        }
      },
      createdByType: {
        serializedName: "createdByType",
        type: {
          name: "String"
        }
      },
      createdAt: {
        serializedName: "createdAt",
        type: {
          name: "DateTime"
        }
      },
      lastModifiedBy: {
        serializedName: "lastModifiedBy",
        type: {
          name: "String"
        }
      },
      lastModifiedByType: {
        serializedName: "lastModifiedByType",
        type: {
          name: "String"
        }
      },
      lastModifiedAt: {
        serializedName: "lastModifiedAt",
        type: {
          name: "DateTime"
        }
      }
    }
  }
};

export const ErrorResponse: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "ErrorResponse",
    modelProperties: {
      error: {
        serializedName: "error",
        type: {
          name: "Composite",
          className: "ErrorDetail"
        }
      }
    }
  }
};

export const ErrorDetail: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "ErrorDetail",
    modelProperties: {
      code: {
        serializedName: "code",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      message: {
        serializedName: "message",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      target: {
        serializedName: "target",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      details: {
        serializedName: "details",
        readOnly: true,
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "ErrorDetail"
            }
          }
        }
      },
      additionalInfo: {
        serializedName: "additionalInfo",
        readOnly: true,
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "ErrorAdditionalInfo"
            }
          }
        }
      }
    }
  }
};

export const ErrorAdditionalInfo: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "ErrorAdditionalInfo",
    modelProperties: {
      type: {
        serializedName: "type",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      info: {
        serializedName: "info",
        readOnly: true,
        type: {
          name: "Dictionary",
          value: { type: { name: "any" } }
        }
      }
    }
  }
};

export const DraModelCollection: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "DraModelCollection",
    modelProperties: {
      value: {
        serializedName: "value",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "DraModel"
            }
          }
        }
      },
      nextLink: {
        serializedName: "nextLink",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const OperationStatus: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "OperationStatus",
    modelProperties: {
      id: {
        serializedName: "id",
        type: {
          name: "String"
        }
      },
      name: {
        serializedName: "name",
        type: {
          name: "String"
        }
      },
      status: {
        serializedName: "status",
        type: {
          name: "String"
        }
      },
      startTime: {
        serializedName: "startTime",
        type: {
          name: "String"
        }
      },
      endTime: {
        serializedName: "endTime",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const EmailConfigurationModel: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "EmailConfigurationModel",
    modelProperties: {
      properties: {
        serializedName: "properties",
        type: {
          name: "Composite",
          className: "EmailConfigurationModelProperties"
        }
      },
      id: {
        serializedName: "id",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      name: {
        serializedName: "name",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      type: {
        serializedName: "type",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      systemData: {
        serializedName: "systemData",
        type: {
          name: "Composite",
          className: "EmailConfigurationModelSystemData"
        }
      }
    }
  }
};

export const EmailConfigurationModelProperties: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "EmailConfigurationModelProperties",
    modelProperties: {
      sendToOwners: {
        serializedName: "sendToOwners",
        required: true,
        type: {
          name: "Boolean"
        }
      },
      customEmailAddresses: {
        serializedName: "customEmailAddresses",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "String"
            }
          }
        }
      },
      locale: {
        serializedName: "locale",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const EmailConfigurationModelCollection: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "EmailConfigurationModelCollection",
    modelProperties: {
      value: {
        serializedName: "value",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "EmailConfigurationModel"
            }
          }
        }
      },
      nextLink: {
        serializedName: "nextLink",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const EventModel: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "EventModel",
    modelProperties: {
      properties: {
        serializedName: "properties",
        type: {
          name: "Composite",
          className: "EventModelProperties"
        }
      },
      id: {
        serializedName: "id",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      name: {
        serializedName: "name",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      type: {
        serializedName: "type",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      systemData: {
        serializedName: "systemData",
        type: {
          name: "Composite",
          className: "EventModelSystemData"
        }
      }
    }
  }
};

export const EventModelProperties: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "EventModelProperties",
    modelProperties: {
      resourceType: {
        serializedName: "resourceType",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      resourceName: {
        serializedName: "resourceName",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      eventType: {
        serializedName: "eventType",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      eventName: {
        serializedName: "eventName",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      timeOfOccurrence: {
        serializedName: "timeOfOccurrence",
        readOnly: true,
        type: {
          name: "DateTime"
        }
      },
      severity: {
        serializedName: "severity",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      description: {
        serializedName: "description",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      correlationId: {
        serializedName: "correlationId",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      healthErrors: {
        serializedName: "healthErrors",
        readOnly: true,
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "HealthErrorModel"
            }
          }
        }
      },
      customProperties: {
        serializedName: "customProperties",
        type: {
          name: "Composite",
          className: "EventModelCustomProperties"
        }
      }
    }
  }
};

export const EventModelCustomProperties: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "EventModelCustomProperties",
    uberParent: "EventModelCustomProperties",
    polymorphicDiscriminator: {
      serializedName: "instanceType",
      clientName: "instanceType"
    },
    modelProperties: {
      instanceType: {
        constraints: {
          MinLength: 1
        },
        serializedName: "instanceType",
        required: true,
        type: {
          name: "String"
        }
      }
    }
  }
};

export const EventModelCollection: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "EventModelCollection",
    modelProperties: {
      value: {
        serializedName: "value",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "EventModel"
            }
          }
        }
      },
      nextLink: {
        serializedName: "nextLink",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const FabricModel: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "FabricModel",
    modelProperties: {
      location: {
        constraints: {
          MinLength: 1
        },
        serializedName: "location",
        required: true,
        type: {
          name: "String"
        }
      },
      tags: {
        serializedName: "tags",
        type: {
          name: "Dictionary",
          value: { type: { name: "String" } }
        }
      },
      properties: {
        serializedName: "properties",
        type: {
          name: "Composite",
          className: "FabricModelProperties"
        }
      },
      id: {
        serializedName: "id",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      name: {
        serializedName: "name",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      type: {
        serializedName: "type",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      systemData: {
        serializedName: "systemData",
        type: {
          name: "Composite",
          className: "FabricModelSystemData"
        }
      }
    }
  }
};

export const FabricModelProperties: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "FabricModelProperties",
    modelProperties: {
      provisioningState: {
        serializedName: "provisioningState",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      serviceEndpoint: {
        serializedName: "serviceEndpoint",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      serviceResourceId: {
        serializedName: "serviceResourceId",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      health: {
        serializedName: "health",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      healthErrors: {
        serializedName: "healthErrors",
        readOnly: true,
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "HealthErrorModel"
            }
          }
        }
      },
      customProperties: {
        serializedName: "customProperties",
        type: {
          name: "Composite",
          className: "FabricModelCustomProperties"
        }
      }
    }
  }
};

export const FabricModelCustomProperties: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "FabricModelCustomProperties",
    uberParent: "FabricModelCustomProperties",
    polymorphicDiscriminator: {
      serializedName: "instanceType",
      clientName: "instanceType"
    },
    modelProperties: {
      instanceType: {
        constraints: {
          MinLength: 1
        },
        serializedName: "instanceType",
        required: true,
        type: {
          name: "String"
        }
      }
    }
  }
};

export const FabricModelUpdate: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "FabricModelUpdate",
    modelProperties: {
      tags: {
        serializedName: "tags",
        type: {
          name: "Dictionary",
          value: { type: { name: "String" } }
        }
      },
      properties: {
        serializedName: "properties",
        type: {
          name: "Composite",
          className: "FabricModelProperties"
        }
      },
      id: {
        serializedName: "id",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      name: {
        serializedName: "name",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      type: {
        serializedName: "type",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      systemData: {
        serializedName: "systemData",
        type: {
          name: "Composite",
          className: "FabricModelUpdateSystemData"
        }
      }
    }
  }
};

export const FabricModelCollection: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "FabricModelCollection",
    modelProperties: {
      value: {
        serializedName: "value",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "FabricModel"
            }
          }
        }
      },
      nextLink: {
        serializedName: "nextLink",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const PolicyModel: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "PolicyModel",
    modelProperties: {
      properties: {
        serializedName: "properties",
        type: {
          name: "Composite",
          className: "PolicyModelProperties"
        }
      },
      id: {
        serializedName: "id",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      name: {
        serializedName: "name",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      type: {
        serializedName: "type",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      systemData: {
        serializedName: "systemData",
        type: {
          name: "Composite",
          className: "PolicyModelSystemData"
        }
      }
    }
  }
};

export const PolicyModelProperties: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "PolicyModelProperties",
    modelProperties: {
      provisioningState: {
        serializedName: "provisioningState",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      customProperties: {
        serializedName: "customProperties",
        type: {
          name: "Composite",
          className: "PolicyModelCustomProperties"
        }
      }
    }
  }
};

export const PolicyModelCustomProperties: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "PolicyModelCustomProperties",
    uberParent: "PolicyModelCustomProperties",
    polymorphicDiscriminator: {
      serializedName: "instanceType",
      clientName: "instanceType"
    },
    modelProperties: {
      instanceType: {
        constraints: {
          MinLength: 1
        },
        serializedName: "instanceType",
        required: true,
        type: {
          name: "String"
        }
      }
    }
  }
};

export const PolicyModelCollection: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "PolicyModelCollection",
    modelProperties: {
      value: {
        serializedName: "value",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "PolicyModel"
            }
          }
        }
      },
      nextLink: {
        serializedName: "nextLink",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const ProtectedItemModel: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "ProtectedItemModel",
    modelProperties: {
      properties: {
        serializedName: "properties",
        type: {
          name: "Composite",
          className: "ProtectedItemModelProperties"
        }
      },
      id: {
        serializedName: "id",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      name: {
        serializedName: "name",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      type: {
        serializedName: "type",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      systemData: {
        serializedName: "systemData",
        type: {
          name: "Composite",
          className: "ProtectedItemModelSystemData"
        }
      }
    }
  }
};

export const ProtectedItemModelProperties: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "ProtectedItemModelProperties",
    modelProperties: {
      policyName: {
        constraints: {
          MinLength: 1
        },
        serializedName: "policyName",
        required: true,
        type: {
          name: "String"
        }
      },
      replicationExtensionName: {
        constraints: {
          MinLength: 1
        },
        serializedName: "replicationExtensionName",
        required: true,
        type: {
          name: "String"
        }
      },
      correlationId: {
        serializedName: "correlationId",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      provisioningState: {
        serializedName: "provisioningState",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      protectionState: {
        serializedName: "protectionState",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      protectionStateDescription: {
        serializedName: "protectionStateDescription",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      testFailoverState: {
        serializedName: "testFailoverState",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      testFailoverStateDescription: {
        serializedName: "testFailoverStateDescription",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      resynchronizationState: {
        serializedName: "resynchronizationState",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      fabricObjectId: {
        serializedName: "fabricObjectId",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      fabricObjectName: {
        serializedName: "fabricObjectName",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      sourceFabricProviderId: {
        serializedName: "sourceFabricProviderId",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      targetFabricProviderId: {
        serializedName: "targetFabricProviderId",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      fabricId: {
        serializedName: "fabricId",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      targetFabricId: {
        serializedName: "targetFabricId",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      draId: {
        serializedName: "draId",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      targetDraId: {
        serializedName: "targetDraId",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      resyncRequired: {
        serializedName: "resyncRequired",
        readOnly: true,
        type: {
          name: "Boolean"
        }
      },
      lastSuccessfulPlannedFailoverTime: {
        serializedName: "lastSuccessfulPlannedFailoverTime",
        readOnly: true,
        type: {
          name: "DateTime"
        }
      },
      lastSuccessfulUnplannedFailoverTime: {
        serializedName: "lastSuccessfulUnplannedFailoverTime",
        readOnly: true,
        type: {
          name: "DateTime"
        }
      },
      lastSuccessfulTestFailoverTime: {
        serializedName: "lastSuccessfulTestFailoverTime",
        readOnly: true,
        type: {
          name: "DateTime"
        }
      },
      currentJob: {
        serializedName: "currentJob",
        type: {
          name: "Composite",
          className: "ProtectedItemModelPropertiesCurrentJob"
        }
      },
      allowedJobs: {
        serializedName: "allowedJobs",
        readOnly: true,
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "String"
            }
          }
        }
      },
      lastFailedEnableProtectionJob: {
        serializedName: "lastFailedEnableProtectionJob",
        type: {
          name: "Composite",
          className: "ProtectedItemModelPropertiesLastFailedEnableProtectionJob"
        }
      },
      lastFailedPlannedFailoverJob: {
        serializedName: "lastFailedPlannedFailoverJob",
        type: {
          name: "Composite",
          className: "ProtectedItemModelPropertiesLastFailedPlannedFailoverJob"
        }
      },
      lastTestFailoverJob: {
        serializedName: "lastTestFailoverJob",
        type: {
          name: "Composite",
          className: "ProtectedItemModelPropertiesLastTestFailoverJob"
        }
      },
      replicationHealth: {
        serializedName: "replicationHealth",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      healthErrors: {
        serializedName: "healthErrors",
        readOnly: true,
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "HealthErrorModel"
            }
          }
        }
      },
      customProperties: {
        serializedName: "customProperties",
        type: {
          name: "Composite",
          className: "ProtectedItemModelCustomProperties"
        }
      }
    }
  }
};

export const ProtectedItemJobProperties: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "ProtectedItemJobProperties",
    modelProperties: {
      scenarioName: {
        serializedName: "scenarioName",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      id: {
        serializedName: "id",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      name: {
        serializedName: "name",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      displayName: {
        serializedName: "displayName",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      state: {
        serializedName: "state",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      startTime: {
        serializedName: "startTime",
        readOnly: true,
        type: {
          name: "DateTime"
        }
      },
      endTime: {
        serializedName: "endTime",
        readOnly: true,
        type: {
          name: "DateTime"
        }
      }
    }
  }
};

export const ProtectedItemModelCustomProperties: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "ProtectedItemModelCustomProperties",
    uberParent: "ProtectedItemModelCustomProperties",
    polymorphicDiscriminator: {
      serializedName: "instanceType",
      clientName: "instanceType"
    },
    modelProperties: {
      instanceType: {
        constraints: {
          MinLength: 1
        },
        serializedName: "instanceType",
        required: true,
        type: {
          name: "String"
        }
      }
    }
  }
};

export const ProtectedItemModelCollection: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "ProtectedItemModelCollection",
    modelProperties: {
      value: {
        serializedName: "value",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "ProtectedItemModel"
            }
          }
        }
      },
      nextLink: {
        serializedName: "nextLink",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const PlannedFailoverModel: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "PlannedFailoverModel",
    modelProperties: {
      properties: {
        serializedName: "properties",
        type: {
          name: "Composite",
          className: "PlannedFailoverModelProperties"
        }
      }
    }
  }
};

export const PlannedFailoverModelProperties: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "PlannedFailoverModelProperties",
    modelProperties: {
      customProperties: {
        serializedName: "customProperties",
        type: {
          name: "Composite",
          className: "PlannedFailoverModelCustomProperties"
        }
      }
    }
  }
};

export const PlannedFailoverModelCustomProperties: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "PlannedFailoverModelCustomProperties",
    uberParent: "PlannedFailoverModelCustomProperties",
    polymorphicDiscriminator: {
      serializedName: "instanceType",
      clientName: "instanceType"
    },
    modelProperties: {
      instanceType: {
        constraints: {
          MinLength: 1
        },
        serializedName: "instanceType",
        required: true,
        type: {
          name: "String"
        }
      }
    }
  }
};

export const RecoveryPointModel: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "RecoveryPointModel",
    modelProperties: {
      properties: {
        serializedName: "properties",
        type: {
          name: "Composite",
          className: "RecoveryPointModelProperties"
        }
      },
      id: {
        serializedName: "id",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      name: {
        serializedName: "name",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      type: {
        serializedName: "type",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      systemData: {
        serializedName: "systemData",
        type: {
          name: "Composite",
          className: "RecoveryPointModelSystemData"
        }
      }
    }
  }
};

export const RecoveryPointModelProperties: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "RecoveryPointModelProperties",
    modelProperties: {
      recoveryPointTime: {
        serializedName: "recoveryPointTime",
        required: true,
        type: {
          name: "DateTime"
        }
      },
      recoveryPointType: {
        serializedName: "recoveryPointType",
        required: true,
        type: {
          name: "String"
        }
      },
      customProperties: {
        serializedName: "customProperties",
        type: {
          name: "Composite",
          className: "RecoveryPointModelCustomProperties"
        }
      }
    }
  }
};

export const RecoveryPointModelCustomProperties: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "RecoveryPointModelCustomProperties",
    uberParent: "RecoveryPointModelCustomProperties",
    polymorphicDiscriminator: {
      serializedName: "instanceType",
      clientName: "instanceType"
    },
    modelProperties: {
      instanceType: {
        constraints: {
          MinLength: 1
        },
        serializedName: "instanceType",
        required: true,
        type: {
          name: "String"
        }
      }
    }
  }
};

export const RecoveryPointModelCollection: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "RecoveryPointModelCollection",
    modelProperties: {
      value: {
        serializedName: "value",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "RecoveryPointModel"
            }
          }
        }
      },
      nextLink: {
        serializedName: "nextLink",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const ReplicationExtensionModel: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "ReplicationExtensionModel",
    modelProperties: {
      properties: {
        serializedName: "properties",
        type: {
          name: "Composite",
          className: "ReplicationExtensionModelProperties"
        }
      },
      id: {
        serializedName: "id",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      name: {
        serializedName: "name",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      type: {
        serializedName: "type",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      systemData: {
        serializedName: "systemData",
        type: {
          name: "Composite",
          className: "ReplicationExtensionModelSystemData"
        }
      }
    }
  }
};

export const ReplicationExtensionModelProperties: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "ReplicationExtensionModelProperties",
    modelProperties: {
      provisioningState: {
        serializedName: "provisioningState",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      customProperties: {
        serializedName: "customProperties",
        type: {
          name: "Composite",
          className: "ReplicationExtensionModelCustomProperties"
        }
      }
    }
  }
};

export const ReplicationExtensionModelCustomProperties: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "ReplicationExtensionModelCustomProperties",
    uberParent: "ReplicationExtensionModelCustomProperties",
    polymorphicDiscriminator: {
      serializedName: "instanceType",
      clientName: "instanceType"
    },
    modelProperties: {
      instanceType: {
        constraints: {
          MinLength: 1
        },
        serializedName: "instanceType",
        required: true,
        type: {
          name: "String"
        }
      }
    }
  }
};

export const ReplicationExtensionModelCollection: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "ReplicationExtensionModelCollection",
    modelProperties: {
      value: {
        serializedName: "value",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "ReplicationExtensionModel"
            }
          }
        }
      },
      nextLink: {
        serializedName: "nextLink",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const CheckNameAvailabilityModel: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "CheckNameAvailabilityModel",
    modelProperties: {
      name: {
        serializedName: "name",
        type: {
          name: "String"
        }
      },
      type: {
        serializedName: "type",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const CheckNameAvailabilityResponseModel: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "CheckNameAvailabilityResponseModel",
    modelProperties: {
      nameAvailable: {
        serializedName: "nameAvailable",
        type: {
          name: "Boolean"
        }
      },
      reason: {
        serializedName: "reason",
        type: {
          name: "String"
        }
      },
      message: {
        serializedName: "message",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const OperationListResult: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "OperationListResult",
    modelProperties: {
      value: {
        serializedName: "value",
        readOnly: true,
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "Operation"
            }
          }
        }
      },
      nextLink: {
        serializedName: "nextLink",
        readOnly: true,
        type: {
          name: "String"
        }
      }
    }
  }
};

export const Operation: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "Operation",
    modelProperties: {
      name: {
        serializedName: "name",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      isDataAction: {
        serializedName: "isDataAction",
        readOnly: true,
        type: {
          name: "Boolean"
        }
      },
      display: {
        serializedName: "display",
        type: {
          name: "Composite",
          className: "OperationDisplay"
        }
      },
      origin: {
        serializedName: "origin",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      actionType: {
        serializedName: "actionType",
        readOnly: true,
        type: {
          name: "String"
        }
      }
    }
  }
};

export const OperationDisplay: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "OperationDisplay",
    modelProperties: {
      provider: {
        serializedName: "provider",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      resource: {
        serializedName: "resource",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      operation: {
        serializedName: "operation",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      description: {
        serializedName: "description",
        readOnly: true,
        type: {
          name: "String"
        }
      }
    }
  }
};

export const DeploymentPreflightModel: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "DeploymentPreflightModel",
    modelProperties: {
      resources: {
        serializedName: "resources",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "DeploymentPreflightResource"
            }
          }
        }
      }
    }
  }
};

export const DeploymentPreflightResource: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "DeploymentPreflightResource",
    modelProperties: {
      name: {
        serializedName: "name",
        type: {
          name: "String"
        }
      },
      type: {
        serializedName: "type",
        type: {
          name: "String"
        }
      },
      location: {
        serializedName: "location",
        type: {
          name: "String"
        }
      },
      apiVersion: {
        serializedName: "apiVersion",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const VaultModel: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "VaultModel",
    modelProperties: {
      location: {
        constraints: {
          MinLength: 1
        },
        serializedName: "location",
        required: true,
        type: {
          name: "String"
        }
      },
      tags: {
        serializedName: "tags",
        type: {
          name: "Dictionary",
          value: { type: { name: "String" } }
        }
      },
      properties: {
        serializedName: "properties",
        type: {
          name: "Composite",
          className: "VaultModelProperties"
        }
      },
      id: {
        serializedName: "id",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      name: {
        serializedName: "name",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      type: {
        serializedName: "type",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      systemData: {
        serializedName: "systemData",
        type: {
          name: "Composite",
          className: "VaultModelSystemData"
        }
      }
    }
  }
};

export const VaultModelProperties: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "VaultModelProperties",
    modelProperties: {
      provisioningState: {
        serializedName: "provisioningState",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      serviceResourceId: {
        serializedName: "serviceResourceId",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      vaultType: {
        serializedName: "vaultType",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const VaultModelUpdate: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "VaultModelUpdate",
    modelProperties: {
      tags: {
        serializedName: "tags",
        type: {
          name: "Dictionary",
          value: { type: { name: "String" } }
        }
      },
      properties: {
        serializedName: "properties",
        type: {
          name: "Composite",
          className: "VaultModelProperties"
        }
      },
      id: {
        serializedName: "id",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      name: {
        serializedName: "name",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      type: {
        serializedName: "type",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      systemData: {
        serializedName: "systemData",
        type: {
          name: "Composite",
          className: "VaultModelUpdateSystemData"
        }
      }
    }
  }
};

export const VaultModelCollection: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "VaultModelCollection",
    modelProperties: {
      value: {
        serializedName: "value",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "VaultModel"
            }
          }
        }
      },
      nextLink: {
        serializedName: "nextLink",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const WorkflowModel: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "WorkflowModel",
    modelProperties: {
      properties: {
        serializedName: "properties",
        type: {
          name: "Composite",
          className: "WorkflowModelProperties"
        }
      },
      id: {
        serializedName: "id",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      name: {
        serializedName: "name",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      type: {
        serializedName: "type",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      systemData: {
        serializedName: "systemData",
        type: {
          name: "Composite",
          className: "WorkflowModelSystemData"
        }
      }
    }
  }
};

export const WorkflowModelProperties: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "WorkflowModelProperties",
    modelProperties: {
      displayName: {
        serializedName: "displayName",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      state: {
        serializedName: "state",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      startTime: {
        serializedName: "startTime",
        readOnly: true,
        type: {
          name: "DateTime"
        }
      },
      endTime: {
        serializedName: "endTime",
        readOnly: true,
        type: {
          name: "DateTime"
        }
      },
      objectId: {
        serializedName: "objectId",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      objectName: {
        serializedName: "objectName",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      objectInternalId: {
        serializedName: "objectInternalId",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      objectInternalName: {
        serializedName: "objectInternalName",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      objectType: {
        serializedName: "objectType",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      replicationProviderId: {
        serializedName: "replicationProviderId",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      sourceFabricProviderId: {
        serializedName: "sourceFabricProviderId",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      targetFabricProviderId: {
        serializedName: "targetFabricProviderId",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      allowedActions: {
        serializedName: "allowedActions",
        readOnly: true,
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "String"
            }
          }
        }
      },
      activityId: {
        serializedName: "activityId",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      tasks: {
        serializedName: "tasks",
        readOnly: true,
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "TaskModel"
            }
          }
        }
      },
      errors: {
        serializedName: "errors",
        readOnly: true,
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "ErrorModel"
            }
          }
        }
      },
      customProperties: {
        serializedName: "customProperties",
        type: {
          name: "Composite",
          className: "WorkflowModelCustomProperties"
        }
      }
    }
  }
};

export const TaskModel: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "TaskModel",
    modelProperties: {
      taskName: {
        serializedName: "taskName",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      state: {
        serializedName: "state",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      startTime: {
        serializedName: "startTime",
        readOnly: true,
        type: {
          name: "DateTime"
        }
      },
      endTime: {
        serializedName: "endTime",
        readOnly: true,
        type: {
          name: "DateTime"
        }
      },
      customProperties: {
        serializedName: "customProperties",
        type: {
          name: "Composite",
          className: "TaskModelCustomProperties"
        }
      },
      childrenWorkflows: {
        serializedName: "childrenWorkflows",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "WorkflowModel"
            }
          }
        }
      }
    }
  }
};

export const TaskModelCustomProperties: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "TaskModelCustomProperties",
    modelProperties: {
      instanceType: {
        constraints: {
          MinLength: 1
        },
        serializedName: "instanceType",
        required: true,
        type: {
          name: "String"
        }
      }
    }
  }
};

export const ErrorModel: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "ErrorModel",
    modelProperties: {
      code: {
        serializedName: "code",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      type: {
        serializedName: "type",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      severity: {
        serializedName: "severity",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      creationTime: {
        serializedName: "creationTime",
        readOnly: true,
        type: {
          name: "DateTime"
        }
      },
      message: {
        serializedName: "message",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      causes: {
        serializedName: "causes",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      recommendation: {
        serializedName: "recommendation",
        readOnly: true,
        type: {
          name: "String"
        }
      }
    }
  }
};

export const WorkflowModelCustomProperties: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "WorkflowModelCustomProperties",
    uberParent: "WorkflowModelCustomProperties",
    polymorphicDiscriminator: {
      serializedName: "instanceType",
      clientName: "instanceType"
    },
    modelProperties: {
      instanceType: {
        constraints: {
          MinLength: 1
        },
        serializedName: "instanceType",
        required: true,
        type: {
          name: "String"
        }
      },
      affectedObjectDetails: {
        serializedName: "affectedObjectDetails",
        readOnly: true,
        type: {
          name: "Dictionary",
          value: { type: { name: "String" } }
        }
      }
    }
  }
};

export const WorkflowModelCollection: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "WorkflowModelCollection",
    modelProperties: {
      value: {
        serializedName: "value",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "WorkflowModel"
            }
          }
        }
      },
      nextLink: {
        serializedName: "nextLink",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const AzStackHCIClusterProperties: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "AzStackHCIClusterProperties",
    modelProperties: {
      clusterName: {
        constraints: {
          MinLength: 1
        },
        serializedName: "clusterName",
        required: true,
        type: {
          name: "String"
        }
      },
      resourceName: {
        constraints: {
          MinLength: 1
        },
        serializedName: "resourceName",
        required: true,
        type: {
          name: "String"
        }
      },
      storageAccountName: {
        constraints: {
          MinLength: 1
        },
        serializedName: "storageAccountName",
        required: true,
        type: {
          name: "String"
        }
      },
      storageContainers: {
        serializedName: "storageContainers",
        required: true,
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "StorageContainerProperties"
            }
          }
        }
      }
    }
  }
};

export const StorageContainerProperties: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "StorageContainerProperties",
    modelProperties: {
      name: {
        constraints: {
          MinLength: 1
        },
        serializedName: "name",
        required: true,
        type: {
          name: "String"
        }
      },
      clusterSharedVolumePath: {
        constraints: {
          MinLength: 1
        },
        serializedName: "clusterSharedVolumePath",
        required: true,
        type: {
          name: "String"
        }
      }
    }
  }
};

export const FailoverProtectedItemProperties: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "FailoverProtectedItemProperties",
    modelProperties: {
      protectedItemName: {
        serializedName: "protectedItemName",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      vmName: {
        serializedName: "vmName",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      testVmName: {
        serializedName: "testVmName",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      recoveryPointId: {
        serializedName: "recoveryPointId",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      recoveryPointTime: {
        serializedName: "recoveryPointTime",
        readOnly: true,
        type: {
          name: "DateTime"
        }
      },
      networkName: {
        serializedName: "networkName",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      subnet: {
        serializedName: "subnet",
        readOnly: true,
        type: {
          name: "String"
        }
      }
    }
  }
};

export const HyperVToAzStackHCIDiskInput: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "HyperVToAzStackHCIDiskInput",
    modelProperties: {
      diskId: {
        constraints: {
          MinLength: 1
        },
        serializedName: "diskId",
        required: true,
        type: {
          name: "String"
        }
      },
      storageContainerId: {
        serializedName: "storageContainerId",
        type: {
          name: "String"
        }
      },
      isDynamic: {
        serializedName: "isDynamic",
        type: {
          name: "Boolean"
        }
      },
      diskSizeGB: {
        serializedName: "diskSizeGB",
        required: true,
        type: {
          name: "Number"
        }
      },
      diskFileFormat: {
        constraints: {
          MinLength: 1
        },
        serializedName: "diskFileFormat",
        required: true,
        type: {
          name: "String"
        }
      },
      isOsDisk: {
        serializedName: "isOsDisk",
        required: true,
        type: {
          name: "Boolean"
        }
      }
    }
  }
};

export const HyperVToAzStackHCINicInput: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "HyperVToAzStackHCINicInput",
    modelProperties: {
      nicId: {
        constraints: {
          MinLength: 1
        },
        serializedName: "nicId",
        required: true,
        type: {
          name: "String"
        }
      },
      networkName: {
        serializedName: "networkName",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      targetNetworkId: {
        constraints: {
          MinLength: 1
        },
        serializedName: "targetNetworkId",
        required: true,
        type: {
          name: "String"
        }
      },
      testNetworkId: {
        constraints: {
          MinLength: 1
        },
        serializedName: "testNetworkId",
        required: true,
        type: {
          name: "String"
        }
      },
      selectionTypeForFailover: {
        serializedName: "selectionTypeForFailover",
        required: true,
        type: {
          name: "String"
        }
      }
    }
  }
};

export const HyperVToAzStackHCIProtectedDiskProperties: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "HyperVToAzStackHCIProtectedDiskProperties",
    modelProperties: {
      storageContainerId: {
        serializedName: "storageContainerId",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      storageContainerLocalPath: {
        serializedName: "storageContainerLocalPath",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      sourceDiskId: {
        serializedName: "sourceDiskId",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      sourceDiskName: {
        serializedName: "sourceDiskName",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      seedDiskName: {
        serializedName: "seedDiskName",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      testMigrateDiskName: {
        serializedName: "testMigrateDiskName",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      migrateDiskName: {
        serializedName: "migrateDiskName",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      isOsDisk: {
        serializedName: "isOsDisk",
        readOnly: true,
        type: {
          name: "Boolean"
        }
      },
      capacityInBytes: {
        serializedName: "capacityInBytes",
        readOnly: true,
        type: {
          name: "Number"
        }
      },
      isDynamic: {
        serializedName: "isDynamic",
        readOnly: true,
        type: {
          name: "Boolean"
        }
      },
      diskType: {
        serializedName: "diskType",
        readOnly: true,
        type: {
          name: "String"
        }
      }
    }
  }
};

export const ProtectedItemDynamicMemoryConfig: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "ProtectedItemDynamicMemoryConfig",
    modelProperties: {
      maximumMemoryInMegaBytes: {
        serializedName: "maximumMemoryInMegaBytes",
        required: true,
        type: {
          name: "Number"
        }
      },
      minimumMemoryInMegaBytes: {
        serializedName: "minimumMemoryInMegaBytes",
        required: true,
        type: {
          name: "Number"
        }
      },
      targetMemoryBufferPercentage: {
        serializedName: "targetMemoryBufferPercentage",
        required: true,
        type: {
          name: "Number"
        }
      }
    }
  }
};

export const HyperVToAzStackHCIProtectedNicProperties: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "HyperVToAzStackHCIProtectedNicProperties",
    modelProperties: {
      nicId: {
        serializedName: "nicId",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      macAddress: {
        serializedName: "macAddress",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      networkName: {
        serializedName: "networkName",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      targetNetworkId: {
        serializedName: "targetNetworkId",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      testNetworkId: {
        serializedName: "testNetworkId",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      selectionTypeForFailover: {
        serializedName: "selectionTypeForFailover",
        readOnly: true,
        type: {
          name: "String"
        }
      }
    }
  }
};

export const OperationModel: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "OperationModel",
    modelProperties: {
      name: {
        serializedName: "name",
        type: {
          name: "String"
        }
      },
      isDataAction: {
        serializedName: "isDataAction",
        type: {
          name: "Boolean"
        }
      },
      origin: {
        serializedName: "origin",
        type: {
          name: "String"
        }
      },
      display: {
        serializedName: "display",
        type: {
          name: "Composite",
          className: "OperationModelProperties"
        }
      }
    }
  }
};

export const OperationModelProperties: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "OperationModelProperties",
    modelProperties: {
      provider: {
        serializedName: "provider",
        type: {
          name: "String"
        }
      },
      resource: {
        serializedName: "resource",
        type: {
          name: "String"
        }
      },
      operation: {
        serializedName: "operation",
        type: {
          name: "String"
        }
      },
      description: {
        serializedName: "description",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const OperationModelCollection: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "OperationModelCollection",
    modelProperties: {
      value: {
        serializedName: "value",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "OperationModel"
            }
          }
        }
      },
      nextLink: {
        serializedName: "nextLink",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const VMwareToAzStackHCIDiskInput: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "VMwareToAzStackHCIDiskInput",
    modelProperties: {
      diskId: {
        constraints: {
          MinLength: 1
        },
        serializedName: "diskId",
        required: true,
        type: {
          name: "String"
        }
      },
      storageContainerId: {
        serializedName: "storageContainerId",
        type: {
          name: "String"
        }
      },
      isDynamic: {
        serializedName: "isDynamic",
        type: {
          name: "Boolean"
        }
      },
      diskSizeGB: {
        serializedName: "diskSizeGB",
        required: true,
        type: {
          name: "Number"
        }
      },
      diskFileFormat: {
        constraints: {
          MinLength: 1
        },
        serializedName: "diskFileFormat",
        required: true,
        type: {
          name: "String"
        }
      },
      isOsDisk: {
        serializedName: "isOsDisk",
        required: true,
        type: {
          name: "Boolean"
        }
      }
    }
  }
};

export const VMwareToAzStackHCINicInput: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "VMwareToAzStackHCINicInput",
    modelProperties: {
      nicId: {
        constraints: {
          MinLength: 1
        },
        serializedName: "nicId",
        required: true,
        type: {
          name: "String"
        }
      },
      label: {
        constraints: {
          MinLength: 1
        },
        serializedName: "label",
        required: true,
        type: {
          name: "String"
        }
      },
      networkName: {
        serializedName: "networkName",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      targetNetworkId: {
        constraints: {
          MinLength: 1
        },
        serializedName: "targetNetworkId",
        required: true,
        type: {
          name: "String"
        }
      },
      testNetworkId: {
        constraints: {
          MinLength: 1
        },
        serializedName: "testNetworkId",
        required: true,
        type: {
          name: "String"
        }
      },
      selectionTypeForFailover: {
        serializedName: "selectionTypeForFailover",
        required: true,
        type: {
          name: "String"
        }
      }
    }
  }
};

export const VMwareToAzStackHCIProtectedDiskProperties: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "VMwareToAzStackHCIProtectedDiskProperties",
    modelProperties: {
      storageContainerId: {
        serializedName: "storageContainerId",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      storageContainerLocalPath: {
        serializedName: "storageContainerLocalPath",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      sourceDiskId: {
        serializedName: "sourceDiskId",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      sourceDiskName: {
        serializedName: "sourceDiskName",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      seedDiskName: {
        serializedName: "seedDiskName",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      testMigrateDiskName: {
        serializedName: "testMigrateDiskName",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      migrateDiskName: {
        serializedName: "migrateDiskName",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      isOsDisk: {
        serializedName: "isOsDisk",
        readOnly: true,
        type: {
          name: "Boolean"
        }
      },
      capacityInBytes: {
        serializedName: "capacityInBytes",
        readOnly: true,
        type: {
          name: "Number"
        }
      },
      isDynamic: {
        serializedName: "isDynamic",
        readOnly: true,
        type: {
          name: "Boolean"
        }
      },
      diskType: {
        serializedName: "diskType",
        readOnly: true,
        type: {
          name: "String"
        }
      }
    }
  }
};

export const VMwareToAzStackHCIProtectedNicProperties: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "VMwareToAzStackHCIProtectedNicProperties",
    modelProperties: {
      nicId: {
        serializedName: "nicId",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      macAddress: {
        serializedName: "macAddress",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      label: {
        serializedName: "label",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      isPrimaryNic: {
        serializedName: "isPrimaryNic",
        type: {
          name: "Boolean"
        }
      },
      networkName: {
        serializedName: "networkName",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      targetNetworkId: {
        serializedName: "targetNetworkId",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      testNetworkId: {
        serializedName: "testNetworkId",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      selectionTypeForFailover: {
        serializedName: "selectionTypeForFailover",
        readOnly: true,
        type: {
          name: "String"
        }
      }
    }
  }
};

export const VMwareDraModelCustomProperties: coreClient.CompositeMapper = {
  serializedName: "VMware",
  type: {
    name: "Composite",
    className: "VMwareDraModelCustomProperties",
    uberParent: "DraModelCustomProperties",
    polymorphicDiscriminator:
      DraModelCustomProperties.type.polymorphicDiscriminator,
    modelProperties: {
      ...DraModelCustomProperties.type.modelProperties,
      biosId: {
        constraints: {
          MinLength: 1
        },
        serializedName: "biosId",
        required: true,
        type: {
          name: "String"
        }
      },
      marsAuthenticationIdentity: {
        serializedName: "marsAuthenticationIdentity",
        type: {
          name: "Composite",
          className: "IdentityModel"
        }
      }
    }
  }
};

export const DraModelSystemData: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "DraModelSystemData",
    modelProperties: {
      ...SystemDataModel.type.modelProperties
    }
  }
};

export const EmailConfigurationModelSystemData: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "EmailConfigurationModelSystemData",
    modelProperties: {
      ...SystemDataModel.type.modelProperties
    }
  }
};

export const EventModelSystemData: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "EventModelSystemData",
    modelProperties: {
      ...SystemDataModel.type.modelProperties
    }
  }
};

export const FabricModelSystemData: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "FabricModelSystemData",
    modelProperties: {
      ...SystemDataModel.type.modelProperties
    }
  }
};

export const FabricModelUpdateSystemData: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "FabricModelUpdateSystemData",
    modelProperties: {
      ...SystemDataModel.type.modelProperties
    }
  }
};

export const PolicyModelSystemData: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "PolicyModelSystemData",
    modelProperties: {
      ...SystemDataModel.type.modelProperties
    }
  }
};

export const ProtectedItemModelSystemData: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "ProtectedItemModelSystemData",
    modelProperties: {
      ...SystemDataModel.type.modelProperties
    }
  }
};

export const RecoveryPointModelSystemData: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "RecoveryPointModelSystemData",
    modelProperties: {
      ...SystemDataModel.type.modelProperties
    }
  }
};

export const ReplicationExtensionModelSystemData: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "ReplicationExtensionModelSystemData",
    modelProperties: {
      ...SystemDataModel.type.modelProperties
    }
  }
};

export const VaultModelSystemData: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "VaultModelSystemData",
    modelProperties: {
      ...SystemDataModel.type.modelProperties
    }
  }
};

export const VaultModelUpdateSystemData: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "VaultModelUpdateSystemData",
    modelProperties: {
      ...SystemDataModel.type.modelProperties
    }
  }
};

export const WorkflowModelSystemData: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "WorkflowModelSystemData",
    modelProperties: {
      ...SystemDataModel.type.modelProperties
    }
  }
};

export const HyperVToAzStackHCIEventModelCustomProperties: coreClient.CompositeMapper = {
  serializedName: "HyperVToAzStackHCI",
  type: {
    name: "Composite",
    className: "HyperVToAzStackHCIEventModelCustomProperties",
    uberParent: "EventModelCustomProperties",
    polymorphicDiscriminator:
      EventModelCustomProperties.type.polymorphicDiscriminator,
    modelProperties: {
      ...EventModelCustomProperties.type.modelProperties,
      eventSourceFriendlyName: {
        serializedName: "eventSourceFriendlyName",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      protectedItemFriendlyName: {
        serializedName: "protectedItemFriendlyName",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      sourceApplianceName: {
        serializedName: "sourceApplianceName",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      targetApplianceName: {
        serializedName: "targetApplianceName",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      serverType: {
        serializedName: "serverType",
        readOnly: true,
        type: {
          name: "String"
        }
      }
    }
  }
};

export const AzStackHCIFabricModelCustomProperties: coreClient.CompositeMapper = {
  serializedName: "AzStackHCI",
  type: {
    name: "Composite",
    className: "AzStackHCIFabricModelCustomProperties",
    uberParent: "FabricModelCustomProperties",
    polymorphicDiscriminator:
      FabricModelCustomProperties.type.polymorphicDiscriminator,
    modelProperties: {
      ...FabricModelCustomProperties.type.modelProperties,
      azStackHciSiteId: {
        constraints: {
          MinLength: 1
        },
        serializedName: "azStackHciSiteId",
        required: true,
        type: {
          name: "String"
        }
      },
      applianceName: {
        serializedName: "applianceName",
        readOnly: true,
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "String"
            }
          }
        }
      },
      cluster: {
        serializedName: "cluster",
        type: {
          name: "Composite",
          className: "AzStackHCIClusterProperties"
        }
      },
      fabricResourceId: {
        serializedName: "fabricResourceId",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      fabricContainerId: {
        serializedName: "fabricContainerId",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      migrationSolutionId: {
        constraints: {
          MinLength: 1
        },
        serializedName: "migrationSolutionId",
        required: true,
        type: {
          name: "String"
        }
      },
      migrationHubUri: {
        serializedName: "migrationHubUri",
        readOnly: true,
        type: {
          name: "String"
        }
      }
    }
  }
};

export const HyperVMigrateFabricModelCustomProperties: coreClient.CompositeMapper = {
  serializedName: "HyperVMigrate",
  type: {
    name: "Composite",
    className: "HyperVMigrateFabricModelCustomProperties",
    uberParent: "FabricModelCustomProperties",
    polymorphicDiscriminator:
      FabricModelCustomProperties.type.polymorphicDiscriminator,
    modelProperties: {
      ...FabricModelCustomProperties.type.modelProperties,
      hyperVSiteId: {
        constraints: {
          MinLength: 1
        },
        serializedName: "hyperVSiteId",
        required: true,
        type: {
          name: "String"
        }
      },
      fabricResourceId: {
        serializedName: "fabricResourceId",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      fabricContainerId: {
        serializedName: "fabricContainerId",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      migrationSolutionId: {
        constraints: {
          MinLength: 1
        },
        serializedName: "migrationSolutionId",
        required: true,
        type: {
          name: "String"
        }
      },
      migrationHubUri: {
        serializedName: "migrationHubUri",
        readOnly: true,
        type: {
          name: "String"
        }
      }
    }
  }
};

export const VMwareMigrateFabricModelCustomProperties: coreClient.CompositeMapper = {
  serializedName: "VMwareMigrate",
  type: {
    name: "Composite",
    className: "VMwareMigrateFabricModelCustomProperties",
    uberParent: "FabricModelCustomProperties",
    polymorphicDiscriminator:
      FabricModelCustomProperties.type.polymorphicDiscriminator,
    modelProperties: {
      ...FabricModelCustomProperties.type.modelProperties,
      vmwareSiteId: {
        constraints: {
          MinLength: 1
        },
        serializedName: "vmwareSiteId",
        required: true,
        type: {
          name: "String"
        }
      },
      migrationSolutionId: {
        constraints: {
          MinLength: 1
        },
        serializedName: "migrationSolutionId",
        required: true,
        type: {
          name: "String"
        }
      }
    }
  }
};

export const HyperVToAzStackHCIPolicyModelCustomProperties: coreClient.CompositeMapper = {
  serializedName: "HyperVToAzStackHCI",
  type: {
    name: "Composite",
    className: "HyperVToAzStackHCIPolicyModelCustomProperties",
    uberParent: "PolicyModelCustomProperties",
    polymorphicDiscriminator:
      PolicyModelCustomProperties.type.polymorphicDiscriminator,
    modelProperties: {
      ...PolicyModelCustomProperties.type.modelProperties,
      recoveryPointHistoryInMinutes: {
        serializedName: "recoveryPointHistoryInMinutes",
        required: true,
        type: {
          name: "Number"
        }
      },
      crashConsistentFrequencyInMinutes: {
        serializedName: "crashConsistentFrequencyInMinutes",
        required: true,
        type: {
          name: "Number"
        }
      },
      appConsistentFrequencyInMinutes: {
        serializedName: "appConsistentFrequencyInMinutes",
        required: true,
        type: {
          name: "Number"
        }
      }
    }
  }
};

export const VMwareToAzStackHCIPolicyModelCustomProperties: coreClient.CompositeMapper = {
  serializedName: "VMwareToAzStackHCI",
  type: {
    name: "Composite",
    className: "VMwareToAzStackHCIPolicyModelCustomProperties",
    uberParent: "PolicyModelCustomProperties",
    polymorphicDiscriminator:
      PolicyModelCustomProperties.type.polymorphicDiscriminator,
    modelProperties: {
      ...PolicyModelCustomProperties.type.modelProperties,
      recoveryPointHistoryInMinutes: {
        serializedName: "recoveryPointHistoryInMinutes",
        required: true,
        type: {
          name: "Number"
        }
      },
      crashConsistentFrequencyInMinutes: {
        serializedName: "crashConsistentFrequencyInMinutes",
        required: true,
        type: {
          name: "Number"
        }
      },
      appConsistentFrequencyInMinutes: {
        serializedName: "appConsistentFrequencyInMinutes",
        required: true,
        type: {
          name: "Number"
        }
      }
    }
  }
};

export const ProtectedItemModelPropertiesCurrentJob: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "ProtectedItemModelPropertiesCurrentJob",
    modelProperties: {
      ...ProtectedItemJobProperties.type.modelProperties
    }
  }
};

export const ProtectedItemModelPropertiesLastFailedEnableProtectionJob: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "ProtectedItemModelPropertiesLastFailedEnableProtectionJob",
    modelProperties: {
      ...ProtectedItemJobProperties.type.modelProperties
    }
  }
};

export const ProtectedItemModelPropertiesLastFailedPlannedFailoverJob: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "ProtectedItemModelPropertiesLastFailedPlannedFailoverJob",
    modelProperties: {
      ...ProtectedItemJobProperties.type.modelProperties
    }
  }
};

export const ProtectedItemModelPropertiesLastTestFailoverJob: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "ProtectedItemModelPropertiesLastTestFailoverJob",
    modelProperties: {
      ...ProtectedItemJobProperties.type.modelProperties
    }
  }
};

export const HyperVToAzStackHCIProtectedItemModelCustomProperties: coreClient.CompositeMapper = {
  serializedName: "HyperVToAzStackHCI",
  type: {
    name: "Composite",
    className: "HyperVToAzStackHCIProtectedItemModelCustomProperties",
    uberParent: "ProtectedItemModelCustomProperties",
    polymorphicDiscriminator:
      ProtectedItemModelCustomProperties.type.polymorphicDiscriminator,
    modelProperties: {
      ...ProtectedItemModelCustomProperties.type.modelProperties,
      activeLocation: {
        serializedName: "activeLocation",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      targetHciClusterId: {
        constraints: {
          MinLength: 1
        },
        serializedName: "targetHciClusterId",
        required: true,
        type: {
          name: "String"
        }
      },
      targetArcClusterCustomLocationId: {
        constraints: {
          MinLength: 1
        },
        serializedName: "targetArcClusterCustomLocationId",
        required: true,
        type: {
          name: "String"
        }
      },
      targetAzStackHciClusterName: {
        serializedName: "targetAzStackHciClusterName",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      fabricDiscoveryMachineId: {
        constraints: {
          MinLength: 1
        },
        serializedName: "fabricDiscoveryMachineId",
        required: true,
        type: {
          name: "String"
        }
      },
      disksToInclude: {
        constraints: {
          MinItems: 1
        },
        serializedName: "disksToInclude",
        required: true,
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "HyperVToAzStackHCIDiskInput"
            }
          }
        }
      },
      nicsToInclude: {
        constraints: {
          MinItems: 1
        },
        serializedName: "nicsToInclude",
        required: true,
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "HyperVToAzStackHCINicInput"
            }
          }
        }
      },
      sourceVmName: {
        serializedName: "sourceVmName",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      sourceCpuCores: {
        serializedName: "sourceCpuCores",
        readOnly: true,
        type: {
          name: "Number"
        }
      },
      sourceMemoryInMegaBytes: {
        serializedName: "sourceMemoryInMegaBytes",
        readOnly: true,
        type: {
          name: "Number"
        }
      },
      targetVmName: {
        serializedName: "targetVmName",
        type: {
          name: "String"
        }
      },
      targetResourceGroupId: {
        constraints: {
          MinLength: 1
        },
        serializedName: "targetResourceGroupId",
        required: true,
        type: {
          name: "String"
        }
      },
      storageContainerId: {
        constraints: {
          MinLength: 1
        },
        serializedName: "storageContainerId",
        required: true,
        type: {
          name: "String"
        }
      },
      hyperVGeneration: {
        constraints: {
          MinLength: 1
        },
        serializedName: "hyperVGeneration",
        required: true,
        type: {
          name: "String"
        }
      },
      targetNetworkId: {
        serializedName: "targetNetworkId",
        type: {
          name: "String"
        }
      },
      testNetworkId: {
        serializedName: "testNetworkId",
        type: {
          name: "String"
        }
      },
      targetCpuCores: {
        serializedName: "targetCpuCores",
        type: {
          name: "Number"
        }
      },
      isDynamicRam: {
        serializedName: "isDynamicRam",
        type: {
          name: "Boolean"
        }
      },
      dynamicMemoryConfig: {
        serializedName: "dynamicMemoryConfig",
        type: {
          name: "Composite",
          className: "ProtectedItemDynamicMemoryConfig"
        }
      },
      targetMemoryInMegaBytes: {
        serializedName: "targetMemoryInMegaBytes",
        type: {
          name: "Number"
        }
      },
      runAsAccountId: {
        constraints: {
          MinLength: 1
        },
        serializedName: "runAsAccountId",
        required: true,
        type: {
          name: "String"
        }
      },
      sourceDraName: {
        constraints: {
          MinLength: 1
        },
        serializedName: "sourceDraName",
        required: true,
        type: {
          name: "String"
        }
      },
      targetDraName: {
        constraints: {
          MinLength: 1
        },
        serializedName: "targetDraName",
        required: true,
        type: {
          name: "String"
        }
      },
      sourceApplianceName: {
        serializedName: "sourceApplianceName",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      targetApplianceName: {
        serializedName: "targetApplianceName",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      osType: {
        serializedName: "osType",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      osName: {
        serializedName: "osName",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      firmwareType: {
        serializedName: "firmwareType",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      targetLocation: {
        serializedName: "targetLocation",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      customLocationRegion: {
        constraints: {
          MinLength: 1
        },
        serializedName: "customLocationRegion",
        required: true,
        type: {
          name: "String"
        }
      },
      failoverRecoveryPointId: {
        serializedName: "failoverRecoveryPointId",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      lastRecoveryPointReceived: {
        serializedName: "lastRecoveryPointReceived",
        readOnly: true,
        type: {
          name: "DateTime"
        }
      },
      lastRecoveryPointId: {
        serializedName: "lastRecoveryPointId",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      initialReplicationProgressPercentage: {
        serializedName: "initialReplicationProgressPercentage",
        readOnly: true,
        type: {
          name: "Number"
        }
      },
      resyncProgressPercentage: {
        serializedName: "resyncProgressPercentage",
        readOnly: true,
        type: {
          name: "Number"
        }
      },
      protectedDisks: {
        serializedName: "protectedDisks",
        readOnly: true,
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "HyperVToAzStackHCIProtectedDiskProperties"
            }
          }
        }
      },
      protectedNics: {
        serializedName: "protectedNics",
        readOnly: true,
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "HyperVToAzStackHCIProtectedNicProperties"
            }
          }
        }
      },
      targetVmBiosId: {
        serializedName: "targetVmBiosId",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      lastReplicationUpdateTime: {
        serializedName: "lastReplicationUpdateTime",
        readOnly: true,
        type: {
          name: "DateTime"
        }
      }
    }
  }
};

export const VMwareToAzStackHCIProtectedItemModelCustomProperties: coreClient.CompositeMapper = {
  serializedName: "VMwareToAzStackHCI",
  type: {
    name: "Composite",
    className: "VMwareToAzStackHCIProtectedItemModelCustomProperties",
    uberParent: "ProtectedItemModelCustomProperties",
    polymorphicDiscriminator:
      ProtectedItemModelCustomProperties.type.polymorphicDiscriminator,
    modelProperties: {
      ...ProtectedItemModelCustomProperties.type.modelProperties,
      activeLocation: {
        serializedName: "activeLocation",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      targetHciClusterId: {
        constraints: {
          MinLength: 1
        },
        serializedName: "targetHciClusterId",
        required: true,
        type: {
          name: "String"
        }
      },
      targetArcClusterCustomLocationId: {
        constraints: {
          MinLength: 1
        },
        serializedName: "targetArcClusterCustomLocationId",
        required: true,
        type: {
          name: "String"
        }
      },
      targetAzStackHciClusterName: {
        serializedName: "targetAzStackHciClusterName",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      storageContainerId: {
        constraints: {
          MinLength: 1
        },
        serializedName: "storageContainerId",
        required: true,
        type: {
          name: "String"
        }
      },
      targetResourceGroupId: {
        constraints: {
          MinLength: 1
        },
        serializedName: "targetResourceGroupId",
        required: true,
        type: {
          name: "String"
        }
      },
      targetLocation: {
        serializedName: "targetLocation",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      customLocationRegion: {
        constraints: {
          MinLength: 1
        },
        serializedName: "customLocationRegion",
        required: true,
        type: {
          name: "String"
        }
      },
      disksToInclude: {
        constraints: {
          MinItems: 1
        },
        serializedName: "disksToInclude",
        required: true,
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "VMwareToAzStackHCIDiskInput"
            }
          }
        }
      },
      nicsToInclude: {
        constraints: {
          MinItems: 1
        },
        serializedName: "nicsToInclude",
        required: true,
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "VMwareToAzStackHCINicInput"
            }
          }
        }
      },
      protectedDisks: {
        serializedName: "protectedDisks",
        readOnly: true,
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "VMwareToAzStackHCIProtectedDiskProperties"
            }
          }
        }
      },
      protectedNics: {
        serializedName: "protectedNics",
        readOnly: true,
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "VMwareToAzStackHCIProtectedNicProperties"
            }
          }
        }
      },
      targetVmBiosId: {
        serializedName: "targetVmBiosId",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      targetVmName: {
        serializedName: "targetVmName",
        type: {
          name: "String"
        }
      },
      hyperVGeneration: {
        constraints: {
          MinLength: 1
        },
        serializedName: "hyperVGeneration",
        required: true,
        type: {
          name: "String"
        }
      },
      targetNetworkId: {
        serializedName: "targetNetworkId",
        type: {
          name: "String"
        }
      },
      testNetworkId: {
        serializedName: "testNetworkId",
        type: {
          name: "String"
        }
      },
      targetCpuCores: {
        serializedName: "targetCpuCores",
        type: {
          name: "Number"
        }
      },
      isDynamicRam: {
        serializedName: "isDynamicRam",
        type: {
          name: "Boolean"
        }
      },
      dynamicMemoryConfig: {
        serializedName: "dynamicMemoryConfig",
        type: {
          name: "Composite",
          className: "ProtectedItemDynamicMemoryConfig"
        }
      },
      targetMemoryInMegaBytes: {
        serializedName: "targetMemoryInMegaBytes",
        type: {
          name: "Number"
        }
      },
      osType: {
        serializedName: "osType",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      osName: {
        serializedName: "osName",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      firmwareType: {
        serializedName: "firmwareType",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      fabricDiscoveryMachineId: {
        constraints: {
          MinLength: 1
        },
        serializedName: "fabricDiscoveryMachineId",
        required: true,
        type: {
          name: "String"
        }
      },
      sourceVmName: {
        serializedName: "sourceVmName",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      sourceCpuCores: {
        serializedName: "sourceCpuCores",
        readOnly: true,
        type: {
          name: "Number"
        }
      },
      sourceMemoryInMegaBytes: {
        serializedName: "sourceMemoryInMegaBytes",
        readOnly: true,
        type: {
          name: "Number"
        }
      },
      runAsAccountId: {
        constraints: {
          MinLength: 1
        },
        serializedName: "runAsAccountId",
        required: true,
        type: {
          name: "String"
        }
      },
      sourceDraName: {
        constraints: {
          MinLength: 1
        },
        serializedName: "sourceDraName",
        required: true,
        type: {
          name: "String"
        }
      },
      targetDraName: {
        constraints: {
          MinLength: 1
        },
        serializedName: "targetDraName",
        required: true,
        type: {
          name: "String"
        }
      },
      sourceApplianceName: {
        serializedName: "sourceApplianceName",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      targetApplianceName: {
        serializedName: "targetApplianceName",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      failoverRecoveryPointId: {
        serializedName: "failoverRecoveryPointId",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      lastRecoveryPointReceived: {
        serializedName: "lastRecoveryPointReceived",
        readOnly: true,
        type: {
          name: "DateTime"
        }
      },
      lastRecoveryPointId: {
        serializedName: "lastRecoveryPointId",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      initialReplicationProgressPercentage: {
        serializedName: "initialReplicationProgressPercentage",
        readOnly: true,
        type: {
          name: "Number"
        }
      },
      migrationProgressPercentage: {
        serializedName: "migrationProgressPercentage",
        readOnly: true,
        type: {
          name: "Number"
        }
      },
      resumeProgressPercentage: {
        serializedName: "resumeProgressPercentage",
        readOnly: true,
        type: {
          name: "Number"
        }
      },
      resyncProgressPercentage: {
        serializedName: "resyncProgressPercentage",
        readOnly: true,
        type: {
          name: "Number"
        }
      },
      resyncRetryCount: {
        serializedName: "resyncRetryCount",
        readOnly: true,
        type: {
          name: "Number"
        }
      },
      resyncRequired: {
        serializedName: "resyncRequired",
        readOnly: true,
        type: {
          name: "Boolean"
        }
      },
      resyncState: {
        serializedName: "resyncState",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      performAutoResync: {
        serializedName: "performAutoResync",
        type: {
          name: "Boolean"
        }
      },
      resumeRetryCount: {
        serializedName: "resumeRetryCount",
        readOnly: true,
        type: {
          name: "Number"
        }
      },
      lastReplicationUpdateTime: {
        serializedName: "lastReplicationUpdateTime",
        readOnly: true,
        type: {
          name: "DateTime"
        }
      }
    }
  }
};

export const HyperVToAzStackHCIPlannedFailoverModelCustomProperties: coreClient.CompositeMapper = {
  serializedName: "HyperVToAzStackHCI",
  type: {
    name: "Composite",
    className: "HyperVToAzStackHCIPlannedFailoverModelCustomProperties",
    uberParent: "PlannedFailoverModelCustomProperties",
    polymorphicDiscriminator:
      PlannedFailoverModelCustomProperties.type.polymorphicDiscriminator,
    modelProperties: {
      ...PlannedFailoverModelCustomProperties.type.modelProperties,
      shutdownSourceVM: {
        serializedName: "shutdownSourceVM",
        required: true,
        type: {
          name: "Boolean"
        }
      }
    }
  }
};

export const VMwareToAzStackHCIPlannedFailoverModelCustomProperties: coreClient.CompositeMapper = {
  serializedName: "VMwareToAzStackHCI",
  type: {
    name: "Composite",
    className: "VMwareToAzStackHCIPlannedFailoverModelCustomProperties",
    uberParent: "PlannedFailoverModelCustomProperties",
    polymorphicDiscriminator:
      PlannedFailoverModelCustomProperties.type.polymorphicDiscriminator,
    modelProperties: {
      ...PlannedFailoverModelCustomProperties.type.modelProperties,
      shutdownSourceVM: {
        serializedName: "shutdownSourceVM",
        required: true,
        type: {
          name: "Boolean"
        }
      }
    }
  }
};

export const HyperVToAzStackHCIRecoveryPointModelCustomProperties: coreClient.CompositeMapper = {
  serializedName: "HyperVToAzStackHCI",
  type: {
    name: "Composite",
    className: "HyperVToAzStackHCIRecoveryPointModelCustomProperties",
    uberParent: "RecoveryPointModelCustomProperties",
    polymorphicDiscriminator:
      RecoveryPointModelCustomProperties.type.polymorphicDiscriminator,
    modelProperties: {
      ...RecoveryPointModelCustomProperties.type.modelProperties,
      diskIds: {
        serializedName: "diskIds",
        readOnly: true,
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "String"
            }
          }
        }
      }
    }
  }
};

export const HyperVToAzStackHCIReplicationExtensionModelCustomProperties: coreClient.CompositeMapper = {
  serializedName: "HyperVToAzStackHCI",
  type: {
    name: "Composite",
    className: "HyperVToAzStackHCIReplicationExtensionModelCustomProperties",
    uberParent: "ReplicationExtensionModelCustomProperties",
    polymorphicDiscriminator:
      ReplicationExtensionModelCustomProperties.type.polymorphicDiscriminator,
    modelProperties: {
      ...ReplicationExtensionModelCustomProperties.type.modelProperties,
      hyperVFabricArmId: {
        constraints: {
          MinLength: 1
        },
        serializedName: "hyperVFabricArmId",
        required: true,
        type: {
          name: "String"
        }
      },
      hyperVSiteId: {
        serializedName: "hyperVSiteId",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      azStackHciFabricArmId: {
        constraints: {
          MinLength: 1
        },
        serializedName: "azStackHciFabricArmId",
        required: true,
        type: {
          name: "String"
        }
      },
      azStackHciSiteId: {
        serializedName: "azStackHciSiteId",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      storageAccountId: {
        serializedName: "storageAccountId",
        type: {
          name: "String"
        }
      },
      storageAccountSasSecretName: {
        serializedName: "storageAccountSasSecretName",
        type: {
          name: "String"
        }
      },
      asrServiceUri: {
        serializedName: "asrServiceUri",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      rcmServiceUri: {
        serializedName: "rcmServiceUri",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      gatewayServiceUri: {
        serializedName: "gatewayServiceUri",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      sourceGatewayServiceId: {
        serializedName: "sourceGatewayServiceId",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      targetGatewayServiceId: {
        serializedName: "targetGatewayServiceId",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      sourceStorageContainerName: {
        serializedName: "sourceStorageContainerName",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      targetStorageContainerName: {
        serializedName: "targetStorageContainerName",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      resourceLocation: {
        serializedName: "resourceLocation",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      subscriptionId: {
        serializedName: "subscriptionId",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      resourceGroup: {
        serializedName: "resourceGroup",
        readOnly: true,
        type: {
          name: "String"
        }
      }
    }
  }
};

export const VMwareToAzStackHCIReplicationExtensionModelCustomProperties: coreClient.CompositeMapper = {
  serializedName: "VMwareToAzStackHCI",
  type: {
    name: "Composite",
    className: "VMwareToAzStackHCIReplicationExtensionModelCustomProperties",
    uberParent: "ReplicationExtensionModelCustomProperties",
    polymorphicDiscriminator:
      ReplicationExtensionModelCustomProperties.type.polymorphicDiscriminator,
    modelProperties: {
      ...ReplicationExtensionModelCustomProperties.type.modelProperties,
      vmwareFabricArmId: {
        constraints: {
          MinLength: 1
        },
        serializedName: "vmwareFabricArmId",
        required: true,
        type: {
          name: "String"
        }
      },
      vmwareSiteId: {
        serializedName: "vmwareSiteId",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      azStackHciFabricArmId: {
        constraints: {
          MinLength: 1
        },
        serializedName: "azStackHciFabricArmId",
        required: true,
        type: {
          name: "String"
        }
      },
      azStackHciSiteId: {
        serializedName: "azStackHciSiteId",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      storageAccountId: {
        serializedName: "storageAccountId",
        type: {
          name: "String"
        }
      },
      storageAccountSasSecretName: {
        serializedName: "storageAccountSasSecretName",
        type: {
          name: "String"
        }
      },
      asrServiceUri: {
        serializedName: "asrServiceUri",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      rcmServiceUri: {
        serializedName: "rcmServiceUri",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      gatewayServiceUri: {
        serializedName: "gatewayServiceUri",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      sourceGatewayServiceId: {
        serializedName: "sourceGatewayServiceId",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      targetGatewayServiceId: {
        serializedName: "targetGatewayServiceId",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      sourceStorageContainerName: {
        serializedName: "sourceStorageContainerName",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      targetStorageContainerName: {
        serializedName: "targetStorageContainerName",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      resourceLocation: {
        serializedName: "resourceLocation",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      subscriptionId: {
        serializedName: "subscriptionId",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      resourceGroup: {
        serializedName: "resourceGroup",
        readOnly: true,
        type: {
          name: "String"
        }
      }
    }
  }
};

export const FailoverWorkflowModelCustomProperties: coreClient.CompositeMapper = {
  serializedName: "FailoverWorkflowDetails",
  type: {
    name: "Composite",
    className: "FailoverWorkflowModelCustomProperties",
    uberParent: "WorkflowModelCustomProperties",
    polymorphicDiscriminator:
      WorkflowModelCustomProperties.type.polymorphicDiscriminator,
    modelProperties: {
      ...WorkflowModelCustomProperties.type.modelProperties,
      protectedItemDetails: {
        serializedName: "protectedItemDetails",
        readOnly: true,
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "FailoverProtectedItemProperties"
            }
          }
        }
      }
    }
  }
};

export const TestFailoverCleanupWorkflowModelCustomProperties: coreClient.CompositeMapper = {
  serializedName: "TestFailoverCleanupWorkflowDetails",
  type: {
    name: "Composite",
    className: "TestFailoverCleanupWorkflowModelCustomProperties",
    uberParent: "WorkflowModelCustomProperties",
    polymorphicDiscriminator:
      WorkflowModelCustomProperties.type.polymorphicDiscriminator,
    modelProperties: {
      ...WorkflowModelCustomProperties.type.modelProperties,
      comments: {
        serializedName: "comments",
        readOnly: true,
        type: {
          name: "String"
        }
      }
    }
  }
};

export const TestFailoverWorkflowModelCustomProperties: coreClient.CompositeMapper = {
  serializedName: "TestFailoverWorkflowDetails",
  type: {
    name: "Composite",
    className: "TestFailoverWorkflowModelCustomProperties",
    uberParent: "WorkflowModelCustomProperties",
    polymorphicDiscriminator:
      WorkflowModelCustomProperties.type.polymorphicDiscriminator,
    modelProperties: {
      ...WorkflowModelCustomProperties.type.modelProperties,
      protectedItemDetails: {
        serializedName: "protectedItemDetails",
        readOnly: true,
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "FailoverProtectedItemProperties"
            }
          }
        }
      }
    }
  }
};

export const DraDeleteHeaders: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "DraDeleteHeaders",
    modelProperties: {
      azureAsyncOperation: {
        serializedName: "azure-asyncoperation",
        type: {
          name: "String"
        }
      },
      location: {
        serializedName: "location",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const FabricUpdateHeaders: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "FabricUpdateHeaders",
    modelProperties: {
      azureAsyncOperation: {
        serializedName: "azure-asyncoperation",
        type: {
          name: "String"
        }
      },
      location: {
        serializedName: "location",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const FabricDeleteHeaders: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "FabricDeleteHeaders",
    modelProperties: {
      azureAsyncOperation: {
        serializedName: "azure-asyncoperation",
        type: {
          name: "String"
        }
      },
      location: {
        serializedName: "location",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const PolicyDeleteHeaders: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "PolicyDeleteHeaders",
    modelProperties: {
      azureAsyncOperation: {
        serializedName: "azure-asyncoperation",
        type: {
          name: "String"
        }
      },
      location: {
        serializedName: "location",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const ProtectedItemDeleteHeaders: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "ProtectedItemDeleteHeaders",
    modelProperties: {
      azureAsyncOperation: {
        serializedName: "azure-asyncoperation",
        type: {
          name: "String"
        }
      },
      location: {
        serializedName: "location",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const ProtectedItemPlannedFailoverHeaders: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "ProtectedItemPlannedFailoverHeaders",
    modelProperties: {
      azureAsyncOperation: {
        serializedName: "azure-asyncoperation",
        type: {
          name: "String"
        }
      },
      location: {
        serializedName: "location",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const ReplicationExtensionDeleteHeaders: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "ReplicationExtensionDeleteHeaders",
    modelProperties: {
      azureAsyncOperation: {
        serializedName: "azure-asyncoperation",
        type: {
          name: "String"
        }
      },
      location: {
        serializedName: "location",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const VaultUpdateHeaders: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "VaultUpdateHeaders",
    modelProperties: {
      azureAsyncOperation: {
        serializedName: "azure-asyncoperation",
        type: {
          name: "String"
        }
      },
      location: {
        serializedName: "location",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const VaultDeleteHeaders: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "VaultDeleteHeaders",
    modelProperties: {
      azureAsyncOperation: {
        serializedName: "azure-asyncoperation",
        type: {
          name: "String"
        }
      },
      location: {
        serializedName: "location",
        type: {
          name: "String"
        }
      }
    }
  }
};

export let discriminators = {
  DraModelCustomProperties: DraModelCustomProperties,
  EventModelCustomProperties: EventModelCustomProperties,
  FabricModelCustomProperties: FabricModelCustomProperties,
  PolicyModelCustomProperties: PolicyModelCustomProperties,
  ProtectedItemModelCustomProperties: ProtectedItemModelCustomProperties,
  PlannedFailoverModelCustomProperties: PlannedFailoverModelCustomProperties,
  RecoveryPointModelCustomProperties: RecoveryPointModelCustomProperties,
  ReplicationExtensionModelCustomProperties: ReplicationExtensionModelCustomProperties,
  WorkflowModelCustomProperties: WorkflowModelCustomProperties,
  "DraModelCustomProperties.VMware": VMwareDraModelCustomProperties,
  "EventModelCustomProperties.HyperVToAzStackHCI": HyperVToAzStackHCIEventModelCustomProperties,
  "FabricModelCustomProperties.AzStackHCI": AzStackHCIFabricModelCustomProperties,
  "FabricModelCustomProperties.HyperVMigrate": HyperVMigrateFabricModelCustomProperties,
  "FabricModelCustomProperties.VMwareMigrate": VMwareMigrateFabricModelCustomProperties,
  "PolicyModelCustomProperties.HyperVToAzStackHCI": HyperVToAzStackHCIPolicyModelCustomProperties,
  "PolicyModelCustomProperties.VMwareToAzStackHCI": VMwareToAzStackHCIPolicyModelCustomProperties,
  "ProtectedItemModelCustomProperties.HyperVToAzStackHCI": HyperVToAzStackHCIProtectedItemModelCustomProperties,
  "ProtectedItemModelCustomProperties.VMwareToAzStackHCI": VMwareToAzStackHCIProtectedItemModelCustomProperties,
  "PlannedFailoverModelCustomProperties.HyperVToAzStackHCI": HyperVToAzStackHCIPlannedFailoverModelCustomProperties,
  "PlannedFailoverModelCustomProperties.VMwareToAzStackHCI": VMwareToAzStackHCIPlannedFailoverModelCustomProperties,
  "RecoveryPointModelCustomProperties.HyperVToAzStackHCI": HyperVToAzStackHCIRecoveryPointModelCustomProperties,
  "ReplicationExtensionModelCustomProperties.HyperVToAzStackHCI": HyperVToAzStackHCIReplicationExtensionModelCustomProperties,
  "ReplicationExtensionModelCustomProperties.VMwareToAzStackHCI": VMwareToAzStackHCIReplicationExtensionModelCustomProperties,
  "WorkflowModelCustomProperties.FailoverWorkflowDetails": FailoverWorkflowModelCustomProperties,
  "WorkflowModelCustomProperties.TestFailoverCleanupWorkflowDetails": TestFailoverCleanupWorkflowModelCustomProperties,
  "WorkflowModelCustomProperties.TestFailoverWorkflowDetails": TestFailoverWorkflowModelCustomProperties
};
