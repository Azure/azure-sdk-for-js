{"version":3,"file":"dtmiConventions.js","sourceRoot":"","sources":["../../src/dtmiConventions.ts"],"names":[],"mappings":"AAAA,gDAAgD;AAChD,qGAAqG;AAErG,YAAY,CAAA;;;AAEZ,SAAgB,WAAW,CAAE,IAAY;IACvC,IAAI,IAAI,EAAE;QACR,MAAM,EAAE,GAAG,yGAAyG,CAAA;QACpH,OAAO,EAAE,CAAC,IAAI,CAAC,IAAI,CAAC,CAAA,CAAC,2DAA2D;KACjF;IACD,OAAO,KAAK,CAAA,CAAC,gCAAgC;AAC/C,CAAC;AAND,kCAMC;AAED,SAAgB,UAAU,CAAE,IAAY;IACtC,uEAAuE;IACvE,wEAAwE;IACxE,mDAAmD;IAEnD,IAAI,WAAW,CAAC,IAAI,CAAC,EAAE;QACrB,OAAO,GAAG,IAAI,CAAC,WAAW,EAAE,CAAC,OAAO,CAAC,KAAK,EAAE,GAAG,CAAC,CAAC,OAAO,CAAC,KAAK,EAAE,GAAG,CAAC,OAAO,CAAA;KAC5E;SAAM;QACL,MAAM,IAAI,KAAK,CAAC,+DAA+D,CAAC,CAAA;KACjF;AACH,CAAC;AAVD,gCAUC;AAED,SAAS,wBAAwB,CAAE,IAAY;IAC7C,MAAM,EAAE,GAAG,gBAAgB,CAAA;IAC3B,IAAI,IAAI,CAAC,MAAM,CAAC,EAAE,CAAC,KAAK,CAAC,CAAC,EAAE;QAC1B,OAAO,IAAI,CAAA;KACZ;SAAM;QACL,OAAO,WAAW,IAAI,EAAE,CAAA;KACzB;AACH,CAAC;AAED,SAAgB,mBAAmB,CAAE,IAAY,EAAE,QAAgB,EAAE,UAAqB;IACxF,MAAM,UAAU,GAAG,UAAU,CAAC,IAAI,CAAC,CAAA;IACnC,MAAM,iBAAiB,GAAG,QAAQ,CAAC,QAAQ,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,QAAQ,CAAC,CAAC,CAAC,GAAG,QAAQ,GAAG,CAAA;IAC5E,MAAM,WAAW,GAAG,wBAAwB,CAAC,iBAAiB,CAAC,CAAA;IAC/D,IAAI,UAAU,EAAE;QACd,OAAO,GAAG,WAAW,GAAG,UAAU,CAAC,OAAO,CAAC,OAAO,EAAE,eAAe,CAAC,EAAE,CAAA;KACvE;SAAM;QACL,OAAO,GAAG,WAAW,GAAG,UAAU,EAAE,CAAA;KACrC;AACH,CAAC;AATD,kDASC","sourcesContent":["// Copyright (c) Microsoft. All rights reserved.\r\n// Licensed under the MIT license. See LICENSE file in the project root for full license information.\r\n\r\n'use strict'\r\n\r\nexport function isValidDtmi (dtmi: string) {\r\n  if (dtmi) {\r\n    const re = /^dtmi:[A-Za-z](?:[A-Za-z0-9_]*[A-Za-z0-9])?(?::[A-Za-z](?:[A-Za-z0-9_]*[A-Za-z0-9])?)*;[1-9][0-9]{0,8}$/\r\n    return re.test(dtmi) // true if dtmi matches regular expression, false otherwise\r\n  }\r\n  return false // if not a string return false.\r\n}\r\n\r\nexport function dtmiToPath (dtmi: string) {\r\n  // presently this dtmi to path function does not return the path with a\r\n  // file format at the end, i.e. does not append .json or .expanded.json.\r\n  // that happens in the dtmiToQualifiedPath function\r\n\r\n  if (isValidDtmi(dtmi)) {\r\n    return `${dtmi.toLowerCase().replace(/:/gm, '/').replace(/;/gm, '-')}.json`\r\n  } else {\r\n    throw new Error('DTMI provided is invalid. Ensure it follows DTMI conventions.')\r\n  }\r\n}\r\n\r\nfunction ensureStartsWithProtocol (text: string) {\r\n  const re = /^http[s]?:\\/\\//\r\n  if (text.search(re) !== -1) {\r\n    return text\r\n  } else {\r\n    return `https://${text}`\r\n  }\r\n}\r\n\r\nexport function dtmiToQualifiedPath (dtmi: string, endpoint: string, isExpanded ?: boolean) {\r\n  const dtmiAsPath = dtmiToPath(dtmi)\r\n  const endpointWithSlash = endpoint.endsWith('/') ? endpoint : `${endpoint}/`\r\n  const urlEndpoint = ensureStartsWithProtocol(endpointWithSlash)\r\n  if (isExpanded) {\r\n    return `${urlEndpoint}${dtmiAsPath.replace(/json$/, 'expanded.json')}`\r\n  } else {\r\n    return `${urlEndpoint}${dtmiAsPath}`\r\n  }\r\n}\r\n"]}