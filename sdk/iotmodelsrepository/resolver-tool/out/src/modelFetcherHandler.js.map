{"version":3,"file":"modelFetcherHandler.js","sourceRoot":"","sources":["../../src/modelFetcherHandler.ts"],"names":[],"mappings":"AAAA,gDAAgD;AAChD,qGAAqG;AAErG,YAAY,CAAA;;;;AAEZ,+CAAwB;AACxB,iDAA0B;AAC1B,4EAAqD;AACrD,8EAAuD;AAEvD,SAAS,WAAW,CAAE,CAAS;IAC7B,IAAI,CAAC,CAAC,UAAU,CAAC,UAAU,CAAC,IAAI,CAAC,CAAC,UAAU,CAAC,SAAS,CAAC,EAAE;QACvD,OAAO,KAAK,CAAA;KACb;SAAM,IAAI,CAAC,CAAC,UAAU,CAAC,SAAS,CAAC,EAAE;QAClC,OAAO,IAAI,CAAA;KACZ;SAAM;QACL,IAAI;YACF,EAAE,CAAC,UAAU,CAAC,CAAC,CAAC,CAAA;YAChB,OAAO,IAAI,CAAA;SACZ;QAAC,WAAM;YACN,OAAO,KAAK,CAAA;SACb;KACF;AACH,CAAC;AAED,SAAsB,YAAY,CAAE,IAAY,EAAE,QAAgB,EAAE,mBAA4B,EAAE,eAAwB;;QACxH,IAAI,WAAW,CAAC,QAAQ,CAAC,EAAE;YACzB,MAAM,kBAAkB,GAAG,QAAQ,CAAC,QAAQ,CAAC,SAAS,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC,aAAa,CAAC,QAAQ,CAAC,CAAC,CAAC,CAAC,QAAQ,CAAA;YAChG,IAAI,eAAe,IAAI,mBAAmB,EAAE;gBAC1C,OAAO,aAAa,CAAC,gBAAgB,CAAC,IAAI,EAAE,kBAAkB,EAAE,eAAe,CAAC,CAAA;aACjF;iBAAM;gBACL,OAAO,CAAC,GAAG,CAAC,aAAa,IAAI,EAAE,CAAC,CAAA;gBAChC,OAAO,aAAa,CAAC,OAAO,CAAC,IAAI,EAAE,kBAAkB,EAAE,KAAK,CAAC,CAAA;aAC9D;SACF;aAAM;YACL,IAAI,eAAe,IAAI,mBAAmB,EAAE;gBAC1C,OAAO,cAAc,CAAC,gBAAgB,CAAC,IAAI,EAAE,QAAQ,EAAE,eAAe,CAAC,CAAA;aACxE;YACD,OAAO,CAAC,GAAG,CAAC,aAAa,IAAI,EAAE,CAAC,CAAA;YAChC,OAAO,cAAc,CAAC,OAAO,CAAC,IAAI,EAAE,QAAQ,EAAE,KAAK,CAAC,CAAA;SACrD;IACH,CAAC;CAAA;AAhBD,oCAgBC","sourcesContent":["// Copyright (c) Microsoft. All rights reserved.\r\n// Licensed under the MIT license. See LICENSE file in the project root for full license information.\r\n\r\n'use strict'\r\n\r\nimport * as fs from 'fs'\r\nimport * as url from 'url'\r\nimport * as localFetchers from './localModelFetchers'\r\nimport * as remoteFetchers from './remoteModelFetchers'\r\n\r\nfunction isLocalPath (p: string): boolean {\r\n  if (p.startsWith('https://') || p.startsWith('http://')) {\r\n    return false\r\n  } else if (p.startsWith('file://')) {\r\n    return true\r\n  } else {\r\n    try {\r\n      fs.accessSync(p)\r\n      return true\r\n    } catch {\r\n      return false\r\n    }\r\n  }\r\n}\r\n\r\nexport async function modelFetcher (dtmi: string, endpoint: string, resolveDependencies: boolean, tryFromExpanded: boolean): Promise<{ [dtmi: string]: JSON | Array<JSON> }> {\r\n  if (isLocalPath(endpoint)) {\r\n    const formattedDirectory = endpoint.includes('file://') ? url.fileURLToPath(endpoint) : endpoint\r\n    if (tryFromExpanded || resolveDependencies) {\r\n      return localFetchers.recursiveFetcher(dtmi, formattedDirectory, tryFromExpanded)\r\n    } else {\r\n      console.log(`Fetching: ${dtmi}`)\r\n      return localFetchers.fetcher(dtmi, formattedDirectory, false)\r\n    }\r\n  } else {\r\n    if (tryFromExpanded || resolveDependencies) {\r\n      return remoteFetchers.recursiveFetcher(dtmi, endpoint, tryFromExpanded)\r\n    }\r\n    console.log(`Fetching: ${dtmi}`)\r\n    return remoteFetchers.fetcher(dtmi, endpoint, false)\r\n  }\r\n}\r\n"]}