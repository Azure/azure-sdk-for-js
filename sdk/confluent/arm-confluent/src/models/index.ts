/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */

import * as coreClient from "@azure/core-client";

/** Response of a list operation. */
export interface ConfluentAgreementResourceListResponse {
  /** Results of a list operation. */
  value?: ConfluentAgreementResource[];
  /** Link to the next set of results, if any. */
  nextLink?: string;
}

/** Agreement Terms definition */
export interface ConfluentAgreementResource {
  /**
   * The ARM id of the resource.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly id?: string;
  /**
   * The name of the agreement.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly name?: string;
  /**
   * The type of the agreement.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly type?: string;
  /**
   * Metadata pertaining to creation and last modification of the resource
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly systemData?: SystemData;
  /** Publisher identifier string. */
  publisher?: string;
  /** Product identifier string. */
  product?: string;
  /** Plan identifier string. */
  plan?: string;
  /** Link to HTML with Microsoft and Publisher terms. */
  licenseTextLink?: string;
  /** Link to the privacy policy of the publisher. */
  privacyPolicyLink?: string;
  /** Date and time in UTC of when the terms were accepted. This is empty if Accepted is false. */
  retrieveDatetime?: Date;
  /** Terms signature. */
  signature?: string;
  /** If any version of the terms have been accepted, otherwise false. */
  accepted?: boolean;
}

/** Metadata pertaining to creation and last modification of the resource. */
export interface SystemData {
  /** The identity that created the resource. */
  createdBy?: string;
  /** The type of identity that created the resource. */
  createdByType?: CreatedByType;
  /** The timestamp of resource creation (UTC). */
  createdAt?: Date;
  /** The identity that last modified the resource. */
  lastModifiedBy?: string;
  /** The type of identity that last modified the resource. */
  lastModifiedByType?: CreatedByType;
  /** The timestamp of resource last modification (UTC) */
  lastModifiedAt?: Date;
}

/** Default error response for resource provider */
export interface ResourceProviderDefaultErrorResponse {
  /**
   * Response body of Error
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly error?: ErrorResponseBody;
}

/** Response body of Error */
export interface ErrorResponseBody {
  /**
   * Error code
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly code?: string;
  /**
   * Error message
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly message?: string;
  /**
   * Error target
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly target?: string;
  /**
   * Error detail
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly details?: ErrorResponseBody[];
}

/** Result of GET request to list Confluent operations. */
export interface OperationListResult {
  /** List of Confluent operations supported by the Microsoft.Confluent provider. */
  value?: OperationResult[];
  /** URL to get the next set of operation list results if there are any. */
  nextLink?: string;
}

/** An Confluent REST API operation. */
export interface OperationResult {
  /** Operation name: {provider}/{resource}/{operation} */
  name?: string;
  /** The object that represents the operation. */
  display?: OperationDisplay;
  /** Indicates whether the operation is a data action */
  isDataAction?: boolean;
}

/** The object that represents the operation. */
export interface OperationDisplay {
  /** Service provider: Microsoft.Confluent */
  provider?: string;
  /** Type on which the operation is performed, e.g., 'clusters'. */
  resource?: string;
  /** Operation type, e.g., read, write, delete, etc. */
  operation?: string;
  /** Description of the operation, e.g., 'Write confluent'. */
  description?: string;
}

/** The response of a list operation. */
export interface OrganizationResourceListResult {
  /** Result of a list operation. */
  value?: OrganizationResource[];
  /** Link to the next set of results, if any. */
  nextLink?: string;
}

/** Organization resource. */
export interface OrganizationResource {
  /**
   * The ARM id of the resource.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly id?: string;
  /**
   * The name of the resource.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly name?: string;
  /**
   * The type of the resource.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly type?: string;
  /**
   * Metadata pertaining to creation and last modification of the resource
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly systemData?: SystemData;
  /** Organization resource tags */
  tags?: { [propertyName: string]: string };
  /** Location of Organization resource */
  location?: string;
  /**
   * The creation time of the resource.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly createdTime?: Date;
  /**
   * Provision states for confluent RP
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly provisioningState?: ProvisionState;
  /**
   * Id of the Confluent organization.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly organizationId?: string;
  /**
   * SSO url for the Confluent organization.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly ssoUrl?: string;
  /** Confluent offer detail */
  offerDetail: OfferDetail;
  /** Subscriber detail */
  userDetail: UserDetail;
}

/** Confluent Offer detail */
export interface OfferDetail {
  /** Publisher Id */
  publisherId: string;
  /** Offer Id */
  id: string;
  /** Offer Plan Id */
  planId: string;
  /** Offer Plan Name */
  planName: string;
  /** Offer Plan Term unit */
  termUnit: string;
  /**
   * SaaS Offer Status
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly status?: SaaSOfferStatus;
}

/** Subscriber detail */
export interface UserDetail {
  /** First name */
  firstName?: string;
  /** Last name */
  lastName?: string;
  /** Email address */
  emailAddress: string;
}

/** Organization Resource update */
export interface OrganizationResourceUpdate {
  /** ARM resource tags */
  tags?: { [propertyName: string]: string };
}

/** Known values of {@link CreatedByType} that the service accepts. */
export enum KnownCreatedByType {
  User = "User",
  Application = "Application",
  ManagedIdentity = "ManagedIdentity",
  Key = "Key"
}

/**
 * Defines values for CreatedByType. \
 * {@link KnownCreatedByType} can be used interchangeably with CreatedByType,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **User** \
 * **Application** \
 * **ManagedIdentity** \
 * **Key**
 */
export type CreatedByType = string;

/** Known values of {@link ProvisionState} that the service accepts. */
export enum KnownProvisionState {
  Accepted = "Accepted",
  Creating = "Creating",
  Updating = "Updating",
  Deleting = "Deleting",
  Succeeded = "Succeeded",
  Failed = "Failed",
  Canceled = "Canceled",
  Deleted = "Deleted",
  NotSpecified = "NotSpecified"
}

/**
 * Defines values for ProvisionState. \
 * {@link KnownProvisionState} can be used interchangeably with ProvisionState,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **Accepted** \
 * **Creating** \
 * **Updating** \
 * **Deleting** \
 * **Succeeded** \
 * **Failed** \
 * **Canceled** \
 * **Deleted** \
 * **NotSpecified**
 */
export type ProvisionState = string;

/** Known values of {@link SaaSOfferStatus} that the service accepts. */
export enum KnownSaaSOfferStatus {
  Started = "Started",
  PendingFulfillmentStart = "PendingFulfillmentStart",
  InProgress = "InProgress",
  Subscribed = "Subscribed",
  Suspended = "Suspended",
  Reinstated = "Reinstated",
  Succeeded = "Succeeded",
  Failed = "Failed",
  Unsubscribed = "Unsubscribed",
  Updating = "Updating"
}

/**
 * Defines values for SaaSOfferStatus. \
 * {@link KnownSaaSOfferStatus} can be used interchangeably with SaaSOfferStatus,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **Started** \
 * **PendingFulfillmentStart** \
 * **InProgress** \
 * **Subscribed** \
 * **Suspended** \
 * **Reinstated** \
 * **Succeeded** \
 * **Failed** \
 * **Unsubscribed** \
 * **Updating**
 */
export type SaaSOfferStatus = string;

/** Optional parameters. */
export interface MarketplaceAgreementsListOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the list operation. */
export type MarketplaceAgreementsListResponse = ConfluentAgreementResourceListResponse;

/** Optional parameters. */
export interface MarketplaceAgreementsCreateOptionalParams
  extends coreClient.OperationOptions {
  /** Confluent Marketplace Agreement resource */
  body?: ConfluentAgreementResource;
}

/** Contains response data for the create operation. */
export type MarketplaceAgreementsCreateResponse = ConfluentAgreementResource;

/** Optional parameters. */
export interface MarketplaceAgreementsListNextOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the listNext operation. */
export type MarketplaceAgreementsListNextResponse = ConfluentAgreementResourceListResponse;

/** Optional parameters. */
export interface OrganizationOperationsListOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the list operation. */
export type OrganizationOperationsListResponse = OperationListResult;

/** Optional parameters. */
export interface OrganizationOperationsListNextOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the listNext operation. */
export type OrganizationOperationsListNextResponse = OperationListResult;

/** Optional parameters. */
export interface OrganizationListBySubscriptionOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the listBySubscription operation. */
export type OrganizationListBySubscriptionResponse = OrganizationResourceListResult;

/** Optional parameters. */
export interface OrganizationListByResourceGroupOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the listByResourceGroup operation. */
export type OrganizationListByResourceGroupResponse = OrganizationResourceListResult;

/** Optional parameters. */
export interface OrganizationGetOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the get operation. */
export type OrganizationGetResponse = OrganizationResource;

/** Optional parameters. */
export interface OrganizationCreateOptionalParams
  extends coreClient.OperationOptions {
  /** Organization resource model */
  body?: OrganizationResource;
  /** Delay to wait until next poll, in milliseconds. */
  updateIntervalInMs?: number;
  /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */
  resumeFrom?: string;
}

/** Contains response data for the create operation. */
export type OrganizationCreateResponse = OrganizationResource;

/** Optional parameters. */
export interface OrganizationUpdateOptionalParams
  extends coreClient.OperationOptions {
  /** Updated Organization resource */
  body?: OrganizationResourceUpdate;
}

/** Contains response data for the update operation. */
export type OrganizationUpdateResponse = OrganizationResource;

/** Optional parameters. */
export interface OrganizationDeleteOptionalParams
  extends coreClient.OperationOptions {
  /** Delay to wait until next poll, in milliseconds. */
  updateIntervalInMs?: number;
  /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */
  resumeFrom?: string;
}

/** Optional parameters. */
export interface OrganizationListBySubscriptionNextOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the listBySubscriptionNext operation. */
export type OrganizationListBySubscriptionNextResponse = OrganizationResourceListResult;

/** Optional parameters. */
export interface OrganizationListByResourceGroupNextOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the listByResourceGroupNext operation. */
export type OrganizationListByResourceGroupNextResponse = OrganizationResourceListResult;

/** Optional parameters. */
export interface ValidationsValidateOrganizationOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the validateOrganization operation. */
export type ValidationsValidateOrganizationResponse = OrganizationResource;

/** Optional parameters. */
export interface ConfluentManagementClientOptionalParams
  extends coreClient.ServiceClientOptions {
  /** server parameter */
  $host?: string;
  /** Api Version */
  apiVersion?: string;
  /** Overrides client endpoint. */
  endpoint?: string;
}
