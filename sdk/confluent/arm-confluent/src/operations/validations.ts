/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */

import { Validations } from "../operationsInterfaces";
import * as coreClient from "@azure/core-client";
import * as Mappers from "../models/mappers";
import * as Parameters from "../models/parameters";
import { ConfluentManagementClient } from "../confluentManagementClient";
import {
  OrganizationResource,
  ValidationsValidateOrganizationOptionalParams,
  ValidationsValidateOrganizationResponse
} from "../models";

/** Class containing Validations operations. */
export class ValidationsImpl implements Validations {
  private readonly client: ConfluentManagementClient;

  /**
   * Initialize a new instance of the class Validations class.
   * @param client Reference to the service client
   */
  constructor(client: ConfluentManagementClient) {
    this.client = client;
  }

  /**
   * Organization Validate proxy resource
   * @param resourceGroupName Resource group name
   * @param organizationName Organization resource name
   * @param body Organization resource model
   * @param options The options parameters.
   */
  validateOrganization(
    resourceGroupName: string,
    organizationName: string,
    body: OrganizationResource,
    options?: ValidationsValidateOrganizationOptionalParams
  ): Promise<ValidationsValidateOrganizationResponse> {
    return this.client.sendOperationRequest(
      { resourceGroupName, organizationName, body, options },
      validateOrganizationOperationSpec
    );
  }
}
// Operation Specifications
const serializer = coreClient.createSerializer(Mappers, /* isXml */ false);

const validateOrganizationOperationSpec: coreClient.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Confluent/validations/{organizationName}/orgvalidate",
  httpMethod: "POST",
  responses: {
    200: {
      bodyMapper: Mappers.OrganizationResource
    },
    default: {
      bodyMapper: Mappers.ResourceProviderDefaultErrorResponse
    }
  },
  requestBody: Parameters.body3,
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.organizationName
  ],
  headerParameters: [Parameters.accept, Parameters.contentType],
  mediaType: "json",
  serializer
};
