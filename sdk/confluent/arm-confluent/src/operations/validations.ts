/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is
 * regenerated.
 */

import * as msRest from "@azure/ms-rest-js";
import * as Models from "../models";
import * as Mappers from "../models/validationsMappers";
import * as Parameters from "../models/parameters";
import { ConfluentManagementClientContext } from "../confluentManagementClientContext";

/** Class representing a Validations. */
export class Validations {
  private readonly client: ConfluentManagementClientContext;

  /**
   * Create a Validations.
   * @param {ConfluentManagementClientContext} client Reference to the service client.
   */
  constructor(client: ConfluentManagementClientContext) {
    this.client = client;
  }

  /**
   * @summary Organization Validate proxy resource
   * @param resourceGroupName Resource group name
   * @param organizationName Organization resource name
   * @param body Organization resource model
   * @param [options] The optional parameters
   * @returns Promise<Models.ValidationsValidateOrganizationResponse>
   */
  validateOrganization(
    resourceGroupName: string,
    organizationName: string,
    body: Models.OrganizationResource,
    options?: msRest.RequestOptionsBase
  ): Promise<Models.ValidationsValidateOrganizationResponse>;
  /**
   * @param resourceGroupName Resource group name
   * @param organizationName Organization resource name
   * @param body Organization resource model
   * @param callback The callback
   */
  validateOrganization(
    resourceGroupName: string,
    organizationName: string,
    body: Models.OrganizationResource,
    callback: msRest.ServiceCallback<Models.OrganizationResource>
  ): void;
  /**
   * @param resourceGroupName Resource group name
   * @param organizationName Organization resource name
   * @param body Organization resource model
   * @param options The optional parameters
   * @param callback The callback
   */
  validateOrganization(
    resourceGroupName: string,
    organizationName: string,
    body: Models.OrganizationResource,
    options: msRest.RequestOptionsBase,
    callback: msRest.ServiceCallback<Models.OrganizationResource>
  ): void;
  validateOrganization(
    resourceGroupName: string,
    organizationName: string,
    body: Models.OrganizationResource,
    options?: msRest.RequestOptionsBase | msRest.ServiceCallback<Models.OrganizationResource>,
    callback?: msRest.ServiceCallback<Models.OrganizationResource>
  ): Promise<Models.ValidationsValidateOrganizationResponse> {
    return this.client.sendOperationRequest(
      {
        resourceGroupName,
        organizationName,
        body,
        options
      },
      validateOrganizationOperationSpec,
      callback
    ) as Promise<Models.ValidationsValidateOrganizationResponse>;
  }
}

// Operation Specifications
const serializer = new msRest.Serializer(Mappers);
const validateOrganizationOperationSpec: msRest.OperationSpec = {
  httpMethod: "POST",
  path:
    "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Confluent/validations/{organizationName}/orgvalidate",
  urlParameters: [
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.organizationName
  ],
  queryParameters: [Parameters.apiVersion],
  headerParameters: [Parameters.acceptLanguage],
  requestBody: {
    parameterPath: "body",
    mapper: {
      ...Mappers.OrganizationResource,
      required: true
    }
  },
  responses: {
    200: {
      bodyMapper: Mappers.OrganizationResource
    },
    default: {
      bodyMapper: Mappers.ResourceProviderDefaultErrorResponse
    }
  },
  serializer
};
