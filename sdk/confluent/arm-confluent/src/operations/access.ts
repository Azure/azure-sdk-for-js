/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */

import { Access } from "../operationsInterfaces";
import * as coreClient from "@azure/core-client";
import * as Mappers from "../models/mappers";
import * as Parameters from "../models/parameters";
import { ConfluentManagementClient } from "../confluentManagementClient";
import {
  ListAccessRequestModel,
  AccessListUsersOptionalParams,
  AccessListUsersResponse,
  AccessListServiceAccountsOptionalParams,
  AccessListServiceAccountsResponse,
  AccessListInvitationsOptionalParams,
  AccessListInvitationsResponse,
  AccessInviteUserAccountModel,
  AccessInviteUserOptionalParams,
  AccessInviteUserResponse,
  AccessListEnvironmentsOptionalParams,
  AccessListEnvironmentsResponse,
  AccessListClustersOptionalParams,
  AccessListClustersResponse,
  AccessListRoleBindingsOptionalParams,
  AccessListRoleBindingsResponse
} from "../models";

/** Class containing Access operations. */
export class AccessImpl implements Access {
  private readonly client: ConfluentManagementClient;

  /**
   * Initialize a new instance of the class Access class.
   * @param client Reference to the service client
   */
  constructor(client: ConfluentManagementClient) {
    this.client = client;
  }

  /**
   * Organization users details
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param organizationName Organization resource name
   * @param body List Access Request Model
   * @param options The options parameters.
   */
  listUsers(
    resourceGroupName: string,
    organizationName: string,
    body: ListAccessRequestModel,
    options?: AccessListUsersOptionalParams
  ): Promise<AccessListUsersResponse> {
    return this.client.sendOperationRequest(
      { resourceGroupName, organizationName, body, options },
      listUsersOperationSpec
    );
  }

  /**
   * Organization service accounts details
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param organizationName Organization resource name
   * @param body List Access Request Model
   * @param options The options parameters.
   */
  listServiceAccounts(
    resourceGroupName: string,
    organizationName: string,
    body: ListAccessRequestModel,
    options?: AccessListServiceAccountsOptionalParams
  ): Promise<AccessListServiceAccountsResponse> {
    return this.client.sendOperationRequest(
      { resourceGroupName, organizationName, body, options },
      listServiceAccountsOperationSpec
    );
  }

  /**
   * Organization accounts invitation details
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param organizationName Organization resource name
   * @param body List Access Request Model
   * @param options The options parameters.
   */
  listInvitations(
    resourceGroupName: string,
    organizationName: string,
    body: ListAccessRequestModel,
    options?: AccessListInvitationsOptionalParams
  ): Promise<AccessListInvitationsResponse> {
    return this.client.sendOperationRequest(
      { resourceGroupName, organizationName, body, options },
      listInvitationsOperationSpec
    );
  }

  /**
   * Invite user to the organization
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param organizationName Organization resource name
   * @param body Invite user account model
   * @param options The options parameters.
   */
  inviteUser(
    resourceGroupName: string,
    organizationName: string,
    body: AccessInviteUserAccountModel,
    options?: AccessInviteUserOptionalParams
  ): Promise<AccessInviteUserResponse> {
    return this.client.sendOperationRequest(
      { resourceGroupName, organizationName, body, options },
      inviteUserOperationSpec
    );
  }

  /**
   * Environment list of an organization
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param organizationName Organization resource name
   * @param body List Access Request Model
   * @param options The options parameters.
   */
  listEnvironments(
    resourceGroupName: string,
    organizationName: string,
    body: ListAccessRequestModel,
    options?: AccessListEnvironmentsOptionalParams
  ): Promise<AccessListEnvironmentsResponse> {
    return this.client.sendOperationRequest(
      { resourceGroupName, organizationName, body, options },
      listEnvironmentsOperationSpec
    );
  }

  /**
   * Cluster details
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param organizationName Organization resource name
   * @param body List Access Request Model
   * @param options The options parameters.
   */
  listClusters(
    resourceGroupName: string,
    organizationName: string,
    body: ListAccessRequestModel,
    options?: AccessListClustersOptionalParams
  ): Promise<AccessListClustersResponse> {
    return this.client.sendOperationRequest(
      { resourceGroupName, organizationName, body, options },
      listClustersOperationSpec
    );
  }

  /**
   * Organization role bindings
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param organizationName Organization resource name
   * @param body List Access Request Model
   * @param options The options parameters.
   */
  listRoleBindings(
    resourceGroupName: string,
    organizationName: string,
    body: ListAccessRequestModel,
    options?: AccessListRoleBindingsOptionalParams
  ): Promise<AccessListRoleBindingsResponse> {
    return this.client.sendOperationRequest(
      { resourceGroupName, organizationName, body, options },
      listRoleBindingsOperationSpec
    );
  }
}
// Operation Specifications
const serializer = coreClient.createSerializer(Mappers, /* isXml */ false);

const listUsersOperationSpec: coreClient.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Confluent/organizations/{organizationName}/access/default/listUsers",
  httpMethod: "POST",
  responses: {
    200: {
      bodyMapper: Mappers.AccessListUsersSuccessResponse
    },
    default: {
      bodyMapper: Mappers.ResourceProviderDefaultErrorResponse
    }
  },
  requestBody: Parameters.body4,
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.organizationName
  ],
  headerParameters: [Parameters.accept, Parameters.contentType],
  mediaType: "json",
  serializer
};
const listServiceAccountsOperationSpec: coreClient.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Confluent/organizations/{organizationName}/access/default/listServiceAccounts",
  httpMethod: "POST",
  responses: {
    200: {
      bodyMapper: Mappers.AccessListServiceAccountsSuccessResponse
    },
    default: {
      bodyMapper: Mappers.ResourceProviderDefaultErrorResponse
    }
  },
  requestBody: Parameters.body4,
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.organizationName
  ],
  headerParameters: [Parameters.accept, Parameters.contentType],
  mediaType: "json",
  serializer
};
const listInvitationsOperationSpec: coreClient.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Confluent/organizations/{organizationName}/access/default/listInvitations",
  httpMethod: "POST",
  responses: {
    200: {
      bodyMapper: Mappers.AccessListInvitationsSuccessResponse
    },
    default: {
      bodyMapper: Mappers.ResourceProviderDefaultErrorResponse
    }
  },
  requestBody: Parameters.body4,
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.organizationName
  ],
  headerParameters: [Parameters.accept, Parameters.contentType],
  mediaType: "json",
  serializer
};
const inviteUserOperationSpec: coreClient.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Confluent/organizations/{organizationName}/access/default/createInvitation",
  httpMethod: "POST",
  responses: {
    200: {
      bodyMapper: Mappers.InvitationRecord
    },
    default: {
      bodyMapper: Mappers.ResourceProviderDefaultErrorResponse
    }
  },
  requestBody: Parameters.body5,
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.organizationName
  ],
  headerParameters: [Parameters.accept, Parameters.contentType],
  mediaType: "json",
  serializer
};
const listEnvironmentsOperationSpec: coreClient.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Confluent/organizations/{organizationName}/access/default/listEnvironments",
  httpMethod: "POST",
  responses: {
    200: {
      bodyMapper: Mappers.AccessListEnvironmentsSuccessResponse
    },
    default: {
      bodyMapper: Mappers.ResourceProviderDefaultErrorResponse
    }
  },
  requestBody: Parameters.body4,
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.organizationName
  ],
  headerParameters: [Parameters.accept, Parameters.contentType],
  mediaType: "json",
  serializer
};
const listClustersOperationSpec: coreClient.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Confluent/organizations/{organizationName}/access/default/listClusters",
  httpMethod: "POST",
  responses: {
    200: {
      bodyMapper: Mappers.AccessListClusterSuccessResponse
    },
    default: {
      bodyMapper: Mappers.ResourceProviderDefaultErrorResponse
    }
  },
  requestBody: Parameters.body4,
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.organizationName
  ],
  headerParameters: [Parameters.accept, Parameters.contentType],
  mediaType: "json",
  serializer
};
const listRoleBindingsOperationSpec: coreClient.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Confluent/organizations/{organizationName}/access/default/listRoleBindings",
  httpMethod: "POST",
  responses: {
    200: {
      bodyMapper: Mappers.AccessListRoleBindingsSuccessResponse
    },
    default: {
      bodyMapper: Mappers.ResourceProviderDefaultErrorResponse
    }
  },
  requestBody: Parameters.body4,
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.organizationName
  ],
  headerParameters: [Parameters.accept, Parameters.contentType],
  mediaType: "json",
  serializer
};
