/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */

import { PagedAsyncIterableIterator } from "@azure/core-paging";
import { SimplePollerLike, OperationState } from "@azure/core-lro";
import {
  OrganizationResource,
  OrganizationListBySubscriptionOptionalParams,
  OrganizationListByResourceGroupOptionalParams,
  SCEnvironmentRecord,
  OrganizationListEnvironmentsOptionalParams,
  SCClusterRecord,
  OrganizationListClustersOptionalParams,
  SchemaRegistryClusterRecord,
  OrganizationListSchemaRegistryClustersOptionalParams,
  OrganizationGetOptionalParams,
  OrganizationGetResponse,
  OrganizationCreateOptionalParams,
  OrganizationCreateResponse,
  OrganizationUpdateOptionalParams,
  OrganizationUpdateResponse,
  OrganizationDeleteOptionalParams,
  OrganizationGetEnvironmentByIdOptionalParams,
  OrganizationGetEnvironmentByIdResponse,
  ListAccessRequestModel,
  OrganizationListRegionsOptionalParams,
  OrganizationListRegionsResponse,
  CreateAPIKeyModel,
  OrganizationCreateAPIKeyOptionalParams,
  OrganizationCreateAPIKeyResponse,
  OrganizationDeleteClusterAPIKeyOptionalParams,
  OrganizationGetClusterAPIKeyOptionalParams,
  OrganizationGetClusterAPIKeyResponse,
  OrganizationGetSchemaRegistryClusterByIdOptionalParams,
  OrganizationGetSchemaRegistryClusterByIdResponse,
  OrganizationGetClusterByIdOptionalParams,
  OrganizationGetClusterByIdResponse,
} from "../models";

/// <reference lib="esnext.asynciterable" />
/** Interface representing a Organization. */
export interface Organization {
  /**
   * List all organizations under the specified subscription.
   * @param options The options parameters.
   */
  listBySubscription(
    options?: OrganizationListBySubscriptionOptionalParams,
  ): PagedAsyncIterableIterator<OrganizationResource>;
  /**
   * List all Organizations under the specified resource group.
   * @param resourceGroupName Resource group name
   * @param options The options parameters.
   */
  listByResourceGroup(
    resourceGroupName: string,
    options?: OrganizationListByResourceGroupOptionalParams,
  ): PagedAsyncIterableIterator<OrganizationResource>;
  /**
   * Lists of all the environments in a organization
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param organizationName Organization resource name
   * @param options The options parameters.
   */
  listEnvironments(
    resourceGroupName: string,
    organizationName: string,
    options?: OrganizationListEnvironmentsOptionalParams,
  ): PagedAsyncIterableIterator<SCEnvironmentRecord>;
  /**
   * Lists of all the clusters in a environment
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param organizationName Organization resource name
   * @param environmentId Confluent environment id
   * @param options The options parameters.
   */
  listClusters(
    resourceGroupName: string,
    organizationName: string,
    environmentId: string,
    options?: OrganizationListClustersOptionalParams,
  ): PagedAsyncIterableIterator<SCClusterRecord>;
  /**
   * Get schema registry clusters
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param organizationName Organization resource name
   * @param environmentId Confluent environment id
   * @param options The options parameters.
   */
  listSchemaRegistryClusters(
    resourceGroupName: string,
    organizationName: string,
    environmentId: string,
    options?: OrganizationListSchemaRegistryClustersOptionalParams,
  ): PagedAsyncIterableIterator<SchemaRegistryClusterRecord>;
  /**
   * Get the properties of a specific Organization resource.
   * @param resourceGroupName Resource group name
   * @param organizationName Organization resource name
   * @param options The options parameters.
   */
  get(
    resourceGroupName: string,
    organizationName: string,
    options?: OrganizationGetOptionalParams,
  ): Promise<OrganizationGetResponse>;
  /**
   * Create Organization resource
   * @param resourceGroupName Resource group name
   * @param organizationName Organization resource name
   * @param options The options parameters.
   */
  beginCreate(
    resourceGroupName: string,
    organizationName: string,
    options?: OrganizationCreateOptionalParams,
  ): Promise<
    SimplePollerLike<
      OperationState<OrganizationCreateResponse>,
      OrganizationCreateResponse
    >
  >;
  /**
   * Create Organization resource
   * @param resourceGroupName Resource group name
   * @param organizationName Organization resource name
   * @param options The options parameters.
   */
  beginCreateAndWait(
    resourceGroupName: string,
    organizationName: string,
    options?: OrganizationCreateOptionalParams,
  ): Promise<OrganizationCreateResponse>;
  /**
   * Update Organization resource
   * @param resourceGroupName Resource group name
   * @param organizationName Organization resource name
   * @param options The options parameters.
   */
  update(
    resourceGroupName: string,
    organizationName: string,
    options?: OrganizationUpdateOptionalParams,
  ): Promise<OrganizationUpdateResponse>;
  /**
   * Delete Organization resource
   * @param resourceGroupName Resource group name
   * @param organizationName Organization resource name
   * @param options The options parameters.
   */
  beginDelete(
    resourceGroupName: string,
    organizationName: string,
    options?: OrganizationDeleteOptionalParams,
  ): Promise<SimplePollerLike<OperationState<void>, void>>;
  /**
   * Delete Organization resource
   * @param resourceGroupName Resource group name
   * @param organizationName Organization resource name
   * @param options The options parameters.
   */
  beginDeleteAndWait(
    resourceGroupName: string,
    organizationName: string,
    options?: OrganizationDeleteOptionalParams,
  ): Promise<void>;
  /**
   * Get Environment details by environment Id
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param organizationName Organization resource name
   * @param environmentId Confluent environment id
   * @param options The options parameters.
   */
  getEnvironmentById(
    resourceGroupName: string,
    organizationName: string,
    environmentId: string,
    options?: OrganizationGetEnvironmentByIdOptionalParams,
  ): Promise<OrganizationGetEnvironmentByIdResponse>;
  /**
   * cloud provider regions available for creating Schema Registry clusters.
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param organizationName Organization resource name
   * @param body List Access Request Model
   * @param options The options parameters.
   */
  listRegions(
    resourceGroupName: string,
    organizationName: string,
    body: ListAccessRequestModel,
    options?: OrganizationListRegionsOptionalParams,
  ): Promise<OrganizationListRegionsResponse>;
  /**
   * Creates API key for a schema registry Cluster ID or Kafka Cluster ID under a environment
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param organizationName Organization resource name
   * @param environmentId Confluent environment id
   * @param clusterId Confluent kafka or schema registry cluster id
   * @param body Request payload for get creating API Key for schema registry Cluster ID or Kafka Cluster
   *             ID under a environment
   * @param options The options parameters.
   */
  createAPIKey(
    resourceGroupName: string,
    organizationName: string,
    environmentId: string,
    clusterId: string,
    body: CreateAPIKeyModel,
    options?: OrganizationCreateAPIKeyOptionalParams,
  ): Promise<OrganizationCreateAPIKeyResponse>;
  /**
   * Deletes API key of a kafka or schema registry cluster
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param organizationName Organization resource name
   * @param apiKeyId Confluent API Key id
   * @param options The options parameters.
   */
  deleteClusterAPIKey(
    resourceGroupName: string,
    organizationName: string,
    apiKeyId: string,
    options?: OrganizationDeleteClusterAPIKeyOptionalParams,
  ): Promise<void>;
  /**
   * Get API key details of a kafka or schema registry cluster
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param organizationName Organization resource name
   * @param apiKeyId Confluent API Key id
   * @param options The options parameters.
   */
  getClusterAPIKey(
    resourceGroupName: string,
    organizationName: string,
    apiKeyId: string,
    options?: OrganizationGetClusterAPIKeyOptionalParams,
  ): Promise<OrganizationGetClusterAPIKeyResponse>;
  /**
   * Get schema registry cluster by Id
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param organizationName Organization resource name
   * @param environmentId Confluent environment id
   * @param clusterId Confluent kafka or schema registry cluster id
   * @param options The options parameters.
   */
  getSchemaRegistryClusterById(
    resourceGroupName: string,
    organizationName: string,
    environmentId: string,
    clusterId: string,
    options?: OrganizationGetSchemaRegistryClusterByIdOptionalParams,
  ): Promise<OrganizationGetSchemaRegistryClusterByIdResponse>;
  /**
   * Get cluster by Id
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param organizationName Organization resource name
   * @param environmentId Confluent environment id
   * @param clusterId Confluent kafka or schema registry cluster id
   * @param options The options parameters.
   */
  getClusterById(
    resourceGroupName: string,
    organizationName: string,
    environmentId: string,
    clusterId: string,
    options?: OrganizationGetClusterByIdOptionalParams,
  ): Promise<OrganizationGetClusterByIdResponse>;
}
