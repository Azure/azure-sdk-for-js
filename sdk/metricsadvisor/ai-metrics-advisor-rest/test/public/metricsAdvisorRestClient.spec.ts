/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */

import { Recorder } from "@azure-tools/test-recorder";
import { getYieldedValue } from "@azure/test-utils";
import { GeneratedClientLike } from "../../src/generated";
import { paginatePost } from "../../src/paginateHelper";
import { createRecorder, createClient } from "./util/recordedClient";


describe("MetricsAdvisorRestClient", () => {
  let recorder: Recorder;
  let client: GeneratedClientLike;

  beforeEach(async function () {
    recorder = createRecorder(this);
  });

  afterEach(async function () {
    await recorder.stop();
  });

  it("should get latest status by AAD auth", async function () {
    client = createClient(true);
    const res = await client.getActiveSeriesCount();
    console.log(res);
    // assert.equal(true, !!res);
  });

  it("should get latest status by Api Key auth", async function () {
    client = createClient(false);
    const res = await client.getActiveSeriesCount();
    console.log(res);
    // assert.equal(true, !!res);
  });

  it("should list all data feeds", async function () {
    client = createClient(true);
    const response = await client.listDataFeeds({
      queryParameters: {
        dataFeedName: "js-test-",
        $skip: 1,
        $maxpagesize: 1
      }
    });
    // console.log("init resp:", response);
    const iter = paginatePost(client, response);
    let result = getYieldedValue(await iter.next());
    // console.log("1", result)
    // assert.ok(result, "Expecting first data feed");
    result = getYieldedValue(await iter.next());
    console.log("2", result)
    // assert.ok(result.status, "Expecting second data feed");
    // Lof each farmer id
    // console.log(iter);
    // for await (const dataFeed of iter) {
    //   console.log("dataFeed");
    // }
  });
});
