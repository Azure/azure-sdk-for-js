/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */

import * as coreClient from "@azure/core-client";

export const UsageStats: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "UsageStats",
    modelProperties: {
      timestamp: {
        serializedName: "timestamp",
        readOnly: true,
        type: {
          name: "DateTime"
        }
      },
      activeSeriesCount: {
        serializedName: "activeSeriesCount",
        readOnly: true,
        type: {
          name: "Number"
        }
      },
      allSeriesCount: {
        serializedName: "allSeriesCount",
        readOnly: true,
        type: {
          name: "Number"
        }
      },
      metricsCount: {
        serializedName: "metricsCount",
        readOnly: true,
        type: {
          name: "Number"
        }
      },
      dataFeedCount: {
        serializedName: "dataFeedCount",
        readOnly: true,
        type: {
          name: "Number"
        }
      }
    }
  }
};

export const ErrorCode: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "ErrorCode",
    modelProperties: {
      message: {
        serializedName: "message",
        type: {
          name: "String"
        }
      },
      code: {
        serializedName: "code",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const AnomalyAlertingConfiguration: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "AnomalyAlertingConfiguration",
    modelProperties: {
      anomalyAlertingConfigurationId: {
        serializedName: "anomalyAlertingConfigurationId",
        readOnly: true,
        type: {
          name: "Uuid"
        }
      },
      name: {
        serializedName: "name",
        required: true,
        type: {
          name: "String"
        }
      },
      description: {
        defaultValue: "",
        serializedName: "description",
        type: {
          name: "String"
        }
      },
      crossMetricsOperator: {
        serializedName: "crossMetricsOperator",
        type: {
          name: "Enum",
          allowedValues: ["AND", "OR", "XOR"]
        }
      },
      splitAlertByDimensions: {
        constraints: {
          UniqueItems: true
        },
        serializedName: "splitAlertByDimensions",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "String"
            }
          }
        }
      },
      hookIds: {
        constraints: {
          UniqueItems: true
        },
        serializedName: "hookIds",
        required: true,
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Uuid"
            }
          }
        }
      },
      metricAlertingConfigurations: {
        constraints: {
          UniqueItems: true
        },
        serializedName: "metricAlertingConfigurations",
        required: true,
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "MetricAlertingConfiguration"
            }
          }
        }
      }
    }
  }
};

export const MetricAlertingConfiguration: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "MetricAlertingConfiguration",
    modelProperties: {
      anomalyDetectionConfigurationId: {
        serializedName: "anomalyDetectionConfigurationId",
        required: true,
        type: {
          name: "Uuid"
        }
      },
      anomalyScopeType: {
        serializedName: "anomalyScopeType",
        required: true,
        type: {
          name: "Enum",
          allowedValues: ["All", "Dimension", "TopN"]
        }
      },
      negationOperation: {
        defaultValue: false,
        serializedName: "negationOperation",
        type: {
          name: "Boolean"
        }
      },
      dimensionAnomalyScope: {
        serializedName: "dimensionAnomalyScope",
        type: {
          name: "Composite",
          className: "DimensionGroupIdentity"
        }
      },
      topNAnomalyScope: {
        serializedName: "topNAnomalyScope",
        type: {
          name: "Composite",
          className: "TopNGroupScope"
        }
      },
      severityFilter: {
        serializedName: "severityFilter",
        type: {
          name: "Composite",
          className: "SeverityCondition"
        }
      },
      snoozeFilter: {
        serializedName: "snoozeFilter",
        type: {
          name: "Composite",
          className: "AlertSnoozeCondition"
        }
      },
      valueFilter: {
        serializedName: "valueFilter",
        type: {
          name: "Composite",
          className: "ValueCondition"
        }
      }
    }
  }
};

export const DimensionGroupIdentity: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "DimensionGroupIdentity",
    modelProperties: {
      dimension: {
        serializedName: "dimension",
        required: true,
        type: {
          name: "Dictionary",
          value: { type: { name: "String" } }
        }
      }
    }
  }
};

export const TopNGroupScope: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "TopNGroupScope",
    modelProperties: {
      top: {
        serializedName: "top",
        required: true,
        type: {
          name: "Number"
        }
      },
      period: {
        serializedName: "period",
        required: true,
        type: {
          name: "Number"
        }
      },
      minTopCount: {
        serializedName: "minTopCount",
        required: true,
        type: {
          name: "Number"
        }
      }
    }
  }
};

export const SeverityCondition: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "SeverityCondition",
    modelProperties: {
      minAlertSeverity: {
        serializedName: "minAlertSeverity",
        required: true,
        type: {
          name: "Enum",
          allowedValues: ["Low", "Medium", "High"]
        }
      },
      maxAlertSeverity: {
        serializedName: "maxAlertSeverity",
        required: true,
        type: {
          name: "Enum",
          allowedValues: ["Low", "Medium", "High"]
        }
      }
    }
  }
};

export const AlertSnoozeCondition: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "AlertSnoozeCondition",
    modelProperties: {
      autoSnooze: {
        serializedName: "autoSnooze",
        required: true,
        type: {
          name: "Number"
        }
      },
      snoozeScope: {
        serializedName: "snoozeScope",
        required: true,
        type: {
          name: "Enum",
          allowedValues: ["Metric", "Series"]
        }
      },
      onlyForSuccessive: {
        serializedName: "onlyForSuccessive",
        required: true,
        type: {
          name: "Boolean"
        }
      }
    }
  }
};

export const ValueCondition: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "ValueCondition",
    modelProperties: {
      lower: {
        serializedName: "lower",
        type: {
          name: "Number"
        }
      },
      upper: {
        serializedName: "upper",
        type: {
          name: "Number"
        }
      },
      direction: {
        serializedName: "direction",
        required: true,
        type: {
          name: "Enum",
          allowedValues: ["Both", "Down", "Up"]
        }
      },
      type: {
        defaultValue: "Value",
        serializedName: "type",
        type: {
          name: "Enum",
          allowedValues: ["Value", "Mean"]
        }
      },
      metricId: {
        serializedName: "metricId",
        type: {
          name: "Uuid"
        }
      },
      triggerForMissing: {
        serializedName: "triggerForMissing",
        type: {
          name: "Boolean"
        }
      }
    }
  }
};

export const AnomalyAlertingConfigurationPatch: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "AnomalyAlertingConfigurationPatch",
    modelProperties: {
      name: {
        serializedName: "name",
        type: {
          name: "String"
        }
      },
      description: {
        defaultValue: "",
        serializedName: "description",
        type: {
          name: "String"
        }
      },
      crossMetricsOperator: {
        serializedName: "crossMetricsOperator",
        type: {
          name: "Enum",
          allowedValues: ["AND", "OR", "XOR"]
        }
      },
      splitAlertByDimensions: {
        constraints: {
          UniqueItems: true
        },
        serializedName: "splitAlertByDimensions",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "String"
            }
          }
        }
      },
      hookIds: {
        constraints: {
          UniqueItems: true
        },
        serializedName: "hookIds",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Uuid"
            }
          }
        }
      },
      metricAlertingConfigurations: {
        constraints: {
          UniqueItems: true
        },
        serializedName: "metricAlertingConfigurations",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "MetricAlertingConfiguration"
            }
          }
        }
      }
    }
  }
};

export const AlertingResultQuery: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "AlertingResultQuery",
    modelProperties: {
      startTime: {
        serializedName: "startTime",
        required: true,
        type: {
          name: "DateTime"
        }
      },
      endTime: {
        serializedName: "endTime",
        required: true,
        type: {
          name: "DateTime"
        }
      },
      timeMode: {
        serializedName: "timeMode",
        required: true,
        type: {
          name: "Enum",
          allowedValues: ["AnomalyTime", "CreatedTime", "ModifiedTime"]
        }
      }
    }
  }
};

export const AlertResultList: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "AlertResultList",
    modelProperties: {
      nextLink: {
        serializedName: "@nextLink",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      value: {
        serializedName: "value",
        required: true,
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "AlertResult"
            }
          }
        }
      }
    }
  }
};

export const AlertResult: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "AlertResult",
    modelProperties: {
      alertId: {
        serializedName: "alertId",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      timestamp: {
        serializedName: "timestamp",
        readOnly: true,
        type: {
          name: "DateTime"
        }
      },
      createdTime: {
        serializedName: "createdTime",
        readOnly: true,
        type: {
          name: "DateTime"
        }
      },
      modifiedTime: {
        serializedName: "modifiedTime",
        readOnly: true,
        type: {
          name: "DateTime"
        }
      }
    }
  }
};

export const AnomalyResultList: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "AnomalyResultList",
    modelProperties: {
      nextLink: {
        serializedName: "@nextLink",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      value: {
        serializedName: "value",
        required: true,
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "AnomalyResult"
            }
          }
        }
      }
    }
  }
};

export const AnomalyResult: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "AnomalyResult",
    modelProperties: {
      dataFeedId: {
        serializedName: "dataFeedId",
        readOnly: true,
        type: {
          name: "Uuid"
        }
      },
      metricId: {
        serializedName: "metricId",
        readOnly: true,
        type: {
          name: "Uuid"
        }
      },
      anomalyDetectionConfigurationId: {
        serializedName: "anomalyDetectionConfigurationId",
        readOnly: true,
        type: {
          name: "Uuid"
        }
      },
      timestamp: {
        serializedName: "timestamp",
        required: true,
        type: {
          name: "DateTime"
        }
      },
      createdTime: {
        serializedName: "createdTime",
        readOnly: true,
        type: {
          name: "DateTime"
        }
      },
      modifiedTime: {
        serializedName: "modifiedTime",
        readOnly: true,
        type: {
          name: "DateTime"
        }
      },
      dimension: {
        serializedName: "dimension",
        required: true,
        type: {
          name: "Dictionary",
          value: { type: { name: "String" } }
        }
      },
      property: {
        serializedName: "property",
        type: {
          name: "Composite",
          className: "AnomalyProperty"
        }
      }
    }
  }
};

export const AnomalyProperty: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "AnomalyProperty",
    modelProperties: {
      anomalySeverity: {
        serializedName: "anomalySeverity",
        required: true,
        type: {
          name: "Enum",
          allowedValues: ["Low", "Medium", "High"]
        }
      },
      anomalyStatus: {
        serializedName: "anomalyStatus",
        readOnly: true,
        type: {
          name: "Enum",
          allowedValues: ["Active", "Resolved"]
        }
      },
      value: {
        serializedName: "value",
        readOnly: true,
        type: {
          name: "Number"
        }
      },
      expectedValue: {
        serializedName: "expectedValue",
        readOnly: true,
        type: {
          name: "Number"
        }
      }
    }
  }
};

export const IncidentResultList: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "IncidentResultList",
    modelProperties: {
      nextLink: {
        serializedName: "@nextLink",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      value: {
        serializedName: "value",
        required: true,
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "IncidentResult"
            }
          }
        }
      }
    }
  }
};

export const IncidentResult: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "IncidentResult",
    modelProperties: {
      dataFeedId: {
        serializedName: "dataFeedId",
        readOnly: true,
        type: {
          name: "Uuid"
        }
      },
      metricId: {
        serializedName: "metricId",
        readOnly: true,
        type: {
          name: "Uuid"
        }
      },
      anomalyDetectionConfigurationId: {
        serializedName: "anomalyDetectionConfigurationId",
        readOnly: true,
        type: {
          name: "Uuid"
        }
      },
      incidentId: {
        serializedName: "incidentId",
        required: true,
        type: {
          name: "String"
        }
      },
      startTime: {
        serializedName: "startTime",
        required: true,
        type: {
          name: "DateTime"
        }
      },
      lastTime: {
        serializedName: "lastTime",
        required: true,
        type: {
          name: "DateTime"
        }
      },
      rootNode: {
        serializedName: "rootNode",
        type: {
          name: "Composite",
          className: "SeriesIdentity"
        }
      },
      property: {
        serializedName: "property",
        type: {
          name: "Composite",
          className: "IncidentProperty"
        }
      }
    }
  }
};

export const SeriesIdentity: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "SeriesIdentity",
    modelProperties: {
      dimension: {
        serializedName: "dimension",
        required: true,
        type: {
          name: "Dictionary",
          value: { type: { name: "String" } }
        }
      }
    }
  }
};

export const IncidentProperty: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "IncidentProperty",
    modelProperties: {
      maxSeverity: {
        serializedName: "maxSeverity",
        required: true,
        type: {
          name: "Enum",
          allowedValues: ["Low", "Medium", "High"]
        }
      },
      incidentStatus: {
        serializedName: "incidentStatus",
        readOnly: true,
        type: {
          name: "Enum",
          allowedValues: ["Active", "Resolved"]
        }
      },
      valueOfRootNode: {
        serializedName: "valueOfRootNode",
        readOnly: true,
        type: {
          name: "Number"
        }
      },
      expectedValueOfRootNode: {
        serializedName: "expectedValueOfRootNode",
        readOnly: true,
        type: {
          name: "Number"
        }
      }
    }
  }
};

export const AnomalyDetectionConfiguration: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "AnomalyDetectionConfiguration",
    modelProperties: {
      anomalyDetectionConfigurationId: {
        serializedName: "anomalyDetectionConfigurationId",
        readOnly: true,
        type: {
          name: "Uuid"
        }
      },
      name: {
        serializedName: "name",
        required: true,
        type: {
          name: "String"
        }
      },
      description: {
        defaultValue: "",
        serializedName: "description",
        type: {
          name: "String"
        }
      },
      metricId: {
        serializedName: "metricId",
        required: true,
        type: {
          name: "Uuid"
        }
      },
      wholeMetricConfiguration: {
        serializedName: "wholeMetricConfiguration",
        type: {
          name: "Composite",
          className: "WholeMetricConfiguration"
        }
      },
      dimensionGroupOverrideConfigurations: {
        constraints: {
          UniqueItems: true
        },
        serializedName: "dimensionGroupOverrideConfigurations",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "DimensionGroupConfiguration"
            }
          }
        }
      },
      seriesOverrideConfigurations: {
        constraints: {
          UniqueItems: true
        },
        serializedName: "seriesOverrideConfigurations",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "SeriesConfiguration"
            }
          }
        }
      }
    }
  }
};

export const WholeMetricConfiguration: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "WholeMetricConfiguration",
    modelProperties: {
      conditionOperator: {
        serializedName: "conditionOperator",
        type: {
          name: "Enum",
          allowedValues: ["AND", "OR"]
        }
      },
      smartDetectionCondition: {
        serializedName: "smartDetectionCondition",
        type: {
          name: "Composite",
          className: "SmartDetectionCondition"
        }
      },
      hardThresholdCondition: {
        serializedName: "hardThresholdCondition",
        type: {
          name: "Composite",
          className: "HardThresholdCondition"
        }
      },
      changeThresholdCondition: {
        serializedName: "changeThresholdCondition",
        type: {
          name: "Composite",
          className: "ChangeThresholdCondition"
        }
      }
    }
  }
};

export const SmartDetectionCondition: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "SmartDetectionCondition",
    modelProperties: {
      sensitivity: {
        serializedName: "sensitivity",
        required: true,
        type: {
          name: "Number"
        }
      },
      anomalyDetectorDirection: {
        serializedName: "anomalyDetectorDirection",
        required: true,
        type: {
          name: "Enum",
          allowedValues: ["Both", "Down", "Up"]
        }
      },
      suppressCondition: {
        serializedName: "suppressCondition",
        type: {
          name: "Composite",
          className: "SuppressCondition"
        }
      }
    }
  }
};

export const SuppressCondition: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "SuppressCondition",
    modelProperties: {
      minNumber: {
        serializedName: "minNumber",
        required: true,
        type: {
          name: "Number"
        }
      },
      minRatio: {
        serializedName: "minRatio",
        required: true,
        type: {
          name: "Number"
        }
      }
    }
  }
};

export const HardThresholdCondition: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "HardThresholdCondition",
    modelProperties: {
      lowerBound: {
        serializedName: "lowerBound",
        type: {
          name: "Number"
        }
      },
      upperBound: {
        serializedName: "upperBound",
        type: {
          name: "Number"
        }
      },
      anomalyDetectorDirection: {
        serializedName: "anomalyDetectorDirection",
        required: true,
        type: {
          name: "Enum",
          allowedValues: ["Both", "Down", "Up"]
        }
      },
      suppressCondition: {
        serializedName: "suppressCondition",
        type: {
          name: "Composite",
          className: "SuppressCondition"
        }
      }
    }
  }
};

export const ChangeThresholdCondition: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "ChangeThresholdCondition",
    modelProperties: {
      changePercentage: {
        serializedName: "changePercentage",
        required: true,
        type: {
          name: "Number"
        }
      },
      shiftPoint: {
        serializedName: "shiftPoint",
        required: true,
        type: {
          name: "Number"
        }
      },
      withinRange: {
        serializedName: "withinRange",
        required: true,
        type: {
          name: "Boolean"
        }
      },
      anomalyDetectorDirection: {
        serializedName: "anomalyDetectorDirection",
        required: true,
        type: {
          name: "Enum",
          allowedValues: ["Both", "Down", "Up"]
        }
      },
      suppressCondition: {
        serializedName: "suppressCondition",
        type: {
          name: "Composite",
          className: "SuppressCondition"
        }
      }
    }
  }
};

export const DimensionGroupConfiguration: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "DimensionGroupConfiguration",
    modelProperties: {
      group: {
        serializedName: "group",
        type: {
          name: "Composite",
          className: "DimensionGroupIdentity"
        }
      },
      conditionOperator: {
        serializedName: "conditionOperator",
        type: {
          name: "Enum",
          allowedValues: ["AND", "OR"]
        }
      },
      smartDetectionCondition: {
        serializedName: "smartDetectionCondition",
        type: {
          name: "Composite",
          className: "SmartDetectionCondition"
        }
      },
      hardThresholdCondition: {
        serializedName: "hardThresholdCondition",
        type: {
          name: "Composite",
          className: "HardThresholdCondition"
        }
      },
      changeThresholdCondition: {
        serializedName: "changeThresholdCondition",
        type: {
          name: "Composite",
          className: "ChangeThresholdCondition"
        }
      }
    }
  }
};

export const SeriesConfiguration: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "SeriesConfiguration",
    modelProperties: {
      series: {
        serializedName: "series",
        type: {
          name: "Composite",
          className: "SeriesIdentity"
        }
      },
      conditionOperator: {
        serializedName: "conditionOperator",
        type: {
          name: "Enum",
          allowedValues: ["AND", "OR"]
        }
      },
      smartDetectionCondition: {
        serializedName: "smartDetectionCondition",
        type: {
          name: "Composite",
          className: "SmartDetectionCondition"
        }
      },
      hardThresholdCondition: {
        serializedName: "hardThresholdCondition",
        type: {
          name: "Composite",
          className: "HardThresholdCondition"
        }
      },
      changeThresholdCondition: {
        serializedName: "changeThresholdCondition",
        type: {
          name: "Composite",
          className: "ChangeThresholdCondition"
        }
      }
    }
  }
};

export const AnomalyDetectionConfigurationPatch: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "AnomalyDetectionConfigurationPatch",
    modelProperties: {
      name: {
        serializedName: "name",
        type: {
          name: "String"
        }
      },
      description: {
        defaultValue: "",
        serializedName: "description",
        type: {
          name: "String"
        }
      },
      wholeMetricConfiguration: {
        serializedName: "wholeMetricConfiguration",
        type: {
          name: "Composite",
          className: "WholeMetricConfigurationPatch"
        }
      },
      dimensionGroupOverrideConfigurations: {
        constraints: {
          UniqueItems: true
        },
        serializedName: "dimensionGroupOverrideConfigurations",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "DimensionGroupConfiguration"
            }
          }
        }
      },
      seriesOverrideConfigurations: {
        constraints: {
          UniqueItems: true
        },
        serializedName: "seriesOverrideConfigurations",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "SeriesConfiguration"
            }
          }
        }
      }
    }
  }
};

export const WholeMetricConfigurationPatch: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "WholeMetricConfigurationPatch",
    modelProperties: {
      conditionOperator: {
        serializedName: "conditionOperator",
        type: {
          name: "Enum",
          allowedValues: ["AND", "OR"]
        }
      },
      smartDetectionCondition: {
        serializedName: "smartDetectionCondition",
        type: {
          name: "Composite",
          className: "SmartDetectionConditionPatch"
        }
      },
      hardThresholdCondition: {
        serializedName: "hardThresholdCondition",
        type: {
          name: "Composite",
          className: "HardThresholdConditionPatch"
        }
      },
      changeThresholdCondition: {
        serializedName: "changeThresholdCondition",
        type: {
          name: "Composite",
          className: "ChangeThresholdConditionPatch"
        }
      }
    }
  }
};

export const SmartDetectionConditionPatch: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "SmartDetectionConditionPatch",
    modelProperties: {
      sensitivity: {
        serializedName: "sensitivity",
        type: {
          name: "Number"
        }
      },
      anomalyDetectorDirection: {
        serializedName: "anomalyDetectorDirection",
        type: {
          name: "Enum",
          allowedValues: ["Both", "Down", "Up"]
        }
      },
      suppressCondition: {
        serializedName: "suppressCondition",
        type: {
          name: "Composite",
          className: "SuppressConditionPatch"
        }
      }
    }
  }
};

export const SuppressConditionPatch: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "SuppressConditionPatch",
    modelProperties: {
      minNumber: {
        serializedName: "minNumber",
        type: {
          name: "Number"
        }
      },
      minRatio: {
        serializedName: "minRatio",
        type: {
          name: "Number"
        }
      }
    }
  }
};

export const HardThresholdConditionPatch: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "HardThresholdConditionPatch",
    modelProperties: {
      lowerBound: {
        serializedName: "lowerBound",
        type: {
          name: "Number"
        }
      },
      upperBound: {
        serializedName: "upperBound",
        type: {
          name: "Number"
        }
      },
      anomalyDetectorDirection: {
        serializedName: "anomalyDetectorDirection",
        type: {
          name: "Enum",
          allowedValues: ["Both", "Down", "Up"]
        }
      },
      suppressCondition: {
        serializedName: "suppressCondition",
        type: {
          name: "Composite",
          className: "SuppressConditionPatch"
        }
      }
    }
  }
};

export const ChangeThresholdConditionPatch: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "ChangeThresholdConditionPatch",
    modelProperties: {
      changePercentage: {
        serializedName: "changePercentage",
        type: {
          name: "Number"
        }
      },
      shiftPoint: {
        serializedName: "shiftPoint",
        type: {
          name: "Number"
        }
      },
      withinRange: {
        serializedName: "withinRange",
        type: {
          name: "Boolean"
        }
      },
      anomalyDetectorDirection: {
        serializedName: "anomalyDetectorDirection",
        type: {
          name: "Enum",
          allowedValues: ["Both", "Down", "Up"]
        }
      },
      suppressCondition: {
        serializedName: "suppressCondition",
        type: {
          name: "Composite",
          className: "SuppressConditionPatch"
        }
      }
    }
  }
};

export const AnomalyAlertingConfigurationList: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "AnomalyAlertingConfigurationList",
    modelProperties: {
      value: {
        serializedName: "value",
        readOnly: true,
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "AnomalyAlertingConfiguration"
            }
          }
        }
      },
      nextLink: {
        serializedName: "@nextLink",
        readOnly: true,
        type: {
          name: "String"
        }
      }
    }
  }
};

export const DetectionSeriesQuery: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "DetectionSeriesQuery",
    modelProperties: {
      startTime: {
        serializedName: "startTime",
        required: true,
        type: {
          name: "DateTime"
        }
      },
      endTime: {
        serializedName: "endTime",
        required: true,
        type: {
          name: "DateTime"
        }
      },
      series: {
        constraints: {
          UniqueItems: true
        },
        serializedName: "series",
        required: true,
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "SeriesIdentity"
            }
          }
        }
      }
    }
  }
};

export const SeriesResultList: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "SeriesResultList",
    modelProperties: {
      value: {
        serializedName: "value",
        required: true,
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "SeriesResult"
            }
          }
        }
      }
    }
  }
};

export const SeriesResult: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "SeriesResult",
    modelProperties: {
      series: {
        serializedName: "series",
        type: {
          name: "Composite",
          className: "SeriesIdentity"
        }
      },
      timestampList: {
        serializedName: "timestampList",
        required: true,
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "DateTime"
            }
          }
        }
      },
      valueList: {
        serializedName: "valueList",
        required: true,
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Number"
            }
          }
        }
      },
      isAnomalyList: {
        serializedName: "isAnomalyList",
        required: true,
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Boolean"
            }
          }
        }
      },
      periodList: {
        serializedName: "periodList",
        required: true,
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Number"
            }
          }
        }
      },
      expectedValueList: {
        serializedName: "expectedValueList",
        required: true,
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Number"
            }
          }
        }
      },
      lowerBoundaryList: {
        serializedName: "lowerBoundaryList",
        required: true,
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Number"
            }
          }
        }
      },
      upperBoundaryList: {
        serializedName: "upperBoundaryList",
        required: true,
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Number"
            }
          }
        }
      }
    }
  }
};

export const DetectionAnomalyResultQuery: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "DetectionAnomalyResultQuery",
    modelProperties: {
      startTime: {
        serializedName: "startTime",
        required: true,
        type: {
          name: "DateTime"
        }
      },
      endTime: {
        serializedName: "endTime",
        required: true,
        type: {
          name: "DateTime"
        }
      },
      filter: {
        serializedName: "filter",
        type: {
          name: "Composite",
          className: "DetectionAnomalyFilterCondition"
        }
      }
    }
  }
};

export const DetectionAnomalyFilterCondition: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "DetectionAnomalyFilterCondition",
    modelProperties: {
      dimensionFilter: {
        constraints: {
          UniqueItems: true
        },
        serializedName: "dimensionFilter",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "DimensionGroupIdentity"
            }
          }
        }
      },
      severityFilter: {
        serializedName: "severityFilter",
        type: {
          name: "Composite",
          className: "SeverityFilterCondition"
        }
      }
    }
  }
};

export const SeverityFilterCondition: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "SeverityFilterCondition",
    modelProperties: {
      min: {
        serializedName: "min",
        required: true,
        type: {
          name: "Enum",
          allowedValues: ["Low", "Medium", "High"]
        }
      },
      max: {
        serializedName: "max",
        required: true,
        type: {
          name: "Enum",
          allowedValues: ["Low", "Medium", "High"]
        }
      }
    }
  }
};

export const AnomalyDimensionQuery: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "AnomalyDimensionQuery",
    modelProperties: {
      startTime: {
        serializedName: "startTime",
        required: true,
        type: {
          name: "DateTime"
        }
      },
      endTime: {
        serializedName: "endTime",
        required: true,
        type: {
          name: "DateTime"
        }
      },
      dimensionName: {
        serializedName: "dimensionName",
        required: true,
        type: {
          name: "String"
        }
      },
      dimensionFilter: {
        serializedName: "dimensionFilter",
        type: {
          name: "Composite",
          className: "DimensionGroupIdentity"
        }
      }
    }
  }
};

export const AnomalyDimensionList: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "AnomalyDimensionList",
    modelProperties: {
      nextLink: {
        serializedName: "@nextLink",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      value: {
        serializedName: "value",
        required: true,
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "String"
            }
          }
        }
      }
    }
  }
};

export const DetectionIncidentResultQuery: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "DetectionIncidentResultQuery",
    modelProperties: {
      startTime: {
        serializedName: "startTime",
        required: true,
        type: {
          name: "DateTime"
        }
      },
      endTime: {
        serializedName: "endTime",
        required: true,
        type: {
          name: "DateTime"
        }
      },
      filter: {
        serializedName: "filter",
        type: {
          name: "Composite",
          className: "DetectionIncidentFilterCondition"
        }
      }
    }
  }
};

export const DetectionIncidentFilterCondition: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "DetectionIncidentFilterCondition",
    modelProperties: {
      dimensionFilter: {
        constraints: {
          UniqueItems: true
        },
        serializedName: "dimensionFilter",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "DimensionGroupIdentity"
            }
          }
        }
      }
    }
  }
};

export const RootCauseList: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "RootCauseList",
    modelProperties: {
      value: {
        serializedName: "value",
        required: true,
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "RootCause"
            }
          }
        }
      }
    }
  }
};

export const RootCause: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "RootCause",
    modelProperties: {
      rootCause: {
        serializedName: "rootCause",
        type: {
          name: "Composite",
          className: "DimensionGroupIdentity"
        }
      },
      path: {
        serializedName: "path",
        required: true,
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "String"
            }
          }
        }
      },
      score: {
        serializedName: "score",
        required: true,
        type: {
          name: "Number"
        }
      },
      description: {
        serializedName: "description",
        required: true,
        type: {
          name: "String"
        }
      }
    }
  }
};

export const DataSourceCredential: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "DataSourceCredential",
    uberParent: "DataSourceCredential",
    polymorphicDiscriminator: {
      serializedName: "dataSourceCredentialType",
      clientName: "dataSourceCredentialType"
    },
    modelProperties: {
      dataSourceCredentialType: {
        serializedName: "dataSourceCredentialType",
        required: true,
        type: {
          name: "Enum",
          allowedValues: [
            "AzureSQLConnectionString",
            "DataLakeGen2SharedKey",
            "ServicePrincipal",
            "ServicePrincipalInKV"
          ]
        }
      },
      dataSourceCredentialId: {
        serializedName: "dataSourceCredentialId",
        readOnly: true,
        type: {
          name: "Uuid"
        }
      },
      dataSourceCredentialName: {
        serializedName: "dataSourceCredentialName",
        required: true,
        type: {
          name: "String"
        }
      },
      dataSourceCredentialDescription: {
        serializedName: "dataSourceCredentialDescription",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const DataSourceCredentialList: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "DataSourceCredentialList",
    modelProperties: {
      nextLink: {
        serializedName: "@nextLink",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      value: {
        constraints: {
          UniqueItems: true
        },
        serializedName: "value",
        readOnly: true,
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "DataSourceCredential"
            }
          }
        }
      }
    }
  }
};

export const DataSourceCredentialPatch: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "DataSourceCredentialPatch",
    uberParent: "DataSourceCredentialPatch",
    polymorphicDiscriminator: {
      serializedName: "dataSourceCredentialType",
      clientName: "dataSourceCredentialType"
    },
    modelProperties: {
      dataSourceCredentialType: {
        serializedName: "dataSourceCredentialType",
        required: true,
        type: {
          name: "Enum",
          allowedValues: [
            "AzureSQLConnectionString",
            "DataLakeGen2SharedKey",
            "ServicePrincipal",
            "ServicePrincipalInKV"
          ]
        }
      },
      dataSourceCredentialName: {
        serializedName: "dataSourceCredentialName",
        type: {
          name: "String"
        }
      },
      dataSourceCredentialDescription: {
        serializedName: "dataSourceCredentialDescription",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const DataFeedList: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "DataFeedList",
    modelProperties: {
      nextLink: {
        serializedName: "@nextLink",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      value: {
        serializedName: "value",
        readOnly: true,
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "DataFeedDetail"
            }
          }
        }
      }
    }
  }
};

export const DataFeedDetail: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "DataFeedDetail",
    uberParent: "DataFeedDetail",
    polymorphicDiscriminator: {
      serializedName: "dataSourceType",
      clientName: "dataSourceType"
    },
    modelProperties: {
      dataSourceType: {
        serializedName: "dataSourceType",
        required: true,
        type: {
          name: "Enum",
          allowedValues: [
            "AzureApplicationInsights",
            "AzureBlob",
            "AzureCosmosDB",
            "AzureDataExplorer",
            "AzureDataLakeStorageGen2",
            "AzureEventHubs",
            "AzureLogAnalytics",
            "AzureTable",
            "InfluxDB",
            "MongoDB",
            "MySql",
            "PostgreSql",
            "SqlServer"
          ]
        }
      },
      dataFeedId: {
        serializedName: "dataFeedId",
        readOnly: true,
        type: {
          name: "Uuid"
        }
      },
      dataFeedName: {
        serializedName: "dataFeedName",
        required: true,
        type: {
          name: "String"
        }
      },
      dataFeedDescription: {
        defaultValue: "",
        serializedName: "dataFeedDescription",
        type: {
          name: "String"
        }
      },
      granularityName: {
        serializedName: "granularityName",
        required: true,
        type: {
          name: "Enum",
          allowedValues: [
            "Yearly",
            "Monthly",
            "Weekly",
            "Daily",
            "Hourly",
            "Minutely",
            "Custom"
          ]
        }
      },
      granularityAmount: {
        serializedName: "granularityAmount",
        type: {
          name: "Number"
        }
      },
      metrics: {
        constraints: {
          UniqueItems: true
        },
        serializedName: "metrics",
        required: true,
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "Metric"
            }
          }
        }
      },
      dimension: {
        constraints: {
          UniqueItems: true
        },
        serializedName: "dimension",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "Dimension"
            }
          }
        }
      },
      timestampColumn: {
        defaultValue: "",
        serializedName: "timestampColumn",
        type: {
          name: "String"
        }
      },
      dataStartFrom: {
        serializedName: "dataStartFrom",
        required: true,
        type: {
          name: "DateTime"
        }
      },
      startOffsetInSeconds: {
        defaultValue: 0,
        serializedName: "startOffsetInSeconds",
        type: {
          name: "Number"
        }
      },
      maxConcurrency: {
        defaultValue: -1,
        serializedName: "maxConcurrency",
        type: {
          name: "Number"
        }
      },
      minRetryIntervalInSeconds: {
        defaultValue: -1,
        serializedName: "minRetryIntervalInSeconds",
        type: {
          name: "Number"
        }
      },
      stopRetryAfterInSeconds: {
        defaultValue: -1,
        serializedName: "stopRetryAfterInSeconds",
        type: {
          name: "Number"
        }
      },
      needRollup: {
        serializedName: "needRollup",
        type: {
          name: "Enum",
          allowedValues: ["NoRollup", "NeedRollup", "AlreadyRollup"]
        }
      },
      rollUpMethod: {
        serializedName: "rollUpMethod",
        type: {
          name: "Enum",
          allowedValues: ["None", "Sum", "Max", "Min", "Avg", "Count"]
        }
      },
      rollUpColumns: {
        constraints: {
          UniqueItems: true
        },
        serializedName: "rollUpColumns",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "String"
            }
          }
        }
      },
      allUpIdentification: {
        serializedName: "allUpIdentification",
        type: {
          name: "String"
        }
      },
      fillMissingPointType: {
        serializedName: "fillMissingPointType",
        type: {
          name: "Enum",
          allowedValues: [
            "SmartFilling",
            "PreviousValue",
            "CustomValue",
            "NoFilling"
          ]
        }
      },
      fillMissingPointValue: {
        serializedName: "fillMissingPointValue",
        type: {
          name: "Number"
        }
      },
      viewMode: {
        serializedName: "viewMode",
        type: {
          name: "Enum",
          allowedValues: ["Private", "Public"]
        }
      },
      admins: {
        constraints: {
          UniqueItems: true
        },
        serializedName: "admins",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "String"
            }
          }
        }
      },
      viewers: {
        constraints: {
          UniqueItems: true
        },
        serializedName: "viewers",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "String"
            }
          }
        }
      },
      isAdmin: {
        serializedName: "isAdmin",
        readOnly: true,
        type: {
          name: "Boolean"
        }
      },
      creator: {
        serializedName: "creator",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      status: {
        serializedName: "status",
        readOnly: true,
        type: {
          name: "Enum",
          allowedValues: ["Active", "Paused"]
        }
      },
      createdTime: {
        serializedName: "createdTime",
        readOnly: true,
        type: {
          name: "DateTime"
        }
      },
      actionLinkTemplate: {
        defaultValue: "",
        serializedName: "actionLinkTemplate",
        type: {
          name: "String"
        }
      },
      authenticationType: {
        serializedName: "authenticationType",
        type: {
          name: "Enum",
          allowedValues: [
            "Basic",
            "ManagedIdentity",
            "AzureSQLConnectionString",
            "DataLakeGen2SharedKey",
            "ServicePrincipal",
            "ServicePrincipalInKV"
          ]
        }
      },
      credentialId: {
        serializedName: "credentialId",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const Metric: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "Metric",
    modelProperties: {
      id: {
        serializedName: "metricId",
        readOnly: true,
        type: {
          name: "Uuid"
        }
      },
      name: {
        serializedName: "metricName",
        required: true,
        type: {
          name: "String"
        }
      },
      displayName: {
        constraints: {
          Pattern: new RegExp("[.a-zA-Z0-9_-]+")
        },
        serializedName: "metricDisplayName",
        type: {
          name: "String"
        }
      },
      description: {
        serializedName: "metricDescription",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const Dimension: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "Dimension",
    modelProperties: {
      name: {
        serializedName: "dimensionName",
        required: true,
        type: {
          name: "String"
        }
      },
      displayName: {
        constraints: {
          Pattern: new RegExp("[.a-zA-Z0-9_-]+")
        },
        serializedName: "dimensionDisplayName",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const DataFeedDetailPatch: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "DataFeedDetailPatch",
    uberParent: "DataFeedDetailPatch",
    polymorphicDiscriminator: {
      serializedName: "dataSourceType",
      clientName: "dataSourceType"
    },
    modelProperties: {
      dataSourceType: {
        serializedName: "dataSourceType",
        required: true,
        type: {
          name: "Enum",
          allowedValues: [
            "AzureApplicationInsights",
            "AzureBlob",
            "AzureCosmosDB",
            "AzureDataExplorer",
            "AzureDataLakeStorageGen2",
            "AzureEventHubs",
            "AzureLogAnalytics",
            "AzureTable",
            "InfluxDB",
            "MongoDB",
            "MySql",
            "PostgreSql",
            "SqlServer"
          ]
        }
      },
      dataFeedName: {
        serializedName: "dataFeedName",
        type: {
          name: "String"
        }
      },
      dataFeedDescription: {
        serializedName: "dataFeedDescription",
        type: {
          name: "String"
        }
      },
      timestampColumn: {
        serializedName: "timestampColumn",
        type: {
          name: "String"
        }
      },
      dataStartFrom: {
        serializedName: "dataStartFrom",
        type: {
          name: "DateTime"
        }
      },
      startOffsetInSeconds: {
        serializedName: "startOffsetInSeconds",
        type: {
          name: "Number"
        }
      },
      maxConcurrency: {
        serializedName: "maxConcurrency",
        type: {
          name: "Number"
        }
      },
      minRetryIntervalInSeconds: {
        serializedName: "minRetryIntervalInSeconds",
        type: {
          name: "Number"
        }
      },
      stopRetryAfterInSeconds: {
        serializedName: "stopRetryAfterInSeconds",
        type: {
          name: "Number"
        }
      },
      needRollup: {
        serializedName: "needRollup",
        type: {
          name: "Enum",
          allowedValues: ["NoRollup", "NeedRollup", "AlreadyRollup"]
        }
      },
      rollUpMethod: {
        serializedName: "rollUpMethod",
        type: {
          name: "Enum",
          allowedValues: ["None", "Sum", "Max", "Min", "Avg", "Count"]
        }
      },
      rollUpColumns: {
        constraints: {
          UniqueItems: true
        },
        serializedName: "rollUpColumns",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "String"
            }
          }
        }
      },
      allUpIdentification: {
        serializedName: "allUpIdentification",
        type: {
          name: "String"
        }
      },
      fillMissingPointType: {
        serializedName: "fillMissingPointType",
        type: {
          name: "Enum",
          allowedValues: [
            "SmartFilling",
            "PreviousValue",
            "CustomValue",
            "NoFilling"
          ]
        }
      },
      fillMissingPointValue: {
        serializedName: "fillMissingPointValue",
        type: {
          name: "Number"
        }
      },
      viewMode: {
        serializedName: "viewMode",
        type: {
          name: "Enum",
          allowedValues: ["Private", "Public"]
        }
      },
      admins: {
        constraints: {
          UniqueItems: true
        },
        serializedName: "admins",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "String"
            }
          }
        }
      },
      viewers: {
        constraints: {
          UniqueItems: true
        },
        serializedName: "viewers",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "String"
            }
          }
        }
      },
      status: {
        serializedName: "status",
        type: {
          name: "Enum",
          allowedValues: ["Active", "Paused"]
        }
      },
      actionLinkTemplate: {
        serializedName: "actionLinkTemplate",
        type: {
          name: "String"
        }
      },
      authenticationType: {
        serializedName: "authenticationType",
        type: {
          name: "Enum",
          allowedValues: [
            "Basic",
            "ManagedIdentity",
            "AzureSQLConnectionString",
            "DataLakeGen2SharedKey",
            "ServicePrincipal",
            "ServicePrincipalInKV"
          ]
        }
      },
      credentialId: {
        serializedName: "credentialId",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const MetricFeedback: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "MetricFeedback",
    uberParent: "MetricFeedback",
    polymorphicDiscriminator: {
      serializedName: "feedbackType",
      clientName: "feedbackType"
    },
    modelProperties: {
      feedbackType: {
        serializedName: "feedbackType",
        required: true,
        type: {
          name: "Enum",
          allowedValues: ["Anomaly", "ChangePoint", "Period", "Comment"]
        }
      },
      feedbackId: {
        serializedName: "feedbackId",
        readOnly: true,
        type: {
          name: "Uuid"
        }
      },
      createdTime: {
        serializedName: "createdTime",
        readOnly: true,
        type: {
          name: "DateTime"
        }
      },
      userPrincipal: {
        serializedName: "userPrincipal",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      metricId: {
        serializedName: "metricId",
        required: true,
        type: {
          name: "Uuid"
        }
      },
      dimensionFilter: {
        serializedName: "dimensionFilter",
        type: {
          name: "Composite",
          className: "FeedbackDimensionFilter"
        }
      }
    }
  }
};

export const FeedbackDimensionFilter: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "FeedbackDimensionFilter",
    modelProperties: {
      dimension: {
        serializedName: "dimension",
        required: true,
        type: {
          name: "Dictionary",
          value: { type: { name: "String" } }
        }
      }
    }
  }
};

export const MetricFeedbackFilter: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "MetricFeedbackFilter",
    modelProperties: {
      metricId: {
        serializedName: "metricId",
        required: true,
        type: {
          name: "Uuid"
        }
      },
      dimensionFilter: {
        serializedName: "dimensionFilter",
        type: {
          name: "Composite",
          className: "FeedbackDimensionFilter"
        }
      },
      feedbackType: {
        serializedName: "feedbackType",
        type: {
          name: "Enum",
          allowedValues: ["Anomaly", "ChangePoint", "Period", "Comment"]
        }
      },
      startTime: {
        serializedName: "startTime",
        type: {
          name: "DateTime"
        }
      },
      endTime: {
        serializedName: "endTime",
        type: {
          name: "DateTime"
        }
      },
      timeMode: {
        serializedName: "timeMode",
        type: {
          name: "Enum",
          allowedValues: ["MetricTimestamp", "FeedbackCreatedTime"]
        }
      }
    }
  }
};

export const MetricFeedbackList: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "MetricFeedbackList",
    modelProperties: {
      nextLink: {
        serializedName: "@nextLink",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      value: {
        serializedName: "value",
        readOnly: true,
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "MetricFeedback"
            }
          }
        }
      }
    }
  }
};

export const HookList: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "HookList",
    modelProperties: {
      nextLink: {
        serializedName: "@nextLink",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      value: {
        constraints: {
          UniqueItems: true
        },
        serializedName: "value",
        readOnly: true,
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "HookInfo"
            }
          }
        }
      }
    }
  }
};

export const HookInfo: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "HookInfo",
    uberParent: "HookInfo",
    polymorphicDiscriminator: {
      serializedName: "hookType",
      clientName: "hookType"
    },
    modelProperties: {
      hookType: {
        serializedName: "hookType",
        required: true,
        type: {
          name: "Enum",
          allowedValues: ["Webhook", "Email"]
        }
      },
      id: {
        serializedName: "hookId",
        readOnly: true,
        type: {
          name: "Uuid"
        }
      },
      name: {
        serializedName: "hookName",
        required: true,
        type: {
          name: "String"
        }
      },
      description: {
        defaultValue: "",
        serializedName: "description",
        type: {
          name: "String"
        }
      },
      externalLink: {
        defaultValue: "",
        serializedName: "externalLink",
        type: {
          name: "String"
        }
      },
      admins: {
        constraints: {
          UniqueItems: true
        },
        serializedName: "admins",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "String"
            }
          }
        }
      }
    }
  }
};

export const HookInfoPatch: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "HookInfoPatch",
    uberParent: "HookInfoPatch",
    polymorphicDiscriminator: {
      serializedName: "hookType",
      clientName: "hookType"
    },
    modelProperties: {
      hookType: {
        serializedName: "hookType",
        required: true,
        type: {
          name: "Enum",
          allowedValues: ["Webhook", "Email"]
        }
      },
      hookName: {
        serializedName: "hookName",
        type: {
          name: "String"
        }
      },
      description: {
        serializedName: "description",
        type: {
          name: "String"
        }
      },
      externalLink: {
        serializedName: "externalLink",
        type: {
          name: "String"
        }
      },
      admins: {
        constraints: {
          UniqueItems: true
        },
        serializedName: "admins",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "String"
            }
          }
        }
      }
    }
  }
};

export const IngestionStatusQueryOptions: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "IngestionStatusQueryOptions",
    modelProperties: {
      startTime: {
        serializedName: "startTime",
        required: true,
        type: {
          name: "DateTime"
        }
      },
      endTime: {
        serializedName: "endTime",
        required: true,
        type: {
          name: "DateTime"
        }
      }
    }
  }
};

export const IngestionStatusList: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "IngestionStatusList",
    modelProperties: {
      nextLink: {
        serializedName: "@nextLink",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      value: {
        serializedName: "value",
        readOnly: true,
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "IngestionStatus"
            }
          }
        }
      }
    }
  }
};

export const IngestionStatus: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "IngestionStatus",
    modelProperties: {
      timestamp: {
        serializedName: "timestamp",
        readOnly: true,
        type: {
          name: "DateTime"
        }
      },
      status: {
        serializedName: "status",
        readOnly: true,
        type: {
          name: "Enum",
          allowedValues: [
            "NotStarted",
            "Scheduled",
            "Running",
            "Succeeded",
            "Failed",
            "NoData",
            "Error",
            "Paused"
          ]
        }
      },
      message: {
        serializedName: "message",
        readOnly: true,
        type: {
          name: "String"
        }
      }
    }
  }
};

export const IngestionProgressResetOptions: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "IngestionProgressResetOptions",
    modelProperties: {
      startTime: {
        serializedName: "startTime",
        required: true,
        type: {
          name: "DateTime"
        }
      },
      endTime: {
        serializedName: "endTime",
        required: true,
        type: {
          name: "DateTime"
        }
      }
    }
  }
};

export const DataFeedIngestionProgress: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "DataFeedIngestionProgress",
    modelProperties: {
      latestSuccessTimestamp: {
        serializedName: "latestSuccessTimestamp",
        readOnly: true,
        type: {
          name: "DateTime"
        }
      },
      latestActiveTimestamp: {
        serializedName: "latestActiveTimestamp",
        readOnly: true,
        type: {
          name: "DateTime"
        }
      }
    }
  }
};

export const MetricDataQueryOptions: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "MetricDataQueryOptions",
    modelProperties: {
      startTime: {
        serializedName: "startTime",
        required: true,
        type: {
          name: "DateTime"
        }
      },
      endTime: {
        serializedName: "endTime",
        required: true,
        type: {
          name: "DateTime"
        }
      },
      series: {
        serializedName: "series",
        required: true,
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Dictionary",
              value: { type: { name: "String" } }
            }
          }
        }
      }
    }
  }
};

export const MetricDataList: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "MetricDataList",
    modelProperties: {
      value: {
        serializedName: "value",
        readOnly: true,
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "MetricDataItem"
            }
          }
        }
      }
    }
  }
};

export const MetricDataItem: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "MetricDataItem",
    modelProperties: {
      id: {
        serializedName: "id",
        type: {
          name: "Composite",
          className: "MetricSeriesItem"
        }
      },
      timestampList: {
        serializedName: "timestampList",
        readOnly: true,
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "DateTime"
            }
          }
        }
      },
      valueList: {
        serializedName: "valueList",
        readOnly: true,
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Number"
            }
          }
        }
      }
    }
  }
};

export const MetricSeriesItem: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "MetricSeriesItem",
    modelProperties: {
      metricId: {
        serializedName: "metricId",
        readOnly: true,
        type: {
          name: "Uuid"
        }
      },
      dimension: {
        serializedName: "dimension",
        readOnly: true,
        type: {
          name: "Dictionary",
          value: { type: { name: "String" } }
        }
      }
    }
  }
};

export const MetricSeriesQueryOptions: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "MetricSeriesQueryOptions",
    modelProperties: {
      activeSince: {
        serializedName: "activeSince",
        required: true,
        type: {
          name: "DateTime"
        }
      },
      dimensionFilter: {
        serializedName: "dimensionFilter",
        type: {
          name: "Dictionary",
          value: {
            type: { name: "Sequence", element: { type: { name: "String" } } }
          }
        }
      }
    }
  }
};

export const MetricSeriesList: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "MetricSeriesList",
    modelProperties: {
      nextLink: {
        serializedName: "@nextLink",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      value: {
        serializedName: "value",
        readOnly: true,
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "MetricSeriesItem"
            }
          }
        }
      }
    }
  }
};

export const MetricDimensionQueryOptions: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "MetricDimensionQueryOptions",
    modelProperties: {
      dimensionName: {
        serializedName: "dimensionName",
        required: true,
        type: {
          name: "String"
        }
      },
      dimensionValueFilter: {
        serializedName: "dimensionValueFilter",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const MetricDimensionList: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "MetricDimensionList",
    modelProperties: {
      nextLink: {
        serializedName: "@nextLink",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      value: {
        constraints: {
          UniqueItems: true
        },
        serializedName: "value",
        readOnly: true,
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "String"
            }
          }
        }
      }
    }
  }
};

export const AnomalyDetectionConfigurationList: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "AnomalyDetectionConfigurationList",
    modelProperties: {
      value: {
        serializedName: "value",
        readOnly: true,
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "AnomalyDetectionConfiguration"
            }
          }
        }
      },
      nextLink: {
        serializedName: "@nextLink",
        readOnly: true,
        type: {
          name: "String"
        }
      }
    }
  }
};

export const EnrichmentStatusQueryOption: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "EnrichmentStatusQueryOption",
    modelProperties: {
      startTime: {
        serializedName: "startTime",
        required: true,
        type: {
          name: "DateTime"
        }
      },
      endTime: {
        serializedName: "endTime",
        required: true,
        type: {
          name: "DateTime"
        }
      }
    }
  }
};

export const EnrichmentStatusList: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "EnrichmentStatusList",
    modelProperties: {
      nextLink: {
        serializedName: "@nextLink",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      value: {
        serializedName: "value",
        readOnly: true,
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "EnrichmentStatus"
            }
          }
        }
      }
    }
  }
};

export const EnrichmentStatus: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "EnrichmentStatus",
    modelProperties: {
      timestamp: {
        serializedName: "timestamp",
        readOnly: true,
        type: {
          name: "DateTime"
        }
      },
      status: {
        serializedName: "status",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      message: {
        serializedName: "message",
        readOnly: true,
        type: {
          name: "String"
        }
      }
    }
  }
};

export const AzureSQLConnectionStringParam: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "AzureSQLConnectionStringParam",
    modelProperties: {
      connectionString: {
        serializedName: "connectionString",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const DataLakeGen2SharedKeyParam: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "DataLakeGen2SharedKeyParam",
    modelProperties: {
      accountKey: {
        serializedName: "accountKey",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const ServicePrincipalParam: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "ServicePrincipalParam",
    modelProperties: {
      clientId: {
        serializedName: "clientId",
        required: true,
        type: {
          name: "String"
        }
      },
      clientSecret: {
        serializedName: "clientSecret",
        type: {
          name: "String"
        }
      },
      tenantId: {
        serializedName: "tenantId",
        required: true,
        type: {
          name: "String"
        }
      }
    }
  }
};

export const ServicePrincipalInKVParam: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "ServicePrincipalInKVParam",
    modelProperties: {
      keyVaultEndpoint: {
        serializedName: "keyVaultEndpoint",
        required: true,
        type: {
          name: "String"
        }
      },
      keyVaultClientId: {
        serializedName: "keyVaultClientId",
        required: true,
        type: {
          name: "String"
        }
      },
      keyVaultClientSecret: {
        serializedName: "keyVaultClientSecret",
        type: {
          name: "String"
        }
      },
      servicePrincipalIdNameInKV: {
        serializedName: "servicePrincipalIdNameInKV",
        required: true,
        type: {
          name: "String"
        }
      },
      servicePrincipalSecretNameInKV: {
        serializedName: "servicePrincipalSecretNameInKV",
        required: true,
        type: {
          name: "String"
        }
      },
      tenantId: {
        serializedName: "tenantId",
        required: true,
        type: {
          name: "String"
        }
      }
    }
  }
};

export const AzureSQLConnectionStringParamPatch: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "AzureSQLConnectionStringParamPatch",
    modelProperties: {
      connectionString: {
        serializedName: "connectionString",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const DataLakeGen2SharedKeyParamPatch: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "DataLakeGen2SharedKeyParamPatch",
    modelProperties: {
      accountKey: {
        serializedName: "accountKey",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const ServicePrincipalParamPatch: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "ServicePrincipalParamPatch",
    modelProperties: {
      clientId: {
        serializedName: "clientId",
        type: {
          name: "String"
        }
      },
      clientSecret: {
        serializedName: "clientSecret",
        type: {
          name: "String"
        }
      },
      tenantId: {
        serializedName: "tenantId",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const ServicePrincipalInKVParamPatch: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "ServicePrincipalInKVParamPatch",
    modelProperties: {
      keyVaultEndpoint: {
        serializedName: "keyVaultEndpoint",
        type: {
          name: "String"
        }
      },
      keyVaultClientId: {
        serializedName: "keyVaultClientId",
        type: {
          name: "String"
        }
      },
      keyVaultClientSecret: {
        serializedName: "keyVaultClientSecret",
        type: {
          name: "String"
        }
      },
      servicePrincipalIdNameInKV: {
        serializedName: "servicePrincipalIdNameInKV",
        type: {
          name: "String"
        }
      },
      servicePrincipalSecretNameInKV: {
        serializedName: "servicePrincipalSecretNameInKV",
        type: {
          name: "String"
        }
      },
      tenantId: {
        serializedName: "tenantId",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const AzureApplicationInsightsParameter: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "AzureApplicationInsightsParameter",
    modelProperties: {
      azureCloud: {
        serializedName: "azureCloud",
        type: {
          name: "String"
        }
      },
      applicationId: {
        serializedName: "applicationId",
        type: {
          name: "String"
        }
      },
      apiKey: {
        serializedName: "apiKey",
        type: {
          name: "String"
        }
      },
      query: {
        serializedName: "query",
        required: true,
        type: {
          name: "String"
        }
      }
    }
  }
};

export const AzureBlobParameter: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "AzureBlobParameter",
    modelProperties: {
      connectionString: {
        serializedName: "connectionString",
        type: {
          name: "String"
        }
      },
      container: {
        serializedName: "container",
        required: true,
        type: {
          name: "String"
        }
      },
      blobTemplate: {
        serializedName: "blobTemplate",
        required: true,
        type: {
          name: "String"
        }
      }
    }
  }
};

export const AzureCosmosDBParameter: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "AzureCosmosDBParameter",
    modelProperties: {
      connectionString: {
        serializedName: "connectionString",
        type: {
          name: "String"
        }
      },
      sqlQuery: {
        serializedName: "sqlQuery",
        required: true,
        type: {
          name: "String"
        }
      },
      database: {
        serializedName: "database",
        required: true,
        type: {
          name: "String"
        }
      },
      collectionId: {
        serializedName: "collectionId",
        required: true,
        type: {
          name: "String"
        }
      }
    }
  }
};

export const SqlSourceParameter: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "SqlSourceParameter",
    modelProperties: {
      connectionString: {
        serializedName: "connectionString",
        type: {
          name: "String"
        }
      },
      query: {
        serializedName: "query",
        required: true,
        type: {
          name: "String"
        }
      }
    }
  }
};

export const AzureDataLakeStorageGen2Parameter: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "AzureDataLakeStorageGen2Parameter",
    modelProperties: {
      accountName: {
        serializedName: "accountName",
        type: {
          name: "String"
        }
      },
      accountKey: {
        serializedName: "accountKey",
        type: {
          name: "String"
        }
      },
      fileSystemName: {
        serializedName: "fileSystemName",
        required: true,
        type: {
          name: "String"
        }
      },
      directoryTemplate: {
        serializedName: "directoryTemplate",
        required: true,
        type: {
          name: "String"
        }
      },
      fileTemplate: {
        serializedName: "fileTemplate",
        required: true,
        type: {
          name: "String"
        }
      }
    }
  }
};

export const AzureEventHubsParameter: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "AzureEventHubsParameter",
    modelProperties: {
      connectionString: {
        serializedName: "connectionString",
        type: {
          name: "String"
        }
      },
      consumerGroup: {
        serializedName: "consumerGroup",
        required: true,
        type: {
          name: "String"
        }
      }
    }
  }
};

export const AzureLogAnalyticsParameter: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "AzureLogAnalyticsParameter",
    modelProperties: {
      tenantId: {
        serializedName: "tenantId",
        type: {
          name: "String"
        }
      },
      clientId: {
        serializedName: "clientId",
        type: {
          name: "String"
        }
      },
      clientSecret: {
        serializedName: "clientSecret",
        type: {
          name: "String"
        }
      },
      workspaceId: {
        serializedName: "workspaceId",
        required: true,
        type: {
          name: "String"
        }
      },
      query: {
        serializedName: "query",
        required: true,
        type: {
          name: "String"
        }
      }
    }
  }
};

export const AzureTableParameter: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "AzureTableParameter",
    modelProperties: {
      connectionString: {
        serializedName: "connectionString",
        type: {
          name: "String"
        }
      },
      table: {
        serializedName: "table",
        required: true,
        type: {
          name: "String"
        }
      },
      query: {
        serializedName: "query",
        required: true,
        type: {
          name: "String"
        }
      }
    }
  }
};

export const InfluxDBParameter: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "InfluxDBParameter",
    modelProperties: {
      connectionString: {
        serializedName: "connectionString",
        type: {
          name: "String"
        }
      },
      database: {
        serializedName: "database",
        type: {
          name: "String"
        }
      },
      userName: {
        serializedName: "userName",
        type: {
          name: "String"
        }
      },
      password: {
        serializedName: "password",
        type: {
          name: "String"
        }
      },
      query: {
        serializedName: "query",
        required: true,
        type: {
          name: "String"
        }
      }
    }
  }
};

export const MongoDBParameter: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "MongoDBParameter",
    modelProperties: {
      connectionString: {
        serializedName: "connectionString",
        type: {
          name: "String"
        }
      },
      database: {
        serializedName: "database",
        type: {
          name: "String"
        }
      },
      command: {
        serializedName: "command",
        required: true,
        type: {
          name: "String"
        }
      }
    }
  }
};

export const AzureApplicationInsightsParameterPatch: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "AzureApplicationInsightsParameterPatch",
    modelProperties: {
      azureCloud: {
        serializedName: "azureCloud",
        type: {
          name: "String"
        }
      },
      applicationId: {
        serializedName: "applicationId",
        type: {
          name: "String"
        }
      },
      apiKey: {
        serializedName: "apiKey",
        type: {
          name: "String"
        }
      },
      query: {
        serializedName: "query",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const AzureBlobParameterPatch: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "AzureBlobParameterPatch",
    modelProperties: {
      connectionString: {
        serializedName: "connectionString",
        type: {
          name: "String"
        }
      },
      container: {
        serializedName: "container",
        type: {
          name: "String"
        }
      },
      blobTemplate: {
        serializedName: "blobTemplate",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const AzureCosmosDBParameterPatch: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "AzureCosmosDBParameterPatch",
    modelProperties: {
      connectionString: {
        serializedName: "connectionString",
        type: {
          name: "String"
        }
      },
      sqlQuery: {
        serializedName: "sqlQuery",
        type: {
          name: "String"
        }
      },
      database: {
        serializedName: "database",
        type: {
          name: "String"
        }
      },
      collectionId: {
        serializedName: "collectionId",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const SQLSourceParameterPatch: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "SQLSourceParameterPatch",
    modelProperties: {
      connectionString: {
        serializedName: "connectionString",
        type: {
          name: "String"
        }
      },
      query: {
        serializedName: "query",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const AzureDataLakeStorageGen2ParameterPatch: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "AzureDataLakeStorageGen2ParameterPatch",
    modelProperties: {
      accountName: {
        serializedName: "accountName",
        type: {
          name: "String"
        }
      },
      accountKey: {
        serializedName: "accountKey",
        type: {
          name: "String"
        }
      },
      fileSystemName: {
        serializedName: "fileSystemName",
        type: {
          name: "String"
        }
      },
      directoryTemplate: {
        serializedName: "directoryTemplate",
        type: {
          name: "String"
        }
      },
      fileTemplate: {
        serializedName: "fileTemplate",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const AzureEventHubsParameterPatch: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "AzureEventHubsParameterPatch",
    modelProperties: {
      connectionString: {
        serializedName: "connectionString",
        type: {
          name: "String"
        }
      },
      consumerGroup: {
        serializedName: "consumerGroup",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const AzureLogAnalyticsParameterPatch: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "AzureLogAnalyticsParameterPatch",
    modelProperties: {
      tenantId: {
        serializedName: "tenantId",
        type: {
          name: "String"
        }
      },
      clientId: {
        serializedName: "clientId",
        type: {
          name: "String"
        }
      },
      clientSecret: {
        serializedName: "clientSecret",
        type: {
          name: "String"
        }
      },
      workspaceId: {
        serializedName: "workspaceId",
        type: {
          name: "String"
        }
      },
      query: {
        serializedName: "query",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const AzureTableParameterPatch: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "AzureTableParameterPatch",
    modelProperties: {
      connectionString: {
        serializedName: "connectionString",
        type: {
          name: "String"
        }
      },
      table: {
        serializedName: "table",
        type: {
          name: "String"
        }
      },
      query: {
        serializedName: "query",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const InfluxDBParameterPatch: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "InfluxDBParameterPatch",
    modelProperties: {
      connectionString: {
        serializedName: "connectionString",
        type: {
          name: "String"
        }
      },
      database: {
        serializedName: "database",
        type: {
          name: "String"
        }
      },
      userName: {
        serializedName: "userName",
        type: {
          name: "String"
        }
      },
      password: {
        serializedName: "password",
        type: {
          name: "String"
        }
      },
      query: {
        serializedName: "query",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const MongoDBParameterPatch: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "MongoDBParameterPatch",
    modelProperties: {
      connectionString: {
        serializedName: "connectionString",
        type: {
          name: "String"
        }
      },
      database: {
        serializedName: "database",
        type: {
          name: "String"
        }
      },
      command: {
        serializedName: "command",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const AnomalyFeedbackValue: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "AnomalyFeedbackValue",
    modelProperties: {
      anomalyValue: {
        serializedName: "anomalyValue",
        required: true,
        type: {
          name: "Enum",
          allowedValues: ["AutoDetect", "Anomaly", "NotAnomaly"]
        }
      }
    }
  }
};

export const ChangePointFeedbackValue: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "ChangePointFeedbackValue",
    modelProperties: {
      changePointValue: {
        serializedName: "changePointValue",
        required: true,
        type: {
          name: "Enum",
          allowedValues: ["AutoDetect", "ChangePoint", "NotChangePoint"]
        }
      }
    }
  }
};

export const CommentFeedbackValue: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "CommentFeedbackValue",
    modelProperties: {
      commentValue: {
        serializedName: "commentValue",
        required: true,
        type: {
          name: "String"
        }
      }
    }
  }
};

export const PeriodFeedbackValue: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "PeriodFeedbackValue",
    modelProperties: {
      periodType: {
        serializedName: "periodType",
        required: true,
        type: {
          name: "Enum",
          allowedValues: ["AutoDetect", "AssignValue"]
        }
      },
      periodValue: {
        defaultValue: 0,
        serializedName: "periodValue",
        required: true,
        type: {
          name: "Number"
        }
      }
    }
  }
};

export const EmailHookParameter: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "EmailHookParameter",
    modelProperties: {
      toList: {
        constraints: {
          UniqueItems: true
        },
        serializedName: "toList",
        required: true,
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "String"
            }
          }
        }
      }
    }
  }
};

export const WebhookHookParameter: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "WebhookHookParameter",
    modelProperties: {
      endpoint: {
        serializedName: "endpoint",
        required: true,
        type: {
          name: "String"
        }
      },
      username: {
        serializedName: "username",
        type: {
          name: "String"
        }
      },
      password: {
        serializedName: "password",
        type: {
          name: "String"
        }
      },
      headers: {
        serializedName: "headers",
        type: {
          name: "Dictionary",
          value: { type: { name: "String" } }
        }
      },
      certificateKey: {
        serializedName: "certificateKey",
        type: {
          name: "String"
        }
      },
      certificatePassword: {
        serializedName: "certificatePassword",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const EmailHookParameterPatch: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "EmailHookParameterPatch",
    modelProperties: {
      toList: {
        constraints: {
          UniqueItems: true
        },
        serializedName: "toList",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "String"
            }
          }
        }
      }
    }
  }
};

export const WebhookHookParameterPatch: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "WebhookHookParameterPatch",
    modelProperties: {
      endpoint: {
        serializedName: "endpoint",
        type: {
          name: "String"
        }
      },
      username: {
        serializedName: "username",
        type: {
          name: "String"
        }
      },
      password: {
        serializedName: "password",
        type: {
          name: "String"
        }
      },
      headers: {
        serializedName: "headers",
        type: {
          name: "Dictionary",
          value: { type: { name: "String" } }
        }
      },
      certificateKey: {
        serializedName: "certificateKey",
        type: {
          name: "String"
        }
      },
      certificatePassword: {
        serializedName: "certificatePassword",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const AzureSQLConnectionStringCredential: coreClient.CompositeMapper = {
  serializedName: "AzureSQLConnectionString",
  type: {
    name: "Composite",
    className: "AzureSQLConnectionStringCredential",
    uberParent: "DataSourceCredential",
    polymorphicDiscriminator:
      DataSourceCredential.type.polymorphicDiscriminator,
    modelProperties: {
      ...DataSourceCredential.type.modelProperties,
      parameters: {
        serializedName: "parameters",
        type: {
          name: "Composite",
          className: "AzureSQLConnectionStringParam"
        }
      }
    }
  }
};

export const DataLakeGen2SharedKeyCredential: coreClient.CompositeMapper = {
  serializedName: "DataLakeGen2SharedKey",
  type: {
    name: "Composite",
    className: "DataLakeGen2SharedKeyCredential",
    uberParent: "DataSourceCredential",
    polymorphicDiscriminator:
      DataSourceCredential.type.polymorphicDiscriminator,
    modelProperties: {
      ...DataSourceCredential.type.modelProperties,
      parameters: {
        serializedName: "parameters",
        type: {
          name: "Composite",
          className: "DataLakeGen2SharedKeyParam"
        }
      }
    }
  }
};

export const ServicePrincipalCredential: coreClient.CompositeMapper = {
  serializedName: "ServicePrincipal",
  type: {
    name: "Composite",
    className: "ServicePrincipalCredential",
    uberParent: "DataSourceCredential",
    polymorphicDiscriminator:
      DataSourceCredential.type.polymorphicDiscriminator,
    modelProperties: {
      ...DataSourceCredential.type.modelProperties,
      parameters: {
        serializedName: "parameters",
        type: {
          name: "Composite",
          className: "ServicePrincipalParam"
        }
      }
    }
  }
};

export const ServicePrincipalInKVCredential: coreClient.CompositeMapper = {
  serializedName: "ServicePrincipalInKV",
  type: {
    name: "Composite",
    className: "ServicePrincipalInKVCredential",
    uberParent: "DataSourceCredential",
    polymorphicDiscriminator:
      DataSourceCredential.type.polymorphicDiscriminator,
    modelProperties: {
      ...DataSourceCredential.type.modelProperties,
      parameters: {
        serializedName: "parameters",
        type: {
          name: "Composite",
          className: "ServicePrincipalInKVParam"
        }
      }
    }
  }
};

export const AzureSQLConnectionStringCredentialPatch: coreClient.CompositeMapper = {
  serializedName: "AzureSQLConnectionString",
  type: {
    name: "Composite",
    className: "AzureSQLConnectionStringCredentialPatch",
    uberParent: "DataSourceCredentialPatch",
    polymorphicDiscriminator:
      DataSourceCredentialPatch.type.polymorphicDiscriminator,
    modelProperties: {
      ...DataSourceCredentialPatch.type.modelProperties,
      parameters: {
        serializedName: "parameters",
        type: {
          name: "Composite",
          className: "AzureSQLConnectionStringParamPatch"
        }
      }
    }
  }
};

export const DataLakeGen2SharedKeyCredentialPatch: coreClient.CompositeMapper = {
  serializedName: "DataLakeGen2SharedKey",
  type: {
    name: "Composite",
    className: "DataLakeGen2SharedKeyCredentialPatch",
    uberParent: "DataSourceCredentialPatch",
    polymorphicDiscriminator:
      DataSourceCredentialPatch.type.polymorphicDiscriminator,
    modelProperties: {
      ...DataSourceCredentialPatch.type.modelProperties,
      parameters: {
        serializedName: "parameters",
        type: {
          name: "Composite",
          className: "DataLakeGen2SharedKeyParamPatch"
        }
      }
    }
  }
};

export const ServicePrincipalCredentialPatch: coreClient.CompositeMapper = {
  serializedName: "ServicePrincipal",
  type: {
    name: "Composite",
    className: "ServicePrincipalCredentialPatch",
    uberParent: "DataSourceCredentialPatch",
    polymorphicDiscriminator:
      DataSourceCredentialPatch.type.polymorphicDiscriminator,
    modelProperties: {
      ...DataSourceCredentialPatch.type.modelProperties,
      parameters: {
        serializedName: "parameters",
        type: {
          name: "Composite",
          className: "ServicePrincipalParamPatch"
        }
      }
    }
  }
};

export const ServicePrincipalInKVCredentialPatch: coreClient.CompositeMapper = {
  serializedName: "ServicePrincipalInKV",
  type: {
    name: "Composite",
    className: "ServicePrincipalInKVCredentialPatch",
    uberParent: "DataSourceCredentialPatch",
    polymorphicDiscriminator:
      DataSourceCredentialPatch.type.polymorphicDiscriminator,
    modelProperties: {
      ...DataSourceCredentialPatch.type.modelProperties,
      parameters: {
        serializedName: "parameters",
        type: {
          name: "Composite",
          className: "ServicePrincipalInKVParamPatch"
        }
      }
    }
  }
};

export const AzureApplicationInsightsDataFeed: coreClient.CompositeMapper = {
  serializedName: "AzureApplicationInsights",
  type: {
    name: "Composite",
    className: "AzureApplicationInsightsDataFeed",
    uberParent: "DataFeedDetail",
    polymorphicDiscriminator: DataFeedDetail.type.polymorphicDiscriminator,
    modelProperties: {
      ...DataFeedDetail.type.modelProperties,
      dataSourceParameter: {
        serializedName: "dataSourceParameter",
        type: {
          name: "Composite",
          className: "AzureApplicationInsightsParameter"
        }
      }
    }
  }
};

export const AzureBlobDataFeed: coreClient.CompositeMapper = {
  serializedName: "AzureBlob",
  type: {
    name: "Composite",
    className: "AzureBlobDataFeed",
    uberParent: "DataFeedDetail",
    polymorphicDiscriminator: DataFeedDetail.type.polymorphicDiscriminator,
    modelProperties: {
      ...DataFeedDetail.type.modelProperties,
      dataSourceParameter: {
        serializedName: "dataSourceParameter",
        type: {
          name: "Composite",
          className: "AzureBlobParameter"
        }
      }
    }
  }
};

export const AzureCosmosDBDataFeed: coreClient.CompositeMapper = {
  serializedName: "AzureCosmosDB",
  type: {
    name: "Composite",
    className: "AzureCosmosDBDataFeed",
    uberParent: "DataFeedDetail",
    polymorphicDiscriminator: DataFeedDetail.type.polymorphicDiscriminator,
    modelProperties: {
      ...DataFeedDetail.type.modelProperties,
      dataSourceParameter: {
        serializedName: "dataSourceParameter",
        type: {
          name: "Composite",
          className: "AzureCosmosDBParameter"
        }
      }
    }
  }
};

export const AzureDataExplorerDataFeed: coreClient.CompositeMapper = {
  serializedName: "AzureDataExplorer",
  type: {
    name: "Composite",
    className: "AzureDataExplorerDataFeed",
    uberParent: "DataFeedDetail",
    polymorphicDiscriminator: DataFeedDetail.type.polymorphicDiscriminator,
    modelProperties: {
      ...DataFeedDetail.type.modelProperties,
      dataSourceParameter: {
        serializedName: "dataSourceParameter",
        type: {
          name: "Composite",
          className: "SqlSourceParameter"
        }
      }
    }
  }
};

export const AzureDataLakeStorageGen2DataFeed: coreClient.CompositeMapper = {
  serializedName: "AzureDataLakeStorageGen2",
  type: {
    name: "Composite",
    className: "AzureDataLakeStorageGen2DataFeed",
    uberParent: "DataFeedDetail",
    polymorphicDiscriminator: DataFeedDetail.type.polymorphicDiscriminator,
    modelProperties: {
      ...DataFeedDetail.type.modelProperties,
      dataSourceParameter: {
        serializedName: "dataSourceParameter",
        type: {
          name: "Composite",
          className: "AzureDataLakeStorageGen2Parameter"
        }
      }
    }
  }
};

export const AzureEventHubsDataFeed: coreClient.CompositeMapper = {
  serializedName: "AzureEventHubs",
  type: {
    name: "Composite",
    className: "AzureEventHubsDataFeed",
    uberParent: "DataFeedDetail",
    polymorphicDiscriminator: DataFeedDetail.type.polymorphicDiscriminator,
    modelProperties: {
      ...DataFeedDetail.type.modelProperties,
      dataSourceParameter: {
        serializedName: "dataSourceParameter",
        type: {
          name: "Composite",
          className: "AzureEventHubsParameter"
        }
      }
    }
  }
};

export const AzureLogAnalyticsDataFeed: coreClient.CompositeMapper = {
  serializedName: "AzureLogAnalytics",
  type: {
    name: "Composite",
    className: "AzureLogAnalyticsDataFeed",
    uberParent: "DataFeedDetail",
    polymorphicDiscriminator: DataFeedDetail.type.polymorphicDiscriminator,
    modelProperties: {
      ...DataFeedDetail.type.modelProperties,
      dataSourceParameter: {
        serializedName: "dataSourceParameter",
        type: {
          name: "Composite",
          className: "AzureLogAnalyticsParameter"
        }
      }
    }
  }
};

export const AzureTableDataFeed: coreClient.CompositeMapper = {
  serializedName: "AzureTable",
  type: {
    name: "Composite",
    className: "AzureTableDataFeed",
    uberParent: "DataFeedDetail",
    polymorphicDiscriminator: DataFeedDetail.type.polymorphicDiscriminator,
    modelProperties: {
      ...DataFeedDetail.type.modelProperties,
      dataSourceParameter: {
        serializedName: "dataSourceParameter",
        type: {
          name: "Composite",
          className: "AzureTableParameter"
        }
      }
    }
  }
};

export const InfluxDBDataFeed: coreClient.CompositeMapper = {
  serializedName: "InfluxDB",
  type: {
    name: "Composite",
    className: "InfluxDBDataFeed",
    uberParent: "DataFeedDetail",
    polymorphicDiscriminator: DataFeedDetail.type.polymorphicDiscriminator,
    modelProperties: {
      ...DataFeedDetail.type.modelProperties,
      dataSourceParameter: {
        serializedName: "dataSourceParameter",
        type: {
          name: "Composite",
          className: "InfluxDBParameter"
        }
      }
    }
  }
};

export const MySqlDataFeed: coreClient.CompositeMapper = {
  serializedName: "MySql",
  type: {
    name: "Composite",
    className: "MySqlDataFeed",
    uberParent: "DataFeedDetail",
    polymorphicDiscriminator: DataFeedDetail.type.polymorphicDiscriminator,
    modelProperties: {
      ...DataFeedDetail.type.modelProperties,
      dataSourceParameter: {
        serializedName: "dataSourceParameter",
        type: {
          name: "Composite",
          className: "SqlSourceParameter"
        }
      }
    }
  }
};

export const PostgreSqlDataFeed: coreClient.CompositeMapper = {
  serializedName: "PostgreSql",
  type: {
    name: "Composite",
    className: "PostgreSqlDataFeed",
    uberParent: "DataFeedDetail",
    polymorphicDiscriminator: DataFeedDetail.type.polymorphicDiscriminator,
    modelProperties: {
      ...DataFeedDetail.type.modelProperties,
      dataSourceParameter: {
        serializedName: "dataSourceParameter",
        type: {
          name: "Composite",
          className: "SqlSourceParameter"
        }
      }
    }
  }
};

export const SQLServerDataFeed: coreClient.CompositeMapper = {
  serializedName: "SqlServer",
  type: {
    name: "Composite",
    className: "SQLServerDataFeed",
    uberParent: "DataFeedDetail",
    polymorphicDiscriminator: DataFeedDetail.type.polymorphicDiscriminator,
    modelProperties: {
      ...DataFeedDetail.type.modelProperties,
      dataSourceParameter: {
        serializedName: "dataSourceParameter",
        type: {
          name: "Composite",
          className: "SqlSourceParameter"
        }
      }
    }
  }
};

export const MongoDBDataFeed: coreClient.CompositeMapper = {
  serializedName: "MongoDB",
  type: {
    name: "Composite",
    className: "MongoDBDataFeed",
    uberParent: "DataFeedDetail",
    polymorphicDiscriminator: DataFeedDetail.type.polymorphicDiscriminator,
    modelProperties: {
      ...DataFeedDetail.type.modelProperties,
      dataSourceParameter: {
        serializedName: "dataSourceParameter",
        type: {
          name: "Composite",
          className: "MongoDBParameter"
        }
      }
    }
  }
};

export const AzureApplicationInsightsDataFeedPatch: coreClient.CompositeMapper = {
  serializedName: "AzureApplicationInsights",
  type: {
    name: "Composite",
    className: "AzureApplicationInsightsDataFeedPatch",
    uberParent: "DataFeedDetailPatch",
    polymorphicDiscriminator: DataFeedDetailPatch.type.polymorphicDiscriminator,
    modelProperties: {
      ...DataFeedDetailPatch.type.modelProperties,
      dataSourceParameter: {
        serializedName: "dataSourceParameter",
        type: {
          name: "Composite",
          className: "AzureApplicationInsightsParameterPatch"
        }
      }
    }
  }
};

export const AzureBlobDataFeedPatch: coreClient.CompositeMapper = {
  serializedName: "AzureBlob",
  type: {
    name: "Composite",
    className: "AzureBlobDataFeedPatch",
    uberParent: "DataFeedDetailPatch",
    polymorphicDiscriminator: DataFeedDetailPatch.type.polymorphicDiscriminator,
    modelProperties: {
      ...DataFeedDetailPatch.type.modelProperties,
      dataSourceParameter: {
        serializedName: "dataSourceParameter",
        type: {
          name: "Composite",
          className: "AzureBlobParameterPatch"
        }
      }
    }
  }
};

export const AzureCosmosDBDataFeedPatch: coreClient.CompositeMapper = {
  serializedName: "AzureCosmosDB",
  type: {
    name: "Composite",
    className: "AzureCosmosDBDataFeedPatch",
    uberParent: "DataFeedDetailPatch",
    polymorphicDiscriminator: DataFeedDetailPatch.type.polymorphicDiscriminator,
    modelProperties: {
      ...DataFeedDetailPatch.type.modelProperties,
      dataSourceParameter: {
        serializedName: "dataSourceParameter",
        type: {
          name: "Composite",
          className: "AzureCosmosDBParameterPatch"
        }
      }
    }
  }
};

export const AzureDataExplorerDataFeedPatch: coreClient.CompositeMapper = {
  serializedName: "AzureDataExplorer",
  type: {
    name: "Composite",
    className: "AzureDataExplorerDataFeedPatch",
    uberParent: "DataFeedDetailPatch",
    polymorphicDiscriminator: DataFeedDetailPatch.type.polymorphicDiscriminator,
    modelProperties: {
      ...DataFeedDetailPatch.type.modelProperties,
      dataSourceParameter: {
        serializedName: "dataSourceParameter",
        type: {
          name: "Composite",
          className: "SQLSourceParameterPatch"
        }
      }
    }
  }
};

export const AzureDataLakeStorageGen2DataFeedPatch: coreClient.CompositeMapper = {
  serializedName: "AzureDataLakeStorageGen2",
  type: {
    name: "Composite",
    className: "AzureDataLakeStorageGen2DataFeedPatch",
    uberParent: "DataFeedDetailPatch",
    polymorphicDiscriminator: DataFeedDetailPatch.type.polymorphicDiscriminator,
    modelProperties: {
      ...DataFeedDetailPatch.type.modelProperties,
      dataSourceParameter: {
        serializedName: "dataSourceParameter",
        type: {
          name: "Composite",
          className: "AzureDataLakeStorageGen2ParameterPatch"
        }
      }
    }
  }
};

export const AzureEventHubsDataFeedPatch: coreClient.CompositeMapper = {
  serializedName: "AzureEventHubs",
  type: {
    name: "Composite",
    className: "AzureEventHubsDataFeedPatch",
    uberParent: "DataFeedDetailPatch",
    polymorphicDiscriminator: DataFeedDetailPatch.type.polymorphicDiscriminator,
    modelProperties: {
      ...DataFeedDetailPatch.type.modelProperties,
      dataSourceParameter: {
        serializedName: "dataSourceParameter",
        type: {
          name: "Composite",
          className: "AzureEventHubsParameterPatch"
        }
      }
    }
  }
};

export const AzureLogAnalyticsDataFeedPatch: coreClient.CompositeMapper = {
  serializedName: "AzureLogAnalytics",
  type: {
    name: "Composite",
    className: "AzureLogAnalyticsDataFeedPatch",
    uberParent: "DataFeedDetailPatch",
    polymorphicDiscriminator: DataFeedDetailPatch.type.polymorphicDiscriminator,
    modelProperties: {
      ...DataFeedDetailPatch.type.modelProperties,
      dataSourceParameter: {
        serializedName: "dataSourceParameter",
        type: {
          name: "Composite",
          className: "AzureLogAnalyticsParameterPatch"
        }
      }
    }
  }
};

export const AzureTableDataFeedPatch: coreClient.CompositeMapper = {
  serializedName: "AzureTable",
  type: {
    name: "Composite",
    className: "AzureTableDataFeedPatch",
    uberParent: "DataFeedDetailPatch",
    polymorphicDiscriminator: DataFeedDetailPatch.type.polymorphicDiscriminator,
    modelProperties: {
      ...DataFeedDetailPatch.type.modelProperties,
      dataSourceParameter: {
        serializedName: "dataSourceParameter",
        type: {
          name: "Composite",
          className: "AzureTableParameterPatch"
        }
      }
    }
  }
};

export const InfluxDBDataFeedPatch: coreClient.CompositeMapper = {
  serializedName: "InfluxDB",
  type: {
    name: "Composite",
    className: "InfluxDBDataFeedPatch",
    uberParent: "DataFeedDetailPatch",
    polymorphicDiscriminator: DataFeedDetailPatch.type.polymorphicDiscriminator,
    modelProperties: {
      ...DataFeedDetailPatch.type.modelProperties,
      dataSourceParameter: {
        serializedName: "dataSourceParameter",
        type: {
          name: "Composite",
          className: "InfluxDBParameterPatch"
        }
      }
    }
  }
};

export const MySqlDataFeedPatch: coreClient.CompositeMapper = {
  serializedName: "MySql",
  type: {
    name: "Composite",
    className: "MySqlDataFeedPatch",
    uberParent: "DataFeedDetailPatch",
    polymorphicDiscriminator: DataFeedDetailPatch.type.polymorphicDiscriminator,
    modelProperties: {
      ...DataFeedDetailPatch.type.modelProperties,
      dataSourceParameter: {
        serializedName: "dataSourceParameter",
        type: {
          name: "Composite",
          className: "SQLSourceParameterPatch"
        }
      }
    }
  }
};

export const PostgreSqlDataFeedPatch: coreClient.CompositeMapper = {
  serializedName: "PostgreSql",
  type: {
    name: "Composite",
    className: "PostgreSqlDataFeedPatch",
    uberParent: "DataFeedDetailPatch",
    polymorphicDiscriminator: DataFeedDetailPatch.type.polymorphicDiscriminator,
    modelProperties: {
      ...DataFeedDetailPatch.type.modelProperties,
      dataSourceParameter: {
        serializedName: "dataSourceParameter",
        type: {
          name: "Composite",
          className: "SQLSourceParameterPatch"
        }
      }
    }
  }
};

export const SQLServerDataFeedPatch: coreClient.CompositeMapper = {
  serializedName: "SqlServer",
  type: {
    name: "Composite",
    className: "SQLServerDataFeedPatch",
    uberParent: "DataFeedDetailPatch",
    polymorphicDiscriminator: DataFeedDetailPatch.type.polymorphicDiscriminator,
    modelProperties: {
      ...DataFeedDetailPatch.type.modelProperties,
      dataSourceParameter: {
        serializedName: "dataSourceParameter",
        type: {
          name: "Composite",
          className: "SQLSourceParameterPatch"
        }
      }
    }
  }
};

export const MongoDBDataFeedPatch: coreClient.CompositeMapper = {
  serializedName: "MongoDB",
  type: {
    name: "Composite",
    className: "MongoDBDataFeedPatch",
    uberParent: "DataFeedDetailPatch",
    polymorphicDiscriminator: DataFeedDetailPatch.type.polymorphicDiscriminator,
    modelProperties: {
      ...DataFeedDetailPatch.type.modelProperties,
      dataSourceParameter: {
        serializedName: "dataSourceParameter",
        type: {
          name: "Composite",
          className: "MongoDBParameterPatch"
        }
      }
    }
  }
};

export const AnomalyFeedback: coreClient.CompositeMapper = {
  serializedName: "Anomaly",
  type: {
    name: "Composite",
    className: "AnomalyFeedback",
    uberParent: "MetricFeedback",
    polymorphicDiscriminator: MetricFeedback.type.polymorphicDiscriminator,
    modelProperties: {
      ...MetricFeedback.type.modelProperties,
      startTime: {
        serializedName: "startTime",
        required: true,
        type: {
          name: "DateTime"
        }
      },
      endTime: {
        serializedName: "endTime",
        required: true,
        type: {
          name: "DateTime"
        }
      },
      value: {
        serializedName: "value",
        type: {
          name: "Composite",
          className: "AnomalyFeedbackValue"
        }
      },
      anomalyDetectionConfigurationId: {
        serializedName: "anomalyDetectionConfigurationId",
        type: {
          name: "Uuid"
        }
      },
      anomalyDetectionConfigurationSnapshot: {
        serializedName: "anomalyDetectionConfigurationSnapshot",
        type: {
          name: "Composite",
          className: "AnomalyDetectionConfiguration"
        }
      }
    }
  }
};

export const ChangePointFeedback: coreClient.CompositeMapper = {
  serializedName: "ChangePoint",
  type: {
    name: "Composite",
    className: "ChangePointFeedback",
    uberParent: "MetricFeedback",
    polymorphicDiscriminator: MetricFeedback.type.polymorphicDiscriminator,
    modelProperties: {
      ...MetricFeedback.type.modelProperties,
      startTime: {
        serializedName: "startTime",
        required: true,
        type: {
          name: "DateTime"
        }
      },
      endTime: {
        serializedName: "endTime",
        required: true,
        type: {
          name: "DateTime"
        }
      },
      value: {
        serializedName: "value",
        type: {
          name: "Composite",
          className: "ChangePointFeedbackValue"
        }
      }
    }
  }
};

export const CommentFeedback: coreClient.CompositeMapper = {
  serializedName: "Comment",
  type: {
    name: "Composite",
    className: "CommentFeedback",
    uberParent: "MetricFeedback",
    polymorphicDiscriminator: MetricFeedback.type.polymorphicDiscriminator,
    modelProperties: {
      ...MetricFeedback.type.modelProperties,
      startTime: {
        serializedName: "startTime",
        type: {
          name: "DateTime"
        }
      },
      endTime: {
        serializedName: "endTime",
        type: {
          name: "DateTime"
        }
      },
      value: {
        serializedName: "value",
        type: {
          name: "Composite",
          className: "CommentFeedbackValue"
        }
      }
    }
  }
};

export const PeriodFeedback: coreClient.CompositeMapper = {
  serializedName: "Period",
  type: {
    name: "Composite",
    className: "PeriodFeedback",
    uberParent: "MetricFeedback",
    polymorphicDiscriminator: MetricFeedback.type.polymorphicDiscriminator,
    modelProperties: {
      ...MetricFeedback.type.modelProperties,
      value: {
        serializedName: "value",
        type: {
          name: "Composite",
          className: "PeriodFeedbackValue"
        }
      }
    }
  }
};

export const EmailHookInfo: coreClient.CompositeMapper = {
  serializedName: "Email",
  type: {
    name: "Composite",
    className: "EmailHookInfo",
    uberParent: "HookInfo",
    polymorphicDiscriminator: HookInfo.type.polymorphicDiscriminator,
    modelProperties: {
      ...HookInfo.type.modelProperties,
      hookParameter: {
        serializedName: "hookParameter",
        type: {
          name: "Composite",
          className: "EmailHookParameter"
        }
      }
    }
  }
};

export const WebhookHookInfo: coreClient.CompositeMapper = {
  serializedName: "Webhook",
  type: {
    name: "Composite",
    className: "WebhookHookInfo",
    uberParent: "HookInfo",
    polymorphicDiscriminator: HookInfo.type.polymorphicDiscriminator,
    modelProperties: {
      ...HookInfo.type.modelProperties,
      hookParameter: {
        serializedName: "hookParameter",
        type: {
          name: "Composite",
          className: "WebhookHookParameter"
        }
      }
    }
  }
};

export const EmailHookInfoPatch: coreClient.CompositeMapper = {
  serializedName: "Email",
  type: {
    name: "Composite",
    className: "EmailHookInfoPatch",
    uberParent: "HookInfoPatch",
    polymorphicDiscriminator: HookInfoPatch.type.polymorphicDiscriminator,
    modelProperties: {
      ...HookInfoPatch.type.modelProperties,
      hookParameter: {
        serializedName: "hookParameter",
        type: {
          name: "Composite",
          className: "EmailHookParameterPatch"
        }
      }
    }
  }
};

export const WebhookHookInfoPatch: coreClient.CompositeMapper = {
  serializedName: "Webhook",
  type: {
    name: "Composite",
    className: "WebhookHookInfoPatch",
    uberParent: "HookInfoPatch",
    polymorphicDiscriminator: HookInfoPatch.type.polymorphicDiscriminator,
    modelProperties: {
      ...HookInfoPatch.type.modelProperties,
      hookParameter: {
        serializedName: "hookParameter",
        type: {
          name: "Composite",
          className: "WebhookHookParameterPatch"
        }
      }
    }
  }
};

export const GeneratedClientCreateAnomalyAlertingConfigurationHeaders: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "GeneratedClientCreateAnomalyAlertingConfigurationHeaders",
    modelProperties: {
      location: {
        serializedName: "location",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const GeneratedClientCreateAnomalyDetectionConfigurationHeaders: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "GeneratedClientCreateAnomalyDetectionConfigurationHeaders",
    modelProperties: {
      location: {
        serializedName: "location",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const GeneratedClientCreateCredentialHeaders: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "GeneratedClientCreateCredentialHeaders",
    modelProperties: {
      location: {
        serializedName: "location",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const GeneratedClientCreateDataFeedHeaders: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "GeneratedClientCreateDataFeedHeaders",
    modelProperties: {
      location: {
        serializedName: "location",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const GeneratedClientCreateMetricFeedbackHeaders: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "GeneratedClientCreateMetricFeedbackHeaders",
    modelProperties: {
      location: {
        serializedName: "location",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const GeneratedClientCreateHookHeaders: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "GeneratedClientCreateHookHeaders",
    modelProperties: {
      location: {
        serializedName: "location",
        type: {
          name: "String"
        }
      }
    }
  }
};

export let discriminators = {
  DataSourceCredential: DataSourceCredential,
  DataSourceCredentialPatch: DataSourceCredentialPatch,
  DataFeedDetail: DataFeedDetail,
  DataFeedDetailPatch: DataFeedDetailPatch,
  MetricFeedback: MetricFeedback,
  HookInfo: HookInfo,
  HookInfoPatch: HookInfoPatch,
  "DataSourceCredential.AzureSQLConnectionString": AzureSQLConnectionStringCredential,
  "DataSourceCredential.DataLakeGen2SharedKey": DataLakeGen2SharedKeyCredential,
  "DataSourceCredential.ServicePrincipal": ServicePrincipalCredential,
  "DataSourceCredential.ServicePrincipalInKV": ServicePrincipalInKVCredential,
  "DataSourceCredentialPatch.AzureSQLConnectionString": AzureSQLConnectionStringCredentialPatch,
  "DataSourceCredentialPatch.DataLakeGen2SharedKey": DataLakeGen2SharedKeyCredentialPatch,
  "DataSourceCredentialPatch.ServicePrincipal": ServicePrincipalCredentialPatch,
  "DataSourceCredentialPatch.ServicePrincipalInKV": ServicePrincipalInKVCredentialPatch,
  "DataFeedDetail.AzureApplicationInsights": AzureApplicationInsightsDataFeed,
  "DataFeedDetail.AzureBlob": AzureBlobDataFeed,
  "DataFeedDetail.AzureCosmosDB": AzureCosmosDBDataFeed,
  "DataFeedDetail.AzureDataExplorer": AzureDataExplorerDataFeed,
  "DataFeedDetail.AzureDataLakeStorageGen2": AzureDataLakeStorageGen2DataFeed,
  "DataFeedDetail.AzureEventHubs": AzureEventHubsDataFeed,
  "DataFeedDetail.AzureLogAnalytics": AzureLogAnalyticsDataFeed,
  "DataFeedDetail.AzureTable": AzureTableDataFeed,
  "DataFeedDetail.InfluxDB": InfluxDBDataFeed,
  "DataFeedDetail.MySql": MySqlDataFeed,
  "DataFeedDetail.PostgreSql": PostgreSqlDataFeed,
  "DataFeedDetail.SqlServer": SQLServerDataFeed,
  "DataFeedDetail.MongoDB": MongoDBDataFeed,
  "DataFeedDetailPatch.AzureApplicationInsights": AzureApplicationInsightsDataFeedPatch,
  "DataFeedDetailPatch.AzureBlob": AzureBlobDataFeedPatch,
  "DataFeedDetailPatch.AzureCosmosDB": AzureCosmosDBDataFeedPatch,
  "DataFeedDetailPatch.AzureDataExplorer": AzureDataExplorerDataFeedPatch,
  "DataFeedDetailPatch.AzureDataLakeStorageGen2": AzureDataLakeStorageGen2DataFeedPatch,
  "DataFeedDetailPatch.AzureEventHubs": AzureEventHubsDataFeedPatch,
  "DataFeedDetailPatch.AzureLogAnalytics": AzureLogAnalyticsDataFeedPatch,
  "DataFeedDetailPatch.AzureTable": AzureTableDataFeedPatch,
  "DataFeedDetailPatch.InfluxDB": InfluxDBDataFeedPatch,
  "DataFeedDetailPatch.MySql": MySqlDataFeedPatch,
  "DataFeedDetailPatch.PostgreSql": PostgreSqlDataFeedPatch,
  "DataFeedDetailPatch.SqlServer": SQLServerDataFeedPatch,
  "DataFeedDetailPatch.MongoDB": MongoDBDataFeedPatch,
  "MetricFeedback.Anomaly": AnomalyFeedback,
  "MetricFeedback.ChangePoint": ChangePointFeedback,
  "MetricFeedback.Comment": CommentFeedback,
  "MetricFeedback.Period": PeriodFeedback,
  "HookInfo.Email": EmailHookInfo,
  "HookInfo.Webhook": WebhookHookInfo,
  "HookInfoPatch.Email": EmailHookInfoPatch,
  "HookInfoPatch.Webhook": WebhookHookInfoPatch
};
