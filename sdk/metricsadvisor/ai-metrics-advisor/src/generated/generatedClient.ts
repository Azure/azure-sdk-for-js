/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */

import * as coreClient from "@azure/core-client";
import * as Parameters from "./models/parameters";
import * as Mappers from "./models/mappers";
import { GeneratedClientContext } from "./generatedClientContext";
import {
  GeneratedClientOptionalParams,
  GeneratedClientGetActiveSeriesCountOptionalParams,
  GeneratedClientGetActiveSeriesCountResponse,
  GeneratedClientGetAnomalyAlertingConfigurationOptionalParams,
  GeneratedClientGetAnomalyAlertingConfigurationResponse,
  AnomalyAlertingConfigurationPatch,
  GeneratedClientUpdateAnomalyAlertingConfigurationOptionalParams,
  GeneratedClientUpdateAnomalyAlertingConfigurationResponse,
  GeneratedClientDeleteAnomalyAlertingConfigurationOptionalParams,
  AnomalyAlertingConfiguration,
  GeneratedClientCreateAnomalyAlertingConfigurationOptionalParams,
  GeneratedClientCreateAnomalyAlertingConfigurationResponse,
  AlertingResultQuery,
  GeneratedClientGetAlertsByAnomalyAlertingConfigurationOptionalParams,
  GeneratedClientGetAlertsByAnomalyAlertingConfigurationResponse,
  GeneratedClientGetAnomaliesFromAlertByAnomalyAlertingConfigurationOptionalParams,
  GeneratedClientGetAnomaliesFromAlertByAnomalyAlertingConfigurationResponse,
  GeneratedClientGetIncidentsFromAlertByAnomalyAlertingConfigurationOptionalParams,
  GeneratedClientGetIncidentsFromAlertByAnomalyAlertingConfigurationResponse,
  GeneratedClientGetAnomalyDetectionConfigurationOptionalParams,
  GeneratedClientGetAnomalyDetectionConfigurationResponse,
  AnomalyDetectionConfigurationPatch,
  GeneratedClientUpdateAnomalyDetectionConfigurationOptionalParams,
  GeneratedClientUpdateAnomalyDetectionConfigurationResponse,
  GeneratedClientDeleteAnomalyDetectionConfigurationOptionalParams,
  AnomalyDetectionConfiguration,
  GeneratedClientCreateAnomalyDetectionConfigurationOptionalParams,
  GeneratedClientCreateAnomalyDetectionConfigurationResponse,
  GeneratedClientGetAnomalyAlertingConfigurationsByAnomalyDetectionConfigurationOptionalParams,
  GeneratedClientGetAnomalyAlertingConfigurationsByAnomalyDetectionConfigurationResponse,
  DetectionSeriesQuery,
  GeneratedClientGetSeriesByAnomalyDetectionConfigurationOptionalParams,
  GeneratedClientGetSeriesByAnomalyDetectionConfigurationResponse,
  DetectionAnomalyResultQuery,
  GeneratedClientGetAnomaliesByAnomalyDetectionConfigurationOptionalParams,
  GeneratedClientGetAnomaliesByAnomalyDetectionConfigurationResponse,
  AnomalyDimensionQuery,
  GeneratedClientGetDimensionOfAnomaliesByAnomalyDetectionConfigurationOptionalParams,
  GeneratedClientGetDimensionOfAnomaliesByAnomalyDetectionConfigurationResponse,
  DetectionIncidentResultQuery,
  GeneratedClientGetIncidentsByAnomalyDetectionConfigurationOptionalParams,
  GeneratedClientGetIncidentsByAnomalyDetectionConfigurationResponse,
  GeneratedClientGetIncidentsByAnomalyDetectionConfigurationNextPagesOptionalParams,
  GeneratedClientGetIncidentsByAnomalyDetectionConfigurationNextPagesResponse,
  GeneratedClientGetRootCauseOfIncidentByAnomalyDetectionConfigurationOptionalParams,
  GeneratedClientGetRootCauseOfIncidentByAnomalyDetectionConfigurationResponse,
  DataSourceCredentialUnion,
  GeneratedClientCreateCredentialOptionalParams,
  GeneratedClientCreateCredentialResponse,
  GeneratedClientListCredentialsOptionalParams,
  GeneratedClientListCredentialsResponse,
  DataSourceCredentialPatchUnion,
  GeneratedClientUpdateCredentialOptionalParams,
  GeneratedClientUpdateCredentialResponse,
  GeneratedClientDeleteCredentialOptionalParams,
  GeneratedClientGetCredentialOptionalParams,
  GeneratedClientGetCredentialResponse,
  GeneratedClientListDataFeedsOptionalParams,
  GeneratedClientListDataFeedsResponse,
  DataFeedDetailUnion,
  GeneratedClientCreateDataFeedOptionalParams,
  GeneratedClientCreateDataFeedResponse,
  GeneratedClientGetDataFeedByIdOptionalParams,
  GeneratedClientGetDataFeedByIdResponse,
  DataFeedDetailPatchUnion,
  GeneratedClientUpdateDataFeedOptionalParams,
  GeneratedClientUpdateDataFeedResponse,
  GeneratedClientDeleteDataFeedOptionalParams,
  GeneratedClientGetMetricFeedbackOptionalParams,
  GeneratedClientGetMetricFeedbackResponse,
  MetricFeedbackFilter,
  GeneratedClientListMetricFeedbacksOptionalParams,
  GeneratedClientListMetricFeedbacksResponse,
  MetricFeedbackUnion,
  GeneratedClientCreateMetricFeedbackOptionalParams,
  GeneratedClientCreateMetricFeedbackResponse,
  GeneratedClientListHooksOptionalParams,
  GeneratedClientListHooksResponse,
  HookInfoUnion,
  GeneratedClientCreateHookOptionalParams,
  GeneratedClientCreateHookResponse,
  GeneratedClientGetHookOptionalParams,
  GeneratedClientGetHookResponse,
  HookInfoPatchUnion,
  GeneratedClientUpdateHookOptionalParams,
  GeneratedClientUpdateHookResponse,
  GeneratedClientDeleteHookOptionalParams,
  IngestionStatusQueryOptions,
  GeneratedClientGetDataFeedIngestionStatusOptionalParams,
  GeneratedClientGetDataFeedIngestionStatusResponse,
  IngestionProgressResetOptions,
  GeneratedClientResetDataFeedIngestionStatusOptionalParams,
  GeneratedClientGetIngestionProgressOptionalParams,
  GeneratedClientGetIngestionProgressResponse,
  MetricDataQueryOptions,
  GeneratedClientGetMetricDataOptionalParams,
  GeneratedClientGetMetricDataResponse,
  MetricSeriesQueryOptions,
  GeneratedClientGetMetricSeriesOptionalParams,
  GeneratedClientGetMetricSeriesResponse,
  MetricDimensionQueryOptions,
  GeneratedClientGetMetricDimensionOptionalParams,
  GeneratedClientGetMetricDimensionResponse,
  GeneratedClientGetAnomalyDetectionConfigurationsByMetricOptionalParams,
  GeneratedClientGetAnomalyDetectionConfigurationsByMetricResponse,
  EnrichmentStatusQueryOption,
  GeneratedClientGetEnrichmentStatusByMetricOptionalParams,
  GeneratedClientGetEnrichmentStatusByMetricResponse,
  GeneratedClientGetAlertsByAnomalyAlertingConfigurationNextOptionalParams,
  GeneratedClientGetAlertsByAnomalyAlertingConfigurationNextResponse,
  GeneratedClientGetAnomaliesByAnomalyDetectionConfigurationNextOptionalParams,
  GeneratedClientGetAnomaliesByAnomalyDetectionConfigurationNextResponse,
  GeneratedClientGetDimensionOfAnomaliesByAnomalyDetectionConfigurationNextOptionalParams,
  GeneratedClientGetDimensionOfAnomaliesByAnomalyDetectionConfigurationNextResponse,
  GeneratedClientListMetricFeedbacksNextOptionalParams,
  GeneratedClientListMetricFeedbacksNextResponse,
  GeneratedClientGetDataFeedIngestionStatusNextOptionalParams,
  GeneratedClientGetDataFeedIngestionStatusNextResponse,
  GeneratedClientGetMetricSeriesNextOptionalParams,
  GeneratedClientGetMetricSeriesNextResponse,
  GeneratedClientGetMetricDimensionNextOptionalParams,
  GeneratedClientGetMetricDimensionNextResponse,
  GeneratedClientGetEnrichmentStatusByMetricNextOptionalParams,
  GeneratedClientGetEnrichmentStatusByMetricNextResponse,
  GeneratedClientGetAnomaliesFromAlertByAnomalyAlertingConfigurationNextOptionalParams,
  GeneratedClientGetAnomaliesFromAlertByAnomalyAlertingConfigurationNextResponse,
  GeneratedClientGetIncidentsFromAlertByAnomalyAlertingConfigurationNextOptionalParams,
  GeneratedClientGetIncidentsFromAlertByAnomalyAlertingConfigurationNextResponse,
  GeneratedClientGetAnomalyAlertingConfigurationsByAnomalyDetectionConfigurationNextOptionalParams,
  GeneratedClientGetAnomalyAlertingConfigurationsByAnomalyDetectionConfigurationNextResponse,
  GeneratedClientGetIncidentsByAnomalyDetectionConfigurationNextOptionalParams,
  GeneratedClientGetIncidentsByAnomalyDetectionConfigurationNextResponse,
  GeneratedClientGetIncidentsByAnomalyDetectionConfigurationNextPagesNextOptionalParams,
  GeneratedClientGetIncidentsByAnomalyDetectionConfigurationNextPagesNextResponse,
  GeneratedClientListCredentialsNextOptionalParams,
  GeneratedClientListCredentialsNextResponse,
  GeneratedClientListDataFeedsNextOptionalParams,
  GeneratedClientListDataFeedsNextResponse,
  GeneratedClientListHooksNextOptionalParams,
  GeneratedClientListHooksNextResponse,
  GeneratedClientGetAnomalyDetectionConfigurationsByMetricNextOptionalParams,
  GeneratedClientGetAnomalyDetectionConfigurationsByMetricNextResponse
} from "./models";

/** @internal */
export class GeneratedClient extends GeneratedClientContext {
  /**
   * Initializes a new instance of the GeneratedClient class.
   * @param endpoint Supported Cognitive Services endpoints (protocol and hostname, for example:
   *                 https://<resource-name>.cognitiveservices.azure.com).
   * @param options The parameter options
   */
  constructor(endpoint: string, options?: GeneratedClientOptionalParams) {
    super(endpoint, options);
  }

  /**
   * Get latest usage stats
   * @param options The options parameters.
   */
  getActiveSeriesCount(
    options?: GeneratedClientGetActiveSeriesCountOptionalParams
  ): Promise<GeneratedClientGetActiveSeriesCountResponse> {
    return this.sendOperationRequest(
      { options },
      getActiveSeriesCountOperationSpec
    );
  }

  /**
   * Query a single anomaly alerting configuration
   * @param configurationId anomaly alerting configuration unique id
   * @param options The options parameters.
   */
  getAnomalyAlertingConfiguration(
    configurationId: string,
    options?: GeneratedClientGetAnomalyAlertingConfigurationOptionalParams
  ): Promise<GeneratedClientGetAnomalyAlertingConfigurationResponse> {
    return this.sendOperationRequest(
      { configurationId, options },
      getAnomalyAlertingConfigurationOperationSpec
    );
  }

  /**
   * Update anomaly alerting configuration
   * @param configurationId anomaly alerting configuration unique id
   * @param body anomaly alerting configuration
   * @param options The options parameters.
   */
  updateAnomalyAlertingConfiguration(
    configurationId: string,
    body: AnomalyAlertingConfigurationPatch,
    options?: GeneratedClientUpdateAnomalyAlertingConfigurationOptionalParams
  ): Promise<GeneratedClientUpdateAnomalyAlertingConfigurationResponse> {
    return this.sendOperationRequest(
      { configurationId, body, options },
      updateAnomalyAlertingConfigurationOperationSpec
    );
  }

  /**
   * Delete anomaly alerting configuration
   * @param configurationId anomaly alerting configuration unique id
   * @param options The options parameters.
   */
  deleteAnomalyAlertingConfiguration(
    configurationId: string,
    options?: GeneratedClientDeleteAnomalyAlertingConfigurationOptionalParams
  ): Promise<void> {
    return this.sendOperationRequest(
      { configurationId, options },
      deleteAnomalyAlertingConfigurationOperationSpec
    );
  }

  /**
   * Create anomaly alerting configuration
   * @param body anomaly alerting configuration
   * @param options The options parameters.
   */
  createAnomalyAlertingConfiguration(
    body: AnomalyAlertingConfiguration,
    options?: GeneratedClientCreateAnomalyAlertingConfigurationOptionalParams
  ): Promise<GeneratedClientCreateAnomalyAlertingConfigurationResponse> {
    return this.sendOperationRequest(
      { body, options },
      createAnomalyAlertingConfigurationOperationSpec
    );
  }

  /**
   * Query alerts under anomaly alerting configuration
   * @param configurationId anomaly alerting configuration unique id
   * @param body query alerting result request
   * @param options The options parameters.
   */
  getAlertsByAnomalyAlertingConfiguration(
    configurationId: string,
    body: AlertingResultQuery,
    options?: GeneratedClientGetAlertsByAnomalyAlertingConfigurationOptionalParams
  ): Promise<GeneratedClientGetAlertsByAnomalyAlertingConfigurationResponse> {
    return this.sendOperationRequest(
      { configurationId, body, options },
      getAlertsByAnomalyAlertingConfigurationOperationSpec
    );
  }

  /**
   * Query anomalies under a specific alert
   * @param configurationId anomaly alerting configuration unique id
   * @param alertId alert id
   * @param options The options parameters.
   */
  getAnomaliesFromAlertByAnomalyAlertingConfiguration(
    configurationId: string,
    alertId: string,
    options?: GeneratedClientGetAnomaliesFromAlertByAnomalyAlertingConfigurationOptionalParams
  ): Promise<
    GeneratedClientGetAnomaliesFromAlertByAnomalyAlertingConfigurationResponse
  > {
    return this.sendOperationRequest(
      { configurationId, alertId, options },
      getAnomaliesFromAlertByAnomalyAlertingConfigurationOperationSpec
    );
  }

  /**
   * Query incidents under a specific alert
   * @param configurationId anomaly alerting configuration unique id
   * @param alertId alert id
   * @param options The options parameters.
   */
  getIncidentsFromAlertByAnomalyAlertingConfiguration(
    configurationId: string,
    alertId: string,
    options?: GeneratedClientGetIncidentsFromAlertByAnomalyAlertingConfigurationOptionalParams
  ): Promise<
    GeneratedClientGetIncidentsFromAlertByAnomalyAlertingConfigurationResponse
  > {
    return this.sendOperationRequest(
      { configurationId, alertId, options },
      getIncidentsFromAlertByAnomalyAlertingConfigurationOperationSpec
    );
  }

  /**
   * Query a single anomaly detection configuration
   * @param configurationId anomaly detection configuration unique id
   * @param options The options parameters.
   */
  getAnomalyDetectionConfiguration(
    configurationId: string,
    options?: GeneratedClientGetAnomalyDetectionConfigurationOptionalParams
  ): Promise<GeneratedClientGetAnomalyDetectionConfigurationResponse> {
    return this.sendOperationRequest(
      { configurationId, options },
      getAnomalyDetectionConfigurationOperationSpec
    );
  }

  /**
   * Update anomaly detection configuration
   * @param configurationId anomaly detection configuration unique id
   * @param body anomaly detection configuration
   * @param options The options parameters.
   */
  updateAnomalyDetectionConfiguration(
    configurationId: string,
    body: AnomalyDetectionConfigurationPatch,
    options?: GeneratedClientUpdateAnomalyDetectionConfigurationOptionalParams
  ): Promise<GeneratedClientUpdateAnomalyDetectionConfigurationResponse> {
    return this.sendOperationRequest(
      { configurationId, body, options },
      updateAnomalyDetectionConfigurationOperationSpec
    );
  }

  /**
   * Delete anomaly detection configuration
   * @param configurationId anomaly detection configuration unique id
   * @param options The options parameters.
   */
  deleteAnomalyDetectionConfiguration(
    configurationId: string,
    options?: GeneratedClientDeleteAnomalyDetectionConfigurationOptionalParams
  ): Promise<void> {
    return this.sendOperationRequest(
      { configurationId, options },
      deleteAnomalyDetectionConfigurationOperationSpec
    );
  }

  /**
   * Create anomaly detection configuration
   * @param body anomaly detection configuration
   * @param options The options parameters.
   */
  createAnomalyDetectionConfiguration(
    body: AnomalyDetectionConfiguration,
    options?: GeneratedClientCreateAnomalyDetectionConfigurationOptionalParams
  ): Promise<GeneratedClientCreateAnomalyDetectionConfigurationResponse> {
    return this.sendOperationRequest(
      { body, options },
      createAnomalyDetectionConfigurationOperationSpec
    );
  }

  /**
   * List all anomaly alerting configurations for specific anomaly detection configuration
   * @param configurationId anomaly detection configuration unique id
   * @param options The options parameters.
   */
  getAnomalyAlertingConfigurationsByAnomalyDetectionConfiguration(
    configurationId: string,
    options?: GeneratedClientGetAnomalyAlertingConfigurationsByAnomalyDetectionConfigurationOptionalParams
  ): Promise<
    GeneratedClientGetAnomalyAlertingConfigurationsByAnomalyDetectionConfigurationResponse
  > {
    return this.sendOperationRequest(
      { configurationId, options },
      getAnomalyAlertingConfigurationsByAnomalyDetectionConfigurationOperationSpec
    );
  }

  /**
   * Query series enriched by anomaly detection
   * @param configurationId anomaly detection configuration unique id
   * @param body query series detection result request
   * @param options The options parameters.
   */
  getSeriesByAnomalyDetectionConfiguration(
    configurationId: string,
    body: DetectionSeriesQuery,
    options?: GeneratedClientGetSeriesByAnomalyDetectionConfigurationOptionalParams
  ): Promise<GeneratedClientGetSeriesByAnomalyDetectionConfigurationResponse> {
    return this.sendOperationRequest(
      { configurationId, body, options },
      getSeriesByAnomalyDetectionConfigurationOperationSpec
    );
  }

  /**
   * Query anomalies under anomaly detection configuration
   * @param configurationId anomaly detection configuration unique id
   * @param body query detection anomaly result request
   * @param options The options parameters.
   */
  getAnomaliesByAnomalyDetectionConfiguration(
    configurationId: string,
    body: DetectionAnomalyResultQuery,
    options?: GeneratedClientGetAnomaliesByAnomalyDetectionConfigurationOptionalParams
  ): Promise<
    GeneratedClientGetAnomaliesByAnomalyDetectionConfigurationResponse
  > {
    return this.sendOperationRequest(
      { configurationId, body, options },
      getAnomaliesByAnomalyDetectionConfigurationOperationSpec
    );
  }

  /**
   * Query dimension values of anomalies
   * @param configurationId anomaly detection configuration unique id
   * @param body query dimension values request
   * @param options The options parameters.
   */
  getDimensionOfAnomaliesByAnomalyDetectionConfiguration(
    configurationId: string,
    body: AnomalyDimensionQuery,
    options?: GeneratedClientGetDimensionOfAnomaliesByAnomalyDetectionConfigurationOptionalParams
  ): Promise<
    GeneratedClientGetDimensionOfAnomaliesByAnomalyDetectionConfigurationResponse
  > {
    return this.sendOperationRequest(
      { configurationId, body, options },
      getDimensionOfAnomaliesByAnomalyDetectionConfigurationOperationSpec
    );
  }

  /**
   * Query incidents under anomaly detection configuration
   * @param configurationId anomaly detection configuration unique id
   * @param body query detection incident result request
   * @param options The options parameters.
   */
  getIncidentsByAnomalyDetectionConfiguration(
    configurationId: string,
    body: DetectionIncidentResultQuery,
    options?: GeneratedClientGetIncidentsByAnomalyDetectionConfigurationOptionalParams
  ): Promise<
    GeneratedClientGetIncidentsByAnomalyDetectionConfigurationResponse
  > {
    return this.sendOperationRequest(
      { configurationId, body, options },
      getIncidentsByAnomalyDetectionConfigurationOperationSpec
    );
  }

  /**
   * Query incidents under anomaly detection configuration
   * @param configurationId anomaly detection configuration unique id
   * @param options The options parameters.
   */
  getIncidentsByAnomalyDetectionConfigurationNextPages(
    configurationId: string,
    options?: GeneratedClientGetIncidentsByAnomalyDetectionConfigurationNextPagesOptionalParams
  ): Promise<
    GeneratedClientGetIncidentsByAnomalyDetectionConfigurationNextPagesResponse
  > {
    return this.sendOperationRequest(
      { configurationId, options },
      getIncidentsByAnomalyDetectionConfigurationNextPagesOperationSpec
    );
  }

  /**
   * Query root cause for incident
   * @param configurationId anomaly detection configuration unique id
   * @param incidentId incident id
   * @param options The options parameters.
   */
  getRootCauseOfIncidentByAnomalyDetectionConfiguration(
    configurationId: string,
    incidentId: string,
    options?: GeneratedClientGetRootCauseOfIncidentByAnomalyDetectionConfigurationOptionalParams
  ): Promise<
    GeneratedClientGetRootCauseOfIncidentByAnomalyDetectionConfigurationResponse
  > {
    return this.sendOperationRequest(
      { configurationId, incidentId, options },
      getRootCauseOfIncidentByAnomalyDetectionConfigurationOperationSpec
    );
  }

  /**
   * Create a new data source credential
   * @param body Create data source credential request
   * @param options The options parameters.
   */
  createCredential(
    body: DataSourceCredentialUnion,
    options?: GeneratedClientCreateCredentialOptionalParams
  ): Promise<GeneratedClientCreateCredentialResponse> {
    return this.sendOperationRequest(
      { body, options },
      createCredentialOperationSpec
    );
  }

  /**
   * List all credentials
   * @param options The options parameters.
   */
  listCredentials(
    options?: GeneratedClientListCredentialsOptionalParams
  ): Promise<GeneratedClientListCredentialsResponse> {
    return this.sendOperationRequest({ options }, listCredentialsOperationSpec);
  }

  /**
   * Update a data source credential
   * @param credentialId Data source credential unique ID
   * @param body Update data source credential request
   * @param options The options parameters.
   */
  updateCredential(
    credentialId: string,
    body: DataSourceCredentialPatchUnion,
    options?: GeneratedClientUpdateCredentialOptionalParams
  ): Promise<GeneratedClientUpdateCredentialResponse> {
    return this.sendOperationRequest(
      { credentialId, body, options },
      updateCredentialOperationSpec
    );
  }

  /**
   * Delete a data source credential
   * @param credentialId Data source credential unique ID
   * @param options The options parameters.
   */
  deleteCredential(
    credentialId: string,
    options?: GeneratedClientDeleteCredentialOptionalParams
  ): Promise<void> {
    return this.sendOperationRequest(
      { credentialId, options },
      deleteCredentialOperationSpec
    );
  }

  /**
   * Get a data source credential
   * @param credentialId Data source credential unique ID
   * @param options The options parameters.
   */
  getCredential(
    credentialId: string,
    options?: GeneratedClientGetCredentialOptionalParams
  ): Promise<GeneratedClientGetCredentialResponse> {
    return this.sendOperationRequest(
      { credentialId, options },
      getCredentialOperationSpec
    );
  }

  /**
   * List all data feeds
   * @param options The options parameters.
   */
  listDataFeeds(
    options?: GeneratedClientListDataFeedsOptionalParams
  ): Promise<GeneratedClientListDataFeedsResponse> {
    return this.sendOperationRequest({ options }, listDataFeedsOperationSpec);
  }

  /**
   * Create a new data feed
   * @param body parameters to create a data feed
   * @param options The options parameters.
   */
  createDataFeed(
    body: DataFeedDetailUnion,
    options?: GeneratedClientCreateDataFeedOptionalParams
  ): Promise<GeneratedClientCreateDataFeedResponse> {
    return this.sendOperationRequest(
      { body, options },
      createDataFeedOperationSpec
    );
  }

  /**
   * Get a data feed by its id
   * @param dataFeedId The data feed unique id
   * @param options The options parameters.
   */
  getDataFeedById(
    dataFeedId: string,
    options?: GeneratedClientGetDataFeedByIdOptionalParams
  ): Promise<GeneratedClientGetDataFeedByIdResponse> {
    return this.sendOperationRequest(
      { dataFeedId, options },
      getDataFeedByIdOperationSpec
    );
  }

  /**
   * Update a data feed
   * @param dataFeedId The data feed unique id
   * @param body parameters to update a data feed
   * @param options The options parameters.
   */
  updateDataFeed(
    dataFeedId: string,
    body: DataFeedDetailPatchUnion,
    options?: GeneratedClientUpdateDataFeedOptionalParams
  ): Promise<GeneratedClientUpdateDataFeedResponse> {
    return this.sendOperationRequest(
      { dataFeedId, body, options },
      updateDataFeedOperationSpec
    );
  }

  /**
   * Delete a data feed
   * @param dataFeedId The data feed unique id
   * @param options The options parameters.
   */
  deleteDataFeed(
    dataFeedId: string,
    options?: GeneratedClientDeleteDataFeedOptionalParams
  ): Promise<void> {
    return this.sendOperationRequest(
      { dataFeedId, options },
      deleteDataFeedOperationSpec
    );
  }

  /**
   * Get a metric feedback by its id
   * @param feedbackId the unique feedback ID
   * @param options The options parameters.
   */
  getMetricFeedback(
    feedbackId: string,
    options?: GeneratedClientGetMetricFeedbackOptionalParams
  ): Promise<GeneratedClientGetMetricFeedbackResponse> {
    return this.sendOperationRequest(
      { feedbackId, options },
      getMetricFeedbackOperationSpec
    );
  }

  /**
   * List feedback on the given metric
   * @param body metric feedback filter
   * @param options The options parameters.
   */
  listMetricFeedbacks(
    body: MetricFeedbackFilter,
    options?: GeneratedClientListMetricFeedbacksOptionalParams
  ): Promise<GeneratedClientListMetricFeedbacksResponse> {
    return this.sendOperationRequest(
      { body, options },
      listMetricFeedbacksOperationSpec
    );
  }

  /**
   * Create a new metric feedback
   * @param body metric feedback
   * @param options The options parameters.
   */
  createMetricFeedback(
    body: MetricFeedbackUnion,
    options?: GeneratedClientCreateMetricFeedbackOptionalParams
  ): Promise<GeneratedClientCreateMetricFeedbackResponse> {
    return this.sendOperationRequest(
      { body, options },
      createMetricFeedbackOperationSpec
    );
  }

  /**
   * List all hooks
   * @param options The options parameters.
   */
  listHooks(
    options?: GeneratedClientListHooksOptionalParams
  ): Promise<GeneratedClientListHooksResponse> {
    return this.sendOperationRequest({ options }, listHooksOperationSpec);
  }

  /**
   * Create a new hook
   * @param body Create hook request
   * @param options The options parameters.
   */
  createHook(
    body: HookInfoUnion,
    options?: GeneratedClientCreateHookOptionalParams
  ): Promise<GeneratedClientCreateHookResponse> {
    return this.sendOperationRequest(
      { body, options },
      createHookOperationSpec
    );
  }

  /**
   * Get a hook by its id
   * @param hookId Hook unique ID
   * @param options The options parameters.
   */
  getHook(
    hookId: string,
    options?: GeneratedClientGetHookOptionalParams
  ): Promise<GeneratedClientGetHookResponse> {
    return this.sendOperationRequest({ hookId, options }, getHookOperationSpec);
  }

  /**
   * Update a hook
   * @param hookId Hook unique ID
   * @param body Update hook request
   * @param options The options parameters.
   */
  updateHook(
    hookId: string,
    body: HookInfoPatchUnion,
    options?: GeneratedClientUpdateHookOptionalParams
  ): Promise<GeneratedClientUpdateHookResponse> {
    return this.sendOperationRequest(
      { hookId, body, options },
      updateHookOperationSpec
    );
  }

  /**
   * Delete a hook
   * @param hookId Hook unique ID
   * @param options The options parameters.
   */
  deleteHook(
    hookId: string,
    options?: GeneratedClientDeleteHookOptionalParams
  ): Promise<void> {
    return this.sendOperationRequest(
      { hookId, options },
      deleteHookOperationSpec
    );
  }

  /**
   * Get data ingestion status by data feed
   * @param dataFeedId The data feed unique id
   * @param body The query time range
   * @param options The options parameters.
   */
  getDataFeedIngestionStatus(
    dataFeedId: string,
    body: IngestionStatusQueryOptions,
    options?: GeneratedClientGetDataFeedIngestionStatusOptionalParams
  ): Promise<GeneratedClientGetDataFeedIngestionStatusResponse> {
    return this.sendOperationRequest(
      { dataFeedId, body, options },
      getDataFeedIngestionStatusOperationSpec
    );
  }

  /**
   * Reset data ingestion status by data feed to backfill data
   * @param dataFeedId The data feed unique id
   * @param body The backfill time range
   * @param options The options parameters.
   */
  resetDataFeedIngestionStatus(
    dataFeedId: string,
    body: IngestionProgressResetOptions,
    options?: GeneratedClientResetDataFeedIngestionStatusOptionalParams
  ): Promise<void> {
    return this.sendOperationRequest(
      { dataFeedId, body, options },
      resetDataFeedIngestionStatusOperationSpec
    );
  }

  /**
   * Get data last success ingestion job timestamp by data feed
   * @param dataFeedId The data feed unique id
   * @param options The options parameters.
   */
  getIngestionProgress(
    dataFeedId: string,
    options?: GeneratedClientGetIngestionProgressOptionalParams
  ): Promise<GeneratedClientGetIngestionProgressResponse> {
    return this.sendOperationRequest(
      { dataFeedId, options },
      getIngestionProgressOperationSpec
    );
  }

  /**
   * Get time series data from metric
   * @param metricId metric unique id
   * @param body query time series data condition
   * @param options The options parameters.
   */
  getMetricData(
    metricId: string,
    body: MetricDataQueryOptions,
    options?: GeneratedClientGetMetricDataOptionalParams
  ): Promise<GeneratedClientGetMetricDataResponse> {
    return this.sendOperationRequest(
      { metricId, body, options },
      getMetricDataOperationSpec
    );
  }

  /**
   * List series (dimension combinations) from metric
   * @param metricId metric unique id
   * @param body filter to query series
   * @param options The options parameters.
   */
  getMetricSeries(
    metricId: string,
    body: MetricSeriesQueryOptions,
    options?: GeneratedClientGetMetricSeriesOptionalParams
  ): Promise<GeneratedClientGetMetricSeriesResponse> {
    return this.sendOperationRequest(
      { metricId, body, options },
      getMetricSeriesOperationSpec
    );
  }

  /**
   * List dimension from certain metric
   * @param metricId metric unique id
   * @param body query dimension option
   * @param options The options parameters.
   */
  getMetricDimension(
    metricId: string,
    body: MetricDimensionQueryOptions,
    options?: GeneratedClientGetMetricDimensionOptionalParams
  ): Promise<GeneratedClientGetMetricDimensionResponse> {
    return this.sendOperationRequest(
      { metricId, body, options },
      getMetricDimensionOperationSpec
    );
  }

  /**
   * List all anomaly detection configurations for specific metric
   * @param metricId metric unique id
   * @param options The options parameters.
   */
  getAnomalyDetectionConfigurationsByMetric(
    metricId: string,
    options?: GeneratedClientGetAnomalyDetectionConfigurationsByMetricOptionalParams
  ): Promise<GeneratedClientGetAnomalyDetectionConfigurationsByMetricResponse> {
    return this.sendOperationRequest(
      { metricId, options },
      getAnomalyDetectionConfigurationsByMetricOperationSpec
    );
  }

  /**
   * Query anomaly detection status
   * @param metricId metric unique id
   * @param body query options
   * @param options The options parameters.
   */
  getEnrichmentStatusByMetric(
    metricId: string,
    body: EnrichmentStatusQueryOption,
    options?: GeneratedClientGetEnrichmentStatusByMetricOptionalParams
  ): Promise<GeneratedClientGetEnrichmentStatusByMetricResponse> {
    return this.sendOperationRequest(
      { metricId, body, options },
      getEnrichmentStatusByMetricOperationSpec
    );
  }

  /**
   * Query alerts under anomaly alerting configuration
   * @param nextLink the next link
   * @param body query alerting result request
   * @param options The options parameters.
   */
  getAlertsByAnomalyAlertingConfigurationNext(
    nextLink: string,
    body: AlertingResultQuery,
    options?: GeneratedClientGetAlertsByAnomalyAlertingConfigurationNextOptionalParams
  ): Promise<
    GeneratedClientGetAlertsByAnomalyAlertingConfigurationNextResponse
  > {
    return this.sendOperationRequest(
      { nextLink, body, options },
      getAlertsByAnomalyAlertingConfigurationNextOperationSpec
    );
  }

  /**
   * Query anomalies under anomaly detection configuration
   * @param nextLink the next link
   * @param body query detection anomaly result request
   * @param options The options parameters.
   */
  getAnomaliesByAnomalyDetectionConfigurationNext(
    nextLink: string,
    body: DetectionAnomalyResultQuery,
    options?: GeneratedClientGetAnomaliesByAnomalyDetectionConfigurationNextOptionalParams
  ): Promise<
    GeneratedClientGetAnomaliesByAnomalyDetectionConfigurationNextResponse
  > {
    return this.sendOperationRequest(
      { nextLink, body, options },
      getAnomaliesByAnomalyDetectionConfigurationNextOperationSpec
    );
  }

  /**
   * Query dimension values of anomalies
   * @param nextLink the next link
   * @param body query dimension values request
   * @param options The options parameters.
   */
  getDimensionOfAnomaliesByAnomalyDetectionConfigurationNext(
    nextLink: string,
    body: AnomalyDimensionQuery,
    options?: GeneratedClientGetDimensionOfAnomaliesByAnomalyDetectionConfigurationNextOptionalParams
  ): Promise<
    GeneratedClientGetDimensionOfAnomaliesByAnomalyDetectionConfigurationNextResponse
  > {
    return this.sendOperationRequest(
      { nextLink, body, options },
      getDimensionOfAnomaliesByAnomalyDetectionConfigurationNextOperationSpec
    );
  }

  /**
   * List feedback on the given metric
   * @param nextLink the next link
   * @param body metric feedback filter
   * @param options The options parameters.
   */
  listMetricFeedbacksNext(
    nextLink: string,
    body: MetricFeedbackFilter,
    options?: GeneratedClientListMetricFeedbacksNextOptionalParams
  ): Promise<GeneratedClientListMetricFeedbacksNextResponse> {
    return this.sendOperationRequest(
      { nextLink, body, options },
      listMetricFeedbacksNextOperationSpec
    );
  }

  /**
   * Get data ingestion status by data feed
   * @param nextLink the next link
   * @param body The query time range
   * @param options The options parameters.
   */
  getDataFeedIngestionStatusNext(
    nextLink: string,
    body: IngestionStatusQueryOptions,
    options?: GeneratedClientGetDataFeedIngestionStatusNextOptionalParams
  ): Promise<GeneratedClientGetDataFeedIngestionStatusNextResponse> {
    return this.sendOperationRequest(
      { nextLink, body, options },
      getDataFeedIngestionStatusNextOperationSpec
    );
  }

  /**
   * List series (dimension combinations) from metric
   * @param nextLink the next link
   * @param body filter to query series
   * @param options The options parameters.
   */
  getMetricSeriesNext(
    nextLink: string,
    body: MetricSeriesQueryOptions,
    options?: GeneratedClientGetMetricSeriesNextOptionalParams
  ): Promise<GeneratedClientGetMetricSeriesNextResponse> {
    return this.sendOperationRequest(
      { nextLink, body, options },
      getMetricSeriesNextOperationSpec
    );
  }

  /**
   * List dimension from certain metric
   * @param nextLink the next link
   * @param body query dimension option
   * @param options The options parameters.
   */
  getMetricDimensionNext(
    nextLink: string,
    body: MetricDimensionQueryOptions,
    options?: GeneratedClientGetMetricDimensionNextOptionalParams
  ): Promise<GeneratedClientGetMetricDimensionNextResponse> {
    return this.sendOperationRequest(
      { nextLink, body, options },
      getMetricDimensionNextOperationSpec
    );
  }

  /**
   * Query anomaly detection status
   * @param nextLink the next link
   * @param body query options
   * @param options The options parameters.
   */
  getEnrichmentStatusByMetricNext(
    nextLink: string,
    body: EnrichmentStatusQueryOption,
    options?: GeneratedClientGetEnrichmentStatusByMetricNextOptionalParams
  ): Promise<GeneratedClientGetEnrichmentStatusByMetricNextResponse> {
    return this.sendOperationRequest(
      { nextLink, body, options },
      getEnrichmentStatusByMetricNextOperationSpec
    );
  }

  /**
   * GetAnomaliesFromAlertByAnomalyAlertingConfigurationNext
   * @param configurationId anomaly alerting configuration unique id
   * @param alertId alert id
   * @param nextLink The nextLink from the previous successful call to the
   *                 GetAnomaliesFromAlertByAnomalyAlertingConfiguration method.
   * @param options The options parameters.
   */
  getAnomaliesFromAlertByAnomalyAlertingConfigurationNext(
    configurationId: string,
    alertId: string,
    nextLink: string,
    options?: GeneratedClientGetAnomaliesFromAlertByAnomalyAlertingConfigurationNextOptionalParams
  ): Promise<
    GeneratedClientGetAnomaliesFromAlertByAnomalyAlertingConfigurationNextResponse
  > {
    return this.sendOperationRequest(
      { configurationId, alertId, nextLink, options },
      getAnomaliesFromAlertByAnomalyAlertingConfigurationNextOperationSpec
    );
  }

  /**
   * GetIncidentsFromAlertByAnomalyAlertingConfigurationNext
   * @param configurationId anomaly alerting configuration unique id
   * @param alertId alert id
   * @param nextLink The nextLink from the previous successful call to the
   *                 GetIncidentsFromAlertByAnomalyAlertingConfiguration method.
   * @param options The options parameters.
   */
  getIncidentsFromAlertByAnomalyAlertingConfigurationNext(
    configurationId: string,
    alertId: string,
    nextLink: string,
    options?: GeneratedClientGetIncidentsFromAlertByAnomalyAlertingConfigurationNextOptionalParams
  ): Promise<
    GeneratedClientGetIncidentsFromAlertByAnomalyAlertingConfigurationNextResponse
  > {
    return this.sendOperationRequest(
      { configurationId, alertId, nextLink, options },
      getIncidentsFromAlertByAnomalyAlertingConfigurationNextOperationSpec
    );
  }

  /**
   * GetAnomalyAlertingConfigurationsByAnomalyDetectionConfigurationNext
   * @param configurationId anomaly detection configuration unique id
   * @param nextLink The nextLink from the previous successful call to the
   *                 GetAnomalyAlertingConfigurationsByAnomalyDetectionConfiguration method.
   * @param options The options parameters.
   */
  getAnomalyAlertingConfigurationsByAnomalyDetectionConfigurationNext(
    configurationId: string,
    nextLink: string,
    options?: GeneratedClientGetAnomalyAlertingConfigurationsByAnomalyDetectionConfigurationNextOptionalParams
  ): Promise<
    GeneratedClientGetAnomalyAlertingConfigurationsByAnomalyDetectionConfigurationNextResponse
  > {
    return this.sendOperationRequest(
      { configurationId, nextLink, options },
      getAnomalyAlertingConfigurationsByAnomalyDetectionConfigurationNextOperationSpec
    );
  }

  /**
   * GetIncidentsByAnomalyDetectionConfigurationNext
   * @param configurationId anomaly detection configuration unique id
   * @param body query detection incident result request
   * @param nextLink The nextLink from the previous successful call to the
   *                 GetIncidentsByAnomalyDetectionConfiguration method.
   * @param options The options parameters.
   */
  getIncidentsByAnomalyDetectionConfigurationNext(
    configurationId: string,
    body: DetectionIncidentResultQuery,
    nextLink: string,
    options?: GeneratedClientGetIncidentsByAnomalyDetectionConfigurationNextOptionalParams
  ): Promise<
    GeneratedClientGetIncidentsByAnomalyDetectionConfigurationNextResponse
  > {
    return this.sendOperationRequest(
      { configurationId, body, nextLink, options },
      getIncidentsByAnomalyDetectionConfigurationNextOperationSpec
    );
  }

  /**
   * GetIncidentsByAnomalyDetectionConfigurationNextPagesNext
   * @param configurationId anomaly detection configuration unique id
   * @param nextLink The nextLink from the previous successful call to the
   *                 GetIncidentsByAnomalyDetectionConfigurationNextPages method.
   * @param options The options parameters.
   */
  getIncidentsByAnomalyDetectionConfigurationNextPagesNext(
    configurationId: string,
    nextLink: string,
    options?: GeneratedClientGetIncidentsByAnomalyDetectionConfigurationNextPagesNextOptionalParams
  ): Promise<
    GeneratedClientGetIncidentsByAnomalyDetectionConfigurationNextPagesNextResponse
  > {
    return this.sendOperationRequest(
      { configurationId, nextLink, options },
      getIncidentsByAnomalyDetectionConfigurationNextPagesNextOperationSpec
    );
  }

  /**
   * ListCredentialsNext
   * @param nextLink The nextLink from the previous successful call to the ListCredentials method.
   * @param options The options parameters.
   */
  listCredentialsNext(
    nextLink: string,
    options?: GeneratedClientListCredentialsNextOptionalParams
  ): Promise<GeneratedClientListCredentialsNextResponse> {
    return this.sendOperationRequest(
      { nextLink, options },
      listCredentialsNextOperationSpec
    );
  }

  /**
   * ListDataFeedsNext
   * @param nextLink The nextLink from the previous successful call to the ListDataFeeds method.
   * @param options The options parameters.
   */
  listDataFeedsNext(
    nextLink: string,
    options?: GeneratedClientListDataFeedsNextOptionalParams
  ): Promise<GeneratedClientListDataFeedsNextResponse> {
    return this.sendOperationRequest(
      { nextLink, options },
      listDataFeedsNextOperationSpec
    );
  }

  /**
   * ListHooksNext
   * @param nextLink The nextLink from the previous successful call to the ListHooks method.
   * @param options The options parameters.
   */
  listHooksNext(
    nextLink: string,
    options?: GeneratedClientListHooksNextOptionalParams
  ): Promise<GeneratedClientListHooksNextResponse> {
    return this.sendOperationRequest(
      { nextLink, options },
      listHooksNextOperationSpec
    );
  }

  /**
   * GetAnomalyDetectionConfigurationsByMetricNext
   * @param metricId metric unique id
   * @param nextLink The nextLink from the previous successful call to the
   *                 GetAnomalyDetectionConfigurationsByMetric method.
   * @param options The options parameters.
   */
  getAnomalyDetectionConfigurationsByMetricNext(
    metricId: string,
    nextLink: string,
    options?: GeneratedClientGetAnomalyDetectionConfigurationsByMetricNextOptionalParams
  ): Promise<
    GeneratedClientGetAnomalyDetectionConfigurationsByMetricNextResponse
  > {
    return this.sendOperationRequest(
      { metricId, nextLink, options },
      getAnomalyDetectionConfigurationsByMetricNextOperationSpec
    );
  }
}
// Operation Specifications
const serializer = coreClient.createSerializer(Mappers, /* isXml */ false);

const getActiveSeriesCountOperationSpec: coreClient.OperationSpec = {
  path: "/stats/latest",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.UsageStats
    },
    default: {
      bodyMapper: Mappers.ErrorCode
    }
  },
  urlParameters: [Parameters.endpoint],
  headerParameters: [Parameters.accept],
  serializer
};
const getAnomalyAlertingConfigurationOperationSpec: coreClient.OperationSpec = {
  path: "/alert/anomaly/configurations/{configurationId}",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.AnomalyAlertingConfiguration
    },
    default: {
      bodyMapper: Mappers.ErrorCode
    }
  },
  urlParameters: [Parameters.endpoint, Parameters.configurationId],
  headerParameters: [Parameters.accept],
  serializer
};
const updateAnomalyAlertingConfigurationOperationSpec: coreClient.OperationSpec = {
  path: "/alert/anomaly/configurations/{configurationId}",
  httpMethod: "PATCH",
  responses: {
    200: {
      bodyMapper: Mappers.AnomalyAlertingConfiguration
    },
    default: {
      bodyMapper: Mappers.ErrorCode
    }
  },
  requestBody: Parameters.body,
  urlParameters: [Parameters.endpoint, Parameters.configurationId],
  headerParameters: [Parameters.accept, Parameters.contentType],
  mediaType: "json",
  serializer
};
const deleteAnomalyAlertingConfigurationOperationSpec: coreClient.OperationSpec = {
  path: "/alert/anomaly/configurations/{configurationId}",
  httpMethod: "DELETE",
  responses: {
    204: {},
    default: {
      bodyMapper: Mappers.ErrorCode
    }
  },
  urlParameters: [Parameters.endpoint, Parameters.configurationId],
  headerParameters: [Parameters.accept],
  serializer
};
const createAnomalyAlertingConfigurationOperationSpec: coreClient.OperationSpec = {
  path: "/alert/anomaly/configurations",
  httpMethod: "POST",
  responses: {
    201: {
      headersMapper:
        Mappers.GeneratedClientCreateAnomalyAlertingConfigurationHeaders
    },
    default: {
      bodyMapper: Mappers.ErrorCode
    }
  },
  requestBody: Parameters.body1,
  urlParameters: [Parameters.endpoint],
  headerParameters: [Parameters.accept, Parameters.contentType1],
  mediaType: "json",
  serializer
};
const getAlertsByAnomalyAlertingConfigurationOperationSpec: coreClient.OperationSpec = {
  path: "/alert/anomaly/configurations/{configurationId}/alerts/query",
  httpMethod: "POST",
  responses: {
    200: {
      bodyMapper: Mappers.AlertResultList
    },
    default: {
      bodyMapper: Mappers.ErrorCode
    }
  },
  requestBody: Parameters.body2,
  queryParameters: [Parameters.skip, Parameters.maxpagesize],
  urlParameters: [Parameters.endpoint, Parameters.configurationId],
  headerParameters: [Parameters.accept, Parameters.contentType1],
  mediaType: "json",
  serializer
};
const getAnomaliesFromAlertByAnomalyAlertingConfigurationOperationSpec: coreClient.OperationSpec = {
  path:
    "/alert/anomaly/configurations/{configurationId}/alerts/{alertId}/anomalies",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.AnomalyResultList
    },
    default: {
      bodyMapper: Mappers.ErrorCode
    }
  },
  queryParameters: [Parameters.skip, Parameters.maxpagesize],
  urlParameters: [
    Parameters.endpoint,
    Parameters.configurationId,
    Parameters.alertId
  ],
  headerParameters: [Parameters.accept],
  serializer
};
const getIncidentsFromAlertByAnomalyAlertingConfigurationOperationSpec: coreClient.OperationSpec = {
  path:
    "/alert/anomaly/configurations/{configurationId}/alerts/{alertId}/incidents",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.IncidentResultList
    },
    default: {
      bodyMapper: Mappers.ErrorCode
    }
  },
  queryParameters: [Parameters.skip, Parameters.maxpagesize],
  urlParameters: [
    Parameters.endpoint,
    Parameters.configurationId,
    Parameters.alertId
  ],
  headerParameters: [Parameters.accept],
  serializer
};
const getAnomalyDetectionConfigurationOperationSpec: coreClient.OperationSpec = {
  path: "/enrichment/anomalyDetection/configurations/{configurationId}",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.AnomalyDetectionConfiguration
    },
    default: {
      bodyMapper: Mappers.ErrorCode
    }
  },
  urlParameters: [Parameters.endpoint, Parameters.configurationId],
  headerParameters: [Parameters.accept],
  serializer
};
const updateAnomalyDetectionConfigurationOperationSpec: coreClient.OperationSpec = {
  path: "/enrichment/anomalyDetection/configurations/{configurationId}",
  httpMethod: "PATCH",
  responses: {
    200: {
      bodyMapper: Mappers.AnomalyDetectionConfiguration
    },
    default: {
      bodyMapper: Mappers.ErrorCode
    }
  },
  requestBody: Parameters.body3,
  urlParameters: [Parameters.endpoint, Parameters.configurationId],
  headerParameters: [Parameters.accept, Parameters.contentType],
  mediaType: "json",
  serializer
};
const deleteAnomalyDetectionConfigurationOperationSpec: coreClient.OperationSpec = {
  path: "/enrichment/anomalyDetection/configurations/{configurationId}",
  httpMethod: "DELETE",
  responses: {
    204: {},
    default: {
      bodyMapper: Mappers.ErrorCode
    }
  },
  urlParameters: [Parameters.endpoint, Parameters.configurationId],
  headerParameters: [Parameters.accept],
  serializer
};
const createAnomalyDetectionConfigurationOperationSpec: coreClient.OperationSpec = {
  path: "/enrichment/anomalyDetection/configurations",
  httpMethod: "POST",
  responses: {
    201: {
      headersMapper:
        Mappers.GeneratedClientCreateAnomalyDetectionConfigurationHeaders
    },
    default: {
      bodyMapper: Mappers.ErrorCode
    }
  },
  requestBody: Parameters.body4,
  urlParameters: [Parameters.endpoint],
  headerParameters: [Parameters.accept, Parameters.contentType1],
  mediaType: "json",
  serializer
};
const getAnomalyAlertingConfigurationsByAnomalyDetectionConfigurationOperationSpec: coreClient.OperationSpec = {
  path:
    "/enrichment/anomalyDetection/configurations/{configurationId}/alert/anomaly/configurations",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.AnomalyAlertingConfigurationList
    },
    default: {
      bodyMapper: Mappers.ErrorCode
    }
  },
  queryParameters: [Parameters.skip, Parameters.maxpagesize],
  urlParameters: [Parameters.endpoint, Parameters.configurationId],
  headerParameters: [Parameters.accept],
  serializer
};
const getSeriesByAnomalyDetectionConfigurationOperationSpec: coreClient.OperationSpec = {
  path:
    "/enrichment/anomalyDetection/configurations/{configurationId}/series/query",
  httpMethod: "POST",
  responses: {
    200: {
      bodyMapper: Mappers.SeriesResultList
    },
    default: {
      bodyMapper: Mappers.ErrorCode
    }
  },
  requestBody: Parameters.body5,
  urlParameters: [Parameters.endpoint, Parameters.configurationId],
  headerParameters: [Parameters.accept, Parameters.contentType1],
  mediaType: "json",
  serializer
};
const getAnomaliesByAnomalyDetectionConfigurationOperationSpec: coreClient.OperationSpec = {
  path:
    "/enrichment/anomalyDetection/configurations/{configurationId}/anomalies/query",
  httpMethod: "POST",
  responses: {
    200: {
      bodyMapper: Mappers.AnomalyResultList
    },
    default: {
      bodyMapper: Mappers.ErrorCode
    }
  },
  requestBody: Parameters.body6,
  queryParameters: [Parameters.skip, Parameters.maxpagesize],
  urlParameters: [Parameters.endpoint, Parameters.configurationId],
  headerParameters: [Parameters.accept, Parameters.contentType1],
  mediaType: "json",
  serializer
};
const getDimensionOfAnomaliesByAnomalyDetectionConfigurationOperationSpec: coreClient.OperationSpec = {
  path:
    "/enrichment/anomalyDetection/configurations/{configurationId}/anomalies/dimension/query",
  httpMethod: "POST",
  responses: {
    200: {
      bodyMapper: Mappers.AnomalyDimensionList
    },
    default: {
      bodyMapper: Mappers.ErrorCode
    }
  },
  requestBody: Parameters.body7,
  queryParameters: [Parameters.skip, Parameters.maxpagesize],
  urlParameters: [Parameters.endpoint, Parameters.configurationId],
  headerParameters: [Parameters.accept, Parameters.contentType1],
  mediaType: "json",
  serializer
};
const getIncidentsByAnomalyDetectionConfigurationOperationSpec: coreClient.OperationSpec = {
  path:
    "/enrichment/anomalyDetection/configurations/{configurationId}/incidents/query",
  httpMethod: "POST",
  responses: {
    200: {
      bodyMapper: Mappers.IncidentResultList
    },
    default: {
      bodyMapper: Mappers.ErrorCode
    }
  },
  requestBody: Parameters.body8,
  queryParameters: [Parameters.maxpagesize],
  urlParameters: [Parameters.endpoint, Parameters.configurationId],
  headerParameters: [Parameters.accept, Parameters.contentType1],
  mediaType: "json",
  serializer
};
const getIncidentsByAnomalyDetectionConfigurationNextPagesOperationSpec: coreClient.OperationSpec = {
  path:
    "/enrichment/anomalyDetection/configurations/{configurationId}/incidents/query",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.IncidentResultList
    },
    default: {
      bodyMapper: Mappers.ErrorCode
    }
  },
  queryParameters: [Parameters.maxpagesize, Parameters.token],
  urlParameters: [Parameters.endpoint, Parameters.configurationId],
  headerParameters: [Parameters.accept],
  serializer
};
const getRootCauseOfIncidentByAnomalyDetectionConfigurationOperationSpec: coreClient.OperationSpec = {
  path:
    "/enrichment/anomalyDetection/configurations/{configurationId}/incidents/{incidentId}/rootCause",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.RootCauseList
    },
    default: {
      bodyMapper: Mappers.ErrorCode
    }
  },
  urlParameters: [
    Parameters.endpoint,
    Parameters.configurationId,
    Parameters.incidentId
  ],
  headerParameters: [Parameters.accept],
  serializer
};
const createCredentialOperationSpec: coreClient.OperationSpec = {
  path: "/credentials",
  httpMethod: "POST",
  responses: {
    201: {
      headersMapper: Mappers.GeneratedClientCreateCredentialHeaders
    },
    default: {
      bodyMapper: Mappers.ErrorCode
    }
  },
  requestBody: Parameters.body9,
  urlParameters: [Parameters.endpoint],
  headerParameters: [Parameters.accept, Parameters.contentType1],
  mediaType: "json",
  serializer
};
const listCredentialsOperationSpec: coreClient.OperationSpec = {
  path: "/credentials",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.DataSourceCredentialList
    },
    default: {
      bodyMapper: Mappers.ErrorCode
    }
  },
  queryParameters: [Parameters.skip, Parameters.maxpagesize],
  urlParameters: [Parameters.endpoint],
  headerParameters: [Parameters.accept],
  serializer
};
const updateCredentialOperationSpec: coreClient.OperationSpec = {
  path: "/credentials/{credentialId}",
  httpMethod: "PATCH",
  responses: {
    200: {
      bodyMapper: Mappers.DataSourceCredential
    },
    default: {
      bodyMapper: Mappers.ErrorCode
    }
  },
  requestBody: Parameters.body10,
  urlParameters: [Parameters.endpoint, Parameters.credentialId],
  headerParameters: [Parameters.accept, Parameters.contentType],
  mediaType: "json",
  serializer
};
const deleteCredentialOperationSpec: coreClient.OperationSpec = {
  path: "/credentials/{credentialId}",
  httpMethod: "DELETE",
  responses: {
    204: {},
    default: {
      bodyMapper: Mappers.ErrorCode
    }
  },
  urlParameters: [Parameters.endpoint, Parameters.credentialId],
  headerParameters: [Parameters.accept],
  serializer
};
const getCredentialOperationSpec: coreClient.OperationSpec = {
  path: "/credentials/{credentialId}",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.DataSourceCredential
    },
    default: {
      bodyMapper: Mappers.ErrorCode
    }
  },
  urlParameters: [Parameters.endpoint, Parameters.credentialId],
  headerParameters: [Parameters.accept],
  serializer
};
const listDataFeedsOperationSpec: coreClient.OperationSpec = {
  path: "/dataFeeds",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.DataFeedList
    },
    default: {
      bodyMapper: Mappers.ErrorCode
    }
  },
  queryParameters: [
    Parameters.skip,
    Parameters.maxpagesize,
    Parameters.dataFeedName,
    Parameters.dataSourceType,
    Parameters.granularityName,
    Parameters.status,
    Parameters.creator
  ],
  urlParameters: [Parameters.endpoint],
  headerParameters: [Parameters.accept],
  serializer
};
const createDataFeedOperationSpec: coreClient.OperationSpec = {
  path: "/dataFeeds",
  httpMethod: "POST",
  responses: {
    201: {
      headersMapper: Mappers.GeneratedClientCreateDataFeedHeaders
    },
    default: {
      bodyMapper: Mappers.ErrorCode
    }
  },
  requestBody: Parameters.body11,
  urlParameters: [Parameters.endpoint],
  headerParameters: [Parameters.accept, Parameters.contentType1],
  mediaType: "json",
  serializer
};
const getDataFeedByIdOperationSpec: coreClient.OperationSpec = {
  path: "/dataFeeds/{dataFeedId}",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.DataFeedDetail
    },
    default: {
      bodyMapper: Mappers.ErrorCode
    }
  },
  urlParameters: [Parameters.endpoint, Parameters.dataFeedId],
  headerParameters: [Parameters.accept],
  serializer
};
const updateDataFeedOperationSpec: coreClient.OperationSpec = {
  path: "/dataFeeds/{dataFeedId}",
  httpMethod: "PATCH",
  responses: {
    200: {
      bodyMapper: Mappers.DataFeedDetail
    },
    default: {
      bodyMapper: Mappers.ErrorCode
    }
  },
  requestBody: Parameters.body12,
  urlParameters: [Parameters.endpoint, Parameters.dataFeedId],
  headerParameters: [Parameters.accept, Parameters.contentType],
  mediaType: "json",
  serializer
};
const deleteDataFeedOperationSpec: coreClient.OperationSpec = {
  path: "/dataFeeds/{dataFeedId}",
  httpMethod: "DELETE",
  responses: {
    204: {},
    default: {
      bodyMapper: Mappers.ErrorCode
    }
  },
  urlParameters: [Parameters.endpoint, Parameters.dataFeedId],
  headerParameters: [Parameters.accept],
  serializer
};
const getMetricFeedbackOperationSpec: coreClient.OperationSpec = {
  path: "/feedback/metric/{feedbackId}",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.MetricFeedback
    },
    default: {
      bodyMapper: Mappers.ErrorCode
    }
  },
  urlParameters: [Parameters.endpoint, Parameters.feedbackId],
  headerParameters: [Parameters.accept],
  serializer
};
const listMetricFeedbacksOperationSpec: coreClient.OperationSpec = {
  path: "/feedback/metric/query",
  httpMethod: "POST",
  responses: {
    200: {
      bodyMapper: Mappers.MetricFeedbackList
    },
    default: {
      bodyMapper: Mappers.ErrorCode
    }
  },
  requestBody: Parameters.body13,
  queryParameters: [Parameters.skip, Parameters.maxpagesize],
  urlParameters: [Parameters.endpoint],
  headerParameters: [Parameters.accept, Parameters.contentType1],
  mediaType: "json",
  serializer
};
const createMetricFeedbackOperationSpec: coreClient.OperationSpec = {
  path: "/feedback/metric",
  httpMethod: "POST",
  responses: {
    201: {
      headersMapper: Mappers.GeneratedClientCreateMetricFeedbackHeaders
    },
    default: {
      bodyMapper: Mappers.ErrorCode
    }
  },
  requestBody: Parameters.body14,
  urlParameters: [Parameters.endpoint],
  headerParameters: [Parameters.accept, Parameters.contentType1],
  mediaType: "json",
  serializer
};
const listHooksOperationSpec: coreClient.OperationSpec = {
  path: "/hooks",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.HookList
    },
    default: {
      bodyMapper: Mappers.ErrorCode
    }
  },
  queryParameters: [
    Parameters.skip,
    Parameters.maxpagesize,
    Parameters.hookName
  ],
  urlParameters: [Parameters.endpoint],
  headerParameters: [Parameters.accept],
  serializer
};
const createHookOperationSpec: coreClient.OperationSpec = {
  path: "/hooks",
  httpMethod: "POST",
  responses: {
    201: {
      headersMapper: Mappers.GeneratedClientCreateHookHeaders
    },
    default: {
      bodyMapper: Mappers.ErrorCode
    }
  },
  requestBody: Parameters.body15,
  urlParameters: [Parameters.endpoint],
  headerParameters: [Parameters.accept, Parameters.contentType1],
  mediaType: "json",
  serializer
};
const getHookOperationSpec: coreClient.OperationSpec = {
  path: "/hooks/{hookId}",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.HookInfo
    },
    default: {
      bodyMapper: Mappers.ErrorCode
    }
  },
  urlParameters: [Parameters.endpoint, Parameters.hookId],
  headerParameters: [Parameters.accept],
  serializer
};
const updateHookOperationSpec: coreClient.OperationSpec = {
  path: "/hooks/{hookId}",
  httpMethod: "PATCH",
  responses: {
    200: {
      bodyMapper: Mappers.HookInfo
    },
    default: {
      bodyMapper: Mappers.ErrorCode
    }
  },
  requestBody: Parameters.body16,
  urlParameters: [Parameters.endpoint, Parameters.hookId],
  headerParameters: [Parameters.accept, Parameters.contentType],
  mediaType: "json",
  serializer
};
const deleteHookOperationSpec: coreClient.OperationSpec = {
  path: "/hooks/{hookId}",
  httpMethod: "DELETE",
  responses: {
    204: {},
    default: {
      bodyMapper: Mappers.ErrorCode
    }
  },
  urlParameters: [Parameters.endpoint, Parameters.hookId],
  headerParameters: [Parameters.accept],
  serializer
};
const getDataFeedIngestionStatusOperationSpec: coreClient.OperationSpec = {
  path: "/dataFeeds/{dataFeedId}/ingestionStatus/query",
  httpMethod: "POST",
  responses: {
    200: {
      bodyMapper: Mappers.IngestionStatusList
    },
    default: {
      bodyMapper: Mappers.ErrorCode
    }
  },
  requestBody: Parameters.body17,
  queryParameters: [Parameters.skip, Parameters.maxpagesize],
  urlParameters: [Parameters.endpoint, Parameters.dataFeedId],
  headerParameters: [Parameters.accept, Parameters.contentType1],
  mediaType: "json",
  serializer
};
const resetDataFeedIngestionStatusOperationSpec: coreClient.OperationSpec = {
  path: "/dataFeeds/{dataFeedId}/ingestionProgress/reset",
  httpMethod: "POST",
  responses: {
    204: {},
    default: {
      bodyMapper: Mappers.ErrorCode
    }
  },
  requestBody: Parameters.body18,
  urlParameters: [Parameters.endpoint, Parameters.dataFeedId],
  headerParameters: [Parameters.accept, Parameters.contentType1],
  mediaType: "json",
  serializer
};
const getIngestionProgressOperationSpec: coreClient.OperationSpec = {
  path: "/dataFeeds/{dataFeedId}/ingestionProgress",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.DataFeedIngestionProgress
    },
    default: {
      bodyMapper: Mappers.ErrorCode
    }
  },
  urlParameters: [Parameters.endpoint, Parameters.dataFeedId],
  headerParameters: [Parameters.accept],
  serializer
};
const getMetricDataOperationSpec: coreClient.OperationSpec = {
  path: "/metrics/{metricId}/data/query",
  httpMethod: "POST",
  responses: {
    200: {
      bodyMapper: Mappers.MetricDataList
    },
    default: {
      bodyMapper: Mappers.ErrorCode
    }
  },
  requestBody: Parameters.body19,
  urlParameters: [Parameters.endpoint, Parameters.metricId],
  headerParameters: [Parameters.accept, Parameters.contentType1],
  mediaType: "json",
  serializer
};
const getMetricSeriesOperationSpec: coreClient.OperationSpec = {
  path: "/metrics/{metricId}/series/query",
  httpMethod: "POST",
  responses: {
    200: {
      bodyMapper: Mappers.MetricSeriesList
    },
    default: {
      bodyMapper: Mappers.ErrorCode
    }
  },
  requestBody: Parameters.body20,
  queryParameters: [Parameters.skip, Parameters.maxpagesize],
  urlParameters: [Parameters.endpoint, Parameters.metricId],
  headerParameters: [Parameters.accept, Parameters.contentType1],
  mediaType: "json",
  serializer
};
const getMetricDimensionOperationSpec: coreClient.OperationSpec = {
  path: "/metrics/{metricId}/dimension/query",
  httpMethod: "POST",
  responses: {
    200: {
      bodyMapper: Mappers.MetricDimensionList
    },
    default: {
      bodyMapper: Mappers.ErrorCode
    }
  },
  requestBody: Parameters.body21,
  queryParameters: [Parameters.skip, Parameters.maxpagesize],
  urlParameters: [Parameters.endpoint, Parameters.metricId],
  headerParameters: [Parameters.accept, Parameters.contentType1],
  mediaType: "json",
  serializer
};
const getAnomalyDetectionConfigurationsByMetricOperationSpec: coreClient.OperationSpec = {
  path: "/metrics/{metricId}/enrichment/anomalyDetection/configurations",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.AnomalyDetectionConfigurationList
    },
    default: {
      bodyMapper: Mappers.ErrorCode
    }
  },
  queryParameters: [Parameters.skip, Parameters.maxpagesize],
  urlParameters: [Parameters.endpoint, Parameters.metricId],
  headerParameters: [Parameters.accept],
  serializer
};
const getEnrichmentStatusByMetricOperationSpec: coreClient.OperationSpec = {
  path: "/metrics/{metricId}/status/enrichment/anomalyDetection/query",
  httpMethod: "POST",
  responses: {
    200: {
      bodyMapper: Mappers.EnrichmentStatusList
    },
    default: {
      bodyMapper: Mappers.ErrorCode
    }
  },
  requestBody: Parameters.body22,
  queryParameters: [Parameters.skip, Parameters.maxpagesize],
  urlParameters: [Parameters.endpoint, Parameters.metricId],
  headerParameters: [Parameters.accept, Parameters.contentType1],
  mediaType: "json",
  serializer
};
const getAlertsByAnomalyAlertingConfigurationNextOperationSpec: coreClient.OperationSpec = {
  path: "/{nextLink}",
  httpMethod: "POST",
  responses: {
    200: {
      bodyMapper: Mappers.AlertResultList
    },
    default: {
      bodyMapper: Mappers.ErrorCode
    }
  },
  requestBody: Parameters.body2,
  urlParameters: [Parameters.endpoint, Parameters.nextLink],
  headerParameters: [Parameters.accept, Parameters.contentType1],
  mediaType: "json",
  serializer
};
const getAnomaliesByAnomalyDetectionConfigurationNextOperationSpec: coreClient.OperationSpec = {
  path: "/{nextLink}",
  httpMethod: "POST",
  responses: {
    200: {
      bodyMapper: Mappers.AnomalyResultList
    },
    default: {
      bodyMapper: Mappers.ErrorCode
    }
  },
  requestBody: Parameters.body6,
  urlParameters: [Parameters.endpoint, Parameters.nextLink],
  headerParameters: [Parameters.accept, Parameters.contentType1],
  mediaType: "json",
  serializer
};
const getDimensionOfAnomaliesByAnomalyDetectionConfigurationNextOperationSpec: coreClient.OperationSpec = {
  path: "/{nextLink}",
  httpMethod: "POST",
  responses: {
    200: {
      bodyMapper: Mappers.AnomalyDimensionList
    },
    default: {
      bodyMapper: Mappers.ErrorCode
    }
  },
  requestBody: Parameters.body7,
  urlParameters: [Parameters.endpoint, Parameters.nextLink],
  headerParameters: [Parameters.accept, Parameters.contentType1],
  mediaType: "json",
  serializer
};
const listMetricFeedbacksNextOperationSpec: coreClient.OperationSpec = {
  path: "/{nextLink}",
  httpMethod: "POST",
  responses: {
    200: {
      bodyMapper: Mappers.MetricFeedbackList
    },
    default: {
      bodyMapper: Mappers.ErrorCode
    }
  },
  requestBody: Parameters.body13,
  urlParameters: [Parameters.endpoint, Parameters.nextLink],
  headerParameters: [Parameters.accept, Parameters.contentType1],
  mediaType: "json",
  serializer
};
const getDataFeedIngestionStatusNextOperationSpec: coreClient.OperationSpec = {
  path: "/{nextLink}",
  httpMethod: "POST",
  responses: {
    200: {
      bodyMapper: Mappers.IngestionStatusList
    },
    default: {
      bodyMapper: Mappers.ErrorCode
    }
  },
  requestBody: Parameters.body17,
  urlParameters: [Parameters.endpoint, Parameters.nextLink],
  headerParameters: [Parameters.accept, Parameters.contentType1],
  mediaType: "json",
  serializer
};
const getMetricSeriesNextOperationSpec: coreClient.OperationSpec = {
  path: "/{nextLink}",
  httpMethod: "POST",
  responses: {
    200: {
      bodyMapper: Mappers.MetricSeriesList
    },
    default: {
      bodyMapper: Mappers.ErrorCode
    }
  },
  requestBody: Parameters.body20,
  urlParameters: [Parameters.endpoint, Parameters.nextLink],
  headerParameters: [Parameters.accept, Parameters.contentType1],
  mediaType: "json",
  serializer
};
const getMetricDimensionNextOperationSpec: coreClient.OperationSpec = {
  path: "/{nextLink}",
  httpMethod: "POST",
  responses: {
    200: {
      bodyMapper: Mappers.MetricDimensionList
    },
    default: {
      bodyMapper: Mappers.ErrorCode
    }
  },
  requestBody: Parameters.body21,
  urlParameters: [Parameters.endpoint, Parameters.nextLink],
  headerParameters: [Parameters.accept, Parameters.contentType1],
  mediaType: "json",
  serializer
};
const getEnrichmentStatusByMetricNextOperationSpec: coreClient.OperationSpec = {
  path: "/{nextLink}",
  httpMethod: "POST",
  responses: {
    200: {
      bodyMapper: Mappers.EnrichmentStatusList
    },
    default: {
      bodyMapper: Mappers.ErrorCode
    }
  },
  requestBody: Parameters.body22,
  urlParameters: [Parameters.endpoint, Parameters.nextLink],
  headerParameters: [Parameters.accept, Parameters.contentType1],
  mediaType: "json",
  serializer
};
const getAnomaliesFromAlertByAnomalyAlertingConfigurationNextOperationSpec: coreClient.OperationSpec = {
  path: "{nextLink}",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.AnomalyResultList
    },
    default: {
      bodyMapper: Mappers.ErrorCode
    }
  },
  queryParameters: [Parameters.skip, Parameters.maxpagesize],
  urlParameters: [
    Parameters.endpoint,
    Parameters.configurationId,
    Parameters.alertId,
    Parameters.nextLink
  ],
  headerParameters: [Parameters.accept],
  serializer
};
const getIncidentsFromAlertByAnomalyAlertingConfigurationNextOperationSpec: coreClient.OperationSpec = {
  path: "{nextLink}",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.IncidentResultList
    },
    default: {
      bodyMapper: Mappers.ErrorCode
    }
  },
  queryParameters: [Parameters.skip, Parameters.maxpagesize],
  urlParameters: [
    Parameters.endpoint,
    Parameters.configurationId,
    Parameters.alertId,
    Parameters.nextLink
  ],
  headerParameters: [Parameters.accept],
  serializer
};
const getAnomalyAlertingConfigurationsByAnomalyDetectionConfigurationNextOperationSpec: coreClient.OperationSpec = {
  path: "{nextLink}",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.AnomalyAlertingConfigurationList
    },
    default: {
      bodyMapper: Mappers.ErrorCode
    }
  },
  queryParameters: [Parameters.skip, Parameters.maxpagesize],
  urlParameters: [
    Parameters.endpoint,
    Parameters.configurationId,
    Parameters.nextLink
  ],
  headerParameters: [Parameters.accept],
  serializer
};
const getIncidentsByAnomalyDetectionConfigurationNextOperationSpec: coreClient.OperationSpec = {
  path: "{nextLink}",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.IncidentResultList
    },
    default: {
      bodyMapper: Mappers.ErrorCode
    }
  },
  queryParameters: [Parameters.maxpagesize],
  urlParameters: [
    Parameters.endpoint,
    Parameters.configurationId,
    Parameters.nextLink
  ],
  headerParameters: [Parameters.accept, Parameters.contentType1],
  mediaType: "json",
  serializer
};
const getIncidentsByAnomalyDetectionConfigurationNextPagesNextOperationSpec: coreClient.OperationSpec = {
  path: "{nextLink}",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.IncidentResultList
    },
    default: {
      bodyMapper: Mappers.ErrorCode
    }
  },
  queryParameters: [Parameters.maxpagesize, Parameters.token],
  urlParameters: [
    Parameters.endpoint,
    Parameters.configurationId,
    Parameters.nextLink
  ],
  headerParameters: [Parameters.accept],
  serializer
};
const listCredentialsNextOperationSpec: coreClient.OperationSpec = {
  path: "{nextLink}",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.DataSourceCredentialList
    },
    default: {
      bodyMapper: Mappers.ErrorCode
    }
  },
  queryParameters: [Parameters.skip, Parameters.maxpagesize],
  urlParameters: [Parameters.endpoint, Parameters.nextLink],
  headerParameters: [Parameters.accept],
  serializer
};
const listDataFeedsNextOperationSpec: coreClient.OperationSpec = {
  path: "{nextLink}",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.DataFeedList
    },
    default: {
      bodyMapper: Mappers.ErrorCode
    }
  },
  queryParameters: [
    Parameters.skip,
    Parameters.maxpagesize,
    Parameters.dataFeedName,
    Parameters.dataSourceType,
    Parameters.granularityName,
    Parameters.status,
    Parameters.creator
  ],
  urlParameters: [Parameters.endpoint, Parameters.nextLink],
  headerParameters: [Parameters.accept],
  serializer
};
const listHooksNextOperationSpec: coreClient.OperationSpec = {
  path: "{nextLink}",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.HookList
    },
    default: {
      bodyMapper: Mappers.ErrorCode
    }
  },
  queryParameters: [
    Parameters.skip,
    Parameters.maxpagesize,
    Parameters.hookName
  ],
  urlParameters: [Parameters.endpoint, Parameters.nextLink],
  headerParameters: [Parameters.accept],
  serializer
};
const getAnomalyDetectionConfigurationsByMetricNextOperationSpec: coreClient.OperationSpec = {
  path: "{nextLink}",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.AnomalyDetectionConfigurationList
    },
    default: {
      bodyMapper: Mappers.ErrorCode
    }
  },
  queryParameters: [Parameters.skip, Parameters.maxpagesize],
  urlParameters: [
    Parameters.endpoint,
    Parameters.metricId,
    Parameters.nextLink
  ],
  headerParameters: [Parameters.accept],
  serializer
};
