/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */

import * as coreHttp from "@azure/core-http";
import * as Parameters from "./models/parameters";
import * as Mappers from "./models/mappers";
import { GeneratedClientContext } from "./generatedClientContext";
import {
  GeneratedClientOptionalParams,
  GeneratedClientGetActiveSeriesCountResponse,
  GeneratedClientGetAnomalyAlertingConfigurationResponse,
  AnomalyAlertingConfigurationPatch,
  AnomalyAlertingConfiguration,
  GeneratedClientCreateAnomalyAlertingConfigurationResponse,
  AlertingResultQuery,
  GeneratedClientGetAlertsByAnomalyAlertingConfigurationOptionalParams,
  GeneratedClientGetAlertsByAnomalyAlertingConfigurationResponse,
  GeneratedClientGetAnomaliesFromAlertByAnomalyAlertingConfigurationOptionalParams,
  GeneratedClientGetAnomaliesFromAlertByAnomalyAlertingConfigurationResponse,
  GeneratedClientGetIncidentsFromAlertByAnomalyAlertingConfigurationOptionalParams,
  GeneratedClientGetIncidentsFromAlertByAnomalyAlertingConfigurationResponse,
  GeneratedClientGetAnomalyDetectionConfigurationResponse,
  AnomalyDetectionConfigurationPatch,
  AnomalyDetectionConfiguration,
  GeneratedClientCreateAnomalyDetectionConfigurationResponse,
  GeneratedClientGetAnomalyAlertingConfigurationsByAnomalyDetectionConfigurationResponse,
  DetectionSeriesQuery,
  GeneratedClientGetSeriesByAnomalyDetectionConfigurationResponse,
  DetectionAnomalyResultQuery,
  GeneratedClientGetAnomaliesByAnomalyDetectionConfigurationOptionalParams,
  GeneratedClientGetAnomaliesByAnomalyDetectionConfigurationResponse,
  AnomalyDimensionQuery,
  GeneratedClientGetDimensionOfAnomaliesByAnomalyDetectionConfigurationOptionalParams,
  GeneratedClientGetDimensionOfAnomaliesByAnomalyDetectionConfigurationResponse,
  DetectionIncidentResultQuery,
  GeneratedClientGetIncidentsByAnomalyDetectionConfigurationOptionalParams,
  GeneratedClientGetIncidentsByAnomalyDetectionConfigurationResponse,
  GeneratedClientGetIncidentsByAnomalyDetectionConfigurationNextPagesOptionalParams,
  GeneratedClientGetIncidentsByAnomalyDetectionConfigurationNextPagesResponse,
  GeneratedClientGetRootCauseOfIncidentByAnomalyDetectionConfigurationResponse,
  DataSourceCredentialUnion,
  GeneratedClientCreateCredentialResponse,
  GeneratedClientListCredentialsOptionalParams,
  GeneratedClientListCredentialsResponse,
  DataSourceCredentialPatchUnion,
  GeneratedClientGetCredentialResponse,
  GeneratedClientListDataFeedsOptionalParams,
  GeneratedClientListDataFeedsResponse,
  DataFeedDetailUnion,
  GeneratedClientCreateDataFeedResponse,
  GeneratedClientGetDataFeedByIdResponse,
  DataFeedDetailPatchUnion,
  GeneratedClientGetMetricFeedbackResponse,
  MetricFeedbackFilter,
  GeneratedClientListMetricFeedbacksOptionalParams,
  GeneratedClientListMetricFeedbacksResponse,
  MetricFeedbackUnion,
  GeneratedClientCreateMetricFeedbackResponse,
  GeneratedClientListHooksOptionalParams,
  GeneratedClientListHooksResponse,
  HookInfoUnion,
  GeneratedClientCreateHookResponse,
  GeneratedClientGetHookResponse,
  HookInfoPatchUnion,
  IngestionStatusQueryOptions,
  GeneratedClientGetDataFeedIngestionStatusOptionalParams,
  GeneratedClientGetDataFeedIngestionStatusResponse,
  IngestionProgressResetOptions,
  GeneratedClientGetIngestionProgressResponse,
  MetricDataQueryOptions,
  GeneratedClientGetMetricDataResponse,
  MetricSeriesQueryOptions,
  GeneratedClientGetMetricSeriesOptionalParams,
  GeneratedClientGetMetricSeriesResponse,
  MetricDimensionQueryOptions,
  GeneratedClientGetMetricDimensionOptionalParams,
  GeneratedClientGetMetricDimensionResponse,
  GeneratedClientGetAnomalyDetectionConfigurationsByMetricResponse,
  EnrichmentStatusQueryOption,
  GeneratedClientGetEnrichmentStatusByMetricOptionalParams,
  GeneratedClientGetEnrichmentStatusByMetricResponse,
  GeneratedClientGetAlertsByAnomalyAlertingConfigurationNextResponse,
  GeneratedClientGetAnomaliesByAnomalyDetectionConfigurationNextResponse,
  GeneratedClientGetDimensionOfAnomaliesByAnomalyDetectionConfigurationNextResponse,
  GeneratedClientListMetricFeedbacksNextResponse,
  GeneratedClientGetDataFeedIngestionStatusNextResponse,
  GeneratedClientGetMetricSeriesNextResponse,
  GeneratedClientGetMetricDimensionNextResponse,
  GeneratedClientGetEnrichmentStatusByMetricNextResponse,
  GeneratedClientGetAnomaliesFromAlertByAnomalyAlertingConfigurationNextOptionalParams,
  GeneratedClientGetAnomaliesFromAlertByAnomalyAlertingConfigurationNextResponse,
  GeneratedClientGetIncidentsFromAlertByAnomalyAlertingConfigurationNextOptionalParams,
  GeneratedClientGetIncidentsFromAlertByAnomalyAlertingConfigurationNextResponse,
  GeneratedClientGetIncidentsByAnomalyDetectionConfigurationNextOptionalParams,
  GeneratedClientGetIncidentsByAnomalyDetectionConfigurationNextResponse,
  GeneratedClientGetIncidentsByAnomalyDetectionConfigurationNextPagesNextOptionalParams,
  GeneratedClientGetIncidentsByAnomalyDetectionConfigurationNextPagesNextResponse,
  GeneratedClientListCredentialsNextOptionalParams,
  GeneratedClientListCredentialsNextResponse,
  GeneratedClientListDataFeedsNextOptionalParams,
  GeneratedClientListDataFeedsNextResponse,
  GeneratedClientListHooksNextOptionalParams,
  GeneratedClientListHooksNextResponse
} from "./models";

/** @hidden */
export class GeneratedClient extends GeneratedClientContext {
  /**
   * Initializes a new instance of the GeneratedClient class.
   * @param endpoint Supported Cognitive Services endpoints (protocol and hostname, for example:
   *                 https://<resource-name>.cognitiveservices.azure.com).
   * @param options The parameter options
   */
  constructor(endpoint: string, options?: GeneratedClientOptionalParams) {
    super(endpoint, options);
  }

  /**
   * Get latest usage stats
   * @param options The options parameters.
   */
  getActiveSeriesCount(
    options?: coreHttp.OperationOptions
  ): Promise<GeneratedClientGetActiveSeriesCountResponse> {
    const operationArguments: coreHttp.OperationArguments = {
      options: coreHttp.operationOptionsToRequestOptionsBase(options || {})
    };
    return this.sendOperationRequest(
      operationArguments,
      getActiveSeriesCountOperationSpec
    ) as Promise<GeneratedClientGetActiveSeriesCountResponse>;
  }

  /**
   * Query a single anomaly alerting configuration
   * @param configurationId anomaly alerting configuration unique id
   * @param options The options parameters.
   */
  getAnomalyAlertingConfiguration(
    configurationId: string,
    options?: coreHttp.OperationOptions
  ): Promise<GeneratedClientGetAnomalyAlertingConfigurationResponse> {
    const operationArguments: coreHttp.OperationArguments = {
      configurationId,
      options: coreHttp.operationOptionsToRequestOptionsBase(options || {})
    };
    return this.sendOperationRequest(
      operationArguments,
      getAnomalyAlertingConfigurationOperationSpec
    ) as Promise<GeneratedClientGetAnomalyAlertingConfigurationResponse>;
  }

  /**
   * Update anomaly alerting configuration
   * @param configurationId anomaly alerting configuration unique id
   * @param body anomaly alerting configuration
   * @param options The options parameters.
   */
  updateAnomalyAlertingConfiguration(
    configurationId: string,
    body: AnomalyAlertingConfigurationPatch,
    options?: coreHttp.OperationOptions
  ): Promise<coreHttp.RestResponse> {
    const operationArguments: coreHttp.OperationArguments = {
      configurationId,
      body,
      options: coreHttp.operationOptionsToRequestOptionsBase(options || {})
    };
    return this.sendOperationRequest(
      operationArguments,
      updateAnomalyAlertingConfigurationOperationSpec
    ) as Promise<coreHttp.RestResponse>;
  }

  /**
   * Delete anomaly alerting configuration
   * @param configurationId anomaly alerting configuration unique id
   * @param options The options parameters.
   */
  deleteAnomalyAlertingConfiguration(
    configurationId: string,
    options?: coreHttp.OperationOptions
  ): Promise<coreHttp.RestResponse> {
    const operationArguments: coreHttp.OperationArguments = {
      configurationId,
      options: coreHttp.operationOptionsToRequestOptionsBase(options || {})
    };
    return this.sendOperationRequest(
      operationArguments,
      deleteAnomalyAlertingConfigurationOperationSpec
    ) as Promise<coreHttp.RestResponse>;
  }

  /**
   * Create anomaly alerting configuration
   * @param body anomaly alerting configuration
   * @param options The options parameters.
   */
  createAnomalyAlertingConfiguration(
    body: AnomalyAlertingConfiguration,
    options?: coreHttp.OperationOptions
  ): Promise<GeneratedClientCreateAnomalyAlertingConfigurationResponse> {
    const operationArguments: coreHttp.OperationArguments = {
      body,
      options: coreHttp.operationOptionsToRequestOptionsBase(options || {})
    };
    return this.sendOperationRequest(
      operationArguments,
      createAnomalyAlertingConfigurationOperationSpec
    ) as Promise<GeneratedClientCreateAnomalyAlertingConfigurationResponse>;
  }

  /**
   * Query alerts under anomaly alerting configuration
   * @param configurationId anomaly alerting configuration unique id
   * @param body query alerting result request
   * @param options The options parameters.
   */
  getAlertsByAnomalyAlertingConfiguration(
    configurationId: string,
    body: AlertingResultQuery,
    options?: GeneratedClientGetAlertsByAnomalyAlertingConfigurationOptionalParams
  ): Promise<GeneratedClientGetAlertsByAnomalyAlertingConfigurationResponse> {
    const operationArguments: coreHttp.OperationArguments = {
      configurationId,
      body,
      options: coreHttp.operationOptionsToRequestOptionsBase(options || {})
    };
    return this.sendOperationRequest(
      operationArguments,
      getAlertsByAnomalyAlertingConfigurationOperationSpec
    ) as Promise<
      GeneratedClientGetAlertsByAnomalyAlertingConfigurationResponse
    >;
  }

  /**
   * Query anomalies under a specific alert
   * @param configurationId anomaly alerting configuration unique id
   * @param alertId alert id
   * @param options The options parameters.
   */
  getAnomaliesFromAlertByAnomalyAlertingConfiguration(
    configurationId: string,
    alertId: string,
    options?: GeneratedClientGetAnomaliesFromAlertByAnomalyAlertingConfigurationOptionalParams
  ): Promise<
    GeneratedClientGetAnomaliesFromAlertByAnomalyAlertingConfigurationResponse
  > {
    const operationArguments: coreHttp.OperationArguments = {
      configurationId,
      alertId,
      options: coreHttp.operationOptionsToRequestOptionsBase(options || {})
    };
    return this.sendOperationRequest(
      operationArguments,
      getAnomaliesFromAlertByAnomalyAlertingConfigurationOperationSpec
    ) as Promise<
      GeneratedClientGetAnomaliesFromAlertByAnomalyAlertingConfigurationResponse
    >;
  }

  /**
   * Query incidents under a specific alert
   * @param configurationId anomaly alerting configuration unique id
   * @param alertId alert id
   * @param options The options parameters.
   */
  getIncidentsFromAlertByAnomalyAlertingConfiguration(
    configurationId: string,
    alertId: string,
    options?: GeneratedClientGetIncidentsFromAlertByAnomalyAlertingConfigurationOptionalParams
  ): Promise<
    GeneratedClientGetIncidentsFromAlertByAnomalyAlertingConfigurationResponse
  > {
    const operationArguments: coreHttp.OperationArguments = {
      configurationId,
      alertId,
      options: coreHttp.operationOptionsToRequestOptionsBase(options || {})
    };
    return this.sendOperationRequest(
      operationArguments,
      getIncidentsFromAlertByAnomalyAlertingConfigurationOperationSpec
    ) as Promise<
      GeneratedClientGetIncidentsFromAlertByAnomalyAlertingConfigurationResponse
    >;
  }

  /**
   * Query a single anomaly detection configuration
   * @param configurationId anomaly detection configuration unique id
   * @param options The options parameters.
   */
  getAnomalyDetectionConfiguration(
    configurationId: string,
    options?: coreHttp.OperationOptions
  ): Promise<GeneratedClientGetAnomalyDetectionConfigurationResponse> {
    const operationArguments: coreHttp.OperationArguments = {
      configurationId,
      options: coreHttp.operationOptionsToRequestOptionsBase(options || {})
    };
    return this.sendOperationRequest(
      operationArguments,
      getAnomalyDetectionConfigurationOperationSpec
    ) as Promise<GeneratedClientGetAnomalyDetectionConfigurationResponse>;
  }

  /**
   * Update anomaly detection configuration
   * @param configurationId anomaly detection configuration unique id
   * @param body anomaly detection configuration
   * @param options The options parameters.
   */
  updateAnomalyDetectionConfiguration(
    configurationId: string,
    body: AnomalyDetectionConfigurationPatch,
    options?: coreHttp.OperationOptions
  ): Promise<coreHttp.RestResponse> {
    const operationArguments: coreHttp.OperationArguments = {
      configurationId,
      body,
      options: coreHttp.operationOptionsToRequestOptionsBase(options || {})
    };
    return this.sendOperationRequest(
      operationArguments,
      updateAnomalyDetectionConfigurationOperationSpec
    ) as Promise<coreHttp.RestResponse>;
  }

  /**
   * Delete anomaly detection configuration
   * @param configurationId anomaly detection configuration unique id
   * @param options The options parameters.
   */
  deleteAnomalyDetectionConfiguration(
    configurationId: string,
    options?: coreHttp.OperationOptions
  ): Promise<coreHttp.RestResponse> {
    const operationArguments: coreHttp.OperationArguments = {
      configurationId,
      options: coreHttp.operationOptionsToRequestOptionsBase(options || {})
    };
    return this.sendOperationRequest(
      operationArguments,
      deleteAnomalyDetectionConfigurationOperationSpec
    ) as Promise<coreHttp.RestResponse>;
  }

  /**
   * Create anomaly detection configuration
   * @param body anomaly detection configuration
   * @param options The options parameters.
   */
  createAnomalyDetectionConfiguration(
    body: AnomalyDetectionConfiguration,
    options?: coreHttp.OperationOptions
  ): Promise<GeneratedClientCreateAnomalyDetectionConfigurationResponse> {
    const operationArguments: coreHttp.OperationArguments = {
      body,
      options: coreHttp.operationOptionsToRequestOptionsBase(options || {})
    };
    return this.sendOperationRequest(
      operationArguments,
      createAnomalyDetectionConfigurationOperationSpec
    ) as Promise<GeneratedClientCreateAnomalyDetectionConfigurationResponse>;
  }

  /**
   * Query all anomaly alerting configurations for specific anomaly detection configuration
   * @param configurationId anomaly detection configuration unique id
   * @param options The options parameters.
   */
  getAnomalyAlertingConfigurationsByAnomalyDetectionConfiguration(
    configurationId: string,
    options?: coreHttp.OperationOptions
  ): Promise<
    GeneratedClientGetAnomalyAlertingConfigurationsByAnomalyDetectionConfigurationResponse
  > {
    const operationArguments: coreHttp.OperationArguments = {
      configurationId,
      options: coreHttp.operationOptionsToRequestOptionsBase(options || {})
    };
    return this.sendOperationRequest(
      operationArguments,
      getAnomalyAlertingConfigurationsByAnomalyDetectionConfigurationOperationSpec
    ) as Promise<
      GeneratedClientGetAnomalyAlertingConfigurationsByAnomalyDetectionConfigurationResponse
    >;
  }

  /**
   * Query series enriched by anomaly detection
   * @param configurationId anomaly detection configuration unique id
   * @param body query series detection result request
   * @param options The options parameters.
   */
  getSeriesByAnomalyDetectionConfiguration(
    configurationId: string,
    body: DetectionSeriesQuery,
    options?: coreHttp.OperationOptions
  ): Promise<GeneratedClientGetSeriesByAnomalyDetectionConfigurationResponse> {
    const operationArguments: coreHttp.OperationArguments = {
      configurationId,
      body,
      options: coreHttp.operationOptionsToRequestOptionsBase(options || {})
    };
    return this.sendOperationRequest(
      operationArguments,
      getSeriesByAnomalyDetectionConfigurationOperationSpec
    ) as Promise<
      GeneratedClientGetSeriesByAnomalyDetectionConfigurationResponse
    >;
  }

  /**
   * Query anomalies under anomaly detection configuration
   * @param configurationId anomaly detection configuration unique id
   * @param body query detection anomaly result request
   * @param options The options parameters.
   */
  getAnomaliesByAnomalyDetectionConfiguration(
    configurationId: string,
    body: DetectionAnomalyResultQuery,
    options?: GeneratedClientGetAnomaliesByAnomalyDetectionConfigurationOptionalParams
  ): Promise<
    GeneratedClientGetAnomaliesByAnomalyDetectionConfigurationResponse
  > {
    const operationArguments: coreHttp.OperationArguments = {
      configurationId,
      body,
      options: coreHttp.operationOptionsToRequestOptionsBase(options || {})
    };
    return this.sendOperationRequest(
      operationArguments,
      getAnomaliesByAnomalyDetectionConfigurationOperationSpec
    ) as Promise<
      GeneratedClientGetAnomaliesByAnomalyDetectionConfigurationResponse
    >;
  }

  /**
   * Query dimension values of anomalies
   * @param configurationId anomaly detection configuration unique id
   * @param body query dimension values request
   * @param options The options parameters.
   */
  getDimensionOfAnomaliesByAnomalyDetectionConfiguration(
    configurationId: string,
    body: AnomalyDimensionQuery,
    options?: GeneratedClientGetDimensionOfAnomaliesByAnomalyDetectionConfigurationOptionalParams
  ): Promise<
    GeneratedClientGetDimensionOfAnomaliesByAnomalyDetectionConfigurationResponse
  > {
    const operationArguments: coreHttp.OperationArguments = {
      configurationId,
      body,
      options: coreHttp.operationOptionsToRequestOptionsBase(options || {})
    };
    return this.sendOperationRequest(
      operationArguments,
      getDimensionOfAnomaliesByAnomalyDetectionConfigurationOperationSpec
    ) as Promise<
      GeneratedClientGetDimensionOfAnomaliesByAnomalyDetectionConfigurationResponse
    >;
  }

  /**
   * Query incidents under anomaly detection configuration
   * @param configurationId anomaly detection configuration unique id
   * @param body query detection incident result request
   * @param options The options parameters.
   */
  getIncidentsByAnomalyDetectionConfiguration(
    configurationId: string,
    body: DetectionIncidentResultQuery,
    options?: GeneratedClientGetIncidentsByAnomalyDetectionConfigurationOptionalParams
  ): Promise<
    GeneratedClientGetIncidentsByAnomalyDetectionConfigurationResponse
  > {
    const operationArguments: coreHttp.OperationArguments = {
      configurationId,
      body,
      options: coreHttp.operationOptionsToRequestOptionsBase(options || {})
    };
    return this.sendOperationRequest(
      operationArguments,
      getIncidentsByAnomalyDetectionConfigurationOperationSpec
    ) as Promise<
      GeneratedClientGetIncidentsByAnomalyDetectionConfigurationResponse
    >;
  }

  /**
   * Query incidents under anomaly detection configuration
   * @param configurationId anomaly detection configuration unique id
   * @param options The options parameters.
   */
  getIncidentsByAnomalyDetectionConfigurationNextPages(
    configurationId: string,
    options?: GeneratedClientGetIncidentsByAnomalyDetectionConfigurationNextPagesOptionalParams
  ): Promise<
    GeneratedClientGetIncidentsByAnomalyDetectionConfigurationNextPagesResponse
  > {
    const operationArguments: coreHttp.OperationArguments = {
      configurationId,
      options: coreHttp.operationOptionsToRequestOptionsBase(options || {})
    };
    return this.sendOperationRequest(
      operationArguments,
      getIncidentsByAnomalyDetectionConfigurationNextPagesOperationSpec
    ) as Promise<
      GeneratedClientGetIncidentsByAnomalyDetectionConfigurationNextPagesResponse
    >;
  }

  /**
   * Query root cause for incident
   * @param configurationId anomaly detection configuration unique id
   * @param incidentId incident id
   * @param options The options parameters.
   */
  getRootCauseOfIncidentByAnomalyDetectionConfiguration(
    configurationId: string,
    incidentId: string,
    options?: coreHttp.OperationOptions
  ): Promise<
    GeneratedClientGetRootCauseOfIncidentByAnomalyDetectionConfigurationResponse
  > {
    const operationArguments: coreHttp.OperationArguments = {
      configurationId,
      incidentId,
      options: coreHttp.operationOptionsToRequestOptionsBase(options || {})
    };
    return this.sendOperationRequest(
      operationArguments,
      getRootCauseOfIncidentByAnomalyDetectionConfigurationOperationSpec
    ) as Promise<
      GeneratedClientGetRootCauseOfIncidentByAnomalyDetectionConfigurationResponse
    >;
  }

  /**
   * Create a new data source credential
   * @param body Create data source credential request
   * @param options The options parameters.
   */
  createCredential(
    body: DataSourceCredentialUnion,
    options?: coreHttp.OperationOptions
  ): Promise<GeneratedClientCreateCredentialResponse> {
    const operationArguments: coreHttp.OperationArguments = {
      body,
      options: coreHttp.operationOptionsToRequestOptionsBase(options || {})
    };
    return this.sendOperationRequest(
      operationArguments,
      createCredentialOperationSpec
    ) as Promise<GeneratedClientCreateCredentialResponse>;
  }

  /**
   * List all credentials
   * @param options The options parameters.
   */
  listCredentials(
    options?: GeneratedClientListCredentialsOptionalParams
  ): Promise<GeneratedClientListCredentialsResponse> {
    const operationArguments: coreHttp.OperationArguments = {
      options: coreHttp.operationOptionsToRequestOptionsBase(options || {})
    };
    return this.sendOperationRequest(
      operationArguments,
      listCredentialsOperationSpec
    ) as Promise<GeneratedClientListCredentialsResponse>;
  }

  /**
   * Update a data source credential
   * @param credentialId Data source credential unique ID
   * @param body Update data source credential request
   * @param options The options parameters.
   */
  updateCredential(
    credentialId: string,
    body: DataSourceCredentialPatchUnion,
    options?: coreHttp.OperationOptions
  ): Promise<coreHttp.RestResponse> {
    const operationArguments: coreHttp.OperationArguments = {
      credentialId,
      body,
      options: coreHttp.operationOptionsToRequestOptionsBase(options || {})
    };
    return this.sendOperationRequest(
      operationArguments,
      updateCredentialOperationSpec
    ) as Promise<coreHttp.RestResponse>;
  }

  /**
   * Delete a data source credential
   * @param credentialId Data source credential unique ID
   * @param options The options parameters.
   */
  deleteCredential(
    credentialId: string,
    options?: coreHttp.OperationOptions
  ): Promise<coreHttp.RestResponse> {
    const operationArguments: coreHttp.OperationArguments = {
      credentialId,
      options: coreHttp.operationOptionsToRequestOptionsBase(options || {})
    };
    return this.sendOperationRequest(
      operationArguments,
      deleteCredentialOperationSpec
    ) as Promise<coreHttp.RestResponse>;
  }

  /**
   * Get a data source credential
   * @param credentialId Data source credential unique ID
   * @param options The options parameters.
   */
  getCredential(
    credentialId: string,
    options?: coreHttp.OperationOptions
  ): Promise<GeneratedClientGetCredentialResponse> {
    const operationArguments: coreHttp.OperationArguments = {
      credentialId,
      options: coreHttp.operationOptionsToRequestOptionsBase(options || {})
    };
    return this.sendOperationRequest(
      operationArguments,
      getCredentialOperationSpec
    ) as Promise<GeneratedClientGetCredentialResponse>;
  }

  /**
   * List all data feeds
   * @param options The options parameters.
   */
  listDataFeeds(
    options?: GeneratedClientListDataFeedsOptionalParams
  ): Promise<GeneratedClientListDataFeedsResponse> {
    const operationArguments: coreHttp.OperationArguments = {
      options: coreHttp.operationOptionsToRequestOptionsBase(options || {})
    };
    return this.sendOperationRequest(
      operationArguments,
      listDataFeedsOperationSpec
    ) as Promise<GeneratedClientListDataFeedsResponse>;
  }

  /**
   * Create a new data feed
   * @param body parameters to create a data feed
   * @param options The options parameters.
   */
  createDataFeed(
    body: DataFeedDetailUnion,
    options?: coreHttp.OperationOptions
  ): Promise<GeneratedClientCreateDataFeedResponse> {
    const operationArguments: coreHttp.OperationArguments = {
      body,
      options: coreHttp.operationOptionsToRequestOptionsBase(options || {})
    };
    return this.sendOperationRequest(
      operationArguments,
      createDataFeedOperationSpec
    ) as Promise<GeneratedClientCreateDataFeedResponse>;
  }

  /**
   * Get a data feed by its id
   * @param dataFeedId The data feed unique id
   * @param options The options parameters.
   */
  getDataFeedById(
    dataFeedId: string,
    options?: coreHttp.OperationOptions
  ): Promise<GeneratedClientGetDataFeedByIdResponse> {
    const operationArguments: coreHttp.OperationArguments = {
      dataFeedId,
      options: coreHttp.operationOptionsToRequestOptionsBase(options || {})
    };
    return this.sendOperationRequest(
      operationArguments,
      getDataFeedByIdOperationSpec
    ) as Promise<GeneratedClientGetDataFeedByIdResponse>;
  }

  /**
   * Update a data feed
   * @param dataFeedId The data feed unique id
   * @param body parameters to update a data feed
   * @param options The options parameters.
   */
  updateDataFeed(
    dataFeedId: string,
    body: DataFeedDetailPatchUnion,
    options?: coreHttp.OperationOptions
  ): Promise<coreHttp.RestResponse> {
    const operationArguments: coreHttp.OperationArguments = {
      dataFeedId,
      body,
      options: coreHttp.operationOptionsToRequestOptionsBase(options || {})
    };
    return this.sendOperationRequest(
      operationArguments,
      updateDataFeedOperationSpec
    ) as Promise<coreHttp.RestResponse>;
  }

  /**
   * Delete a data feed
   * @param dataFeedId The data feed unique id
   * @param options The options parameters.
   */
  deleteDataFeed(
    dataFeedId: string,
    options?: coreHttp.OperationOptions
  ): Promise<coreHttp.RestResponse> {
    const operationArguments: coreHttp.OperationArguments = {
      dataFeedId,
      options: coreHttp.operationOptionsToRequestOptionsBase(options || {})
    };
    return this.sendOperationRequest(
      operationArguments,
      deleteDataFeedOperationSpec
    ) as Promise<coreHttp.RestResponse>;
  }

  /**
   * Get a metric feedback by its id
   * @param feedbackId the unique feedback ID
   * @param options The options parameters.
   */
  getMetricFeedback(
    feedbackId: string,
    options?: coreHttp.OperationOptions
  ): Promise<GeneratedClientGetMetricFeedbackResponse> {
    const operationArguments: coreHttp.OperationArguments = {
      feedbackId,
      options: coreHttp.operationOptionsToRequestOptionsBase(options || {})
    };
    return this.sendOperationRequest(
      operationArguments,
      getMetricFeedbackOperationSpec
    ) as Promise<GeneratedClientGetMetricFeedbackResponse>;
  }

  /**
   * List feedback on the given metric
   * @param body metric feedback filter
   * @param options The options parameters.
   */
  listMetricFeedbacks(
    body: MetricFeedbackFilter,
    options?: GeneratedClientListMetricFeedbacksOptionalParams
  ): Promise<GeneratedClientListMetricFeedbacksResponse> {
    const operationArguments: coreHttp.OperationArguments = {
      body,
      options: coreHttp.operationOptionsToRequestOptionsBase(options || {})
    };
    return this.sendOperationRequest(
      operationArguments,
      listMetricFeedbacksOperationSpec
    ) as Promise<GeneratedClientListMetricFeedbacksResponse>;
  }

  /**
   * Create a new metric feedback
   * @param body metric feedback
   * @param options The options parameters.
   */
  createMetricFeedback(
    body: MetricFeedbackUnion,
    options?: coreHttp.OperationOptions
  ): Promise<GeneratedClientCreateMetricFeedbackResponse> {
    const operationArguments: coreHttp.OperationArguments = {
      body,
      options: coreHttp.operationOptionsToRequestOptionsBase(options || {})
    };
    return this.sendOperationRequest(
      operationArguments,
      createMetricFeedbackOperationSpec
    ) as Promise<GeneratedClientCreateMetricFeedbackResponse>;
  }

  /**
   * List all hooks
   * @param options The options parameters.
   */
  listHooks(
    options?: GeneratedClientListHooksOptionalParams
  ): Promise<GeneratedClientListHooksResponse> {
    const operationArguments: coreHttp.OperationArguments = {
      options: coreHttp.operationOptionsToRequestOptionsBase(options || {})
    };
    return this.sendOperationRequest(
      operationArguments,
      listHooksOperationSpec
    ) as Promise<GeneratedClientListHooksResponse>;
  }

  /**
   * Create a new hook
   * @param body Create hook request
   * @param options The options parameters.
   */
  createHook(
    body: HookInfoUnion,
    options?: coreHttp.OperationOptions
  ): Promise<GeneratedClientCreateHookResponse> {
    const operationArguments: coreHttp.OperationArguments = {
      body,
      options: coreHttp.operationOptionsToRequestOptionsBase(options || {})
    };
    return this.sendOperationRequest(
      operationArguments,
      createHookOperationSpec
    ) as Promise<GeneratedClientCreateHookResponse>;
  }

  /**
   * Get a hook by its id
   * @param hookId Hook unique ID
   * @param options The options parameters.
   */
  getHook(
    hookId: string,
    options?: coreHttp.OperationOptions
  ): Promise<GeneratedClientGetHookResponse> {
    const operationArguments: coreHttp.OperationArguments = {
      hookId,
      options: coreHttp.operationOptionsToRequestOptionsBase(options || {})
    };
    return this.sendOperationRequest(
      operationArguments,
      getHookOperationSpec
    ) as Promise<GeneratedClientGetHookResponse>;
  }

  /**
   * Update a hook
   * @param hookId Hook unique ID
   * @param body Update hook request
   * @param options The options parameters.
   */
  updateHook(
    hookId: string,
    body: HookInfoPatchUnion,
    options?: coreHttp.OperationOptions
  ): Promise<coreHttp.RestResponse> {
    const operationArguments: coreHttp.OperationArguments = {
      hookId,
      body,
      options: coreHttp.operationOptionsToRequestOptionsBase(options || {})
    };
    return this.sendOperationRequest(
      operationArguments,
      updateHookOperationSpec
    ) as Promise<coreHttp.RestResponse>;
  }

  /**
   * Delete a hook
   * @param hookId Hook unique ID
   * @param options The options parameters.
   */
  deleteHook(
    hookId: string,
    options?: coreHttp.OperationOptions
  ): Promise<coreHttp.RestResponse> {
    const operationArguments: coreHttp.OperationArguments = {
      hookId,
      options: coreHttp.operationOptionsToRequestOptionsBase(options || {})
    };
    return this.sendOperationRequest(
      operationArguments,
      deleteHookOperationSpec
    ) as Promise<coreHttp.RestResponse>;
  }

  /**
   * Get data ingestion status by data feed
   * @param dataFeedId The data feed unique id
   * @param body The query time range
   * @param options The options parameters.
   */
  getDataFeedIngestionStatus(
    dataFeedId: string,
    body: IngestionStatusQueryOptions,
    options?: GeneratedClientGetDataFeedIngestionStatusOptionalParams
  ): Promise<GeneratedClientGetDataFeedIngestionStatusResponse> {
    const operationArguments: coreHttp.OperationArguments = {
      dataFeedId,
      body,
      options: coreHttp.operationOptionsToRequestOptionsBase(options || {})
    };
    return this.sendOperationRequest(
      operationArguments,
      getDataFeedIngestionStatusOperationSpec
    ) as Promise<GeneratedClientGetDataFeedIngestionStatusResponse>;
  }

  /**
   * Reset data ingestion status by data feed to backfill data
   * @param dataFeedId The data feed unique id
   * @param body The backfill time range
   * @param options The options parameters.
   */
  resetDataFeedIngestionStatus(
    dataFeedId: string,
    body: IngestionProgressResetOptions,
    options?: coreHttp.OperationOptions
  ): Promise<coreHttp.RestResponse> {
    const operationArguments: coreHttp.OperationArguments = {
      dataFeedId,
      body,
      options: coreHttp.operationOptionsToRequestOptionsBase(options || {})
    };
    return this.sendOperationRequest(
      operationArguments,
      resetDataFeedIngestionStatusOperationSpec
    ) as Promise<coreHttp.RestResponse>;
  }

  /**
   * Get data last success ingestion job timestamp by data feed
   * @param dataFeedId The data feed unique id
   * @param options The options parameters.
   */
  getIngestionProgress(
    dataFeedId: string,
    options?: coreHttp.OperationOptions
  ): Promise<GeneratedClientGetIngestionProgressResponse> {
    const operationArguments: coreHttp.OperationArguments = {
      dataFeedId,
      options: coreHttp.operationOptionsToRequestOptionsBase(options || {})
    };
    return this.sendOperationRequest(
      operationArguments,
      getIngestionProgressOperationSpec
    ) as Promise<GeneratedClientGetIngestionProgressResponse>;
  }

  /**
   * Get time series data from metric
   * @param metricId metric unique id
   * @param body query time series data condition
   * @param options The options parameters.
   */
  getMetricData(
    metricId: string,
    body: MetricDataQueryOptions,
    options?: coreHttp.OperationOptions
  ): Promise<GeneratedClientGetMetricDataResponse> {
    const operationArguments: coreHttp.OperationArguments = {
      metricId,
      body,
      options: coreHttp.operationOptionsToRequestOptionsBase(options || {})
    };
    return this.sendOperationRequest(
      operationArguments,
      getMetricDataOperationSpec
    ) as Promise<GeneratedClientGetMetricDataResponse>;
  }

  /**
   * List series (dimension combinations) from metric
   * @param metricId metric unique id
   * @param body filter to query series
   * @param options The options parameters.
   */
  getMetricSeries(
    metricId: string,
    body: MetricSeriesQueryOptions,
    options?: GeneratedClientGetMetricSeriesOptionalParams
  ): Promise<GeneratedClientGetMetricSeriesResponse> {
    const operationArguments: coreHttp.OperationArguments = {
      metricId,
      body,
      options: coreHttp.operationOptionsToRequestOptionsBase(options || {})
    };
    return this.sendOperationRequest(
      operationArguments,
      getMetricSeriesOperationSpec
    ) as Promise<GeneratedClientGetMetricSeriesResponse>;
  }

  /**
   * List dimension from certain metric
   * @param metricId metric unique id
   * @param body query dimension option
   * @param options The options parameters.
   */
  getMetricDimension(
    metricId: string,
    body: MetricDimensionQueryOptions,
    options?: GeneratedClientGetMetricDimensionOptionalParams
  ): Promise<GeneratedClientGetMetricDimensionResponse> {
    const operationArguments: coreHttp.OperationArguments = {
      metricId,
      body,
      options: coreHttp.operationOptionsToRequestOptionsBase(options || {})
    };
    return this.sendOperationRequest(
      operationArguments,
      getMetricDimensionOperationSpec
    ) as Promise<GeneratedClientGetMetricDimensionResponse>;
  }

  /**
   * Query all anomaly detection configurations for specific metric
   * @param metricId metric unique id
   * @param options The options parameters.
   */
  getAnomalyDetectionConfigurationsByMetric(
    metricId: string,
    options?: coreHttp.OperationOptions
  ): Promise<GeneratedClientGetAnomalyDetectionConfigurationsByMetricResponse> {
    const operationArguments: coreHttp.OperationArguments = {
      metricId,
      options: coreHttp.operationOptionsToRequestOptionsBase(options || {})
    };
    return this.sendOperationRequest(
      operationArguments,
      getAnomalyDetectionConfigurationsByMetricOperationSpec
    ) as Promise<
      GeneratedClientGetAnomalyDetectionConfigurationsByMetricResponse
    >;
  }

  /**
   * Query anomaly detection status
   * @param metricId metric unique id
   * @param body query options
   * @param options The options parameters.
   */
  getEnrichmentStatusByMetric(
    metricId: string,
    body: EnrichmentStatusQueryOption,
    options?: GeneratedClientGetEnrichmentStatusByMetricOptionalParams
  ): Promise<GeneratedClientGetEnrichmentStatusByMetricResponse> {
    const operationArguments: coreHttp.OperationArguments = {
      metricId,
      body,
      options: coreHttp.operationOptionsToRequestOptionsBase(options || {})
    };
    return this.sendOperationRequest(
      operationArguments,
      getEnrichmentStatusByMetricOperationSpec
    ) as Promise<GeneratedClientGetEnrichmentStatusByMetricResponse>;
  }

  /**
   * Query alerts under anomaly alerting configuration
   * @param nextLink the next link
   * @param body query alerting result request
   * @param options The options parameters.
   */
  getAlertsByAnomalyAlertingConfigurationNext(
    nextLink: string,
    body: AlertingResultQuery,
    options?: coreHttp.OperationOptions
  ): Promise<
    GeneratedClientGetAlertsByAnomalyAlertingConfigurationNextResponse
  > {
    const operationArguments: coreHttp.OperationArguments = {
      nextLink,
      body,
      options: coreHttp.operationOptionsToRequestOptionsBase(options || {})
    };
    return this.sendOperationRequest(
      operationArguments,
      getAlertsByAnomalyAlertingConfigurationNextOperationSpec
    ) as Promise<
      GeneratedClientGetAlertsByAnomalyAlertingConfigurationNextResponse
    >;
  }

  /**
   * Query anomalies under anomaly detection configuration
   * @param nextLink the next link
   * @param body query detection anomaly result request
   * @param options The options parameters.
   */
  getAnomaliesByAnomalyDetectionConfigurationNext(
    nextLink: string,
    body: DetectionAnomalyResultQuery,
    options?: coreHttp.OperationOptions
  ): Promise<
    GeneratedClientGetAnomaliesByAnomalyDetectionConfigurationNextResponse
  > {
    const operationArguments: coreHttp.OperationArguments = {
      nextLink,
      body,
      options: coreHttp.operationOptionsToRequestOptionsBase(options || {})
    };
    return this.sendOperationRequest(
      operationArguments,
      getAnomaliesByAnomalyDetectionConfigurationNextOperationSpec
    ) as Promise<
      GeneratedClientGetAnomaliesByAnomalyDetectionConfigurationNextResponse
    >;
  }

  /**
   * Query dimension values of anomalies
   * @param nextLink the next link
   * @param body query dimension values request
   * @param options The options parameters.
   */
  getDimensionOfAnomaliesByAnomalyDetectionConfigurationNext(
    nextLink: string,
    body: AnomalyDimensionQuery,
    options?: coreHttp.OperationOptions
  ): Promise<
    GeneratedClientGetDimensionOfAnomaliesByAnomalyDetectionConfigurationNextResponse
  > {
    const operationArguments: coreHttp.OperationArguments = {
      nextLink,
      body,
      options: coreHttp.operationOptionsToRequestOptionsBase(options || {})
    };
    return this.sendOperationRequest(
      operationArguments,
      getDimensionOfAnomaliesByAnomalyDetectionConfigurationNextOperationSpec
    ) as Promise<
      GeneratedClientGetDimensionOfAnomaliesByAnomalyDetectionConfigurationNextResponse
    >;
  }

  /**
   * List feedback on the given metric
   * @param nextLink the next link
   * @param body metric feedback filter
   * @param options The options parameters.
   */
  listMetricFeedbacksNext(
    nextLink: string,
    body: MetricFeedbackFilter,
    options?: coreHttp.OperationOptions
  ): Promise<GeneratedClientListMetricFeedbacksNextResponse> {
    const operationArguments: coreHttp.OperationArguments = {
      nextLink,
      body,
      options: coreHttp.operationOptionsToRequestOptionsBase(options || {})
    };
    return this.sendOperationRequest(
      operationArguments,
      listMetricFeedbacksNextOperationSpec
    ) as Promise<GeneratedClientListMetricFeedbacksNextResponse>;
  }

  /**
   * Get data ingestion status by data feed
   * @param nextLink the next link
   * @param body The query time range
   * @param options The options parameters.
   */
  getDataFeedIngestionStatusNext(
    nextLink: string,
    body: IngestionStatusQueryOptions,
    options?: coreHttp.OperationOptions
  ): Promise<GeneratedClientGetDataFeedIngestionStatusNextResponse> {
    const operationArguments: coreHttp.OperationArguments = {
      nextLink,
      body,
      options: coreHttp.operationOptionsToRequestOptionsBase(options || {})
    };
    return this.sendOperationRequest(
      operationArguments,
      getDataFeedIngestionStatusNextOperationSpec
    ) as Promise<GeneratedClientGetDataFeedIngestionStatusNextResponse>;
  }

  /**
   * List series (dimension combinations) from metric
   * @param nextLink the next link
   * @param body filter to query series
   * @param options The options parameters.
   */
  getMetricSeriesNext(
    nextLink: string,
    body: MetricSeriesQueryOptions,
    options?: coreHttp.OperationOptions
  ): Promise<GeneratedClientGetMetricSeriesNextResponse> {
    const operationArguments: coreHttp.OperationArguments = {
      nextLink,
      body,
      options: coreHttp.operationOptionsToRequestOptionsBase(options || {})
    };
    return this.sendOperationRequest(
      operationArguments,
      getMetricSeriesNextOperationSpec
    ) as Promise<GeneratedClientGetMetricSeriesNextResponse>;
  }

  /**
   * List dimension from certain metric
   * @param nextLink the next link
   * @param body query dimension option
   * @param options The options parameters.
   */
  getMetricDimensionNext(
    nextLink: string,
    body: MetricDimensionQueryOptions,
    options?: coreHttp.OperationOptions
  ): Promise<GeneratedClientGetMetricDimensionNextResponse> {
    const operationArguments: coreHttp.OperationArguments = {
      nextLink,
      body,
      options: coreHttp.operationOptionsToRequestOptionsBase(options || {})
    };
    return this.sendOperationRequest(
      operationArguments,
      getMetricDimensionNextOperationSpec
    ) as Promise<GeneratedClientGetMetricDimensionNextResponse>;
  }

  /**
   * Query anomaly detection status
   * @param nextLink the next link
   * @param body query options
   * @param options The options parameters.
   */
  getEnrichmentStatusByMetricNext(
    nextLink: string,
    body: EnrichmentStatusQueryOption,
    options?: coreHttp.OperationOptions
  ): Promise<GeneratedClientGetEnrichmentStatusByMetricNextResponse> {
    const operationArguments: coreHttp.OperationArguments = {
      nextLink,
      body,
      options: coreHttp.operationOptionsToRequestOptionsBase(options || {})
    };
    return this.sendOperationRequest(
      operationArguments,
      getEnrichmentStatusByMetricNextOperationSpec
    ) as Promise<GeneratedClientGetEnrichmentStatusByMetricNextResponse>;
  }

  /**
   * GetAnomaliesFromAlertByAnomalyAlertingConfigurationNext
   * @param configurationId anomaly alerting configuration unique id
   * @param alertId alert id
   * @param nextLink The nextLink from the previous successful call to the
   *                 GetAnomaliesFromAlertByAnomalyAlertingConfiguration method.
   * @param options The options parameters.
   */
  getAnomaliesFromAlertByAnomalyAlertingConfigurationNext(
    configurationId: string,
    alertId: string,
    nextLink: string,
    options?: GeneratedClientGetAnomaliesFromAlertByAnomalyAlertingConfigurationNextOptionalParams
  ): Promise<
    GeneratedClientGetAnomaliesFromAlertByAnomalyAlertingConfigurationNextResponse
  > {
    const operationArguments: coreHttp.OperationArguments = {
      configurationId,
      alertId,
      nextLink,
      options: coreHttp.operationOptionsToRequestOptionsBase(options || {})
    };
    return this.sendOperationRequest(
      operationArguments,
      getAnomaliesFromAlertByAnomalyAlertingConfigurationNextOperationSpec
    ) as Promise<
      GeneratedClientGetAnomaliesFromAlertByAnomalyAlertingConfigurationNextResponse
    >;
  }

  /**
   * GetIncidentsFromAlertByAnomalyAlertingConfigurationNext
   * @param configurationId anomaly alerting configuration unique id
   * @param alertId alert id
   * @param nextLink The nextLink from the previous successful call to the
   *                 GetIncidentsFromAlertByAnomalyAlertingConfiguration method.
   * @param options The options parameters.
   */
  getIncidentsFromAlertByAnomalyAlertingConfigurationNext(
    configurationId: string,
    alertId: string,
    nextLink: string,
    options?: GeneratedClientGetIncidentsFromAlertByAnomalyAlertingConfigurationNextOptionalParams
  ): Promise<
    GeneratedClientGetIncidentsFromAlertByAnomalyAlertingConfigurationNextResponse
  > {
    const operationArguments: coreHttp.OperationArguments = {
      configurationId,
      alertId,
      nextLink,
      options: coreHttp.operationOptionsToRequestOptionsBase(options || {})
    };
    return this.sendOperationRequest(
      operationArguments,
      getIncidentsFromAlertByAnomalyAlertingConfigurationNextOperationSpec
    ) as Promise<
      GeneratedClientGetIncidentsFromAlertByAnomalyAlertingConfigurationNextResponse
    >;
  }

  /**
   * GetIncidentsByAnomalyDetectionConfigurationNext
   * @param configurationId anomaly detection configuration unique id
   * @param body query detection incident result request
   * @param nextLink The nextLink from the previous successful call to the
   *                 GetIncidentsByAnomalyDetectionConfiguration method.
   * @param options The options parameters.
   */
  getIncidentsByAnomalyDetectionConfigurationNext(
    configurationId: string,
    body: DetectionIncidentResultQuery,
    nextLink: string,
    options?: GeneratedClientGetIncidentsByAnomalyDetectionConfigurationNextOptionalParams
  ): Promise<
    GeneratedClientGetIncidentsByAnomalyDetectionConfigurationNextResponse
  > {
    const operationArguments: coreHttp.OperationArguments = {
      configurationId,
      body,
      nextLink,
      options: coreHttp.operationOptionsToRequestOptionsBase(options || {})
    };
    return this.sendOperationRequest(
      operationArguments,
      getIncidentsByAnomalyDetectionConfigurationNextOperationSpec
    ) as Promise<
      GeneratedClientGetIncidentsByAnomalyDetectionConfigurationNextResponse
    >;
  }

  /**
   * GetIncidentsByAnomalyDetectionConfigurationNextPagesNext
   * @param configurationId anomaly detection configuration unique id
   * @param nextLink The nextLink from the previous successful call to the
   *                 GetIncidentsByAnomalyDetectionConfigurationNextPages method.
   * @param options The options parameters.
   */
  getIncidentsByAnomalyDetectionConfigurationNextPagesNext(
    configurationId: string,
    nextLink: string,
    options?: GeneratedClientGetIncidentsByAnomalyDetectionConfigurationNextPagesNextOptionalParams
  ): Promise<
    GeneratedClientGetIncidentsByAnomalyDetectionConfigurationNextPagesNextResponse
  > {
    const operationArguments: coreHttp.OperationArguments = {
      configurationId,
      nextLink,
      options: coreHttp.operationOptionsToRequestOptionsBase(options || {})
    };
    return this.sendOperationRequest(
      operationArguments,
      getIncidentsByAnomalyDetectionConfigurationNextPagesNextOperationSpec
    ) as Promise<
      GeneratedClientGetIncidentsByAnomalyDetectionConfigurationNextPagesNextResponse
    >;
  }

  /**
   * ListCredentialsNext
   * @param nextLink The nextLink from the previous successful call to the ListCredentials method.
   * @param options The options parameters.
   */
  listCredentialsNext(
    nextLink: string,
    options?: GeneratedClientListCredentialsNextOptionalParams
  ): Promise<GeneratedClientListCredentialsNextResponse> {
    const operationArguments: coreHttp.OperationArguments = {
      nextLink,
      options: coreHttp.operationOptionsToRequestOptionsBase(options || {})
    };
    return this.sendOperationRequest(
      operationArguments,
      listCredentialsNextOperationSpec
    ) as Promise<GeneratedClientListCredentialsNextResponse>;
  }

  /**
   * ListDataFeedsNext
   * @param nextLink The nextLink from the previous successful call to the ListDataFeeds method.
   * @param options The options parameters.
   */
  listDataFeedsNext(
    nextLink: string,
    options?: GeneratedClientListDataFeedsNextOptionalParams
  ): Promise<GeneratedClientListDataFeedsNextResponse> {
    const operationArguments: coreHttp.OperationArguments = {
      nextLink,
      options: coreHttp.operationOptionsToRequestOptionsBase(options || {})
    };
    return this.sendOperationRequest(
      operationArguments,
      listDataFeedsNextOperationSpec
    ) as Promise<GeneratedClientListDataFeedsNextResponse>;
  }

  /**
   * ListHooksNext
   * @param nextLink The nextLink from the previous successful call to the ListHooks method.
   * @param options The options parameters.
   */
  listHooksNext(
    nextLink: string,
    options?: GeneratedClientListHooksNextOptionalParams
  ): Promise<GeneratedClientListHooksNextResponse> {
    const operationArguments: coreHttp.OperationArguments = {
      nextLink,
      options: coreHttp.operationOptionsToRequestOptionsBase(options || {})
    };
    return this.sendOperationRequest(
      operationArguments,
      listHooksNextOperationSpec
    ) as Promise<GeneratedClientListHooksNextResponse>;
  }
}
// Operation Specifications
const serializer = new coreHttp.Serializer(Mappers, /* isXml */ false);

const getActiveSeriesCountOperationSpec: coreHttp.OperationSpec = {
  path: "/stats/latest",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.UsageStats
    },
    default: {
      bodyMapper: Mappers.ErrorCode
    }
  },
  urlParameters: [Parameters.endpoint],
  headerParameters: [Parameters.accept],
  serializer
};
const getAnomalyAlertingConfigurationOperationSpec: coreHttp.OperationSpec = {
  path: "/alert/anomaly/configurations/{configurationId}",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.AnomalyAlertingConfiguration
    },
    default: {
      bodyMapper: Mappers.ErrorCode
    }
  },
  urlParameters: [Parameters.endpoint, Parameters.configurationId],
  headerParameters: [Parameters.accept],
  serializer
};
const updateAnomalyAlertingConfigurationOperationSpec: coreHttp.OperationSpec = {
  path: "/alert/anomaly/configurations/{configurationId}",
  httpMethod: "PATCH",
  responses: {
    204: {},
    default: {
      bodyMapper: Mappers.ErrorCode
    }
  },
  requestBody: Parameters.body,
  urlParameters: [Parameters.endpoint, Parameters.configurationId],
  headerParameters: [Parameters.accept, Parameters.contentType],
  mediaType: "json",
  serializer
};
const deleteAnomalyAlertingConfigurationOperationSpec: coreHttp.OperationSpec = {
  path: "/alert/anomaly/configurations/{configurationId}",
  httpMethod: "DELETE",
  responses: {
    204: {},
    default: {
      bodyMapper: Mappers.ErrorCode
    }
  },
  urlParameters: [Parameters.endpoint, Parameters.configurationId],
  headerParameters: [Parameters.accept],
  serializer
};
const createAnomalyAlertingConfigurationOperationSpec: coreHttp.OperationSpec = {
  path: "/alert/anomaly/configurations",
  httpMethod: "POST",
  responses: {
    201: {
      headersMapper:
        Mappers.GeneratedClientCreateAnomalyAlertingConfigurationHeaders
    },
    default: {
      bodyMapper: Mappers.ErrorCode
    }
  },
  requestBody: Parameters.body1,
  urlParameters: [Parameters.endpoint],
  headerParameters: [Parameters.accept, Parameters.contentType1],
  mediaType: "json",
  serializer
};
const getAlertsByAnomalyAlertingConfigurationOperationSpec: coreHttp.OperationSpec = {
  path: "/alert/anomaly/configurations/{configurationId}/alerts/query",
  httpMethod: "POST",
  responses: {
    200: {
      bodyMapper: Mappers.AlertResultList
    },
    default: {
      bodyMapper: Mappers.ErrorCode
    }
  },
  requestBody: Parameters.body2,
  queryParameters: [Parameters.skip, Parameters.maxpagesize],
  urlParameters: [Parameters.endpoint, Parameters.configurationId],
  headerParameters: [Parameters.accept, Parameters.contentType1],
  mediaType: "json",
  serializer
};
const getAnomaliesFromAlertByAnomalyAlertingConfigurationOperationSpec: coreHttp.OperationSpec = {
  path:
    "/alert/anomaly/configurations/{configurationId}/alerts/{alertId}/anomalies",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.AnomalyResultList
    },
    default: {
      bodyMapper: Mappers.ErrorCode
    }
  },
  queryParameters: [Parameters.skip, Parameters.maxpagesize],
  urlParameters: [
    Parameters.endpoint,
    Parameters.configurationId,
    Parameters.alertId
  ],
  headerParameters: [Parameters.accept],
  serializer
};
const getIncidentsFromAlertByAnomalyAlertingConfigurationOperationSpec: coreHttp.OperationSpec = {
  path:
    "/alert/anomaly/configurations/{configurationId}/alerts/{alertId}/incidents",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.IncidentResultList
    },
    default: {
      bodyMapper: Mappers.ErrorCode
    }
  },
  queryParameters: [Parameters.skip, Parameters.maxpagesize],
  urlParameters: [
    Parameters.endpoint,
    Parameters.configurationId,
    Parameters.alertId
  ],
  headerParameters: [Parameters.accept],
  serializer
};
const getAnomalyDetectionConfigurationOperationSpec: coreHttp.OperationSpec = {
  path: "/enrichment/anomalyDetection/configurations/{configurationId}",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.AnomalyDetectionConfiguration
    },
    default: {
      bodyMapper: Mappers.ErrorCode
    }
  },
  urlParameters: [Parameters.endpoint, Parameters.configurationId],
  headerParameters: [Parameters.accept],
  serializer
};
const updateAnomalyDetectionConfigurationOperationSpec: coreHttp.OperationSpec = {
  path: "/enrichment/anomalyDetection/configurations/{configurationId}",
  httpMethod: "PATCH",
  responses: {
    204: {},
    default: {
      bodyMapper: Mappers.ErrorCode
    }
  },
  requestBody: Parameters.body3,
  urlParameters: [Parameters.endpoint, Parameters.configurationId],
  headerParameters: [Parameters.accept, Parameters.contentType],
  mediaType: "json",
  serializer
};
const deleteAnomalyDetectionConfigurationOperationSpec: coreHttp.OperationSpec = {
  path: "/enrichment/anomalyDetection/configurations/{configurationId}",
  httpMethod: "DELETE",
  responses: {
    204: {},
    default: {
      bodyMapper: Mappers.ErrorCode
    }
  },
  urlParameters: [Parameters.endpoint, Parameters.configurationId],
  headerParameters: [Parameters.accept],
  serializer
};
const createAnomalyDetectionConfigurationOperationSpec: coreHttp.OperationSpec = {
  path: "/enrichment/anomalyDetection/configurations",
  httpMethod: "POST",
  responses: {
    201: {
      headersMapper:
        Mappers.GeneratedClientCreateAnomalyDetectionConfigurationHeaders
    },
    default: {
      bodyMapper: Mappers.ErrorCode
    }
  },
  requestBody: Parameters.body4,
  urlParameters: [Parameters.endpoint],
  headerParameters: [Parameters.accept, Parameters.contentType1],
  mediaType: "json",
  serializer
};
const getAnomalyAlertingConfigurationsByAnomalyDetectionConfigurationOperationSpec: coreHttp.OperationSpec = {
  path:
    "/enrichment/anomalyDetection/configurations/{configurationId}/alert/anomaly/configurations",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.AnomalyAlertingConfigurationList
    },
    default: {
      bodyMapper: Mappers.ErrorCode
    }
  },
  urlParameters: [Parameters.endpoint, Parameters.configurationId],
  headerParameters: [Parameters.accept],
  serializer
};
const getSeriesByAnomalyDetectionConfigurationOperationSpec: coreHttp.OperationSpec = {
  path:
    "/enrichment/anomalyDetection/configurations/{configurationId}/series/query",
  httpMethod: "POST",
  responses: {
    200: {
      bodyMapper: Mappers.SeriesResultList
    },
    default: {
      bodyMapper: Mappers.ErrorCode
    }
  },
  requestBody: Parameters.body5,
  urlParameters: [Parameters.endpoint, Parameters.configurationId],
  headerParameters: [Parameters.accept, Parameters.contentType1],
  mediaType: "json",
  serializer
};
const getAnomaliesByAnomalyDetectionConfigurationOperationSpec: coreHttp.OperationSpec = {
  path:
    "/enrichment/anomalyDetection/configurations/{configurationId}/anomalies/query",
  httpMethod: "POST",
  responses: {
    200: {
      bodyMapper: Mappers.AnomalyResultList
    },
    default: {
      bodyMapper: Mappers.ErrorCode
    }
  },
  requestBody: Parameters.body6,
  queryParameters: [Parameters.skip, Parameters.maxpagesize],
  urlParameters: [Parameters.endpoint, Parameters.configurationId],
  headerParameters: [Parameters.accept, Parameters.contentType1],
  mediaType: "json",
  serializer
};
const getDimensionOfAnomaliesByAnomalyDetectionConfigurationOperationSpec: coreHttp.OperationSpec = {
  path:
    "/enrichment/anomalyDetection/configurations/{configurationId}/anomalies/dimension/query",
  httpMethod: "POST",
  responses: {
    200: {
      bodyMapper: Mappers.AnomalyDimensionList
    },
    default: {
      bodyMapper: Mappers.ErrorCode
    }
  },
  requestBody: Parameters.body7,
  queryParameters: [Parameters.skip, Parameters.maxpagesize],
  urlParameters: [Parameters.endpoint, Parameters.configurationId],
  headerParameters: [Parameters.accept, Parameters.contentType1],
  mediaType: "json",
  serializer
};
const getIncidentsByAnomalyDetectionConfigurationOperationSpec: coreHttp.OperationSpec = {
  path:
    "/enrichment/anomalyDetection/configurations/{configurationId}/incidents/query",
  httpMethod: "POST",
  responses: {
    200: {
      bodyMapper: Mappers.IncidentResultList
    },
    default: {
      bodyMapper: Mappers.ErrorCode
    }
  },
  requestBody: Parameters.body8,
  queryParameters: [Parameters.maxpagesize],
  urlParameters: [Parameters.endpoint, Parameters.configurationId],
  headerParameters: [Parameters.accept, Parameters.contentType1],
  mediaType: "json",
  serializer
};
const getIncidentsByAnomalyDetectionConfigurationNextPagesOperationSpec: coreHttp.OperationSpec = {
  path:
    "/enrichment/anomalyDetection/configurations/{configurationId}/incidents/query",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.IncidentResultList
    },
    default: {
      bodyMapper: Mappers.ErrorCode
    }
  },
  queryParameters: [Parameters.maxpagesize, Parameters.token],
  urlParameters: [Parameters.endpoint, Parameters.configurationId],
  headerParameters: [Parameters.accept],
  serializer
};
const getRootCauseOfIncidentByAnomalyDetectionConfigurationOperationSpec: coreHttp.OperationSpec = {
  path:
    "/enrichment/anomalyDetection/configurations/{configurationId}/incidents/{incidentId}/rootCause",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.RootCauseList
    },
    default: {
      bodyMapper: Mappers.ErrorCode
    }
  },
  urlParameters: [
    Parameters.endpoint,
    Parameters.configurationId,
    Parameters.incidentId
  ],
  headerParameters: [Parameters.accept],
  serializer
};
const createCredentialOperationSpec: coreHttp.OperationSpec = {
  path: "/credentials",
  httpMethod: "POST",
  responses: {
    201: {
      headersMapper: Mappers.GeneratedClientCreateCredentialHeaders
    },
    default: {
      bodyMapper: Mappers.ErrorCode
    }
  },
  requestBody: Parameters.body9,
  urlParameters: [Parameters.endpoint],
  headerParameters: [Parameters.accept, Parameters.contentType1],
  mediaType: "json",
  serializer
};
const listCredentialsOperationSpec: coreHttp.OperationSpec = {
  path: "/credentials",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.DataSourceCredentialList
    },
    default: {
      bodyMapper: Mappers.ErrorCode
    }
  },
  queryParameters: [Parameters.skip, Parameters.maxpagesize],
  urlParameters: [Parameters.endpoint],
  headerParameters: [Parameters.accept],
  serializer
};
const updateCredentialOperationSpec: coreHttp.OperationSpec = {
  path: "/credentials/{credentialId}",
  httpMethod: "PATCH",
  responses: {
    204: {},
    default: {
      bodyMapper: Mappers.ErrorCode
    }
  },
  requestBody: Parameters.body10,
  urlParameters: [Parameters.endpoint, Parameters.credentialId],
  headerParameters: [Parameters.accept, Parameters.contentType],
  mediaType: "json",
  serializer
};
const deleteCredentialOperationSpec: coreHttp.OperationSpec = {
  path: "/credentials/{credentialId}",
  httpMethod: "DELETE",
  responses: {
    204: {},
    default: {
      bodyMapper: Mappers.ErrorCode
    }
  },
  urlParameters: [Parameters.endpoint, Parameters.credentialId],
  headerParameters: [Parameters.accept],
  serializer
};
const getCredentialOperationSpec: coreHttp.OperationSpec = {
  path: "/credentials/{credentialId}",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.DataSourceCredential
    },
    default: {
      bodyMapper: Mappers.ErrorCode
    }
  },
  urlParameters: [Parameters.endpoint, Parameters.credentialId],
  headerParameters: [Parameters.accept],
  serializer
};
const listDataFeedsOperationSpec: coreHttp.OperationSpec = {
  path: "/dataFeeds",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.DataFeedList
    },
    default: {
      bodyMapper: Mappers.ErrorCode
    }
  },
  queryParameters: [
    Parameters.skip,
    Parameters.maxpagesize,
    Parameters.dataFeedName,
    Parameters.dataSourceType,
    Parameters.granularityName,
    Parameters.status,
    Parameters.creator
  ],
  urlParameters: [Parameters.endpoint],
  headerParameters: [Parameters.accept],
  serializer
};
const createDataFeedOperationSpec: coreHttp.OperationSpec = {
  path: "/dataFeeds",
  httpMethod: "POST",
  responses: {
    201: {
      headersMapper: Mappers.GeneratedClientCreateDataFeedHeaders
    },
    default: {
      bodyMapper: Mappers.ErrorCode
    }
  },
  requestBody: Parameters.body11,
  urlParameters: [Parameters.endpoint],
  headerParameters: [Parameters.accept, Parameters.contentType1],
  mediaType: "json",
  serializer
};
const getDataFeedByIdOperationSpec: coreHttp.OperationSpec = {
  path: "/dataFeeds/{dataFeedId}",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.DataFeedDetail
    },
    default: {
      bodyMapper: Mappers.ErrorCode
    }
  },
  urlParameters: [Parameters.endpoint, Parameters.dataFeedId],
  headerParameters: [Parameters.accept],
  serializer
};
const updateDataFeedOperationSpec: coreHttp.OperationSpec = {
  path: "/dataFeeds/{dataFeedId}",
  httpMethod: "PATCH",
  responses: {
    204: {},
    default: {
      bodyMapper: Mappers.ErrorCode
    }
  },
  requestBody: Parameters.body12,
  urlParameters: [Parameters.endpoint, Parameters.dataFeedId],
  headerParameters: [Parameters.accept, Parameters.contentType],
  mediaType: "json",
  serializer
};
const deleteDataFeedOperationSpec: coreHttp.OperationSpec = {
  path: "/dataFeeds/{dataFeedId}",
  httpMethod: "DELETE",
  responses: {
    204: {},
    default: {
      bodyMapper: Mappers.ErrorCode
    }
  },
  urlParameters: [Parameters.endpoint, Parameters.dataFeedId],
  headerParameters: [Parameters.accept],
  serializer
};
const getMetricFeedbackOperationSpec: coreHttp.OperationSpec = {
  path: "/feedback/metric/{feedbackId}",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.MetricFeedback
    },
    default: {
      bodyMapper: Mappers.ErrorCode
    }
  },
  urlParameters: [Parameters.endpoint, Parameters.feedbackId],
  headerParameters: [Parameters.accept],
  serializer
};
const listMetricFeedbacksOperationSpec: coreHttp.OperationSpec = {
  path: "/feedback/metric/query",
  httpMethod: "POST",
  responses: {
    200: {
      bodyMapper: Mappers.MetricFeedbackList
    },
    default: {
      bodyMapper: Mappers.ErrorCode
    }
  },
  requestBody: Parameters.body13,
  queryParameters: [Parameters.skip, Parameters.maxpagesize],
  urlParameters: [Parameters.endpoint],
  headerParameters: [Parameters.accept, Parameters.contentType1],
  mediaType: "json",
  serializer
};
const createMetricFeedbackOperationSpec: coreHttp.OperationSpec = {
  path: "/feedback/metric",
  httpMethod: "POST",
  responses: {
    201: {
      headersMapper: Mappers.GeneratedClientCreateMetricFeedbackHeaders
    },
    default: {
      bodyMapper: Mappers.ErrorCode
    }
  },
  requestBody: Parameters.body14,
  urlParameters: [Parameters.endpoint],
  headerParameters: [Parameters.accept, Parameters.contentType1],
  mediaType: "json",
  serializer
};
const listHooksOperationSpec: coreHttp.OperationSpec = {
  path: "/hooks",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.HookList
    },
    default: {
      bodyMapper: Mappers.ErrorCode
    }
  },
  queryParameters: [
    Parameters.skip,
    Parameters.maxpagesize,
    Parameters.hookName
  ],
  urlParameters: [Parameters.endpoint],
  headerParameters: [Parameters.accept],
  serializer
};
const createHookOperationSpec: coreHttp.OperationSpec = {
  path: "/hooks",
  httpMethod: "POST",
  responses: {
    201: {
      headersMapper: Mappers.GeneratedClientCreateHookHeaders
    },
    default: {
      bodyMapper: Mappers.ErrorCode
    }
  },
  requestBody: Parameters.body15,
  urlParameters: [Parameters.endpoint],
  headerParameters: [Parameters.accept, Parameters.contentType1],
  mediaType: "json",
  serializer
};
const getHookOperationSpec: coreHttp.OperationSpec = {
  path: "/hooks/{hookId}",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.HookInfo
    },
    default: {
      bodyMapper: Mappers.ErrorCode
    }
  },
  urlParameters: [Parameters.endpoint, Parameters.hookId],
  headerParameters: [Parameters.accept],
  serializer
};
const updateHookOperationSpec: coreHttp.OperationSpec = {
  path: "/hooks/{hookId}",
  httpMethod: "PATCH",
  responses: {
    204: {},
    default: {
      bodyMapper: Mappers.ErrorCode
    }
  },
  requestBody: Parameters.body16,
  urlParameters: [Parameters.endpoint, Parameters.hookId],
  headerParameters: [Parameters.accept, Parameters.contentType],
  mediaType: "json",
  serializer
};
const deleteHookOperationSpec: coreHttp.OperationSpec = {
  path: "/hooks/{hookId}",
  httpMethod: "DELETE",
  responses: {
    204: {},
    default: {
      bodyMapper: Mappers.ErrorCode
    }
  },
  urlParameters: [Parameters.endpoint, Parameters.hookId],
  headerParameters: [Parameters.accept],
  serializer
};
const getDataFeedIngestionStatusOperationSpec: coreHttp.OperationSpec = {
  path: "/dataFeeds/{dataFeedId}/ingestionStatus/query",
  httpMethod: "POST",
  responses: {
    200: {
      bodyMapper: Mappers.IngestionStatusList
    },
    default: {
      bodyMapper: Mappers.ErrorCode
    }
  },
  requestBody: Parameters.body17,
  queryParameters: [Parameters.skip, Parameters.maxpagesize],
  urlParameters: [Parameters.endpoint, Parameters.dataFeedId],
  headerParameters: [Parameters.accept, Parameters.contentType1],
  mediaType: "json",
  serializer
};
const resetDataFeedIngestionStatusOperationSpec: coreHttp.OperationSpec = {
  path: "/dataFeeds/{dataFeedId}/ingestionProgress/reset",
  httpMethod: "POST",
  responses: {
    204: {},
    default: {
      bodyMapper: Mappers.ErrorCode
    }
  },
  requestBody: Parameters.body18,
  urlParameters: [Parameters.endpoint, Parameters.dataFeedId],
  headerParameters: [Parameters.accept, Parameters.contentType1],
  mediaType: "json",
  serializer
};
const getIngestionProgressOperationSpec: coreHttp.OperationSpec = {
  path: "/dataFeeds/{dataFeedId}/ingestionProgress",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.DataFeedIngestionProgress
    },
    default: {
      bodyMapper: Mappers.ErrorCode
    }
  },
  urlParameters: [Parameters.endpoint, Parameters.dataFeedId],
  headerParameters: [Parameters.accept],
  serializer
};
const getMetricDataOperationSpec: coreHttp.OperationSpec = {
  path: "/metrics/{metricId}/data/query",
  httpMethod: "POST",
  responses: {
    200: {
      bodyMapper: Mappers.MetricDataList
    },
    default: {
      bodyMapper: Mappers.ErrorCode
    }
  },
  requestBody: Parameters.body19,
  urlParameters: [Parameters.endpoint, Parameters.metricId],
  headerParameters: [Parameters.accept, Parameters.contentType1],
  mediaType: "json",
  serializer
};
const getMetricSeriesOperationSpec: coreHttp.OperationSpec = {
  path: "/metrics/{metricId}/series/query",
  httpMethod: "POST",
  responses: {
    200: {
      bodyMapper: Mappers.MetricSeriesList
    },
    default: {
      bodyMapper: Mappers.ErrorCode
    }
  },
  requestBody: Parameters.body20,
  queryParameters: [Parameters.skip, Parameters.maxpagesize],
  urlParameters: [Parameters.endpoint, Parameters.metricId],
  headerParameters: [Parameters.accept, Parameters.contentType1],
  mediaType: "json",
  serializer
};
const getMetricDimensionOperationSpec: coreHttp.OperationSpec = {
  path: "/metrics/{metricId}/dimension/query",
  httpMethod: "POST",
  responses: {
    200: {
      bodyMapper: Mappers.MetricDimensionList
    },
    default: {
      bodyMapper: Mappers.ErrorCode
    }
  },
  requestBody: Parameters.body21,
  queryParameters: [Parameters.skip, Parameters.maxpagesize],
  urlParameters: [Parameters.endpoint, Parameters.metricId],
  headerParameters: [Parameters.accept, Parameters.contentType1],
  mediaType: "json",
  serializer
};
const getAnomalyDetectionConfigurationsByMetricOperationSpec: coreHttp.OperationSpec = {
  path: "/metrics/{metricId}/enrichment/anomalyDetection/configurations",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.AnomalyDetectionConfigurationList
    },
    default: {
      bodyMapper: Mappers.ErrorCode
    }
  },
  urlParameters: [Parameters.endpoint, Parameters.metricId],
  headerParameters: [Parameters.accept],
  serializer
};
const getEnrichmentStatusByMetricOperationSpec: coreHttp.OperationSpec = {
  path: "/metrics/{metricId}/status/enrichment/anomalyDetection/query",
  httpMethod: "POST",
  responses: {
    200: {
      bodyMapper: Mappers.EnrichmentStatusList
    },
    default: {
      bodyMapper: Mappers.ErrorCode
    }
  },
  requestBody: Parameters.body22,
  queryParameters: [Parameters.skip, Parameters.maxpagesize],
  urlParameters: [Parameters.endpoint, Parameters.metricId],
  headerParameters: [Parameters.accept, Parameters.contentType1],
  mediaType: "json",
  serializer
};
const getAlertsByAnomalyAlertingConfigurationNextOperationSpec: coreHttp.OperationSpec = {
  path: "/{nextLink}",
  httpMethod: "POST",
  responses: {
    200: {
      bodyMapper: Mappers.AlertResultList
    },
    default: {
      bodyMapper: Mappers.ErrorCode
    }
  },
  requestBody: Parameters.body2,
  urlParameters: [Parameters.endpoint, Parameters.nextLink],
  headerParameters: [Parameters.accept, Parameters.contentType1],
  mediaType: "json",
  serializer
};
const getAnomaliesByAnomalyDetectionConfigurationNextOperationSpec: coreHttp.OperationSpec = {
  path: "/{nextLink}",
  httpMethod: "POST",
  responses: {
    200: {
      bodyMapper: Mappers.AnomalyResultList
    },
    default: {
      bodyMapper: Mappers.ErrorCode
    }
  },
  requestBody: Parameters.body6,
  urlParameters: [Parameters.endpoint, Parameters.nextLink],
  headerParameters: [Parameters.accept, Parameters.contentType1],
  mediaType: "json",
  serializer
};
const getDimensionOfAnomaliesByAnomalyDetectionConfigurationNextOperationSpec: coreHttp.OperationSpec = {
  path: "/{nextLink}",
  httpMethod: "POST",
  responses: {
    200: {
      bodyMapper: Mappers.AnomalyDimensionList
    },
    default: {
      bodyMapper: Mappers.ErrorCode
    }
  },
  requestBody: Parameters.body7,
  urlParameters: [Parameters.endpoint, Parameters.nextLink],
  headerParameters: [Parameters.accept, Parameters.contentType1],
  mediaType: "json",
  serializer
};
const listMetricFeedbacksNextOperationSpec: coreHttp.OperationSpec = {
  path: "/{nextLink}",
  httpMethod: "POST",
  responses: {
    200: {
      bodyMapper: Mappers.MetricFeedbackList
    },
    default: {
      bodyMapper: Mappers.ErrorCode
    }
  },
  requestBody: Parameters.body13,
  urlParameters: [Parameters.endpoint, Parameters.nextLink],
  headerParameters: [Parameters.accept, Parameters.contentType1],
  mediaType: "json",
  serializer
};
const getDataFeedIngestionStatusNextOperationSpec: coreHttp.OperationSpec = {
  path: "/{nextLink}",
  httpMethod: "POST",
  responses: {
    200: {
      bodyMapper: Mappers.IngestionStatusList
    },
    default: {
      bodyMapper: Mappers.ErrorCode
    }
  },
  requestBody: Parameters.body17,
  urlParameters: [Parameters.endpoint, Parameters.nextLink],
  headerParameters: [Parameters.accept, Parameters.contentType1],
  mediaType: "json",
  serializer
};
const getMetricSeriesNextOperationSpec: coreHttp.OperationSpec = {
  path: "/{nextLink}",
  httpMethod: "POST",
  responses: {
    200: {
      bodyMapper: Mappers.MetricSeriesList
    },
    default: {
      bodyMapper: Mappers.ErrorCode
    }
  },
  requestBody: Parameters.body20,
  urlParameters: [Parameters.endpoint, Parameters.nextLink],
  headerParameters: [Parameters.accept, Parameters.contentType1],
  mediaType: "json",
  serializer
};
const getMetricDimensionNextOperationSpec: coreHttp.OperationSpec = {
  path: "/{nextLink}",
  httpMethod: "POST",
  responses: {
    200: {
      bodyMapper: Mappers.MetricDimensionList
    },
    default: {
      bodyMapper: Mappers.ErrorCode
    }
  },
  requestBody: Parameters.body21,
  urlParameters: [Parameters.endpoint, Parameters.nextLink],
  headerParameters: [Parameters.accept, Parameters.contentType1],
  mediaType: "json",
  serializer
};
const getEnrichmentStatusByMetricNextOperationSpec: coreHttp.OperationSpec = {
  path: "/{nextLink}",
  httpMethod: "POST",
  responses: {
    200: {
      bodyMapper: Mappers.EnrichmentStatusList
    },
    default: {
      bodyMapper: Mappers.ErrorCode
    }
  },
  requestBody: Parameters.body22,
  urlParameters: [Parameters.endpoint, Parameters.nextLink],
  headerParameters: [Parameters.accept, Parameters.contentType1],
  mediaType: "json",
  serializer
};
const getAnomaliesFromAlertByAnomalyAlertingConfigurationNextOperationSpec: coreHttp.OperationSpec = {
  path: "{nextLink}",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.AnomalyResultList
    },
    default: {
      bodyMapper: Mappers.ErrorCode
    }
  },
  queryParameters: [Parameters.skip, Parameters.maxpagesize],
  urlParameters: [
    Parameters.endpoint,
    Parameters.configurationId,
    Parameters.alertId,
    Parameters.nextLink
  ],
  headerParameters: [Parameters.accept],
  serializer
};
const getIncidentsFromAlertByAnomalyAlertingConfigurationNextOperationSpec: coreHttp.OperationSpec = {
  path: "{nextLink}",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.IncidentResultList
    },
    default: {
      bodyMapper: Mappers.ErrorCode
    }
  },
  queryParameters: [Parameters.skip, Parameters.maxpagesize],
  urlParameters: [
    Parameters.endpoint,
    Parameters.configurationId,
    Parameters.alertId,
    Parameters.nextLink
  ],
  headerParameters: [Parameters.accept],
  serializer
};
const getIncidentsByAnomalyDetectionConfigurationNextOperationSpec: coreHttp.OperationSpec = {
  path: "{nextLink}",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.IncidentResultList
    },
    default: {
      bodyMapper: Mappers.ErrorCode
    }
  },
  queryParameters: [Parameters.maxpagesize],
  urlParameters: [
    Parameters.endpoint,
    Parameters.configurationId,
    Parameters.nextLink
  ],
  headerParameters: [Parameters.accept, Parameters.contentType1],
  mediaType: "json",
  serializer
};
const getIncidentsByAnomalyDetectionConfigurationNextPagesNextOperationSpec: coreHttp.OperationSpec = {
  path: "{nextLink}",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.IncidentResultList
    },
    default: {
      bodyMapper: Mappers.ErrorCode
    }
  },
  queryParameters: [Parameters.maxpagesize, Parameters.token],
  urlParameters: [
    Parameters.endpoint,
    Parameters.configurationId,
    Parameters.nextLink
  ],
  headerParameters: [Parameters.accept],
  serializer
};
const listCredentialsNextOperationSpec: coreHttp.OperationSpec = {
  path: "{nextLink}",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.DataSourceCredentialList
    },
    default: {
      bodyMapper: Mappers.ErrorCode
    }
  },
  queryParameters: [Parameters.skip, Parameters.maxpagesize],
  urlParameters: [Parameters.endpoint, Parameters.nextLink],
  headerParameters: [Parameters.accept],
  serializer
};
const listDataFeedsNextOperationSpec: coreHttp.OperationSpec = {
  path: "{nextLink}",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.DataFeedList
    },
    default: {
      bodyMapper: Mappers.ErrorCode
    }
  },
  queryParameters: [
    Parameters.skip,
    Parameters.maxpagesize,
    Parameters.dataFeedName,
    Parameters.dataSourceType,
    Parameters.granularityName,
    Parameters.status,
    Parameters.creator
  ],
  urlParameters: [Parameters.endpoint, Parameters.nextLink],
  headerParameters: [Parameters.accept],
  serializer
};
const listHooksNextOperationSpec: coreHttp.OperationSpec = {
  path: "{nextLink}",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.HookList
    },
    default: {
      bodyMapper: Mappers.ErrorCode
    }
  },
  queryParameters: [
    Parameters.skip,
    Parameters.maxpagesize,
    Parameters.hookName
  ],
  urlParameters: [Parameters.endpoint, Parameters.nextLink],
  headerParameters: [Parameters.accept],
  serializer
};
