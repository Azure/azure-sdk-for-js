/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */

import { PagedAsyncIterableIterator } from "@azure/core-paging";
import { SimplePollerLike, OperationState } from "@azure/core-lro";
import {
  PipelineResource,
  PipelineGetPipelinesByWorkspaceOptionalParams,
  PipelineCreateOrUpdatePipelineOptionalParams,
  PipelineCreateOrUpdatePipelineResponse,
  PipelineGetPipelineOptionalParams,
  PipelineGetPipelineResponse,
  PipelineDeletePipelineOptionalParams,
  ArtifactRenameRequest,
  PipelineRenamePipelineOptionalParams,
  PipelineCreatePipelineRunOptionalParams,
  PipelineCreatePipelineRunResponse
} from "../models";

/// <reference lib="esnext.asynciterable" />
/** Interface representing a PipelineOperations. */
export interface PipelineOperations {
  /**
   * Lists pipelines.
   * @param options The options parameters.
   */
  listPipelinesByWorkspace(
    options?: PipelineGetPipelinesByWorkspaceOptionalParams
  ): PagedAsyncIterableIterator<PipelineResource>;
  /**
   * Creates or updates a pipeline.
   * @param pipelineName The pipeline name.
   * @param pipeline Pipeline resource definition.
   * @param options The options parameters.
   */
  beginCreateOrUpdatePipeline(
    pipelineName: string,
    pipeline: PipelineResource,
    options?: PipelineCreateOrUpdatePipelineOptionalParams
  ): Promise<
    SimplePollerLike<
      OperationState<PipelineCreateOrUpdatePipelineResponse>,
      PipelineCreateOrUpdatePipelineResponse
    >
  >;
  /**
   * Creates or updates a pipeline.
   * @param pipelineName The pipeline name.
   * @param pipeline Pipeline resource definition.
   * @param options The options parameters.
   */
  beginCreateOrUpdatePipelineAndWait(
    pipelineName: string,
    pipeline: PipelineResource,
    options?: PipelineCreateOrUpdatePipelineOptionalParams
  ): Promise<PipelineCreateOrUpdatePipelineResponse>;
  /**
   * Gets a pipeline.
   * @param pipelineName The pipeline name.
   * @param options The options parameters.
   */
  getPipeline(
    pipelineName: string,
    options?: PipelineGetPipelineOptionalParams
  ): Promise<PipelineGetPipelineResponse>;
  /**
   * Deletes a pipeline.
   * @param pipelineName The pipeline name.
   * @param options The options parameters.
   */
  beginDeletePipeline(
    pipelineName: string,
    options?: PipelineDeletePipelineOptionalParams
  ): Promise<SimplePollerLike<OperationState<void>, void>>;
  /**
   * Deletes a pipeline.
   * @param pipelineName The pipeline name.
   * @param options The options parameters.
   */
  beginDeletePipelineAndWait(
    pipelineName: string,
    options?: PipelineDeletePipelineOptionalParams
  ): Promise<void>;
  /**
   * Renames a pipeline.
   * @param pipelineName The pipeline name.
   * @param request proposed new name.
   * @param options The options parameters.
   */
  beginRenamePipeline(
    pipelineName: string,
    request: ArtifactRenameRequest,
    options?: PipelineRenamePipelineOptionalParams
  ): Promise<SimplePollerLike<OperationState<void>, void>>;
  /**
   * Renames a pipeline.
   * @param pipelineName The pipeline name.
   * @param request proposed new name.
   * @param options The options parameters.
   */
  beginRenamePipelineAndWait(
    pipelineName: string,
    request: ArtifactRenameRequest,
    options?: PipelineRenamePipelineOptionalParams
  ): Promise<void>;
  /**
   * Creates a run of a pipeline.
   * @param pipelineName The pipeline name.
   * @param options The options parameters.
   */
  createPipelineRun(
    pipelineName: string,
    options?: PipelineCreatePipelineRunOptionalParams
  ): Promise<PipelineCreatePipelineRunResponse>;
}
