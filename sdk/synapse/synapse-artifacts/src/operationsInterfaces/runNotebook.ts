/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */

import { SimplePollerLike, OperationState } from "@azure/core-lro";
import {
  RunNotebookRequest,
  RunNotebookCreateRunOptionalParams,
  RunNotebookCreateRunResponse,
  RunNotebookGetStatusOptionalParams,
  RunNotebookGetStatusResponse,
  RunNotebookCancelRunOptionalParams,
  RunNotebookCancelRunResponse,
  RunNotebookGetSnapshotOptionalParams,
  RunNotebookGetSnapshotResponse
} from "../models";

/** Interface representing a RunNotebook. */
export interface RunNotebook {
  /**
   * Run notebook
   * @param runId Notebook run id.
   * @param runNotebookRequest Run notebook request payload.
   * @param options The options parameters.
   */
  beginCreateRun(
    runId: string,
    runNotebookRequest: RunNotebookRequest,
    options?: RunNotebookCreateRunOptionalParams
  ): Promise<
    SimplePollerLike<
      OperationState<RunNotebookCreateRunResponse>,
      RunNotebookCreateRunResponse
    >
  >;
  /**
   * Run notebook
   * @param runId Notebook run id.
   * @param runNotebookRequest Run notebook request payload.
   * @param options The options parameters.
   */
  beginCreateRunAndWait(
    runId: string,
    runNotebookRequest: RunNotebookRequest,
    options?: RunNotebookCreateRunOptionalParams
  ): Promise<RunNotebookCreateRunResponse>;
  /**
   * Get RunNotebook Status for run id.
   * @param runId Notebook run id.
   * @param options The options parameters.
   */
  getStatus(
    runId: string,
    options?: RunNotebookGetStatusOptionalParams
  ): Promise<RunNotebookGetStatusResponse>;
  /**
   * Cancel notebook run.
   * @param runId Notebook run id.
   * @param options The options parameters.
   */
  cancelRun(
    runId: string,
    options?: RunNotebookCancelRunOptionalParams
  ): Promise<RunNotebookCancelRunResponse>;
  /**
   * Get RunNotebook Snapshot for run id.
   * @param runId Notebook run id.
   * @param options The options parameters.
   */
  getSnapshot(
    runId: string,
    options?: RunNotebookGetSnapshotOptionalParams
  ): Promise<RunNotebookGetSnapshotResponse>;
}
