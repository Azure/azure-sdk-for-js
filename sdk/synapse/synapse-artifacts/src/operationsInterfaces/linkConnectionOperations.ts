/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */

import { PagedAsyncIterableIterator } from "@azure/core-paging";
import {
  LinkConnectionResource,
  LinkConnectionListLinkConnectionsByWorkspaceOptionalParams,
  LinkConnectionCreateOrUpdateLinkConnectionOptionalParams,
  LinkConnectionCreateOrUpdateLinkConnectionResponse,
  LinkConnectionGetLinkConnectionOptionalParams,
  LinkConnectionGetLinkConnectionResponse,
  LinkConnectionDeleteLinkConnectionOptionalParams,
  EditTablesRequest,
  LinkConnectionEditTablesOptionalParams,
  LinkConnectionStartOptionalParams,
  LinkConnectionStopOptionalParams,
  LinkConnectionGetDetailedStatusOptionalParams,
  LinkConnectionGetDetailedStatusResponse,
  LinkConnectionListLinkTablesOptionalParams,
  LinkConnectionListLinkTablesResponse,
  QueryTableStatusRequest,
  LinkConnectionQueryTableStatusOptionalParams,
  LinkConnectionQueryTableStatusResponse,
  UpdateLandingZoneCredential,
  LinkConnectionUpdateLandingZoneCredentialOptionalParams
} from "../models";

/// <reference lib="esnext.asynciterable" />
/** Interface representing a LinkConnectionOperations. */
export interface LinkConnectionOperations {
  /**
   * List link connections
   * @param options The options parameters.
   */
  listLinkConnectionsByWorkspace(
    options?: LinkConnectionListLinkConnectionsByWorkspaceOptionalParams
  ): PagedAsyncIterableIterator<LinkConnectionResource>;
  /**
   * Creates or updates a link connection
   * @param linkConnectionName The link connection name
   * @param linkConnection Link connection resource definition
   * @param options The options parameters.
   */
  createOrUpdateLinkConnection(
    linkConnectionName: string,
    linkConnection: LinkConnectionResource,
    options?: LinkConnectionCreateOrUpdateLinkConnectionOptionalParams
  ): Promise<LinkConnectionCreateOrUpdateLinkConnectionResponse>;
  /**
   * Get a link connection
   * @param linkConnectionName The link connection name
   * @param options The options parameters.
   */
  getLinkConnection(
    linkConnectionName: string,
    options?: LinkConnectionGetLinkConnectionOptionalParams
  ): Promise<LinkConnectionGetLinkConnectionResponse>;
  /**
   * Delete a link connection
   * @param linkConnectionName The link connection name
   * @param options The options parameters.
   */
  deleteLinkConnection(
    linkConnectionName: string,
    options?: LinkConnectionDeleteLinkConnectionOptionalParams
  ): Promise<void>;
  /**
   * Edit tables for a link connection
   * @param linkConnectionName The link connection name
   * @param editTablesRequest Edit tables request
   * @param options The options parameters.
   */
  editTables(
    linkConnectionName: string,
    editTablesRequest: EditTablesRequest,
    options?: LinkConnectionEditTablesOptionalParams
  ): Promise<void>;
  /**
   * Start a link connection
   * @param linkConnectionName The link connection name
   * @param options The options parameters.
   */
  start(
    linkConnectionName: string,
    options?: LinkConnectionStartOptionalParams
  ): Promise<void>;
  /**
   * Stop a link connection
   * @param linkConnectionName The link connection name
   * @param options The options parameters.
   */
  stop(
    linkConnectionName: string,
    options?: LinkConnectionStopOptionalParams
  ): Promise<void>;
  /**
   * Get the detailed status of a link connection
   * @param linkConnectionName The link connection name
   * @param options The options parameters.
   */
  getDetailedStatus(
    linkConnectionName: string,
    options?: LinkConnectionGetDetailedStatusOptionalParams
  ): Promise<LinkConnectionGetDetailedStatusResponse>;
  /**
   * List the link tables of a link connection
   * @param linkConnectionName The link connection name
   * @param options The options parameters.
   */
  listLinkTables(
    linkConnectionName: string,
    options?: LinkConnectionListLinkTablesOptionalParams
  ): Promise<LinkConnectionListLinkTablesResponse>;
  /**
   * Query the link table status of a link connection
   * @param linkConnectionName The link connection name
   * @param queryTableStatusRequest Query table status request
   * @param options The options parameters.
   */
  queryTableStatus(
    linkConnectionName: string,
    queryTableStatusRequest: QueryTableStatusRequest,
    options?: LinkConnectionQueryTableStatusOptionalParams
  ): Promise<LinkConnectionQueryTableStatusResponse>;
  /**
   * Update landing zone credential of a link connection
   * @param linkConnectionName The link connection name
   * @param updateLandingZoneCredentialRequest update landing zone credential request
   * @param options The options parameters.
   */
  updateLandingZoneCredential(
    linkConnectionName: string,
    updateLandingZoneCredentialRequest: UpdateLandingZoneCredential,
    options?: LinkConnectionUpdateLandingZoneCredentialOptionalParams
  ): Promise<void>;
}
