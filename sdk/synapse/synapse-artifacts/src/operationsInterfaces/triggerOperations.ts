/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */

import "@azure/core-paging";
import { PagedAsyncIterableIterator } from "@azure/core-paging";
import { PollerLike, PollOperationState } from "@azure/core-lro";
import {
  TriggerResource,
  TriggerOperationsGetTriggersByWorkspaceOptionalParams,
  TriggerOperationsCreateOrUpdateTriggerOptionalParams,
  TriggerOperationsCreateOrUpdateTriggerResponse,
  TriggerOperationsGetTriggerOptionalParams,
  TriggerOperationsGetTriggerResponse,
  TriggerOperationsDeleteTriggerOptionalParams,
  TriggerOperationsSubscribeTriggerToEventsOptionalParams,
  TriggerOperationsSubscribeTriggerToEventsResponse,
  TriggerOperationsGetEventSubscriptionStatusOptionalParams,
  TriggerOperationsGetEventSubscriptionStatusResponse,
  TriggerOperationsUnsubscribeTriggerFromEventsOptionalParams,
  TriggerOperationsUnsubscribeTriggerFromEventsResponse,
  TriggerOperationsStartTriggerOptionalParams,
  TriggerOperationsStopTriggerOptionalParams
} from "../models";

/// <reference lib="esnext.asynciterable" />
/** Interface representing a TriggerOperations. */
export interface TriggerOperations {
  /**
   * Lists triggers.
   * @param options The options parameters.
   */
  listTriggersByWorkspace(
    options?: TriggerOperationsGetTriggersByWorkspaceOptionalParams
  ): PagedAsyncIterableIterator<TriggerResource>;
  /**
   * Creates or updates a trigger.
   * @param triggerName The trigger name.
   * @param trigger Trigger resource definition.
   * @param options The options parameters.
   */
  beginCreateOrUpdateTrigger(
    triggerName: string,
    trigger: TriggerResource,
    options?: TriggerOperationsCreateOrUpdateTriggerOptionalParams
  ): Promise<
    PollerLike<
      PollOperationState<TriggerOperationsCreateOrUpdateTriggerResponse>,
      TriggerOperationsCreateOrUpdateTriggerResponse
    >
  >;
  /**
   * Creates or updates a trigger.
   * @param triggerName The trigger name.
   * @param trigger Trigger resource definition.
   * @param options The options parameters.
   */
  beginCreateOrUpdateTriggerAndWait(
    triggerName: string,
    trigger: TriggerResource,
    options?: TriggerOperationsCreateOrUpdateTriggerOptionalParams
  ): Promise<TriggerOperationsCreateOrUpdateTriggerResponse>;
  /**
   * Gets a trigger.
   * @param triggerName The trigger name.
   * @param options The options parameters.
   */
  getTrigger(
    triggerName: string,
    options?: TriggerOperationsGetTriggerOptionalParams
  ): Promise<TriggerOperationsGetTriggerResponse>;
  /**
   * Deletes a trigger.
   * @param triggerName The trigger name.
   * @param options The options parameters.
   */
  beginDeleteTrigger(
    triggerName: string,
    options?: TriggerOperationsDeleteTriggerOptionalParams
  ): Promise<PollerLike<PollOperationState<void>, void>>;
  /**
   * Deletes a trigger.
   * @param triggerName The trigger name.
   * @param options The options parameters.
   */
  beginDeleteTriggerAndWait(
    triggerName: string,
    options?: TriggerOperationsDeleteTriggerOptionalParams
  ): Promise<void>;
  /**
   * Subscribe event trigger to events.
   * @param triggerName The trigger name.
   * @param options The options parameters.
   */
  beginSubscribeTriggerToEvents(
    triggerName: string,
    options?: TriggerOperationsSubscribeTriggerToEventsOptionalParams
  ): Promise<
    PollerLike<
      PollOperationState<TriggerOperationsSubscribeTriggerToEventsResponse>,
      TriggerOperationsSubscribeTriggerToEventsResponse
    >
  >;
  /**
   * Subscribe event trigger to events.
   * @param triggerName The trigger name.
   * @param options The options parameters.
   */
  beginSubscribeTriggerToEventsAndWait(
    triggerName: string,
    options?: TriggerOperationsSubscribeTriggerToEventsOptionalParams
  ): Promise<TriggerOperationsSubscribeTriggerToEventsResponse>;
  /**
   * Get a trigger's event subscription status.
   * @param triggerName The trigger name.
   * @param options The options parameters.
   */
  getEventSubscriptionStatus(
    triggerName: string,
    options?: TriggerOperationsGetEventSubscriptionStatusOptionalParams
  ): Promise<TriggerOperationsGetEventSubscriptionStatusResponse>;
  /**
   * Unsubscribe event trigger from events.
   * @param triggerName The trigger name.
   * @param options The options parameters.
   */
  beginUnsubscribeTriggerFromEvents(
    triggerName: string,
    options?: TriggerOperationsUnsubscribeTriggerFromEventsOptionalParams
  ): Promise<
    PollerLike<
      PollOperationState<TriggerOperationsUnsubscribeTriggerFromEventsResponse>,
      TriggerOperationsUnsubscribeTriggerFromEventsResponse
    >
  >;
  /**
   * Unsubscribe event trigger from events.
   * @param triggerName The trigger name.
   * @param options The options parameters.
   */
  beginUnsubscribeTriggerFromEventsAndWait(
    triggerName: string,
    options?: TriggerOperationsUnsubscribeTriggerFromEventsOptionalParams
  ): Promise<TriggerOperationsUnsubscribeTriggerFromEventsResponse>;
  /**
   * Starts a trigger.
   * @param triggerName The trigger name.
   * @param options The options parameters.
   */
  beginStartTrigger(
    triggerName: string,
    options?: TriggerOperationsStartTriggerOptionalParams
  ): Promise<PollerLike<PollOperationState<void>, void>>;
  /**
   * Starts a trigger.
   * @param triggerName The trigger name.
   * @param options The options parameters.
   */
  beginStartTriggerAndWait(
    triggerName: string,
    options?: TriggerOperationsStartTriggerOptionalParams
  ): Promise<void>;
  /**
   * Stops a trigger.
   * @param triggerName The trigger name.
   * @param options The options parameters.
   */
  beginStopTrigger(
    triggerName: string,
    options?: TriggerOperationsStopTriggerOptionalParams
  ): Promise<PollerLike<PollOperationState<void>, void>>;
  /**
   * Stops a trigger.
   * @param triggerName The trigger name.
   * @param options The options parameters.
   */
  beginStopTriggerAndWait(
    triggerName: string,
    options?: TriggerOperationsStopTriggerOptionalParams
  ): Promise<void>;
}
