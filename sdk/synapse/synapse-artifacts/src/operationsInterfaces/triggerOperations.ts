/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */

import { PagedAsyncIterableIterator } from "@azure/core-paging";
import { SimplePollerLike, OperationState } from "@azure/core-lro";
import {
  TriggerResource,
  TriggerGetTriggersByWorkspaceOptionalParams,
  TriggerCreateOrUpdateTriggerOptionalParams,
  TriggerCreateOrUpdateTriggerResponse,
  TriggerGetTriggerOptionalParams,
  TriggerGetTriggerResponse,
  TriggerDeleteTriggerOptionalParams,
  TriggerSubscribeTriggerToEventsOptionalParams,
  TriggerSubscribeTriggerToEventsResponse,
  TriggerGetEventSubscriptionStatusOptionalParams,
  TriggerGetEventSubscriptionStatusResponse,
  TriggerUnsubscribeTriggerFromEventsOptionalParams,
  TriggerUnsubscribeTriggerFromEventsResponse,
  TriggerStartTriggerOptionalParams,
  TriggerStopTriggerOptionalParams
} from "../models";

/// <reference lib="esnext.asynciterable" />
/** Interface representing a TriggerOperations. */
export interface TriggerOperations {
  /**
   * Lists triggers.
   * @param options The options parameters.
   */
  listTriggersByWorkspace(
    options?: TriggerGetTriggersByWorkspaceOptionalParams
  ): PagedAsyncIterableIterator<TriggerResource>;
  /**
   * Creates or updates a trigger.
   * @param triggerName The trigger name.
   * @param trigger Trigger resource definition.
   * @param options The options parameters.
   */
  beginCreateOrUpdateTrigger(
    triggerName: string,
    trigger: TriggerResource,
    options?: TriggerCreateOrUpdateTriggerOptionalParams
  ): Promise<
    SimplePollerLike<
      OperationState<TriggerCreateOrUpdateTriggerResponse>,
      TriggerCreateOrUpdateTriggerResponse
    >
  >;
  /**
   * Creates or updates a trigger.
   * @param triggerName The trigger name.
   * @param trigger Trigger resource definition.
   * @param options The options parameters.
   */
  beginCreateOrUpdateTriggerAndWait(
    triggerName: string,
    trigger: TriggerResource,
    options?: TriggerCreateOrUpdateTriggerOptionalParams
  ): Promise<TriggerCreateOrUpdateTriggerResponse>;
  /**
   * Gets a trigger.
   * @param triggerName The trigger name.
   * @param options The options parameters.
   */
  getTrigger(
    triggerName: string,
    options?: TriggerGetTriggerOptionalParams
  ): Promise<TriggerGetTriggerResponse>;
  /**
   * Deletes a trigger.
   * @param triggerName The trigger name.
   * @param options The options parameters.
   */
  beginDeleteTrigger(
    triggerName: string,
    options?: TriggerDeleteTriggerOptionalParams
  ): Promise<SimplePollerLike<OperationState<void>, void>>;
  /**
   * Deletes a trigger.
   * @param triggerName The trigger name.
   * @param options The options parameters.
   */
  beginDeleteTriggerAndWait(
    triggerName: string,
    options?: TriggerDeleteTriggerOptionalParams
  ): Promise<void>;
  /**
   * Subscribe event trigger to events.
   * @param triggerName The trigger name.
   * @param options The options parameters.
   */
  beginSubscribeTriggerToEvents(
    triggerName: string,
    options?: TriggerSubscribeTriggerToEventsOptionalParams
  ): Promise<
    SimplePollerLike<
      OperationState<TriggerSubscribeTriggerToEventsResponse>,
      TriggerSubscribeTriggerToEventsResponse
    >
  >;
  /**
   * Subscribe event trigger to events.
   * @param triggerName The trigger name.
   * @param options The options parameters.
   */
  beginSubscribeTriggerToEventsAndWait(
    triggerName: string,
    options?: TriggerSubscribeTriggerToEventsOptionalParams
  ): Promise<TriggerSubscribeTriggerToEventsResponse>;
  /**
   * Get a trigger's event subscription status.
   * @param triggerName The trigger name.
   * @param options The options parameters.
   */
  getEventSubscriptionStatus(
    triggerName: string,
    options?: TriggerGetEventSubscriptionStatusOptionalParams
  ): Promise<TriggerGetEventSubscriptionStatusResponse>;
  /**
   * Unsubscribe event trigger from events.
   * @param triggerName The trigger name.
   * @param options The options parameters.
   */
  beginUnsubscribeTriggerFromEvents(
    triggerName: string,
    options?: TriggerUnsubscribeTriggerFromEventsOptionalParams
  ): Promise<
    SimplePollerLike<
      OperationState<TriggerUnsubscribeTriggerFromEventsResponse>,
      TriggerUnsubscribeTriggerFromEventsResponse
    >
  >;
  /**
   * Unsubscribe event trigger from events.
   * @param triggerName The trigger name.
   * @param options The options parameters.
   */
  beginUnsubscribeTriggerFromEventsAndWait(
    triggerName: string,
    options?: TriggerUnsubscribeTriggerFromEventsOptionalParams
  ): Promise<TriggerUnsubscribeTriggerFromEventsResponse>;
  /**
   * Starts a trigger.
   * @param triggerName The trigger name.
   * @param options The options parameters.
   */
  beginStartTrigger(
    triggerName: string,
    options?: TriggerStartTriggerOptionalParams
  ): Promise<SimplePollerLike<OperationState<void>, void>>;
  /**
   * Starts a trigger.
   * @param triggerName The trigger name.
   * @param options The options parameters.
   */
  beginStartTriggerAndWait(
    triggerName: string,
    options?: TriggerStartTriggerOptionalParams
  ): Promise<void>;
  /**
   * Stops a trigger.
   * @param triggerName The trigger name.
   * @param options The options parameters.
   */
  beginStopTrigger(
    triggerName: string,
    options?: TriggerStopTriggerOptionalParams
  ): Promise<SimplePollerLike<OperationState<void>, void>>;
  /**
   * Stops a trigger.
   * @param triggerName The trigger name.
   * @param options The options parameters.
   */
  beginStopTriggerAndWait(
    triggerName: string,
    options?: TriggerStopTriggerOptionalParams
  ): Promise<void>;
}
