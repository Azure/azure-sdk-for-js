/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */

import "@azure/core-paging";
import { PagedAsyncIterableIterator } from "@azure/core-paging";
import { PollerLike, PollOperationState } from "@azure/core-lro";
import {
  NotebookResource,
  NotebookOperationsGetNotebooksByWorkspaceOptionalParams,
  NotebookOperationsGetNotebookSummaryByWorkSpaceOptionalParams,
  NotebookOperationsCreateOrUpdateNotebookOptionalParams,
  NotebookOperationsCreateOrUpdateNotebookResponse,
  NotebookOperationsGetNotebookOptionalParams,
  NotebookOperationsGetNotebookResponse,
  NotebookOperationsDeleteNotebookOptionalParams,
  ArtifactRenameRequest,
  NotebookOperationsRenameNotebookOptionalParams
} from "../models";

/// <reference lib="esnext.asynciterable" />
/** Interface representing a NotebookOperations. */
export interface NotebookOperations {
  /**
   * Lists Notebooks.
   * @param options The options parameters.
   */
  listNotebooksByWorkspace(
    options?: NotebookOperationsGetNotebooksByWorkspaceOptionalParams
  ): PagedAsyncIterableIterator<NotebookResource>;
  /**
   * Lists a summary of Notebooks.
   * @param options The options parameters.
   */
  listNotebookSummaryByWorkSpace(
    options?: NotebookOperationsGetNotebookSummaryByWorkSpaceOptionalParams
  ): PagedAsyncIterableIterator<NotebookResource>;
  /**
   * Creates or updates a Note Book.
   * @param notebookName The notebook name.
   * @param notebook Note book resource definition.
   * @param options The options parameters.
   */
  beginCreateOrUpdateNotebook(
    notebookName: string,
    notebook: NotebookResource,
    options?: NotebookOperationsCreateOrUpdateNotebookOptionalParams
  ): Promise<
    PollerLike<
      PollOperationState<NotebookOperationsCreateOrUpdateNotebookResponse>,
      NotebookOperationsCreateOrUpdateNotebookResponse
    >
  >;
  /**
   * Creates or updates a Note Book.
   * @param notebookName The notebook name.
   * @param notebook Note book resource definition.
   * @param options The options parameters.
   */
  beginCreateOrUpdateNotebookAndWait(
    notebookName: string,
    notebook: NotebookResource,
    options?: NotebookOperationsCreateOrUpdateNotebookOptionalParams
  ): Promise<NotebookOperationsCreateOrUpdateNotebookResponse>;
  /**
   * Gets a Note Book.
   * @param notebookName The notebook name.
   * @param options The options parameters.
   */
  getNotebook(
    notebookName: string,
    options?: NotebookOperationsGetNotebookOptionalParams
  ): Promise<NotebookOperationsGetNotebookResponse>;
  /**
   * Deletes a Note book.
   * @param notebookName The notebook name.
   * @param options The options parameters.
   */
  beginDeleteNotebook(
    notebookName: string,
    options?: NotebookOperationsDeleteNotebookOptionalParams
  ): Promise<PollerLike<PollOperationState<void>, void>>;
  /**
   * Deletes a Note book.
   * @param notebookName The notebook name.
   * @param options The options parameters.
   */
  beginDeleteNotebookAndWait(
    notebookName: string,
    options?: NotebookOperationsDeleteNotebookOptionalParams
  ): Promise<void>;
  /**
   * Renames a notebook.
   * @param notebookName The notebook name.
   * @param request proposed new name.
   * @param options The options parameters.
   */
  beginRenameNotebook(
    notebookName: string,
    request: ArtifactRenameRequest,
    options?: NotebookOperationsRenameNotebookOptionalParams
  ): Promise<PollerLike<PollOperationState<void>, void>>;
  /**
   * Renames a notebook.
   * @param notebookName The notebook name.
   * @param request proposed new name.
   * @param options The options parameters.
   */
  beginRenameNotebookAndWait(
    notebookName: string,
    request: ArtifactRenameRequest,
    options?: NotebookOperationsRenameNotebookOptionalParams
  ): Promise<void>;
}
