/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */

import "@azure/core-paging";
import { PagedAsyncIterableIterator } from "@azure/core-paging";
import { PollerLike, PollOperationState } from "@azure/core-lro";
import {
  LinkedServiceResource,
  LinkedServiceOperationsGetLinkedServicesByWorkspaceOptionalParams,
  LinkedServiceOperationsCreateOrUpdateLinkedServiceOptionalParams,
  LinkedServiceOperationsCreateOrUpdateLinkedServiceResponse,
  LinkedServiceOperationsGetLinkedServiceOptionalParams,
  LinkedServiceOperationsGetLinkedServiceResponse,
  LinkedServiceOperationsDeleteLinkedServiceOptionalParams,
  ArtifactRenameRequest,
  LinkedServiceOperationsRenameLinkedServiceOptionalParams
} from "../models";

/// <reference lib="esnext.asynciterable" />
/** Interface representing a LinkedServiceOperations. */
export interface LinkedServiceOperations {
  /**
   * Lists linked services.
   * @param options The options parameters.
   */
  listLinkedServicesByWorkspace(
    options?: LinkedServiceOperationsGetLinkedServicesByWorkspaceOptionalParams
  ): PagedAsyncIterableIterator<LinkedServiceResource>;
  /**
   * Creates or updates a linked service.
   * @param linkedServiceName The linked service name.
   * @param linkedService Linked service resource definition.
   * @param options The options parameters.
   */
  beginCreateOrUpdateLinkedService(
    linkedServiceName: string,
    linkedService: LinkedServiceResource,
    options?: LinkedServiceOperationsCreateOrUpdateLinkedServiceOptionalParams
  ): Promise<
    PollerLike<
      PollOperationState<
        LinkedServiceOperationsCreateOrUpdateLinkedServiceResponse
      >,
      LinkedServiceOperationsCreateOrUpdateLinkedServiceResponse
    >
  >;
  /**
   * Creates or updates a linked service.
   * @param linkedServiceName The linked service name.
   * @param linkedService Linked service resource definition.
   * @param options The options parameters.
   */
  beginCreateOrUpdateLinkedServiceAndWait(
    linkedServiceName: string,
    linkedService: LinkedServiceResource,
    options?: LinkedServiceOperationsCreateOrUpdateLinkedServiceOptionalParams
  ): Promise<LinkedServiceOperationsCreateOrUpdateLinkedServiceResponse>;
  /**
   * Gets a linked service.
   * @param linkedServiceName The linked service name.
   * @param options The options parameters.
   */
  getLinkedService(
    linkedServiceName: string,
    options?: LinkedServiceOperationsGetLinkedServiceOptionalParams
  ): Promise<LinkedServiceOperationsGetLinkedServiceResponse>;
  /**
   * Deletes a linked service.
   * @param linkedServiceName The linked service name.
   * @param options The options parameters.
   */
  beginDeleteLinkedService(
    linkedServiceName: string,
    options?: LinkedServiceOperationsDeleteLinkedServiceOptionalParams
  ): Promise<PollerLike<PollOperationState<void>, void>>;
  /**
   * Deletes a linked service.
   * @param linkedServiceName The linked service name.
   * @param options The options parameters.
   */
  beginDeleteLinkedServiceAndWait(
    linkedServiceName: string,
    options?: LinkedServiceOperationsDeleteLinkedServiceOptionalParams
  ): Promise<void>;
  /**
   * Renames a linked service.
   * @param linkedServiceName The linked service name.
   * @param request proposed new name.
   * @param options The options parameters.
   */
  beginRenameLinkedService(
    linkedServiceName: string,
    request: ArtifactRenameRequest,
    options?: LinkedServiceOperationsRenameLinkedServiceOptionalParams
  ): Promise<PollerLike<PollOperationState<void>, void>>;
  /**
   * Renames a linked service.
   * @param linkedServiceName The linked service name.
   * @param request proposed new name.
   * @param options The options parameters.
   */
  beginRenameLinkedServiceAndWait(
    linkedServiceName: string,
    request: ArtifactRenameRequest,
    options?: LinkedServiceOperationsRenameLinkedServiceOptionalParams
  ): Promise<void>;
}
