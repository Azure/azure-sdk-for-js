/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */

import "@azure/core-paging";
import { PagedAsyncIterableIterator } from "@azure/core-paging";
import * as coreHttp from "@azure/core-http";
import { LROPoller } from "../lro";
import {
  NotebookResource,
  NotebookCreateOrUpdateNotebookOptionalParams,
  NotebookCreateOrUpdateNotebookResponse,
  NotebookGetNotebookOptionalParams,
  NotebookGetNotebookResponse,
  ArtifactRenameRequest
} from "../models";

/// <reference lib="esnext.asynciterable" />
/** Interface representing a Notebook. */
export interface Notebook {
  /**
   * Lists Notebooks.
   * @param options The options parameters.
   */
  listNotebooksByWorkspace(
    options?: coreHttp.OperationOptions
  ): PagedAsyncIterableIterator<NotebookResource>;
  /**
   * Lists a summary of Notebooks.
   * @param options The options parameters.
   */
  listNotebookSummaryByWorkSpace(
    options?: coreHttp.OperationOptions
  ): PagedAsyncIterableIterator<NotebookResource>;
  /**
   * Creates or updates a Note Book.
   * @param notebookName The notebook name.
   * @param notebook Note book resource definition.
   * @param options The options parameters.
   */
  createOrUpdateNotebook(
    notebookName: string,
    notebook: NotebookResource,
    options?: NotebookCreateOrUpdateNotebookOptionalParams
  ): Promise<LROPoller<NotebookCreateOrUpdateNotebookResponse>>;
  /**
   * Gets a Note Book.
   * @param notebookName The notebook name.
   * @param options The options parameters.
   */
  getNotebook(
    notebookName: string,
    options?: NotebookGetNotebookOptionalParams
  ): Promise<NotebookGetNotebookResponse>;
  /**
   * Deletes a Note book.
   * @param notebookName The notebook name.
   * @param options The options parameters.
   */
  deleteNotebook(
    notebookName: string,
    options?: coreHttp.OperationOptions
  ): Promise<LROPoller<coreHttp.RestResponse>>;
  /**
   * Renames a notebook.
   * @param notebookName The notebook name.
   * @param request proposed new name.
   * @param options The options parameters.
   */
  renameNotebook(
    notebookName: string,
    request: ArtifactRenameRequest,
    options?: coreHttp.OperationOptions
  ): Promise<LROPoller<coreHttp.RestResponse>>;
}
