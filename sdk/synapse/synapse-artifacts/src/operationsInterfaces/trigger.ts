/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */

import "@azure/core-paging";
import { PagedAsyncIterableIterator } from "@azure/core-paging";
import * as coreHttp from "@azure/core-http";
import { LROPoller } from "../lro";
import {
  TriggerResource,
  TriggerCreateOrUpdateTriggerOptionalParams,
  TriggerCreateOrUpdateTriggerResponse,
  TriggerGetTriggerOptionalParams,
  TriggerGetTriggerResponse,
  TriggerSubscribeTriggerToEventsResponse,
  TriggerGetEventSubscriptionStatusResponse,
  TriggerUnsubscribeTriggerFromEventsResponse
} from "../models";

/// <reference lib="esnext.asynciterable" />
/** Interface representing a Trigger. */
export interface Trigger {
  /**
   * Lists triggers.
   * @param options The options parameters.
   */
  listTriggersByWorkspace(
    options?: coreHttp.OperationOptions
  ): PagedAsyncIterableIterator<TriggerResource>;
  /**
   * Creates or updates a trigger.
   * @param triggerName The trigger name.
   * @param trigger Trigger resource definition.
   * @param options The options parameters.
   */
  createOrUpdateTrigger(
    triggerName: string,
    trigger: TriggerResource,
    options?: TriggerCreateOrUpdateTriggerOptionalParams
  ): Promise<LROPoller<TriggerCreateOrUpdateTriggerResponse>>;
  /**
   * Gets a trigger.
   * @param triggerName The trigger name.
   * @param options The options parameters.
   */
  getTrigger(
    triggerName: string,
    options?: TriggerGetTriggerOptionalParams
  ): Promise<TriggerGetTriggerResponse>;
  /**
   * Deletes a trigger.
   * @param triggerName The trigger name.
   * @param options The options parameters.
   */
  deleteTrigger(
    triggerName: string,
    options?: coreHttp.OperationOptions
  ): Promise<LROPoller<coreHttp.RestResponse>>;
  /**
   * Subscribe event trigger to events.
   * @param triggerName The trigger name.
   * @param options The options parameters.
   */
  subscribeTriggerToEvents(
    triggerName: string,
    options?: coreHttp.OperationOptions
  ): Promise<LROPoller<TriggerSubscribeTriggerToEventsResponse>>;
  /**
   * Get a trigger's event subscription status.
   * @param triggerName The trigger name.
   * @param options The options parameters.
   */
  getEventSubscriptionStatus(
    triggerName: string,
    options?: coreHttp.OperationOptions
  ): Promise<TriggerGetEventSubscriptionStatusResponse>;
  /**
   * Unsubscribe event trigger from events.
   * @param triggerName The trigger name.
   * @param options The options parameters.
   */
  unsubscribeTriggerFromEvents(
    triggerName: string,
    options?: coreHttp.OperationOptions
  ): Promise<LROPoller<TriggerUnsubscribeTriggerFromEventsResponse>>;
  /**
   * Starts a trigger.
   * @param triggerName The trigger name.
   * @param options The options parameters.
   */
  startTrigger(
    triggerName: string,
    options?: coreHttp.OperationOptions
  ): Promise<LROPoller<coreHttp.RestResponse>>;
  /**
   * Stops a trigger.
   * @param triggerName The trigger name.
   * @param options The options parameters.
   */
  stopTrigger(
    triggerName: string,
    options?: coreHttp.OperationOptions
  ): Promise<LROPoller<coreHttp.RestResponse>>;
}
