/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */

import { tracingClient } from "../tracing";
import { PagedAsyncIterableIterator, PageSettings } from "@azure/core-paging";
import { setContinuationToken } from "../pagingHelper";
import { SparkConfigurationOperations } from "../operationsInterfaces";
import * as coreClient from "@azure/core-client";
import * as Mappers from "../models/mappers";
import * as Parameters from "../models/parameters";
import { ArtifactsClient } from "../artifactsClient";
import { PollerLike, PollOperationState, LroEngine } from "@azure/core-lro";
import { LroImpl } from "../lroImpl";
import {
  SparkConfigurationResource,
  SparkConfigurationGetSparkConfigurationsByWorkspaceNextOptionalParams,
  SparkConfigurationGetSparkConfigurationsByWorkspaceOptionalParams,
  SparkConfigurationGetSparkConfigurationsByWorkspaceResponse,
  SparkConfigurationCreateOrUpdateSparkConfigurationOptionalParams,
  SparkConfigurationCreateOrUpdateSparkConfigurationResponse,
  SparkConfigurationGetSparkConfigurationOptionalParams,
  SparkConfigurationGetSparkConfigurationResponse,
  SparkConfigurationDeleteSparkConfigurationOptionalParams,
  ArtifactRenameRequest,
  SparkConfigurationRenameSparkConfigurationOptionalParams,
  SparkConfigurationGetSparkConfigurationsByWorkspaceNextResponse
} from "../models";

/// <reference lib="esnext.asynciterable" />
/** Class containing SparkConfigurationOperations operations. */
export class SparkConfigurationOperationsImpl
  implements SparkConfigurationOperations {
  private readonly client: ArtifactsClient;

  /**
   * Initialize a new instance of the class SparkConfigurationOperations class.
   * @param client Reference to the service client
   */
  constructor(client: ArtifactsClient) {
    this.client = client;
  }

  /**
   * Lists sparkconfigurations.
   * @param options The options parameters.
   */
  public listSparkConfigurationsByWorkspace(
    options?: SparkConfigurationGetSparkConfigurationsByWorkspaceOptionalParams
  ): PagedAsyncIterableIterator<SparkConfigurationResource> {
    const iter = this.getSparkConfigurationsByWorkspacePagingAll(options);
    return {
      next() {
        return iter.next();
      },
      [Symbol.asyncIterator]() {
        return this;
      },
      byPage: (settings?: PageSettings) => {
        if (settings?.maxPageSize) {
          throw new Error("maxPageSize is not supported by this operation.");
        }
        return this.getSparkConfigurationsByWorkspacePagingPage(
          options,
          settings
        );
      }
    };
  }

  private async *getSparkConfigurationsByWorkspacePagingPage(
    options?: SparkConfigurationGetSparkConfigurationsByWorkspaceOptionalParams,
    settings?: PageSettings
  ): AsyncIterableIterator<SparkConfigurationResource[]> {
    let result: SparkConfigurationGetSparkConfigurationsByWorkspaceResponse;
    let continuationToken = settings?.continuationToken;
    if (!continuationToken) {
      result = await this._getSparkConfigurationsByWorkspace(options);
      let page = result.value || [];
      continuationToken = result.nextLink;
      setContinuationToken(page, continuationToken);
      yield page;
    }
    while (continuationToken) {
      result = await this._getSparkConfigurationsByWorkspaceNext(
        continuationToken,
        options
      );
      continuationToken = result.nextLink;
      let page = result.value || [];
      setContinuationToken(page, continuationToken);
      yield page;
    }
  }

  private async *getSparkConfigurationsByWorkspacePagingAll(
    options?: SparkConfigurationGetSparkConfigurationsByWorkspaceOptionalParams
  ): AsyncIterableIterator<SparkConfigurationResource> {
    for await (const page of this.getSparkConfigurationsByWorkspacePagingPage(
      options
    )) {
      yield* page;
    }
  }

  /**
   * Lists sparkconfigurations.
   * @param options The options parameters.
   */
  private async _getSparkConfigurationsByWorkspace(
    options?: SparkConfigurationGetSparkConfigurationsByWorkspaceOptionalParams
  ): Promise<SparkConfigurationGetSparkConfigurationsByWorkspaceResponse> {
    return tracingClient.withSpan(
      "ArtifactsClient._getSparkConfigurationsByWorkspace",
      options ?? {},
      async (options) => {
        return this.client.sendOperationRequest(
          { options },
          getSparkConfigurationsByWorkspaceOperationSpec
        ) as Promise<
          SparkConfigurationGetSparkConfigurationsByWorkspaceResponse
        >;
      }
    );
  }

  /**
   * Creates or updates a sparkconfiguration.
   * @param sparkConfigurationName The spark Configuration name.
   * @param sparkConfiguration SparkConfiguration resource definition.
   * @param options The options parameters.
   */
  async beginCreateOrUpdateSparkConfiguration(
    sparkConfigurationName: string,
    sparkConfiguration: SparkConfigurationResource,
    options?: SparkConfigurationCreateOrUpdateSparkConfigurationOptionalParams
  ): Promise<
    PollerLike<
      PollOperationState<
        SparkConfigurationCreateOrUpdateSparkConfigurationResponse
      >,
      SparkConfigurationCreateOrUpdateSparkConfigurationResponse
    >
  > {
    const directSendOperation = async (
      args: coreClient.OperationArguments,
      spec: coreClient.OperationSpec
    ): Promise<SparkConfigurationCreateOrUpdateSparkConfigurationResponse> => {
      return tracingClient.withSpan(
        "ArtifactsClient.beginCreateOrUpdateSparkConfiguration",
        options ?? {},
        async () => {
          return this.client.sendOperationRequest(args, spec) as Promise<
            SparkConfigurationCreateOrUpdateSparkConfigurationResponse
          >;
        }
      );
    };
    const sendOperation = async (
      args: coreClient.OperationArguments,
      spec: coreClient.OperationSpec
    ) => {
      let currentRawResponse:
        | coreClient.FullOperationResponse
        | undefined = undefined;
      const providedCallback = args.options?.onResponse;
      const callback: coreClient.RawResponseCallback = (
        rawResponse: coreClient.FullOperationResponse,
        flatResponse: unknown
      ) => {
        currentRawResponse = rawResponse;
        providedCallback?.(rawResponse, flatResponse);
      };
      const updatedArgs = {
        ...args,
        options: {
          ...args.options,
          onResponse: callback
        }
      };
      const flatResponse = await directSendOperation(updatedArgs, spec);
      return {
        flatResponse,
        rawResponse: {
          statusCode: currentRawResponse!.status,
          body: currentRawResponse!.parsedBody,
          headers: currentRawResponse!.headers.toJSON()
        }
      };
    };

    const lro = new LroImpl(
      sendOperation,
      { sparkConfigurationName, sparkConfiguration, options },
      createOrUpdateSparkConfigurationOperationSpec
    );
    const poller = new LroEngine(lro, {
      resumeFrom: options?.resumeFrom,
      intervalInMs: options?.updateIntervalInMs
    });
    await poller.poll();
    return poller;
  }

  /**
   * Creates or updates a sparkconfiguration.
   * @param sparkConfigurationName The spark Configuration name.
   * @param sparkConfiguration SparkConfiguration resource definition.
   * @param options The options parameters.
   */
  async beginCreateOrUpdateSparkConfigurationAndWait(
    sparkConfigurationName: string,
    sparkConfiguration: SparkConfigurationResource,
    options?: SparkConfigurationCreateOrUpdateSparkConfigurationOptionalParams
  ): Promise<SparkConfigurationCreateOrUpdateSparkConfigurationResponse> {
    const poller = await this.beginCreateOrUpdateSparkConfiguration(
      sparkConfigurationName,
      sparkConfiguration,
      options
    );
    return poller.pollUntilDone();
  }

  /**
   * Gets a sparkConfiguration.
   * @param sparkConfigurationName The spark Configuration name.
   * @param options The options parameters.
   */
  async getSparkConfiguration(
    sparkConfigurationName: string,
    options?: SparkConfigurationGetSparkConfigurationOptionalParams
  ): Promise<SparkConfigurationGetSparkConfigurationResponse> {
    return tracingClient.withSpan(
      "ArtifactsClient.getSparkConfiguration",
      options ?? {},
      async (options) => {
        return this.client.sendOperationRequest(
          { sparkConfigurationName, options },
          getSparkConfigurationOperationSpec
        ) as Promise<SparkConfigurationGetSparkConfigurationResponse>;
      }
    );
  }

  /**
   * Deletes a sparkConfiguration.
   * @param sparkConfigurationName The spark Configuration name.
   * @param options The options parameters.
   */
  async beginDeleteSparkConfiguration(
    sparkConfigurationName: string,
    options?: SparkConfigurationDeleteSparkConfigurationOptionalParams
  ): Promise<PollerLike<PollOperationState<void>, void>> {
    const directSendOperation = async (
      args: coreClient.OperationArguments,
      spec: coreClient.OperationSpec
    ): Promise<void> => {
      return tracingClient.withSpan(
        "ArtifactsClient.beginDeleteSparkConfiguration",
        options ?? {},
        async () => {
          return this.client.sendOperationRequest(args, spec) as Promise<void>;
        }
      );
    };
    const sendOperation = async (
      args: coreClient.OperationArguments,
      spec: coreClient.OperationSpec
    ) => {
      let currentRawResponse:
        | coreClient.FullOperationResponse
        | undefined = undefined;
      const providedCallback = args.options?.onResponse;
      const callback: coreClient.RawResponseCallback = (
        rawResponse: coreClient.FullOperationResponse,
        flatResponse: unknown
      ) => {
        currentRawResponse = rawResponse;
        providedCallback?.(rawResponse, flatResponse);
      };
      const updatedArgs = {
        ...args,
        options: {
          ...args.options,
          onResponse: callback
        }
      };
      const flatResponse = await directSendOperation(updatedArgs, spec);
      return {
        flatResponse,
        rawResponse: {
          statusCode: currentRawResponse!.status,
          body: currentRawResponse!.parsedBody,
          headers: currentRawResponse!.headers.toJSON()
        }
      };
    };

    const lro = new LroImpl(
      sendOperation,
      { sparkConfigurationName, options },
      deleteSparkConfigurationOperationSpec
    );
    const poller = new LroEngine(lro, {
      resumeFrom: options?.resumeFrom,
      intervalInMs: options?.updateIntervalInMs
    });
    await poller.poll();
    return poller;
  }

  /**
   * Deletes a sparkConfiguration.
   * @param sparkConfigurationName The spark Configuration name.
   * @param options The options parameters.
   */
  async beginDeleteSparkConfigurationAndWait(
    sparkConfigurationName: string,
    options?: SparkConfigurationDeleteSparkConfigurationOptionalParams
  ): Promise<void> {
    const poller = await this.beginDeleteSparkConfiguration(
      sparkConfigurationName,
      options
    );
    return poller.pollUntilDone();
  }

  /**
   * Renames a sparkConfiguration.
   * @param sparkConfigurationName The spark Configuration name.
   * @param request proposed new name.
   * @param options The options parameters.
   */
  async beginRenameSparkConfiguration(
    sparkConfigurationName: string,
    request: ArtifactRenameRequest,
    options?: SparkConfigurationRenameSparkConfigurationOptionalParams
  ): Promise<PollerLike<PollOperationState<void>, void>> {
    const directSendOperation = async (
      args: coreClient.OperationArguments,
      spec: coreClient.OperationSpec
    ): Promise<void> => {
      return tracingClient.withSpan(
        "ArtifactsClient.beginRenameSparkConfiguration",
        options ?? {},
        async () => {
          return this.client.sendOperationRequest(args, spec) as Promise<void>;
        }
      );
    };
    const sendOperation = async (
      args: coreClient.OperationArguments,
      spec: coreClient.OperationSpec
    ) => {
      let currentRawResponse:
        | coreClient.FullOperationResponse
        | undefined = undefined;
      const providedCallback = args.options?.onResponse;
      const callback: coreClient.RawResponseCallback = (
        rawResponse: coreClient.FullOperationResponse,
        flatResponse: unknown
      ) => {
        currentRawResponse = rawResponse;
        providedCallback?.(rawResponse, flatResponse);
      };
      const updatedArgs = {
        ...args,
        options: {
          ...args.options,
          onResponse: callback
        }
      };
      const flatResponse = await directSendOperation(updatedArgs, spec);
      return {
        flatResponse,
        rawResponse: {
          statusCode: currentRawResponse!.status,
          body: currentRawResponse!.parsedBody,
          headers: currentRawResponse!.headers.toJSON()
        }
      };
    };

    const lro = new LroImpl(
      sendOperation,
      { sparkConfigurationName, request, options },
      renameSparkConfigurationOperationSpec
    );
    const poller = new LroEngine(lro, {
      resumeFrom: options?.resumeFrom,
      intervalInMs: options?.updateIntervalInMs
    });
    await poller.poll();
    return poller;
  }

  /**
   * Renames a sparkConfiguration.
   * @param sparkConfigurationName The spark Configuration name.
   * @param request proposed new name.
   * @param options The options parameters.
   */
  async beginRenameSparkConfigurationAndWait(
    sparkConfigurationName: string,
    request: ArtifactRenameRequest,
    options?: SparkConfigurationRenameSparkConfigurationOptionalParams
  ): Promise<void> {
    const poller = await this.beginRenameSparkConfiguration(
      sparkConfigurationName,
      request,
      options
    );
    return poller.pollUntilDone();
  }

  /**
   * GetSparkConfigurationsByWorkspaceNext
   * @param nextLink The nextLink from the previous successful call to the
   *                 GetSparkConfigurationsByWorkspace method.
   * @param options The options parameters.
   */
  private async _getSparkConfigurationsByWorkspaceNext(
    nextLink: string,
    options?: SparkConfigurationGetSparkConfigurationsByWorkspaceNextOptionalParams
  ): Promise<SparkConfigurationGetSparkConfigurationsByWorkspaceNextResponse> {
    return tracingClient.withSpan(
      "ArtifactsClient._getSparkConfigurationsByWorkspaceNext",
      options ?? {},
      async (options) => {
        return this.client.sendOperationRequest(
          { nextLink, options },
          getSparkConfigurationsByWorkspaceNextOperationSpec
        ) as Promise<
          SparkConfigurationGetSparkConfigurationsByWorkspaceNextResponse
        >;
      }
    );
  }
}
// Operation Specifications
const serializer = coreClient.createSerializer(Mappers, /* isXml */ false);

const getSparkConfigurationsByWorkspaceOperationSpec: coreClient.OperationSpec = {
  path: "/sparkconfigurations",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.SparkConfigurationListResponse
    },
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  queryParameters: [Parameters.apiVersion3],
  urlParameters: [Parameters.endpoint],
  headerParameters: [Parameters.accept],
  serializer
};
const createOrUpdateSparkConfigurationOperationSpec: coreClient.OperationSpec = {
  path: "/sparkconfigurations/{sparkConfigurationName}",
  httpMethod: "PUT",
  responses: {
    200: {
      bodyMapper: Mappers.SparkConfigurationResource
    },
    201: {
      bodyMapper: Mappers.SparkConfigurationResource
    },
    202: {
      bodyMapper: Mappers.SparkConfigurationResource
    },
    204: {
      bodyMapper: Mappers.SparkConfigurationResource
    },
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  requestBody: Parameters.sparkConfiguration,
  queryParameters: [Parameters.apiVersion3],
  urlParameters: [Parameters.endpoint, Parameters.sparkConfigurationName],
  headerParameters: [
    Parameters.accept,
    Parameters.contentType,
    Parameters.ifMatch
  ],
  mediaType: "json",
  serializer
};
const getSparkConfigurationOperationSpec: coreClient.OperationSpec = {
  path: "/sparkconfigurations/{sparkConfigurationName}",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.SparkConfigurationResource
    },
    304: {},
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  queryParameters: [Parameters.apiVersion3],
  urlParameters: [Parameters.endpoint, Parameters.sparkConfigurationName],
  headerParameters: [Parameters.accept, Parameters.ifNoneMatch],
  serializer
};
const deleteSparkConfigurationOperationSpec: coreClient.OperationSpec = {
  path: "/sparkconfigurations/{sparkConfigurationName}",
  httpMethod: "DELETE",
  responses: {
    200: {},
    201: {},
    202: {},
    204: {},
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  queryParameters: [Parameters.apiVersion3],
  urlParameters: [Parameters.endpoint, Parameters.sparkConfigurationName],
  headerParameters: [Parameters.accept],
  serializer
};
const renameSparkConfigurationOperationSpec: coreClient.OperationSpec = {
  path: "/sparkconfigurations/{sparkConfigurationName}/rename",
  httpMethod: "POST",
  responses: {
    200: {},
    201: {},
    202: {},
    204: {},
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  requestBody: Parameters.request,
  queryParameters: [Parameters.apiVersion3],
  urlParameters: [Parameters.endpoint, Parameters.sparkConfigurationName],
  headerParameters: [Parameters.accept, Parameters.contentType],
  mediaType: "json",
  serializer
};
const getSparkConfigurationsByWorkspaceNextOperationSpec: coreClient.OperationSpec = {
  path: "{nextLink}",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.SparkConfigurationListResponse
    },
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  urlParameters: [Parameters.endpoint, Parameters.nextLink],
  headerParameters: [Parameters.accept],
  serializer
};
