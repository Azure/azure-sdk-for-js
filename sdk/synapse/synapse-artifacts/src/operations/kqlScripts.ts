/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */

import { tracingClient } from "../tracing";
import { PagedAsyncIterableIterator, PageSettings } from "@azure/core-paging";
import { setContinuationToken } from "../pagingHelper";
import { KqlScripts } from "../operationsInterfaces";
import * as coreClient from "@azure/core-client";
import * as Mappers from "../models/mappers";
import * as Parameters from "../models/parameters";
import { ArtifactsClient } from "../artifactsClient";
import {
  KqlScriptResource,
  KqlScriptsGetAllNextOptionalParams,
  KqlScriptsGetAllOptionalParams,
  KqlScriptsGetAllResponse,
  KqlScriptsGetAllNextResponse
} from "../models";

/// <reference lib="esnext.asynciterable" />
/** Class containing KqlScripts operations. */
export class KqlScriptsImpl implements KqlScripts {
  private readonly client: ArtifactsClient;

  /**
   * Initialize a new instance of the class KqlScripts class.
   * @param client Reference to the service client
   */
  constructor(client: ArtifactsClient) {
    this.client = client;
  }

  /**
   * Get all KQL scripts
   * @param options The options parameters.
   */
  public listAll(
    options?: KqlScriptsGetAllOptionalParams
  ): PagedAsyncIterableIterator<KqlScriptResource> {
    const iter = this.getAllPagingAll(options);
    return {
      next() {
        return iter.next();
      },
      [Symbol.asyncIterator]() {
        return this;
      },
      byPage: (settings?: PageSettings) => {
        if (settings?.maxPageSize) {
          throw new Error("maxPageSize is not supported by this operation.");
        }
        return this.getAllPagingPage(options, settings);
      }
    };
  }

  private async *getAllPagingPage(
    options?: KqlScriptsGetAllOptionalParams,
    settings?: PageSettings
  ): AsyncIterableIterator<KqlScriptResource[]> {
    let result: KqlScriptsGetAllResponse;
    let continuationToken = settings?.continuationToken;
    if (!continuationToken) {
      result = await this._getAll(options);
      let page = result.value || [];
      continuationToken = result.nextLink;
      setContinuationToken(page, continuationToken);
      yield page;
    }
    while (continuationToken) {
      result = await this._getAllNext(continuationToken, options);
      continuationToken = result.nextLink;
      let page = result.value || [];
      setContinuationToken(page, continuationToken);
      yield page;
    }
  }

  private async *getAllPagingAll(
    options?: KqlScriptsGetAllOptionalParams
  ): AsyncIterableIterator<KqlScriptResource> {
    for await (const page of this.getAllPagingPage(options)) {
      yield* page;
    }
  }

  /**
   * Get all KQL scripts
   * @param options The options parameters.
   */
  private async _getAll(
    options?: KqlScriptsGetAllOptionalParams
  ): Promise<KqlScriptsGetAllResponse> {
    return tracingClient.withSpan(
      "ArtifactsClient._getAll",
      options ?? {},
      async (options) => {
        return this.client.sendOperationRequest(
          { options },
          getAllOperationSpec
        ) as Promise<KqlScriptsGetAllResponse>;
      }
    );
  }

  /**
   * GetAllNext
   * @param nextLink The nextLink from the previous successful call to the GetAll method.
   * @param options The options parameters.
   */
  private async _getAllNext(
    nextLink: string,
    options?: KqlScriptsGetAllNextOptionalParams
  ): Promise<KqlScriptsGetAllNextResponse> {
    return tracingClient.withSpan(
      "ArtifactsClient._getAllNext",
      options ?? {},
      async (options) => {
        return this.client.sendOperationRequest(
          { nextLink, options },
          getAllNextOperationSpec
        ) as Promise<KqlScriptsGetAllNextResponse>;
      }
    );
  }
}
// Operation Specifications
const serializer = coreClient.createSerializer(Mappers, /* isXml */ false);

const getAllOperationSpec: coreClient.OperationSpec = {
  path: "/kqlScripts",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.KqlScriptsResourceCollectionResponse
    },
    default: {
      bodyMapper: Mappers.ErrorContract
    }
  },
  queryParameters: [Parameters.apiVersion1],
  urlParameters: [Parameters.endpoint],
  headerParameters: [Parameters.accept],
  serializer
};
const getAllNextOperationSpec: coreClient.OperationSpec = {
  path: "{nextLink}",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.KqlScriptsResourceCollectionResponse
    },
    default: {
      bodyMapper: Mappers.ErrorContract
    }
  },
  urlParameters: [Parameters.endpoint, Parameters.nextLink],
  headerParameters: [Parameters.accept],
  serializer
};
