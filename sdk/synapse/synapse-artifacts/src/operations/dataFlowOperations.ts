/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */

import { createSpan } from "../tracing";
import "@azure/core-paging";
import { PagedAsyncIterableIterator } from "@azure/core-paging";
import { DataFlowOperations } from "../operationsInterfaces";
import * as coreClient from "@azure/core-client";
import * as coreTracing from "@azure/core-tracing";
import * as Mappers from "../models/mappers";
import * as Parameters from "../models/parameters";
import { ArtifactsClientContext } from "../artifactsClientContext";
import { PollerLike, PollOperationState, LroEngine } from "@azure/core-lro";
import { LroImpl } from "../lroImpl";
import {
  DataFlowResource,
  DataFlowOperationsGetDataFlowsByWorkspaceNextOptionalParams,
  DataFlowOperationsGetDataFlowsByWorkspaceOptionalParams,
  DataFlowOperationsCreateOrUpdateDataFlowOptionalParams,
  DataFlowOperationsCreateOrUpdateDataFlowResponse,
  DataFlowOperationsGetDataFlowOptionalParams,
  DataFlowOperationsGetDataFlowResponse,
  DataFlowOperationsDeleteDataFlowOptionalParams,
  ArtifactRenameRequest,
  DataFlowOperationsRenameDataFlowOptionalParams,
  DataFlowOperationsGetDataFlowsByWorkspaceResponse,
  DataFlowOperationsGetDataFlowsByWorkspaceNextResponse
} from "../models";

/// <reference lib="esnext.asynciterable" />
/** Class representing a DataFlowOperations. */
export class DataFlowOperationsImpl implements DataFlowOperations {
  private readonly client: ArtifactsClientContext;

  /**
   * Initialize a new instance of the class DataFlowOperations class.
   * @param client Reference to the service client
   */
  constructor(client: ArtifactsClientContext) {
    this.client = client;
  }

  /**
   * Lists data flows.
   * @param options The options parameters.
   */
  public listDataFlowsByWorkspace(
    options?: DataFlowOperationsGetDataFlowsByWorkspaceOptionalParams
  ): PagedAsyncIterableIterator<DataFlowResource> {
    const iter = this.getDataFlowsByWorkspacePagingAll(options);
    return {
      next() {
        return iter.next();
      },
      [Symbol.asyncIterator]() {
        return this;
      },
      byPage: () => {
        return this.getDataFlowsByWorkspacePagingPage(options);
      }
    };
  }

  private async *getDataFlowsByWorkspacePagingPage(
    options?: DataFlowOperationsGetDataFlowsByWorkspaceOptionalParams
  ): AsyncIterableIterator<DataFlowResource[]> {
    let result = await this._getDataFlowsByWorkspace(options);
    yield result.value || [];
    let continuationToken = result.nextLink;
    while (continuationToken) {
      result = await this._getDataFlowsByWorkspaceNext(
        continuationToken,
        options
      );
      continuationToken = result.nextLink;
      yield result.value || [];
    }
  }

  private async *getDataFlowsByWorkspacePagingAll(
    options?: DataFlowOperationsGetDataFlowsByWorkspaceOptionalParams
  ): AsyncIterableIterator<DataFlowResource> {
    for await (const page of this.getDataFlowsByWorkspacePagingPage(options)) {
      yield* page;
    }
  }

  /**
   * Creates or updates a data flow.
   * @param dataFlowName The data flow name.
   * @param dataFlow Data flow resource definition.
   * @param options The options parameters.
   */
  async beginCreateOrUpdateDataFlow(
    dataFlowName: string,
    dataFlow: DataFlowResource,
    options?: DataFlowOperationsCreateOrUpdateDataFlowOptionalParams
  ): Promise<
    PollerLike<
      PollOperationState<DataFlowOperationsCreateOrUpdateDataFlowResponse>,
      DataFlowOperationsCreateOrUpdateDataFlowResponse
    >
  > {
    const { span } = createSpan(
      "ArtifactsClient-beginCreateOrUpdateDataFlow",
      options || {}
    );
    const directSendOperation = async (
      args: coreClient.OperationArguments,
      spec: coreClient.OperationSpec
    ): Promise<DataFlowOperationsCreateOrUpdateDataFlowResponse> => {
      try {
        const result = await this.client.sendOperationRequest(args, spec);
        return result as DataFlowOperationsCreateOrUpdateDataFlowResponse;
      } catch (error) {
        span.setStatus({
          code: coreTracing.SpanStatusCode.UNSET,
          message: error.message
        });
        throw error;
      } finally {
        span.end();
      }
    };
    const sendOperation = async (
      args: coreClient.OperationArguments,
      spec: coreClient.OperationSpec
    ) => {
      let currentRawResponse:
        | coreClient.FullOperationResponse
        | undefined = undefined;
      const providedCallback = args.options?.onResponse;
      const callback: coreClient.RawResponseCallback = (
        rawResponse: coreClient.FullOperationResponse,
        flatResponse: unknown
      ) => {
        currentRawResponse = rawResponse;
        providedCallback?.(rawResponse, flatResponse);
      };
      const updatedArgs = {
        ...args,
        options: {
          ...args.options,
          onResponse: callback
        }
      };
      const flatResponse = await directSendOperation(updatedArgs, spec);
      return {
        flatResponse,
        rawResponse: {
          statusCode: currentRawResponse!.status,
          body: currentRawResponse!.parsedBody,
          headers: currentRawResponse!.headers.toJSON()
        }
      };
    };

    const lro = new LroImpl(
      sendOperation,
      { dataFlowName, dataFlow, options },
      createOrUpdateDataFlowOperationSpec
    );
    return new LroEngine(lro, {
      resumeFrom: options?.resumeFrom,
      intervalInMs: options?.updateIntervalInMs
    });
  }

  /**
   * Creates or updates a data flow.
   * @param dataFlowName The data flow name.
   * @param dataFlow Data flow resource definition.
   * @param options The options parameters.
   */
  async beginCreateOrUpdateDataFlowAndWait(
    dataFlowName: string,
    dataFlow: DataFlowResource,
    options?: DataFlowOperationsCreateOrUpdateDataFlowOptionalParams
  ): Promise<DataFlowOperationsCreateOrUpdateDataFlowResponse> {
    const poller = await this.beginCreateOrUpdateDataFlow(
      dataFlowName,
      dataFlow,
      options
    );
    return poller.pollUntilDone();
  }

  /**
   * Gets a data flow.
   * @param dataFlowName The data flow name.
   * @param options The options parameters.
   */
  async getDataFlow(
    dataFlowName: string,
    options?: DataFlowOperationsGetDataFlowOptionalParams
  ): Promise<DataFlowOperationsGetDataFlowResponse> {
    const { span } = createSpan("ArtifactsClient-getDataFlow", options || {});
    try {
      const result = await this.client.sendOperationRequest(
        { dataFlowName, options },
        getDataFlowOperationSpec
      );
      return result as DataFlowOperationsGetDataFlowResponse;
    } catch (error) {
      span.setStatus({
        code: coreTracing.SpanStatusCode.UNSET,
        message: error.message
      });
      throw error;
    } finally {
      span.end();
    }
  }

  /**
   * Deletes a data flow.
   * @param dataFlowName The data flow name.
   * @param options The options parameters.
   */
  async beginDeleteDataFlow(
    dataFlowName: string,
    options?: DataFlowOperationsDeleteDataFlowOptionalParams
  ): Promise<PollerLike<PollOperationState<void>, void>> {
    const { span } = createSpan(
      "ArtifactsClient-beginDeleteDataFlow",
      options || {}
    );
    const directSendOperation = async (
      args: coreClient.OperationArguments,
      spec: coreClient.OperationSpec
    ): Promise<void> => {
      try {
        const result = await this.client.sendOperationRequest(args, spec);
        return result as void;
      } catch (error) {
        span.setStatus({
          code: coreTracing.SpanStatusCode.UNSET,
          message: error.message
        });
        throw error;
      } finally {
        span.end();
      }
    };
    const sendOperation = async (
      args: coreClient.OperationArguments,
      spec: coreClient.OperationSpec
    ) => {
      let currentRawResponse:
        | coreClient.FullOperationResponse
        | undefined = undefined;
      const providedCallback = args.options?.onResponse;
      const callback: coreClient.RawResponseCallback = (
        rawResponse: coreClient.FullOperationResponse,
        flatResponse: unknown
      ) => {
        currentRawResponse = rawResponse;
        providedCallback?.(rawResponse, flatResponse);
      };
      const updatedArgs = {
        ...args,
        options: {
          ...args.options,
          onResponse: callback
        }
      };
      const flatResponse = await directSendOperation(updatedArgs, spec);
      return {
        flatResponse,
        rawResponse: {
          statusCode: currentRawResponse!.status,
          body: currentRawResponse!.parsedBody,
          headers: currentRawResponse!.headers.toJSON()
        }
      };
    };

    const lro = new LroImpl(
      sendOperation,
      { dataFlowName, options },
      deleteDataFlowOperationSpec
    );
    return new LroEngine(lro, {
      resumeFrom: options?.resumeFrom,
      intervalInMs: options?.updateIntervalInMs
    });
  }

  /**
   * Deletes a data flow.
   * @param dataFlowName The data flow name.
   * @param options The options parameters.
   */
  async beginDeleteDataFlowAndWait(
    dataFlowName: string,
    options?: DataFlowOperationsDeleteDataFlowOptionalParams
  ): Promise<void> {
    const poller = await this.beginDeleteDataFlow(dataFlowName, options);
    return poller.pollUntilDone();
  }

  /**
   * Renames a dataflow.
   * @param dataFlowName The data flow name.
   * @param request proposed new name.
   * @param options The options parameters.
   */
  async beginRenameDataFlow(
    dataFlowName: string,
    request: ArtifactRenameRequest,
    options?: DataFlowOperationsRenameDataFlowOptionalParams
  ): Promise<PollerLike<PollOperationState<void>, void>> {
    const { span } = createSpan(
      "ArtifactsClient-beginRenameDataFlow",
      options || {}
    );
    const directSendOperation = async (
      args: coreClient.OperationArguments,
      spec: coreClient.OperationSpec
    ): Promise<void> => {
      try {
        const result = await this.client.sendOperationRequest(args, spec);
        return result as void;
      } catch (error) {
        span.setStatus({
          code: coreTracing.SpanStatusCode.UNSET,
          message: error.message
        });
        throw error;
      } finally {
        span.end();
      }
    };
    const sendOperation = async (
      args: coreClient.OperationArguments,
      spec: coreClient.OperationSpec
    ) => {
      let currentRawResponse:
        | coreClient.FullOperationResponse
        | undefined = undefined;
      const providedCallback = args.options?.onResponse;
      const callback: coreClient.RawResponseCallback = (
        rawResponse: coreClient.FullOperationResponse,
        flatResponse: unknown
      ) => {
        currentRawResponse = rawResponse;
        providedCallback?.(rawResponse, flatResponse);
      };
      const updatedArgs = {
        ...args,
        options: {
          ...args.options,
          onResponse: callback
        }
      };
      const flatResponse = await directSendOperation(updatedArgs, spec);
      return {
        flatResponse,
        rawResponse: {
          statusCode: currentRawResponse!.status,
          body: currentRawResponse!.parsedBody,
          headers: currentRawResponse!.headers.toJSON()
        }
      };
    };

    const lro = new LroImpl(
      sendOperation,
      { dataFlowName, request, options },
      renameDataFlowOperationSpec
    );
    return new LroEngine(lro, {
      resumeFrom: options?.resumeFrom,
      intervalInMs: options?.updateIntervalInMs
    });
  }

  /**
   * Renames a dataflow.
   * @param dataFlowName The data flow name.
   * @param request proposed new name.
   * @param options The options parameters.
   */
  async beginRenameDataFlowAndWait(
    dataFlowName: string,
    request: ArtifactRenameRequest,
    options?: DataFlowOperationsRenameDataFlowOptionalParams
  ): Promise<void> {
    const poller = await this.beginRenameDataFlow(
      dataFlowName,
      request,
      options
    );
    return poller.pollUntilDone();
  }

  /**
   * Lists data flows.
   * @param options The options parameters.
   */
  private async _getDataFlowsByWorkspace(
    options?: DataFlowOperationsGetDataFlowsByWorkspaceOptionalParams
  ): Promise<DataFlowOperationsGetDataFlowsByWorkspaceResponse> {
    const { span } = createSpan(
      "ArtifactsClient-_getDataFlowsByWorkspace",
      options || {}
    );
    try {
      const result = await this.client.sendOperationRequest(
        { options },
        getDataFlowsByWorkspaceOperationSpec
      );
      return result as DataFlowOperationsGetDataFlowsByWorkspaceResponse;
    } catch (error) {
      span.setStatus({
        code: coreTracing.SpanStatusCode.UNSET,
        message: error.message
      });
      throw error;
    } finally {
      span.end();
    }
  }

  /**
   * GetDataFlowsByWorkspaceNext
   * @param nextLink The nextLink from the previous successful call to the GetDataFlowsByWorkspace
   *                 method.
   * @param options The options parameters.
   */
  private async _getDataFlowsByWorkspaceNext(
    nextLink: string,
    options?: DataFlowOperationsGetDataFlowsByWorkspaceNextOptionalParams
  ): Promise<DataFlowOperationsGetDataFlowsByWorkspaceNextResponse> {
    const { span } = createSpan(
      "ArtifactsClient-_getDataFlowsByWorkspaceNext",
      options || {}
    );
    try {
      const result = await this.client.sendOperationRequest(
        { nextLink, options },
        getDataFlowsByWorkspaceNextOperationSpec
      );
      return result as DataFlowOperationsGetDataFlowsByWorkspaceNextResponse;
    } catch (error) {
      span.setStatus({
        code: coreTracing.SpanStatusCode.UNSET,
        message: error.message
      });
      throw error;
    } finally {
      span.end();
    }
  }
}
// Operation Specifications
const serializer = coreClient.createSerializer(Mappers, /* isXml */ false);

const createOrUpdateDataFlowOperationSpec: coreClient.OperationSpec = {
  path: "/dataflows/{dataFlowName}",
  httpMethod: "PUT",
  responses: {
    200: {
      bodyMapper: Mappers.DataFlowResource
    },
    201: {
      bodyMapper: Mappers.DataFlowResource
    },
    202: {
      bodyMapper: Mappers.DataFlowResource
    },
    204: {
      bodyMapper: Mappers.DataFlowResource
    },
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  requestBody: Parameters.dataFlow,
  queryParameters: [Parameters.apiVersion],
  urlParameters: [Parameters.endpoint, Parameters.dataFlowName],
  headerParameters: [
    Parameters.accept,
    Parameters.contentType,
    Parameters.ifMatch
  ],
  mediaType: "json",
  serializer
};
const getDataFlowOperationSpec: coreClient.OperationSpec = {
  path: "/dataflows/{dataFlowName}",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.DataFlowResource
    },
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [Parameters.endpoint, Parameters.dataFlowName],
  headerParameters: [Parameters.accept, Parameters.ifNoneMatch],
  serializer
};
const deleteDataFlowOperationSpec: coreClient.OperationSpec = {
  path: "/dataflows/{dataFlowName}",
  httpMethod: "DELETE",
  responses: {
    200: {},
    201: {},
    202: {},
    204: {},
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [Parameters.endpoint, Parameters.dataFlowName],
  headerParameters: [Parameters.accept],
  serializer
};
const renameDataFlowOperationSpec: coreClient.OperationSpec = {
  path: "/dataflows/{dataFlowName}/rename",
  httpMethod: "POST",
  responses: {
    200: {},
    201: {},
    202: {},
    204: {},
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  requestBody: Parameters.request,
  queryParameters: [Parameters.apiVersion],
  urlParameters: [Parameters.endpoint, Parameters.dataFlowName],
  headerParameters: [Parameters.accept, Parameters.contentType],
  mediaType: "json",
  serializer
};
const getDataFlowsByWorkspaceOperationSpec: coreClient.OperationSpec = {
  path: "/dataflows",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.DataFlowListResponse
    },
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [Parameters.endpoint],
  headerParameters: [Parameters.accept],
  serializer
};
const getDataFlowsByWorkspaceNextOperationSpec: coreClient.OperationSpec = {
  path: "{nextLink}",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.DataFlowListResponse
    },
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [Parameters.endpoint, Parameters.nextLink],
  headerParameters: [Parameters.accept],
  serializer
};
