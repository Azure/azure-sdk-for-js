/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */

import { tracingClient } from "../tracing";
import { WorkspaceOperations } from "../operationsInterfaces";
import * as coreClient from "@azure/core-client";
import * as Mappers from "../models/mappers";
import * as Parameters from "../models/parameters";
import { ArtifactsClient } from "../artifactsClient";
import { WorkspaceGetOptionalParams, WorkspaceGetResponse } from "../models";

/** Class containing WorkspaceOperations operations. */
export class WorkspaceOperationsImpl implements WorkspaceOperations {
  private readonly client: ArtifactsClient;

  /**
   * Initialize a new instance of the class WorkspaceOperations class.
   * @param client Reference to the service client
   */
  constructor(client: ArtifactsClient) {
    this.client = client;
  }

  /**
   * Get Workspace
   * @param options The options parameters.
   */
  async get(
    options?: WorkspaceGetOptionalParams
  ): Promise<WorkspaceGetResponse> {
    return tracingClient.withSpan(
      "ArtifactsClient.get",
      options ?? {},
      async (options) => {
        return this.client.sendOperationRequest(
          { options },
          getOperationSpec
        ) as Promise<WorkspaceGetResponse>;
      }
    );
  }
}
// Operation Specifications
const serializer = coreClient.createSerializer(Mappers, /* isXml */ false);

const getOperationSpec: coreClient.OperationSpec = {
  path: "/workspace",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.Workspace
    },
    default: {
      bodyMapper: Mappers.ErrorContract
    }
  },
  queryParameters: [Parameters.apiVersion5],
  urlParameters: [Parameters.endpoint],
  headerParameters: [Parameters.accept],
  serializer
};
