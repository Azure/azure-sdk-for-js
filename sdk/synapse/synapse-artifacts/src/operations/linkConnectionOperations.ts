/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */

import { tracingClient } from "../tracing";
import { PagedAsyncIterableIterator } from "@azure/core-paging";
import { LinkConnectionOperations } from "../operationsInterfaces";
import * as coreClient from "@azure/core-client";
import * as Mappers from "../models/mappers";
import * as Parameters from "../models/parameters";
import { ArtifactsClient } from "../artifactsClient";
import {
  LinkConnectionResource,
  LinkConnectionListLinkConnectionsByWorkspaceNextOptionalParams,
  LinkConnectionListLinkConnectionsByWorkspaceOptionalParams,
  LinkConnectionListLinkConnectionsByWorkspaceResponse,
  LinkConnectionCreateOrUpdateLinkConnectionOptionalParams,
  LinkConnectionCreateOrUpdateLinkConnectionResponse,
  LinkConnectionGetLinkConnectionOptionalParams,
  LinkConnectionGetLinkConnectionResponse,
  LinkConnectionDeleteLinkConnectionOptionalParams,
  EditTablesRequest,
  LinkConnectionEditTablesOptionalParams,
  LinkConnectionStartOptionalParams,
  LinkConnectionStopOptionalParams,
  LinkConnectionGetDetailedStatusOptionalParams,
  LinkConnectionGetDetailedStatusResponse,
  LinkConnectionListLinkTablesOptionalParams,
  LinkConnectionListLinkTablesResponse,
  QueryTableStatusRequest,
  LinkConnectionQueryTableStatusOptionalParams,
  LinkConnectionQueryTableStatusResponse,
  UpdateLandingZoneCredential,
  LinkConnectionUpdateLandingZoneCredentialOptionalParams,
  LinkConnectionListLinkConnectionsByWorkspaceNextResponse
} from "../models";

/// <reference lib="esnext.asynciterable" />
/** Class containing LinkConnectionOperations operations. */
export class LinkConnectionOperationsImpl implements LinkConnectionOperations {
  private readonly client: ArtifactsClient;

  /**
   * Initialize a new instance of the class LinkConnectionOperations class.
   * @param client Reference to the service client
   */
  constructor(client: ArtifactsClient) {
    this.client = client;
  }

  /**
   * List link connections
   * @param options The options parameters.
   */
  public listLinkConnectionsByWorkspace(
    options?: LinkConnectionListLinkConnectionsByWorkspaceOptionalParams
  ): PagedAsyncIterableIterator<LinkConnectionResource> {
    const iter = this.listLinkConnectionsByWorkspacePagingAll(options);
    return {
      next() {
        return iter.next();
      },
      [Symbol.asyncIterator]() {
        return this;
      },
      byPage: () => {
        return this.listLinkConnectionsByWorkspacePagingPage(options);
      }
    };
  }

  private async *listLinkConnectionsByWorkspacePagingPage(
    options?: LinkConnectionListLinkConnectionsByWorkspaceOptionalParams
  ): AsyncIterableIterator<LinkConnectionResource[]> {
    let result = await this._listLinkConnectionsByWorkspace(options);
    yield result.value || [];
    let continuationToken = result.nextLink;
    while (continuationToken) {
      result = await this._listLinkConnectionsByWorkspaceNext(
        continuationToken,
        options
      );
      continuationToken = result.nextLink;
      yield result.value || [];
    }
  }

  private async *listLinkConnectionsByWorkspacePagingAll(
    options?: LinkConnectionListLinkConnectionsByWorkspaceOptionalParams
  ): AsyncIterableIterator<LinkConnectionResource> {
    for await (const page of this.listLinkConnectionsByWorkspacePagingPage(
      options
    )) {
      yield* page;
    }
  }

  /**
   * List link connections
   * @param options The options parameters.
   */
  private async _listLinkConnectionsByWorkspace(
    options?: LinkConnectionListLinkConnectionsByWorkspaceOptionalParams
  ): Promise<LinkConnectionListLinkConnectionsByWorkspaceResponse> {
    return tracingClient.withSpan(
      "ArtifactsClient._listLinkConnectionsByWorkspace",
      options ?? {},
      async (options) => {
        return this.client.sendOperationRequest(
          { options },
          listLinkConnectionsByWorkspaceOperationSpec
        ) as Promise<LinkConnectionListLinkConnectionsByWorkspaceResponse>;
      }
    );
  }

  /**
   * Creates or updates a link connection
   * @param linkConnectionName The link connection name
   * @param linkConnection Link connection resource definition
   * @param options The options parameters.
   */
  async createOrUpdateLinkConnection(
    linkConnectionName: string,
    linkConnection: LinkConnectionResource,
    options?: LinkConnectionCreateOrUpdateLinkConnectionOptionalParams
  ): Promise<LinkConnectionCreateOrUpdateLinkConnectionResponse> {
    return tracingClient.withSpan(
      "ArtifactsClient.createOrUpdateLinkConnection",
      options ?? {},
      async (options) => {
        return this.client.sendOperationRequest(
          { linkConnectionName, linkConnection, options },
          createOrUpdateLinkConnectionOperationSpec
        ) as Promise<LinkConnectionCreateOrUpdateLinkConnectionResponse>;
      }
    );
  }

  /**
   * Get a link connection
   * @param linkConnectionName The link connection name
   * @param options The options parameters.
   */
  async getLinkConnection(
    linkConnectionName: string,
    options?: LinkConnectionGetLinkConnectionOptionalParams
  ): Promise<LinkConnectionGetLinkConnectionResponse> {
    return tracingClient.withSpan(
      "ArtifactsClient.getLinkConnection",
      options ?? {},
      async (options) => {
        return this.client.sendOperationRequest(
          { linkConnectionName, options },
          getLinkConnectionOperationSpec
        ) as Promise<LinkConnectionGetLinkConnectionResponse>;
      }
    );
  }

  /**
   * Delete a link connection
   * @param linkConnectionName The link connection name
   * @param options The options parameters.
   */
  async deleteLinkConnection(
    linkConnectionName: string,
    options?: LinkConnectionDeleteLinkConnectionOptionalParams
  ): Promise<void> {
    return tracingClient.withSpan(
      "ArtifactsClient.deleteLinkConnection",
      options ?? {},
      async (options) => {
        return this.client.sendOperationRequest(
          { linkConnectionName, options },
          deleteLinkConnectionOperationSpec
        ) as Promise<void>;
      }
    );
  }

  /**
   * Edit tables for a link connection
   * @param linkConnectionName The link connection name
   * @param editTablesRequest Edit tables request
   * @param options The options parameters.
   */
  async editTables(
    linkConnectionName: string,
    editTablesRequest: EditTablesRequest,
    options?: LinkConnectionEditTablesOptionalParams
  ): Promise<void> {
    return tracingClient.withSpan(
      "ArtifactsClient.editTables",
      options ?? {},
      async (options) => {
        return this.client.sendOperationRequest(
          { linkConnectionName, editTablesRequest, options },
          editTablesOperationSpec
        ) as Promise<void>;
      }
    );
  }

  /**
   * Start a link connection
   * @param linkConnectionName The link connection name
   * @param options The options parameters.
   */
  async start(
    linkConnectionName: string,
    options?: LinkConnectionStartOptionalParams
  ): Promise<void> {
    return tracingClient.withSpan(
      "ArtifactsClient.start",
      options ?? {},
      async (options) => {
        return this.client.sendOperationRequest(
          { linkConnectionName, options },
          startOperationSpec
        ) as Promise<void>;
      }
    );
  }

  /**
   * Stop a link connection
   * @param linkConnectionName The link connection name
   * @param options The options parameters.
   */
  async stop(
    linkConnectionName: string,
    options?: LinkConnectionStopOptionalParams
  ): Promise<void> {
    return tracingClient.withSpan(
      "ArtifactsClient.stop",
      options ?? {},
      async (options) => {
        return this.client.sendOperationRequest(
          { linkConnectionName, options },
          stopOperationSpec
        ) as Promise<void>;
      }
    );
  }

  /**
   * Get the detailed status of a link connection
   * @param linkConnectionName The link connection name
   * @param options The options parameters.
   */
  async getDetailedStatus(
    linkConnectionName: string,
    options?: LinkConnectionGetDetailedStatusOptionalParams
  ): Promise<LinkConnectionGetDetailedStatusResponse> {
    return tracingClient.withSpan(
      "ArtifactsClient.getDetailedStatus",
      options ?? {},
      async (options) => {
        return this.client.sendOperationRequest(
          { linkConnectionName, options },
          getDetailedStatusOperationSpec
        ) as Promise<LinkConnectionGetDetailedStatusResponse>;
      }
    );
  }

  /**
   * List the link tables of a link connection
   * @param linkConnectionName The link connection name
   * @param options The options parameters.
   */
  async listLinkTables(
    linkConnectionName: string,
    options?: LinkConnectionListLinkTablesOptionalParams
  ): Promise<LinkConnectionListLinkTablesResponse> {
    return tracingClient.withSpan(
      "ArtifactsClient.listLinkTables",
      options ?? {},
      async (options) => {
        return this.client.sendOperationRequest(
          { linkConnectionName, options },
          listLinkTablesOperationSpec
        ) as Promise<LinkConnectionListLinkTablesResponse>;
      }
    );
  }

  /**
   * Query the link table status of a link connection
   * @param linkConnectionName The link connection name
   * @param queryTableStatusRequest Query table status request
   * @param options The options parameters.
   */
  async queryTableStatus(
    linkConnectionName: string,
    queryTableStatusRequest: QueryTableStatusRequest,
    options?: LinkConnectionQueryTableStatusOptionalParams
  ): Promise<LinkConnectionQueryTableStatusResponse> {
    return tracingClient.withSpan(
      "ArtifactsClient.queryTableStatus",
      options ?? {},
      async (options) => {
        return this.client.sendOperationRequest(
          { linkConnectionName, queryTableStatusRequest, options },
          queryTableStatusOperationSpec
        ) as Promise<LinkConnectionQueryTableStatusResponse>;
      }
    );
  }

  /**
   * Update landing zone credential of a link connection
   * @param linkConnectionName The link connection name
   * @param updateLandingZoneCredentialRequest update landing zone credential request
   * @param options The options parameters.
   */
  async updateLandingZoneCredential(
    linkConnectionName: string,
    updateLandingZoneCredentialRequest: UpdateLandingZoneCredential,
    options?: LinkConnectionUpdateLandingZoneCredentialOptionalParams
  ): Promise<void> {
    return tracingClient.withSpan(
      "ArtifactsClient.updateLandingZoneCredential",
      options ?? {},
      async (options) => {
        return this.client.sendOperationRequest(
          { linkConnectionName, updateLandingZoneCredentialRequest, options },
          updateLandingZoneCredentialOperationSpec
        ) as Promise<void>;
      }
    );
  }

  /**
   * ListLinkConnectionsByWorkspaceNext
   * @param nextLink The nextLink from the previous successful call to the ListLinkConnectionsByWorkspace
   *                 method.
   * @param options The options parameters.
   */
  private async _listLinkConnectionsByWorkspaceNext(
    nextLink: string,
    options?: LinkConnectionListLinkConnectionsByWorkspaceNextOptionalParams
  ): Promise<LinkConnectionListLinkConnectionsByWorkspaceNextResponse> {
    return tracingClient.withSpan(
      "ArtifactsClient._listLinkConnectionsByWorkspaceNext",
      options ?? {},
      async (options) => {
        return this.client.sendOperationRequest(
          { nextLink, options },
          listLinkConnectionsByWorkspaceNextOperationSpec
        ) as Promise<LinkConnectionListLinkConnectionsByWorkspaceNextResponse>;
      }
    );
  }
}
// Operation Specifications
const serializer = coreClient.createSerializer(Mappers, /* isXml */ false);

const listLinkConnectionsByWorkspaceOperationSpec: coreClient.OperationSpec = {
  path: "/linkconnections",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.LinkConnectionListResponse
    },
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [Parameters.endpoint],
  headerParameters: [Parameters.accept],
  serializer
};
const createOrUpdateLinkConnectionOperationSpec: coreClient.OperationSpec = {
  path: "/linkconnections/{linkConnectionName}",
  httpMethod: "PUT",
  responses: {
    200: {
      bodyMapper: Mappers.LinkConnectionResource
    },
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  requestBody: Parameters.linkConnection,
  queryParameters: [Parameters.apiVersion],
  urlParameters: [Parameters.endpoint, Parameters.linkConnectionName],
  headerParameters: [Parameters.accept, Parameters.contentType],
  mediaType: "json",
  serializer
};
const getLinkConnectionOperationSpec: coreClient.OperationSpec = {
  path: "/linkconnections/{linkConnectionName}",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.LinkConnectionResource
    },
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [Parameters.endpoint, Parameters.linkConnectionName],
  headerParameters: [Parameters.accept],
  serializer
};
const deleteLinkConnectionOperationSpec: coreClient.OperationSpec = {
  path: "/linkconnections/{linkConnectionName}",
  httpMethod: "DELETE",
  responses: {
    200: {},
    204: {},
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [Parameters.endpoint, Parameters.linkConnectionName],
  headerParameters: [Parameters.accept],
  serializer
};
const editTablesOperationSpec: coreClient.OperationSpec = {
  path: "/linkconnections/{linkConnectionName}/edittables",
  httpMethod: "POST",
  responses: {
    200: {},
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  requestBody: Parameters.editTablesRequest,
  queryParameters: [Parameters.apiVersion],
  urlParameters: [Parameters.endpoint, Parameters.linkConnectionName],
  headerParameters: [Parameters.accept, Parameters.contentType],
  mediaType: "json",
  serializer
};
const startOperationSpec: coreClient.OperationSpec = {
  path: "/linkconnections/{linkConnectionName}/start",
  httpMethod: "POST",
  responses: {
    200: {},
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [Parameters.endpoint, Parameters.linkConnectionName],
  headerParameters: [Parameters.accept],
  serializer
};
const stopOperationSpec: coreClient.OperationSpec = {
  path: "/linkconnections/{linkConnectionName}/stop",
  httpMethod: "POST",
  responses: {
    200: {},
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [Parameters.endpoint, Parameters.linkConnectionName],
  headerParameters: [Parameters.accept],
  serializer
};
const getDetailedStatusOperationSpec: coreClient.OperationSpec = {
  path: "/linkconnections/{linkConnectionName}/detailedstatus",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.LinkConnectionDetailedStatus
    },
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [Parameters.endpoint, Parameters.linkConnectionName],
  headerParameters: [Parameters.accept],
  serializer
};
const listLinkTablesOperationSpec: coreClient.OperationSpec = {
  path: "/linkconnections/{linkConnectionName}/linktables",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.LinkTableListResponse
    },
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [Parameters.endpoint, Parameters.linkConnectionName],
  headerParameters: [Parameters.accept],
  serializer
};
const queryTableStatusOperationSpec: coreClient.OperationSpec = {
  path: "/linkconnections/{linkConnectionName}/querytablestatus",
  httpMethod: "POST",
  responses: {
    200: {
      bodyMapper: Mappers.LinkConnectionQueryTableStatus
    },
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  requestBody: Parameters.queryTableStatusRequest,
  queryParameters: [Parameters.apiVersion],
  urlParameters: [Parameters.endpoint, Parameters.linkConnectionName],
  headerParameters: [Parameters.accept, Parameters.contentType],
  mediaType: "json",
  serializer
};
const updateLandingZoneCredentialOperationSpec: coreClient.OperationSpec = {
  path: "/linkconnections/{linkConnectionName}/updateLandingZoneCredential",
  httpMethod: "POST",
  responses: {
    200: {},
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  requestBody: Parameters.updateLandingZoneCredentialRequest,
  queryParameters: [Parameters.apiVersion],
  urlParameters: [Parameters.endpoint, Parameters.linkConnectionName],
  headerParameters: [Parameters.accept, Parameters.contentType],
  mediaType: "json",
  serializer
};
const listLinkConnectionsByWorkspaceNextOperationSpec: coreClient.OperationSpec = {
  path: "{nextLink}",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.LinkConnectionListResponse
    },
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [Parameters.endpoint, Parameters.nextLink],
  headerParameters: [Parameters.accept],
  serializer
};
