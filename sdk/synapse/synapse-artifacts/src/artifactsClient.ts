/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */

import * as coreClient from "@azure/core-client";
import * as coreRestPipeline from "@azure/core-rest-pipeline";
import * as coreAuth from "@azure/core-auth";
import {
  LinkConnectionOperationsImpl,
  KqlScriptsImpl,
  KqlScriptOperationsImpl,
  MetastoreImpl,
  SparkConfigurationOperationsImpl,
  BigDataPoolsImpl,
  DataFlowOperationsImpl,
  DataFlowDebugSessionImpl,
  DatasetOperationsImpl,
  WorkspaceGitRepoManagementImpl,
  IntegrationRuntimesImpl,
  LibraryImpl,
  LinkedServiceOperationsImpl,
  NotebookOperationsImpl,
  NotebookOperationResultImpl,
  PipelineOperationsImpl,
  PipelineRunOperationsImpl,
  SparkJobDefinitionOperationsImpl,
  SqlPoolsImpl,
  SqlScriptOperationsImpl,
  TriggerOperationsImpl,
  TriggerRunOperationsImpl,
  WorkspaceOperationsImpl
} from "./operations";
import {
  LinkConnectionOperations,
  KqlScripts,
  KqlScriptOperations,
  Metastore,
  SparkConfigurationOperations,
  BigDataPools,
  DataFlowOperations,
  DataFlowDebugSession,
  DatasetOperations,
  WorkspaceGitRepoManagement,
  IntegrationRuntimes,
  Library,
  LinkedServiceOperations,
  NotebookOperations,
  NotebookOperationResult,
  PipelineOperations,
  PipelineRunOperations,
  SparkJobDefinitionOperations,
  SqlPools,
  SqlScriptOperations,
  TriggerOperations,
  TriggerRunOperations,
  WorkspaceOperations
} from "./operationsInterfaces";
import { ArtifactsClientOptionalParams } from "./models";

export class ArtifactsClient extends coreClient.ServiceClient {
  endpoint: string;

  /**
   * Initializes a new instance of the ArtifactsClient class.
   * @param credentials Subscription credentials which uniquely identify client subscription.
   * @param endpoint The workspace development endpoint, for example
   *                 https://myworkspace.dev.azuresynapse.net.
   * @param options The parameter options
   */
  constructor(
    credentials: coreAuth.TokenCredential,
    endpoint: string,
    options?: ArtifactsClientOptionalParams
  ) {
    if (credentials === undefined) {
      throw new Error("'credentials' cannot be null");
    }
    if (endpoint === undefined) {
      throw new Error("'endpoint' cannot be null");
    }

    // Initializing default values for options
    if (!options) {
      options = {};
    }
    const defaults: ArtifactsClientOptionalParams = {
      requestContentType: "application/json; charset=utf-8",
      credential: credentials
    };

    const packageDetails = `azsdk-js-synapse-artifacts/1.0.0-beta.13`;
    const userAgentPrefix =
      options.userAgentOptions && options.userAgentOptions.userAgentPrefix
        ? `${options.userAgentOptions.userAgentPrefix} ${packageDetails}`
        : `${packageDetails}`;

    if (!options.credentialScopes) {
      options.credentialScopes = ["https://dev.azuresynapse.net/.default"];
    }
    const optionsWithDefaults = {
      ...defaults,
      ...options,
      userAgentOptions: {
        userAgentPrefix
      },
      endpoint: options.endpoint ?? options.baseUri ?? "{endpoint}"
    };
    super(optionsWithDefaults);

    let bearerTokenAuthenticationPolicyFound: boolean = false;
    if (options?.pipeline && options.pipeline.getOrderedPolicies().length > 0) {
      const pipelinePolicies: coreRestPipeline.PipelinePolicy[] = options.pipeline.getOrderedPolicies();
      bearerTokenAuthenticationPolicyFound = pipelinePolicies.some(
        (pipelinePolicy) =>
          pipelinePolicy.name ===
          coreRestPipeline.bearerTokenAuthenticationPolicyName
      );
    }
    if (
      !options ||
      !options.pipeline ||
      options.pipeline.getOrderedPolicies().length == 0 ||
      !bearerTokenAuthenticationPolicyFound
    ) {
      this.pipeline.removePolicy({
        name: coreRestPipeline.bearerTokenAuthenticationPolicyName
      });
      this.pipeline.addPolicy(
        coreRestPipeline.bearerTokenAuthenticationPolicy({
          credential: credentials,
          scopes:
            optionsWithDefaults.credentialScopes ??
            `${optionsWithDefaults.endpoint}/.default`,
          challengeCallbacks: {
            authorizeRequestOnChallenge:
              coreClient.authorizeRequestOnClaimChallenge
          }
        })
      );
    }
    // Parameter assignments
    this.endpoint = endpoint;
    this.linkConnectionOperations = new LinkConnectionOperationsImpl(this);
    this.kqlScripts = new KqlScriptsImpl(this);
    this.kqlScriptOperations = new KqlScriptOperationsImpl(this);
    this.metastore = new MetastoreImpl(this);
    this.sparkConfigurationOperations = new SparkConfigurationOperationsImpl(
      this
    );
    this.bigDataPools = new BigDataPoolsImpl(this);
    this.dataFlowOperations = new DataFlowOperationsImpl(this);
    this.dataFlowDebugSession = new DataFlowDebugSessionImpl(this);
    this.datasetOperations = new DatasetOperationsImpl(this);
    this.workspaceGitRepoManagement = new WorkspaceGitRepoManagementImpl(this);
    this.integrationRuntimes = new IntegrationRuntimesImpl(this);
    this.library = new LibraryImpl(this);
    this.linkedServiceOperations = new LinkedServiceOperationsImpl(this);
    this.notebookOperations = new NotebookOperationsImpl(this);
    this.notebookOperationResult = new NotebookOperationResultImpl(this);
    this.pipelineOperations = new PipelineOperationsImpl(this);
    this.pipelineRunOperations = new PipelineRunOperationsImpl(this);
    this.sparkJobDefinitionOperations = new SparkJobDefinitionOperationsImpl(
      this
    );
    this.sqlPools = new SqlPoolsImpl(this);
    this.sqlScriptOperations = new SqlScriptOperationsImpl(this);
    this.triggerOperations = new TriggerOperationsImpl(this);
    this.triggerRunOperations = new TriggerRunOperationsImpl(this);
    this.workspaceOperations = new WorkspaceOperationsImpl(this);
  }

  linkConnectionOperations: LinkConnectionOperations;
  kqlScripts: KqlScripts;
  kqlScriptOperations: KqlScriptOperations;
  metastore: Metastore;
  sparkConfigurationOperations: SparkConfigurationOperations;
  bigDataPools: BigDataPools;
  dataFlowOperations: DataFlowOperations;
  dataFlowDebugSession: DataFlowDebugSession;
  datasetOperations: DatasetOperations;
  workspaceGitRepoManagement: WorkspaceGitRepoManagement;
  integrationRuntimes: IntegrationRuntimes;
  library: Library;
  linkedServiceOperations: LinkedServiceOperations;
  notebookOperations: NotebookOperations;
  notebookOperationResult: NotebookOperationResult;
  pipelineOperations: PipelineOperations;
  pipelineRunOperations: PipelineRunOperations;
  sparkJobDefinitionOperations: SparkJobDefinitionOperations;
  sqlPools: SqlPools;
  sqlScriptOperations: SqlScriptOperations;
  triggerOperations: TriggerOperations;
  triggerRunOperations: TriggerRunOperations;
  workspaceOperations: WorkspaceOperations;
}
