{"version":3,"file":"sparkConfigurationOperations.js","sourceRoot":"","sources":["../../../src/operations/sparkConfigurationOperations.ts"],"names":[],"mappings":"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","sourcesContent":["/*\n * Copyright (c) Microsoft Corporation.\n * Licensed under the MIT License.\n *\n * Code generated by Microsoft (R) AutoRest Code Generator.\n * Changes may cause incorrect behavior and will be lost if the code is regenerated.\n */\n\nimport { tracingClient } from \"../tracing.js\";\nimport type { PagedAsyncIterableIterator, PageSettings } from \"@azure/core-paging\";\nimport { setContinuationToken } from \"../pagingHelper.js\";\nimport type { SparkConfigurationOperations } from \"../operationsInterfaces/index.js\";\nimport * as coreClient from \"@azure/core-client\";\nimport * as Mappers from \"../models/mappers.js\";\nimport * as Parameters from \"../models/parameters.js\";\nimport type { ArtifactsClient } from \"../artifactsClient.js\";\nimport type { SimplePollerLike, OperationState } from \"@azure/core-lro\";\nimport { createHttpPoller } from \"@azure/core-lro\";\nimport { createLroSpec } from \"../lroImpl.js\";\nimport type {\n  SparkConfigurationResource,\n  SparkConfigurationGetSparkConfigurationsByWorkspaceNextOptionalParams,\n  SparkConfigurationGetSparkConfigurationsByWorkspaceOptionalParams,\n  SparkConfigurationGetSparkConfigurationsByWorkspaceResponse,\n  SparkConfigurationCreateOrUpdateSparkConfigurationOptionalParams,\n  SparkConfigurationCreateOrUpdateSparkConfigurationResponse,\n  SparkConfigurationGetSparkConfigurationOptionalParams,\n  SparkConfigurationGetSparkConfigurationResponse,\n  SparkConfigurationDeleteSparkConfigurationOptionalParams,\n  ArtifactRenameRequest,\n  SparkConfigurationRenameSparkConfigurationOptionalParams,\n  SparkConfigurationGetSparkConfigurationsByWorkspaceNextResponse,\n} from \"../models/index.js\";\nimport type { RawHttpHeaders } from \"@azure/core-rest-pipeline\";\n\n// Operation Specifications\nconst serializer = coreClient.createSerializer(Mappers, /* isXml */ false);\n\nconst getSparkConfigurationsByWorkspaceOperationSpec: coreClient.OperationSpec = {\n  path: \"/sparkconfigurations\",\n  httpMethod: \"GET\",\n  responses: {\n    200: {\n      bodyMapper: Mappers.SparkConfigurationListResponse,\n    },\n    default: {\n      bodyMapper: Mappers.CloudError,\n    },\n  },\n  queryParameters: [Parameters.apiVersion4],\n  urlParameters: [Parameters.endpoint],\n  headerParameters: [Parameters.accept],\n  serializer,\n};\nconst createOrUpdateSparkConfigurationOperationSpec: coreClient.OperationSpec = {\n  path: \"/sparkconfigurations/{sparkConfigurationName}\",\n  httpMethod: \"PUT\",\n  responses: {\n    200: {\n      bodyMapper: Mappers.SparkConfigurationResource,\n    },\n    201: {\n      bodyMapper: Mappers.SparkConfigurationResource,\n    },\n    202: {\n      bodyMapper: Mappers.SparkConfigurationResource,\n    },\n    204: {\n      bodyMapper: Mappers.SparkConfigurationResource,\n    },\n    default: {\n      bodyMapper: Mappers.CloudError,\n    },\n  },\n  requestBody: Parameters.sparkConfiguration,\n  queryParameters: [Parameters.apiVersion4],\n  urlParameters: [Parameters.endpoint, Parameters.sparkConfigurationName],\n  headerParameters: [Parameters.accept, Parameters.contentType, Parameters.ifMatch],\n  mediaType: \"json\",\n  serializer,\n};\nconst getSparkConfigurationOperationSpec: coreClient.OperationSpec = {\n  path: \"/sparkconfigurations/{sparkConfigurationName}\",\n  httpMethod: \"GET\",\n  responses: {\n    200: {\n      bodyMapper: Mappers.SparkConfigurationResource,\n    },\n    304: {},\n    default: {\n      bodyMapper: Mappers.CloudError,\n    },\n  },\n  queryParameters: [Parameters.apiVersion4],\n  urlParameters: [Parameters.endpoint, Parameters.sparkConfigurationName],\n  headerParameters: [Parameters.accept, Parameters.ifNoneMatch],\n  serializer,\n};\nconst deleteSparkConfigurationOperationSpec: coreClient.OperationSpec = {\n  path: \"/sparkconfigurations/{sparkConfigurationName}\",\n  httpMethod: \"DELETE\",\n  responses: {\n    200: {},\n    201: {},\n    202: {},\n    204: {},\n    default: {\n      bodyMapper: Mappers.CloudError,\n    },\n  },\n  queryParameters: [Parameters.apiVersion4],\n  urlParameters: [Parameters.endpoint, Parameters.sparkConfigurationName],\n  headerParameters: [Parameters.accept],\n  serializer,\n};\nconst renameSparkConfigurationOperationSpec: coreClient.OperationSpec = {\n  path: \"/sparkconfigurations/{sparkConfigurationName}/rename\",\n  httpMethod: \"POST\",\n  responses: {\n    200: {},\n    201: {},\n    202: {},\n    204: {},\n    default: {\n      bodyMapper: Mappers.CloudError,\n    },\n  },\n  requestBody: Parameters.request,\n  queryParameters: [Parameters.apiVersion4],\n  urlParameters: [Parameters.endpoint, Parameters.sparkConfigurationName],\n  headerParameters: [Parameters.accept, Parameters.contentType],\n  mediaType: \"json\",\n  serializer,\n};\nconst getSparkConfigurationsByWorkspaceNextOperationSpec: coreClient.OperationSpec = {\n  path: \"{nextLink}\",\n  httpMethod: \"GET\",\n  responses: {\n    200: {\n      bodyMapper: Mappers.SparkConfigurationListResponse,\n    },\n    default: {\n      bodyMapper: Mappers.CloudError,\n    },\n  },\n  urlParameters: [Parameters.endpoint, Parameters.nextLink],\n  headerParameters: [Parameters.accept],\n  serializer,\n};\n\n/** Class containing SparkConfigurationOperations operations. */\nexport class SparkConfigurationOperationsImpl implements SparkConfigurationOperations {\n  private readonly client: ArtifactsClient;\n\n  /**\n   * Initialize a new instance of the class SparkConfigurationOperations class.\n   * @param client - Reference to the service client\n   */\n  constructor(client: ArtifactsClient) {\n    this.client = client;\n  }\n\n  /**\n   * Lists sparkconfigurations.\n   * @param options - The options parameters.\n   */\n  public listSparkConfigurationsByWorkspace(\n    options?: SparkConfigurationGetSparkConfigurationsByWorkspaceOptionalParams,\n  ): PagedAsyncIterableIterator<SparkConfigurationResource> {\n    const iter = this.getSparkConfigurationsByWorkspacePagingAll(options);\n    return {\n      next() {\n        return iter.next();\n      },\n      [Symbol.asyncIterator]() {\n        return this;\n      },\n      byPage: (settings?: PageSettings) => {\n        if (settings?.maxPageSize) {\n          throw new Error(\"maxPageSize is not supported by this operation.\");\n        }\n        return this.getSparkConfigurationsByWorkspacePagingPage(options, settings);\n      },\n    };\n  }\n\n  private async *getSparkConfigurationsByWorkspacePagingPage(\n    options?: SparkConfigurationGetSparkConfigurationsByWorkspaceOptionalParams,\n    settings?: PageSettings,\n  ): AsyncIterableIterator<SparkConfigurationResource[]> {\n    let result: SparkConfigurationGetSparkConfigurationsByWorkspaceResponse;\n    let continuationToken = settings?.continuationToken;\n    if (!continuationToken) {\n      result = await this._getSparkConfigurationsByWorkspace(options);\n      const page = result.value || [];\n      continuationToken = result.nextLink;\n      setContinuationToken(page, continuationToken);\n      yield page;\n    }\n    while (continuationToken) {\n      result = await this._getSparkConfigurationsByWorkspaceNext(continuationToken, options);\n      continuationToken = result.nextLink;\n      const page = result.value || [];\n      setContinuationToken(page, continuationToken);\n      yield page;\n    }\n  }\n\n  private async *getSparkConfigurationsByWorkspacePagingAll(\n    options?: SparkConfigurationGetSparkConfigurationsByWorkspaceOptionalParams,\n  ): AsyncIterableIterator<SparkConfigurationResource> {\n    for await (const page of this.getSparkConfigurationsByWorkspacePagingPage(options)) {\n      yield* page;\n    }\n  }\n\n  /**\n   * Lists sparkconfigurations.\n   * @param options - The options parameters.\n   */\n  private async _getSparkConfigurationsByWorkspace(\n    options?: SparkConfigurationGetSparkConfigurationsByWorkspaceOptionalParams,\n  ): Promise<SparkConfigurationGetSparkConfigurationsByWorkspaceResponse> {\n    return tracingClient.withSpan(\n      \"ArtifactsClient._getSparkConfigurationsByWorkspace\",\n      options ?? {},\n      async (updatedOptions) => {\n        return this.client.sendOperationRequest(\n          { updatedOptions },\n          getSparkConfigurationsByWorkspaceOperationSpec,\n        ) as Promise<SparkConfigurationGetSparkConfigurationsByWorkspaceResponse>;\n      },\n    );\n  }\n\n  /**\n   * Creates or updates a sparkconfiguration.\n   * @param sparkConfigurationName - The spark Configuration name.\n   * @param sparkConfiguration - SparkConfiguration resource definition.\n   * @param options - The options parameters.\n   */\n  async beginCreateOrUpdateSparkConfiguration(\n    sparkConfigurationName: string,\n    sparkConfiguration: SparkConfigurationResource,\n    options?: SparkConfigurationCreateOrUpdateSparkConfigurationOptionalParams,\n  ): Promise<\n    SimplePollerLike<\n      OperationState<SparkConfigurationCreateOrUpdateSparkConfigurationResponse>,\n      SparkConfigurationCreateOrUpdateSparkConfigurationResponse\n    >\n  > {\n    const directSendOperation = async (\n      args: coreClient.OperationArguments,\n      spec: coreClient.OperationSpec,\n    ): Promise<SparkConfigurationCreateOrUpdateSparkConfigurationResponse> => {\n      return tracingClient.withSpan(\n        \"ArtifactsClient.beginCreateOrUpdateSparkConfiguration\",\n        options ?? {},\n        async () => {\n          return this.client.sendOperationRequest(\n            args,\n            spec,\n          ) as Promise<SparkConfigurationCreateOrUpdateSparkConfigurationResponse>;\n        },\n      );\n    };\n    const sendOperationFn = async (\n      args: coreClient.OperationArguments,\n      spec: coreClient.OperationSpec,\n    ): Promise<{\n      flatResponse: SparkConfigurationResource;\n      rawResponse: {\n        statusCode: number;\n        body: any;\n        headers: RawHttpHeaders;\n      };\n    }> => {\n      let currentRawResponse: coreClient.FullOperationResponse | undefined = undefined;\n      const providedCallback = args.options?.onResponse;\n      const callback: coreClient.RawResponseCallback = (\n        rawResponse: coreClient.FullOperationResponse,\n        flatResponse: unknown,\n      ) => {\n        currentRawResponse = rawResponse;\n        providedCallback?.(rawResponse, flatResponse);\n      };\n      const updatedArgs = {\n        ...args,\n        options: {\n          ...args.options,\n          onResponse: callback,\n        },\n      };\n      const flatResponse = await directSendOperation(updatedArgs, spec);\n      return {\n        flatResponse,\n        rawResponse: {\n          statusCode: currentRawResponse!.status,\n          body: currentRawResponse!.parsedBody,\n          headers: currentRawResponse!.headers.toJSON(),\n        },\n      };\n    };\n\n    const lro = createLroSpec({\n      sendOperationFn,\n      args: { sparkConfigurationName, sparkConfiguration, options },\n      spec: createOrUpdateSparkConfigurationOperationSpec,\n    });\n    const poller = await createHttpPoller<\n      SparkConfigurationCreateOrUpdateSparkConfigurationResponse,\n      OperationState<SparkConfigurationCreateOrUpdateSparkConfigurationResponse>\n    >(lro, {\n      restoreFrom: options?.resumeFrom,\n      intervalInMs: options?.updateIntervalInMs,\n    });\n    await poller.poll();\n    return poller;\n  }\n\n  /**\n   * Creates or updates a sparkconfiguration.\n   * @param sparkConfigurationName - The spark Configuration name.\n   * @param sparkConfiguration - SparkConfiguration resource definition.\n   * @param options - The options parameters.\n   */\n  async beginCreateOrUpdateSparkConfigurationAndWait(\n    sparkConfigurationName: string,\n    sparkConfiguration: SparkConfigurationResource,\n    options?: SparkConfigurationCreateOrUpdateSparkConfigurationOptionalParams,\n  ): Promise<SparkConfigurationCreateOrUpdateSparkConfigurationResponse> {\n    const poller = await this.beginCreateOrUpdateSparkConfiguration(\n      sparkConfigurationName,\n      sparkConfiguration,\n      options,\n    );\n    return poller.pollUntilDone();\n  }\n\n  /**\n   * Gets a sparkConfiguration.\n   * @param sparkConfigurationName - The spark Configuration name.\n   * @param options - The options parameters.\n   */\n  async getSparkConfiguration(\n    sparkConfigurationName: string,\n    options?: SparkConfigurationGetSparkConfigurationOptionalParams,\n  ): Promise<SparkConfigurationGetSparkConfigurationResponse> {\n    return tracingClient.withSpan(\n      \"ArtifactsClient.getSparkConfiguration\",\n      options ?? {},\n      async (updatedOptions) => {\n        return this.client.sendOperationRequest(\n          { sparkConfigurationName, updatedOptions },\n          getSparkConfigurationOperationSpec,\n        ) as Promise<SparkConfigurationGetSparkConfigurationResponse>;\n      },\n    );\n  }\n\n  /**\n   * Deletes a sparkConfiguration.\n   * @param sparkConfigurationName - The spark Configuration name.\n   * @param options - The options parameters.\n   */\n  async beginDeleteSparkConfiguration(\n    sparkConfigurationName: string,\n    options?: SparkConfigurationDeleteSparkConfigurationOptionalParams,\n  ): Promise<SimplePollerLike<OperationState<void>, void>> {\n    const directSendOperation = async (\n      args: coreClient.OperationArguments,\n      spec: coreClient.OperationSpec,\n    ): Promise<void> => {\n      return tracingClient.withSpan(\n        \"ArtifactsClient.beginDeleteSparkConfiguration\",\n        options ?? {},\n        async () => {\n          return this.client.sendOperationRequest(args, spec) as Promise<void>;\n        },\n      );\n    };\n    const sendOperationFn = async (\n      args: coreClient.OperationArguments,\n      spec: coreClient.OperationSpec,\n    ): Promise<{\n      flatResponse: void;\n      rawResponse: {\n        statusCode: number;\n        body: any;\n        headers: RawHttpHeaders;\n      };\n    }> => {\n      let currentRawResponse: coreClient.FullOperationResponse | undefined = undefined;\n      const providedCallback = args.options?.onResponse;\n      const callback: coreClient.RawResponseCallback = (\n        rawResponse: coreClient.FullOperationResponse,\n        flatResponse: unknown,\n      ) => {\n        currentRawResponse = rawResponse;\n        providedCallback?.(rawResponse, flatResponse);\n      };\n      const updatedArgs = {\n        ...args,\n        options: {\n          ...args.options,\n          onResponse: callback,\n        },\n      };\n      const flatResponse = await directSendOperation(updatedArgs, spec);\n      return {\n        flatResponse,\n        rawResponse: {\n          statusCode: currentRawResponse!.status,\n          body: currentRawResponse!.parsedBody,\n          headers: currentRawResponse!.headers.toJSON(),\n        },\n      };\n    };\n\n    const lro = createLroSpec({\n      sendOperationFn,\n      args: { sparkConfigurationName, options },\n      spec: deleteSparkConfigurationOperationSpec,\n    });\n    const poller = await createHttpPoller<void, OperationState<void>>(lro, {\n      restoreFrom: options?.resumeFrom,\n      intervalInMs: options?.updateIntervalInMs,\n    });\n    await poller.poll();\n    return poller;\n  }\n\n  /**\n   * Deletes a sparkConfiguration.\n   * @param sparkConfigurationName - The spark Configuration name.\n   * @param options - The options parameters.\n   */\n  async beginDeleteSparkConfigurationAndWait(\n    sparkConfigurationName: string,\n    options?: SparkConfigurationDeleteSparkConfigurationOptionalParams,\n  ): Promise<void> {\n    const poller = await this.beginDeleteSparkConfiguration(sparkConfigurationName, options);\n    return poller.pollUntilDone();\n  }\n\n  /**\n   * Renames a sparkConfiguration.\n   * @param sparkConfigurationName - The spark Configuration name.\n   * @param request - proposed new name.\n   * @param options - The options parameters.\n   */\n  async beginRenameSparkConfiguration(\n    sparkConfigurationName: string,\n    request: ArtifactRenameRequest,\n    options?: SparkConfigurationRenameSparkConfigurationOptionalParams,\n  ): Promise<SimplePollerLike<OperationState<void>, void>> {\n    const directSendOperation = async (\n      args: coreClient.OperationArguments,\n      spec: coreClient.OperationSpec,\n    ): Promise<void> => {\n      return tracingClient.withSpan(\n        \"ArtifactsClient.beginRenameSparkConfiguration\",\n        options ?? {},\n        async () => {\n          return this.client.sendOperationRequest(args, spec) as Promise<void>;\n        },\n      );\n    };\n    const sendOperationFn = async (\n      args: coreClient.OperationArguments,\n      spec: coreClient.OperationSpec,\n    ): Promise<{\n      flatResponse: void;\n      rawResponse: {\n        statusCode: number;\n        body: any;\n        headers: RawHttpHeaders;\n      };\n    }> => {\n      let currentRawResponse: coreClient.FullOperationResponse | undefined = undefined;\n      const providedCallback = args.options?.onResponse;\n      const callback: coreClient.RawResponseCallback = (\n        rawResponse: coreClient.FullOperationResponse,\n        flatResponse: unknown,\n      ) => {\n        currentRawResponse = rawResponse;\n        providedCallback?.(rawResponse, flatResponse);\n      };\n      const updatedArgs = {\n        ...args,\n        options: {\n          ...args.options,\n          onResponse: callback,\n        },\n      };\n      const flatResponse = await directSendOperation(updatedArgs, spec);\n      return {\n        flatResponse,\n        rawResponse: {\n          statusCode: currentRawResponse!.status,\n          body: currentRawResponse!.parsedBody,\n          headers: currentRawResponse!.headers.toJSON(),\n        },\n      };\n    };\n\n    const lro = createLroSpec({\n      sendOperationFn,\n      args: { sparkConfigurationName, request, options },\n      spec: renameSparkConfigurationOperationSpec,\n    });\n    const poller = await createHttpPoller<void, OperationState<void>>(lro, {\n      restoreFrom: options?.resumeFrom,\n      intervalInMs: options?.updateIntervalInMs,\n    });\n    await poller.poll();\n    return poller;\n  }\n\n  /**\n   * Renames a sparkConfiguration.\n   * @param sparkConfigurationName - The spark Configuration name.\n   * @param request - proposed new name.\n   * @param options - The options parameters.\n   */\n  async beginRenameSparkConfigurationAndWait(\n    sparkConfigurationName: string,\n    request: ArtifactRenameRequest,\n    options?: SparkConfigurationRenameSparkConfigurationOptionalParams,\n  ): Promise<void> {\n    const poller = await this.beginRenameSparkConfiguration(\n      sparkConfigurationName,\n      request,\n      options,\n    );\n    return poller.pollUntilDone();\n  }\n\n  /**\n   * GetSparkConfigurationsByWorkspaceNext\n   * @param nextLink - The nextLink from the previous successful call to the\n   *                 GetSparkConfigurationsByWorkspace method.\n   * @param options - The options parameters.\n   */\n  private async _getSparkConfigurationsByWorkspaceNext(\n    nextLink: string,\n    options?: SparkConfigurationGetSparkConfigurationsByWorkspaceNextOptionalParams,\n  ): Promise<SparkConfigurationGetSparkConfigurationsByWorkspaceNextResponse> {\n    return tracingClient.withSpan(\n      \"ArtifactsClient._getSparkConfigurationsByWorkspaceNext\",\n      options ?? {},\n      async (updatedOptions) => {\n        return this.client.sendOperationRequest(\n          { nextLink, updatedOptions },\n          getSparkConfigurationsByWorkspaceNextOperationSpec,\n        ) as Promise<SparkConfigurationGetSparkConfigurationsByWorkspaceNextResponse>;\n      },\n    );\n  }\n}\n"]}