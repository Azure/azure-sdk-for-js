"use strict";
/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.PipelineRunOperationsImpl = void 0;
const tslib_1 = require("tslib");
const tracing_js_1 = require("../tracing.js");
const coreClient = tslib_1.__importStar(require("@azure/core-client"));
const Mappers = tslib_1.__importStar(require("../models/mappers.js"));
const Parameters = tslib_1.__importStar(require("../models/parameters.js"));
// Operation Specifications
const serializer = coreClient.createSerializer(Mappers, /* isXml */ false);
const queryPipelineRunsByWorkspaceOperationSpec = {
    path: "/queryPipelineRuns",
    httpMethod: "POST",
    responses: {
        200: {
            bodyMapper: Mappers.PipelineRunsQueryResponse,
        },
        default: {
            bodyMapper: Mappers.CloudError,
        },
    },
    requestBody: Parameters.filterParameters,
    queryParameters: [Parameters.apiVersion5],
    urlParameters: [Parameters.endpoint],
    headerParameters: [Parameters.accept, Parameters.contentType],
    mediaType: "json",
    serializer,
};
const getPipelineRunOperationSpec = {
    path: "/pipelineruns/{runId}",
    httpMethod: "GET",
    responses: {
        200: {
            bodyMapper: Mappers.PipelineRun,
        },
        default: {
            bodyMapper: Mappers.CloudError,
        },
    },
    queryParameters: [Parameters.apiVersion5],
    urlParameters: [Parameters.endpoint, Parameters.runId1],
    headerParameters: [Parameters.accept],
    serializer,
};
const queryActivityRunsOperationSpec = {
    path: "/pipelines/{pipelineName}/pipelineruns/{runId}/queryActivityruns",
    httpMethod: "POST",
    responses: {
        200: {
            bodyMapper: Mappers.ActivityRunsQueryResponse,
        },
        default: {
            bodyMapper: Mappers.CloudError,
        },
    },
    requestBody: Parameters.filterParameters,
    queryParameters: [Parameters.apiVersion5],
    urlParameters: [Parameters.endpoint, Parameters.pipelineName, Parameters.runId1],
    headerParameters: [Parameters.accept, Parameters.contentType],
    mediaType: "json",
    serializer,
};
const cancelPipelineRunOperationSpec = {
    path: "/pipelineruns/{runId}/cancel",
    httpMethod: "POST",
    responses: {
        200: {},
        default: {
            bodyMapper: Mappers.CloudError,
        },
    },
    queryParameters: [Parameters.apiVersion5, Parameters.isRecursive],
    urlParameters: [Parameters.endpoint, Parameters.runId1],
    headerParameters: [Parameters.accept],
    serializer,
};
/** Class containing PipelineRunOperations operations. */
class PipelineRunOperationsImpl {
    /**
     * Initialize a new instance of the class PipelineRunOperations class.
     * @param client - Reference to the service client
     */
    constructor(client) {
        this.client = client;
    }
    /**
     * Query pipeline runs in the workspace based on input filter conditions.
     * @param filterParameters - Parameters to filter the pipeline run.
     * @param options - The options parameters.
     */
    async queryPipelineRunsByWorkspace(filterParameters, options) {
        return tracing_js_1.tracingClient.withSpan("ArtifactsClient.queryPipelineRunsByWorkspace", options !== null && options !== void 0 ? options : {}, async (updatedOptions) => {
            return this.client.sendOperationRequest({ filterParameters, updatedOptions }, queryPipelineRunsByWorkspaceOperationSpec);
        });
    }
    /**
     * Get a pipeline run by its run ID.
     * @param runId - The pipeline run identifier.
     * @param options - The options parameters.
     */
    async getPipelineRun(runId, options) {
        return tracing_js_1.tracingClient.withSpan("ArtifactsClient.getPipelineRun", options !== null && options !== void 0 ? options : {}, async (updatedOptions) => {
            return this.client.sendOperationRequest({ runId, updatedOptions }, getPipelineRunOperationSpec);
        });
    }
    /**
     * Query activity runs based on input filter conditions.
     * @param pipelineName - The pipeline name.
     * @param runId - The pipeline run identifier.
     * @param filterParameters - Parameters to filter the activity runs.
     * @param options - The options parameters.
     */
    async queryActivityRuns(pipelineName, runId, filterParameters, options) {
        return tracing_js_1.tracingClient.withSpan("ArtifactsClient.queryActivityRuns", options !== null && options !== void 0 ? options : {}, async (updatedOptions) => {
            return this.client.sendOperationRequest({ pipelineName, runId, filterParameters, updatedOptions }, queryActivityRunsOperationSpec);
        });
    }
    /**
     * Cancel a pipeline run by its run ID.
     * @param runId - The pipeline run identifier.
     * @param options - The options parameters.
     */
    async cancelPipelineRun(runId, options) {
        return tracing_js_1.tracingClient.withSpan("ArtifactsClient.cancelPipelineRun", options !== null && options !== void 0 ? options : {}, async (updatedOptions) => {
            return this.client.sendOperationRequest({ runId, updatedOptions }, cancelPipelineRunOperationSpec);
        });
    }
}
exports.PipelineRunOperationsImpl = PipelineRunOperationsImpl;
//# sourceMappingURL=pipelineRunOperations.js.map