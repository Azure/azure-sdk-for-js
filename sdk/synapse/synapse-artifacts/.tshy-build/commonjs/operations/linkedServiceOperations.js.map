{"version":3,"file":"linkedServiceOperations.js","sourceRoot":"","sources":["../../../src/operations/linkedServiceOperations.ts"],"names":[],"mappings":"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","sourcesContent":["/*\n * Copyright (c) Microsoft Corporation.\n * Licensed under the MIT License.\n *\n * Code generated by Microsoft (R) AutoRest Code Generator.\n * Changes may cause incorrect behavior and will be lost if the code is regenerated.\n */\n\nimport { tracingClient } from \"../tracing.js\";\nimport type { PagedAsyncIterableIterator, PageSettings } from \"@azure/core-paging\";\nimport { setContinuationToken } from \"../pagingHelper.js\";\nimport type { LinkedServiceOperations } from \"../operationsInterfaces/index.js\";\nimport * as coreClient from \"@azure/core-client\";\nimport * as Mappers from \"../models/mappers.js\";\nimport * as Parameters from \"../models/parameters.js\";\nimport type { ArtifactsClient } from \"../artifactsClient.js\";\nimport type { SimplePollerLike, OperationState } from \"@azure/core-lro\";\nimport { createHttpPoller } from \"@azure/core-lro\";\nimport { createLroSpec } from \"../lroImpl.js\";\nimport type {\n  LinkedServiceResource,\n  LinkedServiceGetLinkedServicesByWorkspaceNextOptionalParams,\n  LinkedServiceGetLinkedServicesByWorkspaceOptionalParams,\n  LinkedServiceGetLinkedServicesByWorkspaceResponse,\n  LinkedServiceCreateOrUpdateLinkedServiceOptionalParams,\n  LinkedServiceCreateOrUpdateLinkedServiceResponse,\n  LinkedServiceGetLinkedServiceOptionalParams,\n  LinkedServiceGetLinkedServiceResponse,\n  LinkedServiceDeleteLinkedServiceOptionalParams,\n  ArtifactRenameRequest,\n  LinkedServiceRenameLinkedServiceOptionalParams,\n  LinkedServiceGetLinkedServicesByWorkspaceNextResponse,\n} from \"../models/index.js\";\nimport type { RawHttpHeaders } from \"@azure/core-rest-pipeline\";\n\n// Operation Specifications\nconst serializer = coreClient.createSerializer(Mappers, /* isXml */ false);\n\nconst getLinkedServicesByWorkspaceOperationSpec: coreClient.OperationSpec = {\n  path: \"/linkedservices\",\n  httpMethod: \"GET\",\n  responses: {\n    200: {\n      bodyMapper: Mappers.LinkedServiceListResponse,\n    },\n    default: {\n      bodyMapper: Mappers.CloudError,\n    },\n  },\n  queryParameters: [Parameters.apiVersion5],\n  urlParameters: [Parameters.endpoint],\n  headerParameters: [Parameters.accept],\n  serializer,\n};\nconst createOrUpdateLinkedServiceOperationSpec: coreClient.OperationSpec = {\n  path: \"/linkedservices/{linkedServiceName}\",\n  httpMethod: \"PUT\",\n  responses: {\n    200: {\n      bodyMapper: Mappers.LinkedServiceResource,\n    },\n    201: {\n      bodyMapper: Mappers.LinkedServiceResource,\n    },\n    202: {\n      bodyMapper: Mappers.LinkedServiceResource,\n    },\n    204: {\n      bodyMapper: Mappers.LinkedServiceResource,\n    },\n    default: {\n      bodyMapper: Mappers.CloudError,\n    },\n  },\n  requestBody: Parameters.linkedService,\n  queryParameters: [Parameters.apiVersion5],\n  urlParameters: [Parameters.endpoint, Parameters.linkedServiceName],\n  headerParameters: [Parameters.accept, Parameters.contentType, Parameters.ifMatch],\n  mediaType: \"json\",\n  serializer,\n};\nconst getLinkedServiceOperationSpec: coreClient.OperationSpec = {\n  path: \"/linkedservices/{linkedServiceName}\",\n  httpMethod: \"GET\",\n  responses: {\n    200: {\n      bodyMapper: Mappers.LinkedServiceResource,\n    },\n    304: {},\n    default: {\n      bodyMapper: Mappers.CloudError,\n    },\n  },\n  queryParameters: [Parameters.apiVersion5],\n  urlParameters: [Parameters.endpoint, Parameters.linkedServiceName],\n  headerParameters: [Parameters.accept, Parameters.ifNoneMatch],\n  serializer,\n};\nconst deleteLinkedServiceOperationSpec: coreClient.OperationSpec = {\n  path: \"/linkedservices/{linkedServiceName}\",\n  httpMethod: \"DELETE\",\n  responses: {\n    200: {},\n    201: {},\n    202: {},\n    204: {},\n    default: {\n      bodyMapper: Mappers.CloudError,\n    },\n  },\n  queryParameters: [Parameters.apiVersion5],\n  urlParameters: [Parameters.endpoint, Parameters.linkedServiceName],\n  headerParameters: [Parameters.accept],\n  serializer,\n};\nconst renameLinkedServiceOperationSpec: coreClient.OperationSpec = {\n  path: \"/linkedservices/{linkedServiceName}/rename\",\n  httpMethod: \"POST\",\n  responses: {\n    200: {},\n    201: {},\n    202: {},\n    204: {},\n    default: {\n      bodyMapper: Mappers.CloudError,\n    },\n  },\n  requestBody: Parameters.request,\n  queryParameters: [Parameters.apiVersion5],\n  urlParameters: [Parameters.endpoint, Parameters.linkedServiceName],\n  headerParameters: [Parameters.accept, Parameters.contentType],\n  mediaType: \"json\",\n  serializer,\n};\nconst getLinkedServicesByWorkspaceNextOperationSpec: coreClient.OperationSpec = {\n  path: \"{nextLink}\",\n  httpMethod: \"GET\",\n  responses: {\n    200: {\n      bodyMapper: Mappers.LinkedServiceListResponse,\n    },\n    default: {\n      bodyMapper: Mappers.CloudError,\n    },\n  },\n  urlParameters: [Parameters.endpoint, Parameters.nextLink],\n  headerParameters: [Parameters.accept],\n  serializer,\n};\n\n/** Class containing LinkedServiceOperations operations. */\nexport class LinkedServiceOperationsImpl implements LinkedServiceOperations {\n  private readonly client: ArtifactsClient;\n\n  /**\n   * Initialize a new instance of the class LinkedServiceOperations class.\n   * @param client - Reference to the service client\n   */\n  constructor(client: ArtifactsClient) {\n    this.client = client;\n  }\n\n  /**\n   * Lists linked services.\n   * @param options - The options parameters.\n   */\n  public listLinkedServicesByWorkspace(\n    options?: LinkedServiceGetLinkedServicesByWorkspaceOptionalParams,\n  ): PagedAsyncIterableIterator<LinkedServiceResource> {\n    const iter = this.getLinkedServicesByWorkspacePagingAll(options);\n    return {\n      next() {\n        return iter.next();\n      },\n      [Symbol.asyncIterator]() {\n        return this;\n      },\n      byPage: (settings?: PageSettings) => {\n        if (settings?.maxPageSize) {\n          throw new Error(\"maxPageSize is not supported by this operation.\");\n        }\n        return this.getLinkedServicesByWorkspacePagingPage(options, settings);\n      },\n    };\n  }\n\n  private async *getLinkedServicesByWorkspacePagingPage(\n    options?: LinkedServiceGetLinkedServicesByWorkspaceOptionalParams,\n    settings?: PageSettings,\n  ): AsyncIterableIterator<LinkedServiceResource[]> {\n    let result: LinkedServiceGetLinkedServicesByWorkspaceResponse;\n    let continuationToken = settings?.continuationToken;\n    if (!continuationToken) {\n      result = await this._getLinkedServicesByWorkspace(options);\n      const page = result.value || [];\n      continuationToken = result.nextLink;\n      setContinuationToken(page, continuationToken);\n      yield page;\n    }\n    while (continuationToken) {\n      result = await this._getLinkedServicesByWorkspaceNext(continuationToken, options);\n      continuationToken = result.nextLink;\n      const page = result.value || [];\n      setContinuationToken(page, continuationToken);\n      yield page;\n    }\n  }\n\n  private async *getLinkedServicesByWorkspacePagingAll(\n    options?: LinkedServiceGetLinkedServicesByWorkspaceOptionalParams,\n  ): AsyncIterableIterator<LinkedServiceResource> {\n    for await (const page of this.getLinkedServicesByWorkspacePagingPage(options)) {\n      yield* page;\n    }\n  }\n\n  /**\n   * Lists linked services.\n   * @param options - The options parameters.\n   */\n  private async _getLinkedServicesByWorkspace(\n    options?: LinkedServiceGetLinkedServicesByWorkspaceOptionalParams,\n  ): Promise<LinkedServiceGetLinkedServicesByWorkspaceResponse> {\n    return tracingClient.withSpan(\n      \"ArtifactsClient._getLinkedServicesByWorkspace\",\n      options ?? {},\n      async (updatedOptions) => {\n        return this.client.sendOperationRequest(\n          { updatedOptions },\n          getLinkedServicesByWorkspaceOperationSpec,\n        ) as Promise<LinkedServiceGetLinkedServicesByWorkspaceResponse>;\n      },\n    );\n  }\n\n  /**\n   * Creates or updates a linked service.\n   * @param linkedServiceName - The linked service name.\n   * @param linkedService - Linked service resource definition.\n   * @param options - The options parameters.\n   */\n  async beginCreateOrUpdateLinkedService(\n    linkedServiceName: string,\n    linkedService: LinkedServiceResource,\n    options?: LinkedServiceCreateOrUpdateLinkedServiceOptionalParams,\n  ): Promise<\n    SimplePollerLike<\n      OperationState<LinkedServiceCreateOrUpdateLinkedServiceResponse>,\n      LinkedServiceCreateOrUpdateLinkedServiceResponse\n    >\n  > {\n    const directSendOperation = async (\n      args: coreClient.OperationArguments,\n      spec: coreClient.OperationSpec,\n    ): Promise<LinkedServiceCreateOrUpdateLinkedServiceResponse> => {\n      return tracingClient.withSpan(\n        \"ArtifactsClient.beginCreateOrUpdateLinkedService\",\n        options ?? {},\n        async () => {\n          return this.client.sendOperationRequest(\n            args,\n            spec,\n          ) as Promise<LinkedServiceCreateOrUpdateLinkedServiceResponse>;\n        },\n      );\n    };\n    const sendOperationFn = async (\n      args: coreClient.OperationArguments,\n      spec: coreClient.OperationSpec,\n    ): Promise<{\n      flatResponse: LinkedServiceResource;\n      rawResponse: {\n        statusCode: number;\n        body: any;\n        headers: RawHttpHeaders;\n      };\n    }> => {\n      let currentRawResponse: coreClient.FullOperationResponse | undefined = undefined;\n      const providedCallback = args.options?.onResponse;\n      const callback: coreClient.RawResponseCallback = (\n        rawResponse: coreClient.FullOperationResponse,\n        flatResponse: unknown,\n      ) => {\n        currentRawResponse = rawResponse;\n        providedCallback?.(rawResponse, flatResponse);\n      };\n      const updatedArgs = {\n        ...args,\n        options: {\n          ...args.options,\n          onResponse: callback,\n        },\n      };\n      const flatResponse = await directSendOperation(updatedArgs, spec);\n      return {\n        flatResponse,\n        rawResponse: {\n          statusCode: currentRawResponse!.status,\n          body: currentRawResponse!.parsedBody,\n          headers: currentRawResponse!.headers.toJSON(),\n        },\n      };\n    };\n\n    const lro = createLroSpec({\n      sendOperationFn,\n      args: { linkedServiceName, linkedService, options },\n      spec: createOrUpdateLinkedServiceOperationSpec,\n    });\n    const poller = await createHttpPoller<\n      LinkedServiceCreateOrUpdateLinkedServiceResponse,\n      OperationState<LinkedServiceCreateOrUpdateLinkedServiceResponse>\n    >(lro, {\n      restoreFrom: options?.resumeFrom,\n      intervalInMs: options?.updateIntervalInMs,\n    });\n    await poller.poll();\n    return poller;\n  }\n\n  /**\n   * Creates or updates a linked service.\n   * @param linkedServiceName - The linked service name.\n   * @param linkedService - Linked service resource definition.\n   * @param options - The options parameters.\n   */\n  async beginCreateOrUpdateLinkedServiceAndWait(\n    linkedServiceName: string,\n    linkedService: LinkedServiceResource,\n    options?: LinkedServiceCreateOrUpdateLinkedServiceOptionalParams,\n  ): Promise<LinkedServiceCreateOrUpdateLinkedServiceResponse> {\n    const poller = await this.beginCreateOrUpdateLinkedService(\n      linkedServiceName,\n      linkedService,\n      options,\n    );\n    return poller.pollUntilDone();\n  }\n\n  /**\n   * Gets a linked service.\n   * @param linkedServiceName - The linked service name.\n   * @param options - The options parameters.\n   */\n  async getLinkedService(\n    linkedServiceName: string,\n    options?: LinkedServiceGetLinkedServiceOptionalParams,\n  ): Promise<LinkedServiceGetLinkedServiceResponse> {\n    return tracingClient.withSpan(\n      \"ArtifactsClient.getLinkedService\",\n      options ?? {},\n      async (updatedOptions) => {\n        return this.client.sendOperationRequest(\n          { linkedServiceName, updatedOptions },\n          getLinkedServiceOperationSpec,\n        ) as Promise<LinkedServiceGetLinkedServiceResponse>;\n      },\n    );\n  }\n\n  /**\n   * Deletes a linked service.\n   * @param linkedServiceName - The linked service name.\n   * @param options - The options parameters.\n   */\n  async beginDeleteLinkedService(\n    linkedServiceName: string,\n    options?: LinkedServiceDeleteLinkedServiceOptionalParams,\n  ): Promise<SimplePollerLike<OperationState<void>, void>> {\n    const directSendOperation = async (\n      args: coreClient.OperationArguments,\n      spec: coreClient.OperationSpec,\n    ): Promise<void> => {\n      return tracingClient.withSpan(\n        \"ArtifactsClient.beginDeleteLinkedService\",\n        options ?? {},\n        async () => {\n          return this.client.sendOperationRequest(args, spec) as Promise<void>;\n        },\n      );\n    };\n    const sendOperationFn = async (\n      args: coreClient.OperationArguments,\n      spec: coreClient.OperationSpec,\n    ): Promise<{\n      flatResponse: void;\n      rawResponse: {\n        statusCode: number;\n        body: any;\n        headers: RawHttpHeaders;\n      };\n    }> => {\n      let currentRawResponse: coreClient.FullOperationResponse | undefined = undefined;\n      const providedCallback = args.options?.onResponse;\n      const callback: coreClient.RawResponseCallback = (\n        rawResponse: coreClient.FullOperationResponse,\n        flatResponse: unknown,\n      ) => {\n        currentRawResponse = rawResponse;\n        providedCallback?.(rawResponse, flatResponse);\n      };\n      const updatedArgs = {\n        ...args,\n        options: {\n          ...args.options,\n          onResponse: callback,\n        },\n      };\n      const flatResponse = await directSendOperation(updatedArgs, spec);\n      return {\n        flatResponse,\n        rawResponse: {\n          statusCode: currentRawResponse!.status,\n          body: currentRawResponse!.parsedBody,\n          headers: currentRawResponse!.headers.toJSON(),\n        },\n      };\n    };\n\n    const lro = createLroSpec({\n      sendOperationFn,\n      args: { linkedServiceName, options },\n      spec: deleteLinkedServiceOperationSpec,\n    });\n    const poller = await createHttpPoller<void, OperationState<void>>(lro, {\n      restoreFrom: options?.resumeFrom,\n      intervalInMs: options?.updateIntervalInMs,\n    });\n    await poller.poll();\n    return poller;\n  }\n\n  /**\n   * Deletes a linked service.\n   * @param linkedServiceName - The linked service name.\n   * @param options - The options parameters.\n   */\n  async beginDeleteLinkedServiceAndWait(\n    linkedServiceName: string,\n    options?: LinkedServiceDeleteLinkedServiceOptionalParams,\n  ): Promise<void> {\n    const poller = await this.beginDeleteLinkedService(linkedServiceName, options);\n    return poller.pollUntilDone();\n  }\n\n  /**\n   * Renames a linked service.\n   * @param linkedServiceName - The linked service name.\n   * @param request - proposed new name.\n   * @param options - The options parameters.\n   */\n  async beginRenameLinkedService(\n    linkedServiceName: string,\n    request: ArtifactRenameRequest,\n    options?: LinkedServiceRenameLinkedServiceOptionalParams,\n  ): Promise<SimplePollerLike<OperationState<void>, void>> {\n    const directSendOperation = async (\n      args: coreClient.OperationArguments,\n      spec: coreClient.OperationSpec,\n    ): Promise<void> => {\n      return tracingClient.withSpan(\n        \"ArtifactsClient.beginRenameLinkedService\",\n        options ?? {},\n        async () => {\n          return this.client.sendOperationRequest(args, spec) as Promise<void>;\n        },\n      );\n    };\n    const sendOperationFn = async (\n      args: coreClient.OperationArguments,\n      spec: coreClient.OperationSpec,\n    ): Promise<{\n      flatResponse: void;\n      rawResponse: {\n        statusCode: number;\n        body: any;\n        headers: RawHttpHeaders;\n      };\n    }> => {\n      let currentRawResponse: coreClient.FullOperationResponse | undefined = undefined;\n      const providedCallback = args.options?.onResponse;\n      const callback: coreClient.RawResponseCallback = (\n        rawResponse: coreClient.FullOperationResponse,\n        flatResponse: unknown,\n      ) => {\n        currentRawResponse = rawResponse;\n        providedCallback?.(rawResponse, flatResponse);\n      };\n      const updatedArgs = {\n        ...args,\n        options: {\n          ...args.options,\n          onResponse: callback,\n        },\n      };\n      const flatResponse = await directSendOperation(updatedArgs, spec);\n      return {\n        flatResponse,\n        rawResponse: {\n          statusCode: currentRawResponse!.status,\n          body: currentRawResponse!.parsedBody,\n          headers: currentRawResponse!.headers.toJSON(),\n        },\n      };\n    };\n\n    const lro = createLroSpec({\n      sendOperationFn,\n      args: { linkedServiceName, request, options },\n      spec: renameLinkedServiceOperationSpec,\n    });\n    const poller = await createHttpPoller<void, OperationState<void>>(lro, {\n      restoreFrom: options?.resumeFrom,\n      intervalInMs: options?.updateIntervalInMs,\n    });\n    await poller.poll();\n    return poller;\n  }\n\n  /**\n   * Renames a linked service.\n   * @param linkedServiceName - The linked service name.\n   * @param request - proposed new name.\n   * @param options - The options parameters.\n   */\n  async beginRenameLinkedServiceAndWait(\n    linkedServiceName: string,\n    request: ArtifactRenameRequest,\n    options?: LinkedServiceRenameLinkedServiceOptionalParams,\n  ): Promise<void> {\n    const poller = await this.beginRenameLinkedService(linkedServiceName, request, options);\n    return poller.pollUntilDone();\n  }\n\n  /**\n   * GetLinkedServicesByWorkspaceNext\n   * @param nextLink - The nextLink from the previous successful call to the GetLinkedServicesByWorkspace\n   *                 method.\n   * @param options - The options parameters.\n   */\n  private async _getLinkedServicesByWorkspaceNext(\n    nextLink: string,\n    options?: LinkedServiceGetLinkedServicesByWorkspaceNextOptionalParams,\n  ): Promise<LinkedServiceGetLinkedServicesByWorkspaceNextResponse> {\n    return tracingClient.withSpan(\n      \"ArtifactsClient._getLinkedServicesByWorkspaceNext\",\n      options ?? {},\n      async (updatedOptions) => {\n        return this.client.sendOperationRequest(\n          { nextLink, updatedOptions },\n          getLinkedServicesByWorkspaceNextOperationSpec,\n        ) as Promise<LinkedServiceGetLinkedServicesByWorkspaceNextResponse>;\n      },\n    );\n  }\n}\n"]}