{"version":3,"file":"datasetOperations.js","sourceRoot":"","sources":["../../../src/operations/datasetOperations.ts"],"names":[],"mappings":"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","sourcesContent":["/*\n * Copyright (c) Microsoft Corporation.\n * Licensed under the MIT License.\n *\n * Code generated by Microsoft (R) AutoRest Code Generator.\n * Changes may cause incorrect behavior and will be lost if the code is regenerated.\n */\n\nimport { tracingClient } from \"../tracing.js\";\nimport type { PagedAsyncIterableIterator, PageSettings } from \"@azure/core-paging\";\nimport { setContinuationToken } from \"../pagingHelper.js\";\nimport type { DatasetOperations } from \"../operationsInterfaces/index.js\";\nimport * as coreClient from \"@azure/core-client\";\nimport * as Mappers from \"../models/mappers.js\";\nimport * as Parameters from \"../models/parameters.js\";\nimport type { ArtifactsClient } from \"../artifactsClient.js\";\nimport type { SimplePollerLike, OperationState } from \"@azure/core-lro\";\nimport { createHttpPoller } from \"@azure/core-lro\";\nimport { createLroSpec } from \"../lroImpl.js\";\nimport type {\n  DatasetResource,\n  DatasetGetDatasetsByWorkspaceNextOptionalParams,\n  DatasetGetDatasetsByWorkspaceOptionalParams,\n  DatasetGetDatasetsByWorkspaceResponse,\n  DatasetCreateOrUpdateDatasetOptionalParams,\n  DatasetCreateOrUpdateDatasetResponse,\n  DatasetGetDatasetOptionalParams,\n  DatasetGetDatasetResponse,\n  DatasetDeleteDatasetOptionalParams,\n  ArtifactRenameRequest,\n  DatasetRenameDatasetOptionalParams,\n  DatasetGetDatasetsByWorkspaceNextResponse,\n} from \"../models/index.js\";\nimport type { RawHttpHeaders } from \"@azure/core-rest-pipeline\";\n\n// Operation Specifications\nconst serializer = coreClient.createSerializer(Mappers, /* isXml */ false);\n\nconst getDatasetsByWorkspaceOperationSpec: coreClient.OperationSpec = {\n  path: \"/datasets\",\n  httpMethod: \"GET\",\n  responses: {\n    200: {\n      bodyMapper: Mappers.DatasetListResponse,\n    },\n    default: {\n      bodyMapper: Mappers.CloudError,\n    },\n  },\n  queryParameters: [Parameters.apiVersion5],\n  urlParameters: [Parameters.endpoint],\n  headerParameters: [Parameters.accept],\n  serializer,\n};\nconst createOrUpdateDatasetOperationSpec: coreClient.OperationSpec = {\n  path: \"/datasets/{datasetName}\",\n  httpMethod: \"PUT\",\n  responses: {\n    200: {\n      bodyMapper: Mappers.DatasetResource,\n    },\n    201: {\n      bodyMapper: Mappers.DatasetResource,\n    },\n    202: {\n      bodyMapper: Mappers.DatasetResource,\n    },\n    204: {\n      bodyMapper: Mappers.DatasetResource,\n    },\n    default: {\n      bodyMapper: Mappers.CloudError,\n    },\n  },\n  requestBody: Parameters.dataset,\n  queryParameters: [Parameters.apiVersion5],\n  urlParameters: [Parameters.endpoint, Parameters.datasetName],\n  headerParameters: [Parameters.accept, Parameters.contentType, Parameters.ifMatch],\n  mediaType: \"json\",\n  serializer,\n};\nconst getDatasetOperationSpec: coreClient.OperationSpec = {\n  path: \"/datasets/{datasetName}\",\n  httpMethod: \"GET\",\n  responses: {\n    200: {\n      bodyMapper: Mappers.DatasetResource,\n    },\n    304: {},\n    default: {\n      bodyMapper: Mappers.CloudError,\n    },\n  },\n  queryParameters: [Parameters.apiVersion5],\n  urlParameters: [Parameters.endpoint, Parameters.datasetName],\n  headerParameters: [Parameters.accept, Parameters.ifNoneMatch],\n  serializer,\n};\nconst deleteDatasetOperationSpec: coreClient.OperationSpec = {\n  path: \"/datasets/{datasetName}\",\n  httpMethod: \"DELETE\",\n  responses: {\n    200: {},\n    201: {},\n    202: {},\n    204: {},\n    default: {\n      bodyMapper: Mappers.CloudError,\n    },\n  },\n  queryParameters: [Parameters.apiVersion5],\n  urlParameters: [Parameters.endpoint, Parameters.datasetName],\n  headerParameters: [Parameters.accept],\n  serializer,\n};\nconst renameDatasetOperationSpec: coreClient.OperationSpec = {\n  path: \"/datasets/{datasetName}/rename\",\n  httpMethod: \"POST\",\n  responses: {\n    200: {},\n    201: {},\n    202: {},\n    204: {},\n    default: {\n      bodyMapper: Mappers.CloudError,\n    },\n  },\n  requestBody: Parameters.request,\n  queryParameters: [Parameters.apiVersion5],\n  urlParameters: [Parameters.endpoint, Parameters.datasetName],\n  headerParameters: [Parameters.accept, Parameters.contentType],\n  mediaType: \"json\",\n  serializer,\n};\nconst getDatasetsByWorkspaceNextOperationSpec: coreClient.OperationSpec = {\n  path: \"{nextLink}\",\n  httpMethod: \"GET\",\n  responses: {\n    200: {\n      bodyMapper: Mappers.DatasetListResponse,\n    },\n    default: {\n      bodyMapper: Mappers.CloudError,\n    },\n  },\n  urlParameters: [Parameters.endpoint, Parameters.nextLink],\n  headerParameters: [Parameters.accept],\n  serializer,\n};\n\n/** Class containing DatasetOperations operations. */\nexport class DatasetOperationsImpl implements DatasetOperations {\n  private readonly client: ArtifactsClient;\n\n  /**\n   * Initialize a new instance of the class DatasetOperations class.\n   * @param client - Reference to the service client\n   */\n  constructor(client: ArtifactsClient) {\n    this.client = client;\n  }\n\n  /**\n   * Lists datasets.\n   * @param options - The options parameters.\n   */\n  public listDatasetsByWorkspace(\n    options?: DatasetGetDatasetsByWorkspaceOptionalParams,\n  ): PagedAsyncIterableIterator<DatasetResource> {\n    const iter = this.getDatasetsByWorkspacePagingAll(options);\n    return {\n      next() {\n        return iter.next();\n      },\n      [Symbol.asyncIterator]() {\n        return this;\n      },\n      byPage: (settings?: PageSettings) => {\n        if (settings?.maxPageSize) {\n          throw new Error(\"maxPageSize is not supported by this operation.\");\n        }\n        return this.getDatasetsByWorkspacePagingPage(options, settings);\n      },\n    };\n  }\n\n  private async *getDatasetsByWorkspacePagingPage(\n    options?: DatasetGetDatasetsByWorkspaceOptionalParams,\n    settings?: PageSettings,\n  ): AsyncIterableIterator<DatasetResource[]> {\n    let result: DatasetGetDatasetsByWorkspaceResponse;\n    let continuationToken = settings?.continuationToken;\n    if (!continuationToken) {\n      result = await this._getDatasetsByWorkspace(options);\n      const page = result.value || [];\n      continuationToken = result.nextLink;\n      setContinuationToken(page, continuationToken);\n      yield page;\n    }\n    while (continuationToken) {\n      result = await this._getDatasetsByWorkspaceNext(continuationToken, options);\n      continuationToken = result.nextLink;\n      const page = result.value || [];\n      setContinuationToken(page, continuationToken);\n      yield page;\n    }\n  }\n\n  private async *getDatasetsByWorkspacePagingAll(\n    options?: DatasetGetDatasetsByWorkspaceOptionalParams,\n  ): AsyncIterableIterator<DatasetResource> {\n    for await (const page of this.getDatasetsByWorkspacePagingPage(options)) {\n      yield* page;\n    }\n  }\n\n  /**\n   * Lists datasets.\n   * @param options - The options parameters.\n   */\n  private async _getDatasetsByWorkspace(\n    options?: DatasetGetDatasetsByWorkspaceOptionalParams,\n  ): Promise<DatasetGetDatasetsByWorkspaceResponse> {\n    return tracingClient.withSpan(\n      \"ArtifactsClient._getDatasetsByWorkspace\",\n      options ?? {},\n      async (updatedOptions) => {\n        return this.client.sendOperationRequest(\n          { updatedOptions },\n          getDatasetsByWorkspaceOperationSpec,\n        ) as Promise<DatasetGetDatasetsByWorkspaceResponse>;\n      },\n    );\n  }\n\n  /**\n   * Creates or updates a dataset.\n   * @param datasetName - The dataset name.\n   * @param dataset - Dataset resource definition.\n   * @param options - The options parameters.\n   */\n  async beginCreateOrUpdateDataset(\n    datasetName: string,\n    dataset: DatasetResource,\n    options?: DatasetCreateOrUpdateDatasetOptionalParams,\n  ): Promise<\n    SimplePollerLike<\n      OperationState<DatasetCreateOrUpdateDatasetResponse>,\n      DatasetCreateOrUpdateDatasetResponse\n    >\n  > {\n    const directSendOperation = async (\n      args: coreClient.OperationArguments,\n      spec: coreClient.OperationSpec,\n    ): Promise<DatasetCreateOrUpdateDatasetResponse> => {\n      return tracingClient.withSpan(\n        \"ArtifactsClient.beginCreateOrUpdateDataset\",\n        options ?? {},\n        async () => {\n          return this.client.sendOperationRequest(\n            args,\n            spec,\n          ) as Promise<DatasetCreateOrUpdateDatasetResponse>;\n        },\n      );\n    };\n    const sendOperationFn = async (\n      args: coreClient.OperationArguments,\n      spec: coreClient.OperationSpec,\n    ): Promise<{\n      flatResponse: DatasetResource;\n      rawResponse: {\n        statusCode: number;\n        body: any;\n        headers: RawHttpHeaders;\n      };\n    }> => {\n      let currentRawResponse: coreClient.FullOperationResponse | undefined = undefined;\n      const providedCallback = args.options?.onResponse;\n      const callback: coreClient.RawResponseCallback = (\n        rawResponse: coreClient.FullOperationResponse,\n        flatResponse: unknown,\n      ) => {\n        currentRawResponse = rawResponse;\n        providedCallback?.(rawResponse, flatResponse);\n      };\n      const updatedArgs = {\n        ...args,\n        options: {\n          ...args.options,\n          onResponse: callback,\n        },\n      };\n      const flatResponse = await directSendOperation(updatedArgs, spec);\n      return {\n        flatResponse,\n        rawResponse: {\n          statusCode: currentRawResponse!.status,\n          body: currentRawResponse!.parsedBody,\n          headers: currentRawResponse!.headers.toJSON(),\n        },\n      };\n    };\n\n    const lro = createLroSpec({\n      sendOperationFn,\n      args: { datasetName, dataset, options },\n      spec: createOrUpdateDatasetOperationSpec,\n    });\n    const poller = await createHttpPoller<\n      DatasetCreateOrUpdateDatasetResponse,\n      OperationState<DatasetCreateOrUpdateDatasetResponse>\n    >(lro, {\n      restoreFrom: options?.resumeFrom,\n      intervalInMs: options?.updateIntervalInMs,\n    });\n    await poller.poll();\n    return poller;\n  }\n\n  /**\n   * Creates or updates a dataset.\n   * @param datasetName - The dataset name.\n   * @param dataset - Dataset resource definition.\n   * @param options - The options parameters.\n   */\n  async beginCreateOrUpdateDatasetAndWait(\n    datasetName: string,\n    dataset: DatasetResource,\n    options?: DatasetCreateOrUpdateDatasetOptionalParams,\n  ): Promise<DatasetCreateOrUpdateDatasetResponse> {\n    const poller = await this.beginCreateOrUpdateDataset(datasetName, dataset, options);\n    return poller.pollUntilDone();\n  }\n\n  /**\n   * Gets a dataset.\n   * @param datasetName - The dataset name.\n   * @param options - The options parameters.\n   */\n  async getDataset(\n    datasetName: string,\n    options?: DatasetGetDatasetOptionalParams,\n  ): Promise<DatasetGetDatasetResponse> {\n    return tracingClient.withSpan(\n      \"ArtifactsClient.getDataset\",\n      options ?? {},\n      async (updatedOptions) => {\n        return this.client.sendOperationRequest(\n          { datasetName, updatedOptions },\n          getDatasetOperationSpec,\n        ) as Promise<DatasetGetDatasetResponse>;\n      },\n    );\n  }\n\n  /**\n   * Deletes a dataset.\n   * @param datasetName - The dataset name.\n   * @param options - The options parameters.\n   */\n  async beginDeleteDataset(\n    datasetName: string,\n    options?: DatasetDeleteDatasetOptionalParams,\n  ): Promise<SimplePollerLike<OperationState<void>, void>> {\n    const directSendOperation = async (\n      args: coreClient.OperationArguments,\n      spec: coreClient.OperationSpec,\n    ): Promise<void> => {\n      return tracingClient.withSpan(\n        \"ArtifactsClient.beginDeleteDataset\",\n        options ?? {},\n        async () => {\n          return this.client.sendOperationRequest(args, spec) as Promise<void>;\n        },\n      );\n    };\n    const sendOperationFn = async (\n      args: coreClient.OperationArguments,\n      spec: coreClient.OperationSpec,\n    ): Promise<{\n      flatResponse: void;\n      rawResponse: {\n        statusCode: number;\n        body: any;\n        headers: RawHttpHeaders;\n      };\n    }> => {\n      let currentRawResponse: coreClient.FullOperationResponse | undefined = undefined;\n      const providedCallback = args.options?.onResponse;\n      const callback: coreClient.RawResponseCallback = (\n        rawResponse: coreClient.FullOperationResponse,\n        flatResponse: unknown,\n      ) => {\n        currentRawResponse = rawResponse;\n        providedCallback?.(rawResponse, flatResponse);\n      };\n      const updatedArgs = {\n        ...args,\n        options: {\n          ...args.options,\n          onResponse: callback,\n        },\n      };\n      const flatResponse = await directSendOperation(updatedArgs, spec);\n      return {\n        flatResponse,\n        rawResponse: {\n          statusCode: currentRawResponse!.status,\n          body: currentRawResponse!.parsedBody,\n          headers: currentRawResponse!.headers.toJSON(),\n        },\n      };\n    };\n\n    const lro = createLroSpec({\n      sendOperationFn,\n      args: { datasetName, options },\n      spec: deleteDatasetOperationSpec,\n    });\n    const poller = await createHttpPoller<void, OperationState<void>>(lro, {\n      restoreFrom: options?.resumeFrom,\n      intervalInMs: options?.updateIntervalInMs,\n    });\n    await poller.poll();\n    return poller;\n  }\n\n  /**\n   * Deletes a dataset.\n   * @param datasetName - The dataset name.\n   * @param options - The options parameters.\n   */\n  async beginDeleteDatasetAndWait(\n    datasetName: string,\n    options?: DatasetDeleteDatasetOptionalParams,\n  ): Promise<void> {\n    const poller = await this.beginDeleteDataset(datasetName, options);\n    return poller.pollUntilDone();\n  }\n\n  /**\n   * Renames a dataset.\n   * @param datasetName - The dataset name.\n   * @param request - proposed new name.\n   * @param options - The options parameters.\n   */\n  async beginRenameDataset(\n    datasetName: string,\n    request: ArtifactRenameRequest,\n    options?: DatasetRenameDatasetOptionalParams,\n  ): Promise<SimplePollerLike<OperationState<void>, void>> {\n    const directSendOperation = async (\n      args: coreClient.OperationArguments,\n      spec: coreClient.OperationSpec,\n    ): Promise<void> => {\n      return tracingClient.withSpan(\n        \"ArtifactsClient.beginRenameDataset\",\n        options ?? {},\n        async () => {\n          return this.client.sendOperationRequest(args, spec) as Promise<void>;\n        },\n      );\n    };\n    const sendOperationFn = async (\n      args: coreClient.OperationArguments,\n      spec: coreClient.OperationSpec,\n    ): Promise<{\n      flatResponse: void;\n      rawResponse: {\n        statusCode: number;\n        body: any;\n        headers: RawHttpHeaders;\n      };\n    }> => {\n      let currentRawResponse: coreClient.FullOperationResponse | undefined = undefined;\n      const providedCallback = args.options?.onResponse;\n      const callback: coreClient.RawResponseCallback = (\n        rawResponse: coreClient.FullOperationResponse,\n        flatResponse: unknown,\n      ) => {\n        currentRawResponse = rawResponse;\n        providedCallback?.(rawResponse, flatResponse);\n      };\n      const updatedArgs = {\n        ...args,\n        options: {\n          ...args.options,\n          onResponse: callback,\n        },\n      };\n      const flatResponse = await directSendOperation(updatedArgs, spec);\n      return {\n        flatResponse,\n        rawResponse: {\n          statusCode: currentRawResponse!.status,\n          body: currentRawResponse!.parsedBody,\n          headers: currentRawResponse!.headers.toJSON(),\n        },\n      };\n    };\n\n    const lro = createLroSpec({\n      sendOperationFn,\n      args: { datasetName, request, options },\n      spec: renameDatasetOperationSpec,\n    });\n    const poller = await createHttpPoller<void, OperationState<void>>(lro, {\n      restoreFrom: options?.resumeFrom,\n      intervalInMs: options?.updateIntervalInMs,\n    });\n    await poller.poll();\n    return poller;\n  }\n\n  /**\n   * Renames a dataset.\n   * @param datasetName - The dataset name.\n   * @param request - proposed new name.\n   * @param options - The options parameters.\n   */\n  async beginRenameDatasetAndWait(\n    datasetName: string,\n    request: ArtifactRenameRequest,\n    options?: DatasetRenameDatasetOptionalParams,\n  ): Promise<void> {\n    const poller = await this.beginRenameDataset(datasetName, request, options);\n    return poller.pollUntilDone();\n  }\n\n  /**\n   * GetDatasetsByWorkspaceNext\n   * @param nextLink - The nextLink from the previous successful call to the GetDatasetsByWorkspace method.\n   * @param options - The options parameters.\n   */\n  private async _getDatasetsByWorkspaceNext(\n    nextLink: string,\n    options?: DatasetGetDatasetsByWorkspaceNextOptionalParams,\n  ): Promise<DatasetGetDatasetsByWorkspaceNextResponse> {\n    return tracingClient.withSpan(\n      \"ArtifactsClient._getDatasetsByWorkspaceNext\",\n      options ?? {},\n      async (updatedOptions) => {\n        return this.client.sendOperationRequest(\n          { nextLink, updatedOptions },\n          getDatasetsByWorkspaceNextOperationSpec,\n        ) as Promise<DatasetGetDatasetsByWorkspaceNextResponse>;\n      },\n    );\n  }\n}\n"]}