"use strict";
/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.LinkConnectionOperationsImpl = void 0;
const tslib_1 = require("tslib");
const tracing_js_1 = require("../tracing.js");
const pagingHelper_js_1 = require("../pagingHelper.js");
const coreClient = tslib_1.__importStar(require("@azure/core-client"));
const Mappers = tslib_1.__importStar(require("../models/mappers.js"));
const Parameters = tslib_1.__importStar(require("../models/parameters.js"));
// Operation Specifications
const serializer = coreClient.createSerializer(Mappers, /* isXml */ false);
const listByWorkspaceOperationSpec = {
    path: "/linkconnections",
    httpMethod: "GET",
    responses: {
        200: {
            bodyMapper: Mappers.LinkConnectionListResponse,
        },
        default: {
            bodyMapper: Mappers.CloudError,
        },
    },
    queryParameters: [Parameters.apiVersion],
    urlParameters: [Parameters.endpoint],
    headerParameters: [Parameters.accept],
    serializer,
};
const createOrUpdateOperationSpec = {
    path: "/linkconnections/{linkConnectionName}",
    httpMethod: "PUT",
    responses: {
        200: {
            bodyMapper: Mappers.LinkConnectionResource,
        },
        default: {
            bodyMapper: Mappers.CloudError,
        },
    },
    requestBody: Parameters.linkConnection,
    queryParameters: [Parameters.apiVersion],
    urlParameters: [Parameters.endpoint, Parameters.linkConnectionName],
    headerParameters: [Parameters.accept, Parameters.contentType],
    mediaType: "json",
    serializer,
};
const getOperationSpec = {
    path: "/linkconnections/{linkConnectionName}",
    httpMethod: "GET",
    responses: {
        200: {
            bodyMapper: Mappers.LinkConnectionResource,
        },
        default: {
            bodyMapper: Mappers.CloudError,
        },
    },
    queryParameters: [Parameters.apiVersion],
    urlParameters: [Parameters.endpoint, Parameters.linkConnectionName],
    headerParameters: [Parameters.accept],
    serializer,
};
const deleteOperationSpec = {
    path: "/linkconnections/{linkConnectionName}",
    httpMethod: "DELETE",
    responses: {
        200: {},
        204: {},
        default: {
            bodyMapper: Mappers.CloudError,
        },
    },
    queryParameters: [Parameters.apiVersion],
    urlParameters: [Parameters.endpoint, Parameters.linkConnectionName],
    headerParameters: [Parameters.accept],
    serializer,
};
const editTablesOperationSpec = {
    path: "/linkconnections/{linkConnectionName}/edittables",
    httpMethod: "POST",
    responses: {
        200: {},
        default: {
            bodyMapper: Mappers.CloudError,
        },
    },
    requestBody: Parameters.editTablesRequest,
    queryParameters: [Parameters.apiVersion],
    urlParameters: [Parameters.endpoint, Parameters.linkConnectionName],
    headerParameters: [Parameters.accept, Parameters.contentType],
    mediaType: "json",
    serializer,
};
const startOperationSpec = {
    path: "/linkconnections/{linkConnectionName}/start",
    httpMethod: "POST",
    responses: {
        200: {},
        default: {
            bodyMapper: Mappers.CloudError,
        },
    },
    queryParameters: [Parameters.apiVersion],
    urlParameters: [Parameters.endpoint, Parameters.linkConnectionName],
    headerParameters: [Parameters.accept],
    serializer,
};
const stopOperationSpec = {
    path: "/linkconnections/{linkConnectionName}/stop",
    httpMethod: "POST",
    responses: {
        200: {},
        default: {
            bodyMapper: Mappers.CloudError,
        },
    },
    queryParameters: [Parameters.apiVersion],
    urlParameters: [Parameters.endpoint, Parameters.linkConnectionName],
    headerParameters: [Parameters.accept],
    serializer,
};
const getDetailedStatusOperationSpec = {
    path: "/linkconnections/{linkConnectionName}/detailedstatus",
    httpMethod: "GET",
    responses: {
        200: {
            bodyMapper: Mappers.LinkConnectionDetailedStatus,
        },
        default: {
            bodyMapper: Mappers.CloudError,
        },
    },
    queryParameters: [Parameters.apiVersion],
    urlParameters: [Parameters.endpoint, Parameters.linkConnectionName],
    headerParameters: [Parameters.accept],
    serializer,
};
const listLinkTablesOperationSpec = {
    path: "/linkconnections/{linkConnectionName}/linktables",
    httpMethod: "GET",
    responses: {
        200: {
            bodyMapper: Mappers.LinkTableListResponse,
        },
        default: {
            bodyMapper: Mappers.CloudError,
        },
    },
    queryParameters: [Parameters.apiVersion],
    urlParameters: [Parameters.endpoint, Parameters.linkConnectionName],
    headerParameters: [Parameters.accept],
    serializer,
};
const queryTableStatusOperationSpec = {
    path: "/linkconnections/{linkConnectionName}/querytablestatus",
    httpMethod: "POST",
    responses: {
        200: {
            bodyMapper: Mappers.LinkConnectionQueryTableStatus,
        },
        default: {
            bodyMapper: Mappers.CloudError,
        },
    },
    requestBody: Parameters.queryTableStatusRequest,
    queryParameters: [Parameters.apiVersion],
    urlParameters: [Parameters.endpoint, Parameters.linkConnectionName],
    headerParameters: [Parameters.accept, Parameters.contentType],
    mediaType: "json",
    serializer,
};
const updateLandingZoneCredentialOperationSpec = {
    path: "/linkconnections/{linkConnectionName}/updateLandingZoneCredential",
    httpMethod: "POST",
    responses: {
        200: {},
        default: {
            bodyMapper: Mappers.CloudError,
        },
    },
    requestBody: Parameters.updateLandingZoneCredentialRequest,
    queryParameters: [Parameters.apiVersion],
    urlParameters: [Parameters.endpoint, Parameters.linkConnectionName],
    headerParameters: [Parameters.accept, Parameters.contentType],
    mediaType: "json",
    serializer,
};
const pauseOperationSpec = {
    path: "/linkconnections/{linkConnectionName}/pause",
    httpMethod: "POST",
    responses: {
        200: {},
        default: {
            bodyMapper: Mappers.CloudError,
        },
    },
    queryParameters: [Parameters.apiVersion],
    urlParameters: [Parameters.endpoint, Parameters.linkConnectionName],
    headerParameters: [Parameters.accept],
    serializer,
};
const resumeOperationSpec = {
    path: "/linkconnections/{linkConnectionName}/resume",
    httpMethod: "POST",
    responses: {
        200: {},
        default: {
            bodyMapper: Mappers.CloudError,
        },
    },
    queryParameters: [Parameters.apiVersion],
    urlParameters: [Parameters.endpoint, Parameters.linkConnectionName],
    headerParameters: [Parameters.accept],
    serializer,
};
const listByWorkspaceNextOperationSpec = {
    path: "{nextLink}",
    httpMethod: "GET",
    responses: {
        200: {
            bodyMapper: Mappers.LinkConnectionListResponse,
        },
        default: {
            bodyMapper: Mappers.CloudError,
        },
    },
    urlParameters: [Parameters.endpoint, Parameters.nextLink],
    headerParameters: [Parameters.accept],
    serializer,
};
/** Class containing LinkConnectionOperations operations. */
class LinkConnectionOperationsImpl {
    /**
     * Initialize a new instance of the class LinkConnectionOperations class.
     * @param client - Reference to the service client
     */
    constructor(client) {
        this.client = client;
    }
    /**
     * List link connections
     * @param options - The options parameters.
     */
    listByWorkspace(options) {
        const iter = this.listByWorkspacePagingAll(options);
        return {
            next() {
                return iter.next();
            },
            [Symbol.asyncIterator]() {
                return this;
            },
            byPage: (settings) => {
                if (settings === null || settings === void 0 ? void 0 : settings.maxPageSize) {
                    throw new Error("maxPageSize is not supported by this operation.");
                }
                return this.listByWorkspacePagingPage(options, settings);
            },
        };
    }
    listByWorkspacePagingPage(options, settings) {
        return tslib_1.__asyncGenerator(this, arguments, function* listByWorkspacePagingPage_1() {
            let result;
            let continuationToken = settings === null || settings === void 0 ? void 0 : settings.continuationToken;
            if (!continuationToken) {
                result = yield tslib_1.__await(this._listByWorkspace(options));
                const page = result.value || [];
                continuationToken = result.nextLink;
                (0, pagingHelper_js_1.setContinuationToken)(page, continuationToken);
                yield yield tslib_1.__await(page);
            }
            while (continuationToken) {
                result = yield tslib_1.__await(this._listByWorkspaceNext(continuationToken, options));
                continuationToken = result.nextLink;
                const page = result.value || [];
                (0, pagingHelper_js_1.setContinuationToken)(page, continuationToken);
                yield yield tslib_1.__await(page);
            }
        });
    }
    listByWorkspacePagingAll(options) {
        return tslib_1.__asyncGenerator(this, arguments, function* listByWorkspacePagingAll_1() {
            var _a, e_1, _b, _c;
            try {
                for (var _d = true, _e = tslib_1.__asyncValues(this.listByWorkspacePagingPage(options)), _f; _f = yield tslib_1.__await(_e.next()), _a = _f.done, !_a; _d = true) {
                    _c = _f.value;
                    _d = false;
                    const page = _c;
                    yield tslib_1.__await(yield* tslib_1.__asyncDelegator(tslib_1.__asyncValues(page)));
                }
            }
            catch (e_1_1) { e_1 = { error: e_1_1 }; }
            finally {
                try {
                    if (!_d && !_a && (_b = _e.return)) yield tslib_1.__await(_b.call(_e));
                }
                finally { if (e_1) throw e_1.error; }
            }
        });
    }
    /**
     * List link connections
     * @param options - The options parameters.
     */
    async _listByWorkspace(options) {
        return tracing_js_1.tracingClient.withSpan("ArtifactsClient._listByWorkspace", options !== null && options !== void 0 ? options : {}, async (updatedOptions) => {
            return this.client.sendOperationRequest({ updatedOptions }, listByWorkspaceOperationSpec);
        });
    }
    /**
     * Creates or updates a link connection
     * @param linkConnectionName - The link connection name
     * @param linkConnection - Link connection resource definition
     * @param options - The options parameters.
     */
    async createOrUpdate(linkConnectionName, linkConnection, options) {
        return tracing_js_1.tracingClient.withSpan("ArtifactsClient.createOrUpdate", options !== null && options !== void 0 ? options : {}, async (updatedOptions) => {
            return this.client.sendOperationRequest({ linkConnectionName, linkConnection, updatedOptions }, createOrUpdateOperationSpec);
        });
    }
    /**
     * Get a link connection
     * @param linkConnectionName - The link connection name
     * @param options - The options parameters.
     */
    async get(linkConnectionName, options) {
        return tracing_js_1.tracingClient.withSpan("ArtifactsClient.get", options !== null && options !== void 0 ? options : {}, async (updatedOptions) => {
            return this.client.sendOperationRequest({ linkConnectionName, updatedOptions }, getOperationSpec);
        });
    }
    /**
     * Delete a link connection
     * @param linkConnectionName - The link connection name
     * @param options - The options parameters.
     */
    async delete(linkConnectionName, options) {
        return tracing_js_1.tracingClient.withSpan("ArtifactsClient.delete", options !== null && options !== void 0 ? options : {}, async (updatedOptions) => {
            return this.client.sendOperationRequest({ linkConnectionName, updatedOptions }, deleteOperationSpec);
        });
    }
    /**
     * Edit tables for a link connection
     * @param linkConnectionName - The link connection name
     * @param editTablesRequest - Edit tables request
     * @param options - The options parameters.
     */
    async editTables(linkConnectionName, editTablesRequest, options) {
        return tracing_js_1.tracingClient.withSpan("ArtifactsClient.editTables", options !== null && options !== void 0 ? options : {}, async (updatedOptions) => {
            return this.client.sendOperationRequest({ linkConnectionName, editTablesRequest, updatedOptions }, editTablesOperationSpec);
        });
    }
    /**
     * Start a link connection. It may take a few minutes from Starting to Running, monitor the status with
     * LinkConnection_GetDetailedStatus.
     * @param linkConnectionName - The link connection name
     * @param options - The options parameters.
     */
    async start(linkConnectionName, options) {
        return tracing_js_1.tracingClient.withSpan("ArtifactsClient.start", options !== null && options !== void 0 ? options : {}, async (updatedOptions) => {
            return this.client.sendOperationRequest({ linkConnectionName, updatedOptions }, startOperationSpec);
        });
    }
    /**
     * Stop a link connection. It may take a few minutes from Stopping to stopped, monitor the status with
     * LinkConnection_GetDetailedStatus.
     * @param linkConnectionName - The link connection name
     * @param options - The options parameters.
     */
    async stop(linkConnectionName, options) {
        return tracing_js_1.tracingClient.withSpan("ArtifactsClient.stop", options !== null && options !== void 0 ? options : {}, async (updatedOptions) => {
            return this.client.sendOperationRequest({ linkConnectionName, updatedOptions }, stopOperationSpec);
        });
    }
    /**
     * Get the detailed status of a link connection
     * @param linkConnectionName - The link connection name
     * @param options - The options parameters.
     */
    async getDetailedStatus(linkConnectionName, options) {
        return tracing_js_1.tracingClient.withSpan("ArtifactsClient.getDetailedStatus", options !== null && options !== void 0 ? options : {}, async (updatedOptions) => {
            return this.client.sendOperationRequest({ linkConnectionName, updatedOptions }, getDetailedStatusOperationSpec);
        });
    }
    /**
     * List the link tables of a link connection
     * @param linkConnectionName - The link connection name
     * @param options - The options parameters.
     */
    async listLinkTables(linkConnectionName, options) {
        return tracing_js_1.tracingClient.withSpan("ArtifactsClient.listLinkTables", options !== null && options !== void 0 ? options : {}, async (updatedOptions) => {
            return this.client.sendOperationRequest({ linkConnectionName, updatedOptions }, listLinkTablesOperationSpec);
        });
    }
    /**
     * Query the link table status of a link connection
     * @param linkConnectionName - The link connection name
     * @param queryTableStatusRequest - Query table status request
     * @param options - The options parameters.
     */
    async queryTableStatus(linkConnectionName, queryTableStatusRequest, options) {
        return tracing_js_1.tracingClient.withSpan("ArtifactsClient.queryTableStatus", options !== null && options !== void 0 ? options : {}, async (updatedOptions) => {
            return this.client.sendOperationRequest({ linkConnectionName, queryTableStatusRequest, updatedOptions }, queryTableStatusOperationSpec);
        });
    }
    /**
     * Update landing zone credential of a link connection
     * @param linkConnectionName - The link connection name
     * @param updateLandingZoneCredentialRequest - update landing zone credential request
     * @param options - The options parameters.
     */
    async updateLandingZoneCredential(linkConnectionName, updateLandingZoneCredentialRequest, options) {
        return tracing_js_1.tracingClient.withSpan("ArtifactsClient.updateLandingZoneCredential", options !== null && options !== void 0 ? options : {}, async (updatedOptions) => {
            return this.client.sendOperationRequest({ linkConnectionName, updateLandingZoneCredentialRequest, updatedOptions }, updateLandingZoneCredentialOperationSpec);
        });
    }
    /**
     * Pause a link connection. It may take a few minutes from Pausing to Paused, monitor the status with
     * LinkConnection_GetDetailedStatus.
     * @param linkConnectionName - The link connection name
     * @param options - The options parameters.
     */
    async pause(linkConnectionName, options) {
        return tracing_js_1.tracingClient.withSpan("ArtifactsClient.pause", options !== null && options !== void 0 ? options : {}, async (updatedOptions) => {
            return this.client.sendOperationRequest({ linkConnectionName, updatedOptions }, pauseOperationSpec);
        });
    }
    /**
     * Resume a link connection. It may take a few minutes from Resuming to Running, monitor the status
     * with LinkConnection_GetDetailedStatus.
     * @param linkConnectionName - The link connection name
     * @param options - The options parameters.
     */
    async resume(linkConnectionName, options) {
        return tracing_js_1.tracingClient.withSpan("ArtifactsClient.resume", options !== null && options !== void 0 ? options : {}, async (updatedOptions) => {
            return this.client.sendOperationRequest({ linkConnectionName, updatedOptions }, resumeOperationSpec);
        });
    }
    /**
     * ListByWorkspaceNext
     * @param nextLink - The nextLink from the previous successful call to the ListByWorkspace method.
     * @param options - The options parameters.
     */
    async _listByWorkspaceNext(nextLink, options) {
        return tracing_js_1.tracingClient.withSpan("ArtifactsClient._listByWorkspaceNext", options !== null && options !== void 0 ? options : {}, async (updatedOptions) => {
            return this.client.sendOperationRequest({ nextLink, updatedOptions }, listByWorkspaceNextOperationSpec);
        });
    }
}
exports.LinkConnectionOperationsImpl = LinkConnectionOperationsImpl;
//# sourceMappingURL=linkConnectionOperations.js.map