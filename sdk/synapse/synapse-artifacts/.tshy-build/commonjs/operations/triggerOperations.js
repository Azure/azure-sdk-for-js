"use strict";
/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.TriggerOperationsImpl = void 0;
const tslib_1 = require("tslib");
const tracing_js_1 = require("../tracing.js");
const pagingHelper_js_1 = require("../pagingHelper.js");
const coreClient = tslib_1.__importStar(require("@azure/core-client"));
const Mappers = tslib_1.__importStar(require("../models/mappers.js"));
const Parameters = tslib_1.__importStar(require("../models/parameters.js"));
const core_lro_1 = require("@azure/core-lro");
const lroImpl_js_1 = require("../lroImpl.js");
// Operation Specifications
const serializer = coreClient.createSerializer(Mappers, /* isXml */ false);
const getTriggersByWorkspaceOperationSpec = {
    path: "/triggers",
    httpMethod: "GET",
    responses: {
        200: {
            bodyMapper: Mappers.TriggerListResponse,
        },
        default: {
            bodyMapper: Mappers.CloudError,
        },
    },
    queryParameters: [Parameters.apiVersion5],
    urlParameters: [Parameters.endpoint],
    headerParameters: [Parameters.accept],
    serializer,
};
const createOrUpdateTriggerOperationSpec = {
    path: "/triggers/{triggerName}",
    httpMethod: "PUT",
    responses: {
        200: {
            bodyMapper: Mappers.TriggerResource,
        },
        201: {
            bodyMapper: Mappers.TriggerResource,
        },
        202: {
            bodyMapper: Mappers.TriggerResource,
        },
        204: {
            bodyMapper: Mappers.TriggerResource,
        },
        default: {
            bodyMapper: Mappers.CloudError,
        },
    },
    requestBody: Parameters.trigger,
    queryParameters: [Parameters.apiVersion5],
    urlParameters: [Parameters.endpoint, Parameters.triggerName],
    headerParameters: [Parameters.accept, Parameters.contentType, Parameters.ifMatch],
    mediaType: "json",
    serializer,
};
const getTriggerOperationSpec = {
    path: "/triggers/{triggerName}",
    httpMethod: "GET",
    responses: {
        200: {
            bodyMapper: Mappers.TriggerResource,
        },
        304: {},
        default: {
            bodyMapper: Mappers.CloudError,
        },
    },
    queryParameters: [Parameters.apiVersion5],
    urlParameters: [Parameters.endpoint, Parameters.triggerName],
    headerParameters: [Parameters.accept, Parameters.ifNoneMatch],
    serializer,
};
const deleteTriggerOperationSpec = {
    path: "/triggers/{triggerName}",
    httpMethod: "DELETE",
    responses: {
        200: {},
        201: {},
        202: {},
        204: {},
        default: {
            bodyMapper: Mappers.CloudError,
        },
    },
    queryParameters: [Parameters.apiVersion5],
    urlParameters: [Parameters.endpoint, Parameters.triggerName],
    headerParameters: [Parameters.accept],
    serializer,
};
const subscribeTriggerToEventsOperationSpec = {
    path: "/triggers/{triggerName}/subscribeToEvents",
    httpMethod: "POST",
    responses: {
        200: {
            bodyMapper: Mappers.TriggerSubscriptionOperationStatus,
        },
        201: {
            bodyMapper: Mappers.TriggerSubscriptionOperationStatus,
        },
        202: {
            bodyMapper: Mappers.TriggerSubscriptionOperationStatus,
        },
        204: {
            bodyMapper: Mappers.TriggerSubscriptionOperationStatus,
        },
        default: {
            bodyMapper: Mappers.CloudError,
        },
    },
    queryParameters: [Parameters.apiVersion5],
    urlParameters: [Parameters.endpoint, Parameters.triggerName],
    headerParameters: [Parameters.accept],
    serializer,
};
const getEventSubscriptionStatusOperationSpec = {
    path: "/triggers/{triggerName}/getEventSubscriptionStatus",
    httpMethod: "POST",
    responses: {
        200: {
            bodyMapper: Mappers.TriggerSubscriptionOperationStatus,
        },
        default: {
            bodyMapper: Mappers.CloudError,
        },
    },
    queryParameters: [Parameters.apiVersion5],
    urlParameters: [Parameters.endpoint, Parameters.triggerName],
    headerParameters: [Parameters.accept],
    serializer,
};
const unsubscribeTriggerFromEventsOperationSpec = {
    path: "/triggers/{triggerName}/unsubscribeFromEvents",
    httpMethod: "POST",
    responses: {
        200: {
            bodyMapper: Mappers.TriggerSubscriptionOperationStatus,
        },
        201: {
            bodyMapper: Mappers.TriggerSubscriptionOperationStatus,
        },
        202: {
            bodyMapper: Mappers.TriggerSubscriptionOperationStatus,
        },
        204: {
            bodyMapper: Mappers.TriggerSubscriptionOperationStatus,
        },
        default: {
            bodyMapper: Mappers.CloudError,
        },
    },
    queryParameters: [Parameters.apiVersion5],
    urlParameters: [Parameters.endpoint, Parameters.triggerName],
    headerParameters: [Parameters.accept],
    serializer,
};
const startTriggerOperationSpec = {
    path: "/triggers/{triggerName}/start",
    httpMethod: "POST",
    responses: {
        200: {},
        201: {},
        202: {},
        204: {},
        default: {
            bodyMapper: Mappers.CloudError,
        },
    },
    queryParameters: [Parameters.apiVersion5],
    urlParameters: [Parameters.endpoint, Parameters.triggerName],
    headerParameters: [Parameters.accept],
    serializer,
};
const stopTriggerOperationSpec = {
    path: "/triggers/{triggerName}/stop",
    httpMethod: "POST",
    responses: {
        200: {},
        201: {},
        202: {},
        204: {},
        default: {
            bodyMapper: Mappers.CloudError,
        },
    },
    queryParameters: [Parameters.apiVersion5],
    urlParameters: [Parameters.endpoint, Parameters.triggerName],
    headerParameters: [Parameters.accept],
    serializer,
};
const getTriggersByWorkspaceNextOperationSpec = {
    path: "{nextLink}",
    httpMethod: "GET",
    responses: {
        200: {
            bodyMapper: Mappers.TriggerListResponse,
        },
        default: {
            bodyMapper: Mappers.CloudError,
        },
    },
    urlParameters: [Parameters.endpoint, Parameters.nextLink],
    headerParameters: [Parameters.accept],
    serializer,
};
/** Class containing TriggerOperations operations. */
class TriggerOperationsImpl {
    /**
     * Initialize a new instance of the class TriggerOperations class.
     * @param client - Reference to the service client
     */
    // eslint-disable-next-line @azure/azure-sdk/ts-use-interface-parameters
    constructor(client) {
        this.client = client;
    }
    /**
     * Lists triggers.
     * @param options - The options parameters.
     */
    listTriggersByWorkspace(options) {
        const iter = this.getTriggersByWorkspacePagingAll(options);
        return {
            next() {
                return iter.next();
            },
            [Symbol.asyncIterator]() {
                return this;
            },
            byPage: (settings) => {
                if (settings === null || settings === void 0 ? void 0 : settings.maxPageSize) {
                    throw new Error("maxPageSize is not supported by this operation.");
                }
                return this.getTriggersByWorkspacePagingPage(options, settings);
            },
        };
    }
    getTriggersByWorkspacePagingPage(options, settings) {
        return tslib_1.__asyncGenerator(this, arguments, function* getTriggersByWorkspacePagingPage_1() {
            let result;
            let continuationToken = settings === null || settings === void 0 ? void 0 : settings.continuationToken;
            if (!continuationToken) {
                result = yield tslib_1.__await(this._getTriggersByWorkspace(options));
                const page = result.value || [];
                continuationToken = result.nextLink;
                (0, pagingHelper_js_1.setContinuationToken)(page, continuationToken);
                yield yield tslib_1.__await(page);
            }
            while (continuationToken) {
                result = yield tslib_1.__await(this._getTriggersByWorkspaceNext(continuationToken, options));
                continuationToken = result.nextLink;
                const page = result.value || [];
                (0, pagingHelper_js_1.setContinuationToken)(page, continuationToken);
                yield yield tslib_1.__await(page);
            }
        });
    }
    getTriggersByWorkspacePagingAll(options) {
        return tslib_1.__asyncGenerator(this, arguments, function* getTriggersByWorkspacePagingAll_1() {
            var _a, e_1, _b, _c;
            try {
                for (var _d = true, _e = tslib_1.__asyncValues(this.getTriggersByWorkspacePagingPage(options)), _f; _f = yield tslib_1.__await(_e.next()), _a = _f.done, !_a; _d = true) {
                    _c = _f.value;
                    _d = false;
                    const page = _c;
                    yield tslib_1.__await(yield* tslib_1.__asyncDelegator(tslib_1.__asyncValues(page)));
                }
            }
            catch (e_1_1) { e_1 = { error: e_1_1 }; }
            finally {
                try {
                    if (!_d && !_a && (_b = _e.return)) yield tslib_1.__await(_b.call(_e));
                }
                finally { if (e_1) throw e_1.error; }
            }
        });
    }
    /**
     * Lists triggers.
     * @param options - The options parameters.
     */
    async _getTriggersByWorkspace(options) {
        return tracing_js_1.tracingClient.withSpan("ArtifactsClient._getTriggersByWorkspace", options !== null && options !== void 0 ? options : {}, async (updatedOptions) => {
            return this.client.sendOperationRequest({ updatedOptions }, getTriggersByWorkspaceOperationSpec);
        });
    }
    /**
     * Creates or updates a trigger.
     * @param triggerName - The trigger name.
     * @param trigger - Trigger resource definition.
     * @param options - The options parameters.
     */
    async beginCreateOrUpdateTrigger(triggerName, trigger, options) {
        const directSendOperation = async (args, spec) => {
            return tracing_js_1.tracingClient.withSpan("ArtifactsClient.beginCreateOrUpdateTrigger", options !== null && options !== void 0 ? options : {}, async () => {
                return this.client.sendOperationRequest(args, spec);
            });
        };
        const sendOperationFn = async (args, spec) => {
            var _a;
            let currentRawResponse = undefined;
            const providedCallback = (_a = args.options) === null || _a === void 0 ? void 0 : _a.onResponse;
            const callback = (rawResponse, flatResponse) => {
                currentRawResponse = rawResponse;
                providedCallback === null || providedCallback === void 0 ? void 0 : providedCallback(rawResponse, flatResponse);
            };
            const updatedArgs = Object.assign(Object.assign({}, args), { options: Object.assign(Object.assign({}, args.options), { onResponse: callback }) });
            const flatResponse = await directSendOperation(updatedArgs, spec);
            return {
                flatResponse,
                rawResponse: {
                    statusCode: currentRawResponse.status,
                    body: currentRawResponse.parsedBody,
                    headers: currentRawResponse.headers.toJSON(),
                },
            };
        };
        const lro = (0, lroImpl_js_1.createLroSpec)({
            sendOperationFn,
            args: { triggerName, trigger, options },
            spec: createOrUpdateTriggerOperationSpec,
        });
        const poller = await (0, core_lro_1.createHttpPoller)(lro, {
            restoreFrom: options === null || options === void 0 ? void 0 : options.resumeFrom,
            intervalInMs: options === null || options === void 0 ? void 0 : options.updateIntervalInMs,
        });
        await poller.poll();
        return poller;
    }
    /**
     * Creates or updates a trigger.
     * @param triggerName - The trigger name.
     * @param trigger - Trigger resource definition.
     * @param options - The options parameters.
     */
    async beginCreateOrUpdateTriggerAndWait(triggerName, trigger, options) {
        const poller = await this.beginCreateOrUpdateTrigger(triggerName, trigger, options);
        return poller.pollUntilDone();
    }
    /**
     * Gets a trigger.
     * @param triggerName - The trigger name.
     * @param options - The options parameters.
     */
    async getTrigger(triggerName, options) {
        return tracing_js_1.tracingClient.withSpan("ArtifactsClient.getTrigger", options !== null && options !== void 0 ? options : {}, async (updatedOptions) => {
            return this.client.sendOperationRequest({ triggerName, updatedOptions }, getTriggerOperationSpec);
        });
    }
    /**
     * Deletes a trigger.
     * @param triggerName - The trigger name.
     * @param options - The options parameters.
     */
    async beginDeleteTrigger(triggerName, options) {
        const directSendOperation = async (args, spec) => {
            return tracing_js_1.tracingClient.withSpan("ArtifactsClient.beginDeleteTrigger", options !== null && options !== void 0 ? options : {}, async () => {
                return this.client.sendOperationRequest(args, spec);
            });
        };
        const sendOperationFn = async (args, spec) => {
            var _a;
            let currentRawResponse = undefined;
            const providedCallback = (_a = args.options) === null || _a === void 0 ? void 0 : _a.onResponse;
            const callback = (rawResponse, flatResponse) => {
                currentRawResponse = rawResponse;
                providedCallback === null || providedCallback === void 0 ? void 0 : providedCallback(rawResponse, flatResponse);
            };
            const updatedArgs = Object.assign(Object.assign({}, args), { options: Object.assign(Object.assign({}, args.options), { onResponse: callback }) });
            const flatResponse = await directSendOperation(updatedArgs, spec);
            return {
                flatResponse,
                rawResponse: {
                    statusCode: currentRawResponse.status,
                    body: currentRawResponse.parsedBody,
                    headers: currentRawResponse.headers.toJSON(),
                },
            };
        };
        const lro = (0, lroImpl_js_1.createLroSpec)({
            sendOperationFn,
            args: { triggerName, options },
            spec: deleteTriggerOperationSpec,
        });
        const poller = await (0, core_lro_1.createHttpPoller)(lro, {
            restoreFrom: options === null || options === void 0 ? void 0 : options.resumeFrom,
            intervalInMs: options === null || options === void 0 ? void 0 : options.updateIntervalInMs,
        });
        await poller.poll();
        return poller;
    }
    /**
     * Deletes a trigger.
     * @param triggerName - The trigger name.
     * @param options - The options parameters.
     */
    async beginDeleteTriggerAndWait(triggerName, options) {
        const poller = await this.beginDeleteTrigger(triggerName, options);
        return poller.pollUntilDone();
    }
    /**
     * Subscribe event trigger to events.
     * @param triggerName - The trigger name.
     * @param options - The options parameters.
     */
    async beginSubscribeTriggerToEvents(triggerName, options) {
        const directSendOperation = async (args, spec) => {
            return tracing_js_1.tracingClient.withSpan("ArtifactsClient.beginSubscribeTriggerToEvents", options !== null && options !== void 0 ? options : {}, async () => {
                return this.client.sendOperationRequest(args, spec);
            });
        };
        const sendOperationFn = async (args, spec) => {
            var _a;
            let currentRawResponse = undefined;
            const providedCallback = (_a = args.options) === null || _a === void 0 ? void 0 : _a.onResponse;
            const callback = (rawResponse, flatResponse) => {
                currentRawResponse = rawResponse;
                providedCallback === null || providedCallback === void 0 ? void 0 : providedCallback(rawResponse, flatResponse);
            };
            const updatedArgs = Object.assign(Object.assign({}, args), { options: Object.assign(Object.assign({}, args.options), { onResponse: callback }) });
            const flatResponse = await directSendOperation(updatedArgs, spec);
            return {
                flatResponse,
                rawResponse: {
                    statusCode: currentRawResponse.status,
                    body: currentRawResponse.parsedBody,
                    headers: currentRawResponse.headers.toJSON(),
                },
            };
        };
        const lro = (0, lroImpl_js_1.createLroSpec)({
            sendOperationFn,
            args: { triggerName, options },
            spec: subscribeTriggerToEventsOperationSpec,
        });
        const poller = await (0, core_lro_1.createHttpPoller)(lro, {
            restoreFrom: options === null || options === void 0 ? void 0 : options.resumeFrom,
            intervalInMs: options === null || options === void 0 ? void 0 : options.updateIntervalInMs,
        });
        await poller.poll();
        return poller;
    }
    /**
     * Subscribe event trigger to events.
     * @param triggerName - The trigger name.
     * @param options - The options parameters.
     */
    async beginSubscribeTriggerToEventsAndWait(triggerName, options) {
        const poller = await this.beginSubscribeTriggerToEvents(triggerName, options);
        return poller.pollUntilDone();
    }
    /**
     * Get a trigger's event subscription status.
     * @param triggerName - The trigger name.
     * @param options - The options parameters.
     */
    async getEventSubscriptionStatus(triggerName, options) {
        return tracing_js_1.tracingClient.withSpan("ArtifactsClient.getEventSubscriptionStatus", options !== null && options !== void 0 ? options : {}, async (updatedOptions) => {
            return this.client.sendOperationRequest({ triggerName, updatedOptions }, getEventSubscriptionStatusOperationSpec);
        });
    }
    /**
     * Unsubscribe event trigger from events.
     * @param triggerName - The trigger name.
     * @param options - The options parameters.
     */
    async beginUnsubscribeTriggerFromEvents(triggerName, options) {
        const directSendOperation = async (args, spec) => {
            return tracing_js_1.tracingClient.withSpan("ArtifactsClient.beginUnsubscribeTriggerFromEvents", options !== null && options !== void 0 ? options : {}, async () => {
                return this.client.sendOperationRequest(args, spec);
            });
        };
        const sendOperationFn = async (args, spec) => {
            var _a;
            let currentRawResponse = undefined;
            const providedCallback = (_a = args.options) === null || _a === void 0 ? void 0 : _a.onResponse;
            const callback = (rawResponse, flatResponse) => {
                currentRawResponse = rawResponse;
                providedCallback === null || providedCallback === void 0 ? void 0 : providedCallback(rawResponse, flatResponse);
            };
            const updatedArgs = Object.assign(Object.assign({}, args), { options: Object.assign(Object.assign({}, args.options), { onResponse: callback }) });
            const flatResponse = await directSendOperation(updatedArgs, spec);
            return {
                flatResponse,
                rawResponse: {
                    statusCode: currentRawResponse.status,
                    body: currentRawResponse.parsedBody,
                    headers: currentRawResponse.headers.toJSON(),
                },
            };
        };
        const lro = (0, lroImpl_js_1.createLroSpec)({
            sendOperationFn,
            args: { triggerName, options },
            spec: unsubscribeTriggerFromEventsOperationSpec,
        });
        const poller = await (0, core_lro_1.createHttpPoller)(lro, {
            restoreFrom: options === null || options === void 0 ? void 0 : options.resumeFrom,
            intervalInMs: options === null || options === void 0 ? void 0 : options.updateIntervalInMs,
        });
        await poller.poll();
        return poller;
    }
    /**
     * Unsubscribe event trigger from events.
     * @param triggerName - The trigger name.
     * @param options - The options parameters.
     */
    async beginUnsubscribeTriggerFromEventsAndWait(triggerName, options) {
        const poller = await this.beginUnsubscribeTriggerFromEvents(triggerName, options);
        return poller.pollUntilDone();
    }
    /**
     * Starts a trigger.
     * @param triggerName - The trigger name.
     * @param options - The options parameters.
     */
    async beginStartTrigger(triggerName, options) {
        const directSendOperation = async (args, spec) => {
            return tracing_js_1.tracingClient.withSpan("ArtifactsClient.beginStartTrigger", options !== null && options !== void 0 ? options : {}, async () => {
                return this.client.sendOperationRequest(args, spec);
            });
        };
        const sendOperationFn = async (args, spec) => {
            var _a;
            let currentRawResponse = undefined;
            const providedCallback = (_a = args.options) === null || _a === void 0 ? void 0 : _a.onResponse;
            const callback = (rawResponse, flatResponse) => {
                currentRawResponse = rawResponse;
                providedCallback === null || providedCallback === void 0 ? void 0 : providedCallback(rawResponse, flatResponse);
            };
            const updatedArgs = Object.assign(Object.assign({}, args), { options: Object.assign(Object.assign({}, args.options), { onResponse: callback }) });
            const flatResponse = await directSendOperation(updatedArgs, spec);
            return {
                flatResponse,
                rawResponse: {
                    statusCode: currentRawResponse.status,
                    body: currentRawResponse.parsedBody,
                    headers: currentRawResponse.headers.toJSON(),
                },
            };
        };
        const lro = (0, lroImpl_js_1.createLroSpec)({
            sendOperationFn,
            args: { triggerName, options },
            spec: startTriggerOperationSpec,
        });
        const poller = await (0, core_lro_1.createHttpPoller)(lro, {
            restoreFrom: options === null || options === void 0 ? void 0 : options.resumeFrom,
            intervalInMs: options === null || options === void 0 ? void 0 : options.updateIntervalInMs,
        });
        await poller.poll();
        return poller;
    }
    /**
     * Starts a trigger.
     * @param triggerName - The trigger name.
     * @param options - The options parameters.
     */
    async beginStartTriggerAndWait(triggerName, options) {
        const poller = await this.beginStartTrigger(triggerName, options);
        return poller.pollUntilDone();
    }
    /**
     * Stops a trigger.
     * @param triggerName - The trigger name.
     * @param options - The options parameters.
     */
    async beginStopTrigger(triggerName, options) {
        const directSendOperation = async (args, spec) => {
            return tracing_js_1.tracingClient.withSpan("ArtifactsClient.beginStopTrigger", options !== null && options !== void 0 ? options : {}, async () => {
                return this.client.sendOperationRequest(args, spec);
            });
        };
        const sendOperationFn = async (args, spec) => {
            var _a;
            let currentRawResponse = undefined;
            const providedCallback = (_a = args.options) === null || _a === void 0 ? void 0 : _a.onResponse;
            const callback = (rawResponse, flatResponse) => {
                currentRawResponse = rawResponse;
                providedCallback === null || providedCallback === void 0 ? void 0 : providedCallback(rawResponse, flatResponse);
            };
            const updatedArgs = Object.assign(Object.assign({}, args), { options: Object.assign(Object.assign({}, args.options), { onResponse: callback }) });
            const flatResponse = await directSendOperation(updatedArgs, spec);
            return {
                flatResponse,
                rawResponse: {
                    statusCode: currentRawResponse.status,
                    body: currentRawResponse.parsedBody,
                    headers: currentRawResponse.headers.toJSON(),
                },
            };
        };
        const lro = (0, lroImpl_js_1.createLroSpec)({
            sendOperationFn,
            args: { triggerName, options },
            spec: stopTriggerOperationSpec,
        });
        const poller = await (0, core_lro_1.createHttpPoller)(lro, {
            restoreFrom: options === null || options === void 0 ? void 0 : options.resumeFrom,
            intervalInMs: options === null || options === void 0 ? void 0 : options.updateIntervalInMs,
        });
        await poller.poll();
        return poller;
    }
    /**
     * Stops a trigger.
     * @param triggerName - The trigger name.
     * @param options - The options parameters.
     */
    async beginStopTriggerAndWait(triggerName, options) {
        const poller = await this.beginStopTrigger(triggerName, options);
        return poller.pollUntilDone();
    }
    /**
     * GetTriggersByWorkspaceNext
     * @param nextLink - The nextLink from the previous successful call to the GetTriggersByWorkspace method.
     * @param options - The options parameters.
     */
    async _getTriggersByWorkspaceNext(nextLink, options) {
        return tracing_js_1.tracingClient.withSpan("ArtifactsClient._getTriggersByWorkspaceNext", options !== null && options !== void 0 ? options : {}, async (updatedOptions) => {
            return this.client.sendOperationRequest({ nextLink, updatedOptions }, getTriggersByWorkspaceNextOperationSpec);
        });
    }
}
exports.TriggerOperationsImpl = TriggerOperationsImpl;
//# sourceMappingURL=triggerOperations.js.map