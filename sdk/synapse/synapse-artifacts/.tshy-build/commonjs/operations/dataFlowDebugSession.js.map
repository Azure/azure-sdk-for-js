{"version":3,"file":"dataFlowDebugSession.js","sourceRoot":"","sources":["../../../src/operations/dataFlowDebugSession.ts"],"names":[],"mappings":"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","sourcesContent":["/*\n * Copyright (c) Microsoft Corporation.\n * Licensed under the MIT License.\n *\n * Code generated by Microsoft (R) AutoRest Code Generator.\n * Changes may cause incorrect behavior and will be lost if the code is regenerated.\n */\n\nimport { tracingClient } from \"../tracing.js\";\nimport type { PagedAsyncIterableIterator, PageSettings } from \"@azure/core-paging\";\nimport { setContinuationToken } from \"../pagingHelper.js\";\nimport type { DataFlowDebugSession } from \"../operationsInterfaces/index.js\";\nimport * as coreClient from \"@azure/core-client\";\nimport * as Mappers from \"../models/mappers.js\";\nimport * as Parameters from \"../models/parameters.js\";\nimport type { ArtifactsClient } from \"../artifactsClient.js\";\nimport type { SimplePollerLike, OperationState } from \"@azure/core-lro\";\nimport { createHttpPoller } from \"@azure/core-lro\";\nimport { createLroSpec } from \"../lroImpl.js\";\nimport type {\n  DataFlowDebugSessionInfo,\n  DataFlowDebugSessionQueryDataFlowDebugSessionsByWorkspaceNextOptionalParams,\n  DataFlowDebugSessionQueryDataFlowDebugSessionsByWorkspaceOptionalParams,\n  DataFlowDebugSessionQueryDataFlowDebugSessionsByWorkspaceResponse,\n  CreateDataFlowDebugSessionRequest,\n  DataFlowDebugSessionCreateDataFlowDebugSessionOptionalParams,\n  DataFlowDebugSessionCreateDataFlowDebugSessionResponse,\n  DataFlowDebugPackage,\n  DataFlowDebugSessionAddDataFlowOptionalParams,\n  DataFlowDebugSessionAddDataFlowResponse,\n  DeleteDataFlowDebugSessionRequest,\n  DataFlowDebugSessionDeleteDataFlowDebugSessionOptionalParams,\n  DataFlowDebugCommandRequest,\n  DataFlowDebugSessionExecuteCommandOptionalParams,\n  DataFlowDebugSessionExecuteCommandResponse,\n  DataFlowDebugSessionQueryDataFlowDebugSessionsByWorkspaceNextResponse,\n  DataFlowDebugCommandResponse,\n} from \"../models/index.js\";\nimport type { RawHttpHeaders } from \"@azure/core-rest-pipeline\";\n\n// Operation Specifications\nconst serializer = coreClient.createSerializer(Mappers, /* isXml */ false);\n\nconst createDataFlowDebugSessionOperationSpec: coreClient.OperationSpec = {\n  path: \"/createDataFlowDebugSession\",\n  httpMethod: \"POST\",\n  responses: {\n    200: {\n      bodyMapper: Mappers.CreateDataFlowDebugSessionResponse,\n    },\n    201: {\n      bodyMapper: Mappers.CreateDataFlowDebugSessionResponse,\n    },\n    202: {\n      bodyMapper: Mappers.CreateDataFlowDebugSessionResponse,\n    },\n    204: {\n      bodyMapper: Mappers.CreateDataFlowDebugSessionResponse,\n    },\n    default: {\n      bodyMapper: Mappers.CloudError,\n    },\n  },\n  requestBody: Parameters.request1,\n  queryParameters: [Parameters.apiVersion5],\n  urlParameters: [Parameters.endpoint],\n  headerParameters: [Parameters.accept, Parameters.contentType],\n  mediaType: \"json\",\n  serializer,\n};\nconst queryDataFlowDebugSessionsByWorkspaceOperationSpec: coreClient.OperationSpec = {\n  path: \"/queryDataFlowDebugSessions\",\n  httpMethod: \"POST\",\n  responses: {\n    200: {\n      bodyMapper: Mappers.QueryDataFlowDebugSessionsResponse,\n    },\n    default: {\n      bodyMapper: Mappers.CloudError,\n    },\n  },\n  queryParameters: [Parameters.apiVersion5],\n  urlParameters: [Parameters.endpoint],\n  headerParameters: [Parameters.accept],\n  serializer,\n};\nconst addDataFlowOperationSpec: coreClient.OperationSpec = {\n  path: \"/addDataFlowToDebugSession\",\n  httpMethod: \"POST\",\n  responses: {\n    200: {\n      bodyMapper: Mappers.AddDataFlowToDebugSessionResponse,\n    },\n    default: {\n      bodyMapper: Mappers.CloudError,\n    },\n  },\n  requestBody: Parameters.request2,\n  queryParameters: [Parameters.apiVersion5],\n  urlParameters: [Parameters.endpoint],\n  headerParameters: [Parameters.accept, Parameters.contentType],\n  mediaType: \"json\",\n  serializer,\n};\nconst deleteDataFlowDebugSessionOperationSpec: coreClient.OperationSpec = {\n  path: \"/deleteDataFlowDebugSession\",\n  httpMethod: \"POST\",\n  responses: {\n    200: {},\n    default: {\n      bodyMapper: Mappers.CloudError,\n    },\n  },\n  requestBody: Parameters.request3,\n  queryParameters: [Parameters.apiVersion5],\n  urlParameters: [Parameters.endpoint],\n  headerParameters: [Parameters.accept, Parameters.contentType],\n  mediaType: \"json\",\n  serializer,\n};\nconst executeCommandOperationSpec: coreClient.OperationSpec = {\n  path: \"/executeDataFlowDebugCommand\",\n  httpMethod: \"POST\",\n  responses: {\n    200: {\n      bodyMapper: Mappers.DataFlowDebugCommandResponse,\n    },\n    201: {\n      bodyMapper: Mappers.DataFlowDebugCommandResponse,\n    },\n    202: {\n      bodyMapper: Mappers.DataFlowDebugCommandResponse,\n    },\n    204: {\n      bodyMapper: Mappers.DataFlowDebugCommandResponse,\n    },\n    default: {\n      bodyMapper: Mappers.CloudError,\n    },\n  },\n  requestBody: Parameters.request4,\n  queryParameters: [Parameters.apiVersion5],\n  urlParameters: [Parameters.endpoint],\n  headerParameters: [Parameters.accept, Parameters.contentType],\n  mediaType: \"json\",\n  serializer,\n};\nconst queryDataFlowDebugSessionsByWorkspaceNextOperationSpec: coreClient.OperationSpec = {\n  path: \"{nextLink}\",\n  httpMethod: \"GET\",\n  responses: {\n    200: {\n      bodyMapper: Mappers.QueryDataFlowDebugSessionsResponse,\n    },\n    default: {\n      bodyMapper: Mappers.CloudError,\n    },\n  },\n  urlParameters: [Parameters.endpoint, Parameters.nextLink],\n  headerParameters: [Parameters.accept],\n  serializer,\n};\n\n/** Class containing DataFlowDebugSession operations. */\nexport class DataFlowDebugSessionImpl implements DataFlowDebugSession {\n  private readonly client: ArtifactsClient;\n\n  /**\n   * Initialize a new instance of the class DataFlowDebugSession class.\n   * @param client - Reference to the service client\n   */\n  constructor(client: ArtifactsClient) {\n    this.client = client;\n  }\n\n  /**\n   * Query all active data flow debug sessions.\n   * @param options - The options parameters.\n   */\n  public listQueryDataFlowDebugSessionsByWorkspace(\n    options?: DataFlowDebugSessionQueryDataFlowDebugSessionsByWorkspaceOptionalParams,\n  ): PagedAsyncIterableIterator<DataFlowDebugSessionInfo> {\n    const iter = this.queryDataFlowDebugSessionsByWorkspacePagingAll(options);\n    return {\n      next() {\n        return iter.next();\n      },\n      [Symbol.asyncIterator]() {\n        return this;\n      },\n      byPage: (settings?: PageSettings) => {\n        if (settings?.maxPageSize) {\n          throw new Error(\"maxPageSize is not supported by this operation.\");\n        }\n        return this.queryDataFlowDebugSessionsByWorkspacePagingPage(options, settings);\n      },\n    };\n  }\n\n  private async *queryDataFlowDebugSessionsByWorkspacePagingPage(\n    options?: DataFlowDebugSessionQueryDataFlowDebugSessionsByWorkspaceOptionalParams,\n    settings?: PageSettings,\n  ): AsyncIterableIterator<DataFlowDebugSessionInfo[]> {\n    let result: DataFlowDebugSessionQueryDataFlowDebugSessionsByWorkspaceResponse;\n    let continuationToken = settings?.continuationToken;\n    if (!continuationToken) {\n      result = await this._queryDataFlowDebugSessionsByWorkspace(options);\n      const page = result.value || [];\n      continuationToken = result.nextLink;\n      setContinuationToken(page, continuationToken);\n      yield page;\n    }\n    while (continuationToken) {\n      result = await this._queryDataFlowDebugSessionsByWorkspaceNext(continuationToken, options);\n      continuationToken = result.nextLink;\n      const page = result.value || [];\n      setContinuationToken(page, continuationToken);\n      yield page;\n    }\n  }\n\n  private async *queryDataFlowDebugSessionsByWorkspacePagingAll(\n    options?: DataFlowDebugSessionQueryDataFlowDebugSessionsByWorkspaceOptionalParams,\n  ): AsyncIterableIterator<DataFlowDebugSessionInfo> {\n    for await (const page of this.queryDataFlowDebugSessionsByWorkspacePagingPage(options)) {\n      yield* page;\n    }\n  }\n\n  /**\n   * Creates a data flow debug session.\n   * @param request - Data flow debug session definition\n   * @param options - The options parameters.\n   */\n  async beginCreateDataFlowDebugSession(\n    request: CreateDataFlowDebugSessionRequest,\n    options?: DataFlowDebugSessionCreateDataFlowDebugSessionOptionalParams,\n  ): Promise<\n    SimplePollerLike<\n      OperationState<DataFlowDebugSessionCreateDataFlowDebugSessionResponse>,\n      DataFlowDebugSessionCreateDataFlowDebugSessionResponse\n    >\n  > {\n    const directSendOperation = async (\n      args: coreClient.OperationArguments,\n      spec: coreClient.OperationSpec,\n    ): Promise<DataFlowDebugSessionCreateDataFlowDebugSessionResponse> => {\n      return tracingClient.withSpan(\n        \"ArtifactsClient.beginCreateDataFlowDebugSession\",\n        options ?? {},\n        async () => {\n          return this.client.sendOperationRequest(\n            args,\n            spec,\n          ) as Promise<DataFlowDebugSessionCreateDataFlowDebugSessionResponse>;\n        },\n      );\n    };\n    const sendOperationFn = async (\n      args: coreClient.OperationArguments,\n      spec: coreClient.OperationSpec,\n    ) => {\n      let currentRawResponse: coreClient.FullOperationResponse | undefined = undefined;\n      const providedCallback = args.options?.onResponse;\n      const callback: coreClient.RawResponseCallback = (\n        rawResponse: coreClient.FullOperationResponse,\n        flatResponse: unknown,\n      ) => {\n        currentRawResponse = rawResponse;\n        providedCallback?.(rawResponse, flatResponse);\n      };\n      const updatedArgs = {\n        ...args,\n        options: {\n          ...args.options,\n          onResponse: callback,\n        },\n      };\n      const flatResponse = await directSendOperation(updatedArgs, spec);\n      return {\n        flatResponse,\n        rawResponse: {\n          statusCode: currentRawResponse!.status,\n          body: currentRawResponse!.parsedBody,\n          headers: currentRawResponse!.headers.toJSON(),\n        },\n      };\n    };\n\n    const lro = createLroSpec({\n      sendOperationFn,\n      args: { request, options },\n      spec: createDataFlowDebugSessionOperationSpec,\n    });\n    const poller = await createHttpPoller<\n      DataFlowDebugSessionCreateDataFlowDebugSessionResponse,\n      OperationState<DataFlowDebugSessionCreateDataFlowDebugSessionResponse>\n    >(lro, {\n      restoreFrom: options?.resumeFrom,\n      intervalInMs: options?.updateIntervalInMs,\n    });\n    await poller.poll();\n    return poller;\n  }\n\n  /**\n   * Creates a data flow debug session.\n   * @param request - Data flow debug session definition\n   * @param options - The options parameters.\n   */\n  async beginCreateDataFlowDebugSessionAndWait(\n    request: CreateDataFlowDebugSessionRequest,\n    options?: DataFlowDebugSessionCreateDataFlowDebugSessionOptionalParams,\n  ): Promise<DataFlowDebugSessionCreateDataFlowDebugSessionResponse> {\n    const poller = await this.beginCreateDataFlowDebugSession(request, options);\n    return poller.pollUntilDone();\n  }\n\n  /**\n   * Query all active data flow debug sessions.\n   * @param options - The options parameters.\n   */\n  private async _queryDataFlowDebugSessionsByWorkspace(\n    options?: DataFlowDebugSessionQueryDataFlowDebugSessionsByWorkspaceOptionalParams,\n  ): Promise<DataFlowDebugSessionQueryDataFlowDebugSessionsByWorkspaceResponse> {\n    return tracingClient.withSpan(\n      \"ArtifactsClient._queryDataFlowDebugSessionsByWorkspace\",\n      options ?? {},\n      async (updatedOptions) => {\n        return this.client.sendOperationRequest(\n          { updatedOptions },\n          queryDataFlowDebugSessionsByWorkspaceOperationSpec,\n        ) as Promise<DataFlowDebugSessionQueryDataFlowDebugSessionsByWorkspaceResponse>;\n      },\n    );\n  }\n\n  /**\n   * Add a data flow into debug session.\n   * @param request - Data flow debug session definition with debug content.\n   * @param options - The options parameters.\n   */\n  async addDataFlow(\n    request: DataFlowDebugPackage,\n    options?: DataFlowDebugSessionAddDataFlowOptionalParams,\n  ): Promise<DataFlowDebugSessionAddDataFlowResponse> {\n    return tracingClient.withSpan(\n      \"ArtifactsClient.addDataFlow\",\n      options ?? {},\n      async (updatedOptions) => {\n        return this.client.sendOperationRequest(\n          { request, updatedOptions },\n          addDataFlowOperationSpec,\n        ) as Promise<DataFlowDebugSessionAddDataFlowResponse>;\n      },\n    );\n  }\n\n  /**\n   * Deletes a data flow debug session.\n   * @param request - Data flow debug session definition for deletion\n   * @param options - The options parameters.\n   */\n  async deleteDataFlowDebugSession(\n    request: DeleteDataFlowDebugSessionRequest,\n    options?: DataFlowDebugSessionDeleteDataFlowDebugSessionOptionalParams,\n  ): Promise<void> {\n    return tracingClient.withSpan(\n      \"ArtifactsClient.deleteDataFlowDebugSession\",\n      options ?? {},\n      async (updatedOptions) => {\n        return this.client.sendOperationRequest(\n          { request, updatedOptions },\n          deleteDataFlowDebugSessionOperationSpec,\n        ) as Promise<void>;\n      },\n    );\n  }\n\n  /**\n   * Execute a data flow debug command.\n   * @param request - Data flow debug command definition.\n   * @param options - The options parameters.\n   */\n  async beginExecuteCommand(\n    request: DataFlowDebugCommandRequest,\n    options?: DataFlowDebugSessionExecuteCommandOptionalParams,\n  ): Promise<\n    SimplePollerLike<\n      OperationState<DataFlowDebugSessionExecuteCommandResponse>,\n      DataFlowDebugSessionExecuteCommandResponse\n    >\n  > {\n    const directSendOperation = async (\n      args: coreClient.OperationArguments,\n      spec: coreClient.OperationSpec,\n    ): Promise<DataFlowDebugSessionExecuteCommandResponse> => {\n      return tracingClient.withSpan(\n        \"ArtifactsClient.beginExecuteCommand\",\n        options ?? {},\n        async () => {\n          return this.client.sendOperationRequest(\n            args,\n            spec,\n          ) as Promise<DataFlowDebugSessionExecuteCommandResponse>;\n        },\n      );\n    };\n    const sendOperationFn = async (\n      args: coreClient.OperationArguments,\n      spec: coreClient.OperationSpec,\n    ): Promise<{\n      flatResponse: DataFlowDebugCommandResponse;\n      rawResponse: {\n        statusCode: number;\n        body: any;\n        headers: RawHttpHeaders;\n      };\n    }> => {\n      let currentRawResponse: coreClient.FullOperationResponse | undefined = undefined;\n      const providedCallback = args.options?.onResponse;\n      const callback: coreClient.RawResponseCallback = (\n        rawResponse: coreClient.FullOperationResponse,\n        flatResponse: unknown,\n      ) => {\n        currentRawResponse = rawResponse;\n        providedCallback?.(rawResponse, flatResponse);\n      };\n      const updatedArgs = {\n        ...args,\n        options: {\n          ...args.options,\n          onResponse: callback,\n        },\n      };\n      const flatResponse = await directSendOperation(updatedArgs, spec);\n      return {\n        flatResponse,\n        rawResponse: {\n          statusCode: currentRawResponse!.status,\n          body: currentRawResponse!.parsedBody,\n          headers: currentRawResponse!.headers.toJSON(),\n        },\n      };\n    };\n\n    const lro = createLroSpec({\n      sendOperationFn,\n      args: { request, options },\n      spec: executeCommandOperationSpec,\n    });\n    const poller = await createHttpPoller<\n      DataFlowDebugSessionExecuteCommandResponse,\n      OperationState<DataFlowDebugSessionExecuteCommandResponse>\n    >(lro, {\n      restoreFrom: options?.resumeFrom,\n      intervalInMs: options?.updateIntervalInMs,\n    });\n    await poller.poll();\n    return poller;\n  }\n\n  /**\n   * Execute a data flow debug command.\n   * @param request - Data flow debug command definition.\n   * @param options - The options parameters.\n   */\n  async beginExecuteCommandAndWait(\n    request: DataFlowDebugCommandRequest,\n    options?: DataFlowDebugSessionExecuteCommandOptionalParams,\n  ): Promise<DataFlowDebugSessionExecuteCommandResponse> {\n    const poller = await this.beginExecuteCommand(request, options);\n    return poller.pollUntilDone();\n  }\n\n  /**\n   * QueryDataFlowDebugSessionsByWorkspaceNext\n   * @param nextLink - The nextLink from the previous successful call to the\n   *                 QueryDataFlowDebugSessionsByWorkspace method.\n   * @param options - The options parameters.\n   */\n  private async _queryDataFlowDebugSessionsByWorkspaceNext(\n    nextLink: string,\n    options?: DataFlowDebugSessionQueryDataFlowDebugSessionsByWorkspaceNextOptionalParams,\n  ): Promise<DataFlowDebugSessionQueryDataFlowDebugSessionsByWorkspaceNextResponse> {\n    return tracingClient.withSpan(\n      \"ArtifactsClient._queryDataFlowDebugSessionsByWorkspaceNext\",\n      options ?? {},\n      async (updatedOptions) => {\n        return this.client.sendOperationRequest(\n          { nextLink, updatedOptions },\n          queryDataFlowDebugSessionsByWorkspaceNextOperationSpec,\n        ) as Promise<DataFlowDebugSessionQueryDataFlowDebugSessionsByWorkspaceNextResponse>;\n      },\n    );\n  }\n}\n"]}