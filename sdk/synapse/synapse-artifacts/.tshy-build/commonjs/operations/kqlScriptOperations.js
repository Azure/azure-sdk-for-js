"use strict";
/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.KqlScriptOperationsImpl = void 0;
const tslib_1 = require("tslib");
const tracing_js_1 = require("../tracing.js");
const coreClient = tslib_1.__importStar(require("@azure/core-client"));
const Mappers = tslib_1.__importStar(require("../models/mappers.js"));
const Parameters = tslib_1.__importStar(require("../models/parameters.js"));
const core_lro_1 = require("@azure/core-lro");
const lroImpl_js_1 = require("../lroImpl.js");
// Operation Specifications
const serializer = coreClient.createSerializer(Mappers, /* isXml */ false);
const createOrUpdateOperationSpec = {
    path: "/kqlScripts/{kqlScriptName}",
    httpMethod: "PUT",
    responses: {
        200: {
            bodyMapper: Mappers.KqlScriptResource,
        },
        201: {
            bodyMapper: Mappers.KqlScriptResource,
        },
        202: {
            bodyMapper: Mappers.KqlScriptResource,
        },
        204: {
            bodyMapper: Mappers.KqlScriptResource,
        },
        default: {
            bodyMapper: Mappers.ErrorContract,
        },
    },
    requestBody: Parameters.kqlScript,
    queryParameters: [Parameters.apiVersion2],
    urlParameters: [Parameters.endpoint, Parameters.kqlScriptName],
    headerParameters: [Parameters.accept, Parameters.contentType],
    mediaType: "json",
    serializer,
};
const getByNameOperationSpec = {
    path: "/kqlScripts/{kqlScriptName}",
    httpMethod: "GET",
    responses: {
        200: {
            bodyMapper: Mappers.KqlScriptResource,
        },
        default: {
            bodyMapper: Mappers.ErrorContract,
        },
    },
    queryParameters: [Parameters.apiVersion2],
    urlParameters: [Parameters.endpoint, Parameters.kqlScriptName],
    headerParameters: [Parameters.accept],
    serializer,
};
const deleteByNameOperationSpec = {
    path: "/kqlScripts/{kqlScriptName}",
    httpMethod: "DELETE",
    responses: {
        200: {},
        201: {},
        202: {},
        204: {},
        default: {
            bodyMapper: Mappers.ErrorContract,
        },
    },
    queryParameters: [Parameters.apiVersion2],
    urlParameters: [Parameters.endpoint, Parameters.kqlScriptName],
    headerParameters: [Parameters.accept],
    serializer,
};
const renameOperationSpec = {
    path: "/kqlScripts/{kqlScriptName}/rename",
    httpMethod: "POST",
    responses: {
        200: {},
        201: {},
        202: {},
        204: {},
        default: {
            bodyMapper: Mappers.ErrorContract,
        },
    },
    requestBody: Parameters.renameRequest,
    queryParameters: [Parameters.apiVersion2],
    urlParameters: [Parameters.endpoint, Parameters.kqlScriptName],
    headerParameters: [Parameters.accept, Parameters.contentType],
    mediaType: "json",
    serializer,
};
/** Class containing KqlScriptOperations operations. */
class KqlScriptOperationsImpl {
    /**
     * Initialize a new instance of the class KqlScriptOperations class.
     * @param client - Reference to the service client
     */
    constructor(client) {
        this.client = client;
    }
    /**
     * Creates or updates a KQL Script
     * @param kqlScriptName - KQL script name
     * @param kqlScript - KQL script
     * @param options - The options parameters.
     */
    async beginCreateOrUpdate(kqlScriptName, kqlScript, options) {
        const directSendOperation = async (args, spec) => {
            return tracing_js_1.tracingClient.withSpan("ArtifactsClient.beginCreateOrUpdate", options !== null && options !== void 0 ? options : {}, async () => {
                return this.client.sendOperationRequest(args, spec);
            });
        };
        const sendOperationFn = async (args, spec) => {
            var _a;
            let currentRawResponse = undefined;
            const providedCallback = (_a = args.options) === null || _a === void 0 ? void 0 : _a.onResponse;
            const callback = (rawResponse, flatResponse) => {
                currentRawResponse = rawResponse;
                providedCallback === null || providedCallback === void 0 ? void 0 : providedCallback(rawResponse, flatResponse);
            };
            const updatedArgs = Object.assign(Object.assign({}, args), { options: Object.assign(Object.assign({}, args.options), { onResponse: callback }) });
            const flatResponse = await directSendOperation(updatedArgs, spec);
            return {
                flatResponse,
                rawResponse: {
                    statusCode: currentRawResponse.status,
                    body: currentRawResponse.parsedBody,
                    headers: currentRawResponse.headers.toJSON(),
                },
            };
        };
        const lro = (0, lroImpl_js_1.createLroSpec)({
            sendOperationFn,
            args: { kqlScriptName, kqlScript, options },
            spec: createOrUpdateOperationSpec,
        });
        const poller = await (0, core_lro_1.createHttpPoller)(lro, {
            restoreFrom: options === null || options === void 0 ? void 0 : options.resumeFrom,
            intervalInMs: options === null || options === void 0 ? void 0 : options.updateIntervalInMs,
        });
        await poller.poll();
        return poller;
    }
    /**
     * Creates or updates a KQL Script
     * @param kqlScriptName - KQL script name
     * @param kqlScript - KQL script
     * @param options - The options parameters.
     */
    async beginCreateOrUpdateAndWait(kqlScriptName, kqlScript, options) {
        const poller = await this.beginCreateOrUpdate(kqlScriptName, kqlScript, options);
        return poller.pollUntilDone();
    }
    /**
     * Get KQL script by name
     * @param kqlScriptName - KQL script name
     * @param options - The options parameters.
     */
    async getByName(kqlScriptName, options) {
        return tracing_js_1.tracingClient.withSpan("ArtifactsClient.getByName", options !== null && options !== void 0 ? options : {}, async (updatedOptions) => {
            return this.client.sendOperationRequest({ kqlScriptName, updatedOptions }, getByNameOperationSpec);
        });
    }
    /**
     * Delete KQL script by name
     * @param kqlScriptName - KQL script name
     * @param options - The options parameters.
     */
    async beginDeleteByName(kqlScriptName, options) {
        const directSendOperation = async (args, spec) => {
            return tracing_js_1.tracingClient.withSpan("ArtifactsClient.beginDeleteByName", options !== null && options !== void 0 ? options : {}, async () => {
                return this.client.sendOperationRequest(args, spec);
            });
        };
        const sendOperationFn = async (args, spec) => {
            var _a;
            let currentRawResponse = undefined;
            const providedCallback = (_a = args.options) === null || _a === void 0 ? void 0 : _a.onResponse;
            const callback = (rawResponse, flatResponse) => {
                currentRawResponse = rawResponse;
                providedCallback === null || providedCallback === void 0 ? void 0 : providedCallback(rawResponse, flatResponse);
            };
            const updatedArgs = Object.assign(Object.assign({}, args), { options: Object.assign(Object.assign({}, args.options), { onResponse: callback }) });
            const flatResponse = await directSendOperation(updatedArgs, spec);
            return {
                flatResponse,
                rawResponse: {
                    statusCode: currentRawResponse.status,
                    body: currentRawResponse.parsedBody,
                    headers: currentRawResponse.headers.toJSON(),
                },
            };
        };
        const lro = (0, lroImpl_js_1.createLroSpec)({
            sendOperationFn,
            args: { kqlScriptName, options },
            spec: deleteByNameOperationSpec,
        });
        const poller = await (0, core_lro_1.createHttpPoller)(lro, {
            restoreFrom: options === null || options === void 0 ? void 0 : options.resumeFrom,
            intervalInMs: options === null || options === void 0 ? void 0 : options.updateIntervalInMs,
        });
        await poller.poll();
        return poller;
    }
    /**
     * Delete KQL script by name
     * @param kqlScriptName - KQL script name
     * @param options - The options parameters.
     */
    async beginDeleteByNameAndWait(kqlScriptName, options) {
        const poller = await this.beginDeleteByName(kqlScriptName, options);
        return poller.pollUntilDone();
    }
    /**
     * Rename KQL script
     * @param kqlScriptName - KQL script name
     * @param renameRequest - Rename request
     * @param options - The options parameters.
     */
    async beginRename(kqlScriptName, renameRequest, options) {
        const directSendOperation = async (args, spec) => {
            return tracing_js_1.tracingClient.withSpan("ArtifactsClient.beginRename", options !== null && options !== void 0 ? options : {}, async () => {
                return this.client.sendOperationRequest(args, spec);
            });
        };
        const sendOperationFn = async (args, spec) => {
            var _a;
            let currentRawResponse = undefined;
            const providedCallback = (_a = args.options) === null || _a === void 0 ? void 0 : _a.onResponse;
            const callback = (rawResponse, flatResponse) => {
                currentRawResponse = rawResponse;
                providedCallback === null || providedCallback === void 0 ? void 0 : providedCallback(rawResponse, flatResponse);
            };
            const updatedArgs = Object.assign(Object.assign({}, args), { options: Object.assign(Object.assign({}, args.options), { onResponse: callback }) });
            const flatResponse = await directSendOperation(updatedArgs, spec);
            return {
                flatResponse,
                rawResponse: {
                    statusCode: currentRawResponse.status,
                    body: currentRawResponse.parsedBody,
                    headers: currentRawResponse.headers.toJSON(),
                },
            };
        };
        const lro = (0, lroImpl_js_1.createLroSpec)({
            sendOperationFn,
            args: { kqlScriptName, renameRequest, options },
            spec: renameOperationSpec,
        });
        const poller = await (0, core_lro_1.createHttpPoller)(lro, {
            restoreFrom: options === null || options === void 0 ? void 0 : options.resumeFrom,
            intervalInMs: options === null || options === void 0 ? void 0 : options.updateIntervalInMs,
        });
        await poller.poll();
        return poller;
    }
    /**
     * Rename KQL script
     * @param kqlScriptName - KQL script name
     * @param renameRequest - Rename request
     * @param options - The options parameters.
     */
    async beginRenameAndWait(kqlScriptName, renameRequest, options) {
        const poller = await this.beginRename(kqlScriptName, renameRequest, options);
        return poller.pollUntilDone();
    }
}
exports.KqlScriptOperationsImpl = KqlScriptOperationsImpl;
//# sourceMappingURL=kqlScriptOperations.js.map