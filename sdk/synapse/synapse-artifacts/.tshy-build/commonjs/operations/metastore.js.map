{"version":3,"file":"metastore.js","sourceRoot":"","sources":["../../../src/operations/metastore.ts"],"names":[],"mappings":"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","sourcesContent":["/*\n * Copyright (c) Microsoft Corporation.\n * Licensed under the MIT License.\n *\n * Code generated by Microsoft (R) AutoRest Code Generator.\n * Changes may cause incorrect behavior and will be lost if the code is regenerated.\n */\n\nimport { tracingClient } from \"../tracing.js\";\nimport type { Metastore } from \"../operationsInterfaces/index.js\";\nimport * as coreClient from \"@azure/core-client\";\nimport * as Mappers from \"../models/mappers.js\";\nimport * as Parameters from \"../models/parameters.js\";\nimport type { ArtifactsClient } from \"../artifactsClient.js\";\nimport type {\n  MetastoreRegisterObject,\n  MetastoreRegisterOptionalParams,\n  MetastoreRegisterResponse,\n  MetastoreGetDatabaseOperationsOptionalParams,\n  MetastoreGetDatabaseOperationsResponse,\n  MetastoreUpdateObject,\n  MetastoreUpdateOptionalParams,\n  MetastoreUpdateResponse,\n  MetastoreDeleteOptionalParams,\n} from \"../models/index.js\";\n\n// Operation Specifications\nconst serializer = coreClient.createSerializer(Mappers, /* isXml */ false);\n\nconst registerOperationSpec: coreClient.OperationSpec = {\n  path: \"/metastore/create-database-operations/{id}\",\n  httpMethod: \"PUT\",\n  responses: {\n    201: {\n      bodyMapper: Mappers.MetastoreRegistrationResponse,\n    },\n    default: {\n      bodyMapper: Mappers.ErrorContract,\n    },\n  },\n  requestBody: Parameters.registerBody,\n  queryParameters: [Parameters.apiVersion3],\n  urlParameters: [Parameters.endpoint, Parameters.id],\n  headerParameters: [Parameters.accept, Parameters.contentType],\n  mediaType: \"json\",\n  serializer,\n};\nconst getDatabaseOperationsOperationSpec: coreClient.OperationSpec = {\n  path: \"/metastore/create-database-operations/{id}\",\n  httpMethod: \"GET\",\n  responses: {\n    200: {\n      bodyMapper: Mappers.MetastoreRequestSuccessResponse,\n    },\n    default: {\n      bodyMapper: Mappers.ErrorContract,\n    },\n  },\n  queryParameters: [Parameters.apiVersion3],\n  urlParameters: [Parameters.endpoint, Parameters.id],\n  headerParameters: [Parameters.accept],\n  serializer,\n};\nconst updateOperationSpec: coreClient.OperationSpec = {\n  path: \"/metastore/update-database-operations/{id}\",\n  httpMethod: \"PUT\",\n  responses: {\n    201: {\n      bodyMapper: Mappers.MetastoreUpdationResponse,\n    },\n    default: {\n      bodyMapper: Mappers.ErrorContract,\n    },\n  },\n  requestBody: Parameters.updateBody,\n  queryParameters: [Parameters.apiVersion3],\n  urlParameters: [Parameters.endpoint, Parameters.id],\n  headerParameters: [Parameters.accept, Parameters.contentType],\n  mediaType: \"json\",\n  serializer,\n};\nconst deleteOperationSpec: coreClient.OperationSpec = {\n  path: \"/metastore/databases/{id}\",\n  httpMethod: \"DELETE\",\n  responses: {\n    204: {},\n    default: {\n      bodyMapper: Mappers.ErrorContract,\n    },\n  },\n  queryParameters: [Parameters.apiVersion3],\n  urlParameters: [Parameters.endpoint, Parameters.id],\n  headerParameters: [Parameters.accept],\n  serializer,\n};\n\n/** Class containing Metastore operations. */\nexport class MetastoreImpl implements Metastore {\n  private readonly client: ArtifactsClient;\n\n  /**\n   * Initialize a new instance of the class Metastore class.\n   * @param client - Reference to the service client\n   */\n  constructor(client: ArtifactsClient) {\n    this.client = client;\n  }\n\n  /**\n   * Register files in Syms\n   * @param id - The name of the database to be created. The name can contain only alphanumeric characters\n   *           and should not exceed 24 characters\n   * @param registerBody - The body for the register request\n   * @param options - The options parameters.\n   */\n  async register(\n    id: string,\n    registerBody: MetastoreRegisterObject,\n    options?: MetastoreRegisterOptionalParams,\n  ): Promise<MetastoreRegisterResponse> {\n    return tracingClient.withSpan(\n      \"ArtifactsClient.register\",\n      options ?? {},\n      async (updatedOptions) => {\n        return this.client.sendOperationRequest(\n          { id, registerBody, updatedOptions },\n          registerOperationSpec,\n        ) as Promise<MetastoreRegisterResponse>;\n      },\n    );\n  }\n\n  /**\n   * Gets status of the database\n   * @param id - the name of the database.\n   * @param options - The options parameters.\n   */\n  async getDatabaseOperations(\n    id: string,\n    options?: MetastoreGetDatabaseOperationsOptionalParams,\n  ): Promise<MetastoreGetDatabaseOperationsResponse> {\n    return tracingClient.withSpan(\n      \"ArtifactsClient.getDatabaseOperations\",\n      options ?? {},\n      async (updatedOptions) => {\n        return this.client.sendOperationRequest(\n          { id, updatedOptions },\n          getDatabaseOperationsOperationSpec,\n        ) as Promise<MetastoreGetDatabaseOperationsResponse>;\n      },\n    );\n  }\n\n  /**\n   * Update files in Syms\n   * @param id - The name of the database to be updated\n   * @param updateBody - The body for the update request\n   * @param options - The options parameters.\n   */\n  async update(\n    id: string,\n    updateBody: MetastoreUpdateObject,\n    options?: MetastoreUpdateOptionalParams,\n  ): Promise<MetastoreUpdateResponse> {\n    return tracingClient.withSpan(\n      \"ArtifactsClient.update\",\n      options ?? {},\n      async (updatedOptions) => {\n        return this.client.sendOperationRequest(\n          { id, updateBody, updatedOptions },\n          updateOperationSpec,\n        ) as Promise<MetastoreUpdateResponse>;\n      },\n    );\n  }\n\n  /**\n   * Remove files in Syms\n   * @param id - The name of the database to be deleted\n   * @param options - The options parameters.\n   */\n  async delete(id: string, options?: MetastoreDeleteOptionalParams): Promise<void> {\n    return tracingClient.withSpan(\n      \"ArtifactsClient.delete\",\n      options ?? {},\n      async (updatedOptions) => {\n        return this.client.sendOperationRequest(\n          { id, updatedOptions },\n          deleteOperationSpec,\n        ) as Promise<void>;\n      },\n    );\n  }\n}\n"]}