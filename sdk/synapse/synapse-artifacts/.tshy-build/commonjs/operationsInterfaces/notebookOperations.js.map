{"version":3,"file":"notebookOperations.js","sourceRoot":"","sources":["../../../src/operationsInterfaces/notebookOperations.ts"],"names":[],"mappings":";AAAA;;;;;;GAMG","sourcesContent":["/*\n * Copyright (c) Microsoft Corporation.\n * Licensed under the MIT License.\n *\n * Code generated by Microsoft (R) AutoRest Code Generator.\n * Changes may cause incorrect behavior and will be lost if the code is regenerated.\n */\n\nimport type { PagedAsyncIterableIterator } from \"@azure/core-paging\";\nimport type { SimplePollerLike, OperationState } from \"@azure/core-lro\";\nimport type {\n  NotebookResource,\n  NotebookGetNotebooksByWorkspaceOptionalParams,\n  NotebookGetNotebookSummaryByWorkSpaceOptionalParams,\n  NotebookCreateOrUpdateNotebookOptionalParams,\n  NotebookCreateOrUpdateNotebookResponse,\n  NotebookGetNotebookOptionalParams,\n  NotebookGetNotebookResponse,\n  NotebookDeleteNotebookOptionalParams,\n  ArtifactRenameRequest,\n  NotebookRenameNotebookOptionalParams,\n} from \"../models/index.js\";\n\n/// <reference lib=\"esnext.asynciterable\" />\n/** Interface representing a NotebookOperations. */\nexport interface NotebookOperations {\n  /**\n   * Lists Notebooks.\n   * @param options - The options parameters.\n   */\n  listNotebooksByWorkspace(\n    options?: NotebookGetNotebooksByWorkspaceOptionalParams,\n  ): PagedAsyncIterableIterator<NotebookResource>;\n  /**\n   * Lists a summary of Notebooks.\n   * @param options - The options parameters.\n   */\n  listNotebookSummaryByWorkSpace(\n    options?: NotebookGetNotebookSummaryByWorkSpaceOptionalParams,\n  ): PagedAsyncIterableIterator<NotebookResource>;\n  /**\n   * Creates or updates a Note Book.\n   * @param notebookName - The notebook name.\n   * @param notebook - Note book resource definition.\n   * @param options - The options parameters.\n   */\n  beginCreateOrUpdateNotebook(\n    notebookName: string,\n    notebook: NotebookResource,\n    options?: NotebookCreateOrUpdateNotebookOptionalParams,\n  ): Promise<\n    SimplePollerLike<\n      OperationState<NotebookCreateOrUpdateNotebookResponse>,\n      NotebookCreateOrUpdateNotebookResponse\n    >\n  >;\n  /**\n   * Creates or updates a Note Book.\n   * @param notebookName - The notebook name.\n   * @param notebook - Note book resource definition.\n   * @param options - The options parameters.\n   */\n  beginCreateOrUpdateNotebookAndWait(\n    notebookName: string,\n    notebook: NotebookResource,\n    options?: NotebookCreateOrUpdateNotebookOptionalParams,\n  ): Promise<NotebookCreateOrUpdateNotebookResponse>;\n  /**\n   * Gets a Note Book.\n   * @param notebookName - The notebook name.\n   * @param options - The options parameters.\n   */\n  getNotebook(\n    notebookName: string,\n    options?: NotebookGetNotebookOptionalParams,\n  ): Promise<NotebookGetNotebookResponse>;\n  /**\n   * Deletes a Note book.\n   * @param notebookName - The notebook name.\n   * @param options - The options parameters.\n   */\n  beginDeleteNotebook(\n    notebookName: string,\n    options?: NotebookDeleteNotebookOptionalParams,\n  ): Promise<SimplePollerLike<OperationState<void>, void>>;\n  /**\n   * Deletes a Note book.\n   * @param notebookName - The notebook name.\n   * @param options - The options parameters.\n   */\n  beginDeleteNotebookAndWait(\n    notebookName: string,\n    options?: NotebookDeleteNotebookOptionalParams,\n  ): Promise<void>;\n  /**\n   * Renames a notebook.\n   * @param notebookName - The notebook name.\n   * @param request - proposed new name.\n   * @param options - The options parameters.\n   */\n  beginRenameNotebook(\n    notebookName: string,\n    request: ArtifactRenameRequest,\n    options?: NotebookRenameNotebookOptionalParams,\n  ): Promise<SimplePollerLike<OperationState<void>, void>>;\n  /**\n   * Renames a notebook.\n   * @param notebookName - The notebook name.\n   * @param request - proposed new name.\n   * @param options - The options parameters.\n   */\n  beginRenameNotebookAndWait(\n    notebookName: string,\n    request: ArtifactRenameRequest,\n    options?: NotebookRenameNotebookOptionalParams,\n  ): Promise<void>;\n}\n"]}