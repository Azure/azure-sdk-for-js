{"version":3,"file":"library.js","sourceRoot":"","sources":["../../../src/operationsInterfaces/library.ts"],"names":[],"mappings":";AAAA;;;;;;GAMG","sourcesContent":["/*\n * Copyright (c) Microsoft Corporation.\n * Licensed under the MIT License.\n *\n * Code generated by Microsoft (R) AutoRest Code Generator.\n * Changes may cause incorrect behavior and will be lost if the code is regenerated.\n */\n\nimport type { PagedAsyncIterableIterator } from \"@azure/core-paging\";\nimport type * as coreRestPipeline from \"@azure/core-rest-pipeline\";\nimport type { SimplePollerLike, OperationState } from \"@azure/core-lro\";\nimport type {\n  LibraryResource,\n  LibraryListOptionalParams,\n  LibraryFlushOptionalParams,\n  LibraryGetOperationResultOptionalParams,\n  LibraryGetOperationResultResponse,\n  LibraryDeleteOptionalParams,\n  LibraryGetOptionalParams,\n  LibraryGetResponse,\n  LibraryCreateOptionalParams,\n  LibraryAppendOptionalParams,\n} from \"../models/index.js\";\n\n/// <reference lib=\"esnext.asynciterable\" />\n/** Interface representing a Library. */\nexport interface Library {\n  /**\n   * Lists Library.\n   * @param options - The options parameters.\n   */\n  list(options?: LibraryListOptionalParams): PagedAsyncIterableIterator<LibraryResource>;\n  /**\n   * Flush Library\n   * @param libraryName - file name to upload. Minimum length of the filename should be 1 excluding the\n   *                    extension length.\n   * @param options - The options parameters.\n   */\n  beginFlush(\n    libraryName: string,\n    options?: LibraryFlushOptionalParams,\n  ): Promise<SimplePollerLike<OperationState<void>, void>>;\n  /**\n   * Flush Library\n   * @param libraryName - file name to upload. Minimum length of the filename should be 1 excluding the\n   *                    extension length.\n   * @param options - The options parameters.\n   */\n  beginFlushAndWait(libraryName: string, options?: LibraryFlushOptionalParams): Promise<void>;\n  /**\n   * Get Operation result for Library\n   * @param operationId - operation id for which status is requested\n   * @param options - The options parameters.\n   */\n  getOperationResult(\n    operationId: string,\n    options?: LibraryGetOperationResultOptionalParams,\n  ): Promise<LibraryGetOperationResultResponse>;\n  /**\n   * Delete Library\n   * @param libraryName - file name to upload. Minimum length of the filename should be 1 excluding the\n   *                    extension length.\n   * @param options - The options parameters.\n   */\n  beginDelete(\n    libraryName: string,\n    options?: LibraryDeleteOptionalParams,\n  ): Promise<SimplePollerLike<OperationState<void>, void>>;\n  /**\n   * Delete Library\n   * @param libraryName - file name to upload. Minimum length of the filename should be 1 excluding the\n   *                    extension length.\n   * @param options - The options parameters.\n   */\n  beginDeleteAndWait(libraryName: string, options?: LibraryDeleteOptionalParams): Promise<void>;\n  /**\n   * Get Library\n   * @param libraryName - file name to upload. Minimum length of the filename should be 1 excluding the\n   *                    extension length.\n   * @param options - The options parameters.\n   */\n  get(libraryName: string, options?: LibraryGetOptionalParams): Promise<LibraryGetResponse>;\n  /**\n   * Creates a library with the library name.\n   * @param libraryName - file name to upload. Minimum length of the filename should be 1 excluding the\n   *                    extension length.\n   * @param options - The options parameters.\n   */\n  beginCreate(\n    libraryName: string,\n    options?: LibraryCreateOptionalParams,\n  ): Promise<SimplePollerLike<OperationState<void>, void>>;\n  /**\n   * Creates a library with the library name.\n   * @param libraryName - file name to upload. Minimum length of the filename should be 1 excluding the\n   *                    extension length.\n   * @param options - The options parameters.\n   */\n  beginCreateAndWait(libraryName: string, options?: LibraryCreateOptionalParams): Promise<void>;\n  /**\n   * Append the content to the library resource created using the create operation. The maximum content\n   * size is 4MiB. Content larger than 4MiB must be appended in 4MiB chunks\n   * @param libraryName - file name to upload. Minimum length of the filename should be 1 excluding the\n   *                    extension length.\n   * @param content - Library file chunk.\n   * @param options - The options parameters.\n   */\n  append(\n    libraryName: string,\n    content: coreRestPipeline.RequestBodyType,\n    options?: LibraryAppendOptionalParams,\n  ): Promise<void>;\n}\n"]}