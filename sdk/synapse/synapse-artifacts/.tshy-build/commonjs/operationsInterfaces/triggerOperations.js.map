{"version":3,"file":"triggerOperations.js","sourceRoot":"","sources":["../../../src/operationsInterfaces/triggerOperations.ts"],"names":[],"mappings":";AAAA;;;;;;GAMG","sourcesContent":["/*\n * Copyright (c) Microsoft Corporation.\n * Licensed under the MIT License.\n *\n * Code generated by Microsoft (R) AutoRest Code Generator.\n * Changes may cause incorrect behavior and will be lost if the code is regenerated.\n */\n\nimport type { PagedAsyncIterableIterator } from \"@azure/core-paging\";\nimport type { SimplePollerLike, OperationState } from \"@azure/core-lro\";\nimport type {\n  TriggerResource,\n  TriggerGetTriggersByWorkspaceOptionalParams,\n  TriggerCreateOrUpdateTriggerOptionalParams,\n  TriggerCreateOrUpdateTriggerResponse,\n  TriggerGetTriggerOptionalParams,\n  TriggerGetTriggerResponse,\n  TriggerDeleteTriggerOptionalParams,\n  TriggerSubscribeTriggerToEventsOptionalParams,\n  TriggerSubscribeTriggerToEventsResponse,\n  TriggerGetEventSubscriptionStatusOptionalParams,\n  TriggerGetEventSubscriptionStatusResponse,\n  TriggerUnsubscribeTriggerFromEventsOptionalParams,\n  TriggerUnsubscribeTriggerFromEventsResponse,\n  TriggerStartTriggerOptionalParams,\n  TriggerStopTriggerOptionalParams,\n} from \"../models/index.js\";\n\n/** Interface representing a TriggerOperations. */\nexport interface TriggerOperations {\n  /**\n   * Lists triggers.\n   * @param options - The options parameters.\n   */\n  listTriggersByWorkspace(\n    options?: TriggerGetTriggersByWorkspaceOptionalParams,\n  ): PagedAsyncIterableIterator<TriggerResource>;\n  /**\n   * Creates or updates a trigger.\n   * @param triggerName - The trigger name.\n   * @param trigger - Trigger resource definition.\n   * @param options - The options parameters.\n   */\n  beginCreateOrUpdateTrigger(\n    triggerName: string,\n    trigger: TriggerResource,\n    options?: TriggerCreateOrUpdateTriggerOptionalParams,\n  ): Promise<\n    SimplePollerLike<\n      OperationState<TriggerCreateOrUpdateTriggerResponse>,\n      TriggerCreateOrUpdateTriggerResponse\n    >\n  >;\n  /**\n   * Creates or updates a trigger.\n   * @param triggerName - The trigger name.\n   * @param trigger - Trigger resource definition.\n   * @param options - The options parameters.\n   */\n  beginCreateOrUpdateTriggerAndWait(\n    triggerName: string,\n    trigger: TriggerResource,\n    options?: TriggerCreateOrUpdateTriggerOptionalParams,\n  ): Promise<TriggerCreateOrUpdateTriggerResponse>;\n  /**\n   * Gets a trigger.\n   * @param triggerName - The trigger name.\n   * @param options - The options parameters.\n   */\n  getTrigger(\n    triggerName: string,\n    options?: TriggerGetTriggerOptionalParams,\n  ): Promise<TriggerGetTriggerResponse>;\n  /**\n   * Deletes a trigger.\n   * @param triggerName - The trigger name.\n   * @param options - The options parameters.\n   */\n  beginDeleteTrigger(\n    triggerName: string,\n    options?: TriggerDeleteTriggerOptionalParams,\n  ): Promise<SimplePollerLike<OperationState<void>, void>>;\n  /**\n   * Deletes a trigger.\n   * @param triggerName - The trigger name.\n   * @param options - The options parameters.\n   */\n  beginDeleteTriggerAndWait(\n    triggerName: string,\n    options?: TriggerDeleteTriggerOptionalParams,\n  ): Promise<void>;\n  /**\n   * Subscribe event trigger to events.\n   * @param triggerName - The trigger name.\n   * @param options - The options parameters.\n   */\n  beginSubscribeTriggerToEvents(\n    triggerName: string,\n    options?: TriggerSubscribeTriggerToEventsOptionalParams,\n  ): Promise<\n    SimplePollerLike<\n      OperationState<TriggerSubscribeTriggerToEventsResponse>,\n      TriggerSubscribeTriggerToEventsResponse\n    >\n  >;\n  /**\n   * Subscribe event trigger to events.\n   * @param triggerName - The trigger name.\n   * @param options - The options parameters.\n   */\n  beginSubscribeTriggerToEventsAndWait(\n    triggerName: string,\n    options?: TriggerSubscribeTriggerToEventsOptionalParams,\n  ): Promise<TriggerSubscribeTriggerToEventsResponse>;\n  /**\n   * Get a trigger's event subscription status.\n   * @param triggerName - The trigger name.\n   * @param options - The options parameters.\n   */\n  getEventSubscriptionStatus(\n    triggerName: string,\n    options?: TriggerGetEventSubscriptionStatusOptionalParams,\n  ): Promise<TriggerGetEventSubscriptionStatusResponse>;\n  /**\n   * Unsubscribe event trigger from events.\n   * @param triggerName - The trigger name.\n   * @param options - The options parameters.\n   */\n  beginUnsubscribeTriggerFromEvents(\n    triggerName: string,\n    options?: TriggerUnsubscribeTriggerFromEventsOptionalParams,\n  ): Promise<\n    SimplePollerLike<\n      OperationState<TriggerUnsubscribeTriggerFromEventsResponse>,\n      TriggerUnsubscribeTriggerFromEventsResponse\n    >\n  >;\n  /**\n   * Unsubscribe event trigger from events.\n   * @param triggerName - The trigger name.\n   * @param options - The options parameters.\n   */\n  beginUnsubscribeTriggerFromEventsAndWait(\n    triggerName: string,\n    options?: TriggerUnsubscribeTriggerFromEventsOptionalParams,\n  ): Promise<TriggerUnsubscribeTriggerFromEventsResponse>;\n  /**\n   * Starts a trigger.\n   * @param triggerName - The trigger name.\n   * @param options - The options parameters.\n   */\n  beginStartTrigger(\n    triggerName: string,\n    options?: TriggerStartTriggerOptionalParams,\n  ): Promise<SimplePollerLike<OperationState<void>, void>>;\n  /**\n   * Starts a trigger.\n   * @param triggerName - The trigger name.\n   * @param options - The options parameters.\n   */\n  beginStartTriggerAndWait(\n    triggerName: string,\n    options?: TriggerStartTriggerOptionalParams,\n  ): Promise<void>;\n  /**\n   * Stops a trigger.\n   * @param triggerName - The trigger name.\n   * @param options - The options parameters.\n   */\n  beginStopTrigger(\n    triggerName: string,\n    options?: TriggerStopTriggerOptionalParams,\n  ): Promise<SimplePollerLike<OperationState<void>, void>>;\n  /**\n   * Stops a trigger.\n   * @param triggerName - The trigger name.\n   * @param options - The options parameters.\n   */\n  beginStopTriggerAndWait(\n    triggerName: string,\n    options?: TriggerStopTriggerOptionalParams,\n  ): Promise<void>;\n}\n"]}