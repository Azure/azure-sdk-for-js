{"version":3,"file":"pipelineRunOperations.js","sourceRoot":"","sources":["../../../src/operationsInterfaces/pipelineRunOperations.ts"],"names":[],"mappings":";AAAA;;;;;;GAMG","sourcesContent":["/*\n * Copyright (c) Microsoft Corporation.\n * Licensed under the MIT License.\n *\n * Code generated by Microsoft (R) AutoRest Code Generator.\n * Changes may cause incorrect behavior and will be lost if the code is regenerated.\n */\n\nimport type {\n  RunFilterParameters,\n  PipelineRunQueryPipelineRunsByWorkspaceOptionalParams,\n  PipelineRunQueryPipelineRunsByWorkspaceResponse,\n  PipelineRunGetPipelineRunOptionalParams,\n  PipelineRunGetPipelineRunResponse,\n  PipelineRunQueryActivityRunsOptionalParams,\n  PipelineRunQueryActivityRunsResponse,\n  PipelineRunCancelPipelineRunOptionalParams,\n} from \"../models/index.js\";\n\n/** Interface representing a PipelineRunOperations. */\nexport interface PipelineRunOperations {\n  /**\n   * Query pipeline runs in the workspace based on input filter conditions.\n   * @param filterParameters - Parameters to filter the pipeline run.\n   * @param options - The options parameters.\n   */\n  queryPipelineRunsByWorkspace(\n    filterParameters: RunFilterParameters,\n    options?: PipelineRunQueryPipelineRunsByWorkspaceOptionalParams,\n  ): Promise<PipelineRunQueryPipelineRunsByWorkspaceResponse>;\n  /**\n   * Get a pipeline run by its run ID.\n   * @param runId - The pipeline run identifier.\n   * @param options - The options parameters.\n   */\n  getPipelineRun(\n    runId: string,\n    options?: PipelineRunGetPipelineRunOptionalParams,\n  ): Promise<PipelineRunGetPipelineRunResponse>;\n  /**\n   * Query activity runs based on input filter conditions.\n   * @param pipelineName - The pipeline name.\n   * @param runId - The pipeline run identifier.\n   * @param filterParameters - Parameters to filter the activity runs.\n   * @param options - The options parameters.\n   */\n  queryActivityRuns(\n    pipelineName: string,\n    runId: string,\n    filterParameters: RunFilterParameters,\n    options?: PipelineRunQueryActivityRunsOptionalParams,\n  ): Promise<PipelineRunQueryActivityRunsResponse>;\n  /**\n   * Cancel a pipeline run by its run ID.\n   * @param runId - The pipeline run identifier.\n   * @param options - The options parameters.\n   */\n  cancelPipelineRun(\n    runId: string,\n    options?: PipelineRunCancelPipelineRunOptionalParams,\n  ): Promise<void>;\n}\n"]}