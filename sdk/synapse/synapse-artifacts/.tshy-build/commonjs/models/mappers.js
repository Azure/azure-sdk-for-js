"use strict";
/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.KqlScriptContent = exports.KqlScript = exports.KqlScriptResource = exports.KqlScriptsResourceCollectionResponse = exports.NotebookFolder = exports.NotebookCellOutputItem = exports.NotebookCell = exports.NotebookLanguageInfo = exports.NotebookKernelSpec = exports.NotebookMetadata = exports.NotebookSessionProperties = exports.SparkConfigurationReference = exports.BigDataPoolReference = exports.Notebook = exports.NotebookResource = exports.RunNotebookSnapshot = exports.RunNotebookSnapshotResult = exports.RunNotebookSnapshotResponse = exports.RunNotebookError = exports.RunNotebookResult = exports.RunNotebookResponse = exports.RunNotebookParameter = exports.RunNotebookSparkSessionOptions = exports.RunNotebookRequest = exports.UpdateLandingZoneCredential = exports.LinkTableStatus = exports.LinkConnectionQueryTableStatus = exports.QueryTableStatusRequest = exports.LinkTableResource = exports.LinkTableListResponse = exports.LinkConnectionRefreshStatus = exports.LinkConnectionDetailedStatus = exports.LinkTableRequestTargetStructureOptions = exports.LinkTableRequestTargetDistributionOptions = exports.LinkTableRequestTarget = exports.LinkTableRequestSource = exports.LinkTableRequest = exports.EditTablesRequest = exports.CloudError = exports.LinkConnectionCompute = exports.SecretBase = exports.LinkConnectionLandingZone = exports.LinkConnectionTargetDatabaseTypeProperties = exports.LinkConnectionTargetDatabase = exports.LinkConnectionSourceDatabaseTypeProperties = exports.LinkedServiceReference = exports.LinkConnectionSourceDatabase = exports.LinkConnection = exports.LinkConnectionResource = exports.LinkConnectionListResponse = void 0;
exports.LibraryResourceInfo = exports.LibraryResourceProperties = exports.LibraryListResponse = exports.IntegrationRuntimeListResponse = exports.GitHubAccessTokenResponse = exports.GitHubAccessTokenRequest = exports.DatasetListResponse = exports.DataFlowDebugCommandResponse = exports.DataFlowDebugCommandPayload = exports.DataFlowDebugCommandRequest = exports.DeleteDataFlowDebugSessionRequest = exports.AddDataFlowToDebugSessionResponse = exports.DataFlowSourceSetting = exports.DataFlowDebugPackageDebugSettings = exports.DataFlowStagingInfo = exports.IntegrationRuntimeReference = exports.LinkedService = exports.DatasetFolder = exports.ParameterSpecification = exports.Dataset = exports.DataFlowDebugPackage = exports.DataFlowDebugSessionInfo = exports.QueryDataFlowDebugSessionsResponse = exports.CreateDataFlowDebugSessionResponse = exports.SubResourceDebugResource = exports.IntegrationRuntime = exports.CreateDataFlowDebugSessionRequest = exports.DataFlowListResponse = exports.DataFlowFolder = exports.DataFlow = exports.LibraryInfo = exports.LibraryRequirements = exports.DynamicExecutorAllocation = exports.AutoPauseProperties = exports.AutoScaleProperties = exports.BigDataPoolResourceInfoListResult = exports.Resource = exports.SparkConfiguration = exports.SparkConfigurationListResponse = exports.MetastoreUpdationResponse = exports.MetastoreUpdateObject = exports.MetastoreRequestSuccessResponse = exports.MetastoreRegistrationResponse = exports.MetastoreRegisterObject = exports.ArtifactRenameRequest = exports.ErrorAdditionalInfo = exports.ErrorResponse = exports.ErrorContract = exports.KqlScriptContentCurrentConnection = exports.KqlScriptContentMetadata = void 0;
exports.ManagedVirtualNetworkSettings = exports.WorkspaceKeyDetails = exports.CustomerManagedKeyDetails = exports.EncryptionDetails = exports.PrivateLinkServiceConnectionState = exports.PrivateEndpoint = exports.VirtualNetworkProfile = exports.DataLakeStorageAccountDetails = exports.TriggerRun = exports.TriggerRunsQueryResponse = exports.TriggerSubscriptionOperationStatus = exports.Trigger = exports.TriggerListResponse = exports.SqlScriptFolder = exports.SqlScriptMetadata = exports.SqlConnection = exports.SqlScriptContent = exports.SqlScript = exports.SqlScriptResource = exports.SqlScriptsListResponse = exports.Sku = exports.SqlPoolInfoListResult = exports.SparkServiceError = exports.SparkServicePlugin = exports.SparkScheduler = exports.SparkRequest = exports.SparkBatchJobState = exports.SparkBatchJob = exports.SparkJobDefinitionFolder = exports.SparkJobProperties = exports.SparkJobDefinition = exports.SparkJobDefinitionsListResponse = exports.ActivityRun = exports.ActivityRunsQueryResponse = exports.PipelineRunInvokedBy = exports.PipelineRun = exports.PipelineRunsQueryResponse = exports.RunQueryOrderBy = exports.RunQueryFilter = exports.RunFilterParameters = exports.CreateRunResponse = exports.PipelineFolder = exports.VariableSpecification = exports.UserProperty = exports.ActivityDependency = exports.Activity = exports.PipelineListResponse = exports.NotebookListResponse = exports.LinkedServiceListResponse = exports.OperationResult = void 0;
exports.FormatWriteSettings = exports.CompressionReadSettings = exports.FormatReadSettings = exports.DistcpSettings = exports.MetadataItem = exports.StoreWriteSettings = exports.StoreReadSettings = exports.ActivityPolicy = exports.ServiceNowV2LinkedServiceTypeProperties = exports.ScriptAction = exports.WebLinkedServiceTypeProperties = exports.SqlAlwaysEncryptedProperties = exports.SqlServerBaseLinkedServiceTypeProperties = exports.AzureStorageLinkedServiceTypeProperties = exports.DatasetCompression = exports.DatasetStorageFormat = exports.DatasetSchemaDataElement = exports.DatasetDataElement = exports.DatasetLocation = exports.Transformation = exports.RerunTriggerListResponse = exports.DataFlowDebugResultResponse = exports.DataFlowDebugQueryResponse = exports.EvaluateDataFlowExpressionRequest = exports.DataFlowDebugStatisticsRequest = exports.DataFlowDebugPreviewDataRequest = exports.StartDataFlowDebugSessionResponse = exports.StartDataFlowDebugSessionRequest = exports.CredentialReference = exports.BigDataPoolParametrizationReference = exports.SqlPoolReference = exports.SynapseSparkJobReference = exports.SynapseNotebookReference = exports.ExposureControlResponse = exports.ExposureControlRequest = exports.SsisObjectMetadataStatusResponse = exports.GetSsisObjectMetadataRequest = exports.RerunTumblingWindowTriggerActionParameters = exports.DataFlowReference = exports.DatasetReference = exports.WorkspaceIdentity = exports.WorkspaceUpdateParameters = exports.TriggerPipelineReference = exports.PipelineReference = exports.TriggerDependencyProvisioningStatus = exports.Expression = exports.ManagedIdentity = exports.PurviewConfiguration = exports.GitHubClientSecret = exports.WorkspaceRepositoryConfiguration = void 0;
exports.ScheduleTriggerRecurrence = exports.ExpressionV2 = exports.SynapseActivityAuthentication = exports.SparkConfigurationParametrizationReference = exports.ScriptActivityTypePropertiesLogSettings = exports.ScriptActivityParameter = exports.ScriptActivityScriptBlock = exports.ExecuteDataFlowActivityTypePropertiesCompute = exports.ContinuationSettingsReference = exports.SecureInputOutputPolicy = exports.AzureMLWebServiceFile = exports.SwitchCase = exports.WebActivityAuthentication = exports.CustomActivityReferenceObject = exports.SsisLogLocation = exports.SsisPropertyOverride = exports.SsisExecutionParameter = exports.SsisExecutionCredential = exports.SsisChildPackage = exports.SsisAccessCredential = exports.SsisPackageLocation = exports.TypeConversionSettings = exports.CopyTranslator = exports.AdditionalColumns = exports.PolybaseSettings = exports.NotebookParameter = exports.StoredProcedureParameter = exports.DWCopyCommandDefaultValue = exports.DWCopyCommandSettings = exports.ExportSettings = exports.RedshiftUnloadSettings = exports.NetezzaPartitionSettings = exports.OutputColumn = exports.MongoDbCursorMethodsProperties = exports.ImportSettings = exports.TeradataPartitionSettings = exports.AmazonRdsForOraclePartitionSettings = exports.OraclePartitionSettings = exports.SqlPartitionSettings = exports.SapTablePartitionSettings = exports.SapHanaPartitionSettings = exports.SkipErrorFile = exports.LogLocationSettings = exports.CopyActivityLogSettings = exports.LogSettings = exports.LogStorageSettings = exports.RedirectIncompatibleRowSettings = exports.StagingSettings = exports.CopySink = exports.CopySource = void 0;
exports.DynamicsCrmEntityDataset = exports.DynamicsEntityDataset = exports.DocumentDbCollectionDataset = exports.CosmosDbSqlApiCollectionDataset = exports.CustomDataset = exports.CassandraTableDataset = exports.AzureSqlDWTableDataset = exports.AzureSqlMITableDataset = exports.AzureSqlTableDataset = exports.AzureTableDataset = exports.AzureBlobDataset = exports.IcebergDataset = exports.BinaryDataset = exports.OrcDataset = exports.XmlDataset = exports.JsonDataset = exports.DelimitedTextDataset = exports.ParquetDataset = exports.ExcelDataset = exports.AvroDataset = exports.AmazonS3Dataset = exports.LinkedServiceDebugResource = exports.DatasetDebugResource = exports.DataFlowDebugResource = exports.IntegrationRuntimeDebugResource = exports.SelfHostedIntegrationRuntime = exports.ManagedIntegrationRuntime = exports.Flowlet = exports.MappingDataFlow = exports.ProxyResource = exports.TrackedResource = exports.AzureEntityResource = exports.AzureKeyVaultSecretReference = exports.SecureString = exports.LinkedIntegrationRuntimeType = exports.ManagedVirtualNetworkReference = exports.CustomSetupBase = exports.EntityReference = exports.IntegrationRuntimeDataProxyProperties = exports.IntegrationRuntimeCustomSetupScriptProperties = exports.IntegrationRuntimeSsisCatalogInfo = exports.IntegrationRuntimeSsisProperties = exports.IntegrationRuntimeVNetProperties = exports.IntegrationRuntimeDataFlowProperties = exports.IntegrationRuntimeComputeProperties = exports.TriggerReference = exports.DependencyReference = exports.RetryPolicy = exports.RecurrenceScheduleOccurrence = exports.RecurrenceSchedule = void 0;
exports.HiveObjectDataset = exports.HBaseObjectDataset = exports.GreenplumTableDataset = exports.GoogleBigQueryV2ObjectDataset = exports.GoogleBigQueryObjectDataset = exports.EloquaObjectDataset = exports.DrillTableDataset = exports.CouchbaseTableDataset = exports.ConcurObjectDataset = exports.AzurePostgreSqlTableDataset = exports.AmazonMWSObjectDataset = exports.HttpDataset = exports.AzureSearchIndexDataset = exports.WebTableDataset = exports.SapOdpResourceDataset = exports.SapTableResourceDataset = exports.RestResourceDataset = exports.AmazonRdsForSqlServerTableDataset = exports.SqlServerTableDataset = exports.SapOpenHubTableDataset = exports.SapHanaTableDataset = exports.SapEccResourceDataset = exports.SapCloudForCustomerResourceDataset = exports.SapBwCubeDataset = exports.SybaseTableDataset = exports.SalesforceServiceCloudObjectDataset = exports.SalesforceObjectDataset = exports.MicrosoftAccessTableDataset = exports.PostgreSqlV2TableDataset = exports.PostgreSqlTableDataset = exports.MySqlTableDataset = exports.OdbcTableDataset = exports.InformixTableDataset = exports.RelationalTableDataset = exports.Db2TableDataset = exports.AmazonRedshiftTableDataset = exports.AzureMySqlTableDataset = exports.TeradataTableDataset = exports.AmazonRdsForOracleTableDataset = exports.OracleTableDataset = exports.ODataResourceDataset = exports.CosmosDbMongoDbApiCollectionDataset = exports.MongoDbV2CollectionDataset = exports.MongoDbAtlasCollectionDataset = exports.MongoDbCollectionDataset = exports.FileShareDataset = exports.Office365Dataset = exports.AzureBlobFSDataset = exports.AzureDataLakeStoreDataset = exports.CommonDataServiceForAppsEntityDataset = void 0;
exports.FileServerLinkedService = exports.HDInsightLinkedService = exports.CommonDataServiceForAppsLinkedService = exports.DynamicsCrmLinkedService = exports.DynamicsLinkedService = exports.CosmosDbLinkedService = exports.AzureKeyVaultLinkedService = exports.AzureBatchLinkedService = exports.AzureSqlMILinkedService = exports.AzureSqlDatabaseLinkedService = exports.AmazonRdsForSqlServerLinkedService = exports.SqlServerLinkedService = exports.AzureSqlDWLinkedService = exports.AzureTableStorageLinkedService = exports.AzureBlobStorageLinkedService = exports.AzureStorageLinkedService = exports.ServiceNowV2ObjectDataset = exports.WarehouseTableDataset = exports.SalesforceServiceCloudV2ObjectDataset = exports.SalesforceV2ObjectDataset = exports.LakeHouseTableDataset = exports.AzureDatabricksDeltaLakeDataset = exports.SharePointOnlineListResourceDataset = exports.SnowflakeV2Dataset = exports.SnowflakeDataset = exports.GoogleAdWordsObjectDataset = exports.AzureDataExplorerTableDataset = exports.OracleServiceCloudObjectDataset = exports.DynamicsAXResourceDataset = exports.ResponsysObjectDataset = exports.SalesforceMarketingCloudObjectDataset = exports.VerticaTableDataset = exports.NetezzaTableDataset = exports.ZohoObjectDataset = exports.XeroObjectDataset = exports.SquareObjectDataset = exports.SparkObjectDataset = exports.ShopifyObjectDataset = exports.ServiceNowObjectDataset = exports.QuickBooksObjectDataset = exports.PrestoObjectDataset = exports.PhoenixObjectDataset = exports.PaypalObjectDataset = exports.MarketoObjectDataset = exports.AzureMariaDBTableDataset = exports.MariaDBTableDataset = exports.MagentoObjectDataset = exports.JiraObjectDataset = exports.ImpalaObjectDataset = exports.HubspotObjectDataset = void 0;
exports.SftpServerLinkedService = exports.FtpServerLinkedService = exports.HttpLinkedService = exports.AzureSearchLinkedService = exports.CustomDataSourceLinkedService = exports.AmazonRedshiftLinkedService = exports.AmazonS3LinkedService = exports.GoogleSheetsLinkedService = exports.TwilioLinkedService = exports.AsanaLinkedService = exports.AppFiguresLinkedService = exports.DataworldLinkedService = exports.ZendeskLinkedService = exports.SmartsheetLinkedService = exports.QuickbaseLinkedService = exports.TeamDeskLinkedService = exports.RestServiceLinkedService = exports.SapOdpLinkedService = exports.SapOpenHubLinkedService = exports.SapEccLinkedService = exports.SapCloudForCustomerLinkedService = exports.SalesforceServiceCloudLinkedService = exports.SalesforceLinkedService = exports.Office365LinkedService = exports.AzureBlobFSLinkedService = exports.AzureDataLakeStoreLinkedService = exports.CosmosDbMongoDbApiLinkedService = exports.MongoDbV2LinkedService = exports.MongoDbAtlasLinkedService = exports.MongoDbLinkedService = exports.CassandraLinkedService = exports.WebLinkedService = exports.ODataLinkedService = exports.HdfsLinkedService = exports.MicrosoftAccessLinkedService = exports.InformixLinkedService = exports.OdbcLinkedService = exports.AzureMLServiceLinkedService = exports.AzureMLLinkedService = exports.TeradataLinkedService = exports.Db2LinkedService = exports.SybaseLinkedService = exports.PostgreSqlV2LinkedService = exports.PostgreSqlLinkedService = exports.MySqlLinkedService = exports.AzureMySqlLinkedService = exports.AmazonRdsForOracleLinkedService = exports.OracleLinkedService = exports.GoogleCloudStorageLinkedService = exports.AzureFileStorageLinkedService = void 0;
exports.PowerBIWorkspaceLinkedService = exports.LakeHouseLinkedService = exports.AzureSynapseArtifactsLinkedService = exports.SharePointOnlineListLinkedService = exports.SnowflakeV2LinkedService = exports.SnowflakeLinkedService = exports.AzureFunctionLinkedService = exports.AzureDataExplorerLinkedService = exports.SapTableLinkedService = exports.GoogleAdWordsLinkedService = exports.OracleServiceCloudLinkedService = exports.DynamicsAXLinkedService = exports.ResponsysLinkedService = exports.AzureDatabricksDeltaLakeLinkedService = exports.AzureDatabricksLinkedService = exports.AzureDataLakeAnalyticsLinkedService = exports.HDInsightOnDemandLinkedService = exports.SalesforceMarketingCloudLinkedService = exports.NetezzaLinkedService = exports.VerticaLinkedService = exports.ZohoLinkedService = exports.XeroLinkedService = exports.SquareLinkedService = exports.SparkLinkedService = exports.ShopifyLinkedService = exports.ServiceNowLinkedService = exports.QuickBooksLinkedService = exports.PrestoLinkedService = exports.PhoenixLinkedService = exports.PaypalLinkedService = exports.MarketoLinkedService = exports.AzureMariaDBLinkedService = exports.MariaDBLinkedService = exports.MagentoLinkedService = exports.JiraLinkedService = exports.ImpalaLinkedService = exports.HubspotLinkedService = exports.HiveLinkedService = exports.HBaseLinkedService = exports.GreenplumLinkedService = exports.GoogleBigQueryV2LinkedService = exports.GoogleBigQueryLinkedService = exports.EloquaLinkedService = exports.DrillLinkedService = exports.CouchbaseLinkedService = exports.ConcurLinkedService = exports.AzurePostgreSqlLinkedService = exports.AmazonMWSLinkedService = exports.SapHanaLinkedService = exports.SapBWLinkedService = void 0;
exports.LakeHouseReadSettings = exports.HdfsReadSettings = exports.HttpReadSettings = exports.SftpReadSettings = exports.FtpReadSettings = exports.GoogleCloudStorageReadSettings = exports.AzureFileStorageReadSettings = exports.FileServerReadSettings = exports.AmazonS3ReadSettings = exports.AzureDataLakeStoreReadSettings = exports.AzureBlobFSReadSettings = exports.AzureBlobStorageReadSettings = exports.WebClientCertificateAuthentication = exports.WebBasicAuthentication = exports.WebAnonymousAuthentication = exports.AzureSqlMILinkedServiceTypeProperties = exports.AzureSqlDatabaseLinkedServiceTypeProperties = exports.AmazonRdsForSqlServerLinkedServiceTypeProperties = exports.SqlServerLinkedServiceTypeProperties = exports.AzureSqlDWLinkedServiceTypeProperties = exports.AzureTableStorageLinkedServiceTypeProperties = exports.ParquetFormat = exports.OrcFormat = exports.AvroFormat = exports.JsonFormat = exports.TextFormat = exports.LakeHouseLocation = exports.HdfsLocation = exports.HttpServerLocation = exports.SftpLocation = exports.FtpServerLocation = exports.GoogleCloudStorageLocation = exports.AzureFileStorageLocation = exports.FileServerLocation = exports.AmazonS3Location = exports.AzureDataLakeStoreLocation = exports.AzureBlobFSLocation = exports.AzureBlobStorageLocation = exports.DataFlowSink = exports.DataFlowSource = exports.ChainingTrigger = exports.TumblingWindowTrigger = exports.MultiplePipelineTrigger = exports.RerunTumblingWindowTrigger = exports.SqlPoolStoredProcedureActivity = exports.ExecutionActivity = exports.ControlActivity = exports.WarehouseLinkedService = exports.SalesforceServiceCloudV2LinkedService = exports.SalesforceV2LinkedService = void 0;
exports.MongoDbV2Source = exports.MongoDbAtlasSource = exports.MongoDbSource = exports.WebSource = exports.AmazonRdsForOracleSource = exports.OracleSource = exports.AzureDataExplorerSource = exports.HdfsSource = exports.FileSystemSource = exports.RestSource = exports.SalesforceServiceCloudSource = exports.ODataSource = exports.MicrosoftAccessSource = exports.RelationalSource = exports.CommonDataServiceForAppsSource = exports.DynamicsCrmSource = exports.DynamicsSource = exports.CosmosDbSqlApiSource = exports.DocumentDbCollectionSource = exports.BlobSource = exports.TabularSource = exports.BinarySource = exports.OrcSource = exports.XmlSource = exports.JsonSource = exports.DelimitedTextSource = exports.ParquetSource = exports.ExcelSource = exports.AvroSource = exports.IcebergWriteSettings = exports.JsonWriteSettings = exports.DelimitedTextWriteSettings = exports.ParquetWriteSettings = exports.OrcWriteSettings = exports.AvroWriteSettings = exports.TarGZipReadSettings = exports.TarReadSettings = exports.ZipDeflateReadSettings = exports.BinaryReadSettings = exports.XmlReadSettings = exports.JsonReadSettings = exports.DelimitedTextReadSettings = exports.ParquetReadSettings = exports.LakeHouseWriteSettings = exports.AzureFileStorageWriteSettings = exports.FileServerWriteSettings = exports.AzureDataLakeStoreWriteSettings = exports.AzureBlobFSWriteSettings = exports.AzureBlobStorageWriteSettings = exports.SftpWriteSettings = void 0;
exports.SalesforceSink = exports.AzureDataExplorerSink = exports.CommonDataServiceForAppsSink = exports.DynamicsCrmSink = exports.DynamicsSink = exports.MicrosoftAccessSink = exports.InformixSink = exports.OdbcSink = exports.AzureSearchIndexSink = exports.AzureBlobFSSink = exports.AzureDataLakeStoreSink = exports.OracleSink = exports.SnowflakeV2Sink = exports.SnowflakeSink = exports.SqlDWSink = exports.SqlMISink = exports.AzureSqlSink = exports.SqlServerSink = exports.SqlSink = exports.CosmosDbSqlApiSink = exports.DocumentDbCollectionSink = exports.FileSystemSink = exports.BlobSink = exports.IcebergSink = exports.BinarySink = exports.ParquetSink = exports.AvroSink = exports.AzureTableSink = exports.AzureQueueSink = exports.SapCloudForCustomerSink = exports.WarehouseSink = exports.AzureDatabricksDeltaLakeSink = exports.AzureMySqlSink = exports.AzurePostgreSqlSink = exports.TeradataSink = exports.RestSink = exports.OrcSink = exports.JsonSink = exports.DelimitedTextSink = exports.SalesforceServiceCloudV2Source = exports.SharePointOnlineListSource = exports.AzureDatabricksDeltaLakeSource = exports.SnowflakeV2Source = exports.SnowflakeSource = exports.LakeHouseTableSource = exports.HttpSource = exports.AzureBlobFSSource = exports.AzureDataLakeStoreSource = exports.Office365Source = exports.CosmosDbMongoDbApiSource = void 0;
exports.DataLakeAnalyticsUsqlActivity = exports.AzureMLExecutePipelineActivity = exports.AzureMLUpdateResourceActivity = exports.AzureMLBatchExecutionActivity = exports.GetMetadataActivity = exports.WebActivity = exports.LookupActivity = exports.AzureDataExplorerCommandActivity = exports.DeleteActivity = exports.SqlServerStoredProcedureActivity = exports.CustomActivity = exports.ExecuteSsisPackageActivity = exports.HDInsightSparkActivity = exports.HDInsightStreamingActivity = exports.HDInsightMapReduceActivity = exports.HDInsightPigActivity = exports.HDInsightHiveActivity = exports.CopyActivity = exports.WebHookActivity = exports.AppendVariableActivity = exports.SetVariableActivity = exports.FilterActivity = exports.ValidationActivity = exports.UntilActivity = exports.FailActivity = exports.WaitActivity = exports.ForEachActivity = exports.SwitchActivity = exports.IfConditionActivity = exports.ExecutePipelineActivity = exports.PrivateEndpointConnection = exports.Workspace = exports.SqlPool = exports.BigDataPoolResourceInfo = exports.SubResource = exports.LinkedIntegrationRuntimeRbacAuthorization = exports.LinkedIntegrationRuntimeKeyAuthorization = exports.SelfDependencyTumblingWindowTriggerReference = exports.TriggerDependencyReference = exports.TabularTranslator = exports.AzureDatabricksDeltaLakeExportCommand = exports.SnowflakeExportCopyCommand = exports.SnowflakeImportCopyCommand = exports.AzureDatabricksDeltaLakeImportCommand = exports.TeradataImportCommand = exports.SalesforceServiceCloudV2Sink = exports.SalesforceV2Sink = exports.LakeHouseTableSink = exports.CosmosDbMongoDbApiSink = exports.SalesforceServiceCloudSink = void 0;
exports.ImpalaSource = exports.HubspotSource = exports.HiveSource = exports.HBaseSource = exports.GreenplumSource = exports.GoogleBigQueryV2Source = exports.GoogleBigQuerySource = exports.EloquaSource = exports.DrillSource = exports.CouchbaseSource = exports.ConcurSource = exports.AzurePostgreSqlSource = exports.AmazonMWSSource = exports.CassandraSource = exports.TeradataSource = exports.AzureMySqlSource = exports.SqlDWSource = exports.SqlMISource = exports.AzureSqlSource = exports.AmazonRdsForSqlServerSource = exports.SqlServerSource = exports.SqlSource = exports.SapTableSource = exports.SapOdpSource = exports.SapOpenHubSource = exports.SapHanaSource = exports.SapEccSource = exports.SapCloudForCustomerSource = exports.SalesforceSource = exports.SapBwSource = exports.SybaseSource = exports.PostgreSqlV2Source = exports.PostgreSqlSource = exports.MySqlSource = exports.OdbcSource = exports.Db2Source = exports.InformixSource = exports.AzureTableSource = exports.CustomEventsTrigger = exports.BlobEventsTrigger = exports.BlobTrigger = exports.ScheduleTrigger = exports.SynapseSparkJobDefinitionActivity = exports.SynapseNotebookActivity = exports.ScriptActivity = exports.ExecuteDataFlowActivity = exports.AzureFunctionActivity = exports.DatabricksSparkPythonActivity = exports.DatabricksSparkJarActivity = exports.DatabricksNotebookActivity = void 0;
exports.discriminators = exports.DataFlowDebugSessionExecuteCommandHeaders = exports.DataFlowDebugSessionCreateDataFlowDebugSessionHeaders = exports.RunNotebookCreateRunHeaders = exports.RerunTriggerResource = exports.TriggerResource = exports.SparkJobDefinitionResource = exports.PipelineResource = exports.LinkedServiceResource = exports.LibraryResource = exports.IntegrationRuntimeResource = exports.DatasetResource = exports.DataFlowResource = exports.SparkConfigurationResource = exports.TumblingWindowTriggerDependencyReference = exports.ServiceNowV2Source = exports.SalesforceV2Source = exports.WarehouseSource = exports.AmazonRedshiftSource = exports.GoogleAdWordsSource = exports.OracleServiceCloudSource = exports.DynamicsAXSource = exports.ResponsysSource = exports.SalesforceMarketingCloudSource = exports.VerticaSource = exports.NetezzaSource = exports.ZohoSource = exports.XeroSource = exports.SquareSource = exports.SparkSource = exports.ShopifySource = exports.ServiceNowSource = exports.QuickBooksSource = exports.PrestoSource = exports.PhoenixSource = exports.PaypalSource = exports.MarketoSource = exports.AzureMariaDBSource = exports.MariaDBSource = exports.MagentoSource = exports.JiraSource = void 0;
exports.LinkConnectionListResponse = {
    type: {
        name: "Composite",
        className: "LinkConnectionListResponse",
        modelProperties: {
            value: {
                serializedName: "value",
                required: true,
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "Composite",
                            className: "LinkConnectionResource",
                        },
                    },
                },
            },
            nextLink: {
                serializedName: "nextLink",
                type: {
                    name: "String",
                },
            },
        },
    },
};
exports.LinkConnectionResource = {
    type: {
        name: "Composite",
        className: "LinkConnectionResource",
        modelProperties: {
            id: {
                serializedName: "id",
                type: {
                    name: "String",
                },
            },
            name: {
                serializedName: "name",
                type: {
                    name: "String",
                },
            },
            type: {
                serializedName: "type",
                type: {
                    name: "String",
                },
            },
            properties: {
                serializedName: "properties",
                type: {
                    name: "Composite",
                    className: "LinkConnection",
                },
            },
            description: {
                serializedName: "description",
                type: {
                    name: "String",
                },
            },
        },
    },
};
exports.LinkConnection = {
    type: {
        name: "Composite",
        className: "LinkConnection",
        modelProperties: {
            sourceDatabase: {
                serializedName: "sourceDatabase",
                type: {
                    name: "Composite",
                    className: "LinkConnectionSourceDatabase",
                },
            },
            targetDatabase: {
                serializedName: "targetDatabase",
                type: {
                    name: "Composite",
                    className: "LinkConnectionTargetDatabase",
                },
            },
            landingZone: {
                serializedName: "landingZone",
                type: {
                    name: "Composite",
                    className: "LinkConnectionLandingZone",
                },
            },
            compute: {
                serializedName: "compute",
                type: {
                    name: "Composite",
                    className: "LinkConnectionCompute",
                },
            },
        },
    },
};
exports.LinkConnectionSourceDatabase = {
    type: {
        name: "Composite",
        className: "LinkConnectionSourceDatabase",
        modelProperties: {
            linkedService: {
                serializedName: "linkedService",
                type: {
                    name: "Composite",
                    className: "LinkedServiceReference",
                },
            },
            typeProperties: {
                serializedName: "typeProperties",
                type: {
                    name: "Composite",
                    className: "LinkConnectionSourceDatabaseTypeProperties",
                },
            },
        },
    },
};
exports.LinkedServiceReference = {
    type: {
        name: "Composite",
        className: "LinkedServiceReference",
        modelProperties: {
            type: {
                serializedName: "type",
                required: true,
                type: {
                    name: "String",
                },
            },
            referenceName: {
                serializedName: "referenceName",
                required: true,
                type: {
                    name: "String",
                },
            },
            parameters: {
                serializedName: "parameters",
                type: {
                    name: "Dictionary",
                    value: { type: { name: "any" } },
                },
            },
        },
    },
};
exports.LinkConnectionSourceDatabaseTypeProperties = {
    type: {
        name: "Composite",
        className: "LinkConnectionSourceDatabaseTypeProperties",
        modelProperties: {
            resourceId: {
                serializedName: "resourceId",
                type: {
                    name: "String",
                },
            },
            principalId: {
                serializedName: "principalId",
                type: {
                    name: "String",
                },
            },
        },
    },
};
exports.LinkConnectionTargetDatabase = {
    type: {
        name: "Composite",
        className: "LinkConnectionTargetDatabase",
        modelProperties: {
            linkedService: {
                serializedName: "linkedService",
                type: {
                    name: "Composite",
                    className: "LinkedServiceReference",
                },
            },
            typeProperties: {
                serializedName: "typeProperties",
                type: {
                    name: "Composite",
                    className: "LinkConnectionTargetDatabaseTypeProperties",
                },
            },
        },
    },
};
exports.LinkConnectionTargetDatabaseTypeProperties = {
    type: {
        name: "Composite",
        className: "LinkConnectionTargetDatabaseTypeProperties",
        modelProperties: {
            crossTableTransaction: {
                serializedName: "crossTableTransaction",
                type: {
                    name: "Boolean",
                },
            },
            dropExistingTargetTableOnStart: {
                serializedName: "dropExistingTargetTableOnStart",
                type: {
                    name: "Boolean",
                },
            },
            actionOnExistingTargetTable: {
                serializedName: "actionOnExistingTargetTable",
                type: {
                    name: "String",
                },
            },
        },
    },
};
exports.LinkConnectionLandingZone = {
    type: {
        name: "Composite",
        className: "LinkConnectionLandingZone",
        modelProperties: {
            linkedService: {
                serializedName: "linkedService",
                type: {
                    name: "Composite",
                    className: "LinkedServiceReference",
                },
            },
            fileSystem: {
                serializedName: "fileSystem",
                type: {
                    name: "String",
                },
            },
            folderPath: {
                serializedName: "folderPath",
                type: {
                    name: "String",
                },
            },
            sasToken: {
                serializedName: "sasToken",
                type: {
                    name: "Composite",
                    className: "SecureString",
                },
            },
        },
    },
};
exports.SecretBase = {
    type: {
        name: "Composite",
        className: "SecretBase",
        uberParent: "SecretBase",
        polymorphicDiscriminator: {
            serializedName: "type",
            clientName: "type",
        },
        modelProperties: {
            type: {
                serializedName: "type",
                required: true,
                type: {
                    name: "String",
                },
            },
        },
    },
};
exports.LinkConnectionCompute = {
    type: {
        name: "Composite",
        className: "LinkConnectionCompute",
        modelProperties: {
            coreCount: {
                serializedName: "coreCount",
                type: {
                    name: "Number",
                },
            },
            computeType: {
                serializedName: "computeType",
                type: {
                    name: "String",
                },
            },
            dataProcessIntervalMinutes: {
                constraints: {
                    InclusiveMaximum: 60,
                    InclusiveMinimum: 20,
                },
                serializedName: "dataProcessIntervalMinutes",
                type: {
                    name: "Number",
                },
            },
        },
    },
};
exports.CloudError = {
    type: {
        name: "Composite",
        className: "CloudError",
        modelProperties: {
            code: {
                serializedName: "error.code",
                required: true,
                type: {
                    name: "String",
                },
            },
            message: {
                serializedName: "error.message",
                required: true,
                type: {
                    name: "String",
                },
            },
            target: {
                serializedName: "error.target",
                type: {
                    name: "String",
                },
            },
            details: {
                serializedName: "error.details",
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "Composite",
                            className: "CloudError",
                        },
                    },
                },
            },
        },
    },
};
exports.EditTablesRequest = {
    type: {
        name: "Composite",
        className: "EditTablesRequest",
        modelProperties: {
            linkTables: {
                serializedName: "linkTables",
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "Composite",
                            className: "LinkTableRequest",
                        },
                    },
                },
            },
        },
    },
};
exports.LinkTableRequest = {
    type: {
        name: "Composite",
        className: "LinkTableRequest",
        modelProperties: {
            id: {
                serializedName: "id",
                type: {
                    name: "String",
                },
            },
            source: {
                serializedName: "source",
                type: {
                    name: "Composite",
                    className: "LinkTableRequestSource",
                },
            },
            target: {
                serializedName: "target",
                type: {
                    name: "Composite",
                    className: "LinkTableRequestTarget",
                },
            },
            operationType: {
                serializedName: "operationType",
                type: {
                    name: "String",
                },
            },
        },
    },
};
exports.LinkTableRequestSource = {
    type: {
        name: "Composite",
        className: "LinkTableRequestSource",
        modelProperties: {
            tableName: {
                serializedName: "tableName",
                type: {
                    name: "String",
                },
            },
            schemaName: {
                serializedName: "schemaName",
                type: {
                    name: "String",
                },
            },
        },
    },
};
exports.LinkTableRequestTarget = {
    type: {
        name: "Composite",
        className: "LinkTableRequestTarget",
        modelProperties: {
            tableName: {
                serializedName: "tableName",
                type: {
                    name: "String",
                },
            },
            schemaName: {
                serializedName: "schemaName",
                type: {
                    name: "String",
                },
            },
            distributionOptions: {
                serializedName: "distributionOptions",
                type: {
                    name: "Composite",
                    className: "LinkTableRequestTargetDistributionOptions",
                },
            },
            structureOptions: {
                serializedName: "structureOptions",
                type: {
                    name: "Composite",
                    className: "LinkTableRequestTargetStructureOptions",
                },
            },
        },
    },
};
exports.LinkTableRequestTargetDistributionOptions = {
    type: {
        name: "Composite",
        className: "LinkTableRequestTargetDistributionOptions",
        modelProperties: {
            type: {
                serializedName: "type",
                type: {
                    name: "String",
                },
            },
            distributionColumn: {
                serializedName: "distributionColumn",
                type: {
                    name: "String",
                },
            },
        },
    },
};
exports.LinkTableRequestTargetStructureOptions = {
    type: {
        name: "Composite",
        className: "LinkTableRequestTargetStructureOptions",
        modelProperties: {
            type: {
                serializedName: "type",
                type: {
                    name: "String",
                },
            },
        },
    },
};
exports.LinkConnectionDetailedStatus = {
    type: {
        name: "Composite",
        className: "LinkConnectionDetailedStatus",
        modelProperties: {
            id: {
                serializedName: "id",
                type: {
                    name: "String",
                },
            },
            name: {
                serializedName: "name",
                type: {
                    name: "String",
                },
            },
            isApplyingChanges: {
                serializedName: "isApplyingChanges",
                type: {
                    name: "Boolean",
                },
            },
            isPartiallyFailed: {
                serializedName: "isPartiallyFailed",
                type: {
                    name: "Boolean",
                },
            },
            startTime: {
                serializedName: "startTime",
                type: {
                    name: "any",
                },
            },
            stopTime: {
                serializedName: "stopTime",
                type: {
                    name: "any",
                },
            },
            status: {
                serializedName: "status",
                type: {
                    name: "String",
                },
            },
            continuousRunId: {
                serializedName: "continuousRunId",
                type: {
                    name: "String",
                },
            },
            error: {
                serializedName: "error",
                type: {
                    name: "any",
                },
            },
            refreshStatus: {
                serializedName: "refreshStatus",
                type: {
                    name: "Composite",
                    className: "LinkConnectionRefreshStatus",
                },
            },
            landingZoneCredentialExpireTime: {
                serializedName: "landingZoneCredentialExpireTime",
                type: {
                    name: "DateTime",
                },
            },
        },
    },
};
exports.LinkConnectionRefreshStatus = {
    type: {
        name: "Composite",
        className: "LinkConnectionRefreshStatus",
        modelProperties: {
            refreshStatus: {
                serializedName: "refreshStatus",
                readOnly: true,
                type: {
                    name: "String",
                },
            },
            errorMessage: {
                serializedName: "errorMessage",
                readOnly: true,
                type: {
                    name: "String",
                },
            },
        },
    },
};
exports.LinkTableListResponse = {
    type: {
        name: "Composite",
        className: "LinkTableListResponse",
        modelProperties: {
            value: {
                serializedName: "value",
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "Composite",
                            className: "LinkTableResource",
                        },
                    },
                },
            },
        },
    },
};
exports.LinkTableResource = {
    type: {
        name: "Composite",
        className: "LinkTableResource",
        modelProperties: {
            id: {
                serializedName: "id",
                type: {
                    name: "String",
                },
            },
            name: {
                serializedName: "name",
                type: {
                    name: "String",
                },
            },
            source: {
                serializedName: "source",
                type: {
                    name: "Composite",
                    className: "LinkTableRequestSource",
                },
            },
            target: {
                serializedName: "target",
                type: {
                    name: "Composite",
                    className: "LinkTableRequestTarget",
                },
            },
        },
    },
};
exports.QueryTableStatusRequest = {
    type: {
        name: "Composite",
        className: "QueryTableStatusRequest",
        modelProperties: {
            maxSegmentCount: {
                constraints: {
                    InclusiveMaximum: 1000,
                },
                serializedName: "maxSegmentCount",
                type: {
                    name: "Number",
                },
            },
            continuationToken: {
                serializedName: "continuationToken",
                type: {
                    name: "any",
                },
            },
        },
    },
};
exports.LinkConnectionQueryTableStatus = {
    type: {
        name: "Composite",
        className: "LinkConnectionQueryTableStatus",
        modelProperties: {
            value: {
                serializedName: "value",
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "Composite",
                            className: "LinkTableStatus",
                        },
                    },
                },
            },
            continuationToken: {
                serializedName: "continuationToken",
                type: {
                    name: "any",
                },
            },
        },
    },
};
exports.LinkTableStatus = {
    type: {
        name: "Composite",
        className: "LinkTableStatus",
        modelProperties: {
            id: {
                serializedName: "id",
                type: {
                    name: "String",
                },
            },
            status: {
                serializedName: "status",
                type: {
                    name: "String",
                },
            },
            errorMessage: {
                serializedName: "errorMessage",
                type: {
                    name: "String",
                },
            },
            startTime: {
                serializedName: "startTime",
                type: {
                    name: "any",
                },
            },
            stopTime: {
                serializedName: "stopTime",
                type: {
                    name: "any",
                },
            },
            linkTableId: {
                serializedName: "linkTableId",
                type: {
                    name: "String",
                },
            },
            errorCode: {
                serializedName: "errorCode",
                type: {
                    name: "String",
                },
            },
            lastProcessedData: {
                serializedName: "lastProcessedData",
                type: {
                    name: "DateTime",
                },
            },
            lastTransactionCommitTime: {
                serializedName: "lastTransactionCommitTime",
                type: {
                    name: "DateTime",
                },
            },
        },
    },
};
exports.UpdateLandingZoneCredential = {
    type: {
        name: "Composite",
        className: "UpdateLandingZoneCredential",
        modelProperties: {
            sasToken: {
                serializedName: "sasToken",
                type: {
                    name: "Composite",
                    className: "SecureString",
                },
            },
        },
    },
};
exports.RunNotebookRequest = {
    type: {
        name: "Composite",
        className: "RunNotebookRequest",
        modelProperties: {
            notebook: {
                serializedName: "notebook",
                type: {
                    name: "String",
                },
            },
            sparkPool: {
                serializedName: "sparkPool",
                type: {
                    name: "String",
                },
            },
            sessionOptions: {
                serializedName: "sessionOptions",
                type: {
                    name: "Composite",
                    className: "RunNotebookSparkSessionOptions",
                },
            },
            honorSessionTimeToLive: {
                serializedName: "honorSessionTimeToLive",
                type: {
                    name: "Boolean",
                },
            },
            parameters: {
                serializedName: "parameters",
                type: {
                    name: "Dictionary",
                    value: {
                        type: { name: "Composite", className: "RunNotebookParameter" },
                    },
                },
            },
        },
    },
};
exports.RunNotebookSparkSessionOptions = {
    type: {
        name: "Composite",
        className: "RunNotebookSparkSessionOptions",
        modelProperties: {
            tags: {
                serializedName: "tags",
                type: {
                    name: "Dictionary",
                    value: { type: { name: "String" } },
                },
            },
            kind: {
                serializedName: "kind",
                type: {
                    name: "String",
                },
            },
            proxyUser: {
                serializedName: "proxyUser",
                type: {
                    name: "String",
                },
            },
            name: {
                serializedName: "name",
                type: {
                    name: "String",
                },
            },
            jars: {
                serializedName: "jars",
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "String",
                        },
                    },
                },
            },
            pythonFiles: {
                serializedName: "pyFiles",
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "String",
                        },
                    },
                },
            },
            files: {
                serializedName: "files",
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "String",
                        },
                    },
                },
            },
            archives: {
                serializedName: "archives",
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "String",
                        },
                    },
                },
            },
            queue: {
                serializedName: "queue",
                type: {
                    name: "any",
                },
            },
            configuration: {
                serializedName: "conf",
                type: {
                    name: "Dictionary",
                    value: { type: { name: "String" } },
                },
            },
            driverMemory: {
                serializedName: "driverMemory",
                type: {
                    name: "String",
                },
            },
            driverCores: {
                serializedName: "driverCores",
                type: {
                    name: "Number",
                },
            },
            executorMemory: {
                serializedName: "executorMemory",
                type: {
                    name: "String",
                },
            },
            executorCores: {
                serializedName: "executorCores",
                type: {
                    name: "Number",
                },
            },
            executorCount: {
                serializedName: "numExecutors",
                type: {
                    name: "Number",
                },
            },
            isQueueable: {
                serializedName: "isQueueable",
                type: {
                    name: "Boolean",
                },
            },
            heartbeatTimeoutInSecond: {
                serializedName: "heartbeatTimeoutInSecond",
                type: {
                    name: "Number",
                },
            },
        },
    },
};
exports.RunNotebookParameter = {
    type: {
        name: "Composite",
        className: "RunNotebookParameter",
        modelProperties: {
            type: {
                serializedName: "type",
                type: {
                    name: "String",
                },
            },
            value: {
                serializedName: "value",
                type: {
                    name: "any",
                },
            },
        },
    },
};
exports.RunNotebookResponse = {
    type: {
        name: "Composite",
        className: "RunNotebookResponse",
        modelProperties: {
            message: {
                serializedName: "message",
                readOnly: true,
                type: {
                    name: "String",
                },
            },
            result: {
                serializedName: "result",
                type: {
                    name: "Composite",
                    className: "RunNotebookResult",
                },
            },
        },
    },
};
exports.RunNotebookResult = {
    type: {
        name: "Composite",
        className: "RunNotebookResult",
        modelProperties: {
            runId: {
                serializedName: "runId",
                type: {
                    name: "String",
                },
            },
            runStatus: {
                serializedName: "runStatus",
                type: {
                    name: "String",
                },
            },
            lastCheckedOn: {
                serializedName: "lastCheckedOn",
                type: {
                    name: "String",
                },
            },
            sessionId: {
                serializedName: "sessionId",
                type: {
                    name: "String",
                },
            },
            sparkPool: {
                serializedName: "sparkPool",
                type: {
                    name: "String",
                },
            },
            sessionDetail: {
                serializedName: "sessionDetail",
                type: {
                    name: "any",
                },
            },
            exitValue: {
                serializedName: "exitValue",
                type: {
                    name: "String",
                },
            },
            error: {
                serializedName: "error",
                type: {
                    name: "Composite",
                    className: "RunNotebookError",
                },
            },
        },
    },
};
exports.RunNotebookError = {
    type: {
        name: "Composite",
        className: "RunNotebookError",
        modelProperties: {
            ename: {
                serializedName: "ename",
                readOnly: true,
                type: {
                    name: "String",
                },
            },
            evalue: {
                serializedName: "evalue",
                readOnly: true,
                type: {
                    name: "String",
                },
            },
            traceback: {
                serializedName: "traceback",
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "String",
                        },
                    },
                },
            },
        },
    },
};
exports.RunNotebookSnapshotResponse = {
    type: {
        name: "Composite",
        className: "RunNotebookSnapshotResponse",
        modelProperties: {
            message: {
                serializedName: "message",
                readOnly: true,
                type: {
                    name: "String",
                },
            },
            result: {
                serializedName: "result",
                type: {
                    name: "Composite",
                    className: "RunNotebookSnapshotResult",
                },
            },
        },
    },
};
exports.RunNotebookSnapshotResult = {
    type: {
        name: "Composite",
        className: "RunNotebookSnapshotResult",
        modelProperties: {
            snapshot: {
                serializedName: "snapshot",
                type: {
                    name: "Composite",
                    className: "RunNotebookSnapshot",
                },
            },
            error: {
                serializedName: "error",
                type: {
                    name: "Composite",
                    className: "RunNotebookError",
                },
            },
            runId: {
                serializedName: "runId",
                required: true,
                type: {
                    name: "String",
                },
            },
            runStatus: {
                serializedName: "runStatus",
                required: true,
                type: {
                    name: "String",
                },
            },
            lastCheckedOn: {
                serializedName: "lastCheckedOn",
                type: {
                    name: "String",
                },
            },
            sessionId: {
                serializedName: "sessionId",
                type: {
                    name: "String",
                },
            },
            sparkPool: {
                serializedName: "sparkPool",
                type: {
                    name: "String",
                },
            },
        },
    },
};
exports.RunNotebookSnapshot = {
    type: {
        name: "Composite",
        className: "RunNotebookSnapshot",
        modelProperties: {
            exitValue: {
                serializedName: "exitValue",
                type: {
                    name: "String",
                },
            },
            id: {
                serializedName: "id",
                required: true,
                type: {
                    name: "String",
                },
            },
            notebook: {
                serializedName: "notebook",
                required: true,
                type: {
                    name: "String",
                },
            },
            sessionOptions: {
                serializedName: "sessionOptions",
                type: {
                    name: "Composite",
                    className: "RunNotebookSparkSessionOptions",
                },
            },
            honorSessionTimeToLive: {
                serializedName: "honorSessionTimeToLive",
                type: {
                    name: "Boolean",
                },
            },
            sessionId: {
                serializedName: "sessionId",
                type: {
                    name: "String",
                },
            },
            sparkPool: {
                serializedName: "sparkPool",
                type: {
                    name: "String",
                },
            },
            parameters: {
                serializedName: "parameters",
                type: {
                    name: "Dictionary",
                    value: {
                        type: { name: "Composite", className: "RunNotebookParameter" },
                    },
                },
            },
            notebookContent: {
                serializedName: "notebookContent",
                type: {
                    name: "Composite",
                    className: "NotebookResource",
                },
            },
        },
    },
};
exports.NotebookResource = {
    type: {
        name: "Composite",
        className: "NotebookResource",
        modelProperties: {
            id: {
                serializedName: "id",
                readOnly: true,
                type: {
                    name: "String",
                },
            },
            name: {
                serializedName: "name",
                required: true,
                type: {
                    name: "String",
                },
            },
            type: {
                serializedName: "type",
                readOnly: true,
                type: {
                    name: "String",
                },
            },
            etag: {
                serializedName: "etag",
                readOnly: true,
                type: {
                    name: "String",
                },
            },
            properties: {
                serializedName: "properties",
                type: {
                    name: "Composite",
                    className: "Notebook",
                },
            },
        },
    },
};
exports.Notebook = {
    type: {
        name: "Composite",
        className: "Notebook",
        additionalProperties: { type: { name: "Object" } },
        modelProperties: {
            description: {
                serializedName: "description",
                type: {
                    name: "String",
                },
            },
            bigDataPool: {
                serializedName: "bigDataPool",
                type: {
                    name: "Composite",
                    className: "BigDataPoolReference",
                },
            },
            targetSparkConfiguration: {
                serializedName: "targetSparkConfiguration",
                type: {
                    name: "Composite",
                    className: "SparkConfigurationReference",
                },
            },
            sessionProperties: {
                serializedName: "sessionProperties",
                type: {
                    name: "Composite",
                    className: "NotebookSessionProperties",
                },
            },
            metadata: {
                serializedName: "metadata",
                type: {
                    name: "Composite",
                    className: "NotebookMetadata",
                },
            },
            nbformat: {
                serializedName: "nbformat",
                required: true,
                type: {
                    name: "Number",
                },
            },
            nbformatMinor: {
                serializedName: "nbformat_minor",
                required: true,
                type: {
                    name: "Number",
                },
            },
            cells: {
                serializedName: "cells",
                required: true,
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "Composite",
                            className: "NotebookCell",
                        },
                    },
                },
            },
            folder: {
                serializedName: "folder",
                type: {
                    name: "Composite",
                    className: "NotebookFolder",
                },
            },
        },
    },
};
exports.BigDataPoolReference = {
    type: {
        name: "Composite",
        className: "BigDataPoolReference",
        modelProperties: {
            type: {
                serializedName: "type",
                required: true,
                type: {
                    name: "String",
                },
            },
            referenceName: {
                serializedName: "referenceName",
                required: true,
                type: {
                    name: "String",
                },
            },
        },
    },
};
exports.SparkConfigurationReference = {
    type: {
        name: "Composite",
        className: "SparkConfigurationReference",
        modelProperties: {
            type: {
                serializedName: "type",
                required: true,
                type: {
                    name: "String",
                },
            },
            referenceName: {
                serializedName: "referenceName",
                required: true,
                type: {
                    name: "String",
                },
            },
        },
    },
};
exports.NotebookSessionProperties = {
    type: {
        name: "Composite",
        className: "NotebookSessionProperties",
        modelProperties: {
            driverMemory: {
                serializedName: "driverMemory",
                required: true,
                type: {
                    name: "String",
                },
            },
            driverCores: {
                serializedName: "driverCores",
                required: true,
                type: {
                    name: "Number",
                },
            },
            executorMemory: {
                serializedName: "executorMemory",
                required: true,
                type: {
                    name: "String",
                },
            },
            executorCores: {
                serializedName: "executorCores",
                required: true,
                type: {
                    name: "Number",
                },
            },
            numExecutors: {
                serializedName: "numExecutors",
                required: true,
                type: {
                    name: "Number",
                },
            },
        },
    },
};
exports.NotebookMetadata = {
    type: {
        name: "Composite",
        className: "NotebookMetadata",
        additionalProperties: { type: { name: "Object" } },
        modelProperties: {
            kernelspec: {
                serializedName: "kernelspec",
                type: {
                    name: "Composite",
                    className: "NotebookKernelSpec",
                },
            },
            languageInfo: {
                serializedName: "language_info",
                type: {
                    name: "Composite",
                    className: "NotebookLanguageInfo",
                },
            },
        },
    },
};
exports.NotebookKernelSpec = {
    type: {
        name: "Composite",
        className: "NotebookKernelSpec",
        additionalProperties: { type: { name: "Object" } },
        modelProperties: {
            name: {
                serializedName: "name",
                required: true,
                type: {
                    name: "String",
                },
            },
            displayName: {
                serializedName: "display_name",
                required: true,
                type: {
                    name: "String",
                },
            },
        },
    },
};
exports.NotebookLanguageInfo = {
    type: {
        name: "Composite",
        className: "NotebookLanguageInfo",
        additionalProperties: { type: { name: "Object" } },
        modelProperties: {
            name: {
                serializedName: "name",
                required: true,
                type: {
                    name: "String",
                },
            },
            codemirrorMode: {
                serializedName: "codemirror_mode",
                type: {
                    name: "String",
                },
            },
        },
    },
};
exports.NotebookCell = {
    type: {
        name: "Composite",
        className: "NotebookCell",
        additionalProperties: { type: { name: "Object" } },
        modelProperties: {
            cellType: {
                serializedName: "cell_type",
                required: true,
                type: {
                    name: "String",
                },
            },
            metadata: {
                serializedName: "metadata",
                required: true,
                type: {
                    name: "any",
                },
            },
            source: {
                serializedName: "source",
                required: true,
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "String",
                        },
                    },
                },
            },
            attachments: {
                serializedName: "attachments",
                nullable: true,
                type: {
                    name: "any",
                },
            },
            outputs: {
                serializedName: "outputs",
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "Composite",
                            className: "NotebookCellOutputItem",
                        },
                    },
                },
            },
        },
    },
};
exports.NotebookCellOutputItem = {
    type: {
        name: "Composite",
        className: "NotebookCellOutputItem",
        modelProperties: {
            name: {
                serializedName: "name",
                type: {
                    name: "String",
                },
            },
            executionCount: {
                serializedName: "execution_count",
                type: {
                    name: "Number",
                },
            },
            outputType: {
                serializedName: "output_type",
                required: true,
                type: {
                    name: "String",
                },
            },
            text: {
                serializedName: "text",
                type: {
                    name: "any",
                },
            },
            data: {
                serializedName: "data",
                type: {
                    name: "any",
                },
            },
            metadata: {
                serializedName: "metadata",
                type: {
                    name: "any",
                },
            },
        },
    },
};
exports.NotebookFolder = {
    type: {
        name: "Composite",
        className: "NotebookFolder",
        modelProperties: {
            name: {
                serializedName: "name",
                type: {
                    name: "String",
                },
            },
        },
    },
};
exports.KqlScriptsResourceCollectionResponse = {
    type: {
        name: "Composite",
        className: "KqlScriptsResourceCollectionResponse",
        modelProperties: {
            value: {
                serializedName: "value",
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "Composite",
                            className: "KqlScriptResource",
                        },
                    },
                },
            },
            nextLink: {
                serializedName: "nextLink",
                type: {
                    name: "String",
                },
            },
        },
    },
};
exports.KqlScriptResource = {
    type: {
        name: "Composite",
        className: "KqlScriptResource",
        modelProperties: {
            id: {
                serializedName: "id",
                type: {
                    name: "String",
                },
            },
            name: {
                serializedName: "name",
                type: {
                    name: "String",
                },
            },
            type: {
                serializedName: "type",
                type: {
                    name: "String",
                },
            },
            properties: {
                serializedName: "properties",
                type: {
                    name: "Composite",
                    className: "KqlScript",
                },
            },
        },
    },
};
exports.KqlScript = {
    type: {
        name: "Composite",
        className: "KqlScript",
        modelProperties: {
            content: {
                serializedName: "content",
                type: {
                    name: "Composite",
                    className: "KqlScriptContent",
                },
            },
        },
    },
};
exports.KqlScriptContent = {
    type: {
        name: "Composite",
        className: "KqlScriptContent",
        modelProperties: {
            query: {
                serializedName: "query",
                type: {
                    name: "String",
                },
            },
            metadata: {
                serializedName: "metadata",
                type: {
                    name: "Composite",
                    className: "KqlScriptContentMetadata",
                },
            },
            currentConnection: {
                serializedName: "currentConnection",
                type: {
                    name: "Composite",
                    className: "KqlScriptContentCurrentConnection",
                },
            },
        },
    },
};
exports.KqlScriptContentMetadata = {
    type: {
        name: "Composite",
        className: "KqlScriptContentMetadata",
        modelProperties: {
            language: {
                serializedName: "language",
                type: {
                    name: "String",
                },
            },
        },
    },
};
exports.KqlScriptContentCurrentConnection = {
    type: {
        name: "Composite",
        className: "KqlScriptContentCurrentConnection",
        modelProperties: {
            name: {
                serializedName: "name",
                type: {
                    name: "String",
                },
            },
            poolName: {
                serializedName: "poolName",
                type: {
                    name: "String",
                },
            },
            databaseName: {
                serializedName: "databaseName",
                type: {
                    name: "String",
                },
            },
            type: {
                serializedName: "type",
                type: {
                    name: "String",
                },
            },
        },
    },
};
exports.ErrorContract = {
    type: {
        name: "Composite",
        className: "ErrorContract",
        modelProperties: {
            error: {
                serializedName: "error",
                type: {
                    name: "Composite",
                    className: "ErrorResponse",
                },
            },
        },
    },
};
exports.ErrorResponse = {
    type: {
        name: "Composite",
        className: "ErrorResponse",
        modelProperties: {
            code: {
                serializedName: "code",
                readOnly: true,
                type: {
                    name: "String",
                },
            },
            message: {
                serializedName: "message",
                readOnly: true,
                type: {
                    name: "String",
                },
            },
            target: {
                serializedName: "target",
                readOnly: true,
                type: {
                    name: "String",
                },
            },
            details: {
                serializedName: "details",
                readOnly: true,
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "Composite",
                            className: "ErrorResponse",
                        },
                    },
                },
            },
            additionalInfo: {
                serializedName: "additionalInfo",
                readOnly: true,
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "Composite",
                            className: "ErrorAdditionalInfo",
                        },
                    },
                },
            },
        },
    },
};
exports.ErrorAdditionalInfo = {
    type: {
        name: "Composite",
        className: "ErrorAdditionalInfo",
        modelProperties: {
            type: {
                serializedName: "type",
                readOnly: true,
                type: {
                    name: "String",
                },
            },
            info: {
                serializedName: "info",
                readOnly: true,
                type: {
                    name: "any",
                },
            },
        },
    },
};
exports.ArtifactRenameRequest = {
    type: {
        name: "Composite",
        className: "ArtifactRenameRequest",
        modelProperties: {
            newName: {
                constraints: {
                    Pattern: new RegExp("^[A-Za-z0-9_][^<>*#.%&:\\\\+?/]*$"),
                    MaxLength: 260,
                    MinLength: 1,
                },
                serializedName: "newName",
                type: {
                    name: "String",
                },
            },
        },
    },
};
exports.MetastoreRegisterObject = {
    type: {
        name: "Composite",
        className: "MetastoreRegisterObject",
        modelProperties: {
            inputFolder: {
                serializedName: "inputFolder",
                required: true,
                type: {
                    name: "String",
                },
            },
        },
    },
};
exports.MetastoreRegistrationResponse = {
    type: {
        name: "Composite",
        className: "MetastoreRegistrationResponse",
        modelProperties: {
            status: {
                serializedName: "status",
                type: {
                    name: "String",
                },
            },
        },
    },
};
exports.MetastoreRequestSuccessResponse = {
    type: {
        name: "Composite",
        className: "MetastoreRequestSuccessResponse",
        modelProperties: {
            status: {
                serializedName: "status",
                type: {
                    name: "String",
                },
            },
        },
    },
};
exports.MetastoreUpdateObject = {
    type: {
        name: "Composite",
        className: "MetastoreUpdateObject",
        modelProperties: {
            inputFolder: {
                serializedName: "inputFolder",
                required: true,
                type: {
                    name: "String",
                },
            },
        },
    },
};
exports.MetastoreUpdationResponse = {
    type: {
        name: "Composite",
        className: "MetastoreUpdationResponse",
        modelProperties: {
            status: {
                serializedName: "status",
                type: {
                    name: "String",
                },
            },
        },
    },
};
exports.SparkConfigurationListResponse = {
    type: {
        name: "Composite",
        className: "SparkConfigurationListResponse",
        modelProperties: {
            value: {
                serializedName: "value",
                required: true,
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "Composite",
                            className: "SparkConfigurationResource",
                        },
                    },
                },
            },
            nextLink: {
                serializedName: "nextLink",
                type: {
                    name: "String",
                },
            },
        },
    },
};
exports.SparkConfiguration = {
    type: {
        name: "Composite",
        className: "SparkConfiguration",
        modelProperties: {
            description: {
                serializedName: "description",
                type: {
                    name: "String",
                },
            },
            configs: {
                serializedName: "configs",
                required: true,
                type: {
                    name: "Dictionary",
                    value: { type: { name: "String" } },
                },
            },
            annotations: {
                serializedName: "annotations",
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "String",
                        },
                    },
                },
            },
            notes: {
                serializedName: "notes",
                type: {
                    name: "String",
                },
            },
            createdBy: {
                serializedName: "createdBy",
                type: {
                    name: "String",
                },
            },
            created: {
                serializedName: "created",
                type: {
                    name: "DateTime",
                },
            },
            configMergeRule: {
                serializedName: "configMergeRule",
                type: {
                    name: "Dictionary",
                    value: { type: { name: "String" } },
                },
            },
        },
    },
};
exports.Resource = {
    type: {
        name: "Composite",
        className: "Resource",
        modelProperties: {
            id: {
                serializedName: "id",
                readOnly: true,
                type: {
                    name: "String",
                },
            },
            name: {
                serializedName: "name",
                readOnly: true,
                type: {
                    name: "String",
                },
            },
            type: {
                serializedName: "type",
                readOnly: true,
                type: {
                    name: "String",
                },
            },
        },
    },
};
exports.BigDataPoolResourceInfoListResult = {
    type: {
        name: "Composite",
        className: "BigDataPoolResourceInfoListResult",
        modelProperties: {
            nextLink: {
                serializedName: "nextLink",
                type: {
                    name: "String",
                },
            },
            value: {
                serializedName: "value",
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "Composite",
                            className: "BigDataPoolResourceInfo",
                        },
                    },
                },
            },
        },
    },
};
exports.AutoScaleProperties = {
    type: {
        name: "Composite",
        className: "AutoScaleProperties",
        modelProperties: {
            minNodeCount: {
                serializedName: "minNodeCount",
                type: {
                    name: "Number",
                },
            },
            enabled: {
                serializedName: "enabled",
                type: {
                    name: "Boolean",
                },
            },
            maxNodeCount: {
                serializedName: "maxNodeCount",
                type: {
                    name: "Number",
                },
            },
        },
    },
};
exports.AutoPauseProperties = {
    type: {
        name: "Composite",
        className: "AutoPauseProperties",
        modelProperties: {
            delayInMinutes: {
                serializedName: "delayInMinutes",
                type: {
                    name: "Number",
                },
            },
            enabled: {
                serializedName: "enabled",
                type: {
                    name: "Boolean",
                },
            },
        },
    },
};
exports.DynamicExecutorAllocation = {
    type: {
        name: "Composite",
        className: "DynamicExecutorAllocation",
        modelProperties: {
            enabled: {
                serializedName: "enabled",
                type: {
                    name: "Boolean",
                },
            },
        },
    },
};
exports.LibraryRequirements = {
    type: {
        name: "Composite",
        className: "LibraryRequirements",
        modelProperties: {
            time: {
                serializedName: "time",
                readOnly: true,
                type: {
                    name: "DateTime",
                },
            },
            content: {
                serializedName: "content",
                type: {
                    name: "String",
                },
            },
            filename: {
                serializedName: "filename",
                type: {
                    name: "String",
                },
            },
        },
    },
};
exports.LibraryInfo = {
    type: {
        name: "Composite",
        className: "LibraryInfo",
        modelProperties: {
            name: {
                serializedName: "name",
                type: {
                    name: "String",
                },
            },
            path: {
                serializedName: "path",
                type: {
                    name: "String",
                },
            },
            containerName: {
                serializedName: "containerName",
                type: {
                    name: "String",
                },
            },
            uploadedTimestamp: {
                serializedName: "uploadedTimestamp",
                type: {
                    name: "DateTime",
                },
            },
            type: {
                serializedName: "type",
                type: {
                    name: "String",
                },
            },
            provisioningStatus: {
                serializedName: "provisioningStatus",
                readOnly: true,
                type: {
                    name: "String",
                },
            },
            creatorId: {
                serializedName: "creatorId",
                readOnly: true,
                type: {
                    name: "String",
                },
            },
        },
    },
};
exports.DataFlow = {
    type: {
        name: "Composite",
        className: "DataFlow",
        uberParent: "DataFlow",
        polymorphicDiscriminator: {
            serializedName: "type",
            clientName: "type",
        },
        modelProperties: {
            type: {
                serializedName: "type",
                required: true,
                type: {
                    name: "String",
                },
            },
            description: {
                serializedName: "description",
                type: {
                    name: "String",
                },
            },
            annotations: {
                serializedName: "annotations",
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "any",
                        },
                    },
                },
            },
            folder: {
                serializedName: "folder",
                type: {
                    name: "Composite",
                    className: "DataFlowFolder",
                },
            },
        },
    },
};
exports.DataFlowFolder = {
    type: {
        name: "Composite",
        className: "DataFlowFolder",
        modelProperties: {
            name: {
                serializedName: "name",
                type: {
                    name: "String",
                },
            },
        },
    },
};
exports.DataFlowListResponse = {
    type: {
        name: "Composite",
        className: "DataFlowListResponse",
        modelProperties: {
            value: {
                serializedName: "value",
                required: true,
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "Composite",
                            className: "DataFlowResource",
                        },
                    },
                },
            },
            nextLink: {
                serializedName: "nextLink",
                type: {
                    name: "String",
                },
            },
        },
    },
};
exports.CreateDataFlowDebugSessionRequest = {
    type: {
        name: "Composite",
        className: "CreateDataFlowDebugSessionRequest",
        modelProperties: {
            computeType: {
                serializedName: "computeType",
                type: {
                    name: "String",
                },
            },
            coreCount: {
                serializedName: "coreCount",
                type: {
                    name: "Number",
                },
            },
            timeToLive: {
                serializedName: "timeToLive",
                type: {
                    name: "Number",
                },
            },
            integrationRuntime: {
                serializedName: "integrationRuntime",
                type: {
                    name: "Composite",
                    className: "IntegrationRuntimeDebugResource",
                },
            },
        },
    },
};
exports.IntegrationRuntime = {
    serializedName: "IntegrationRuntime",
    type: {
        name: "Composite",
        className: "IntegrationRuntime",
        uberParent: "IntegrationRuntime",
        additionalProperties: { type: { name: "Object" } },
        polymorphicDiscriminator: {
            serializedName: "type",
            clientName: "type",
        },
        modelProperties: {
            type: {
                serializedName: "type",
                required: true,
                type: {
                    name: "String",
                },
            },
            description: {
                serializedName: "description",
                type: {
                    name: "String",
                },
            },
        },
    },
};
exports.SubResourceDebugResource = {
    type: {
        name: "Composite",
        className: "SubResourceDebugResource",
        modelProperties: {
            name: {
                serializedName: "name",
                type: {
                    name: "String",
                },
            },
        },
    },
};
exports.CreateDataFlowDebugSessionResponse = {
    type: {
        name: "Composite",
        className: "CreateDataFlowDebugSessionResponse",
        modelProperties: {
            sessionId: {
                serializedName: "sessionId",
                type: {
                    name: "String",
                },
            },
        },
    },
};
exports.QueryDataFlowDebugSessionsResponse = {
    type: {
        name: "Composite",
        className: "QueryDataFlowDebugSessionsResponse",
        modelProperties: {
            value: {
                serializedName: "value",
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "Composite",
                            className: "DataFlowDebugSessionInfo",
                        },
                    },
                },
            },
            nextLink: {
                serializedName: "nextLink",
                type: {
                    name: "String",
                },
            },
        },
    },
};
exports.DataFlowDebugSessionInfo = {
    type: {
        name: "Composite",
        className: "DataFlowDebugSessionInfo",
        additionalProperties: { type: { name: "Object" } },
        modelProperties: {
            dataFlowName: {
                serializedName: "dataFlowName",
                type: {
                    name: "String",
                },
            },
            computeType: {
                serializedName: "computeType",
                type: {
                    name: "String",
                },
            },
            coreCount: {
                serializedName: "coreCount",
                type: {
                    name: "Number",
                },
            },
            nodeCount: {
                serializedName: "nodeCount",
                type: {
                    name: "Number",
                },
            },
            integrationRuntimeName: {
                serializedName: "integrationRuntimeName",
                type: {
                    name: "String",
                },
            },
            sessionId: {
                serializedName: "sessionId",
                type: {
                    name: "String",
                },
            },
            startTime: {
                serializedName: "startTime",
                type: {
                    name: "String",
                },
            },
            timeToLiveInMinutes: {
                serializedName: "timeToLiveInMinutes",
                type: {
                    name: "Number",
                },
            },
            lastActivityTime: {
                serializedName: "lastActivityTime",
                type: {
                    name: "String",
                },
            },
        },
    },
};
exports.DataFlowDebugPackage = {
    type: {
        name: "Composite",
        className: "DataFlowDebugPackage",
        additionalProperties: { type: { name: "Object" } },
        modelProperties: {
            sessionId: {
                serializedName: "sessionId",
                type: {
                    name: "String",
                },
            },
            dataFlow: {
                serializedName: "dataFlow",
                type: {
                    name: "Composite",
                    className: "DataFlowDebugResource",
                },
            },
            dataFlows: {
                serializedName: "dataFlows",
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "Composite",
                            className: "DataFlowDebugResource",
                        },
                    },
                },
            },
            datasets: {
                serializedName: "datasets",
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "Composite",
                            className: "DatasetDebugResource",
                        },
                    },
                },
            },
            linkedServices: {
                serializedName: "linkedServices",
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "Composite",
                            className: "LinkedServiceDebugResource",
                        },
                    },
                },
            },
            staging: {
                serializedName: "staging",
                type: {
                    name: "Composite",
                    className: "DataFlowStagingInfo",
                },
            },
            debugSettings: {
                serializedName: "debugSettings",
                type: {
                    name: "Composite",
                    className: "DataFlowDebugPackageDebugSettings",
                },
            },
        },
    },
};
exports.Dataset = {
    serializedName: "Dataset",
    type: {
        name: "Composite",
        className: "Dataset",
        uberParent: "Dataset",
        additionalProperties: { type: { name: "Object" } },
        polymorphicDiscriminator: {
            serializedName: "type",
            clientName: "type",
        },
        modelProperties: {
            type: {
                serializedName: "type",
                required: true,
                type: {
                    name: "String",
                },
            },
            description: {
                serializedName: "description",
                type: {
                    name: "String",
                },
            },
            structure: {
                serializedName: "structure",
                type: {
                    name: "any",
                },
            },
            schema: {
                serializedName: "schema",
                type: {
                    name: "any",
                },
            },
            linkedServiceName: {
                serializedName: "linkedServiceName",
                type: {
                    name: "Composite",
                    className: "LinkedServiceReference",
                },
            },
            parameters: {
                serializedName: "parameters",
                type: {
                    name: "Dictionary",
                    value: {
                        type: { name: "Composite", className: "ParameterSpecification" },
                    },
                },
            },
            annotations: {
                serializedName: "annotations",
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "any",
                        },
                    },
                },
            },
            folder: {
                serializedName: "folder",
                type: {
                    name: "Composite",
                    className: "DatasetFolder",
                },
            },
        },
    },
};
exports.ParameterSpecification = {
    type: {
        name: "Composite",
        className: "ParameterSpecification",
        modelProperties: {
            type: {
                serializedName: "type",
                required: true,
                type: {
                    name: "String",
                },
            },
            defaultValue: {
                serializedName: "defaultValue",
                type: {
                    name: "any",
                },
            },
        },
    },
};
exports.DatasetFolder = {
    type: {
        name: "Composite",
        className: "DatasetFolder",
        modelProperties: {
            name: {
                serializedName: "name",
                type: {
                    name: "String",
                },
            },
        },
    },
};
exports.LinkedService = {
    serializedName: "LinkedService",
    type: {
        name: "Composite",
        className: "LinkedService",
        uberParent: "LinkedService",
        additionalProperties: { type: { name: "Object" } },
        polymorphicDiscriminator: {
            serializedName: "type",
            clientName: "type",
        },
        modelProperties: {
            type: {
                serializedName: "type",
                required: true,
                type: {
                    name: "String",
                },
            },
            version: {
                serializedName: "version",
                type: {
                    name: "String",
                },
            },
            connectVia: {
                serializedName: "connectVia",
                type: {
                    name: "Composite",
                    className: "IntegrationRuntimeReference",
                },
            },
            description: {
                serializedName: "description",
                type: {
                    name: "String",
                },
            },
            parameters: {
                serializedName: "parameters",
                type: {
                    name: "Dictionary",
                    value: {
                        type: { name: "Composite", className: "ParameterSpecification" },
                    },
                },
            },
            annotations: {
                serializedName: "annotations",
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "any",
                        },
                    },
                },
            },
        },
    },
};
exports.IntegrationRuntimeReference = {
    type: {
        name: "Composite",
        className: "IntegrationRuntimeReference",
        modelProperties: {
            type: {
                serializedName: "type",
                required: true,
                type: {
                    name: "String",
                },
            },
            referenceName: {
                serializedName: "referenceName",
                required: true,
                type: {
                    name: "String",
                },
            },
            parameters: {
                serializedName: "parameters",
                type: {
                    name: "Dictionary",
                    value: { type: { name: "any" } },
                },
            },
        },
    },
};
exports.DataFlowStagingInfo = {
    type: {
        name: "Composite",
        className: "DataFlowStagingInfo",
        modelProperties: {
            linkedService: {
                serializedName: "linkedService",
                type: {
                    name: "Composite",
                    className: "LinkedServiceReference",
                },
            },
            folderPath: {
                serializedName: "folderPath",
                type: {
                    name: "any",
                },
            },
        },
    },
};
exports.DataFlowDebugPackageDebugSettings = {
    type: {
        name: "Composite",
        className: "DataFlowDebugPackageDebugSettings",
        modelProperties: {
            sourceSettings: {
                serializedName: "sourceSettings",
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "Composite",
                            className: "DataFlowSourceSetting",
                        },
                    },
                },
            },
            parameters: {
                serializedName: "parameters",
                type: {
                    name: "Dictionary",
                    value: { type: { name: "any" } },
                },
            },
            datasetParameters: {
                serializedName: "datasetParameters",
                type: {
                    name: "any",
                },
            },
        },
    },
};
exports.DataFlowSourceSetting = {
    type: {
        name: "Composite",
        className: "DataFlowSourceSetting",
        additionalProperties: { type: { name: "Object" } },
        modelProperties: {
            sourceName: {
                serializedName: "sourceName",
                type: {
                    name: "String",
                },
            },
            rowLimit: {
                serializedName: "rowLimit",
                type: {
                    name: "Number",
                },
            },
        },
    },
};
exports.AddDataFlowToDebugSessionResponse = {
    type: {
        name: "Composite",
        className: "AddDataFlowToDebugSessionResponse",
        modelProperties: {
            jobVersion: {
                serializedName: "jobVersion",
                type: {
                    name: "String",
                },
            },
        },
    },
};
exports.DeleteDataFlowDebugSessionRequest = {
    type: {
        name: "Composite",
        className: "DeleteDataFlowDebugSessionRequest",
        modelProperties: {
            sessionId: {
                serializedName: "sessionId",
                type: {
                    name: "String",
                },
            },
            dataFlowName: {
                serializedName: "dataFlowName",
                type: {
                    name: "String",
                },
            },
        },
    },
};
exports.DataFlowDebugCommandRequest = {
    type: {
        name: "Composite",
        className: "DataFlowDebugCommandRequest",
        modelProperties: {
            sessionId: {
                serializedName: "sessionId",
                type: {
                    name: "String",
                },
            },
            command: {
                serializedName: "command",
                type: {
                    name: "String",
                },
            },
            commandPayload: {
                serializedName: "commandPayload",
                type: {
                    name: "Composite",
                    className: "DataFlowDebugCommandPayload",
                },
            },
        },
    },
};
exports.DataFlowDebugCommandPayload = {
    type: {
        name: "Composite",
        className: "DataFlowDebugCommandPayload",
        modelProperties: {
            streamName: {
                serializedName: "streamName",
                required: true,
                type: {
                    name: "String",
                },
            },
            rowLimits: {
                serializedName: "rowLimits",
                type: {
                    name: "Number",
                },
            },
            columns: {
                serializedName: "columns",
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "String",
                        },
                    },
                },
            },
            expression: {
                serializedName: "expression",
                type: {
                    name: "String",
                },
            },
        },
    },
};
exports.DataFlowDebugCommandResponse = {
    type: {
        name: "Composite",
        className: "DataFlowDebugCommandResponse",
        modelProperties: {
            status: {
                serializedName: "status",
                type: {
                    name: "String",
                },
            },
            data: {
                serializedName: "data",
                type: {
                    name: "String",
                },
            },
        },
    },
};
exports.DatasetListResponse = {
    type: {
        name: "Composite",
        className: "DatasetListResponse",
        modelProperties: {
            value: {
                serializedName: "value",
                required: true,
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "Composite",
                            className: "DatasetResource",
                        },
                    },
                },
            },
            nextLink: {
                serializedName: "nextLink",
                type: {
                    name: "String",
                },
            },
        },
    },
};
exports.GitHubAccessTokenRequest = {
    type: {
        name: "Composite",
        className: "GitHubAccessTokenRequest",
        modelProperties: {
            gitHubClientId: {
                serializedName: "gitHubClientId",
                required: true,
                type: {
                    name: "String",
                },
            },
            gitHubAccessCode: {
                serializedName: "gitHubAccessCode",
                required: true,
                type: {
                    name: "String",
                },
            },
            gitHubAccessTokenBaseUrl: {
                serializedName: "gitHubAccessTokenBaseUrl",
                required: true,
                type: {
                    name: "String",
                },
            },
        },
    },
};
exports.GitHubAccessTokenResponse = {
    type: {
        name: "Composite",
        className: "GitHubAccessTokenResponse",
        modelProperties: {
            gitHubAccessToken: {
                serializedName: "gitHubAccessToken",
                type: {
                    name: "String",
                },
            },
        },
    },
};
exports.IntegrationRuntimeListResponse = {
    type: {
        name: "Composite",
        className: "IntegrationRuntimeListResponse",
        modelProperties: {
            value: {
                serializedName: "value",
                required: true,
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "Composite",
                            className: "IntegrationRuntimeResource",
                        },
                    },
                },
            },
            nextLink: {
                serializedName: "nextLink",
                type: {
                    name: "String",
                },
            },
        },
    },
};
exports.LibraryListResponse = {
    type: {
        name: "Composite",
        className: "LibraryListResponse",
        modelProperties: {
            value: {
                serializedName: "value",
                required: true,
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "Composite",
                            className: "LibraryResource",
                        },
                    },
                },
            },
            nextLink: {
                serializedName: "nextLink",
                type: {
                    name: "String",
                },
            },
        },
    },
};
exports.LibraryResourceProperties = {
    type: {
        name: "Composite",
        className: "LibraryResourceProperties",
        modelProperties: {
            name: {
                serializedName: "name",
                readOnly: true,
                type: {
                    name: "String",
                },
            },
            path: {
                serializedName: "path",
                readOnly: true,
                type: {
                    name: "String",
                },
            },
            containerName: {
                serializedName: "containerName",
                readOnly: true,
                type: {
                    name: "String",
                },
            },
            uploadedTimestamp: {
                serializedName: "uploadedTimestamp",
                readOnly: true,
                type: {
                    name: "String",
                },
            },
            type: {
                serializedName: "type",
                readOnly: true,
                type: {
                    name: "String",
                },
            },
            provisioningStatus: {
                serializedName: "provisioningStatus",
                readOnly: true,
                type: {
                    name: "String",
                },
            },
            creatorId: {
                serializedName: "creatorId",
                readOnly: true,
                type: {
                    name: "String",
                },
            },
        },
    },
};
exports.LibraryResourceInfo = {
    type: {
        name: "Composite",
        className: "LibraryResourceInfo",
        modelProperties: {
            id: {
                serializedName: "id",
                readOnly: true,
                type: {
                    name: "String",
                },
            },
            recordId: {
                serializedName: "recordId",
                readOnly: true,
                type: {
                    name: "Number",
                },
            },
            state: {
                serializedName: "state",
                readOnly: true,
                type: {
                    name: "String",
                },
            },
            created: {
                serializedName: "created",
                readOnly: true,
                type: {
                    name: "String",
                },
            },
            changed: {
                serializedName: "changed",
                readOnly: true,
                type: {
                    name: "String",
                },
            },
            type: {
                serializedName: "type",
                readOnly: true,
                type: {
                    name: "String",
                },
            },
            name: {
                serializedName: "name",
                readOnly: true,
                type: {
                    name: "String",
                },
            },
            operationId: {
                serializedName: "operationId",
                readOnly: true,
                type: {
                    name: "String",
                },
            },
            artifactId: {
                serializedName: "artifactId",
                readOnly: true,
                type: {
                    name: "String",
                },
            },
        },
    },
};
exports.OperationResult = {
    type: {
        name: "Composite",
        className: "OperationResult",
        modelProperties: {
            status: {
                serializedName: "status",
                readOnly: true,
                type: {
                    name: "String",
                },
            },
            code: {
                serializedName: "error.code",
                type: {
                    name: "String",
                },
            },
            message: {
                serializedName: "error.message",
                type: {
                    name: "String",
                },
            },
            target: {
                serializedName: "error.target",
                type: {
                    name: "String",
                },
            },
            details: {
                serializedName: "error.details",
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "Composite",
                            className: "CloudError",
                        },
                    },
                },
            },
        },
    },
};
exports.LinkedServiceListResponse = {
    type: {
        name: "Composite",
        className: "LinkedServiceListResponse",
        modelProperties: {
            value: {
                serializedName: "value",
                required: true,
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "Composite",
                            className: "LinkedServiceResource",
                        },
                    },
                },
            },
            nextLink: {
                serializedName: "nextLink",
                type: {
                    name: "String",
                },
            },
        },
    },
};
exports.NotebookListResponse = {
    type: {
        name: "Composite",
        className: "NotebookListResponse",
        modelProperties: {
            value: {
                serializedName: "value",
                required: true,
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "Composite",
                            className: "NotebookResource",
                        },
                    },
                },
            },
            nextLink: {
                serializedName: "nextLink",
                type: {
                    name: "String",
                },
            },
        },
    },
};
exports.PipelineListResponse = {
    type: {
        name: "Composite",
        className: "PipelineListResponse",
        modelProperties: {
            value: {
                serializedName: "value",
                required: true,
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "Composite",
                            className: "PipelineResource",
                        },
                    },
                },
            },
            nextLink: {
                serializedName: "nextLink",
                type: {
                    name: "String",
                },
            },
        },
    },
};
exports.Activity = {
    serializedName: "Activity",
    type: {
        name: "Composite",
        className: "Activity",
        uberParent: "Activity",
        additionalProperties: { type: { name: "Object" } },
        polymorphicDiscriminator: {
            serializedName: "type",
            clientName: "type",
        },
        modelProperties: {
            name: {
                serializedName: "name",
                required: true,
                type: {
                    name: "String",
                },
            },
            type: {
                serializedName: "type",
                required: true,
                type: {
                    name: "String",
                },
            },
            description: {
                serializedName: "description",
                type: {
                    name: "String",
                },
            },
            state: {
                serializedName: "state",
                type: {
                    name: "String",
                },
            },
            onInactiveMarkAs: {
                serializedName: "onInactiveMarkAs",
                type: {
                    name: "String",
                },
            },
            dependsOn: {
                serializedName: "dependsOn",
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "Composite",
                            className: "ActivityDependency",
                        },
                    },
                },
            },
            userProperties: {
                serializedName: "userProperties",
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "Composite",
                            className: "UserProperty",
                        },
                    },
                },
            },
        },
    },
};
exports.ActivityDependency = {
    type: {
        name: "Composite",
        className: "ActivityDependency",
        additionalProperties: { type: { name: "Object" } },
        modelProperties: {
            activity: {
                serializedName: "activity",
                required: true,
                type: {
                    name: "String",
                },
            },
            dependencyConditions: {
                serializedName: "dependencyConditions",
                required: true,
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "String",
                        },
                    },
                },
            },
        },
    },
};
exports.UserProperty = {
    type: {
        name: "Composite",
        className: "UserProperty",
        modelProperties: {
            name: {
                serializedName: "name",
                required: true,
                type: {
                    name: "String",
                },
            },
            value: {
                serializedName: "value",
                required: true,
                type: {
                    name: "any",
                },
            },
        },
    },
};
exports.VariableSpecification = {
    type: {
        name: "Composite",
        className: "VariableSpecification",
        modelProperties: {
            type: {
                serializedName: "type",
                required: true,
                type: {
                    name: "String",
                },
            },
            defaultValue: {
                serializedName: "defaultValue",
                type: {
                    name: "any",
                },
            },
        },
    },
};
exports.PipelineFolder = {
    type: {
        name: "Composite",
        className: "PipelineFolder",
        modelProperties: {
            name: {
                serializedName: "name",
                type: {
                    name: "String",
                },
            },
        },
    },
};
exports.CreateRunResponse = {
    type: {
        name: "Composite",
        className: "CreateRunResponse",
        modelProperties: {
            runId: {
                serializedName: "runId",
                required: true,
                type: {
                    name: "String",
                },
            },
        },
    },
};
exports.RunFilterParameters = {
    type: {
        name: "Composite",
        className: "RunFilterParameters",
        modelProperties: {
            continuationToken: {
                serializedName: "continuationToken",
                type: {
                    name: "String",
                },
            },
            lastUpdatedAfter: {
                serializedName: "lastUpdatedAfter",
                required: true,
                type: {
                    name: "DateTime",
                },
            },
            lastUpdatedBefore: {
                serializedName: "lastUpdatedBefore",
                required: true,
                type: {
                    name: "DateTime",
                },
            },
            filters: {
                serializedName: "filters",
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "Composite",
                            className: "RunQueryFilter",
                        },
                    },
                },
            },
            orderBy: {
                serializedName: "orderBy",
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "Composite",
                            className: "RunQueryOrderBy",
                        },
                    },
                },
            },
        },
    },
};
exports.RunQueryFilter = {
    type: {
        name: "Composite",
        className: "RunQueryFilter",
        modelProperties: {
            operand: {
                serializedName: "operand",
                required: true,
                type: {
                    name: "String",
                },
            },
            operator: {
                serializedName: "operator",
                required: true,
                type: {
                    name: "String",
                },
            },
            values: {
                serializedName: "values",
                required: true,
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "String",
                        },
                    },
                },
            },
        },
    },
};
exports.RunQueryOrderBy = {
    type: {
        name: "Composite",
        className: "RunQueryOrderBy",
        modelProperties: {
            orderBy: {
                serializedName: "orderBy",
                required: true,
                type: {
                    name: "String",
                },
            },
            order: {
                serializedName: "order",
                required: true,
                type: {
                    name: "String",
                },
            },
        },
    },
};
exports.PipelineRunsQueryResponse = {
    type: {
        name: "Composite",
        className: "PipelineRunsQueryResponse",
        modelProperties: {
            value: {
                serializedName: "value",
                required: true,
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "Composite",
                            className: "PipelineRun",
                        },
                    },
                },
            },
            continuationToken: {
                serializedName: "continuationToken",
                type: {
                    name: "String",
                },
            },
        },
    },
};
exports.PipelineRun = {
    type: {
        name: "Composite",
        className: "PipelineRun",
        additionalProperties: { type: { name: "Object" } },
        modelProperties: {
            runId: {
                serializedName: "runId",
                readOnly: true,
                type: {
                    name: "String",
                },
            },
            runGroupId: {
                serializedName: "runGroupId",
                readOnly: true,
                type: {
                    name: "String",
                },
            },
            isLatest: {
                serializedName: "isLatest",
                readOnly: true,
                type: {
                    name: "Boolean",
                },
            },
            pipelineName: {
                serializedName: "pipelineName",
                readOnly: true,
                type: {
                    name: "String",
                },
            },
            parameters: {
                serializedName: "parameters",
                readOnly: true,
                type: {
                    name: "Dictionary",
                    value: { type: { name: "String" } },
                },
            },
            invokedBy: {
                serializedName: "invokedBy",
                type: {
                    name: "Composite",
                    className: "PipelineRunInvokedBy",
                },
            },
            lastUpdated: {
                serializedName: "lastUpdated",
                readOnly: true,
                type: {
                    name: "DateTime",
                },
            },
            runStart: {
                serializedName: "runStart",
                readOnly: true,
                type: {
                    name: "DateTime",
                },
            },
            runEnd: {
                serializedName: "runEnd",
                readOnly: true,
                nullable: true,
                type: {
                    name: "DateTime",
                },
            },
            durationInMs: {
                serializedName: "durationInMs",
                readOnly: true,
                type: {
                    name: "Number",
                },
            },
            status: {
                serializedName: "status",
                readOnly: true,
                type: {
                    name: "String",
                },
            },
            message: {
                serializedName: "message",
                readOnly: true,
                type: {
                    name: "String",
                },
            },
        },
    },
};
exports.PipelineRunInvokedBy = {
    type: {
        name: "Composite",
        className: "PipelineRunInvokedBy",
        modelProperties: {
            name: {
                serializedName: "name",
                readOnly: true,
                type: {
                    name: "String",
                },
            },
            id: {
                serializedName: "id",
                readOnly: true,
                type: {
                    name: "String",
                },
            },
            invokedByType: {
                serializedName: "invokedByType",
                readOnly: true,
                type: {
                    name: "String",
                },
            },
        },
    },
};
exports.ActivityRunsQueryResponse = {
    type: {
        name: "Composite",
        className: "ActivityRunsQueryResponse",
        modelProperties: {
            value: {
                serializedName: "value",
                required: true,
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "Composite",
                            className: "ActivityRun",
                        },
                    },
                },
            },
            continuationToken: {
                serializedName: "continuationToken",
                type: {
                    name: "String",
                },
            },
        },
    },
};
exports.ActivityRun = {
    type: {
        name: "Composite",
        className: "ActivityRun",
        additionalProperties: { type: { name: "Object" } },
        modelProperties: {
            pipelineName: {
                serializedName: "pipelineName",
                readOnly: true,
                type: {
                    name: "String",
                },
            },
            pipelineRunId: {
                serializedName: "pipelineRunId",
                readOnly: true,
                type: {
                    name: "String",
                },
            },
            activityName: {
                serializedName: "activityName",
                readOnly: true,
                type: {
                    name: "String",
                },
            },
            activityType: {
                serializedName: "activityType",
                readOnly: true,
                type: {
                    name: "String",
                },
            },
            activityRunId: {
                serializedName: "activityRunId",
                readOnly: true,
                type: {
                    name: "String",
                },
            },
            linkedServiceName: {
                serializedName: "linkedServiceName",
                readOnly: true,
                type: {
                    name: "String",
                },
            },
            status: {
                serializedName: "status",
                readOnly: true,
                type: {
                    name: "String",
                },
            },
            activityRunStart: {
                serializedName: "activityRunStart",
                readOnly: true,
                type: {
                    name: "DateTime",
                },
            },
            activityRunEnd: {
                serializedName: "activityRunEnd",
                readOnly: true,
                type: {
                    name: "DateTime",
                },
            },
            durationInMs: {
                serializedName: "durationInMs",
                readOnly: true,
                type: {
                    name: "Number",
                },
            },
            input: {
                serializedName: "input",
                readOnly: true,
                type: {
                    name: "any",
                },
            },
            output: {
                serializedName: "output",
                readOnly: true,
                type: {
                    name: "any",
                },
            },
            error: {
                serializedName: "error",
                readOnly: true,
                type: {
                    name: "any",
                },
            },
        },
    },
};
exports.SparkJobDefinitionsListResponse = {
    type: {
        name: "Composite",
        className: "SparkJobDefinitionsListResponse",
        modelProperties: {
            value: {
                serializedName: "value",
                required: true,
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "Composite",
                            className: "SparkJobDefinitionResource",
                        },
                    },
                },
            },
            nextLink: {
                serializedName: "nextLink",
                type: {
                    name: "String",
                },
            },
        },
    },
};
exports.SparkJobDefinition = {
    type: {
        name: "Composite",
        className: "SparkJobDefinition",
        additionalProperties: { type: { name: "Object" } },
        modelProperties: {
            description: {
                serializedName: "description",
                type: {
                    name: "String",
                },
            },
            targetBigDataPool: {
                serializedName: "targetBigDataPool",
                type: {
                    name: "Composite",
                    className: "BigDataPoolReference",
                },
            },
            targetSparkConfiguration: {
                serializedName: "targetSparkConfiguration",
                type: {
                    name: "Composite",
                    className: "SparkConfigurationReference",
                },
            },
            requiredSparkVersion: {
                serializedName: "requiredSparkVersion",
                type: {
                    name: "String",
                },
            },
            language: {
                serializedName: "language",
                type: {
                    name: "String",
                },
            },
            jobProperties: {
                serializedName: "jobProperties",
                type: {
                    name: "Composite",
                    className: "SparkJobProperties",
                },
            },
            folder: {
                serializedName: "folder",
                type: {
                    name: "Composite",
                    className: "SparkJobDefinitionFolder",
                },
            },
        },
    },
};
exports.SparkJobProperties = {
    type: {
        name: "Composite",
        className: "SparkJobProperties",
        additionalProperties: { type: { name: "Object" } },
        modelProperties: {
            name: {
                serializedName: "name",
                type: {
                    name: "String",
                },
            },
            file: {
                serializedName: "file",
                required: true,
                type: {
                    name: "String",
                },
            },
            className: {
                serializedName: "className",
                type: {
                    name: "String",
                },
            },
            conf: {
                serializedName: "conf",
                type: {
                    name: "any",
                },
            },
            args: {
                serializedName: "args",
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "String",
                        },
                    },
                },
            },
            jars: {
                serializedName: "jars",
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "String",
                        },
                    },
                },
            },
            files: {
                serializedName: "files",
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "String",
                        },
                    },
                },
            },
            archives: {
                serializedName: "archives",
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "String",
                        },
                    },
                },
            },
            driverMemory: {
                serializedName: "driverMemory",
                required: true,
                type: {
                    name: "String",
                },
            },
            driverCores: {
                serializedName: "driverCores",
                required: true,
                type: {
                    name: "Number",
                },
            },
            executorMemory: {
                serializedName: "executorMemory",
                required: true,
                type: {
                    name: "String",
                },
            },
            executorCores: {
                serializedName: "executorCores",
                required: true,
                type: {
                    name: "Number",
                },
            },
            numExecutors: {
                serializedName: "numExecutors",
                required: true,
                type: {
                    name: "Number",
                },
            },
        },
    },
};
exports.SparkJobDefinitionFolder = {
    type: {
        name: "Composite",
        className: "SparkJobDefinitionFolder",
        modelProperties: {
            name: {
                serializedName: "name",
                type: {
                    name: "String",
                },
            },
        },
    },
};
exports.SparkBatchJob = {
    type: {
        name: "Composite",
        className: "SparkBatchJob",
        modelProperties: {
            livyInfo: {
                serializedName: "livyInfo",
                type: {
                    name: "Composite",
                    className: "SparkBatchJobState",
                },
            },
            name: {
                serializedName: "name",
                type: {
                    name: "String",
                },
            },
            workspaceName: {
                serializedName: "workspaceName",
                type: {
                    name: "String",
                },
            },
            sparkPoolName: {
                serializedName: "sparkPoolName",
                type: {
                    name: "String",
                },
            },
            submitterName: {
                serializedName: "submitterName",
                type: {
                    name: "String",
                },
            },
            submitterId: {
                serializedName: "submitterId",
                type: {
                    name: "String",
                },
            },
            artifactId: {
                serializedName: "artifactId",
                type: {
                    name: "String",
                },
            },
            jobType: {
                serializedName: "jobType",
                type: {
                    name: "String",
                },
            },
            result: {
                serializedName: "result",
                type: {
                    name: "String",
                },
            },
            scheduler: {
                serializedName: "schedulerInfo",
                type: {
                    name: "Composite",
                    className: "SparkScheduler",
                },
            },
            plugin: {
                serializedName: "pluginInfo",
                type: {
                    name: "Composite",
                    className: "SparkServicePlugin",
                },
            },
            errors: {
                serializedName: "errorInfo",
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "Composite",
                            className: "SparkServiceError",
                        },
                    },
                },
            },
            tags: {
                serializedName: "tags",
                type: {
                    name: "Dictionary",
                    value: { type: { name: "String" } },
                },
            },
            id: {
                serializedName: "id",
                required: true,
                type: {
                    name: "Number",
                },
            },
            appId: {
                serializedName: "appId",
                nullable: true,
                type: {
                    name: "String",
                },
            },
            appInfo: {
                serializedName: "appInfo",
                nullable: true,
                type: {
                    name: "Dictionary",
                    value: { type: { name: "String" } },
                },
            },
            state: {
                serializedName: "state",
                type: {
                    name: "String",
                },
            },
            logLines: {
                serializedName: "log",
                nullable: true,
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "String",
                        },
                    },
                },
            },
        },
    },
};
exports.SparkBatchJobState = {
    type: {
        name: "Composite",
        className: "SparkBatchJobState",
        modelProperties: {
            notStartedAt: {
                serializedName: "notStartedAt",
                nullable: true,
                type: {
                    name: "DateTime",
                },
            },
            startingAt: {
                serializedName: "startingAt",
                nullable: true,
                type: {
                    name: "DateTime",
                },
            },
            runningAt: {
                serializedName: "runningAt",
                nullable: true,
                type: {
                    name: "DateTime",
                },
            },
            deadAt: {
                serializedName: "deadAt",
                nullable: true,
                type: {
                    name: "DateTime",
                },
            },
            successAt: {
                serializedName: "successAt",
                nullable: true,
                type: {
                    name: "DateTime",
                },
            },
            terminatedAt: {
                serializedName: "killedAt",
                nullable: true,
                type: {
                    name: "DateTime",
                },
            },
            recoveringAt: {
                serializedName: "recoveringAt",
                nullable: true,
                type: {
                    name: "DateTime",
                },
            },
            currentState: {
                serializedName: "currentState",
                type: {
                    name: "String",
                },
            },
            jobCreationRequest: {
                serializedName: "jobCreationRequest",
                type: {
                    name: "Composite",
                    className: "SparkRequest",
                },
            },
        },
    },
};
exports.SparkRequest = {
    type: {
        name: "Composite",
        className: "SparkRequest",
        modelProperties: {
            name: {
                serializedName: "name",
                type: {
                    name: "String",
                },
            },
            file: {
                serializedName: "file",
                type: {
                    name: "String",
                },
            },
            className: {
                serializedName: "className",
                type: {
                    name: "String",
                },
            },
            arguments: {
                serializedName: "args",
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "String",
                        },
                    },
                },
            },
            jars: {
                serializedName: "jars",
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "String",
                        },
                    },
                },
            },
            pythonFiles: {
                serializedName: "pyFiles",
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "String",
                        },
                    },
                },
            },
            files: {
                serializedName: "files",
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "String",
                        },
                    },
                },
            },
            archives: {
                serializedName: "archives",
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "String",
                        },
                    },
                },
            },
            configuration: {
                serializedName: "conf",
                type: {
                    name: "Dictionary",
                    value: { type: { name: "String" } },
                },
            },
            driverMemory: {
                serializedName: "driverMemory",
                type: {
                    name: "String",
                },
            },
            driverCores: {
                serializedName: "driverCores",
                type: {
                    name: "Number",
                },
            },
            executorMemory: {
                serializedName: "executorMemory",
                type: {
                    name: "String",
                },
            },
            executorCores: {
                serializedName: "executorCores",
                type: {
                    name: "Number",
                },
            },
            executorCount: {
                serializedName: "numExecutors",
                type: {
                    name: "Number",
                },
            },
        },
    },
};
exports.SparkScheduler = {
    type: {
        name: "Composite",
        className: "SparkScheduler",
        modelProperties: {
            submittedAt: {
                serializedName: "submittedAt",
                nullable: true,
                type: {
                    name: "DateTime",
                },
            },
            scheduledAt: {
                serializedName: "scheduledAt",
                nullable: true,
                type: {
                    name: "DateTime",
                },
            },
            endedAt: {
                serializedName: "endedAt",
                nullable: true,
                type: {
                    name: "DateTime",
                },
            },
            cancellationRequestedAt: {
                serializedName: "cancellationRequestedAt",
                nullable: true,
                type: {
                    name: "DateTime",
                },
            },
            currentState: {
                serializedName: "currentState",
                type: {
                    name: "String",
                },
            },
        },
    },
};
exports.SparkServicePlugin = {
    type: {
        name: "Composite",
        className: "SparkServicePlugin",
        modelProperties: {
            preparationStartedAt: {
                serializedName: "preparationStartedAt",
                nullable: true,
                type: {
                    name: "DateTime",
                },
            },
            resourceAcquisitionStartedAt: {
                serializedName: "resourceAcquisitionStartedAt",
                nullable: true,
                type: {
                    name: "DateTime",
                },
            },
            submissionStartedAt: {
                serializedName: "submissionStartedAt",
                nullable: true,
                type: {
                    name: "DateTime",
                },
            },
            monitoringStartedAt: {
                serializedName: "monitoringStartedAt",
                nullable: true,
                type: {
                    name: "DateTime",
                },
            },
            cleanupStartedAt: {
                serializedName: "cleanupStartedAt",
                nullable: true,
                type: {
                    name: "DateTime",
                },
            },
            currentState: {
                serializedName: "currentState",
                type: {
                    name: "String",
                },
            },
        },
    },
};
exports.SparkServiceError = {
    type: {
        name: "Composite",
        className: "SparkServiceError",
        modelProperties: {
            message: {
                serializedName: "message",
                type: {
                    name: "String",
                },
            },
            errorCode: {
                serializedName: "errorCode",
                type: {
                    name: "String",
                },
            },
            source: {
                serializedName: "source",
                type: {
                    name: "String",
                },
            },
        },
    },
};
exports.SqlPoolInfoListResult = {
    type: {
        name: "Composite",
        className: "SqlPoolInfoListResult",
        modelProperties: {
            nextLink: {
                serializedName: "nextLink",
                type: {
                    name: "String",
                },
            },
            value: {
                serializedName: "value",
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "Composite",
                            className: "SqlPool",
                        },
                    },
                },
            },
        },
    },
};
exports.Sku = {
    type: {
        name: "Composite",
        className: "Sku",
        modelProperties: {
            tier: {
                serializedName: "tier",
                type: {
                    name: "String",
                },
            },
            name: {
                serializedName: "name",
                type: {
                    name: "String",
                },
            },
            capacity: {
                serializedName: "capacity",
                type: {
                    name: "Number",
                },
            },
        },
    },
};
exports.SqlScriptsListResponse = {
    type: {
        name: "Composite",
        className: "SqlScriptsListResponse",
        modelProperties: {
            value: {
                serializedName: "value",
                required: true,
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "Composite",
                            className: "SqlScriptResource",
                        },
                    },
                },
            },
            nextLink: {
                serializedName: "nextLink",
                type: {
                    name: "String",
                },
            },
        },
    },
};
exports.SqlScriptResource = {
    type: {
        name: "Composite",
        className: "SqlScriptResource",
        modelProperties: {
            id: {
                serializedName: "id",
                readOnly: true,
                type: {
                    name: "String",
                },
            },
            name: {
                serializedName: "name",
                required: true,
                type: {
                    name: "String",
                },
            },
            type: {
                serializedName: "type",
                readOnly: true,
                type: {
                    name: "String",
                },
            },
            etag: {
                serializedName: "etag",
                readOnly: true,
                type: {
                    name: "String",
                },
            },
            properties: {
                serializedName: "properties",
                type: {
                    name: "Composite",
                    className: "SqlScript",
                },
            },
        },
    },
};
exports.SqlScript = {
    type: {
        name: "Composite",
        className: "SqlScript",
        additionalProperties: { type: { name: "Object" } },
        modelProperties: {
            description: {
                serializedName: "description",
                type: {
                    name: "String",
                },
            },
            type: {
                serializedName: "type",
                type: {
                    name: "String",
                },
            },
            content: {
                serializedName: "content",
                type: {
                    name: "Composite",
                    className: "SqlScriptContent",
                },
            },
            folder: {
                serializedName: "folder",
                type: {
                    name: "Composite",
                    className: "SqlScriptFolder",
                },
            },
        },
    },
};
exports.SqlScriptContent = {
    type: {
        name: "Composite",
        className: "SqlScriptContent",
        additionalProperties: { type: { name: "Object" } },
        modelProperties: {
            query: {
                serializedName: "query",
                required: true,
                type: {
                    name: "String",
                },
            },
            currentConnection: {
                serializedName: "currentConnection",
                type: {
                    name: "Composite",
                    className: "SqlConnection",
                },
            },
            resultLimit: {
                serializedName: "resultLimit",
                type: {
                    name: "Number",
                },
            },
            metadata: {
                serializedName: "metadata",
                type: {
                    name: "Composite",
                    className: "SqlScriptMetadata",
                },
            },
        },
    },
};
exports.SqlConnection = {
    type: {
        name: "Composite",
        className: "SqlConnection",
        additionalProperties: { type: { name: "Object" } },
        modelProperties: {
            type: {
                serializedName: "type",
                type: {
                    name: "String",
                },
            },
            name: {
                serializedName: "name",
                type: {
                    name: "String",
                },
            },
            poolName: {
                serializedName: "poolName",
                type: {
                    name: "String",
                },
            },
            databaseName: {
                serializedName: "databaseName",
                type: {
                    name: "String",
                },
            },
        },
    },
};
exports.SqlScriptMetadata = {
    type: {
        name: "Composite",
        className: "SqlScriptMetadata",
        additionalProperties: { type: { name: "Object" } },
        modelProperties: {
            language: {
                serializedName: "language",
                type: {
                    name: "String",
                },
            },
        },
    },
};
exports.SqlScriptFolder = {
    type: {
        name: "Composite",
        className: "SqlScriptFolder",
        modelProperties: {
            name: {
                serializedName: "name",
                type: {
                    name: "String",
                },
            },
        },
    },
};
exports.TriggerListResponse = {
    type: {
        name: "Composite",
        className: "TriggerListResponse",
        modelProperties: {
            value: {
                serializedName: "value",
                required: true,
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "Composite",
                            className: "TriggerResource",
                        },
                    },
                },
            },
            nextLink: {
                serializedName: "nextLink",
                type: {
                    name: "String",
                },
            },
        },
    },
};
exports.Trigger = {
    serializedName: "Trigger",
    type: {
        name: "Composite",
        className: "Trigger",
        uberParent: "Trigger",
        additionalProperties: { type: { name: "Object" } },
        polymorphicDiscriminator: {
            serializedName: "type",
            clientName: "type",
        },
        modelProperties: {
            type: {
                serializedName: "type",
                required: true,
                type: {
                    name: "String",
                },
            },
            description: {
                serializedName: "description",
                type: {
                    name: "String",
                },
            },
            runtimeState: {
                serializedName: "runtimeState",
                readOnly: true,
                type: {
                    name: "String",
                },
            },
            annotations: {
                serializedName: "annotations",
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "any",
                        },
                    },
                },
            },
        },
    },
};
exports.TriggerSubscriptionOperationStatus = {
    type: {
        name: "Composite",
        className: "TriggerSubscriptionOperationStatus",
        modelProperties: {
            triggerName: {
                serializedName: "triggerName",
                readOnly: true,
                type: {
                    name: "String",
                },
            },
            status: {
                serializedName: "status",
                readOnly: true,
                type: {
                    name: "String",
                },
            },
        },
    },
};
exports.TriggerRunsQueryResponse = {
    type: {
        name: "Composite",
        className: "TriggerRunsQueryResponse",
        modelProperties: {
            value: {
                serializedName: "value",
                required: true,
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "Composite",
                            className: "TriggerRun",
                        },
                    },
                },
            },
            continuationToken: {
                serializedName: "continuationToken",
                type: {
                    name: "String",
                },
            },
        },
    },
};
exports.TriggerRun = {
    type: {
        name: "Composite",
        className: "TriggerRun",
        additionalProperties: { type: { name: "Object" } },
        modelProperties: {
            triggerRunId: {
                serializedName: "triggerRunId",
                readOnly: true,
                type: {
                    name: "String",
                },
            },
            triggerName: {
                serializedName: "triggerName",
                readOnly: true,
                type: {
                    name: "String",
                },
            },
            triggerType: {
                serializedName: "triggerType",
                readOnly: true,
                type: {
                    name: "String",
                },
            },
            triggerRunTimestamp: {
                serializedName: "triggerRunTimestamp",
                readOnly: true,
                type: {
                    name: "DateTime",
                },
            },
            status: {
                serializedName: "status",
                readOnly: true,
                type: {
                    name: "String",
                },
            },
            message: {
                serializedName: "message",
                readOnly: true,
                type: {
                    name: "String",
                },
            },
            properties: {
                serializedName: "properties",
                readOnly: true,
                type: {
                    name: "Dictionary",
                    value: { type: { name: "String" } },
                },
            },
            triggeredPipelines: {
                serializedName: "triggeredPipelines",
                readOnly: true,
                type: {
                    name: "Dictionary",
                    value: { type: { name: "String" } },
                },
            },
        },
    },
};
exports.DataLakeStorageAccountDetails = {
    type: {
        name: "Composite",
        className: "DataLakeStorageAccountDetails",
        modelProperties: {
            accountUrl: {
                serializedName: "accountUrl",
                type: {
                    name: "String",
                },
            },
            filesystem: {
                serializedName: "filesystem",
                type: {
                    name: "String",
                },
            },
        },
    },
};
exports.VirtualNetworkProfile = {
    type: {
        name: "Composite",
        className: "VirtualNetworkProfile",
        modelProperties: {
            computeSubnetId: {
                serializedName: "computeSubnetId",
                type: {
                    name: "String",
                },
            },
        },
    },
};
exports.PrivateEndpoint = {
    type: {
        name: "Composite",
        className: "PrivateEndpoint",
        modelProperties: {
            id: {
                serializedName: "id",
                readOnly: true,
                type: {
                    name: "String",
                },
            },
        },
    },
};
exports.PrivateLinkServiceConnectionState = {
    type: {
        name: "Composite",
        className: "PrivateLinkServiceConnectionState",
        modelProperties: {
            status: {
                serializedName: "status",
                type: {
                    name: "String",
                },
            },
            description: {
                serializedName: "description",
                type: {
                    name: "String",
                },
            },
            actionsRequired: {
                serializedName: "actionsRequired",
                readOnly: true,
                type: {
                    name: "String",
                },
            },
        },
    },
};
exports.EncryptionDetails = {
    type: {
        name: "Composite",
        className: "EncryptionDetails",
        modelProperties: {
            doubleEncryptionEnabled: {
                serializedName: "doubleEncryptionEnabled",
                readOnly: true,
                type: {
                    name: "Boolean",
                },
            },
            cmk: {
                serializedName: "cmk",
                type: {
                    name: "Composite",
                    className: "CustomerManagedKeyDetails",
                },
            },
        },
    },
};
exports.CustomerManagedKeyDetails = {
    type: {
        name: "Composite",
        className: "CustomerManagedKeyDetails",
        modelProperties: {
            status: {
                serializedName: "status",
                readOnly: true,
                type: {
                    name: "String",
                },
            },
            key: {
                serializedName: "key",
                type: {
                    name: "Composite",
                    className: "WorkspaceKeyDetails",
                },
            },
        },
    },
};
exports.WorkspaceKeyDetails = {
    type: {
        name: "Composite",
        className: "WorkspaceKeyDetails",
        modelProperties: {
            name: {
                serializedName: "name",
                type: {
                    name: "String",
                },
            },
            keyVaultUrl: {
                serializedName: "keyVaultUrl",
                type: {
                    name: "String",
                },
            },
        },
    },
};
exports.ManagedVirtualNetworkSettings = {
    type: {
        name: "Composite",
        className: "ManagedVirtualNetworkSettings",
        modelProperties: {
            preventDataExfiltration: {
                serializedName: "preventDataExfiltration",
                type: {
                    name: "Boolean",
                },
            },
            linkedAccessCheckOnTargetResource: {
                serializedName: "linkedAccessCheckOnTargetResource",
                type: {
                    name: "Boolean",
                },
            },
            allowedAadTenantIdsForLinking: {
                serializedName: "allowedAadTenantIdsForLinking",
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "String",
                        },
                    },
                },
            },
        },
    },
};
exports.WorkspaceRepositoryConfiguration = {
    type: {
        name: "Composite",
        className: "WorkspaceRepositoryConfiguration",
        modelProperties: {
            type: {
                serializedName: "type",
                type: {
                    name: "String",
                },
            },
            hostName: {
                serializedName: "hostName",
                type: {
                    name: "String",
                },
            },
            accountName: {
                serializedName: "accountName",
                type: {
                    name: "String",
                },
            },
            projectName: {
                serializedName: "projectName",
                type: {
                    name: "String",
                },
            },
            repositoryName: {
                serializedName: "repositoryName",
                type: {
                    name: "String",
                },
            },
            collaborationBranch: {
                serializedName: "collaborationBranch",
                type: {
                    name: "String",
                },
            },
            rootFolder: {
                serializedName: "rootFolder",
                type: {
                    name: "String",
                },
            },
            lastCommitId: {
                serializedName: "lastCommitId",
                type: {
                    name: "String",
                },
            },
            tenantId: {
                serializedName: "tenantId",
                type: {
                    name: "Uuid",
                },
            },
            clientId: {
                serializedName: "clientId",
                type: {
                    name: "String",
                },
            },
            clientSecret: {
                serializedName: "clientSecret",
                type: {
                    name: "Composite",
                    className: "GitHubClientSecret",
                },
            },
        },
    },
};
exports.GitHubClientSecret = {
    type: {
        name: "Composite",
        className: "GitHubClientSecret",
        modelProperties: {
            byoaSecretAkvUrl: {
                serializedName: "byoaSecretAkvUrl",
                type: {
                    name: "String",
                },
            },
            byoaSecretName: {
                serializedName: "byoaSecretName",
                type: {
                    name: "String",
                },
            },
        },
    },
};
exports.PurviewConfiguration = {
    type: {
        name: "Composite",
        className: "PurviewConfiguration",
        modelProperties: {
            purviewResourceId: {
                serializedName: "purviewResourceId",
                type: {
                    name: "String",
                },
            },
        },
    },
};
exports.ManagedIdentity = {
    type: {
        name: "Composite",
        className: "ManagedIdentity",
        modelProperties: {
            principalId: {
                serializedName: "principalId",
                readOnly: true,
                type: {
                    name: "String",
                },
            },
            tenantId: {
                serializedName: "tenantId",
                readOnly: true,
                type: {
                    name: "Uuid",
                },
            },
            type: {
                serializedName: "type",
                type: {
                    name: "Enum",
                    allowedValues: ["None", "SystemAssigned"],
                },
            },
        },
    },
};
exports.Expression = {
    type: {
        name: "Composite",
        className: "Expression",
        modelProperties: {
            type: {
                serializedName: "type",
                required: true,
                type: {
                    name: "String",
                },
            },
            value: {
                serializedName: "value",
                required: true,
                type: {
                    name: "String",
                },
            },
        },
    },
};
exports.TriggerDependencyProvisioningStatus = {
    type: {
        name: "Composite",
        className: "TriggerDependencyProvisioningStatus",
        modelProperties: {
            triggerName: {
                serializedName: "triggerName",
                required: true,
                type: {
                    name: "String",
                },
            },
            provisioningStatus: {
                serializedName: "provisioningStatus",
                required: true,
                type: {
                    name: "String",
                },
            },
        },
    },
};
exports.PipelineReference = {
    type: {
        name: "Composite",
        className: "PipelineReference",
        modelProperties: {
            type: {
                serializedName: "type",
                required: true,
                type: {
                    name: "String",
                },
            },
            referenceName: {
                serializedName: "referenceName",
                required: true,
                type: {
                    name: "String",
                },
            },
            name: {
                serializedName: "name",
                type: {
                    name: "String",
                },
            },
        },
    },
};
exports.TriggerPipelineReference = {
    type: {
        name: "Composite",
        className: "TriggerPipelineReference",
        modelProperties: {
            pipelineReference: {
                serializedName: "pipelineReference",
                type: {
                    name: "Composite",
                    className: "PipelineReference",
                },
            },
            parameters: {
                serializedName: "parameters",
                type: {
                    name: "Dictionary",
                    value: { type: { name: "any" } },
                },
            },
        },
    },
};
exports.WorkspaceUpdateParameters = {
    type: {
        name: "Composite",
        className: "WorkspaceUpdateParameters",
        modelProperties: {
            tags: {
                serializedName: "tags",
                type: {
                    name: "Dictionary",
                    value: { type: { name: "String" } },
                },
            },
            identity: {
                serializedName: "identity",
                type: {
                    name: "Composite",
                    className: "WorkspaceIdentity",
                },
            },
        },
    },
};
exports.WorkspaceIdentity = {
    type: {
        name: "Composite",
        className: "WorkspaceIdentity",
        modelProperties: {
            type: {
                defaultValue: "SystemAssigned",
                isConstant: true,
                serializedName: "type",
                type: {
                    name: "String",
                },
            },
            principalId: {
                serializedName: "principalId",
                readOnly: true,
                type: {
                    name: "String",
                },
            },
            tenantId: {
                serializedName: "tenantId",
                readOnly: true,
                type: {
                    name: "String",
                },
            },
        },
    },
};
exports.DatasetReference = {
    type: {
        name: "Composite",
        className: "DatasetReference",
        modelProperties: {
            type: {
                serializedName: "type",
                required: true,
                type: {
                    name: "String",
                },
            },
            referenceName: {
                serializedName: "referenceName",
                required: true,
                type: {
                    name: "String",
                },
            },
            parameters: {
                serializedName: "parameters",
                type: {
                    name: "Dictionary",
                    value: { type: { name: "any" } },
                },
            },
        },
    },
};
exports.DataFlowReference = {
    type: {
        name: "Composite",
        className: "DataFlowReference",
        additionalProperties: { type: { name: "Object" } },
        modelProperties: {
            type: {
                serializedName: "type",
                required: true,
                type: {
                    name: "String",
                },
            },
            referenceName: {
                serializedName: "referenceName",
                required: true,
                type: {
                    name: "String",
                },
            },
            datasetParameters: {
                serializedName: "datasetParameters",
                type: {
                    name: "any",
                },
            },
            parameters: {
                serializedName: "parameters",
                type: {
                    name: "Dictionary",
                    value: { type: { name: "any" } },
                },
            },
        },
    },
};
exports.RerunTumblingWindowTriggerActionParameters = {
    type: {
        name: "Composite",
        className: "RerunTumblingWindowTriggerActionParameters",
        modelProperties: {
            startTime: {
                serializedName: "startTime",
                required: true,
                type: {
                    name: "DateTime",
                },
            },
            endTime: {
                serializedName: "endTime",
                required: true,
                type: {
                    name: "DateTime",
                },
            },
            maxConcurrency: {
                constraints: {
                    InclusiveMaximum: 50,
                    InclusiveMinimum: 1,
                },
                serializedName: "maxConcurrency",
                required: true,
                type: {
                    name: "Number",
                },
            },
        },
    },
};
exports.GetSsisObjectMetadataRequest = {
    type: {
        name: "Composite",
        className: "GetSsisObjectMetadataRequest",
        modelProperties: {
            metadataPath: {
                serializedName: "metadataPath",
                type: {
                    name: "String",
                },
            },
        },
    },
};
exports.SsisObjectMetadataStatusResponse = {
    type: {
        name: "Composite",
        className: "SsisObjectMetadataStatusResponse",
        modelProperties: {
            status: {
                serializedName: "status",
                type: {
                    name: "String",
                },
            },
            name: {
                serializedName: "name",
                type: {
                    name: "String",
                },
            },
            properties: {
                serializedName: "properties",
                type: {
                    name: "String",
                },
            },
            error: {
                serializedName: "error",
                type: {
                    name: "String",
                },
            },
        },
    },
};
exports.ExposureControlRequest = {
    type: {
        name: "Composite",
        className: "ExposureControlRequest",
        modelProperties: {
            featureName: {
                serializedName: "featureName",
                type: {
                    name: "String",
                },
            },
            featureType: {
                serializedName: "featureType",
                type: {
                    name: "String",
                },
            },
        },
    },
};
exports.ExposureControlResponse = {
    type: {
        name: "Composite",
        className: "ExposureControlResponse",
        modelProperties: {
            featureName: {
                serializedName: "featureName",
                readOnly: true,
                type: {
                    name: "String",
                },
            },
            value: {
                serializedName: "value",
                readOnly: true,
                type: {
                    name: "String",
                },
            },
        },
    },
};
exports.SynapseNotebookReference = {
    type: {
        name: "Composite",
        className: "SynapseNotebookReference",
        modelProperties: {
            type: {
                serializedName: "type",
                required: true,
                type: {
                    name: "String",
                },
            },
            referenceName: {
                serializedName: "referenceName",
                required: true,
                type: {
                    name: "any",
                },
            },
        },
    },
};
exports.SynapseSparkJobReference = {
    type: {
        name: "Composite",
        className: "SynapseSparkJobReference",
        modelProperties: {
            type: {
                serializedName: "type",
                required: true,
                type: {
                    name: "String",
                },
            },
            referenceName: {
                serializedName: "referenceName",
                required: true,
                type: {
                    name: "String",
                },
            },
        },
    },
};
exports.SqlPoolReference = {
    type: {
        name: "Composite",
        className: "SqlPoolReference",
        modelProperties: {
            type: {
                serializedName: "type",
                required: true,
                type: {
                    name: "String",
                },
            },
            referenceName: {
                serializedName: "referenceName",
                required: true,
                type: {
                    name: "String",
                },
            },
        },
    },
};
exports.BigDataPoolParametrizationReference = {
    type: {
        name: "Composite",
        className: "BigDataPoolParametrizationReference",
        modelProperties: {
            type: {
                serializedName: "type",
                required: true,
                type: {
                    name: "String",
                },
            },
            referenceName: {
                serializedName: "referenceName",
                required: true,
                type: {
                    name: "any",
                },
            },
        },
    },
};
exports.CredentialReference = {
    type: {
        name: "Composite",
        className: "CredentialReference",
        additionalProperties: { type: { name: "Object" } },
        modelProperties: {
            type: {
                serializedName: "type",
                required: true,
                type: {
                    name: "String",
                },
            },
            referenceName: {
                serializedName: "referenceName",
                required: true,
                type: {
                    name: "String",
                },
            },
        },
    },
};
exports.StartDataFlowDebugSessionRequest = {
    type: {
        name: "Composite",
        className: "StartDataFlowDebugSessionRequest",
        modelProperties: {
            sessionId: {
                serializedName: "sessionId",
                type: {
                    name: "String",
                },
            },
            dataFlow: {
                serializedName: "dataFlow",
                type: {
                    name: "Composite",
                    className: "DataFlowResource",
                },
            },
            dataFlows: {
                serializedName: "dataFlows",
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "Composite",
                            className: "DataFlowResource",
                        },
                    },
                },
            },
            datasets: {
                serializedName: "datasets",
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "Composite",
                            className: "DatasetResource",
                        },
                    },
                },
            },
            linkedServices: {
                serializedName: "linkedServices",
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "Composite",
                            className: "LinkedServiceResource",
                        },
                    },
                },
            },
            staging: {
                serializedName: "staging",
                type: {
                    name: "any",
                },
            },
            debugSettings: {
                serializedName: "debugSettings",
                type: {
                    name: "any",
                },
            },
            incrementalDebug: {
                serializedName: "incrementalDebug",
                type: {
                    name: "Boolean",
                },
            },
        },
    },
};
exports.StartDataFlowDebugSessionResponse = {
    type: {
        name: "Composite",
        className: "StartDataFlowDebugSessionResponse",
        modelProperties: {
            jobVersion: {
                serializedName: "jobVersion",
                type: {
                    name: "String",
                },
            },
        },
    },
};
exports.DataFlowDebugPreviewDataRequest = {
    type: {
        name: "Composite",
        className: "DataFlowDebugPreviewDataRequest",
        modelProperties: {
            sessionId: {
                serializedName: "sessionId",
                type: {
                    name: "String",
                },
            },
            dataFlowName: {
                serializedName: "dataFlowName",
                type: {
                    name: "String",
                },
            },
            streamName: {
                serializedName: "streamName",
                type: {
                    name: "String",
                },
            },
            rowLimits: {
                serializedName: "rowLimits",
                type: {
                    name: "Number",
                },
            },
        },
    },
};
exports.DataFlowDebugStatisticsRequest = {
    type: {
        name: "Composite",
        className: "DataFlowDebugStatisticsRequest",
        modelProperties: {
            sessionId: {
                serializedName: "sessionId",
                type: {
                    name: "String",
                },
            },
            dataFlowName: {
                serializedName: "dataFlowName",
                type: {
                    name: "String",
                },
            },
            streamName: {
                serializedName: "streamName",
                type: {
                    name: "String",
                },
            },
            columns: {
                serializedName: "columns",
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "String",
                        },
                    },
                },
            },
        },
    },
};
exports.EvaluateDataFlowExpressionRequest = {
    type: {
        name: "Composite",
        className: "EvaluateDataFlowExpressionRequest",
        modelProperties: {
            sessionId: {
                serializedName: "sessionId",
                type: {
                    name: "String",
                },
            },
            dataFlowName: {
                serializedName: "dataFlowName",
                type: {
                    name: "String",
                },
            },
            streamName: {
                serializedName: "streamName",
                type: {
                    name: "String",
                },
            },
            rowLimits: {
                serializedName: "rowLimits",
                type: {
                    name: "Number",
                },
            },
            expression: {
                serializedName: "expression",
                type: {
                    name: "String",
                },
            },
        },
    },
};
exports.DataFlowDebugQueryResponse = {
    type: {
        name: "Composite",
        className: "DataFlowDebugQueryResponse",
        modelProperties: {
            runId: {
                serializedName: "runId",
                type: {
                    name: "String",
                },
            },
        },
    },
};
exports.DataFlowDebugResultResponse = {
    type: {
        name: "Composite",
        className: "DataFlowDebugResultResponse",
        modelProperties: {
            status: {
                serializedName: "status",
                type: {
                    name: "String",
                },
            },
            data: {
                serializedName: "data",
                type: {
                    name: "String",
                },
            },
        },
    },
};
exports.RerunTriggerListResponse = {
    type: {
        name: "Composite",
        className: "RerunTriggerListResponse",
        modelProperties: {
            value: {
                serializedName: "value",
                required: true,
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "Composite",
                            className: "RerunTriggerResource",
                        },
                    },
                },
            },
            nextLink: {
                serializedName: "nextLink",
                readOnly: true,
                type: {
                    name: "String",
                },
            },
        },
    },
};
exports.Transformation = {
    type: {
        name: "Composite",
        className: "Transformation",
        modelProperties: {
            name: {
                serializedName: "name",
                required: true,
                type: {
                    name: "String",
                },
            },
            description: {
                serializedName: "description",
                type: {
                    name: "String",
                },
            },
            dataset: {
                serializedName: "dataset",
                type: {
                    name: "Composite",
                    className: "DatasetReference",
                },
            },
            linkedService: {
                serializedName: "linkedService",
                type: {
                    name: "Composite",
                    className: "LinkedServiceReference",
                },
            },
            flowlet: {
                serializedName: "flowlet",
                type: {
                    name: "Composite",
                    className: "DataFlowReference",
                },
            },
        },
    },
};
exports.DatasetLocation = {
    serializedName: "DatasetLocation",
    type: {
        name: "Composite",
        className: "DatasetLocation",
        uberParent: "DatasetLocation",
        additionalProperties: { type: { name: "Object" } },
        polymorphicDiscriminator: {
            serializedName: "type",
            clientName: "type",
        },
        modelProperties: {
            type: {
                serializedName: "type",
                required: true,
                type: {
                    name: "String",
                },
            },
            folderPath: {
                serializedName: "folderPath",
                type: {
                    name: "any",
                },
            },
            fileName: {
                serializedName: "fileName",
                type: {
                    name: "any",
                },
            },
        },
    },
};
exports.DatasetDataElement = {
    type: {
        name: "Composite",
        className: "DatasetDataElement",
        modelProperties: {
            name: {
                serializedName: "name",
                type: {
                    name: "any",
                },
            },
            type: {
                serializedName: "type",
                type: {
                    name: "any",
                },
            },
        },
    },
};
exports.DatasetSchemaDataElement = {
    type: {
        name: "Composite",
        className: "DatasetSchemaDataElement",
        additionalProperties: { type: { name: "Object" } },
        modelProperties: {
            name: {
                serializedName: "name",
                type: {
                    name: "any",
                },
            },
            type: {
                serializedName: "type",
                type: {
                    name: "any",
                },
            },
        },
    },
};
exports.DatasetStorageFormat = {
    serializedName: "DatasetStorageFormat",
    type: {
        name: "Composite",
        className: "DatasetStorageFormat",
        uberParent: "DatasetStorageFormat",
        additionalProperties: { type: { name: "Object" } },
        polymorphicDiscriminator: {
            serializedName: "type",
            clientName: "type",
        },
        modelProperties: {
            type: {
                serializedName: "type",
                required: true,
                type: {
                    name: "String",
                },
            },
            serializer: {
                serializedName: "serializer",
                type: {
                    name: "any",
                },
            },
            deserializer: {
                serializedName: "deserializer",
                type: {
                    name: "any",
                },
            },
        },
    },
};
exports.DatasetCompression = {
    type: {
        name: "Composite",
        className: "DatasetCompression",
        additionalProperties: { type: { name: "Object" } },
        modelProperties: {
            type: {
                serializedName: "type",
                required: true,
                type: {
                    name: "any",
                },
            },
            level: {
                serializedName: "level",
                type: {
                    name: "any",
                },
            },
        },
    },
};
exports.AzureStorageLinkedServiceTypeProperties = {
    type: {
        name: "Composite",
        className: "AzureStorageLinkedServiceTypeProperties",
        modelProperties: {
            connectionString: {
                serializedName: "connectionString",
                type: {
                    name: "any",
                },
            },
            accountKey: {
                serializedName: "accountKey",
                type: {
                    name: "Composite",
                    className: "AzureKeyVaultSecretReference",
                },
            },
            sasUri: {
                serializedName: "sasUri",
                type: {
                    name: "any",
                },
            },
            sasToken: {
                serializedName: "sasToken",
                type: {
                    name: "Composite",
                    className: "AzureKeyVaultSecretReference",
                },
            },
            encryptedCredential: {
                serializedName: "encryptedCredential",
                type: {
                    name: "String",
                },
            },
        },
    },
};
exports.SqlServerBaseLinkedServiceTypeProperties = {
    type: {
        name: "Composite",
        className: "SqlServerBaseLinkedServiceTypeProperties",
        modelProperties: {
            server: {
                serializedName: "server",
                type: {
                    name: "any",
                },
            },
            database: {
                serializedName: "database",
                type: {
                    name: "any",
                },
            },
            encrypt: {
                serializedName: "encrypt",
                type: {
                    name: "any",
                },
            },
            trustServerCertificate: {
                serializedName: "trustServerCertificate",
                type: {
                    name: "any",
                },
            },
            hostNameInCertificate: {
                serializedName: "hostNameInCertificate",
                type: {
                    name: "any",
                },
            },
            applicationIntent: {
                serializedName: "applicationIntent",
                type: {
                    name: "any",
                },
            },
            connectTimeout: {
                serializedName: "connectTimeout",
                type: {
                    name: "any",
                },
            },
            connectRetryCount: {
                serializedName: "connectRetryCount",
                type: {
                    name: "any",
                },
            },
            connectRetryInterval: {
                serializedName: "connectRetryInterval",
                type: {
                    name: "any",
                },
            },
            loadBalanceTimeout: {
                serializedName: "loadBalanceTimeout",
                type: {
                    name: "any",
                },
            },
            commandTimeout: {
                serializedName: "commandTimeout",
                type: {
                    name: "any",
                },
            },
            integratedSecurity: {
                serializedName: "integratedSecurity",
                type: {
                    name: "any",
                },
            },
            failoverPartner: {
                serializedName: "failoverPartner",
                type: {
                    name: "any",
                },
            },
            maxPoolSize: {
                serializedName: "maxPoolSize",
                type: {
                    name: "any",
                },
            },
            minPoolSize: {
                serializedName: "minPoolSize",
                type: {
                    name: "any",
                },
            },
            multipleActiveResultSets: {
                serializedName: "multipleActiveResultSets",
                type: {
                    name: "any",
                },
            },
            multiSubnetFailover: {
                serializedName: "multiSubnetFailover",
                type: {
                    name: "any",
                },
            },
            packetSize: {
                serializedName: "packetSize",
                type: {
                    name: "any",
                },
            },
            pooling: {
                serializedName: "pooling",
                type: {
                    name: "any",
                },
            },
        },
    },
};
exports.SqlAlwaysEncryptedProperties = {
    type: {
        name: "Composite",
        className: "SqlAlwaysEncryptedProperties",
        modelProperties: {
            alwaysEncryptedAkvAuthType: {
                serializedName: "alwaysEncryptedAkvAuthType",
                required: true,
                type: {
                    name: "String",
                },
            },
            servicePrincipalId: {
                serializedName: "servicePrincipalId",
                type: {
                    name: "any",
                },
            },
            servicePrincipalKey: {
                serializedName: "servicePrincipalKey",
                type: {
                    name: "Composite",
                    className: "SecretBase",
                },
            },
            credential: {
                serializedName: "credential",
                type: {
                    name: "Composite",
                    className: "CredentialReference",
                },
            },
        },
    },
};
exports.WebLinkedServiceTypeProperties = {
    type: {
        name: "Composite",
        className: "WebLinkedServiceTypeProperties",
        uberParent: "WebLinkedServiceTypeProperties",
        polymorphicDiscriminator: {
            serializedName: "authenticationType",
            clientName: "authenticationType",
        },
        modelProperties: {
            url: {
                serializedName: "url",
                required: true,
                type: {
                    name: "any",
                },
            },
            authenticationType: {
                serializedName: "authenticationType",
                required: true,
                type: {
                    name: "String",
                },
            },
        },
    },
};
exports.ScriptAction = {
    type: {
        name: "Composite",
        className: "ScriptAction",
        modelProperties: {
            name: {
                serializedName: "name",
                required: true,
                type: {
                    name: "String",
                },
            },
            uri: {
                serializedName: "uri",
                required: true,
                type: {
                    name: "String",
                },
            },
            roles: {
                serializedName: "roles",
                required: true,
                type: {
                    name: "any",
                },
            },
            parameters: {
                serializedName: "parameters",
                type: {
                    name: "String",
                },
            },
        },
    },
};
exports.ServiceNowV2LinkedServiceTypeProperties = {
    type: {
        name: "Composite",
        className: "ServiceNowV2LinkedServiceTypeProperties",
        modelProperties: {
            endpoint: {
                serializedName: "endpoint",
                required: true,
                type: {
                    name: "any",
                },
            },
            authenticationType: {
                serializedName: "authenticationType",
                required: true,
                type: {
                    name: "String",
                },
            },
            username: {
                serializedName: "username",
                type: {
                    name: "any",
                },
            },
            password: {
                serializedName: "password",
                type: {
                    name: "Composite",
                    className: "SecretBase",
                },
            },
            clientId: {
                serializedName: "clientId",
                type: {
                    name: "any",
                },
            },
            clientSecret: {
                serializedName: "clientSecret",
                type: {
                    name: "Composite",
                    className: "SecretBase",
                },
            },
            grantType: {
                serializedName: "grantType",
                type: {
                    name: "any",
                },
            },
            encryptedCredential: {
                serializedName: "encryptedCredential",
                type: {
                    name: "String",
                },
            },
        },
    },
};
exports.ActivityPolicy = {
    type: {
        name: "Composite",
        className: "ActivityPolicy",
        additionalProperties: { type: { name: "Object" } },
        modelProperties: {
            timeout: {
                serializedName: "timeout",
                type: {
                    name: "any",
                },
            },
            retry: {
                serializedName: "retry",
                type: {
                    name: "any",
                },
            },
            retryIntervalInSeconds: {
                constraints: {
                    InclusiveMaximum: 86400,
                    InclusiveMinimum: 30,
                },
                serializedName: "retryIntervalInSeconds",
                type: {
                    name: "Number",
                },
            },
            secureInput: {
                serializedName: "secureInput",
                type: {
                    name: "Boolean",
                },
            },
            secureOutput: {
                serializedName: "secureOutput",
                type: {
                    name: "Boolean",
                },
            },
        },
    },
};
exports.StoreReadSettings = {
    serializedName: "StoreReadSettings",
    type: {
        name: "Composite",
        className: "StoreReadSettings",
        uberParent: "StoreReadSettings",
        additionalProperties: { type: { name: "Object" } },
        polymorphicDiscriminator: {
            serializedName: "type",
            clientName: "type",
        },
        modelProperties: {
            type: {
                serializedName: "type",
                required: true,
                type: {
                    name: "String",
                },
            },
            maxConcurrentConnections: {
                serializedName: "maxConcurrentConnections",
                type: {
                    name: "any",
                },
            },
        },
    },
};
exports.StoreWriteSettings = {
    serializedName: "StoreWriteSettings",
    type: {
        name: "Composite",
        className: "StoreWriteSettings",
        uberParent: "StoreWriteSettings",
        additionalProperties: { type: { name: "Object" } },
        polymorphicDiscriminator: {
            serializedName: "type",
            clientName: "type",
        },
        modelProperties: {
            type: {
                serializedName: "type",
                required: true,
                type: {
                    name: "String",
                },
            },
            maxConcurrentConnections: {
                serializedName: "maxConcurrentConnections",
                type: {
                    name: "any",
                },
            },
            copyBehavior: {
                serializedName: "copyBehavior",
                type: {
                    name: "any",
                },
            },
            metadata: {
                serializedName: "metadata",
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "Composite",
                            className: "MetadataItem",
                        },
                    },
                },
            },
        },
    },
};
exports.MetadataItem = {
    type: {
        name: "Composite",
        className: "MetadataItem",
        modelProperties: {
            name: {
                serializedName: "name",
                type: {
                    name: "any",
                },
            },
            value: {
                serializedName: "value",
                type: {
                    name: "any",
                },
            },
        },
    },
};
exports.DistcpSettings = {
    type: {
        name: "Composite",
        className: "DistcpSettings",
        modelProperties: {
            resourceManagerEndpoint: {
                serializedName: "resourceManagerEndpoint",
                required: true,
                type: {
                    name: "any",
                },
            },
            tempScriptPath: {
                serializedName: "tempScriptPath",
                required: true,
                type: {
                    name: "any",
                },
            },
            distcpOptions: {
                serializedName: "distcpOptions",
                type: {
                    name: "any",
                },
            },
        },
    },
};
exports.FormatReadSettings = {
    serializedName: "FormatReadSettings",
    type: {
        name: "Composite",
        className: "FormatReadSettings",
        uberParent: "FormatReadSettings",
        additionalProperties: { type: { name: "Object" } },
        polymorphicDiscriminator: {
            serializedName: "type",
            clientName: "type",
        },
        modelProperties: {
            type: {
                serializedName: "type",
                required: true,
                type: {
                    name: "String",
                },
            },
        },
    },
};
exports.CompressionReadSettings = {
    serializedName: "CompressionReadSettings",
    type: {
        name: "Composite",
        className: "CompressionReadSettings",
        uberParent: "CompressionReadSettings",
        additionalProperties: { type: { name: "Object" } },
        polymorphicDiscriminator: {
            serializedName: "type",
            clientName: "type",
        },
        modelProperties: {
            type: {
                serializedName: "type",
                required: true,
                type: {
                    name: "String",
                },
            },
        },
    },
};
exports.FormatWriteSettings = {
    serializedName: "FormatWriteSettings",
    type: {
        name: "Composite",
        className: "FormatWriteSettings",
        uberParent: "FormatWriteSettings",
        additionalProperties: { type: { name: "Object" } },
        polymorphicDiscriminator: {
            serializedName: "type",
            clientName: "type",
        },
        modelProperties: {
            type: {
                serializedName: "type",
                required: true,
                type: {
                    name: "String",
                },
            },
        },
    },
};
exports.CopySource = {
    serializedName: "CopySource",
    type: {
        name: "Composite",
        className: "CopySource",
        uberParent: "CopySource",
        additionalProperties: { type: { name: "Object" } },
        polymorphicDiscriminator: {
            serializedName: "type",
            clientName: "type",
        },
        modelProperties: {
            type: {
                serializedName: "type",
                required: true,
                type: {
                    name: "String",
                },
            },
            sourceRetryCount: {
                serializedName: "sourceRetryCount",
                type: {
                    name: "any",
                },
            },
            sourceRetryWait: {
                serializedName: "sourceRetryWait",
                type: {
                    name: "any",
                },
            },
            maxConcurrentConnections: {
                serializedName: "maxConcurrentConnections",
                type: {
                    name: "any",
                },
            },
        },
    },
};
exports.CopySink = {
    serializedName: "CopySink",
    type: {
        name: "Composite",
        className: "CopySink",
        uberParent: "CopySink",
        additionalProperties: { type: { name: "Object" } },
        polymorphicDiscriminator: {
            serializedName: "type",
            clientName: "type",
        },
        modelProperties: {
            type: {
                serializedName: "type",
                required: true,
                type: {
                    name: "String",
                },
            },
            writeBatchSize: {
                serializedName: "writeBatchSize",
                type: {
                    name: "any",
                },
            },
            writeBatchTimeout: {
                serializedName: "writeBatchTimeout",
                type: {
                    name: "any",
                },
            },
            sinkRetryCount: {
                serializedName: "sinkRetryCount",
                type: {
                    name: "any",
                },
            },
            sinkRetryWait: {
                serializedName: "sinkRetryWait",
                type: {
                    name: "any",
                },
            },
            maxConcurrentConnections: {
                serializedName: "maxConcurrentConnections",
                type: {
                    name: "any",
                },
            },
        },
    },
};
exports.StagingSettings = {
    type: {
        name: "Composite",
        className: "StagingSettings",
        additionalProperties: { type: { name: "Object" } },
        modelProperties: {
            linkedServiceName: {
                serializedName: "linkedServiceName",
                type: {
                    name: "Composite",
                    className: "LinkedServiceReference",
                },
            },
            path: {
                serializedName: "path",
                type: {
                    name: "any",
                },
            },
            enableCompression: {
                serializedName: "enableCompression",
                type: {
                    name: "any",
                },
            },
        },
    },
};
exports.RedirectIncompatibleRowSettings = {
    type: {
        name: "Composite",
        className: "RedirectIncompatibleRowSettings",
        additionalProperties: { type: { name: "Object" } },
        modelProperties: {
            linkedServiceName: {
                serializedName: "linkedServiceName",
                required: true,
                type: {
                    name: "any",
                },
            },
            path: {
                serializedName: "path",
                type: {
                    name: "any",
                },
            },
        },
    },
};
exports.LogStorageSettings = {
    type: {
        name: "Composite",
        className: "LogStorageSettings",
        additionalProperties: { type: { name: "Object" } },
        modelProperties: {
            linkedServiceName: {
                serializedName: "linkedServiceName",
                type: {
                    name: "Composite",
                    className: "LinkedServiceReference",
                },
            },
            path: {
                serializedName: "path",
                type: {
                    name: "any",
                },
            },
            logLevel: {
                serializedName: "logLevel",
                type: {
                    name: "any",
                },
            },
            enableReliableLogging: {
                serializedName: "enableReliableLogging",
                type: {
                    name: "any",
                },
            },
        },
    },
};
exports.LogSettings = {
    type: {
        name: "Composite",
        className: "LogSettings",
        modelProperties: {
            enableCopyActivityLog: {
                serializedName: "enableCopyActivityLog",
                type: {
                    name: "any",
                },
            },
            copyActivityLogSettings: {
                serializedName: "copyActivityLogSettings",
                type: {
                    name: "Composite",
                    className: "CopyActivityLogSettings",
                },
            },
            logLocationSettings: {
                serializedName: "logLocationSettings",
                type: {
                    name: "Composite",
                    className: "LogLocationSettings",
                },
            },
        },
    },
};
exports.CopyActivityLogSettings = {
    type: {
        name: "Composite",
        className: "CopyActivityLogSettings",
        modelProperties: {
            logLevel: {
                serializedName: "logLevel",
                type: {
                    name: "any",
                },
            },
            enableReliableLogging: {
                serializedName: "enableReliableLogging",
                type: {
                    name: "any",
                },
            },
        },
    },
};
exports.LogLocationSettings = {
    type: {
        name: "Composite",
        className: "LogLocationSettings",
        modelProperties: {
            linkedServiceName: {
                serializedName: "linkedServiceName",
                type: {
                    name: "Composite",
                    className: "LinkedServiceReference",
                },
            },
            path: {
                serializedName: "path",
                type: {
                    name: "any",
                },
            },
        },
    },
};
exports.SkipErrorFile = {
    type: {
        name: "Composite",
        className: "SkipErrorFile",
        modelProperties: {
            fileMissing: {
                serializedName: "fileMissing",
                type: {
                    name: "any",
                },
            },
            dataInconsistency: {
                serializedName: "dataInconsistency",
                type: {
                    name: "any",
                },
            },
        },
    },
};
exports.SapHanaPartitionSettings = {
    type: {
        name: "Composite",
        className: "SapHanaPartitionSettings",
        modelProperties: {
            partitionColumnName: {
                serializedName: "partitionColumnName",
                type: {
                    name: "any",
                },
            },
        },
    },
};
exports.SapTablePartitionSettings = {
    type: {
        name: "Composite",
        className: "SapTablePartitionSettings",
        modelProperties: {
            partitionColumnName: {
                serializedName: "partitionColumnName",
                type: {
                    name: "any",
                },
            },
            partitionUpperBound: {
                serializedName: "partitionUpperBound",
                type: {
                    name: "any",
                },
            },
            partitionLowerBound: {
                serializedName: "partitionLowerBound",
                type: {
                    name: "any",
                },
            },
            maxPartitionsNumber: {
                serializedName: "maxPartitionsNumber",
                type: {
                    name: "any",
                },
            },
        },
    },
};
exports.SqlPartitionSettings = {
    type: {
        name: "Composite",
        className: "SqlPartitionSettings",
        modelProperties: {
            partitionColumnName: {
                serializedName: "partitionColumnName",
                type: {
                    name: "any",
                },
            },
            partitionUpperBound: {
                serializedName: "partitionUpperBound",
                type: {
                    name: "any",
                },
            },
            partitionLowerBound: {
                serializedName: "partitionLowerBound",
                type: {
                    name: "any",
                },
            },
        },
    },
};
exports.OraclePartitionSettings = {
    type: {
        name: "Composite",
        className: "OraclePartitionSettings",
        modelProperties: {
            partitionNames: {
                serializedName: "partitionNames",
                type: {
                    name: "any",
                },
            },
            partitionColumnName: {
                serializedName: "partitionColumnName",
                type: {
                    name: "any",
                },
            },
            partitionUpperBound: {
                serializedName: "partitionUpperBound",
                type: {
                    name: "any",
                },
            },
            partitionLowerBound: {
                serializedName: "partitionLowerBound",
                type: {
                    name: "any",
                },
            },
        },
    },
};
exports.AmazonRdsForOraclePartitionSettings = {
    type: {
        name: "Composite",
        className: "AmazonRdsForOraclePartitionSettings",
        modelProperties: {
            partitionNames: {
                serializedName: "partitionNames",
                type: {
                    name: "any",
                },
            },
            partitionColumnName: {
                serializedName: "partitionColumnName",
                type: {
                    name: "any",
                },
            },
            partitionUpperBound: {
                serializedName: "partitionUpperBound",
                type: {
                    name: "any",
                },
            },
            partitionLowerBound: {
                serializedName: "partitionLowerBound",
                type: {
                    name: "any",
                },
            },
        },
    },
};
exports.TeradataPartitionSettings = {
    type: {
        name: "Composite",
        className: "TeradataPartitionSettings",
        modelProperties: {
            partitionColumnName: {
                serializedName: "partitionColumnName",
                type: {
                    name: "any",
                },
            },
            partitionUpperBound: {
                serializedName: "partitionUpperBound",
                type: {
                    name: "any",
                },
            },
            partitionLowerBound: {
                serializedName: "partitionLowerBound",
                type: {
                    name: "any",
                },
            },
        },
    },
};
exports.ImportSettings = {
    serializedName: "ImportSettings",
    type: {
        name: "Composite",
        className: "ImportSettings",
        uberParent: "ImportSettings",
        additionalProperties: { type: { name: "Object" } },
        polymorphicDiscriminator: {
            serializedName: "type",
            clientName: "type",
        },
        modelProperties: {
            type: {
                serializedName: "type",
                required: true,
                type: {
                    name: "String",
                },
            },
        },
    },
};
exports.MongoDbCursorMethodsProperties = {
    type: {
        name: "Composite",
        className: "MongoDbCursorMethodsProperties",
        additionalProperties: { type: { name: "Object" } },
        modelProperties: {
            project: {
                serializedName: "project",
                type: {
                    name: "any",
                },
            },
            sort: {
                serializedName: "sort",
                type: {
                    name: "any",
                },
            },
            skip: {
                serializedName: "skip",
                type: {
                    name: "any",
                },
            },
            limit: {
                serializedName: "limit",
                type: {
                    name: "any",
                },
            },
        },
    },
};
exports.OutputColumn = {
    type: {
        name: "Composite",
        className: "OutputColumn",
        modelProperties: {
            name: {
                serializedName: "name",
                type: {
                    name: "String",
                },
            },
        },
    },
};
exports.NetezzaPartitionSettings = {
    type: {
        name: "Composite",
        className: "NetezzaPartitionSettings",
        modelProperties: {
            partitionColumnName: {
                serializedName: "partitionColumnName",
                type: {
                    name: "any",
                },
            },
            partitionUpperBound: {
                serializedName: "partitionUpperBound",
                type: {
                    name: "any",
                },
            },
            partitionLowerBound: {
                serializedName: "partitionLowerBound",
                type: {
                    name: "any",
                },
            },
        },
    },
};
exports.RedshiftUnloadSettings = {
    type: {
        name: "Composite",
        className: "RedshiftUnloadSettings",
        modelProperties: {
            s3LinkedServiceName: {
                serializedName: "s3LinkedServiceName",
                type: {
                    name: "Composite",
                    className: "LinkedServiceReference",
                },
            },
            bucketName: {
                serializedName: "bucketName",
                required: true,
                type: {
                    name: "any",
                },
            },
        },
    },
};
exports.ExportSettings = {
    serializedName: "ExportSettings",
    type: {
        name: "Composite",
        className: "ExportSettings",
        uberParent: "ExportSettings",
        additionalProperties: { type: { name: "Object" } },
        polymorphicDiscriminator: {
            serializedName: "type",
            clientName: "type",
        },
        modelProperties: {
            type: {
                serializedName: "type",
                required: true,
                type: {
                    name: "String",
                },
            },
        },
    },
};
exports.DWCopyCommandSettings = {
    type: {
        name: "Composite",
        className: "DWCopyCommandSettings",
        modelProperties: {
            defaultValues: {
                serializedName: "defaultValues",
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "Composite",
                            className: "DWCopyCommandDefaultValue",
                        },
                    },
                },
            },
            additionalOptions: {
                serializedName: "additionalOptions",
                type: {
                    name: "Dictionary",
                    value: { type: { name: "String" } },
                },
            },
        },
    },
};
exports.DWCopyCommandDefaultValue = {
    type: {
        name: "Composite",
        className: "DWCopyCommandDefaultValue",
        modelProperties: {
            columnName: {
                serializedName: "columnName",
                type: {
                    name: "any",
                },
            },
            defaultValue: {
                serializedName: "defaultValue",
                type: {
                    name: "any",
                },
            },
        },
    },
};
exports.StoredProcedureParameter = {
    type: {
        name: "Composite",
        className: "StoredProcedureParameter",
        modelProperties: {
            value: {
                serializedName: "value",
                nullable: true,
                type: {
                    name: "any",
                },
            },
            type: {
                serializedName: "type",
                type: {
                    name: "String",
                },
            },
        },
    },
};
exports.NotebookParameter = {
    type: {
        name: "Composite",
        className: "NotebookParameter",
        modelProperties: {
            value: {
                serializedName: "value",
                nullable: true,
                type: {
                    name: "any",
                },
            },
            type: {
                serializedName: "type",
                type: {
                    name: "String",
                },
            },
        },
    },
};
exports.PolybaseSettings = {
    type: {
        name: "Composite",
        className: "PolybaseSettings",
        additionalProperties: { type: { name: "Object" } },
        modelProperties: {
            rejectType: {
                serializedName: "rejectType",
                type: {
                    name: "String",
                },
            },
            rejectValue: {
                serializedName: "rejectValue",
                type: {
                    name: "any",
                },
            },
            rejectSampleValue: {
                serializedName: "rejectSampleValue",
                type: {
                    name: "any",
                },
            },
            useTypeDefault: {
                serializedName: "useTypeDefault",
                type: {
                    name: "any",
                },
            },
        },
    },
};
exports.AdditionalColumns = {
    type: {
        name: "Composite",
        className: "AdditionalColumns",
        modelProperties: {
            name: {
                serializedName: "name",
                type: {
                    name: "any",
                },
            },
            value: {
                serializedName: "value",
                type: {
                    name: "any",
                },
            },
        },
    },
};
exports.CopyTranslator = {
    serializedName: "CopyTranslator",
    type: {
        name: "Composite",
        className: "CopyTranslator",
        uberParent: "CopyTranslator",
        additionalProperties: { type: { name: "Object" } },
        polymorphicDiscriminator: {
            serializedName: "type",
            clientName: "type",
        },
        modelProperties: {
            type: {
                serializedName: "type",
                required: true,
                type: {
                    name: "String",
                },
            },
        },
    },
};
exports.TypeConversionSettings = {
    type: {
        name: "Composite",
        className: "TypeConversionSettings",
        modelProperties: {
            allowDataTruncation: {
                serializedName: "allowDataTruncation",
                type: {
                    name: "any",
                },
            },
            treatBooleanAsNumber: {
                serializedName: "treatBooleanAsNumber",
                type: {
                    name: "any",
                },
            },
            dateTimeFormat: {
                serializedName: "dateTimeFormat",
                type: {
                    name: "any",
                },
            },
            dateTimeOffsetFormat: {
                serializedName: "dateTimeOffsetFormat",
                type: {
                    name: "any",
                },
            },
            timeSpanFormat: {
                serializedName: "timeSpanFormat",
                type: {
                    name: "any",
                },
            },
            culture: {
                serializedName: "culture",
                type: {
                    name: "any",
                },
            },
        },
    },
};
exports.SsisPackageLocation = {
    type: {
        name: "Composite",
        className: "SsisPackageLocation",
        modelProperties: {
            packagePath: {
                serializedName: "packagePath",
                type: {
                    name: "any",
                },
            },
            type: {
                serializedName: "type",
                type: {
                    name: "String",
                },
            },
            packagePassword: {
                serializedName: "typeProperties.packagePassword",
                type: {
                    name: "Composite",
                    className: "SecretBase",
                },
            },
            accessCredential: {
                serializedName: "typeProperties.accessCredential",
                type: {
                    name: "Composite",
                    className: "SsisAccessCredential",
                },
            },
            configurationPath: {
                serializedName: "typeProperties.configurationPath",
                type: {
                    name: "any",
                },
            },
            configurationAccessCredential: {
                serializedName: "typeProperties.configurationAccessCredential",
                type: {
                    name: "Composite",
                    className: "SsisAccessCredential",
                },
            },
            packageName: {
                serializedName: "typeProperties.packageName",
                type: {
                    name: "String",
                },
            },
            packageContent: {
                serializedName: "typeProperties.packageContent",
                type: {
                    name: "any",
                },
            },
            packageLastModifiedDate: {
                serializedName: "typeProperties.packageLastModifiedDate",
                type: {
                    name: "String",
                },
            },
            childPackages: {
                serializedName: "typeProperties.childPackages",
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "Composite",
                            className: "SsisChildPackage",
                        },
                    },
                },
            },
        },
    },
};
exports.SsisAccessCredential = {
    type: {
        name: "Composite",
        className: "SsisAccessCredential",
        modelProperties: {
            domain: {
                serializedName: "domain",
                required: true,
                type: {
                    name: "any",
                },
            },
            userName: {
                serializedName: "userName",
                required: true,
                type: {
                    name: "any",
                },
            },
            password: {
                serializedName: "password",
                type: {
                    name: "Composite",
                    className: "SecretBase",
                },
            },
        },
    },
};
exports.SsisChildPackage = {
    type: {
        name: "Composite",
        className: "SsisChildPackage",
        modelProperties: {
            packagePath: {
                serializedName: "packagePath",
                required: true,
                type: {
                    name: "any",
                },
            },
            packageName: {
                serializedName: "packageName",
                type: {
                    name: "String",
                },
            },
            packageContent: {
                serializedName: "packageContent",
                required: true,
                type: {
                    name: "any",
                },
            },
            packageLastModifiedDate: {
                serializedName: "packageLastModifiedDate",
                type: {
                    name: "String",
                },
            },
        },
    },
};
exports.SsisExecutionCredential = {
    type: {
        name: "Composite",
        className: "SsisExecutionCredential",
        modelProperties: {
            domain: {
                serializedName: "domain",
                required: true,
                type: {
                    name: "any",
                },
            },
            userName: {
                serializedName: "userName",
                required: true,
                type: {
                    name: "any",
                },
            },
            password: {
                serializedName: "password",
                type: {
                    name: "Composite",
                    className: "SecureString",
                },
            },
        },
    },
};
exports.SsisExecutionParameter = {
    type: {
        name: "Composite",
        className: "SsisExecutionParameter",
        modelProperties: {
            value: {
                serializedName: "value",
                required: true,
                type: {
                    name: "any",
                },
            },
        },
    },
};
exports.SsisPropertyOverride = {
    type: {
        name: "Composite",
        className: "SsisPropertyOverride",
        modelProperties: {
            value: {
                serializedName: "value",
                required: true,
                type: {
                    name: "any",
                },
            },
            isSensitive: {
                serializedName: "isSensitive",
                type: {
                    name: "Boolean",
                },
            },
        },
    },
};
exports.SsisLogLocation = {
    type: {
        name: "Composite",
        className: "SsisLogLocation",
        modelProperties: {
            logPath: {
                serializedName: "logPath",
                required: true,
                type: {
                    name: "any",
                },
            },
            type: {
                serializedName: "type",
                required: true,
                type: {
                    name: "String",
                },
            },
            accessCredential: {
                serializedName: "typeProperties.accessCredential",
                type: {
                    name: "Composite",
                    className: "SsisAccessCredential",
                },
            },
            logRefreshInterval: {
                serializedName: "typeProperties.logRefreshInterval",
                type: {
                    name: "any",
                },
            },
        },
    },
};
exports.CustomActivityReferenceObject = {
    type: {
        name: "Composite",
        className: "CustomActivityReferenceObject",
        modelProperties: {
            linkedServices: {
                serializedName: "linkedServices",
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "Composite",
                            className: "LinkedServiceReference",
                        },
                    },
                },
            },
            datasets: {
                serializedName: "datasets",
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "Composite",
                            className: "DatasetReference",
                        },
                    },
                },
            },
        },
    },
};
exports.WebActivityAuthentication = {
    type: {
        name: "Composite",
        className: "WebActivityAuthentication",
        modelProperties: {
            type: {
                serializedName: "type",
                required: true,
                type: {
                    name: "String",
                },
            },
            pfx: {
                serializedName: "pfx",
                type: {
                    name: "Composite",
                    className: "SecretBase",
                },
            },
            username: {
                serializedName: "username",
                type: {
                    name: "any",
                },
            },
            password: {
                serializedName: "password",
                type: {
                    name: "Composite",
                    className: "SecretBase",
                },
            },
            resource: {
                serializedName: "resource",
                type: {
                    name: "any",
                },
            },
            userTenant: {
                serializedName: "userTenant",
                type: {
                    name: "any",
                },
            },
            credential: {
                serializedName: "credential",
                type: {
                    name: "Composite",
                    className: "CredentialReference",
                },
            },
        },
    },
};
exports.SwitchCase = {
    type: {
        name: "Composite",
        className: "SwitchCase",
        modelProperties: {
            value: {
                serializedName: "value",
                type: {
                    name: "String",
                },
            },
            activities: {
                serializedName: "activities",
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "Composite",
                            className: "Activity",
                        },
                    },
                },
            },
        },
    },
};
exports.AzureMLWebServiceFile = {
    type: {
        name: "Composite",
        className: "AzureMLWebServiceFile",
        modelProperties: {
            filePath: {
                serializedName: "filePath",
                required: true,
                type: {
                    name: "any",
                },
            },
            linkedServiceName: {
                serializedName: "linkedServiceName",
                type: {
                    name: "Composite",
                    className: "LinkedServiceReference",
                },
            },
        },
    },
};
exports.SecureInputOutputPolicy = {
    type: {
        name: "Composite",
        className: "SecureInputOutputPolicy",
        modelProperties: {
            secureInput: {
                serializedName: "secureInput",
                type: {
                    name: "Boolean",
                },
            },
            secureOutput: {
                serializedName: "secureOutput",
                type: {
                    name: "Boolean",
                },
            },
        },
    },
};
exports.ContinuationSettingsReference = {
    type: {
        name: "Composite",
        className: "ContinuationSettingsReference",
        modelProperties: {
            continuationTtlInMinutes: {
                serializedName: "continuationTtlInMinutes",
                type: {
                    name: "any",
                },
            },
            idleCondition: {
                serializedName: "idleCondition",
                type: {
                    name: "any",
                },
            },
            customizedCheckpointKey: {
                serializedName: "customizedCheckpointKey",
                type: {
                    name: "any",
                },
            },
        },
    },
};
exports.ExecuteDataFlowActivityTypePropertiesCompute = {
    type: {
        name: "Composite",
        className: "ExecuteDataFlowActivityTypePropertiesCompute",
        modelProperties: {
            computeType: {
                serializedName: "computeType",
                type: {
                    name: "any",
                },
            },
            coreCount: {
                serializedName: "coreCount",
                type: {
                    name: "any",
                },
            },
        },
    },
};
exports.ScriptActivityScriptBlock = {
    type: {
        name: "Composite",
        className: "ScriptActivityScriptBlock",
        modelProperties: {
            text: {
                serializedName: "text",
                required: true,
                type: {
                    name: "any",
                },
            },
            type: {
                serializedName: "type",
                required: true,
                type: {
                    name: "any",
                },
            },
            parameters: {
                serializedName: "parameters",
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "Composite",
                            className: "ScriptActivityParameter",
                        },
                    },
                },
            },
        },
    },
};
exports.ScriptActivityParameter = {
    type: {
        name: "Composite",
        className: "ScriptActivityParameter",
        modelProperties: {
            name: {
                serializedName: "name",
                type: {
                    name: "any",
                },
            },
            type: {
                serializedName: "type",
                type: {
                    name: "String",
                },
            },
            value: {
                serializedName: "value",
                type: {
                    name: "any",
                },
            },
            direction: {
                serializedName: "direction",
                type: {
                    name: "String",
                },
            },
            size: {
                serializedName: "size",
                type: {
                    name: "Number",
                },
            },
        },
    },
};
exports.ScriptActivityTypePropertiesLogSettings = {
    type: {
        name: "Composite",
        className: "ScriptActivityTypePropertiesLogSettings",
        modelProperties: {
            logDestination: {
                serializedName: "logDestination",
                required: true,
                type: {
                    name: "String",
                },
            },
            logLocationSettings: {
                serializedName: "logLocationSettings",
                type: {
                    name: "Composite",
                    className: "LogLocationSettings",
                },
            },
        },
    },
};
exports.SparkConfigurationParametrizationReference = {
    type: {
        name: "Composite",
        className: "SparkConfigurationParametrizationReference",
        modelProperties: {
            type: {
                serializedName: "type",
                required: true,
                type: {
                    name: "String",
                },
            },
            referenceName: {
                serializedName: "referenceName",
                required: true,
                type: {
                    name: "any",
                },
            },
        },
    },
};
exports.SynapseActivityAuthentication = {
    type: {
        name: "Composite",
        className: "SynapseActivityAuthentication",
        modelProperties: {
            type: {
                serializedName: "type",
                required: true,
                type: {
                    name: "String",
                },
            },
            credential: {
                serializedName: "credential",
                type: {
                    name: "Composite",
                    className: "CredentialReference",
                },
            },
        },
    },
};
exports.ExpressionV2 = {
    type: {
        name: "Composite",
        className: "ExpressionV2",
        modelProperties: {
            type: {
                serializedName: "type",
                type: {
                    name: "String",
                },
            },
            value: {
                serializedName: "value",
                type: {
                    name: "String",
                },
            },
            operators: {
                serializedName: "operators",
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "String",
                        },
                    },
                },
            },
            operands: {
                serializedName: "operands",
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "Composite",
                            className: "ExpressionV2",
                        },
                    },
                },
            },
        },
    },
};
exports.ScheduleTriggerRecurrence = {
    type: {
        name: "Composite",
        className: "ScheduleTriggerRecurrence",
        additionalProperties: { type: { name: "Object" } },
        modelProperties: {
            frequency: {
                serializedName: "frequency",
                type: {
                    name: "String",
                },
            },
            interval: {
                serializedName: "interval",
                type: {
                    name: "Number",
                },
            },
            startTime: {
                serializedName: "startTime",
                type: {
                    name: "DateTime",
                },
            },
            endTime: {
                serializedName: "endTime",
                type: {
                    name: "DateTime",
                },
            },
            timeZone: {
                serializedName: "timeZone",
                type: {
                    name: "String",
                },
            },
            schedule: {
                serializedName: "schedule",
                type: {
                    name: "Composite",
                    className: "RecurrenceSchedule",
                },
            },
        },
    },
};
exports.RecurrenceSchedule = {
    type: {
        name: "Composite",
        className: "RecurrenceSchedule",
        additionalProperties: { type: { name: "Object" } },
        modelProperties: {
            minutes: {
                serializedName: "minutes",
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "Number",
                        },
                    },
                },
            },
            hours: {
                serializedName: "hours",
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "Number",
                        },
                    },
                },
            },
            weekDays: {
                serializedName: "weekDays",
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "Enum",
                            allowedValues: [
                                "Sunday",
                                "Monday",
                                "Tuesday",
                                "Wednesday",
                                "Thursday",
                                "Friday",
                                "Saturday",
                            ],
                        },
                    },
                },
            },
            monthDays: {
                serializedName: "monthDays",
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "Number",
                        },
                    },
                },
            },
            monthlyOccurrences: {
                serializedName: "monthlyOccurrences",
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "Composite",
                            className: "RecurrenceScheduleOccurrence",
                        },
                    },
                },
            },
        },
    },
};
exports.RecurrenceScheduleOccurrence = {
    type: {
        name: "Composite",
        className: "RecurrenceScheduleOccurrence",
        additionalProperties: { type: { name: "Object" } },
        modelProperties: {
            day: {
                serializedName: "day",
                type: {
                    name: "Enum",
                    allowedValues: [
                        "Sunday",
                        "Monday",
                        "Tuesday",
                        "Wednesday",
                        "Thursday",
                        "Friday",
                        "Saturday",
                    ],
                },
            },
            occurrence: {
                serializedName: "occurrence",
                type: {
                    name: "Number",
                },
            },
        },
    },
};
exports.RetryPolicy = {
    type: {
        name: "Composite",
        className: "RetryPolicy",
        modelProperties: {
            count: {
                serializedName: "count",
                type: {
                    name: "any",
                },
            },
            intervalInSeconds: {
                constraints: {
                    InclusiveMaximum: 86400,
                    InclusiveMinimum: 30,
                },
                serializedName: "intervalInSeconds",
                type: {
                    name: "Number",
                },
            },
        },
    },
};
exports.DependencyReference = {
    type: {
        name: "Composite",
        className: "DependencyReference",
        uberParent: "DependencyReference",
        polymorphicDiscriminator: {
            serializedName: "type",
            clientName: "type",
        },
        modelProperties: {
            type: {
                serializedName: "type",
                required: true,
                type: {
                    name: "String",
                },
            },
        },
    },
};
exports.TriggerReference = {
    type: {
        name: "Composite",
        className: "TriggerReference",
        modelProperties: {
            type: {
                serializedName: "type",
                required: true,
                type: {
                    name: "String",
                },
            },
            referenceName: {
                serializedName: "referenceName",
                required: true,
                type: {
                    name: "String",
                },
            },
        },
    },
};
exports.IntegrationRuntimeComputeProperties = {
    type: {
        name: "Composite",
        className: "IntegrationRuntimeComputeProperties",
        additionalProperties: { type: { name: "Object" } },
        modelProperties: {
            location: {
                serializedName: "location",
                type: {
                    name: "String",
                },
            },
            nodeSize: {
                serializedName: "nodeSize",
                type: {
                    name: "String",
                },
            },
            numberOfNodes: {
                constraints: {
                    InclusiveMinimum: 1,
                },
                serializedName: "numberOfNodes",
                type: {
                    name: "Number",
                },
            },
            maxParallelExecutionsPerNode: {
                constraints: {
                    InclusiveMinimum: 1,
                },
                serializedName: "maxParallelExecutionsPerNode",
                type: {
                    name: "Number",
                },
            },
            dataFlowProperties: {
                serializedName: "dataFlowProperties",
                type: {
                    name: "Composite",
                    className: "IntegrationRuntimeDataFlowProperties",
                },
            },
            vNetProperties: {
                serializedName: "vNetProperties",
                type: {
                    name: "Composite",
                    className: "IntegrationRuntimeVNetProperties",
                },
            },
        },
    },
};
exports.IntegrationRuntimeDataFlowProperties = {
    type: {
        name: "Composite",
        className: "IntegrationRuntimeDataFlowProperties",
        additionalProperties: { type: { name: "Object" } },
        modelProperties: {
            computeType: {
                serializedName: "computeType",
                type: {
                    name: "String",
                },
            },
            coreCount: {
                serializedName: "coreCount",
                type: {
                    name: "Number",
                },
            },
            timeToLive: {
                constraints: {
                    InclusiveMinimum: 0,
                },
                serializedName: "timeToLive",
                type: {
                    name: "Number",
                },
            },
            cleanup: {
                serializedName: "cleanup",
                type: {
                    name: "Boolean",
                },
            },
        },
    },
};
exports.IntegrationRuntimeVNetProperties = {
    type: {
        name: "Composite",
        className: "IntegrationRuntimeVNetProperties",
        additionalProperties: { type: { name: "Object" } },
        modelProperties: {
            vNetId: {
                serializedName: "vNetId",
                type: {
                    name: "String",
                },
            },
            subnet: {
                serializedName: "subnet",
                type: {
                    name: "String",
                },
            },
            publicIPs: {
                serializedName: "publicIPs",
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "String",
                        },
                    },
                },
            },
        },
    },
};
exports.IntegrationRuntimeSsisProperties = {
    type: {
        name: "Composite",
        className: "IntegrationRuntimeSsisProperties",
        additionalProperties: { type: { name: "Object" } },
        modelProperties: {
            catalogInfo: {
                serializedName: "catalogInfo",
                type: {
                    name: "Composite",
                    className: "IntegrationRuntimeSsisCatalogInfo",
                },
            },
            licenseType: {
                serializedName: "licenseType",
                type: {
                    name: "String",
                },
            },
            customSetupScriptProperties: {
                serializedName: "customSetupScriptProperties",
                type: {
                    name: "Composite",
                    className: "IntegrationRuntimeCustomSetupScriptProperties",
                },
            },
            dataProxyProperties: {
                serializedName: "dataProxyProperties",
                type: {
                    name: "Composite",
                    className: "IntegrationRuntimeDataProxyProperties",
                },
            },
            edition: {
                serializedName: "edition",
                type: {
                    name: "String",
                },
            },
            expressCustomSetupProperties: {
                serializedName: "expressCustomSetupProperties",
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "Composite",
                            className: "CustomSetupBase",
                        },
                    },
                },
            },
        },
    },
};
exports.IntegrationRuntimeSsisCatalogInfo = {
    type: {
        name: "Composite",
        className: "IntegrationRuntimeSsisCatalogInfo",
        additionalProperties: { type: { name: "Object" } },
        modelProperties: {
            catalogServerEndpoint: {
                serializedName: "catalogServerEndpoint",
                type: {
                    name: "String",
                },
            },
            catalogAdminUserName: {
                constraints: {
                    MaxLength: 128,
                    MinLength: 1,
                },
                serializedName: "catalogAdminUserName",
                type: {
                    name: "String",
                },
            },
            catalogAdminPassword: {
                serializedName: "catalogAdminPassword",
                type: {
                    name: "Composite",
                    className: "SecureString",
                },
            },
            catalogPricingTier: {
                serializedName: "catalogPricingTier",
                type: {
                    name: "String",
                },
            },
        },
    },
};
exports.IntegrationRuntimeCustomSetupScriptProperties = {
    type: {
        name: "Composite",
        className: "IntegrationRuntimeCustomSetupScriptProperties",
        modelProperties: {
            blobContainerUri: {
                serializedName: "blobContainerUri",
                type: {
                    name: "String",
                },
            },
            sasToken: {
                serializedName: "sasToken",
                type: {
                    name: "Composite",
                    className: "SecureString",
                },
            },
        },
    },
};
exports.IntegrationRuntimeDataProxyProperties = {
    type: {
        name: "Composite",
        className: "IntegrationRuntimeDataProxyProperties",
        modelProperties: {
            connectVia: {
                serializedName: "connectVia",
                type: {
                    name: "Composite",
                    className: "EntityReference",
                },
            },
            stagingLinkedService: {
                serializedName: "stagingLinkedService",
                type: {
                    name: "Composite",
                    className: "EntityReference",
                },
            },
            path: {
                serializedName: "path",
                type: {
                    name: "String",
                },
            },
        },
    },
};
exports.EntityReference = {
    type: {
        name: "Composite",
        className: "EntityReference",
        modelProperties: {
            type: {
                serializedName: "type",
                type: {
                    name: "String",
                },
            },
            referenceName: {
                serializedName: "referenceName",
                type: {
                    name: "String",
                },
            },
        },
    },
};
exports.CustomSetupBase = {
    serializedName: "CustomSetupBase",
    type: {
        name: "Composite",
        className: "CustomSetupBase",
        uberParent: "CustomSetupBase",
        polymorphicDiscriminator: {
            serializedName: "type",
            clientName: "type",
        },
        modelProperties: {
            type: {
                serializedName: "type",
                required: true,
                type: {
                    name: "String",
                },
            },
        },
    },
};
exports.ManagedVirtualNetworkReference = {
    type: {
        name: "Composite",
        className: "ManagedVirtualNetworkReference",
        modelProperties: {
            type: {
                defaultValue: "ManagedVirtualNetworkReference",
                isConstant: true,
                serializedName: "type",
                type: {
                    name: "String",
                },
            },
            referenceName: {
                serializedName: "referenceName",
                required: true,
                type: {
                    name: "String",
                },
            },
        },
    },
};
exports.LinkedIntegrationRuntimeType = {
    type: {
        name: "Composite",
        className: "LinkedIntegrationRuntimeType",
        uberParent: "LinkedIntegrationRuntimeType",
        polymorphicDiscriminator: {
            serializedName: "authorizationType",
            clientName: "authorizationType",
        },
        modelProperties: {
            authorizationType: {
                serializedName: "authorizationType",
                required: true,
                type: {
                    name: "String",
                },
            },
        },
    },
};
exports.SecureString = {
    serializedName: "SecureString",
    type: {
        name: "Composite",
        className: "SecureString",
        uberParent: "SecretBase",
        polymorphicDiscriminator: exports.SecretBase.type.polymorphicDiscriminator,
        modelProperties: Object.assign(Object.assign({}, exports.SecretBase.type.modelProperties), { value: {
                serializedName: "value",
                required: true,
                type: {
                    name: "String",
                },
            } }),
    },
};
exports.AzureKeyVaultSecretReference = {
    serializedName: "AzureKeyVaultSecret",
    type: {
        name: "Composite",
        className: "AzureKeyVaultSecretReference",
        uberParent: "SecretBase",
        polymorphicDiscriminator: exports.SecretBase.type.polymorphicDiscriminator,
        modelProperties: Object.assign(Object.assign({}, exports.SecretBase.type.modelProperties), { store: {
                serializedName: "store",
                type: {
                    name: "Composite",
                    className: "LinkedServiceReference",
                },
            }, secretName: {
                serializedName: "secretName",
                required: true,
                type: {
                    name: "any",
                },
            }, secretVersion: {
                serializedName: "secretVersion",
                type: {
                    name: "any",
                },
            } }),
    },
};
exports.AzureEntityResource = {
    type: {
        name: "Composite",
        className: "AzureEntityResource",
        modelProperties: Object.assign(Object.assign({}, exports.Resource.type.modelProperties), { etag: {
                serializedName: "etag",
                readOnly: true,
                type: {
                    name: "String",
                },
            } }),
    },
};
exports.TrackedResource = {
    type: {
        name: "Composite",
        className: "TrackedResource",
        modelProperties: Object.assign(Object.assign({}, exports.Resource.type.modelProperties), { tags: {
                serializedName: "tags",
                type: {
                    name: "Dictionary",
                    value: { type: { name: "String" } },
                },
            }, location: {
                serializedName: "location",
                required: true,
                type: {
                    name: "String",
                },
            } }),
    },
};
exports.ProxyResource = {
    type: {
        name: "Composite",
        className: "ProxyResource",
        modelProperties: Object.assign({}, exports.Resource.type.modelProperties),
    },
};
exports.MappingDataFlow = {
    serializedName: "MappingDataFlow",
    type: {
        name: "Composite",
        className: "MappingDataFlow",
        uberParent: "DataFlow",
        polymorphicDiscriminator: exports.DataFlow.type.polymorphicDiscriminator,
        modelProperties: Object.assign(Object.assign({}, exports.DataFlow.type.modelProperties), { sources: {
                serializedName: "typeProperties.sources",
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "Composite",
                            className: "DataFlowSource",
                        },
                    },
                },
            }, sinks: {
                serializedName: "typeProperties.sinks",
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "Composite",
                            className: "DataFlowSink",
                        },
                    },
                },
            }, transformations: {
                serializedName: "typeProperties.transformations",
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "Composite",
                            className: "Transformation",
                        },
                    },
                },
            }, script: {
                serializedName: "typeProperties.script",
                type: {
                    name: "String",
                },
            }, scriptLines: {
                serializedName: "typeProperties.scriptLines",
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "String",
                        },
                    },
                },
            } }),
    },
};
exports.Flowlet = {
    serializedName: "Flowlet",
    type: {
        name: "Composite",
        className: "Flowlet",
        uberParent: "DataFlow",
        polymorphicDiscriminator: exports.DataFlow.type.polymorphicDiscriminator,
        modelProperties: Object.assign(Object.assign({}, exports.DataFlow.type.modelProperties), { sources: {
                serializedName: "typeProperties.sources",
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "Composite",
                            className: "DataFlowSource",
                        },
                    },
                },
            }, sinks: {
                serializedName: "typeProperties.sinks",
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "Composite",
                            className: "DataFlowSink",
                        },
                    },
                },
            }, transformations: {
                serializedName: "typeProperties.transformations",
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "Composite",
                            className: "Transformation",
                        },
                    },
                },
            }, script: {
                serializedName: "typeProperties.script",
                type: {
                    name: "String",
                },
            }, scriptLines: {
                serializedName: "typeProperties.scriptLines",
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "String",
                        },
                    },
                },
            } }),
    },
};
exports.ManagedIntegrationRuntime = {
    serializedName: "Managed",
    type: {
        name: "Composite",
        className: "ManagedIntegrationRuntime",
        uberParent: "IntegrationRuntime",
        additionalProperties: { type: { name: "Object" } },
        polymorphicDiscriminator: exports.IntegrationRuntime.type.polymorphicDiscriminator,
        modelProperties: Object.assign(Object.assign({}, exports.IntegrationRuntime.type.modelProperties), { state: {
                serializedName: "state",
                readOnly: true,
                type: {
                    name: "String",
                },
            }, managedVirtualNetwork: {
                serializedName: "managedVirtualNetwork",
                type: {
                    name: "Composite",
                    className: "ManagedVirtualNetworkReference",
                },
            }, computeProperties: {
                serializedName: "typeProperties.computeProperties",
                type: {
                    name: "Composite",
                    className: "IntegrationRuntimeComputeProperties",
                },
            }, ssisProperties: {
                serializedName: "typeProperties.ssisProperties",
                type: {
                    name: "Composite",
                    className: "IntegrationRuntimeSsisProperties",
                },
            } }),
    },
};
exports.SelfHostedIntegrationRuntime = {
    serializedName: "SelfHosted",
    type: {
        name: "Composite",
        className: "SelfHostedIntegrationRuntime",
        uberParent: "IntegrationRuntime",
        additionalProperties: { type: { name: "Object" } },
        polymorphicDiscriminator: exports.IntegrationRuntime.type.polymorphicDiscriminator,
        modelProperties: Object.assign(Object.assign({}, exports.IntegrationRuntime.type.modelProperties), { linkedInfo: {
                serializedName: "typeProperties.linkedInfo",
                type: {
                    name: "Composite",
                    className: "LinkedIntegrationRuntimeType",
                },
            } }),
    },
};
exports.IntegrationRuntimeDebugResource = {
    type: {
        name: "Composite",
        className: "IntegrationRuntimeDebugResource",
        modelProperties: Object.assign(Object.assign({}, exports.SubResourceDebugResource.type.modelProperties), { properties: {
                serializedName: "properties",
                type: {
                    name: "Composite",
                    className: "IntegrationRuntime",
                },
            } }),
    },
};
exports.DataFlowDebugResource = {
    type: {
        name: "Composite",
        className: "DataFlowDebugResource",
        modelProperties: Object.assign(Object.assign({}, exports.SubResourceDebugResource.type.modelProperties), { properties: {
                serializedName: "properties",
                type: {
                    name: "Composite",
                    className: "DataFlow",
                },
            } }),
    },
};
exports.DatasetDebugResource = {
    type: {
        name: "Composite",
        className: "DatasetDebugResource",
        modelProperties: Object.assign(Object.assign({}, exports.SubResourceDebugResource.type.modelProperties), { properties: {
                serializedName: "properties",
                type: {
                    name: "Composite",
                    className: "Dataset",
                },
            } }),
    },
};
exports.LinkedServiceDebugResource = {
    type: {
        name: "Composite",
        className: "LinkedServiceDebugResource",
        modelProperties: Object.assign(Object.assign({}, exports.SubResourceDebugResource.type.modelProperties), { properties: {
                serializedName: "properties",
                type: {
                    name: "Composite",
                    className: "LinkedService",
                },
            } }),
    },
};
exports.AmazonS3Dataset = {
    serializedName: "AmazonS3Object",
    type: {
        name: "Composite",
        className: "AmazonS3Dataset",
        uberParent: "Dataset",
        additionalProperties: { type: { name: "Object" } },
        polymorphicDiscriminator: exports.Dataset.type.polymorphicDiscriminator,
        modelProperties: Object.assign(Object.assign({}, exports.Dataset.type.modelProperties), { bucketName: {
                serializedName: "typeProperties.bucketName",
                required: true,
                type: {
                    name: "any",
                },
            }, key: {
                serializedName: "typeProperties.key",
                type: {
                    name: "any",
                },
            }, prefix: {
                serializedName: "typeProperties.prefix",
                type: {
                    name: "any",
                },
            }, version: {
                serializedName: "typeProperties.version",
                type: {
                    name: "any",
                },
            }, modifiedDatetimeStart: {
                serializedName: "typeProperties.modifiedDatetimeStart",
                type: {
                    name: "any",
                },
            }, modifiedDatetimeEnd: {
                serializedName: "typeProperties.modifiedDatetimeEnd",
                type: {
                    name: "any",
                },
            }, format: {
                serializedName: "typeProperties.format",
                type: {
                    name: "Composite",
                    className: "DatasetStorageFormat",
                },
            }, compression: {
                serializedName: "typeProperties.compression",
                type: {
                    name: "Composite",
                    className: "DatasetCompression",
                },
            } }),
    },
};
exports.AvroDataset = {
    serializedName: "Avro",
    type: {
        name: "Composite",
        className: "AvroDataset",
        uberParent: "Dataset",
        additionalProperties: { type: { name: "Object" } },
        polymorphicDiscriminator: exports.Dataset.type.polymorphicDiscriminator,
        modelProperties: Object.assign(Object.assign({}, exports.Dataset.type.modelProperties), { location: {
                serializedName: "typeProperties.location",
                type: {
                    name: "Composite",
                    className: "DatasetLocation",
                },
            }, avroCompressionCodec: {
                serializedName: "typeProperties.avroCompressionCodec",
                type: {
                    name: "any",
                },
            }, avroCompressionLevel: {
                constraints: {
                    InclusiveMaximum: 9,
                    InclusiveMinimum: 1,
                },
                serializedName: "typeProperties.avroCompressionLevel",
                type: {
                    name: "Number",
                },
            } }),
    },
};
exports.ExcelDataset = {
    serializedName: "Excel",
    type: {
        name: "Composite",
        className: "ExcelDataset",
        uberParent: "Dataset",
        additionalProperties: { type: { name: "Object" } },
        polymorphicDiscriminator: exports.Dataset.type.polymorphicDiscriminator,
        modelProperties: Object.assign(Object.assign({}, exports.Dataset.type.modelProperties), { location: {
                serializedName: "typeProperties.location",
                type: {
                    name: "Composite",
                    className: "DatasetLocation",
                },
            }, sheetName: {
                serializedName: "typeProperties.sheetName",
                type: {
                    name: "any",
                },
            }, sheetIndex: {
                serializedName: "typeProperties.sheetIndex",
                type: {
                    name: "any",
                },
            }, range: {
                serializedName: "typeProperties.range",
                type: {
                    name: "any",
                },
            }, firstRowAsHeader: {
                serializedName: "typeProperties.firstRowAsHeader",
                type: {
                    name: "any",
                },
            }, compression: {
                serializedName: "typeProperties.compression",
                type: {
                    name: "Composite",
                    className: "DatasetCompression",
                },
            }, nullValue: {
                serializedName: "typeProperties.nullValue",
                type: {
                    name: "any",
                },
            } }),
    },
};
exports.ParquetDataset = {
    serializedName: "Parquet",
    type: {
        name: "Composite",
        className: "ParquetDataset",
        uberParent: "Dataset",
        additionalProperties: { type: { name: "Object" } },
        polymorphicDiscriminator: exports.Dataset.type.polymorphicDiscriminator,
        modelProperties: Object.assign(Object.assign({}, exports.Dataset.type.modelProperties), { location: {
                serializedName: "typeProperties.location",
                type: {
                    name: "Composite",
                    className: "DatasetLocation",
                },
            }, compressionCodec: {
                serializedName: "typeProperties.compressionCodec",
                type: {
                    name: "any",
                },
            } }),
    },
};
exports.DelimitedTextDataset = {
    serializedName: "DelimitedText",
    type: {
        name: "Composite",
        className: "DelimitedTextDataset",
        uberParent: "Dataset",
        additionalProperties: { type: { name: "Object" } },
        polymorphicDiscriminator: exports.Dataset.type.polymorphicDiscriminator,
        modelProperties: Object.assign(Object.assign({}, exports.Dataset.type.modelProperties), { location: {
                serializedName: "typeProperties.location",
                type: {
                    name: "Composite",
                    className: "DatasetLocation",
                },
            }, columnDelimiter: {
                serializedName: "typeProperties.columnDelimiter",
                type: {
                    name: "any",
                },
            }, rowDelimiter: {
                serializedName: "typeProperties.rowDelimiter",
                type: {
                    name: "any",
                },
            }, encodingName: {
                serializedName: "typeProperties.encodingName",
                type: {
                    name: "any",
                },
            }, compressionCodec: {
                serializedName: "typeProperties.compressionCodec",
                type: {
                    name: "any",
                },
            }, compressionLevel: {
                serializedName: "typeProperties.compressionLevel",
                type: {
                    name: "any",
                },
            }, quoteChar: {
                serializedName: "typeProperties.quoteChar",
                type: {
                    name: "any",
                },
            }, escapeChar: {
                serializedName: "typeProperties.escapeChar",
                type: {
                    name: "any",
                },
            }, firstRowAsHeader: {
                serializedName: "typeProperties.firstRowAsHeader",
                type: {
                    name: "any",
                },
            }, nullValue: {
                serializedName: "typeProperties.nullValue",
                type: {
                    name: "any",
                },
            } }),
    },
};
exports.JsonDataset = {
    serializedName: "Json",
    type: {
        name: "Composite",
        className: "JsonDataset",
        uberParent: "Dataset",
        additionalProperties: { type: { name: "Object" } },
        polymorphicDiscriminator: exports.Dataset.type.polymorphicDiscriminator,
        modelProperties: Object.assign(Object.assign({}, exports.Dataset.type.modelProperties), { location: {
                serializedName: "typeProperties.location",
                type: {
                    name: "Composite",
                    className: "DatasetLocation",
                },
            }, encodingName: {
                serializedName: "typeProperties.encodingName",
                type: {
                    name: "any",
                },
            }, compression: {
                serializedName: "typeProperties.compression",
                type: {
                    name: "Composite",
                    className: "DatasetCompression",
                },
            } }),
    },
};
exports.XmlDataset = {
    serializedName: "Xml",
    type: {
        name: "Composite",
        className: "XmlDataset",
        uberParent: "Dataset",
        additionalProperties: { type: { name: "Object" } },
        polymorphicDiscriminator: exports.Dataset.type.polymorphicDiscriminator,
        modelProperties: Object.assign(Object.assign({}, exports.Dataset.type.modelProperties), { location: {
                serializedName: "typeProperties.location",
                type: {
                    name: "Composite",
                    className: "DatasetLocation",
                },
            }, encodingName: {
                serializedName: "typeProperties.encodingName",
                type: {
                    name: "any",
                },
            }, nullValue: {
                serializedName: "typeProperties.nullValue",
                type: {
                    name: "any",
                },
            }, compression: {
                serializedName: "typeProperties.compression",
                type: {
                    name: "Composite",
                    className: "DatasetCompression",
                },
            } }),
    },
};
exports.OrcDataset = {
    serializedName: "Orc",
    type: {
        name: "Composite",
        className: "OrcDataset",
        uberParent: "Dataset",
        additionalProperties: { type: { name: "Object" } },
        polymorphicDiscriminator: exports.Dataset.type.polymorphicDiscriminator,
        modelProperties: Object.assign(Object.assign({}, exports.Dataset.type.modelProperties), { location: {
                serializedName: "typeProperties.location",
                type: {
                    name: "Composite",
                    className: "DatasetLocation",
                },
            }, orcCompressionCodec: {
                serializedName: "typeProperties.orcCompressionCodec",
                type: {
                    name: "any",
                },
            } }),
    },
};
exports.BinaryDataset = {
    serializedName: "Binary",
    type: {
        name: "Composite",
        className: "BinaryDataset",
        uberParent: "Dataset",
        additionalProperties: { type: { name: "Object" } },
        polymorphicDiscriminator: exports.Dataset.type.polymorphicDiscriminator,
        modelProperties: Object.assign(Object.assign({}, exports.Dataset.type.modelProperties), { location: {
                serializedName: "typeProperties.location",
                type: {
                    name: "Composite",
                    className: "DatasetLocation",
                },
            }, compression: {
                serializedName: "typeProperties.compression",
                type: {
                    name: "Composite",
                    className: "DatasetCompression",
                },
            } }),
    },
};
exports.IcebergDataset = {
    serializedName: "Iceberg",
    type: {
        name: "Composite",
        className: "IcebergDataset",
        uberParent: "Dataset",
        additionalProperties: { type: { name: "Object" } },
        polymorphicDiscriminator: exports.Dataset.type.polymorphicDiscriminator,
        modelProperties: Object.assign(Object.assign({}, exports.Dataset.type.modelProperties), { location: {
                serializedName: "typeProperties.location",
                type: {
                    name: "Composite",
                    className: "DatasetLocation",
                },
            } }),
    },
};
exports.AzureBlobDataset = {
    serializedName: "AzureBlob",
    type: {
        name: "Composite",
        className: "AzureBlobDataset",
        uberParent: "Dataset",
        additionalProperties: { type: { name: "Object" } },
        polymorphicDiscriminator: exports.Dataset.type.polymorphicDiscriminator,
        modelProperties: Object.assign(Object.assign({}, exports.Dataset.type.modelProperties), { folderPath: {
                serializedName: "typeProperties.folderPath",
                type: {
                    name: "any",
                },
            }, tableRootLocation: {
                serializedName: "typeProperties.tableRootLocation",
                type: {
                    name: "any",
                },
            }, fileName: {
                serializedName: "typeProperties.fileName",
                type: {
                    name: "any",
                },
            }, modifiedDatetimeStart: {
                serializedName: "typeProperties.modifiedDatetimeStart",
                type: {
                    name: "any",
                },
            }, modifiedDatetimeEnd: {
                serializedName: "typeProperties.modifiedDatetimeEnd",
                type: {
                    name: "any",
                },
            }, format: {
                serializedName: "typeProperties.format",
                type: {
                    name: "Composite",
                    className: "DatasetStorageFormat",
                },
            }, compression: {
                serializedName: "typeProperties.compression",
                type: {
                    name: "Composite",
                    className: "DatasetCompression",
                },
            } }),
    },
};
exports.AzureTableDataset = {
    serializedName: "AzureTable",
    type: {
        name: "Composite",
        className: "AzureTableDataset",
        uberParent: "Dataset",
        additionalProperties: { type: { name: "Object" } },
        polymorphicDiscriminator: exports.Dataset.type.polymorphicDiscriminator,
        modelProperties: Object.assign(Object.assign({}, exports.Dataset.type.modelProperties), { tableName: {
                serializedName: "typeProperties.tableName",
                required: true,
                type: {
                    name: "any",
                },
            } }),
    },
};
exports.AzureSqlTableDataset = {
    serializedName: "AzureSqlTable",
    type: {
        name: "Composite",
        className: "AzureSqlTableDataset",
        uberParent: "Dataset",
        additionalProperties: { type: { name: "Object" } },
        polymorphicDiscriminator: exports.Dataset.type.polymorphicDiscriminator,
        modelProperties: Object.assign(Object.assign({}, exports.Dataset.type.modelProperties), { tableName: {
                serializedName: "typeProperties.tableName",
                type: {
                    name: "any",
                },
            }, schemaTypePropertiesSchema: {
                serializedName: "typeProperties.schema",
                type: {
                    name: "any",
                },
            }, table: {
                serializedName: "typeProperties.table",
                type: {
                    name: "any",
                },
            } }),
    },
};
exports.AzureSqlMITableDataset = {
    serializedName: "AzureSqlMITable",
    type: {
        name: "Composite",
        className: "AzureSqlMITableDataset",
        uberParent: "Dataset",
        additionalProperties: { type: { name: "Object" } },
        polymorphicDiscriminator: exports.Dataset.type.polymorphicDiscriminator,
        modelProperties: Object.assign(Object.assign({}, exports.Dataset.type.modelProperties), { tableName: {
                serializedName: "typeProperties.tableName",
                type: {
                    name: "any",
                },
            }, schemaTypePropertiesSchema: {
                serializedName: "typeProperties.schema",
                type: {
                    name: "any",
                },
            }, table: {
                serializedName: "typeProperties.table",
                type: {
                    name: "any",
                },
            } }),
    },
};
exports.AzureSqlDWTableDataset = {
    serializedName: "AzureSqlDWTable",
    type: {
        name: "Composite",
        className: "AzureSqlDWTableDataset",
        uberParent: "Dataset",
        additionalProperties: { type: { name: "Object" } },
        polymorphicDiscriminator: exports.Dataset.type.polymorphicDiscriminator,
        modelProperties: Object.assign(Object.assign({}, exports.Dataset.type.modelProperties), { tableName: {
                serializedName: "typeProperties.tableName",
                type: {
                    name: "any",
                },
            }, schemaTypePropertiesSchema: {
                serializedName: "typeProperties.schema",
                type: {
                    name: "any",
                },
            }, table: {
                serializedName: "typeProperties.table",
                type: {
                    name: "any",
                },
            } }),
    },
};
exports.CassandraTableDataset = {
    serializedName: "CassandraTable",
    type: {
        name: "Composite",
        className: "CassandraTableDataset",
        uberParent: "Dataset",
        additionalProperties: { type: { name: "Object" } },
        polymorphicDiscriminator: exports.Dataset.type.polymorphicDiscriminator,
        modelProperties: Object.assign(Object.assign({}, exports.Dataset.type.modelProperties), { tableName: {
                serializedName: "typeProperties.tableName",
                type: {
                    name: "any",
                },
            }, keyspace: {
                serializedName: "typeProperties.keyspace",
                type: {
                    name: "any",
                },
            } }),
    },
};
exports.CustomDataset = {
    serializedName: "CustomDataset",
    type: {
        name: "Composite",
        className: "CustomDataset",
        uberParent: "Dataset",
        additionalProperties: { type: { name: "Object" } },
        polymorphicDiscriminator: exports.Dataset.type.polymorphicDiscriminator,
        modelProperties: Object.assign(Object.assign({}, exports.Dataset.type.modelProperties), { typeProperties: {
                serializedName: "typeProperties",
                type: {
                    name: "any",
                },
            } }),
    },
};
exports.CosmosDbSqlApiCollectionDataset = {
    serializedName: "CosmosDbSqlApiCollection",
    type: {
        name: "Composite",
        className: "CosmosDbSqlApiCollectionDataset",
        uberParent: "Dataset",
        additionalProperties: { type: { name: "Object" } },
        polymorphicDiscriminator: exports.Dataset.type.polymorphicDiscriminator,
        modelProperties: Object.assign(Object.assign({}, exports.Dataset.type.modelProperties), { collectionName: {
                serializedName: "typeProperties.collectionName",
                required: true,
                type: {
                    name: "any",
                },
            } }),
    },
};
exports.DocumentDbCollectionDataset = {
    serializedName: "DocumentDbCollection",
    type: {
        name: "Composite",
        className: "DocumentDbCollectionDataset",
        uberParent: "Dataset",
        additionalProperties: { type: { name: "Object" } },
        polymorphicDiscriminator: exports.Dataset.type.polymorphicDiscriminator,
        modelProperties: Object.assign(Object.assign({}, exports.Dataset.type.modelProperties), { collectionName: {
                serializedName: "typeProperties.collectionName",
                required: true,
                type: {
                    name: "any",
                },
            } }),
    },
};
exports.DynamicsEntityDataset = {
    serializedName: "DynamicsEntity",
    type: {
        name: "Composite",
        className: "DynamicsEntityDataset",
        uberParent: "Dataset",
        additionalProperties: { type: { name: "Object" } },
        polymorphicDiscriminator: exports.Dataset.type.polymorphicDiscriminator,
        modelProperties: Object.assign(Object.assign({}, exports.Dataset.type.modelProperties), { entityName: {
                serializedName: "typeProperties.entityName",
                type: {
                    name: "any",
                },
            } }),
    },
};
exports.DynamicsCrmEntityDataset = {
    serializedName: "DynamicsCrmEntity",
    type: {
        name: "Composite",
        className: "DynamicsCrmEntityDataset",
        uberParent: "Dataset",
        additionalProperties: { type: { name: "Object" } },
        polymorphicDiscriminator: exports.Dataset.type.polymorphicDiscriminator,
        modelProperties: Object.assign(Object.assign({}, exports.Dataset.type.modelProperties), { entityName: {
                serializedName: "typeProperties.entityName",
                type: {
                    name: "any",
                },
            } }),
    },
};
exports.CommonDataServiceForAppsEntityDataset = {
    serializedName: "CommonDataServiceForAppsEntity",
    type: {
        name: "Composite",
        className: "CommonDataServiceForAppsEntityDataset",
        uberParent: "Dataset",
        additionalProperties: { type: { name: "Object" } },
        polymorphicDiscriminator: exports.Dataset.type.polymorphicDiscriminator,
        modelProperties: Object.assign(Object.assign({}, exports.Dataset.type.modelProperties), { entityName: {
                serializedName: "typeProperties.entityName",
                type: {
                    name: "any",
                },
            } }),
    },
};
exports.AzureDataLakeStoreDataset = {
    serializedName: "AzureDataLakeStoreFile",
    type: {
        name: "Composite",
        className: "AzureDataLakeStoreDataset",
        uberParent: "Dataset",
        additionalProperties: { type: { name: "Object" } },
        polymorphicDiscriminator: exports.Dataset.type.polymorphicDiscriminator,
        modelProperties: Object.assign(Object.assign({}, exports.Dataset.type.modelProperties), { folderPath: {
                serializedName: "typeProperties.folderPath",
                type: {
                    name: "any",
                },
            }, fileName: {
                serializedName: "typeProperties.fileName",
                type: {
                    name: "any",
                },
            }, format: {
                serializedName: "typeProperties.format",
                type: {
                    name: "Composite",
                    className: "DatasetStorageFormat",
                },
            }, compression: {
                serializedName: "typeProperties.compression",
                type: {
                    name: "Composite",
                    className: "DatasetCompression",
                },
            } }),
    },
};
exports.AzureBlobFSDataset = {
    serializedName: "AzureBlobFSFile",
    type: {
        name: "Composite",
        className: "AzureBlobFSDataset",
        uberParent: "Dataset",
        additionalProperties: { type: { name: "Object" } },
        polymorphicDiscriminator: exports.Dataset.type.polymorphicDiscriminator,
        modelProperties: Object.assign(Object.assign({}, exports.Dataset.type.modelProperties), { folderPath: {
                serializedName: "typeProperties.folderPath",
                type: {
                    name: "any",
                },
            }, fileName: {
                serializedName: "typeProperties.fileName",
                type: {
                    name: "any",
                },
            }, format: {
                serializedName: "typeProperties.format",
                type: {
                    name: "Composite",
                    className: "DatasetStorageFormat",
                },
            }, compression: {
                serializedName: "typeProperties.compression",
                type: {
                    name: "Composite",
                    className: "DatasetCompression",
                },
            } }),
    },
};
exports.Office365Dataset = {
    serializedName: "Office365Table",
    type: {
        name: "Composite",
        className: "Office365Dataset",
        uberParent: "Dataset",
        additionalProperties: { type: { name: "Object" } },
        polymorphicDiscriminator: exports.Dataset.type.polymorphicDiscriminator,
        modelProperties: Object.assign(Object.assign({}, exports.Dataset.type.modelProperties), { tableName: {
                serializedName: "typeProperties.tableName",
                required: true,
                type: {
                    name: "any",
                },
            }, predicate: {
                serializedName: "typeProperties.predicate",
                type: {
                    name: "any",
                },
            } }),
    },
};
exports.FileShareDataset = {
    serializedName: "FileShare",
    type: {
        name: "Composite",
        className: "FileShareDataset",
        uberParent: "Dataset",
        additionalProperties: { type: { name: "Object" } },
        polymorphicDiscriminator: exports.Dataset.type.polymorphicDiscriminator,
        modelProperties: Object.assign(Object.assign({}, exports.Dataset.type.modelProperties), { folderPath: {
                serializedName: "typeProperties.folderPath",
                type: {
                    name: "any",
                },
            }, fileName: {
                serializedName: "typeProperties.fileName",
                type: {
                    name: "any",
                },
            }, modifiedDatetimeStart: {
                serializedName: "typeProperties.modifiedDatetimeStart",
                type: {
                    name: "any",
                },
            }, modifiedDatetimeEnd: {
                serializedName: "typeProperties.modifiedDatetimeEnd",
                type: {
                    name: "any",
                },
            }, format: {
                serializedName: "typeProperties.format",
                type: {
                    name: "Composite",
                    className: "DatasetStorageFormat",
                },
            }, fileFilter: {
                serializedName: "typeProperties.fileFilter",
                type: {
                    name: "any",
                },
            }, compression: {
                serializedName: "typeProperties.compression",
                type: {
                    name: "Composite",
                    className: "DatasetCompression",
                },
            } }),
    },
};
exports.MongoDbCollectionDataset = {
    serializedName: "MongoDbCollection",
    type: {
        name: "Composite",
        className: "MongoDbCollectionDataset",
        uberParent: "Dataset",
        additionalProperties: { type: { name: "Object" } },
        polymorphicDiscriminator: exports.Dataset.type.polymorphicDiscriminator,
        modelProperties: Object.assign(Object.assign({}, exports.Dataset.type.modelProperties), { collectionName: {
                serializedName: "typeProperties.collectionName",
                required: true,
                type: {
                    name: "any",
                },
            } }),
    },
};
exports.MongoDbAtlasCollectionDataset = {
    serializedName: "MongoDbAtlasCollection",
    type: {
        name: "Composite",
        className: "MongoDbAtlasCollectionDataset",
        uberParent: "Dataset",
        additionalProperties: { type: { name: "Object" } },
        polymorphicDiscriminator: exports.Dataset.type.polymorphicDiscriminator,
        modelProperties: Object.assign(Object.assign({}, exports.Dataset.type.modelProperties), { collection: {
                serializedName: "typeProperties.collection",
                required: true,
                type: {
                    name: "any",
                },
            } }),
    },
};
exports.MongoDbV2CollectionDataset = {
    serializedName: "MongoDbV2Collection",
    type: {
        name: "Composite",
        className: "MongoDbV2CollectionDataset",
        uberParent: "Dataset",
        additionalProperties: { type: { name: "Object" } },
        polymorphicDiscriminator: exports.Dataset.type.polymorphicDiscriminator,
        modelProperties: Object.assign(Object.assign({}, exports.Dataset.type.modelProperties), { collection: {
                serializedName: "typeProperties.collection",
                required: true,
                type: {
                    name: "any",
                },
            } }),
    },
};
exports.CosmosDbMongoDbApiCollectionDataset = {
    serializedName: "CosmosDbMongoDbApiCollection",
    type: {
        name: "Composite",
        className: "CosmosDbMongoDbApiCollectionDataset",
        uberParent: "Dataset",
        additionalProperties: { type: { name: "Object" } },
        polymorphicDiscriminator: exports.Dataset.type.polymorphicDiscriminator,
        modelProperties: Object.assign(Object.assign({}, exports.Dataset.type.modelProperties), { collection: {
                serializedName: "typeProperties.collection",
                required: true,
                type: {
                    name: "any",
                },
            } }),
    },
};
exports.ODataResourceDataset = {
    serializedName: "ODataResource",
    type: {
        name: "Composite",
        className: "ODataResourceDataset",
        uberParent: "Dataset",
        additionalProperties: { type: { name: "Object" } },
        polymorphicDiscriminator: exports.Dataset.type.polymorphicDiscriminator,
        modelProperties: Object.assign(Object.assign({}, exports.Dataset.type.modelProperties), { path: {
                serializedName: "typeProperties.path",
                type: {
                    name: "any",
                },
            } }),
    },
};
exports.OracleTableDataset = {
    serializedName: "OracleTable",
    type: {
        name: "Composite",
        className: "OracleTableDataset",
        uberParent: "Dataset",
        additionalProperties: { type: { name: "Object" } },
        polymorphicDiscriminator: exports.Dataset.type.polymorphicDiscriminator,
        modelProperties: Object.assign(Object.assign({}, exports.Dataset.type.modelProperties), { tableName: {
                serializedName: "typeProperties.tableName",
                type: {
                    name: "any",
                },
            }, schemaTypePropertiesSchema: {
                serializedName: "typeProperties.schema",
                type: {
                    name: "any",
                },
            }, table: {
                serializedName: "typeProperties.table",
                type: {
                    name: "any",
                },
            } }),
    },
};
exports.AmazonRdsForOracleTableDataset = {
    serializedName: "AmazonRdsForOracleTable",
    type: {
        name: "Composite",
        className: "AmazonRdsForOracleTableDataset",
        uberParent: "Dataset",
        additionalProperties: { type: { name: "Object" } },
        polymorphicDiscriminator: exports.Dataset.type.polymorphicDiscriminator,
        modelProperties: Object.assign(Object.assign({}, exports.Dataset.type.modelProperties), { schemaTypePropertiesSchema: {
                serializedName: "typeProperties.schema",
                type: {
                    name: "any",
                },
            }, table: {
                serializedName: "typeProperties.table",
                type: {
                    name: "any",
                },
            } }),
    },
};
exports.TeradataTableDataset = {
    serializedName: "TeradataTable",
    type: {
        name: "Composite",
        className: "TeradataTableDataset",
        uberParent: "Dataset",
        additionalProperties: { type: { name: "Object" } },
        polymorphicDiscriminator: exports.Dataset.type.polymorphicDiscriminator,
        modelProperties: Object.assign(Object.assign({}, exports.Dataset.type.modelProperties), { database: {
                serializedName: "typeProperties.database",
                type: {
                    name: "any",
                },
            }, table: {
                serializedName: "typeProperties.table",
                type: {
                    name: "any",
                },
            } }),
    },
};
exports.AzureMySqlTableDataset = {
    serializedName: "AzureMySqlTable",
    type: {
        name: "Composite",
        className: "AzureMySqlTableDataset",
        uberParent: "Dataset",
        additionalProperties: { type: { name: "Object" } },
        polymorphicDiscriminator: exports.Dataset.type.polymorphicDiscriminator,
        modelProperties: Object.assign(Object.assign({}, exports.Dataset.type.modelProperties), { tableName: {
                serializedName: "typeProperties.tableName",
                type: {
                    name: "any",
                },
            }, table: {
                serializedName: "typeProperties.table",
                type: {
                    name: "any",
                },
            } }),
    },
};
exports.AmazonRedshiftTableDataset = {
    serializedName: "AmazonRedshiftTable",
    type: {
        name: "Composite",
        className: "AmazonRedshiftTableDataset",
        uberParent: "Dataset",
        additionalProperties: { type: { name: "Object" } },
        polymorphicDiscriminator: exports.Dataset.type.polymorphicDiscriminator,
        modelProperties: Object.assign(Object.assign({}, exports.Dataset.type.modelProperties), { tableName: {
                serializedName: "typeProperties.tableName",
                type: {
                    name: "any",
                },
            }, table: {
                serializedName: "typeProperties.table",
                type: {
                    name: "any",
                },
            }, schemaTypePropertiesSchema: {
                serializedName: "typeProperties.schema",
                type: {
                    name: "any",
                },
            } }),
    },
};
exports.Db2TableDataset = {
    serializedName: "Db2Table",
    type: {
        name: "Composite",
        className: "Db2TableDataset",
        uberParent: "Dataset",
        additionalProperties: { type: { name: "Object" } },
        polymorphicDiscriminator: exports.Dataset.type.polymorphicDiscriminator,
        modelProperties: Object.assign(Object.assign({}, exports.Dataset.type.modelProperties), { tableName: {
                serializedName: "typeProperties.tableName",
                type: {
                    name: "any",
                },
            }, schemaTypePropertiesSchema: {
                serializedName: "typeProperties.schema",
                type: {
                    name: "any",
                },
            }, table: {
                serializedName: "typeProperties.table",
                type: {
                    name: "any",
                },
            } }),
    },
};
exports.RelationalTableDataset = {
    serializedName: "RelationalTable",
    type: {
        name: "Composite",
        className: "RelationalTableDataset",
        uberParent: "Dataset",
        additionalProperties: { type: { name: "Object" } },
        polymorphicDiscriminator: exports.Dataset.type.polymorphicDiscriminator,
        modelProperties: Object.assign(Object.assign({}, exports.Dataset.type.modelProperties), { tableName: {
                serializedName: "typeProperties.tableName",
                type: {
                    name: "any",
                },
            } }),
    },
};
exports.InformixTableDataset = {
    serializedName: "InformixTable",
    type: {
        name: "Composite",
        className: "InformixTableDataset",
        uberParent: "Dataset",
        additionalProperties: { type: { name: "Object" } },
        polymorphicDiscriminator: exports.Dataset.type.polymorphicDiscriminator,
        modelProperties: Object.assign(Object.assign({}, exports.Dataset.type.modelProperties), { tableName: {
                serializedName: "typeProperties.tableName",
                type: {
                    name: "any",
                },
            } }),
    },
};
exports.OdbcTableDataset = {
    serializedName: "OdbcTable",
    type: {
        name: "Composite",
        className: "OdbcTableDataset",
        uberParent: "Dataset",
        additionalProperties: { type: { name: "Object" } },
        polymorphicDiscriminator: exports.Dataset.type.polymorphicDiscriminator,
        modelProperties: Object.assign(Object.assign({}, exports.Dataset.type.modelProperties), { tableName: {
                serializedName: "typeProperties.tableName",
                type: {
                    name: "any",
                },
            } }),
    },
};
exports.MySqlTableDataset = {
    serializedName: "MySqlTable",
    type: {
        name: "Composite",
        className: "MySqlTableDataset",
        uberParent: "Dataset",
        additionalProperties: { type: { name: "Object" } },
        polymorphicDiscriminator: exports.Dataset.type.polymorphicDiscriminator,
        modelProperties: Object.assign(Object.assign({}, exports.Dataset.type.modelProperties), { tableName: {
                serializedName: "typeProperties.tableName",
                type: {
                    name: "any",
                },
            } }),
    },
};
exports.PostgreSqlTableDataset = {
    serializedName: "PostgreSqlTable",
    type: {
        name: "Composite",
        className: "PostgreSqlTableDataset",
        uberParent: "Dataset",
        additionalProperties: { type: { name: "Object" } },
        polymorphicDiscriminator: exports.Dataset.type.polymorphicDiscriminator,
        modelProperties: Object.assign(Object.assign({}, exports.Dataset.type.modelProperties), { tableName: {
                serializedName: "typeProperties.tableName",
                type: {
                    name: "any",
                },
            }, table: {
                serializedName: "typeProperties.table",
                type: {
                    name: "any",
                },
            }, schemaTypePropertiesSchema: {
                serializedName: "typeProperties.schema",
                type: {
                    name: "any",
                },
            } }),
    },
};
exports.PostgreSqlV2TableDataset = {
    serializedName: "PostgreSqlV2Table",
    type: {
        name: "Composite",
        className: "PostgreSqlV2TableDataset",
        uberParent: "Dataset",
        additionalProperties: { type: { name: "Object" } },
        polymorphicDiscriminator: exports.Dataset.type.polymorphicDiscriminator,
        modelProperties: Object.assign(Object.assign({}, exports.Dataset.type.modelProperties), { table: {
                serializedName: "typeProperties.table",
                type: {
                    name: "any",
                },
            }, schemaTypePropertiesSchema: {
                serializedName: "typeProperties.schema",
                type: {
                    name: "any",
                },
            } }),
    },
};
exports.MicrosoftAccessTableDataset = {
    serializedName: "MicrosoftAccessTable",
    type: {
        name: "Composite",
        className: "MicrosoftAccessTableDataset",
        uberParent: "Dataset",
        additionalProperties: { type: { name: "Object" } },
        polymorphicDiscriminator: exports.Dataset.type.polymorphicDiscriminator,
        modelProperties: Object.assign(Object.assign({}, exports.Dataset.type.modelProperties), { tableName: {
                serializedName: "typeProperties.tableName",
                type: {
                    name: "any",
                },
            } }),
    },
};
exports.SalesforceObjectDataset = {
    serializedName: "SalesforceObject",
    type: {
        name: "Composite",
        className: "SalesforceObjectDataset",
        uberParent: "Dataset",
        additionalProperties: { type: { name: "Object" } },
        polymorphicDiscriminator: exports.Dataset.type.polymorphicDiscriminator,
        modelProperties: Object.assign(Object.assign({}, exports.Dataset.type.modelProperties), { objectApiName: {
                serializedName: "typeProperties.objectApiName",
                type: {
                    name: "any",
                },
            } }),
    },
};
exports.SalesforceServiceCloudObjectDataset = {
    serializedName: "SalesforceServiceCloudObject",
    type: {
        name: "Composite",
        className: "SalesforceServiceCloudObjectDataset",
        uberParent: "Dataset",
        additionalProperties: { type: { name: "Object" } },
        polymorphicDiscriminator: exports.Dataset.type.polymorphicDiscriminator,
        modelProperties: Object.assign(Object.assign({}, exports.Dataset.type.modelProperties), { objectApiName: {
                serializedName: "typeProperties.objectApiName",
                type: {
                    name: "any",
                },
            } }),
    },
};
exports.SybaseTableDataset = {
    serializedName: "SybaseTable",
    type: {
        name: "Composite",
        className: "SybaseTableDataset",
        uberParent: "Dataset",
        additionalProperties: { type: { name: "Object" } },
        polymorphicDiscriminator: exports.Dataset.type.polymorphicDiscriminator,
        modelProperties: Object.assign(Object.assign({}, exports.Dataset.type.modelProperties), { tableName: {
                serializedName: "typeProperties.tableName",
                type: {
                    name: "any",
                },
            } }),
    },
};
exports.SapBwCubeDataset = {
    serializedName: "SapBwCube",
    type: {
        name: "Composite",
        className: "SapBwCubeDataset",
        uberParent: "Dataset",
        additionalProperties: { type: { name: "Object" } },
        polymorphicDiscriminator: exports.Dataset.type.polymorphicDiscriminator,
        modelProperties: Object.assign({}, exports.Dataset.type.modelProperties),
    },
};
exports.SapCloudForCustomerResourceDataset = {
    serializedName: "SapCloudForCustomerResource",
    type: {
        name: "Composite",
        className: "SapCloudForCustomerResourceDataset",
        uberParent: "Dataset",
        additionalProperties: { type: { name: "Object" } },
        polymorphicDiscriminator: exports.Dataset.type.polymorphicDiscriminator,
        modelProperties: Object.assign(Object.assign({}, exports.Dataset.type.modelProperties), { path: {
                serializedName: "typeProperties.path",
                required: true,
                type: {
                    name: "any",
                },
            } }),
    },
};
exports.SapEccResourceDataset = {
    serializedName: "SapEccResource",
    type: {
        name: "Composite",
        className: "SapEccResourceDataset",
        uberParent: "Dataset",
        additionalProperties: { type: { name: "Object" } },
        polymorphicDiscriminator: exports.Dataset.type.polymorphicDiscriminator,
        modelProperties: Object.assign(Object.assign({}, exports.Dataset.type.modelProperties), { path: {
                serializedName: "typeProperties.path",
                required: true,
                type: {
                    name: "any",
                },
            } }),
    },
};
exports.SapHanaTableDataset = {
    serializedName: "SapHanaTable",
    type: {
        name: "Composite",
        className: "SapHanaTableDataset",
        uberParent: "Dataset",
        additionalProperties: { type: { name: "Object" } },
        polymorphicDiscriminator: exports.Dataset.type.polymorphicDiscriminator,
        modelProperties: Object.assign(Object.assign({}, exports.Dataset.type.modelProperties), { schemaTypePropertiesSchema: {
                serializedName: "typeProperties.schema",
                type: {
                    name: "any",
                },
            }, table: {
                serializedName: "typeProperties.table",
                type: {
                    name: "any",
                },
            } }),
    },
};
exports.SapOpenHubTableDataset = {
    serializedName: "SapOpenHubTable",
    type: {
        name: "Composite",
        className: "SapOpenHubTableDataset",
        uberParent: "Dataset",
        additionalProperties: { type: { name: "Object" } },
        polymorphicDiscriminator: exports.Dataset.type.polymorphicDiscriminator,
        modelProperties: Object.assign(Object.assign({}, exports.Dataset.type.modelProperties), { openHubDestinationName: {
                serializedName: "typeProperties.openHubDestinationName",
                required: true,
                type: {
                    name: "any",
                },
            }, excludeLastRequest: {
                serializedName: "typeProperties.excludeLastRequest",
                type: {
                    name: "any",
                },
            }, baseRequestId: {
                serializedName: "typeProperties.baseRequestId",
                type: {
                    name: "any",
                },
            } }),
    },
};
exports.SqlServerTableDataset = {
    serializedName: "SqlServerTable",
    type: {
        name: "Composite",
        className: "SqlServerTableDataset",
        uberParent: "Dataset",
        additionalProperties: { type: { name: "Object" } },
        polymorphicDiscriminator: exports.Dataset.type.polymorphicDiscriminator,
        modelProperties: Object.assign(Object.assign({}, exports.Dataset.type.modelProperties), { tableName: {
                serializedName: "typeProperties.tableName",
                type: {
                    name: "any",
                },
            }, schemaTypePropertiesSchema: {
                serializedName: "typeProperties.schema",
                type: {
                    name: "any",
                },
            }, table: {
                serializedName: "typeProperties.table",
                type: {
                    name: "any",
                },
            } }),
    },
};
exports.AmazonRdsForSqlServerTableDataset = {
    serializedName: "AmazonRdsForSqlServerTable",
    type: {
        name: "Composite",
        className: "AmazonRdsForSqlServerTableDataset",
        uberParent: "Dataset",
        additionalProperties: { type: { name: "Object" } },
        polymorphicDiscriminator: exports.Dataset.type.polymorphicDiscriminator,
        modelProperties: Object.assign(Object.assign({}, exports.Dataset.type.modelProperties), { schemaTypePropertiesSchema: {
                serializedName: "typeProperties.schema",
                type: {
                    name: "any",
                },
            }, table: {
                serializedName: "typeProperties.table",
                type: {
                    name: "any",
                },
            } }),
    },
};
exports.RestResourceDataset = {
    serializedName: "RestResource",
    type: {
        name: "Composite",
        className: "RestResourceDataset",
        uberParent: "Dataset",
        additionalProperties: { type: { name: "Object" } },
        polymorphicDiscriminator: exports.Dataset.type.polymorphicDiscriminator,
        modelProperties: Object.assign(Object.assign({}, exports.Dataset.type.modelProperties), { relativeUrl: {
                serializedName: "typeProperties.relativeUrl",
                type: {
                    name: "any",
                },
            }, requestMethod: {
                serializedName: "typeProperties.requestMethod",
                type: {
                    name: "any",
                },
            }, requestBody: {
                serializedName: "typeProperties.requestBody",
                type: {
                    name: "any",
                },
            }, additionalHeaders: {
                serializedName: "typeProperties.additionalHeaders",
                type: {
                    name: "any",
                },
            }, paginationRules: {
                serializedName: "typeProperties.paginationRules",
                type: {
                    name: "any",
                },
            } }),
    },
};
exports.SapTableResourceDataset = {
    serializedName: "SapTableResource",
    type: {
        name: "Composite",
        className: "SapTableResourceDataset",
        uberParent: "Dataset",
        additionalProperties: { type: { name: "Object" } },
        polymorphicDiscriminator: exports.Dataset.type.polymorphicDiscriminator,
        modelProperties: Object.assign(Object.assign({}, exports.Dataset.type.modelProperties), { tableName: {
                serializedName: "typeProperties.tableName",
                required: true,
                type: {
                    name: "any",
                },
            } }),
    },
};
exports.SapOdpResourceDataset = {
    serializedName: "SapOdpResource",
    type: {
        name: "Composite",
        className: "SapOdpResourceDataset",
        uberParent: "Dataset",
        additionalProperties: { type: { name: "Object" } },
        polymorphicDiscriminator: exports.Dataset.type.polymorphicDiscriminator,
        modelProperties: Object.assign(Object.assign({}, exports.Dataset.type.modelProperties), { context: {
                serializedName: "typeProperties.context",
                required: true,
                type: {
                    name: "any",
                },
            }, objectName: {
                serializedName: "typeProperties.objectName",
                required: true,
                type: {
                    name: "any",
                },
            } }),
    },
};
exports.WebTableDataset = {
    serializedName: "WebTable",
    type: {
        name: "Composite",
        className: "WebTableDataset",
        uberParent: "Dataset",
        additionalProperties: { type: { name: "Object" } },
        polymorphicDiscriminator: exports.Dataset.type.polymorphicDiscriminator,
        modelProperties: Object.assign(Object.assign({}, exports.Dataset.type.modelProperties), { index: {
                serializedName: "typeProperties.index",
                required: true,
                type: {
                    name: "any",
                },
            }, path: {
                serializedName: "typeProperties.path",
                type: {
                    name: "any",
                },
            } }),
    },
};
exports.AzureSearchIndexDataset = {
    serializedName: "AzureSearchIndex",
    type: {
        name: "Composite",
        className: "AzureSearchIndexDataset",
        uberParent: "Dataset",
        additionalProperties: { type: { name: "Object" } },
        polymorphicDiscriminator: exports.Dataset.type.polymorphicDiscriminator,
        modelProperties: Object.assign(Object.assign({}, exports.Dataset.type.modelProperties), { indexName: {
                serializedName: "typeProperties.indexName",
                required: true,
                type: {
                    name: "any",
                },
            } }),
    },
};
exports.HttpDataset = {
    serializedName: "HttpFile",
    type: {
        name: "Composite",
        className: "HttpDataset",
        uberParent: "Dataset",
        additionalProperties: { type: { name: "Object" } },
        polymorphicDiscriminator: exports.Dataset.type.polymorphicDiscriminator,
        modelProperties: Object.assign(Object.assign({}, exports.Dataset.type.modelProperties), { relativeUrl: {
                serializedName: "typeProperties.relativeUrl",
                type: {
                    name: "any",
                },
            }, requestMethod: {
                serializedName: "typeProperties.requestMethod",
                type: {
                    name: "any",
                },
            }, requestBody: {
                serializedName: "typeProperties.requestBody",
                type: {
                    name: "any",
                },
            }, additionalHeaders: {
                serializedName: "typeProperties.additionalHeaders",
                type: {
                    name: "any",
                },
            }, format: {
                serializedName: "typeProperties.format",
                type: {
                    name: "Composite",
                    className: "DatasetStorageFormat",
                },
            }, compression: {
                serializedName: "typeProperties.compression",
                type: {
                    name: "Composite",
                    className: "DatasetCompression",
                },
            } }),
    },
};
exports.AmazonMWSObjectDataset = {
    serializedName: "AmazonMWSObject",
    type: {
        name: "Composite",
        className: "AmazonMWSObjectDataset",
        uberParent: "Dataset",
        additionalProperties: { type: { name: "Object" } },
        polymorphicDiscriminator: exports.Dataset.type.polymorphicDiscriminator,
        modelProperties: Object.assign(Object.assign({}, exports.Dataset.type.modelProperties), { tableName: {
                serializedName: "typeProperties.tableName",
                type: {
                    name: "any",
                },
            } }),
    },
};
exports.AzurePostgreSqlTableDataset = {
    serializedName: "AzurePostgreSqlTable",
    type: {
        name: "Composite",
        className: "AzurePostgreSqlTableDataset",
        uberParent: "Dataset",
        additionalProperties: { type: { name: "Object" } },
        polymorphicDiscriminator: exports.Dataset.type.polymorphicDiscriminator,
        modelProperties: Object.assign(Object.assign({}, exports.Dataset.type.modelProperties), { tableName: {
                serializedName: "typeProperties.tableName",
                type: {
                    name: "any",
                },
            }, table: {
                serializedName: "typeProperties.table",
                type: {
                    name: "any",
                },
            }, schemaTypePropertiesSchema: {
                serializedName: "typeProperties.schema",
                type: {
                    name: "any",
                },
            } }),
    },
};
exports.ConcurObjectDataset = {
    serializedName: "ConcurObject",
    type: {
        name: "Composite",
        className: "ConcurObjectDataset",
        uberParent: "Dataset",
        additionalProperties: { type: { name: "Object" } },
        polymorphicDiscriminator: exports.Dataset.type.polymorphicDiscriminator,
        modelProperties: Object.assign(Object.assign({}, exports.Dataset.type.modelProperties), { tableName: {
                serializedName: "typeProperties.tableName",
                type: {
                    name: "any",
                },
            } }),
    },
};
exports.CouchbaseTableDataset = {
    serializedName: "CouchbaseTable",
    type: {
        name: "Composite",
        className: "CouchbaseTableDataset",
        uberParent: "Dataset",
        additionalProperties: { type: { name: "Object" } },
        polymorphicDiscriminator: exports.Dataset.type.polymorphicDiscriminator,
        modelProperties: Object.assign(Object.assign({}, exports.Dataset.type.modelProperties), { tableName: {
                serializedName: "typeProperties.tableName",
                type: {
                    name: "any",
                },
            } }),
    },
};
exports.DrillTableDataset = {
    serializedName: "DrillTable",
    type: {
        name: "Composite",
        className: "DrillTableDataset",
        uberParent: "Dataset",
        additionalProperties: { type: { name: "Object" } },
        polymorphicDiscriminator: exports.Dataset.type.polymorphicDiscriminator,
        modelProperties: Object.assign(Object.assign({}, exports.Dataset.type.modelProperties), { tableName: {
                serializedName: "typeProperties.tableName",
                type: {
                    name: "any",
                },
            }, table: {
                serializedName: "typeProperties.table",
                type: {
                    name: "any",
                },
            }, schemaTypePropertiesSchema: {
                serializedName: "typeProperties.schema",
                type: {
                    name: "any",
                },
            } }),
    },
};
exports.EloquaObjectDataset = {
    serializedName: "EloquaObject",
    type: {
        name: "Composite",
        className: "EloquaObjectDataset",
        uberParent: "Dataset",
        additionalProperties: { type: { name: "Object" } },
        polymorphicDiscriminator: exports.Dataset.type.polymorphicDiscriminator,
        modelProperties: Object.assign(Object.assign({}, exports.Dataset.type.modelProperties), { tableName: {
                serializedName: "typeProperties.tableName",
                type: {
                    name: "any",
                },
            } }),
    },
};
exports.GoogleBigQueryObjectDataset = {
    serializedName: "GoogleBigQueryObject",
    type: {
        name: "Composite",
        className: "GoogleBigQueryObjectDataset",
        uberParent: "Dataset",
        additionalProperties: { type: { name: "Object" } },
        polymorphicDiscriminator: exports.Dataset.type.polymorphicDiscriminator,
        modelProperties: Object.assign(Object.assign({}, exports.Dataset.type.modelProperties), { tableName: {
                serializedName: "typeProperties.tableName",
                type: {
                    name: "any",
                },
            }, table: {
                serializedName: "typeProperties.table",
                type: {
                    name: "any",
                },
            }, dataset: {
                serializedName: "typeProperties.dataset",
                type: {
                    name: "any",
                },
            } }),
    },
};
exports.GoogleBigQueryV2ObjectDataset = {
    serializedName: "GoogleBigQueryV2Object",
    type: {
        name: "Composite",
        className: "GoogleBigQueryV2ObjectDataset",
        uberParent: "Dataset",
        additionalProperties: { type: { name: "Object" } },
        polymorphicDiscriminator: exports.Dataset.type.polymorphicDiscriminator,
        modelProperties: Object.assign(Object.assign({}, exports.Dataset.type.modelProperties), { table: {
                serializedName: "typeProperties.table",
                type: {
                    name: "any",
                },
            }, dataset: {
                serializedName: "typeProperties.dataset",
                type: {
                    name: "any",
                },
            } }),
    },
};
exports.GreenplumTableDataset = {
    serializedName: "GreenplumTable",
    type: {
        name: "Composite",
        className: "GreenplumTableDataset",
        uberParent: "Dataset",
        additionalProperties: { type: { name: "Object" } },
        polymorphicDiscriminator: exports.Dataset.type.polymorphicDiscriminator,
        modelProperties: Object.assign(Object.assign({}, exports.Dataset.type.modelProperties), { tableName: {
                serializedName: "typeProperties.tableName",
                type: {
                    name: "any",
                },
            }, table: {
                serializedName: "typeProperties.table",
                type: {
                    name: "any",
                },
            }, schemaTypePropertiesSchema: {
                serializedName: "typeProperties.schema",
                type: {
                    name: "any",
                },
            } }),
    },
};
exports.HBaseObjectDataset = {
    serializedName: "HBaseObject",
    type: {
        name: "Composite",
        className: "HBaseObjectDataset",
        uberParent: "Dataset",
        additionalProperties: { type: { name: "Object" } },
        polymorphicDiscriminator: exports.Dataset.type.polymorphicDiscriminator,
        modelProperties: Object.assign(Object.assign({}, exports.Dataset.type.modelProperties), { tableName: {
                serializedName: "typeProperties.tableName",
                type: {
                    name: "any",
                },
            } }),
    },
};
exports.HiveObjectDataset = {
    serializedName: "HiveObject",
    type: {
        name: "Composite",
        className: "HiveObjectDataset",
        uberParent: "Dataset",
        additionalProperties: { type: { name: "Object" } },
        polymorphicDiscriminator: exports.Dataset.type.polymorphicDiscriminator,
        modelProperties: Object.assign(Object.assign({}, exports.Dataset.type.modelProperties), { tableName: {
                serializedName: "typeProperties.tableName",
                type: {
                    name: "any",
                },
            }, table: {
                serializedName: "typeProperties.table",
                type: {
                    name: "any",
                },
            }, schemaTypePropertiesSchema: {
                serializedName: "typeProperties.schema",
                type: {
                    name: "any",
                },
            } }),
    },
};
exports.HubspotObjectDataset = {
    serializedName: "HubspotObject",
    type: {
        name: "Composite",
        className: "HubspotObjectDataset",
        uberParent: "Dataset",
        additionalProperties: { type: { name: "Object" } },
        polymorphicDiscriminator: exports.Dataset.type.polymorphicDiscriminator,
        modelProperties: Object.assign(Object.assign({}, exports.Dataset.type.modelProperties), { tableName: {
                serializedName: "typeProperties.tableName",
                type: {
                    name: "any",
                },
            } }),
    },
};
exports.ImpalaObjectDataset = {
    serializedName: "ImpalaObject",
    type: {
        name: "Composite",
        className: "ImpalaObjectDataset",
        uberParent: "Dataset",
        additionalProperties: { type: { name: "Object" } },
        polymorphicDiscriminator: exports.Dataset.type.polymorphicDiscriminator,
        modelProperties: Object.assign(Object.assign({}, exports.Dataset.type.modelProperties), { tableName: {
                serializedName: "typeProperties.tableName",
                type: {
                    name: "any",
                },
            }, table: {
                serializedName: "typeProperties.table",
                type: {
                    name: "any",
                },
            }, schemaTypePropertiesSchema: {
                serializedName: "typeProperties.schema",
                type: {
                    name: "any",
                },
            } }),
    },
};
exports.JiraObjectDataset = {
    serializedName: "JiraObject",
    type: {
        name: "Composite",
        className: "JiraObjectDataset",
        uberParent: "Dataset",
        additionalProperties: { type: { name: "Object" } },
        polymorphicDiscriminator: exports.Dataset.type.polymorphicDiscriminator,
        modelProperties: Object.assign(Object.assign({}, exports.Dataset.type.modelProperties), { tableName: {
                serializedName: "typeProperties.tableName",
                type: {
                    name: "any",
                },
            } }),
    },
};
exports.MagentoObjectDataset = {
    serializedName: "MagentoObject",
    type: {
        name: "Composite",
        className: "MagentoObjectDataset",
        uberParent: "Dataset",
        additionalProperties: { type: { name: "Object" } },
        polymorphicDiscriminator: exports.Dataset.type.polymorphicDiscriminator,
        modelProperties: Object.assign(Object.assign({}, exports.Dataset.type.modelProperties), { tableName: {
                serializedName: "typeProperties.tableName",
                type: {
                    name: "any",
                },
            } }),
    },
};
exports.MariaDBTableDataset = {
    serializedName: "MariaDBTable",
    type: {
        name: "Composite",
        className: "MariaDBTableDataset",
        uberParent: "Dataset",
        additionalProperties: { type: { name: "Object" } },
        polymorphicDiscriminator: exports.Dataset.type.polymorphicDiscriminator,
        modelProperties: Object.assign(Object.assign({}, exports.Dataset.type.modelProperties), { tableName: {
                serializedName: "typeProperties.tableName",
                type: {
                    name: "any",
                },
            } }),
    },
};
exports.AzureMariaDBTableDataset = {
    serializedName: "AzureMariaDBTable",
    type: {
        name: "Composite",
        className: "AzureMariaDBTableDataset",
        uberParent: "Dataset",
        additionalProperties: { type: { name: "Object" } },
        polymorphicDiscriminator: exports.Dataset.type.polymorphicDiscriminator,
        modelProperties: Object.assign(Object.assign({}, exports.Dataset.type.modelProperties), { tableName: {
                serializedName: "typeProperties.tableName",
                type: {
                    name: "any",
                },
            } }),
    },
};
exports.MarketoObjectDataset = {
    serializedName: "MarketoObject",
    type: {
        name: "Composite",
        className: "MarketoObjectDataset",
        uberParent: "Dataset",
        additionalProperties: { type: { name: "Object" } },
        polymorphicDiscriminator: exports.Dataset.type.polymorphicDiscriminator,
        modelProperties: Object.assign(Object.assign({}, exports.Dataset.type.modelProperties), { tableName: {
                serializedName: "typeProperties.tableName",
                type: {
                    name: "any",
                },
            } }),
    },
};
exports.PaypalObjectDataset = {
    serializedName: "PaypalObject",
    type: {
        name: "Composite",
        className: "PaypalObjectDataset",
        uberParent: "Dataset",
        additionalProperties: { type: { name: "Object" } },
        polymorphicDiscriminator: exports.Dataset.type.polymorphicDiscriminator,
        modelProperties: Object.assign(Object.assign({}, exports.Dataset.type.modelProperties), { tableName: {
                serializedName: "typeProperties.tableName",
                type: {
                    name: "any",
                },
            } }),
    },
};
exports.PhoenixObjectDataset = {
    serializedName: "PhoenixObject",
    type: {
        name: "Composite",
        className: "PhoenixObjectDataset",
        uberParent: "Dataset",
        additionalProperties: { type: { name: "Object" } },
        polymorphicDiscriminator: exports.Dataset.type.polymorphicDiscriminator,
        modelProperties: Object.assign(Object.assign({}, exports.Dataset.type.modelProperties), { tableName: {
                serializedName: "typeProperties.tableName",
                type: {
                    name: "any",
                },
            }, table: {
                serializedName: "typeProperties.table",
                type: {
                    name: "any",
                },
            }, schemaTypePropertiesSchema: {
                serializedName: "typeProperties.schema",
                type: {
                    name: "any",
                },
            } }),
    },
};
exports.PrestoObjectDataset = {
    serializedName: "PrestoObject",
    type: {
        name: "Composite",
        className: "PrestoObjectDataset",
        uberParent: "Dataset",
        additionalProperties: { type: { name: "Object" } },
        polymorphicDiscriminator: exports.Dataset.type.polymorphicDiscriminator,
        modelProperties: Object.assign(Object.assign({}, exports.Dataset.type.modelProperties), { tableName: {
                serializedName: "typeProperties.tableName",
                type: {
                    name: "any",
                },
            }, table: {
                serializedName: "typeProperties.table",
                type: {
                    name: "any",
                },
            }, schemaTypePropertiesSchema: {
                serializedName: "typeProperties.schema",
                type: {
                    name: "any",
                },
            } }),
    },
};
exports.QuickBooksObjectDataset = {
    serializedName: "QuickBooksObject",
    type: {
        name: "Composite",
        className: "QuickBooksObjectDataset",
        uberParent: "Dataset",
        additionalProperties: { type: { name: "Object" } },
        polymorphicDiscriminator: exports.Dataset.type.polymorphicDiscriminator,
        modelProperties: Object.assign(Object.assign({}, exports.Dataset.type.modelProperties), { tableName: {
                serializedName: "typeProperties.tableName",
                type: {
                    name: "any",
                },
            } }),
    },
};
exports.ServiceNowObjectDataset = {
    serializedName: "ServiceNowObject",
    type: {
        name: "Composite",
        className: "ServiceNowObjectDataset",
        uberParent: "Dataset",
        additionalProperties: { type: { name: "Object" } },
        polymorphicDiscriminator: exports.Dataset.type.polymorphicDiscriminator,
        modelProperties: Object.assign(Object.assign({}, exports.Dataset.type.modelProperties), { tableName: {
                serializedName: "typeProperties.tableName",
                type: {
                    name: "any",
                },
            } }),
    },
};
exports.ShopifyObjectDataset = {
    serializedName: "ShopifyObject",
    type: {
        name: "Composite",
        className: "ShopifyObjectDataset",
        uberParent: "Dataset",
        additionalProperties: { type: { name: "Object" } },
        polymorphicDiscriminator: exports.Dataset.type.polymorphicDiscriminator,
        modelProperties: Object.assign(Object.assign({}, exports.Dataset.type.modelProperties), { tableName: {
                serializedName: "typeProperties.tableName",
                type: {
                    name: "any",
                },
            } }),
    },
};
exports.SparkObjectDataset = {
    serializedName: "SparkObject",
    type: {
        name: "Composite",
        className: "SparkObjectDataset",
        uberParent: "Dataset",
        additionalProperties: { type: { name: "Object" } },
        polymorphicDiscriminator: exports.Dataset.type.polymorphicDiscriminator,
        modelProperties: Object.assign(Object.assign({}, exports.Dataset.type.modelProperties), { tableName: {
                serializedName: "typeProperties.tableName",
                type: {
                    name: "any",
                },
            }, table: {
                serializedName: "typeProperties.table",
                type: {
                    name: "any",
                },
            }, schemaTypePropertiesSchema: {
                serializedName: "typeProperties.schema",
                type: {
                    name: "any",
                },
            } }),
    },
};
exports.SquareObjectDataset = {
    serializedName: "SquareObject",
    type: {
        name: "Composite",
        className: "SquareObjectDataset",
        uberParent: "Dataset",
        additionalProperties: { type: { name: "Object" } },
        polymorphicDiscriminator: exports.Dataset.type.polymorphicDiscriminator,
        modelProperties: Object.assign(Object.assign({}, exports.Dataset.type.modelProperties), { tableName: {
                serializedName: "typeProperties.tableName",
                type: {
                    name: "any",
                },
            } }),
    },
};
exports.XeroObjectDataset = {
    serializedName: "XeroObject",
    type: {
        name: "Composite",
        className: "XeroObjectDataset",
        uberParent: "Dataset",
        additionalProperties: { type: { name: "Object" } },
        polymorphicDiscriminator: exports.Dataset.type.polymorphicDiscriminator,
        modelProperties: Object.assign(Object.assign({}, exports.Dataset.type.modelProperties), { tableName: {
                serializedName: "typeProperties.tableName",
                type: {
                    name: "any",
                },
            } }),
    },
};
exports.ZohoObjectDataset = {
    serializedName: "ZohoObject",
    type: {
        name: "Composite",
        className: "ZohoObjectDataset",
        uberParent: "Dataset",
        additionalProperties: { type: { name: "Object" } },
        polymorphicDiscriminator: exports.Dataset.type.polymorphicDiscriminator,
        modelProperties: Object.assign(Object.assign({}, exports.Dataset.type.modelProperties), { tableName: {
                serializedName: "typeProperties.tableName",
                type: {
                    name: "any",
                },
            } }),
    },
};
exports.NetezzaTableDataset = {
    serializedName: "NetezzaTable",
    type: {
        name: "Composite",
        className: "NetezzaTableDataset",
        uberParent: "Dataset",
        additionalProperties: { type: { name: "Object" } },
        polymorphicDiscriminator: exports.Dataset.type.polymorphicDiscriminator,
        modelProperties: Object.assign(Object.assign({}, exports.Dataset.type.modelProperties), { tableName: {
                serializedName: "typeProperties.tableName",
                type: {
                    name: "any",
                },
            }, table: {
                serializedName: "typeProperties.table",
                type: {
                    name: "any",
                },
            }, schemaTypePropertiesSchema: {
                serializedName: "typeProperties.schema",
                type: {
                    name: "any",
                },
            } }),
    },
};
exports.VerticaTableDataset = {
    serializedName: "VerticaTable",
    type: {
        name: "Composite",
        className: "VerticaTableDataset",
        uberParent: "Dataset",
        additionalProperties: { type: { name: "Object" } },
        polymorphicDiscriminator: exports.Dataset.type.polymorphicDiscriminator,
        modelProperties: Object.assign(Object.assign({}, exports.Dataset.type.modelProperties), { tableName: {
                serializedName: "typeProperties.tableName",
                type: {
                    name: "any",
                },
            }, table: {
                serializedName: "typeProperties.table",
                type: {
                    name: "any",
                },
            }, schemaTypePropertiesSchema: {
                serializedName: "typeProperties.schema",
                type: {
                    name: "any",
                },
            } }),
    },
};
exports.SalesforceMarketingCloudObjectDataset = {
    serializedName: "SalesforceMarketingCloudObject",
    type: {
        name: "Composite",
        className: "SalesforceMarketingCloudObjectDataset",
        uberParent: "Dataset",
        additionalProperties: { type: { name: "Object" } },
        polymorphicDiscriminator: exports.Dataset.type.polymorphicDiscriminator,
        modelProperties: Object.assign(Object.assign({}, exports.Dataset.type.modelProperties), { tableName: {
                serializedName: "typeProperties.tableName",
                type: {
                    name: "any",
                },
            } }),
    },
};
exports.ResponsysObjectDataset = {
    serializedName: "ResponsysObject",
    type: {
        name: "Composite",
        className: "ResponsysObjectDataset",
        uberParent: "Dataset",
        additionalProperties: { type: { name: "Object" } },
        polymorphicDiscriminator: exports.Dataset.type.polymorphicDiscriminator,
        modelProperties: Object.assign(Object.assign({}, exports.Dataset.type.modelProperties), { tableName: {
                serializedName: "typeProperties.tableName",
                type: {
                    name: "any",
                },
            } }),
    },
};
exports.DynamicsAXResourceDataset = {
    serializedName: "DynamicsAXResource",
    type: {
        name: "Composite",
        className: "DynamicsAXResourceDataset",
        uberParent: "Dataset",
        additionalProperties: { type: { name: "Object" } },
        polymorphicDiscriminator: exports.Dataset.type.polymorphicDiscriminator,
        modelProperties: Object.assign(Object.assign({}, exports.Dataset.type.modelProperties), { path: {
                serializedName: "typeProperties.path",
                required: true,
                type: {
                    name: "any",
                },
            } }),
    },
};
exports.OracleServiceCloudObjectDataset = {
    serializedName: "OracleServiceCloudObject",
    type: {
        name: "Composite",
        className: "OracleServiceCloudObjectDataset",
        uberParent: "Dataset",
        additionalProperties: { type: { name: "Object" } },
        polymorphicDiscriminator: exports.Dataset.type.polymorphicDiscriminator,
        modelProperties: Object.assign(Object.assign({}, exports.Dataset.type.modelProperties), { tableName: {
                serializedName: "typeProperties.tableName",
                type: {
                    name: "any",
                },
            } }),
    },
};
exports.AzureDataExplorerTableDataset = {
    serializedName: "AzureDataExplorerTable",
    type: {
        name: "Composite",
        className: "AzureDataExplorerTableDataset",
        uberParent: "Dataset",
        additionalProperties: { type: { name: "Object" } },
        polymorphicDiscriminator: exports.Dataset.type.polymorphicDiscriminator,
        modelProperties: Object.assign(Object.assign({}, exports.Dataset.type.modelProperties), { table: {
                serializedName: "typeProperties.table",
                type: {
                    name: "any",
                },
            } }),
    },
};
exports.GoogleAdWordsObjectDataset = {
    serializedName: "GoogleAdWordsObject",
    type: {
        name: "Composite",
        className: "GoogleAdWordsObjectDataset",
        uberParent: "Dataset",
        additionalProperties: { type: { name: "Object" } },
        polymorphicDiscriminator: exports.Dataset.type.polymorphicDiscriminator,
        modelProperties: Object.assign(Object.assign({}, exports.Dataset.type.modelProperties), { tableName: {
                serializedName: "typeProperties.tableName",
                type: {
                    name: "any",
                },
            } }),
    },
};
exports.SnowflakeDataset = {
    serializedName: "SnowflakeTable",
    type: {
        name: "Composite",
        className: "SnowflakeDataset",
        uberParent: "Dataset",
        additionalProperties: { type: { name: "Object" } },
        polymorphicDiscriminator: exports.Dataset.type.polymorphicDiscriminator,
        modelProperties: Object.assign(Object.assign({}, exports.Dataset.type.modelProperties), { schemaTypePropertiesSchema: {
                serializedName: "typeProperties.schema",
                type: {
                    name: "any",
                },
            }, table: {
                serializedName: "typeProperties.table",
                type: {
                    name: "any",
                },
            } }),
    },
};
exports.SnowflakeV2Dataset = {
    serializedName: "SnowflakeV2Table",
    type: {
        name: "Composite",
        className: "SnowflakeV2Dataset",
        uberParent: "Dataset",
        additionalProperties: { type: { name: "Object" } },
        polymorphicDiscriminator: exports.Dataset.type.polymorphicDiscriminator,
        modelProperties: Object.assign(Object.assign({}, exports.Dataset.type.modelProperties), { schemaTypePropertiesSchema: {
                serializedName: "typeProperties.schema",
                type: {
                    name: "any",
                },
            }, table: {
                serializedName: "typeProperties.table",
                type: {
                    name: "any",
                },
            } }),
    },
};
exports.SharePointOnlineListResourceDataset = {
    serializedName: "SharePointOnlineListResource",
    type: {
        name: "Composite",
        className: "SharePointOnlineListResourceDataset",
        uberParent: "Dataset",
        additionalProperties: { type: { name: "Object" } },
        polymorphicDiscriminator: exports.Dataset.type.polymorphicDiscriminator,
        modelProperties: Object.assign(Object.assign({}, exports.Dataset.type.modelProperties), { listName: {
                serializedName: "typeProperties.listName",
                type: {
                    name: "any",
                },
            } }),
    },
};
exports.AzureDatabricksDeltaLakeDataset = {
    serializedName: "AzureDatabricksDeltaLakeDataset",
    type: {
        name: "Composite",
        className: "AzureDatabricksDeltaLakeDataset",
        uberParent: "Dataset",
        additionalProperties: { type: { name: "Object" } },
        polymorphicDiscriminator: exports.Dataset.type.polymorphicDiscriminator,
        modelProperties: Object.assign(Object.assign({}, exports.Dataset.type.modelProperties), { table: {
                serializedName: "typeProperties.table",
                type: {
                    name: "any",
                },
            }, database: {
                serializedName: "typeProperties.database",
                type: {
                    name: "any",
                },
            } }),
    },
};
exports.LakeHouseTableDataset = {
    serializedName: "LakehouseTable",
    type: {
        name: "Composite",
        className: "LakeHouseTableDataset",
        uberParent: "Dataset",
        additionalProperties: { type: { name: "Object" } },
        polymorphicDiscriminator: exports.Dataset.type.polymorphicDiscriminator,
        modelProperties: Object.assign(Object.assign({}, exports.Dataset.type.modelProperties), { schemaTypePropertiesSchema: {
                serializedName: "typeProperties.schema",
                type: {
                    name: "any",
                },
            }, table: {
                serializedName: "typeProperties.table",
                type: {
                    name: "any",
                },
            } }),
    },
};
exports.SalesforceV2ObjectDataset = {
    serializedName: "SalesforceV2Object",
    type: {
        name: "Composite",
        className: "SalesforceV2ObjectDataset",
        uberParent: "Dataset",
        additionalProperties: { type: { name: "Object" } },
        polymorphicDiscriminator: exports.Dataset.type.polymorphicDiscriminator,
        modelProperties: Object.assign(Object.assign({}, exports.Dataset.type.modelProperties), { objectApiName: {
                serializedName: "typeProperties.objectApiName",
                type: {
                    name: "any",
                },
            }, reportId: {
                serializedName: "typeProperties.reportId",
                type: {
                    name: "any",
                },
            } }),
    },
};
exports.SalesforceServiceCloudV2ObjectDataset = {
    serializedName: "SalesforceServiceCloudV2Object",
    type: {
        name: "Composite",
        className: "SalesforceServiceCloudV2ObjectDataset",
        uberParent: "Dataset",
        additionalProperties: { type: { name: "Object" } },
        polymorphicDiscriminator: exports.Dataset.type.polymorphicDiscriminator,
        modelProperties: Object.assign(Object.assign({}, exports.Dataset.type.modelProperties), { objectApiName: {
                serializedName: "typeProperties.objectApiName",
                type: {
                    name: "any",
                },
            }, reportId: {
                serializedName: "typeProperties.reportId",
                type: {
                    name: "any",
                },
            } }),
    },
};
exports.WarehouseTableDataset = {
    serializedName: "WarehouseTable",
    type: {
        name: "Composite",
        className: "WarehouseTableDataset",
        uberParent: "Dataset",
        additionalProperties: { type: { name: "Object" } },
        polymorphicDiscriminator: exports.Dataset.type.polymorphicDiscriminator,
        modelProperties: Object.assign(Object.assign({}, exports.Dataset.type.modelProperties), { schemaTypePropertiesSchema: {
                serializedName: "typeProperties.schema",
                type: {
                    name: "any",
                },
            }, table: {
                serializedName: "typeProperties.table",
                type: {
                    name: "any",
                },
            } }),
    },
};
exports.ServiceNowV2ObjectDataset = {
    serializedName: "ServiceNowV2Object",
    type: {
        name: "Composite",
        className: "ServiceNowV2ObjectDataset",
        uberParent: "Dataset",
        additionalProperties: { type: { name: "Object" } },
        polymorphicDiscriminator: exports.Dataset.type.polymorphicDiscriminator,
        modelProperties: Object.assign(Object.assign({}, exports.Dataset.type.modelProperties), { tableName: {
                serializedName: "typeProperties.tableName",
                type: {
                    name: "any",
                },
            } }),
    },
};
exports.AzureStorageLinkedService = {
    serializedName: "AzureStorage",
    type: {
        name: "Composite",
        className: "AzureStorageLinkedService",
        uberParent: "LinkedService",
        additionalProperties: { type: { name: "Object" } },
        polymorphicDiscriminator: exports.LinkedService.type.polymorphicDiscriminator,
        modelProperties: Object.assign(Object.assign({}, exports.LinkedService.type.modelProperties), { connectionString: {
                serializedName: "typeProperties.connectionString",
                type: {
                    name: "any",
                },
            }, accountKey: {
                serializedName: "typeProperties.accountKey",
                type: {
                    name: "Composite",
                    className: "AzureKeyVaultSecretReference",
                },
            }, sasUri: {
                serializedName: "typeProperties.sasUri",
                type: {
                    name: "any",
                },
            }, sasToken: {
                serializedName: "typeProperties.sasToken",
                type: {
                    name: "Composite",
                    className: "AzureKeyVaultSecretReference",
                },
            }, encryptedCredential: {
                serializedName: "typeProperties.encryptedCredential",
                type: {
                    name: "String",
                },
            } }),
    },
};
exports.AzureBlobStorageLinkedService = {
    serializedName: "AzureBlobStorage",
    type: {
        name: "Composite",
        className: "AzureBlobStorageLinkedService",
        uberParent: "LinkedService",
        additionalProperties: { type: { name: "Object" } },
        polymorphicDiscriminator: exports.LinkedService.type.polymorphicDiscriminator,
        modelProperties: Object.assign(Object.assign({}, exports.LinkedService.type.modelProperties), { connectionString: {
                serializedName: "typeProperties.connectionString",
                type: {
                    name: "any",
                },
            }, accountKey: {
                serializedName: "typeProperties.accountKey",
                type: {
                    name: "Composite",
                    className: "AzureKeyVaultSecretReference",
                },
            }, sasUri: {
                serializedName: "typeProperties.sasUri",
                type: {
                    name: "any",
                },
            }, sasToken: {
                serializedName: "typeProperties.sasToken",
                type: {
                    name: "Composite",
                    className: "AzureKeyVaultSecretReference",
                },
            }, serviceEndpoint: {
                serializedName: "typeProperties.serviceEndpoint",
                type: {
                    name: "String",
                },
            }, servicePrincipalId: {
                serializedName: "typeProperties.servicePrincipalId",
                type: {
                    name: "any",
                },
            }, servicePrincipalKey: {
                serializedName: "typeProperties.servicePrincipalKey",
                type: {
                    name: "Composite",
                    className: "SecretBase",
                },
            }, tenant: {
                serializedName: "typeProperties.tenant",
                type: {
                    name: "any",
                },
            }, azureCloudType: {
                serializedName: "typeProperties.azureCloudType",
                type: {
                    name: "any",
                },
            }, accountKind: {
                serializedName: "typeProperties.accountKind",
                type: {
                    name: "String",
                },
            }, encryptedCredential: {
                serializedName: "typeProperties.encryptedCredential",
                type: {
                    name: "String",
                },
            }, credential: {
                serializedName: "typeProperties.credential",
                type: {
                    name: "Composite",
                    className: "CredentialReference",
                },
            }, authenticationType: {
                serializedName: "typeProperties.authenticationType",
                type: {
                    name: "String",
                },
            }, containerUri: {
                serializedName: "typeProperties.containerUri",
                type: {
                    name: "any",
                },
            } }),
    },
};
exports.AzureTableStorageLinkedService = {
    serializedName: "AzureTableStorage",
    type: {
        name: "Composite",
        className: "AzureTableStorageLinkedService",
        uberParent: "LinkedService",
        additionalProperties: { type: { name: "Object" } },
        polymorphicDiscriminator: exports.LinkedService.type.polymorphicDiscriminator,
        modelProperties: Object.assign(Object.assign({}, exports.LinkedService.type.modelProperties), { connectionString: {
                serializedName: "typeProperties.connectionString",
                type: {
                    name: "any",
                },
            }, accountKey: {
                serializedName: "typeProperties.accountKey",
                type: {
                    name: "Composite",
                    className: "AzureKeyVaultSecretReference",
                },
            }, sasUri: {
                serializedName: "typeProperties.sasUri",
                type: {
                    name: "any",
                },
            }, sasToken: {
                serializedName: "typeProperties.sasToken",
                type: {
                    name: "Composite",
                    className: "AzureKeyVaultSecretReference",
                },
            }, encryptedCredential: {
                serializedName: "typeProperties.encryptedCredential",
                type: {
                    name: "String",
                },
            }, serviceEndpoint: {
                serializedName: "typeProperties.serviceEndpoint",
                type: {
                    name: "any",
                },
            }, credential: {
                serializedName: "typeProperties.credential",
                type: {
                    name: "Composite",
                    className: "CredentialReference",
                },
            } }),
    },
};
exports.AzureSqlDWLinkedService = {
    serializedName: "AzureSqlDW",
    type: {
        name: "Composite",
        className: "AzureSqlDWLinkedService",
        uberParent: "LinkedService",
        additionalProperties: { type: { name: "Object" } },
        polymorphicDiscriminator: exports.LinkedService.type.polymorphicDiscriminator,
        modelProperties: Object.assign(Object.assign({}, exports.LinkedService.type.modelProperties), { server: {
                serializedName: "typeProperties.server",
                type: {
                    name: "any",
                },
            }, database: {
                serializedName: "typeProperties.database",
                type: {
                    name: "any",
                },
            }, encrypt: {
                serializedName: "typeProperties.encrypt",
                type: {
                    name: "any",
                },
            }, trustServerCertificate: {
                serializedName: "typeProperties.trustServerCertificate",
                type: {
                    name: "any",
                },
            }, hostNameInCertificate: {
                serializedName: "typeProperties.hostNameInCertificate",
                type: {
                    name: "any",
                },
            }, applicationIntent: {
                serializedName: "typeProperties.applicationIntent",
                type: {
                    name: "any",
                },
            }, connectTimeout: {
                serializedName: "typeProperties.connectTimeout",
                type: {
                    name: "any",
                },
            }, connectRetryCount: {
                serializedName: "typeProperties.connectRetryCount",
                type: {
                    name: "any",
                },
            }, connectRetryInterval: {
                serializedName: "typeProperties.connectRetryInterval",
                type: {
                    name: "any",
                },
            }, loadBalanceTimeout: {
                serializedName: "typeProperties.loadBalanceTimeout",
                type: {
                    name: "any",
                },
            }, commandTimeout: {
                serializedName: "typeProperties.commandTimeout",
                type: {
                    name: "any",
                },
            }, integratedSecurity: {
                serializedName: "typeProperties.integratedSecurity",
                type: {
                    name: "any",
                },
            }, failoverPartner: {
                serializedName: "typeProperties.failoverPartner",
                type: {
                    name: "any",
                },
            }, maxPoolSize: {
                serializedName: "typeProperties.maxPoolSize",
                type: {
                    name: "any",
                },
            }, minPoolSize: {
                serializedName: "typeProperties.minPoolSize",
                type: {
                    name: "any",
                },
            }, multipleActiveResultSets: {
                serializedName: "typeProperties.multipleActiveResultSets",
                type: {
                    name: "any",
                },
            }, multiSubnetFailover: {
                serializedName: "typeProperties.multiSubnetFailover",
                type: {
                    name: "any",
                },
            }, packetSize: {
                serializedName: "typeProperties.packetSize",
                type: {
                    name: "any",
                },
            }, pooling: {
                serializedName: "typeProperties.pooling",
                type: {
                    name: "any",
                },
            }, connectionString: {
                serializedName: "typeProperties.connectionString",
                type: {
                    name: "any",
                },
            }, authenticationType: {
                serializedName: "typeProperties.authenticationType",
                type: {
                    name: "String",
                },
            }, userName: {
                serializedName: "typeProperties.userName",
                type: {
                    name: "any",
                },
            }, password: {
                serializedName: "typeProperties.password",
                type: {
                    name: "Composite",
                    className: "AzureKeyVaultSecretReference",
                },
            }, servicePrincipalId: {
                serializedName: "typeProperties.servicePrincipalId",
                type: {
                    name: "any",
                },
            }, servicePrincipalKey: {
                serializedName: "typeProperties.servicePrincipalKey",
                type: {
                    name: "Composite",
                    className: "SecretBase",
                },
            }, servicePrincipalCredentialType: {
                serializedName: "typeProperties.servicePrincipalCredentialType",
                type: {
                    name: "any",
                },
            }, servicePrincipalCredential: {
                serializedName: "typeProperties.servicePrincipalCredential",
                type: {
                    name: "Composite",
                    className: "SecretBase",
                },
            }, tenant: {
                serializedName: "typeProperties.tenant",
                type: {
                    name: "any",
                },
            }, azureCloudType: {
                serializedName: "typeProperties.azureCloudType",
                type: {
                    name: "any",
                },
            }, encryptedCredential: {
                serializedName: "typeProperties.encryptedCredential",
                type: {
                    name: "any",
                },
            }, credential: {
                serializedName: "typeProperties.credential",
                type: {
                    name: "Composite",
                    className: "CredentialReference",
                },
            } }),
    },
};
exports.SqlServerLinkedService = {
    serializedName: "SqlServer",
    type: {
        name: "Composite",
        className: "SqlServerLinkedService",
        uberParent: "LinkedService",
        additionalProperties: { type: { name: "Object" } },
        polymorphicDiscriminator: exports.LinkedService.type.polymorphicDiscriminator,
        modelProperties: Object.assign(Object.assign({}, exports.LinkedService.type.modelProperties), { server: {
                serializedName: "typeProperties.server",
                type: {
                    name: "any",
                },
            }, database: {
                serializedName: "typeProperties.database",
                type: {
                    name: "any",
                },
            }, encrypt: {
                serializedName: "typeProperties.encrypt",
                type: {
                    name: "any",
                },
            }, trustServerCertificate: {
                serializedName: "typeProperties.trustServerCertificate",
                type: {
                    name: "any",
                },
            }, hostNameInCertificate: {
                serializedName: "typeProperties.hostNameInCertificate",
                type: {
                    name: "any",
                },
            }, applicationIntent: {
                serializedName: "typeProperties.applicationIntent",
                type: {
                    name: "any",
                },
            }, connectTimeout: {
                serializedName: "typeProperties.connectTimeout",
                type: {
                    name: "any",
                },
            }, connectRetryCount: {
                serializedName: "typeProperties.connectRetryCount",
                type: {
                    name: "any",
                },
            }, connectRetryInterval: {
                serializedName: "typeProperties.connectRetryInterval",
                type: {
                    name: "any",
                },
            }, loadBalanceTimeout: {
                serializedName: "typeProperties.loadBalanceTimeout",
                type: {
                    name: "any",
                },
            }, commandTimeout: {
                serializedName: "typeProperties.commandTimeout",
                type: {
                    name: "any",
                },
            }, integratedSecurity: {
                serializedName: "typeProperties.integratedSecurity",
                type: {
                    name: "any",
                },
            }, failoverPartner: {
                serializedName: "typeProperties.failoverPartner",
                type: {
                    name: "any",
                },
            }, maxPoolSize: {
                serializedName: "typeProperties.maxPoolSize",
                type: {
                    name: "any",
                },
            }, minPoolSize: {
                serializedName: "typeProperties.minPoolSize",
                type: {
                    name: "any",
                },
            }, multipleActiveResultSets: {
                serializedName: "typeProperties.multipleActiveResultSets",
                type: {
                    name: "any",
                },
            }, multiSubnetFailover: {
                serializedName: "typeProperties.multiSubnetFailover",
                type: {
                    name: "any",
                },
            }, packetSize: {
                serializedName: "typeProperties.packetSize",
                type: {
                    name: "any",
                },
            }, pooling: {
                serializedName: "typeProperties.pooling",
                type: {
                    name: "any",
                },
            }, connectionString: {
                serializedName: "typeProperties.connectionString",
                type: {
                    name: "any",
                },
            }, authenticationType: {
                serializedName: "typeProperties.authenticationType",
                type: {
                    name: "String",
                },
            }, userName: {
                serializedName: "typeProperties.userName",
                type: {
                    name: "any",
                },
            }, password: {
                serializedName: "typeProperties.password",
                type: {
                    name: "Composite",
                    className: "SecretBase",
                },
            }, encryptedCredential: {
                serializedName: "typeProperties.encryptedCredential",
                type: {
                    name: "any",
                },
            }, alwaysEncryptedSettings: {
                serializedName: "typeProperties.alwaysEncryptedSettings",
                type: {
                    name: "Composite",
                    className: "SqlAlwaysEncryptedProperties",
                },
            }, credential: {
                serializedName: "typeProperties.credential",
                type: {
                    name: "Composite",
                    className: "CredentialReference",
                },
            } }),
    },
};
exports.AmazonRdsForSqlServerLinkedService = {
    serializedName: "AmazonRdsForSqlServer",
    type: {
        name: "Composite",
        className: "AmazonRdsForSqlServerLinkedService",
        uberParent: "LinkedService",
        additionalProperties: { type: { name: "Object" } },
        polymorphicDiscriminator: exports.LinkedService.type.polymorphicDiscriminator,
        modelProperties: Object.assign(Object.assign({}, exports.LinkedService.type.modelProperties), { server: {
                serializedName: "typeProperties.server",
                type: {
                    name: "any",
                },
            }, database: {
                serializedName: "typeProperties.database",
                type: {
                    name: "any",
                },
            }, encrypt: {
                serializedName: "typeProperties.encrypt",
                type: {
                    name: "any",
                },
            }, trustServerCertificate: {
                serializedName: "typeProperties.trustServerCertificate",
                type: {
                    name: "any",
                },
            }, hostNameInCertificate: {
                serializedName: "typeProperties.hostNameInCertificate",
                type: {
                    name: "any",
                },
            }, applicationIntent: {
                serializedName: "typeProperties.applicationIntent",
                type: {
                    name: "any",
                },
            }, connectTimeout: {
                serializedName: "typeProperties.connectTimeout",
                type: {
                    name: "any",
                },
            }, connectRetryCount: {
                serializedName: "typeProperties.connectRetryCount",
                type: {
                    name: "any",
                },
            }, connectRetryInterval: {
                serializedName: "typeProperties.connectRetryInterval",
                type: {
                    name: "any",
                },
            }, loadBalanceTimeout: {
                serializedName: "typeProperties.loadBalanceTimeout",
                type: {
                    name: "any",
                },
            }, commandTimeout: {
                serializedName: "typeProperties.commandTimeout",
                type: {
                    name: "any",
                },
            }, integratedSecurity: {
                serializedName: "typeProperties.integratedSecurity",
                type: {
                    name: "any",
                },
            }, failoverPartner: {
                serializedName: "typeProperties.failoverPartner",
                type: {
                    name: "any",
                },
            }, maxPoolSize: {
                serializedName: "typeProperties.maxPoolSize",
                type: {
                    name: "any",
                },
            }, minPoolSize: {
                serializedName: "typeProperties.minPoolSize",
                type: {
                    name: "any",
                },
            }, multipleActiveResultSets: {
                serializedName: "typeProperties.multipleActiveResultSets",
                type: {
                    name: "any",
                },
            }, multiSubnetFailover: {
                serializedName: "typeProperties.multiSubnetFailover",
                type: {
                    name: "any",
                },
            }, packetSize: {
                serializedName: "typeProperties.packetSize",
                type: {
                    name: "any",
                },
            }, pooling: {
                serializedName: "typeProperties.pooling",
                type: {
                    name: "any",
                },
            }, connectionString: {
                serializedName: "typeProperties.connectionString",
                type: {
                    name: "any",
                },
            }, authenticationType: {
                serializedName: "typeProperties.authenticationType",
                type: {
                    name: "String",
                },
            }, userName: {
                serializedName: "typeProperties.userName",
                type: {
                    name: "any",
                },
            }, password: {
                serializedName: "typeProperties.password",
                type: {
                    name: "Composite",
                    className: "SecretBase",
                },
            }, encryptedCredential: {
                serializedName: "typeProperties.encryptedCredential",
                type: {
                    name: "any",
                },
            }, alwaysEncryptedSettings: {
                serializedName: "typeProperties.alwaysEncryptedSettings",
                type: {
                    name: "Composite",
                    className: "SqlAlwaysEncryptedProperties",
                },
            } }),
    },
};
exports.AzureSqlDatabaseLinkedService = {
    serializedName: "AzureSqlDatabase",
    type: {
        name: "Composite",
        className: "AzureSqlDatabaseLinkedService",
        uberParent: "LinkedService",
        additionalProperties: { type: { name: "Object" } },
        polymorphicDiscriminator: exports.LinkedService.type.polymorphicDiscriminator,
        modelProperties: Object.assign(Object.assign({}, exports.LinkedService.type.modelProperties), { server: {
                serializedName: "typeProperties.server",
                type: {
                    name: "any",
                },
            }, database: {
                serializedName: "typeProperties.database",
                type: {
                    name: "any",
                },
            }, encrypt: {
                serializedName: "typeProperties.encrypt",
                type: {
                    name: "any",
                },
            }, trustServerCertificate: {
                serializedName: "typeProperties.trustServerCertificate",
                type: {
                    name: "any",
                },
            }, hostNameInCertificate: {
                serializedName: "typeProperties.hostNameInCertificate",
                type: {
                    name: "any",
                },
            }, applicationIntent: {
                serializedName: "typeProperties.applicationIntent",
                type: {
                    name: "any",
                },
            }, connectTimeout: {
                serializedName: "typeProperties.connectTimeout",
                type: {
                    name: "any",
                },
            }, connectRetryCount: {
                serializedName: "typeProperties.connectRetryCount",
                type: {
                    name: "any",
                },
            }, connectRetryInterval: {
                serializedName: "typeProperties.connectRetryInterval",
                type: {
                    name: "any",
                },
            }, loadBalanceTimeout: {
                serializedName: "typeProperties.loadBalanceTimeout",
                type: {
                    name: "any",
                },
            }, commandTimeout: {
                serializedName: "typeProperties.commandTimeout",
                type: {
                    name: "any",
                },
            }, integratedSecurity: {
                serializedName: "typeProperties.integratedSecurity",
                type: {
                    name: "any",
                },
            }, failoverPartner: {
                serializedName: "typeProperties.failoverPartner",
                type: {
                    name: "any",
                },
            }, maxPoolSize: {
                serializedName: "typeProperties.maxPoolSize",
                type: {
                    name: "any",
                },
            }, minPoolSize: {
                serializedName: "typeProperties.minPoolSize",
                type: {
                    name: "any",
                },
            }, multipleActiveResultSets: {
                serializedName: "typeProperties.multipleActiveResultSets",
                type: {
                    name: "any",
                },
            }, multiSubnetFailover: {
                serializedName: "typeProperties.multiSubnetFailover",
                type: {
                    name: "any",
                },
            }, packetSize: {
                serializedName: "typeProperties.packetSize",
                type: {
                    name: "any",
                },
            }, pooling: {
                serializedName: "typeProperties.pooling",
                type: {
                    name: "any",
                },
            }, connectionString: {
                serializedName: "typeProperties.connectionString",
                type: {
                    name: "any",
                },
            }, authenticationType: {
                serializedName: "typeProperties.authenticationType",
                type: {
                    name: "String",
                },
            }, userName: {
                serializedName: "typeProperties.userName",
                type: {
                    name: "any",
                },
            }, password: {
                serializedName: "typeProperties.password",
                type: {
                    name: "Composite",
                    className: "AzureKeyVaultSecretReference",
                },
            }, servicePrincipalId: {
                serializedName: "typeProperties.servicePrincipalId",
                type: {
                    name: "any",
                },
            }, servicePrincipalKey: {
                serializedName: "typeProperties.servicePrincipalKey",
                type: {
                    name: "Composite",
                    className: "SecretBase",
                },
            }, servicePrincipalCredentialType: {
                serializedName: "typeProperties.servicePrincipalCredentialType",
                type: {
                    name: "any",
                },
            }, servicePrincipalCredential: {
                serializedName: "typeProperties.servicePrincipalCredential",
                type: {
                    name: "Composite",
                    className: "SecretBase",
                },
            }, tenant: {
                serializedName: "typeProperties.tenant",
                type: {
                    name: "any",
                },
            }, azureCloudType: {
                serializedName: "typeProperties.azureCloudType",
                type: {
                    name: "any",
                },
            }, alwaysEncryptedSettings: {
                serializedName: "typeProperties.alwaysEncryptedSettings",
                type: {
                    name: "Composite",
                    className: "SqlAlwaysEncryptedProperties",
                },
            }, encryptedCredential: {
                serializedName: "typeProperties.encryptedCredential",
                type: {
                    name: "any",
                },
            }, credential: {
                serializedName: "typeProperties.credential",
                type: {
                    name: "Composite",
                    className: "CredentialReference",
                },
            } }),
    },
};
exports.AzureSqlMILinkedService = {
    serializedName: "AzureSqlMI",
    type: {
        name: "Composite",
        className: "AzureSqlMILinkedService",
        uberParent: "LinkedService",
        additionalProperties: { type: { name: "Object" } },
        polymorphicDiscriminator: exports.LinkedService.type.polymorphicDiscriminator,
        modelProperties: Object.assign(Object.assign({}, exports.LinkedService.type.modelProperties), { server: {
                serializedName: "typeProperties.server",
                type: {
                    name: "any",
                },
            }, database: {
                serializedName: "typeProperties.database",
                type: {
                    name: "any",
                },
            }, encrypt: {
                serializedName: "typeProperties.encrypt",
                type: {
                    name: "any",
                },
            }, trustServerCertificate: {
                serializedName: "typeProperties.trustServerCertificate",
                type: {
                    name: "any",
                },
            }, hostNameInCertificate: {
                serializedName: "typeProperties.hostNameInCertificate",
                type: {
                    name: "any",
                },
            }, applicationIntent: {
                serializedName: "typeProperties.applicationIntent",
                type: {
                    name: "any",
                },
            }, connectTimeout: {
                serializedName: "typeProperties.connectTimeout",
                type: {
                    name: "any",
                },
            }, connectRetryCount: {
                serializedName: "typeProperties.connectRetryCount",
                type: {
                    name: "any",
                },
            }, connectRetryInterval: {
                serializedName: "typeProperties.connectRetryInterval",
                type: {
                    name: "any",
                },
            }, loadBalanceTimeout: {
                serializedName: "typeProperties.loadBalanceTimeout",
                type: {
                    name: "any",
                },
            }, commandTimeout: {
                serializedName: "typeProperties.commandTimeout",
                type: {
                    name: "any",
                },
            }, integratedSecurity: {
                serializedName: "typeProperties.integratedSecurity",
                type: {
                    name: "any",
                },
            }, failoverPartner: {
                serializedName: "typeProperties.failoverPartner",
                type: {
                    name: "any",
                },
            }, maxPoolSize: {
                serializedName: "typeProperties.maxPoolSize",
                type: {
                    name: "any",
                },
            }, minPoolSize: {
                serializedName: "typeProperties.minPoolSize",
                type: {
                    name: "any",
                },
            }, multipleActiveResultSets: {
                serializedName: "typeProperties.multipleActiveResultSets",
                type: {
                    name: "any",
                },
            }, multiSubnetFailover: {
                serializedName: "typeProperties.multiSubnetFailover",
                type: {
                    name: "any",
                },
            }, packetSize: {
                serializedName: "typeProperties.packetSize",
                type: {
                    name: "any",
                },
            }, pooling: {
                serializedName: "typeProperties.pooling",
                type: {
                    name: "any",
                },
            }, connectionString: {
                serializedName: "typeProperties.connectionString",
                type: {
                    name: "any",
                },
            }, authenticationType: {
                serializedName: "typeProperties.authenticationType",
                type: {
                    name: "String",
                },
            }, userName: {
                serializedName: "typeProperties.userName",
                type: {
                    name: "any",
                },
            }, password: {
                serializedName: "typeProperties.password",
                type: {
                    name: "Composite",
                    className: "AzureKeyVaultSecretReference",
                },
            }, servicePrincipalId: {
                serializedName: "typeProperties.servicePrincipalId",
                type: {
                    name: "any",
                },
            }, servicePrincipalKey: {
                serializedName: "typeProperties.servicePrincipalKey",
                type: {
                    name: "Composite",
                    className: "SecretBase",
                },
            }, servicePrincipalCredentialType: {
                serializedName: "typeProperties.servicePrincipalCredentialType",
                type: {
                    name: "any",
                },
            }, servicePrincipalCredential: {
                serializedName: "typeProperties.servicePrincipalCredential",
                type: {
                    name: "Composite",
                    className: "SecretBase",
                },
            }, tenant: {
                serializedName: "typeProperties.tenant",
                type: {
                    name: "any",
                },
            }, azureCloudType: {
                serializedName: "typeProperties.azureCloudType",
                type: {
                    name: "any",
                },
            }, alwaysEncryptedSettings: {
                serializedName: "typeProperties.alwaysEncryptedSettings",
                type: {
                    name: "Composite",
                    className: "SqlAlwaysEncryptedProperties",
                },
            }, encryptedCredential: {
                serializedName: "typeProperties.encryptedCredential",
                type: {
                    name: "any",
                },
            }, credential: {
                serializedName: "typeProperties.credential",
                type: {
                    name: "Composite",
                    className: "CredentialReference",
                },
            } }),
    },
};
exports.AzureBatchLinkedService = {
    serializedName: "AzureBatch",
    type: {
        name: "Composite",
        className: "AzureBatchLinkedService",
        uberParent: "LinkedService",
        additionalProperties: { type: { name: "Object" } },
        polymorphicDiscriminator: exports.LinkedService.type.polymorphicDiscriminator,
        modelProperties: Object.assign(Object.assign({}, exports.LinkedService.type.modelProperties), { accountName: {
                serializedName: "typeProperties.accountName",
                required: true,
                type: {
                    name: "any",
                },
            }, accessKey: {
                serializedName: "typeProperties.accessKey",
                type: {
                    name: "Composite",
                    className: "SecretBase",
                },
            }, batchUri: {
                serializedName: "typeProperties.batchUri",
                required: true,
                type: {
                    name: "any",
                },
            }, poolName: {
                serializedName: "typeProperties.poolName",
                required: true,
                type: {
                    name: "any",
                },
            }, linkedServiceName: {
                serializedName: "typeProperties.linkedServiceName",
                type: {
                    name: "Composite",
                    className: "LinkedServiceReference",
                },
            }, encryptedCredential: {
                serializedName: "typeProperties.encryptedCredential",
                type: {
                    name: "any",
                },
            }, credential: {
                serializedName: "typeProperties.credential",
                type: {
                    name: "Composite",
                    className: "CredentialReference",
                },
            } }),
    },
};
exports.AzureKeyVaultLinkedService = {
    serializedName: "AzureKeyVault",
    type: {
        name: "Composite",
        className: "AzureKeyVaultLinkedService",
        uberParent: "LinkedService",
        additionalProperties: { type: { name: "Object" } },
        polymorphicDiscriminator: exports.LinkedService.type.polymorphicDiscriminator,
        modelProperties: Object.assign(Object.assign({}, exports.LinkedService.type.modelProperties), { baseUrl: {
                serializedName: "typeProperties.baseUrl",
                required: true,
                type: {
                    name: "any",
                },
            }, credential: {
                serializedName: "typeProperties.credential",
                type: {
                    name: "Composite",
                    className: "CredentialReference",
                },
            } }),
    },
};
exports.CosmosDbLinkedService = {
    serializedName: "CosmosDb",
    type: {
        name: "Composite",
        className: "CosmosDbLinkedService",
        uberParent: "LinkedService",
        additionalProperties: { type: { name: "Object" } },
        polymorphicDiscriminator: exports.LinkedService.type.polymorphicDiscriminator,
        modelProperties: Object.assign(Object.assign({}, exports.LinkedService.type.modelProperties), { connectionString: {
                serializedName: "typeProperties.connectionString",
                type: {
                    name: "any",
                },
            }, accountEndpoint: {
                serializedName: "typeProperties.accountEndpoint",
                type: {
                    name: "any",
                },
            }, database: {
                serializedName: "typeProperties.database",
                type: {
                    name: "any",
                },
            }, accountKey: {
                serializedName: "typeProperties.accountKey",
                type: {
                    name: "Composite",
                    className: "SecretBase",
                },
            }, encryptedCredential: {
                serializedName: "typeProperties.encryptedCredential",
                type: {
                    name: "any",
                },
            }, credential: {
                serializedName: "typeProperties.credential",
                type: {
                    name: "Composite",
                    className: "CredentialReference",
                },
            } }),
    },
};
exports.DynamicsLinkedService = {
    serializedName: "Dynamics",
    type: {
        name: "Composite",
        className: "DynamicsLinkedService",
        uberParent: "LinkedService",
        additionalProperties: { type: { name: "Object" } },
        polymorphicDiscriminator: exports.LinkedService.type.polymorphicDiscriminator,
        modelProperties: Object.assign(Object.assign({}, exports.LinkedService.type.modelProperties), { deploymentType: {
                serializedName: "typeProperties.deploymentType",
                required: true,
                type: {
                    name: "any",
                },
            }, hostName: {
                serializedName: "typeProperties.hostName",
                type: {
                    name: "any",
                },
            }, port: {
                serializedName: "typeProperties.port",
                type: {
                    name: "any",
                },
            }, serviceUri: {
                serializedName: "typeProperties.serviceUri",
                type: {
                    name: "any",
                },
            }, organizationName: {
                serializedName: "typeProperties.organizationName",
                type: {
                    name: "any",
                },
            }, authenticationType: {
                serializedName: "typeProperties.authenticationType",
                required: true,
                type: {
                    name: "any",
                },
            }, domain: {
                serializedName: "typeProperties.domain",
                type: {
                    name: "any",
                },
            }, username: {
                serializedName: "typeProperties.username",
                type: {
                    name: "any",
                },
            }, password: {
                serializedName: "typeProperties.password",
                type: {
                    name: "Composite",
                    className: "SecretBase",
                },
            }, servicePrincipalId: {
                serializedName: "typeProperties.servicePrincipalId",
                type: {
                    name: "any",
                },
            }, servicePrincipalCredentialType: {
                serializedName: "typeProperties.servicePrincipalCredentialType",
                type: {
                    name: "any",
                },
            }, servicePrincipalCredential: {
                serializedName: "typeProperties.servicePrincipalCredential",
                type: {
                    name: "Composite",
                    className: "SecretBase",
                },
            }, encryptedCredential: {
                serializedName: "typeProperties.encryptedCredential",
                type: {
                    name: "any",
                },
            }, credential: {
                serializedName: "typeProperties.credential",
                type: {
                    name: "Composite",
                    className: "CredentialReference",
                },
            } }),
    },
};
exports.DynamicsCrmLinkedService = {
    serializedName: "DynamicsCrm",
    type: {
        name: "Composite",
        className: "DynamicsCrmLinkedService",
        uberParent: "LinkedService",
        additionalProperties: { type: { name: "Object" } },
        polymorphicDiscriminator: exports.LinkedService.type.polymorphicDiscriminator,
        modelProperties: Object.assign(Object.assign({}, exports.LinkedService.type.modelProperties), { deploymentType: {
                serializedName: "typeProperties.deploymentType",
                required: true,
                type: {
                    name: "any",
                },
            }, hostName: {
                serializedName: "typeProperties.hostName",
                type: {
                    name: "any",
                },
            }, port: {
                serializedName: "typeProperties.port",
                type: {
                    name: "any",
                },
            }, serviceUri: {
                serializedName: "typeProperties.serviceUri",
                type: {
                    name: "any",
                },
            }, organizationName: {
                serializedName: "typeProperties.organizationName",
                type: {
                    name: "any",
                },
            }, authenticationType: {
                serializedName: "typeProperties.authenticationType",
                required: true,
                type: {
                    name: "any",
                },
            }, domain: {
                serializedName: "typeProperties.domain",
                type: {
                    name: "any",
                },
            }, username: {
                serializedName: "typeProperties.username",
                type: {
                    name: "any",
                },
            }, password: {
                serializedName: "typeProperties.password",
                type: {
                    name: "Composite",
                    className: "SecretBase",
                },
            }, servicePrincipalId: {
                serializedName: "typeProperties.servicePrincipalId",
                type: {
                    name: "any",
                },
            }, servicePrincipalCredentialType: {
                serializedName: "typeProperties.servicePrincipalCredentialType",
                type: {
                    name: "any",
                },
            }, servicePrincipalCredential: {
                serializedName: "typeProperties.servicePrincipalCredential",
                type: {
                    name: "Composite",
                    className: "SecretBase",
                },
            }, credential: {
                serializedName: "typeProperties.credential",
                type: {
                    name: "Composite",
                    className: "SecretBase",
                },
            }, encryptedCredential: {
                serializedName: "typeProperties.encryptedCredential",
                type: {
                    name: "any",
                },
            } }),
    },
};
exports.CommonDataServiceForAppsLinkedService = {
    serializedName: "CommonDataServiceForApps",
    type: {
        name: "Composite",
        className: "CommonDataServiceForAppsLinkedService",
        uberParent: "LinkedService",
        additionalProperties: { type: { name: "Object" } },
        polymorphicDiscriminator: exports.LinkedService.type.polymorphicDiscriminator,
        modelProperties: Object.assign(Object.assign({}, exports.LinkedService.type.modelProperties), { deploymentType: {
                serializedName: "typeProperties.deploymentType",
                required: true,
                type: {
                    name: "any",
                },
            }, hostName: {
                serializedName: "typeProperties.hostName",
                type: {
                    name: "any",
                },
            }, port: {
                serializedName: "typeProperties.port",
                type: {
                    name: "any",
                },
            }, serviceUri: {
                serializedName: "typeProperties.serviceUri",
                type: {
                    name: "any",
                },
            }, organizationName: {
                serializedName: "typeProperties.organizationName",
                type: {
                    name: "any",
                },
            }, authenticationType: {
                serializedName: "typeProperties.authenticationType",
                required: true,
                type: {
                    name: "any",
                },
            }, domain: {
                serializedName: "typeProperties.domain",
                type: {
                    name: "any",
                },
            }, username: {
                serializedName: "typeProperties.username",
                type: {
                    name: "any",
                },
            }, password: {
                serializedName: "typeProperties.password",
                type: {
                    name: "Composite",
                    className: "SecretBase",
                },
            }, servicePrincipalId: {
                serializedName: "typeProperties.servicePrincipalId",
                type: {
                    name: "any",
                },
            }, servicePrincipalCredentialType: {
                serializedName: "typeProperties.servicePrincipalCredentialType",
                type: {
                    name: "any",
                },
            }, servicePrincipalCredential: {
                serializedName: "typeProperties.servicePrincipalCredential",
                type: {
                    name: "Composite",
                    className: "SecretBase",
                },
            }, encryptedCredential: {
                serializedName: "typeProperties.encryptedCredential",
                type: {
                    name: "any",
                },
            } }),
    },
};
exports.HDInsightLinkedService = {
    serializedName: "HDInsight",
    type: {
        name: "Composite",
        className: "HDInsightLinkedService",
        uberParent: "LinkedService",
        additionalProperties: { type: { name: "Object" } },
        polymorphicDiscriminator: exports.LinkedService.type.polymorphicDiscriminator,
        modelProperties: Object.assign(Object.assign({}, exports.LinkedService.type.modelProperties), { clusterUri: {
                serializedName: "typeProperties.clusterUri",
                required: true,
                type: {
                    name: "any",
                },
            }, userName: {
                serializedName: "typeProperties.userName",
                type: {
                    name: "any",
                },
            }, password: {
                serializedName: "typeProperties.password",
                type: {
                    name: "Composite",
                    className: "SecretBase",
                },
            }, linkedServiceName: {
                serializedName: "typeProperties.linkedServiceName",
                type: {
                    name: "Composite",
                    className: "LinkedServiceReference",
                },
            }, hcatalogLinkedServiceName: {
                serializedName: "typeProperties.hcatalogLinkedServiceName",
                type: {
                    name: "Composite",
                    className: "LinkedServiceReference",
                },
            }, encryptedCredential: {
                serializedName: "typeProperties.encryptedCredential",
                type: {
                    name: "any",
                },
            }, isEspEnabled: {
                serializedName: "typeProperties.isEspEnabled",
                type: {
                    name: "any",
                },
            }, fileSystem: {
                serializedName: "typeProperties.fileSystem",
                type: {
                    name: "any",
                },
            } }),
    },
};
exports.FileServerLinkedService = {
    serializedName: "FileServer",
    type: {
        name: "Composite",
        className: "FileServerLinkedService",
        uberParent: "LinkedService",
        additionalProperties: { type: { name: "Object" } },
        polymorphicDiscriminator: exports.LinkedService.type.polymorphicDiscriminator,
        modelProperties: Object.assign(Object.assign({}, exports.LinkedService.type.modelProperties), { host: {
                serializedName: "typeProperties.host",
                required: true,
                type: {
                    name: "any",
                },
            }, userId: {
                serializedName: "typeProperties.userId",
                type: {
                    name: "any",
                },
            }, password: {
                serializedName: "typeProperties.password",
                type: {
                    name: "Composite",
                    className: "SecretBase",
                },
            }, encryptedCredential: {
                serializedName: "typeProperties.encryptedCredential",
                type: {
                    name: "any",
                },
            } }),
    },
};
exports.AzureFileStorageLinkedService = {
    serializedName: "AzureFileStorage",
    type: {
        name: "Composite",
        className: "AzureFileStorageLinkedService",
        uberParent: "LinkedService",
        additionalProperties: { type: { name: "Object" } },
        polymorphicDiscriminator: exports.LinkedService.type.polymorphicDiscriminator,
        modelProperties: Object.assign(Object.assign({}, exports.LinkedService.type.modelProperties), { host: {
                serializedName: "typeProperties.host",
                required: true,
                type: {
                    name: "any",
                },
            }, userId: {
                serializedName: "typeProperties.userId",
                type: {
                    name: "any",
                },
            }, password: {
                serializedName: "typeProperties.password",
                type: {
                    name: "Composite",
                    className: "SecretBase",
                },
            }, connectionString: {
                serializedName: "typeProperties.connectionString",
                type: {
                    name: "any",
                },
            }, accountKey: {
                serializedName: "typeProperties.accountKey",
                type: {
                    name: "Composite",
                    className: "AzureKeyVaultSecretReference",
                },
            }, sasUri: {
                serializedName: "typeProperties.sasUri",
                type: {
                    name: "any",
                },
            }, sasToken: {
                serializedName: "typeProperties.sasToken",
                type: {
                    name: "Composite",
                    className: "AzureKeyVaultSecretReference",
                },
            }, fileShare: {
                serializedName: "typeProperties.fileShare",
                type: {
                    name: "any",
                },
            }, snapshot: {
                serializedName: "typeProperties.snapshot",
                type: {
                    name: "any",
                },
            }, encryptedCredential: {
                serializedName: "typeProperties.encryptedCredential",
                type: {
                    name: "any",
                },
            }, serviceEndpoint: {
                serializedName: "typeProperties.serviceEndpoint",
                type: {
                    name: "any",
                },
            }, credential: {
                serializedName: "typeProperties.credential",
                type: {
                    name: "Composite",
                    className: "CredentialReference",
                },
            } }),
    },
};
exports.GoogleCloudStorageLinkedService = {
    serializedName: "GoogleCloudStorage",
    type: {
        name: "Composite",
        className: "GoogleCloudStorageLinkedService",
        uberParent: "LinkedService",
        additionalProperties: { type: { name: "Object" } },
        polymorphicDiscriminator: exports.LinkedService.type.polymorphicDiscriminator,
        modelProperties: Object.assign(Object.assign({}, exports.LinkedService.type.modelProperties), { accessKeyId: {
                serializedName: "typeProperties.accessKeyId",
                type: {
                    name: "any",
                },
            }, secretAccessKey: {
                serializedName: "typeProperties.secretAccessKey",
                type: {
                    name: "Composite",
                    className: "SecretBase",
                },
            }, serviceUrl: {
                serializedName: "typeProperties.serviceUrl",
                type: {
                    name: "any",
                },
            }, encryptedCredential: {
                serializedName: "typeProperties.encryptedCredential",
                type: {
                    name: "any",
                },
            } }),
    },
};
exports.OracleLinkedService = {
    serializedName: "Oracle",
    type: {
        name: "Composite",
        className: "OracleLinkedService",
        uberParent: "LinkedService",
        additionalProperties: { type: { name: "Object" } },
        polymorphicDiscriminator: exports.LinkedService.type.polymorphicDiscriminator,
        modelProperties: Object.assign(Object.assign({}, exports.LinkedService.type.modelProperties), { connectionString: {
                serializedName: "typeProperties.connectionString",
                required: true,
                type: {
                    name: "any",
                },
            }, server: {
                serializedName: "typeProperties.server",
                type: {
                    name: "any",
                },
            }, authenticationType: {
                serializedName: "typeProperties.authenticationType",
                type: {
                    name: "String",
                },
            }, username: {
                serializedName: "typeProperties.username",
                type: {
                    name: "any",
                },
            }, password: {
                serializedName: "typeProperties.password",
                type: {
                    name: "Composite",
                    className: "AzureKeyVaultSecretReference",
                },
            }, encryptionClient: {
                serializedName: "typeProperties.encryptionClient",
                type: {
                    name: "any",
                },
            }, encryptionTypesClient: {
                serializedName: "typeProperties.encryptionTypesClient",
                type: {
                    name: "any",
                },
            }, cryptoChecksumClient: {
                serializedName: "typeProperties.cryptoChecksumClient",
                type: {
                    name: "any",
                },
            }, cryptoChecksumTypesClient: {
                serializedName: "typeProperties.cryptoChecksumTypesClient",
                type: {
                    name: "any",
                },
            }, initialLobFetchSize: {
                serializedName: "typeProperties.initialLobFetchSize",
                type: {
                    name: "any",
                },
            }, fetchSize: {
                serializedName: "typeProperties.fetchSize",
                type: {
                    name: "any",
                },
            }, statementCacheSize: {
                serializedName: "typeProperties.statementCacheSize",
                type: {
                    name: "any",
                },
            }, initializationString: {
                serializedName: "typeProperties.initializationString",
                type: {
                    name: "any",
                },
            }, enableBulkLoad: {
                serializedName: "typeProperties.enableBulkLoad",
                type: {
                    name: "any",
                },
            }, supportV1DataTypes: {
                serializedName: "typeProperties.supportV1DataTypes",
                type: {
                    name: "any",
                },
            }, fetchTswtzAsTimestamp: {
                serializedName: "typeProperties.fetchTswtzAsTimestamp",
                type: {
                    name: "any",
                },
            }, encryptedCredential: {
                serializedName: "typeProperties.encryptedCredential",
                type: {
                    name: "any",
                },
            } }),
    },
};
exports.AmazonRdsForOracleLinkedService = {
    serializedName: "AmazonRdsForOracle",
    type: {
        name: "Composite",
        className: "AmazonRdsForOracleLinkedService",
        uberParent: "LinkedService",
        additionalProperties: { type: { name: "Object" } },
        polymorphicDiscriminator: exports.LinkedService.type.polymorphicDiscriminator,
        modelProperties: Object.assign(Object.assign({}, exports.LinkedService.type.modelProperties), { connectionString: {
                serializedName: "typeProperties.connectionString",
                required: true,
                type: {
                    name: "any",
                },
            }, password: {
                serializedName: "typeProperties.password",
                type: {
                    name: "Composite",
                    className: "SecretBase",
                },
            }, encryptedCredential: {
                serializedName: "typeProperties.encryptedCredential",
                type: {
                    name: "any",
                },
            } }),
    },
};
exports.AzureMySqlLinkedService = {
    serializedName: "AzureMySql",
    type: {
        name: "Composite",
        className: "AzureMySqlLinkedService",
        uberParent: "LinkedService",
        additionalProperties: { type: { name: "Object" } },
        polymorphicDiscriminator: exports.LinkedService.type.polymorphicDiscriminator,
        modelProperties: Object.assign(Object.assign({}, exports.LinkedService.type.modelProperties), { connectionString: {
                serializedName: "typeProperties.connectionString",
                required: true,
                type: {
                    name: "any",
                },
            }, password: {
                serializedName: "typeProperties.password",
                type: {
                    name: "Composite",
                    className: "AzureKeyVaultSecretReference",
                },
            }, encryptedCredential: {
                serializedName: "typeProperties.encryptedCredential",
                type: {
                    name: "any",
                },
            } }),
    },
};
exports.MySqlLinkedService = {
    serializedName: "MySql",
    type: {
        name: "Composite",
        className: "MySqlLinkedService",
        uberParent: "LinkedService",
        additionalProperties: { type: { name: "Object" } },
        polymorphicDiscriminator: exports.LinkedService.type.polymorphicDiscriminator,
        modelProperties: Object.assign(Object.assign({}, exports.LinkedService.type.modelProperties), { driverVersion: {
                serializedName: "typeProperties.driverVersion",
                type: {
                    name: "any",
                },
            }, connectionString: {
                serializedName: "typeProperties.connectionString",
                type: {
                    name: "any",
                },
            }, server: {
                serializedName: "typeProperties.server",
                type: {
                    name: "any",
                },
            }, port: {
                serializedName: "typeProperties.port",
                type: {
                    name: "any",
                },
            }, username: {
                serializedName: "typeProperties.username",
                type: {
                    name: "any",
                },
            }, database: {
                serializedName: "typeProperties.database",
                type: {
                    name: "any",
                },
            }, sslMode: {
                serializedName: "typeProperties.sslMode",
                type: {
                    name: "any",
                },
            }, useSystemTrustStore: {
                serializedName: "typeProperties.useSystemTrustStore",
                type: {
                    name: "any",
                },
            }, password: {
                serializedName: "typeProperties.password",
                type: {
                    name: "Composite",
                    className: "AzureKeyVaultSecretReference",
                },
            }, encryptedCredential: {
                serializedName: "typeProperties.encryptedCredential",
                type: {
                    name: "any",
                },
            }, allowZeroDateTime: {
                serializedName: "typeProperties.allowZeroDateTime",
                type: {
                    name: "any",
                },
            }, connectionTimeout: {
                serializedName: "typeProperties.connectionTimeout",
                type: {
                    name: "any",
                },
            }, convertZeroDateTime: {
                serializedName: "typeProperties.convertZeroDateTime",
                type: {
                    name: "any",
                },
            }, guidFormat: {
                serializedName: "typeProperties.guidFormat",
                type: {
                    name: "any",
                },
            }, sslCert: {
                serializedName: "typeProperties.sslCert",
                type: {
                    name: "any",
                },
            }, sslKey: {
                serializedName: "typeProperties.sslKey",
                type: {
                    name: "any",
                },
            }, treatTinyAsBoolean: {
                serializedName: "typeProperties.treatTinyAsBoolean",
                type: {
                    name: "any",
                },
            } }),
    },
};
exports.PostgreSqlLinkedService = {
    serializedName: "PostgreSql",
    type: {
        name: "Composite",
        className: "PostgreSqlLinkedService",
        uberParent: "LinkedService",
        additionalProperties: { type: { name: "Object" } },
        polymorphicDiscriminator: exports.LinkedService.type.polymorphicDiscriminator,
        modelProperties: Object.assign(Object.assign({}, exports.LinkedService.type.modelProperties), { connectionString: {
                serializedName: "typeProperties.connectionString",
                required: true,
                type: {
                    name: "any",
                },
            }, password: {
                serializedName: "typeProperties.password",
                type: {
                    name: "Composite",
                    className: "AzureKeyVaultSecretReference",
                },
            }, encryptedCredential: {
                serializedName: "typeProperties.encryptedCredential",
                type: {
                    name: "any",
                },
            } }),
    },
};
exports.PostgreSqlV2LinkedService = {
    serializedName: "PostgreSqlV2",
    type: {
        name: "Composite",
        className: "PostgreSqlV2LinkedService",
        uberParent: "LinkedService",
        additionalProperties: { type: { name: "Object" } },
        polymorphicDiscriminator: exports.LinkedService.type.polymorphicDiscriminator,
        modelProperties: Object.assign(Object.assign({}, exports.LinkedService.type.modelProperties), { server: {
                serializedName: "typeProperties.server",
                required: true,
                type: {
                    name: "any",
                },
            }, port: {
                serializedName: "typeProperties.port",
                type: {
                    name: "any",
                },
            }, username: {
                serializedName: "typeProperties.username",
                required: true,
                type: {
                    name: "any",
                },
            }, database: {
                serializedName: "typeProperties.database",
                required: true,
                type: {
                    name: "any",
                },
            }, authenticationType: {
                serializedName: "typeProperties.authenticationType",
                required: true,
                type: {
                    name: "any",
                },
            }, sslMode: {
                serializedName: "typeProperties.sslMode",
                required: true,
                type: {
                    name: "any",
                },
            }, schema: {
                serializedName: "typeProperties.schema",
                type: {
                    name: "any",
                },
            }, pooling: {
                serializedName: "typeProperties.pooling",
                type: {
                    name: "any",
                },
            }, connectionTimeout: {
                serializedName: "typeProperties.connectionTimeout",
                type: {
                    name: "any",
                },
            }, commandTimeout: {
                serializedName: "typeProperties.commandTimeout",
                type: {
                    name: "any",
                },
            }, trustServerCertificate: {
                serializedName: "typeProperties.trustServerCertificate",
                type: {
                    name: "any",
                },
            }, sslCertificate: {
                serializedName: "typeProperties.sslCertificate",
                type: {
                    name: "any",
                },
            }, sslKey: {
                serializedName: "typeProperties.sslKey",
                type: {
                    name: "any",
                },
            }, sslPassword: {
                serializedName: "typeProperties.sslPassword",
                type: {
                    name: "any",
                },
            }, readBufferSize: {
                serializedName: "typeProperties.readBufferSize",
                type: {
                    name: "any",
                },
            }, logParameters: {
                serializedName: "typeProperties.logParameters",
                type: {
                    name: "any",
                },
            }, timezone: {
                serializedName: "typeProperties.timezone",
                type: {
                    name: "any",
                },
            }, encoding: {
                serializedName: "typeProperties.encoding",
                type: {
                    name: "any",
                },
            }, password: {
                serializedName: "typeProperties.password",
                type: {
                    name: "Composite",
                    className: "AzureKeyVaultSecretReference",
                },
            }, encryptedCredential: {
                serializedName: "typeProperties.encryptedCredential",
                type: {
                    name: "any",
                },
            } }),
    },
};
exports.SybaseLinkedService = {
    serializedName: "Sybase",
    type: {
        name: "Composite",
        className: "SybaseLinkedService",
        uberParent: "LinkedService",
        additionalProperties: { type: { name: "Object" } },
        polymorphicDiscriminator: exports.LinkedService.type.polymorphicDiscriminator,
        modelProperties: Object.assign(Object.assign({}, exports.LinkedService.type.modelProperties), { server: {
                serializedName: "typeProperties.server",
                required: true,
                type: {
                    name: "any",
                },
            }, database: {
                serializedName: "typeProperties.database",
                required: true,
                type: {
                    name: "any",
                },
            }, schema: {
                serializedName: "typeProperties.schema",
                type: {
                    name: "any",
                },
            }, authenticationType: {
                serializedName: "typeProperties.authenticationType",
                type: {
                    name: "String",
                },
            }, username: {
                serializedName: "typeProperties.username",
                type: {
                    name: "any",
                },
            }, password: {
                serializedName: "typeProperties.password",
                type: {
                    name: "Composite",
                    className: "SecretBase",
                },
            }, encryptedCredential: {
                serializedName: "typeProperties.encryptedCredential",
                type: {
                    name: "any",
                },
            } }),
    },
};
exports.Db2LinkedService = {
    serializedName: "Db2",
    type: {
        name: "Composite",
        className: "Db2LinkedService",
        uberParent: "LinkedService",
        additionalProperties: { type: { name: "Object" } },
        polymorphicDiscriminator: exports.LinkedService.type.polymorphicDiscriminator,
        modelProperties: Object.assign(Object.assign({}, exports.LinkedService.type.modelProperties), { connectionString: {
                serializedName: "typeProperties.connectionString",
                type: {
                    name: "any",
                },
            }, server: {
                serializedName: "typeProperties.server",
                required: true,
                type: {
                    name: "any",
                },
            }, database: {
                serializedName: "typeProperties.database",
                required: true,
                type: {
                    name: "any",
                },
            }, authenticationType: {
                serializedName: "typeProperties.authenticationType",
                type: {
                    name: "String",
                },
            }, username: {
                serializedName: "typeProperties.username",
                type: {
                    name: "any",
                },
            }, password: {
                serializedName: "typeProperties.password",
                type: {
                    name: "Composite",
                    className: "SecretBase",
                },
            }, packageCollection: {
                serializedName: "typeProperties.packageCollection",
                type: {
                    name: "any",
                },
            }, certificateCommonName: {
                serializedName: "typeProperties.certificateCommonName",
                type: {
                    name: "any",
                },
            }, encryptedCredential: {
                serializedName: "typeProperties.encryptedCredential",
                type: {
                    name: "any",
                },
            } }),
    },
};
exports.TeradataLinkedService = {
    serializedName: "Teradata",
    type: {
        name: "Composite",
        className: "TeradataLinkedService",
        uberParent: "LinkedService",
        additionalProperties: { type: { name: "Object" } },
        polymorphicDiscriminator: exports.LinkedService.type.polymorphicDiscriminator,
        modelProperties: Object.assign(Object.assign({}, exports.LinkedService.type.modelProperties), { connectionString: {
                serializedName: "typeProperties.connectionString",
                type: {
                    name: "any",
                },
            }, server: {
                serializedName: "typeProperties.server",
                type: {
                    name: "any",
                },
            }, authenticationType: {
                serializedName: "typeProperties.authenticationType",
                type: {
                    name: "String",
                },
            }, username: {
                serializedName: "typeProperties.username",
                type: {
                    name: "any",
                },
            }, password: {
                serializedName: "typeProperties.password",
                type: {
                    name: "Composite",
                    className: "SecretBase",
                },
            }, sslMode: {
                serializedName: "typeProperties.sslMode",
                type: {
                    name: "any",
                },
            }, portNumber: {
                serializedName: "typeProperties.portNumber",
                type: {
                    name: "any",
                },
            }, httpsPortNumber: {
                serializedName: "typeProperties.httpsPortNumber",
                type: {
                    name: "any",
                },
            }, useDataEncryption: {
                serializedName: "typeProperties.useDataEncryption",
                type: {
                    name: "any",
                },
            }, characterSet: {
                serializedName: "typeProperties.characterSet",
                type: {
                    name: "any",
                },
            }, maxRespSize: {
                serializedName: "typeProperties.maxRespSize",
                type: {
                    name: "any",
                },
            }, encryptedCredential: {
                serializedName: "typeProperties.encryptedCredential",
                type: {
                    name: "any",
                },
            } }),
    },
};
exports.AzureMLLinkedService = {
    serializedName: "AzureML",
    type: {
        name: "Composite",
        className: "AzureMLLinkedService",
        uberParent: "LinkedService",
        additionalProperties: { type: { name: "Object" } },
        polymorphicDiscriminator: exports.LinkedService.type.polymorphicDiscriminator,
        modelProperties: Object.assign(Object.assign({}, exports.LinkedService.type.modelProperties), { mlEndpoint: {
                serializedName: "typeProperties.mlEndpoint",
                required: true,
                type: {
                    name: "any",
                },
            }, apiKey: {
                serializedName: "typeProperties.apiKey",
                type: {
                    name: "Composite",
                    className: "SecretBase",
                },
            }, updateResourceEndpoint: {
                serializedName: "typeProperties.updateResourceEndpoint",
                type: {
                    name: "any",
                },
            }, servicePrincipalId: {
                serializedName: "typeProperties.servicePrincipalId",
                type: {
                    name: "any",
                },
            }, servicePrincipalKey: {
                serializedName: "typeProperties.servicePrincipalKey",
                type: {
                    name: "Composite",
                    className: "SecretBase",
                },
            }, tenant: {
                serializedName: "typeProperties.tenant",
                type: {
                    name: "any",
                },
            }, encryptedCredential: {
                serializedName: "typeProperties.encryptedCredential",
                type: {
                    name: "any",
                },
            }, authentication: {
                serializedName: "typeProperties.authentication",
                type: {
                    name: "any",
                },
            } }),
    },
};
exports.AzureMLServiceLinkedService = {
    serializedName: "AzureMLService",
    type: {
        name: "Composite",
        className: "AzureMLServiceLinkedService",
        uberParent: "LinkedService",
        additionalProperties: { type: { name: "Object" } },
        polymorphicDiscriminator: exports.LinkedService.type.polymorphicDiscriminator,
        modelProperties: Object.assign(Object.assign({}, exports.LinkedService.type.modelProperties), { subscriptionId: {
                serializedName: "typeProperties.subscriptionId",
                required: true,
                type: {
                    name: "any",
                },
            }, resourceGroupName: {
                serializedName: "typeProperties.resourceGroupName",
                required: true,
                type: {
                    name: "any",
                },
            }, mlWorkspaceName: {
                serializedName: "typeProperties.mlWorkspaceName",
                required: true,
                type: {
                    name: "any",
                },
            }, authentication: {
                serializedName: "typeProperties.authentication",
                type: {
                    name: "any",
                },
            }, servicePrincipalId: {
                serializedName: "typeProperties.servicePrincipalId",
                type: {
                    name: "any",
                },
            }, servicePrincipalKey: {
                serializedName: "typeProperties.servicePrincipalKey",
                type: {
                    name: "Composite",
                    className: "SecretBase",
                },
            }, tenant: {
                serializedName: "typeProperties.tenant",
                type: {
                    name: "any",
                },
            }, encryptedCredential: {
                serializedName: "typeProperties.encryptedCredential",
                type: {
                    name: "any",
                },
            } }),
    },
};
exports.OdbcLinkedService = {
    serializedName: "Odbc",
    type: {
        name: "Composite",
        className: "OdbcLinkedService",
        uberParent: "LinkedService",
        additionalProperties: { type: { name: "Object" } },
        polymorphicDiscriminator: exports.LinkedService.type.polymorphicDiscriminator,
        modelProperties: Object.assign(Object.assign({}, exports.LinkedService.type.modelProperties), { connectionString: {
                serializedName: "typeProperties.connectionString",
                required: true,
                type: {
                    name: "any",
                },
            }, authenticationType: {
                serializedName: "typeProperties.authenticationType",
                type: {
                    name: "any",
                },
            }, credential: {
                serializedName: "typeProperties.credential",
                type: {
                    name: "Composite",
                    className: "SecretBase",
                },
            }, userName: {
                serializedName: "typeProperties.userName",
                type: {
                    name: "any",
                },
            }, password: {
                serializedName: "typeProperties.password",
                type: {
                    name: "Composite",
                    className: "SecretBase",
                },
            }, encryptedCredential: {
                serializedName: "typeProperties.encryptedCredential",
                type: {
                    name: "any",
                },
            } }),
    },
};
exports.InformixLinkedService = {
    serializedName: "Informix",
    type: {
        name: "Composite",
        className: "InformixLinkedService",
        uberParent: "LinkedService",
        additionalProperties: { type: { name: "Object" } },
        polymorphicDiscriminator: exports.LinkedService.type.polymorphicDiscriminator,
        modelProperties: Object.assign(Object.assign({}, exports.LinkedService.type.modelProperties), { connectionString: {
                serializedName: "typeProperties.connectionString",
                required: true,
                type: {
                    name: "any",
                },
            }, authenticationType: {
                serializedName: "typeProperties.authenticationType",
                type: {
                    name: "any",
                },
            }, credential: {
                serializedName: "typeProperties.credential",
                type: {
                    name: "Composite",
                    className: "SecretBase",
                },
            }, userName: {
                serializedName: "typeProperties.userName",
                type: {
                    name: "any",
                },
            }, password: {
                serializedName: "typeProperties.password",
                type: {
                    name: "Composite",
                    className: "SecretBase",
                },
            }, encryptedCredential: {
                serializedName: "typeProperties.encryptedCredential",
                type: {
                    name: "any",
                },
            } }),
    },
};
exports.MicrosoftAccessLinkedService = {
    serializedName: "MicrosoftAccess",
    type: {
        name: "Composite",
        className: "MicrosoftAccessLinkedService",
        uberParent: "LinkedService",
        additionalProperties: { type: { name: "Object" } },
        polymorphicDiscriminator: exports.LinkedService.type.polymorphicDiscriminator,
        modelProperties: Object.assign(Object.assign({}, exports.LinkedService.type.modelProperties), { connectionString: {
                serializedName: "typeProperties.connectionString",
                required: true,
                type: {
                    name: "any",
                },
            }, authenticationType: {
                serializedName: "typeProperties.authenticationType",
                type: {
                    name: "any",
                },
            }, credential: {
                serializedName: "typeProperties.credential",
                type: {
                    name: "Composite",
                    className: "SecretBase",
                },
            }, userName: {
                serializedName: "typeProperties.userName",
                type: {
                    name: "any",
                },
            }, password: {
                serializedName: "typeProperties.password",
                type: {
                    name: "Composite",
                    className: "SecretBase",
                },
            }, encryptedCredential: {
                serializedName: "typeProperties.encryptedCredential",
                type: {
                    name: "any",
                },
            } }),
    },
};
exports.HdfsLinkedService = {
    serializedName: "Hdfs",
    type: {
        name: "Composite",
        className: "HdfsLinkedService",
        uberParent: "LinkedService",
        additionalProperties: { type: { name: "Object" } },
        polymorphicDiscriminator: exports.LinkedService.type.polymorphicDiscriminator,
        modelProperties: Object.assign(Object.assign({}, exports.LinkedService.type.modelProperties), { url: {
                serializedName: "typeProperties.url",
                required: true,
                type: {
                    name: "any",
                },
            }, authenticationType: {
                serializedName: "typeProperties.authenticationType",
                type: {
                    name: "any",
                },
            }, encryptedCredential: {
                serializedName: "typeProperties.encryptedCredential",
                type: {
                    name: "any",
                },
            }, userName: {
                serializedName: "typeProperties.userName",
                type: {
                    name: "any",
                },
            }, password: {
                serializedName: "typeProperties.password",
                type: {
                    name: "Composite",
                    className: "SecretBase",
                },
            } }),
    },
};
exports.ODataLinkedService = {
    serializedName: "OData",
    type: {
        name: "Composite",
        className: "ODataLinkedService",
        uberParent: "LinkedService",
        additionalProperties: { type: { name: "Object" } },
        polymorphicDiscriminator: exports.LinkedService.type.polymorphicDiscriminator,
        modelProperties: Object.assign(Object.assign({}, exports.LinkedService.type.modelProperties), { url: {
                serializedName: "typeProperties.url",
                required: true,
                type: {
                    name: "any",
                },
            }, authenticationType: {
                serializedName: "typeProperties.authenticationType",
                type: {
                    name: "String",
                },
            }, userName: {
                serializedName: "typeProperties.userName",
                type: {
                    name: "any",
                },
            }, password: {
                serializedName: "typeProperties.password",
                type: {
                    name: "Composite",
                    className: "SecretBase",
                },
            }, tenant: {
                serializedName: "typeProperties.tenant",
                type: {
                    name: "any",
                },
            }, servicePrincipalId: {
                serializedName: "typeProperties.servicePrincipalId",
                type: {
                    name: "any",
                },
            }, azureCloudType: {
                serializedName: "typeProperties.azureCloudType",
                type: {
                    name: "any",
                },
            }, aadResourceId: {
                serializedName: "typeProperties.aadResourceId",
                type: {
                    name: "any",
                },
            }, aadServicePrincipalCredentialType: {
                serializedName: "typeProperties.aadServicePrincipalCredentialType",
                type: {
                    name: "String",
                },
            }, servicePrincipalKey: {
                serializedName: "typeProperties.servicePrincipalKey",
                type: {
                    name: "Composite",
                    className: "SecretBase",
                },
            }, servicePrincipalEmbeddedCert: {
                serializedName: "typeProperties.servicePrincipalEmbeddedCert",
                type: {
                    name: "Composite",
                    className: "SecretBase",
                },
            }, servicePrincipalEmbeddedCertPassword: {
                serializedName: "typeProperties.servicePrincipalEmbeddedCertPassword",
                type: {
                    name: "Composite",
                    className: "SecretBase",
                },
            }, encryptedCredential: {
                serializedName: "typeProperties.encryptedCredential",
                type: {
                    name: "any",
                },
            } }),
    },
};
exports.WebLinkedService = {
    serializedName: "Web",
    type: {
        name: "Composite",
        className: "WebLinkedService",
        uberParent: "LinkedService",
        additionalProperties: { type: { name: "Object" } },
        polymorphicDiscriminator: exports.LinkedService.type.polymorphicDiscriminator,
        modelProperties: Object.assign(Object.assign({}, exports.LinkedService.type.modelProperties), { typeProperties: {
                serializedName: "typeProperties",
                type: {
                    name: "Composite",
                    className: "WebLinkedServiceTypeProperties",
                },
            } }),
    },
};
exports.CassandraLinkedService = {
    serializedName: "Cassandra",
    type: {
        name: "Composite",
        className: "CassandraLinkedService",
        uberParent: "LinkedService",
        additionalProperties: { type: { name: "Object" } },
        polymorphicDiscriminator: exports.LinkedService.type.polymorphicDiscriminator,
        modelProperties: Object.assign(Object.assign({}, exports.LinkedService.type.modelProperties), { host: {
                serializedName: "typeProperties.host",
                required: true,
                type: {
                    name: "any",
                },
            }, authenticationType: {
                serializedName: "typeProperties.authenticationType",
                type: {
                    name: "any",
                },
            }, port: {
                serializedName: "typeProperties.port",
                type: {
                    name: "any",
                },
            }, username: {
                serializedName: "typeProperties.username",
                type: {
                    name: "any",
                },
            }, password: {
                serializedName: "typeProperties.password",
                type: {
                    name: "Composite",
                    className: "SecretBase",
                },
            }, encryptedCredential: {
                serializedName: "typeProperties.encryptedCredential",
                type: {
                    name: "any",
                },
            } }),
    },
};
exports.MongoDbLinkedService = {
    serializedName: "MongoDb",
    type: {
        name: "Composite",
        className: "MongoDbLinkedService",
        uberParent: "LinkedService",
        additionalProperties: { type: { name: "Object" } },
        polymorphicDiscriminator: exports.LinkedService.type.polymorphicDiscriminator,
        modelProperties: Object.assign(Object.assign({}, exports.LinkedService.type.modelProperties), { server: {
                serializedName: "typeProperties.server",
                required: true,
                type: {
                    name: "any",
                },
            }, authenticationType: {
                serializedName: "typeProperties.authenticationType",
                type: {
                    name: "String",
                },
            }, databaseName: {
                serializedName: "typeProperties.databaseName",
                required: true,
                type: {
                    name: "any",
                },
            }, username: {
                serializedName: "typeProperties.username",
                type: {
                    name: "any",
                },
            }, password: {
                serializedName: "typeProperties.password",
                type: {
                    name: "Composite",
                    className: "SecretBase",
                },
            }, authSource: {
                serializedName: "typeProperties.authSource",
                type: {
                    name: "any",
                },
            }, port: {
                serializedName: "typeProperties.port",
                type: {
                    name: "any",
                },
            }, enableSsl: {
                serializedName: "typeProperties.enableSsl",
                type: {
                    name: "any",
                },
            }, allowSelfSignedServerCert: {
                serializedName: "typeProperties.allowSelfSignedServerCert",
                type: {
                    name: "any",
                },
            }, encryptedCredential: {
                serializedName: "typeProperties.encryptedCredential",
                type: {
                    name: "any",
                },
            } }),
    },
};
exports.MongoDbAtlasLinkedService = {
    serializedName: "MongoDbAtlas",
    type: {
        name: "Composite",
        className: "MongoDbAtlasLinkedService",
        uberParent: "LinkedService",
        additionalProperties: { type: { name: "Object" } },
        polymorphicDiscriminator: exports.LinkedService.type.polymorphicDiscriminator,
        modelProperties: Object.assign(Object.assign({}, exports.LinkedService.type.modelProperties), { connectionString: {
                serializedName: "typeProperties.connectionString",
                required: true,
                type: {
                    name: "any",
                },
            }, database: {
                serializedName: "typeProperties.database",
                required: true,
                type: {
                    name: "any",
                },
            }, driverVersion: {
                serializedName: "typeProperties.driverVersion",
                type: {
                    name: "any",
                },
            } }),
    },
};
exports.MongoDbV2LinkedService = {
    serializedName: "MongoDbV2",
    type: {
        name: "Composite",
        className: "MongoDbV2LinkedService",
        uberParent: "LinkedService",
        additionalProperties: { type: { name: "Object" } },
        polymorphicDiscriminator: exports.LinkedService.type.polymorphicDiscriminator,
        modelProperties: Object.assign(Object.assign({}, exports.LinkedService.type.modelProperties), { connectionString: {
                serializedName: "typeProperties.connectionString",
                required: true,
                type: {
                    name: "any",
                },
            }, database: {
                serializedName: "typeProperties.database",
                required: true,
                type: {
                    name: "any",
                },
            } }),
    },
};
exports.CosmosDbMongoDbApiLinkedService = {
    serializedName: "CosmosDbMongoDbApi",
    type: {
        name: "Composite",
        className: "CosmosDbMongoDbApiLinkedService",
        uberParent: "LinkedService",
        additionalProperties: { type: { name: "Object" } },
        polymorphicDiscriminator: exports.LinkedService.type.polymorphicDiscriminator,
        modelProperties: Object.assign(Object.assign({}, exports.LinkedService.type.modelProperties), { connectionString: {
                serializedName: "typeProperties.connectionString",
                required: true,
                type: {
                    name: "any",
                },
            }, database: {
                serializedName: "typeProperties.database",
                required: true,
                type: {
                    name: "any",
                },
            } }),
    },
};
exports.AzureDataLakeStoreLinkedService = {
    serializedName: "AzureDataLakeStore",
    type: {
        name: "Composite",
        className: "AzureDataLakeStoreLinkedService",
        uberParent: "LinkedService",
        additionalProperties: { type: { name: "Object" } },
        polymorphicDiscriminator: exports.LinkedService.type.polymorphicDiscriminator,
        modelProperties: Object.assign(Object.assign({}, exports.LinkedService.type.modelProperties), { dataLakeStoreUri: {
                serializedName: "typeProperties.dataLakeStoreUri",
                required: true,
                type: {
                    name: "any",
                },
            }, servicePrincipalId: {
                serializedName: "typeProperties.servicePrincipalId",
                type: {
                    name: "any",
                },
            }, servicePrincipalKey: {
                serializedName: "typeProperties.servicePrincipalKey",
                type: {
                    name: "Composite",
                    className: "SecretBase",
                },
            }, tenant: {
                serializedName: "typeProperties.tenant",
                type: {
                    name: "any",
                },
            }, azureCloudType: {
                serializedName: "typeProperties.azureCloudType",
                type: {
                    name: "any",
                },
            }, accountName: {
                serializedName: "typeProperties.accountName",
                type: {
                    name: "any",
                },
            }, subscriptionId: {
                serializedName: "typeProperties.subscriptionId",
                type: {
                    name: "any",
                },
            }, resourceGroupName: {
                serializedName: "typeProperties.resourceGroupName",
                type: {
                    name: "any",
                },
            }, encryptedCredential: {
                serializedName: "typeProperties.encryptedCredential",
                type: {
                    name: "any",
                },
            }, credential: {
                serializedName: "typeProperties.credential",
                type: {
                    name: "Composite",
                    className: "CredentialReference",
                },
            } }),
    },
};
exports.AzureBlobFSLinkedService = {
    serializedName: "AzureBlobFS",
    type: {
        name: "Composite",
        className: "AzureBlobFSLinkedService",
        uberParent: "LinkedService",
        additionalProperties: { type: { name: "Object" } },
        polymorphicDiscriminator: exports.LinkedService.type.polymorphicDiscriminator,
        modelProperties: Object.assign(Object.assign({}, exports.LinkedService.type.modelProperties), { url: {
                serializedName: "typeProperties.url",
                type: {
                    name: "any",
                },
            }, accountKey: {
                serializedName: "typeProperties.accountKey",
                type: {
                    name: "any",
                },
            }, servicePrincipalId: {
                serializedName: "typeProperties.servicePrincipalId",
                type: {
                    name: "any",
                },
            }, servicePrincipalKey: {
                serializedName: "typeProperties.servicePrincipalKey",
                type: {
                    name: "Composite",
                    className: "SecretBase",
                },
            }, tenant: {
                serializedName: "typeProperties.tenant",
                type: {
                    name: "any",
                },
            }, azureCloudType: {
                serializedName: "typeProperties.azureCloudType",
                type: {
                    name: "any",
                },
            }, servicePrincipalCredentialType: {
                serializedName: "typeProperties.servicePrincipalCredentialType",
                type: {
                    name: "any",
                },
            }, servicePrincipalCredential: {
                serializedName: "typeProperties.servicePrincipalCredential",
                type: {
                    name: "Composite",
                    className: "SecretBase",
                },
            }, encryptedCredential: {
                serializedName: "typeProperties.encryptedCredential",
                type: {
                    name: "any",
                },
            }, sasUri: {
                serializedName: "typeProperties.sasUri",
                type: {
                    name: "any",
                },
            }, sasToken: {
                serializedName: "typeProperties.sasToken",
                type: {
                    name: "Composite",
                    className: "SecretBase",
                },
            }, credential: {
                serializedName: "typeProperties.credential",
                type: {
                    name: "Composite",
                    className: "CredentialReference",
                },
            } }),
    },
};
exports.Office365LinkedService = {
    serializedName: "Office365",
    type: {
        name: "Composite",
        className: "Office365LinkedService",
        uberParent: "LinkedService",
        additionalProperties: { type: { name: "Object" } },
        polymorphicDiscriminator: exports.LinkedService.type.polymorphicDiscriminator,
        modelProperties: Object.assign(Object.assign({}, exports.LinkedService.type.modelProperties), { office365TenantId: {
                serializedName: "typeProperties.office365TenantId",
                required: true,
                type: {
                    name: "any",
                },
            }, servicePrincipalTenantId: {
                serializedName: "typeProperties.servicePrincipalTenantId",
                required: true,
                type: {
                    name: "any",
                },
            }, servicePrincipalId: {
                serializedName: "typeProperties.servicePrincipalId",
                required: true,
                type: {
                    name: "any",
                },
            }, servicePrincipalKey: {
                serializedName: "typeProperties.servicePrincipalKey",
                type: {
                    name: "Composite",
                    className: "SecretBase",
                },
            }, encryptedCredential: {
                serializedName: "typeProperties.encryptedCredential",
                type: {
                    name: "any",
                },
            } }),
    },
};
exports.SalesforceLinkedService = {
    serializedName: "Salesforce",
    type: {
        name: "Composite",
        className: "SalesforceLinkedService",
        uberParent: "LinkedService",
        additionalProperties: { type: { name: "Object" } },
        polymorphicDiscriminator: exports.LinkedService.type.polymorphicDiscriminator,
        modelProperties: Object.assign(Object.assign({}, exports.LinkedService.type.modelProperties), { environmentUrl: {
                serializedName: "typeProperties.environmentUrl",
                type: {
                    name: "any",
                },
            }, username: {
                serializedName: "typeProperties.username",
                type: {
                    name: "any",
                },
            }, password: {
                serializedName: "typeProperties.password",
                type: {
                    name: "Composite",
                    className: "SecretBase",
                },
            }, securityToken: {
                serializedName: "typeProperties.securityToken",
                type: {
                    name: "Composite",
                    className: "SecretBase",
                },
            }, apiVersion: {
                serializedName: "typeProperties.apiVersion",
                type: {
                    name: "any",
                },
            }, encryptedCredential: {
                serializedName: "typeProperties.encryptedCredential",
                type: {
                    name: "any",
                },
            } }),
    },
};
exports.SalesforceServiceCloudLinkedService = {
    serializedName: "SalesforceServiceCloud",
    type: {
        name: "Composite",
        className: "SalesforceServiceCloudLinkedService",
        uberParent: "LinkedService",
        additionalProperties: { type: { name: "Object" } },
        polymorphicDiscriminator: exports.LinkedService.type.polymorphicDiscriminator,
        modelProperties: Object.assign(Object.assign({}, exports.LinkedService.type.modelProperties), { environmentUrl: {
                serializedName: "typeProperties.environmentUrl",
                type: {
                    name: "any",
                },
            }, username: {
                serializedName: "typeProperties.username",
                type: {
                    name: "any",
                },
            }, password: {
                serializedName: "typeProperties.password",
                type: {
                    name: "Composite",
                    className: "SecretBase",
                },
            }, securityToken: {
                serializedName: "typeProperties.securityToken",
                type: {
                    name: "Composite",
                    className: "SecretBase",
                },
            }, apiVersion: {
                serializedName: "typeProperties.apiVersion",
                type: {
                    name: "any",
                },
            }, extendedProperties: {
                serializedName: "typeProperties.extendedProperties",
                type: {
                    name: "any",
                },
            }, encryptedCredential: {
                serializedName: "typeProperties.encryptedCredential",
                type: {
                    name: "any",
                },
            } }),
    },
};
exports.SapCloudForCustomerLinkedService = {
    serializedName: "SapCloudForCustomer",
    type: {
        name: "Composite",
        className: "SapCloudForCustomerLinkedService",
        uberParent: "LinkedService",
        additionalProperties: { type: { name: "Object" } },
        polymorphicDiscriminator: exports.LinkedService.type.polymorphicDiscriminator,
        modelProperties: Object.assign(Object.assign({}, exports.LinkedService.type.modelProperties), { url: {
                serializedName: "typeProperties.url",
                required: true,
                type: {
                    name: "any",
                },
            }, username: {
                serializedName: "typeProperties.username",
                type: {
                    name: "any",
                },
            }, password: {
                serializedName: "typeProperties.password",
                type: {
                    name: "Composite",
                    className: "SecretBase",
                },
            }, encryptedCredential: {
                serializedName: "typeProperties.encryptedCredential",
                type: {
                    name: "any",
                },
            } }),
    },
};
exports.SapEccLinkedService = {
    serializedName: "SapEcc",
    type: {
        name: "Composite",
        className: "SapEccLinkedService",
        uberParent: "LinkedService",
        additionalProperties: { type: { name: "Object" } },
        polymorphicDiscriminator: exports.LinkedService.type.polymorphicDiscriminator,
        modelProperties: Object.assign(Object.assign({}, exports.LinkedService.type.modelProperties), { url: {
                serializedName: "typeProperties.url",
                required: true,
                type: {
                    name: "String",
                },
            }, username: {
                serializedName: "typeProperties.username",
                type: {
                    name: "String",
                },
            }, password: {
                serializedName: "typeProperties.password",
                type: {
                    name: "Composite",
                    className: "SecretBase",
                },
            }, encryptedCredential: {
                serializedName: "typeProperties.encryptedCredential",
                type: {
                    name: "String",
                },
            } }),
    },
};
exports.SapOpenHubLinkedService = {
    serializedName: "SapOpenHub",
    type: {
        name: "Composite",
        className: "SapOpenHubLinkedService",
        uberParent: "LinkedService",
        additionalProperties: { type: { name: "Object" } },
        polymorphicDiscriminator: exports.LinkedService.type.polymorphicDiscriminator,
        modelProperties: Object.assign(Object.assign({}, exports.LinkedService.type.modelProperties), { server: {
                serializedName: "typeProperties.server",
                required: true,
                type: {
                    name: "any",
                },
            }, systemNumber: {
                serializedName: "typeProperties.systemNumber",
                required: true,
                type: {
                    name: "any",
                },
            }, clientId: {
                serializedName: "typeProperties.clientId",
                required: true,
                type: {
                    name: "any",
                },
            }, language: {
                serializedName: "typeProperties.language",
                type: {
                    name: "any",
                },
            }, systemId: {
                serializedName: "typeProperties.systemId",
                type: {
                    name: "any",
                },
            }, userName: {
                serializedName: "typeProperties.userName",
                type: {
                    name: "any",
                },
            }, password: {
                serializedName: "typeProperties.password",
                type: {
                    name: "Composite",
                    className: "SecretBase",
                },
            }, messageServer: {
                serializedName: "typeProperties.messageServer",
                type: {
                    name: "any",
                },
            }, messageServerService: {
                serializedName: "typeProperties.messageServerService",
                type: {
                    name: "any",
                },
            }, logonGroup: {
                serializedName: "typeProperties.logonGroup",
                type: {
                    name: "any",
                },
            }, encryptedCredential: {
                serializedName: "typeProperties.encryptedCredential",
                type: {
                    name: "any",
                },
            } }),
    },
};
exports.SapOdpLinkedService = {
    serializedName: "SapOdp",
    type: {
        name: "Composite",
        className: "SapOdpLinkedService",
        uberParent: "LinkedService",
        additionalProperties: { type: { name: "Object" } },
        polymorphicDiscriminator: exports.LinkedService.type.polymorphicDiscriminator,
        modelProperties: Object.assign(Object.assign({}, exports.LinkedService.type.modelProperties), { server: {
                serializedName: "typeProperties.server",
                type: {
                    name: "any",
                },
            }, systemNumber: {
                serializedName: "typeProperties.systemNumber",
                type: {
                    name: "any",
                },
            }, clientId: {
                serializedName: "typeProperties.clientId",
                type: {
                    name: "any",
                },
            }, language: {
                serializedName: "typeProperties.language",
                type: {
                    name: "any",
                },
            }, systemId: {
                serializedName: "typeProperties.systemId",
                type: {
                    name: "any",
                },
            }, userName: {
                serializedName: "typeProperties.userName",
                type: {
                    name: "any",
                },
            }, password: {
                serializedName: "typeProperties.password",
                type: {
                    name: "Composite",
                    className: "SecretBase",
                },
            }, messageServer: {
                serializedName: "typeProperties.messageServer",
                type: {
                    name: "any",
                },
            }, messageServerService: {
                serializedName: "typeProperties.messageServerService",
                type: {
                    name: "any",
                },
            }, sncMode: {
                serializedName: "typeProperties.sncMode",
                type: {
                    name: "any",
                },
            }, sncMyName: {
                serializedName: "typeProperties.sncMyName",
                type: {
                    name: "any",
                },
            }, sncPartnerName: {
                serializedName: "typeProperties.sncPartnerName",
                type: {
                    name: "any",
                },
            }, sncLibraryPath: {
                serializedName: "typeProperties.sncLibraryPath",
                type: {
                    name: "any",
                },
            }, sncQop: {
                serializedName: "typeProperties.sncQop",
                type: {
                    name: "any",
                },
            }, x509CertificatePath: {
                serializedName: "typeProperties.x509CertificatePath",
                type: {
                    name: "any",
                },
            }, logonGroup: {
                serializedName: "typeProperties.logonGroup",
                type: {
                    name: "any",
                },
            }, subscriberName: {
                serializedName: "typeProperties.subscriberName",
                type: {
                    name: "any",
                },
            }, encryptedCredential: {
                serializedName: "typeProperties.encryptedCredential",
                type: {
                    name: "any",
                },
            } }),
    },
};
exports.RestServiceLinkedService = {
    serializedName: "RestService",
    type: {
        name: "Composite",
        className: "RestServiceLinkedService",
        uberParent: "LinkedService",
        additionalProperties: { type: { name: "Object" } },
        polymorphicDiscriminator: exports.LinkedService.type.polymorphicDiscriminator,
        modelProperties: Object.assign(Object.assign({}, exports.LinkedService.type.modelProperties), { url: {
                serializedName: "typeProperties.url",
                required: true,
                type: {
                    name: "any",
                },
            }, enableServerCertificateValidation: {
                serializedName: "typeProperties.enableServerCertificateValidation",
                type: {
                    name: "any",
                },
            }, authenticationType: {
                serializedName: "typeProperties.authenticationType",
                required: true,
                type: {
                    name: "String",
                },
            }, userName: {
                serializedName: "typeProperties.userName",
                type: {
                    name: "any",
                },
            }, password: {
                serializedName: "typeProperties.password",
                type: {
                    name: "Composite",
                    className: "SecretBase",
                },
            }, authHeaders: {
                serializedName: "typeProperties.authHeaders",
                type: {
                    name: "any",
                },
            }, servicePrincipalId: {
                serializedName: "typeProperties.servicePrincipalId",
                type: {
                    name: "any",
                },
            }, servicePrincipalKey: {
                serializedName: "typeProperties.servicePrincipalKey",
                type: {
                    name: "Composite",
                    className: "SecretBase",
                },
            }, tenant: {
                serializedName: "typeProperties.tenant",
                type: {
                    name: "any",
                },
            }, azureCloudType: {
                serializedName: "typeProperties.azureCloudType",
                type: {
                    name: "any",
                },
            }, aadResourceId: {
                serializedName: "typeProperties.aadResourceId",
                type: {
                    name: "any",
                },
            }, encryptedCredential: {
                serializedName: "typeProperties.encryptedCredential",
                type: {
                    name: "any",
                },
            }, credential: {
                serializedName: "typeProperties.credential",
                type: {
                    name: "Composite",
                    className: "CredentialReference",
                },
            }, clientId: {
                serializedName: "typeProperties.clientId",
                type: {
                    name: "any",
                },
            }, clientSecret: {
                serializedName: "typeProperties.clientSecret",
                type: {
                    name: "Composite",
                    className: "SecretBase",
                },
            }, tokenEndpoint: {
                serializedName: "typeProperties.tokenEndpoint",
                type: {
                    name: "any",
                },
            }, resource: {
                serializedName: "typeProperties.resource",
                type: {
                    name: "any",
                },
            }, scope: {
                serializedName: "typeProperties.scope",
                type: {
                    name: "any",
                },
            }, servicePrincipalCredentialType: {
                serializedName: "typeProperties.servicePrincipalCredentialType",
                type: {
                    name: "any",
                },
            }, servicePrincipalEmbeddedCert: {
                serializedName: "typeProperties.servicePrincipalEmbeddedCert",
                type: {
                    name: "Composite",
                    className: "SecretBase",
                },
            }, servicePrincipalEmbeddedCertPassword: {
                serializedName: "typeProperties.servicePrincipalEmbeddedCertPassword",
                type: {
                    name: "Composite",
                    className: "SecretBase",
                },
            } }),
    },
};
exports.TeamDeskLinkedService = {
    serializedName: "TeamDesk",
    type: {
        name: "Composite",
        className: "TeamDeskLinkedService",
        uberParent: "LinkedService",
        additionalProperties: { type: { name: "Object" } },
        polymorphicDiscriminator: exports.LinkedService.type.polymorphicDiscriminator,
        modelProperties: Object.assign(Object.assign({}, exports.LinkedService.type.modelProperties), { authenticationType: {
                serializedName: "typeProperties.authenticationType",
                required: true,
                type: {
                    name: "String",
                },
            }, url: {
                serializedName: "typeProperties.url",
                required: true,
                type: {
                    name: "any",
                },
            }, userName: {
                serializedName: "typeProperties.userName",
                type: {
                    name: "any",
                },
            }, password: {
                serializedName: "typeProperties.password",
                type: {
                    name: "Composite",
                    className: "SecretBase",
                },
            }, apiToken: {
                serializedName: "typeProperties.apiToken",
                type: {
                    name: "Composite",
                    className: "SecretBase",
                },
            }, encryptedCredential: {
                serializedName: "typeProperties.encryptedCredential",
                type: {
                    name: "any",
                },
            } }),
    },
};
exports.QuickbaseLinkedService = {
    serializedName: "Quickbase",
    type: {
        name: "Composite",
        className: "QuickbaseLinkedService",
        uberParent: "LinkedService",
        additionalProperties: { type: { name: "Object" } },
        polymorphicDiscriminator: exports.LinkedService.type.polymorphicDiscriminator,
        modelProperties: Object.assign(Object.assign({}, exports.LinkedService.type.modelProperties), { url: {
                serializedName: "typeProperties.url",
                required: true,
                type: {
                    name: "any",
                },
            }, userToken: {
                serializedName: "typeProperties.userToken",
                type: {
                    name: "Composite",
                    className: "SecretBase",
                },
            }, encryptedCredential: {
                serializedName: "typeProperties.encryptedCredential",
                type: {
                    name: "any",
                },
            } }),
    },
};
exports.SmartsheetLinkedService = {
    serializedName: "Smartsheet",
    type: {
        name: "Composite",
        className: "SmartsheetLinkedService",
        uberParent: "LinkedService",
        additionalProperties: { type: { name: "Object" } },
        polymorphicDiscriminator: exports.LinkedService.type.polymorphicDiscriminator,
        modelProperties: Object.assign(Object.assign({}, exports.LinkedService.type.modelProperties), { apiToken: {
                serializedName: "typeProperties.apiToken",
                type: {
                    name: "Composite",
                    className: "SecretBase",
                },
            }, encryptedCredential: {
                serializedName: "typeProperties.encryptedCredential",
                type: {
                    name: "any",
                },
            } }),
    },
};
exports.ZendeskLinkedService = {
    serializedName: "Zendesk",
    type: {
        name: "Composite",
        className: "ZendeskLinkedService",
        uberParent: "LinkedService",
        additionalProperties: { type: { name: "Object" } },
        polymorphicDiscriminator: exports.LinkedService.type.polymorphicDiscriminator,
        modelProperties: Object.assign(Object.assign({}, exports.LinkedService.type.modelProperties), { authenticationType: {
                serializedName: "typeProperties.authenticationType",
                required: true,
                type: {
                    name: "String",
                },
            }, url: {
                serializedName: "typeProperties.url",
                required: true,
                type: {
                    name: "any",
                },
            }, userName: {
                serializedName: "typeProperties.userName",
                type: {
                    name: "any",
                },
            }, password: {
                serializedName: "typeProperties.password",
                type: {
                    name: "Composite",
                    className: "SecretBase",
                },
            }, apiToken: {
                serializedName: "typeProperties.apiToken",
                type: {
                    name: "Composite",
                    className: "SecretBase",
                },
            }, encryptedCredential: {
                serializedName: "typeProperties.encryptedCredential",
                type: {
                    name: "any",
                },
            } }),
    },
};
exports.DataworldLinkedService = {
    serializedName: "Dataworld",
    type: {
        name: "Composite",
        className: "DataworldLinkedService",
        uberParent: "LinkedService",
        additionalProperties: { type: { name: "Object" } },
        polymorphicDiscriminator: exports.LinkedService.type.polymorphicDiscriminator,
        modelProperties: Object.assign(Object.assign({}, exports.LinkedService.type.modelProperties), { apiToken: {
                serializedName: "typeProperties.apiToken",
                type: {
                    name: "Composite",
                    className: "SecretBase",
                },
            }, encryptedCredential: {
                serializedName: "typeProperties.encryptedCredential",
                type: {
                    name: "any",
                },
            } }),
    },
};
exports.AppFiguresLinkedService = {
    serializedName: "AppFigures",
    type: {
        name: "Composite",
        className: "AppFiguresLinkedService",
        uberParent: "LinkedService",
        additionalProperties: { type: { name: "Object" } },
        polymorphicDiscriminator: exports.LinkedService.type.polymorphicDiscriminator,
        modelProperties: Object.assign(Object.assign({}, exports.LinkedService.type.modelProperties), { userName: {
                serializedName: "typeProperties.userName",
                required: true,
                type: {
                    name: "any",
                },
            }, password: {
                serializedName: "typeProperties.password",
                type: {
                    name: "Composite",
                    className: "SecretBase",
                },
            }, clientKey: {
                serializedName: "typeProperties.clientKey",
                type: {
                    name: "Composite",
                    className: "SecretBase",
                },
            } }),
    },
};
exports.AsanaLinkedService = {
    serializedName: "Asana",
    type: {
        name: "Composite",
        className: "AsanaLinkedService",
        uberParent: "LinkedService",
        additionalProperties: { type: { name: "Object" } },
        polymorphicDiscriminator: exports.LinkedService.type.polymorphicDiscriminator,
        modelProperties: Object.assign(Object.assign({}, exports.LinkedService.type.modelProperties), { apiToken: {
                serializedName: "typeProperties.apiToken",
                type: {
                    name: "Composite",
                    className: "SecretBase",
                },
            }, encryptedCredential: {
                serializedName: "typeProperties.encryptedCredential",
                type: {
                    name: "any",
                },
            } }),
    },
};
exports.TwilioLinkedService = {
    serializedName: "Twilio",
    type: {
        name: "Composite",
        className: "TwilioLinkedService",
        uberParent: "LinkedService",
        additionalProperties: { type: { name: "Object" } },
        polymorphicDiscriminator: exports.LinkedService.type.polymorphicDiscriminator,
        modelProperties: Object.assign(Object.assign({}, exports.LinkedService.type.modelProperties), { userName: {
                serializedName: "typeProperties.userName",
                required: true,
                type: {
                    name: "any",
                },
            }, password: {
                serializedName: "typeProperties.password",
                type: {
                    name: "Composite",
                    className: "SecretBase",
                },
            } }),
    },
};
exports.GoogleSheetsLinkedService = {
    serializedName: "GoogleSheets",
    type: {
        name: "Composite",
        className: "GoogleSheetsLinkedService",
        uberParent: "LinkedService",
        additionalProperties: { type: { name: "Object" } },
        polymorphicDiscriminator: exports.LinkedService.type.polymorphicDiscriminator,
        modelProperties: Object.assign(Object.assign({}, exports.LinkedService.type.modelProperties), { apiToken: {
                serializedName: "typeProperties.apiToken",
                type: {
                    name: "Composite",
                    className: "SecretBase",
                },
            }, encryptedCredential: {
                serializedName: "typeProperties.encryptedCredential",
                type: {
                    name: "any",
                },
            } }),
    },
};
exports.AmazonS3LinkedService = {
    serializedName: "AmazonS3",
    type: {
        name: "Composite",
        className: "AmazonS3LinkedService",
        uberParent: "LinkedService",
        additionalProperties: { type: { name: "Object" } },
        polymorphicDiscriminator: exports.LinkedService.type.polymorphicDiscriminator,
        modelProperties: Object.assign(Object.assign({}, exports.LinkedService.type.modelProperties), { authenticationType: {
                serializedName: "typeProperties.authenticationType",
                type: {
                    name: "any",
                },
            }, accessKeyId: {
                serializedName: "typeProperties.accessKeyId",
                type: {
                    name: "any",
                },
            }, secretAccessKey: {
                serializedName: "typeProperties.secretAccessKey",
                type: {
                    name: "Composite",
                    className: "SecretBase",
                },
            }, serviceUrl: {
                serializedName: "typeProperties.serviceUrl",
                type: {
                    name: "any",
                },
            }, sessionToken: {
                serializedName: "typeProperties.sessionToken",
                type: {
                    name: "Composite",
                    className: "SecretBase",
                },
            }, encryptedCredential: {
                serializedName: "typeProperties.encryptedCredential",
                type: {
                    name: "any",
                },
            } }),
    },
};
exports.AmazonRedshiftLinkedService = {
    serializedName: "AmazonRedshift",
    type: {
        name: "Composite",
        className: "AmazonRedshiftLinkedService",
        uberParent: "LinkedService",
        additionalProperties: { type: { name: "Object" } },
        polymorphicDiscriminator: exports.LinkedService.type.polymorphicDiscriminator,
        modelProperties: Object.assign(Object.assign({}, exports.LinkedService.type.modelProperties), { server: {
                serializedName: "typeProperties.server",
                required: true,
                type: {
                    name: "any",
                },
            }, username: {
                serializedName: "typeProperties.username",
                type: {
                    name: "any",
                },
            }, password: {
                serializedName: "typeProperties.password",
                type: {
                    name: "Composite",
                    className: "SecretBase",
                },
            }, database: {
                serializedName: "typeProperties.database",
                required: true,
                type: {
                    name: "any",
                },
            }, port: {
                serializedName: "typeProperties.port",
                type: {
                    name: "any",
                },
            }, encryptedCredential: {
                serializedName: "typeProperties.encryptedCredential",
                type: {
                    name: "any",
                },
            } }),
    },
};
exports.CustomDataSourceLinkedService = {
    serializedName: "CustomDataSource",
    type: {
        name: "Composite",
        className: "CustomDataSourceLinkedService",
        uberParent: "LinkedService",
        additionalProperties: { type: { name: "Object" } },
        polymorphicDiscriminator: exports.LinkedService.type.polymorphicDiscriminator,
        modelProperties: Object.assign(Object.assign({}, exports.LinkedService.type.modelProperties), { typeProperties: {
                serializedName: "typeProperties",
                required: true,
                type: {
                    name: "any",
                },
            } }),
    },
};
exports.AzureSearchLinkedService = {
    serializedName: "AzureSearch",
    type: {
        name: "Composite",
        className: "AzureSearchLinkedService",
        uberParent: "LinkedService",
        additionalProperties: { type: { name: "Object" } },
        polymorphicDiscriminator: exports.LinkedService.type.polymorphicDiscriminator,
        modelProperties: Object.assign(Object.assign({}, exports.LinkedService.type.modelProperties), { url: {
                serializedName: "typeProperties.url",
                required: true,
                type: {
                    name: "any",
                },
            }, key: {
                serializedName: "typeProperties.key",
                type: {
                    name: "Composite",
                    className: "SecretBase",
                },
            }, encryptedCredential: {
                serializedName: "typeProperties.encryptedCredential",
                type: {
                    name: "any",
                },
            } }),
    },
};
exports.HttpLinkedService = {
    serializedName: "HttpServer",
    type: {
        name: "Composite",
        className: "HttpLinkedService",
        uberParent: "LinkedService",
        additionalProperties: { type: { name: "Object" } },
        polymorphicDiscriminator: exports.LinkedService.type.polymorphicDiscriminator,
        modelProperties: Object.assign(Object.assign({}, exports.LinkedService.type.modelProperties), { url: {
                serializedName: "typeProperties.url",
                required: true,
                type: {
                    name: "any",
                },
            }, authenticationType: {
                serializedName: "typeProperties.authenticationType",
                type: {
                    name: "String",
                },
            }, userName: {
                serializedName: "typeProperties.userName",
                type: {
                    name: "any",
                },
            }, password: {
                serializedName: "typeProperties.password",
                type: {
                    name: "Composite",
                    className: "SecretBase",
                },
            }, embeddedCertData: {
                serializedName: "typeProperties.embeddedCertData",
                type: {
                    name: "any",
                },
            }, certThumbprint: {
                serializedName: "typeProperties.certThumbprint",
                type: {
                    name: "any",
                },
            }, encryptedCredential: {
                serializedName: "typeProperties.encryptedCredential",
                type: {
                    name: "any",
                },
            }, enableServerCertificateValidation: {
                serializedName: "typeProperties.enableServerCertificateValidation",
                type: {
                    name: "any",
                },
            } }),
    },
};
exports.FtpServerLinkedService = {
    serializedName: "FtpServer",
    type: {
        name: "Composite",
        className: "FtpServerLinkedService",
        uberParent: "LinkedService",
        additionalProperties: { type: { name: "Object" } },
        polymorphicDiscriminator: exports.LinkedService.type.polymorphicDiscriminator,
        modelProperties: Object.assign(Object.assign({}, exports.LinkedService.type.modelProperties), { host: {
                serializedName: "typeProperties.host",
                required: true,
                type: {
                    name: "any",
                },
            }, port: {
                serializedName: "typeProperties.port",
                type: {
                    name: "any",
                },
            }, authenticationType: {
                serializedName: "typeProperties.authenticationType",
                type: {
                    name: "String",
                },
            }, userName: {
                serializedName: "typeProperties.userName",
                type: {
                    name: "any",
                },
            }, password: {
                serializedName: "typeProperties.password",
                type: {
                    name: "Composite",
                    className: "SecretBase",
                },
            }, encryptedCredential: {
                serializedName: "typeProperties.encryptedCredential",
                type: {
                    name: "any",
                },
            }, enableSsl: {
                serializedName: "typeProperties.enableSsl",
                type: {
                    name: "any",
                },
            }, enableServerCertificateValidation: {
                serializedName: "typeProperties.enableServerCertificateValidation",
                type: {
                    name: "any",
                },
            } }),
    },
};
exports.SftpServerLinkedService = {
    serializedName: "Sftp",
    type: {
        name: "Composite",
        className: "SftpServerLinkedService",
        uberParent: "LinkedService",
        additionalProperties: { type: { name: "Object" } },
        polymorphicDiscriminator: exports.LinkedService.type.polymorphicDiscriminator,
        modelProperties: Object.assign(Object.assign({}, exports.LinkedService.type.modelProperties), { host: {
                serializedName: "typeProperties.host",
                required: true,
                type: {
                    name: "any",
                },
            }, port: {
                serializedName: "typeProperties.port",
                type: {
                    name: "any",
                },
            }, authenticationType: {
                serializedName: "typeProperties.authenticationType",
                type: {
                    name: "String",
                },
            }, userName: {
                serializedName: "typeProperties.userName",
                type: {
                    name: "any",
                },
            }, password: {
                serializedName: "typeProperties.password",
                type: {
                    name: "Composite",
                    className: "SecretBase",
                },
            }, encryptedCredential: {
                serializedName: "typeProperties.encryptedCredential",
                type: {
                    name: "any",
                },
            }, privateKeyPath: {
                serializedName: "typeProperties.privateKeyPath",
                type: {
                    name: "any",
                },
            }, privateKeyContent: {
                serializedName: "typeProperties.privateKeyContent",
                type: {
                    name: "Composite",
                    className: "SecretBase",
                },
            }, passPhrase: {
                serializedName: "typeProperties.passPhrase",
                type: {
                    name: "Composite",
                    className: "SecretBase",
                },
            }, skipHostKeyValidation: {
                serializedName: "typeProperties.skipHostKeyValidation",
                type: {
                    name: "any",
                },
            }, hostKeyFingerprint: {
                serializedName: "typeProperties.hostKeyFingerprint",
                type: {
                    name: "any",
                },
            } }),
    },
};
exports.SapBWLinkedService = {
    serializedName: "SapBW",
    type: {
        name: "Composite",
        className: "SapBWLinkedService",
        uberParent: "LinkedService",
        additionalProperties: { type: { name: "Object" } },
        polymorphicDiscriminator: exports.LinkedService.type.polymorphicDiscriminator,
        modelProperties: Object.assign(Object.assign({}, exports.LinkedService.type.modelProperties), { server: {
                serializedName: "typeProperties.server",
                required: true,
                type: {
                    name: "any",
                },
            }, systemNumber: {
                serializedName: "typeProperties.systemNumber",
                required: true,
                type: {
                    name: "any",
                },
            }, clientId: {
                serializedName: "typeProperties.clientId",
                required: true,
                type: {
                    name: "any",
                },
            }, userName: {
                serializedName: "typeProperties.userName",
                type: {
                    name: "any",
                },
            }, password: {
                serializedName: "typeProperties.password",
                type: {
                    name: "Composite",
                    className: "SecretBase",
                },
            }, encryptedCredential: {
                serializedName: "typeProperties.encryptedCredential",
                type: {
                    name: "any",
                },
            } }),
    },
};
exports.SapHanaLinkedService = {
    serializedName: "SapHana",
    type: {
        name: "Composite",
        className: "SapHanaLinkedService",
        uberParent: "LinkedService",
        additionalProperties: { type: { name: "Object" } },
        polymorphicDiscriminator: exports.LinkedService.type.polymorphicDiscriminator,
        modelProperties: Object.assign(Object.assign({}, exports.LinkedService.type.modelProperties), { connectionString: {
                serializedName: "typeProperties.connectionString",
                type: {
                    name: "any",
                },
            }, server: {
                serializedName: "typeProperties.server",
                required: true,
                type: {
                    name: "any",
                },
            }, authenticationType: {
                serializedName: "typeProperties.authenticationType",
                type: {
                    name: "String",
                },
            }, userName: {
                serializedName: "typeProperties.userName",
                type: {
                    name: "any",
                },
            }, password: {
                serializedName: "typeProperties.password",
                type: {
                    name: "Composite",
                    className: "SecretBase",
                },
            }, encryptedCredential: {
                serializedName: "typeProperties.encryptedCredential",
                type: {
                    name: "any",
                },
            } }),
    },
};
exports.AmazonMWSLinkedService = {
    serializedName: "AmazonMWS",
    type: {
        name: "Composite",
        className: "AmazonMWSLinkedService",
        uberParent: "LinkedService",
        additionalProperties: { type: { name: "Object" } },
        polymorphicDiscriminator: exports.LinkedService.type.polymorphicDiscriminator,
        modelProperties: Object.assign(Object.assign({}, exports.LinkedService.type.modelProperties), { endpoint: {
                serializedName: "typeProperties.endpoint",
                required: true,
                type: {
                    name: "any",
                },
            }, marketplaceID: {
                serializedName: "typeProperties.marketplaceID",
                required: true,
                type: {
                    name: "any",
                },
            }, sellerID: {
                serializedName: "typeProperties.sellerID",
                required: true,
                type: {
                    name: "any",
                },
            }, mwsAuthToken: {
                serializedName: "typeProperties.mwsAuthToken",
                type: {
                    name: "Composite",
                    className: "SecretBase",
                },
            }, accessKeyId: {
                serializedName: "typeProperties.accessKeyId",
                required: true,
                type: {
                    name: "any",
                },
            }, secretKey: {
                serializedName: "typeProperties.secretKey",
                type: {
                    name: "Composite",
                    className: "SecretBase",
                },
            }, useEncryptedEndpoints: {
                serializedName: "typeProperties.useEncryptedEndpoints",
                type: {
                    name: "any",
                },
            }, useHostVerification: {
                serializedName: "typeProperties.useHostVerification",
                type: {
                    name: "any",
                },
            }, usePeerVerification: {
                serializedName: "typeProperties.usePeerVerification",
                type: {
                    name: "any",
                },
            }, encryptedCredential: {
                serializedName: "typeProperties.encryptedCredential",
                type: {
                    name: "any",
                },
            } }),
    },
};
exports.AzurePostgreSqlLinkedService = {
    serializedName: "AzurePostgreSql",
    type: {
        name: "Composite",
        className: "AzurePostgreSqlLinkedService",
        uberParent: "LinkedService",
        additionalProperties: { type: { name: "Object" } },
        polymorphicDiscriminator: exports.LinkedService.type.polymorphicDiscriminator,
        modelProperties: Object.assign(Object.assign({}, exports.LinkedService.type.modelProperties), { connectionString: {
                serializedName: "typeProperties.connectionString",
                type: {
                    name: "any",
                },
            }, server: {
                serializedName: "typeProperties.server",
                type: {
                    name: "any",
                },
            }, port: {
                serializedName: "typeProperties.port",
                type: {
                    name: "any",
                },
            }, username: {
                serializedName: "typeProperties.username",
                type: {
                    name: "any",
                },
            }, database: {
                serializedName: "typeProperties.database",
                type: {
                    name: "any",
                },
            }, sslMode: {
                serializedName: "typeProperties.sslMode",
                type: {
                    name: "any",
                },
            }, timeout: {
                serializedName: "typeProperties.timeout",
                type: {
                    name: "any",
                },
            }, commandTimeout: {
                serializedName: "typeProperties.commandTimeout",
                type: {
                    name: "any",
                },
            }, trustServerCertificate: {
                serializedName: "typeProperties.trustServerCertificate",
                type: {
                    name: "any",
                },
            }, readBufferSize: {
                serializedName: "typeProperties.readBufferSize",
                type: {
                    name: "any",
                },
            }, timezone: {
                serializedName: "typeProperties.timezone",
                type: {
                    name: "any",
                },
            }, encoding: {
                serializedName: "typeProperties.encoding",
                type: {
                    name: "any",
                },
            }, password: {
                serializedName: "typeProperties.password",
                type: {
                    name: "Composite",
                    className: "AzureKeyVaultSecretReference",
                },
            }, encryptedCredential: {
                serializedName: "typeProperties.encryptedCredential",
                type: {
                    name: "any",
                },
            }, servicePrincipalId: {
                serializedName: "typeProperties.servicePrincipalId",
                type: {
                    name: "any",
                },
            }, servicePrincipalKey: {
                serializedName: "typeProperties.servicePrincipalKey",
                type: {
                    name: "Composite",
                    className: "SecretBase",
                },
            }, servicePrincipalCredentialType: {
                serializedName: "typeProperties.servicePrincipalCredentialType",
                type: {
                    name: "any",
                },
            }, servicePrincipalEmbeddedCert: {
                serializedName: "typeProperties.servicePrincipalEmbeddedCert",
                type: {
                    name: "Composite",
                    className: "SecretBase",
                },
            }, servicePrincipalEmbeddedCertPassword: {
                serializedName: "typeProperties.servicePrincipalEmbeddedCertPassword",
                type: {
                    name: "Composite",
                    className: "SecretBase",
                },
            }, tenant: {
                serializedName: "typeProperties.tenant",
                type: {
                    name: "any",
                },
            }, azureCloudType: {
                serializedName: "typeProperties.azureCloudType",
                type: {
                    name: "any",
                },
            }, credential: {
                serializedName: "typeProperties.credential",
                type: {
                    name: "Composite",
                    className: "CredentialReference",
                },
            } }),
    },
};
exports.ConcurLinkedService = {
    serializedName: "Concur",
    type: {
        name: "Composite",
        className: "ConcurLinkedService",
        uberParent: "LinkedService",
        additionalProperties: { type: { name: "Object" } },
        polymorphicDiscriminator: exports.LinkedService.type.polymorphicDiscriminator,
        modelProperties: Object.assign(Object.assign({}, exports.LinkedService.type.modelProperties), { connectionProperties: {
                serializedName: "typeProperties.connectionProperties",
                type: {
                    name: "any",
                },
            }, clientId: {
                serializedName: "typeProperties.clientId",
                required: true,
                type: {
                    name: "any",
                },
            }, username: {
                serializedName: "typeProperties.username",
                required: true,
                type: {
                    name: "any",
                },
            }, password: {
                serializedName: "typeProperties.password",
                type: {
                    name: "Composite",
                    className: "SecretBase",
                },
            }, useEncryptedEndpoints: {
                serializedName: "typeProperties.useEncryptedEndpoints",
                type: {
                    name: "any",
                },
            }, useHostVerification: {
                serializedName: "typeProperties.useHostVerification",
                type: {
                    name: "any",
                },
            }, usePeerVerification: {
                serializedName: "typeProperties.usePeerVerification",
                type: {
                    name: "any",
                },
            }, encryptedCredential: {
                serializedName: "typeProperties.encryptedCredential",
                type: {
                    name: "any",
                },
            } }),
    },
};
exports.CouchbaseLinkedService = {
    serializedName: "Couchbase",
    type: {
        name: "Composite",
        className: "CouchbaseLinkedService",
        uberParent: "LinkedService",
        additionalProperties: { type: { name: "Object" } },
        polymorphicDiscriminator: exports.LinkedService.type.polymorphicDiscriminator,
        modelProperties: Object.assign(Object.assign({}, exports.LinkedService.type.modelProperties), { connectionString: {
                serializedName: "typeProperties.connectionString",
                type: {
                    name: "any",
                },
            }, credString: {
                serializedName: "typeProperties.credString",
                type: {
                    name: "Composite",
                    className: "AzureKeyVaultSecretReference",
                },
            }, encryptedCredential: {
                serializedName: "typeProperties.encryptedCredential",
                type: {
                    name: "any",
                },
            } }),
    },
};
exports.DrillLinkedService = {
    serializedName: "Drill",
    type: {
        name: "Composite",
        className: "DrillLinkedService",
        uberParent: "LinkedService",
        additionalProperties: { type: { name: "Object" } },
        polymorphicDiscriminator: exports.LinkedService.type.polymorphicDiscriminator,
        modelProperties: Object.assign(Object.assign({}, exports.LinkedService.type.modelProperties), { connectionString: {
                serializedName: "typeProperties.connectionString",
                type: {
                    name: "any",
                },
            }, pwd: {
                serializedName: "typeProperties.pwd",
                type: {
                    name: "Composite",
                    className: "AzureKeyVaultSecretReference",
                },
            }, encryptedCredential: {
                serializedName: "typeProperties.encryptedCredential",
                type: {
                    name: "any",
                },
            } }),
    },
};
exports.EloquaLinkedService = {
    serializedName: "Eloqua",
    type: {
        name: "Composite",
        className: "EloquaLinkedService",
        uberParent: "LinkedService",
        additionalProperties: { type: { name: "Object" } },
        polymorphicDiscriminator: exports.LinkedService.type.polymorphicDiscriminator,
        modelProperties: Object.assign(Object.assign({}, exports.LinkedService.type.modelProperties), { endpoint: {
                serializedName: "typeProperties.endpoint",
                required: true,
                type: {
                    name: "any",
                },
            }, username: {
                serializedName: "typeProperties.username",
                required: true,
                type: {
                    name: "any",
                },
            }, password: {
                serializedName: "typeProperties.password",
                type: {
                    name: "Composite",
                    className: "SecretBase",
                },
            }, useEncryptedEndpoints: {
                serializedName: "typeProperties.useEncryptedEndpoints",
                type: {
                    name: "any",
                },
            }, useHostVerification: {
                serializedName: "typeProperties.useHostVerification",
                type: {
                    name: "any",
                },
            }, usePeerVerification: {
                serializedName: "typeProperties.usePeerVerification",
                type: {
                    name: "any",
                },
            }, encryptedCredential: {
                serializedName: "typeProperties.encryptedCredential",
                type: {
                    name: "any",
                },
            } }),
    },
};
exports.GoogleBigQueryLinkedService = {
    serializedName: "GoogleBigQuery",
    type: {
        name: "Composite",
        className: "GoogleBigQueryLinkedService",
        uberParent: "LinkedService",
        additionalProperties: { type: { name: "Object" } },
        polymorphicDiscriminator: exports.LinkedService.type.polymorphicDiscriminator,
        modelProperties: Object.assign(Object.assign({}, exports.LinkedService.type.modelProperties), { project: {
                serializedName: "typeProperties.project",
                required: true,
                type: {
                    name: "any",
                },
            }, additionalProjects: {
                serializedName: "typeProperties.additionalProjects",
                type: {
                    name: "any",
                },
            }, requestGoogleDriveScope: {
                serializedName: "typeProperties.requestGoogleDriveScope",
                type: {
                    name: "any",
                },
            }, authenticationType: {
                serializedName: "typeProperties.authenticationType",
                required: true,
                type: {
                    name: "String",
                },
            }, refreshToken: {
                serializedName: "typeProperties.refreshToken",
                type: {
                    name: "Composite",
                    className: "SecretBase",
                },
            }, clientId: {
                serializedName: "typeProperties.clientId",
                type: {
                    name: "any",
                },
            }, clientSecret: {
                serializedName: "typeProperties.clientSecret",
                type: {
                    name: "Composite",
                    className: "SecretBase",
                },
            }, email: {
                serializedName: "typeProperties.email",
                type: {
                    name: "any",
                },
            }, keyFilePath: {
                serializedName: "typeProperties.keyFilePath",
                type: {
                    name: "any",
                },
            }, trustedCertPath: {
                serializedName: "typeProperties.trustedCertPath",
                type: {
                    name: "any",
                },
            }, useSystemTrustStore: {
                serializedName: "typeProperties.useSystemTrustStore",
                type: {
                    name: "any",
                },
            }, encryptedCredential: {
                serializedName: "typeProperties.encryptedCredential",
                type: {
                    name: "any",
                },
            } }),
    },
};
exports.GoogleBigQueryV2LinkedService = {
    serializedName: "GoogleBigQueryV2",
    type: {
        name: "Composite",
        className: "GoogleBigQueryV2LinkedService",
        uberParent: "LinkedService",
        additionalProperties: { type: { name: "Object" } },
        polymorphicDiscriminator: exports.LinkedService.type.polymorphicDiscriminator,
        modelProperties: Object.assign(Object.assign({}, exports.LinkedService.type.modelProperties), { projectId: {
                serializedName: "typeProperties.projectId",
                required: true,
                type: {
                    name: "any",
                },
            }, authenticationType: {
                serializedName: "typeProperties.authenticationType",
                required: true,
                type: {
                    name: "String",
                },
            }, clientId: {
                serializedName: "typeProperties.clientId",
                type: {
                    name: "any",
                },
            }, clientSecret: {
                serializedName: "typeProperties.clientSecret",
                type: {
                    name: "Composite",
                    className: "SecretBase",
                },
            }, refreshToken: {
                serializedName: "typeProperties.refreshToken",
                type: {
                    name: "Composite",
                    className: "SecretBase",
                },
            }, keyFileContent: {
                serializedName: "typeProperties.keyFileContent",
                type: {
                    name: "Composite",
                    className: "SecretBase",
                },
            }, encryptedCredential: {
                serializedName: "typeProperties.encryptedCredential",
                type: {
                    name: "String",
                },
            } }),
    },
};
exports.GreenplumLinkedService = {
    serializedName: "Greenplum",
    type: {
        name: "Composite",
        className: "GreenplumLinkedService",
        uberParent: "LinkedService",
        additionalProperties: { type: { name: "Object" } },
        polymorphicDiscriminator: exports.LinkedService.type.polymorphicDiscriminator,
        modelProperties: Object.assign(Object.assign({}, exports.LinkedService.type.modelProperties), { connectionString: {
                serializedName: "typeProperties.connectionString",
                type: {
                    name: "any",
                },
            }, pwd: {
                serializedName: "typeProperties.pwd",
                type: {
                    name: "Composite",
                    className: "AzureKeyVaultSecretReference",
                },
            }, encryptedCredential: {
                serializedName: "typeProperties.encryptedCredential",
                type: {
                    name: "any",
                },
            }, authenticationType: {
                serializedName: "typeProperties.authenticationType",
                type: {
                    name: "String",
                },
            }, host: {
                serializedName: "typeProperties.host",
                type: {
                    name: "any",
                },
            }, port: {
                serializedName: "typeProperties.port",
                type: {
                    name: "any",
                },
            }, username: {
                serializedName: "typeProperties.username",
                type: {
                    name: "any",
                },
            }, database: {
                serializedName: "typeProperties.database",
                type: {
                    name: "any",
                },
            }, sslMode: {
                serializedName: "typeProperties.sslMode",
                type: {
                    name: "any",
                },
            }, connectionTimeout: {
                serializedName: "typeProperties.connectionTimeout",
                type: {
                    name: "any",
                },
            }, commandTimeout: {
                serializedName: "typeProperties.commandTimeout",
                type: {
                    name: "any",
                },
            }, password: {
                serializedName: "typeProperties.password",
                type: {
                    name: "Composite",
                    className: "SecretBase",
                },
            } }),
    },
};
exports.HBaseLinkedService = {
    serializedName: "HBase",
    type: {
        name: "Composite",
        className: "HBaseLinkedService",
        uberParent: "LinkedService",
        additionalProperties: { type: { name: "Object" } },
        polymorphicDiscriminator: exports.LinkedService.type.polymorphicDiscriminator,
        modelProperties: Object.assign(Object.assign({}, exports.LinkedService.type.modelProperties), { host: {
                serializedName: "typeProperties.host",
                required: true,
                type: {
                    name: "any",
                },
            }, port: {
                serializedName: "typeProperties.port",
                type: {
                    name: "any",
                },
            }, httpPath: {
                serializedName: "typeProperties.httpPath",
                type: {
                    name: "any",
                },
            }, authenticationType: {
                serializedName: "typeProperties.authenticationType",
                required: true,
                type: {
                    name: "String",
                },
            }, username: {
                serializedName: "typeProperties.username",
                type: {
                    name: "any",
                },
            }, password: {
                serializedName: "typeProperties.password",
                type: {
                    name: "Composite",
                    className: "SecretBase",
                },
            }, enableSsl: {
                serializedName: "typeProperties.enableSsl",
                type: {
                    name: "any",
                },
            }, trustedCertPath: {
                serializedName: "typeProperties.trustedCertPath",
                type: {
                    name: "any",
                },
            }, allowHostNameCNMismatch: {
                serializedName: "typeProperties.allowHostNameCNMismatch",
                type: {
                    name: "any",
                },
            }, allowSelfSignedServerCert: {
                serializedName: "typeProperties.allowSelfSignedServerCert",
                type: {
                    name: "any",
                },
            }, encryptedCredential: {
                serializedName: "typeProperties.encryptedCredential",
                type: {
                    name: "any",
                },
            } }),
    },
};
exports.HiveLinkedService = {
    serializedName: "Hive",
    type: {
        name: "Composite",
        className: "HiveLinkedService",
        uberParent: "LinkedService",
        additionalProperties: { type: { name: "Object" } },
        polymorphicDiscriminator: exports.LinkedService.type.polymorphicDiscriminator,
        modelProperties: Object.assign(Object.assign({}, exports.LinkedService.type.modelProperties), { host: {
                serializedName: "typeProperties.host",
                required: true,
                type: {
                    name: "any",
                },
            }, port: {
                serializedName: "typeProperties.port",
                type: {
                    name: "any",
                },
            }, serverType: {
                serializedName: "typeProperties.serverType",
                type: {
                    name: "String",
                },
            }, thriftTransportProtocol: {
                serializedName: "typeProperties.thriftTransportProtocol",
                type: {
                    name: "String",
                },
            }, authenticationType: {
                serializedName: "typeProperties.authenticationType",
                required: true,
                type: {
                    name: "String",
                },
            }, serviceDiscoveryMode: {
                serializedName: "typeProperties.serviceDiscoveryMode",
                type: {
                    name: "any",
                },
            }, zooKeeperNameSpace: {
                serializedName: "typeProperties.zooKeeperNameSpace",
                type: {
                    name: "any",
                },
            }, useNativeQuery: {
                serializedName: "typeProperties.useNativeQuery",
                type: {
                    name: "any",
                },
            }, username: {
                serializedName: "typeProperties.username",
                type: {
                    name: "any",
                },
            }, password: {
                serializedName: "typeProperties.password",
                type: {
                    name: "Composite",
                    className: "SecretBase",
                },
            }, httpPath: {
                serializedName: "typeProperties.httpPath",
                type: {
                    name: "any",
                },
            }, enableSsl: {
                serializedName: "typeProperties.enableSsl",
                type: {
                    name: "any",
                },
            }, trustedCertPath: {
                serializedName: "typeProperties.trustedCertPath",
                type: {
                    name: "any",
                },
            }, useSystemTrustStore: {
                serializedName: "typeProperties.useSystemTrustStore",
                type: {
                    name: "any",
                },
            }, allowHostNameCNMismatch: {
                serializedName: "typeProperties.allowHostNameCNMismatch",
                type: {
                    name: "any",
                },
            }, allowSelfSignedServerCert: {
                serializedName: "typeProperties.allowSelfSignedServerCert",
                type: {
                    name: "any",
                },
            }, encryptedCredential: {
                serializedName: "typeProperties.encryptedCredential",
                type: {
                    name: "any",
                },
            } }),
    },
};
exports.HubspotLinkedService = {
    serializedName: "Hubspot",
    type: {
        name: "Composite",
        className: "HubspotLinkedService",
        uberParent: "LinkedService",
        additionalProperties: { type: { name: "Object" } },
        polymorphicDiscriminator: exports.LinkedService.type.polymorphicDiscriminator,
        modelProperties: Object.assign(Object.assign({}, exports.LinkedService.type.modelProperties), { clientId: {
                serializedName: "typeProperties.clientId",
                required: true,
                type: {
                    name: "any",
                },
            }, clientSecret: {
                serializedName: "typeProperties.clientSecret",
                type: {
                    name: "Composite",
                    className: "SecretBase",
                },
            }, accessToken: {
                serializedName: "typeProperties.accessToken",
                type: {
                    name: "Composite",
                    className: "SecretBase",
                },
            }, refreshToken: {
                serializedName: "typeProperties.refreshToken",
                type: {
                    name: "Composite",
                    className: "SecretBase",
                },
            }, useEncryptedEndpoints: {
                serializedName: "typeProperties.useEncryptedEndpoints",
                type: {
                    name: "any",
                },
            }, useHostVerification: {
                serializedName: "typeProperties.useHostVerification",
                type: {
                    name: "any",
                },
            }, usePeerVerification: {
                serializedName: "typeProperties.usePeerVerification",
                type: {
                    name: "any",
                },
            }, encryptedCredential: {
                serializedName: "typeProperties.encryptedCredential",
                type: {
                    name: "any",
                },
            } }),
    },
};
exports.ImpalaLinkedService = {
    serializedName: "Impala",
    type: {
        name: "Composite",
        className: "ImpalaLinkedService",
        uberParent: "LinkedService",
        additionalProperties: { type: { name: "Object" } },
        polymorphicDiscriminator: exports.LinkedService.type.polymorphicDiscriminator,
        modelProperties: Object.assign(Object.assign({}, exports.LinkedService.type.modelProperties), { host: {
                serializedName: "typeProperties.host",
                required: true,
                type: {
                    name: "any",
                },
            }, port: {
                serializedName: "typeProperties.port",
                type: {
                    name: "any",
                },
            }, authenticationType: {
                serializedName: "typeProperties.authenticationType",
                required: true,
                type: {
                    name: "String",
                },
            }, username: {
                serializedName: "typeProperties.username",
                type: {
                    name: "any",
                },
            }, password: {
                serializedName: "typeProperties.password",
                type: {
                    name: "Composite",
                    className: "SecretBase",
                },
            }, enableSsl: {
                serializedName: "typeProperties.enableSsl",
                type: {
                    name: "any",
                },
            }, trustedCertPath: {
                serializedName: "typeProperties.trustedCertPath",
                type: {
                    name: "any",
                },
            }, useSystemTrustStore: {
                serializedName: "typeProperties.useSystemTrustStore",
                type: {
                    name: "any",
                },
            }, allowHostNameCNMismatch: {
                serializedName: "typeProperties.allowHostNameCNMismatch",
                type: {
                    name: "any",
                },
            }, allowSelfSignedServerCert: {
                serializedName: "typeProperties.allowSelfSignedServerCert",
                type: {
                    name: "any",
                },
            }, encryptedCredential: {
                serializedName: "typeProperties.encryptedCredential",
                type: {
                    name: "any",
                },
            } }),
    },
};
exports.JiraLinkedService = {
    serializedName: "Jira",
    type: {
        name: "Composite",
        className: "JiraLinkedService",
        uberParent: "LinkedService",
        additionalProperties: { type: { name: "Object" } },
        polymorphicDiscriminator: exports.LinkedService.type.polymorphicDiscriminator,
        modelProperties: Object.assign(Object.assign({}, exports.LinkedService.type.modelProperties), { host: {
                serializedName: "typeProperties.host",
                required: true,
                type: {
                    name: "any",
                },
            }, port: {
                serializedName: "typeProperties.port",
                type: {
                    name: "any",
                },
            }, username: {
                serializedName: "typeProperties.username",
                required: true,
                type: {
                    name: "any",
                },
            }, password: {
                serializedName: "typeProperties.password",
                type: {
                    name: "Composite",
                    className: "SecretBase",
                },
            }, useEncryptedEndpoints: {
                serializedName: "typeProperties.useEncryptedEndpoints",
                type: {
                    name: "any",
                },
            }, useHostVerification: {
                serializedName: "typeProperties.useHostVerification",
                type: {
                    name: "any",
                },
            }, usePeerVerification: {
                serializedName: "typeProperties.usePeerVerification",
                type: {
                    name: "any",
                },
            }, encryptedCredential: {
                serializedName: "typeProperties.encryptedCredential",
                type: {
                    name: "any",
                },
            } }),
    },
};
exports.MagentoLinkedService = {
    serializedName: "Magento",
    type: {
        name: "Composite",
        className: "MagentoLinkedService",
        uberParent: "LinkedService",
        additionalProperties: { type: { name: "Object" } },
        polymorphicDiscriminator: exports.LinkedService.type.polymorphicDiscriminator,
        modelProperties: Object.assign(Object.assign({}, exports.LinkedService.type.modelProperties), { host: {
                serializedName: "typeProperties.host",
                required: true,
                type: {
                    name: "any",
                },
            }, accessToken: {
                serializedName: "typeProperties.accessToken",
                type: {
                    name: "Composite",
                    className: "SecretBase",
                },
            }, useEncryptedEndpoints: {
                serializedName: "typeProperties.useEncryptedEndpoints",
                type: {
                    name: "any",
                },
            }, useHostVerification: {
                serializedName: "typeProperties.useHostVerification",
                type: {
                    name: "any",
                },
            }, usePeerVerification: {
                serializedName: "typeProperties.usePeerVerification",
                type: {
                    name: "any",
                },
            }, encryptedCredential: {
                serializedName: "typeProperties.encryptedCredential",
                type: {
                    name: "any",
                },
            } }),
    },
};
exports.MariaDBLinkedService = {
    serializedName: "MariaDB",
    type: {
        name: "Composite",
        className: "MariaDBLinkedService",
        uberParent: "LinkedService",
        additionalProperties: { type: { name: "Object" } },
        polymorphicDiscriminator: exports.LinkedService.type.polymorphicDiscriminator,
        modelProperties: Object.assign(Object.assign({}, exports.LinkedService.type.modelProperties), { driverVersion: {
                serializedName: "typeProperties.driverVersion",
                type: {
                    name: "any",
                },
            }, connectionString: {
                serializedName: "typeProperties.connectionString",
                type: {
                    name: "any",
                },
            }, server: {
                serializedName: "typeProperties.server",
                type: {
                    name: "any",
                },
            }, port: {
                serializedName: "typeProperties.port",
                type: {
                    name: "any",
                },
            }, username: {
                serializedName: "typeProperties.username",
                type: {
                    name: "any",
                },
            }, database: {
                serializedName: "typeProperties.database",
                type: {
                    name: "any",
                },
            }, sslMode: {
                serializedName: "typeProperties.sslMode",
                type: {
                    name: "any",
                },
            }, useSystemTrustStore: {
                serializedName: "typeProperties.useSystemTrustStore",
                type: {
                    name: "any",
                },
            }, password: {
                serializedName: "typeProperties.password",
                type: {
                    name: "Composite",
                    className: "AzureKeyVaultSecretReference",
                },
            }, encryptedCredential: {
                serializedName: "typeProperties.encryptedCredential",
                type: {
                    name: "any",
                },
            } }),
    },
};
exports.AzureMariaDBLinkedService = {
    serializedName: "AzureMariaDB",
    type: {
        name: "Composite",
        className: "AzureMariaDBLinkedService",
        uberParent: "LinkedService",
        additionalProperties: { type: { name: "Object" } },
        polymorphicDiscriminator: exports.LinkedService.type.polymorphicDiscriminator,
        modelProperties: Object.assign(Object.assign({}, exports.LinkedService.type.modelProperties), { connectionString: {
                serializedName: "typeProperties.connectionString",
                type: {
                    name: "any",
                },
            }, pwd: {
                serializedName: "typeProperties.pwd",
                type: {
                    name: "Composite",
                    className: "AzureKeyVaultSecretReference",
                },
            }, encryptedCredential: {
                serializedName: "typeProperties.encryptedCredential",
                type: {
                    name: "any",
                },
            } }),
    },
};
exports.MarketoLinkedService = {
    serializedName: "Marketo",
    type: {
        name: "Composite",
        className: "MarketoLinkedService",
        uberParent: "LinkedService",
        additionalProperties: { type: { name: "Object" } },
        polymorphicDiscriminator: exports.LinkedService.type.polymorphicDiscriminator,
        modelProperties: Object.assign(Object.assign({}, exports.LinkedService.type.modelProperties), { endpoint: {
                serializedName: "typeProperties.endpoint",
                required: true,
                type: {
                    name: "any",
                },
            }, clientId: {
                serializedName: "typeProperties.clientId",
                required: true,
                type: {
                    name: "any",
                },
            }, clientSecret: {
                serializedName: "typeProperties.clientSecret",
                type: {
                    name: "Composite",
                    className: "SecretBase",
                },
            }, useEncryptedEndpoints: {
                serializedName: "typeProperties.useEncryptedEndpoints",
                type: {
                    name: "any",
                },
            }, useHostVerification: {
                serializedName: "typeProperties.useHostVerification",
                type: {
                    name: "any",
                },
            }, usePeerVerification: {
                serializedName: "typeProperties.usePeerVerification",
                type: {
                    name: "any",
                },
            }, encryptedCredential: {
                serializedName: "typeProperties.encryptedCredential",
                type: {
                    name: "any",
                },
            } }),
    },
};
exports.PaypalLinkedService = {
    serializedName: "Paypal",
    type: {
        name: "Composite",
        className: "PaypalLinkedService",
        uberParent: "LinkedService",
        additionalProperties: { type: { name: "Object" } },
        polymorphicDiscriminator: exports.LinkedService.type.polymorphicDiscriminator,
        modelProperties: Object.assign(Object.assign({}, exports.LinkedService.type.modelProperties), { host: {
                serializedName: "typeProperties.host",
                required: true,
                type: {
                    name: "any",
                },
            }, clientId: {
                serializedName: "typeProperties.clientId",
                required: true,
                type: {
                    name: "any",
                },
            }, clientSecret: {
                serializedName: "typeProperties.clientSecret",
                type: {
                    name: "Composite",
                    className: "SecretBase",
                },
            }, useEncryptedEndpoints: {
                serializedName: "typeProperties.useEncryptedEndpoints",
                type: {
                    name: "any",
                },
            }, useHostVerification: {
                serializedName: "typeProperties.useHostVerification",
                type: {
                    name: "any",
                },
            }, usePeerVerification: {
                serializedName: "typeProperties.usePeerVerification",
                type: {
                    name: "any",
                },
            }, encryptedCredential: {
                serializedName: "typeProperties.encryptedCredential",
                type: {
                    name: "any",
                },
            } }),
    },
};
exports.PhoenixLinkedService = {
    serializedName: "Phoenix",
    type: {
        name: "Composite",
        className: "PhoenixLinkedService",
        uberParent: "LinkedService",
        additionalProperties: { type: { name: "Object" } },
        polymorphicDiscriminator: exports.LinkedService.type.polymorphicDiscriminator,
        modelProperties: Object.assign(Object.assign({}, exports.LinkedService.type.modelProperties), { host: {
                serializedName: "typeProperties.host",
                required: true,
                type: {
                    name: "any",
                },
            }, port: {
                serializedName: "typeProperties.port",
                type: {
                    name: "any",
                },
            }, httpPath: {
                serializedName: "typeProperties.httpPath",
                type: {
                    name: "any",
                },
            }, authenticationType: {
                serializedName: "typeProperties.authenticationType",
                required: true,
                type: {
                    name: "String",
                },
            }, username: {
                serializedName: "typeProperties.username",
                type: {
                    name: "any",
                },
            }, password: {
                serializedName: "typeProperties.password",
                type: {
                    name: "Composite",
                    className: "SecretBase",
                },
            }, enableSsl: {
                serializedName: "typeProperties.enableSsl",
                type: {
                    name: "any",
                },
            }, trustedCertPath: {
                serializedName: "typeProperties.trustedCertPath",
                type: {
                    name: "any",
                },
            }, useSystemTrustStore: {
                serializedName: "typeProperties.useSystemTrustStore",
                type: {
                    name: "any",
                },
            }, allowHostNameCNMismatch: {
                serializedName: "typeProperties.allowHostNameCNMismatch",
                type: {
                    name: "any",
                },
            }, allowSelfSignedServerCert: {
                serializedName: "typeProperties.allowSelfSignedServerCert",
                type: {
                    name: "any",
                },
            }, encryptedCredential: {
                serializedName: "typeProperties.encryptedCredential",
                type: {
                    name: "any",
                },
            } }),
    },
};
exports.PrestoLinkedService = {
    serializedName: "Presto",
    type: {
        name: "Composite",
        className: "PrestoLinkedService",
        uberParent: "LinkedService",
        additionalProperties: { type: { name: "Object" } },
        polymorphicDiscriminator: exports.LinkedService.type.polymorphicDiscriminator,
        modelProperties: Object.assign(Object.assign({}, exports.LinkedService.type.modelProperties), { host: {
                serializedName: "typeProperties.host",
                required: true,
                type: {
                    name: "any",
                },
            }, serverVersion: {
                serializedName: "typeProperties.serverVersion",
                required: true,
                type: {
                    name: "any",
                },
            }, catalog: {
                serializedName: "typeProperties.catalog",
                required: true,
                type: {
                    name: "any",
                },
            }, port: {
                serializedName: "typeProperties.port",
                type: {
                    name: "any",
                },
            }, authenticationType: {
                serializedName: "typeProperties.authenticationType",
                required: true,
                type: {
                    name: "String",
                },
            }, username: {
                serializedName: "typeProperties.username",
                type: {
                    name: "any",
                },
            }, password: {
                serializedName: "typeProperties.password",
                type: {
                    name: "Composite",
                    className: "SecretBase",
                },
            }, enableSsl: {
                serializedName: "typeProperties.enableSsl",
                type: {
                    name: "any",
                },
            }, trustedCertPath: {
                serializedName: "typeProperties.trustedCertPath",
                type: {
                    name: "any",
                },
            }, useSystemTrustStore: {
                serializedName: "typeProperties.useSystemTrustStore",
                type: {
                    name: "any",
                },
            }, allowHostNameCNMismatch: {
                serializedName: "typeProperties.allowHostNameCNMismatch",
                type: {
                    name: "any",
                },
            }, allowSelfSignedServerCert: {
                serializedName: "typeProperties.allowSelfSignedServerCert",
                type: {
                    name: "any",
                },
            }, timeZoneID: {
                serializedName: "typeProperties.timeZoneID",
                type: {
                    name: "any",
                },
            }, encryptedCredential: {
                serializedName: "typeProperties.encryptedCredential",
                type: {
                    name: "any",
                },
            } }),
    },
};
exports.QuickBooksLinkedService = {
    serializedName: "QuickBooks",
    type: {
        name: "Composite",
        className: "QuickBooksLinkedService",
        uberParent: "LinkedService",
        additionalProperties: { type: { name: "Object" } },
        polymorphicDiscriminator: exports.LinkedService.type.polymorphicDiscriminator,
        modelProperties: Object.assign(Object.assign({}, exports.LinkedService.type.modelProperties), { connectionProperties: {
                serializedName: "typeProperties.connectionProperties",
                type: {
                    name: "any",
                },
            }, endpoint: {
                serializedName: "typeProperties.endpoint",
                required: true,
                type: {
                    name: "any",
                },
            }, companyId: {
                serializedName: "typeProperties.companyId",
                required: true,
                type: {
                    name: "any",
                },
            }, consumerKey: {
                serializedName: "typeProperties.consumerKey",
                required: true,
                type: {
                    name: "any",
                },
            }, consumerSecret: {
                serializedName: "typeProperties.consumerSecret",
                type: {
                    name: "Composite",
                    className: "SecretBase",
                },
            }, accessToken: {
                serializedName: "typeProperties.accessToken",
                type: {
                    name: "Composite",
                    className: "SecretBase",
                },
            }, accessTokenSecret: {
                serializedName: "typeProperties.accessTokenSecret",
                type: {
                    name: "Composite",
                    className: "SecretBase",
                },
            }, useEncryptedEndpoints: {
                serializedName: "typeProperties.useEncryptedEndpoints",
                type: {
                    name: "any",
                },
            }, encryptedCredential: {
                serializedName: "typeProperties.encryptedCredential",
                type: {
                    name: "any",
                },
            } }),
    },
};
exports.ServiceNowLinkedService = {
    serializedName: "ServiceNow",
    type: {
        name: "Composite",
        className: "ServiceNowLinkedService",
        uberParent: "LinkedService",
        additionalProperties: { type: { name: "Object" } },
        polymorphicDiscriminator: exports.LinkedService.type.polymorphicDiscriminator,
        modelProperties: Object.assign(Object.assign({}, exports.LinkedService.type.modelProperties), { endpoint: {
                serializedName: "typeProperties.endpoint",
                required: true,
                type: {
                    name: "any",
                },
            }, authenticationType: {
                serializedName: "typeProperties.authenticationType",
                required: true,
                type: {
                    name: "String",
                },
            }, username: {
                serializedName: "typeProperties.username",
                type: {
                    name: "any",
                },
            }, password: {
                serializedName: "typeProperties.password",
                type: {
                    name: "Composite",
                    className: "SecretBase",
                },
            }, clientId: {
                serializedName: "typeProperties.clientId",
                type: {
                    name: "any",
                },
            }, clientSecret: {
                serializedName: "typeProperties.clientSecret",
                type: {
                    name: "Composite",
                    className: "SecretBase",
                },
            }, useEncryptedEndpoints: {
                serializedName: "typeProperties.useEncryptedEndpoints",
                type: {
                    name: "any",
                },
            }, useHostVerification: {
                serializedName: "typeProperties.useHostVerification",
                type: {
                    name: "any",
                },
            }, usePeerVerification: {
                serializedName: "typeProperties.usePeerVerification",
                type: {
                    name: "any",
                },
            }, encryptedCredential: {
                serializedName: "typeProperties.encryptedCredential",
                type: {
                    name: "any",
                },
            } }),
    },
};
exports.ShopifyLinkedService = {
    serializedName: "Shopify",
    type: {
        name: "Composite",
        className: "ShopifyLinkedService",
        uberParent: "LinkedService",
        additionalProperties: { type: { name: "Object" } },
        polymorphicDiscriminator: exports.LinkedService.type.polymorphicDiscriminator,
        modelProperties: Object.assign(Object.assign({}, exports.LinkedService.type.modelProperties), { host: {
                serializedName: "typeProperties.host",
                required: true,
                type: {
                    name: "any",
                },
            }, accessToken: {
                serializedName: "typeProperties.accessToken",
                type: {
                    name: "Composite",
                    className: "SecretBase",
                },
            }, useEncryptedEndpoints: {
                serializedName: "typeProperties.useEncryptedEndpoints",
                type: {
                    name: "any",
                },
            }, useHostVerification: {
                serializedName: "typeProperties.useHostVerification",
                type: {
                    name: "any",
                },
            }, usePeerVerification: {
                serializedName: "typeProperties.usePeerVerification",
                type: {
                    name: "any",
                },
            }, encryptedCredential: {
                serializedName: "typeProperties.encryptedCredential",
                type: {
                    name: "any",
                },
            } }),
    },
};
exports.SparkLinkedService = {
    serializedName: "Spark",
    type: {
        name: "Composite",
        className: "SparkLinkedService",
        uberParent: "LinkedService",
        additionalProperties: { type: { name: "Object" } },
        polymorphicDiscriminator: exports.LinkedService.type.polymorphicDiscriminator,
        modelProperties: Object.assign(Object.assign({}, exports.LinkedService.type.modelProperties), { host: {
                serializedName: "typeProperties.host",
                required: true,
                type: {
                    name: "any",
                },
            }, port: {
                serializedName: "typeProperties.port",
                required: true,
                type: {
                    name: "any",
                },
            }, serverType: {
                serializedName: "typeProperties.serverType",
                type: {
                    name: "String",
                },
            }, thriftTransportProtocol: {
                serializedName: "typeProperties.thriftTransportProtocol",
                type: {
                    name: "String",
                },
            }, authenticationType: {
                serializedName: "typeProperties.authenticationType",
                required: true,
                type: {
                    name: "String",
                },
            }, username: {
                serializedName: "typeProperties.username",
                type: {
                    name: "any",
                },
            }, password: {
                serializedName: "typeProperties.password",
                type: {
                    name: "Composite",
                    className: "SecretBase",
                },
            }, httpPath: {
                serializedName: "typeProperties.httpPath",
                type: {
                    name: "any",
                },
            }, enableSsl: {
                serializedName: "typeProperties.enableSsl",
                type: {
                    name: "any",
                },
            }, trustedCertPath: {
                serializedName: "typeProperties.trustedCertPath",
                type: {
                    name: "any",
                },
            }, useSystemTrustStore: {
                serializedName: "typeProperties.useSystemTrustStore",
                type: {
                    name: "any",
                },
            }, allowHostNameCNMismatch: {
                serializedName: "typeProperties.allowHostNameCNMismatch",
                type: {
                    name: "any",
                },
            }, allowSelfSignedServerCert: {
                serializedName: "typeProperties.allowSelfSignedServerCert",
                type: {
                    name: "any",
                },
            }, encryptedCredential: {
                serializedName: "typeProperties.encryptedCredential",
                type: {
                    name: "any",
                },
            } }),
    },
};
exports.SquareLinkedService = {
    serializedName: "Square",
    type: {
        name: "Composite",
        className: "SquareLinkedService",
        uberParent: "LinkedService",
        additionalProperties: { type: { name: "Object" } },
        polymorphicDiscriminator: exports.LinkedService.type.polymorphicDiscriminator,
        modelProperties: Object.assign(Object.assign({}, exports.LinkedService.type.modelProperties), { connectionProperties: {
                serializedName: "typeProperties.connectionProperties",
                type: {
                    name: "any",
                },
            }, host: {
                serializedName: "typeProperties.host",
                required: true,
                type: {
                    name: "any",
                },
            }, clientId: {
                serializedName: "typeProperties.clientId",
                required: true,
                type: {
                    name: "any",
                },
            }, clientSecret: {
                serializedName: "typeProperties.clientSecret",
                type: {
                    name: "Composite",
                    className: "SecretBase",
                },
            }, redirectUri: {
                serializedName: "typeProperties.redirectUri",
                required: true,
                type: {
                    name: "any",
                },
            }, useEncryptedEndpoints: {
                serializedName: "typeProperties.useEncryptedEndpoints",
                type: {
                    name: "any",
                },
            }, useHostVerification: {
                serializedName: "typeProperties.useHostVerification",
                type: {
                    name: "any",
                },
            }, usePeerVerification: {
                serializedName: "typeProperties.usePeerVerification",
                type: {
                    name: "any",
                },
            }, encryptedCredential: {
                serializedName: "typeProperties.encryptedCredential",
                type: {
                    name: "any",
                },
            } }),
    },
};
exports.XeroLinkedService = {
    serializedName: "Xero",
    type: {
        name: "Composite",
        className: "XeroLinkedService",
        uberParent: "LinkedService",
        additionalProperties: { type: { name: "Object" } },
        polymorphicDiscriminator: exports.LinkedService.type.polymorphicDiscriminator,
        modelProperties: Object.assign(Object.assign({}, exports.LinkedService.type.modelProperties), { connectionProperties: {
                serializedName: "typeProperties.connectionProperties",
                type: {
                    name: "any",
                },
            }, host: {
                serializedName: "typeProperties.host",
                required: true,
                type: {
                    name: "any",
                },
            }, consumerKey: {
                serializedName: "typeProperties.consumerKey",
                type: {
                    name: "Composite",
                    className: "SecretBase",
                },
            }, privateKey: {
                serializedName: "typeProperties.privateKey",
                type: {
                    name: "Composite",
                    className: "SecretBase",
                },
            }, useEncryptedEndpoints: {
                serializedName: "typeProperties.useEncryptedEndpoints",
                type: {
                    name: "any",
                },
            }, useHostVerification: {
                serializedName: "typeProperties.useHostVerification",
                type: {
                    name: "any",
                },
            }, usePeerVerification: {
                serializedName: "typeProperties.usePeerVerification",
                type: {
                    name: "any",
                },
            }, encryptedCredential: {
                serializedName: "typeProperties.encryptedCredential",
                type: {
                    name: "any",
                },
            } }),
    },
};
exports.ZohoLinkedService = {
    serializedName: "Zoho",
    type: {
        name: "Composite",
        className: "ZohoLinkedService",
        uberParent: "LinkedService",
        additionalProperties: { type: { name: "Object" } },
        polymorphicDiscriminator: exports.LinkedService.type.polymorphicDiscriminator,
        modelProperties: Object.assign(Object.assign({}, exports.LinkedService.type.modelProperties), { connectionProperties: {
                serializedName: "typeProperties.connectionProperties",
                type: {
                    name: "any",
                },
            }, endpoint: {
                serializedName: "typeProperties.endpoint",
                required: true,
                type: {
                    name: "any",
                },
            }, accessToken: {
                serializedName: "typeProperties.accessToken",
                type: {
                    name: "Composite",
                    className: "SecretBase",
                },
            }, useEncryptedEndpoints: {
                serializedName: "typeProperties.useEncryptedEndpoints",
                type: {
                    name: "any",
                },
            }, useHostVerification: {
                serializedName: "typeProperties.useHostVerification",
                type: {
                    name: "any",
                },
            }, usePeerVerification: {
                serializedName: "typeProperties.usePeerVerification",
                type: {
                    name: "any",
                },
            }, encryptedCredential: {
                serializedName: "typeProperties.encryptedCredential",
                type: {
                    name: "any",
                },
            } }),
    },
};
exports.VerticaLinkedService = {
    serializedName: "Vertica",
    type: {
        name: "Composite",
        className: "VerticaLinkedService",
        uberParent: "LinkedService",
        additionalProperties: { type: { name: "Object" } },
        polymorphicDiscriminator: exports.LinkedService.type.polymorphicDiscriminator,
        modelProperties: Object.assign(Object.assign({}, exports.LinkedService.type.modelProperties), { connectionString: {
                serializedName: "typeProperties.connectionString",
                type: {
                    name: "any",
                },
            }, server: {
                serializedName: "typeProperties.server",
                type: {
                    name: "any",
                },
            }, port: {
                serializedName: "typeProperties.port",
                type: {
                    name: "any",
                },
            }, uid: {
                serializedName: "typeProperties.uid",
                type: {
                    name: "any",
                },
            }, database: {
                serializedName: "typeProperties.database",
                type: {
                    name: "any",
                },
            }, pwd: {
                serializedName: "typeProperties.pwd",
                type: {
                    name: "Composite",
                    className: "AzureKeyVaultSecretReference",
                },
            }, encryptedCredential: {
                serializedName: "typeProperties.encryptedCredential",
                type: {
                    name: "any",
                },
            } }),
    },
};
exports.NetezzaLinkedService = {
    serializedName: "Netezza",
    type: {
        name: "Composite",
        className: "NetezzaLinkedService",
        uberParent: "LinkedService",
        additionalProperties: { type: { name: "Object" } },
        polymorphicDiscriminator: exports.LinkedService.type.polymorphicDiscriminator,
        modelProperties: Object.assign(Object.assign({}, exports.LinkedService.type.modelProperties), { connectionString: {
                serializedName: "typeProperties.connectionString",
                type: {
                    name: "any",
                },
            }, pwd: {
                serializedName: "typeProperties.pwd",
                type: {
                    name: "Composite",
                    className: "AzureKeyVaultSecretReference",
                },
            }, encryptedCredential: {
                serializedName: "typeProperties.encryptedCredential",
                type: {
                    name: "any",
                },
            } }),
    },
};
exports.SalesforceMarketingCloudLinkedService = {
    serializedName: "SalesforceMarketingCloud",
    type: {
        name: "Composite",
        className: "SalesforceMarketingCloudLinkedService",
        uberParent: "LinkedService",
        additionalProperties: { type: { name: "Object" } },
        polymorphicDiscriminator: exports.LinkedService.type.polymorphicDiscriminator,
        modelProperties: Object.assign(Object.assign({}, exports.LinkedService.type.modelProperties), { connectionProperties: {
                serializedName: "typeProperties.connectionProperties",
                type: {
                    name: "any",
                },
            }, clientId: {
                serializedName: "typeProperties.clientId",
                required: true,
                type: {
                    name: "any",
                },
            }, clientSecret: {
                serializedName: "typeProperties.clientSecret",
                type: {
                    name: "Composite",
                    className: "SecretBase",
                },
            }, useEncryptedEndpoints: {
                serializedName: "typeProperties.useEncryptedEndpoints",
                type: {
                    name: "any",
                },
            }, useHostVerification: {
                serializedName: "typeProperties.useHostVerification",
                type: {
                    name: "any",
                },
            }, usePeerVerification: {
                serializedName: "typeProperties.usePeerVerification",
                type: {
                    name: "any",
                },
            }, encryptedCredential: {
                serializedName: "typeProperties.encryptedCredential",
                type: {
                    name: "any",
                },
            } }),
    },
};
exports.HDInsightOnDemandLinkedService = {
    serializedName: "HDInsightOnDemand",
    type: {
        name: "Composite",
        className: "HDInsightOnDemandLinkedService",
        uberParent: "LinkedService",
        additionalProperties: { type: { name: "Object" } },
        polymorphicDiscriminator: exports.LinkedService.type.polymorphicDiscriminator,
        modelProperties: Object.assign(Object.assign({}, exports.LinkedService.type.modelProperties), { clusterSize: {
                serializedName: "typeProperties.clusterSize",
                required: true,
                type: {
                    name: "any",
                },
            }, timeToLive: {
                serializedName: "typeProperties.timeToLive",
                required: true,
                type: {
                    name: "any",
                },
            }, versionTypePropertiesVersion: {
                serializedName: "typeProperties.version",
                required: true,
                type: {
                    name: "any",
                },
            }, linkedServiceName: {
                serializedName: "typeProperties.linkedServiceName",
                type: {
                    name: "Composite",
                    className: "LinkedServiceReference",
                },
            }, hostSubscriptionId: {
                serializedName: "typeProperties.hostSubscriptionId",
                required: true,
                type: {
                    name: "any",
                },
            }, servicePrincipalId: {
                serializedName: "typeProperties.servicePrincipalId",
                type: {
                    name: "any",
                },
            }, servicePrincipalKey: {
                serializedName: "typeProperties.servicePrincipalKey",
                type: {
                    name: "Composite",
                    className: "SecretBase",
                },
            }, tenant: {
                serializedName: "typeProperties.tenant",
                required: true,
                type: {
                    name: "any",
                },
            }, clusterResourceGroup: {
                serializedName: "typeProperties.clusterResourceGroup",
                required: true,
                type: {
                    name: "any",
                },
            }, clusterNamePrefix: {
                serializedName: "typeProperties.clusterNamePrefix",
                type: {
                    name: "any",
                },
            }, clusterUserName: {
                serializedName: "typeProperties.clusterUserName",
                type: {
                    name: "any",
                },
            }, clusterPassword: {
                serializedName: "typeProperties.clusterPassword",
                type: {
                    name: "Composite",
                    className: "SecretBase",
                },
            }, clusterSshUserName: {
                serializedName: "typeProperties.clusterSshUserName",
                type: {
                    name: "any",
                },
            }, clusterSshPassword: {
                serializedName: "typeProperties.clusterSshPassword",
                type: {
                    name: "Composite",
                    className: "SecretBase",
                },
            }, additionalLinkedServiceNames: {
                serializedName: "typeProperties.additionalLinkedServiceNames",
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "Composite",
                            className: "LinkedServiceReference",
                        },
                    },
                },
            }, hcatalogLinkedServiceName: {
                serializedName: "typeProperties.hcatalogLinkedServiceName",
                type: {
                    name: "Composite",
                    className: "LinkedServiceReference",
                },
            }, clusterType: {
                serializedName: "typeProperties.clusterType",
                type: {
                    name: "any",
                },
            }, sparkVersion: {
                serializedName: "typeProperties.sparkVersion",
                type: {
                    name: "any",
                },
            }, coreConfiguration: {
                serializedName: "typeProperties.coreConfiguration",
                type: {
                    name: "any",
                },
            }, hBaseConfiguration: {
                serializedName: "typeProperties.hBaseConfiguration",
                type: {
                    name: "any",
                },
            }, hdfsConfiguration: {
                serializedName: "typeProperties.hdfsConfiguration",
                type: {
                    name: "any",
                },
            }, hiveConfiguration: {
                serializedName: "typeProperties.hiveConfiguration",
                type: {
                    name: "any",
                },
            }, mapReduceConfiguration: {
                serializedName: "typeProperties.mapReduceConfiguration",
                type: {
                    name: "any",
                },
            }, oozieConfiguration: {
                serializedName: "typeProperties.oozieConfiguration",
                type: {
                    name: "any",
                },
            }, stormConfiguration: {
                serializedName: "typeProperties.stormConfiguration",
                type: {
                    name: "any",
                },
            }, yarnConfiguration: {
                serializedName: "typeProperties.yarnConfiguration",
                type: {
                    name: "any",
                },
            }, encryptedCredential: {
                serializedName: "typeProperties.encryptedCredential",
                type: {
                    name: "any",
                },
            }, headNodeSize: {
                serializedName: "typeProperties.headNodeSize",
                type: {
                    name: "any",
                },
            }, dataNodeSize: {
                serializedName: "typeProperties.dataNodeSize",
                type: {
                    name: "any",
                },
            }, zookeeperNodeSize: {
                serializedName: "typeProperties.zookeeperNodeSize",
                type: {
                    name: "any",
                },
            }, scriptActions: {
                serializedName: "typeProperties.scriptActions",
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "Composite",
                            className: "ScriptAction",
                        },
                    },
                },
            }, virtualNetworkId: {
                serializedName: "typeProperties.virtualNetworkId",
                type: {
                    name: "any",
                },
            }, subnetName: {
                serializedName: "typeProperties.subnetName",
                type: {
                    name: "any",
                },
            }, credential: {
                serializedName: "typeProperties.credential",
                type: {
                    name: "Composite",
                    className: "CredentialReference",
                },
            } }),
    },
};
exports.AzureDataLakeAnalyticsLinkedService = {
    serializedName: "AzureDataLakeAnalytics",
    type: {
        name: "Composite",
        className: "AzureDataLakeAnalyticsLinkedService",
        uberParent: "LinkedService",
        additionalProperties: { type: { name: "Object" } },
        polymorphicDiscriminator: exports.LinkedService.type.polymorphicDiscriminator,
        modelProperties: Object.assign(Object.assign({}, exports.LinkedService.type.modelProperties), { accountName: {
                serializedName: "typeProperties.accountName",
                required: true,
                type: {
                    name: "any",
                },
            }, servicePrincipalId: {
                serializedName: "typeProperties.servicePrincipalId",
                type: {
                    name: "any",
                },
            }, servicePrincipalKey: {
                serializedName: "typeProperties.servicePrincipalKey",
                type: {
                    name: "Composite",
                    className: "SecretBase",
                },
            }, tenant: {
                serializedName: "typeProperties.tenant",
                required: true,
                type: {
                    name: "any",
                },
            }, subscriptionId: {
                serializedName: "typeProperties.subscriptionId",
                type: {
                    name: "any",
                },
            }, resourceGroupName: {
                serializedName: "typeProperties.resourceGroupName",
                type: {
                    name: "any",
                },
            }, dataLakeAnalyticsUri: {
                serializedName: "typeProperties.dataLakeAnalyticsUri",
                type: {
                    name: "any",
                },
            }, encryptedCredential: {
                serializedName: "typeProperties.encryptedCredential",
                type: {
                    name: "any",
                },
            } }),
    },
};
exports.AzureDatabricksLinkedService = {
    serializedName: "AzureDatabricks",
    type: {
        name: "Composite",
        className: "AzureDatabricksLinkedService",
        uberParent: "LinkedService",
        additionalProperties: { type: { name: "Object" } },
        polymorphicDiscriminator: exports.LinkedService.type.polymorphicDiscriminator,
        modelProperties: Object.assign(Object.assign({}, exports.LinkedService.type.modelProperties), { domain: {
                serializedName: "typeProperties.domain",
                required: true,
                type: {
                    name: "any",
                },
            }, accessToken: {
                serializedName: "typeProperties.accessToken",
                type: {
                    name: "Composite",
                    className: "SecretBase",
                },
            }, authentication: {
                serializedName: "typeProperties.authentication",
                type: {
                    name: "any",
                },
            }, workspaceResourceId: {
                serializedName: "typeProperties.workspaceResourceId",
                type: {
                    name: "any",
                },
            }, existingClusterId: {
                serializedName: "typeProperties.existingClusterId",
                type: {
                    name: "any",
                },
            }, instancePoolId: {
                serializedName: "typeProperties.instancePoolId",
                type: {
                    name: "any",
                },
            }, newClusterVersion: {
                serializedName: "typeProperties.newClusterVersion",
                type: {
                    name: "any",
                },
            }, newClusterNumOfWorker: {
                serializedName: "typeProperties.newClusterNumOfWorker",
                type: {
                    name: "any",
                },
            }, newClusterNodeType: {
                serializedName: "typeProperties.newClusterNodeType",
                type: {
                    name: "any",
                },
            }, newClusterSparkConf: {
                serializedName: "typeProperties.newClusterSparkConf",
                type: {
                    name: "Dictionary",
                    value: { type: { name: "any" } },
                },
            }, newClusterSparkEnvVars: {
                serializedName: "typeProperties.newClusterSparkEnvVars",
                type: {
                    name: "Dictionary",
                    value: { type: { name: "any" } },
                },
            }, newClusterCustomTags: {
                serializedName: "typeProperties.newClusterCustomTags",
                type: {
                    name: "Dictionary",
                    value: { type: { name: "any" } },
                },
            }, newClusterLogDestination: {
                serializedName: "typeProperties.newClusterLogDestination",
                type: {
                    name: "any",
                },
            }, newClusterDriverNodeType: {
                serializedName: "typeProperties.newClusterDriverNodeType",
                type: {
                    name: "any",
                },
            }, newClusterInitScripts: {
                serializedName: "typeProperties.newClusterInitScripts",
                type: {
                    name: "any",
                },
            }, newClusterEnableElasticDisk: {
                serializedName: "typeProperties.newClusterEnableElasticDisk",
                type: {
                    name: "any",
                },
            }, encryptedCredential: {
                serializedName: "typeProperties.encryptedCredential",
                type: {
                    name: "any",
                },
            }, policyId: {
                serializedName: "typeProperties.policyId",
                type: {
                    name: "any",
                },
            }, credential: {
                serializedName: "typeProperties.credential",
                type: {
                    name: "Composite",
                    className: "CredentialReference",
                },
            } }),
    },
};
exports.AzureDatabricksDeltaLakeLinkedService = {
    serializedName: "AzureDatabricksDeltaLake",
    type: {
        name: "Composite",
        className: "AzureDatabricksDeltaLakeLinkedService",
        uberParent: "LinkedService",
        additionalProperties: { type: { name: "Object" } },
        polymorphicDiscriminator: exports.LinkedService.type.polymorphicDiscriminator,
        modelProperties: Object.assign(Object.assign({}, exports.LinkedService.type.modelProperties), { domain: {
                serializedName: "typeProperties.domain",
                required: true,
                type: {
                    name: "any",
                },
            }, accessToken: {
                serializedName: "typeProperties.accessToken",
                type: {
                    name: "Composite",
                    className: "SecretBase",
                },
            }, clusterId: {
                serializedName: "typeProperties.clusterId",
                type: {
                    name: "any",
                },
            }, encryptedCredential: {
                serializedName: "typeProperties.encryptedCredential",
                type: {
                    name: "any",
                },
            }, credential: {
                serializedName: "typeProperties.credential",
                type: {
                    name: "Composite",
                    className: "CredentialReference",
                },
            } }),
    },
};
exports.ResponsysLinkedService = {
    serializedName: "Responsys",
    type: {
        name: "Composite",
        className: "ResponsysLinkedService",
        uberParent: "LinkedService",
        additionalProperties: { type: { name: "Object" } },
        polymorphicDiscriminator: exports.LinkedService.type.polymorphicDiscriminator,
        modelProperties: Object.assign(Object.assign({}, exports.LinkedService.type.modelProperties), { endpoint: {
                serializedName: "typeProperties.endpoint",
                required: true,
                type: {
                    name: "any",
                },
            }, clientId: {
                serializedName: "typeProperties.clientId",
                required: true,
                type: {
                    name: "any",
                },
            }, clientSecret: {
                serializedName: "typeProperties.clientSecret",
                type: {
                    name: "Composite",
                    className: "SecretBase",
                },
            }, useEncryptedEndpoints: {
                serializedName: "typeProperties.useEncryptedEndpoints",
                type: {
                    name: "any",
                },
            }, useHostVerification: {
                serializedName: "typeProperties.useHostVerification",
                type: {
                    name: "any",
                },
            }, usePeerVerification: {
                serializedName: "typeProperties.usePeerVerification",
                type: {
                    name: "any",
                },
            }, encryptedCredential: {
                serializedName: "typeProperties.encryptedCredential",
                type: {
                    name: "any",
                },
            } }),
    },
};
exports.DynamicsAXLinkedService = {
    serializedName: "DynamicsAX",
    type: {
        name: "Composite",
        className: "DynamicsAXLinkedService",
        uberParent: "LinkedService",
        additionalProperties: { type: { name: "Object" } },
        polymorphicDiscriminator: exports.LinkedService.type.polymorphicDiscriminator,
        modelProperties: Object.assign(Object.assign({}, exports.LinkedService.type.modelProperties), { url: {
                serializedName: "typeProperties.url",
                required: true,
                type: {
                    name: "any",
                },
            }, servicePrincipalId: {
                serializedName: "typeProperties.servicePrincipalId",
                required: true,
                type: {
                    name: "any",
                },
            }, servicePrincipalKey: {
                serializedName: "typeProperties.servicePrincipalKey",
                type: {
                    name: "Composite",
                    className: "SecretBase",
                },
            }, tenant: {
                serializedName: "typeProperties.tenant",
                required: true,
                type: {
                    name: "any",
                },
            }, aadResourceId: {
                serializedName: "typeProperties.aadResourceId",
                required: true,
                type: {
                    name: "any",
                },
            }, encryptedCredential: {
                serializedName: "typeProperties.encryptedCredential",
                type: {
                    name: "any",
                },
            } }),
    },
};
exports.OracleServiceCloudLinkedService = {
    serializedName: "OracleServiceCloud",
    type: {
        name: "Composite",
        className: "OracleServiceCloudLinkedService",
        uberParent: "LinkedService",
        additionalProperties: { type: { name: "Object" } },
        polymorphicDiscriminator: exports.LinkedService.type.polymorphicDiscriminator,
        modelProperties: Object.assign(Object.assign({}, exports.LinkedService.type.modelProperties), { host: {
                serializedName: "typeProperties.host",
                required: true,
                type: {
                    name: "any",
                },
            }, username: {
                serializedName: "typeProperties.username",
                required: true,
                type: {
                    name: "any",
                },
            }, password: {
                serializedName: "typeProperties.password",
                type: {
                    name: "Composite",
                    className: "SecretBase",
                },
            }, useEncryptedEndpoints: {
                serializedName: "typeProperties.useEncryptedEndpoints",
                type: {
                    name: "any",
                },
            }, useHostVerification: {
                serializedName: "typeProperties.useHostVerification",
                type: {
                    name: "any",
                },
            }, usePeerVerification: {
                serializedName: "typeProperties.usePeerVerification",
                type: {
                    name: "any",
                },
            }, encryptedCredential: {
                serializedName: "typeProperties.encryptedCredential",
                type: {
                    name: "any",
                },
            } }),
    },
};
exports.GoogleAdWordsLinkedService = {
    serializedName: "GoogleAdWords",
    type: {
        name: "Composite",
        className: "GoogleAdWordsLinkedService",
        uberParent: "LinkedService",
        additionalProperties: { type: { name: "Object" } },
        polymorphicDiscriminator: exports.LinkedService.type.polymorphicDiscriminator,
        modelProperties: Object.assign(Object.assign({}, exports.LinkedService.type.modelProperties), { connectionProperties: {
                serializedName: "typeProperties.connectionProperties",
                type: {
                    name: "any",
                },
            }, clientCustomerID: {
                serializedName: "typeProperties.clientCustomerID",
                type: {
                    name: "any",
                },
            }, developerToken: {
                serializedName: "typeProperties.developerToken",
                type: {
                    name: "Composite",
                    className: "SecretBase",
                },
            }, authenticationType: {
                serializedName: "typeProperties.authenticationType",
                type: {
                    name: "String",
                },
            }, refreshToken: {
                serializedName: "typeProperties.refreshToken",
                type: {
                    name: "Composite",
                    className: "SecretBase",
                },
            }, clientId: {
                serializedName: "typeProperties.clientId",
                type: {
                    name: "any",
                },
            }, clientSecret: {
                serializedName: "typeProperties.clientSecret",
                type: {
                    name: "Composite",
                    className: "SecretBase",
                },
            }, email: {
                serializedName: "typeProperties.email",
                type: {
                    name: "any",
                },
            }, keyFilePath: {
                serializedName: "typeProperties.keyFilePath",
                type: {
                    name: "any",
                },
            }, trustedCertPath: {
                serializedName: "typeProperties.trustedCertPath",
                type: {
                    name: "any",
                },
            }, useSystemTrustStore: {
                serializedName: "typeProperties.useSystemTrustStore",
                type: {
                    name: "any",
                },
            }, privateKey: {
                serializedName: "typeProperties.privateKey",
                type: {
                    name: "Composite",
                    className: "SecretBase",
                },
            }, loginCustomerID: {
                serializedName: "typeProperties.loginCustomerID",
                type: {
                    name: "any",
                },
            }, googleAdsApiVersion: {
                serializedName: "typeProperties.googleAdsApiVersion",
                type: {
                    name: "any",
                },
            }, supportLegacyDataTypes: {
                serializedName: "typeProperties.supportLegacyDataTypes",
                type: {
                    name: "any",
                },
            }, encryptedCredential: {
                serializedName: "typeProperties.encryptedCredential",
                type: {
                    name: "any",
                },
            } }),
    },
};
exports.SapTableLinkedService = {
    serializedName: "SapTable",
    type: {
        name: "Composite",
        className: "SapTableLinkedService",
        uberParent: "LinkedService",
        additionalProperties: { type: { name: "Object" } },
        polymorphicDiscriminator: exports.LinkedService.type.polymorphicDiscriminator,
        modelProperties: Object.assign(Object.assign({}, exports.LinkedService.type.modelProperties), { server: {
                serializedName: "typeProperties.server",
                type: {
                    name: "any",
                },
            }, systemNumber: {
                serializedName: "typeProperties.systemNumber",
                type: {
                    name: "any",
                },
            }, clientId: {
                serializedName: "typeProperties.clientId",
                type: {
                    name: "any",
                },
            }, language: {
                serializedName: "typeProperties.language",
                type: {
                    name: "any",
                },
            }, systemId: {
                serializedName: "typeProperties.systemId",
                type: {
                    name: "any",
                },
            }, userName: {
                serializedName: "typeProperties.userName",
                type: {
                    name: "any",
                },
            }, password: {
                serializedName: "typeProperties.password",
                type: {
                    name: "Composite",
                    className: "SecretBase",
                },
            }, messageServer: {
                serializedName: "typeProperties.messageServer",
                type: {
                    name: "any",
                },
            }, messageServerService: {
                serializedName: "typeProperties.messageServerService",
                type: {
                    name: "any",
                },
            }, sncMode: {
                serializedName: "typeProperties.sncMode",
                type: {
                    name: "any",
                },
            }, sncMyName: {
                serializedName: "typeProperties.sncMyName",
                type: {
                    name: "any",
                },
            }, sncPartnerName: {
                serializedName: "typeProperties.sncPartnerName",
                type: {
                    name: "any",
                },
            }, sncLibraryPath: {
                serializedName: "typeProperties.sncLibraryPath",
                type: {
                    name: "any",
                },
            }, sncQop: {
                serializedName: "typeProperties.sncQop",
                type: {
                    name: "any",
                },
            }, logonGroup: {
                serializedName: "typeProperties.logonGroup",
                type: {
                    name: "any",
                },
            }, encryptedCredential: {
                serializedName: "typeProperties.encryptedCredential",
                type: {
                    name: "any",
                },
            } }),
    },
};
exports.AzureDataExplorerLinkedService = {
    serializedName: "AzureDataExplorer",
    type: {
        name: "Composite",
        className: "AzureDataExplorerLinkedService",
        uberParent: "LinkedService",
        additionalProperties: { type: { name: "Object" } },
        polymorphicDiscriminator: exports.LinkedService.type.polymorphicDiscriminator,
        modelProperties: Object.assign(Object.assign({}, exports.LinkedService.type.modelProperties), { endpoint: {
                serializedName: "typeProperties.endpoint",
                required: true,
                type: {
                    name: "any",
                },
            }, servicePrincipalId: {
                serializedName: "typeProperties.servicePrincipalId",
                type: {
                    name: "any",
                },
            }, servicePrincipalKey: {
                serializedName: "typeProperties.servicePrincipalKey",
                type: {
                    name: "Composite",
                    className: "SecretBase",
                },
            }, database: {
                serializedName: "typeProperties.database",
                required: true,
                type: {
                    name: "any",
                },
            }, tenant: {
                serializedName: "typeProperties.tenant",
                type: {
                    name: "any",
                },
            }, credential: {
                serializedName: "typeProperties.credential",
                type: {
                    name: "Composite",
                    className: "CredentialReference",
                },
            } }),
    },
};
exports.AzureFunctionLinkedService = {
    serializedName: "AzureFunction",
    type: {
        name: "Composite",
        className: "AzureFunctionLinkedService",
        uberParent: "LinkedService",
        additionalProperties: { type: { name: "Object" } },
        polymorphicDiscriminator: exports.LinkedService.type.polymorphicDiscriminator,
        modelProperties: Object.assign(Object.assign({}, exports.LinkedService.type.modelProperties), { functionAppUrl: {
                serializedName: "typeProperties.functionAppUrl",
                required: true,
                type: {
                    name: "any",
                },
            }, functionKey: {
                serializedName: "typeProperties.functionKey",
                type: {
                    name: "Composite",
                    className: "SecretBase",
                },
            }, encryptedCredential: {
                serializedName: "typeProperties.encryptedCredential",
                type: {
                    name: "any",
                },
            }, credential: {
                serializedName: "typeProperties.credential",
                type: {
                    name: "Composite",
                    className: "CredentialReference",
                },
            }, resourceId: {
                serializedName: "typeProperties.resourceId",
                type: {
                    name: "any",
                },
            }, authentication: {
                serializedName: "typeProperties.authentication",
                type: {
                    name: "any",
                },
            } }),
    },
};
exports.SnowflakeLinkedService = {
    serializedName: "Snowflake",
    type: {
        name: "Composite",
        className: "SnowflakeLinkedService",
        uberParent: "LinkedService",
        additionalProperties: { type: { name: "Object" } },
        polymorphicDiscriminator: exports.LinkedService.type.polymorphicDiscriminator,
        modelProperties: Object.assign(Object.assign({}, exports.LinkedService.type.modelProperties), { connectionString: {
                serializedName: "typeProperties.connectionString",
                required: true,
                type: {
                    name: "any",
                },
            }, password: {
                serializedName: "typeProperties.password",
                type: {
                    name: "Composite",
                    className: "AzureKeyVaultSecretReference",
                },
            }, encryptedCredential: {
                serializedName: "typeProperties.encryptedCredential",
                type: {
                    name: "any",
                },
            } }),
    },
};
exports.SnowflakeV2LinkedService = {
    serializedName: "SnowflakeV2",
    type: {
        name: "Composite",
        className: "SnowflakeV2LinkedService",
        uberParent: "LinkedService",
        additionalProperties: { type: { name: "Object" } },
        polymorphicDiscriminator: exports.LinkedService.type.polymorphicDiscriminator,
        modelProperties: Object.assign(Object.assign({}, exports.LinkedService.type.modelProperties), { accountIdentifier: {
                serializedName: "typeProperties.accountIdentifier",
                required: true,
                type: {
                    name: "any",
                },
            }, user: {
                serializedName: "typeProperties.user",
                type: {
                    name: "any",
                },
            }, password: {
                serializedName: "typeProperties.password",
                type: {
                    name: "Composite",
                    className: "SecretBase",
                },
            }, database: {
                serializedName: "typeProperties.database",
                required: true,
                type: {
                    name: "any",
                },
            }, warehouse: {
                serializedName: "typeProperties.warehouse",
                required: true,
                type: {
                    name: "any",
                },
            }, authenticationType: {
                defaultValue: "Basic",
                serializedName: "typeProperties.authenticationType",
                type: {
                    name: "String",
                },
            }, clientId: {
                serializedName: "typeProperties.clientId",
                type: {
                    name: "any",
                },
            }, clientSecret: {
                serializedName: "typeProperties.clientSecret",
                type: {
                    name: "Composite",
                    className: "SecretBase",
                },
            }, tenantId: {
                serializedName: "typeProperties.tenantId",
                type: {
                    name: "any",
                },
            }, scope: {
                serializedName: "typeProperties.scope",
                type: {
                    name: "any",
                },
            }, host: {
                serializedName: "typeProperties.host",
                type: {
                    name: "any",
                },
            }, privateKey: {
                serializedName: "typeProperties.privateKey",
                type: {
                    name: "Composite",
                    className: "SecretBase",
                },
            }, privateKeyPassphrase: {
                serializedName: "typeProperties.privateKeyPassphrase",
                type: {
                    name: "Composite",
                    className: "SecretBase",
                },
            }, encryptedCredential: {
                serializedName: "typeProperties.encryptedCredential",
                type: {
                    name: "String",
                },
            } }),
    },
};
exports.SharePointOnlineListLinkedService = {
    serializedName: "SharePointOnlineList",
    type: {
        name: "Composite",
        className: "SharePointOnlineListLinkedService",
        uberParent: "LinkedService",
        additionalProperties: { type: { name: "Object" } },
        polymorphicDiscriminator: exports.LinkedService.type.polymorphicDiscriminator,
        modelProperties: Object.assign(Object.assign({}, exports.LinkedService.type.modelProperties), { siteUrl: {
                serializedName: "typeProperties.siteUrl",
                required: true,
                type: {
                    name: "any",
                },
            }, tenantId: {
                serializedName: "typeProperties.tenantId",
                required: true,
                type: {
                    name: "any",
                },
            }, servicePrincipalId: {
                serializedName: "typeProperties.servicePrincipalId",
                required: true,
                type: {
                    name: "any",
                },
            }, servicePrincipalKey: {
                serializedName: "typeProperties.servicePrincipalKey",
                type: {
                    name: "Composite",
                    className: "SecretBase",
                },
            }, servicePrincipalCredentialType: {
                serializedName: "typeProperties.servicePrincipalCredentialType",
                type: {
                    name: "any",
                },
            }, servicePrincipalEmbeddedCert: {
                serializedName: "typeProperties.servicePrincipalEmbeddedCert",
                type: {
                    name: "Composite",
                    className: "SecretBase",
                },
            }, servicePrincipalEmbeddedCertPassword: {
                serializedName: "typeProperties.servicePrincipalEmbeddedCertPassword",
                type: {
                    name: "Composite",
                    className: "SecretBase",
                },
            }, encryptedCredential: {
                serializedName: "typeProperties.encryptedCredential",
                type: {
                    name: "any",
                },
            } }),
    },
};
exports.AzureSynapseArtifactsLinkedService = {
    serializedName: "AzureSynapseArtifacts",
    type: {
        name: "Composite",
        className: "AzureSynapseArtifactsLinkedService",
        uberParent: "LinkedService",
        additionalProperties: { type: { name: "Object" } },
        polymorphicDiscriminator: exports.LinkedService.type.polymorphicDiscriminator,
        modelProperties: Object.assign(Object.assign({}, exports.LinkedService.type.modelProperties), { endpoint: {
                serializedName: "typeProperties.endpoint",
                required: true,
                type: {
                    name: "any",
                },
            }, authentication: {
                serializedName: "typeProperties.authentication",
                type: {
                    name: "any",
                },
            }, workspaceResourceId: {
                serializedName: "typeProperties.workspaceResourceId",
                type: {
                    name: "any",
                },
            } }),
    },
};
exports.LakeHouseLinkedService = {
    serializedName: "Lakehouse",
    type: {
        name: "Composite",
        className: "LakeHouseLinkedService",
        uberParent: "LinkedService",
        additionalProperties: { type: { name: "Object" } },
        polymorphicDiscriminator: exports.LinkedService.type.polymorphicDiscriminator,
        modelProperties: Object.assign(Object.assign({}, exports.LinkedService.type.modelProperties), { workspaceId: {
                serializedName: "typeProperties.workspaceId",
                type: {
                    name: "any",
                },
            }, artifactId: {
                serializedName: "typeProperties.artifactId",
                type: {
                    name: "any",
                },
            }, servicePrincipalId: {
                serializedName: "typeProperties.servicePrincipalId",
                type: {
                    name: "any",
                },
            }, servicePrincipalKey: {
                serializedName: "typeProperties.servicePrincipalKey",
                type: {
                    name: "Composite",
                    className: "SecretBase",
                },
            }, tenant: {
                serializedName: "typeProperties.tenant",
                type: {
                    name: "any",
                },
            }, encryptedCredential: {
                serializedName: "typeProperties.encryptedCredential",
                type: {
                    name: "String",
                },
            }, servicePrincipalCredentialType: {
                serializedName: "typeProperties.servicePrincipalCredentialType",
                type: {
                    name: "any",
                },
            }, servicePrincipalCredential: {
                serializedName: "typeProperties.servicePrincipalCredential",
                type: {
                    name: "Composite",
                    className: "SecretBase",
                },
            } }),
    },
};
exports.PowerBIWorkspaceLinkedService = {
    serializedName: "PowerBIWorkspace",
    type: {
        name: "Composite",
        className: "PowerBIWorkspaceLinkedService",
        uberParent: "LinkedService",
        additionalProperties: { type: { name: "Object" } },
        polymorphicDiscriminator: exports.LinkedService.type.polymorphicDiscriminator,
        modelProperties: Object.assign(Object.assign({}, exports.LinkedService.type.modelProperties), { workspaceId: {
                serializedName: "typeProperties.workspaceId",
                required: true,
                type: {
                    name: "String",
                },
            }, tenantId: {
                serializedName: "typeProperties.tenantId",
                required: true,
                type: {
                    name: "String",
                },
            } }),
    },
};
exports.SalesforceV2LinkedService = {
    serializedName: "SalesforceV2",
    type: {
        name: "Composite",
        className: "SalesforceV2LinkedService",
        uberParent: "LinkedService",
        additionalProperties: { type: { name: "Object" } },
        polymorphicDiscriminator: exports.LinkedService.type.polymorphicDiscriminator,
        modelProperties: Object.assign(Object.assign({}, exports.LinkedService.type.modelProperties), { environmentUrl: {
                serializedName: "typeProperties.environmentUrl",
                type: {
                    name: "any",
                },
            }, authenticationType: {
                serializedName: "typeProperties.authenticationType",
                type: {
                    name: "any",
                },
            }, clientId: {
                serializedName: "typeProperties.clientId",
                type: {
                    name: "any",
                },
            }, clientSecret: {
                serializedName: "typeProperties.clientSecret",
                type: {
                    name: "Composite",
                    className: "SecretBase",
                },
            }, apiVersion: {
                serializedName: "typeProperties.apiVersion",
                type: {
                    name: "any",
                },
            }, encryptedCredential: {
                serializedName: "typeProperties.encryptedCredential",
                type: {
                    name: "String",
                },
            } }),
    },
};
exports.SalesforceServiceCloudV2LinkedService = {
    serializedName: "SalesforceServiceCloudV2",
    type: {
        name: "Composite",
        className: "SalesforceServiceCloudV2LinkedService",
        uberParent: "LinkedService",
        additionalProperties: { type: { name: "Object" } },
        polymorphicDiscriminator: exports.LinkedService.type.polymorphicDiscriminator,
        modelProperties: Object.assign(Object.assign({}, exports.LinkedService.type.modelProperties), { environmentUrl: {
                serializedName: "typeProperties.environmentUrl",
                type: {
                    name: "any",
                },
            }, authenticationType: {
                serializedName: "typeProperties.authenticationType",
                type: {
                    name: "any",
                },
            }, clientId: {
                serializedName: "typeProperties.clientId",
                type: {
                    name: "any",
                },
            }, clientSecret: {
                serializedName: "typeProperties.clientSecret",
                type: {
                    name: "Composite",
                    className: "SecretBase",
                },
            }, apiVersion: {
                serializedName: "typeProperties.apiVersion",
                type: {
                    name: "any",
                },
            }, encryptedCredential: {
                serializedName: "typeProperties.encryptedCredential",
                type: {
                    name: "String",
                },
            } }),
    },
};
exports.WarehouseLinkedService = {
    serializedName: "Warehouse",
    type: {
        name: "Composite",
        className: "WarehouseLinkedService",
        uberParent: "LinkedService",
        additionalProperties: { type: { name: "Object" } },
        polymorphicDiscriminator: exports.LinkedService.type.polymorphicDiscriminator,
        modelProperties: Object.assign(Object.assign({}, exports.LinkedService.type.modelProperties), { artifactId: {
                serializedName: "typeProperties.artifactId",
                required: true,
                type: {
                    name: "any",
                },
            }, endpoint: {
                serializedName: "typeProperties.endpoint",
                required: true,
                type: {
                    name: "any",
                },
            }, workspaceId: {
                serializedName: "typeProperties.workspaceId",
                type: {
                    name: "any",
                },
            }, servicePrincipalId: {
                serializedName: "typeProperties.servicePrincipalId",
                type: {
                    name: "any",
                },
            }, servicePrincipalKey: {
                serializedName: "typeProperties.servicePrincipalKey",
                type: {
                    name: "Composite",
                    className: "SecretBase",
                },
            }, tenant: {
                serializedName: "typeProperties.tenant",
                type: {
                    name: "any",
                },
            }, encryptedCredential: {
                serializedName: "typeProperties.encryptedCredential",
                type: {
                    name: "String",
                },
            }, servicePrincipalCredentialType: {
                serializedName: "typeProperties.servicePrincipalCredentialType",
                type: {
                    name: "any",
                },
            }, servicePrincipalCredential: {
                serializedName: "typeProperties.servicePrincipalCredential",
                type: {
                    name: "Composite",
                    className: "SecretBase",
                },
            } }),
    },
};
exports.ControlActivity = {
    serializedName: "Container",
    type: {
        name: "Composite",
        className: "ControlActivity",
        uberParent: "Activity",
        additionalProperties: { type: { name: "Object" } },
        polymorphicDiscriminator: {
            serializedName: "type",
            clientName: "type",
        },
        modelProperties: Object.assign({}, exports.Activity.type.modelProperties),
    },
};
exports.ExecutionActivity = {
    serializedName: "Execution",
    type: {
        name: "Composite",
        className: "ExecutionActivity",
        uberParent: "Activity",
        additionalProperties: { type: { name: "Object" } },
        polymorphicDiscriminator: {
            serializedName: "type",
            clientName: "type",
        },
        modelProperties: Object.assign(Object.assign({}, exports.Activity.type.modelProperties), { linkedServiceName: {
                serializedName: "linkedServiceName",
                type: {
                    name: "Composite",
                    className: "LinkedServiceReference",
                },
            }, policy: {
                serializedName: "policy",
                type: {
                    name: "Composite",
                    className: "ActivityPolicy",
                },
            } }),
    },
};
exports.SqlPoolStoredProcedureActivity = {
    serializedName: "SqlPoolStoredProcedure",
    type: {
        name: "Composite",
        className: "SqlPoolStoredProcedureActivity",
        uberParent: "Activity",
        additionalProperties: { type: { name: "Object" } },
        polymorphicDiscriminator: exports.Activity.type.polymorphicDiscriminator,
        modelProperties: Object.assign(Object.assign({}, exports.Activity.type.modelProperties), { sqlPool: {
                serializedName: "sqlPool",
                type: {
                    name: "Composite",
                    className: "SqlPoolReference",
                },
            }, storedProcedureName: {
                serializedName: "typeProperties.storedProcedureName",
                required: true,
                type: {
                    name: "any",
                },
            }, storedProcedureParameters: {
                serializedName: "typeProperties.storedProcedureParameters",
                type: {
                    name: "any",
                },
            } }),
    },
};
exports.RerunTumblingWindowTrigger = {
    serializedName: "RerunTumblingWindowTrigger",
    type: {
        name: "Composite",
        className: "RerunTumblingWindowTrigger",
        uberParent: "Trigger",
        additionalProperties: { type: { name: "Object" } },
        polymorphicDiscriminator: exports.Trigger.type.polymorphicDiscriminator,
        modelProperties: Object.assign(Object.assign({}, exports.Trigger.type.modelProperties), { parentTrigger: {
                serializedName: "typeProperties.parentTrigger",
                required: true,
                type: {
                    name: "any",
                },
            }, requestedStartTime: {
                serializedName: "typeProperties.requestedStartTime",
                required: true,
                type: {
                    name: "DateTime",
                },
            }, requestedEndTime: {
                serializedName: "typeProperties.requestedEndTime",
                required: true,
                type: {
                    name: "DateTime",
                },
            }, rerunConcurrency: {
                constraints: {
                    InclusiveMaximum: 50,
                    InclusiveMinimum: 1,
                },
                serializedName: "typeProperties.rerunConcurrency",
                required: true,
                type: {
                    name: "Number",
                },
            } }),
    },
};
exports.MultiplePipelineTrigger = {
    serializedName: "MultiplePipelineTrigger",
    type: {
        name: "Composite",
        className: "MultiplePipelineTrigger",
        uberParent: "Trigger",
        additionalProperties: { type: { name: "Object" } },
        polymorphicDiscriminator: {
            serializedName: "type",
            clientName: "type",
        },
        modelProperties: Object.assign(Object.assign({}, exports.Trigger.type.modelProperties), { pipelines: {
                serializedName: "pipelines",
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "Composite",
                            className: "TriggerPipelineReference",
                        },
                    },
                },
            } }),
    },
};
exports.TumblingWindowTrigger = {
    serializedName: "TumblingWindowTrigger",
    type: {
        name: "Composite",
        className: "TumblingWindowTrigger",
        uberParent: "Trigger",
        additionalProperties: { type: { name: "Object" } },
        polymorphicDiscriminator: exports.Trigger.type.polymorphicDiscriminator,
        modelProperties: Object.assign(Object.assign({}, exports.Trigger.type.modelProperties), { pipeline: {
                serializedName: "pipeline",
                type: {
                    name: "Composite",
                    className: "TriggerPipelineReference",
                },
            }, frequency: {
                serializedName: "typeProperties.frequency",
                required: true,
                type: {
                    name: "String",
                },
            }, interval: {
                serializedName: "typeProperties.interval",
                required: true,
                type: {
                    name: "Number",
                },
            }, startTime: {
                serializedName: "typeProperties.startTime",
                required: true,
                type: {
                    name: "DateTime",
                },
            }, endTime: {
                serializedName: "typeProperties.endTime",
                type: {
                    name: "DateTime",
                },
            }, delay: {
                serializedName: "typeProperties.delay",
                type: {
                    name: "any",
                },
            }, maxConcurrency: {
                constraints: {
                    InclusiveMaximum: 50,
                    InclusiveMinimum: 1,
                },
                serializedName: "typeProperties.maxConcurrency",
                required: true,
                type: {
                    name: "Number",
                },
            }, retryPolicy: {
                serializedName: "typeProperties.retryPolicy",
                type: {
                    name: "Composite",
                    className: "RetryPolicy",
                },
            }, dependsOn: {
                serializedName: "typeProperties.dependsOn",
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "Composite",
                            className: "DependencyReference",
                        },
                    },
                },
            } }),
    },
};
exports.ChainingTrigger = {
    serializedName: "ChainingTrigger",
    type: {
        name: "Composite",
        className: "ChainingTrigger",
        uberParent: "Trigger",
        additionalProperties: { type: { name: "Object" } },
        polymorphicDiscriminator: exports.Trigger.type.polymorphicDiscriminator,
        modelProperties: Object.assign(Object.assign({}, exports.Trigger.type.modelProperties), { pipeline: {
                serializedName: "pipeline",
                type: {
                    name: "Composite",
                    className: "TriggerPipelineReference",
                },
            }, dependsOn: {
                serializedName: "typeProperties.dependsOn",
                required: true,
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "Composite",
                            className: "PipelineReference",
                        },
                    },
                },
            }, runDimension: {
                serializedName: "typeProperties.runDimension",
                required: true,
                type: {
                    name: "String",
                },
            } }),
    },
};
exports.DataFlowSource = {
    type: {
        name: "Composite",
        className: "DataFlowSource",
        modelProperties: Object.assign(Object.assign({}, exports.Transformation.type.modelProperties), { schemaLinkedService: {
                serializedName: "schemaLinkedService",
                type: {
                    name: "Composite",
                    className: "LinkedServiceReference",
                },
            } }),
    },
};
exports.DataFlowSink = {
    type: {
        name: "Composite",
        className: "DataFlowSink",
        modelProperties: Object.assign(Object.assign({}, exports.Transformation.type.modelProperties), { schemaLinkedService: {
                serializedName: "schemaLinkedService",
                type: {
                    name: "Composite",
                    className: "LinkedServiceReference",
                },
            }, rejectedDataLinkedService: {
                serializedName: "rejectedDataLinkedService",
                type: {
                    name: "Composite",
                    className: "LinkedServiceReference",
                },
            } }),
    },
};
exports.AzureBlobStorageLocation = {
    serializedName: "AzureBlobStorageLocation",
    type: {
        name: "Composite",
        className: "AzureBlobStorageLocation",
        uberParent: "DatasetLocation",
        additionalProperties: { type: { name: "Object" } },
        polymorphicDiscriminator: exports.DatasetLocation.type.polymorphicDiscriminator,
        modelProperties: Object.assign(Object.assign({}, exports.DatasetLocation.type.modelProperties), { container: {
                serializedName: "container",
                type: {
                    name: "any",
                },
            } }),
    },
};
exports.AzureBlobFSLocation = {
    serializedName: "AzureBlobFSLocation",
    type: {
        name: "Composite",
        className: "AzureBlobFSLocation",
        uberParent: "DatasetLocation",
        additionalProperties: { type: { name: "Object" } },
        polymorphicDiscriminator: exports.DatasetLocation.type.polymorphicDiscriminator,
        modelProperties: Object.assign(Object.assign({}, exports.DatasetLocation.type.modelProperties), { fileSystem: {
                serializedName: "fileSystem",
                type: {
                    name: "any",
                },
            } }),
    },
};
exports.AzureDataLakeStoreLocation = {
    serializedName: "AzureDataLakeStoreLocation",
    type: {
        name: "Composite",
        className: "AzureDataLakeStoreLocation",
        uberParent: "DatasetLocation",
        additionalProperties: { type: { name: "Object" } },
        polymorphicDiscriminator: exports.DatasetLocation.type.polymorphicDiscriminator,
        modelProperties: Object.assign({}, exports.DatasetLocation.type.modelProperties),
    },
};
exports.AmazonS3Location = {
    serializedName: "AmazonS3Location",
    type: {
        name: "Composite",
        className: "AmazonS3Location",
        uberParent: "DatasetLocation",
        additionalProperties: { type: { name: "Object" } },
        polymorphicDiscriminator: exports.DatasetLocation.type.polymorphicDiscriminator,
        modelProperties: Object.assign(Object.assign({}, exports.DatasetLocation.type.modelProperties), { bucketName: {
                serializedName: "bucketName",
                type: {
                    name: "any",
                },
            }, version: {
                serializedName: "version",
                type: {
                    name: "any",
                },
            } }),
    },
};
exports.FileServerLocation = {
    serializedName: "FileServerLocation",
    type: {
        name: "Composite",
        className: "FileServerLocation",
        uberParent: "DatasetLocation",
        additionalProperties: { type: { name: "Object" } },
        polymorphicDiscriminator: exports.DatasetLocation.type.polymorphicDiscriminator,
        modelProperties: Object.assign({}, exports.DatasetLocation.type.modelProperties),
    },
};
exports.AzureFileStorageLocation = {
    serializedName: "AzureFileStorageLocation",
    type: {
        name: "Composite",
        className: "AzureFileStorageLocation",
        uberParent: "DatasetLocation",
        additionalProperties: { type: { name: "Object" } },
        polymorphicDiscriminator: exports.DatasetLocation.type.polymorphicDiscriminator,
        modelProperties: Object.assign({}, exports.DatasetLocation.type.modelProperties),
    },
};
exports.GoogleCloudStorageLocation = {
    serializedName: "GoogleCloudStorageLocation",
    type: {
        name: "Composite",
        className: "GoogleCloudStorageLocation",
        uberParent: "DatasetLocation",
        additionalProperties: { type: { name: "Object" } },
        polymorphicDiscriminator: exports.DatasetLocation.type.polymorphicDiscriminator,
        modelProperties: Object.assign(Object.assign({}, exports.DatasetLocation.type.modelProperties), { bucketName: {
                serializedName: "bucketName",
                type: {
                    name: "any",
                },
            }, version: {
                serializedName: "version",
                type: {
                    name: "any",
                },
            } }),
    },
};
exports.FtpServerLocation = {
    serializedName: "FtpServerLocation",
    type: {
        name: "Composite",
        className: "FtpServerLocation",
        uberParent: "DatasetLocation",
        additionalProperties: { type: { name: "Object" } },
        polymorphicDiscriminator: exports.DatasetLocation.type.polymorphicDiscriminator,
        modelProperties: Object.assign({}, exports.DatasetLocation.type.modelProperties),
    },
};
exports.SftpLocation = {
    serializedName: "SftpLocation",
    type: {
        name: "Composite",
        className: "SftpLocation",
        uberParent: "DatasetLocation",
        additionalProperties: { type: { name: "Object" } },
        polymorphicDiscriminator: exports.DatasetLocation.type.polymorphicDiscriminator,
        modelProperties: Object.assign({}, exports.DatasetLocation.type.modelProperties),
    },
};
exports.HttpServerLocation = {
    serializedName: "HttpServerLocation",
    type: {
        name: "Composite",
        className: "HttpServerLocation",
        uberParent: "DatasetLocation",
        additionalProperties: { type: { name: "Object" } },
        polymorphicDiscriminator: exports.DatasetLocation.type.polymorphicDiscriminator,
        modelProperties: Object.assign(Object.assign({}, exports.DatasetLocation.type.modelProperties), { relativeUrl: {
                serializedName: "relativeUrl",
                type: {
                    name: "any",
                },
            } }),
    },
};
exports.HdfsLocation = {
    serializedName: "HdfsLocation",
    type: {
        name: "Composite",
        className: "HdfsLocation",
        uberParent: "DatasetLocation",
        additionalProperties: { type: { name: "Object" } },
        polymorphicDiscriminator: exports.DatasetLocation.type.polymorphicDiscriminator,
        modelProperties: Object.assign({}, exports.DatasetLocation.type.modelProperties),
    },
};
exports.LakeHouseLocation = {
    serializedName: "LakeHouseLocation",
    type: {
        name: "Composite",
        className: "LakeHouseLocation",
        uberParent: "DatasetLocation",
        additionalProperties: { type: { name: "Object" } },
        polymorphicDiscriminator: exports.DatasetLocation.type.polymorphicDiscriminator,
        modelProperties: Object.assign({}, exports.DatasetLocation.type.modelProperties),
    },
};
exports.TextFormat = {
    serializedName: "TextFormat",
    type: {
        name: "Composite",
        className: "TextFormat",
        uberParent: "DatasetStorageFormat",
        additionalProperties: { type: { name: "Object" } },
        polymorphicDiscriminator: exports.DatasetStorageFormat.type.polymorphicDiscriminator,
        modelProperties: Object.assign(Object.assign({}, exports.DatasetStorageFormat.type.modelProperties), { columnDelimiter: {
                serializedName: "columnDelimiter",
                type: {
                    name: "any",
                },
            }, rowDelimiter: {
                serializedName: "rowDelimiter",
                type: {
                    name: "any",
                },
            }, escapeChar: {
                serializedName: "escapeChar",
                type: {
                    name: "any",
                },
            }, quoteChar: {
                serializedName: "quoteChar",
                type: {
                    name: "any",
                },
            }, nullValue: {
                serializedName: "nullValue",
                type: {
                    name: "any",
                },
            }, encodingName: {
                serializedName: "encodingName",
                type: {
                    name: "any",
                },
            }, treatEmptyAsNull: {
                serializedName: "treatEmptyAsNull",
                type: {
                    name: "any",
                },
            }, skipLineCount: {
                serializedName: "skipLineCount",
                type: {
                    name: "any",
                },
            }, firstRowAsHeader: {
                serializedName: "firstRowAsHeader",
                type: {
                    name: "any",
                },
            } }),
    },
};
exports.JsonFormat = {
    serializedName: "JsonFormat",
    type: {
        name: "Composite",
        className: "JsonFormat",
        uberParent: "DatasetStorageFormat",
        additionalProperties: { type: { name: "Object" } },
        polymorphicDiscriminator: exports.DatasetStorageFormat.type.polymorphicDiscriminator,
        modelProperties: Object.assign(Object.assign({}, exports.DatasetStorageFormat.type.modelProperties), { filePattern: {
                serializedName: "filePattern",
                type: {
                    name: "any",
                },
            }, nestingSeparator: {
                serializedName: "nestingSeparator",
                type: {
                    name: "any",
                },
            }, encodingName: {
                serializedName: "encodingName",
                type: {
                    name: "any",
                },
            }, jsonNodeReference: {
                serializedName: "jsonNodeReference",
                type: {
                    name: "any",
                },
            }, jsonPathDefinition: {
                serializedName: "jsonPathDefinition",
                type: {
                    name: "any",
                },
            } }),
    },
};
exports.AvroFormat = {
    serializedName: "AvroFormat",
    type: {
        name: "Composite",
        className: "AvroFormat",
        uberParent: "DatasetStorageFormat",
        additionalProperties: { type: { name: "Object" } },
        polymorphicDiscriminator: exports.DatasetStorageFormat.type.polymorphicDiscriminator,
        modelProperties: Object.assign({}, exports.DatasetStorageFormat.type.modelProperties),
    },
};
exports.OrcFormat = {
    serializedName: "OrcFormat",
    type: {
        name: "Composite",
        className: "OrcFormat",
        uberParent: "DatasetStorageFormat",
        additionalProperties: { type: { name: "Object" } },
        polymorphicDiscriminator: exports.DatasetStorageFormat.type.polymorphicDiscriminator,
        modelProperties: Object.assign({}, exports.DatasetStorageFormat.type.modelProperties),
    },
};
exports.ParquetFormat = {
    serializedName: "ParquetFormat",
    type: {
        name: "Composite",
        className: "ParquetFormat",
        uberParent: "DatasetStorageFormat",
        additionalProperties: { type: { name: "Object" } },
        polymorphicDiscriminator: exports.DatasetStorageFormat.type.polymorphicDiscriminator,
        modelProperties: Object.assign({}, exports.DatasetStorageFormat.type.modelProperties),
    },
};
exports.AzureTableStorageLinkedServiceTypeProperties = {
    type: {
        name: "Composite",
        className: "AzureTableStorageLinkedServiceTypeProperties",
        modelProperties: Object.assign(Object.assign({}, exports.AzureStorageLinkedServiceTypeProperties.type.modelProperties), { serviceEndpoint: {
                serializedName: "serviceEndpoint",
                type: {
                    name: "any",
                },
            }, credential: {
                serializedName: "credential",
                type: {
                    name: "Composite",
                    className: "CredentialReference",
                },
            } }),
    },
};
exports.AzureSqlDWLinkedServiceTypeProperties = {
    type: {
        name: "Composite",
        className: "AzureSqlDWLinkedServiceTypeProperties",
        modelProperties: Object.assign(Object.assign({}, exports.SqlServerBaseLinkedServiceTypeProperties.type.modelProperties), { connectionString: {
                serializedName: "connectionString",
                type: {
                    name: "any",
                },
            }, authenticationType: {
                serializedName: "authenticationType",
                type: {
                    name: "String",
                },
            }, userName: {
                serializedName: "userName",
                type: {
                    name: "any",
                },
            }, password: {
                serializedName: "password",
                type: {
                    name: "Composite",
                    className: "AzureKeyVaultSecretReference",
                },
            }, servicePrincipalId: {
                serializedName: "servicePrincipalId",
                type: {
                    name: "any",
                },
            }, servicePrincipalKey: {
                serializedName: "servicePrincipalKey",
                type: {
                    name: "Composite",
                    className: "SecretBase",
                },
            }, servicePrincipalCredentialType: {
                serializedName: "servicePrincipalCredentialType",
                type: {
                    name: "any",
                },
            }, servicePrincipalCredential: {
                serializedName: "servicePrincipalCredential",
                type: {
                    name: "Composite",
                    className: "SecretBase",
                },
            }, tenant: {
                serializedName: "tenant",
                type: {
                    name: "any",
                },
            }, azureCloudType: {
                serializedName: "azureCloudType",
                type: {
                    name: "any",
                },
            }, encryptedCredential: {
                serializedName: "encryptedCredential",
                type: {
                    name: "any",
                },
            }, credential: {
                serializedName: "credential",
                type: {
                    name: "Composite",
                    className: "CredentialReference",
                },
            } }),
    },
};
exports.SqlServerLinkedServiceTypeProperties = {
    type: {
        name: "Composite",
        className: "SqlServerLinkedServiceTypeProperties",
        modelProperties: Object.assign(Object.assign({}, exports.SqlServerBaseLinkedServiceTypeProperties.type.modelProperties), { connectionString: {
                serializedName: "connectionString",
                type: {
                    name: "any",
                },
            }, authenticationType: {
                serializedName: "authenticationType",
                type: {
                    name: "String",
                },
            }, userName: {
                serializedName: "userName",
                type: {
                    name: "any",
                },
            }, password: {
                serializedName: "password",
                type: {
                    name: "Composite",
                    className: "SecretBase",
                },
            }, encryptedCredential: {
                serializedName: "encryptedCredential",
                type: {
                    name: "any",
                },
            }, alwaysEncryptedSettings: {
                serializedName: "alwaysEncryptedSettings",
                type: {
                    name: "Composite",
                    className: "SqlAlwaysEncryptedProperties",
                },
            }, credential: {
                serializedName: "credential",
                type: {
                    name: "Composite",
                    className: "CredentialReference",
                },
            } }),
    },
};
exports.AmazonRdsForSqlServerLinkedServiceTypeProperties = {
    type: {
        name: "Composite",
        className: "AmazonRdsForSqlServerLinkedServiceTypeProperties",
        modelProperties: Object.assign(Object.assign({}, exports.SqlServerBaseLinkedServiceTypeProperties.type.modelProperties), { connectionString: {
                serializedName: "connectionString",
                type: {
                    name: "any",
                },
            }, authenticationType: {
                serializedName: "authenticationType",
                type: {
                    name: "String",
                },
            }, userName: {
                serializedName: "userName",
                type: {
                    name: "any",
                },
            }, password: {
                serializedName: "password",
                type: {
                    name: "Composite",
                    className: "SecretBase",
                },
            }, encryptedCredential: {
                serializedName: "encryptedCredential",
                type: {
                    name: "any",
                },
            }, alwaysEncryptedSettings: {
                serializedName: "alwaysEncryptedSettings",
                type: {
                    name: "Composite",
                    className: "SqlAlwaysEncryptedProperties",
                },
            } }),
    },
};
exports.AzureSqlDatabaseLinkedServiceTypeProperties = {
    type: {
        name: "Composite",
        className: "AzureSqlDatabaseLinkedServiceTypeProperties",
        modelProperties: Object.assign(Object.assign({}, exports.SqlServerBaseLinkedServiceTypeProperties.type.modelProperties), { connectionString: {
                serializedName: "connectionString",
                type: {
                    name: "any",
                },
            }, authenticationType: {
                serializedName: "authenticationType",
                type: {
                    name: "String",
                },
            }, userName: {
                serializedName: "userName",
                type: {
                    name: "any",
                },
            }, password: {
                serializedName: "password",
                type: {
                    name: "Composite",
                    className: "AzureKeyVaultSecretReference",
                },
            }, servicePrincipalId: {
                serializedName: "servicePrincipalId",
                type: {
                    name: "any",
                },
            }, servicePrincipalKey: {
                serializedName: "servicePrincipalKey",
                type: {
                    name: "Composite",
                    className: "SecretBase",
                },
            }, servicePrincipalCredentialType: {
                serializedName: "servicePrincipalCredentialType",
                type: {
                    name: "any",
                },
            }, servicePrincipalCredential: {
                serializedName: "servicePrincipalCredential",
                type: {
                    name: "Composite",
                    className: "SecretBase",
                },
            }, tenant: {
                serializedName: "tenant",
                type: {
                    name: "any",
                },
            }, azureCloudType: {
                serializedName: "azureCloudType",
                type: {
                    name: "any",
                },
            }, alwaysEncryptedSettings: {
                serializedName: "alwaysEncryptedSettings",
                type: {
                    name: "Composite",
                    className: "SqlAlwaysEncryptedProperties",
                },
            }, encryptedCredential: {
                serializedName: "encryptedCredential",
                type: {
                    name: "any",
                },
            }, credential: {
                serializedName: "credential",
                type: {
                    name: "Composite",
                    className: "CredentialReference",
                },
            } }),
    },
};
exports.AzureSqlMILinkedServiceTypeProperties = {
    type: {
        name: "Composite",
        className: "AzureSqlMILinkedServiceTypeProperties",
        modelProperties: Object.assign(Object.assign({}, exports.SqlServerBaseLinkedServiceTypeProperties.type.modelProperties), { connectionString: {
                serializedName: "connectionString",
                type: {
                    name: "any",
                },
            }, authenticationType: {
                serializedName: "authenticationType",
                type: {
                    name: "String",
                },
            }, userName: {
                serializedName: "userName",
                type: {
                    name: "any",
                },
            }, password: {
                serializedName: "password",
                type: {
                    name: "Composite",
                    className: "AzureKeyVaultSecretReference",
                },
            }, servicePrincipalId: {
                serializedName: "servicePrincipalId",
                type: {
                    name: "any",
                },
            }, servicePrincipalKey: {
                serializedName: "servicePrincipalKey",
                type: {
                    name: "Composite",
                    className: "SecretBase",
                },
            }, servicePrincipalCredentialType: {
                serializedName: "servicePrincipalCredentialType",
                type: {
                    name: "any",
                },
            }, servicePrincipalCredential: {
                serializedName: "servicePrincipalCredential",
                type: {
                    name: "Composite",
                    className: "SecretBase",
                },
            }, tenant: {
                serializedName: "tenant",
                type: {
                    name: "any",
                },
            }, azureCloudType: {
                serializedName: "azureCloudType",
                type: {
                    name: "any",
                },
            }, alwaysEncryptedSettings: {
                serializedName: "alwaysEncryptedSettings",
                type: {
                    name: "Composite",
                    className: "SqlAlwaysEncryptedProperties",
                },
            }, encryptedCredential: {
                serializedName: "encryptedCredential",
                type: {
                    name: "any",
                },
            }, credential: {
                serializedName: "credential",
                type: {
                    name: "Composite",
                    className: "CredentialReference",
                },
            } }),
    },
};
exports.WebAnonymousAuthentication = {
    serializedName: "Anonymous",
    type: {
        name: "Composite",
        className: "WebAnonymousAuthentication",
        uberParent: "WebLinkedServiceTypeProperties",
        polymorphicDiscriminator: exports.WebLinkedServiceTypeProperties.type.polymorphicDiscriminator,
        modelProperties: Object.assign({}, exports.WebLinkedServiceTypeProperties.type.modelProperties),
    },
};
exports.WebBasicAuthentication = {
    serializedName: "Basic",
    type: {
        name: "Composite",
        className: "WebBasicAuthentication",
        uberParent: "WebLinkedServiceTypeProperties",
        polymorphicDiscriminator: exports.WebLinkedServiceTypeProperties.type.polymorphicDiscriminator,
        modelProperties: Object.assign(Object.assign({}, exports.WebLinkedServiceTypeProperties.type.modelProperties), { username: {
                serializedName: "username",
                required: true,
                type: {
                    name: "any",
                },
            }, password: {
                serializedName: "password",
                type: {
                    name: "Composite",
                    className: "SecretBase",
                },
            } }),
    },
};
exports.WebClientCertificateAuthentication = {
    serializedName: "ClientCertificate",
    type: {
        name: "Composite",
        className: "WebClientCertificateAuthentication",
        uberParent: "WebLinkedServiceTypeProperties",
        polymorphicDiscriminator: exports.WebLinkedServiceTypeProperties.type.polymorphicDiscriminator,
        modelProperties: Object.assign(Object.assign({}, exports.WebLinkedServiceTypeProperties.type.modelProperties), { pfx: {
                serializedName: "pfx",
                type: {
                    name: "Composite",
                    className: "SecretBase",
                },
            }, password: {
                serializedName: "password",
                type: {
                    name: "Composite",
                    className: "SecretBase",
                },
            } }),
    },
};
exports.AzureBlobStorageReadSettings = {
    serializedName: "AzureBlobStorageReadSettings",
    type: {
        name: "Composite",
        className: "AzureBlobStorageReadSettings",
        uberParent: "StoreReadSettings",
        additionalProperties: { type: { name: "Object" } },
        polymorphicDiscriminator: exports.StoreReadSettings.type.polymorphicDiscriminator,
        modelProperties: Object.assign(Object.assign({}, exports.StoreReadSettings.type.modelProperties), { recursive: {
                serializedName: "recursive",
                type: {
                    name: "any",
                },
            }, wildcardFolderPath: {
                serializedName: "wildcardFolderPath",
                type: {
                    name: "any",
                },
            }, wildcardFileName: {
                serializedName: "wildcardFileName",
                type: {
                    name: "any",
                },
            }, prefix: {
                serializedName: "prefix",
                type: {
                    name: "any",
                },
            }, fileListPath: {
                serializedName: "fileListPath",
                type: {
                    name: "any",
                },
            }, enablePartitionDiscovery: {
                serializedName: "enablePartitionDiscovery",
                type: {
                    name: "any",
                },
            }, partitionRootPath: {
                serializedName: "partitionRootPath",
                type: {
                    name: "any",
                },
            }, deleteFilesAfterCompletion: {
                serializedName: "deleteFilesAfterCompletion",
                type: {
                    name: "any",
                },
            }, modifiedDatetimeStart: {
                serializedName: "modifiedDatetimeStart",
                type: {
                    name: "any",
                },
            }, modifiedDatetimeEnd: {
                serializedName: "modifiedDatetimeEnd",
                type: {
                    name: "any",
                },
            } }),
    },
};
exports.AzureBlobFSReadSettings = {
    serializedName: "AzureBlobFSReadSettings",
    type: {
        name: "Composite",
        className: "AzureBlobFSReadSettings",
        uberParent: "StoreReadSettings",
        additionalProperties: { type: { name: "Object" } },
        polymorphicDiscriminator: exports.StoreReadSettings.type.polymorphicDiscriminator,
        modelProperties: Object.assign(Object.assign({}, exports.StoreReadSettings.type.modelProperties), { recursive: {
                serializedName: "recursive",
                type: {
                    name: "any",
                },
            }, wildcardFolderPath: {
                serializedName: "wildcardFolderPath",
                type: {
                    name: "any",
                },
            }, wildcardFileName: {
                serializedName: "wildcardFileName",
                type: {
                    name: "any",
                },
            }, fileListPath: {
                serializedName: "fileListPath",
                type: {
                    name: "any",
                },
            }, enablePartitionDiscovery: {
                serializedName: "enablePartitionDiscovery",
                type: {
                    name: "any",
                },
            }, partitionRootPath: {
                serializedName: "partitionRootPath",
                type: {
                    name: "any",
                },
            }, deleteFilesAfterCompletion: {
                serializedName: "deleteFilesAfterCompletion",
                type: {
                    name: "any",
                },
            }, modifiedDatetimeStart: {
                serializedName: "modifiedDatetimeStart",
                type: {
                    name: "any",
                },
            }, modifiedDatetimeEnd: {
                serializedName: "modifiedDatetimeEnd",
                type: {
                    name: "any",
                },
            } }),
    },
};
exports.AzureDataLakeStoreReadSettings = {
    serializedName: "AzureDataLakeStoreReadSettings",
    type: {
        name: "Composite",
        className: "AzureDataLakeStoreReadSettings",
        uberParent: "StoreReadSettings",
        additionalProperties: { type: { name: "Object" } },
        polymorphicDiscriminator: exports.StoreReadSettings.type.polymorphicDiscriminator,
        modelProperties: Object.assign(Object.assign({}, exports.StoreReadSettings.type.modelProperties), { recursive: {
                serializedName: "recursive",
                type: {
                    name: "any",
                },
            }, wildcardFolderPath: {
                serializedName: "wildcardFolderPath",
                type: {
                    name: "any",
                },
            }, wildcardFileName: {
                serializedName: "wildcardFileName",
                type: {
                    name: "any",
                },
            }, fileListPath: {
                serializedName: "fileListPath",
                type: {
                    name: "any",
                },
            }, listAfter: {
                serializedName: "listAfter",
                type: {
                    name: "any",
                },
            }, listBefore: {
                serializedName: "listBefore",
                type: {
                    name: "any",
                },
            }, enablePartitionDiscovery: {
                serializedName: "enablePartitionDiscovery",
                type: {
                    name: "any",
                },
            }, partitionRootPath: {
                serializedName: "partitionRootPath",
                type: {
                    name: "any",
                },
            }, deleteFilesAfterCompletion: {
                serializedName: "deleteFilesAfterCompletion",
                type: {
                    name: "any",
                },
            }, modifiedDatetimeStart: {
                serializedName: "modifiedDatetimeStart",
                type: {
                    name: "any",
                },
            }, modifiedDatetimeEnd: {
                serializedName: "modifiedDatetimeEnd",
                type: {
                    name: "any",
                },
            } }),
    },
};
exports.AmazonS3ReadSettings = {
    serializedName: "AmazonS3ReadSettings",
    type: {
        name: "Composite",
        className: "AmazonS3ReadSettings",
        uberParent: "StoreReadSettings",
        additionalProperties: { type: { name: "Object" } },
        polymorphicDiscriminator: exports.StoreReadSettings.type.polymorphicDiscriminator,
        modelProperties: Object.assign(Object.assign({}, exports.StoreReadSettings.type.modelProperties), { recursive: {
                serializedName: "recursive",
                type: {
                    name: "any",
                },
            }, wildcardFolderPath: {
                serializedName: "wildcardFolderPath",
                type: {
                    name: "any",
                },
            }, wildcardFileName: {
                serializedName: "wildcardFileName",
                type: {
                    name: "any",
                },
            }, prefix: {
                serializedName: "prefix",
                type: {
                    name: "any",
                },
            }, fileListPath: {
                serializedName: "fileListPath",
                type: {
                    name: "any",
                },
            }, enablePartitionDiscovery: {
                serializedName: "enablePartitionDiscovery",
                type: {
                    name: "any",
                },
            }, partitionRootPath: {
                serializedName: "partitionRootPath",
                type: {
                    name: "any",
                },
            }, deleteFilesAfterCompletion: {
                serializedName: "deleteFilesAfterCompletion",
                type: {
                    name: "any",
                },
            }, modifiedDatetimeStart: {
                serializedName: "modifiedDatetimeStart",
                type: {
                    name: "any",
                },
            }, modifiedDatetimeEnd: {
                serializedName: "modifiedDatetimeEnd",
                type: {
                    name: "any",
                },
            } }),
    },
};
exports.FileServerReadSettings = {
    serializedName: "FileServerReadSettings",
    type: {
        name: "Composite",
        className: "FileServerReadSettings",
        uberParent: "StoreReadSettings",
        additionalProperties: { type: { name: "Object" } },
        polymorphicDiscriminator: exports.StoreReadSettings.type.polymorphicDiscriminator,
        modelProperties: Object.assign(Object.assign({}, exports.StoreReadSettings.type.modelProperties), { recursive: {
                serializedName: "recursive",
                type: {
                    name: "any",
                },
            }, wildcardFolderPath: {
                serializedName: "wildcardFolderPath",
                type: {
                    name: "any",
                },
            }, wildcardFileName: {
                serializedName: "wildcardFileName",
                type: {
                    name: "any",
                },
            }, fileListPath: {
                serializedName: "fileListPath",
                type: {
                    name: "any",
                },
            }, enablePartitionDiscovery: {
                serializedName: "enablePartitionDiscovery",
                type: {
                    name: "any",
                },
            }, partitionRootPath: {
                serializedName: "partitionRootPath",
                type: {
                    name: "any",
                },
            }, deleteFilesAfterCompletion: {
                serializedName: "deleteFilesAfterCompletion",
                type: {
                    name: "any",
                },
            }, modifiedDatetimeStart: {
                serializedName: "modifiedDatetimeStart",
                type: {
                    name: "any",
                },
            }, modifiedDatetimeEnd: {
                serializedName: "modifiedDatetimeEnd",
                type: {
                    name: "any",
                },
            }, fileFilter: {
                serializedName: "fileFilter",
                type: {
                    name: "any",
                },
            } }),
    },
};
exports.AzureFileStorageReadSettings = {
    serializedName: "AzureFileStorageReadSettings",
    type: {
        name: "Composite",
        className: "AzureFileStorageReadSettings",
        uberParent: "StoreReadSettings",
        additionalProperties: { type: { name: "Object" } },
        polymorphicDiscriminator: exports.StoreReadSettings.type.polymorphicDiscriminator,
        modelProperties: Object.assign(Object.assign({}, exports.StoreReadSettings.type.modelProperties), { recursive: {
                serializedName: "recursive",
                type: {
                    name: "any",
                },
            }, wildcardFolderPath: {
                serializedName: "wildcardFolderPath",
                type: {
                    name: "any",
                },
            }, wildcardFileName: {
                serializedName: "wildcardFileName",
                type: {
                    name: "any",
                },
            }, prefix: {
                serializedName: "prefix",
                type: {
                    name: "any",
                },
            }, fileListPath: {
                serializedName: "fileListPath",
                type: {
                    name: "any",
                },
            }, enablePartitionDiscovery: {
                serializedName: "enablePartitionDiscovery",
                type: {
                    name: "any",
                },
            }, partitionRootPath: {
                serializedName: "partitionRootPath",
                type: {
                    name: "any",
                },
            }, deleteFilesAfterCompletion: {
                serializedName: "deleteFilesAfterCompletion",
                type: {
                    name: "any",
                },
            }, modifiedDatetimeStart: {
                serializedName: "modifiedDatetimeStart",
                type: {
                    name: "any",
                },
            }, modifiedDatetimeEnd: {
                serializedName: "modifiedDatetimeEnd",
                type: {
                    name: "any",
                },
            } }),
    },
};
exports.GoogleCloudStorageReadSettings = {
    serializedName: "GoogleCloudStorageReadSettings",
    type: {
        name: "Composite",
        className: "GoogleCloudStorageReadSettings",
        uberParent: "StoreReadSettings",
        additionalProperties: { type: { name: "Object" } },
        polymorphicDiscriminator: exports.StoreReadSettings.type.polymorphicDiscriminator,
        modelProperties: Object.assign(Object.assign({}, exports.StoreReadSettings.type.modelProperties), { recursive: {
                serializedName: "recursive",
                type: {
                    name: "any",
                },
            }, wildcardFolderPath: {
                serializedName: "wildcardFolderPath",
                type: {
                    name: "any",
                },
            }, wildcardFileName: {
                serializedName: "wildcardFileName",
                type: {
                    name: "any",
                },
            }, prefix: {
                serializedName: "prefix",
                type: {
                    name: "any",
                },
            }, fileListPath: {
                serializedName: "fileListPath",
                type: {
                    name: "any",
                },
            }, enablePartitionDiscovery: {
                serializedName: "enablePartitionDiscovery",
                type: {
                    name: "any",
                },
            }, partitionRootPath: {
                serializedName: "partitionRootPath",
                type: {
                    name: "any",
                },
            }, deleteFilesAfterCompletion: {
                serializedName: "deleteFilesAfterCompletion",
                type: {
                    name: "any",
                },
            }, modifiedDatetimeStart: {
                serializedName: "modifiedDatetimeStart",
                type: {
                    name: "any",
                },
            }, modifiedDatetimeEnd: {
                serializedName: "modifiedDatetimeEnd",
                type: {
                    name: "any",
                },
            } }),
    },
};
exports.FtpReadSettings = {
    serializedName: "FtpReadSettings",
    type: {
        name: "Composite",
        className: "FtpReadSettings",
        uberParent: "StoreReadSettings",
        additionalProperties: { type: { name: "Object" } },
        polymorphicDiscriminator: exports.StoreReadSettings.type.polymorphicDiscriminator,
        modelProperties: Object.assign(Object.assign({}, exports.StoreReadSettings.type.modelProperties), { recursive: {
                serializedName: "recursive",
                type: {
                    name: "any",
                },
            }, wildcardFolderPath: {
                serializedName: "wildcardFolderPath",
                type: {
                    name: "any",
                },
            }, wildcardFileName: {
                serializedName: "wildcardFileName",
                type: {
                    name: "any",
                },
            }, enablePartitionDiscovery: {
                serializedName: "enablePartitionDiscovery",
                type: {
                    name: "any",
                },
            }, partitionRootPath: {
                serializedName: "partitionRootPath",
                type: {
                    name: "any",
                },
            }, deleteFilesAfterCompletion: {
                serializedName: "deleteFilesAfterCompletion",
                type: {
                    name: "any",
                },
            }, fileListPath: {
                serializedName: "fileListPath",
                type: {
                    name: "any",
                },
            }, useBinaryTransfer: {
                serializedName: "useBinaryTransfer",
                type: {
                    name: "any",
                },
            }, disableChunking: {
                serializedName: "disableChunking",
                type: {
                    name: "any",
                },
            } }),
    },
};
exports.SftpReadSettings = {
    serializedName: "SftpReadSettings",
    type: {
        name: "Composite",
        className: "SftpReadSettings",
        uberParent: "StoreReadSettings",
        additionalProperties: { type: { name: "Object" } },
        polymorphicDiscriminator: exports.StoreReadSettings.type.polymorphicDiscriminator,
        modelProperties: Object.assign(Object.assign({}, exports.StoreReadSettings.type.modelProperties), { recursive: {
                serializedName: "recursive",
                type: {
                    name: "any",
                },
            }, wildcardFolderPath: {
                serializedName: "wildcardFolderPath",
                type: {
                    name: "any",
                },
            }, wildcardFileName: {
                serializedName: "wildcardFileName",
                type: {
                    name: "any",
                },
            }, enablePartitionDiscovery: {
                serializedName: "enablePartitionDiscovery",
                type: {
                    name: "any",
                },
            }, partitionRootPath: {
                serializedName: "partitionRootPath",
                type: {
                    name: "any",
                },
            }, fileListPath: {
                serializedName: "fileListPath",
                type: {
                    name: "any",
                },
            }, deleteFilesAfterCompletion: {
                serializedName: "deleteFilesAfterCompletion",
                type: {
                    name: "any",
                },
            }, modifiedDatetimeStart: {
                serializedName: "modifiedDatetimeStart",
                type: {
                    name: "any",
                },
            }, modifiedDatetimeEnd: {
                serializedName: "modifiedDatetimeEnd",
                type: {
                    name: "any",
                },
            }, disableChunking: {
                serializedName: "disableChunking",
                type: {
                    name: "any",
                },
            } }),
    },
};
exports.HttpReadSettings = {
    serializedName: "HttpReadSettings",
    type: {
        name: "Composite",
        className: "HttpReadSettings",
        uberParent: "StoreReadSettings",
        additionalProperties: { type: { name: "Object" } },
        polymorphicDiscriminator: exports.StoreReadSettings.type.polymorphicDiscriminator,
        modelProperties: Object.assign(Object.assign({}, exports.StoreReadSettings.type.modelProperties), { requestMethod: {
                serializedName: "requestMethod",
                type: {
                    name: "any",
                },
            }, requestBody: {
                serializedName: "requestBody",
                type: {
                    name: "any",
                },
            }, additionalHeaders: {
                serializedName: "additionalHeaders",
                type: {
                    name: "any",
                },
            }, requestTimeout: {
                serializedName: "requestTimeout",
                type: {
                    name: "any",
                },
            }, enablePartitionDiscovery: {
                serializedName: "enablePartitionDiscovery",
                type: {
                    name: "any",
                },
            }, partitionRootPath: {
                serializedName: "partitionRootPath",
                type: {
                    name: "any",
                },
            }, additionalColumns: {
                serializedName: "additionalColumns",
                type: {
                    name: "any",
                },
            } }),
    },
};
exports.HdfsReadSettings = {
    serializedName: "HdfsReadSettings",
    type: {
        name: "Composite",
        className: "HdfsReadSettings",
        uberParent: "StoreReadSettings",
        additionalProperties: { type: { name: "Object" } },
        polymorphicDiscriminator: exports.StoreReadSettings.type.polymorphicDiscriminator,
        modelProperties: Object.assign(Object.assign({}, exports.StoreReadSettings.type.modelProperties), { recursive: {
                serializedName: "recursive",
                type: {
                    name: "any",
                },
            }, wildcardFolderPath: {
                serializedName: "wildcardFolderPath",
                type: {
                    name: "any",
                },
            }, wildcardFileName: {
                serializedName: "wildcardFileName",
                type: {
                    name: "any",
                },
            }, fileListPath: {
                serializedName: "fileListPath",
                type: {
                    name: "any",
                },
            }, enablePartitionDiscovery: {
                serializedName: "enablePartitionDiscovery",
                type: {
                    name: "any",
                },
            }, partitionRootPath: {
                serializedName: "partitionRootPath",
                type: {
                    name: "any",
                },
            }, modifiedDatetimeStart: {
                serializedName: "modifiedDatetimeStart",
                type: {
                    name: "any",
                },
            }, modifiedDatetimeEnd: {
                serializedName: "modifiedDatetimeEnd",
                type: {
                    name: "any",
                },
            }, distcpSettings: {
                serializedName: "distcpSettings",
                type: {
                    name: "Composite",
                    className: "DistcpSettings",
                },
            }, deleteFilesAfterCompletion: {
                serializedName: "deleteFilesAfterCompletion",
                type: {
                    name: "any",
                },
            } }),
    },
};
exports.LakeHouseReadSettings = {
    serializedName: "LakeHouseReadSettings",
    type: {
        name: "Composite",
        className: "LakeHouseReadSettings",
        uberParent: "StoreReadSettings",
        additionalProperties: { type: { name: "Object" } },
        polymorphicDiscriminator: exports.StoreReadSettings.type.polymorphicDiscriminator,
        modelProperties: Object.assign(Object.assign({}, exports.StoreReadSettings.type.modelProperties), { recursive: {
                serializedName: "recursive",
                type: {
                    name: "any",
                },
            }, wildcardFolderPath: {
                serializedName: "wildcardFolderPath",
                type: {
                    name: "any",
                },
            }, wildcardFileName: {
                serializedName: "wildcardFileName",
                type: {
                    name: "any",
                },
            }, fileListPath: {
                serializedName: "fileListPath",
                type: {
                    name: "any",
                },
            }, enablePartitionDiscovery: {
                serializedName: "enablePartitionDiscovery",
                type: {
                    name: "any",
                },
            }, partitionRootPath: {
                serializedName: "partitionRootPath",
                type: {
                    name: "any",
                },
            }, deleteFilesAfterCompletion: {
                serializedName: "deleteFilesAfterCompletion",
                type: {
                    name: "any",
                },
            }, modifiedDatetimeStart: {
                serializedName: "modifiedDatetimeStart",
                type: {
                    name: "any",
                },
            }, modifiedDatetimeEnd: {
                serializedName: "modifiedDatetimeEnd",
                type: {
                    name: "any",
                },
            } }),
    },
};
exports.SftpWriteSettings = {
    serializedName: "SftpWriteSettings",
    type: {
        name: "Composite",
        className: "SftpWriteSettings",
        uberParent: "StoreWriteSettings",
        additionalProperties: { type: { name: "Object" } },
        polymorphicDiscriminator: exports.StoreWriteSettings.type.polymorphicDiscriminator,
        modelProperties: Object.assign(Object.assign({}, exports.StoreWriteSettings.type.modelProperties), { operationTimeout: {
                serializedName: "operationTimeout",
                type: {
                    name: "any",
                },
            }, useTempFileRename: {
                serializedName: "useTempFileRename",
                type: {
                    name: "any",
                },
            } }),
    },
};
exports.AzureBlobStorageWriteSettings = {
    serializedName: "AzureBlobStorageWriteSettings",
    type: {
        name: "Composite",
        className: "AzureBlobStorageWriteSettings",
        uberParent: "StoreWriteSettings",
        additionalProperties: { type: { name: "Object" } },
        polymorphicDiscriminator: exports.StoreWriteSettings.type.polymorphicDiscriminator,
        modelProperties: Object.assign(Object.assign({}, exports.StoreWriteSettings.type.modelProperties), { blockSizeInMB: {
                serializedName: "blockSizeInMB",
                type: {
                    name: "any",
                },
            } }),
    },
};
exports.AzureBlobFSWriteSettings = {
    serializedName: "AzureBlobFSWriteSettings",
    type: {
        name: "Composite",
        className: "AzureBlobFSWriteSettings",
        uberParent: "StoreWriteSettings",
        additionalProperties: { type: { name: "Object" } },
        polymorphicDiscriminator: exports.StoreWriteSettings.type.polymorphicDiscriminator,
        modelProperties: Object.assign(Object.assign({}, exports.StoreWriteSettings.type.modelProperties), { blockSizeInMB: {
                serializedName: "blockSizeInMB",
                type: {
                    name: "any",
                },
            } }),
    },
};
exports.AzureDataLakeStoreWriteSettings = {
    serializedName: "AzureDataLakeStoreWriteSettings",
    type: {
        name: "Composite",
        className: "AzureDataLakeStoreWriteSettings",
        uberParent: "StoreWriteSettings",
        additionalProperties: { type: { name: "Object" } },
        polymorphicDiscriminator: exports.StoreWriteSettings.type.polymorphicDiscriminator,
        modelProperties: Object.assign(Object.assign({}, exports.StoreWriteSettings.type.modelProperties), { expiryDateTime: {
                serializedName: "expiryDateTime",
                type: {
                    name: "any",
                },
            } }),
    },
};
exports.FileServerWriteSettings = {
    serializedName: "FileServerWriteSettings",
    type: {
        name: "Composite",
        className: "FileServerWriteSettings",
        uberParent: "StoreWriteSettings",
        additionalProperties: { type: { name: "Object" } },
        polymorphicDiscriminator: exports.StoreWriteSettings.type.polymorphicDiscriminator,
        modelProperties: Object.assign({}, exports.StoreWriteSettings.type.modelProperties),
    },
};
exports.AzureFileStorageWriteSettings = {
    serializedName: "AzureFileStorageWriteSettings",
    type: {
        name: "Composite",
        className: "AzureFileStorageWriteSettings",
        uberParent: "StoreWriteSettings",
        additionalProperties: { type: { name: "Object" } },
        polymorphicDiscriminator: exports.StoreWriteSettings.type.polymorphicDiscriminator,
        modelProperties: Object.assign({}, exports.StoreWriteSettings.type.modelProperties),
    },
};
exports.LakeHouseWriteSettings = {
    serializedName: "LakeHouseWriteSettings",
    type: {
        name: "Composite",
        className: "LakeHouseWriteSettings",
        uberParent: "StoreWriteSettings",
        additionalProperties: { type: { name: "Object" } },
        polymorphicDiscriminator: exports.StoreWriteSettings.type.polymorphicDiscriminator,
        modelProperties: Object.assign({}, exports.StoreWriteSettings.type.modelProperties),
    },
};
exports.ParquetReadSettings = {
    serializedName: "ParquetReadSettings",
    type: {
        name: "Composite",
        className: "ParquetReadSettings",
        uberParent: "FormatReadSettings",
        additionalProperties: { type: { name: "Object" } },
        polymorphicDiscriminator: exports.FormatReadSettings.type.polymorphicDiscriminator,
        modelProperties: Object.assign(Object.assign({}, exports.FormatReadSettings.type.modelProperties), { compressionProperties: {
                serializedName: "compressionProperties",
                type: {
                    name: "Composite",
                    className: "CompressionReadSettings",
                },
            } }),
    },
};
exports.DelimitedTextReadSettings = {
    serializedName: "DelimitedTextReadSettings",
    type: {
        name: "Composite",
        className: "DelimitedTextReadSettings",
        uberParent: "FormatReadSettings",
        additionalProperties: { type: { name: "Object" } },
        polymorphicDiscriminator: exports.FormatReadSettings.type.polymorphicDiscriminator,
        modelProperties: Object.assign(Object.assign({}, exports.FormatReadSettings.type.modelProperties), { skipLineCount: {
                serializedName: "skipLineCount",
                type: {
                    name: "any",
                },
            }, compressionProperties: {
                serializedName: "compressionProperties",
                type: {
                    name: "Composite",
                    className: "CompressionReadSettings",
                },
            } }),
    },
};
exports.JsonReadSettings = {
    serializedName: "JsonReadSettings",
    type: {
        name: "Composite",
        className: "JsonReadSettings",
        uberParent: "FormatReadSettings",
        additionalProperties: { type: { name: "Object" } },
        polymorphicDiscriminator: exports.FormatReadSettings.type.polymorphicDiscriminator,
        modelProperties: Object.assign(Object.assign({}, exports.FormatReadSettings.type.modelProperties), { compressionProperties: {
                serializedName: "compressionProperties",
                type: {
                    name: "Composite",
                    className: "CompressionReadSettings",
                },
            } }),
    },
};
exports.XmlReadSettings = {
    serializedName: "XmlReadSettings",
    type: {
        name: "Composite",
        className: "XmlReadSettings",
        uberParent: "FormatReadSettings",
        additionalProperties: { type: { name: "Object" } },
        polymorphicDiscriminator: exports.FormatReadSettings.type.polymorphicDiscriminator,
        modelProperties: Object.assign(Object.assign({}, exports.FormatReadSettings.type.modelProperties), { compressionProperties: {
                serializedName: "compressionProperties",
                type: {
                    name: "Composite",
                    className: "CompressionReadSettings",
                },
            }, validationMode: {
                serializedName: "validationMode",
                type: {
                    name: "any",
                },
            }, detectDataType: {
                serializedName: "detectDataType",
                type: {
                    name: "any",
                },
            }, namespaces: {
                serializedName: "namespaces",
                type: {
                    name: "any",
                },
            }, namespacePrefixes: {
                serializedName: "namespacePrefixes",
                type: {
                    name: "any",
                },
            } }),
    },
};
exports.BinaryReadSettings = {
    serializedName: "BinaryReadSettings",
    type: {
        name: "Composite",
        className: "BinaryReadSettings",
        uberParent: "FormatReadSettings",
        additionalProperties: { type: { name: "Object" } },
        polymorphicDiscriminator: exports.FormatReadSettings.type.polymorphicDiscriminator,
        modelProperties: Object.assign(Object.assign({}, exports.FormatReadSettings.type.modelProperties), { compressionProperties: {
                serializedName: "compressionProperties",
                type: {
                    name: "Composite",
                    className: "CompressionReadSettings",
                },
            } }),
    },
};
exports.ZipDeflateReadSettings = {
    serializedName: "ZipDeflateReadSettings",
    type: {
        name: "Composite",
        className: "ZipDeflateReadSettings",
        uberParent: "CompressionReadSettings",
        additionalProperties: { type: { name: "Object" } },
        polymorphicDiscriminator: exports.CompressionReadSettings.type.polymorphicDiscriminator,
        modelProperties: Object.assign(Object.assign({}, exports.CompressionReadSettings.type.modelProperties), { preserveZipFileNameAsFolder: {
                serializedName: "preserveZipFileNameAsFolder",
                type: {
                    name: "any",
                },
            } }),
    },
};
exports.TarReadSettings = {
    serializedName: "TarReadSettings",
    type: {
        name: "Composite",
        className: "TarReadSettings",
        uberParent: "CompressionReadSettings",
        additionalProperties: { type: { name: "Object" } },
        polymorphicDiscriminator: exports.CompressionReadSettings.type.polymorphicDiscriminator,
        modelProperties: Object.assign(Object.assign({}, exports.CompressionReadSettings.type.modelProperties), { preserveCompressionFileNameAsFolder: {
                serializedName: "preserveCompressionFileNameAsFolder",
                type: {
                    name: "any",
                },
            } }),
    },
};
exports.TarGZipReadSettings = {
    serializedName: "TarGZipReadSettings",
    type: {
        name: "Composite",
        className: "TarGZipReadSettings",
        uberParent: "CompressionReadSettings",
        additionalProperties: { type: { name: "Object" } },
        polymorphicDiscriminator: exports.CompressionReadSettings.type.polymorphicDiscriminator,
        modelProperties: Object.assign(Object.assign({}, exports.CompressionReadSettings.type.modelProperties), { preserveCompressionFileNameAsFolder: {
                serializedName: "preserveCompressionFileNameAsFolder",
                type: {
                    name: "any",
                },
            } }),
    },
};
exports.AvroWriteSettings = {
    serializedName: "AvroWriteSettings",
    type: {
        name: "Composite",
        className: "AvroWriteSettings",
        uberParent: "FormatWriteSettings",
        additionalProperties: { type: { name: "Object" } },
        polymorphicDiscriminator: exports.FormatWriteSettings.type.polymorphicDiscriminator,
        modelProperties: Object.assign(Object.assign({}, exports.FormatWriteSettings.type.modelProperties), { recordName: {
                serializedName: "recordName",
                type: {
                    name: "String",
                },
            }, recordNamespace: {
                serializedName: "recordNamespace",
                type: {
                    name: "String",
                },
            }, maxRowsPerFile: {
                serializedName: "maxRowsPerFile",
                type: {
                    name: "any",
                },
            }, fileNamePrefix: {
                serializedName: "fileNamePrefix",
                type: {
                    name: "any",
                },
            } }),
    },
};
exports.OrcWriteSettings = {
    serializedName: "OrcWriteSettings",
    type: {
        name: "Composite",
        className: "OrcWriteSettings",
        uberParent: "FormatWriteSettings",
        additionalProperties: { type: { name: "Object" } },
        polymorphicDiscriminator: exports.FormatWriteSettings.type.polymorphicDiscriminator,
        modelProperties: Object.assign(Object.assign({}, exports.FormatWriteSettings.type.modelProperties), { maxRowsPerFile: {
                serializedName: "maxRowsPerFile",
                type: {
                    name: "any",
                },
            }, fileNamePrefix: {
                serializedName: "fileNamePrefix",
                type: {
                    name: "any",
                },
            } }),
    },
};
exports.ParquetWriteSettings = {
    serializedName: "ParquetWriteSettings",
    type: {
        name: "Composite",
        className: "ParquetWriteSettings",
        uberParent: "FormatWriteSettings",
        additionalProperties: { type: { name: "Object" } },
        polymorphicDiscriminator: exports.FormatWriteSettings.type.polymorphicDiscriminator,
        modelProperties: Object.assign(Object.assign({}, exports.FormatWriteSettings.type.modelProperties), { maxRowsPerFile: {
                serializedName: "maxRowsPerFile",
                type: {
                    name: "any",
                },
            }, fileNamePrefix: {
                serializedName: "fileNamePrefix",
                type: {
                    name: "any",
                },
            } }),
    },
};
exports.DelimitedTextWriteSettings = {
    serializedName: "DelimitedTextWriteSettings",
    type: {
        name: "Composite",
        className: "DelimitedTextWriteSettings",
        uberParent: "FormatWriteSettings",
        additionalProperties: { type: { name: "Object" } },
        polymorphicDiscriminator: exports.FormatWriteSettings.type.polymorphicDiscriminator,
        modelProperties: Object.assign(Object.assign({}, exports.FormatWriteSettings.type.modelProperties), { quoteAllText: {
                serializedName: "quoteAllText",
                type: {
                    name: "any",
                },
            }, fileExtension: {
                serializedName: "fileExtension",
                required: true,
                type: {
                    name: "any",
                },
            }, maxRowsPerFile: {
                serializedName: "maxRowsPerFile",
                type: {
                    name: "any",
                },
            }, fileNamePrefix: {
                serializedName: "fileNamePrefix",
                type: {
                    name: "any",
                },
            } }),
    },
};
exports.JsonWriteSettings = {
    serializedName: "JsonWriteSettings",
    type: {
        name: "Composite",
        className: "JsonWriteSettings",
        uberParent: "FormatWriteSettings",
        additionalProperties: { type: { name: "Object" } },
        polymorphicDiscriminator: exports.FormatWriteSettings.type.polymorphicDiscriminator,
        modelProperties: Object.assign(Object.assign({}, exports.FormatWriteSettings.type.modelProperties), { filePattern: {
                serializedName: "filePattern",
                type: {
                    name: "any",
                },
            } }),
    },
};
exports.IcebergWriteSettings = {
    serializedName: "IcebergWriteSettings",
    type: {
        name: "Composite",
        className: "IcebergWriteSettings",
        uberParent: "FormatWriteSettings",
        additionalProperties: { type: { name: "Object" } },
        polymorphicDiscriminator: exports.FormatWriteSettings.type.polymorphicDiscriminator,
        modelProperties: Object.assign({}, exports.FormatWriteSettings.type.modelProperties),
    },
};
exports.AvroSource = {
    serializedName: "AvroSource",
    type: {
        name: "Composite",
        className: "AvroSource",
        uberParent: "CopySource",
        additionalProperties: { type: { name: "Object" } },
        polymorphicDiscriminator: exports.CopySource.type.polymorphicDiscriminator,
        modelProperties: Object.assign(Object.assign({}, exports.CopySource.type.modelProperties), { storeSettings: {
                serializedName: "storeSettings",
                type: {
                    name: "Composite",
                    className: "StoreReadSettings",
                },
            }, additionalColumns: {
                serializedName: "additionalColumns",
                type: {
                    name: "any",
                },
            } }),
    },
};
exports.ExcelSource = {
    serializedName: "ExcelSource",
    type: {
        name: "Composite",
        className: "ExcelSource",
        uberParent: "CopySource",
        additionalProperties: { type: { name: "Object" } },
        polymorphicDiscriminator: exports.CopySource.type.polymorphicDiscriminator,
        modelProperties: Object.assign(Object.assign({}, exports.CopySource.type.modelProperties), { storeSettings: {
                serializedName: "storeSettings",
                type: {
                    name: "Composite",
                    className: "StoreReadSettings",
                },
            }, additionalColumns: {
                serializedName: "additionalColumns",
                type: {
                    name: "any",
                },
            } }),
    },
};
exports.ParquetSource = {
    serializedName: "ParquetSource",
    type: {
        name: "Composite",
        className: "ParquetSource",
        uberParent: "CopySource",
        additionalProperties: { type: { name: "Object" } },
        polymorphicDiscriminator: exports.CopySource.type.polymorphicDiscriminator,
        modelProperties: Object.assign(Object.assign({}, exports.CopySource.type.modelProperties), { storeSettings: {
                serializedName: "storeSettings",
                type: {
                    name: "Composite",
                    className: "StoreReadSettings",
                },
            }, formatSettings: {
                serializedName: "formatSettings",
                type: {
                    name: "Composite",
                    className: "ParquetReadSettings",
                },
            }, additionalColumns: {
                serializedName: "additionalColumns",
                type: {
                    name: "any",
                },
            } }),
    },
};
exports.DelimitedTextSource = {
    serializedName: "DelimitedTextSource",
    type: {
        name: "Composite",
        className: "DelimitedTextSource",
        uberParent: "CopySource",
        additionalProperties: { type: { name: "Object" } },
        polymorphicDiscriminator: exports.CopySource.type.polymorphicDiscriminator,
        modelProperties: Object.assign(Object.assign({}, exports.CopySource.type.modelProperties), { storeSettings: {
                serializedName: "storeSettings",
                type: {
                    name: "Composite",
                    className: "StoreReadSettings",
                },
            }, formatSettings: {
                serializedName: "formatSettings",
                type: {
                    name: "Composite",
                    className: "DelimitedTextReadSettings",
                },
            }, additionalColumns: {
                serializedName: "additionalColumns",
                type: {
                    name: "any",
                },
            } }),
    },
};
exports.JsonSource = {
    serializedName: "JsonSource",
    type: {
        name: "Composite",
        className: "JsonSource",
        uberParent: "CopySource",
        additionalProperties: { type: { name: "Object" } },
        polymorphicDiscriminator: exports.CopySource.type.polymorphicDiscriminator,
        modelProperties: Object.assign(Object.assign({}, exports.CopySource.type.modelProperties), { storeSettings: {
                serializedName: "storeSettings",
                type: {
                    name: "Composite",
                    className: "StoreReadSettings",
                },
            }, formatSettings: {
                serializedName: "formatSettings",
                type: {
                    name: "Composite",
                    className: "JsonReadSettings",
                },
            }, additionalColumns: {
                serializedName: "additionalColumns",
                type: {
                    name: "any",
                },
            } }),
    },
};
exports.XmlSource = {
    serializedName: "XmlSource",
    type: {
        name: "Composite",
        className: "XmlSource",
        uberParent: "CopySource",
        additionalProperties: { type: { name: "Object" } },
        polymorphicDiscriminator: exports.CopySource.type.polymorphicDiscriminator,
        modelProperties: Object.assign(Object.assign({}, exports.CopySource.type.modelProperties), { storeSettings: {
                serializedName: "storeSettings",
                type: {
                    name: "Composite",
                    className: "StoreReadSettings",
                },
            }, formatSettings: {
                serializedName: "formatSettings",
                type: {
                    name: "Composite",
                    className: "XmlReadSettings",
                },
            }, additionalColumns: {
                serializedName: "additionalColumns",
                type: {
                    name: "any",
                },
            } }),
    },
};
exports.OrcSource = {
    serializedName: "OrcSource",
    type: {
        name: "Composite",
        className: "OrcSource",
        uberParent: "CopySource",
        additionalProperties: { type: { name: "Object" } },
        polymorphicDiscriminator: exports.CopySource.type.polymorphicDiscriminator,
        modelProperties: Object.assign(Object.assign({}, exports.CopySource.type.modelProperties), { storeSettings: {
                serializedName: "storeSettings",
                type: {
                    name: "Composite",
                    className: "StoreReadSettings",
                },
            }, additionalColumns: {
                serializedName: "additionalColumns",
                type: {
                    name: "any",
                },
            } }),
    },
};
exports.BinarySource = {
    serializedName: "BinarySource",
    type: {
        name: "Composite",
        className: "BinarySource",
        uberParent: "CopySource",
        additionalProperties: { type: { name: "Object" } },
        polymorphicDiscriminator: exports.CopySource.type.polymorphicDiscriminator,
        modelProperties: Object.assign(Object.assign({}, exports.CopySource.type.modelProperties), { storeSettings: {
                serializedName: "storeSettings",
                type: {
                    name: "Composite",
                    className: "StoreReadSettings",
                },
            }, formatSettings: {
                serializedName: "formatSettings",
                type: {
                    name: "Composite",
                    className: "BinaryReadSettings",
                },
            } }),
    },
};
exports.TabularSource = {
    serializedName: "TabularSource",
    type: {
        name: "Composite",
        className: "TabularSource",
        uberParent: "CopySource",
        additionalProperties: { type: { name: "Object" } },
        polymorphicDiscriminator: {
            serializedName: "type",
            clientName: "type",
        },
        modelProperties: Object.assign(Object.assign({}, exports.CopySource.type.modelProperties), { queryTimeout: {
                serializedName: "queryTimeout",
                type: {
                    name: "any",
                },
            }, additionalColumns: {
                serializedName: "additionalColumns",
                type: {
                    name: "any",
                },
            } }),
    },
};
exports.BlobSource = {
    serializedName: "BlobSource",
    type: {
        name: "Composite",
        className: "BlobSource",
        uberParent: "CopySource",
        additionalProperties: { type: { name: "Object" } },
        polymorphicDiscriminator: exports.CopySource.type.polymorphicDiscriminator,
        modelProperties: Object.assign(Object.assign({}, exports.CopySource.type.modelProperties), { treatEmptyAsNull: {
                serializedName: "treatEmptyAsNull",
                type: {
                    name: "any",
                },
            }, skipHeaderLineCount: {
                serializedName: "skipHeaderLineCount",
                type: {
                    name: "any",
                },
            }, recursive: {
                serializedName: "recursive",
                type: {
                    name: "any",
                },
            } }),
    },
};
exports.DocumentDbCollectionSource = {
    serializedName: "DocumentDbCollectionSource",
    type: {
        name: "Composite",
        className: "DocumentDbCollectionSource",
        uberParent: "CopySource",
        additionalProperties: { type: { name: "Object" } },
        polymorphicDiscriminator: exports.CopySource.type.polymorphicDiscriminator,
        modelProperties: Object.assign(Object.assign({}, exports.CopySource.type.modelProperties), { query: {
                serializedName: "query",
                type: {
                    name: "any",
                },
            }, nestingSeparator: {
                serializedName: "nestingSeparator",
                type: {
                    name: "any",
                },
            }, queryTimeout: {
                serializedName: "queryTimeout",
                type: {
                    name: "any",
                },
            }, additionalColumns: {
                serializedName: "additionalColumns",
                type: {
                    name: "any",
                },
            } }),
    },
};
exports.CosmosDbSqlApiSource = {
    serializedName: "CosmosDbSqlApiSource",
    type: {
        name: "Composite",
        className: "CosmosDbSqlApiSource",
        uberParent: "CopySource",
        additionalProperties: { type: { name: "Object" } },
        polymorphicDiscriminator: exports.CopySource.type.polymorphicDiscriminator,
        modelProperties: Object.assign(Object.assign({}, exports.CopySource.type.modelProperties), { query: {
                serializedName: "query",
                type: {
                    name: "any",
                },
            }, pageSize: {
                serializedName: "pageSize",
                type: {
                    name: "any",
                },
            }, preferredRegions: {
                serializedName: "preferredRegions",
                type: {
                    name: "any",
                },
            }, detectDatetime: {
                serializedName: "detectDatetime",
                type: {
                    name: "any",
                },
            }, additionalColumns: {
                serializedName: "additionalColumns",
                type: {
                    name: "any",
                },
            } }),
    },
};
exports.DynamicsSource = {
    serializedName: "DynamicsSource",
    type: {
        name: "Composite",
        className: "DynamicsSource",
        uberParent: "CopySource",
        additionalProperties: { type: { name: "Object" } },
        polymorphicDiscriminator: exports.CopySource.type.polymorphicDiscriminator,
        modelProperties: Object.assign(Object.assign({}, exports.CopySource.type.modelProperties), { query: {
                serializedName: "query",
                type: {
                    name: "any",
                },
            }, additionalColumns: {
                serializedName: "additionalColumns",
                type: {
                    name: "any",
                },
            } }),
    },
};
exports.DynamicsCrmSource = {
    serializedName: "DynamicsCrmSource",
    type: {
        name: "Composite",
        className: "DynamicsCrmSource",
        uberParent: "CopySource",
        additionalProperties: { type: { name: "Object" } },
        polymorphicDiscriminator: exports.CopySource.type.polymorphicDiscriminator,
        modelProperties: Object.assign(Object.assign({}, exports.CopySource.type.modelProperties), { query: {
                serializedName: "query",
                type: {
                    name: "any",
                },
            }, additionalColumns: {
                serializedName: "additionalColumns",
                type: {
                    name: "any",
                },
            } }),
    },
};
exports.CommonDataServiceForAppsSource = {
    serializedName: "CommonDataServiceForAppsSource",
    type: {
        name: "Composite",
        className: "CommonDataServiceForAppsSource",
        uberParent: "CopySource",
        additionalProperties: { type: { name: "Object" } },
        polymorphicDiscriminator: exports.CopySource.type.polymorphicDiscriminator,
        modelProperties: Object.assign(Object.assign({}, exports.CopySource.type.modelProperties), { query: {
                serializedName: "query",
                type: {
                    name: "any",
                },
            }, additionalColumns: {
                serializedName: "additionalColumns",
                type: {
                    name: "any",
                },
            } }),
    },
};
exports.RelationalSource = {
    serializedName: "RelationalSource",
    type: {
        name: "Composite",
        className: "RelationalSource",
        uberParent: "CopySource",
        additionalProperties: { type: { name: "Object" } },
        polymorphicDiscriminator: exports.CopySource.type.polymorphicDiscriminator,
        modelProperties: Object.assign(Object.assign({}, exports.CopySource.type.modelProperties), { query: {
                serializedName: "query",
                type: {
                    name: "any",
                },
            }, additionalColumns: {
                serializedName: "additionalColumns",
                type: {
                    name: "any",
                },
            } }),
    },
};
exports.MicrosoftAccessSource = {
    serializedName: "MicrosoftAccessSource",
    type: {
        name: "Composite",
        className: "MicrosoftAccessSource",
        uberParent: "CopySource",
        additionalProperties: { type: { name: "Object" } },
        polymorphicDiscriminator: exports.CopySource.type.polymorphicDiscriminator,
        modelProperties: Object.assign(Object.assign({}, exports.CopySource.type.modelProperties), { query: {
                serializedName: "query",
                type: {
                    name: "any",
                },
            }, additionalColumns: {
                serializedName: "additionalColumns",
                type: {
                    name: "any",
                },
            } }),
    },
};
exports.ODataSource = {
    serializedName: "ODataSource",
    type: {
        name: "Composite",
        className: "ODataSource",
        uberParent: "CopySource",
        additionalProperties: { type: { name: "Object" } },
        polymorphicDiscriminator: exports.CopySource.type.polymorphicDiscriminator,
        modelProperties: Object.assign(Object.assign({}, exports.CopySource.type.modelProperties), { query: {
                serializedName: "query",
                type: {
                    name: "any",
                },
            }, httpRequestTimeout: {
                serializedName: "httpRequestTimeout",
                type: {
                    name: "any",
                },
            }, additionalColumns: {
                serializedName: "additionalColumns",
                type: {
                    name: "any",
                },
            } }),
    },
};
exports.SalesforceServiceCloudSource = {
    serializedName: "SalesforceServiceCloudSource",
    type: {
        name: "Composite",
        className: "SalesforceServiceCloudSource",
        uberParent: "CopySource",
        additionalProperties: { type: { name: "Object" } },
        polymorphicDiscriminator: exports.CopySource.type.polymorphicDiscriminator,
        modelProperties: Object.assign(Object.assign({}, exports.CopySource.type.modelProperties), { query: {
                serializedName: "query",
                type: {
                    name: "any",
                },
            }, readBehavior: {
                serializedName: "readBehavior",
                type: {
                    name: "any",
                },
            }, additionalColumns: {
                serializedName: "additionalColumns",
                type: {
                    name: "any",
                },
            } }),
    },
};
exports.RestSource = {
    serializedName: "RestSource",
    type: {
        name: "Composite",
        className: "RestSource",
        uberParent: "CopySource",
        additionalProperties: { type: { name: "Object" } },
        polymorphicDiscriminator: exports.CopySource.type.polymorphicDiscriminator,
        modelProperties: Object.assign(Object.assign({}, exports.CopySource.type.modelProperties), { requestMethod: {
                serializedName: "requestMethod",
                type: {
                    name: "any",
                },
            }, requestBody: {
                serializedName: "requestBody",
                type: {
                    name: "any",
                },
            }, additionalHeaders: {
                serializedName: "additionalHeaders",
                type: {
                    name: "any",
                },
            }, paginationRules: {
                serializedName: "paginationRules",
                type: {
                    name: "any",
                },
            }, httpRequestTimeout: {
                serializedName: "httpRequestTimeout",
                type: {
                    name: "any",
                },
            }, requestInterval: {
                serializedName: "requestInterval",
                type: {
                    name: "any",
                },
            }, additionalColumns: {
                serializedName: "additionalColumns",
                type: {
                    name: "any",
                },
            } }),
    },
};
exports.FileSystemSource = {
    serializedName: "FileSystemSource",
    type: {
        name: "Composite",
        className: "FileSystemSource",
        uberParent: "CopySource",
        additionalProperties: { type: { name: "Object" } },
        polymorphicDiscriminator: exports.CopySource.type.polymorphicDiscriminator,
        modelProperties: Object.assign(Object.assign({}, exports.CopySource.type.modelProperties), { recursive: {
                serializedName: "recursive",
                type: {
                    name: "any",
                },
            }, additionalColumns: {
                serializedName: "additionalColumns",
                type: {
                    name: "any",
                },
            } }),
    },
};
exports.HdfsSource = {
    serializedName: "HdfsSource",
    type: {
        name: "Composite",
        className: "HdfsSource",
        uberParent: "CopySource",
        additionalProperties: { type: { name: "Object" } },
        polymorphicDiscriminator: exports.CopySource.type.polymorphicDiscriminator,
        modelProperties: Object.assign(Object.assign({}, exports.CopySource.type.modelProperties), { recursive: {
                serializedName: "recursive",
                type: {
                    name: "any",
                },
            }, distcpSettings: {
                serializedName: "distcpSettings",
                type: {
                    name: "Composite",
                    className: "DistcpSettings",
                },
            } }),
    },
};
exports.AzureDataExplorerSource = {
    serializedName: "AzureDataExplorerSource",
    type: {
        name: "Composite",
        className: "AzureDataExplorerSource",
        uberParent: "CopySource",
        additionalProperties: { type: { name: "Object" } },
        polymorphicDiscriminator: exports.CopySource.type.polymorphicDiscriminator,
        modelProperties: Object.assign(Object.assign({}, exports.CopySource.type.modelProperties), { query: {
                serializedName: "query",
                required: true,
                type: {
                    name: "any",
                },
            }, noTruncation: {
                serializedName: "noTruncation",
                type: {
                    name: "any",
                },
            }, queryTimeout: {
                serializedName: "queryTimeout",
                type: {
                    name: "any",
                },
            }, additionalColumns: {
                serializedName: "additionalColumns",
                type: {
                    name: "any",
                },
            } }),
    },
};
exports.OracleSource = {
    serializedName: "OracleSource",
    type: {
        name: "Composite",
        className: "OracleSource",
        uberParent: "CopySource",
        additionalProperties: { type: { name: "Object" } },
        polymorphicDiscriminator: exports.CopySource.type.polymorphicDiscriminator,
        modelProperties: Object.assign(Object.assign({}, exports.CopySource.type.modelProperties), { oracleReaderQuery: {
                serializedName: "oracleReaderQuery",
                type: {
                    name: "any",
                },
            }, queryTimeout: {
                serializedName: "queryTimeout",
                type: {
                    name: "any",
                },
            }, partitionOption: {
                serializedName: "partitionOption",
                type: {
                    name: "String",
                },
            }, partitionSettings: {
                serializedName: "partitionSettings",
                type: {
                    name: "Composite",
                    className: "OraclePartitionSettings",
                },
            }, additionalColumns: {
                serializedName: "additionalColumns",
                type: {
                    name: "any",
                },
            } }),
    },
};
exports.AmazonRdsForOracleSource = {
    serializedName: "AmazonRdsForOracleSource",
    type: {
        name: "Composite",
        className: "AmazonRdsForOracleSource",
        uberParent: "CopySource",
        additionalProperties: { type: { name: "Object" } },
        polymorphicDiscriminator: exports.CopySource.type.polymorphicDiscriminator,
        modelProperties: Object.assign(Object.assign({}, exports.CopySource.type.modelProperties), { oracleReaderQuery: {
                serializedName: "oracleReaderQuery",
                type: {
                    name: "any",
                },
            }, queryTimeout: {
                serializedName: "queryTimeout",
                type: {
                    name: "any",
                },
            }, partitionOption: {
                serializedName: "partitionOption",
                type: {
                    name: "any",
                },
            }, partitionSettings: {
                serializedName: "partitionSettings",
                type: {
                    name: "Composite",
                    className: "AmazonRdsForOraclePartitionSettings",
                },
            }, additionalColumns: {
                serializedName: "additionalColumns",
                type: {
                    name: "any",
                },
            } }),
    },
};
exports.WebSource = {
    serializedName: "WebSource",
    type: {
        name: "Composite",
        className: "WebSource",
        uberParent: "CopySource",
        additionalProperties: { type: { name: "Object" } },
        polymorphicDiscriminator: exports.CopySource.type.polymorphicDiscriminator,
        modelProperties: Object.assign(Object.assign({}, exports.CopySource.type.modelProperties), { additionalColumns: {
                serializedName: "additionalColumns",
                type: {
                    name: "any",
                },
            } }),
    },
};
exports.MongoDbSource = {
    serializedName: "MongoDbSource",
    type: {
        name: "Composite",
        className: "MongoDbSource",
        uberParent: "CopySource",
        additionalProperties: { type: { name: "Object" } },
        polymorphicDiscriminator: exports.CopySource.type.polymorphicDiscriminator,
        modelProperties: Object.assign(Object.assign({}, exports.CopySource.type.modelProperties), { query: {
                serializedName: "query",
                type: {
                    name: "any",
                },
            }, additionalColumns: {
                serializedName: "additionalColumns",
                type: {
                    name: "any",
                },
            } }),
    },
};
exports.MongoDbAtlasSource = {
    serializedName: "MongoDbAtlasSource",
    type: {
        name: "Composite",
        className: "MongoDbAtlasSource",
        uberParent: "CopySource",
        additionalProperties: { type: { name: "Object" } },
        polymorphicDiscriminator: exports.CopySource.type.polymorphicDiscriminator,
        modelProperties: Object.assign(Object.assign({}, exports.CopySource.type.modelProperties), { filter: {
                serializedName: "filter",
                type: {
                    name: "any",
                },
            }, cursorMethods: {
                serializedName: "cursorMethods",
                type: {
                    name: "Composite",
                    className: "MongoDbCursorMethodsProperties",
                },
            }, batchSize: {
                serializedName: "batchSize",
                type: {
                    name: "any",
                },
            }, queryTimeout: {
                serializedName: "queryTimeout",
                type: {
                    name: "any",
                },
            }, additionalColumns: {
                serializedName: "additionalColumns",
                type: {
                    name: "any",
                },
            } }),
    },
};
exports.MongoDbV2Source = {
    serializedName: "MongoDbV2Source",
    type: {
        name: "Composite",
        className: "MongoDbV2Source",
        uberParent: "CopySource",
        additionalProperties: { type: { name: "Object" } },
        polymorphicDiscriminator: exports.CopySource.type.polymorphicDiscriminator,
        modelProperties: Object.assign(Object.assign({}, exports.CopySource.type.modelProperties), { filter: {
                serializedName: "filter",
                type: {
                    name: "any",
                },
            }, cursorMethods: {
                serializedName: "cursorMethods",
                type: {
                    name: "Composite",
                    className: "MongoDbCursorMethodsProperties",
                },
            }, batchSize: {
                serializedName: "batchSize",
                type: {
                    name: "any",
                },
            }, queryTimeout: {
                serializedName: "queryTimeout",
                type: {
                    name: "any",
                },
            }, additionalColumns: {
                serializedName: "additionalColumns",
                type: {
                    name: "any",
                },
            } }),
    },
};
exports.CosmosDbMongoDbApiSource = {
    serializedName: "CosmosDbMongoDbApiSource",
    type: {
        name: "Composite",
        className: "CosmosDbMongoDbApiSource",
        uberParent: "CopySource",
        additionalProperties: { type: { name: "Object" } },
        polymorphicDiscriminator: exports.CopySource.type.polymorphicDiscriminator,
        modelProperties: Object.assign(Object.assign({}, exports.CopySource.type.modelProperties), { filter: {
                serializedName: "filter",
                type: {
                    name: "any",
                },
            }, cursorMethods: {
                serializedName: "cursorMethods",
                type: {
                    name: "Composite",
                    className: "MongoDbCursorMethodsProperties",
                },
            }, batchSize: {
                serializedName: "batchSize",
                type: {
                    name: "any",
                },
            }, queryTimeout: {
                serializedName: "queryTimeout",
                type: {
                    name: "any",
                },
            }, additionalColumns: {
                serializedName: "additionalColumns",
                type: {
                    name: "any",
                },
            } }),
    },
};
exports.Office365Source = {
    serializedName: "Office365Source",
    type: {
        name: "Composite",
        className: "Office365Source",
        uberParent: "CopySource",
        additionalProperties: { type: { name: "Object" } },
        polymorphicDiscriminator: exports.CopySource.type.polymorphicDiscriminator,
        modelProperties: Object.assign(Object.assign({}, exports.CopySource.type.modelProperties), { allowedGroups: {
                serializedName: "allowedGroups",
                type: {
                    name: "any",
                },
            }, userScopeFilterUri: {
                serializedName: "userScopeFilterUri",
                type: {
                    name: "any",
                },
            }, dateFilterColumn: {
                serializedName: "dateFilterColumn",
                type: {
                    name: "any",
                },
            }, startTime: {
                serializedName: "startTime",
                type: {
                    name: "any",
                },
            }, endTime: {
                serializedName: "endTime",
                type: {
                    name: "any",
                },
            }, outputColumns: {
                serializedName: "outputColumns",
                type: {
                    name: "any",
                },
            } }),
    },
};
exports.AzureDataLakeStoreSource = {
    serializedName: "AzureDataLakeStoreSource",
    type: {
        name: "Composite",
        className: "AzureDataLakeStoreSource",
        uberParent: "CopySource",
        additionalProperties: { type: { name: "Object" } },
        polymorphicDiscriminator: exports.CopySource.type.polymorphicDiscriminator,
        modelProperties: Object.assign(Object.assign({}, exports.CopySource.type.modelProperties), { recursive: {
                serializedName: "recursive",
                type: {
                    name: "any",
                },
            } }),
    },
};
exports.AzureBlobFSSource = {
    serializedName: "AzureBlobFSSource",
    type: {
        name: "Composite",
        className: "AzureBlobFSSource",
        uberParent: "CopySource",
        additionalProperties: { type: { name: "Object" } },
        polymorphicDiscriminator: exports.CopySource.type.polymorphicDiscriminator,
        modelProperties: Object.assign(Object.assign({}, exports.CopySource.type.modelProperties), { treatEmptyAsNull: {
                serializedName: "treatEmptyAsNull",
                type: {
                    name: "any",
                },
            }, skipHeaderLineCount: {
                serializedName: "skipHeaderLineCount",
                type: {
                    name: "any",
                },
            }, recursive: {
                serializedName: "recursive",
                type: {
                    name: "any",
                },
            } }),
    },
};
exports.HttpSource = {
    serializedName: "HttpSource",
    type: {
        name: "Composite",
        className: "HttpSource",
        uberParent: "CopySource",
        additionalProperties: { type: { name: "Object" } },
        polymorphicDiscriminator: exports.CopySource.type.polymorphicDiscriminator,
        modelProperties: Object.assign(Object.assign({}, exports.CopySource.type.modelProperties), { httpRequestTimeout: {
                serializedName: "httpRequestTimeout",
                type: {
                    name: "any",
                },
            } }),
    },
};
exports.LakeHouseTableSource = {
    serializedName: "LakeHouseTableSource",
    type: {
        name: "Composite",
        className: "LakeHouseTableSource",
        uberParent: "CopySource",
        additionalProperties: { type: { name: "Object" } },
        polymorphicDiscriminator: exports.CopySource.type.polymorphicDiscriminator,
        modelProperties: Object.assign(Object.assign({}, exports.CopySource.type.modelProperties), { timestampAsOf: {
                serializedName: "timestampAsOf",
                type: {
                    name: "any",
                },
            }, versionAsOf: {
                serializedName: "versionAsOf",
                type: {
                    name: "any",
                },
            }, additionalColumns: {
                serializedName: "additionalColumns",
                type: {
                    name: "any",
                },
            } }),
    },
};
exports.SnowflakeSource = {
    serializedName: "SnowflakeSource",
    type: {
        name: "Composite",
        className: "SnowflakeSource",
        uberParent: "CopySource",
        additionalProperties: { type: { name: "Object" } },
        polymorphicDiscriminator: exports.CopySource.type.polymorphicDiscriminator,
        modelProperties: Object.assign(Object.assign({}, exports.CopySource.type.modelProperties), { query: {
                serializedName: "query",
                type: {
                    name: "any",
                },
            }, exportSettings: {
                serializedName: "exportSettings",
                type: {
                    name: "Composite",
                    className: "SnowflakeExportCopyCommand",
                },
            } }),
    },
};
exports.SnowflakeV2Source = {
    serializedName: "SnowflakeV2Source",
    type: {
        name: "Composite",
        className: "SnowflakeV2Source",
        uberParent: "CopySource",
        additionalProperties: { type: { name: "Object" } },
        polymorphicDiscriminator: exports.CopySource.type.polymorphicDiscriminator,
        modelProperties: Object.assign(Object.assign({}, exports.CopySource.type.modelProperties), { query: {
                serializedName: "query",
                type: {
                    name: "any",
                },
            }, exportSettings: {
                serializedName: "exportSettings",
                type: {
                    name: "Composite",
                    className: "SnowflakeExportCopyCommand",
                },
            } }),
    },
};
exports.AzureDatabricksDeltaLakeSource = {
    serializedName: "AzureDatabricksDeltaLakeSource",
    type: {
        name: "Composite",
        className: "AzureDatabricksDeltaLakeSource",
        uberParent: "CopySource",
        additionalProperties: { type: { name: "Object" } },
        polymorphicDiscriminator: exports.CopySource.type.polymorphicDiscriminator,
        modelProperties: Object.assign(Object.assign({}, exports.CopySource.type.modelProperties), { query: {
                serializedName: "query",
                type: {
                    name: "any",
                },
            }, exportSettings: {
                serializedName: "exportSettings",
                type: {
                    name: "Composite",
                    className: "AzureDatabricksDeltaLakeExportCommand",
                },
            } }),
    },
};
exports.SharePointOnlineListSource = {
    serializedName: "SharePointOnlineListSource",
    type: {
        name: "Composite",
        className: "SharePointOnlineListSource",
        uberParent: "CopySource",
        additionalProperties: { type: { name: "Object" } },
        polymorphicDiscriminator: exports.CopySource.type.polymorphicDiscriminator,
        modelProperties: Object.assign(Object.assign({}, exports.CopySource.type.modelProperties), { query: {
                serializedName: "query",
                type: {
                    name: "any",
                },
            }, httpRequestTimeout: {
                serializedName: "httpRequestTimeout",
                type: {
                    name: "any",
                },
            } }),
    },
};
exports.SalesforceServiceCloudV2Source = {
    serializedName: "SalesforceServiceCloudV2Source",
    type: {
        name: "Composite",
        className: "SalesforceServiceCloudV2Source",
        uberParent: "CopySource",
        additionalProperties: { type: { name: "Object" } },
        polymorphicDiscriminator: exports.CopySource.type.polymorphicDiscriminator,
        modelProperties: Object.assign(Object.assign({}, exports.CopySource.type.modelProperties), { soqlQuery: {
                serializedName: "SOQLQuery",
                type: {
                    name: "any",
                },
            }, query: {
                serializedName: "query",
                type: {
                    name: "any",
                },
            }, includeDeletedObjects: {
                serializedName: "includeDeletedObjects",
                type: {
                    name: "any",
                },
            }, additionalColumns: {
                serializedName: "additionalColumns",
                type: {
                    name: "any",
                },
            } }),
    },
};
exports.DelimitedTextSink = {
    serializedName: "DelimitedTextSink",
    type: {
        name: "Composite",
        className: "DelimitedTextSink",
        uberParent: "CopySink",
        additionalProperties: { type: { name: "Object" } },
        polymorphicDiscriminator: exports.CopySink.type.polymorphicDiscriminator,
        modelProperties: Object.assign(Object.assign({}, exports.CopySink.type.modelProperties), { storeSettings: {
                serializedName: "storeSettings",
                type: {
                    name: "Composite",
                    className: "StoreWriteSettings",
                },
            }, formatSettings: {
                serializedName: "formatSettings",
                type: {
                    name: "Composite",
                    className: "DelimitedTextWriteSettings",
                },
            } }),
    },
};
exports.JsonSink = {
    serializedName: "JsonSink",
    type: {
        name: "Composite",
        className: "JsonSink",
        uberParent: "CopySink",
        additionalProperties: { type: { name: "Object" } },
        polymorphicDiscriminator: exports.CopySink.type.polymorphicDiscriminator,
        modelProperties: Object.assign(Object.assign({}, exports.CopySink.type.modelProperties), { storeSettings: {
                serializedName: "storeSettings",
                type: {
                    name: "Composite",
                    className: "StoreWriteSettings",
                },
            }, formatSettings: {
                serializedName: "formatSettings",
                type: {
                    name: "Composite",
                    className: "JsonWriteSettings",
                },
            } }),
    },
};
exports.OrcSink = {
    serializedName: "OrcSink",
    type: {
        name: "Composite",
        className: "OrcSink",
        uberParent: "CopySink",
        additionalProperties: { type: { name: "Object" } },
        polymorphicDiscriminator: exports.CopySink.type.polymorphicDiscriminator,
        modelProperties: Object.assign(Object.assign({}, exports.CopySink.type.modelProperties), { storeSettings: {
                serializedName: "storeSettings",
                type: {
                    name: "Composite",
                    className: "StoreWriteSettings",
                },
            }, formatSettings: {
                serializedName: "formatSettings",
                type: {
                    name: "Composite",
                    className: "OrcWriteSettings",
                },
            } }),
    },
};
exports.RestSink = {
    serializedName: "RestSink",
    type: {
        name: "Composite",
        className: "RestSink",
        uberParent: "CopySink",
        additionalProperties: { type: { name: "Object" } },
        polymorphicDiscriminator: exports.CopySink.type.polymorphicDiscriminator,
        modelProperties: Object.assign(Object.assign({}, exports.CopySink.type.modelProperties), { requestMethod: {
                serializedName: "requestMethod",
                type: {
                    name: "any",
                },
            }, additionalHeaders: {
                serializedName: "additionalHeaders",
                type: {
                    name: "any",
                },
            }, httpRequestTimeout: {
                serializedName: "httpRequestTimeout",
                type: {
                    name: "any",
                },
            }, requestInterval: {
                serializedName: "requestInterval",
                type: {
                    name: "any",
                },
            }, httpCompressionType: {
                serializedName: "httpCompressionType",
                type: {
                    name: "any",
                },
            } }),
    },
};
exports.TeradataSink = {
    serializedName: "TeradataSink",
    type: {
        name: "Composite",
        className: "TeradataSink",
        uberParent: "CopySink",
        additionalProperties: { type: { name: "Object" } },
        polymorphicDiscriminator: exports.CopySink.type.polymorphicDiscriminator,
        modelProperties: Object.assign(Object.assign({}, exports.CopySink.type.modelProperties), { importSettings: {
                serializedName: "importSettings",
                type: {
                    name: "Composite",
                    className: "TeradataImportCommand",
                },
            } }),
    },
};
exports.AzurePostgreSqlSink = {
    serializedName: "AzurePostgreSqlSink",
    type: {
        name: "Composite",
        className: "AzurePostgreSqlSink",
        uberParent: "CopySink",
        additionalProperties: { type: { name: "Object" } },
        polymorphicDiscriminator: exports.CopySink.type.polymorphicDiscriminator,
        modelProperties: Object.assign(Object.assign({}, exports.CopySink.type.modelProperties), { preCopyScript: {
                serializedName: "preCopyScript",
                type: {
                    name: "any",
                },
            } }),
    },
};
exports.AzureMySqlSink = {
    serializedName: "AzureMySqlSink",
    type: {
        name: "Composite",
        className: "AzureMySqlSink",
        uberParent: "CopySink",
        additionalProperties: { type: { name: "Object" } },
        polymorphicDiscriminator: exports.CopySink.type.polymorphicDiscriminator,
        modelProperties: Object.assign(Object.assign({}, exports.CopySink.type.modelProperties), { preCopyScript: {
                serializedName: "preCopyScript",
                type: {
                    name: "any",
                },
            } }),
    },
};
exports.AzureDatabricksDeltaLakeSink = {
    serializedName: "AzureDatabricksDeltaLakeSink",
    type: {
        name: "Composite",
        className: "AzureDatabricksDeltaLakeSink",
        uberParent: "CopySink",
        additionalProperties: { type: { name: "Object" } },
        polymorphicDiscriminator: exports.CopySink.type.polymorphicDiscriminator,
        modelProperties: Object.assign(Object.assign({}, exports.CopySink.type.modelProperties), { preCopyScript: {
                serializedName: "preCopyScript",
                type: {
                    name: "any",
                },
            }, importSettings: {
                serializedName: "importSettings",
                type: {
                    name: "Composite",
                    className: "AzureDatabricksDeltaLakeImportCommand",
                },
            } }),
    },
};
exports.WarehouseSink = {
    serializedName: "WarehouseSink",
    type: {
        name: "Composite",
        className: "WarehouseSink",
        uberParent: "CopySink",
        additionalProperties: { type: { name: "Object" } },
        polymorphicDiscriminator: exports.CopySink.type.polymorphicDiscriminator,
        modelProperties: Object.assign(Object.assign({}, exports.CopySink.type.modelProperties), { preCopyScript: {
                serializedName: "preCopyScript",
                type: {
                    name: "any",
                },
            }, allowCopyCommand: {
                serializedName: "allowCopyCommand",
                type: {
                    name: "any",
                },
            }, copyCommandSettings: {
                serializedName: "copyCommandSettings",
                type: {
                    name: "Composite",
                    className: "DWCopyCommandSettings",
                },
            }, tableOption: {
                serializedName: "tableOption",
                type: {
                    name: "any",
                },
            }, writeBehavior: {
                serializedName: "writeBehavior",
                type: {
                    name: "any",
                },
            } }),
    },
};
exports.SapCloudForCustomerSink = {
    serializedName: "SapCloudForCustomerSink",
    type: {
        name: "Composite",
        className: "SapCloudForCustomerSink",
        uberParent: "CopySink",
        additionalProperties: { type: { name: "Object" } },
        polymorphicDiscriminator: exports.CopySink.type.polymorphicDiscriminator,
        modelProperties: Object.assign(Object.assign({}, exports.CopySink.type.modelProperties), { writeBehavior: {
                serializedName: "writeBehavior",
                type: {
                    name: "String",
                },
            }, httpRequestTimeout: {
                serializedName: "httpRequestTimeout",
                type: {
                    name: "any",
                },
            } }),
    },
};
exports.AzureQueueSink = {
    serializedName: "AzureQueueSink",
    type: {
        name: "Composite",
        className: "AzureQueueSink",
        uberParent: "CopySink",
        additionalProperties: { type: { name: "Object" } },
        polymorphicDiscriminator: exports.CopySink.type.polymorphicDiscriminator,
        modelProperties: Object.assign({}, exports.CopySink.type.modelProperties),
    },
};
exports.AzureTableSink = {
    serializedName: "AzureTableSink",
    type: {
        name: "Composite",
        className: "AzureTableSink",
        uberParent: "CopySink",
        additionalProperties: { type: { name: "Object" } },
        polymorphicDiscriminator: exports.CopySink.type.polymorphicDiscriminator,
        modelProperties: Object.assign(Object.assign({}, exports.CopySink.type.modelProperties), { azureTableDefaultPartitionKeyValue: {
                serializedName: "azureTableDefaultPartitionKeyValue",
                type: {
                    name: "any",
                },
            }, azureTablePartitionKeyName: {
                serializedName: "azureTablePartitionKeyName",
                type: {
                    name: "any",
                },
            }, azureTableRowKeyName: {
                serializedName: "azureTableRowKeyName",
                type: {
                    name: "any",
                },
            }, azureTableInsertType: {
                serializedName: "azureTableInsertType",
                type: {
                    name: "any",
                },
            } }),
    },
};
exports.AvroSink = {
    serializedName: "AvroSink",
    type: {
        name: "Composite",
        className: "AvroSink",
        uberParent: "CopySink",
        additionalProperties: { type: { name: "Object" } },
        polymorphicDiscriminator: exports.CopySink.type.polymorphicDiscriminator,
        modelProperties: Object.assign(Object.assign({}, exports.CopySink.type.modelProperties), { storeSettings: {
                serializedName: "storeSettings",
                type: {
                    name: "Composite",
                    className: "StoreWriteSettings",
                },
            }, formatSettings: {
                serializedName: "formatSettings",
                type: {
                    name: "Composite",
                    className: "AvroWriteSettings",
                },
            } }),
    },
};
exports.ParquetSink = {
    serializedName: "ParquetSink",
    type: {
        name: "Composite",
        className: "ParquetSink",
        uberParent: "CopySink",
        additionalProperties: { type: { name: "Object" } },
        polymorphicDiscriminator: exports.CopySink.type.polymorphicDiscriminator,
        modelProperties: Object.assign(Object.assign({}, exports.CopySink.type.modelProperties), { storeSettings: {
                serializedName: "storeSettings",
                type: {
                    name: "Composite",
                    className: "StoreWriteSettings",
                },
            }, formatSettings: {
                serializedName: "formatSettings",
                type: {
                    name: "Composite",
                    className: "ParquetWriteSettings",
                },
            } }),
    },
};
exports.BinarySink = {
    serializedName: "BinarySink",
    type: {
        name: "Composite",
        className: "BinarySink",
        uberParent: "CopySink",
        additionalProperties: { type: { name: "Object" } },
        polymorphicDiscriminator: exports.CopySink.type.polymorphicDiscriminator,
        modelProperties: Object.assign(Object.assign({}, exports.CopySink.type.modelProperties), { storeSettings: {
                serializedName: "storeSettings",
                type: {
                    name: "Composite",
                    className: "StoreWriteSettings",
                },
            } }),
    },
};
exports.IcebergSink = {
    serializedName: "IcebergSink",
    type: {
        name: "Composite",
        className: "IcebergSink",
        uberParent: "CopySink",
        additionalProperties: { type: { name: "Object" } },
        polymorphicDiscriminator: exports.CopySink.type.polymorphicDiscriminator,
        modelProperties: Object.assign(Object.assign({}, exports.CopySink.type.modelProperties), { storeSettings: {
                serializedName: "storeSettings",
                type: {
                    name: "Composite",
                    className: "StoreWriteSettings",
                },
            }, formatSettings: {
                serializedName: "formatSettings",
                type: {
                    name: "Composite",
                    className: "IcebergWriteSettings",
                },
            } }),
    },
};
exports.BlobSink = {
    serializedName: "BlobSink",
    type: {
        name: "Composite",
        className: "BlobSink",
        uberParent: "CopySink",
        additionalProperties: { type: { name: "Object" } },
        polymorphicDiscriminator: exports.CopySink.type.polymorphicDiscriminator,
        modelProperties: Object.assign(Object.assign({}, exports.CopySink.type.modelProperties), { blobWriterOverwriteFiles: {
                serializedName: "blobWriterOverwriteFiles",
                type: {
                    name: "any",
                },
            }, blobWriterDateTimeFormat: {
                serializedName: "blobWriterDateTimeFormat",
                type: {
                    name: "any",
                },
            }, blobWriterAddHeader: {
                serializedName: "blobWriterAddHeader",
                type: {
                    name: "any",
                },
            }, copyBehavior: {
                serializedName: "copyBehavior",
                type: {
                    name: "any",
                },
            } }),
    },
};
exports.FileSystemSink = {
    serializedName: "FileSystemSink",
    type: {
        name: "Composite",
        className: "FileSystemSink",
        uberParent: "CopySink",
        additionalProperties: { type: { name: "Object" } },
        polymorphicDiscriminator: exports.CopySink.type.polymorphicDiscriminator,
        modelProperties: Object.assign(Object.assign({}, exports.CopySink.type.modelProperties), { copyBehavior: {
                serializedName: "copyBehavior",
                type: {
                    name: "any",
                },
            } }),
    },
};
exports.DocumentDbCollectionSink = {
    serializedName: "DocumentDbCollectionSink",
    type: {
        name: "Composite",
        className: "DocumentDbCollectionSink",
        uberParent: "CopySink",
        additionalProperties: { type: { name: "Object" } },
        polymorphicDiscriminator: exports.CopySink.type.polymorphicDiscriminator,
        modelProperties: Object.assign(Object.assign({}, exports.CopySink.type.modelProperties), { nestingSeparator: {
                serializedName: "nestingSeparator",
                type: {
                    name: "any",
                },
            }, writeBehavior: {
                serializedName: "writeBehavior",
                type: {
                    name: "any",
                },
            } }),
    },
};
exports.CosmosDbSqlApiSink = {
    serializedName: "CosmosDbSqlApiSink",
    type: {
        name: "Composite",
        className: "CosmosDbSqlApiSink",
        uberParent: "CopySink",
        additionalProperties: { type: { name: "Object" } },
        polymorphicDiscriminator: exports.CopySink.type.polymorphicDiscriminator,
        modelProperties: Object.assign(Object.assign({}, exports.CopySink.type.modelProperties), { writeBehavior: {
                serializedName: "writeBehavior",
                type: {
                    name: "any",
                },
            } }),
    },
};
exports.SqlSink = {
    serializedName: "SqlSink",
    type: {
        name: "Composite",
        className: "SqlSink",
        uberParent: "CopySink",
        additionalProperties: { type: { name: "Object" } },
        polymorphicDiscriminator: exports.CopySink.type.polymorphicDiscriminator,
        modelProperties: Object.assign(Object.assign({}, exports.CopySink.type.modelProperties), { sqlWriterStoredProcedureName: {
                serializedName: "sqlWriterStoredProcedureName",
                type: {
                    name: "any",
                },
            }, sqlWriterTableType: {
                serializedName: "sqlWriterTableType",
                type: {
                    name: "any",
                },
            }, preCopyScript: {
                serializedName: "preCopyScript",
                type: {
                    name: "any",
                },
            }, storedProcedureParameters: {
                serializedName: "storedProcedureParameters",
                type: {
                    name: "any",
                },
            }, storedProcedureTableTypeParameterName: {
                serializedName: "storedProcedureTableTypeParameterName",
                type: {
                    name: "any",
                },
            }, tableOption: {
                serializedName: "tableOption",
                type: {
                    name: "any",
                },
            } }),
    },
};
exports.SqlServerSink = {
    serializedName: "SqlServerSink",
    type: {
        name: "Composite",
        className: "SqlServerSink",
        uberParent: "CopySink",
        additionalProperties: { type: { name: "Object" } },
        polymorphicDiscriminator: exports.CopySink.type.polymorphicDiscriminator,
        modelProperties: Object.assign(Object.assign({}, exports.CopySink.type.modelProperties), { sqlWriterStoredProcedureName: {
                serializedName: "sqlWriterStoredProcedureName",
                type: {
                    name: "any",
                },
            }, sqlWriterTableType: {
                serializedName: "sqlWriterTableType",
                type: {
                    name: "any",
                },
            }, preCopyScript: {
                serializedName: "preCopyScript",
                type: {
                    name: "any",
                },
            }, storedProcedureParameters: {
                serializedName: "storedProcedureParameters",
                type: {
                    name: "any",
                },
            }, storedProcedureTableTypeParameterName: {
                serializedName: "storedProcedureTableTypeParameterName",
                type: {
                    name: "any",
                },
            }, tableOption: {
                serializedName: "tableOption",
                type: {
                    name: "any",
                },
            } }),
    },
};
exports.AzureSqlSink = {
    serializedName: "AzureSqlSink",
    type: {
        name: "Composite",
        className: "AzureSqlSink",
        uberParent: "CopySink",
        additionalProperties: { type: { name: "Object" } },
        polymorphicDiscriminator: exports.CopySink.type.polymorphicDiscriminator,
        modelProperties: Object.assign(Object.assign({}, exports.CopySink.type.modelProperties), { sqlWriterStoredProcedureName: {
                serializedName: "sqlWriterStoredProcedureName",
                type: {
                    name: "any",
                },
            }, sqlWriterTableType: {
                serializedName: "sqlWriterTableType",
                type: {
                    name: "any",
                },
            }, preCopyScript: {
                serializedName: "preCopyScript",
                type: {
                    name: "any",
                },
            }, storedProcedureParameters: {
                serializedName: "storedProcedureParameters",
                type: {
                    name: "any",
                },
            }, storedProcedureTableTypeParameterName: {
                serializedName: "storedProcedureTableTypeParameterName",
                type: {
                    name: "any",
                },
            }, tableOption: {
                serializedName: "tableOption",
                type: {
                    name: "any",
                },
            } }),
    },
};
exports.SqlMISink = {
    serializedName: "SqlMISink",
    type: {
        name: "Composite",
        className: "SqlMISink",
        uberParent: "CopySink",
        additionalProperties: { type: { name: "Object" } },
        polymorphicDiscriminator: exports.CopySink.type.polymorphicDiscriminator,
        modelProperties: Object.assign(Object.assign({}, exports.CopySink.type.modelProperties), { sqlWriterStoredProcedureName: {
                serializedName: "sqlWriterStoredProcedureName",
                type: {
                    name: "any",
                },
            }, sqlWriterTableType: {
                serializedName: "sqlWriterTableType",
                type: {
                    name: "any",
                },
            }, preCopyScript: {
                serializedName: "preCopyScript",
                type: {
                    name: "any",
                },
            }, storedProcedureParameters: {
                serializedName: "storedProcedureParameters",
                type: {
                    name: "any",
                },
            }, storedProcedureTableTypeParameterName: {
                serializedName: "storedProcedureTableTypeParameterName",
                type: {
                    name: "any",
                },
            }, tableOption: {
                serializedName: "tableOption",
                type: {
                    name: "any",
                },
            } }),
    },
};
exports.SqlDWSink = {
    serializedName: "SqlDWSink",
    type: {
        name: "Composite",
        className: "SqlDWSink",
        uberParent: "CopySink",
        additionalProperties: { type: { name: "Object" } },
        polymorphicDiscriminator: exports.CopySink.type.polymorphicDiscriminator,
        modelProperties: Object.assign(Object.assign({}, exports.CopySink.type.modelProperties), { preCopyScript: {
                serializedName: "preCopyScript",
                type: {
                    name: "any",
                },
            }, allowPolyBase: {
                serializedName: "allowPolyBase",
                type: {
                    name: "any",
                },
            }, polyBaseSettings: {
                serializedName: "polyBaseSettings",
                type: {
                    name: "Composite",
                    className: "PolybaseSettings",
                },
            }, allowCopyCommand: {
                serializedName: "allowCopyCommand",
                type: {
                    name: "any",
                },
            }, copyCommandSettings: {
                serializedName: "copyCommandSettings",
                type: {
                    name: "Composite",
                    className: "DWCopyCommandSettings",
                },
            }, tableOption: {
                serializedName: "tableOption",
                type: {
                    name: "any",
                },
            } }),
    },
};
exports.SnowflakeSink = {
    serializedName: "SnowflakeSink",
    type: {
        name: "Composite",
        className: "SnowflakeSink",
        uberParent: "CopySink",
        additionalProperties: { type: { name: "Object" } },
        polymorphicDiscriminator: exports.CopySink.type.polymorphicDiscriminator,
        modelProperties: Object.assign(Object.assign({}, exports.CopySink.type.modelProperties), { preCopyScript: {
                serializedName: "preCopyScript",
                type: {
                    name: "any",
                },
            }, importSettings: {
                serializedName: "importSettings",
                type: {
                    name: "Composite",
                    className: "SnowflakeImportCopyCommand",
                },
            } }),
    },
};
exports.SnowflakeV2Sink = {
    serializedName: "SnowflakeV2Sink",
    type: {
        name: "Composite",
        className: "SnowflakeV2Sink",
        uberParent: "CopySink",
        additionalProperties: { type: { name: "Object" } },
        polymorphicDiscriminator: exports.CopySink.type.polymorphicDiscriminator,
        modelProperties: Object.assign(Object.assign({}, exports.CopySink.type.modelProperties), { preCopyScript: {
                serializedName: "preCopyScript",
                type: {
                    name: "any",
                },
            }, importSettings: {
                serializedName: "importSettings",
                type: {
                    name: "Composite",
                    className: "SnowflakeImportCopyCommand",
                },
            } }),
    },
};
exports.OracleSink = {
    serializedName: "OracleSink",
    type: {
        name: "Composite",
        className: "OracleSink",
        uberParent: "CopySink",
        additionalProperties: { type: { name: "Object" } },
        polymorphicDiscriminator: exports.CopySink.type.polymorphicDiscriminator,
        modelProperties: Object.assign(Object.assign({}, exports.CopySink.type.modelProperties), { preCopyScript: {
                serializedName: "preCopyScript",
                type: {
                    name: "any",
                },
            } }),
    },
};
exports.AzureDataLakeStoreSink = {
    serializedName: "AzureDataLakeStoreSink",
    type: {
        name: "Composite",
        className: "AzureDataLakeStoreSink",
        uberParent: "CopySink",
        additionalProperties: { type: { name: "Object" } },
        polymorphicDiscriminator: exports.CopySink.type.polymorphicDiscriminator,
        modelProperties: Object.assign(Object.assign({}, exports.CopySink.type.modelProperties), { copyBehavior: {
                serializedName: "copyBehavior",
                type: {
                    name: "any",
                },
            }, enableAdlsSingleFileParallel: {
                serializedName: "enableAdlsSingleFileParallel",
                type: {
                    name: "any",
                },
            } }),
    },
};
exports.AzureBlobFSSink = {
    serializedName: "AzureBlobFSSink",
    type: {
        name: "Composite",
        className: "AzureBlobFSSink",
        uberParent: "CopySink",
        additionalProperties: { type: { name: "Object" } },
        polymorphicDiscriminator: exports.CopySink.type.polymorphicDiscriminator,
        modelProperties: Object.assign(Object.assign({}, exports.CopySink.type.modelProperties), { copyBehavior: {
                serializedName: "copyBehavior",
                type: {
                    name: "any",
                },
            } }),
    },
};
exports.AzureSearchIndexSink = {
    serializedName: "AzureSearchIndexSink",
    type: {
        name: "Composite",
        className: "AzureSearchIndexSink",
        uberParent: "CopySink",
        additionalProperties: { type: { name: "Object" } },
        polymorphicDiscriminator: exports.CopySink.type.polymorphicDiscriminator,
        modelProperties: Object.assign(Object.assign({}, exports.CopySink.type.modelProperties), { writeBehavior: {
                serializedName: "writeBehavior",
                type: {
                    name: "String",
                },
            } }),
    },
};
exports.OdbcSink = {
    serializedName: "OdbcSink",
    type: {
        name: "Composite",
        className: "OdbcSink",
        uberParent: "CopySink",
        additionalProperties: { type: { name: "Object" } },
        polymorphicDiscriminator: exports.CopySink.type.polymorphicDiscriminator,
        modelProperties: Object.assign(Object.assign({}, exports.CopySink.type.modelProperties), { preCopyScript: {
                serializedName: "preCopyScript",
                type: {
                    name: "any",
                },
            } }),
    },
};
exports.InformixSink = {
    serializedName: "InformixSink",
    type: {
        name: "Composite",
        className: "InformixSink",
        uberParent: "CopySink",
        additionalProperties: { type: { name: "Object" } },
        polymorphicDiscriminator: exports.CopySink.type.polymorphicDiscriminator,
        modelProperties: Object.assign(Object.assign({}, exports.CopySink.type.modelProperties), { preCopyScript: {
                serializedName: "preCopyScript",
                type: {
                    name: "any",
                },
            } }),
    },
};
exports.MicrosoftAccessSink = {
    serializedName: "MicrosoftAccessSink",
    type: {
        name: "Composite",
        className: "MicrosoftAccessSink",
        uberParent: "CopySink",
        additionalProperties: { type: { name: "Object" } },
        polymorphicDiscriminator: exports.CopySink.type.polymorphicDiscriminator,
        modelProperties: Object.assign(Object.assign({}, exports.CopySink.type.modelProperties), { preCopyScript: {
                serializedName: "preCopyScript",
                type: {
                    name: "any",
                },
            } }),
    },
};
exports.DynamicsSink = {
    serializedName: "DynamicsSink",
    type: {
        name: "Composite",
        className: "DynamicsSink",
        uberParent: "CopySink",
        additionalProperties: { type: { name: "Object" } },
        polymorphicDiscriminator: exports.CopySink.type.polymorphicDiscriminator,
        modelProperties: Object.assign(Object.assign({}, exports.CopySink.type.modelProperties), { writeBehavior: {
                serializedName: "writeBehavior",
                required: true,
                type: {
                    name: "String",
                },
            }, ignoreNullValues: {
                serializedName: "ignoreNullValues",
                type: {
                    name: "any",
                },
            }, alternateKeyName: {
                serializedName: "alternateKeyName",
                type: {
                    name: "any",
                },
            } }),
    },
};
exports.DynamicsCrmSink = {
    serializedName: "DynamicsCrmSink",
    type: {
        name: "Composite",
        className: "DynamicsCrmSink",
        uberParent: "CopySink",
        additionalProperties: { type: { name: "Object" } },
        polymorphicDiscriminator: exports.CopySink.type.polymorphicDiscriminator,
        modelProperties: Object.assign(Object.assign({}, exports.CopySink.type.modelProperties), { writeBehavior: {
                serializedName: "writeBehavior",
                required: true,
                type: {
                    name: "String",
                },
            }, ignoreNullValues: {
                serializedName: "ignoreNullValues",
                type: {
                    name: "any",
                },
            }, alternateKeyName: {
                serializedName: "alternateKeyName",
                type: {
                    name: "any",
                },
            } }),
    },
};
exports.CommonDataServiceForAppsSink = {
    serializedName: "CommonDataServiceForAppsSink",
    type: {
        name: "Composite",
        className: "CommonDataServiceForAppsSink",
        uberParent: "CopySink",
        additionalProperties: { type: { name: "Object" } },
        polymorphicDiscriminator: exports.CopySink.type.polymorphicDiscriminator,
        modelProperties: Object.assign(Object.assign({}, exports.CopySink.type.modelProperties), { writeBehavior: {
                serializedName: "writeBehavior",
                required: true,
                type: {
                    name: "String",
                },
            }, ignoreNullValues: {
                serializedName: "ignoreNullValues",
                type: {
                    name: "any",
                },
            }, alternateKeyName: {
                serializedName: "alternateKeyName",
                type: {
                    name: "any",
                },
            } }),
    },
};
exports.AzureDataExplorerSink = {
    serializedName: "AzureDataExplorerSink",
    type: {
        name: "Composite",
        className: "AzureDataExplorerSink",
        uberParent: "CopySink",
        additionalProperties: { type: { name: "Object" } },
        polymorphicDiscriminator: exports.CopySink.type.polymorphicDiscriminator,
        modelProperties: Object.assign(Object.assign({}, exports.CopySink.type.modelProperties), { ingestionMappingName: {
                serializedName: "ingestionMappingName",
                type: {
                    name: "any",
                },
            }, ingestionMappingAsJson: {
                serializedName: "ingestionMappingAsJson",
                type: {
                    name: "any",
                },
            }, flushImmediately: {
                serializedName: "flushImmediately",
                type: {
                    name: "any",
                },
            } }),
    },
};
exports.SalesforceSink = {
    serializedName: "SalesforceSink",
    type: {
        name: "Composite",
        className: "SalesforceSink",
        uberParent: "CopySink",
        additionalProperties: { type: { name: "Object" } },
        polymorphicDiscriminator: exports.CopySink.type.polymorphicDiscriminator,
        modelProperties: Object.assign(Object.assign({}, exports.CopySink.type.modelProperties), { writeBehavior: {
                serializedName: "writeBehavior",
                type: {
                    name: "String",
                },
            }, externalIdFieldName: {
                serializedName: "externalIdFieldName",
                type: {
                    name: "any",
                },
            }, ignoreNullValues: {
                serializedName: "ignoreNullValues",
                type: {
                    name: "any",
                },
            } }),
    },
};
exports.SalesforceServiceCloudSink = {
    serializedName: "SalesforceServiceCloudSink",
    type: {
        name: "Composite",
        className: "SalesforceServiceCloudSink",
        uberParent: "CopySink",
        additionalProperties: { type: { name: "Object" } },
        polymorphicDiscriminator: exports.CopySink.type.polymorphicDiscriminator,
        modelProperties: Object.assign(Object.assign({}, exports.CopySink.type.modelProperties), { writeBehavior: {
                serializedName: "writeBehavior",
                type: {
                    name: "String",
                },
            }, externalIdFieldName: {
                serializedName: "externalIdFieldName",
                type: {
                    name: "any",
                },
            }, ignoreNullValues: {
                serializedName: "ignoreNullValues",
                type: {
                    name: "any",
                },
            } }),
    },
};
exports.CosmosDbMongoDbApiSink = {
    serializedName: "CosmosDbMongoDbApiSink",
    type: {
        name: "Composite",
        className: "CosmosDbMongoDbApiSink",
        uberParent: "CopySink",
        additionalProperties: { type: { name: "Object" } },
        polymorphicDiscriminator: exports.CopySink.type.polymorphicDiscriminator,
        modelProperties: Object.assign(Object.assign({}, exports.CopySink.type.modelProperties), { writeBehavior: {
                serializedName: "writeBehavior",
                type: {
                    name: "any",
                },
            } }),
    },
};
exports.LakeHouseTableSink = {
    serializedName: "LakeHouseTableSink",
    type: {
        name: "Composite",
        className: "LakeHouseTableSink",
        uberParent: "CopySink",
        additionalProperties: { type: { name: "Object" } },
        polymorphicDiscriminator: exports.CopySink.type.polymorphicDiscriminator,
        modelProperties: Object.assign(Object.assign({}, exports.CopySink.type.modelProperties), { tableActionOption: {
                serializedName: "tableActionOption",
                type: {
                    name: "any",
                },
            }, partitionOption: {
                serializedName: "partitionOption",
                type: {
                    name: "any",
                },
            }, partitionNameList: {
                serializedName: "partitionNameList",
                type: {
                    name: "any",
                },
            } }),
    },
};
exports.SalesforceV2Sink = {
    serializedName: "SalesforceV2Sink",
    type: {
        name: "Composite",
        className: "SalesforceV2Sink",
        uberParent: "CopySink",
        additionalProperties: { type: { name: "Object" } },
        polymorphicDiscriminator: exports.CopySink.type.polymorphicDiscriminator,
        modelProperties: Object.assign(Object.assign({}, exports.CopySink.type.modelProperties), { writeBehavior: {
                serializedName: "writeBehavior",
                type: {
                    name: "String",
                },
            }, externalIdFieldName: {
                serializedName: "externalIdFieldName",
                type: {
                    name: "any",
                },
            }, ignoreNullValues: {
                serializedName: "ignoreNullValues",
                type: {
                    name: "any",
                },
            } }),
    },
};
exports.SalesforceServiceCloudV2Sink = {
    serializedName: "SalesforceServiceCloudV2Sink",
    type: {
        name: "Composite",
        className: "SalesforceServiceCloudV2Sink",
        uberParent: "CopySink",
        additionalProperties: { type: { name: "Object" } },
        polymorphicDiscriminator: exports.CopySink.type.polymorphicDiscriminator,
        modelProperties: Object.assign(Object.assign({}, exports.CopySink.type.modelProperties), { writeBehavior: {
                serializedName: "writeBehavior",
                type: {
                    name: "String",
                },
            }, externalIdFieldName: {
                serializedName: "externalIdFieldName",
                type: {
                    name: "any",
                },
            }, ignoreNullValues: {
                serializedName: "ignoreNullValues",
                type: {
                    name: "any",
                },
            } }),
    },
};
exports.TeradataImportCommand = {
    serializedName: "TeradataImportCommand",
    type: {
        name: "Composite",
        className: "TeradataImportCommand",
        uberParent: "ImportSettings",
        additionalProperties: { type: { name: "Object" } },
        polymorphicDiscriminator: exports.ImportSettings.type.polymorphicDiscriminator,
        modelProperties: Object.assign(Object.assign({}, exports.ImportSettings.type.modelProperties), { additionalFormatOptions: {
                serializedName: "additionalFormatOptions",
                type: {
                    name: "any",
                },
            } }),
    },
};
exports.AzureDatabricksDeltaLakeImportCommand = {
    serializedName: "AzureDatabricksDeltaLakeImportCommand",
    type: {
        name: "Composite",
        className: "AzureDatabricksDeltaLakeImportCommand",
        uberParent: "ImportSettings",
        additionalProperties: { type: { name: "Object" } },
        polymorphicDiscriminator: exports.ImportSettings.type.polymorphicDiscriminator,
        modelProperties: Object.assign(Object.assign({}, exports.ImportSettings.type.modelProperties), { dateFormat: {
                serializedName: "dateFormat",
                type: {
                    name: "any",
                },
            }, timestampFormat: {
                serializedName: "timestampFormat",
                type: {
                    name: "any",
                },
            } }),
    },
};
exports.SnowflakeImportCopyCommand = {
    serializedName: "SnowflakeImportCopyCommand",
    type: {
        name: "Composite",
        className: "SnowflakeImportCopyCommand",
        uberParent: "ImportSettings",
        additionalProperties: { type: { name: "Object" } },
        polymorphicDiscriminator: exports.ImportSettings.type.polymorphicDiscriminator,
        modelProperties: Object.assign(Object.assign({}, exports.ImportSettings.type.modelProperties), { additionalCopyOptions: {
                serializedName: "additionalCopyOptions",
                type: {
                    name: "Dictionary",
                    value: { type: { name: "any" } },
                },
            }, additionalFormatOptions: {
                serializedName: "additionalFormatOptions",
                type: {
                    name: "Dictionary",
                    value: { type: { name: "any" } },
                },
            } }),
    },
};
exports.SnowflakeExportCopyCommand = {
    serializedName: "SnowflakeExportCopyCommand",
    type: {
        name: "Composite",
        className: "SnowflakeExportCopyCommand",
        uberParent: "ExportSettings",
        additionalProperties: { type: { name: "Object" } },
        polymorphicDiscriminator: exports.ExportSettings.type.polymorphicDiscriminator,
        modelProperties: Object.assign(Object.assign({}, exports.ExportSettings.type.modelProperties), { additionalCopyOptions: {
                serializedName: "additionalCopyOptions",
                type: {
                    name: "Dictionary",
                    value: { type: { name: "any" } },
                },
            }, additionalFormatOptions: {
                serializedName: "additionalFormatOptions",
                type: {
                    name: "Dictionary",
                    value: { type: { name: "any" } },
                },
            } }),
    },
};
exports.AzureDatabricksDeltaLakeExportCommand = {
    serializedName: "AzureDatabricksDeltaLakeExportCommand",
    type: {
        name: "Composite",
        className: "AzureDatabricksDeltaLakeExportCommand",
        uberParent: "ExportSettings",
        additionalProperties: { type: { name: "Object" } },
        polymorphicDiscriminator: exports.ExportSettings.type.polymorphicDiscriminator,
        modelProperties: Object.assign(Object.assign({}, exports.ExportSettings.type.modelProperties), { dateFormat: {
                serializedName: "dateFormat",
                type: {
                    name: "any",
                },
            }, timestampFormat: {
                serializedName: "timestampFormat",
                type: {
                    name: "any",
                },
            } }),
    },
};
exports.TabularTranslator = {
    serializedName: "TabularTranslator",
    type: {
        name: "Composite",
        className: "TabularTranslator",
        uberParent: "CopyTranslator",
        additionalProperties: { type: { name: "Object" } },
        polymorphicDiscriminator: exports.CopyTranslator.type.polymorphicDiscriminator,
        modelProperties: Object.assign(Object.assign({}, exports.CopyTranslator.type.modelProperties), { columnMappings: {
                serializedName: "columnMappings",
                type: {
                    name: "any",
                },
            }, schemaMapping: {
                serializedName: "schemaMapping",
                type: {
                    name: "any",
                },
            }, collectionReference: {
                serializedName: "collectionReference",
                type: {
                    name: "any",
                },
            }, mapComplexValuesToString: {
                serializedName: "mapComplexValuesToString",
                type: {
                    name: "any",
                },
            }, mappings: {
                serializedName: "mappings",
                type: {
                    name: "any",
                },
            }, typeConversion: {
                serializedName: "typeConversion",
                type: {
                    name: "any",
                },
            }, typeConversionSettings: {
                serializedName: "typeConversionSettings",
                type: {
                    name: "Composite",
                    className: "TypeConversionSettings",
                },
            } }),
    },
};
exports.TriggerDependencyReference = {
    serializedName: "TriggerDependencyReference",
    type: {
        name: "Composite",
        className: "TriggerDependencyReference",
        uberParent: "DependencyReference",
        polymorphicDiscriminator: {
            serializedName: "type",
            clientName: "type",
        },
        modelProperties: Object.assign(Object.assign({}, exports.DependencyReference.type.modelProperties), { referenceTrigger: {
                serializedName: "referenceTrigger",
                type: {
                    name: "Composite",
                    className: "TriggerReference",
                },
            } }),
    },
};
exports.SelfDependencyTumblingWindowTriggerReference = {
    serializedName: "SelfDependencyTumblingWindowTriggerReference",
    type: {
        name: "Composite",
        className: "SelfDependencyTumblingWindowTriggerReference",
        uberParent: "DependencyReference",
        polymorphicDiscriminator: exports.DependencyReference.type.polymorphicDiscriminator,
        modelProperties: Object.assign(Object.assign({}, exports.DependencyReference.type.modelProperties), { offset: {
                constraints: {
                    Pattern: new RegExp("-((\\d+)\\.)?(\\d\\d):(60|([0-5][0-9])):(60|([0-5][0-9]))"),
                    MaxLength: 15,
                    MinLength: 8,
                },
                serializedName: "offset",
                required: true,
                type: {
                    name: "String",
                },
            }, size: {
                constraints: {
                    Pattern: new RegExp("((\\d+)\\.)?(\\d\\d):(60|([0-5][0-9])):(60|([0-5][0-9]))"),
                    MaxLength: 15,
                    MinLength: 8,
                },
                serializedName: "size",
                type: {
                    name: "String",
                },
            } }),
    },
};
exports.LinkedIntegrationRuntimeKeyAuthorization = {
    serializedName: "Key",
    type: {
        name: "Composite",
        className: "LinkedIntegrationRuntimeKeyAuthorization",
        uberParent: "LinkedIntegrationRuntimeType",
        polymorphicDiscriminator: exports.LinkedIntegrationRuntimeType.type.polymorphicDiscriminator,
        modelProperties: Object.assign(Object.assign({}, exports.LinkedIntegrationRuntimeType.type.modelProperties), { key: {
                serializedName: "key",
                type: {
                    name: "Composite",
                    className: "SecureString",
                },
            } }),
    },
};
exports.LinkedIntegrationRuntimeRbacAuthorization = {
    serializedName: "RBAC",
    type: {
        name: "Composite",
        className: "LinkedIntegrationRuntimeRbacAuthorization",
        uberParent: "LinkedIntegrationRuntimeType",
        polymorphicDiscriminator: exports.LinkedIntegrationRuntimeType.type.polymorphicDiscriminator,
        modelProperties: Object.assign(Object.assign({}, exports.LinkedIntegrationRuntimeType.type.modelProperties), { resourceId: {
                serializedName: "resourceId",
                required: true,
                type: {
                    name: "String",
                },
            } }),
    },
};
exports.SubResource = {
    type: {
        name: "Composite",
        className: "SubResource",
        modelProperties: Object.assign({}, exports.AzureEntityResource.type.modelProperties),
    },
};
exports.BigDataPoolResourceInfo = {
    type: {
        name: "Composite",
        className: "BigDataPoolResourceInfo",
        modelProperties: Object.assign(Object.assign({}, exports.TrackedResource.type.modelProperties), { provisioningState: {
                serializedName: "properties.provisioningState",
                type: {
                    name: "String",
                },
            }, autoScale: {
                serializedName: "properties.autoScale",
                type: {
                    name: "Composite",
                    className: "AutoScaleProperties",
                },
            }, creationDate: {
                serializedName: "properties.creationDate",
                type: {
                    name: "DateTime",
                },
            }, autoPause: {
                serializedName: "properties.autoPause",
                type: {
                    name: "Composite",
                    className: "AutoPauseProperties",
                },
            }, isComputeIsolationEnabled: {
                serializedName: "properties.isComputeIsolationEnabled",
                type: {
                    name: "Boolean",
                },
            }, sessionLevelPackagesEnabled: {
                serializedName: "properties.sessionLevelPackagesEnabled",
                type: {
                    name: "Boolean",
                },
            }, cacheSize: {
                serializedName: "properties.cacheSize",
                type: {
                    name: "Number",
                },
            }, dynamicExecutorAllocation: {
                serializedName: "properties.dynamicExecutorAllocation",
                type: {
                    name: "Composite",
                    className: "DynamicExecutorAllocation",
                },
            }, sparkEventsFolder: {
                serializedName: "properties.sparkEventsFolder",
                type: {
                    name: "String",
                },
            }, nodeCount: {
                serializedName: "properties.nodeCount",
                type: {
                    name: "Number",
                },
            }, libraryRequirements: {
                serializedName: "properties.libraryRequirements",
                type: {
                    name: "Composite",
                    className: "LibraryRequirements",
                },
            }, customLibraries: {
                serializedName: "properties.customLibraries",
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "Composite",
                            className: "LibraryInfo",
                        },
                    },
                },
            }, sparkConfigProperties: {
                serializedName: "properties.sparkConfigProperties",
                type: {
                    name: "Composite",
                    className: "LibraryRequirements",
                },
            }, sparkVersion: {
                serializedName: "properties.sparkVersion",
                type: {
                    name: "String",
                },
            }, defaultSparkLogFolder: {
                serializedName: "properties.defaultSparkLogFolder",
                type: {
                    name: "String",
                },
            }, nodeSize: {
                serializedName: "properties.nodeSize",
                type: {
                    name: "String",
                },
            }, nodeSizeFamily: {
                serializedName: "properties.nodeSizeFamily",
                type: {
                    name: "String",
                },
            }, lastSucceededTimestamp: {
                serializedName: "properties.lastSucceededTimestamp",
                readOnly: true,
                type: {
                    name: "DateTime",
                },
            } }),
    },
};
exports.SqlPool = {
    type: {
        name: "Composite",
        className: "SqlPool",
        modelProperties: Object.assign(Object.assign({}, exports.TrackedResource.type.modelProperties), { sku: {
                serializedName: "sku",
                type: {
                    name: "Composite",
                    className: "Sku",
                },
            }, maxSizeBytes: {
                serializedName: "properties.maxSizeBytes",
                type: {
                    name: "Number",
                },
            }, collation: {
                serializedName: "properties.collation",
                type: {
                    name: "String",
                },
            }, sourceDatabaseId: {
                serializedName: "properties.sourceDatabaseId",
                type: {
                    name: "String",
                },
            }, recoverableDatabaseId: {
                serializedName: "properties.recoverableDatabaseId",
                type: {
                    name: "String",
                },
            }, provisioningState: {
                serializedName: "properties.provisioningState",
                type: {
                    name: "String",
                },
            }, status: {
                serializedName: "properties.status",
                type: {
                    name: "String",
                },
            }, restorePointInTime: {
                serializedName: "properties.restorePointInTime",
                type: {
                    name: "String",
                },
            }, createMode: {
                serializedName: "properties.createMode",
                type: {
                    name: "String",
                },
            }, creationDate: {
                serializedName: "properties.creationDate",
                type: {
                    name: "DateTime",
                },
            } }),
    },
};
exports.Workspace = {
    type: {
        name: "Composite",
        className: "Workspace",
        modelProperties: Object.assign(Object.assign({}, exports.TrackedResource.type.modelProperties), { identity: {
                serializedName: "identity",
                type: {
                    name: "Composite",
                    className: "ManagedIdentity",
                },
            }, defaultDataLakeStorage: {
                serializedName: "properties.defaultDataLakeStorage",
                type: {
                    name: "Composite",
                    className: "DataLakeStorageAccountDetails",
                },
            }, sqlAdministratorLoginPassword: {
                serializedName: "properties.sqlAdministratorLoginPassword",
                type: {
                    name: "String",
                },
            }, managedResourceGroupName: {
                serializedName: "properties.managedResourceGroupName",
                type: {
                    name: "String",
                },
            }, provisioningState: {
                serializedName: "properties.provisioningState",
                readOnly: true,
                type: {
                    name: "String",
                },
            }, sqlAdministratorLogin: {
                serializedName: "properties.sqlAdministratorLogin",
                type: {
                    name: "String",
                },
            }, virtualNetworkProfile: {
                serializedName: "properties.virtualNetworkProfile",
                type: {
                    name: "Composite",
                    className: "VirtualNetworkProfile",
                },
            }, connectivityEndpoints: {
                serializedName: "properties.connectivityEndpoints",
                type: {
                    name: "Dictionary",
                    value: { type: { name: "String" } },
                },
            }, managedVirtualNetwork: {
                serializedName: "properties.managedVirtualNetwork",
                type: {
                    name: "String",
                },
            }, privateEndpointConnections: {
                serializedName: "properties.privateEndpointConnections",
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "Composite",
                            className: "PrivateEndpointConnection",
                        },
                    },
                },
            }, encryption: {
                serializedName: "properties.encryption",
                type: {
                    name: "Composite",
                    className: "EncryptionDetails",
                },
            }, workspaceUID: {
                serializedName: "properties.workspaceUID",
                readOnly: true,
                type: {
                    name: "Uuid",
                },
            }, extraProperties: {
                serializedName: "properties.extraProperties",
                readOnly: true,
                type: {
                    name: "Dictionary",
                    value: { type: { name: "any" } },
                },
            }, managedVirtualNetworkSettings: {
                serializedName: "properties.managedVirtualNetworkSettings",
                type: {
                    name: "Composite",
                    className: "ManagedVirtualNetworkSettings",
                },
            }, workspaceRepositoryConfiguration: {
                serializedName: "properties.workspaceRepositoryConfiguration",
                type: {
                    name: "Composite",
                    className: "WorkspaceRepositoryConfiguration",
                },
            }, purviewConfiguration: {
                serializedName: "properties.purviewConfiguration",
                type: {
                    name: "Composite",
                    className: "PurviewConfiguration",
                },
            }, adlaResourceId: {
                serializedName: "properties.adlaResourceId",
                readOnly: true,
                type: {
                    name: "String",
                },
            } }),
    },
};
exports.PrivateEndpointConnection = {
    type: {
        name: "Composite",
        className: "PrivateEndpointConnection",
        modelProperties: Object.assign(Object.assign({}, exports.ProxyResource.type.modelProperties), { privateEndpoint: {
                serializedName: "properties.privateEndpoint",
                type: {
                    name: "Composite",
                    className: "PrivateEndpoint",
                },
            }, privateLinkServiceConnectionState: {
                serializedName: "properties.privateLinkServiceConnectionState",
                type: {
                    name: "Composite",
                    className: "PrivateLinkServiceConnectionState",
                },
            }, provisioningState: {
                serializedName: "properties.provisioningState",
                readOnly: true,
                type: {
                    name: "String",
                },
            } }),
    },
};
exports.ExecutePipelineActivity = {
    serializedName: "ExecutePipeline",
    type: {
        name: "Composite",
        className: "ExecutePipelineActivity",
        uberParent: "ControlActivity",
        additionalProperties: { type: { name: "Object" } },
        polymorphicDiscriminator: exports.ControlActivity.type.polymorphicDiscriminator,
        modelProperties: Object.assign(Object.assign({}, exports.ControlActivity.type.modelProperties), { pipeline: {
                serializedName: "typeProperties.pipeline",
                type: {
                    name: "Composite",
                    className: "PipelineReference",
                },
            }, parameters: {
                serializedName: "typeProperties.parameters",
                type: {
                    name: "Dictionary",
                    value: { type: { name: "any" } },
                },
            }, waitOnCompletion: {
                serializedName: "typeProperties.waitOnCompletion",
                type: {
                    name: "Boolean",
                },
            } }),
    },
};
exports.IfConditionActivity = {
    serializedName: "IfCondition",
    type: {
        name: "Composite",
        className: "IfConditionActivity",
        uberParent: "ControlActivity",
        additionalProperties: { type: { name: "Object" } },
        polymorphicDiscriminator: exports.ControlActivity.type.polymorphicDiscriminator,
        modelProperties: Object.assign(Object.assign({}, exports.ControlActivity.type.modelProperties), { expression: {
                serializedName: "typeProperties.expression",
                type: {
                    name: "Composite",
                    className: "Expression",
                },
            }, ifTrueActivities: {
                serializedName: "typeProperties.ifTrueActivities",
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "Composite",
                            className: "Activity",
                        },
                    },
                },
            }, ifFalseActivities: {
                serializedName: "typeProperties.ifFalseActivities",
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "Composite",
                            className: "Activity",
                        },
                    },
                },
            } }),
    },
};
exports.SwitchActivity = {
    serializedName: "Switch",
    type: {
        name: "Composite",
        className: "SwitchActivity",
        uberParent: "ControlActivity",
        additionalProperties: { type: { name: "Object" } },
        polymorphicDiscriminator: exports.ControlActivity.type.polymorphicDiscriminator,
        modelProperties: Object.assign(Object.assign({}, exports.ControlActivity.type.modelProperties), { on: {
                serializedName: "typeProperties.on",
                type: {
                    name: "Composite",
                    className: "Expression",
                },
            }, cases: {
                serializedName: "typeProperties.cases",
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "Composite",
                            className: "SwitchCase",
                        },
                    },
                },
            }, defaultActivities: {
                serializedName: "typeProperties.defaultActivities",
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "Composite",
                            className: "Activity",
                        },
                    },
                },
            } }),
    },
};
exports.ForEachActivity = {
    serializedName: "ForEach",
    type: {
        name: "Composite",
        className: "ForEachActivity",
        uberParent: "ControlActivity",
        additionalProperties: { type: { name: "Object" } },
        polymorphicDiscriminator: exports.ControlActivity.type.polymorphicDiscriminator,
        modelProperties: Object.assign(Object.assign({}, exports.ControlActivity.type.modelProperties), { isSequential: {
                serializedName: "typeProperties.isSequential",
                type: {
                    name: "Boolean",
                },
            }, batchCount: {
                constraints: {
                    InclusiveMaximum: 50,
                },
                serializedName: "typeProperties.batchCount",
                type: {
                    name: "Number",
                },
            }, items: {
                serializedName: "typeProperties.items",
                type: {
                    name: "Composite",
                    className: "Expression",
                },
            }, activities: {
                serializedName: "typeProperties.activities",
                required: true,
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "Composite",
                            className: "Activity",
                        },
                    },
                },
            } }),
    },
};
exports.WaitActivity = {
    serializedName: "Wait",
    type: {
        name: "Composite",
        className: "WaitActivity",
        uberParent: "ControlActivity",
        additionalProperties: { type: { name: "Object" } },
        polymorphicDiscriminator: exports.ControlActivity.type.polymorphicDiscriminator,
        modelProperties: Object.assign(Object.assign({}, exports.ControlActivity.type.modelProperties), { waitTimeInSeconds: {
                serializedName: "typeProperties.waitTimeInSeconds",
                required: true,
                type: {
                    name: "any",
                },
            } }),
    },
};
exports.FailActivity = {
    serializedName: "Fail",
    type: {
        name: "Composite",
        className: "FailActivity",
        uberParent: "ControlActivity",
        additionalProperties: { type: { name: "Object" } },
        polymorphicDiscriminator: exports.ControlActivity.type.polymorphicDiscriminator,
        modelProperties: Object.assign(Object.assign({}, exports.ControlActivity.type.modelProperties), { message: {
                serializedName: "typeProperties.message",
                required: true,
                type: {
                    name: "any",
                },
            }, errorCode: {
                serializedName: "typeProperties.errorCode",
                required: true,
                type: {
                    name: "any",
                },
            } }),
    },
};
exports.UntilActivity = {
    serializedName: "Until",
    type: {
        name: "Composite",
        className: "UntilActivity",
        uberParent: "ControlActivity",
        additionalProperties: { type: { name: "Object" } },
        polymorphicDiscriminator: exports.ControlActivity.type.polymorphicDiscriminator,
        modelProperties: Object.assign(Object.assign({}, exports.ControlActivity.type.modelProperties), { expression: {
                serializedName: "typeProperties.expression",
                type: {
                    name: "Composite",
                    className: "Expression",
                },
            }, timeout: {
                serializedName: "typeProperties.timeout",
                type: {
                    name: "any",
                },
            }, activities: {
                serializedName: "typeProperties.activities",
                required: true,
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "Composite",
                            className: "Activity",
                        },
                    },
                },
            } }),
    },
};
exports.ValidationActivity = {
    serializedName: "Validation",
    type: {
        name: "Composite",
        className: "ValidationActivity",
        uberParent: "ControlActivity",
        additionalProperties: { type: { name: "Object" } },
        polymorphicDiscriminator: exports.ControlActivity.type.polymorphicDiscriminator,
        modelProperties: Object.assign(Object.assign({}, exports.ControlActivity.type.modelProperties), { timeout: {
                serializedName: "typeProperties.timeout",
                type: {
                    name: "any",
                },
            }, sleep: {
                serializedName: "typeProperties.sleep",
                type: {
                    name: "any",
                },
            }, minimumSize: {
                serializedName: "typeProperties.minimumSize",
                type: {
                    name: "any",
                },
            }, childItems: {
                serializedName: "typeProperties.childItems",
                type: {
                    name: "any",
                },
            }, dataset: {
                serializedName: "typeProperties.dataset",
                type: {
                    name: "Composite",
                    className: "DatasetReference",
                },
            } }),
    },
};
exports.FilterActivity = {
    serializedName: "Filter",
    type: {
        name: "Composite",
        className: "FilterActivity",
        uberParent: "ControlActivity",
        additionalProperties: { type: { name: "Object" } },
        polymorphicDiscriminator: exports.ControlActivity.type.polymorphicDiscriminator,
        modelProperties: Object.assign(Object.assign({}, exports.ControlActivity.type.modelProperties), { items: {
                serializedName: "typeProperties.items",
                type: {
                    name: "Composite",
                    className: "Expression",
                },
            }, condition: {
                serializedName: "typeProperties.condition",
                type: {
                    name: "Composite",
                    className: "Expression",
                },
            } }),
    },
};
exports.SetVariableActivity = {
    serializedName: "SetVariable",
    type: {
        name: "Composite",
        className: "SetVariableActivity",
        uberParent: "ControlActivity",
        additionalProperties: { type: { name: "Object" } },
        polymorphicDiscriminator: exports.ControlActivity.type.polymorphicDiscriminator,
        modelProperties: Object.assign(Object.assign({}, exports.ControlActivity.type.modelProperties), { policy: {
                serializedName: "policy",
                type: {
                    name: "Composite",
                    className: "SecureInputOutputPolicy",
                },
            }, variableName: {
                serializedName: "typeProperties.variableName",
                type: {
                    name: "String",
                },
            }, value: {
                serializedName: "typeProperties.value",
                type: {
                    name: "any",
                },
            }, setSystemVariable: {
                serializedName: "typeProperties.setSystemVariable",
                type: {
                    name: "Boolean",
                },
            } }),
    },
};
exports.AppendVariableActivity = {
    serializedName: "AppendVariable",
    type: {
        name: "Composite",
        className: "AppendVariableActivity",
        uberParent: "ControlActivity",
        additionalProperties: { type: { name: "Object" } },
        polymorphicDiscriminator: exports.ControlActivity.type.polymorphicDiscriminator,
        modelProperties: Object.assign(Object.assign({}, exports.ControlActivity.type.modelProperties), { variableName: {
                serializedName: "typeProperties.variableName",
                type: {
                    name: "String",
                },
            }, value: {
                serializedName: "typeProperties.value",
                type: {
                    name: "any",
                },
            } }),
    },
};
exports.WebHookActivity = {
    serializedName: "WebHook",
    type: {
        name: "Composite",
        className: "WebHookActivity",
        uberParent: "ControlActivity",
        additionalProperties: { type: { name: "Object" } },
        polymorphicDiscriminator: exports.ControlActivity.type.polymorphicDiscriminator,
        modelProperties: Object.assign(Object.assign({}, exports.ControlActivity.type.modelProperties), { method: {
                serializedName: "typeProperties.method",
                required: true,
                type: {
                    name: "String",
                },
            }, url: {
                serializedName: "typeProperties.url",
                required: true,
                type: {
                    name: "any",
                },
            }, timeout: {
                serializedName: "typeProperties.timeout",
                type: {
                    name: "String",
                },
            }, headers: {
                serializedName: "typeProperties.headers",
                type: {
                    name: "any",
                },
            }, body: {
                serializedName: "typeProperties.body",
                type: {
                    name: "any",
                },
            }, authentication: {
                serializedName: "typeProperties.authentication",
                type: {
                    name: "Composite",
                    className: "WebActivityAuthentication",
                },
            }, reportStatusOnCallBack: {
                serializedName: "typeProperties.reportStatusOnCallBack",
                type: {
                    name: "any",
                },
            } }),
    },
};
exports.CopyActivity = {
    serializedName: "Copy",
    type: {
        name: "Composite",
        className: "CopyActivity",
        uberParent: "ExecutionActivity",
        additionalProperties: { type: { name: "Object" } },
        polymorphicDiscriminator: exports.ExecutionActivity.type.polymorphicDiscriminator,
        modelProperties: Object.assign(Object.assign({}, exports.ExecutionActivity.type.modelProperties), { inputs: {
                serializedName: "inputs",
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "Composite",
                            className: "DatasetReference",
                        },
                    },
                },
            }, outputs: {
                serializedName: "outputs",
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "Composite",
                            className: "DatasetReference",
                        },
                    },
                },
            }, source: {
                serializedName: "typeProperties.source",
                type: {
                    name: "Composite",
                    className: "CopySource",
                },
            }, sink: {
                serializedName: "typeProperties.sink",
                type: {
                    name: "Composite",
                    className: "CopySink",
                },
            }, translator: {
                serializedName: "typeProperties.translator",
                type: {
                    name: "any",
                },
            }, enableStaging: {
                serializedName: "typeProperties.enableStaging",
                type: {
                    name: "any",
                },
            }, stagingSettings: {
                serializedName: "typeProperties.stagingSettings",
                type: {
                    name: "Composite",
                    className: "StagingSettings",
                },
            }, parallelCopies: {
                serializedName: "typeProperties.parallelCopies",
                type: {
                    name: "any",
                },
            }, dataIntegrationUnits: {
                serializedName: "typeProperties.dataIntegrationUnits",
                type: {
                    name: "any",
                },
            }, enableSkipIncompatibleRow: {
                serializedName: "typeProperties.enableSkipIncompatibleRow",
                type: {
                    name: "any",
                },
            }, redirectIncompatibleRowSettings: {
                serializedName: "typeProperties.redirectIncompatibleRowSettings",
                type: {
                    name: "Composite",
                    className: "RedirectIncompatibleRowSettings",
                },
            }, logStorageSettings: {
                serializedName: "typeProperties.logStorageSettings",
                type: {
                    name: "Composite",
                    className: "LogStorageSettings",
                },
            }, logSettings: {
                serializedName: "typeProperties.logSettings",
                type: {
                    name: "Composite",
                    className: "LogSettings",
                },
            }, preserveRules: {
                serializedName: "typeProperties.preserveRules",
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "any",
                        },
                    },
                },
            }, preserve: {
                serializedName: "typeProperties.preserve",
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "any",
                        },
                    },
                },
            }, validateDataConsistency: {
                serializedName: "typeProperties.validateDataConsistency",
                type: {
                    name: "any",
                },
            }, skipErrorFile: {
                serializedName: "typeProperties.skipErrorFile",
                type: {
                    name: "Composite",
                    className: "SkipErrorFile",
                },
            } }),
    },
};
exports.HDInsightHiveActivity = {
    serializedName: "HDInsightHive",
    type: {
        name: "Composite",
        className: "HDInsightHiveActivity",
        uberParent: "ExecutionActivity",
        additionalProperties: { type: { name: "Object" } },
        polymorphicDiscriminator: exports.ExecutionActivity.type.polymorphicDiscriminator,
        modelProperties: Object.assign(Object.assign({}, exports.ExecutionActivity.type.modelProperties), { storageLinkedServices: {
                serializedName: "typeProperties.storageLinkedServices",
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "Composite",
                            className: "LinkedServiceReference",
                        },
                    },
                },
            }, arguments: {
                serializedName: "typeProperties.arguments",
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "any",
                        },
                    },
                },
            }, getDebugInfo: {
                serializedName: "typeProperties.getDebugInfo",
                type: {
                    name: "String",
                },
            }, scriptPath: {
                serializedName: "typeProperties.scriptPath",
                type: {
                    name: "any",
                },
            }, scriptLinkedService: {
                serializedName: "typeProperties.scriptLinkedService",
                type: {
                    name: "Composite",
                    className: "LinkedServiceReference",
                },
            }, defines: {
                serializedName: "typeProperties.defines",
                type: {
                    name: "Dictionary",
                    value: { type: { name: "any" } },
                },
            }, variables: {
                serializedName: "typeProperties.variables",
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "any",
                        },
                    },
                },
            }, queryTimeout: {
                serializedName: "typeProperties.queryTimeout",
                type: {
                    name: "Number",
                },
            } }),
    },
};
exports.HDInsightPigActivity = {
    serializedName: "HDInsightPig",
    type: {
        name: "Composite",
        className: "HDInsightPigActivity",
        uberParent: "ExecutionActivity",
        additionalProperties: { type: { name: "Object" } },
        polymorphicDiscriminator: exports.ExecutionActivity.type.polymorphicDiscriminator,
        modelProperties: Object.assign(Object.assign({}, exports.ExecutionActivity.type.modelProperties), { storageLinkedServices: {
                serializedName: "typeProperties.storageLinkedServices",
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "Composite",
                            className: "LinkedServiceReference",
                        },
                    },
                },
            }, arguments: {
                serializedName: "typeProperties.arguments",
                type: {
                    name: "any",
                },
            }, getDebugInfo: {
                serializedName: "typeProperties.getDebugInfo",
                type: {
                    name: "String",
                },
            }, scriptPath: {
                serializedName: "typeProperties.scriptPath",
                type: {
                    name: "any",
                },
            }, scriptLinkedService: {
                serializedName: "typeProperties.scriptLinkedService",
                type: {
                    name: "Composite",
                    className: "LinkedServiceReference",
                },
            }, defines: {
                serializedName: "typeProperties.defines",
                type: {
                    name: "Dictionary",
                    value: { type: { name: "any" } },
                },
            } }),
    },
};
exports.HDInsightMapReduceActivity = {
    serializedName: "HDInsightMapReduce",
    type: {
        name: "Composite",
        className: "HDInsightMapReduceActivity",
        uberParent: "ExecutionActivity",
        additionalProperties: { type: { name: "Object" } },
        polymorphicDiscriminator: exports.ExecutionActivity.type.polymorphicDiscriminator,
        modelProperties: Object.assign(Object.assign({}, exports.ExecutionActivity.type.modelProperties), { storageLinkedServices: {
                serializedName: "typeProperties.storageLinkedServices",
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "Composite",
                            className: "LinkedServiceReference",
                        },
                    },
                },
            }, arguments: {
                serializedName: "typeProperties.arguments",
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "any",
                        },
                    },
                },
            }, getDebugInfo: {
                serializedName: "typeProperties.getDebugInfo",
                type: {
                    name: "String",
                },
            }, className: {
                serializedName: "typeProperties.className",
                required: true,
                type: {
                    name: "any",
                },
            }, jarFilePath: {
                serializedName: "typeProperties.jarFilePath",
                required: true,
                type: {
                    name: "any",
                },
            }, jarLinkedService: {
                serializedName: "typeProperties.jarLinkedService",
                type: {
                    name: "Composite",
                    className: "LinkedServiceReference",
                },
            }, jarLibs: {
                serializedName: "typeProperties.jarLibs",
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "any",
                        },
                    },
                },
            }, defines: {
                serializedName: "typeProperties.defines",
                type: {
                    name: "Dictionary",
                    value: { type: { name: "any" } },
                },
            } }),
    },
};
exports.HDInsightStreamingActivity = {
    serializedName: "HDInsightStreaming",
    type: {
        name: "Composite",
        className: "HDInsightStreamingActivity",
        uberParent: "ExecutionActivity",
        additionalProperties: { type: { name: "Object" } },
        polymorphicDiscriminator: exports.ExecutionActivity.type.polymorphicDiscriminator,
        modelProperties: Object.assign(Object.assign({}, exports.ExecutionActivity.type.modelProperties), { storageLinkedServices: {
                serializedName: "typeProperties.storageLinkedServices",
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "Composite",
                            className: "LinkedServiceReference",
                        },
                    },
                },
            }, arguments: {
                serializedName: "typeProperties.arguments",
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "any",
                        },
                    },
                },
            }, getDebugInfo: {
                serializedName: "typeProperties.getDebugInfo",
                type: {
                    name: "String",
                },
            }, mapper: {
                serializedName: "typeProperties.mapper",
                required: true,
                type: {
                    name: "any",
                },
            }, reducer: {
                serializedName: "typeProperties.reducer",
                required: true,
                type: {
                    name: "any",
                },
            }, input: {
                serializedName: "typeProperties.input",
                required: true,
                type: {
                    name: "any",
                },
            }, output: {
                serializedName: "typeProperties.output",
                required: true,
                type: {
                    name: "any",
                },
            }, filePaths: {
                serializedName: "typeProperties.filePaths",
                required: true,
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "any",
                        },
                    },
                },
            }, fileLinkedService: {
                serializedName: "typeProperties.fileLinkedService",
                type: {
                    name: "Composite",
                    className: "LinkedServiceReference",
                },
            }, combiner: {
                serializedName: "typeProperties.combiner",
                type: {
                    name: "any",
                },
            }, commandEnvironment: {
                serializedName: "typeProperties.commandEnvironment",
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "any",
                        },
                    },
                },
            }, defines: {
                serializedName: "typeProperties.defines",
                type: {
                    name: "Dictionary",
                    value: { type: { name: "any" } },
                },
            } }),
    },
};
exports.HDInsightSparkActivity = {
    serializedName: "HDInsightSpark",
    type: {
        name: "Composite",
        className: "HDInsightSparkActivity",
        uberParent: "ExecutionActivity",
        additionalProperties: { type: { name: "Object" } },
        polymorphicDiscriminator: exports.ExecutionActivity.type.polymorphicDiscriminator,
        modelProperties: Object.assign(Object.assign({}, exports.ExecutionActivity.type.modelProperties), { rootPath: {
                serializedName: "typeProperties.rootPath",
                required: true,
                type: {
                    name: "any",
                },
            }, entryFilePath: {
                serializedName: "typeProperties.entryFilePath",
                required: true,
                type: {
                    name: "any",
                },
            }, arguments: {
                serializedName: "typeProperties.arguments",
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "any",
                        },
                    },
                },
            }, getDebugInfo: {
                serializedName: "typeProperties.getDebugInfo",
                type: {
                    name: "String",
                },
            }, sparkJobLinkedService: {
                serializedName: "typeProperties.sparkJobLinkedService",
                type: {
                    name: "Composite",
                    className: "LinkedServiceReference",
                },
            }, className: {
                serializedName: "typeProperties.className",
                type: {
                    name: "String",
                },
            }, proxyUser: {
                serializedName: "typeProperties.proxyUser",
                type: {
                    name: "any",
                },
            }, sparkConfig: {
                serializedName: "typeProperties.sparkConfig",
                type: {
                    name: "Dictionary",
                    value: { type: { name: "any" } },
                },
            } }),
    },
};
exports.ExecuteSsisPackageActivity = {
    serializedName: "ExecuteSSISPackage",
    type: {
        name: "Composite",
        className: "ExecuteSsisPackageActivity",
        uberParent: "ExecutionActivity",
        additionalProperties: { type: { name: "Object" } },
        polymorphicDiscriminator: exports.ExecutionActivity.type.polymorphicDiscriminator,
        modelProperties: Object.assign(Object.assign({}, exports.ExecutionActivity.type.modelProperties), { packageLocation: {
                serializedName: "typeProperties.packageLocation",
                type: {
                    name: "Composite",
                    className: "SsisPackageLocation",
                },
            }, runtime: {
                serializedName: "typeProperties.runtime",
                type: {
                    name: "any",
                },
            }, loggingLevel: {
                serializedName: "typeProperties.loggingLevel",
                type: {
                    name: "any",
                },
            }, environmentPath: {
                serializedName: "typeProperties.environmentPath",
                type: {
                    name: "any",
                },
            }, executionCredential: {
                serializedName: "typeProperties.executionCredential",
                type: {
                    name: "Composite",
                    className: "SsisExecutionCredential",
                },
            }, connectVia: {
                serializedName: "typeProperties.connectVia",
                type: {
                    name: "Composite",
                    className: "IntegrationRuntimeReference",
                },
            }, projectParameters: {
                serializedName: "typeProperties.projectParameters",
                type: {
                    name: "Dictionary",
                    value: {
                        type: { name: "Composite", className: "SsisExecutionParameter" },
                    },
                },
            }, packageParameters: {
                serializedName: "typeProperties.packageParameters",
                type: {
                    name: "Dictionary",
                    value: {
                        type: { name: "Composite", className: "SsisExecutionParameter" },
                    },
                },
            }, projectConnectionManagers: {
                serializedName: "typeProperties.projectConnectionManagers",
                type: {
                    name: "Dictionary",
                    value: {
                        type: {
                            name: "Dictionary",
                            value: {
                                type: {
                                    name: "Composite",
                                    className: "SsisExecutionParameter",
                                },
                            },
                        },
                    },
                },
            }, packageConnectionManagers: {
                serializedName: "typeProperties.packageConnectionManagers",
                type: {
                    name: "Dictionary",
                    value: {
                        type: {
                            name: "Dictionary",
                            value: {
                                type: {
                                    name: "Composite",
                                    className: "SsisExecutionParameter",
                                },
                            },
                        },
                    },
                },
            }, propertyOverrides: {
                serializedName: "typeProperties.propertyOverrides",
                type: {
                    name: "Dictionary",
                    value: {
                        type: { name: "Composite", className: "SsisPropertyOverride" },
                    },
                },
            }, logLocation: {
                serializedName: "typeProperties.logLocation",
                type: {
                    name: "Composite",
                    className: "SsisLogLocation",
                },
            } }),
    },
};
exports.CustomActivity = {
    serializedName: "Custom",
    type: {
        name: "Composite",
        className: "CustomActivity",
        uberParent: "ExecutionActivity",
        additionalProperties: { type: { name: "Object" } },
        polymorphicDiscriminator: exports.ExecutionActivity.type.polymorphicDiscriminator,
        modelProperties: Object.assign(Object.assign({}, exports.ExecutionActivity.type.modelProperties), { command: {
                serializedName: "typeProperties.command",
                required: true,
                type: {
                    name: "any",
                },
            }, resourceLinkedService: {
                serializedName: "typeProperties.resourceLinkedService",
                type: {
                    name: "Composite",
                    className: "LinkedServiceReference",
                },
            }, folderPath: {
                serializedName: "typeProperties.folderPath",
                type: {
                    name: "any",
                },
            }, referenceObjects: {
                serializedName: "typeProperties.referenceObjects",
                type: {
                    name: "Composite",
                    className: "CustomActivityReferenceObject",
                },
            }, extendedProperties: {
                serializedName: "typeProperties.extendedProperties",
                type: {
                    name: "Dictionary",
                    value: { type: { name: "any" } },
                },
            }, retentionTimeInDays: {
                serializedName: "typeProperties.retentionTimeInDays",
                type: {
                    name: "any",
                },
            }, autoUserSpecification: {
                serializedName: "typeProperties.autoUserSpecification",
                type: {
                    name: "any",
                },
            } }),
    },
};
exports.SqlServerStoredProcedureActivity = {
    serializedName: "SqlServerStoredProcedure",
    type: {
        name: "Composite",
        className: "SqlServerStoredProcedureActivity",
        uberParent: "ExecutionActivity",
        additionalProperties: { type: { name: "Object" } },
        polymorphicDiscriminator: exports.ExecutionActivity.type.polymorphicDiscriminator,
        modelProperties: Object.assign(Object.assign({}, exports.ExecutionActivity.type.modelProperties), { storedProcedureName: {
                serializedName: "typeProperties.storedProcedureName",
                required: true,
                type: {
                    name: "any",
                },
            }, storedProcedureParameters: {
                serializedName: "typeProperties.storedProcedureParameters",
                type: {
                    name: "any",
                },
            } }),
    },
};
exports.DeleteActivity = {
    serializedName: "Delete",
    type: {
        name: "Composite",
        className: "DeleteActivity",
        uberParent: "ExecutionActivity",
        additionalProperties: { type: { name: "Object" } },
        polymorphicDiscriminator: exports.ExecutionActivity.type.polymorphicDiscriminator,
        modelProperties: Object.assign(Object.assign({}, exports.ExecutionActivity.type.modelProperties), { recursive: {
                serializedName: "typeProperties.recursive",
                type: {
                    name: "any",
                },
            }, maxConcurrentConnections: {
                constraints: {
                    InclusiveMinimum: 1,
                },
                serializedName: "typeProperties.maxConcurrentConnections",
                type: {
                    name: "Number",
                },
            }, enableLogging: {
                serializedName: "typeProperties.enableLogging",
                type: {
                    name: "any",
                },
            }, logStorageSettings: {
                serializedName: "typeProperties.logStorageSettings",
                type: {
                    name: "Composite",
                    className: "LogStorageSettings",
                },
            }, dataset: {
                serializedName: "typeProperties.dataset",
                type: {
                    name: "Composite",
                    className: "DatasetReference",
                },
            }, storeSettings: {
                serializedName: "typeProperties.storeSettings",
                type: {
                    name: "Composite",
                    className: "StoreReadSettings",
                },
            } }),
    },
};
exports.AzureDataExplorerCommandActivity = {
    serializedName: "AzureDataExplorerCommand",
    type: {
        name: "Composite",
        className: "AzureDataExplorerCommandActivity",
        uberParent: "ExecutionActivity",
        additionalProperties: { type: { name: "Object" } },
        polymorphicDiscriminator: exports.ExecutionActivity.type.polymorphicDiscriminator,
        modelProperties: Object.assign(Object.assign({}, exports.ExecutionActivity.type.modelProperties), { command: {
                serializedName: "typeProperties.command",
                required: true,
                type: {
                    name: "any",
                },
            }, commandTimeout: {
                serializedName: "typeProperties.commandTimeout",
                type: {
                    name: "any",
                },
            } }),
    },
};
exports.LookupActivity = {
    serializedName: "Lookup",
    type: {
        name: "Composite",
        className: "LookupActivity",
        uberParent: "ExecutionActivity",
        additionalProperties: { type: { name: "Object" } },
        polymorphicDiscriminator: exports.ExecutionActivity.type.polymorphicDiscriminator,
        modelProperties: Object.assign(Object.assign({}, exports.ExecutionActivity.type.modelProperties), { source: {
                serializedName: "typeProperties.source",
                type: {
                    name: "Composite",
                    className: "CopySource",
                },
            }, dataset: {
                serializedName: "typeProperties.dataset",
                type: {
                    name: "Composite",
                    className: "DatasetReference",
                },
            }, firstRowOnly: {
                serializedName: "typeProperties.firstRowOnly",
                type: {
                    name: "any",
                },
            } }),
    },
};
exports.WebActivity = {
    serializedName: "WebActivity",
    type: {
        name: "Composite",
        className: "WebActivity",
        uberParent: "ExecutionActivity",
        additionalProperties: { type: { name: "Object" } },
        polymorphicDiscriminator: exports.ExecutionActivity.type.polymorphicDiscriminator,
        modelProperties: Object.assign(Object.assign({}, exports.ExecutionActivity.type.modelProperties), { method: {
                serializedName: "typeProperties.method",
                required: true,
                type: {
                    name: "String",
                },
            }, url: {
                serializedName: "typeProperties.url",
                required: true,
                type: {
                    name: "any",
                },
            }, headers: {
                serializedName: "typeProperties.headers",
                type: {
                    name: "any",
                },
            }, body: {
                serializedName: "typeProperties.body",
                type: {
                    name: "any",
                },
            }, authentication: {
                serializedName: "typeProperties.authentication",
                type: {
                    name: "Composite",
                    className: "WebActivityAuthentication",
                },
            }, datasets: {
                serializedName: "typeProperties.datasets",
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "Composite",
                            className: "DatasetReference",
                        },
                    },
                },
            }, linkedServices: {
                serializedName: "typeProperties.linkedServices",
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "Composite",
                            className: "LinkedServiceReference",
                        },
                    },
                },
            }, connectVia: {
                serializedName: "typeProperties.connectVia",
                type: {
                    name: "Composite",
                    className: "IntegrationRuntimeReference",
                },
            } }),
    },
};
exports.GetMetadataActivity = {
    serializedName: "GetMetadata",
    type: {
        name: "Composite",
        className: "GetMetadataActivity",
        uberParent: "ExecutionActivity",
        additionalProperties: { type: { name: "Object" } },
        polymorphicDiscriminator: exports.ExecutionActivity.type.polymorphicDiscriminator,
        modelProperties: Object.assign(Object.assign({}, exports.ExecutionActivity.type.modelProperties), { dataset: {
                serializedName: "typeProperties.dataset",
                type: {
                    name: "Composite",
                    className: "DatasetReference",
                },
            }, fieldList: {
                serializedName: "typeProperties.fieldList",
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "any",
                        },
                    },
                },
            }, storeSettings: {
                serializedName: "typeProperties.storeSettings",
                type: {
                    name: "Composite",
                    className: "StoreReadSettings",
                },
            }, formatSettings: {
                serializedName: "typeProperties.formatSettings",
                type: {
                    name: "Composite",
                    className: "FormatReadSettings",
                },
            } }),
    },
};
exports.AzureMLBatchExecutionActivity = {
    serializedName: "AzureMLBatchExecution",
    type: {
        name: "Composite",
        className: "AzureMLBatchExecutionActivity",
        uberParent: "ExecutionActivity",
        additionalProperties: { type: { name: "Object" } },
        polymorphicDiscriminator: exports.ExecutionActivity.type.polymorphicDiscriminator,
        modelProperties: Object.assign(Object.assign({}, exports.ExecutionActivity.type.modelProperties), { globalParameters: {
                serializedName: "typeProperties.globalParameters",
                type: {
                    name: "Dictionary",
                    value: { type: { name: "any" } },
                },
            }, webServiceOutputs: {
                serializedName: "typeProperties.webServiceOutputs",
                type: {
                    name: "Dictionary",
                    value: {
                        type: { name: "Composite", className: "AzureMLWebServiceFile" },
                    },
                },
            }, webServiceInputs: {
                serializedName: "typeProperties.webServiceInputs",
                type: {
                    name: "Dictionary",
                    value: {
                        type: { name: "Composite", className: "AzureMLWebServiceFile" },
                    },
                },
            } }),
    },
};
exports.AzureMLUpdateResourceActivity = {
    serializedName: "AzureMLUpdateResource",
    type: {
        name: "Composite",
        className: "AzureMLUpdateResourceActivity",
        uberParent: "ExecutionActivity",
        additionalProperties: { type: { name: "Object" } },
        polymorphicDiscriminator: exports.ExecutionActivity.type.polymorphicDiscriminator,
        modelProperties: Object.assign(Object.assign({}, exports.ExecutionActivity.type.modelProperties), { trainedModelName: {
                serializedName: "typeProperties.trainedModelName",
                required: true,
                type: {
                    name: "any",
                },
            }, trainedModelLinkedServiceName: {
                serializedName: "typeProperties.trainedModelLinkedServiceName",
                type: {
                    name: "Composite",
                    className: "LinkedServiceReference",
                },
            }, trainedModelFilePath: {
                serializedName: "typeProperties.trainedModelFilePath",
                required: true,
                type: {
                    name: "any",
                },
            } }),
    },
};
exports.AzureMLExecutePipelineActivity = {
    serializedName: "AzureMLExecutePipeline",
    type: {
        name: "Composite",
        className: "AzureMLExecutePipelineActivity",
        uberParent: "ExecutionActivity",
        additionalProperties: { type: { name: "Object" } },
        polymorphicDiscriminator: exports.ExecutionActivity.type.polymorphicDiscriminator,
        modelProperties: Object.assign(Object.assign({}, exports.ExecutionActivity.type.modelProperties), { mlPipelineId: {
                serializedName: "typeProperties.mlPipelineId",
                required: true,
                type: {
                    name: "any",
                },
            }, experimentName: {
                serializedName: "typeProperties.experimentName",
                type: {
                    name: "any",
                },
            }, mlPipelineParameters: {
                serializedName: "typeProperties.mlPipelineParameters",
                type: {
                    name: "any",
                },
            }, mlParentRunId: {
                serializedName: "typeProperties.mlParentRunId",
                type: {
                    name: "any",
                },
            }, continueOnStepFailure: {
                serializedName: "typeProperties.continueOnStepFailure",
                type: {
                    name: "any",
                },
            } }),
    },
};
exports.DataLakeAnalyticsUsqlActivity = {
    serializedName: "DataLakeAnalyticsU-SQL",
    type: {
        name: "Composite",
        className: "DataLakeAnalyticsUsqlActivity",
        uberParent: "ExecutionActivity",
        additionalProperties: { type: { name: "Object" } },
        polymorphicDiscriminator: exports.ExecutionActivity.type.polymorphicDiscriminator,
        modelProperties: Object.assign(Object.assign({}, exports.ExecutionActivity.type.modelProperties), { scriptPath: {
                serializedName: "typeProperties.scriptPath",
                required: true,
                type: {
                    name: "any",
                },
            }, scriptLinkedService: {
                serializedName: "typeProperties.scriptLinkedService",
                type: {
                    name: "Composite",
                    className: "LinkedServiceReference",
                },
            }, degreeOfParallelism: {
                serializedName: "typeProperties.degreeOfParallelism",
                type: {
                    name: "any",
                },
            }, priority: {
                serializedName: "typeProperties.priority",
                type: {
                    name: "any",
                },
            }, parameters: {
                serializedName: "typeProperties.parameters",
                type: {
                    name: "Dictionary",
                    value: { type: { name: "any" } },
                },
            }, runtimeVersion: {
                serializedName: "typeProperties.runtimeVersion",
                type: {
                    name: "any",
                },
            }, compilationMode: {
                serializedName: "typeProperties.compilationMode",
                type: {
                    name: "any",
                },
            } }),
    },
};
exports.DatabricksNotebookActivity = {
    serializedName: "DatabricksNotebook",
    type: {
        name: "Composite",
        className: "DatabricksNotebookActivity",
        uberParent: "ExecutionActivity",
        additionalProperties: { type: { name: "Object" } },
        polymorphicDiscriminator: exports.ExecutionActivity.type.polymorphicDiscriminator,
        modelProperties: Object.assign(Object.assign({}, exports.ExecutionActivity.type.modelProperties), { notebookPath: {
                serializedName: "typeProperties.notebookPath",
                required: true,
                type: {
                    name: "any",
                },
            }, baseParameters: {
                serializedName: "typeProperties.baseParameters",
                type: {
                    name: "Dictionary",
                    value: { type: { name: "any" } },
                },
            }, libraries: {
                serializedName: "typeProperties.libraries",
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "Dictionary",
                            value: { type: { name: "any" } },
                        },
                    },
                },
            } }),
    },
};
exports.DatabricksSparkJarActivity = {
    serializedName: "DatabricksSparkJar",
    type: {
        name: "Composite",
        className: "DatabricksSparkJarActivity",
        uberParent: "ExecutionActivity",
        additionalProperties: { type: { name: "Object" } },
        polymorphicDiscriminator: exports.ExecutionActivity.type.polymorphicDiscriminator,
        modelProperties: Object.assign(Object.assign({}, exports.ExecutionActivity.type.modelProperties), { mainClassName: {
                serializedName: "typeProperties.mainClassName",
                required: true,
                type: {
                    name: "any",
                },
            }, parameters: {
                serializedName: "typeProperties.parameters",
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "any",
                        },
                    },
                },
            }, libraries: {
                serializedName: "typeProperties.libraries",
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "Dictionary",
                            value: { type: { name: "any" } },
                        },
                    },
                },
            } }),
    },
};
exports.DatabricksSparkPythonActivity = {
    serializedName: "DatabricksSparkPython",
    type: {
        name: "Composite",
        className: "DatabricksSparkPythonActivity",
        uberParent: "ExecutionActivity",
        additionalProperties: { type: { name: "Object" } },
        polymorphicDiscriminator: exports.ExecutionActivity.type.polymorphicDiscriminator,
        modelProperties: Object.assign(Object.assign({}, exports.ExecutionActivity.type.modelProperties), { pythonFile: {
                serializedName: "typeProperties.pythonFile",
                required: true,
                type: {
                    name: "any",
                },
            }, parameters: {
                serializedName: "typeProperties.parameters",
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "any",
                        },
                    },
                },
            }, libraries: {
                serializedName: "typeProperties.libraries",
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "Dictionary",
                            value: { type: { name: "any" } },
                        },
                    },
                },
            } }),
    },
};
exports.AzureFunctionActivity = {
    serializedName: "AzureFunctionActivity",
    type: {
        name: "Composite",
        className: "AzureFunctionActivity",
        uberParent: "ExecutionActivity",
        additionalProperties: { type: { name: "Object" } },
        polymorphicDiscriminator: exports.ExecutionActivity.type.polymorphicDiscriminator,
        modelProperties: Object.assign(Object.assign({}, exports.ExecutionActivity.type.modelProperties), { method: {
                serializedName: "typeProperties.method",
                required: true,
                type: {
                    name: "String",
                },
            }, functionName: {
                serializedName: "typeProperties.functionName",
                required: true,
                type: {
                    name: "any",
                },
            }, headers: {
                serializedName: "typeProperties.headers",
                type: {
                    name: "any",
                },
            }, body: {
                serializedName: "typeProperties.body",
                type: {
                    name: "any",
                },
            } }),
    },
};
exports.ExecuteDataFlowActivity = {
    serializedName: "ExecuteDataFlow",
    type: {
        name: "Composite",
        className: "ExecuteDataFlowActivity",
        uberParent: "ExecutionActivity",
        additionalProperties: { type: { name: "Object" } },
        polymorphicDiscriminator: exports.ExecutionActivity.type.polymorphicDiscriminator,
        modelProperties: Object.assign(Object.assign({}, exports.ExecutionActivity.type.modelProperties), { dataflow: {
                serializedName: "typeProperties.dataflow",
                type: {
                    name: "Composite",
                    className: "DataFlowReference",
                },
            }, staging: {
                serializedName: "typeProperties.staging",
                type: {
                    name: "Composite",
                    className: "DataFlowStagingInfo",
                },
            }, integrationRuntime: {
                serializedName: "typeProperties.integrationRuntime",
                type: {
                    name: "Composite",
                    className: "IntegrationRuntimeReference",
                },
            }, continuationSettings: {
                serializedName: "typeProperties.continuationSettings",
                type: {
                    name: "Composite",
                    className: "ContinuationSettingsReference",
                },
            }, compute: {
                serializedName: "typeProperties.compute",
                type: {
                    name: "Composite",
                    className: "ExecuteDataFlowActivityTypePropertiesCompute",
                },
            }, traceLevel: {
                serializedName: "typeProperties.traceLevel",
                type: {
                    name: "any",
                },
            }, continueOnError: {
                serializedName: "typeProperties.continueOnError",
                type: {
                    name: "any",
                },
            }, runConcurrently: {
                serializedName: "typeProperties.runConcurrently",
                type: {
                    name: "any",
                },
            }, sourceStagingConcurrency: {
                serializedName: "typeProperties.sourceStagingConcurrency",
                type: {
                    name: "any",
                },
            } }),
    },
};
exports.ScriptActivity = {
    serializedName: "Script",
    type: {
        name: "Composite",
        className: "ScriptActivity",
        uberParent: "ExecutionActivity",
        additionalProperties: { type: { name: "Object" } },
        polymorphicDiscriminator: exports.ExecutionActivity.type.polymorphicDiscriminator,
        modelProperties: Object.assign(Object.assign({}, exports.ExecutionActivity.type.modelProperties), { scriptBlockExecutionTimeout: {
                serializedName: "typeProperties.scriptBlockExecutionTimeout",
                type: {
                    name: "any",
                },
            }, scripts: {
                serializedName: "typeProperties.scripts",
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "Composite",
                            className: "ScriptActivityScriptBlock",
                        },
                    },
                },
            }, logSettings: {
                serializedName: "typeProperties.logSettings",
                type: {
                    name: "Composite",
                    className: "ScriptActivityTypePropertiesLogSettings",
                },
            }, returnMultistatementResult: {
                serializedName: "typeProperties.returnMultistatementResult",
                type: {
                    name: "any",
                },
            } }),
    },
};
exports.SynapseNotebookActivity = {
    serializedName: "SynapseNotebook",
    type: {
        name: "Composite",
        className: "SynapseNotebookActivity",
        uberParent: "ExecutionActivity",
        additionalProperties: { type: { name: "Object" } },
        polymorphicDiscriminator: exports.ExecutionActivity.type.polymorphicDiscriminator,
        modelProperties: Object.assign(Object.assign({}, exports.ExecutionActivity.type.modelProperties), { notebook: {
                serializedName: "typeProperties.notebook",
                type: {
                    name: "Composite",
                    className: "SynapseNotebookReference",
                },
            }, sparkPool: {
                serializedName: "typeProperties.sparkPool",
                type: {
                    name: "Composite",
                    className: "BigDataPoolParametrizationReference",
                },
            }, parameters: {
                serializedName: "typeProperties.parameters",
                type: {
                    name: "Dictionary",
                    value: {
                        type: { name: "Composite", className: "NotebookParameter" },
                    },
                },
            }, executorSize: {
                serializedName: "typeProperties.executorSize",
                type: {
                    name: "any",
                },
            }, conf: {
                serializedName: "typeProperties.conf",
                type: {
                    name: "any",
                },
            }, driverSize: {
                serializedName: "typeProperties.driverSize",
                type: {
                    name: "any",
                },
            }, numExecutors: {
                serializedName: "typeProperties.numExecutors",
                type: {
                    name: "any",
                },
            }, configurationType: {
                serializedName: "typeProperties.configurationType",
                type: {
                    name: "String",
                },
            }, targetSparkConfiguration: {
                serializedName: "typeProperties.targetSparkConfiguration",
                type: {
                    name: "Composite",
                    className: "SparkConfigurationParametrizationReference",
                },
            }, sparkConfig: {
                serializedName: "typeProperties.sparkConfig",
                type: {
                    name: "Dictionary",
                    value: { type: { name: "any" } },
                },
            }, authentication: {
                serializedName: "typeProperties.authentication",
                type: {
                    name: "Composite",
                    className: "SynapseActivityAuthentication",
                },
            } }),
    },
};
exports.SynapseSparkJobDefinitionActivity = {
    serializedName: "SparkJob",
    type: {
        name: "Composite",
        className: "SynapseSparkJobDefinitionActivity",
        uberParent: "ExecutionActivity",
        additionalProperties: { type: { name: "Object" } },
        polymorphicDiscriminator: exports.ExecutionActivity.type.polymorphicDiscriminator,
        modelProperties: Object.assign(Object.assign({}, exports.ExecutionActivity.type.modelProperties), { sparkJob: {
                serializedName: "typeProperties.sparkJob",
                type: {
                    name: "Composite",
                    className: "SynapseSparkJobReference",
                },
            }, arguments: {
                serializedName: "typeProperties.args",
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "any",
                        },
                    },
                },
            }, file: {
                serializedName: "typeProperties.file",
                type: {
                    name: "any",
                },
            }, scanFolder: {
                serializedName: "typeProperties.scanFolder",
                type: {
                    name: "any",
                },
            }, className: {
                serializedName: "typeProperties.className",
                type: {
                    name: "any",
                },
            }, files: {
                serializedName: "typeProperties.files",
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "any",
                        },
                    },
                },
            }, pythonCodeReference: {
                serializedName: "typeProperties.pythonCodeReference",
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "any",
                        },
                    },
                },
            }, filesV2: {
                serializedName: "typeProperties.filesV2",
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "any",
                        },
                    },
                },
            }, targetBigDataPool: {
                serializedName: "typeProperties.targetBigDataPool",
                type: {
                    name: "Composite",
                    className: "BigDataPoolParametrizationReference",
                },
            }, executorSize: {
                serializedName: "typeProperties.executorSize",
                type: {
                    name: "any",
                },
            }, conf: {
                serializedName: "typeProperties.conf",
                type: {
                    name: "any",
                },
            }, driverSize: {
                serializedName: "typeProperties.driverSize",
                type: {
                    name: "any",
                },
            }, numExecutors: {
                serializedName: "typeProperties.numExecutors",
                type: {
                    name: "any",
                },
            }, configurationType: {
                serializedName: "typeProperties.configurationType",
                type: {
                    name: "String",
                },
            }, targetSparkConfiguration: {
                serializedName: "typeProperties.targetSparkConfiguration",
                type: {
                    name: "Composite",
                    className: "SparkConfigurationParametrizationReference",
                },
            }, sparkConfig: {
                serializedName: "typeProperties.sparkConfig",
                type: {
                    name: "Dictionary",
                    value: { type: { name: "any" } },
                },
            }, authentication: {
                serializedName: "typeProperties.authentication",
                type: {
                    name: "Composite",
                    className: "SynapseActivityAuthentication",
                },
            } }),
    },
};
exports.ScheduleTrigger = {
    serializedName: "ScheduleTrigger",
    type: {
        name: "Composite",
        className: "ScheduleTrigger",
        uberParent: "MultiplePipelineTrigger",
        additionalProperties: { type: { name: "Object" } },
        polymorphicDiscriminator: exports.MultiplePipelineTrigger.type.polymorphicDiscriminator,
        modelProperties: Object.assign(Object.assign({}, exports.MultiplePipelineTrigger.type.modelProperties), { recurrence: {
                serializedName: "typeProperties.recurrence",
                type: {
                    name: "Composite",
                    className: "ScheduleTriggerRecurrence",
                },
            } }),
    },
};
exports.BlobTrigger = {
    serializedName: "BlobTrigger",
    type: {
        name: "Composite",
        className: "BlobTrigger",
        uberParent: "MultiplePipelineTrigger",
        additionalProperties: { type: { name: "Object" } },
        polymorphicDiscriminator: exports.MultiplePipelineTrigger.type.polymorphicDiscriminator,
        modelProperties: Object.assign(Object.assign({}, exports.MultiplePipelineTrigger.type.modelProperties), { folderPath: {
                serializedName: "typeProperties.folderPath",
                required: true,
                type: {
                    name: "String",
                },
            }, maxConcurrency: {
                serializedName: "typeProperties.maxConcurrency",
                required: true,
                type: {
                    name: "Number",
                },
            }, linkedService: {
                serializedName: "typeProperties.linkedService",
                type: {
                    name: "Composite",
                    className: "LinkedServiceReference",
                },
            } }),
    },
};
exports.BlobEventsTrigger = {
    serializedName: "BlobEventsTrigger",
    type: {
        name: "Composite",
        className: "BlobEventsTrigger",
        uberParent: "MultiplePipelineTrigger",
        additionalProperties: { type: { name: "Object" } },
        polymorphicDiscriminator: exports.MultiplePipelineTrigger.type.polymorphicDiscriminator,
        modelProperties: Object.assign(Object.assign({}, exports.MultiplePipelineTrigger.type.modelProperties), { blobPathBeginsWith: {
                serializedName: "typeProperties.blobPathBeginsWith",
                type: {
                    name: "String",
                },
            }, blobPathEndsWith: {
                serializedName: "typeProperties.blobPathEndsWith",
                type: {
                    name: "String",
                },
            }, ignoreEmptyBlobs: {
                serializedName: "typeProperties.ignoreEmptyBlobs",
                type: {
                    name: "Boolean",
                },
            }, events: {
                serializedName: "typeProperties.events",
                required: true,
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "String",
                        },
                    },
                },
            }, scope: {
                serializedName: "typeProperties.scope",
                required: true,
                type: {
                    name: "String",
                },
            } }),
    },
};
exports.CustomEventsTrigger = {
    serializedName: "CustomEventsTrigger",
    type: {
        name: "Composite",
        className: "CustomEventsTrigger",
        uberParent: "MultiplePipelineTrigger",
        additionalProperties: { type: { name: "Object" } },
        polymorphicDiscriminator: exports.MultiplePipelineTrigger.type.polymorphicDiscriminator,
        modelProperties: Object.assign(Object.assign({}, exports.MultiplePipelineTrigger.type.modelProperties), { subjectBeginsWith: {
                serializedName: "typeProperties.subjectBeginsWith",
                type: {
                    name: "String",
                },
            }, subjectEndsWith: {
                serializedName: "typeProperties.subjectEndsWith",
                type: {
                    name: "String",
                },
            }, events: {
                serializedName: "typeProperties.events",
                required: true,
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "any",
                        },
                    },
                },
            }, scope: {
                serializedName: "typeProperties.scope",
                required: true,
                type: {
                    name: "String",
                },
            } }),
    },
};
exports.AzureTableSource = {
    serializedName: "AzureTableSource",
    type: {
        name: "Composite",
        className: "AzureTableSource",
        uberParent: "TabularSource",
        additionalProperties: { type: { name: "Object" } },
        polymorphicDiscriminator: exports.TabularSource.type.polymorphicDiscriminator,
        modelProperties: Object.assign(Object.assign({}, exports.TabularSource.type.modelProperties), { azureTableSourceQuery: {
                serializedName: "azureTableSourceQuery",
                type: {
                    name: "any",
                },
            }, azureTableSourceIgnoreTableNotFound: {
                serializedName: "azureTableSourceIgnoreTableNotFound",
                type: {
                    name: "any",
                },
            } }),
    },
};
exports.InformixSource = {
    serializedName: "InformixSource",
    type: {
        name: "Composite",
        className: "InformixSource",
        uberParent: "TabularSource",
        additionalProperties: { type: { name: "Object" } },
        polymorphicDiscriminator: exports.TabularSource.type.polymorphicDiscriminator,
        modelProperties: Object.assign(Object.assign({}, exports.TabularSource.type.modelProperties), { query: {
                serializedName: "query",
                type: {
                    name: "any",
                },
            } }),
    },
};
exports.Db2Source = {
    serializedName: "Db2Source",
    type: {
        name: "Composite",
        className: "Db2Source",
        uberParent: "TabularSource",
        additionalProperties: { type: { name: "Object" } },
        polymorphicDiscriminator: exports.TabularSource.type.polymorphicDiscriminator,
        modelProperties: Object.assign(Object.assign({}, exports.TabularSource.type.modelProperties), { query: {
                serializedName: "query",
                type: {
                    name: "any",
                },
            } }),
    },
};
exports.OdbcSource = {
    serializedName: "OdbcSource",
    type: {
        name: "Composite",
        className: "OdbcSource",
        uberParent: "TabularSource",
        additionalProperties: { type: { name: "Object" } },
        polymorphicDiscriminator: exports.TabularSource.type.polymorphicDiscriminator,
        modelProperties: Object.assign(Object.assign({}, exports.TabularSource.type.modelProperties), { query: {
                serializedName: "query",
                type: {
                    name: "any",
                },
            } }),
    },
};
exports.MySqlSource = {
    serializedName: "MySqlSource",
    type: {
        name: "Composite",
        className: "MySqlSource",
        uberParent: "TabularSource",
        additionalProperties: { type: { name: "Object" } },
        polymorphicDiscriminator: exports.TabularSource.type.polymorphicDiscriminator,
        modelProperties: Object.assign(Object.assign({}, exports.TabularSource.type.modelProperties), { query: {
                serializedName: "query",
                type: {
                    name: "any",
                },
            } }),
    },
};
exports.PostgreSqlSource = {
    serializedName: "PostgreSqlSource",
    type: {
        name: "Composite",
        className: "PostgreSqlSource",
        uberParent: "TabularSource",
        additionalProperties: { type: { name: "Object" } },
        polymorphicDiscriminator: exports.TabularSource.type.polymorphicDiscriminator,
        modelProperties: Object.assign(Object.assign({}, exports.TabularSource.type.modelProperties), { query: {
                serializedName: "query",
                type: {
                    name: "any",
                },
            } }),
    },
};
exports.PostgreSqlV2Source = {
    serializedName: "PostgreSqlV2Source",
    type: {
        name: "Composite",
        className: "PostgreSqlV2Source",
        uberParent: "TabularSource",
        additionalProperties: { type: { name: "Object" } },
        polymorphicDiscriminator: exports.TabularSource.type.polymorphicDiscriminator,
        modelProperties: Object.assign(Object.assign({}, exports.TabularSource.type.modelProperties), { query: {
                serializedName: "query",
                type: {
                    name: "any",
                },
            } }),
    },
};
exports.SybaseSource = {
    serializedName: "SybaseSource",
    type: {
        name: "Composite",
        className: "SybaseSource",
        uberParent: "TabularSource",
        additionalProperties: { type: { name: "Object" } },
        polymorphicDiscriminator: exports.TabularSource.type.polymorphicDiscriminator,
        modelProperties: Object.assign(Object.assign({}, exports.TabularSource.type.modelProperties), { query: {
                serializedName: "query",
                type: {
                    name: "any",
                },
            } }),
    },
};
exports.SapBwSource = {
    serializedName: "SapBwSource",
    type: {
        name: "Composite",
        className: "SapBwSource",
        uberParent: "TabularSource",
        additionalProperties: { type: { name: "Object" } },
        polymorphicDiscriminator: exports.TabularSource.type.polymorphicDiscriminator,
        modelProperties: Object.assign(Object.assign({}, exports.TabularSource.type.modelProperties), { query: {
                serializedName: "query",
                type: {
                    name: "any",
                },
            } }),
    },
};
exports.SalesforceSource = {
    serializedName: "SalesforceSource",
    type: {
        name: "Composite",
        className: "SalesforceSource",
        uberParent: "TabularSource",
        additionalProperties: { type: { name: "Object" } },
        polymorphicDiscriminator: exports.TabularSource.type.polymorphicDiscriminator,
        modelProperties: Object.assign(Object.assign({}, exports.TabularSource.type.modelProperties), { query: {
                serializedName: "query",
                type: {
                    name: "any",
                },
            }, readBehavior: {
                serializedName: "readBehavior",
                type: {
                    name: "any",
                },
            } }),
    },
};
exports.SapCloudForCustomerSource = {
    serializedName: "SapCloudForCustomerSource",
    type: {
        name: "Composite",
        className: "SapCloudForCustomerSource",
        uberParent: "TabularSource",
        additionalProperties: { type: { name: "Object" } },
        polymorphicDiscriminator: exports.TabularSource.type.polymorphicDiscriminator,
        modelProperties: Object.assign(Object.assign({}, exports.TabularSource.type.modelProperties), { query: {
                serializedName: "query",
                type: {
                    name: "any",
                },
            }, httpRequestTimeout: {
                serializedName: "httpRequestTimeout",
                type: {
                    name: "any",
                },
            } }),
    },
};
exports.SapEccSource = {
    serializedName: "SapEccSource",
    type: {
        name: "Composite",
        className: "SapEccSource",
        uberParent: "TabularSource",
        additionalProperties: { type: { name: "Object" } },
        polymorphicDiscriminator: exports.TabularSource.type.polymorphicDiscriminator,
        modelProperties: Object.assign(Object.assign({}, exports.TabularSource.type.modelProperties), { query: {
                serializedName: "query",
                type: {
                    name: "any",
                },
            }, httpRequestTimeout: {
                serializedName: "httpRequestTimeout",
                type: {
                    name: "any",
                },
            } }),
    },
};
exports.SapHanaSource = {
    serializedName: "SapHanaSource",
    type: {
        name: "Composite",
        className: "SapHanaSource",
        uberParent: "TabularSource",
        additionalProperties: { type: { name: "Object" } },
        polymorphicDiscriminator: exports.TabularSource.type.polymorphicDiscriminator,
        modelProperties: Object.assign(Object.assign({}, exports.TabularSource.type.modelProperties), { query: {
                serializedName: "query",
                type: {
                    name: "any",
                },
            }, packetSize: {
                serializedName: "packetSize",
                type: {
                    name: "any",
                },
            }, partitionOption: {
                serializedName: "partitionOption",
                type: {
                    name: "any",
                },
            }, partitionSettings: {
                serializedName: "partitionSettings",
                type: {
                    name: "Composite",
                    className: "SapHanaPartitionSettings",
                },
            } }),
    },
};
exports.SapOpenHubSource = {
    serializedName: "SapOpenHubSource",
    type: {
        name: "Composite",
        className: "SapOpenHubSource",
        uberParent: "TabularSource",
        additionalProperties: { type: { name: "Object" } },
        polymorphicDiscriminator: exports.TabularSource.type.polymorphicDiscriminator,
        modelProperties: Object.assign(Object.assign({}, exports.TabularSource.type.modelProperties), { excludeLastRequest: {
                serializedName: "excludeLastRequest",
                type: {
                    name: "any",
                },
            }, baseRequestId: {
                serializedName: "baseRequestId",
                type: {
                    name: "any",
                },
            }, customRfcReadTableFunctionModule: {
                serializedName: "customRfcReadTableFunctionModule",
                type: {
                    name: "any",
                },
            }, sapDataColumnDelimiter: {
                serializedName: "sapDataColumnDelimiter",
                type: {
                    name: "any",
                },
            } }),
    },
};
exports.SapOdpSource = {
    serializedName: "SapOdpSource",
    type: {
        name: "Composite",
        className: "SapOdpSource",
        uberParent: "TabularSource",
        additionalProperties: { type: { name: "Object" } },
        polymorphicDiscriminator: exports.TabularSource.type.polymorphicDiscriminator,
        modelProperties: Object.assign(Object.assign({}, exports.TabularSource.type.modelProperties), { extractionMode: {
                serializedName: "extractionMode",
                type: {
                    name: "any",
                },
            }, subscriberProcess: {
                serializedName: "subscriberProcess",
                type: {
                    name: "any",
                },
            }, selection: {
                serializedName: "selection",
                type: {
                    name: "any",
                },
            }, projection: {
                serializedName: "projection",
                type: {
                    name: "any",
                },
            } }),
    },
};
exports.SapTableSource = {
    serializedName: "SapTableSource",
    type: {
        name: "Composite",
        className: "SapTableSource",
        uberParent: "TabularSource",
        additionalProperties: { type: { name: "Object" } },
        polymorphicDiscriminator: exports.TabularSource.type.polymorphicDiscriminator,
        modelProperties: Object.assign(Object.assign({}, exports.TabularSource.type.modelProperties), { rowCount: {
                serializedName: "rowCount",
                type: {
                    name: "any",
                },
            }, rowSkips: {
                serializedName: "rowSkips",
                type: {
                    name: "any",
                },
            }, rfcTableFields: {
                serializedName: "rfcTableFields",
                type: {
                    name: "any",
                },
            }, rfcTableOptions: {
                serializedName: "rfcTableOptions",
                type: {
                    name: "any",
                },
            }, batchSize: {
                serializedName: "batchSize",
                type: {
                    name: "any",
                },
            }, customRfcReadTableFunctionModule: {
                serializedName: "customRfcReadTableFunctionModule",
                type: {
                    name: "any",
                },
            }, sapDataColumnDelimiter: {
                serializedName: "sapDataColumnDelimiter",
                type: {
                    name: "any",
                },
            }, partitionOption: {
                serializedName: "partitionOption",
                type: {
                    name: "any",
                },
            }, partitionSettings: {
                serializedName: "partitionSettings",
                type: {
                    name: "Composite",
                    className: "SapTablePartitionSettings",
                },
            } }),
    },
};
exports.SqlSource = {
    serializedName: "SqlSource",
    type: {
        name: "Composite",
        className: "SqlSource",
        uberParent: "TabularSource",
        additionalProperties: { type: { name: "Object" } },
        polymorphicDiscriminator: exports.TabularSource.type.polymorphicDiscriminator,
        modelProperties: Object.assign(Object.assign({}, exports.TabularSource.type.modelProperties), { sqlReaderQuery: {
                serializedName: "sqlReaderQuery",
                type: {
                    name: "any",
                },
            }, sqlReaderStoredProcedureName: {
                serializedName: "sqlReaderStoredProcedureName",
                type: {
                    name: "any",
                },
            }, storedProcedureParameters: {
                serializedName: "storedProcedureParameters",
                type: {
                    name: "any",
                },
            }, isolationLevel: {
                serializedName: "isolationLevel",
                type: {
                    name: "any",
                },
            }, partitionOption: {
                serializedName: "partitionOption",
                type: {
                    name: "any",
                },
            }, partitionSettings: {
                serializedName: "partitionSettings",
                type: {
                    name: "Composite",
                    className: "SqlPartitionSettings",
                },
            } }),
    },
};
exports.SqlServerSource = {
    serializedName: "SqlServerSource",
    type: {
        name: "Composite",
        className: "SqlServerSource",
        uberParent: "TabularSource",
        additionalProperties: { type: { name: "Object" } },
        polymorphicDiscriminator: exports.TabularSource.type.polymorphicDiscriminator,
        modelProperties: Object.assign(Object.assign({}, exports.TabularSource.type.modelProperties), { sqlReaderQuery: {
                serializedName: "sqlReaderQuery",
                type: {
                    name: "any",
                },
            }, sqlReaderStoredProcedureName: {
                serializedName: "sqlReaderStoredProcedureName",
                type: {
                    name: "any",
                },
            }, storedProcedureParameters: {
                serializedName: "storedProcedureParameters",
                type: {
                    name: "any",
                },
            }, isolationLevel: {
                serializedName: "isolationLevel",
                type: {
                    name: "any",
                },
            }, produceAdditionalTypes: {
                serializedName: "produceAdditionalTypes",
                type: {
                    name: "any",
                },
            }, partitionOption: {
                serializedName: "partitionOption",
                type: {
                    name: "any",
                },
            }, partitionSettings: {
                serializedName: "partitionSettings",
                type: {
                    name: "Composite",
                    className: "SqlPartitionSettings",
                },
            } }),
    },
};
exports.AmazonRdsForSqlServerSource = {
    serializedName: "AmazonRdsForSqlServerSource",
    type: {
        name: "Composite",
        className: "AmazonRdsForSqlServerSource",
        uberParent: "TabularSource",
        additionalProperties: { type: { name: "Object" } },
        polymorphicDiscriminator: exports.TabularSource.type.polymorphicDiscriminator,
        modelProperties: Object.assign(Object.assign({}, exports.TabularSource.type.modelProperties), { sqlReaderQuery: {
                serializedName: "sqlReaderQuery",
                type: {
                    name: "any",
                },
            }, sqlReaderStoredProcedureName: {
                serializedName: "sqlReaderStoredProcedureName",
                type: {
                    name: "any",
                },
            }, storedProcedureParameters: {
                serializedName: "storedProcedureParameters",
                type: {
                    name: "any",
                },
            }, isolationLevel: {
                serializedName: "isolationLevel",
                type: {
                    name: "any",
                },
            }, produceAdditionalTypes: {
                serializedName: "produceAdditionalTypes",
                type: {
                    name: "any",
                },
            }, partitionOption: {
                serializedName: "partitionOption",
                type: {
                    name: "any",
                },
            }, partitionSettings: {
                serializedName: "partitionSettings",
                type: {
                    name: "Composite",
                    className: "SqlPartitionSettings",
                },
            } }),
    },
};
exports.AzureSqlSource = {
    serializedName: "AzureSqlSource",
    type: {
        name: "Composite",
        className: "AzureSqlSource",
        uberParent: "TabularSource",
        additionalProperties: { type: { name: "Object" } },
        polymorphicDiscriminator: exports.TabularSource.type.polymorphicDiscriminator,
        modelProperties: Object.assign(Object.assign({}, exports.TabularSource.type.modelProperties), { sqlReaderQuery: {
                serializedName: "sqlReaderQuery",
                type: {
                    name: "any",
                },
            }, sqlReaderStoredProcedureName: {
                serializedName: "sqlReaderStoredProcedureName",
                type: {
                    name: "any",
                },
            }, storedProcedureParameters: {
                serializedName: "storedProcedureParameters",
                type: {
                    name: "any",
                },
            }, isolationLevel: {
                serializedName: "isolationLevel",
                type: {
                    name: "any",
                },
            }, produceAdditionalTypes: {
                serializedName: "produceAdditionalTypes",
                type: {
                    name: "any",
                },
            }, partitionOption: {
                serializedName: "partitionOption",
                type: {
                    name: "any",
                },
            }, partitionSettings: {
                serializedName: "partitionSettings",
                type: {
                    name: "Composite",
                    className: "SqlPartitionSettings",
                },
            } }),
    },
};
exports.SqlMISource = {
    serializedName: "SqlMISource",
    type: {
        name: "Composite",
        className: "SqlMISource",
        uberParent: "TabularSource",
        additionalProperties: { type: { name: "Object" } },
        polymorphicDiscriminator: exports.TabularSource.type.polymorphicDiscriminator,
        modelProperties: Object.assign(Object.assign({}, exports.TabularSource.type.modelProperties), { sqlReaderQuery: {
                serializedName: "sqlReaderQuery",
                type: {
                    name: "any",
                },
            }, sqlReaderStoredProcedureName: {
                serializedName: "sqlReaderStoredProcedureName",
                type: {
                    name: "any",
                },
            }, storedProcedureParameters: {
                serializedName: "storedProcedureParameters",
                type: {
                    name: "any",
                },
            }, isolationLevel: {
                serializedName: "isolationLevel",
                type: {
                    name: "any",
                },
            }, produceAdditionalTypes: {
                serializedName: "produceAdditionalTypes",
                type: {
                    name: "any",
                },
            }, partitionOption: {
                serializedName: "partitionOption",
                type: {
                    name: "any",
                },
            }, partitionSettings: {
                serializedName: "partitionSettings",
                type: {
                    name: "Composite",
                    className: "SqlPartitionSettings",
                },
            } }),
    },
};
exports.SqlDWSource = {
    serializedName: "SqlDWSource",
    type: {
        name: "Composite",
        className: "SqlDWSource",
        uberParent: "TabularSource",
        additionalProperties: { type: { name: "Object" } },
        polymorphicDiscriminator: exports.TabularSource.type.polymorphicDiscriminator,
        modelProperties: Object.assign(Object.assign({}, exports.TabularSource.type.modelProperties), { sqlReaderQuery: {
                serializedName: "sqlReaderQuery",
                type: {
                    name: "any",
                },
            }, sqlReaderStoredProcedureName: {
                serializedName: "sqlReaderStoredProcedureName",
                type: {
                    name: "any",
                },
            }, storedProcedureParameters: {
                serializedName: "storedProcedureParameters",
                type: {
                    name: "any",
                },
            }, isolationLevel: {
                serializedName: "isolationLevel",
                type: {
                    name: "any",
                },
            }, partitionOption: {
                serializedName: "partitionOption",
                type: {
                    name: "any",
                },
            }, partitionSettings: {
                serializedName: "partitionSettings",
                type: {
                    name: "Composite",
                    className: "SqlPartitionSettings",
                },
            } }),
    },
};
exports.AzureMySqlSource = {
    serializedName: "AzureMySqlSource",
    type: {
        name: "Composite",
        className: "AzureMySqlSource",
        uberParent: "TabularSource",
        additionalProperties: { type: { name: "Object" } },
        polymorphicDiscriminator: exports.TabularSource.type.polymorphicDiscriminator,
        modelProperties: Object.assign(Object.assign({}, exports.TabularSource.type.modelProperties), { query: {
                serializedName: "query",
                type: {
                    name: "any",
                },
            } }),
    },
};
exports.TeradataSource = {
    serializedName: "TeradataSource",
    type: {
        name: "Composite",
        className: "TeradataSource",
        uberParent: "TabularSource",
        additionalProperties: { type: { name: "Object" } },
        polymorphicDiscriminator: exports.TabularSource.type.polymorphicDiscriminator,
        modelProperties: Object.assign(Object.assign({}, exports.TabularSource.type.modelProperties), { query: {
                serializedName: "query",
                type: {
                    name: "any",
                },
            }, partitionOption: {
                serializedName: "partitionOption",
                type: {
                    name: "String",
                },
            }, partitionSettings: {
                serializedName: "partitionSettings",
                type: {
                    name: "Composite",
                    className: "TeradataPartitionSettings",
                },
            } }),
    },
};
exports.CassandraSource = {
    serializedName: "CassandraSource",
    type: {
        name: "Composite",
        className: "CassandraSource",
        uberParent: "TabularSource",
        additionalProperties: { type: { name: "Object" } },
        polymorphicDiscriminator: exports.TabularSource.type.polymorphicDiscriminator,
        modelProperties: Object.assign(Object.assign({}, exports.TabularSource.type.modelProperties), { query: {
                serializedName: "query",
                type: {
                    name: "any",
                },
            }, consistencyLevel: {
                serializedName: "consistencyLevel",
                type: {
                    name: "String",
                },
            } }),
    },
};
exports.AmazonMWSSource = {
    serializedName: "AmazonMWSSource",
    type: {
        name: "Composite",
        className: "AmazonMWSSource",
        uberParent: "TabularSource",
        additionalProperties: { type: { name: "Object" } },
        polymorphicDiscriminator: exports.TabularSource.type.polymorphicDiscriminator,
        modelProperties: Object.assign(Object.assign({}, exports.TabularSource.type.modelProperties), { query: {
                serializedName: "query",
                type: {
                    name: "any",
                },
            } }),
    },
};
exports.AzurePostgreSqlSource = {
    serializedName: "AzurePostgreSqlSource",
    type: {
        name: "Composite",
        className: "AzurePostgreSqlSource",
        uberParent: "TabularSource",
        additionalProperties: { type: { name: "Object" } },
        polymorphicDiscriminator: exports.TabularSource.type.polymorphicDiscriminator,
        modelProperties: Object.assign(Object.assign({}, exports.TabularSource.type.modelProperties), { query: {
                serializedName: "query",
                type: {
                    name: "any",
                },
            } }),
    },
};
exports.ConcurSource = {
    serializedName: "ConcurSource",
    type: {
        name: "Composite",
        className: "ConcurSource",
        uberParent: "TabularSource",
        additionalProperties: { type: { name: "Object" } },
        polymorphicDiscriminator: exports.TabularSource.type.polymorphicDiscriminator,
        modelProperties: Object.assign(Object.assign({}, exports.TabularSource.type.modelProperties), { query: {
                serializedName: "query",
                type: {
                    name: "any",
                },
            } }),
    },
};
exports.CouchbaseSource = {
    serializedName: "CouchbaseSource",
    type: {
        name: "Composite",
        className: "CouchbaseSource",
        uberParent: "TabularSource",
        additionalProperties: { type: { name: "Object" } },
        polymorphicDiscriminator: exports.TabularSource.type.polymorphicDiscriminator,
        modelProperties: Object.assign(Object.assign({}, exports.TabularSource.type.modelProperties), { query: {
                serializedName: "query",
                type: {
                    name: "any",
                },
            } }),
    },
};
exports.DrillSource = {
    serializedName: "DrillSource",
    type: {
        name: "Composite",
        className: "DrillSource",
        uberParent: "TabularSource",
        additionalProperties: { type: { name: "Object" } },
        polymorphicDiscriminator: exports.TabularSource.type.polymorphicDiscriminator,
        modelProperties: Object.assign(Object.assign({}, exports.TabularSource.type.modelProperties), { query: {
                serializedName: "query",
                type: {
                    name: "any",
                },
            } }),
    },
};
exports.EloquaSource = {
    serializedName: "EloquaSource",
    type: {
        name: "Composite",
        className: "EloquaSource",
        uberParent: "TabularSource",
        additionalProperties: { type: { name: "Object" } },
        polymorphicDiscriminator: exports.TabularSource.type.polymorphicDiscriminator,
        modelProperties: Object.assign(Object.assign({}, exports.TabularSource.type.modelProperties), { query: {
                serializedName: "query",
                type: {
                    name: "any",
                },
            } }),
    },
};
exports.GoogleBigQuerySource = {
    serializedName: "GoogleBigQuerySource",
    type: {
        name: "Composite",
        className: "GoogleBigQuerySource",
        uberParent: "TabularSource",
        additionalProperties: { type: { name: "Object" } },
        polymorphicDiscriminator: exports.TabularSource.type.polymorphicDiscriminator,
        modelProperties: Object.assign(Object.assign({}, exports.TabularSource.type.modelProperties), { query: {
                serializedName: "query",
                type: {
                    name: "any",
                },
            } }),
    },
};
exports.GoogleBigQueryV2Source = {
    serializedName: "GoogleBigQueryV2Source",
    type: {
        name: "Composite",
        className: "GoogleBigQueryV2Source",
        uberParent: "TabularSource",
        additionalProperties: { type: { name: "Object" } },
        polymorphicDiscriminator: exports.TabularSource.type.polymorphicDiscriminator,
        modelProperties: Object.assign(Object.assign({}, exports.TabularSource.type.modelProperties), { query: {
                serializedName: "query",
                type: {
                    name: "any",
                },
            } }),
    },
};
exports.GreenplumSource = {
    serializedName: "GreenplumSource",
    type: {
        name: "Composite",
        className: "GreenplumSource",
        uberParent: "TabularSource",
        additionalProperties: { type: { name: "Object" } },
        polymorphicDiscriminator: exports.TabularSource.type.polymorphicDiscriminator,
        modelProperties: Object.assign(Object.assign({}, exports.TabularSource.type.modelProperties), { query: {
                serializedName: "query",
                type: {
                    name: "any",
                },
            } }),
    },
};
exports.HBaseSource = {
    serializedName: "HBaseSource",
    type: {
        name: "Composite",
        className: "HBaseSource",
        uberParent: "TabularSource",
        additionalProperties: { type: { name: "Object" } },
        polymorphicDiscriminator: exports.TabularSource.type.polymorphicDiscriminator,
        modelProperties: Object.assign(Object.assign({}, exports.TabularSource.type.modelProperties), { query: {
                serializedName: "query",
                type: {
                    name: "any",
                },
            } }),
    },
};
exports.HiveSource = {
    serializedName: "HiveSource",
    type: {
        name: "Composite",
        className: "HiveSource",
        uberParent: "TabularSource",
        additionalProperties: { type: { name: "Object" } },
        polymorphicDiscriminator: exports.TabularSource.type.polymorphicDiscriminator,
        modelProperties: Object.assign(Object.assign({}, exports.TabularSource.type.modelProperties), { query: {
                serializedName: "query",
                type: {
                    name: "any",
                },
            } }),
    },
};
exports.HubspotSource = {
    serializedName: "HubspotSource",
    type: {
        name: "Composite",
        className: "HubspotSource",
        uberParent: "TabularSource",
        additionalProperties: { type: { name: "Object" } },
        polymorphicDiscriminator: exports.TabularSource.type.polymorphicDiscriminator,
        modelProperties: Object.assign(Object.assign({}, exports.TabularSource.type.modelProperties), { query: {
                serializedName: "query",
                type: {
                    name: "any",
                },
            } }),
    },
};
exports.ImpalaSource = {
    serializedName: "ImpalaSource",
    type: {
        name: "Composite",
        className: "ImpalaSource",
        uberParent: "TabularSource",
        additionalProperties: { type: { name: "Object" } },
        polymorphicDiscriminator: exports.TabularSource.type.polymorphicDiscriminator,
        modelProperties: Object.assign(Object.assign({}, exports.TabularSource.type.modelProperties), { query: {
                serializedName: "query",
                type: {
                    name: "any",
                },
            } }),
    },
};
exports.JiraSource = {
    serializedName: "JiraSource",
    type: {
        name: "Composite",
        className: "JiraSource",
        uberParent: "TabularSource",
        additionalProperties: { type: { name: "Object" } },
        polymorphicDiscriminator: exports.TabularSource.type.polymorphicDiscriminator,
        modelProperties: Object.assign(Object.assign({}, exports.TabularSource.type.modelProperties), { query: {
                serializedName: "query",
                type: {
                    name: "any",
                },
            } }),
    },
};
exports.MagentoSource = {
    serializedName: "MagentoSource",
    type: {
        name: "Composite",
        className: "MagentoSource",
        uberParent: "TabularSource",
        additionalProperties: { type: { name: "Object" } },
        polymorphicDiscriminator: exports.TabularSource.type.polymorphicDiscriminator,
        modelProperties: Object.assign(Object.assign({}, exports.TabularSource.type.modelProperties), { query: {
                serializedName: "query",
                type: {
                    name: "any",
                },
            } }),
    },
};
exports.MariaDBSource = {
    serializedName: "MariaDBSource",
    type: {
        name: "Composite",
        className: "MariaDBSource",
        uberParent: "TabularSource",
        additionalProperties: { type: { name: "Object" } },
        polymorphicDiscriminator: exports.TabularSource.type.polymorphicDiscriminator,
        modelProperties: Object.assign(Object.assign({}, exports.TabularSource.type.modelProperties), { query: {
                serializedName: "query",
                type: {
                    name: "any",
                },
            } }),
    },
};
exports.AzureMariaDBSource = {
    serializedName: "AzureMariaDBSource",
    type: {
        name: "Composite",
        className: "AzureMariaDBSource",
        uberParent: "TabularSource",
        additionalProperties: { type: { name: "Object" } },
        polymorphicDiscriminator: exports.TabularSource.type.polymorphicDiscriminator,
        modelProperties: Object.assign(Object.assign({}, exports.TabularSource.type.modelProperties), { query: {
                serializedName: "query",
                type: {
                    name: "any",
                },
            } }),
    },
};
exports.MarketoSource = {
    serializedName: "MarketoSource",
    type: {
        name: "Composite",
        className: "MarketoSource",
        uberParent: "TabularSource",
        additionalProperties: { type: { name: "Object" } },
        polymorphicDiscriminator: exports.TabularSource.type.polymorphicDiscriminator,
        modelProperties: Object.assign(Object.assign({}, exports.TabularSource.type.modelProperties), { query: {
                serializedName: "query",
                type: {
                    name: "any",
                },
            } }),
    },
};
exports.PaypalSource = {
    serializedName: "PaypalSource",
    type: {
        name: "Composite",
        className: "PaypalSource",
        uberParent: "TabularSource",
        additionalProperties: { type: { name: "Object" } },
        polymorphicDiscriminator: exports.TabularSource.type.polymorphicDiscriminator,
        modelProperties: Object.assign(Object.assign({}, exports.TabularSource.type.modelProperties), { query: {
                serializedName: "query",
                type: {
                    name: "any",
                },
            } }),
    },
};
exports.PhoenixSource = {
    serializedName: "PhoenixSource",
    type: {
        name: "Composite",
        className: "PhoenixSource",
        uberParent: "TabularSource",
        additionalProperties: { type: { name: "Object" } },
        polymorphicDiscriminator: exports.TabularSource.type.polymorphicDiscriminator,
        modelProperties: Object.assign(Object.assign({}, exports.TabularSource.type.modelProperties), { query: {
                serializedName: "query",
                type: {
                    name: "any",
                },
            } }),
    },
};
exports.PrestoSource = {
    serializedName: "PrestoSource",
    type: {
        name: "Composite",
        className: "PrestoSource",
        uberParent: "TabularSource",
        additionalProperties: { type: { name: "Object" } },
        polymorphicDiscriminator: exports.TabularSource.type.polymorphicDiscriminator,
        modelProperties: Object.assign(Object.assign({}, exports.TabularSource.type.modelProperties), { query: {
                serializedName: "query",
                type: {
                    name: "any",
                },
            } }),
    },
};
exports.QuickBooksSource = {
    serializedName: "QuickBooksSource",
    type: {
        name: "Composite",
        className: "QuickBooksSource",
        uberParent: "TabularSource",
        additionalProperties: { type: { name: "Object" } },
        polymorphicDiscriminator: exports.TabularSource.type.polymorphicDiscriminator,
        modelProperties: Object.assign(Object.assign({}, exports.TabularSource.type.modelProperties), { query: {
                serializedName: "query",
                type: {
                    name: "any",
                },
            } }),
    },
};
exports.ServiceNowSource = {
    serializedName: "ServiceNowSource",
    type: {
        name: "Composite",
        className: "ServiceNowSource",
        uberParent: "TabularSource",
        additionalProperties: { type: { name: "Object" } },
        polymorphicDiscriminator: exports.TabularSource.type.polymorphicDiscriminator,
        modelProperties: Object.assign(Object.assign({}, exports.TabularSource.type.modelProperties), { query: {
                serializedName: "query",
                type: {
                    name: "any",
                },
            } }),
    },
};
exports.ShopifySource = {
    serializedName: "ShopifySource",
    type: {
        name: "Composite",
        className: "ShopifySource",
        uberParent: "TabularSource",
        additionalProperties: { type: { name: "Object" } },
        polymorphicDiscriminator: exports.TabularSource.type.polymorphicDiscriminator,
        modelProperties: Object.assign(Object.assign({}, exports.TabularSource.type.modelProperties), { query: {
                serializedName: "query",
                type: {
                    name: "any",
                },
            } }),
    },
};
exports.SparkSource = {
    serializedName: "SparkSource",
    type: {
        name: "Composite",
        className: "SparkSource",
        uberParent: "TabularSource",
        additionalProperties: { type: { name: "Object" } },
        polymorphicDiscriminator: exports.TabularSource.type.polymorphicDiscriminator,
        modelProperties: Object.assign(Object.assign({}, exports.TabularSource.type.modelProperties), { query: {
                serializedName: "query",
                type: {
                    name: "any",
                },
            } }),
    },
};
exports.SquareSource = {
    serializedName: "SquareSource",
    type: {
        name: "Composite",
        className: "SquareSource",
        uberParent: "TabularSource",
        additionalProperties: { type: { name: "Object" } },
        polymorphicDiscriminator: exports.TabularSource.type.polymorphicDiscriminator,
        modelProperties: Object.assign(Object.assign({}, exports.TabularSource.type.modelProperties), { query: {
                serializedName: "query",
                type: {
                    name: "any",
                },
            } }),
    },
};
exports.XeroSource = {
    serializedName: "XeroSource",
    type: {
        name: "Composite",
        className: "XeroSource",
        uberParent: "TabularSource",
        additionalProperties: { type: { name: "Object" } },
        polymorphicDiscriminator: exports.TabularSource.type.polymorphicDiscriminator,
        modelProperties: Object.assign(Object.assign({}, exports.TabularSource.type.modelProperties), { query: {
                serializedName: "query",
                type: {
                    name: "any",
                },
            } }),
    },
};
exports.ZohoSource = {
    serializedName: "ZohoSource",
    type: {
        name: "Composite",
        className: "ZohoSource",
        uberParent: "TabularSource",
        additionalProperties: { type: { name: "Object" } },
        polymorphicDiscriminator: exports.TabularSource.type.polymorphicDiscriminator,
        modelProperties: Object.assign(Object.assign({}, exports.TabularSource.type.modelProperties), { query: {
                serializedName: "query",
                type: {
                    name: "any",
                },
            } }),
    },
};
exports.NetezzaSource = {
    serializedName: "NetezzaSource",
    type: {
        name: "Composite",
        className: "NetezzaSource",
        uberParent: "TabularSource",
        additionalProperties: { type: { name: "Object" } },
        polymorphicDiscriminator: exports.TabularSource.type.polymorphicDiscriminator,
        modelProperties: Object.assign(Object.assign({}, exports.TabularSource.type.modelProperties), { query: {
                serializedName: "query",
                type: {
                    name: "any",
                },
            }, partitionOption: {
                serializedName: "partitionOption",
                type: {
                    name: "String",
                },
            }, partitionSettings: {
                serializedName: "partitionSettings",
                type: {
                    name: "Composite",
                    className: "NetezzaPartitionSettings",
                },
            } }),
    },
};
exports.VerticaSource = {
    serializedName: "VerticaSource",
    type: {
        name: "Composite",
        className: "VerticaSource",
        uberParent: "TabularSource",
        additionalProperties: { type: { name: "Object" } },
        polymorphicDiscriminator: exports.TabularSource.type.polymorphicDiscriminator,
        modelProperties: Object.assign(Object.assign({}, exports.TabularSource.type.modelProperties), { query: {
                serializedName: "query",
                type: {
                    name: "any",
                },
            } }),
    },
};
exports.SalesforceMarketingCloudSource = {
    serializedName: "SalesforceMarketingCloudSource",
    type: {
        name: "Composite",
        className: "SalesforceMarketingCloudSource",
        uberParent: "TabularSource",
        additionalProperties: { type: { name: "Object" } },
        polymorphicDiscriminator: exports.TabularSource.type.polymorphicDiscriminator,
        modelProperties: Object.assign(Object.assign({}, exports.TabularSource.type.modelProperties), { query: {
                serializedName: "query",
                type: {
                    name: "any",
                },
            } }),
    },
};
exports.ResponsysSource = {
    serializedName: "ResponsysSource",
    type: {
        name: "Composite",
        className: "ResponsysSource",
        uberParent: "TabularSource",
        additionalProperties: { type: { name: "Object" } },
        polymorphicDiscriminator: exports.TabularSource.type.polymorphicDiscriminator,
        modelProperties: Object.assign(Object.assign({}, exports.TabularSource.type.modelProperties), { query: {
                serializedName: "query",
                type: {
                    name: "any",
                },
            } }),
    },
};
exports.DynamicsAXSource = {
    serializedName: "DynamicsAXSource",
    type: {
        name: "Composite",
        className: "DynamicsAXSource",
        uberParent: "TabularSource",
        additionalProperties: { type: { name: "Object" } },
        polymorphicDiscriminator: exports.TabularSource.type.polymorphicDiscriminator,
        modelProperties: Object.assign(Object.assign({}, exports.TabularSource.type.modelProperties), { query: {
                serializedName: "query",
                type: {
                    name: "any",
                },
            }, httpRequestTimeout: {
                serializedName: "httpRequestTimeout",
                type: {
                    name: "any",
                },
            } }),
    },
};
exports.OracleServiceCloudSource = {
    serializedName: "OracleServiceCloudSource",
    type: {
        name: "Composite",
        className: "OracleServiceCloudSource",
        uberParent: "TabularSource",
        additionalProperties: { type: { name: "Object" } },
        polymorphicDiscriminator: exports.TabularSource.type.polymorphicDiscriminator,
        modelProperties: Object.assign(Object.assign({}, exports.TabularSource.type.modelProperties), { query: {
                serializedName: "query",
                type: {
                    name: "any",
                },
            } }),
    },
};
exports.GoogleAdWordsSource = {
    serializedName: "GoogleAdWordsSource",
    type: {
        name: "Composite",
        className: "GoogleAdWordsSource",
        uberParent: "TabularSource",
        additionalProperties: { type: { name: "Object" } },
        polymorphicDiscriminator: exports.TabularSource.type.polymorphicDiscriminator,
        modelProperties: Object.assign(Object.assign({}, exports.TabularSource.type.modelProperties), { query: {
                serializedName: "query",
                type: {
                    name: "any",
                },
            } }),
    },
};
exports.AmazonRedshiftSource = {
    serializedName: "AmazonRedshiftSource",
    type: {
        name: "Composite",
        className: "AmazonRedshiftSource",
        uberParent: "TabularSource",
        additionalProperties: { type: { name: "Object" } },
        polymorphicDiscriminator: exports.TabularSource.type.polymorphicDiscriminator,
        modelProperties: Object.assign(Object.assign({}, exports.TabularSource.type.modelProperties), { query: {
                serializedName: "query",
                type: {
                    name: "any",
                },
            }, redshiftUnloadSettings: {
                serializedName: "redshiftUnloadSettings",
                type: {
                    name: "Composite",
                    className: "RedshiftUnloadSettings",
                },
            } }),
    },
};
exports.WarehouseSource = {
    serializedName: "WarehouseSource",
    type: {
        name: "Composite",
        className: "WarehouseSource",
        uberParent: "TabularSource",
        additionalProperties: { type: { name: "Object" } },
        polymorphicDiscriminator: exports.TabularSource.type.polymorphicDiscriminator,
        modelProperties: Object.assign(Object.assign({}, exports.TabularSource.type.modelProperties), { sqlReaderQuery: {
                serializedName: "sqlReaderQuery",
                type: {
                    name: "any",
                },
            }, sqlReaderStoredProcedureName: {
                serializedName: "sqlReaderStoredProcedureName",
                type: {
                    name: "any",
                },
            }, storedProcedureParameters: {
                serializedName: "storedProcedureParameters",
                type: {
                    name: "any",
                },
            }, isolationLevel: {
                serializedName: "isolationLevel",
                type: {
                    name: "any",
                },
            }, partitionOption: {
                serializedName: "partitionOption",
                type: {
                    name: "any",
                },
            }, partitionSettings: {
                serializedName: "partitionSettings",
                type: {
                    name: "Composite",
                    className: "SqlPartitionSettings",
                },
            } }),
    },
};
exports.SalesforceV2Source = {
    serializedName: "SalesforceV2Source",
    type: {
        name: "Composite",
        className: "SalesforceV2Source",
        uberParent: "TabularSource",
        additionalProperties: { type: { name: "Object" } },
        polymorphicDiscriminator: exports.TabularSource.type.polymorphicDiscriminator,
        modelProperties: Object.assign(Object.assign({}, exports.TabularSource.type.modelProperties), { soqlQuery: {
                serializedName: "SOQLQuery",
                type: {
                    name: "any",
                },
            }, query: {
                serializedName: "query",
                type: {
                    name: "any",
                },
            }, includeDeletedObjects: {
                serializedName: "includeDeletedObjects",
                type: {
                    name: "any",
                },
            }, pageSize: {
                serializedName: "pageSize",
                type: {
                    name: "any",
                },
            } }),
    },
};
exports.ServiceNowV2Source = {
    serializedName: "ServiceNowV2Source",
    type: {
        name: "Composite",
        className: "ServiceNowV2Source",
        uberParent: "TabularSource",
        additionalProperties: { type: { name: "Object" } },
        polymorphicDiscriminator: exports.TabularSource.type.polymorphicDiscriminator,
        modelProperties: Object.assign(Object.assign({}, exports.TabularSource.type.modelProperties), { expression: {
                serializedName: "expression",
                type: {
                    name: "Composite",
                    className: "ExpressionV2",
                },
            }, pageSize: {
                serializedName: "pageSize",
                type: {
                    name: "any",
                },
            } }),
    },
};
exports.TumblingWindowTriggerDependencyReference = {
    serializedName: "TumblingWindowTriggerDependencyReference",
    type: {
        name: "Composite",
        className: "TumblingWindowTriggerDependencyReference",
        uberParent: "TriggerDependencyReference",
        polymorphicDiscriminator: exports.TriggerDependencyReference.type.polymorphicDiscriminator,
        modelProperties: Object.assign(Object.assign({}, exports.TriggerDependencyReference.type.modelProperties), { offset: {
                constraints: {
                    Pattern: new RegExp("-?((\\d+)\\.)?(\\d\\d):(60|([0-5][0-9])):(60|([0-5][0-9]))"),
                    MaxLength: 15,
                    MinLength: 8,
                },
                serializedName: "offset",
                type: {
                    name: "String",
                },
            }, size: {
                constraints: {
                    Pattern: new RegExp("((\\d+)\\.)?(\\d\\d):(60|([0-5][0-9])):(60|([0-5][0-9]))"),
                    MaxLength: 15,
                    MinLength: 8,
                },
                serializedName: "size",
                type: {
                    name: "String",
                },
            } }),
    },
};
exports.SparkConfigurationResource = {
    type: {
        name: "Composite",
        className: "SparkConfigurationResource",
        modelProperties: Object.assign(Object.assign({}, exports.SubResource.type.modelProperties), { properties: {
                serializedName: "properties",
                type: {
                    name: "Composite",
                    className: "SparkConfiguration",
                },
            } }),
    },
};
exports.DataFlowResource = {
    type: {
        name: "Composite",
        className: "DataFlowResource",
        modelProperties: Object.assign(Object.assign({}, exports.SubResource.type.modelProperties), { properties: {
                serializedName: "properties",
                type: {
                    name: "Composite",
                    className: "DataFlow",
                },
            } }),
    },
};
exports.DatasetResource = {
    type: {
        name: "Composite",
        className: "DatasetResource",
        modelProperties: Object.assign(Object.assign({}, exports.SubResource.type.modelProperties), { properties: {
                serializedName: "properties",
                type: {
                    name: "Composite",
                    className: "Dataset",
                },
            } }),
    },
};
exports.IntegrationRuntimeResource = {
    type: {
        name: "Composite",
        className: "IntegrationRuntimeResource",
        modelProperties: Object.assign(Object.assign({}, exports.SubResource.type.modelProperties), { properties: {
                serializedName: "properties",
                type: {
                    name: "Composite",
                    className: "IntegrationRuntime",
                },
            } }),
    },
};
exports.LibraryResource = {
    type: {
        name: "Composite",
        className: "LibraryResource",
        modelProperties: Object.assign(Object.assign({}, exports.SubResource.type.modelProperties), { properties: {
                serializedName: "properties",
                type: {
                    name: "Composite",
                    className: "LibraryResourceProperties",
                },
            } }),
    },
};
exports.LinkedServiceResource = {
    type: {
        name: "Composite",
        className: "LinkedServiceResource",
        modelProperties: Object.assign(Object.assign({}, exports.SubResource.type.modelProperties), { properties: {
                serializedName: "properties",
                type: {
                    name: "Composite",
                    className: "LinkedService",
                },
            } }),
    },
};
exports.PipelineResource = {
    type: {
        name: "Composite",
        className: "PipelineResource",
        additionalProperties: { type: { name: "Object" } },
        modelProperties: Object.assign(Object.assign({}, exports.SubResource.type.modelProperties), { description: {
                serializedName: "properties.description",
                type: {
                    name: "String",
                },
            }, activities: {
                serializedName: "properties.activities",
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "Composite",
                            className: "Activity",
                        },
                    },
                },
            }, parameters: {
                serializedName: "properties.parameters",
                type: {
                    name: "Dictionary",
                    value: {
                        type: { name: "Composite", className: "ParameterSpecification" },
                    },
                },
            }, variables: {
                serializedName: "properties.variables",
                type: {
                    name: "Dictionary",
                    value: {
                        type: { name: "Composite", className: "VariableSpecification" },
                    },
                },
            }, concurrency: {
                constraints: {
                    InclusiveMinimum: 1,
                },
                serializedName: "properties.concurrency",
                type: {
                    name: "Number",
                },
            }, annotations: {
                serializedName: "properties.annotations",
                type: {
                    name: "Sequence",
                    element: {
                        type: {
                            name: "any",
                        },
                    },
                },
            }, runDimensions: {
                serializedName: "properties.runDimensions",
                type: {
                    name: "Dictionary",
                    value: { type: { name: "any" } },
                },
            }, folder: {
                serializedName: "properties.folder",
                type: {
                    name: "Composite",
                    className: "PipelineFolder",
                },
            } }),
    },
};
exports.SparkJobDefinitionResource = {
    type: {
        name: "Composite",
        className: "SparkJobDefinitionResource",
        modelProperties: Object.assign(Object.assign({}, exports.SubResource.type.modelProperties), { properties: {
                serializedName: "properties",
                type: {
                    name: "Composite",
                    className: "SparkJobDefinition",
                },
            } }),
    },
};
exports.TriggerResource = {
    type: {
        name: "Composite",
        className: "TriggerResource",
        modelProperties: Object.assign(Object.assign({}, exports.SubResource.type.modelProperties), { properties: {
                serializedName: "properties",
                type: {
                    name: "Composite",
                    className: "Trigger",
                },
            } }),
    },
};
exports.RerunTriggerResource = {
    type: {
        name: "Composite",
        className: "RerunTriggerResource",
        modelProperties: Object.assign(Object.assign({}, exports.SubResource.type.modelProperties), { properties: {
                serializedName: "properties",
                type: {
                    name: "Composite",
                    className: "RerunTumblingWindowTrigger",
                },
            } }),
    },
};
exports.RunNotebookCreateRunHeaders = {
    type: {
        name: "Composite",
        className: "RunNotebookCreateRunHeaders",
        modelProperties: {
            location: {
                serializedName: "location",
                type: {
                    name: "String",
                },
            },
        },
    },
};
exports.DataFlowDebugSessionCreateDataFlowDebugSessionHeaders = {
    type: {
        name: "Composite",
        className: "DataFlowDebugSessionCreateDataFlowDebugSessionHeaders",
        modelProperties: {
            location: {
                serializedName: "location",
                type: {
                    name: "String",
                },
            },
        },
    },
};
exports.DataFlowDebugSessionExecuteCommandHeaders = {
    type: {
        name: "Composite",
        className: "DataFlowDebugSessionExecuteCommandHeaders",
        modelProperties: {
            location: {
                serializedName: "location",
                type: {
                    name: "String",
                },
            },
        },
    },
};
exports.discriminators = {
    SecretBase: exports.SecretBase,
    DataFlow: exports.DataFlow,
    IntegrationRuntime: exports.IntegrationRuntime,
    Dataset: exports.Dataset,
    LinkedService: exports.LinkedService,
    Activity: exports.Activity,
    Trigger: exports.Trigger,
    DatasetLocation: exports.DatasetLocation,
    DatasetStorageFormat: exports.DatasetStorageFormat,
    WebLinkedServiceTypeProperties: exports.WebLinkedServiceTypeProperties,
    StoreReadSettings: exports.StoreReadSettings,
    StoreWriteSettings: exports.StoreWriteSettings,
    FormatReadSettings: exports.FormatReadSettings,
    CompressionReadSettings: exports.CompressionReadSettings,
    FormatWriteSettings: exports.FormatWriteSettings,
    CopySource: exports.CopySource,
    CopySink: exports.CopySink,
    ImportSettings: exports.ImportSettings,
    ExportSettings: exports.ExportSettings,
    CopyTranslator: exports.CopyTranslator,
    DependencyReference: exports.DependencyReference,
    "CustomSetupBase.CustomSetupBase": exports.CustomSetupBase,
    LinkedIntegrationRuntimeType: exports.LinkedIntegrationRuntimeType,
    "SecretBase.SecureString": exports.SecureString,
    "SecretBase.AzureKeyVaultSecret": exports.AzureKeyVaultSecretReference,
    "DataFlow.MappingDataFlow": exports.MappingDataFlow,
    "DataFlow.Flowlet": exports.Flowlet,
    "IntegrationRuntime.Managed": exports.ManagedIntegrationRuntime,
    "IntegrationRuntime.SelfHosted": exports.SelfHostedIntegrationRuntime,
    "Dataset.AmazonS3Object": exports.AmazonS3Dataset,
    "Dataset.Avro": exports.AvroDataset,
    "Dataset.Excel": exports.ExcelDataset,
    "Dataset.Parquet": exports.ParquetDataset,
    "Dataset.DelimitedText": exports.DelimitedTextDataset,
    "Dataset.Json": exports.JsonDataset,
    "Dataset.Xml": exports.XmlDataset,
    "Dataset.Orc": exports.OrcDataset,
    "Dataset.Binary": exports.BinaryDataset,
    "Dataset.Iceberg": exports.IcebergDataset,
    "Dataset.AzureBlob": exports.AzureBlobDataset,
    "Dataset.AzureTable": exports.AzureTableDataset,
    "Dataset.AzureSqlTable": exports.AzureSqlTableDataset,
    "Dataset.AzureSqlMITable": exports.AzureSqlMITableDataset,
    "Dataset.AzureSqlDWTable": exports.AzureSqlDWTableDataset,
    "Dataset.CassandraTable": exports.CassandraTableDataset,
    "Dataset.CustomDataset": exports.CustomDataset,
    "Dataset.CosmosDbSqlApiCollection": exports.CosmosDbSqlApiCollectionDataset,
    "Dataset.DocumentDbCollection": exports.DocumentDbCollectionDataset,
    "Dataset.DynamicsEntity": exports.DynamicsEntityDataset,
    "Dataset.DynamicsCrmEntity": exports.DynamicsCrmEntityDataset,
    "Dataset.CommonDataServiceForAppsEntity": exports.CommonDataServiceForAppsEntityDataset,
    "Dataset.AzureDataLakeStoreFile": exports.AzureDataLakeStoreDataset,
    "Dataset.AzureBlobFSFile": exports.AzureBlobFSDataset,
    "Dataset.Office365Table": exports.Office365Dataset,
    "Dataset.FileShare": exports.FileShareDataset,
    "Dataset.MongoDbCollection": exports.MongoDbCollectionDataset,
    "Dataset.MongoDbAtlasCollection": exports.MongoDbAtlasCollectionDataset,
    "Dataset.MongoDbV2Collection": exports.MongoDbV2CollectionDataset,
    "Dataset.CosmosDbMongoDbApiCollection": exports.CosmosDbMongoDbApiCollectionDataset,
    "Dataset.ODataResource": exports.ODataResourceDataset,
    "Dataset.OracleTable": exports.OracleTableDataset,
    "Dataset.AmazonRdsForOracleTable": exports.AmazonRdsForOracleTableDataset,
    "Dataset.TeradataTable": exports.TeradataTableDataset,
    "Dataset.AzureMySqlTable": exports.AzureMySqlTableDataset,
    "Dataset.AmazonRedshiftTable": exports.AmazonRedshiftTableDataset,
    "Dataset.Db2Table": exports.Db2TableDataset,
    "Dataset.RelationalTable": exports.RelationalTableDataset,
    "Dataset.InformixTable": exports.InformixTableDataset,
    "Dataset.OdbcTable": exports.OdbcTableDataset,
    "Dataset.MySqlTable": exports.MySqlTableDataset,
    "Dataset.PostgreSqlTable": exports.PostgreSqlTableDataset,
    "Dataset.PostgreSqlV2Table": exports.PostgreSqlV2TableDataset,
    "Dataset.MicrosoftAccessTable": exports.MicrosoftAccessTableDataset,
    "Dataset.SalesforceObject": exports.SalesforceObjectDataset,
    "Dataset.SalesforceServiceCloudObject": exports.SalesforceServiceCloudObjectDataset,
    "Dataset.SybaseTable": exports.SybaseTableDataset,
    "Dataset.SapBwCube": exports.SapBwCubeDataset,
    "Dataset.SapCloudForCustomerResource": exports.SapCloudForCustomerResourceDataset,
    "Dataset.SapEccResource": exports.SapEccResourceDataset,
    "Dataset.SapHanaTable": exports.SapHanaTableDataset,
    "Dataset.SapOpenHubTable": exports.SapOpenHubTableDataset,
    "Dataset.SqlServerTable": exports.SqlServerTableDataset,
    "Dataset.AmazonRdsForSqlServerTable": exports.AmazonRdsForSqlServerTableDataset,
    "Dataset.RestResource": exports.RestResourceDataset,
    "Dataset.SapTableResource": exports.SapTableResourceDataset,
    "Dataset.SapOdpResource": exports.SapOdpResourceDataset,
    "Dataset.WebTable": exports.WebTableDataset,
    "Dataset.AzureSearchIndex": exports.AzureSearchIndexDataset,
    "Dataset.HttpFile": exports.HttpDataset,
    "Dataset.AmazonMWSObject": exports.AmazonMWSObjectDataset,
    "Dataset.AzurePostgreSqlTable": exports.AzurePostgreSqlTableDataset,
    "Dataset.ConcurObject": exports.ConcurObjectDataset,
    "Dataset.CouchbaseTable": exports.CouchbaseTableDataset,
    "Dataset.DrillTable": exports.DrillTableDataset,
    "Dataset.EloquaObject": exports.EloquaObjectDataset,
    "Dataset.GoogleBigQueryObject": exports.GoogleBigQueryObjectDataset,
    "Dataset.GoogleBigQueryV2Object": exports.GoogleBigQueryV2ObjectDataset,
    "Dataset.GreenplumTable": exports.GreenplumTableDataset,
    "Dataset.HBaseObject": exports.HBaseObjectDataset,
    "Dataset.HiveObject": exports.HiveObjectDataset,
    "Dataset.HubspotObject": exports.HubspotObjectDataset,
    "Dataset.ImpalaObject": exports.ImpalaObjectDataset,
    "Dataset.JiraObject": exports.JiraObjectDataset,
    "Dataset.MagentoObject": exports.MagentoObjectDataset,
    "Dataset.MariaDBTable": exports.MariaDBTableDataset,
    "Dataset.AzureMariaDBTable": exports.AzureMariaDBTableDataset,
    "Dataset.MarketoObject": exports.MarketoObjectDataset,
    "Dataset.PaypalObject": exports.PaypalObjectDataset,
    "Dataset.PhoenixObject": exports.PhoenixObjectDataset,
    "Dataset.PrestoObject": exports.PrestoObjectDataset,
    "Dataset.QuickBooksObject": exports.QuickBooksObjectDataset,
    "Dataset.ServiceNowObject": exports.ServiceNowObjectDataset,
    "Dataset.ShopifyObject": exports.ShopifyObjectDataset,
    "Dataset.SparkObject": exports.SparkObjectDataset,
    "Dataset.SquareObject": exports.SquareObjectDataset,
    "Dataset.XeroObject": exports.XeroObjectDataset,
    "Dataset.ZohoObject": exports.ZohoObjectDataset,
    "Dataset.NetezzaTable": exports.NetezzaTableDataset,
    "Dataset.VerticaTable": exports.VerticaTableDataset,
    "Dataset.SalesforceMarketingCloudObject": exports.SalesforceMarketingCloudObjectDataset,
    "Dataset.ResponsysObject": exports.ResponsysObjectDataset,
    "Dataset.DynamicsAXResource": exports.DynamicsAXResourceDataset,
    "Dataset.OracleServiceCloudObject": exports.OracleServiceCloudObjectDataset,
    "Dataset.AzureDataExplorerTable": exports.AzureDataExplorerTableDataset,
    "Dataset.GoogleAdWordsObject": exports.GoogleAdWordsObjectDataset,
    "Dataset.SnowflakeTable": exports.SnowflakeDataset,
    "Dataset.SnowflakeV2Table": exports.SnowflakeV2Dataset,
    "Dataset.SharePointOnlineListResource": exports.SharePointOnlineListResourceDataset,
    "Dataset.AzureDatabricksDeltaLakeDataset": exports.AzureDatabricksDeltaLakeDataset,
    "Dataset.LakehouseTable": exports.LakeHouseTableDataset,
    "Dataset.SalesforceV2Object": exports.SalesforceV2ObjectDataset,
    "Dataset.SalesforceServiceCloudV2Object": exports.SalesforceServiceCloudV2ObjectDataset,
    "Dataset.WarehouseTable": exports.WarehouseTableDataset,
    "Dataset.ServiceNowV2Object": exports.ServiceNowV2ObjectDataset,
    "LinkedService.AzureStorage": exports.AzureStorageLinkedService,
    "LinkedService.AzureBlobStorage": exports.AzureBlobStorageLinkedService,
    "LinkedService.AzureTableStorage": exports.AzureTableStorageLinkedService,
    "LinkedService.AzureSqlDW": exports.AzureSqlDWLinkedService,
    "LinkedService.SqlServer": exports.SqlServerLinkedService,
    "LinkedService.AmazonRdsForSqlServer": exports.AmazonRdsForSqlServerLinkedService,
    "LinkedService.AzureSqlDatabase": exports.AzureSqlDatabaseLinkedService,
    "LinkedService.AzureSqlMI": exports.AzureSqlMILinkedService,
    "LinkedService.AzureBatch": exports.AzureBatchLinkedService,
    "LinkedService.AzureKeyVault": exports.AzureKeyVaultLinkedService,
    "LinkedService.CosmosDb": exports.CosmosDbLinkedService,
    "LinkedService.Dynamics": exports.DynamicsLinkedService,
    "LinkedService.DynamicsCrm": exports.DynamicsCrmLinkedService,
    "LinkedService.CommonDataServiceForApps": exports.CommonDataServiceForAppsLinkedService,
    "LinkedService.HDInsight": exports.HDInsightLinkedService,
    "LinkedService.FileServer": exports.FileServerLinkedService,
    "LinkedService.AzureFileStorage": exports.AzureFileStorageLinkedService,
    "LinkedService.GoogleCloudStorage": exports.GoogleCloudStorageLinkedService,
    "LinkedService.Oracle": exports.OracleLinkedService,
    "LinkedService.AmazonRdsForOracle": exports.AmazonRdsForOracleLinkedService,
    "LinkedService.AzureMySql": exports.AzureMySqlLinkedService,
    "LinkedService.MySql": exports.MySqlLinkedService,
    "LinkedService.PostgreSql": exports.PostgreSqlLinkedService,
    "LinkedService.PostgreSqlV2": exports.PostgreSqlV2LinkedService,
    "LinkedService.Sybase": exports.SybaseLinkedService,
    "LinkedService.Db2": exports.Db2LinkedService,
    "LinkedService.Teradata": exports.TeradataLinkedService,
    "LinkedService.AzureML": exports.AzureMLLinkedService,
    "LinkedService.AzureMLService": exports.AzureMLServiceLinkedService,
    "LinkedService.Odbc": exports.OdbcLinkedService,
    "LinkedService.Informix": exports.InformixLinkedService,
    "LinkedService.MicrosoftAccess": exports.MicrosoftAccessLinkedService,
    "LinkedService.Hdfs": exports.HdfsLinkedService,
    "LinkedService.OData": exports.ODataLinkedService,
    "LinkedService.Web": exports.WebLinkedService,
    "LinkedService.Cassandra": exports.CassandraLinkedService,
    "LinkedService.MongoDb": exports.MongoDbLinkedService,
    "LinkedService.MongoDbAtlas": exports.MongoDbAtlasLinkedService,
    "LinkedService.MongoDbV2": exports.MongoDbV2LinkedService,
    "LinkedService.CosmosDbMongoDbApi": exports.CosmosDbMongoDbApiLinkedService,
    "LinkedService.AzureDataLakeStore": exports.AzureDataLakeStoreLinkedService,
    "LinkedService.AzureBlobFS": exports.AzureBlobFSLinkedService,
    "LinkedService.Office365": exports.Office365LinkedService,
    "LinkedService.Salesforce": exports.SalesforceLinkedService,
    "LinkedService.SalesforceServiceCloud": exports.SalesforceServiceCloudLinkedService,
    "LinkedService.SapCloudForCustomer": exports.SapCloudForCustomerLinkedService,
    "LinkedService.SapEcc": exports.SapEccLinkedService,
    "LinkedService.SapOpenHub": exports.SapOpenHubLinkedService,
    "LinkedService.SapOdp": exports.SapOdpLinkedService,
    "LinkedService.RestService": exports.RestServiceLinkedService,
    "LinkedService.TeamDesk": exports.TeamDeskLinkedService,
    "LinkedService.Quickbase": exports.QuickbaseLinkedService,
    "LinkedService.Smartsheet": exports.SmartsheetLinkedService,
    "LinkedService.Zendesk": exports.ZendeskLinkedService,
    "LinkedService.Dataworld": exports.DataworldLinkedService,
    "LinkedService.AppFigures": exports.AppFiguresLinkedService,
    "LinkedService.Asana": exports.AsanaLinkedService,
    "LinkedService.Twilio": exports.TwilioLinkedService,
    "LinkedService.GoogleSheets": exports.GoogleSheetsLinkedService,
    "LinkedService.AmazonS3": exports.AmazonS3LinkedService,
    "LinkedService.AmazonRedshift": exports.AmazonRedshiftLinkedService,
    "LinkedService.CustomDataSource": exports.CustomDataSourceLinkedService,
    "LinkedService.AzureSearch": exports.AzureSearchLinkedService,
    "LinkedService.HttpServer": exports.HttpLinkedService,
    "LinkedService.FtpServer": exports.FtpServerLinkedService,
    "LinkedService.Sftp": exports.SftpServerLinkedService,
    "LinkedService.SapBW": exports.SapBWLinkedService,
    "LinkedService.SapHana": exports.SapHanaLinkedService,
    "LinkedService.AmazonMWS": exports.AmazonMWSLinkedService,
    "LinkedService.AzurePostgreSql": exports.AzurePostgreSqlLinkedService,
    "LinkedService.Concur": exports.ConcurLinkedService,
    "LinkedService.Couchbase": exports.CouchbaseLinkedService,
    "LinkedService.Drill": exports.DrillLinkedService,
    "LinkedService.Eloqua": exports.EloquaLinkedService,
    "LinkedService.GoogleBigQuery": exports.GoogleBigQueryLinkedService,
    "LinkedService.GoogleBigQueryV2": exports.GoogleBigQueryV2LinkedService,
    "LinkedService.Greenplum": exports.GreenplumLinkedService,
    "LinkedService.HBase": exports.HBaseLinkedService,
    "LinkedService.Hive": exports.HiveLinkedService,
    "LinkedService.Hubspot": exports.HubspotLinkedService,
    "LinkedService.Impala": exports.ImpalaLinkedService,
    "LinkedService.Jira": exports.JiraLinkedService,
    "LinkedService.Magento": exports.MagentoLinkedService,
    "LinkedService.MariaDB": exports.MariaDBLinkedService,
    "LinkedService.AzureMariaDB": exports.AzureMariaDBLinkedService,
    "LinkedService.Marketo": exports.MarketoLinkedService,
    "LinkedService.Paypal": exports.PaypalLinkedService,
    "LinkedService.Phoenix": exports.PhoenixLinkedService,
    "LinkedService.Presto": exports.PrestoLinkedService,
    "LinkedService.QuickBooks": exports.QuickBooksLinkedService,
    "LinkedService.ServiceNow": exports.ServiceNowLinkedService,
    "LinkedService.Shopify": exports.ShopifyLinkedService,
    "LinkedService.Spark": exports.SparkLinkedService,
    "LinkedService.Square": exports.SquareLinkedService,
    "LinkedService.Xero": exports.XeroLinkedService,
    "LinkedService.Zoho": exports.ZohoLinkedService,
    "LinkedService.Vertica": exports.VerticaLinkedService,
    "LinkedService.Netezza": exports.NetezzaLinkedService,
    "LinkedService.SalesforceMarketingCloud": exports.SalesforceMarketingCloudLinkedService,
    "LinkedService.HDInsightOnDemand": exports.HDInsightOnDemandLinkedService,
    "LinkedService.AzureDataLakeAnalytics": exports.AzureDataLakeAnalyticsLinkedService,
    "LinkedService.AzureDatabricks": exports.AzureDatabricksLinkedService,
    "LinkedService.AzureDatabricksDeltaLake": exports.AzureDatabricksDeltaLakeLinkedService,
    "LinkedService.Responsys": exports.ResponsysLinkedService,
    "LinkedService.DynamicsAX": exports.DynamicsAXLinkedService,
    "LinkedService.OracleServiceCloud": exports.OracleServiceCloudLinkedService,
    "LinkedService.GoogleAdWords": exports.GoogleAdWordsLinkedService,
    "LinkedService.SapTable": exports.SapTableLinkedService,
    "LinkedService.AzureDataExplorer": exports.AzureDataExplorerLinkedService,
    "LinkedService.AzureFunction": exports.AzureFunctionLinkedService,
    "LinkedService.Snowflake": exports.SnowflakeLinkedService,
    "LinkedService.SnowflakeV2": exports.SnowflakeV2LinkedService,
    "LinkedService.SharePointOnlineList": exports.SharePointOnlineListLinkedService,
    "LinkedService.AzureSynapseArtifacts": exports.AzureSynapseArtifactsLinkedService,
    "LinkedService.Lakehouse": exports.LakeHouseLinkedService,
    "LinkedService.PowerBIWorkspace": exports.PowerBIWorkspaceLinkedService,
    "LinkedService.SalesforceV2": exports.SalesforceV2LinkedService,
    "LinkedService.SalesforceServiceCloudV2": exports.SalesforceServiceCloudV2LinkedService,
    "LinkedService.Warehouse": exports.WarehouseLinkedService,
    "Activity.Container": exports.ControlActivity,
    "Activity.Execution": exports.ExecutionActivity,
    "Activity.SqlPoolStoredProcedure": exports.SqlPoolStoredProcedureActivity,
    "Trigger.RerunTumblingWindowTrigger": exports.RerunTumblingWindowTrigger,
    "Trigger.MultiplePipelineTrigger": exports.MultiplePipelineTrigger,
    "Trigger.TumblingWindowTrigger": exports.TumblingWindowTrigger,
    "Trigger.ChainingTrigger": exports.ChainingTrigger,
    "DatasetLocation.AzureBlobStorageLocation": exports.AzureBlobStorageLocation,
    "DatasetLocation.AzureBlobFSLocation": exports.AzureBlobFSLocation,
    "DatasetLocation.AzureDataLakeStoreLocation": exports.AzureDataLakeStoreLocation,
    "DatasetLocation.AmazonS3Location": exports.AmazonS3Location,
    "DatasetLocation.FileServerLocation": exports.FileServerLocation,
    "DatasetLocation.AzureFileStorageLocation": exports.AzureFileStorageLocation,
    "DatasetLocation.GoogleCloudStorageLocation": exports.GoogleCloudStorageLocation,
    "DatasetLocation.FtpServerLocation": exports.FtpServerLocation,
    "DatasetLocation.SftpLocation": exports.SftpLocation,
    "DatasetLocation.HttpServerLocation": exports.HttpServerLocation,
    "DatasetLocation.HdfsLocation": exports.HdfsLocation,
    "DatasetLocation.LakeHouseLocation": exports.LakeHouseLocation,
    "DatasetStorageFormat.TextFormat": exports.TextFormat,
    "DatasetStorageFormat.JsonFormat": exports.JsonFormat,
    "DatasetStorageFormat.AvroFormat": exports.AvroFormat,
    "DatasetStorageFormat.OrcFormat": exports.OrcFormat,
    "DatasetStorageFormat.ParquetFormat": exports.ParquetFormat,
    "WebLinkedServiceTypeProperties.Anonymous": exports.WebAnonymousAuthentication,
    "WebLinkedServiceTypeProperties.Basic": exports.WebBasicAuthentication,
    "WebLinkedServiceTypeProperties.ClientCertificate": exports.WebClientCertificateAuthentication,
    "StoreReadSettings.AzureBlobStorageReadSettings": exports.AzureBlobStorageReadSettings,
    "StoreReadSettings.AzureBlobFSReadSettings": exports.AzureBlobFSReadSettings,
    "StoreReadSettings.AzureDataLakeStoreReadSettings": exports.AzureDataLakeStoreReadSettings,
    "StoreReadSettings.AmazonS3ReadSettings": exports.AmazonS3ReadSettings,
    "StoreReadSettings.FileServerReadSettings": exports.FileServerReadSettings,
    "StoreReadSettings.AzureFileStorageReadSettings": exports.AzureFileStorageReadSettings,
    "StoreReadSettings.GoogleCloudStorageReadSettings": exports.GoogleCloudStorageReadSettings,
    "StoreReadSettings.FtpReadSettings": exports.FtpReadSettings,
    "StoreReadSettings.SftpReadSettings": exports.SftpReadSettings,
    "StoreReadSettings.HttpReadSettings": exports.HttpReadSettings,
    "StoreReadSettings.HdfsReadSettings": exports.HdfsReadSettings,
    "StoreReadSettings.LakeHouseReadSettings": exports.LakeHouseReadSettings,
    "StoreWriteSettings.SftpWriteSettings": exports.SftpWriteSettings,
    "StoreWriteSettings.AzureBlobStorageWriteSettings": exports.AzureBlobStorageWriteSettings,
    "StoreWriteSettings.AzureBlobFSWriteSettings": exports.AzureBlobFSWriteSettings,
    "StoreWriteSettings.AzureDataLakeStoreWriteSettings": exports.AzureDataLakeStoreWriteSettings,
    "StoreWriteSettings.FileServerWriteSettings": exports.FileServerWriteSettings,
    "StoreWriteSettings.AzureFileStorageWriteSettings": exports.AzureFileStorageWriteSettings,
    "StoreWriteSettings.LakeHouseWriteSettings": exports.LakeHouseWriteSettings,
    "FormatReadSettings.ParquetReadSettings": exports.ParquetReadSettings,
    "FormatReadSettings.DelimitedTextReadSettings": exports.DelimitedTextReadSettings,
    "FormatReadSettings.JsonReadSettings": exports.JsonReadSettings,
    "FormatReadSettings.XmlReadSettings": exports.XmlReadSettings,
    "FormatReadSettings.BinaryReadSettings": exports.BinaryReadSettings,
    "CompressionReadSettings.ZipDeflateReadSettings": exports.ZipDeflateReadSettings,
    "CompressionReadSettings.TarReadSettings": exports.TarReadSettings,
    "CompressionReadSettings.TarGZipReadSettings": exports.TarGZipReadSettings,
    "FormatWriteSettings.AvroWriteSettings": exports.AvroWriteSettings,
    "FormatWriteSettings.OrcWriteSettings": exports.OrcWriteSettings,
    "FormatWriteSettings.ParquetWriteSettings": exports.ParquetWriteSettings,
    "FormatWriteSettings.DelimitedTextWriteSettings": exports.DelimitedTextWriteSettings,
    "FormatWriteSettings.JsonWriteSettings": exports.JsonWriteSettings,
    "FormatWriteSettings.IcebergWriteSettings": exports.IcebergWriteSettings,
    "CopySource.AvroSource": exports.AvroSource,
    "CopySource.ExcelSource": exports.ExcelSource,
    "CopySource.ParquetSource": exports.ParquetSource,
    "CopySource.DelimitedTextSource": exports.DelimitedTextSource,
    "CopySource.JsonSource": exports.JsonSource,
    "CopySource.XmlSource": exports.XmlSource,
    "CopySource.OrcSource": exports.OrcSource,
    "CopySource.BinarySource": exports.BinarySource,
    "CopySource.TabularSource": exports.TabularSource,
    "CopySource.BlobSource": exports.BlobSource,
    "CopySource.DocumentDbCollectionSource": exports.DocumentDbCollectionSource,
    "CopySource.CosmosDbSqlApiSource": exports.CosmosDbSqlApiSource,
    "CopySource.DynamicsSource": exports.DynamicsSource,
    "CopySource.DynamicsCrmSource": exports.DynamicsCrmSource,
    "CopySource.CommonDataServiceForAppsSource": exports.CommonDataServiceForAppsSource,
    "CopySource.RelationalSource": exports.RelationalSource,
    "CopySource.MicrosoftAccessSource": exports.MicrosoftAccessSource,
    "CopySource.ODataSource": exports.ODataSource,
    "CopySource.SalesforceServiceCloudSource": exports.SalesforceServiceCloudSource,
    "CopySource.RestSource": exports.RestSource,
    "CopySource.FileSystemSource": exports.FileSystemSource,
    "CopySource.HdfsSource": exports.HdfsSource,
    "CopySource.AzureDataExplorerSource": exports.AzureDataExplorerSource,
    "CopySource.OracleSource": exports.OracleSource,
    "CopySource.AmazonRdsForOracleSource": exports.AmazonRdsForOracleSource,
    "CopySource.WebSource": exports.WebSource,
    "CopySource.MongoDbSource": exports.MongoDbSource,
    "CopySource.MongoDbAtlasSource": exports.MongoDbAtlasSource,
    "CopySource.MongoDbV2Source": exports.MongoDbV2Source,
    "CopySource.CosmosDbMongoDbApiSource": exports.CosmosDbMongoDbApiSource,
    "CopySource.Office365Source": exports.Office365Source,
    "CopySource.AzureDataLakeStoreSource": exports.AzureDataLakeStoreSource,
    "CopySource.AzureBlobFSSource": exports.AzureBlobFSSource,
    "CopySource.HttpSource": exports.HttpSource,
    "CopySource.LakeHouseTableSource": exports.LakeHouseTableSource,
    "CopySource.SnowflakeSource": exports.SnowflakeSource,
    "CopySource.SnowflakeV2Source": exports.SnowflakeV2Source,
    "CopySource.AzureDatabricksDeltaLakeSource": exports.AzureDatabricksDeltaLakeSource,
    "CopySource.SharePointOnlineListSource": exports.SharePointOnlineListSource,
    "CopySource.SalesforceServiceCloudV2Source": exports.SalesforceServiceCloudV2Source,
    "CopySink.DelimitedTextSink": exports.DelimitedTextSink,
    "CopySink.JsonSink": exports.JsonSink,
    "CopySink.OrcSink": exports.OrcSink,
    "CopySink.RestSink": exports.RestSink,
    "CopySink.TeradataSink": exports.TeradataSink,
    "CopySink.AzurePostgreSqlSink": exports.AzurePostgreSqlSink,
    "CopySink.AzureMySqlSink": exports.AzureMySqlSink,
    "CopySink.AzureDatabricksDeltaLakeSink": exports.AzureDatabricksDeltaLakeSink,
    "CopySink.WarehouseSink": exports.WarehouseSink,
    "CopySink.SapCloudForCustomerSink": exports.SapCloudForCustomerSink,
    "CopySink.AzureQueueSink": exports.AzureQueueSink,
    "CopySink.AzureTableSink": exports.AzureTableSink,
    "CopySink.AvroSink": exports.AvroSink,
    "CopySink.ParquetSink": exports.ParquetSink,
    "CopySink.BinarySink": exports.BinarySink,
    "CopySink.IcebergSink": exports.IcebergSink,
    "CopySink.BlobSink": exports.BlobSink,
    "CopySink.FileSystemSink": exports.FileSystemSink,
    "CopySink.DocumentDbCollectionSink": exports.DocumentDbCollectionSink,
    "CopySink.CosmosDbSqlApiSink": exports.CosmosDbSqlApiSink,
    "CopySink.SqlSink": exports.SqlSink,
    "CopySink.SqlServerSink": exports.SqlServerSink,
    "CopySink.AzureSqlSink": exports.AzureSqlSink,
    "CopySink.SqlMISink": exports.SqlMISink,
    "CopySink.SqlDWSink": exports.SqlDWSink,
    "CopySink.SnowflakeSink": exports.SnowflakeSink,
    "CopySink.SnowflakeV2Sink": exports.SnowflakeV2Sink,
    "CopySink.OracleSink": exports.OracleSink,
    "CopySink.AzureDataLakeStoreSink": exports.AzureDataLakeStoreSink,
    "CopySink.AzureBlobFSSink": exports.AzureBlobFSSink,
    "CopySink.AzureSearchIndexSink": exports.AzureSearchIndexSink,
    "CopySink.OdbcSink": exports.OdbcSink,
    "CopySink.InformixSink": exports.InformixSink,
    "CopySink.MicrosoftAccessSink": exports.MicrosoftAccessSink,
    "CopySink.DynamicsSink": exports.DynamicsSink,
    "CopySink.DynamicsCrmSink": exports.DynamicsCrmSink,
    "CopySink.CommonDataServiceForAppsSink": exports.CommonDataServiceForAppsSink,
    "CopySink.AzureDataExplorerSink": exports.AzureDataExplorerSink,
    "CopySink.SalesforceSink": exports.SalesforceSink,
    "CopySink.SalesforceServiceCloudSink": exports.SalesforceServiceCloudSink,
    "CopySink.CosmosDbMongoDbApiSink": exports.CosmosDbMongoDbApiSink,
    "CopySink.LakeHouseTableSink": exports.LakeHouseTableSink,
    "CopySink.SalesforceV2Sink": exports.SalesforceV2Sink,
    "CopySink.SalesforceServiceCloudV2Sink": exports.SalesforceServiceCloudV2Sink,
    "ImportSettings.TeradataImportCommand": exports.TeradataImportCommand,
    "ImportSettings.AzureDatabricksDeltaLakeImportCommand": exports.AzureDatabricksDeltaLakeImportCommand,
    "ImportSettings.SnowflakeImportCopyCommand": exports.SnowflakeImportCopyCommand,
    "ExportSettings.SnowflakeExportCopyCommand": exports.SnowflakeExportCopyCommand,
    "ExportSettings.AzureDatabricksDeltaLakeExportCommand": exports.AzureDatabricksDeltaLakeExportCommand,
    "CopyTranslator.TabularTranslator": exports.TabularTranslator,
    "DependencyReference.TriggerDependencyReference": exports.TriggerDependencyReference,
    "DependencyReference.SelfDependencyTumblingWindowTriggerReference": exports.SelfDependencyTumblingWindowTriggerReference,
    "LinkedIntegrationRuntimeType.Key": exports.LinkedIntegrationRuntimeKeyAuthorization,
    "LinkedIntegrationRuntimeType.RBAC": exports.LinkedIntegrationRuntimeRbacAuthorization,
    "ControlActivity.ExecutePipeline": exports.ExecutePipelineActivity,
    "ControlActivity.IfCondition": exports.IfConditionActivity,
    "ControlActivity.Switch": exports.SwitchActivity,
    "ControlActivity.ForEach": exports.ForEachActivity,
    "ControlActivity.Wait": exports.WaitActivity,
    "ControlActivity.Fail": exports.FailActivity,
    "ControlActivity.Until": exports.UntilActivity,
    "ControlActivity.Validation": exports.ValidationActivity,
    "ControlActivity.Filter": exports.FilterActivity,
    "ControlActivity.SetVariable": exports.SetVariableActivity,
    "ControlActivity.AppendVariable": exports.AppendVariableActivity,
    "ControlActivity.WebHook": exports.WebHookActivity,
    "ExecutionActivity.Copy": exports.CopyActivity,
    "ExecutionActivity.HDInsightHive": exports.HDInsightHiveActivity,
    "ExecutionActivity.HDInsightPig": exports.HDInsightPigActivity,
    "ExecutionActivity.HDInsightMapReduce": exports.HDInsightMapReduceActivity,
    "ExecutionActivity.HDInsightStreaming": exports.HDInsightStreamingActivity,
    "ExecutionActivity.HDInsightSpark": exports.HDInsightSparkActivity,
    "ExecutionActivity.ExecuteSSISPackage": exports.ExecuteSsisPackageActivity,
    "ExecutionActivity.Custom": exports.CustomActivity,
    "ExecutionActivity.SqlServerStoredProcedure": exports.SqlServerStoredProcedureActivity,
    "ExecutionActivity.Delete": exports.DeleteActivity,
    "ExecutionActivity.AzureDataExplorerCommand": exports.AzureDataExplorerCommandActivity,
    "ExecutionActivity.Lookup": exports.LookupActivity,
    "ExecutionActivity.WebActivity": exports.WebActivity,
    "ExecutionActivity.GetMetadata": exports.GetMetadataActivity,
    "ExecutionActivity.AzureMLBatchExecution": exports.AzureMLBatchExecutionActivity,
    "ExecutionActivity.AzureMLUpdateResource": exports.AzureMLUpdateResourceActivity,
    "ExecutionActivity.AzureMLExecutePipeline": exports.AzureMLExecutePipelineActivity,
    "ExecutionActivity.DataLakeAnalyticsU-SQL": exports.DataLakeAnalyticsUsqlActivity,
    "ExecutionActivity.DatabricksNotebook": exports.DatabricksNotebookActivity,
    "ExecutionActivity.DatabricksSparkJar": exports.DatabricksSparkJarActivity,
    "ExecutionActivity.DatabricksSparkPython": exports.DatabricksSparkPythonActivity,
    "ExecutionActivity.AzureFunctionActivity": exports.AzureFunctionActivity,
    "ExecutionActivity.ExecuteDataFlow": exports.ExecuteDataFlowActivity,
    "ExecutionActivity.Script": exports.ScriptActivity,
    "ExecutionActivity.SynapseNotebook": exports.SynapseNotebookActivity,
    "ExecutionActivity.SparkJob": exports.SynapseSparkJobDefinitionActivity,
    "MultiplePipelineTrigger.ScheduleTrigger": exports.ScheduleTrigger,
    "MultiplePipelineTrigger.BlobTrigger": exports.BlobTrigger,
    "MultiplePipelineTrigger.BlobEventsTrigger": exports.BlobEventsTrigger,
    "MultiplePipelineTrigger.CustomEventsTrigger": exports.CustomEventsTrigger,
    "TabularSource.AzureTableSource": exports.AzureTableSource,
    "TabularSource.InformixSource": exports.InformixSource,
    "TabularSource.Db2Source": exports.Db2Source,
    "TabularSource.OdbcSource": exports.OdbcSource,
    "TabularSource.MySqlSource": exports.MySqlSource,
    "TabularSource.PostgreSqlSource": exports.PostgreSqlSource,
    "TabularSource.PostgreSqlV2Source": exports.PostgreSqlV2Source,
    "TabularSource.SybaseSource": exports.SybaseSource,
    "TabularSource.SapBwSource": exports.SapBwSource,
    "TabularSource.SalesforceSource": exports.SalesforceSource,
    "TabularSource.SapCloudForCustomerSource": exports.SapCloudForCustomerSource,
    "TabularSource.SapEccSource": exports.SapEccSource,
    "TabularSource.SapHanaSource": exports.SapHanaSource,
    "TabularSource.SapOpenHubSource": exports.SapOpenHubSource,
    "TabularSource.SapOdpSource": exports.SapOdpSource,
    "TabularSource.SapTableSource": exports.SapTableSource,
    "TabularSource.SqlSource": exports.SqlSource,
    "TabularSource.SqlServerSource": exports.SqlServerSource,
    "TabularSource.AmazonRdsForSqlServerSource": exports.AmazonRdsForSqlServerSource,
    "TabularSource.AzureSqlSource": exports.AzureSqlSource,
    "TabularSource.SqlMISource": exports.SqlMISource,
    "TabularSource.SqlDWSource": exports.SqlDWSource,
    "TabularSource.AzureMySqlSource": exports.AzureMySqlSource,
    "TabularSource.TeradataSource": exports.TeradataSource,
    "TabularSource.CassandraSource": exports.CassandraSource,
    "TabularSource.AmazonMWSSource": exports.AmazonMWSSource,
    "TabularSource.AzurePostgreSqlSource": exports.AzurePostgreSqlSource,
    "TabularSource.ConcurSource": exports.ConcurSource,
    "TabularSource.CouchbaseSource": exports.CouchbaseSource,
    "TabularSource.DrillSource": exports.DrillSource,
    "TabularSource.EloquaSource": exports.EloquaSource,
    "TabularSource.GoogleBigQuerySource": exports.GoogleBigQuerySource,
    "TabularSource.GoogleBigQueryV2Source": exports.GoogleBigQueryV2Source,
    "TabularSource.GreenplumSource": exports.GreenplumSource,
    "TabularSource.HBaseSource": exports.HBaseSource,
    "TabularSource.HiveSource": exports.HiveSource,
    "TabularSource.HubspotSource": exports.HubspotSource,
    "TabularSource.ImpalaSource": exports.ImpalaSource,
    "TabularSource.JiraSource": exports.JiraSource,
    "TabularSource.MagentoSource": exports.MagentoSource,
    "TabularSource.MariaDBSource": exports.MariaDBSource,
    "TabularSource.AzureMariaDBSource": exports.AzureMariaDBSource,
    "TabularSource.MarketoSource": exports.MarketoSource,
    "TabularSource.PaypalSource": exports.PaypalSource,
    "TabularSource.PhoenixSource": exports.PhoenixSource,
    "TabularSource.PrestoSource": exports.PrestoSource,
    "TabularSource.QuickBooksSource": exports.QuickBooksSource,
    "TabularSource.ServiceNowSource": exports.ServiceNowSource,
    "TabularSource.ShopifySource": exports.ShopifySource,
    "TabularSource.SparkSource": exports.SparkSource,
    "TabularSource.SquareSource": exports.SquareSource,
    "TabularSource.XeroSource": exports.XeroSource,
    "TabularSource.ZohoSource": exports.ZohoSource,
    "TabularSource.NetezzaSource": exports.NetezzaSource,
    "TabularSource.VerticaSource": exports.VerticaSource,
    "TabularSource.SalesforceMarketingCloudSource": exports.SalesforceMarketingCloudSource,
    "TabularSource.ResponsysSource": exports.ResponsysSource,
    "TabularSource.DynamicsAXSource": exports.DynamicsAXSource,
    "TabularSource.OracleServiceCloudSource": exports.OracleServiceCloudSource,
    "TabularSource.GoogleAdWordsSource": exports.GoogleAdWordsSource,
    "TabularSource.AmazonRedshiftSource": exports.AmazonRedshiftSource,
    "TabularSource.WarehouseSource": exports.WarehouseSource,
    "TabularSource.SalesforceV2Source": exports.SalesforceV2Source,
    "TabularSource.ServiceNowV2Source": exports.ServiceNowV2Source,
    "TriggerDependencyReference.TumblingWindowTriggerDependencyReference": exports.TumblingWindowTriggerDependencyReference,
};
//# sourceMappingURL=mappers.js.map