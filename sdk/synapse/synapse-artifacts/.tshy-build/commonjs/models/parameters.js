"use strict";
/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.notebook = exports.linkedServiceName = exports.linkedService = exports.blobConditionAppendPosition = exports.comp = exports.accept1 = exports.content = exports.contentType1 = exports.operationId = exports.libraryName = exports.integrationRuntimeName = exports.clientRequestId = exports.gitHubAccessTokenRequest = exports.datasetName = exports.dataset = exports.request4 = exports.request3 = exports.request2 = exports.request1 = exports.dataFlowName = exports.dataFlow = exports.bigDataPoolName = exports.apiVersion5 = exports.request = exports.ifNoneMatch = exports.ifMatch = exports.sparkConfigurationName = exports.sparkConfiguration = exports.apiVersion4 = exports.updateBody = exports.id = exports.apiVersion3 = exports.registerBody = exports.renameRequest = exports.kqlScriptName = exports.kqlScript = exports.apiVersion2 = exports.runId = exports.apiVersion1 = exports.runNotebookRequest = exports.nextLink = exports.updateLandingZoneCredentialRequest = exports.queryTableStatusRequest = exports.editTablesRequest = exports.linkConnectionName = exports.linkConnection = exports.contentType = exports.apiVersion = exports.endpoint = exports.accept = void 0;
exports.triggerName = exports.trigger = exports.sqlScriptName = exports.sqlScript = exports.sqlPoolName = exports.sparkJobDefinitionAzureResource = exports.sparkJobDefinitionName = exports.sparkJobDefinition = exports.isRecursive = exports.runId1 = exports.filterParameters = exports.startActivityName = exports.isRecovery = exports.referencePipelineRunId = exports.parameters = exports.pipelineName = exports.pipeline = exports.notebookName = void 0;
const mappers_js_1 = require("../models/mappers.js");
exports.accept = {
    parameterPath: "accept",
    mapper: {
        defaultValue: "application/json",
        isConstant: true,
        serializedName: "Accept",
        type: {
            name: "String",
        },
    },
};
exports.endpoint = {
    parameterPath: "endpoint",
    mapper: {
        serializedName: "endpoint",
        required: true,
        type: {
            name: "String",
        },
    },
    skipEncoding: true,
};
exports.apiVersion = {
    parameterPath: "apiVersion",
    mapper: {
        defaultValue: "2023-04-18-preview",
        isConstant: true,
        serializedName: "api-version",
        type: {
            name: "String",
        },
    },
};
exports.contentType = {
    parameterPath: ["options", "contentType"],
    mapper: {
        defaultValue: "application/json",
        isConstant: true,
        serializedName: "Content-Type",
        type: {
            name: "String",
        },
    },
};
exports.linkConnection = {
    parameterPath: "linkConnection",
    mapper: mappers_js_1.LinkConnectionResource,
};
exports.linkConnectionName = {
    parameterPath: "linkConnectionName",
    mapper: {
        serializedName: "linkConnectionName",
        required: true,
        type: {
            name: "String",
        },
    },
};
exports.editTablesRequest = {
    parameterPath: "editTablesRequest",
    mapper: mappers_js_1.EditTablesRequest,
};
exports.queryTableStatusRequest = {
    parameterPath: "queryTableStatusRequest",
    mapper: mappers_js_1.QueryTableStatusRequest,
};
exports.updateLandingZoneCredentialRequest = {
    parameterPath: "updateLandingZoneCredentialRequest",
    mapper: mappers_js_1.UpdateLandingZoneCredential,
};
exports.nextLink = {
    parameterPath: "nextLink",
    mapper: {
        serializedName: "nextLink",
        required: true,
        type: {
            name: "String",
        },
    },
    skipEncoding: true,
};
exports.runNotebookRequest = {
    parameterPath: "runNotebookRequest",
    mapper: mappers_js_1.RunNotebookRequest,
};
exports.apiVersion1 = {
    parameterPath: "apiVersion",
    mapper: {
        defaultValue: "2022-03-01-preview",
        isConstant: true,
        serializedName: "api-version",
        type: {
            name: "String",
        },
    },
};
exports.runId = {
    parameterPath: "runId",
    mapper: {
        constraints: {
            MaxLength: 100,
        },
        serializedName: "runId",
        required: true,
        type: {
            name: "String",
        },
    },
};
exports.apiVersion2 = {
    parameterPath: "apiVersion",
    mapper: {
        defaultValue: "2021-11-01-preview",
        isConstant: true,
        serializedName: "api-version",
        type: {
            name: "String",
        },
    },
};
exports.kqlScript = {
    parameterPath: "kqlScript",
    mapper: mappers_js_1.KqlScriptResource,
};
exports.kqlScriptName = {
    parameterPath: "kqlScriptName",
    mapper: {
        serializedName: "kqlScriptName",
        required: true,
        type: {
            name: "String",
        },
    },
};
exports.renameRequest = {
    parameterPath: "renameRequest",
    mapper: mappers_js_1.ArtifactRenameRequest,
};
exports.registerBody = {
    parameterPath: "registerBody",
    mapper: mappers_js_1.MetastoreRegisterObject,
};
exports.apiVersion3 = {
    parameterPath: "apiVersion",
    mapper: {
        defaultValue: "2021-07-01-preview",
        isConstant: true,
        serializedName: "api-version",
        type: {
            name: "String",
        },
    },
};
exports.id = {
    parameterPath: "id",
    mapper: {
        serializedName: "id",
        required: true,
        type: {
            name: "String",
        },
    },
};
exports.updateBody = {
    parameterPath: "updateBody",
    mapper: mappers_js_1.MetastoreUpdateObject,
};
exports.apiVersion4 = {
    parameterPath: "apiVersion",
    mapper: {
        defaultValue: "2021-06-01-preview",
        isConstant: true,
        serializedName: "api-version",
        type: {
            name: "String",
        },
    },
};
exports.sparkConfiguration = {
    parameterPath: "sparkConfiguration",
    mapper: mappers_js_1.SparkConfigurationResource,
};
exports.sparkConfigurationName = {
    parameterPath: "sparkConfigurationName",
    mapper: {
        serializedName: "sparkConfigurationName",
        required: true,
        type: {
            name: "String",
        },
    },
};
exports.ifMatch = {
    parameterPath: ["options", "ifMatch"],
    mapper: {
        serializedName: "If-Match",
        type: {
            name: "String",
        },
    },
};
exports.ifNoneMatch = {
    parameterPath: ["options", "ifNoneMatch"],
    mapper: {
        serializedName: "If-None-Match",
        type: {
            name: "String",
        },
    },
};
exports.request = {
    parameterPath: "request",
    mapper: mappers_js_1.ArtifactRenameRequest,
};
exports.apiVersion5 = {
    parameterPath: "apiVersion",
    mapper: {
        defaultValue: "2020-12-01",
        isConstant: true,
        serializedName: "api-version",
        type: {
            name: "String",
        },
    },
};
exports.bigDataPoolName = {
    parameterPath: "bigDataPoolName",
    mapper: {
        serializedName: "bigDataPoolName",
        required: true,
        type: {
            name: "String",
        },
    },
};
exports.dataFlow = {
    parameterPath: "dataFlow",
    mapper: mappers_js_1.DataFlowResource,
};
exports.dataFlowName = {
    parameterPath: "dataFlowName",
    mapper: {
        constraints: {
            Pattern: new RegExp("^[A-Za-z0-9_][^<>*#.%&:\\\\+?/]*$"),
            MaxLength: 260,
            MinLength: 1,
        },
        serializedName: "dataFlowName",
        required: true,
        type: {
            name: "String",
        },
    },
};
exports.request1 = {
    parameterPath: "request",
    mapper: mappers_js_1.CreateDataFlowDebugSessionRequest,
};
exports.request2 = {
    parameterPath: "request",
    mapper: mappers_js_1.DataFlowDebugPackage,
};
exports.request3 = {
    parameterPath: "request",
    mapper: mappers_js_1.DeleteDataFlowDebugSessionRequest,
};
exports.request4 = {
    parameterPath: "request",
    mapper: mappers_js_1.DataFlowDebugCommandRequest,
};
exports.dataset = {
    parameterPath: "dataset",
    mapper: mappers_js_1.DatasetResource,
};
exports.datasetName = {
    parameterPath: "datasetName",
    mapper: {
        constraints: {
            Pattern: new RegExp("^[A-Za-z0-9_][^<>*#.%&:\\\\+?/]*$"),
            MaxLength: 260,
            MinLength: 1,
        },
        serializedName: "datasetName",
        required: true,
        type: {
            name: "String",
        },
    },
};
exports.gitHubAccessTokenRequest = {
    parameterPath: "gitHubAccessTokenRequest",
    mapper: mappers_js_1.GitHubAccessTokenRequest,
};
exports.clientRequestId = {
    parameterPath: ["options", "clientRequestId"],
    mapper: {
        serializedName: "x-ms-client-request-id",
        type: {
            name: "String",
        },
    },
};
exports.integrationRuntimeName = {
    parameterPath: "integrationRuntimeName",
    mapper: {
        serializedName: "integrationRuntimeName",
        required: true,
        type: {
            name: "String",
        },
    },
};
exports.libraryName = {
    parameterPath: "libraryName",
    mapper: {
        constraints: {
            MaxLength: 100,
        },
        serializedName: "libraryName",
        required: true,
        type: {
            name: "String",
        },
    },
};
exports.operationId = {
    parameterPath: "operationId",
    mapper: {
        serializedName: "operationId",
        required: true,
        type: {
            name: "String",
        },
    },
};
exports.contentType1 = {
    parameterPath: ["options", "contentType"],
    mapper: {
        defaultValue: "application/octet-stream",
        isConstant: true,
        serializedName: "Content-Type",
        type: {
            name: "String",
        },
    },
};
exports.content = {
    parameterPath: "content",
    mapper: {
        serializedName: "content",
        required: true,
        type: {
            name: "Stream",
        },
    },
};
exports.accept1 = {
    parameterPath: "accept",
    mapper: {
        defaultValue: "application/json",
        isConstant: true,
        serializedName: "Accept",
        type: {
            name: "String",
        },
    },
};
exports.comp = {
    parameterPath: "comp",
    mapper: {
        defaultValue: "appendblock",
        isConstant: true,
        serializedName: "comp",
        type: {
            name: "String",
        },
    },
};
exports.blobConditionAppendPosition = {
    parameterPath: ["options", "blobConditionAppendPosition"],
    mapper: {
        serializedName: "x-ms-blob-condition-appendpos",
        type: {
            name: "Number",
        },
    },
};
exports.linkedService = {
    parameterPath: "linkedService",
    mapper: mappers_js_1.LinkedServiceResource,
};
exports.linkedServiceName = {
    parameterPath: "linkedServiceName",
    mapper: {
        constraints: {
            Pattern: new RegExp("^[A-Za-z0-9_][^<>*#.%&:\\\\+?/]*$"),
            MaxLength: 260,
            MinLength: 1,
        },
        serializedName: "linkedServiceName",
        required: true,
        type: {
            name: "String",
        },
    },
};
exports.notebook = {
    parameterPath: "notebook",
    mapper: mappers_js_1.NotebookResource,
};
exports.notebookName = {
    parameterPath: "notebookName",
    mapper: {
        serializedName: "notebookName",
        required: true,
        type: {
            name: "String",
        },
    },
};
exports.pipeline = {
    parameterPath: "pipeline",
    mapper: mappers_js_1.PipelineResource,
};
exports.pipelineName = {
    parameterPath: "pipelineName",
    mapper: {
        constraints: {
            Pattern: new RegExp("^[A-Za-z0-9_][^<>*#.%&:\\\\+?/]*$"),
            MaxLength: 260,
            MinLength: 1,
        },
        serializedName: "pipelineName",
        required: true,
        type: {
            name: "String",
        },
    },
};
exports.parameters = {
    parameterPath: ["options", "parameters"],
    mapper: {
        serializedName: "parameters",
        type: {
            name: "Dictionary",
            value: { type: { name: "any" } },
        },
    },
};
exports.referencePipelineRunId = {
    parameterPath: ["options", "referencePipelineRunId"],
    mapper: {
        serializedName: "referencePipelineRunId",
        type: {
            name: "String",
        },
    },
};
exports.isRecovery = {
    parameterPath: ["options", "isRecovery"],
    mapper: {
        serializedName: "isRecovery",
        type: {
            name: "Boolean",
        },
    },
};
exports.startActivityName = {
    parameterPath: ["options", "startActivityName"],
    mapper: {
        serializedName: "startActivityName",
        type: {
            name: "String",
        },
    },
};
exports.filterParameters = {
    parameterPath: "filterParameters",
    mapper: mappers_js_1.RunFilterParameters,
};
exports.runId1 = {
    parameterPath: "runId",
    mapper: {
        serializedName: "runId",
        required: true,
        type: {
            name: "String",
        },
    },
};
exports.isRecursive = {
    parameterPath: ["options", "isRecursive"],
    mapper: {
        serializedName: "isRecursive",
        type: {
            name: "Boolean",
        },
    },
};
exports.sparkJobDefinition = {
    parameterPath: "sparkJobDefinition",
    mapper: mappers_js_1.SparkJobDefinitionResource,
};
exports.sparkJobDefinitionName = {
    parameterPath: "sparkJobDefinitionName",
    mapper: {
        serializedName: "sparkJobDefinitionName",
        required: true,
        type: {
            name: "String",
        },
    },
};
exports.sparkJobDefinitionAzureResource = {
    parameterPath: "sparkJobDefinitionAzureResource",
    mapper: mappers_js_1.SparkJobDefinitionResource,
};
exports.sqlPoolName = {
    parameterPath: "sqlPoolName",
    mapper: {
        serializedName: "sqlPoolName",
        required: true,
        type: {
            name: "String",
        },
    },
};
exports.sqlScript = {
    parameterPath: "sqlScript",
    mapper: mappers_js_1.SqlScriptResource,
};
exports.sqlScriptName = {
    parameterPath: "sqlScriptName",
    mapper: {
        serializedName: "sqlScriptName",
        required: true,
        type: {
            name: "String",
        },
    },
};
exports.trigger = {
    parameterPath: "trigger",
    mapper: mappers_js_1.TriggerResource,
};
exports.triggerName = {
    parameterPath: "triggerName",
    mapper: {
        constraints: {
            Pattern: new RegExp("^[A-Za-z0-9_][^<>*#.%&:\\\\+?/]*$"),
            MaxLength: 260,
            MinLength: 1,
        },
        serializedName: "triggerName",
        required: true,
        type: {
            name: "String",
        },
    },
};
//# sourceMappingURL=parameters.js.map