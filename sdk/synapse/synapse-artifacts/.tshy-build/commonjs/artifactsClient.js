"use strict";
/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.ArtifactsClient = void 0;
const tslib_1 = require("tslib");
const coreClient = tslib_1.__importStar(require("@azure/core-client"));
const coreRestPipeline = tslib_1.__importStar(require("@azure/core-rest-pipeline"));
const index_js_1 = require("./operations/index.js");
class ArtifactsClient extends coreClient.ServiceClient {
    /**
     * Initializes a new instance of the ArtifactsClient class.
     * @param credentials - Subscription credentials which uniquely identify client subscription.
     * @param endpoint - The workspace development endpoint, for example
     *                 `https://myworkspace.dev.azuresynapse.net`.
     * @param options - The parameter options
     */
    constructor(credentials, endpoint, options) {
        var _a, _b, _c;
        if (credentials === undefined) {
            throw new Error("'credentials' cannot be null");
        }
        if (endpoint === undefined) {
            throw new Error("'endpoint' cannot be null");
        }
        // Initializing default values for options
        if (!options) {
            options = {};
        }
        const defaults = {
            requestContentType: "application/json; charset=utf-8",
            credential: credentials,
        };
        const packageDetails = `azsdk-js-synapse-artifacts/1.0.0-beta.16`;
        const userAgentPrefix = options.userAgentOptions && options.userAgentOptions.userAgentPrefix
            ? `${options.userAgentOptions.userAgentPrefix} ${packageDetails}`
            : `${packageDetails}`;
        if (!options.credentialScopes) {
            options.credentialScopes = ["https://dev.azuresynapse.net/.default"];
        }
        const optionsWithDefaults = Object.assign(Object.assign(Object.assign({}, defaults), options), { userAgentOptions: {
                userAgentPrefix,
            }, endpoint: (_b = (_a = options.endpoint) !== null && _a !== void 0 ? _a : options.baseUri) !== null && _b !== void 0 ? _b : "{endpoint}" });
        super(optionsWithDefaults);
        let bearerTokenAuthenticationPolicyFound = false;
        if ((options === null || options === void 0 ? void 0 : options.pipeline) && options.pipeline.getOrderedPolicies().length > 0) {
            const pipelinePolicies = options.pipeline.getOrderedPolicies();
            bearerTokenAuthenticationPolicyFound = pipelinePolicies.some((pipelinePolicy) => pipelinePolicy.name === coreRestPipeline.bearerTokenAuthenticationPolicyName);
        }
        if (!options ||
            !options.pipeline ||
            options.pipeline.getOrderedPolicies().length === 0 ||
            !bearerTokenAuthenticationPolicyFound) {
            this.pipeline.removePolicy({
                name: coreRestPipeline.bearerTokenAuthenticationPolicyName,
            });
            this.pipeline.addPolicy(coreRestPipeline.bearerTokenAuthenticationPolicy({
                credential: credentials,
                scopes: (_c = optionsWithDefaults.credentialScopes) !== null && _c !== void 0 ? _c : `${optionsWithDefaults.endpoint}/.default`,
                challengeCallbacks: {
                    authorizeRequestOnChallenge: coreClient.authorizeRequestOnClaimChallenge,
                },
            }));
        }
        // Parameter assignments
        this.endpoint = endpoint;
        this.linkConnectionOperations = new index_js_1.LinkConnectionOperationsImpl(this);
        this.runNotebook = new index_js_1.RunNotebookImpl(this);
        this.kqlScripts = new index_js_1.KqlScriptsImpl(this);
        this.kqlScriptOperations = new index_js_1.KqlScriptOperationsImpl(this);
        this.metastore = new index_js_1.MetastoreImpl(this);
        this.sparkConfigurationOperations = new index_js_1.SparkConfigurationOperationsImpl(this);
        this.bigDataPools = new index_js_1.BigDataPoolsImpl(this);
        this.dataFlowOperations = new index_js_1.DataFlowOperationsImpl(this);
        this.dataFlowDebugSession = new index_js_1.DataFlowDebugSessionImpl(this);
        this.datasetOperations = new index_js_1.DatasetOperationsImpl(this);
        this.workspaceGitRepoManagement = new index_js_1.WorkspaceGitRepoManagementImpl(this);
        this.integrationRuntimes = new index_js_1.IntegrationRuntimesImpl(this);
        this.library = new index_js_1.LibraryImpl(this);
        this.linkedServiceOperations = new index_js_1.LinkedServiceOperationsImpl(this);
        this.notebookOperations = new index_js_1.NotebookOperationsImpl(this);
        this.notebookOperationResult = new index_js_1.NotebookOperationResultImpl(this);
        this.pipelineOperations = new index_js_1.PipelineOperationsImpl(this);
        this.pipelineRunOperations = new index_js_1.PipelineRunOperationsImpl(this);
        this.sparkJobDefinitionOperations = new index_js_1.SparkJobDefinitionOperationsImpl(this);
        this.sqlPools = new index_js_1.SqlPoolsImpl(this);
        this.sqlScriptOperations = new index_js_1.SqlScriptOperationsImpl(this);
        this.triggerOperations = new index_js_1.TriggerOperationsImpl(this);
        this.triggerRunOperations = new index_js_1.TriggerRunOperationsImpl(this);
        this.workspaceOperations = new index_js_1.WorkspaceOperationsImpl(this);
    }
}
exports.ArtifactsClient = ArtifactsClient;
//# sourceMappingURL=artifactsClient.js.map