/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */
import { tracingClient } from "../tracing.js";
import * as coreClient from "@azure/core-client";
import * as Mappers from "../models/mappers.js";
import * as Parameters from "../models/parameters.js";
// Operation Specifications
const serializer = coreClient.createSerializer(Mappers, /* isXml */ false);
const listOperationSpec = {
    path: "/bigDataPools",
    httpMethod: "GET",
    responses: {
        200: {
            bodyMapper: Mappers.BigDataPoolResourceInfoListResult,
        },
        default: {
            bodyMapper: Mappers.ErrorContract,
        },
    },
    queryParameters: [Parameters.apiVersion5],
    urlParameters: [Parameters.endpoint],
    headerParameters: [Parameters.accept],
    serializer,
};
const getOperationSpec = {
    path: "/bigDataPools/{bigDataPoolName}",
    httpMethod: "GET",
    responses: {
        200: {
            bodyMapper: Mappers.BigDataPoolResourceInfo,
        },
        default: {
            bodyMapper: Mappers.ErrorContract,
        },
    },
    queryParameters: [Parameters.apiVersion5],
    urlParameters: [Parameters.endpoint, Parameters.bigDataPoolName],
    headerParameters: [Parameters.accept],
    serializer,
};
/** Class containing BigDataPools operations. */
export class BigDataPoolsImpl {
    /**
     * Initialize a new instance of the class BigDataPools class.
     * @param client - Reference to the service client
     */
    constructor(client) {
        this.client = client;
    }
    /**
     * List Big Data Pools
     * @param options - The options parameters.
     */
    async list(options) {
        return tracingClient.withSpan("ArtifactsClient.list", options !== null && options !== void 0 ? options : {}, async (updatedOptions) => {
            return this.client.sendOperationRequest({ updatedOptions }, listOperationSpec);
        });
    }
    /**
     * Get Big Data Pool
     * @param bigDataPoolName - The Big Data Pool name
     * @param options - The options parameters.
     */
    async get(bigDataPoolName, options) {
        return tracingClient.withSpan("ArtifactsClient.get", options !== null && options !== void 0 ? options : {}, async (updatedOptions) => {
            return this.client.sendOperationRequest({ bigDataPoolName, updatedOptions }, getOperationSpec);
        });
    }
}
//# sourceMappingURL=bigDataPools.js.map