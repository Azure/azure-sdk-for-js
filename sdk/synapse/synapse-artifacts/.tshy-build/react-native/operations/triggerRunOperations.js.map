{"version":3,"file":"triggerRunOperations.js","sourceRoot":"","sources":["../../../src/operations/triggerRunOperations.ts"],"names":[],"mappings":"AAAA;;;;;;GAMG;AAEH,OAAO,EAAE,aAAa,EAAE,MAAM,eAAe,CAAC;AAE9C,OAAO,KAAK,UAAU,MAAM,oBAAoB,CAAC;AACjD,OAAO,KAAK,OAAO,MAAM,sBAAsB,CAAC;AAChD,OAAO,KAAK,UAAU,MAAM,yBAAyB,CAAC;AAUtD,2BAA2B;AAC3B,MAAM,UAAU,GAAG,UAAU,CAAC,gBAAgB,CAAC,OAAO,EAAE,WAAW,CAAC,KAAK,CAAC,CAAC;AAE3E,MAAM,iCAAiC,GAA6B;IAClE,IAAI,EAAE,mDAAmD;IACzD,UAAU,EAAE,MAAM;IAClB,SAAS,EAAE;QACT,GAAG,EAAE,EAAE;QACP,OAAO,EAAE;YACP,UAAU,EAAE,OAAO,CAAC,UAAU;SAC/B;KACF;IACD,eAAe,EAAE,CAAC,UAAU,CAAC,WAAW,CAAC;IACzC,aAAa,EAAE,CAAC,UAAU,CAAC,QAAQ,EAAE,UAAU,CAAC,MAAM,EAAE,UAAU,CAAC,WAAW,CAAC;IAC/E,gBAAgB,EAAE,CAAC,UAAU,CAAC,MAAM,CAAC;IACrC,UAAU;CACX,CAAC;AACF,MAAM,kCAAkC,GAA6B;IACnE,IAAI,EAAE,oDAAoD;IAC1D,UAAU,EAAE,MAAM;IAClB,SAAS,EAAE;QACT,GAAG,EAAE,EAAE;QACP,OAAO,EAAE;YACP,UAAU,EAAE,OAAO,CAAC,UAAU;SAC/B;KACF;IACD,eAAe,EAAE,CAAC,UAAU,CAAC,WAAW,CAAC;IACzC,aAAa,EAAE,CAAC,UAAU,CAAC,QAAQ,EAAE,UAAU,CAAC,MAAM,EAAE,UAAU,CAAC,WAAW,CAAC;IAC/E,gBAAgB,EAAE,CAAC,UAAU,CAAC,MAAM,CAAC;IACrC,UAAU;CACX,CAAC;AACF,MAAM,wCAAwC,GAA6B;IACzE,IAAI,EAAE,mBAAmB;IACzB,UAAU,EAAE,MAAM;IAClB,SAAS,EAAE;QACT,GAAG,EAAE;YACH,UAAU,EAAE,OAAO,CAAC,wBAAwB;SAC7C;QACD,OAAO,EAAE;YACP,UAAU,EAAE,OAAO,CAAC,UAAU;SAC/B;KACF;IACD,WAAW,EAAE,UAAU,CAAC,gBAAgB;IACxC,eAAe,EAAE,CAAC,UAAU,CAAC,WAAW,CAAC;IACzC,aAAa,EAAE,CAAC,UAAU,CAAC,QAAQ,CAAC;IACpC,gBAAgB,EAAE,CAAC,UAAU,CAAC,MAAM,EAAE,UAAU,CAAC,WAAW,CAAC;IAC7D,SAAS,EAAE,MAAM;IACjB,UAAU;CACX,CAAC;AAEF,wDAAwD;AACxD,MAAM,OAAO,wBAAwB;IAGnC;;;OAGG;IACH,wEAAwE;IACxE,YAAY,MAAuB;QACjC,IAAI,CAAC,MAAM,GAAG,MAAM,CAAC;IACvB,CAAC;IAED;;;;;OAKG;IACH,KAAK,CAAC,oBAAoB,CACxB,WAAmB,EACnB,KAAa,EACb,OAAsD;QAEtD,OAAO,aAAa,CAAC,QAAQ,CAC3B,sCAAsC,EACtC,OAAO,aAAP,OAAO,cAAP,OAAO,GAAI,EAAE,EACb,KAAK,EAAE,cAAc,EAAE,EAAE;YACvB,OAAO,IAAI,CAAC,MAAM,CAAC,oBAAoB,CACrC,EAAE,WAAW,EAAE,KAAK,EAAE,cAAc,EAAE,EACtC,iCAAiC,CACjB,CAAC;QACrB,CAAC,CACF,CAAC;IACJ,CAAC;IAED;;;;;OAKG;IACH,KAAK,CAAC,qBAAqB,CACzB,WAAmB,EACnB,KAAa,EACb,OAAuD;QAEvD,OAAO,aAAa,CAAC,QAAQ,CAC3B,uCAAuC,EACvC,OAAO,aAAP,OAAO,cAAP,OAAO,GAAI,EAAE,EACb,KAAK,EAAE,cAAc,EAAE,EAAE;YACvB,OAAO,IAAI,CAAC,MAAM,CAAC,oBAAoB,CACrC,EAAE,WAAW,EAAE,KAAK,EAAE,cAAc,EAAE,EACtC,kCAAkC,CAClB,CAAC;QACrB,CAAC,CACF,CAAC;IACJ,CAAC;IAED;;;;OAIG;IACH,KAAK,CAAC,2BAA2B,CAC/B,gBAAqC,EACrC,OAA6D;QAE7D,OAAO,aAAa,CAAC,QAAQ,CAC3B,6CAA6C,EAC7C,OAAO,aAAP,OAAO,cAAP,OAAO,GAAI,EAAE,EACb,KAAK,EAAE,cAAc,EAAE,EAAE;YACvB,OAAO,IAAI,CAAC,MAAM,CAAC,oBAAoB,CACrC,EAAE,gBAAgB,EAAE,cAAc,EAAE,EACpC,wCAAwC,CACiB,CAAC;QAC9D,CAAC,CACF,CAAC;IACJ,CAAC;CACF","sourcesContent":["/*\n * Copyright (c) Microsoft Corporation.\n * Licensed under the MIT License.\n *\n * Code generated by Microsoft (R) AutoRest Code Generator.\n * Changes may cause incorrect behavior and will be lost if the code is regenerated.\n */\n\nimport { tracingClient } from \"../tracing.js\";\nimport type { TriggerRunOperations } from \"../operationsInterfaces/index.js\";\nimport * as coreClient from \"@azure/core-client\";\nimport * as Mappers from \"../models/mappers.js\";\nimport * as Parameters from \"../models/parameters.js\";\nimport type { ArtifactsClient } from \"../artifactsClient.js\";\nimport type {\n  TriggerRunRerunTriggerInstanceOptionalParams,\n  TriggerRunCancelTriggerInstanceOptionalParams,\n  RunFilterParameters,\n  TriggerRunQueryTriggerRunsByWorkspaceOptionalParams,\n  TriggerRunQueryTriggerRunsByWorkspaceResponse,\n} from \"../models/index.js\";\n\n// Operation Specifications\nconst serializer = coreClient.createSerializer(Mappers, /* isXml */ false);\n\nconst rerunTriggerInstanceOperationSpec: coreClient.OperationSpec = {\n  path: \"/triggers/{triggerName}/triggerRuns/{runId}/rerun\",\n  httpMethod: \"POST\",\n  responses: {\n    200: {},\n    default: {\n      bodyMapper: Mappers.CloudError,\n    },\n  },\n  queryParameters: [Parameters.apiVersion5],\n  urlParameters: [Parameters.endpoint, Parameters.runId1, Parameters.triggerName],\n  headerParameters: [Parameters.accept],\n  serializer,\n};\nconst cancelTriggerInstanceOperationSpec: coreClient.OperationSpec = {\n  path: \"/triggers/{triggerName}/triggerRuns/{runId}/cancel\",\n  httpMethod: \"POST\",\n  responses: {\n    200: {},\n    default: {\n      bodyMapper: Mappers.CloudError,\n    },\n  },\n  queryParameters: [Parameters.apiVersion5],\n  urlParameters: [Parameters.endpoint, Parameters.runId1, Parameters.triggerName],\n  headerParameters: [Parameters.accept],\n  serializer,\n};\nconst queryTriggerRunsByWorkspaceOperationSpec: coreClient.OperationSpec = {\n  path: \"/queryTriggerRuns\",\n  httpMethod: \"POST\",\n  responses: {\n    200: {\n      bodyMapper: Mappers.TriggerRunsQueryResponse,\n    },\n    default: {\n      bodyMapper: Mappers.CloudError,\n    },\n  },\n  requestBody: Parameters.filterParameters,\n  queryParameters: [Parameters.apiVersion5],\n  urlParameters: [Parameters.endpoint],\n  headerParameters: [Parameters.accept, Parameters.contentType],\n  mediaType: \"json\",\n  serializer,\n};\n\n/** Class containing TriggerRunOperations operations. */\nexport class TriggerRunOperationsImpl implements TriggerRunOperations {\n  private readonly client: ArtifactsClient;\n\n  /**\n   * Initialize a new instance of the class TriggerRunOperations class.\n   * @param client - Reference to the service client\n   */\n  // eslint-disable-next-line @azure/azure-sdk/ts-use-interface-parameters\n  constructor(client: ArtifactsClient) {\n    this.client = client;\n  }\n\n  /**\n   * Rerun single trigger instance by runId.\n   * @param triggerName - The trigger name.\n   * @param runId - The pipeline run identifier.\n   * @param options - The options parameters.\n   */\n  async rerunTriggerInstance(\n    triggerName: string,\n    runId: string,\n    options?: TriggerRunRerunTriggerInstanceOptionalParams,\n  ): Promise<void> {\n    return tracingClient.withSpan(\n      \"ArtifactsClient.rerunTriggerInstance\",\n      options ?? {},\n      async (updatedOptions) => {\n        return this.client.sendOperationRequest(\n          { triggerName, runId, updatedOptions },\n          rerunTriggerInstanceOperationSpec,\n        ) as Promise<void>;\n      },\n    );\n  }\n\n  /**\n   * Cancel single trigger instance by runId.\n   * @param triggerName - The trigger name.\n   * @param runId - The pipeline run identifier.\n   * @param options - The options parameters.\n   */\n  async cancelTriggerInstance(\n    triggerName: string,\n    runId: string,\n    options?: TriggerRunCancelTriggerInstanceOptionalParams,\n  ): Promise<void> {\n    return tracingClient.withSpan(\n      \"ArtifactsClient.cancelTriggerInstance\",\n      options ?? {},\n      async (updatedOptions) => {\n        return this.client.sendOperationRequest(\n          { triggerName, runId, updatedOptions },\n          cancelTriggerInstanceOperationSpec,\n        ) as Promise<void>;\n      },\n    );\n  }\n\n  /**\n   * Query trigger runs.\n   * @param filterParameters - Parameters to filter the pipeline run.\n   * @param options - The options parameters.\n   */\n  async queryTriggerRunsByWorkspace(\n    filterParameters: RunFilterParameters,\n    options?: TriggerRunQueryTriggerRunsByWorkspaceOptionalParams,\n  ): Promise<TriggerRunQueryTriggerRunsByWorkspaceResponse> {\n    return tracingClient.withSpan(\n      \"ArtifactsClient.queryTriggerRunsByWorkspace\",\n      options ?? {},\n      async (updatedOptions) => {\n        return this.client.sendOperationRequest(\n          { filterParameters, updatedOptions },\n          queryTriggerRunsByWorkspaceOperationSpec,\n        ) as Promise<TriggerRunQueryTriggerRunsByWorkspaceResponse>;\n      },\n    );\n  }\n}\n"]}