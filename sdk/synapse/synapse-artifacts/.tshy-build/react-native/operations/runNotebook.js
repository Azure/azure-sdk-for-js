/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */
import { tracingClient } from "../tracing.js";
import * as coreClient from "@azure/core-client";
import * as Mappers from "../models/mappers.js";
import * as Parameters from "../models/parameters.js";
import { createHttpPoller } from "@azure/core-lro";
import { createLroSpec } from "../lroImpl.js";
// Operation Specifications
const serializer = coreClient.createSerializer(Mappers, /* isXml */ false);
const createRunOperationSpec = {
    path: "/notebooks/runs/{runId}",
    httpMethod: "PUT",
    responses: {
        200: {
            bodyMapper: Mappers.RunNotebookResponse,
            headersMapper: Mappers.RunNotebookCreateRunHeaders,
        },
        201: {
            bodyMapper: Mappers.RunNotebookResponse,
            headersMapper: Mappers.RunNotebookCreateRunHeaders,
        },
        202: {
            bodyMapper: Mappers.RunNotebookResponse,
            headersMapper: Mappers.RunNotebookCreateRunHeaders,
        },
        204: {
            bodyMapper: Mappers.RunNotebookResponse,
            headersMapper: Mappers.RunNotebookCreateRunHeaders,
        },
        default: {
            bodyMapper: Mappers.CloudError,
        },
    },
    requestBody: Parameters.runNotebookRequest,
    queryParameters: [Parameters.apiVersion1],
    urlParameters: [Parameters.endpoint, Parameters.runId],
    headerParameters: [Parameters.accept, Parameters.contentType],
    mediaType: "json",
    serializer,
};
const getStatusOperationSpec = {
    path: "/notebooks/runs/{runId}",
    httpMethod: "GET",
    responses: {
        200: {
            bodyMapper: Mappers.RunNotebookResponse,
        },
        default: {
            bodyMapper: Mappers.CloudError,
        },
    },
    queryParameters: [Parameters.apiVersion1],
    urlParameters: [Parameters.endpoint, Parameters.runId],
    headerParameters: [Parameters.accept],
    serializer,
};
const cancelRunOperationSpec = {
    path: "/notebooks/runs/{runId}/cancel",
    httpMethod: "POST",
    responses: {
        200: {
            bodyMapper: Mappers.RunNotebookResponse,
        },
        409: {
            bodyMapper: Mappers.RunNotebookResponse,
            isError: true,
        },
        default: {
            bodyMapper: Mappers.CloudError,
        },
    },
    queryParameters: [Parameters.apiVersion1],
    urlParameters: [Parameters.endpoint, Parameters.runId],
    headerParameters: [Parameters.accept],
    serializer,
};
const getSnapshotOperationSpec = {
    path: "/notebooks/runs/{runId}/snapshot",
    httpMethod: "GET",
    responses: {
        200: {
            bodyMapper: Mappers.RunNotebookSnapshotResponse,
        },
        default: {
            bodyMapper: Mappers.CloudError,
        },
    },
    queryParameters: [Parameters.apiVersion1],
    urlParameters: [Parameters.endpoint, Parameters.runId],
    headerParameters: [Parameters.accept],
    serializer,
};
/** Class containing RunNotebook operations. */
export class RunNotebookImpl {
    /**
     * Initialize a new instance of the class RunNotebook class.
     * @param client - Reference to the service client
     */
    constructor(client) {
        this.client = client;
    }
    /**
     * Run notebook
     * @param runId - Notebook run id.
     * @param runNotebookRequest - Run notebook request payload.
     * @param options - The options parameters.
     */
    async beginCreateRun(runId, runNotebookRequest, options) {
        const directSendOperation = async (args, spec) => {
            return tracingClient.withSpan("ArtifactsClient.beginCreateRun", options !== null && options !== void 0 ? options : {}, async () => {
                return this.client.sendOperationRequest(args, spec);
            });
        };
        const sendOperationFn = async (args, spec) => {
            var _a;
            let currentRawResponse = undefined;
            const providedCallback = (_a = args.options) === null || _a === void 0 ? void 0 : _a.onResponse;
            const callback = (rawResponse, flatResponse) => {
                currentRawResponse = rawResponse;
                providedCallback === null || providedCallback === void 0 ? void 0 : providedCallback(rawResponse, flatResponse);
            };
            const updatedArgs = Object.assign(Object.assign({}, args), { options: Object.assign(Object.assign({}, args.options), { onResponse: callback }) });
            const flatResponse = await directSendOperation(updatedArgs, spec);
            return {
                flatResponse,
                rawResponse: {
                    statusCode: currentRawResponse.status,
                    body: currentRawResponse.parsedBody,
                    headers: currentRawResponse.headers.toJSON(),
                },
            };
        };
        const lro = createLroSpec({
            sendOperationFn,
            args: { runId, runNotebookRequest, options },
            spec: createRunOperationSpec,
        });
        const poller = await createHttpPoller(lro, {
            restoreFrom: options === null || options === void 0 ? void 0 : options.resumeFrom,
            intervalInMs: options === null || options === void 0 ? void 0 : options.updateIntervalInMs,
        });
        await poller.poll();
        return poller;
    }
    /**
     * Run notebook
     * @param runId - Notebook run id.
     * @param runNotebookRequest - Run notebook request payload.
     * @param options - The options parameters.
     */
    async beginCreateRunAndWait(runId, runNotebookRequest, options) {
        const poller = await this.beginCreateRun(runId, runNotebookRequest, options);
        return poller.pollUntilDone();
    }
    /**
     * Get RunNotebook Status for run id.
     * @param runId - Notebook run id.
     * @param options - The options parameters.
     */
    async getStatus(runId, options) {
        return tracingClient.withSpan("ArtifactsClient.getStatus", options !== null && options !== void 0 ? options : {}, async (updatedOptions) => {
            return this.client.sendOperationRequest({ runId, updatedOptions }, getStatusOperationSpec);
        });
    }
    /**
     * Cancel notebook run.
     * @param runId - Notebook run id.
     * @param options - The options parameters.
     */
    async cancelRun(runId, options) {
        return tracingClient.withSpan("ArtifactsClient.cancelRun", options !== null && options !== void 0 ? options : {}, async (updatedOptions) => {
            return this.client.sendOperationRequest({ runId, updatedOptions }, cancelRunOperationSpec);
        });
    }
    /**
     * Get RunNotebook Snapshot for run id.
     * @param runId - Notebook run id.
     * @param options - The options parameters.
     */
    async getSnapshot(runId, options) {
        return tracingClient.withSpan("ArtifactsClient.getSnapshot", options !== null && options !== void 0 ? options : {}, async (updatedOptions) => {
            return this.client.sendOperationRequest({ runId, updatedOptions }, getSnapshotOperationSpec);
        });
    }
}
//# sourceMappingURL=runNotebook.js.map