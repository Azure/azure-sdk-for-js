{"version":3,"file":"bigDataPools.js","sourceRoot":"","sources":["../../../src/operations/bigDataPools.ts"],"names":[],"mappings":"AAAA;;;;;;GAMG;AAEH,OAAO,EAAE,aAAa,EAAE,MAAM,eAAe,CAAC;AAE9C,OAAO,KAAK,UAAU,MAAM,oBAAoB,CAAC;AACjD,OAAO,KAAK,OAAO,MAAM,sBAAsB,CAAC;AAChD,OAAO,KAAK,UAAU,MAAM,yBAAyB,CAAC;AAStD,2BAA2B;AAC3B,MAAM,UAAU,GAAG,UAAU,CAAC,gBAAgB,CAAC,OAAO,EAAE,WAAW,CAAC,KAAK,CAAC,CAAC;AAE3E,MAAM,iBAAiB,GAA6B;IAClD,IAAI,EAAE,eAAe;IACrB,UAAU,EAAE,KAAK;IACjB,SAAS,EAAE;QACT,GAAG,EAAE;YACH,UAAU,EAAE,OAAO,CAAC,iCAAiC;SACtD;QACD,OAAO,EAAE;YACP,UAAU,EAAE,OAAO,CAAC,aAAa;SAClC;KACF;IACD,eAAe,EAAE,CAAC,UAAU,CAAC,WAAW,CAAC;IACzC,aAAa,EAAE,CAAC,UAAU,CAAC,QAAQ,CAAC;IACpC,gBAAgB,EAAE,CAAC,UAAU,CAAC,MAAM,CAAC;IACrC,UAAU;CACX,CAAC;AACF,MAAM,gBAAgB,GAA6B;IACjD,IAAI,EAAE,iCAAiC;IACvC,UAAU,EAAE,KAAK;IACjB,SAAS,EAAE;QACT,GAAG,EAAE;YACH,UAAU,EAAE,OAAO,CAAC,uBAAuB;SAC5C;QACD,OAAO,EAAE;YACP,UAAU,EAAE,OAAO,CAAC,aAAa;SAClC;KACF;IACD,eAAe,EAAE,CAAC,UAAU,CAAC,WAAW,CAAC;IACzC,aAAa,EAAE,CAAC,UAAU,CAAC,QAAQ,EAAE,UAAU,CAAC,eAAe,CAAC;IAChE,gBAAgB,EAAE,CAAC,UAAU,CAAC,MAAM,CAAC;IACrC,UAAU;CACX,CAAC;AAEF,gDAAgD;AAChD,MAAM,OAAO,gBAAgB;IAG3B;;;OAGG;IACH,YAAY,MAAuB;QACjC,IAAI,CAAC,MAAM,GAAG,MAAM,CAAC;IACvB,CAAC;IAED;;;OAGG;IACH,KAAK,CAAC,IAAI,CAAC,OAAwC;QACjD,OAAO,aAAa,CAAC,QAAQ,CAAC,sBAAsB,EAAE,OAAO,aAAP,OAAO,cAAP,OAAO,GAAI,EAAE,EAAE,KAAK,EAAE,cAAc,EAAE,EAAE;YAC5F,OAAO,IAAI,CAAC,MAAM,CAAC,oBAAoB,CACrC,EAAE,cAAc,EAAE,EAClB,iBAAiB,CACmB,CAAC;QACzC,CAAC,CAAC,CAAC;IACL,CAAC;IAED;;;;OAIG;IACH,KAAK,CAAC,GAAG,CACP,eAAuB,EACvB,OAAuC;QAEvC,OAAO,aAAa,CAAC,QAAQ,CAAC,qBAAqB,EAAE,OAAO,aAAP,OAAO,cAAP,OAAO,GAAI,EAAE,EAAE,KAAK,EAAE,cAAc,EAAE,EAAE;YAC3F,OAAO,IAAI,CAAC,MAAM,CAAC,oBAAoB,CACrC,EAAE,eAAe,EAAE,cAAc,EAAE,EACnC,gBAAgB,CACmB,CAAC;QACxC,CAAC,CAAC,CAAC;IACL,CAAC;CACF","sourcesContent":["/*\n * Copyright (c) Microsoft Corporation.\n * Licensed under the MIT License.\n *\n * Code generated by Microsoft (R) AutoRest Code Generator.\n * Changes may cause incorrect behavior and will be lost if the code is regenerated.\n */\n\nimport { tracingClient } from \"../tracing.js\";\nimport type { BigDataPools } from \"../operationsInterfaces/index.js\";\nimport * as coreClient from \"@azure/core-client\";\nimport * as Mappers from \"../models/mappers.js\";\nimport * as Parameters from \"../models/parameters.js\";\nimport type { ArtifactsClient } from \"../artifactsClient.js\";\nimport type {\n  BigDataPoolsListOptionalParams,\n  BigDataPoolsListResponse,\n  BigDataPoolsGetOptionalParams,\n  BigDataPoolsGetResponse,\n} from \"../models/index.js\";\n\n// Operation Specifications\nconst serializer = coreClient.createSerializer(Mappers, /* isXml */ false);\n\nconst listOperationSpec: coreClient.OperationSpec = {\n  path: \"/bigDataPools\",\n  httpMethod: \"GET\",\n  responses: {\n    200: {\n      bodyMapper: Mappers.BigDataPoolResourceInfoListResult,\n    },\n    default: {\n      bodyMapper: Mappers.ErrorContract,\n    },\n  },\n  queryParameters: [Parameters.apiVersion5],\n  urlParameters: [Parameters.endpoint],\n  headerParameters: [Parameters.accept],\n  serializer,\n};\nconst getOperationSpec: coreClient.OperationSpec = {\n  path: \"/bigDataPools/{bigDataPoolName}\",\n  httpMethod: \"GET\",\n  responses: {\n    200: {\n      bodyMapper: Mappers.BigDataPoolResourceInfo,\n    },\n    default: {\n      bodyMapper: Mappers.ErrorContract,\n    },\n  },\n  queryParameters: [Parameters.apiVersion5],\n  urlParameters: [Parameters.endpoint, Parameters.bigDataPoolName],\n  headerParameters: [Parameters.accept],\n  serializer,\n};\n\n/** Class containing BigDataPools operations. */\nexport class BigDataPoolsImpl implements BigDataPools {\n  private readonly client: ArtifactsClient;\n\n  /**\n   * Initialize a new instance of the class BigDataPools class.\n   * @param client - Reference to the service client\n   */\n  constructor(client: ArtifactsClient) {\n    this.client = client;\n  }\n\n  /**\n   * List Big Data Pools\n   * @param options - The options parameters.\n   */\n  async list(options?: BigDataPoolsListOptionalParams): Promise<BigDataPoolsListResponse> {\n    return tracingClient.withSpan(\"ArtifactsClient.list\", options ?? {}, async (updatedOptions) => {\n      return this.client.sendOperationRequest(\n        { updatedOptions },\n        listOperationSpec,\n      ) as Promise<BigDataPoolsListResponse>;\n    });\n  }\n\n  /**\n   * Get Big Data Pool\n   * @param bigDataPoolName - The Big Data Pool name\n   * @param options - The options parameters.\n   */\n  async get(\n    bigDataPoolName: string,\n    options?: BigDataPoolsGetOptionalParams,\n  ): Promise<BigDataPoolsGetResponse> {\n    return tracingClient.withSpan(\"ArtifactsClient.get\", options ?? {}, async (updatedOptions) => {\n      return this.client.sendOperationRequest(\n        { bigDataPoolName, updatedOptions },\n        getOperationSpec,\n      ) as Promise<BigDataPoolsGetResponse>;\n    });\n  }\n}\n"]}