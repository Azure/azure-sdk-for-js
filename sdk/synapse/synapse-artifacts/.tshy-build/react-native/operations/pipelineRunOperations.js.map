{"version":3,"file":"pipelineRunOperations.js","sourceRoot":"","sources":["../../../src/operations/pipelineRunOperations.ts"],"names":[],"mappings":"AAAA;;;;;;GAMG;AAEH,OAAO,EAAE,aAAa,EAAE,MAAM,eAAe,CAAC;AAE9C,OAAO,KAAK,UAAU,MAAM,oBAAoB,CAAC;AACjD,OAAO,KAAK,OAAO,MAAM,sBAAsB,CAAC;AAChD,OAAO,KAAK,UAAU,MAAM,yBAAyB,CAAC;AAatD,2BAA2B;AAC3B,MAAM,UAAU,GAAG,UAAU,CAAC,gBAAgB,CAAC,OAAO,EAAE,WAAW,CAAC,KAAK,CAAC,CAAC;AAE3E,MAAM,yCAAyC,GAA6B;IAC1E,IAAI,EAAE,oBAAoB;IAC1B,UAAU,EAAE,MAAM;IAClB,SAAS,EAAE;QACT,GAAG,EAAE;YACH,UAAU,EAAE,OAAO,CAAC,yBAAyB;SAC9C;QACD,OAAO,EAAE;YACP,UAAU,EAAE,OAAO,CAAC,UAAU;SAC/B;KACF;IACD,WAAW,EAAE,UAAU,CAAC,gBAAgB;IACxC,eAAe,EAAE,CAAC,UAAU,CAAC,WAAW,CAAC;IACzC,aAAa,EAAE,CAAC,UAAU,CAAC,QAAQ,CAAC;IACpC,gBAAgB,EAAE,CAAC,UAAU,CAAC,MAAM,EAAE,UAAU,CAAC,WAAW,CAAC;IAC7D,SAAS,EAAE,MAAM;IACjB,UAAU;CACX,CAAC;AACF,MAAM,2BAA2B,GAA6B;IAC5D,IAAI,EAAE,uBAAuB;IAC7B,UAAU,EAAE,KAAK;IACjB,SAAS,EAAE;QACT,GAAG,EAAE;YACH,UAAU,EAAE,OAAO,CAAC,WAAW;SAChC;QACD,OAAO,EAAE;YACP,UAAU,EAAE,OAAO,CAAC,UAAU;SAC/B;KACF;IACD,eAAe,EAAE,CAAC,UAAU,CAAC,WAAW,CAAC;IACzC,aAAa,EAAE,CAAC,UAAU,CAAC,QAAQ,EAAE,UAAU,CAAC,MAAM,CAAC;IACvD,gBAAgB,EAAE,CAAC,UAAU,CAAC,MAAM,CAAC;IACrC,UAAU;CACX,CAAC;AACF,MAAM,8BAA8B,GAA6B;IAC/D,IAAI,EAAE,kEAAkE;IACxE,UAAU,EAAE,MAAM;IAClB,SAAS,EAAE;QACT,GAAG,EAAE;YACH,UAAU,EAAE,OAAO,CAAC,yBAAyB;SAC9C;QACD,OAAO,EAAE;YACP,UAAU,EAAE,OAAO,CAAC,UAAU;SAC/B;KACF;IACD,WAAW,EAAE,UAAU,CAAC,gBAAgB;IACxC,eAAe,EAAE,CAAC,UAAU,CAAC,WAAW,CAAC;IACzC,aAAa,EAAE,CAAC,UAAU,CAAC,QAAQ,EAAE,UAAU,CAAC,YAAY,EAAE,UAAU,CAAC,MAAM,CAAC;IAChF,gBAAgB,EAAE,CAAC,UAAU,CAAC,MAAM,EAAE,UAAU,CAAC,WAAW,CAAC;IAC7D,SAAS,EAAE,MAAM;IACjB,UAAU;CACX,CAAC;AACF,MAAM,8BAA8B,GAA6B;IAC/D,IAAI,EAAE,8BAA8B;IACpC,UAAU,EAAE,MAAM;IAClB,SAAS,EAAE;QACT,GAAG,EAAE,EAAE;QACP,OAAO,EAAE;YACP,UAAU,EAAE,OAAO,CAAC,UAAU;SAC/B;KACF;IACD,eAAe,EAAE,CAAC,UAAU,CAAC,WAAW,EAAE,UAAU,CAAC,WAAW,CAAC;IACjE,aAAa,EAAE,CAAC,UAAU,CAAC,QAAQ,EAAE,UAAU,CAAC,MAAM,CAAC;IACvD,gBAAgB,EAAE,CAAC,UAAU,CAAC,MAAM,CAAC;IACrC,UAAU;CACX,CAAC;AAEF,yDAAyD;AACzD,MAAM,OAAO,yBAAyB;IAGpC;;;OAGG;IACH,YAAY,MAAuB;QACjC,IAAI,CAAC,MAAM,GAAG,MAAM,CAAC;IACvB,CAAC;IAED;;;;OAIG;IACH,KAAK,CAAC,4BAA4B,CAChC,gBAAqC,EACrC,OAA+D;QAE/D,OAAO,aAAa,CAAC,QAAQ,CAC3B,8CAA8C,EAC9C,OAAO,aAAP,OAAO,cAAP,OAAO,GAAI,EAAE,EACb,KAAK,EAAE,cAAc,EAAE,EAAE;YACvB,OAAO,IAAI,CAAC,MAAM,CAAC,oBAAoB,CACrC,EAAE,gBAAgB,EAAE,cAAc,EAAE,EACpC,yCAAyC,CACkB,CAAC;QAChE,CAAC,CACF,CAAC;IACJ,CAAC;IAED;;;;OAIG;IACH,KAAK,CAAC,cAAc,CAClB,KAAa,EACb,OAAiD;QAEjD,OAAO,aAAa,CAAC,QAAQ,CAC3B,gCAAgC,EAChC,OAAO,aAAP,OAAO,cAAP,OAAO,GAAI,EAAE,EACb,KAAK,EAAE,cAAc,EAAE,EAAE;YACvB,OAAO,IAAI,CAAC,MAAM,CAAC,oBAAoB,CACrC,EAAE,KAAK,EAAE,cAAc,EAAE,EACzB,2BAA2B,CACkB,CAAC;QAClD,CAAC,CACF,CAAC;IACJ,CAAC;IAED;;;;;;OAMG;IACH,KAAK,CAAC,iBAAiB,CACrB,YAAoB,EACpB,KAAa,EACb,gBAAqC,EACrC,OAAoD;QAEpD,OAAO,aAAa,CAAC,QAAQ,CAC3B,mCAAmC,EACnC,OAAO,aAAP,OAAO,cAAP,OAAO,GAAI,EAAE,EACb,KAAK,EAAE,cAAc,EAAE,EAAE;YACvB,OAAO,IAAI,CAAC,MAAM,CAAC,oBAAoB,CACrC,EAAE,YAAY,EAAE,KAAK,EAAE,gBAAgB,EAAE,cAAc,EAAE,EACzD,8BAA8B,CACkB,CAAC;QACrD,CAAC,CACF,CAAC;IACJ,CAAC;IAED;;;;OAIG;IACH,KAAK,CAAC,iBAAiB,CACrB,KAAa,EACb,OAAoD;QAEpD,OAAO,aAAa,CAAC,QAAQ,CAC3B,mCAAmC,EACnC,OAAO,aAAP,OAAO,cAAP,OAAO,GAAI,EAAE,EACb,KAAK,EAAE,cAAc,EAAE,EAAE;YACvB,OAAO,IAAI,CAAC,MAAM,CAAC,oBAAoB,CACrC,EAAE,KAAK,EAAE,cAAc,EAAE,EACzB,8BAA8B,CACd,CAAC;QACrB,CAAC,CACF,CAAC;IACJ,CAAC;CACF","sourcesContent":["/*\n * Copyright (c) Microsoft Corporation.\n * Licensed under the MIT License.\n *\n * Code generated by Microsoft (R) AutoRest Code Generator.\n * Changes may cause incorrect behavior and will be lost if the code is regenerated.\n */\n\nimport { tracingClient } from \"../tracing.js\";\nimport type { PipelineRunOperations } from \"../operationsInterfaces/index.js\";\nimport * as coreClient from \"@azure/core-client\";\nimport * as Mappers from \"../models/mappers.js\";\nimport * as Parameters from \"../models/parameters.js\";\nimport type { ArtifactsClient } from \"../artifactsClient.js\";\nimport type {\n  RunFilterParameters,\n  PipelineRunQueryPipelineRunsByWorkspaceOptionalParams,\n  PipelineRunQueryPipelineRunsByWorkspaceResponse,\n  PipelineRunGetPipelineRunOptionalParams,\n  PipelineRunGetPipelineRunResponse,\n  PipelineRunQueryActivityRunsOptionalParams,\n  PipelineRunQueryActivityRunsResponse,\n  PipelineRunCancelPipelineRunOptionalParams,\n} from \"../models/index.js\";\n\n// Operation Specifications\nconst serializer = coreClient.createSerializer(Mappers, /* isXml */ false);\n\nconst queryPipelineRunsByWorkspaceOperationSpec: coreClient.OperationSpec = {\n  path: \"/queryPipelineRuns\",\n  httpMethod: \"POST\",\n  responses: {\n    200: {\n      bodyMapper: Mappers.PipelineRunsQueryResponse,\n    },\n    default: {\n      bodyMapper: Mappers.CloudError,\n    },\n  },\n  requestBody: Parameters.filterParameters,\n  queryParameters: [Parameters.apiVersion5],\n  urlParameters: [Parameters.endpoint],\n  headerParameters: [Parameters.accept, Parameters.contentType],\n  mediaType: \"json\",\n  serializer,\n};\nconst getPipelineRunOperationSpec: coreClient.OperationSpec = {\n  path: \"/pipelineruns/{runId}\",\n  httpMethod: \"GET\",\n  responses: {\n    200: {\n      bodyMapper: Mappers.PipelineRun,\n    },\n    default: {\n      bodyMapper: Mappers.CloudError,\n    },\n  },\n  queryParameters: [Parameters.apiVersion5],\n  urlParameters: [Parameters.endpoint, Parameters.runId1],\n  headerParameters: [Parameters.accept],\n  serializer,\n};\nconst queryActivityRunsOperationSpec: coreClient.OperationSpec = {\n  path: \"/pipelines/{pipelineName}/pipelineruns/{runId}/queryActivityruns\",\n  httpMethod: \"POST\",\n  responses: {\n    200: {\n      bodyMapper: Mappers.ActivityRunsQueryResponse,\n    },\n    default: {\n      bodyMapper: Mappers.CloudError,\n    },\n  },\n  requestBody: Parameters.filterParameters,\n  queryParameters: [Parameters.apiVersion5],\n  urlParameters: [Parameters.endpoint, Parameters.pipelineName, Parameters.runId1],\n  headerParameters: [Parameters.accept, Parameters.contentType],\n  mediaType: \"json\",\n  serializer,\n};\nconst cancelPipelineRunOperationSpec: coreClient.OperationSpec = {\n  path: \"/pipelineruns/{runId}/cancel\",\n  httpMethod: \"POST\",\n  responses: {\n    200: {},\n    default: {\n      bodyMapper: Mappers.CloudError,\n    },\n  },\n  queryParameters: [Parameters.apiVersion5, Parameters.isRecursive],\n  urlParameters: [Parameters.endpoint, Parameters.runId1],\n  headerParameters: [Parameters.accept],\n  serializer,\n};\n\n/** Class containing PipelineRunOperations operations. */\nexport class PipelineRunOperationsImpl implements PipelineRunOperations {\n  private readonly client: ArtifactsClient;\n\n  /**\n   * Initialize a new instance of the class PipelineRunOperations class.\n   * @param client - Reference to the service client\n   */\n  constructor(client: ArtifactsClient) {\n    this.client = client;\n  }\n\n  /**\n   * Query pipeline runs in the workspace based on input filter conditions.\n   * @param filterParameters - Parameters to filter the pipeline run.\n   * @param options - The options parameters.\n   */\n  async queryPipelineRunsByWorkspace(\n    filterParameters: RunFilterParameters,\n    options?: PipelineRunQueryPipelineRunsByWorkspaceOptionalParams,\n  ): Promise<PipelineRunQueryPipelineRunsByWorkspaceResponse> {\n    return tracingClient.withSpan(\n      \"ArtifactsClient.queryPipelineRunsByWorkspace\",\n      options ?? {},\n      async (updatedOptions) => {\n        return this.client.sendOperationRequest(\n          { filterParameters, updatedOptions },\n          queryPipelineRunsByWorkspaceOperationSpec,\n        ) as Promise<PipelineRunQueryPipelineRunsByWorkspaceResponse>;\n      },\n    );\n  }\n\n  /**\n   * Get a pipeline run by its run ID.\n   * @param runId - The pipeline run identifier.\n   * @param options - The options parameters.\n   */\n  async getPipelineRun(\n    runId: string,\n    options?: PipelineRunGetPipelineRunOptionalParams,\n  ): Promise<PipelineRunGetPipelineRunResponse> {\n    return tracingClient.withSpan(\n      \"ArtifactsClient.getPipelineRun\",\n      options ?? {},\n      async (updatedOptions) => {\n        return this.client.sendOperationRequest(\n          { runId, updatedOptions },\n          getPipelineRunOperationSpec,\n        ) as Promise<PipelineRunGetPipelineRunResponse>;\n      },\n    );\n  }\n\n  /**\n   * Query activity runs based on input filter conditions.\n   * @param pipelineName - The pipeline name.\n   * @param runId - The pipeline run identifier.\n   * @param filterParameters - Parameters to filter the activity runs.\n   * @param options - The options parameters.\n   */\n  async queryActivityRuns(\n    pipelineName: string,\n    runId: string,\n    filterParameters: RunFilterParameters,\n    options?: PipelineRunQueryActivityRunsOptionalParams,\n  ): Promise<PipelineRunQueryActivityRunsResponse> {\n    return tracingClient.withSpan(\n      \"ArtifactsClient.queryActivityRuns\",\n      options ?? {},\n      async (updatedOptions) => {\n        return this.client.sendOperationRequest(\n          { pipelineName, runId, filterParameters, updatedOptions },\n          queryActivityRunsOperationSpec,\n        ) as Promise<PipelineRunQueryActivityRunsResponse>;\n      },\n    );\n  }\n\n  /**\n   * Cancel a pipeline run by its run ID.\n   * @param runId - The pipeline run identifier.\n   * @param options - The options parameters.\n   */\n  async cancelPipelineRun(\n    runId: string,\n    options?: PipelineRunCancelPipelineRunOptionalParams,\n  ): Promise<void> {\n    return tracingClient.withSpan(\n      \"ArtifactsClient.cancelPipelineRun\",\n      options ?? {},\n      async (updatedOptions) => {\n        return this.client.sendOperationRequest(\n          { runId, updatedOptions },\n          cancelPipelineRunOperationSpec,\n        ) as Promise<void>;\n      },\n    );\n  }\n}\n"]}