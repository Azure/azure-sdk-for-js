/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */
import { __asyncDelegator, __asyncGenerator, __asyncValues, __await } from "tslib";
import { tracingClient } from "../tracing.js";
import { setContinuationToken } from "../pagingHelper.js";
import * as coreClient from "@azure/core-client";
import * as Mappers from "../models/mappers.js";
import * as Parameters from "../models/parameters.js";
import { createHttpPoller } from "@azure/core-lro";
import { createLroSpec } from "../lroImpl.js";
// Operation Specifications
const serializer = coreClient.createSerializer(Mappers, /* isXml */ false);
const getNotebooksByWorkspaceOperationSpec = {
    path: "/notebooks",
    httpMethod: "GET",
    responses: {
        200: {
            bodyMapper: Mappers.NotebookListResponse,
        },
        default: {
            bodyMapper: Mappers.CloudError,
        },
    },
    queryParameters: [Parameters.apiVersion5],
    urlParameters: [Parameters.endpoint],
    headerParameters: [Parameters.accept],
    serializer,
};
const getNotebookSummaryByWorkSpaceOperationSpec = {
    path: "/notebooksSummary",
    httpMethod: "GET",
    responses: {
        200: {
            bodyMapper: Mappers.NotebookListResponse,
        },
        default: {
            bodyMapper: Mappers.CloudError,
        },
    },
    queryParameters: [Parameters.apiVersion5],
    urlParameters: [Parameters.endpoint],
    headerParameters: [Parameters.accept],
    serializer,
};
const createOrUpdateNotebookOperationSpec = {
    path: "/notebooks/{notebookName}",
    httpMethod: "PUT",
    responses: {
        200: {
            bodyMapper: Mappers.NotebookResource,
        },
        201: {
            bodyMapper: Mappers.NotebookResource,
        },
        202: {
            bodyMapper: Mappers.NotebookResource,
        },
        204: {
            bodyMapper: Mappers.NotebookResource,
        },
        default: {
            bodyMapper: Mappers.CloudError,
        },
    },
    requestBody: Parameters.notebook,
    queryParameters: [Parameters.apiVersion5],
    urlParameters: [Parameters.endpoint, Parameters.notebookName],
    headerParameters: [Parameters.accept, Parameters.contentType, Parameters.ifMatch],
    mediaType: "json",
    serializer,
};
const getNotebookOperationSpec = {
    path: "/notebooks/{notebookName}",
    httpMethod: "GET",
    responses: {
        200: {
            bodyMapper: Mappers.NotebookResource,
        },
        304: {},
        default: {
            bodyMapper: Mappers.CloudError,
        },
    },
    queryParameters: [Parameters.apiVersion5],
    urlParameters: [Parameters.endpoint, Parameters.notebookName],
    headerParameters: [Parameters.accept, Parameters.ifNoneMatch],
    serializer,
};
const deleteNotebookOperationSpec = {
    path: "/notebooks/{notebookName}",
    httpMethod: "DELETE",
    responses: {
        200: {},
        201: {},
        202: {},
        204: {},
        default: {
            bodyMapper: Mappers.CloudError,
        },
    },
    queryParameters: [Parameters.apiVersion5],
    urlParameters: [Parameters.endpoint, Parameters.notebookName],
    headerParameters: [Parameters.accept],
    serializer,
};
const renameNotebookOperationSpec = {
    path: "/notebooks/{notebookName}/rename",
    httpMethod: "POST",
    responses: {
        200: {},
        201: {},
        202: {},
        204: {},
        default: {
            bodyMapper: Mappers.CloudError,
        },
    },
    requestBody: Parameters.request,
    queryParameters: [Parameters.apiVersion5],
    urlParameters: [Parameters.endpoint, Parameters.notebookName],
    headerParameters: [Parameters.accept, Parameters.contentType],
    mediaType: "json",
    serializer,
};
const getNotebooksByWorkspaceNextOperationSpec = {
    path: "{nextLink}",
    httpMethod: "GET",
    responses: {
        200: {
            bodyMapper: Mappers.NotebookListResponse,
        },
        default: {
            bodyMapper: Mappers.CloudError,
        },
    },
    urlParameters: [Parameters.endpoint, Parameters.nextLink],
    headerParameters: [Parameters.accept],
    serializer,
};
const getNotebookSummaryByWorkSpaceNextOperationSpec = {
    path: "{nextLink}",
    httpMethod: "GET",
    responses: {
        200: {
            bodyMapper: Mappers.NotebookListResponse,
        },
        default: {
            bodyMapper: Mappers.CloudError,
        },
    },
    urlParameters: [Parameters.endpoint, Parameters.nextLink],
    headerParameters: [Parameters.accept],
    serializer,
};
/** Class containing NotebookOperations operations. */
export class NotebookOperationsImpl {
    /**
     * Initialize a new instance of the class NotebookOperations class.
     * @param client - Reference to the service client
     */
    constructor(client) {
        this.client = client;
    }
    /**
     * Lists Notebooks.
     * @param options - The options parameters.
     */
    listNotebooksByWorkspace(options) {
        const iter = this.getNotebooksByWorkspacePagingAll(options);
        return {
            next() {
                return iter.next();
            },
            [Symbol.asyncIterator]() {
                return this;
            },
            byPage: (settings) => {
                if (settings === null || settings === void 0 ? void 0 : settings.maxPageSize) {
                    throw new Error("maxPageSize is not supported by this operation.");
                }
                return this.getNotebooksByWorkspacePagingPage(options, settings);
            },
        };
    }
    getNotebooksByWorkspacePagingPage(options, settings) {
        return __asyncGenerator(this, arguments, function* getNotebooksByWorkspacePagingPage_1() {
            let result;
            let continuationToken = settings === null || settings === void 0 ? void 0 : settings.continuationToken;
            if (!continuationToken) {
                result = yield __await(this._getNotebooksByWorkspace(options));
                const page = result.value || [];
                continuationToken = result.nextLink;
                setContinuationToken(page, continuationToken);
                yield yield __await(page);
            }
            while (continuationToken) {
                result = yield __await(this._getNotebooksByWorkspaceNext(continuationToken, options));
                continuationToken = result.nextLink;
                const page = result.value || [];
                setContinuationToken(page, continuationToken);
                yield yield __await(page);
            }
        });
    }
    getNotebooksByWorkspacePagingAll(options) {
        return __asyncGenerator(this, arguments, function* getNotebooksByWorkspacePagingAll_1() {
            var _a, e_1, _b, _c;
            try {
                for (var _d = true, _e = __asyncValues(this.getNotebooksByWorkspacePagingPage(options)), _f; _f = yield __await(_e.next()), _a = _f.done, !_a; _d = true) {
                    _c = _f.value;
                    _d = false;
                    const page = _c;
                    yield __await(yield* __asyncDelegator(__asyncValues(page)));
                }
            }
            catch (e_1_1) { e_1 = { error: e_1_1 }; }
            finally {
                try {
                    if (!_d && !_a && (_b = _e.return)) yield __await(_b.call(_e));
                }
                finally { if (e_1) throw e_1.error; }
            }
        });
    }
    /**
     * Lists a summary of Notebooks.
     * @param options - The options parameters.
     */
    listNotebookSummaryByWorkSpace(options) {
        const iter = this.getNotebookSummaryByWorkSpacePagingAll(options);
        return {
            next() {
                return iter.next();
            },
            [Symbol.asyncIterator]() {
                return this;
            },
            byPage: (settings) => {
                if (settings === null || settings === void 0 ? void 0 : settings.maxPageSize) {
                    throw new Error("maxPageSize is not supported by this operation.");
                }
                return this.getNotebookSummaryByWorkSpacePagingPage(options, settings);
            },
        };
    }
    getNotebookSummaryByWorkSpacePagingPage(options, settings) {
        return __asyncGenerator(this, arguments, function* getNotebookSummaryByWorkSpacePagingPage_1() {
            let result;
            let continuationToken = settings === null || settings === void 0 ? void 0 : settings.continuationToken;
            if (!continuationToken) {
                result = yield __await(this._getNotebookSummaryByWorkSpace(options));
                const page = result.value || [];
                continuationToken = result.nextLink;
                setContinuationToken(page, continuationToken);
                yield yield __await(page);
            }
            while (continuationToken) {
                result = yield __await(this._getNotebookSummaryByWorkSpaceNext(continuationToken, options));
                continuationToken = result.nextLink;
                const page = result.value || [];
                setContinuationToken(page, continuationToken);
                yield yield __await(page);
            }
        });
    }
    getNotebookSummaryByWorkSpacePagingAll(options) {
        return __asyncGenerator(this, arguments, function* getNotebookSummaryByWorkSpacePagingAll_1() {
            var _a, e_2, _b, _c;
            try {
                for (var _d = true, _e = __asyncValues(this.getNotebookSummaryByWorkSpacePagingPage(options)), _f; _f = yield __await(_e.next()), _a = _f.done, !_a; _d = true) {
                    _c = _f.value;
                    _d = false;
                    const page = _c;
                    yield __await(yield* __asyncDelegator(__asyncValues(page)));
                }
            }
            catch (e_2_1) { e_2 = { error: e_2_1 }; }
            finally {
                try {
                    if (!_d && !_a && (_b = _e.return)) yield __await(_b.call(_e));
                }
                finally { if (e_2) throw e_2.error; }
            }
        });
    }
    /**
     * Lists Notebooks.
     * @param options - The options parameters.
     */
    async _getNotebooksByWorkspace(options) {
        return tracingClient.withSpan("ArtifactsClient._getNotebooksByWorkspace", options !== null && options !== void 0 ? options : {}, async (updatedOptions) => {
            return this.client.sendOperationRequest({ updatedOptions }, getNotebooksByWorkspaceOperationSpec);
        });
    }
    /**
     * Lists a summary of Notebooks.
     * @param options - The options parameters.
     */
    async _getNotebookSummaryByWorkSpace(options) {
        return tracingClient.withSpan("ArtifactsClient._getNotebookSummaryByWorkSpace", options !== null && options !== void 0 ? options : {}, async (updatedOptions) => {
            return this.client.sendOperationRequest({ updatedOptions }, getNotebookSummaryByWorkSpaceOperationSpec);
        });
    }
    /**
     * Creates or updates a Note Book.
     * @param notebookName - - The notebook name.
     * @param notebook - - Note book resource definition.
     * @param options - The options parameters.
     */
    async beginCreateOrUpdateNotebook(notebookName, notebook, options) {
        const directSendOperation = async (args, spec) => {
            return tracingClient.withSpan("ArtifactsClient.beginCreateOrUpdateNotebook", options !== null && options !== void 0 ? options : {}, async () => {
                return this.client.sendOperationRequest(args, spec);
            });
        };
        const sendOperationFn = async (args, spec) => {
            var _a;
            let currentRawResponse = undefined;
            const providedCallback = (_a = args.options) === null || _a === void 0 ? void 0 : _a.onResponse;
            const callback = (rawResponse, flatResponse) => {
                currentRawResponse = rawResponse;
                providedCallback === null || providedCallback === void 0 ? void 0 : providedCallback(rawResponse, flatResponse);
            };
            const updatedArgs = Object.assign(Object.assign({}, args), { options: Object.assign(Object.assign({}, args.options), { onResponse: callback }) });
            const flatResponse = await directSendOperation(updatedArgs, spec);
            return {
                flatResponse,
                rawResponse: {
                    statusCode: currentRawResponse.status,
                    body: currentRawResponse.parsedBody,
                    headers: currentRawResponse.headers.toJSON(),
                },
            };
        };
        const lro = createLroSpec({
            sendOperationFn,
            args: { notebookName, notebook, options },
            spec: createOrUpdateNotebookOperationSpec,
        });
        const poller = await createHttpPoller(lro, {
            restoreFrom: options === null || options === void 0 ? void 0 : options.resumeFrom,
            intervalInMs: options === null || options === void 0 ? void 0 : options.updateIntervalInMs,
        });
        await poller.poll();
        return poller;
    }
    /**
     * Creates or updates a Note Book.
     * @param notebookName - The notebook name.
     * @param notebook - Note book resource definition.
     * @param options - The options parameters.
     */
    async beginCreateOrUpdateNotebookAndWait(notebookName, notebook, options) {
        const poller = await this.beginCreateOrUpdateNotebook(notebookName, notebook, options);
        return poller.pollUntilDone();
    }
    /**
     * Gets a Note Book.
     * @param notebookName - The notebook name.
     * @param options - The options parameters.
     */
    async getNotebook(notebookName, options) {
        return tracingClient.withSpan("ArtifactsClient.getNotebook", options !== null && options !== void 0 ? options : {}, async (updatedOptions) => {
            return this.client.sendOperationRequest({ notebookName, updatedOptions }, getNotebookOperationSpec);
        });
    }
    /**
     * Deletes a Note book.
     * @param notebookName - The notebook name.
     * @param options - The options parameters.
     */
    async beginDeleteNotebook(notebookName, options) {
        const directSendOperation = async (args, spec) => {
            return tracingClient.withSpan("ArtifactsClient.beginDeleteNotebook", options !== null && options !== void 0 ? options : {}, async () => {
                return this.client.sendOperationRequest(args, spec);
            });
        };
        const sendOperationFn = async (args, spec) => {
            var _a;
            let currentRawResponse = undefined;
            const providedCallback = (_a = args.options) === null || _a === void 0 ? void 0 : _a.onResponse;
            const callback = (rawResponse, flatResponse) => {
                currentRawResponse = rawResponse;
                providedCallback === null || providedCallback === void 0 ? void 0 : providedCallback(rawResponse, flatResponse);
            };
            const updatedArgs = Object.assign(Object.assign({}, args), { options: Object.assign(Object.assign({}, args.options), { onResponse: callback }) });
            const flatResponse = await directSendOperation(updatedArgs, spec);
            return {
                flatResponse,
                rawResponse: {
                    statusCode: currentRawResponse.status,
                    body: currentRawResponse.parsedBody,
                    headers: currentRawResponse.headers.toJSON(),
                },
            };
        };
        const lro = createLroSpec({
            sendOperationFn,
            args: { notebookName, options },
            spec: deleteNotebookOperationSpec,
        });
        const poller = await createHttpPoller(lro, {
            restoreFrom: options === null || options === void 0 ? void 0 : options.resumeFrom,
            intervalInMs: options === null || options === void 0 ? void 0 : options.updateIntervalInMs,
        });
        await poller.poll();
        return poller;
    }
    /**
     * Deletes a Note book.
     * @param notebookName - The notebook name.
     * @param options - The options parameters.
     */
    async beginDeleteNotebookAndWait(notebookName, options) {
        const poller = await this.beginDeleteNotebook(notebookName, options);
        return poller.pollUntilDone();
    }
    /**
     * Renames a notebook.
     * @param notebookName - The notebook name.
     * @param request - proposed new name.
     * @param options - The options parameters.
     */
    async beginRenameNotebook(notebookName, request, options) {
        const directSendOperation = async (args, spec) => {
            return tracingClient.withSpan("ArtifactsClient.beginRenameNotebook", options !== null && options !== void 0 ? options : {}, async () => {
                return this.client.sendOperationRequest(args, spec);
            });
        };
        const sendOperationFn = async (args, spec) => {
            var _a;
            let currentRawResponse = undefined;
            const providedCallback = (_a = args.options) === null || _a === void 0 ? void 0 : _a.onResponse;
            const callback = (rawResponse, flatResponse) => {
                currentRawResponse = rawResponse;
                providedCallback === null || providedCallback === void 0 ? void 0 : providedCallback(rawResponse, flatResponse);
            };
            const updatedArgs = Object.assign(Object.assign({}, args), { options: Object.assign(Object.assign({}, args.options), { onResponse: callback }) });
            const flatResponse = await directSendOperation(updatedArgs, spec);
            return {
                flatResponse,
                rawResponse: {
                    statusCode: currentRawResponse.status,
                    body: currentRawResponse.parsedBody,
                    headers: currentRawResponse.headers.toJSON(),
                },
            };
        };
        const lro = createLroSpec({
            sendOperationFn,
            args: { notebookName, request, options },
            spec: renameNotebookOperationSpec,
        });
        const poller = await createHttpPoller(lro, {
            restoreFrom: options === null || options === void 0 ? void 0 : options.resumeFrom,
            intervalInMs: options === null || options === void 0 ? void 0 : options.updateIntervalInMs,
        });
        await poller.poll();
        return poller;
    }
    /**
     * Renames a notebook.
     * @param notebookName - The notebook name.
     * @param request - proposed new name.
     * @param options - The options parameters.
     */
    async beginRenameNotebookAndWait(notebookName, request, options) {
        const poller = await this.beginRenameNotebook(notebookName, request, options);
        return poller.pollUntilDone();
    }
    /**
     * GetNotebooksByWorkspaceNext
     * @param nextLink - The nextLink from the previous successful call to the GetNotebooksByWorkspace
     *                 method.
     * @param options - The options parameters.
     */
    async _getNotebooksByWorkspaceNext(nextLink, options) {
        return tracingClient.withSpan("ArtifactsClient._getNotebooksByWorkspaceNext", options !== null && options !== void 0 ? options : {}, async (updatedOptions) => {
            return this.client.sendOperationRequest({ nextLink, updatedOptions }, getNotebooksByWorkspaceNextOperationSpec);
        });
    }
    /**
     * GetNotebookSummaryByWorkSpaceNext
     * @param nextLink - The nextLink from the previous successful call to the GetNotebookSummaryByWorkSpace
     *                 method.
     * @param options - The options parameters.
     */
    async _getNotebookSummaryByWorkSpaceNext(nextLink, options) {
        return tracingClient.withSpan("ArtifactsClient._getNotebookSummaryByWorkSpaceNext", options !== null && options !== void 0 ? options : {}, async (updatedOptions) => {
            return this.client.sendOperationRequest({ nextLink, updatedOptions }, getNotebookSummaryByWorkSpaceNextOperationSpec);
        });
    }
}
//# sourceMappingURL=notebookOperations.js.map