{"version":3,"file":"workspaceGitRepoManagement.js","sourceRoot":"","sources":["../../../src/operations/workspaceGitRepoManagement.ts"],"names":[],"mappings":"AAAA;;;;;;GAMG;AAEH,OAAO,EAAE,aAAa,EAAE,MAAM,eAAe,CAAC;AAE9C,OAAO,KAAK,UAAU,MAAM,oBAAoB,CAAC;AACjD,OAAO,KAAK,OAAO,MAAM,sBAAsB,CAAC;AAChD,OAAO,KAAK,UAAU,MAAM,yBAAyB,CAAC;AAQtD,2BAA2B;AAC3B,MAAM,UAAU,GAAG,UAAU,CAAC,gBAAgB,CAAC,OAAO,EAAE,WAAW,CAAC,KAAK,CAAC,CAAC;AAE3E,MAAM,iCAAiC,GAA6B;IAClE,IAAI,EAAE,uBAAuB;IAC7B,UAAU,EAAE,MAAM;IAClB,SAAS,EAAE;QACT,GAAG,EAAE;YACH,UAAU,EAAE,OAAO,CAAC,yBAAyB;SAC9C;KACF;IACD,WAAW,EAAE,UAAU,CAAC,wBAAwB;IAChD,eAAe,EAAE,CAAC,UAAU,CAAC,WAAW,CAAC;IACzC,aAAa,EAAE,CAAC,UAAU,CAAC,QAAQ,CAAC;IACpC,gBAAgB,EAAE,CAAC,UAAU,CAAC,MAAM,EAAE,UAAU,CAAC,WAAW,EAAE,UAAU,CAAC,eAAe,CAAC;IACzF,SAAS,EAAE,MAAM;IACjB,UAAU;CACX,CAAC;AAEF,8DAA8D;AAC9D,MAAM,OAAO,8BAA8B;IAGzC;;;OAGG;IACH,wEAAwE;IACxE,YAAY,MAAuB;QACjC,IAAI,CAAC,MAAM,GAAG,MAAM,CAAC;IACvB,CAAC;IAED;;;;OAIG;IACH,KAAK,CAAC,oBAAoB,CACxB,wBAAkD,EAClD,OAAsE;QAEtE,OAAO,aAAa,CAAC,QAAQ,CAC3B,sCAAsC,EACtC,OAAO,aAAP,OAAO,cAAP,OAAO,GAAI,EAAE,EACb,KAAK,EAAE,cAAc,EAAE,EAAE;YACvB,OAAO,IAAI,CAAC,MAAM,CAAC,oBAAoB,CACrC,EAAE,wBAAwB,EAAE,cAAc,EAAE,EAC5C,iCAAiC,CACiC,CAAC;QACvE,CAAC,CACF,CAAC;IACJ,CAAC;CACF","sourcesContent":["/*\n * Copyright (c) Microsoft Corporation.\n * Licensed under the MIT License.\n *\n * Code generated by Microsoft (R) AutoRest Code Generator.\n * Changes may cause incorrect behavior and will be lost if the code is regenerated.\n */\n\nimport { tracingClient } from \"../tracing.js\";\nimport type { WorkspaceGitRepoManagement } from \"../operationsInterfaces/index.js\";\nimport * as coreClient from \"@azure/core-client\";\nimport * as Mappers from \"../models/mappers.js\";\nimport * as Parameters from \"../models/parameters.js\";\nimport type { ArtifactsClient } from \"../artifactsClient.js\";\nimport type {\n  GitHubAccessTokenRequest,\n  WorkspaceGitRepoManagementGetGitHubAccessTokenOptionalParams,\n  WorkspaceGitRepoManagementGetGitHubAccessTokenResponse,\n} from \"../models/index.js\";\n\n// Operation Specifications\nconst serializer = coreClient.createSerializer(Mappers, /* isXml */ false);\n\nconst getGitHubAccessTokenOperationSpec: coreClient.OperationSpec = {\n  path: \"/getGitHubAccessToken\",\n  httpMethod: \"POST\",\n  responses: {\n    200: {\n      bodyMapper: Mappers.GitHubAccessTokenResponse,\n    },\n  },\n  requestBody: Parameters.gitHubAccessTokenRequest,\n  queryParameters: [Parameters.apiVersion5],\n  urlParameters: [Parameters.endpoint],\n  headerParameters: [Parameters.accept, Parameters.contentType, Parameters.clientRequestId],\n  mediaType: \"json\",\n  serializer,\n};\n\n/** Class containing WorkspaceGitRepoManagement operations. */\nexport class WorkspaceGitRepoManagementImpl implements WorkspaceGitRepoManagement {\n  private readonly client: ArtifactsClient;\n\n  /**\n   * Initialize a new instance of the class WorkspaceGitRepoManagement class.\n   * @param client - Reference to the service client\n   */\n  // eslint-disable-next-line @azure/azure-sdk/ts-use-interface-parameters\n  constructor(client: ArtifactsClient) {\n    this.client = client;\n  }\n\n  /**\n   * Get the GitHub access token.\n   * @param gitHubAccessTokenRequest - The GitHub access token request\n   * @param options - The options parameters.\n   */\n  async getGitHubAccessToken(\n    gitHubAccessTokenRequest: GitHubAccessTokenRequest,\n    options?: WorkspaceGitRepoManagementGetGitHubAccessTokenOptionalParams,\n  ): Promise<WorkspaceGitRepoManagementGetGitHubAccessTokenResponse> {\n    return tracingClient.withSpan(\n      \"ArtifactsClient.getGitHubAccessToken\",\n      options ?? {},\n      async (updatedOptions) => {\n        return this.client.sendOperationRequest(\n          { gitHubAccessTokenRequest, updatedOptions },\n          getGitHubAccessTokenOperationSpec,\n        ) as Promise<WorkspaceGitRepoManagementGetGitHubAccessTokenResponse>;\n      },\n    );\n  }\n}\n"]}