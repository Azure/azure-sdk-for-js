{"version":3,"file":"runNotebook.js","sourceRoot":"","sources":["../../../src/operations/runNotebook.ts"],"names":[],"mappings":"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","sourcesContent":["/*\n * Copyright (c) Microsoft Corporation.\n * Licensed under the MIT License.\n *\n * Code generated by Microsoft (R) AutoRest Code Generator.\n * Changes may cause incorrect behavior and will be lost if the code is regenerated.\n */\n\nimport { tracingClient } from \"../tracing.js\";\nimport type { RunNotebook } from \"../operationsInterfaces/index.js\";\nimport * as coreClient from \"@azure/core-client\";\nimport * as Mappers from \"../models/mappers.js\";\nimport * as Parameters from \"../models/parameters.js\";\nimport type { ArtifactsClient } from \"../artifactsClient.js\";\nimport type { SimplePollerLike, OperationState } from \"@azure/core-lro\";\nimport { createHttpPoller } from \"@azure/core-lro\";\nimport { createLroSpec } from \"../lroImpl.js\";\nimport type {\n  RunNotebookRequest,\n  RunNotebookCreateRunOptionalParams,\n  RunNotebookCreateRunResponse,\n  RunNotebookGetStatusOptionalParams,\n  RunNotebookGetStatusResponse,\n  RunNotebookCancelRunOptionalParams,\n  RunNotebookCancelRunResponse,\n  RunNotebookGetSnapshotOptionalParams,\n  RunNotebookGetSnapshotResponse,\n} from \"../models/index.js\";\nimport type { RawHttpHeaders } from \"@azure/core-rest-pipeline\";\n\n// Operation Specifications\nconst serializer = coreClient.createSerializer(Mappers, /* isXml */ false);\n\nconst createRunOperationSpec: coreClient.OperationSpec = {\n  path: \"/notebooks/runs/{runId}\",\n  httpMethod: \"PUT\",\n  responses: {\n    200: {\n      bodyMapper: Mappers.RunNotebookResponse,\n      headersMapper: Mappers.RunNotebookCreateRunHeaders,\n    },\n    201: {\n      bodyMapper: Mappers.RunNotebookResponse,\n      headersMapper: Mappers.RunNotebookCreateRunHeaders,\n    },\n    202: {\n      bodyMapper: Mappers.RunNotebookResponse,\n      headersMapper: Mappers.RunNotebookCreateRunHeaders,\n    },\n    204: {\n      bodyMapper: Mappers.RunNotebookResponse,\n      headersMapper: Mappers.RunNotebookCreateRunHeaders,\n    },\n    default: {\n      bodyMapper: Mappers.CloudError,\n    },\n  },\n  requestBody: Parameters.runNotebookRequest,\n  queryParameters: [Parameters.apiVersion1],\n  urlParameters: [Parameters.endpoint, Parameters.runId],\n  headerParameters: [Parameters.accept, Parameters.contentType],\n  mediaType: \"json\",\n  serializer,\n};\nconst getStatusOperationSpec: coreClient.OperationSpec = {\n  path: \"/notebooks/runs/{runId}\",\n  httpMethod: \"GET\",\n  responses: {\n    200: {\n      bodyMapper: Mappers.RunNotebookResponse,\n    },\n    default: {\n      bodyMapper: Mappers.CloudError,\n    },\n  },\n  queryParameters: [Parameters.apiVersion1],\n  urlParameters: [Parameters.endpoint, Parameters.runId],\n  headerParameters: [Parameters.accept],\n  serializer,\n};\nconst cancelRunOperationSpec: coreClient.OperationSpec = {\n  path: \"/notebooks/runs/{runId}/cancel\",\n  httpMethod: \"POST\",\n  responses: {\n    200: {\n      bodyMapper: Mappers.RunNotebookResponse,\n    },\n    409: {\n      bodyMapper: Mappers.RunNotebookResponse,\n      isError: true,\n    },\n    default: {\n      bodyMapper: Mappers.CloudError,\n    },\n  },\n  queryParameters: [Parameters.apiVersion1],\n  urlParameters: [Parameters.endpoint, Parameters.runId],\n  headerParameters: [Parameters.accept],\n  serializer,\n};\nconst getSnapshotOperationSpec: coreClient.OperationSpec = {\n  path: \"/notebooks/runs/{runId}/snapshot\",\n  httpMethod: \"GET\",\n  responses: {\n    200: {\n      bodyMapper: Mappers.RunNotebookSnapshotResponse,\n    },\n    default: {\n      bodyMapper: Mappers.CloudError,\n    },\n  },\n  queryParameters: [Parameters.apiVersion1],\n  urlParameters: [Parameters.endpoint, Parameters.runId],\n  headerParameters: [Parameters.accept],\n  serializer,\n};\n\n/** Class containing RunNotebook operations. */\nexport class RunNotebookImpl implements RunNotebook {\n  private readonly client: ArtifactsClient;\n\n  /**\n   * Initialize a new instance of the class RunNotebook class.\n   * @param client - Reference to the service client\n   */\n  constructor(client: ArtifactsClient) {\n    this.client = client;\n  }\n\n  /**\n   * Run notebook\n   * @param runId - Notebook run id.\n   * @param runNotebookRequest - Run notebook request payload.\n   * @param options - The options parameters.\n   */\n  async beginCreateRun(\n    runId: string,\n    runNotebookRequest: RunNotebookRequest,\n    options?: RunNotebookCreateRunOptionalParams,\n  ): Promise<\n    SimplePollerLike<OperationState<RunNotebookCreateRunResponse>, RunNotebookCreateRunResponse>\n  > {\n    const directSendOperation = async (\n      args: coreClient.OperationArguments,\n      spec: coreClient.OperationSpec,\n    ): Promise<RunNotebookCreateRunResponse> => {\n      return tracingClient.withSpan(\"ArtifactsClient.beginCreateRun\", options ?? {}, async () => {\n        return this.client.sendOperationRequest(\n          args,\n          spec,\n        ) as Promise<RunNotebookCreateRunResponse>;\n      });\n    };\n    const sendOperationFn = async (\n      args: coreClient.OperationArguments,\n      spec: coreClient.OperationSpec,\n    ): Promise<{\n      flatResponse: RunNotebookCreateRunResponse;\n      rawResponse: {\n        statusCode: number;\n        body: any;\n        headers: RawHttpHeaders;\n      };\n    }> => {\n      let currentRawResponse: coreClient.FullOperationResponse | undefined = undefined;\n      const providedCallback = args.options?.onResponse;\n      const callback: coreClient.RawResponseCallback = (\n        rawResponse: coreClient.FullOperationResponse,\n        flatResponse: unknown,\n      ) => {\n        currentRawResponse = rawResponse;\n        providedCallback?.(rawResponse, flatResponse);\n      };\n      const updatedArgs = {\n        ...args,\n        options: {\n          ...args.options,\n          onResponse: callback,\n        },\n      };\n      const flatResponse = await directSendOperation(updatedArgs, spec);\n      return {\n        flatResponse,\n        rawResponse: {\n          statusCode: currentRawResponse!.status,\n          body: currentRawResponse!.parsedBody,\n          headers: currentRawResponse!.headers.toJSON(),\n        },\n      };\n    };\n\n    const lro = createLroSpec({\n      sendOperationFn,\n      args: { runId, runNotebookRequest, options },\n      spec: createRunOperationSpec,\n    });\n    const poller = await createHttpPoller<\n      RunNotebookCreateRunResponse,\n      OperationState<RunNotebookCreateRunResponse>\n    >(lro, {\n      restoreFrom: options?.resumeFrom,\n      intervalInMs: options?.updateIntervalInMs,\n    });\n    await poller.poll();\n    return poller;\n  }\n\n  /**\n   * Run notebook\n   * @param runId - Notebook run id.\n   * @param runNotebookRequest - Run notebook request payload.\n   * @param options - The options parameters.\n   */\n  async beginCreateRunAndWait(\n    runId: string,\n    runNotebookRequest: RunNotebookRequest,\n    options?: RunNotebookCreateRunOptionalParams,\n  ): Promise<RunNotebookCreateRunResponse> {\n    const poller = await this.beginCreateRun(runId, runNotebookRequest, options);\n    return poller.pollUntilDone();\n  }\n\n  /**\n   * Get RunNotebook Status for run id.\n   * @param runId - Notebook run id.\n   * @param options - The options parameters.\n   */\n  async getStatus(\n    runId: string,\n    options?: RunNotebookGetStatusOptionalParams,\n  ): Promise<RunNotebookGetStatusResponse> {\n    return tracingClient.withSpan(\n      \"ArtifactsClient.getStatus\",\n      options ?? {},\n      async (updatedOptions) => {\n        return this.client.sendOperationRequest(\n          { runId, updatedOptions },\n          getStatusOperationSpec,\n        ) as Promise<RunNotebookGetStatusResponse>;\n      },\n    );\n  }\n\n  /**\n   * Cancel notebook run.\n   * @param runId - Notebook run id.\n   * @param options - The options parameters.\n   */\n  async cancelRun(\n    runId: string,\n    options?: RunNotebookCancelRunOptionalParams,\n  ): Promise<RunNotebookCancelRunResponse> {\n    return tracingClient.withSpan(\n      \"ArtifactsClient.cancelRun\",\n      options ?? {},\n      async (updatedOptions) => {\n        return this.client.sendOperationRequest(\n          { runId, updatedOptions },\n          cancelRunOperationSpec,\n        ) as Promise<RunNotebookCancelRunResponse>;\n      },\n    );\n  }\n\n  /**\n   * Get RunNotebook Snapshot for run id.\n   * @param runId - Notebook run id.\n   * @param options - The options parameters.\n   */\n  async getSnapshot(\n    runId: string,\n    options?: RunNotebookGetSnapshotOptionalParams,\n  ): Promise<RunNotebookGetSnapshotResponse> {\n    return tracingClient.withSpan(\n      \"ArtifactsClient.getSnapshot\",\n      options ?? {},\n      async (updatedOptions) => {\n        return this.client.sendOperationRequest(\n          { runId, updatedOptions },\n          getSnapshotOperationSpec,\n        ) as Promise<RunNotebookGetSnapshotResponse>;\n      },\n    );\n  }\n}\n"]}