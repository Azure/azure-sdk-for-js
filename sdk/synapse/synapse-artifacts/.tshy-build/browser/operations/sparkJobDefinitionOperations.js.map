{"version":3,"file":"sparkJobDefinitionOperations.js","sourceRoot":"","sources":["../../../src/operations/sparkJobDefinitionOperations.ts"],"names":[],"mappings":"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","sourcesContent":["/*\n * Copyright (c) Microsoft Corporation.\n * Licensed under the MIT License.\n *\n * Code generated by Microsoft (R) AutoRest Code Generator.\n * Changes may cause incorrect behavior and will be lost if the code is regenerated.\n */\n\nimport { tracingClient } from \"../tracing.js\";\nimport type { PagedAsyncIterableIterator, PageSettings } from \"@azure/core-paging\";\nimport { setContinuationToken } from \"../pagingHelper.js\";\nimport type { SparkJobDefinitionOperations } from \"../operationsInterfaces/index.js\";\nimport * as coreClient from \"@azure/core-client\";\nimport * as Mappers from \"../models/mappers.js\";\nimport * as Parameters from \"../models/parameters.js\";\nimport type { ArtifactsClient } from \"../artifactsClient.js\";\nimport type { SimplePollerLike, OperationState } from \"@azure/core-lro\";\nimport { createHttpPoller } from \"@azure/core-lro\";\nimport { createLroSpec } from \"../lroImpl.js\";\nimport type {\n  SparkJobDefinitionResource,\n  SparkJobDefinitionGetSparkJobDefinitionsByWorkspaceNextOptionalParams,\n  SparkJobDefinitionGetSparkJobDefinitionsByWorkspaceOptionalParams,\n  SparkJobDefinitionGetSparkJobDefinitionsByWorkspaceResponse,\n  SparkJobDefinitionCreateOrUpdateSparkJobDefinitionOptionalParams,\n  SparkJobDefinitionCreateOrUpdateSparkJobDefinitionResponse,\n  SparkJobDefinitionGetSparkJobDefinitionOptionalParams,\n  SparkJobDefinitionGetSparkJobDefinitionResponse,\n  SparkJobDefinitionDeleteSparkJobDefinitionOptionalParams,\n  SparkJobDefinitionExecuteSparkJobDefinitionOptionalParams,\n  SparkJobDefinitionExecuteSparkJobDefinitionResponse,\n  ArtifactRenameRequest,\n  SparkJobDefinitionRenameSparkJobDefinitionOptionalParams,\n  SparkJobDefinitionDebugSparkJobDefinitionOptionalParams,\n  SparkJobDefinitionDebugSparkJobDefinitionResponse,\n  SparkJobDefinitionGetSparkJobDefinitionsByWorkspaceNextResponse,\n  SparkBatchJob,\n} from \"../models/index.js\";\nimport type { RawHttpHeaders } from \"@azure/core-rest-pipeline\";\n\n// Operation Specifications\nconst serializer = coreClient.createSerializer(Mappers, /* isXml */ false);\n\nconst getSparkJobDefinitionsByWorkspaceOperationSpec: coreClient.OperationSpec = {\n  path: \"/sparkJobDefinitions\",\n  httpMethod: \"GET\",\n  responses: {\n    200: {\n      bodyMapper: Mappers.SparkJobDefinitionsListResponse,\n    },\n    default: {\n      bodyMapper: Mappers.CloudError,\n    },\n  },\n  queryParameters: [Parameters.apiVersion5],\n  urlParameters: [Parameters.endpoint],\n  headerParameters: [Parameters.accept],\n  serializer,\n};\nconst createOrUpdateSparkJobDefinitionOperationSpec: coreClient.OperationSpec = {\n  path: \"/sparkJobDefinitions/{sparkJobDefinitionName}\",\n  httpMethod: \"PUT\",\n  responses: {\n    200: {\n      bodyMapper: Mappers.SparkJobDefinitionResource,\n    },\n    201: {\n      bodyMapper: Mappers.SparkJobDefinitionResource,\n    },\n    202: {\n      bodyMapper: Mappers.SparkJobDefinitionResource,\n    },\n    204: {\n      bodyMapper: Mappers.SparkJobDefinitionResource,\n    },\n    default: {\n      bodyMapper: Mappers.CloudError,\n    },\n  },\n  requestBody: Parameters.sparkJobDefinition,\n  queryParameters: [Parameters.apiVersion5],\n  urlParameters: [Parameters.endpoint, Parameters.sparkJobDefinitionName],\n  headerParameters: [Parameters.accept, Parameters.contentType, Parameters.ifMatch],\n  mediaType: \"json\",\n  serializer,\n};\nconst getSparkJobDefinitionOperationSpec: coreClient.OperationSpec = {\n  path: \"/sparkJobDefinitions/{sparkJobDefinitionName}\",\n  httpMethod: \"GET\",\n  responses: {\n    200: {\n      bodyMapper: Mappers.SparkJobDefinitionResource,\n    },\n    304: {},\n    default: {\n      bodyMapper: Mappers.CloudError,\n    },\n  },\n  queryParameters: [Parameters.apiVersion5],\n  urlParameters: [Parameters.endpoint, Parameters.sparkJobDefinitionName],\n  headerParameters: [Parameters.accept, Parameters.ifNoneMatch],\n  serializer,\n};\nconst deleteSparkJobDefinitionOperationSpec: coreClient.OperationSpec = {\n  path: \"/sparkJobDefinitions/{sparkJobDefinitionName}\",\n  httpMethod: \"DELETE\",\n  responses: {\n    200: {},\n    201: {},\n    202: {},\n    204: {},\n    default: {\n      bodyMapper: Mappers.CloudError,\n    },\n  },\n  queryParameters: [Parameters.apiVersion5],\n  urlParameters: [Parameters.endpoint, Parameters.sparkJobDefinitionName],\n  headerParameters: [Parameters.accept],\n  serializer,\n};\nconst executeSparkJobDefinitionOperationSpec: coreClient.OperationSpec = {\n  path: \"/sparkJobDefinitions/{sparkJobDefinitionName}/execute\",\n  httpMethod: \"POST\",\n  responses: {\n    200: {\n      bodyMapper: Mappers.SparkBatchJob,\n    },\n    201: {\n      bodyMapper: Mappers.SparkBatchJob,\n    },\n    202: {\n      bodyMapper: Mappers.SparkBatchJob,\n    },\n    204: {\n      bodyMapper: Mappers.SparkBatchJob,\n    },\n    default: {\n      bodyMapper: Mappers.CloudError,\n    },\n  },\n  queryParameters: [Parameters.apiVersion5],\n  urlParameters: [Parameters.endpoint, Parameters.sparkJobDefinitionName],\n  headerParameters: [Parameters.accept],\n  serializer,\n};\nconst renameSparkJobDefinitionOperationSpec: coreClient.OperationSpec = {\n  path: \"/sparkJobDefinitions/{sparkJobDefinitionName}/rename\",\n  httpMethod: \"POST\",\n  responses: {\n    200: {},\n    201: {},\n    202: {},\n    204: {},\n    default: {\n      bodyMapper: Mappers.CloudError,\n    },\n  },\n  requestBody: Parameters.request,\n  queryParameters: [Parameters.apiVersion5],\n  urlParameters: [Parameters.endpoint, Parameters.sparkJobDefinitionName],\n  headerParameters: [Parameters.accept, Parameters.contentType],\n  mediaType: \"json\",\n  serializer,\n};\nconst debugSparkJobDefinitionOperationSpec: coreClient.OperationSpec = {\n  path: \"/debugSparkJobDefinition\",\n  httpMethod: \"POST\",\n  responses: {\n    200: {\n      bodyMapper: Mappers.SparkBatchJob,\n    },\n    201: {\n      bodyMapper: Mappers.SparkBatchJob,\n    },\n    202: {\n      bodyMapper: Mappers.SparkBatchJob,\n    },\n    204: {\n      bodyMapper: Mappers.SparkBatchJob,\n    },\n    default: {\n      bodyMapper: Mappers.CloudError,\n    },\n  },\n  requestBody: Parameters.sparkJobDefinitionAzureResource,\n  queryParameters: [Parameters.apiVersion5],\n  urlParameters: [Parameters.endpoint],\n  headerParameters: [Parameters.accept, Parameters.contentType],\n  mediaType: \"json\",\n  serializer,\n};\nconst getSparkJobDefinitionsByWorkspaceNextOperationSpec: coreClient.OperationSpec = {\n  path: \"{nextLink}\",\n  httpMethod: \"GET\",\n  responses: {\n    200: {\n      bodyMapper: Mappers.SparkJobDefinitionsListResponse,\n    },\n    default: {\n      bodyMapper: Mappers.CloudError,\n    },\n  },\n  urlParameters: [Parameters.endpoint, Parameters.nextLink],\n  headerParameters: [Parameters.accept],\n  serializer,\n};\n\n/** Class containing SparkJobDefinitionOperations operations. */\nexport class SparkJobDefinitionOperationsImpl implements SparkJobDefinitionOperations {\n  private readonly client: ArtifactsClient;\n\n  /**\n   * Initialize a new instance of the class SparkJobDefinitionOperations class.\n   * @param client - Reference to the service client\n   */\n  // eslint-disable-next-line @azure/azure-sdk/ts-use-interface-parameters\n  constructor(client: ArtifactsClient) {\n    this.client = client;\n  }\n\n  /**\n   * Lists spark job definitions.\n   * @param options - The options parameters.\n   */\n  public listSparkJobDefinitionsByWorkspace(\n    options?: SparkJobDefinitionGetSparkJobDefinitionsByWorkspaceOptionalParams,\n  ): PagedAsyncIterableIterator<SparkJobDefinitionResource> {\n    const iter = this.getSparkJobDefinitionsByWorkspacePagingAll(options);\n    return {\n      next() {\n        return iter.next();\n      },\n      [Symbol.asyncIterator]() {\n        return this;\n      },\n      byPage: (settings?: PageSettings) => {\n        if (settings?.maxPageSize) {\n          throw new Error(\"maxPageSize is not supported by this operation.\");\n        }\n        return this.getSparkJobDefinitionsByWorkspacePagingPage(options, settings);\n      },\n    };\n  }\n\n  private async *getSparkJobDefinitionsByWorkspacePagingPage(\n    options?: SparkJobDefinitionGetSparkJobDefinitionsByWorkspaceOptionalParams,\n    settings?: PageSettings,\n  ): AsyncIterableIterator<SparkJobDefinitionResource[]> {\n    let result: SparkJobDefinitionGetSparkJobDefinitionsByWorkspaceResponse;\n    let continuationToken = settings?.continuationToken;\n    if (!continuationToken) {\n      result = await this._getSparkJobDefinitionsByWorkspace(options);\n      const page = result.value || [];\n      continuationToken = result.nextLink;\n      setContinuationToken(page, continuationToken);\n      yield page;\n    }\n    while (continuationToken) {\n      result = await this._getSparkJobDefinitionsByWorkspaceNext(continuationToken, options);\n      continuationToken = result.nextLink;\n      const page = result.value || [];\n      setContinuationToken(page, continuationToken);\n      yield page;\n    }\n  }\n\n  private async *getSparkJobDefinitionsByWorkspacePagingAll(\n    options?: SparkJobDefinitionGetSparkJobDefinitionsByWorkspaceOptionalParams,\n  ): AsyncIterableIterator<SparkJobDefinitionResource> {\n    for await (const page of this.getSparkJobDefinitionsByWorkspacePagingPage(options)) {\n      yield* page;\n    }\n  }\n\n  /**\n   * Lists spark job definitions.\n   * @param options - The options parameters.\n   */\n  private async _getSparkJobDefinitionsByWorkspace(\n    options?: SparkJobDefinitionGetSparkJobDefinitionsByWorkspaceOptionalParams,\n  ): Promise<SparkJobDefinitionGetSparkJobDefinitionsByWorkspaceResponse> {\n    return tracingClient.withSpan(\n      \"ArtifactsClient._getSparkJobDefinitionsByWorkspace\",\n      options ?? {},\n      async (updatedOptions) => {\n        return this.client.sendOperationRequest(\n          { updatedOptions },\n          getSparkJobDefinitionsByWorkspaceOperationSpec,\n        ) as Promise<SparkJobDefinitionGetSparkJobDefinitionsByWorkspaceResponse>;\n      },\n    );\n  }\n\n  /**\n   * Creates or updates a Spark Job Definition.\n   * @param sparkJobDefinitionName - The spark job definition name.\n   * @param sparkJobDefinition - Spark Job Definition resource definition.\n   * @param options - The options parameters.\n   */\n  async beginCreateOrUpdateSparkJobDefinition(\n    sparkJobDefinitionName: string,\n    sparkJobDefinition: SparkJobDefinitionResource,\n    options?: SparkJobDefinitionCreateOrUpdateSparkJobDefinitionOptionalParams,\n  ): Promise<\n    SimplePollerLike<\n      OperationState<SparkJobDefinitionCreateOrUpdateSparkJobDefinitionResponse>,\n      SparkJobDefinitionCreateOrUpdateSparkJobDefinitionResponse\n    >\n  > {\n    const directSendOperation = async (\n      args: coreClient.OperationArguments,\n      spec: coreClient.OperationSpec,\n    ): Promise<SparkJobDefinitionCreateOrUpdateSparkJobDefinitionResponse> => {\n      return tracingClient.withSpan(\n        \"ArtifactsClient.beginCreateOrUpdateSparkJobDefinition\",\n        options ?? {},\n        async () => {\n          return this.client.sendOperationRequest(\n            args,\n            spec,\n          ) as Promise<SparkJobDefinitionCreateOrUpdateSparkJobDefinitionResponse>;\n        },\n      );\n    };\n    const sendOperationFn = async (\n      args: coreClient.OperationArguments,\n      spec: coreClient.OperationSpec,\n    ): Promise<{\n      flatResponse: SparkJobDefinitionResource;\n      rawResponse: {\n        statusCode: number;\n        body: any;\n        headers: RawHttpHeaders;\n      };\n    }> => {\n      let currentRawResponse: coreClient.FullOperationResponse | undefined = undefined;\n      const providedCallback = args.options?.onResponse;\n      const callback: coreClient.RawResponseCallback = (\n        rawResponse: coreClient.FullOperationResponse,\n        flatResponse: unknown,\n      ) => {\n        currentRawResponse = rawResponse;\n        providedCallback?.(rawResponse, flatResponse);\n      };\n      const updatedArgs = {\n        ...args,\n        options: {\n          ...args.options,\n          onResponse: callback,\n        },\n      };\n      const flatResponse = await directSendOperation(updatedArgs, spec);\n      return {\n        flatResponse,\n        rawResponse: {\n          statusCode: currentRawResponse!.status,\n          body: currentRawResponse!.parsedBody,\n          headers: currentRawResponse!.headers.toJSON(),\n        },\n      };\n    };\n\n    const lro = createLroSpec({\n      sendOperationFn,\n      args: { sparkJobDefinitionName, sparkJobDefinition, options },\n      spec: createOrUpdateSparkJobDefinitionOperationSpec,\n    });\n    const poller = await createHttpPoller<\n      SparkJobDefinitionCreateOrUpdateSparkJobDefinitionResponse,\n      OperationState<SparkJobDefinitionCreateOrUpdateSparkJobDefinitionResponse>\n    >(lro, {\n      restoreFrom: options?.resumeFrom,\n      intervalInMs: options?.updateIntervalInMs,\n    });\n    await poller.poll();\n    return poller;\n  }\n\n  /**\n   * Creates or updates a Spark Job Definition.\n   * @param sparkJobDefinitionName - The spark job definition name.\n   * @param sparkJobDefinition - Spark Job Definition resource definition.\n   * @param options - The options parameters.\n   */\n  async beginCreateOrUpdateSparkJobDefinitionAndWait(\n    sparkJobDefinitionName: string,\n    sparkJobDefinition: SparkJobDefinitionResource,\n    options?: SparkJobDefinitionCreateOrUpdateSparkJobDefinitionOptionalParams,\n  ): Promise<SparkJobDefinitionCreateOrUpdateSparkJobDefinitionResponse> {\n    const poller = await this.beginCreateOrUpdateSparkJobDefinition(\n      sparkJobDefinitionName,\n      sparkJobDefinition,\n      options,\n    );\n    return poller.pollUntilDone();\n  }\n\n  /**\n   * Gets a Spark Job Definition.\n   * @param sparkJobDefinitionName - The spark job definition name.\n   * @param options - The options parameters.\n   */\n  async getSparkJobDefinition(\n    sparkJobDefinitionName: string,\n    options?: SparkJobDefinitionGetSparkJobDefinitionOptionalParams,\n  ): Promise<SparkJobDefinitionGetSparkJobDefinitionResponse> {\n    return tracingClient.withSpan(\n      \"ArtifactsClient.getSparkJobDefinition\",\n      options ?? {},\n      async (updatedOptions) => {\n        return this.client.sendOperationRequest(\n          { sparkJobDefinitionName, updatedOptions },\n          getSparkJobDefinitionOperationSpec,\n        ) as Promise<SparkJobDefinitionGetSparkJobDefinitionResponse>;\n      },\n    );\n  }\n\n  /**\n   * Deletes a Spark Job Definition.\n   * @param sparkJobDefinitionName - The spark job definition name.\n   * @param options - The options parameters.\n   */\n  async beginDeleteSparkJobDefinition(\n    sparkJobDefinitionName: string,\n    options?: SparkJobDefinitionDeleteSparkJobDefinitionOptionalParams,\n  ): Promise<SimplePollerLike<OperationState<void>, void>> {\n    const directSendOperation = async (\n      args: coreClient.OperationArguments,\n      spec: coreClient.OperationSpec,\n    ): Promise<void> => {\n      return tracingClient.withSpan(\n        \"ArtifactsClient.beginDeleteSparkJobDefinition\",\n        options ?? {},\n        async () => {\n          return this.client.sendOperationRequest(args, spec) as Promise<void>;\n        },\n      );\n    };\n    const sendOperationFn = async (\n      args: coreClient.OperationArguments,\n      spec: coreClient.OperationSpec,\n    ): Promise<{\n      flatResponse: void;\n      rawResponse: {\n        statusCode: number;\n        body: any;\n        headers: RawHttpHeaders;\n      };\n    }> => {\n      let currentRawResponse: coreClient.FullOperationResponse | undefined = undefined;\n      const providedCallback = args.options?.onResponse;\n      const callback: coreClient.RawResponseCallback = (\n        rawResponse: coreClient.FullOperationResponse,\n        flatResponse: unknown,\n      ) => {\n        currentRawResponse = rawResponse;\n        providedCallback?.(rawResponse, flatResponse);\n      };\n      const updatedArgs = {\n        ...args,\n        options: {\n          ...args.options,\n          onResponse: callback,\n        },\n      };\n      const flatResponse = await directSendOperation(updatedArgs, spec);\n      return {\n        flatResponse,\n        rawResponse: {\n          statusCode: currentRawResponse!.status,\n          body: currentRawResponse!.parsedBody,\n          headers: currentRawResponse!.headers.toJSON(),\n        },\n      };\n    };\n\n    const lro = createLroSpec({\n      sendOperationFn,\n      args: { sparkJobDefinitionName, options },\n      spec: deleteSparkJobDefinitionOperationSpec,\n    });\n    const poller = await createHttpPoller<void, OperationState<void>>(lro, {\n      restoreFrom: options?.resumeFrom,\n      intervalInMs: options?.updateIntervalInMs,\n    });\n    await poller.poll();\n    return poller;\n  }\n\n  /**\n   * Deletes a Spark Job Definition.\n   * @param sparkJobDefinitionName - The spark job definition name.\n   * @param options - The options parameters.\n   */\n  async beginDeleteSparkJobDefinitionAndWait(\n    sparkJobDefinitionName: string,\n    options?: SparkJobDefinitionDeleteSparkJobDefinitionOptionalParams,\n  ): Promise<void> {\n    const poller = await this.beginDeleteSparkJobDefinition(sparkJobDefinitionName, options);\n    return poller.pollUntilDone();\n  }\n\n  /**\n   * Executes the spark job definition.\n   * @param sparkJobDefinitionName - The spark job definition name.\n   * @param options - The options parameters.\n   */\n  async beginExecuteSparkJobDefinition(\n    sparkJobDefinitionName: string,\n    options?: SparkJobDefinitionExecuteSparkJobDefinitionOptionalParams,\n  ): Promise<\n    SimplePollerLike<\n      OperationState<SparkJobDefinitionExecuteSparkJobDefinitionResponse>,\n      SparkJobDefinitionExecuteSparkJobDefinitionResponse\n    >\n  > {\n    const directSendOperation = async (\n      args: coreClient.OperationArguments,\n      spec: coreClient.OperationSpec,\n    ): Promise<SparkJobDefinitionExecuteSparkJobDefinitionResponse> => {\n      return tracingClient.withSpan(\n        \"ArtifactsClient.beginExecuteSparkJobDefinition\",\n        options ?? {},\n        async () => {\n          return this.client.sendOperationRequest(\n            args,\n            spec,\n          ) as Promise<SparkJobDefinitionExecuteSparkJobDefinitionResponse>;\n        },\n      );\n    };\n    const sendOperationFn = async (\n      args: coreClient.OperationArguments,\n      spec: coreClient.OperationSpec,\n    ): Promise<{\n      flatResponse: SparkBatchJob;\n      rawResponse: {\n        statusCode: number;\n        body: any;\n        headers: RawHttpHeaders;\n      };\n    }> => {\n      let currentRawResponse: coreClient.FullOperationResponse | undefined = undefined;\n      const providedCallback = args.options?.onResponse;\n      const callback: coreClient.RawResponseCallback = (\n        rawResponse: coreClient.FullOperationResponse,\n        flatResponse: unknown,\n      ) => {\n        currentRawResponse = rawResponse;\n        providedCallback?.(rawResponse, flatResponse);\n      };\n      const updatedArgs = {\n        ...args,\n        options: {\n          ...args.options,\n          onResponse: callback,\n        },\n      };\n      const flatResponse = await directSendOperation(updatedArgs, spec);\n      return {\n        flatResponse,\n        rawResponse: {\n          statusCode: currentRawResponse!.status,\n          body: currentRawResponse!.parsedBody,\n          headers: currentRawResponse!.headers.toJSON(),\n        },\n      };\n    };\n\n    const lro = createLroSpec({\n      sendOperationFn,\n      args: { sparkJobDefinitionName, options },\n      spec: executeSparkJobDefinitionOperationSpec,\n    });\n    const poller = await createHttpPoller<\n      SparkJobDefinitionExecuteSparkJobDefinitionResponse,\n      OperationState<SparkJobDefinitionExecuteSparkJobDefinitionResponse>\n    >(lro, {\n      restoreFrom: options?.resumeFrom,\n      intervalInMs: options?.updateIntervalInMs,\n      resourceLocationConfig: \"location\",\n    });\n    await poller.poll();\n    return poller;\n  }\n\n  /**\n   * Executes the spark job definition.\n   * @param sparkJobDefinitionName - The spark job definition name.\n   * @param options - The options parameters.\n   */\n  async beginExecuteSparkJobDefinitionAndWait(\n    sparkJobDefinitionName: string,\n    options?: SparkJobDefinitionExecuteSparkJobDefinitionOptionalParams,\n  ): Promise<SparkJobDefinitionExecuteSparkJobDefinitionResponse> {\n    const poller = await this.beginExecuteSparkJobDefinition(sparkJobDefinitionName, options);\n    return poller.pollUntilDone();\n  }\n\n  /**\n   * Renames a sparkJobDefinition.\n   * @param sparkJobDefinitionName - The spark job definition name.\n   * @param request - proposed new name.\n   * @param options - The options parameters.\n   */\n  async beginRenameSparkJobDefinition(\n    sparkJobDefinitionName: string,\n    request: ArtifactRenameRequest,\n    options?: SparkJobDefinitionRenameSparkJobDefinitionOptionalParams,\n  ): Promise<SimplePollerLike<OperationState<void>, void>> {\n    const directSendOperation = async (\n      args: coreClient.OperationArguments,\n      spec: coreClient.OperationSpec,\n    ): Promise<void> => {\n      return tracingClient.withSpan(\n        \"ArtifactsClient.beginRenameSparkJobDefinition\",\n        options ?? {},\n        async () => {\n          return this.client.sendOperationRequest(args, spec) as Promise<void>;\n        },\n      );\n    };\n    const sendOperationFn = async (\n      args: coreClient.OperationArguments,\n      spec: coreClient.OperationSpec,\n    ): Promise<{\n      flatResponse: void;\n      rawResponse: {\n        statusCode: number;\n        body: any;\n        headers: RawHttpHeaders;\n      };\n    }> => {\n      let currentRawResponse: coreClient.FullOperationResponse | undefined = undefined;\n      const providedCallback = args.options?.onResponse;\n      const callback: coreClient.RawResponseCallback = (\n        rawResponse: coreClient.FullOperationResponse,\n        flatResponse: unknown,\n      ) => {\n        currentRawResponse = rawResponse;\n        providedCallback?.(rawResponse, flatResponse);\n      };\n      const updatedArgs = {\n        ...args,\n        options: {\n          ...args.options,\n          onResponse: callback,\n        },\n      };\n      const flatResponse = await directSendOperation(updatedArgs, spec);\n      return {\n        flatResponse,\n        rawResponse: {\n          statusCode: currentRawResponse!.status,\n          body: currentRawResponse!.parsedBody,\n          headers: currentRawResponse!.headers.toJSON(),\n        },\n      };\n    };\n\n    const lro = createLroSpec({\n      sendOperationFn,\n      args: { sparkJobDefinitionName, request, options },\n      spec: renameSparkJobDefinitionOperationSpec,\n    });\n    const poller = await createHttpPoller<void, OperationState<void>>(lro, {\n      restoreFrom: options?.resumeFrom,\n      intervalInMs: options?.updateIntervalInMs,\n    });\n    await poller.poll();\n    return poller;\n  }\n\n  /**\n   * Renames a sparkJobDefinition.\n   * @param sparkJobDefinitionName - The spark job definition name.\n   * @param request - proposed new name.\n   * @param options - The options parameters.\n   */\n  async beginRenameSparkJobDefinitionAndWait(\n    sparkJobDefinitionName: string,\n    request: ArtifactRenameRequest,\n    options?: SparkJobDefinitionRenameSparkJobDefinitionOptionalParams,\n  ): Promise<void> {\n    const poller = await this.beginRenameSparkJobDefinition(\n      sparkJobDefinitionName,\n      request,\n      options,\n    );\n    return poller.pollUntilDone();\n  }\n\n  /**\n   * Debug the spark job definition.\n   * @param sparkJobDefinitionAzureResource - Spark Job Definition resource definition.\n   * @param options - The options parameters.\n   */\n  async beginDebugSparkJobDefinition(\n    sparkJobDefinitionAzureResource: SparkJobDefinitionResource,\n    options?: SparkJobDefinitionDebugSparkJobDefinitionOptionalParams,\n  ): Promise<\n    SimplePollerLike<\n      OperationState<SparkJobDefinitionDebugSparkJobDefinitionResponse>,\n      SparkJobDefinitionDebugSparkJobDefinitionResponse\n    >\n  > {\n    const directSendOperation = async (\n      args: coreClient.OperationArguments,\n      spec: coreClient.OperationSpec,\n    ): Promise<SparkJobDefinitionDebugSparkJobDefinitionResponse> => {\n      return tracingClient.withSpan(\n        \"ArtifactsClient.beginDebugSparkJobDefinition\",\n        options ?? {},\n        async () => {\n          return this.client.sendOperationRequest(\n            args,\n            spec,\n          ) as Promise<SparkJobDefinitionDebugSparkJobDefinitionResponse>;\n        },\n      );\n    };\n    const sendOperationFn = async (\n      args: coreClient.OperationArguments,\n      spec: coreClient.OperationSpec,\n    ): Promise<{\n      flatResponse: SparkBatchJob;\n      rawResponse: {\n        statusCode: number;\n        body: any;\n        headers: RawHttpHeaders;\n      };\n    }> => {\n      let currentRawResponse: coreClient.FullOperationResponse | undefined = undefined;\n      const providedCallback = args.options?.onResponse;\n      const callback: coreClient.RawResponseCallback = (\n        rawResponse: coreClient.FullOperationResponse,\n        flatResponse: unknown,\n      ) => {\n        currentRawResponse = rawResponse;\n        providedCallback?.(rawResponse, flatResponse);\n      };\n      const updatedArgs = {\n        ...args,\n        options: {\n          ...args.options,\n          onResponse: callback,\n        },\n      };\n      const flatResponse = await directSendOperation(updatedArgs, spec);\n      return {\n        flatResponse,\n        rawResponse: {\n          statusCode: currentRawResponse!.status,\n          body: currentRawResponse!.parsedBody,\n          headers: currentRawResponse!.headers.toJSON(),\n        },\n      };\n    };\n\n    const lro = createLroSpec({\n      sendOperationFn,\n      args: { sparkJobDefinitionAzureResource, options },\n      spec: debugSparkJobDefinitionOperationSpec,\n    });\n    const poller = await createHttpPoller<\n      SparkJobDefinitionDebugSparkJobDefinitionResponse,\n      OperationState<SparkJobDefinitionDebugSparkJobDefinitionResponse>\n    >(lro, {\n      restoreFrom: options?.resumeFrom,\n      intervalInMs: options?.updateIntervalInMs,\n      resourceLocationConfig: \"location\",\n    });\n    await poller.poll();\n    return poller;\n  }\n\n  /**\n   * Debug the spark job definition.\n   * @param sparkJobDefinitionAzureResource - Spark Job Definition resource definition.\n   * @param options - The options parameters.\n   */\n  async beginDebugSparkJobDefinitionAndWait(\n    sparkJobDefinitionAzureResource: SparkJobDefinitionResource,\n    options?: SparkJobDefinitionDebugSparkJobDefinitionOptionalParams,\n  ): Promise<SparkJobDefinitionDebugSparkJobDefinitionResponse> {\n    const poller = await this.beginDebugSparkJobDefinition(\n      sparkJobDefinitionAzureResource,\n      options,\n    );\n    return poller.pollUntilDone();\n  }\n\n  /**\n   * GetSparkJobDefinitionsByWorkspaceNext\n   * @param nextLink - The nextLink from the previous successful call to the\n   *                 GetSparkJobDefinitionsByWorkspace method.\n   * @param options - The options parameters.\n   */\n  private async _getSparkJobDefinitionsByWorkspaceNext(\n    nextLink: string,\n    options?: SparkJobDefinitionGetSparkJobDefinitionsByWorkspaceNextOptionalParams,\n  ): Promise<SparkJobDefinitionGetSparkJobDefinitionsByWorkspaceNextResponse> {\n    return tracingClient.withSpan(\n      \"ArtifactsClient._getSparkJobDefinitionsByWorkspaceNext\",\n      options ?? {},\n      async (updatedOptions) => {\n        return this.client.sendOperationRequest(\n          { nextLink, updatedOptions },\n          getSparkJobDefinitionsByWorkspaceNextOperationSpec,\n        ) as Promise<SparkJobDefinitionGetSparkJobDefinitionsByWorkspaceNextResponse>;\n      },\n    );\n  }\n}\n"]}