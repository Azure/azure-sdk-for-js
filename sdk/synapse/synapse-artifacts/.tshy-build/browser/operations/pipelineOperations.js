/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */
import { __asyncDelegator, __asyncGenerator, __asyncValues, __await } from "tslib";
import { tracingClient } from "../tracing.js";
import { setContinuationToken } from "../pagingHelper.js";
import * as coreClient from "@azure/core-client";
import * as Mappers from "../models/mappers.js";
import * as Parameters from "../models/parameters.js";
import { createHttpPoller } from "@azure/core-lro";
import { createLroSpec } from "../lroImpl.js";
// Operation Specifications
const serializer = coreClient.createSerializer(Mappers, /* isXml */ false);
const getPipelinesByWorkspaceOperationSpec = {
    path: "/pipelines",
    httpMethod: "GET",
    responses: {
        200: {
            bodyMapper: Mappers.PipelineListResponse,
        },
        default: {
            bodyMapper: Mappers.CloudError,
        },
    },
    queryParameters: [Parameters.apiVersion5],
    urlParameters: [Parameters.endpoint],
    headerParameters: [Parameters.accept],
    serializer,
};
const createOrUpdatePipelineOperationSpec = {
    path: "/pipelines/{pipelineName}",
    httpMethod: "PUT",
    responses: {
        200: {
            bodyMapper: Mappers.PipelineResource,
        },
        201: {
            bodyMapper: Mappers.PipelineResource,
        },
        202: {
            bodyMapper: Mappers.PipelineResource,
        },
        204: {
            bodyMapper: Mappers.PipelineResource,
        },
        default: {
            bodyMapper: Mappers.CloudError,
        },
    },
    requestBody: Parameters.pipeline,
    queryParameters: [Parameters.apiVersion5],
    urlParameters: [Parameters.endpoint, Parameters.pipelineName],
    headerParameters: [Parameters.accept, Parameters.contentType, Parameters.ifMatch],
    mediaType: "json",
    serializer,
};
const getPipelineOperationSpec = {
    path: "/pipelines/{pipelineName}",
    httpMethod: "GET",
    responses: {
        200: {
            bodyMapper: Mappers.PipelineResource,
        },
        304: {},
        default: {
            bodyMapper: Mappers.CloudError,
        },
    },
    queryParameters: [Parameters.apiVersion5],
    urlParameters: [Parameters.endpoint, Parameters.pipelineName],
    headerParameters: [Parameters.accept, Parameters.ifNoneMatch],
    serializer,
};
const deletePipelineOperationSpec = {
    path: "/pipelines/{pipelineName}",
    httpMethod: "DELETE",
    responses: {
        200: {},
        201: {},
        202: {},
        204: {},
        default: {
            bodyMapper: Mappers.CloudError,
        },
    },
    queryParameters: [Parameters.apiVersion5],
    urlParameters: [Parameters.endpoint, Parameters.pipelineName],
    headerParameters: [Parameters.accept],
    serializer,
};
const renamePipelineOperationSpec = {
    path: "/pipelines/{pipelineName}/rename",
    httpMethod: "POST",
    responses: {
        200: {},
        201: {},
        202: {},
        204: {},
        default: {
            bodyMapper: Mappers.CloudError,
        },
    },
    requestBody: Parameters.request,
    queryParameters: [Parameters.apiVersion5],
    urlParameters: [Parameters.endpoint, Parameters.pipelineName],
    headerParameters: [Parameters.accept, Parameters.contentType],
    mediaType: "json",
    serializer,
};
const createPipelineRunOperationSpec = {
    path: "/pipelines/{pipelineName}/createRun",
    httpMethod: "POST",
    responses: {
        202: {
            bodyMapper: Mappers.CreateRunResponse,
        },
        default: {
            bodyMapper: Mappers.CloudError,
        },
    },
    requestBody: Parameters.parameters,
    queryParameters: [
        Parameters.apiVersion5,
        Parameters.referencePipelineRunId,
        Parameters.isRecovery,
        Parameters.startActivityName,
    ],
    urlParameters: [Parameters.endpoint, Parameters.pipelineName],
    headerParameters: [Parameters.accept, Parameters.contentType],
    mediaType: "json",
    serializer,
};
const getPipelinesByWorkspaceNextOperationSpec = {
    path: "{nextLink}",
    httpMethod: "GET",
    responses: {
        200: {
            bodyMapper: Mappers.PipelineListResponse,
        },
        default: {
            bodyMapper: Mappers.CloudError,
        },
    },
    urlParameters: [Parameters.endpoint, Parameters.nextLink],
    headerParameters: [Parameters.accept],
    serializer,
};
/** Class containing PipelineOperations operations. */
export class PipelineOperationsImpl {
    /**
     * Initialize a new instance of the class PipelineOperations class.
     * @param client - Reference to the service client
     */
    constructor(client) {
        this.client = client;
    }
    /**
     * Lists pipelines.
     * @param options - The options parameters.
     */
    listPipelinesByWorkspace(options) {
        const iter = this.getPipelinesByWorkspacePagingAll(options);
        return {
            next() {
                return iter.next();
            },
            [Symbol.asyncIterator]() {
                return this;
            },
            byPage: (settings) => {
                if (settings === null || settings === void 0 ? void 0 : settings.maxPageSize) {
                    throw new Error("maxPageSize is not supported by this operation.");
                }
                return this.getPipelinesByWorkspacePagingPage(options, settings);
            },
        };
    }
    getPipelinesByWorkspacePagingPage(options, settings) {
        return __asyncGenerator(this, arguments, function* getPipelinesByWorkspacePagingPage_1() {
            let result;
            let continuationToken = settings === null || settings === void 0 ? void 0 : settings.continuationToken;
            if (!continuationToken) {
                result = yield __await(this._getPipelinesByWorkspace(options));
                const page = result.value || [];
                continuationToken = result.nextLink;
                setContinuationToken(page, continuationToken);
                yield yield __await(page);
            }
            while (continuationToken) {
                result = yield __await(this._getPipelinesByWorkspaceNext(continuationToken, options));
                continuationToken = result.nextLink;
                const page = result.value || [];
                setContinuationToken(page, continuationToken);
                yield yield __await(page);
            }
        });
    }
    getPipelinesByWorkspacePagingAll(options) {
        return __asyncGenerator(this, arguments, function* getPipelinesByWorkspacePagingAll_1() {
            var _a, e_1, _b, _c;
            try {
                for (var _d = true, _e = __asyncValues(this.getPipelinesByWorkspacePagingPage(options)), _f; _f = yield __await(_e.next()), _a = _f.done, !_a; _d = true) {
                    _c = _f.value;
                    _d = false;
                    const page = _c;
                    yield __await(yield* __asyncDelegator(__asyncValues(page)));
                }
            }
            catch (e_1_1) { e_1 = { error: e_1_1 }; }
            finally {
                try {
                    if (!_d && !_a && (_b = _e.return)) yield __await(_b.call(_e));
                }
                finally { if (e_1) throw e_1.error; }
            }
        });
    }
    /**
     * Lists pipelines.
     * @param options - The options parameters.
     */
    async _getPipelinesByWorkspace(options) {
        return tracingClient.withSpan("ArtifactsClient._getPipelinesByWorkspace", options !== null && options !== void 0 ? options : {}, async (updatedOptions) => {
            return this.client.sendOperationRequest({ updatedOptions }, getPipelinesByWorkspaceOperationSpec);
        });
    }
    /**
     * Creates or updates a pipeline.
     * @param pipelineName - The pipeline name.
     * @param pipeline - Pipeline resource definition.
     * @param options - The options parameters.
     */
    async beginCreateOrUpdatePipeline(pipelineName, pipeline, options) {
        const directSendOperation = async (args, spec) => {
            return tracingClient.withSpan("ArtifactsClient.beginCreateOrUpdatePipeline", options !== null && options !== void 0 ? options : {}, async () => {
                return this.client.sendOperationRequest(args, spec);
            });
        };
        const sendOperationFn = async (args, spec) => {
            var _a;
            let currentRawResponse = undefined;
            const providedCallback = (_a = args.options) === null || _a === void 0 ? void 0 : _a.onResponse;
            const callback = (rawResponse, flatResponse) => {
                currentRawResponse = rawResponse;
                providedCallback === null || providedCallback === void 0 ? void 0 : providedCallback(rawResponse, flatResponse);
            };
            const updatedArgs = Object.assign(Object.assign({}, args), { options: Object.assign(Object.assign({}, args.options), { onResponse: callback }) });
            const flatResponse = await directSendOperation(updatedArgs, spec);
            return {
                flatResponse,
                rawResponse: {
                    statusCode: currentRawResponse.status,
                    body: currentRawResponse.parsedBody,
                    headers: currentRawResponse.headers.toJSON(),
                },
            };
        };
        const lro = createLroSpec({
            sendOperationFn,
            args: { pipelineName, pipeline, options },
            spec: createOrUpdatePipelineOperationSpec,
        });
        const poller = await createHttpPoller(lro, {
            restoreFrom: options === null || options === void 0 ? void 0 : options.resumeFrom,
            intervalInMs: options === null || options === void 0 ? void 0 : options.updateIntervalInMs,
        });
        await poller.poll();
        return poller;
    }
    /**
     * Creates or updates a pipeline.
     * @param pipelineName - The pipeline name.
     * @param pipeline - Pipeline resource definition.
     * @param options - The options parameters.
     */
    async beginCreateOrUpdatePipelineAndWait(pipelineName, pipeline, options) {
        const poller = await this.beginCreateOrUpdatePipeline(pipelineName, pipeline, options);
        return poller.pollUntilDone();
    }
    /**
     * Gets a pipeline.
     * @param pipelineName - The pipeline name.
     * @param options - The options parameters.
     */
    async getPipeline(pipelineName, options) {
        return tracingClient.withSpan("ArtifactsClient.getPipeline", options !== null && options !== void 0 ? options : {}, async (updatedOptions) => {
            return this.client.sendOperationRequest({ pipelineName, updatedOptions }, getPipelineOperationSpec);
        });
    }
    /**
     * Deletes a pipeline.
     * @param pipelineName - The pipeline name.
     * @param options - The options parameters.
     */
    async beginDeletePipeline(pipelineName, options) {
        const directSendOperation = async (args, spec) => {
            return tracingClient.withSpan("ArtifactsClient.beginDeletePipeline", options !== null && options !== void 0 ? options : {}, async () => {
                return this.client.sendOperationRequest(args, spec);
            });
        };
        const sendOperationFn = async (args, spec) => {
            var _a;
            let currentRawResponse = undefined;
            const providedCallback = (_a = args.options) === null || _a === void 0 ? void 0 : _a.onResponse;
            const callback = (rawResponse, flatResponse) => {
                currentRawResponse = rawResponse;
                providedCallback === null || providedCallback === void 0 ? void 0 : providedCallback(rawResponse, flatResponse);
            };
            const updatedArgs = Object.assign(Object.assign({}, args), { options: Object.assign(Object.assign({}, args.options), { onResponse: callback }) });
            const flatResponse = await directSendOperation(updatedArgs, spec);
            return {
                flatResponse,
                rawResponse: {
                    statusCode: currentRawResponse.status,
                    body: currentRawResponse.parsedBody,
                    headers: currentRawResponse.headers.toJSON(),
                },
            };
        };
        const lro = createLroSpec({
            sendOperationFn,
            args: { pipelineName, options },
            spec: deletePipelineOperationSpec,
        });
        const poller = await createHttpPoller(lro, {
            restoreFrom: options === null || options === void 0 ? void 0 : options.resumeFrom,
            intervalInMs: options === null || options === void 0 ? void 0 : options.updateIntervalInMs,
        });
        await poller.poll();
        return poller;
    }
    /**
     * Deletes a pipeline.
     * @param pipelineName - The pipeline name.
     * @param options - The options parameters.
     */
    async beginDeletePipelineAndWait(pipelineName, options) {
        const poller = await this.beginDeletePipeline(pipelineName, options);
        return poller.pollUntilDone();
    }
    /**
     * Renames a pipeline.
     * @param pipelineName - The pipeline name.
     * @param request - proposed new name.
     * @param options - The options parameters.
     */
    async beginRenamePipeline(pipelineName, request, options) {
        const directSendOperation = async (args, spec) => {
            return tracingClient.withSpan("ArtifactsClient.beginRenamePipeline", options !== null && options !== void 0 ? options : {}, async () => {
                return this.client.sendOperationRequest(args, spec);
            });
        };
        const sendOperationFn = async (args, spec) => {
            var _a;
            let currentRawResponse = undefined;
            const providedCallback = (_a = args.options) === null || _a === void 0 ? void 0 : _a.onResponse;
            const callback = (rawResponse, flatResponse) => {
                currentRawResponse = rawResponse;
                providedCallback === null || providedCallback === void 0 ? void 0 : providedCallback(rawResponse, flatResponse);
            };
            const updatedArgs = Object.assign(Object.assign({}, args), { options: Object.assign(Object.assign({}, args.options), { onResponse: callback }) });
            const flatResponse = await directSendOperation(updatedArgs, spec);
            return {
                flatResponse,
                rawResponse: {
                    statusCode: currentRawResponse.status,
                    body: currentRawResponse.parsedBody,
                    headers: currentRawResponse.headers.toJSON(),
                },
            };
        };
        const lro = createLroSpec({
            sendOperationFn,
            args: { pipelineName, request, options },
            spec: renamePipelineOperationSpec,
        });
        const poller = await createHttpPoller(lro, {
            restoreFrom: options === null || options === void 0 ? void 0 : options.resumeFrom,
            intervalInMs: options === null || options === void 0 ? void 0 : options.updateIntervalInMs,
        });
        await poller.poll();
        return poller;
    }
    /**
     * Renames a pipeline.
     * @param pipelineName - The pipeline name.
     * @param request - proposed new name.
     * @param options - The options parameters.
     */
    async beginRenamePipelineAndWait(pipelineName, request, options) {
        const poller = await this.beginRenamePipeline(pipelineName, request, options);
        return poller.pollUntilDone();
    }
    /**
     * Creates a run of a pipeline.
     * @param pipelineName - The pipeline name.
     * @param options - The options parameters.
     */
    async createPipelineRun(pipelineName, options) {
        return tracingClient.withSpan("ArtifactsClient.createPipelineRun", options !== null && options !== void 0 ? options : {}, async (updatedOptions) => {
            return this.client.sendOperationRequest({ pipelineName, updatedOptions }, createPipelineRunOperationSpec);
        });
    }
    /**
     * GetPipelinesByWorkspaceNext
     * @param nextLink - The nextLink from the previous successful call to the GetPipelinesByWorkspace
     *                 method.
     * @param options - The options parameters.
     */
    async _getPipelinesByWorkspaceNext(nextLink, options) {
        return tracingClient.withSpan("ArtifactsClient._getPipelinesByWorkspaceNext", options !== null && options !== void 0 ? options : {}, async (updatedOptions) => {
            return this.client.sendOperationRequest({ nextLink, updatedOptions }, getPipelinesByWorkspaceNextOperationSpec);
        });
    }
}
//# sourceMappingURL=pipelineOperations.js.map