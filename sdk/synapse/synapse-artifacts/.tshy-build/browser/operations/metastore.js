/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */
import { tracingClient } from "../tracing.js";
import * as coreClient from "@azure/core-client";
import * as Mappers from "../models/mappers.js";
import * as Parameters from "../models/parameters.js";
// Operation Specifications
const serializer = coreClient.createSerializer(Mappers, /* isXml */ false);
const registerOperationSpec = {
    path: "/metastore/create-database-operations/{id}",
    httpMethod: "PUT",
    responses: {
        201: {
            bodyMapper: Mappers.MetastoreRegistrationResponse,
        },
        default: {
            bodyMapper: Mappers.ErrorContract,
        },
    },
    requestBody: Parameters.registerBody,
    queryParameters: [Parameters.apiVersion3],
    urlParameters: [Parameters.endpoint, Parameters.id],
    headerParameters: [Parameters.accept, Parameters.contentType],
    mediaType: "json",
    serializer,
};
const getDatabaseOperationsOperationSpec = {
    path: "/metastore/create-database-operations/{id}",
    httpMethod: "GET",
    responses: {
        200: {
            bodyMapper: Mappers.MetastoreRequestSuccessResponse,
        },
        default: {
            bodyMapper: Mappers.ErrorContract,
        },
    },
    queryParameters: [Parameters.apiVersion3],
    urlParameters: [Parameters.endpoint, Parameters.id],
    headerParameters: [Parameters.accept],
    serializer,
};
const updateOperationSpec = {
    path: "/metastore/update-database-operations/{id}",
    httpMethod: "PUT",
    responses: {
        201: {
            bodyMapper: Mappers.MetastoreUpdationResponse,
        },
        default: {
            bodyMapper: Mappers.ErrorContract,
        },
    },
    requestBody: Parameters.updateBody,
    queryParameters: [Parameters.apiVersion3],
    urlParameters: [Parameters.endpoint, Parameters.id],
    headerParameters: [Parameters.accept, Parameters.contentType],
    mediaType: "json",
    serializer,
};
const deleteOperationSpec = {
    path: "/metastore/databases/{id}",
    httpMethod: "DELETE",
    responses: {
        204: {},
        default: {
            bodyMapper: Mappers.ErrorContract,
        },
    },
    queryParameters: [Parameters.apiVersion3],
    urlParameters: [Parameters.endpoint, Parameters.id],
    headerParameters: [Parameters.accept],
    serializer,
};
/** Class containing Metastore operations. */
export class MetastoreImpl {
    /**
     * Initialize a new instance of the class Metastore class.
     * @param client - Reference to the service client
     */
    constructor(client) {
        this.client = client;
    }
    /**
     * Register files in Syms
     * @param id - The name of the database to be created. The name can contain only alphanumeric characters
     *           and should not exceed 24 characters
     * @param registerBody - The body for the register request
     * @param options - The options parameters.
     */
    async register(id, registerBody, options) {
        return tracingClient.withSpan("ArtifactsClient.register", options !== null && options !== void 0 ? options : {}, async (updatedOptions) => {
            return this.client.sendOperationRequest({ id, registerBody, updatedOptions }, registerOperationSpec);
        });
    }
    /**
     * Gets status of the database
     * @param id - the name of the database.
     * @param options - The options parameters.
     */
    async getDatabaseOperations(id, options) {
        return tracingClient.withSpan("ArtifactsClient.getDatabaseOperations", options !== null && options !== void 0 ? options : {}, async (updatedOptions) => {
            return this.client.sendOperationRequest({ id, updatedOptions }, getDatabaseOperationsOperationSpec);
        });
    }
    /**
     * Update files in Syms
     * @param id - The name of the database to be updated
     * @param updateBody - The body for the update request
     * @param options - The options parameters.
     */
    async update(id, updateBody, options) {
        return tracingClient.withSpan("ArtifactsClient.update", options !== null && options !== void 0 ? options : {}, async (updatedOptions) => {
            return this.client.sendOperationRequest({ id, updateBody, updatedOptions }, updateOperationSpec);
        });
    }
    /**
     * Remove files in Syms
     * @param id - The name of the database to be deleted
     * @param options - The options parameters.
     */
    async delete(id, options) {
        return tracingClient.withSpan("ArtifactsClient.delete", options !== null && options !== void 0 ? options : {}, async (updatedOptions) => {
            return this.client.sendOperationRequest({ id, updatedOptions }, deleteOperationSpec);
        });
    }
}
//# sourceMappingURL=metastore.js.map