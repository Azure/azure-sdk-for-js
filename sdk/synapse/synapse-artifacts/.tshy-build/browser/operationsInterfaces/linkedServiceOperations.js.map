{"version":3,"file":"linkedServiceOperations.js","sourceRoot":"","sources":["../../../src/operationsInterfaces/linkedServiceOperations.ts"],"names":[],"mappings":"AAAA;;;;;;GAMG","sourcesContent":["/*\n * Copyright (c) Microsoft Corporation.\n * Licensed under the MIT License.\n *\n * Code generated by Microsoft (R) AutoRest Code Generator.\n * Changes may cause incorrect behavior and will be lost if the code is regenerated.\n */\n\nimport type { PagedAsyncIterableIterator } from \"@azure/core-paging\";\nimport type { SimplePollerLike, OperationState } from \"@azure/core-lro\";\nimport type {\n  LinkedServiceResource,\n  LinkedServiceGetLinkedServicesByWorkspaceOptionalParams,\n  LinkedServiceCreateOrUpdateLinkedServiceOptionalParams,\n  LinkedServiceCreateOrUpdateLinkedServiceResponse,\n  LinkedServiceGetLinkedServiceOptionalParams,\n  LinkedServiceGetLinkedServiceResponse,\n  LinkedServiceDeleteLinkedServiceOptionalParams,\n  ArtifactRenameRequest,\n  LinkedServiceRenameLinkedServiceOptionalParams,\n} from \"../models/index.js\";\n\n/// <reference lib=\"esnext.asynciterable\" />\n/** Interface representing a LinkedServiceOperations. */\nexport interface LinkedServiceOperations {\n  /**\n   * Lists linked services.\n   * @param options - The options parameters.\n   */\n  listLinkedServicesByWorkspace(\n    options?: LinkedServiceGetLinkedServicesByWorkspaceOptionalParams,\n  ): PagedAsyncIterableIterator<LinkedServiceResource>;\n  /**\n   * Creates or updates a linked service.\n   * @param linkedServiceName - The linked service name.\n   * @param linkedService - Linked service resource definition.\n   * @param options - The options parameters.\n   */\n  beginCreateOrUpdateLinkedService(\n    linkedServiceName: string,\n    linkedService: LinkedServiceResource,\n    options?: LinkedServiceCreateOrUpdateLinkedServiceOptionalParams,\n  ): Promise<\n    SimplePollerLike<\n      OperationState<LinkedServiceCreateOrUpdateLinkedServiceResponse>,\n      LinkedServiceCreateOrUpdateLinkedServiceResponse\n    >\n  >;\n  /**\n   * Creates or updates a linked service.\n   * @param linkedServiceName - The linked service name.\n   * @param linkedService - Linked service resource definition.\n   * @param options - The options parameters.\n   */\n  beginCreateOrUpdateLinkedServiceAndWait(\n    linkedServiceName: string,\n    linkedService: LinkedServiceResource,\n    options?: LinkedServiceCreateOrUpdateLinkedServiceOptionalParams,\n  ): Promise<LinkedServiceCreateOrUpdateLinkedServiceResponse>;\n  /**\n   * Gets a linked service.\n   * @param linkedServiceName - The linked service name.\n   * @param options - The options parameters.\n   */\n  getLinkedService(\n    linkedServiceName: string,\n    options?: LinkedServiceGetLinkedServiceOptionalParams,\n  ): Promise<LinkedServiceGetLinkedServiceResponse>;\n  /**\n   * Deletes a linked service.\n   * @param linkedServiceName - The linked service name.\n   * @param options - The options parameters.\n   */\n  beginDeleteLinkedService(\n    linkedServiceName: string,\n    options?: LinkedServiceDeleteLinkedServiceOptionalParams,\n  ): Promise<SimplePollerLike<OperationState<void>, void>>;\n  /**\n   * Deletes a linked service.\n   * @param linkedServiceName - The linked service name.\n   * @param options - The options parameters.\n   */\n  beginDeleteLinkedServiceAndWait(\n    linkedServiceName: string,\n    options?: LinkedServiceDeleteLinkedServiceOptionalParams,\n  ): Promise<void>;\n  /**\n   * Renames a linked service.\n   * @param linkedServiceName - The linked service name.\n   * @param request - proposed new name.\n   * @param options - The options parameters.\n   */\n  beginRenameLinkedService(\n    linkedServiceName: string,\n    request: ArtifactRenameRequest,\n    options?: LinkedServiceRenameLinkedServiceOptionalParams,\n  ): Promise<SimplePollerLike<OperationState<void>, void>>;\n  /**\n   * Renames a linked service.\n   * @param linkedServiceName - The linked service name.\n   * @param request - proposed new name.\n   * @param options - The options parameters.\n   */\n  beginRenameLinkedServiceAndWait(\n    linkedServiceName: string,\n    request: ArtifactRenameRequest,\n    options?: LinkedServiceRenameLinkedServiceOptionalParams,\n  ): Promise<void>;\n}\n"]}