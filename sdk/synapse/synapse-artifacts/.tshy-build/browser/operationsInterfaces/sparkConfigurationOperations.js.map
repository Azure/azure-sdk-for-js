{"version":3,"file":"sparkConfigurationOperations.js","sourceRoot":"","sources":["../../../src/operationsInterfaces/sparkConfigurationOperations.ts"],"names":[],"mappings":"AAAA;;;;;;GAMG","sourcesContent":["/*\n * Copyright (c) Microsoft Corporation.\n * Licensed under the MIT License.\n *\n * Code generated by Microsoft (R) AutoRest Code Generator.\n * Changes may cause incorrect behavior and will be lost if the code is regenerated.\n */\n\nimport type { PagedAsyncIterableIterator } from \"@azure/core-paging\";\nimport type { SimplePollerLike, OperationState } from \"@azure/core-lro\";\nimport type {\n  SparkConfigurationResource,\n  SparkConfigurationGetSparkConfigurationsByWorkspaceOptionalParams,\n  SparkConfigurationCreateOrUpdateSparkConfigurationOptionalParams,\n  SparkConfigurationCreateOrUpdateSparkConfigurationResponse,\n  SparkConfigurationGetSparkConfigurationOptionalParams,\n  SparkConfigurationGetSparkConfigurationResponse,\n  SparkConfigurationDeleteSparkConfigurationOptionalParams,\n  ArtifactRenameRequest,\n  SparkConfigurationRenameSparkConfigurationOptionalParams,\n} from \"../models/index.js\";\n\n/// <reference lib=\"esnext.asynciterable\" />\n/** Interface representing a SparkConfigurationOperations. */\nexport interface SparkConfigurationOperations {\n  /**\n   * Lists sparkconfigurations.\n   * @param options - The options parameters.\n   */\n  listSparkConfigurationsByWorkspace(\n    options?: SparkConfigurationGetSparkConfigurationsByWorkspaceOptionalParams,\n  ): PagedAsyncIterableIterator<SparkConfigurationResource>;\n  /**\n   * Creates or updates a sparkconfiguration.\n   * @param sparkConfigurationName - The spark Configuration name.\n   * @param sparkConfiguration - SparkConfiguration resource definition.\n   * @param options - The options parameters.\n   */\n  beginCreateOrUpdateSparkConfiguration(\n    sparkConfigurationName: string,\n    sparkConfiguration: SparkConfigurationResource,\n    options?: SparkConfigurationCreateOrUpdateSparkConfigurationOptionalParams,\n  ): Promise<\n    SimplePollerLike<\n      OperationState<SparkConfigurationCreateOrUpdateSparkConfigurationResponse>,\n      SparkConfigurationCreateOrUpdateSparkConfigurationResponse\n    >\n  >;\n  /**\n   * Creates or updates a sparkconfiguration.\n   * @param sparkConfigurationName - The spark Configuration name.\n   * @param sparkConfiguration - SparkConfiguration resource definition.\n   * @param options - The options parameters.\n   */\n  beginCreateOrUpdateSparkConfigurationAndWait(\n    sparkConfigurationName: string,\n    sparkConfiguration: SparkConfigurationResource,\n    options?: SparkConfigurationCreateOrUpdateSparkConfigurationOptionalParams,\n  ): Promise<SparkConfigurationCreateOrUpdateSparkConfigurationResponse>;\n  /**\n   * Gets a sparkConfiguration.\n   * @param sparkConfigurationName - The spark Configuration name.\n   * @param options - The options parameters.\n   */\n  getSparkConfiguration(\n    sparkConfigurationName: string,\n    options?: SparkConfigurationGetSparkConfigurationOptionalParams,\n  ): Promise<SparkConfigurationGetSparkConfigurationResponse>;\n  /**\n   * Deletes a sparkConfiguration.\n   * @param sparkConfigurationName - The spark Configuration name.\n   * @param options - The options parameters.\n   */\n  beginDeleteSparkConfiguration(\n    sparkConfigurationName: string,\n    options?: SparkConfigurationDeleteSparkConfigurationOptionalParams,\n  ): Promise<SimplePollerLike<OperationState<void>, void>>;\n  /**\n   * Deletes a sparkConfiguration.\n   * @param sparkConfigurationName - The spark Configuration name.\n   * @param options - The options parameters.\n   */\n  beginDeleteSparkConfigurationAndWait(\n    sparkConfigurationName: string,\n    options?: SparkConfigurationDeleteSparkConfigurationOptionalParams,\n  ): Promise<void>;\n  /**\n   * Renames a sparkConfiguration.\n   * @param sparkConfigurationName - The spark Configuration name.\n   * @param request - proposed new name.\n   * @param options - The options parameters.\n   */\n  beginRenameSparkConfiguration(\n    sparkConfigurationName: string,\n    request: ArtifactRenameRequest,\n    options?: SparkConfigurationRenameSparkConfigurationOptionalParams,\n  ): Promise<SimplePollerLike<OperationState<void>, void>>;\n  /**\n   * Renames a sparkConfiguration.\n   * @param sparkConfigurationName - The spark Configuration name.\n   * @param request - proposed new name.\n   * @param options - The options parameters.\n   */\n  beginRenameSparkConfigurationAndWait(\n    sparkConfigurationName: string,\n    request: ArtifactRenameRequest,\n    options?: SparkConfigurationRenameSparkConfigurationOptionalParams,\n  ): Promise<void>;\n}\n"]}