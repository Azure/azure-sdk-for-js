/*
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is
 * regenerated.
 */

import * as msRest from "@azure/ms-rest-js";
import * as Models from "../models";
import * as Mappers from "../models/sparkBatchMappers";
import * as Parameters from "../models/parameters";
import { SynapseClientContext } from "../synapseClientContext";

/** Class representing a SparkBatch. */
export class SparkBatch {
  private readonly client: SynapseClientContext;

  /**
   * Create a SparkBatch.
   * @param {SynapseClientContext} client Reference to the service client.
   */
  constructor(client: SynapseClientContext) {
    this.client = client;
  }

  /**
   * List all spark batch jobs which are running under a particular spark pool.
   * @param workspaceName The name of the workspace to execute operations on.
   * @param sparkPoolName Name of the spark pool. "ondemand" targets the ondemand pool.
   * @param [options] The optional parameters
   * @returns Promise<Models.SparkBatchListResponse>
   */
  list(workspaceName: string, sparkPoolName: string, options?: Models.SparkBatchListOptionalParams): Promise<Models.SparkBatchListResponse>;
  /**
   * @param workspaceName The name of the workspace to execute operations on.
   * @param sparkPoolName Name of the spark pool. "ondemand" targets the ondemand pool.
   * @param callback The callback
   */
  list(workspaceName: string, sparkPoolName: string, callback: msRest.ServiceCallback<Models.ExtendedLivyListBatchResponse>): void;
  /**
   * @param workspaceName The name of the workspace to execute operations on.
   * @param sparkPoolName Name of the spark pool. "ondemand" targets the ondemand pool.
   * @param options The optional parameters
   * @param callback The callback
   */
  list(workspaceName: string, sparkPoolName: string, options: Models.SparkBatchListOptionalParams, callback: msRest.ServiceCallback<Models.ExtendedLivyListBatchResponse>): void;
  list(workspaceName: string, sparkPoolName: string, options?: Models.SparkBatchListOptionalParams | msRest.ServiceCallback<Models.ExtendedLivyListBatchResponse>, callback?: msRest.ServiceCallback<Models.ExtendedLivyListBatchResponse>): Promise<Models.SparkBatchListResponse> {
    return this.client.sendOperationRequest(
      {
        workspaceName,
        sparkPoolName,
        options
      },
      listOperationSpec,
      callback) as Promise<Models.SparkBatchListResponse>;
  }

  /**
   * Create new spark batch job.
   * @param workspaceName The name of the workspace to execute operations on.
   * @param sparkPoolName Name of the spark pool. "ondemand" targets the ondemand pool.
   * @param livyRequest Livy compatible batch job request payload.
   * @param [options] The optional parameters
   * @returns Promise<Models.SparkBatchCreateResponse>
   */
  create(workspaceName: string, sparkPoolName: string, livyRequest: Models.ExtendedLivyBatchRequest, options?: Models.SparkBatchCreateOptionalParams): Promise<Models.SparkBatchCreateResponse>;
  /**
   * @param workspaceName The name of the workspace to execute operations on.
   * @param sparkPoolName Name of the spark pool. "ondemand" targets the ondemand pool.
   * @param livyRequest Livy compatible batch job request payload.
   * @param callback The callback
   */
  create(workspaceName: string, sparkPoolName: string, livyRequest: Models.ExtendedLivyBatchRequest, callback: msRest.ServiceCallback<Models.ExtendedLivyBatchResponse>): void;
  /**
   * @param workspaceName The name of the workspace to execute operations on.
   * @param sparkPoolName Name of the spark pool. "ondemand" targets the ondemand pool.
   * @param livyRequest Livy compatible batch job request payload.
   * @param options The optional parameters
   * @param callback The callback
   */
  create(workspaceName: string, sparkPoolName: string, livyRequest: Models.ExtendedLivyBatchRequest, options: Models.SparkBatchCreateOptionalParams, callback: msRest.ServiceCallback<Models.ExtendedLivyBatchResponse>): void;
  create(workspaceName: string, sparkPoolName: string, livyRequest: Models.ExtendedLivyBatchRequest, options?: Models.SparkBatchCreateOptionalParams | msRest.ServiceCallback<Models.ExtendedLivyBatchResponse>, callback?: msRest.ServiceCallback<Models.ExtendedLivyBatchResponse>): Promise<Models.SparkBatchCreateResponse> {
    return this.client.sendOperationRequest(
      {
        workspaceName,
        sparkPoolName,
        livyRequest,
        options
      },
      createOperationSpec,
      callback) as Promise<Models.SparkBatchCreateResponse>;
  }

  /**
   * Gets a single spark batch job.
   * @param workspaceName The name of the workspace to execute operations on.
   * @param sparkPoolName Name of the spark pool. "ondemand" targets the ondemand pool.
   * @param batchId Identifier for the batch job.
   * @param [options] The optional parameters
   * @returns Promise<Models.SparkBatchGetResponse>
   */
  get(workspaceName: string, sparkPoolName: string, batchId: number, options?: Models.SparkBatchGetOptionalParams): Promise<Models.SparkBatchGetResponse>;
  /**
   * @param workspaceName The name of the workspace to execute operations on.
   * @param sparkPoolName Name of the spark pool. "ondemand" targets the ondemand pool.
   * @param batchId Identifier for the batch job.
   * @param callback The callback
   */
  get(workspaceName: string, sparkPoolName: string, batchId: number, callback: msRest.ServiceCallback<Models.ExtendedLivyBatchResponse>): void;
  /**
   * @param workspaceName The name of the workspace to execute operations on.
   * @param sparkPoolName Name of the spark pool. "ondemand" targets the ondemand pool.
   * @param batchId Identifier for the batch job.
   * @param options The optional parameters
   * @param callback The callback
   */
  get(workspaceName: string, sparkPoolName: string, batchId: number, options: Models.SparkBatchGetOptionalParams, callback: msRest.ServiceCallback<Models.ExtendedLivyBatchResponse>): void;
  get(workspaceName: string, sparkPoolName: string, batchId: number, options?: Models.SparkBatchGetOptionalParams | msRest.ServiceCallback<Models.ExtendedLivyBatchResponse>, callback?: msRest.ServiceCallback<Models.ExtendedLivyBatchResponse>): Promise<Models.SparkBatchGetResponse> {
    return this.client.sendOperationRequest(
      {
        workspaceName,
        sparkPoolName,
        batchId,
        options
      },
      getOperationSpec,
      callback) as Promise<Models.SparkBatchGetResponse>;
  }

  /**
   * Cancels a running spark batch job.
   * @param workspaceName The name of the workspace to execute operations on.
   * @param sparkPoolName Name of the spark pool. "ondemand" targets the ondemand pool.
   * @param batchId Identifier for the batch job.
   * @param [options] The optional parameters
   * @returns Promise<msRest.RestResponse>
   */
  deleteMethod(workspaceName: string, sparkPoolName: string, batchId: number, options?: msRest.RequestOptionsBase): Promise<msRest.RestResponse>;
  /**
   * @param workspaceName The name of the workspace to execute operations on.
   * @param sparkPoolName Name of the spark pool. "ondemand" targets the ondemand pool.
   * @param batchId Identifier for the batch job.
   * @param callback The callback
   */
  deleteMethod(workspaceName: string, sparkPoolName: string, batchId: number, callback: msRest.ServiceCallback<void>): void;
  /**
   * @param workspaceName The name of the workspace to execute operations on.
   * @param sparkPoolName Name of the spark pool. "ondemand" targets the ondemand pool.
   * @param batchId Identifier for the batch job.
   * @param options The optional parameters
   * @param callback The callback
   */
  deleteMethod(workspaceName: string, sparkPoolName: string, batchId: number, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<void>): void;
  deleteMethod(workspaceName: string, sparkPoolName: string, batchId: number, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<void>, callback?: msRest.ServiceCallback<void>): Promise<msRest.RestResponse> {
    return this.client.sendOperationRequest(
      {
        workspaceName,
        sparkPoolName,
        batchId,
        options
      },
      deleteMethodOperationSpec,
      callback);
  }
}

// Operation Specifications
const serializer = new msRest.Serializer(Mappers);
const listOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "livyApi/versions/{livyApiVersion}/sparkPools/{sparkPoolName}/batches",
  urlParameters: [
    Parameters.workspaceName,
    Parameters.synapseDnsSuffix,
    Parameters.livyApiVersion,
    Parameters.sparkPoolName
  ],
  queryParameters: [
    Parameters.from,
    Parameters.size,
    Parameters.detailed
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    200: {
      bodyMapper: Mappers.ExtendedLivyListBatchResponse
    },
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  serializer
};

const createOperationSpec: msRest.OperationSpec = {
  httpMethod: "POST",
  path: "livyApi/versions/{livyApiVersion}/sparkPools/{sparkPoolName}/batches",
  urlParameters: [
    Parameters.workspaceName,
    Parameters.synapseDnsSuffix,
    Parameters.livyApiVersion,
    Parameters.sparkPoolName
  ],
  queryParameters: [
    Parameters.detailed
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  requestBody: {
    parameterPath: "livyRequest",
    mapper: {
      ...Mappers.ExtendedLivyBatchRequest,
      required: true
    }
  },
  responses: {
    200: {
      bodyMapper: Mappers.ExtendedLivyBatchResponse
    },
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  serializer
};

const getOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "livyApi/versions/{livyApiVersion}/sparkPools/{sparkPoolName}/batches/{batchId}",
  urlParameters: [
    Parameters.workspaceName,
    Parameters.synapseDnsSuffix,
    Parameters.livyApiVersion,
    Parameters.sparkPoolName,
    Parameters.batchId
  ],
  queryParameters: [
    Parameters.detailed
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    200: {
      bodyMapper: Mappers.ExtendedLivyBatchResponse
    },
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  serializer
};

const deleteMethodOperationSpec: msRest.OperationSpec = {
  httpMethod: "DELETE",
  path: "livyApi/versions/{livyApiVersion}/sparkPools/{sparkPoolName}/batches/{batchId}",
  urlParameters: [
    Parameters.workspaceName,
    Parameters.synapseDnsSuffix,
    Parameters.livyApiVersion,
    Parameters.sparkPoolName,
    Parameters.batchId
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    200: {},
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  serializer
};
