/*
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is
 * regenerated.
 */

import * as msRest from "@azure/ms-rest-js";
import * as Models from "../models";
import * as Mappers from "../models/monitoringMappers";
import * as Parameters from "../models/parameters";
import { SynapseClientContext } from "../synapseClientContext";

/** Class representing a Monitoring. */
export class Monitoring {
  private readonly client: SynapseClientContext;

  /**
   * Create a Monitoring.
   * @param {SynapseClientContext} client Reference to the service client.
   */
  constructor(client: SynapseClientContext) {
    this.client = client;
  }

  /**
   * Get History Server Data for a given workspace, pool, livyid, appid and attemptId
   * @param workspaceName The name of the workspace to execute operations on.
   * @param poolName The spark pool name.
   * @param livyId The livy id.
   * @param appId The application id.
   * @param attemptId The attempt id.
   * @param [options] The optional parameters
   * @returns Promise<Models.MonitoringGetHistoryServerDataResponse>
   */
  getHistoryServerData(workspaceName: string, poolName: string, livyId: string, appId: string, attemptId: string, options?: msRest.RequestOptionsBase): Promise<Models.MonitoringGetHistoryServerDataResponse>;
  /**
   * @param workspaceName The name of the workspace to execute operations on.
   * @param poolName The spark pool name.
   * @param livyId The livy id.
   * @param appId The application id.
   * @param attemptId The attempt id.
   * @param callback The callback
   */
  getHistoryServerData(workspaceName: string, poolName: string, livyId: string, appId: string, attemptId: string, callback: msRest.ServiceCallback<Models.HistoryServerDataResponse>): void;
  /**
   * @param workspaceName The name of the workspace to execute operations on.
   * @param poolName The spark pool name.
   * @param livyId The livy id.
   * @param appId The application id.
   * @param attemptId The attempt id.
   * @param options The optional parameters
   * @param callback The callback
   */
  getHistoryServerData(workspaceName: string, poolName: string, livyId: string, appId: string, attemptId: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.HistoryServerDataResponse>): void;
  getHistoryServerData(workspaceName: string, poolName: string, livyId: string, appId: string, attemptId: string, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<Models.HistoryServerDataResponse>, callback?: msRest.ServiceCallback<Models.HistoryServerDataResponse>): Promise<Models.MonitoringGetHistoryServerDataResponse> {
    return this.client.sendOperationRequest(
      {
        workspaceName,
        poolName,
        livyId,
        appId,
        attemptId,
        options
      },
      getHistoryServerDataOperationSpec,
      callback) as Promise<Models.MonitoringGetHistoryServerDataResponse>;
  }

  /**
   * Get list of spark applications for the workspace.
   * @param workspaceName The name of the workspace to execute operations on.
   * @param [options] The optional parameters
   * @returns Promise<Models.MonitoringGetSparkJobListResponse>
   */
  getSparkJobList(workspaceName: string, options?: msRest.RequestOptionsBase): Promise<Models.MonitoringGetSparkJobListResponse>;
  /**
   * @param workspaceName The name of the workspace to execute operations on.
   * @param callback The callback
   */
  getSparkJobList(workspaceName: string, callback: msRest.ServiceCallback<Models.SparkJobListViewResponse>): void;
  /**
   * @param workspaceName The name of the workspace to execute operations on.
   * @param options The optional parameters
   * @param callback The callback
   */
  getSparkJobList(workspaceName: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.SparkJobListViewResponse>): void;
  getSparkJobList(workspaceName: string, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<Models.SparkJobListViewResponse>, callback?: msRest.ServiceCallback<Models.SparkJobListViewResponse>): Promise<Models.MonitoringGetSparkJobListResponse> {
    return this.client.sendOperationRequest(
      {
        workspaceName,
        options
      },
      getSparkJobListOperationSpec,
      callback) as Promise<Models.MonitoringGetSparkJobListResponse>;
  }

  /**
   * Get one spark application details given the workspace name, pool name and livyid.
   * @param workspaceName The name of the workspace to execute operations on.
   * @param poolName The spark pool name.
   * @param livyId The livy id.
   * @param [options] The optional parameters
   * @returns Promise<Models.MonitoringGetApplicationDetailsResponse>
   */
  getApplicationDetails(workspaceName: string, poolName: string, livyId: string, options?: msRest.RequestOptionsBase): Promise<Models.MonitoringGetApplicationDetailsResponse>;
  /**
   * @param workspaceName The name of the workspace to execute operations on.
   * @param poolName The spark pool name.
   * @param livyId The livy id.
   * @param callback The callback
   */
  getApplicationDetails(workspaceName: string, poolName: string, livyId: string, callback: msRest.ServiceCallback<Models.SparkJobListViewResponse>): void;
  /**
   * @param workspaceName The name of the workspace to execute operations on.
   * @param poolName The spark pool name.
   * @param livyId The livy id.
   * @param options The optional parameters
   * @param callback The callback
   */
  getApplicationDetails(workspaceName: string, poolName: string, livyId: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.SparkJobListViewResponse>): void;
  getApplicationDetails(workspaceName: string, poolName: string, livyId: string, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<Models.SparkJobListViewResponse>, callback?: msRest.ServiceCallback<Models.SparkJobListViewResponse>): Promise<Models.MonitoringGetApplicationDetailsResponse> {
    return this.client.sendOperationRequest(
      {
        workspaceName,
        poolName,
        livyId,
        options
      },
      getApplicationDetailsOperationSpec,
      callback) as Promise<Models.MonitoringGetApplicationDetailsResponse>;
  }

  /**
   * Get History server properties.
   * @param workspaceName The name of the workspace to execute operations on.
   * @param [options] The optional parameters
   * @returns Promise<Models.MonitoringGetHistoryServerPropertiesResponse>
   */
  getHistoryServerProperties(workspaceName: string, options?: msRest.RequestOptionsBase): Promise<Models.MonitoringGetHistoryServerPropertiesResponse>;
  /**
   * @param workspaceName The name of the workspace to execute operations on.
   * @param callback The callback
   */
  getHistoryServerProperties(workspaceName: string, callback: msRest.ServiceCallback<Models.HistoryServerPropertiesResponse>): void;
  /**
   * @param workspaceName The name of the workspace to execute operations on.
   * @param options The optional parameters
   * @param callback The callback
   */
  getHistoryServerProperties(workspaceName: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.HistoryServerPropertiesResponse>): void;
  getHistoryServerProperties(workspaceName: string, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<Models.HistoryServerPropertiesResponse>, callback?: msRest.ServiceCallback<Models.HistoryServerPropertiesResponse>): Promise<Models.MonitoringGetHistoryServerPropertiesResponse> {
    return this.client.sendOperationRequest(
      {
        workspaceName,
        options
      },
      getHistoryServerPropertiesOperationSpec,
      callback) as Promise<Models.MonitoringGetHistoryServerPropertiesResponse>;
  }

  /**
   * Get History Server Diagnostic Data for a given workspace, pool, livyid, appid and attemptId
   * @param workspaceName The name of the workspace to execute operations on.
   * @param poolName The spark pool name.
   * @param livyId The livy id.
   * @param appId The application id.
   * @param attemptId The attempt id.
   * @param [options] The optional parameters
   * @returns Promise<Models.MonitoringGetHistoryServerDiagnosticResponse>
   */
  getHistoryServerDiagnostic(workspaceName: string, poolName: string, livyId: string, appId: string, attemptId: string, options?: msRest.RequestOptionsBase): Promise<Models.MonitoringGetHistoryServerDiagnosticResponse>;
  /**
   * @param workspaceName The name of the workspace to execute operations on.
   * @param poolName The spark pool name.
   * @param livyId The livy id.
   * @param appId The application id.
   * @param attemptId The attempt id.
   * @param callback The callback
   */
  getHistoryServerDiagnostic(workspaceName: string, poolName: string, livyId: string, appId: string, attemptId: string, callback: msRest.ServiceCallback<Models.HistoryServerDiagnosticResponse>): void;
  /**
   * @param workspaceName The name of the workspace to execute operations on.
   * @param poolName The spark pool name.
   * @param livyId The livy id.
   * @param appId The application id.
   * @param attemptId The attempt id.
   * @param options The optional parameters
   * @param callback The callback
   */
  getHistoryServerDiagnostic(workspaceName: string, poolName: string, livyId: string, appId: string, attemptId: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.HistoryServerDiagnosticResponse>): void;
  getHistoryServerDiagnostic(workspaceName: string, poolName: string, livyId: string, appId: string, attemptId: string, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<Models.HistoryServerDiagnosticResponse>, callback?: msRest.ServiceCallback<Models.HistoryServerDiagnosticResponse>): Promise<Models.MonitoringGetHistoryServerDiagnosticResponse> {
    return this.client.sendOperationRequest(
      {
        workspaceName,
        poolName,
        livyId,
        appId,
        attemptId,
        options
      },
      getHistoryServerDiagnosticOperationSpec,
      callback) as Promise<Models.MonitoringGetHistoryServerDiagnosticResponse>;
  }

  /**
   * Get History Server Graph Data for a given workspace, pool, livyid, appid and attemptId
   * @param workspaceName The name of the workspace to execute operations on.
   * @param poolName The spark pool name.
   * @param livyId The livy id.
   * @param appId The application id.
   * @param attemptId The attempt id.
   * @param [options] The optional parameters
   * @returns Promise<Models.MonitoringGetHistoryServerGraphResponse>
   */
  getHistoryServerGraph(workspaceName: string, poolName: string, livyId: string, appId: string, attemptId: string, options?: msRest.RequestOptionsBase): Promise<Models.MonitoringGetHistoryServerGraphResponse>;
  /**
   * @param workspaceName The name of the workspace to execute operations on.
   * @param poolName The spark pool name.
   * @param livyId The livy id.
   * @param appId The application id.
   * @param attemptId The attempt id.
   * @param callback The callback
   */
  getHistoryServerGraph(workspaceName: string, poolName: string, livyId: string, appId: string, attemptId: string, callback: msRest.ServiceCallback<Models.HistoryServerGraphResponse>): void;
  /**
   * @param workspaceName The name of the workspace to execute operations on.
   * @param poolName The spark pool name.
   * @param livyId The livy id.
   * @param appId The application id.
   * @param attemptId The attempt id.
   * @param options The optional parameters
   * @param callback The callback
   */
  getHistoryServerGraph(workspaceName: string, poolName: string, livyId: string, appId: string, attemptId: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.HistoryServerGraphResponse>): void;
  getHistoryServerGraph(workspaceName: string, poolName: string, livyId: string, appId: string, attemptId: string, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<Models.HistoryServerGraphResponse>, callback?: msRest.ServiceCallback<Models.HistoryServerGraphResponse>): Promise<Models.MonitoringGetHistoryServerGraphResponse> {
    return this.client.sendOperationRequest(
      {
        workspaceName,
        poolName,
        livyId,
        appId,
        attemptId,
        options
      },
      getHistoryServerGraphOperationSpec,
      callback) as Promise<Models.MonitoringGetHistoryServerGraphResponse>;
  }
}

// Operation Specifications
const serializer = new msRest.Serializer(Mappers);
const getHistoryServerDataOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "monitoring/workloadTypes/spark/pools/{poolName}/livyIds/{livyId}/applications/{appId}/attemptIds/{attemptId}/historyServerData",
  urlParameters: [
    Parameters.workspaceName,
    Parameters.synapseDnsSuffix,
    Parameters.poolName,
    Parameters.livyId,
    Parameters.appId,
    Parameters.attemptId
  ],
  queryParameters: [
    Parameters.apiVersion
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    200: {
      bodyMapper: Mappers.HistoryServerDataResponse
    },
    401: {},
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  serializer
};

const getSparkJobListOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "monitoring/workloadTypes/spark/Applications",
  urlParameters: [
    Parameters.workspaceName,
    Parameters.synapseDnsSuffix
  ],
  queryParameters: [
    Parameters.apiVersion
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    200: {
      bodyMapper: Mappers.SparkJobListViewResponse
    },
    401: {},
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  serializer
};

const getApplicationDetailsOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "monitoring/workloadTypes/spark/pools/{poolName}/livyIds/{livyId}",
  urlParameters: [
    Parameters.workspaceName,
    Parameters.synapseDnsSuffix,
    Parameters.poolName,
    Parameters.livyId
  ],
  queryParameters: [
    Parameters.apiVersion
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    200: {
      bodyMapper: Mappers.SparkJobListViewResponse
    },
    401: {},
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  serializer
};

const getHistoryServerPropertiesOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "monitoring/workloadTypes/spark/historyServerProperties",
  urlParameters: [
    Parameters.workspaceName,
    Parameters.synapseDnsSuffix
  ],
  queryParameters: [
    Parameters.apiVersion
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    200: {
      bodyMapper: Mappers.HistoryServerPropertiesResponse
    },
    401: {},
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  serializer
};

const getHistoryServerDiagnosticOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "monitoring/workloadTypes/spark/pools/{poolName}/livyIds/{livyId}/applications/{appId}/attemptIds/{attemptId}/historyServerDiagnostic",
  urlParameters: [
    Parameters.workspaceName,
    Parameters.synapseDnsSuffix,
    Parameters.poolName,
    Parameters.livyId,
    Parameters.appId,
    Parameters.attemptId
  ],
  queryParameters: [
    Parameters.apiVersion
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    200: {
      bodyMapper: Mappers.HistoryServerDiagnosticResponse
    },
    401: {},
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  serializer
};

const getHistoryServerGraphOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "monitoring/workloadTypes/spark/pools/{poolName}/livyIds/{livyId}/applications/{appId}/attemptIds/{attemptId}/historyServerGraph",
  urlParameters: [
    Parameters.workspaceName,
    Parameters.synapseDnsSuffix,
    Parameters.poolName,
    Parameters.livyId,
    Parameters.appId,
    Parameters.attemptId
  ],
  queryParameters: [
    Parameters.apiVersion
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    200: {
      bodyMapper: Mappers.HistoryServerGraphResponse
    },
    401: {},
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  serializer
};
