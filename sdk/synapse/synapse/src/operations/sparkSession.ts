/*
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is
 * regenerated.
 */

import * as msRest from "@azure/ms-rest-js";
import * as Models from "../models";
import * as Mappers from "../models/sparkSessionMappers";
import * as Parameters from "../models/parameters";
import { SynapseClientContext } from "../synapseClientContext";

/** Class representing a SparkSession. */
export class SparkSession {
  private readonly client: SynapseClientContext;

  /**
   * Create a SparkSession.
   * @param {SynapseClientContext} client Reference to the service client.
   */
  constructor(client: SynapseClientContext) {
    this.client = client;
  }

  /**
   * List all spark sessions which are running under a particular spark pool.
   * @param workspaceName The name of the workspace to execute operations on.
   * @param sparkPoolName Name of the spark pool. "ondemand" targets the ondemand pool.
   * @param [options] The optional parameters
   * @returns Promise<Models.SparkSessionListResponse>
   */
  list(workspaceName: string, sparkPoolName: string, options?: Models.SparkSessionListOptionalParams): Promise<Models.SparkSessionListResponse>;
  /**
   * @param workspaceName The name of the workspace to execute operations on.
   * @param sparkPoolName Name of the spark pool. "ondemand" targets the ondemand pool.
   * @param callback The callback
   */
  list(workspaceName: string, sparkPoolName: string, callback: msRest.ServiceCallback<Models.ExtendedLivyListSessionResponse>): void;
  /**
   * @param workspaceName The name of the workspace to execute operations on.
   * @param sparkPoolName Name of the spark pool. "ondemand" targets the ondemand pool.
   * @param options The optional parameters
   * @param callback The callback
   */
  list(workspaceName: string, sparkPoolName: string, options: Models.SparkSessionListOptionalParams, callback: msRest.ServiceCallback<Models.ExtendedLivyListSessionResponse>): void;
  list(workspaceName: string, sparkPoolName: string, options?: Models.SparkSessionListOptionalParams | msRest.ServiceCallback<Models.ExtendedLivyListSessionResponse>, callback?: msRest.ServiceCallback<Models.ExtendedLivyListSessionResponse>): Promise<Models.SparkSessionListResponse> {
    return this.client.sendOperationRequest(
      {
        workspaceName,
        sparkPoolName,
        options
      },
      listOperationSpec,
      callback) as Promise<Models.SparkSessionListResponse>;
  }

  /**
   * Create new spark session.
   * @param workspaceName The name of the workspace to execute operations on.
   * @param sparkPoolName Name of the spark pool. "ondemand" targets the ondemand pool.
   * @param livyRequest Livy compatible batch job request payload.
   * @param [options] The optional parameters
   * @returns Promise<Models.SparkSessionCreateResponse>
   */
  create(workspaceName: string, sparkPoolName: string, livyRequest: Models.ExtendedLivySessionRequest, options?: Models.SparkSessionCreateOptionalParams): Promise<Models.SparkSessionCreateResponse>;
  /**
   * @param workspaceName The name of the workspace to execute operations on.
   * @param sparkPoolName Name of the spark pool. "ondemand" targets the ondemand pool.
   * @param livyRequest Livy compatible batch job request payload.
   * @param callback The callback
   */
  create(workspaceName: string, sparkPoolName: string, livyRequest: Models.ExtendedLivySessionRequest, callback: msRest.ServiceCallback<Models.ExtendedLivySessionResponse>): void;
  /**
   * @param workspaceName The name of the workspace to execute operations on.
   * @param sparkPoolName Name of the spark pool. "ondemand" targets the ondemand pool.
   * @param livyRequest Livy compatible batch job request payload.
   * @param options The optional parameters
   * @param callback The callback
   */
  create(workspaceName: string, sparkPoolName: string, livyRequest: Models.ExtendedLivySessionRequest, options: Models.SparkSessionCreateOptionalParams, callback: msRest.ServiceCallback<Models.ExtendedLivySessionResponse>): void;
  create(workspaceName: string, sparkPoolName: string, livyRequest: Models.ExtendedLivySessionRequest, options?: Models.SparkSessionCreateOptionalParams | msRest.ServiceCallback<Models.ExtendedLivySessionResponse>, callback?: msRest.ServiceCallback<Models.ExtendedLivySessionResponse>): Promise<Models.SparkSessionCreateResponse> {
    return this.client.sendOperationRequest(
      {
        workspaceName,
        sparkPoolName,
        livyRequest,
        options
      },
      createOperationSpec,
      callback) as Promise<Models.SparkSessionCreateResponse>;
  }

  /**
   * Gets a single spark session.
   * @param workspaceName The name of the workspace to execute operations on.
   * @param sparkPoolName Name of the spark pool. "ondemand" targets the ondemand pool.
   * @param sessionId Identifier for the session.
   * @param [options] The optional parameters
   * @returns Promise<Models.SparkSessionGetResponse>
   */
  get(workspaceName: string, sparkPoolName: string, sessionId: number, options?: Models.SparkSessionGetOptionalParams): Promise<Models.SparkSessionGetResponse>;
  /**
   * @param workspaceName The name of the workspace to execute operations on.
   * @param sparkPoolName Name of the spark pool. "ondemand" targets the ondemand pool.
   * @param sessionId Identifier for the session.
   * @param callback The callback
   */
  get(workspaceName: string, sparkPoolName: string, sessionId: number, callback: msRest.ServiceCallback<Models.ExtendedLivySessionResponse>): void;
  /**
   * @param workspaceName The name of the workspace to execute operations on.
   * @param sparkPoolName Name of the spark pool. "ondemand" targets the ondemand pool.
   * @param sessionId Identifier for the session.
   * @param options The optional parameters
   * @param callback The callback
   */
  get(workspaceName: string, sparkPoolName: string, sessionId: number, options: Models.SparkSessionGetOptionalParams, callback: msRest.ServiceCallback<Models.ExtendedLivySessionResponse>): void;
  get(workspaceName: string, sparkPoolName: string, sessionId: number, options?: Models.SparkSessionGetOptionalParams | msRest.ServiceCallback<Models.ExtendedLivySessionResponse>, callback?: msRest.ServiceCallback<Models.ExtendedLivySessionResponse>): Promise<Models.SparkSessionGetResponse> {
    return this.client.sendOperationRequest(
      {
        workspaceName,
        sparkPoolName,
        sessionId,
        options
      },
      getOperationSpec,
      callback) as Promise<Models.SparkSessionGetResponse>;
  }

  /**
   * Cancels a running spark session.
   * @param workspaceName The name of the workspace to execute operations on.
   * @param sparkPoolName Name of the spark pool. "ondemand"
   * targets the ondemand pool.
   * @param sessionId Identifier for the session.
   * @param [options] The optional parameters
   * @returns Promise<msRest.RestResponse>
   */
  deleteMethod(workspaceName: string, sparkPoolName: string, sessionId: number, options?: msRest.RequestOptionsBase): Promise<msRest.RestResponse>;
  /**
   * @param workspaceName The name of the workspace to execute operations on.
   * @param sparkPoolName Name of the spark pool. "ondemand"
   * targets the ondemand pool.
   * @param sessionId Identifier for the session.
   * @param callback The callback
   */
  deleteMethod(workspaceName: string, sparkPoolName: string, sessionId: number, callback: msRest.ServiceCallback<void>): void;
  /**
   * @param workspaceName The name of the workspace to execute operations on.
   * @param sparkPoolName Name of the spark pool. "ondemand"
   * targets the ondemand pool.
   * @param sessionId Identifier for the session.
   * @param options The optional parameters
   * @param callback The callback
   */
  deleteMethod(workspaceName: string, sparkPoolName: string, sessionId: number, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<void>): void;
  deleteMethod(workspaceName: string, sparkPoolName: string, sessionId: number, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<void>, callback?: msRest.ServiceCallback<void>): Promise<msRest.RestResponse> {
    return this.client.sendOperationRequest(
      {
        workspaceName,
        sparkPoolName,
        sessionId,
        options
      },
      deleteMethodOperationSpec,
      callback);
  }

  /**
   * Sends a keep alive call to the current session to reset the session timeout.
   * @param workspaceName The name of the workspace to execute operations on.
   * @param sparkPoolName Name of the spark pool. "ondemand"
   * targets the ondemand pool.
   * @param sessionId Identifier for the session.
   * @param [options] The optional parameters
   * @returns Promise<msRest.RestResponse>
   */
  resetTimeout(workspaceName: string, sparkPoolName: string, sessionId: number, options?: msRest.RequestOptionsBase): Promise<msRest.RestResponse>;
  /**
   * @param workspaceName The name of the workspace to execute operations on.
   * @param sparkPoolName Name of the spark pool. "ondemand"
   * targets the ondemand pool.
   * @param sessionId Identifier for the session.
   * @param callback The callback
   */
  resetTimeout(workspaceName: string, sparkPoolName: string, sessionId: number, callback: msRest.ServiceCallback<void>): void;
  /**
   * @param workspaceName The name of the workspace to execute operations on.
   * @param sparkPoolName Name of the spark pool. "ondemand"
   * targets the ondemand pool.
   * @param sessionId Identifier for the session.
   * @param options The optional parameters
   * @param callback The callback
   */
  resetTimeout(workspaceName: string, sparkPoolName: string, sessionId: number, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<void>): void;
  resetTimeout(workspaceName: string, sparkPoolName: string, sessionId: number, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<void>, callback?: msRest.ServiceCallback<void>): Promise<msRest.RestResponse> {
    return this.client.sendOperationRequest(
      {
        workspaceName,
        sparkPoolName,
        sessionId,
        options
      },
      resetTimeoutOperationSpec,
      callback);
  }

  /**
   * Gets a list of statements within a spark session.
   * @param workspaceName The name of the workspace to execute operations on.
   * @param sparkPoolName Name of the spark pool. "ondemand" targets the ondemand pool.
   * @param sessionId Identifier for the session.
   * @param [options] The optional parameters
   * @returns Promise<Models.SparkSessionListStatementsResponse>
   */
  listStatements(workspaceName: string, sparkPoolName: string, sessionId: number, options?: msRest.RequestOptionsBase): Promise<Models.SparkSessionListStatementsResponse>;
  /**
   * @param workspaceName The name of the workspace to execute operations on.
   * @param sparkPoolName Name of the spark pool. "ondemand" targets the ondemand pool.
   * @param sessionId Identifier for the session.
   * @param callback The callback
   */
  listStatements(workspaceName: string, sparkPoolName: string, sessionId: number, callback: msRest.ServiceCallback<Models.LivyStatementsResponseBody>): void;
  /**
   * @param workspaceName The name of the workspace to execute operations on.
   * @param sparkPoolName Name of the spark pool. "ondemand" targets the ondemand pool.
   * @param sessionId Identifier for the session.
   * @param options The optional parameters
   * @param callback The callback
   */
  listStatements(workspaceName: string, sparkPoolName: string, sessionId: number, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.LivyStatementsResponseBody>): void;
  listStatements(workspaceName: string, sparkPoolName: string, sessionId: number, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<Models.LivyStatementsResponseBody>, callback?: msRest.ServiceCallback<Models.LivyStatementsResponseBody>): Promise<Models.SparkSessionListStatementsResponse> {
    return this.client.sendOperationRequest(
      {
        workspaceName,
        sparkPoolName,
        sessionId,
        options
      },
      listStatementsOperationSpec,
      callback) as Promise<Models.SparkSessionListStatementsResponse>;
  }

  /**
   * Create statement within a spark session.
   * @param workspaceName The name of the workspace to execute operations on.
   * @param sparkPoolName Name of the spark pool. "ondemand" targets the ondemand pool.
   * @param sessionId Identifier for the session.
   * @param livyRequest Livy compatible batch job request payload.
   * @param [options] The optional parameters
   * @returns Promise<Models.SparkSessionCreateStatementResponse>
   */
  createStatement(workspaceName: string, sparkPoolName: string, sessionId: number, livyRequest: Models.LivyStatementRequestBody, options?: msRest.RequestOptionsBase): Promise<Models.SparkSessionCreateStatementResponse>;
  /**
   * @param workspaceName The name of the workspace to execute operations on.
   * @param sparkPoolName Name of the spark pool. "ondemand" targets the ondemand pool.
   * @param sessionId Identifier for the session.
   * @param livyRequest Livy compatible batch job request payload.
   * @param callback The callback
   */
  createStatement(workspaceName: string, sparkPoolName: string, sessionId: number, livyRequest: Models.LivyStatementRequestBody, callback: msRest.ServiceCallback<Models.LivyStatementResponseBody>): void;
  /**
   * @param workspaceName The name of the workspace to execute operations on.
   * @param sparkPoolName Name of the spark pool. "ondemand" targets the ondemand pool.
   * @param sessionId Identifier for the session.
   * @param livyRequest Livy compatible batch job request payload.
   * @param options The optional parameters
   * @param callback The callback
   */
  createStatement(workspaceName: string, sparkPoolName: string, sessionId: number, livyRequest: Models.LivyStatementRequestBody, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.LivyStatementResponseBody>): void;
  createStatement(workspaceName: string, sparkPoolName: string, sessionId: number, livyRequest: Models.LivyStatementRequestBody, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<Models.LivyStatementResponseBody>, callback?: msRest.ServiceCallback<Models.LivyStatementResponseBody>): Promise<Models.SparkSessionCreateStatementResponse> {
    return this.client.sendOperationRequest(
      {
        workspaceName,
        sparkPoolName,
        sessionId,
        livyRequest,
        options
      },
      createStatementOperationSpec,
      callback) as Promise<Models.SparkSessionCreateStatementResponse>;
  }

  /**
   * Gets a single statement within a spark session.
   * @param workspaceName The name of the workspace to execute operations on.
   * @param sparkPoolName Name of the spark pool. "ondemand" targets the ondemand pool.
   * @param sessionId Identifier for the session.
   * @param statementId Identifier for the statement.
   * @param [options] The optional parameters
   * @returns Promise<Models.SparkSessionGetStatementResponse>
   */
  getStatement(workspaceName: string, sparkPoolName: string, sessionId: number, statementId: number, options?: msRest.RequestOptionsBase): Promise<Models.SparkSessionGetStatementResponse>;
  /**
   * @param workspaceName The name of the workspace to execute operations on.
   * @param sparkPoolName Name of the spark pool. "ondemand" targets the ondemand pool.
   * @param sessionId Identifier for the session.
   * @param statementId Identifier for the statement.
   * @param callback The callback
   */
  getStatement(workspaceName: string, sparkPoolName: string, sessionId: number, statementId: number, callback: msRest.ServiceCallback<Models.LivyStatementResponseBody>): void;
  /**
   * @param workspaceName The name of the workspace to execute operations on.
   * @param sparkPoolName Name of the spark pool. "ondemand" targets the ondemand pool.
   * @param sessionId Identifier for the session.
   * @param statementId Identifier for the statement.
   * @param options The optional parameters
   * @param callback The callback
   */
  getStatement(workspaceName: string, sparkPoolName: string, sessionId: number, statementId: number, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.LivyStatementResponseBody>): void;
  getStatement(workspaceName: string, sparkPoolName: string, sessionId: number, statementId: number, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<Models.LivyStatementResponseBody>, callback?: msRest.ServiceCallback<Models.LivyStatementResponseBody>): Promise<Models.SparkSessionGetStatementResponse> {
    return this.client.sendOperationRequest(
      {
        workspaceName,
        sparkPoolName,
        sessionId,
        statementId,
        options
      },
      getStatementOperationSpec,
      callback) as Promise<Models.SparkSessionGetStatementResponse>;
  }

  /**
   * Kill a statement within a session.
   * @param workspaceName The name of the workspace to execute operations on.
   * @param sparkPoolName Name of the spark pool. "ondemand" targets the ondemand pool.
   * @param sessionId Identifier for the session.
   * @param statementId Identifier for the statement.
   * @param [options] The optional parameters
   * @returns Promise<Models.SparkSessionDeleteStatementResponse>
   */
  deleteStatement(workspaceName: string, sparkPoolName: string, sessionId: number, statementId: number, options?: msRest.RequestOptionsBase): Promise<Models.SparkSessionDeleteStatementResponse>;
  /**
   * @param workspaceName The name of the workspace to execute operations on.
   * @param sparkPoolName Name of the spark pool. "ondemand" targets the ondemand pool.
   * @param sessionId Identifier for the session.
   * @param statementId Identifier for the statement.
   * @param callback The callback
   */
  deleteStatement(workspaceName: string, sparkPoolName: string, sessionId: number, statementId: number, callback: msRest.ServiceCallback<Models.LivyStatementCancellationResponse>): void;
  /**
   * @param workspaceName The name of the workspace to execute operations on.
   * @param sparkPoolName Name of the spark pool. "ondemand" targets the ondemand pool.
   * @param sessionId Identifier for the session.
   * @param statementId Identifier for the statement.
   * @param options The optional parameters
   * @param callback The callback
   */
  deleteStatement(workspaceName: string, sparkPoolName: string, sessionId: number, statementId: number, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.LivyStatementCancellationResponse>): void;
  deleteStatement(workspaceName: string, sparkPoolName: string, sessionId: number, statementId: number, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<Models.LivyStatementCancellationResponse>, callback?: msRest.ServiceCallback<Models.LivyStatementCancellationResponse>): Promise<Models.SparkSessionDeleteStatementResponse> {
    return this.client.sendOperationRequest(
      {
        workspaceName,
        sparkPoolName,
        sessionId,
        statementId,
        options
      },
      deleteStatementOperationSpec,
      callback) as Promise<Models.SparkSessionDeleteStatementResponse>;
  }
}

// Operation Specifications
const serializer = new msRest.Serializer(Mappers);
const listOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "livyApi/versions/{livyApiVersion}/sparkPools/{sparkPoolName}/sessions",
  urlParameters: [
    Parameters.workspaceName,
    Parameters.synapseDnsSuffix,
    Parameters.livyApiVersion,
    Parameters.sparkPoolName
  ],
  queryParameters: [
    Parameters.from,
    Parameters.size,
    Parameters.detailed
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    200: {
      bodyMapper: Mappers.ExtendedLivyListSessionResponse
    },
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  serializer
};

const createOperationSpec: msRest.OperationSpec = {
  httpMethod: "POST",
  path: "livyApi/versions/{livyApiVersion}/sparkPools/{sparkPoolName}/sessions",
  urlParameters: [
    Parameters.workspaceName,
    Parameters.synapseDnsSuffix,
    Parameters.livyApiVersion,
    Parameters.sparkPoolName
  ],
  queryParameters: [
    Parameters.detailed
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  requestBody: {
    parameterPath: "livyRequest",
    mapper: {
      ...Mappers.ExtendedLivySessionRequest,
      required: true
    }
  },
  responses: {
    200: {
      bodyMapper: Mappers.ExtendedLivySessionResponse
    },
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  serializer
};

const getOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "livyApi/versions/{livyApiVersion}/sparkPools/{sparkPoolName}/sessions/{sessionId}",
  urlParameters: [
    Parameters.workspaceName,
    Parameters.synapseDnsSuffix,
    Parameters.livyApiVersion,
    Parameters.sparkPoolName,
    Parameters.sessionId
  ],
  queryParameters: [
    Parameters.detailed
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    200: {
      bodyMapper: Mappers.ExtendedLivySessionResponse
    },
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  serializer
};

const deleteMethodOperationSpec: msRest.OperationSpec = {
  httpMethod: "DELETE",
  path: "livyApi/versions/{livyApiVersion}/sparkPools/{sparkPoolName}/sessions/{sessionId}",
  urlParameters: [
    Parameters.workspaceName,
    Parameters.synapseDnsSuffix,
    Parameters.livyApiVersion,
    Parameters.sparkPoolName,
    Parameters.sessionId
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    200: {},
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  serializer
};

const resetTimeoutOperationSpec: msRest.OperationSpec = {
  httpMethod: "PUT",
  path: "livyApi/versions/{livyApiVersion}/sparkPools/{sparkPoolName}/sessions/{sessionId}/reset-timeout",
  urlParameters: [
    Parameters.workspaceName,
    Parameters.synapseDnsSuffix,
    Parameters.livyApiVersion,
    Parameters.sparkPoolName,
    Parameters.sessionId
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    200: {},
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  serializer
};

const listStatementsOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "livyApi/versions/{livyApiVersion}/sparkPools/{sparkPoolName}/sessions/{sessionId}/statements",
  urlParameters: [
    Parameters.workspaceName,
    Parameters.synapseDnsSuffix,
    Parameters.livyApiVersion,
    Parameters.sparkPoolName,
    Parameters.sessionId
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    200: {
      bodyMapper: Mappers.LivyStatementsResponseBody
    },
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  serializer
};

const createStatementOperationSpec: msRest.OperationSpec = {
  httpMethod: "POST",
  path: "livyApi/versions/{livyApiVersion}/sparkPools/{sparkPoolName}/sessions/{sessionId}/statements",
  urlParameters: [
    Parameters.workspaceName,
    Parameters.synapseDnsSuffix,
    Parameters.livyApiVersion,
    Parameters.sparkPoolName,
    Parameters.sessionId
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  requestBody: {
    parameterPath: "livyRequest",
    mapper: {
      ...Mappers.LivyStatementRequestBody,
      required: true
    }
  },
  responses: {
    200: {
      bodyMapper: Mappers.LivyStatementResponseBody
    },
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  serializer
};

const getStatementOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "livyApi/versions/{livyApiVersion}/sparkPools/{sparkPoolName}/sessions/{sessionId}/statements/{statementId}",
  urlParameters: [
    Parameters.workspaceName,
    Parameters.synapseDnsSuffix,
    Parameters.livyApiVersion,
    Parameters.sparkPoolName,
    Parameters.sessionId,
    Parameters.statementId
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    200: {
      bodyMapper: Mappers.LivyStatementResponseBody
    },
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  serializer
};

const deleteStatementOperationSpec: msRest.OperationSpec = {
  httpMethod: "POST",
  path: "livyApi/versions/{livyApiVersion}/sparkPools/{sparkPoolName}/sessions/{sessionId}/statements/{statementId}/cancel",
  urlParameters: [
    Parameters.workspaceName,
    Parameters.synapseDnsSuffix,
    Parameters.livyApiVersion,
    Parameters.sparkPoolName,
    Parameters.sessionId,
    Parameters.statementId
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    200: {
      bodyMapper: Mappers.LivyStatementCancellationResponse
    },
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  serializer
};
