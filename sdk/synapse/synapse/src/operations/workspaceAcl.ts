/*
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is
 * regenerated.
 */

import * as msRest from "@azure/ms-rest-js";
import * as Models from "../models";
import * as Mappers from "../models/workspaceAclMappers";
import * as Parameters from "../models/parameters";
import { SynapseClientContext } from "../synapseClientContext";

/** Class representing a WorkspaceAcl. */
export class WorkspaceAcl {
  private readonly client: SynapseClientContext;

  /**
   * Create a WorkspaceAcl.
   * @param {SynapseClientContext} client Reference to the service client.
   */
  constructor(client: SynapseClientContext) {
    this.client = client;
  }

  /**
   * Get access control info.
   * @param workspaceName The name of the workspace to execute operations on.
   * @param resource The resource to get the access control info for.
   * @param [options] The optional parameters
   * @returns Promise<Models.WorkspaceAclGetAccessControlInfoResponse>
   */
  getAccessControlInfo(workspaceName: string, resource: Models.GetAccessControlInfoRequest, options?: msRest.RequestOptionsBase): Promise<Models.WorkspaceAclGetAccessControlInfoResponse>;
  /**
   * @param workspaceName The name of the workspace to execute operations on.
   * @param resource The resource to get the access control info for.
   * @param callback The callback
   */
  getAccessControlInfo(workspaceName: string, resource: Models.GetAccessControlInfoRequest, callback: msRest.ServiceCallback<Models.WorkspaceAccessControlResponse>): void;
  /**
   * @param workspaceName The name of the workspace to execute operations on.
   * @param resource The resource to get the access control info for.
   * @param options The optional parameters
   * @param callback The callback
   */
  getAccessControlInfo(workspaceName: string, resource: Models.GetAccessControlInfoRequest, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.WorkspaceAccessControlResponse>): void;
  getAccessControlInfo(workspaceName: string, resource: Models.GetAccessControlInfoRequest, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<Models.WorkspaceAccessControlResponse>, callback?: msRest.ServiceCallback<Models.WorkspaceAccessControlResponse>): Promise<Models.WorkspaceAclGetAccessControlInfoResponse> {
    return this.client.sendOperationRequest(
      {
        workspaceName,
        resource,
        options
      },
      getAccessControlInfoOperationSpec,
      callback) as Promise<Models.WorkspaceAclGetAccessControlInfoResponse>;
  }

  /**
   * Replace Admins of the Workspace.
   * @param workspaceName The name of the workspace to execute operations on.
   * @param request Details of administrators object-ids.
   * @param [options] The optional parameters
   * @returns Promise<Models.WorkspaceAclSetWorkspaceAdministratorsResponse>
   */
  setWorkspaceAdministrators(workspaceName: string, request: Models.SetWorkspaceAdministratorsRequest, options?: msRest.RequestOptionsBase): Promise<Models.WorkspaceAclSetWorkspaceAdministratorsResponse>;
  /**
   * @param workspaceName The name of the workspace to execute operations on.
   * @param request Details of administrators object-ids.
   * @param callback The callback
   */
  setWorkspaceAdministrators(workspaceName: string, request: Models.SetWorkspaceAdministratorsRequest, callback: msRest.ServiceCallback<Models.WorkspaceAccessControlResponse>): void;
  /**
   * @param workspaceName The name of the workspace to execute operations on.
   * @param request Details of administrators object-ids.
   * @param options The optional parameters
   * @param callback The callback
   */
  setWorkspaceAdministrators(workspaceName: string, request: Models.SetWorkspaceAdministratorsRequest, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.WorkspaceAccessControlResponse>): void;
  setWorkspaceAdministrators(workspaceName: string, request: Models.SetWorkspaceAdministratorsRequest, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<Models.WorkspaceAccessControlResponse>, callback?: msRest.ServiceCallback<Models.WorkspaceAccessControlResponse>): Promise<Models.WorkspaceAclSetWorkspaceAdministratorsResponse> {
    return this.client.sendOperationRequest(
      {
        workspaceName,
        request,
        options
      },
      setWorkspaceAdministratorsOperationSpec,
      callback) as Promise<Models.WorkspaceAclSetWorkspaceAdministratorsResponse>;
  }
}

// Operation Specifications
const serializer = new msRest.Serializer(Mappers);
const getAccessControlInfoOperationSpec: msRest.OperationSpec = {
  httpMethod: "POST",
  path: "getAccessControl",
  urlParameters: [
    Parameters.workspaceName,
    Parameters.synapseDnsSuffix
  ],
  queryParameters: [
    Parameters.apiVersion
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  requestBody: {
    parameterPath: "resource",
    mapper: {
      ...Mappers.GetAccessControlInfoRequest,
      required: true
    }
  },
  responses: {
    200: {
      bodyMapper: Mappers.WorkspaceAccessControlResponse
    },
    default: {
      bodyMapper: Mappers.ErrorResponse
    }
  },
  serializer
};

const setWorkspaceAdministratorsOperationSpec: msRest.OperationSpec = {
  httpMethod: "POST",
  path: "setWorkspaceAdmins",
  urlParameters: [
    Parameters.workspaceName,
    Parameters.synapseDnsSuffix
  ],
  queryParameters: [
    Parameters.apiVersion
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  requestBody: {
    parameterPath: "request",
    mapper: {
      ...Mappers.SetWorkspaceAdministratorsRequest,
      required: true
    }
  },
  responses: {
    200: {
      bodyMapper: Mappers.WorkspaceAccessControlResponse
    },
    default: {
      bodyMapper: Mappers.ErrorResponse
    }
  },
  serializer
};
