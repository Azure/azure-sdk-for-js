/*
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */

import { BaseResource, CloudError, AzureServiceClientOptions } from "@azure/ms-rest-azure-js";
import * as msRest from "@azure/ms-rest-js";

export { BaseResource, CloudError };

/**
 * An interface representing SparkJob.
 */
export interface SparkJob {
  state?: string;
  name?: string;
  submitter?: string;
  compute?: string;
  sparkApplicationId?: string;
  livyId?: string;
  timing?: string[];
  sparkJobDefinition?: string;
  pipelineProperty?: SparkJob[];
  jobType?: string;
  submitTime?: Date;
  endTime?: Date;
  queuedDuration?: string;
  runningDuration?: string;
  totalDuration?: string;
}

/**
 * An interface representing SparkJobListViewResponse.
 */
export interface SparkJobListViewResponse {
  nJobs?: number;
  sparkJobs?: SparkJob[];
}

/**
 * An interface representing HistoryServerPropertiesResponse.
 */
export interface HistoryServerPropertiesResponse {
  webProxyEndpoint?: string;
}

/**
 * An interface representing Option.
 */
export interface Option {
  additionalProp1?: string;
  additionalProp2?: string;
  additionalProp3?: string;
}

/**
 * An interface representing Tables.
 */
export interface Tables {
  operation?: string;
  options?: Option[];
}

/**
 * An interface representing Config.
 */
export interface Config {
  isHiveEnabled?: boolean;
}

/**
 * An interface representing Data.
 */
export interface Data {
  handlerPath?: string;
  inputs?: string[];
  outputs?: string[];
  tables?: Tables;
  config?: Config;
}

/**
 * An interface representing HistoryServerDataResponse.
 */
export interface HistoryServerDataResponse {
  data?: Data;
}

/**
 * An interface representing Stages.
 */
export interface Stages {
  dataAvg?: number;
  timeAvg?: number;
  id?: number;
  attemptId?: number;
  name?: string;
  dataSkewTask?: number[];
  timeSkewTask?: number[];
  tasks?: number[];
}

/**
 * An interface representing Executors.
 */
export interface Executors {
  isDynamicAllocationOn?: boolean;
  executorInstances?: number;
  startTime?: number;
  endTime?: number;
  events?: number[];
  executorCores?: string;
  executorMemory?: string;
}

/**
 * An interface representing HistoryServerDiagnosticResponseData.
 */
export interface HistoryServerDiagnosticResponseData {
  stages?: Stages;
  executors?: Executors;
}

/**
 * An interface representing HistoryServerDiagnosticResponse.
 */
export interface HistoryServerDiagnosticResponse {
  data?: HistoryServerDiagnosticResponseData;
}

/**
 * An interface representing Edge.
 */
export interface Edge {
  id?: number;
  childId?: number;
}

/**
 * An interface representing Jobs.
 */
export interface Jobs {
  time?: number;
  startTime?: number;
  id?: number;
  edges?: Edge[];
  nodes?: number[];
}

/**
 * An interface representing HistoryServerGraphResponseData.
 */
export interface HistoryServerGraphResponseData {
  isAppFinished?: boolean;
  jobs?: Jobs;
  stages?: Stages;
}

/**
 * An interface representing HistoryServerGraphResponse.
 */
export interface HistoryServerGraphResponse {
  data?: HistoryServerGraphResponseData;
}

/**
 * An interface representing LivyRequestBase.
 */
export interface LivyRequestBase {
  name?: string;
  file?: string;
  className?: string;
  args?: string[];
  jars?: string[];
  files?: string[];
  archives?: string[];
  conf?: { [propertyName: string]: string };
  driverMemory?: string;
  driverCores?: number;
  executorMemory?: string;
  executorCores?: number;
  numExecutors?: number;
}

/**
 * An interface representing LivyBatchStateInformation.
 */
export interface LivyBatchStateInformation {
  notStartedAt?: Date;
  startingAt?: Date;
  runningAt?: Date;
  deadAt?: Date;
  successAt?: Date;
  killedAt?: Date;
  recoveringAt?: Date;
  currentState?: string;
  jobCreationRequest?: LivyRequestBase;
}

/**
 * An interface representing SchedulerInformation.
 */
export interface SchedulerInformation {
  submittedAt?: Date;
  scheduledAt?: Date;
  endedAt?: Date;
  cancellationRequestedAt?: Date;
  /**
   * Possible values include: 'Queued', 'Scheduled', 'Ended'
   */
  currentState?: SchedulerCurrentState;
}

/**
 * An interface representing SparkServicePluginInformation.
 */
export interface SparkServicePluginInformation {
  preparationStartedAt?: Date;
  resourceAcquisitionStartedAt?: Date;
  submissionStartedAt?: Date;
  monitoringStartedAt?: Date;
  cleanupStartedAt?: Date;
  /**
   * Possible values include: 'Preparation', 'ResourceAcquisition', 'Queued', 'Submission',
   * 'Monitoring', 'Cleanup', 'Ended'
   */
  currentState?: PluginCurrentState;
}

/**
 * An interface representing ErrorInformation.
 */
export interface ErrorInformation {
  message?: string;
  errorCode?: string;
  /**
   * Possible values include: 'System', 'User', 'Unknown', 'Dependency'
   */
  source?: ErrorSource;
}

/**
 * An interface representing ExtendedLivyBatchResponse.
 */
export interface ExtendedLivyBatchResponse {
  livyInfo?: LivyBatchStateInformation;
  name?: string;
  workspaceName?: string;
  sparkPoolName?: string;
  submitterName?: string;
  submitterId?: string;
  artifactId?: string;
  /**
   * Possible values include: 'SparkBatch', 'SparkSession'
   */
  jobType?: JobType;
  /**
   * Possible values include: 'Uncertain', 'Succeeded', 'Failed', 'Cancelled'
   */
  result?: JobResult;
  schedulerInfo?: SchedulerInformation;
  pluginInfo?: SparkServicePluginInformation;
  errorInfo?: ErrorInformation[];
  tags?: { [propertyName: string]: string };
  id?: number;
  appId?: string;
  appInfo?: { [propertyName: string]: string };
  state?: string;
  log?: string[];
}

/**
 * An interface representing ExtendedLivyListBatchResponse.
 */
export interface ExtendedLivyListBatchResponse {
  from?: number;
  total?: number;
  sessions?: ExtendedLivyBatchResponse[];
}

/**
 * An interface representing ExtendedLivyBatchRequest.
 */
export interface ExtendedLivyBatchRequest {
  tags?: { [propertyName: string]: string };
  artifactId?: string;
  name?: string;
  file?: string;
  className?: string;
  args?: string[];
  jars?: string[];
  files?: string[];
  archives?: string[];
  conf?: { [propertyName: string]: string };
  driverMemory?: string;
  driverCores?: number;
  executorMemory?: string;
  executorCores?: number;
  numExecutors?: number;
}

/**
 * An interface representing LivySessionStateInformation.
 */
export interface LivySessionStateInformation {
  notStartedAt?: Date;
  startingAt?: Date;
  idleAt?: Date;
  deadAt?: Date;
  shuttingDownAt?: Date;
  killedAt?: Date;
  recoveringAt?: Date;
  busyAt?: Date;
  errorAt?: Date;
  currentState?: string;
  jobCreationRequest?: LivyRequestBase;
}

/**
 * An interface representing ExtendedLivySessionResponse.
 */
export interface ExtendedLivySessionResponse {
  livyInfo?: LivySessionStateInformation;
  name?: string;
  workspaceName?: string;
  sparkPoolName?: string;
  submitterName?: string;
  submitterId?: string;
  artifactId?: string;
  /**
   * Possible values include: 'SparkBatch', 'SparkSession'
   */
  jobType?: JobType;
  /**
   * Possible values include: 'Uncertain', 'Succeeded', 'Failed', 'Cancelled'
   */
  result?: JobResult;
  schedulerInfo?: SchedulerInformation;
  pluginInfo?: SparkServicePluginInformation;
  errorInfo?: ErrorInformation[];
  tags?: { [propertyName: string]: string };
  id?: number;
  appId?: string;
  appInfo?: { [propertyName: string]: string };
  state?: string;
  log?: string[];
}

/**
 * An interface representing ExtendedLivyListSessionResponse.
 */
export interface ExtendedLivyListSessionResponse {
  from?: number;
  total?: number;
  sessions?: ExtendedLivySessionResponse[];
}

/**
 * An interface representing ExtendedLivySessionRequest.
 */
export interface ExtendedLivySessionRequest {
  tags?: { [propertyName: string]: string };
  artifactId?: string;
  name?: string;
  file?: string;
  className?: string;
  args?: string[];
  jars?: string[];
  files?: string[];
  archives?: string[];
  conf?: { [propertyName: string]: string };
  driverMemory?: string;
  driverCores?: number;
  executorMemory?: string;
  executorCores?: number;
  numExecutors?: number;
}

/**
 * An interface representing LivyStatementOutput.
 */
export interface LivyStatementOutput {
  status?: string;
  executionCount?: number;
  data?: any;
  ename?: string;
  evalue?: string;
  traceback?: string[];
}

/**
 * An interface representing LivyStatementResponseBody.
 */
export interface LivyStatementResponseBody {
  id?: number;
  code?: string;
  state?: string;
  output?: LivyStatementOutput;
}

/**
 * An interface representing LivyStatementsResponseBody.
 */
export interface LivyStatementsResponseBody {
  totalStatements?: number;
  statements?: LivyStatementResponseBody[];
}

/**
 * An interface representing LivyStatementRequestBody.
 */
export interface LivyStatementRequestBody {
  code?: string;
  kind?: string;
}

/**
 * An interface representing LivyStatementCancellationResponse.
 */
export interface LivyStatementCancellationResponse {
  msg?: string;
}

/**
 * An interface representing GetAccessControlInfoRequest.
 */
export interface GetAccessControlInfoRequest {
  /**
   * Possible values include: 'Workspace'
   */
  artifactType?: ArtifactType;
  artifactName?: string;
}

/**
 * An interface representing WorkspaceAccessControlResponse.
 */
export interface WorkspaceAccessControlResponse {
  administrators?: string[];
  etag?: string;
  accessControlList?: { [propertyName: string]: string[] };
}

/**
 * An interface representing ErrorDetail.
 */
export interface ErrorDetail {
  code: string;
  message: string;
  target?: string;
}

/**
 * An interface representing ErrorResponse.
 */
export interface ErrorResponse {
  code: string;
  message: string;
  target?: string;
  details?: ErrorDetail[];
}

/**
 * An interface representing SetWorkspaceAdministratorsRequest.
 */
export interface SetWorkspaceAdministratorsRequest {
  administrators?: string[];
}

/**
 * Optional Parameters.
 */
export interface SparkBatchListOptionalParams extends msRest.RequestOptionsBase {
  /**
   * Optional param specifying which index the list should begin from.
   */
  from?: number;
  /**
   * Optional param specifying the size of the returned list.
   * By default it is 20 and that is the maximum.
   */
  size?: number;
  /**
   * Optional query param specifying whether detailed response is returned beyond plain livy.
   */
  detailed?: boolean;
}

/**
 * Optional Parameters.
 */
export interface SparkBatchCreateOptionalParams extends msRest.RequestOptionsBase {
  /**
   * Optional query param specifying whether detailed response is returned beyond plain livy.
   */
  detailed?: boolean;
}

/**
 * Optional Parameters.
 */
export interface SparkBatchGetOptionalParams extends msRest.RequestOptionsBase {
  /**
   * Optional query param specifying whether detailed response is returned beyond plain livy.
   */
  detailed?: boolean;
}

/**
 * Optional Parameters.
 */
export interface SparkSessionListOptionalParams extends msRest.RequestOptionsBase {
  /**
   * Optional param specifying which index the list should begin from.
   */
  from?: number;
  /**
   * Optional param specifying the size of the returned list.
   * By default it is 20 and that is the maximum.
   */
  size?: number;
  /**
   * Optional query param specifying whether detailed response is returned beyond plain livy.
   */
  detailed?: boolean;
}

/**
 * Optional Parameters.
 */
export interface SparkSessionCreateOptionalParams extends msRest.RequestOptionsBase {
  /**
   * Optional query param specifying whether detailed response is returned beyond plain livy.
   */
  detailed?: boolean;
}

/**
 * Optional Parameters.
 */
export interface SparkSessionGetOptionalParams extends msRest.RequestOptionsBase {
  /**
   * Optional query param specifying whether detailed response is returned beyond plain livy.
   */
  detailed?: boolean;
}

/**
 * An interface representing SynapseClientOptions.
 */
export interface SynapseClientOptions extends AzureServiceClientOptions {
  /**
   * Gets the DNS suffix used as the base for all Synapse service requests. Default value:
   * 'azuresynapse.net​'.
   */
  synapseDnsSuffix?: string;
  /**
   * Valid api-version for the request. Default value: '2019-11-01-preview'.
   */
  livyApiVersion?: string;
}

/**
 * Defines values for JobType.
 * Possible values include: 'SparkBatch', 'SparkSession'
 * @readonly
 * @enum {string}
 */
export type JobType = 'SparkBatch' | 'SparkSession';

/**
 * Defines values for JobResult.
 * Possible values include: 'Uncertain', 'Succeeded', 'Failed', 'Cancelled'
 * @readonly
 * @enum {string}
 */
export type JobResult = 'Uncertain' | 'Succeeded' | 'Failed' | 'Cancelled';

/**
 * Defines values for SchedulerCurrentState.
 * Possible values include: 'Queued', 'Scheduled', 'Ended'
 * @readonly
 * @enum {string}
 */
export type SchedulerCurrentState = 'Queued' | 'Scheduled' | 'Ended';

/**
 * Defines values for PluginCurrentState.
 * Possible values include: 'Preparation', 'ResourceAcquisition', 'Queued', 'Submission',
 * 'Monitoring', 'Cleanup', 'Ended'
 * @readonly
 * @enum {string}
 */
export type PluginCurrentState = 'Preparation' | 'ResourceAcquisition' | 'Queued' | 'Submission' | 'Monitoring' | 'Cleanup' | 'Ended';

/**
 * Defines values for ErrorSource.
 * Possible values include: 'System', 'User', 'Unknown', 'Dependency'
 * @readonly
 * @enum {string}
 */
export type ErrorSource = 'System' | 'User' | 'Unknown' | 'Dependency';

/**
 * Defines values for ArtifactType.
 * Possible values include: 'Workspace'
 * @readonly
 * @enum {string}
 */
export type ArtifactType = 'Workspace';

/**
 * Contains response data for the getHistoryServerData operation.
 */
export type MonitoringGetHistoryServerDataResponse = HistoryServerDataResponse & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;

      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: HistoryServerDataResponse;
    };
};

/**
 * Contains response data for the getSparkJobList operation.
 */
export type MonitoringGetSparkJobListResponse = SparkJobListViewResponse & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;

      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: SparkJobListViewResponse;
    };
};

/**
 * Contains response data for the getApplicationDetails operation.
 */
export type MonitoringGetApplicationDetailsResponse = SparkJobListViewResponse & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;

      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: SparkJobListViewResponse;
    };
};

/**
 * Contains response data for the getHistoryServerProperties operation.
 */
export type MonitoringGetHistoryServerPropertiesResponse = HistoryServerPropertiesResponse & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;

      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: HistoryServerPropertiesResponse;
    };
};

/**
 * Contains response data for the getHistoryServerDiagnostic operation.
 */
export type MonitoringGetHistoryServerDiagnosticResponse = HistoryServerDiagnosticResponse & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;

      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: HistoryServerDiagnosticResponse;
    };
};

/**
 * Contains response data for the getHistoryServerGraph operation.
 */
export type MonitoringGetHistoryServerGraphResponse = HistoryServerGraphResponse & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;

      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: HistoryServerGraphResponse;
    };
};

/**
 * Contains response data for the list operation.
 */
export type SparkBatchListResponse = ExtendedLivyListBatchResponse & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;

      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: ExtendedLivyListBatchResponse;
    };
};

/**
 * Contains response data for the create operation.
 */
export type SparkBatchCreateResponse = ExtendedLivyBatchResponse & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;

      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: ExtendedLivyBatchResponse;
    };
};

/**
 * Contains response data for the get operation.
 */
export type SparkBatchGetResponse = ExtendedLivyBatchResponse & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;

      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: ExtendedLivyBatchResponse;
    };
};

/**
 * Contains response data for the list operation.
 */
export type SparkSessionListResponse = ExtendedLivyListSessionResponse & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;

      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: ExtendedLivyListSessionResponse;
    };
};

/**
 * Contains response data for the create operation.
 */
export type SparkSessionCreateResponse = ExtendedLivySessionResponse & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;

      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: ExtendedLivySessionResponse;
    };
};

/**
 * Contains response data for the get operation.
 */
export type SparkSessionGetResponse = ExtendedLivySessionResponse & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;

      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: ExtendedLivySessionResponse;
    };
};

/**
 * Contains response data for the listStatements operation.
 */
export type SparkSessionListStatementsResponse = LivyStatementsResponseBody & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;

      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: LivyStatementsResponseBody;
    };
};

/**
 * Contains response data for the createStatement operation.
 */
export type SparkSessionCreateStatementResponse = LivyStatementResponseBody & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;

      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: LivyStatementResponseBody;
    };
};

/**
 * Contains response data for the getStatement operation.
 */
export type SparkSessionGetStatementResponse = LivyStatementResponseBody & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;

      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: LivyStatementResponseBody;
    };
};

/**
 * Contains response data for the deleteStatement operation.
 */
export type SparkSessionDeleteStatementResponse = LivyStatementCancellationResponse & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;

      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: LivyStatementCancellationResponse;
    };
};

/**
 * Contains response data for the getAccessControlInfo operation.
 */
export type WorkspaceAclGetAccessControlInfoResponse = WorkspaceAccessControlResponse & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;

      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: WorkspaceAccessControlResponse;
    };
};

/**
 * Contains response data for the setWorkspaceAdministrators operation.
 */
export type WorkspaceAclSetWorkspaceAdministratorsResponse = WorkspaceAccessControlResponse & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;

      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: WorkspaceAccessControlResponse;
    };
};
