/*
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is
 * regenerated.
 */

import * as Models from "./models";
import * as msRest from "@azure/ms-rest-js";
import * as msRestAzure from "@azure/ms-rest-azure-js";

const packageName = "@azure/synapse";
const packageVersion = "1.0.0-preview.1";

export class SynapseClientContext extends msRestAzure.AzureServiceClient {
  credentials: msRest.ServiceClientCredentials;
  apiVersion?: string;
  synapseDnsSuffix?: string;
  livyApiVersion?: string;

  /**
   * Initializes a new instance of the SynapseClient class.
   * @param credentials Credentials needed for the client to connect to Azure.
   * @param [options] The parameter options
   */
  constructor(credentials: msRest.ServiceClientCredentials, options?: Models.SynapseClientOptions) {
    if (credentials == undefined) {
      throw new Error('\'credentials\' cannot be null.');
    }

    if (!options) {
      options = {};
    }
    if(!options.userAgent) {
      const defaultUserAgent = msRestAzure.getDefaultUserAgentValue();
      options.userAgent = `${packageName}/${packageVersion} ${defaultUserAgent}`;
    }

    super(credentials, options);

    this.apiVersion = '2019-11-01-preview';
    this.synapseDnsSuffix = 'azuresynapse.netâ€‹';
    this.livyApiVersion = '2019-11-01-preview';
    this.acceptLanguage = 'en-US';
    this.longRunningOperationRetryTimeout = 30;
    this.baseUri = "https://{workspaceName}.{SynapseDnsSuffix}";
    this.requestContentType = "application/json; charset=utf-8";
    this.credentials = credentials;

    if(options.synapseDnsSuffix !== null && options.synapseDnsSuffix !== undefined) {
      this.synapseDnsSuffix = options.synapseDnsSuffix;
    }
    if(options.livyApiVersion !== null && options.livyApiVersion !== undefined) {
      this.livyApiVersion = options.livyApiVersion;
    }
    if(options.acceptLanguage !== null && options.acceptLanguage !== undefined) {
      this.acceptLanguage = options.acceptLanguage;
    }
    if(options.longRunningOperationRetryTimeout !== null && options.longRunningOperationRetryTimeout !== undefined) {
      this.longRunningOperationRetryTimeout = options.longRunningOperationRetryTimeout;
    }
  }
}
