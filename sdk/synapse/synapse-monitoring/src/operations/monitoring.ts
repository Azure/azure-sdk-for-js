/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */

import { tracingClient } from "../tracing.js";
import type { Monitoring } from "../operationsInterfaces/index.js";
import * as coreClient from "@azure/core-client";
import * as Mappers from "../models/mappers.js";
import * as Parameters from "../models/parameters.js";
import type { MonitoringClient } from "../monitoringClient.js";
import type {
  MonitoringGetSparkJobListOptionalParams,
  MonitoringGetSparkJobListResponse,
  MonitoringGetSqlJobQueryStringOptionalParams,
  MonitoringGetSqlJobQueryStringResponse,
} from "../models/index.js";

// Operation Specifications
const serializer = coreClient.createSerializer(Mappers, /* isXml */ false);

const getSparkJobListOperationSpec: coreClient.OperationSpec = {
  path: "/monitoring/workloadTypes/spark/Applications",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.SparkJobListViewResponse,
    },
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [Parameters.endpoint],
  headerParameters: [Parameters.accept, Parameters.xMsClientRequestId],
  serializer,
};
const getSqlJobQueryStringOperationSpec: coreClient.OperationSpec = {
  path: "/monitoring/workloadTypes/sql/querystring",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.SqlQueryStringDataModel,
    },
  },
  queryParameters: [Parameters.apiVersion, Parameters.filter, Parameters.orderby, Parameters.skip],
  urlParameters: [Parameters.endpoint],
  headerParameters: [Parameters.accept, Parameters.xMsClientRequestId],
  serializer,
};

/** Class containing Monitoring operations. */
export class MonitoringImpl implements Monitoring {
  private readonly client: MonitoringClient;

  /**
   * Initialize a new instance of the class Monitoring class.
   * @param client - Reference to the service client
   */
  constructor(client: MonitoringClient) {
    this.client = client;
  }

  /**
   * Get list of spark applications for the workspace.
   * @param options - The options parameters.
   */
  async getSparkJobList(
    options?: MonitoringGetSparkJobListOptionalParams,
  ): Promise<MonitoringGetSparkJobListResponse> {
    return tracingClient.withSpan(
      "MonitoringClient.getSparkJobList",
      options ?? {},
      async (updatedOptions) => {
        return this.client.sendOperationRequest(
          { updatedOptions },
          getSparkJobListOperationSpec,
        ) as Promise<MonitoringGetSparkJobListResponse>;
      },
    );
  }

  /**
   * Get SQL OD/DW Query for the workspace.
   * @param options - The options parameters.
   */
  async getSqlJobQueryString(
    options?: MonitoringGetSqlJobQueryStringOptionalParams,
  ): Promise<MonitoringGetSqlJobQueryStringResponse> {
    return tracingClient.withSpan(
      "MonitoringClient.getSqlJobQueryString",
      options ?? {},
      async (updatedOptions) => {
        return this.client.sendOperationRequest(
          { updatedOptions },
          getSqlJobQueryStringOperationSpec,
        ) as Promise<MonitoringGetSqlJobQueryStringResponse>;
      },
    );
  }
}
