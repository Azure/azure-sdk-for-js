"use strict";
/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.MonitoringImpl = void 0;
const tslib_1 = require("tslib");
const tracing_js_1 = require("../tracing.js");
const coreClient = tslib_1.__importStar(require("@azure/core-client"));
const Mappers = tslib_1.__importStar(require("../models/mappers.js"));
const Parameters = tslib_1.__importStar(require("../models/parameters.js"));
// Operation Specifications
const serializer = coreClient.createSerializer(Mappers, /* isXml */ false);
const getSparkJobListOperationSpec = {
    path: "/monitoring/workloadTypes/spark/Applications",
    httpMethod: "GET",
    responses: {
        200: {
            bodyMapper: Mappers.SparkJobListViewResponse,
        },
    },
    queryParameters: [Parameters.apiVersion],
    urlParameters: [Parameters.endpoint],
    headerParameters: [Parameters.accept, Parameters.xMsClientRequestId],
    serializer,
};
const getSqlJobQueryStringOperationSpec = {
    path: "/monitoring/workloadTypes/sql/querystring",
    httpMethod: "GET",
    responses: {
        200: {
            bodyMapper: Mappers.SqlQueryStringDataModel,
        },
    },
    queryParameters: [Parameters.apiVersion, Parameters.filter, Parameters.orderby, Parameters.skip],
    urlParameters: [Parameters.endpoint],
    headerParameters: [Parameters.accept, Parameters.xMsClientRequestId],
    serializer,
};
/** Class containing Monitoring operations. */
class MonitoringImpl {
    /**
     * Initialize a new instance of the class Monitoring class.
     * @param client - Reference to the service client
     */
    constructor(client) {
        this.client = client;
    }
    /**
     * Get list of spark applications for the workspace.
     * @param options - The options parameters.
     */
    async getSparkJobList(options) {
        return tracing_js_1.tracingClient.withSpan("MonitoringClient.getSparkJobList", options !== null && options !== void 0 ? options : {}, async (updatedOptions) => {
            return this.client.sendOperationRequest({ updatedOptions }, getSparkJobListOperationSpec);
        });
    }
    /**
     * Get SQL OD/DW Query for the workspace.
     * @param options - The options parameters.
     */
    async getSqlJobQueryString(options) {
        return tracing_js_1.tracingClient.withSpan("MonitoringClient.getSqlJobQueryString", options !== null && options !== void 0 ? options : {}, async (updatedOptions) => {
            return this.client.sendOperationRequest({ updatedOptions }, getSqlJobQueryStringOperationSpec);
        });
    }
}
exports.MonitoringImpl = MonitoringImpl;
//# sourceMappingURL=monitoring.js.map