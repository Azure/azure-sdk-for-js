{"version":3,"file":"monitoring.js","sourceRoot":"","sources":["../../../src/operations/monitoring.ts"],"names":[],"mappings":"AAAA;;;;;;GAMG;AAEH,OAAO,EAAE,aAAa,EAAE,MAAM,eAAe,CAAC;AAE9C,OAAO,KAAK,UAAU,MAAM,oBAAoB,CAAC;AACjD,OAAO,KAAK,OAAO,MAAM,sBAAsB,CAAC;AAChD,OAAO,KAAK,UAAU,MAAM,yBAAyB,CAAC;AAStD,2BAA2B;AAC3B,MAAM,UAAU,GAAG,UAAU,CAAC,gBAAgB,CAAC,OAAO,EAAE,WAAW,CAAC,KAAK,CAAC,CAAC;AAE3E,MAAM,4BAA4B,GAA6B;IAC7D,IAAI,EAAE,8CAA8C;IACpD,UAAU,EAAE,KAAK;IACjB,SAAS,EAAE;QACT,GAAG,EAAE;YACH,UAAU,EAAE,OAAO,CAAC,wBAAwB;SAC7C;KACF;IACD,eAAe,EAAE,CAAC,UAAU,CAAC,UAAU,CAAC;IACxC,aAAa,EAAE,CAAC,UAAU,CAAC,QAAQ,CAAC;IACpC,gBAAgB,EAAE,CAAC,UAAU,CAAC,MAAM,EAAE,UAAU,CAAC,kBAAkB,CAAC;IACpE,UAAU;CACX,CAAC;AACF,MAAM,iCAAiC,GAA6B;IAClE,IAAI,EAAE,2CAA2C;IACjD,UAAU,EAAE,KAAK;IACjB,SAAS,EAAE;QACT,GAAG,EAAE;YACH,UAAU,EAAE,OAAO,CAAC,uBAAuB;SAC5C;KACF;IACD,eAAe,EAAE,CAAC,UAAU,CAAC,UAAU,EAAE,UAAU,CAAC,MAAM,EAAE,UAAU,CAAC,OAAO,EAAE,UAAU,CAAC,IAAI,CAAC;IAChG,aAAa,EAAE,CAAC,UAAU,CAAC,QAAQ,CAAC;IACpC,gBAAgB,EAAE,CAAC,UAAU,CAAC,MAAM,EAAE,UAAU,CAAC,kBAAkB,CAAC;IACpE,UAAU;CACX,CAAC;AAEF,8CAA8C;AAC9C,MAAM,OAAO,cAAc;IAGzB;;;OAGG;IACH,YAAY,MAAwB;QAClC,IAAI,CAAC,MAAM,GAAG,MAAM,CAAC;IACvB,CAAC;IAED;;;OAGG;IACH,KAAK,CAAC,eAAe,CACnB,OAAiD;QAEjD,OAAO,aAAa,CAAC,QAAQ,CAC3B,kCAAkC,EAClC,OAAO,aAAP,OAAO,cAAP,OAAO,GAAI,EAAE,EACb,KAAK,EAAE,cAAc,EAAE,EAAE;YACvB,OAAO,IAAI,CAAC,MAAM,CAAC,oBAAoB,CACrC,EAAE,cAAc,EAAE,EAClB,4BAA4B,CACiB,CAAC;QAClD,CAAC,CACF,CAAC;IACJ,CAAC;IAED;;;OAGG;IACH,KAAK,CAAC,oBAAoB,CACxB,OAAsD;QAEtD,OAAO,aAAa,CAAC,QAAQ,CAC3B,uCAAuC,EACvC,OAAO,aAAP,OAAO,cAAP,OAAO,GAAI,EAAE,EACb,KAAK,EAAE,cAAc,EAAE,EAAE;YACvB,OAAO,IAAI,CAAC,MAAM,CAAC,oBAAoB,CACrC,EAAE,cAAc,EAAE,EAClB,iCAAiC,CACiB,CAAC;QACvD,CAAC,CACF,CAAC;IACJ,CAAC;CACF","sourcesContent":["/*\n * Copyright (c) Microsoft Corporation.\n * Licensed under the MIT License.\n *\n * Code generated by Microsoft (R) AutoRest Code Generator.\n * Changes may cause incorrect behavior and will be lost if the code is regenerated.\n */\n\nimport { tracingClient } from \"../tracing.js\";\nimport type { Monitoring } from \"../operationsInterfaces/index.js\";\nimport * as coreClient from \"@azure/core-client\";\nimport * as Mappers from \"../models/mappers.js\";\nimport * as Parameters from \"../models/parameters.js\";\nimport type { MonitoringClient } from \"../monitoringClient.js\";\nimport type {\n  MonitoringGetSparkJobListOptionalParams,\n  MonitoringGetSparkJobListResponse,\n  MonitoringGetSqlJobQueryStringOptionalParams,\n  MonitoringGetSqlJobQueryStringResponse,\n} from \"../models/index.js\";\n\n// Operation Specifications\nconst serializer = coreClient.createSerializer(Mappers, /* isXml */ false);\n\nconst getSparkJobListOperationSpec: coreClient.OperationSpec = {\n  path: \"/monitoring/workloadTypes/spark/Applications\",\n  httpMethod: \"GET\",\n  responses: {\n    200: {\n      bodyMapper: Mappers.SparkJobListViewResponse,\n    },\n  },\n  queryParameters: [Parameters.apiVersion],\n  urlParameters: [Parameters.endpoint],\n  headerParameters: [Parameters.accept, Parameters.xMsClientRequestId],\n  serializer,\n};\nconst getSqlJobQueryStringOperationSpec: coreClient.OperationSpec = {\n  path: \"/monitoring/workloadTypes/sql/querystring\",\n  httpMethod: \"GET\",\n  responses: {\n    200: {\n      bodyMapper: Mappers.SqlQueryStringDataModel,\n    },\n  },\n  queryParameters: [Parameters.apiVersion, Parameters.filter, Parameters.orderby, Parameters.skip],\n  urlParameters: [Parameters.endpoint],\n  headerParameters: [Parameters.accept, Parameters.xMsClientRequestId],\n  serializer,\n};\n\n/** Class containing Monitoring operations. */\nexport class MonitoringImpl implements Monitoring {\n  private readonly client: MonitoringClient;\n\n  /**\n   * Initialize a new instance of the class Monitoring class.\n   * @param client - Reference to the service client\n   */\n  constructor(client: MonitoringClient) {\n    this.client = client;\n  }\n\n  /**\n   * Get list of spark applications for the workspace.\n   * @param options - The options parameters.\n   */\n  async getSparkJobList(\n    options?: MonitoringGetSparkJobListOptionalParams,\n  ): Promise<MonitoringGetSparkJobListResponse> {\n    return tracingClient.withSpan(\n      \"MonitoringClient.getSparkJobList\",\n      options ?? {},\n      async (updatedOptions) => {\n        return this.client.sendOperationRequest(\n          { updatedOptions },\n          getSparkJobListOperationSpec,\n        ) as Promise<MonitoringGetSparkJobListResponse>;\n      },\n    );\n  }\n\n  /**\n   * Get SQL OD/DW Query for the workspace.\n   * @param options - The options parameters.\n   */\n  async getSqlJobQueryString(\n    options?: MonitoringGetSqlJobQueryStringOptionalParams,\n  ): Promise<MonitoringGetSqlJobQueryStringResponse> {\n    return tracingClient.withSpan(\n      \"MonitoringClient.getSqlJobQueryString\",\n      options ?? {},\n      async (updatedOptions) => {\n        return this.client.sendOperationRequest(\n          { updatedOptions },\n          getSqlJobQueryStringOperationSpec,\n        ) as Promise<MonitoringGetSqlJobQueryStringResponse>;\n      },\n    );\n  }\n}\n"]}