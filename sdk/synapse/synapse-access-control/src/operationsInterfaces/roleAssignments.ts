/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */

import { PagedAsyncIterableIterator } from "@azure/core-paging";
import {
  RoleAssignmentDetails,
  RoleAssignmentsListRoleAssignmentsOptionalParams,
  SubjectInfo,
  RequiredAction,
  RoleAssignmentsCheckPrincipalAccessOptionalParams,
  RoleAssignmentsCheckPrincipalAccessResponse,
  RoleAssignmentsCreateRoleAssignmentOptionalParams,
  RoleAssignmentsCreateRoleAssignmentResponse,
  RoleAssignmentsGetRoleAssignmentByIdOptionalParams,
  RoleAssignmentsGetRoleAssignmentByIdResponse,
  RoleAssignmentsDeleteRoleAssignmentByIdOptionalParams
} from "../models";

/// <reference lib="esnext.asynciterable" />
/** Interface representing a RoleAssignments. */
export interface RoleAssignments {
  /**
   * List role assignments.
   * @param options The options parameters.
   */
  listRoleAssignments(
    options?: RoleAssignmentsListRoleAssignmentsOptionalParams
  ): PagedAsyncIterableIterator<RoleAssignmentDetails>;
  /**
   * Check if the given principalId has access to perform list of actions at a given scope.
   * @param subject Subject details
   * @param actions List of actions.
   * @param scope Scope at which the check access is done.
   * @param options The options parameters.
   */
  checkPrincipalAccess(
    subject: SubjectInfo,
    actions: RequiredAction[],
    scope: string,
    options?: RoleAssignmentsCheckPrincipalAccessOptionalParams
  ): Promise<RoleAssignmentsCheckPrincipalAccessResponse>;
  /**
   * Create role assignment.
   * @param roleAssignmentId The ID of the role assignment.
   * @param roleId Role ID of the Synapse Built-In Role
   * @param principalId Object ID of the AAD principal or security-group
   * @param scope Scope at which the role assignment is created
   * @param options The options parameters.
   */
  createRoleAssignment(
    roleAssignmentId: string,
    roleId: string,
    principalId: string,
    scope: string,
    options?: RoleAssignmentsCreateRoleAssignmentOptionalParams
  ): Promise<RoleAssignmentsCreateRoleAssignmentResponse>;
  /**
   * Get role assignment by role assignment Id.
   * @param roleAssignmentId The ID of the role assignment.
   * @param options The options parameters.
   */
  getRoleAssignmentById(
    roleAssignmentId: string,
    options?: RoleAssignmentsGetRoleAssignmentByIdOptionalParams
  ): Promise<RoleAssignmentsGetRoleAssignmentByIdResponse>;
  /**
   * Delete role assignment by role assignment Id.
   * @param roleAssignmentId The ID of the role assignment.
   * @param options The options parameters.
   */
  deleteRoleAssignmentById(
    roleAssignmentId: string,
    options?: RoleAssignmentsDeleteRoleAssignmentByIdOptionalParams
  ): Promise<void>;
}
