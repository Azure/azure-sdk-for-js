/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */

import { tracingClient } from "../tracing";
import { PagedAsyncIterableIterator } from "@azure/core-paging";
import { RoleAssignments } from "../operationsInterfaces";
import * as coreClient from "@azure/core-client";
import * as Mappers from "../models/mappers";
import * as Parameters from "../models/parameters";
import { AccessControlClient } from "../accessControlClient";
import {
  RoleAssignmentDetails,
  RoleAssignmentsListRoleAssignmentsOptionalParams,
  SubjectInfo,
  RequiredAction,
  RoleAssignmentsCheckPrincipalAccessOptionalParams,
  RoleAssignmentsCheckPrincipalAccessResponse,
  RoleAssignmentsListRoleAssignmentsResponse,
  RoleAssignmentsCreateRoleAssignmentOptionalParams,
  RoleAssignmentsCreateRoleAssignmentResponse,
  RoleAssignmentsGetRoleAssignmentByIdOptionalParams,
  RoleAssignmentsGetRoleAssignmentByIdResponse,
  RoleAssignmentsDeleteRoleAssignmentByIdOptionalParams
} from "../models";

/// <reference lib="esnext.asynciterable" />
/** Class containing RoleAssignments operations. */
export class RoleAssignmentsImpl implements RoleAssignments {
  private readonly client: AccessControlClient;

  /**
   * Initialize a new instance of the class RoleAssignments class.
   * @param client Reference to the service client
   */
  constructor(client: AccessControlClient) {
    this.client = client;
  }

  /**
   * List role assignments.
   * @param options The options parameters.
   */
  public listRoleAssignments(
    options?: RoleAssignmentsListRoleAssignmentsOptionalParams
  ): PagedAsyncIterableIterator<RoleAssignmentDetails> {
    const iter = this.listRoleAssignmentsPagingAll(options);
    return {
      next() {
        return iter.next();
      },
      [Symbol.asyncIterator]() {
        return this;
      },
      byPage: () => {
        return this.listRoleAssignmentsPagingPage(options);
      }
    };
  }

  private async *listRoleAssignmentsPagingPage(
    options?: RoleAssignmentsListRoleAssignmentsOptionalParams
  ): AsyncIterableIterator<RoleAssignmentDetails[]> {
    let result = await this._listRoleAssignments(options);
    yield result.value || [];
  }

  private async *listRoleAssignmentsPagingAll(
    options?: RoleAssignmentsListRoleAssignmentsOptionalParams
  ): AsyncIterableIterator<RoleAssignmentDetails> {
    for await (const page of this.listRoleAssignmentsPagingPage(options)) {
      yield* page;
    }
  }

  /**
   * Check if the given principalId has access to perform list of actions at a given scope.
   * @param subject Subject details
   * @param actions List of actions.
   * @param scope Scope at which the check access is done.
   * @param options The options parameters.
   */
  async checkPrincipalAccess(
    subject: SubjectInfo,
    actions: RequiredAction[],
    scope: string,
    options?: RoleAssignmentsCheckPrincipalAccessOptionalParams
  ): Promise<RoleAssignmentsCheckPrincipalAccessResponse> {
    return tracingClient.withSpan(
      "AccessControlClient.checkPrincipalAccess",
      options ?? {},
      async (options) => {
        return this.client.sendOperationRequest(
          { subject, actions, scope, options },
          checkPrincipalAccessOperationSpec
        ) as Promise<RoleAssignmentsCheckPrincipalAccessResponse>;
      }
    );
  }

  /**
   * List role assignments.
   * @param options The options parameters.
   */
  private async _listRoleAssignments(
    options?: RoleAssignmentsListRoleAssignmentsOptionalParams
  ): Promise<RoleAssignmentsListRoleAssignmentsResponse> {
    return tracingClient.withSpan(
      "AccessControlClient._listRoleAssignments",
      options ?? {},
      async (options) => {
        return this.client.sendOperationRequest(
          { options },
          listRoleAssignmentsOperationSpec
        ) as Promise<RoleAssignmentsListRoleAssignmentsResponse>;
      }
    );
  }

  /**
   * Create role assignment.
   * @param roleAssignmentId The ID of the role assignment.
   * @param roleId Role ID of the Synapse Built-In Role
   * @param principalId Object ID of the AAD principal or security-group
   * @param scope Scope at which the role assignment is created
   * @param options The options parameters.
   */
  async createRoleAssignment(
    roleAssignmentId: string,
    roleId: string,
    principalId: string,
    scope: string,
    options?: RoleAssignmentsCreateRoleAssignmentOptionalParams
  ): Promise<RoleAssignmentsCreateRoleAssignmentResponse> {
    return tracingClient.withSpan(
      "AccessControlClient.createRoleAssignment",
      options ?? {},
      async (options) => {
        return this.client.sendOperationRequest(
          { roleAssignmentId, roleId, principalId, scope, options },
          createRoleAssignmentOperationSpec
        ) as Promise<RoleAssignmentsCreateRoleAssignmentResponse>;
      }
    );
  }

  /**
   * Get role assignment by role assignment Id.
   * @param roleAssignmentId The ID of the role assignment.
   * @param options The options parameters.
   */
  async getRoleAssignmentById(
    roleAssignmentId: string,
    options?: RoleAssignmentsGetRoleAssignmentByIdOptionalParams
  ): Promise<RoleAssignmentsGetRoleAssignmentByIdResponse> {
    return tracingClient.withSpan(
      "AccessControlClient.getRoleAssignmentById",
      options ?? {},
      async (options) => {
        return this.client.sendOperationRequest(
          { roleAssignmentId, options },
          getRoleAssignmentByIdOperationSpec
        ) as Promise<RoleAssignmentsGetRoleAssignmentByIdResponse>;
      }
    );
  }

  /**
   * Delete role assignment by role assignment Id.
   * @param roleAssignmentId The ID of the role assignment.
   * @param options The options parameters.
   */
  async deleteRoleAssignmentById(
    roleAssignmentId: string,
    options?: RoleAssignmentsDeleteRoleAssignmentByIdOptionalParams
  ): Promise<void> {
    return tracingClient.withSpan(
      "AccessControlClient.deleteRoleAssignmentById",
      options ?? {},
      async (options) => {
        return this.client.sendOperationRequest(
          { roleAssignmentId, options },
          deleteRoleAssignmentByIdOperationSpec
        ) as Promise<void>;
      }
    );
  }
}
// Operation Specifications
const serializer = coreClient.createSerializer(Mappers, /* isXml */ false);

const checkPrincipalAccessOperationSpec: coreClient.OperationSpec = {
  path: "/checkAccessSynapseRbac",
  httpMethod: "POST",
  responses: {
    200: {
      bodyMapper: Mappers.CheckPrincipalAccessResponse
    },
    default: {
      bodyMapper: Mappers.ErrorContract
    }
  },
  requestBody: {
    parameterPath: {
      subject: ["subject"],
      actions: ["actions"],
      scope: ["scope"]
    },
    mapper: { ...Mappers.CheckPrincipalAccessRequest, required: true }
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [Parameters.endpoint],
  headerParameters: [Parameters.contentType, Parameters.accept],
  mediaType: "json",
  serializer
};
const listRoleAssignmentsOperationSpec: coreClient.OperationSpec = {
  path: "/roleAssignments",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.RoleAssignmentDetailsList,
      headersMapper: Mappers.RoleAssignmentsListRoleAssignmentsHeaders
    },
    default: {
      bodyMapper: Mappers.ErrorContract
    }
  },
  queryParameters: [
    Parameters.apiVersion,
    Parameters.roleId,
    Parameters.principalId,
    Parameters.scope1
  ],
  urlParameters: [Parameters.endpoint],
  headerParameters: [Parameters.accept, Parameters.continuationToken],
  serializer
};
const createRoleAssignmentOperationSpec: coreClient.OperationSpec = {
  path: "/roleAssignments/{roleAssignmentId}",
  httpMethod: "PUT",
  responses: {
    200: {
      bodyMapper: Mappers.RoleAssignmentDetails
    },
    default: {
      bodyMapper: Mappers.ErrorContract
    }
  },
  requestBody: {
    parameterPath: {
      roleId: ["roleId"],
      principalId: ["principalId"],
      scope: ["scope"],
      principalType: ["options", "principalType"]
    },
    mapper: { ...Mappers.RoleAssignmentRequest, required: true }
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [Parameters.endpoint, Parameters.roleAssignmentId],
  headerParameters: [Parameters.contentType, Parameters.accept],
  mediaType: "json",
  serializer
};
const getRoleAssignmentByIdOperationSpec: coreClient.OperationSpec = {
  path: "/roleAssignments/{roleAssignmentId}",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.RoleAssignmentDetails
    },
    default: {
      bodyMapper: Mappers.ErrorContract
    }
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [Parameters.endpoint, Parameters.roleAssignmentId],
  headerParameters: [Parameters.accept],
  serializer
};
const deleteRoleAssignmentByIdOperationSpec: coreClient.OperationSpec = {
  path: "/roleAssignments/{roleAssignmentId}",
  httpMethod: "DELETE",
  responses: {
    200: {},
    204: {},
    default: {
      bodyMapper: Mappers.ErrorContract
    }
  },
  queryParameters: [Parameters.apiVersion, Parameters.scope1],
  urlParameters: [Parameters.endpoint, Parameters.roleAssignmentId],
  headerParameters: [Parameters.accept],
  serializer
};
