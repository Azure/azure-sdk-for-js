"use strict";
/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.RoleAssignmentsImpl = void 0;
const tslib_1 = require("tslib");
const tracing_js_1 = require("../tracing.js");
const coreClient = tslib_1.__importStar(require("@azure/core-client"));
const Mappers = tslib_1.__importStar(require("../models/mappers.js"));
const Parameters = tslib_1.__importStar(require("../models/parameters.js"));
// Operation Specifications
const serializer = coreClient.createSerializer(Mappers, /* isXml */ false);
const checkPrincipalAccessOperationSpec = {
    path: "/checkAccessSynapseRbac",
    httpMethod: "POST",
    responses: {
        200: {
            bodyMapper: Mappers.CheckPrincipalAccessResponse,
        },
        default: {
            bodyMapper: Mappers.ErrorContract,
        },
    },
    requestBody: {
        parameterPath: {
            subject: ["subject"],
            actions: ["actions"],
            scope: ["scope"],
        },
        mapper: Object.assign(Object.assign({}, Mappers.CheckPrincipalAccessRequest), { required: true }),
    },
    queryParameters: [Parameters.apiVersion],
    urlParameters: [Parameters.endpoint],
    headerParameters: [Parameters.contentType, Parameters.accept],
    mediaType: "json",
    serializer,
};
const listRoleAssignmentsOperationSpec = {
    path: "/roleAssignments",
    httpMethod: "GET",
    responses: {
        200: {
            bodyMapper: Mappers.RoleAssignmentDetailsList,
            headersMapper: Mappers.RoleAssignmentsListRoleAssignmentsHeaders,
        },
        default: {
            bodyMapper: Mappers.ErrorContract,
        },
    },
    queryParameters: [
        Parameters.apiVersion,
        Parameters.roleId,
        Parameters.principalId,
        Parameters.scope1,
    ],
    urlParameters: [Parameters.endpoint],
    headerParameters: [Parameters.accept, Parameters.continuationToken],
    serializer,
};
const createRoleAssignmentOperationSpec = {
    path: "/roleAssignments/{roleAssignmentId}",
    httpMethod: "PUT",
    responses: {
        200: {
            bodyMapper: Mappers.RoleAssignmentDetails,
        },
        default: {
            bodyMapper: Mappers.ErrorContract,
        },
    },
    requestBody: {
        parameterPath: {
            roleId: ["roleId"],
            principalId: ["principalId"],
            scope: ["scope"],
            principalType: ["options", "principalType"],
        },
        mapper: Object.assign(Object.assign({}, Mappers.RoleAssignmentRequest), { required: true }),
    },
    queryParameters: [Parameters.apiVersion],
    urlParameters: [Parameters.endpoint, Parameters.roleAssignmentId],
    headerParameters: [Parameters.contentType, Parameters.accept],
    mediaType: "json",
    serializer,
};
const getRoleAssignmentByIdOperationSpec = {
    path: "/roleAssignments/{roleAssignmentId}",
    httpMethod: "GET",
    responses: {
        200: {
            bodyMapper: Mappers.RoleAssignmentDetails,
        },
        default: {
            bodyMapper: Mappers.ErrorContract,
        },
    },
    queryParameters: [Parameters.apiVersion],
    urlParameters: [Parameters.endpoint, Parameters.roleAssignmentId],
    headerParameters: [Parameters.accept],
    serializer,
};
const deleteRoleAssignmentByIdOperationSpec = {
    path: "/roleAssignments/{roleAssignmentId}",
    httpMethod: "DELETE",
    responses: {
        200: {},
        204: {},
        default: {
            bodyMapper: Mappers.ErrorContract,
        },
    },
    queryParameters: [Parameters.apiVersion, Parameters.scope1],
    urlParameters: [Parameters.endpoint, Parameters.roleAssignmentId],
    headerParameters: [Parameters.accept],
    serializer,
};
/** Class containing RoleAssignments operations. */
class RoleAssignmentsImpl {
    /**
     * Initialize a new instance of the class RoleAssignments class.
     * @param client - Reference to the service client
     */
    constructor(client) {
        this.client = client;
    }
    /**
     * List role assignments.
     * @param options - The options parameters.
     */
    listRoleAssignments(options) {
        const iter = this.listRoleAssignmentsPagingAll(options);
        return {
            next() {
                return iter.next();
            },
            [Symbol.asyncIterator]() {
                return this;
            },
            byPage: () => {
                return this.listRoleAssignmentsPagingPage(options);
            },
        };
    }
    listRoleAssignmentsPagingPage(options) {
        return tslib_1.__asyncGenerator(this, arguments, function* listRoleAssignmentsPagingPage_1() {
            const result = yield tslib_1.__await(this._listRoleAssignments(options));
            yield yield tslib_1.__await(result.value || []);
        });
    }
    listRoleAssignmentsPagingAll(options) {
        return tslib_1.__asyncGenerator(this, arguments, function* listRoleAssignmentsPagingAll_1() {
            var _a, e_1, _b, _c;
            try {
                for (var _d = true, _e = tslib_1.__asyncValues(this.listRoleAssignmentsPagingPage(options)), _f; _f = yield tslib_1.__await(_e.next()), _a = _f.done, !_a; _d = true) {
                    _c = _f.value;
                    _d = false;
                    const page = _c;
                    yield tslib_1.__await(yield* tslib_1.__asyncDelegator(tslib_1.__asyncValues(page)));
                }
            }
            catch (e_1_1) { e_1 = { error: e_1_1 }; }
            finally {
                try {
                    if (!_d && !_a && (_b = _e.return)) yield tslib_1.__await(_b.call(_e));
                }
                finally { if (e_1) throw e_1.error; }
            }
        });
    }
    /**
     * Check if the given principalId has access to perform list of actions at a given scope.
     * @param subject - Subject details
     * @param actions - List of actions.
     * @param scope - - Scope at which the check access is done.
     * @param options - The options parameters.
     */
    async checkPrincipalAccess(subject, actions, scope, options) {
        return tracing_js_1.tracingClient.withSpan("AccessControlClient.checkPrincipalAccess", options !== null && options !== void 0 ? options : {}, async (updatedOptions) => {
            return this.client.sendOperationRequest({ subject, actions, scope, updatedOptions }, checkPrincipalAccessOperationSpec);
        });
    }
    /**
     * List role assignments.
     * @param options - The options parameters.
     */
    async _listRoleAssignments(options) {
        return tracing_js_1.tracingClient.withSpan("AccessControlClient._listRoleAssignments", options !== null && options !== void 0 ? options : {}, async (updatedOptions) => {
            return this.client.sendOperationRequest({ updatedOptions }, listRoleAssignmentsOperationSpec);
        });
    }
    /**
     * Create role assignment.
     * @param roleAssignmentId - The ID of the role assignment.
     * @param roleId - Role ID of the Synapse Built-In Role
     * @param principalId - Object ID of the AAD principal or security-group
     * @param scope - Scope at which the role assignment is created
     * @param options - The options parameters.
     */
    async createRoleAssignment(roleAssignmentId, roleId, principalId, scope, options) {
        return tracing_js_1.tracingClient.withSpan("AccessControlClient.createRoleAssignment", options !== null && options !== void 0 ? options : {}, async (updatedOptions) => {
            return this.client.sendOperationRequest({ roleAssignmentId, roleId, principalId, scope, updatedOptions }, createRoleAssignmentOperationSpec);
        });
    }
    /**
     * Get role assignment by role assignment Id.
     * @param roleAssignmentId - The ID of the role assignment.
     * @param options - The options parameters.
     */
    async getRoleAssignmentById(roleAssignmentId, options) {
        return tracing_js_1.tracingClient.withSpan("AccessControlClient.getRoleAssignmentById", options !== null && options !== void 0 ? options : {}, async (updatedOptions) => {
            return this.client.sendOperationRequest({ roleAssignmentId, updatedOptions }, getRoleAssignmentByIdOperationSpec);
        });
    }
    /**
     * Delete role assignment by role assignment Id.
     * @param roleAssignmentId - The ID of the role assignment.
     * @param options - The options parameters.
     */
    async deleteRoleAssignmentById(roleAssignmentId, options) {
        return tracing_js_1.tracingClient.withSpan("AccessControlClient.deleteRoleAssignmentById", options !== null && options !== void 0 ? options : {}, async (updatedOptions) => {
            return this.client.sendOperationRequest({ roleAssignmentId, updatedOptions }, deleteRoleAssignmentByIdOperationSpec);
        });
    }
}
exports.RoleAssignmentsImpl = RoleAssignmentsImpl;
//# sourceMappingURL=roleAssignments.js.map