/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */
import { CheckPrincipalAccessRequest as CheckPrincipalAccessRequestMapper, RoleAssignmentRequest as RoleAssignmentRequestMapper, } from "../models/mappers.js";
export const contentType = {
    parameterPath: ["options", "contentType"],
    mapper: {
        defaultValue: "application/json",
        isConstant: true,
        serializedName: "Content-Type",
        type: {
            name: "String",
        },
    },
};
export const accept = {
    parameterPath: "accept",
    mapper: {
        defaultValue: "application/json, text/json",
        isConstant: true,
        serializedName: "Accept",
        type: {
            name: "String",
        },
    },
};
export const subject = {
    parameterPath: "subject",
    mapper: CheckPrincipalAccessRequestMapper,
};
export const actions = {
    parameterPath: "actions",
    mapper: CheckPrincipalAccessRequestMapper,
};
export const scope = {
    parameterPath: "scope",
    mapper: CheckPrincipalAccessRequestMapper,
};
export const endpoint = {
    parameterPath: "endpoint",
    mapper: {
        serializedName: "endpoint",
        required: true,
        type: {
            name: "String",
        },
    },
    skipEncoding: true,
};
export const apiVersion = {
    parameterPath: "apiVersion",
    mapper: {
        defaultValue: "2020-12-01",
        isConstant: true,
        serializedName: "api-version",
        type: {
            name: "String",
        },
    },
};
export const roleId = {
    parameterPath: ["options", "roleId"],
    mapper: {
        serializedName: "roleId",
        type: {
            name: "String",
        },
    },
};
export const principalId = {
    parameterPath: ["options", "principalId"],
    mapper: {
        serializedName: "principalId",
        type: {
            name: "String",
        },
    },
};
export const scope1 = {
    parameterPath: ["options", "scope"],
    mapper: {
        serializedName: "scope",
        type: {
            name: "String",
        },
    },
};
export const continuationToken = {
    parameterPath: ["options", "continuationToken"],
    mapper: {
        serializedName: "x-ms-continuation",
        type: {
            name: "String",
        },
    },
};
export const roleId1 = {
    parameterPath: "roleId",
    mapper: RoleAssignmentRequestMapper,
};
export const principalId1 = {
    parameterPath: "principalId",
    mapper: RoleAssignmentRequestMapper,
};
export const scope2 = {
    parameterPath: "scope",
    mapper: RoleAssignmentRequestMapper,
};
export const principalType = {
    parameterPath: ["options", "principalType"],
    mapper: RoleAssignmentRequestMapper,
};
export const roleAssignmentId = {
    parameterPath: "roleAssignmentId",
    mapper: {
        constraints: {
            MinLength: 1,
        },
        serializedName: "roleAssignmentId",
        required: true,
        type: {
            name: "String",
        },
    },
};
export const isBuiltIn = {
    parameterPath: ["options", "isBuiltIn"],
    mapper: {
        serializedName: "isBuiltIn",
        type: {
            name: "Boolean",
        },
    },
};
export const roleDefinitionId = {
    parameterPath: "roleDefinitionId",
    mapper: {
        serializedName: "roleDefinitionId",
        required: true,
        type: {
            name: "String",
        },
    },
};
//# sourceMappingURL=parameters.js.map