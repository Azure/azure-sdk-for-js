{"version":3,"file":"roleAssignments.js","sourceRoot":"","sources":["../../../src/operations/roleAssignments.ts"],"names":[],"mappings":"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","sourcesContent":["/*\n * Copyright (c) Microsoft Corporation.\n * Licensed under the MIT License.\n *\n * Code generated by Microsoft (R) AutoRest Code Generator.\n * Changes may cause incorrect behavior and will be lost if the code is regenerated.\n */\n\nimport { tracingClient } from \"../tracing.js\";\nimport type { PagedAsyncIterableIterator } from \"@azure/core-paging\";\nimport type { RoleAssignments } from \"../operationsInterfaces/index.js\";\nimport * as coreClient from \"@azure/core-client\";\nimport * as Mappers from \"../models/mappers.js\";\nimport * as Parameters from \"../models/parameters.js\";\nimport type { AccessControlClient } from \"../accessControlClient.js\";\nimport type {\n  RoleAssignmentDetails,\n  RoleAssignmentsListRoleAssignmentsOptionalParams,\n  SubjectInfo,\n  RequiredAction,\n  RoleAssignmentsCheckPrincipalAccessOptionalParams,\n  RoleAssignmentsCheckPrincipalAccessResponse,\n  RoleAssignmentsListRoleAssignmentsResponse,\n  RoleAssignmentsCreateRoleAssignmentOptionalParams,\n  RoleAssignmentsCreateRoleAssignmentResponse,\n  RoleAssignmentsGetRoleAssignmentByIdOptionalParams,\n  RoleAssignmentsGetRoleAssignmentByIdResponse,\n  RoleAssignmentsDeleteRoleAssignmentByIdOptionalParams,\n} from \"../models/index.js\";\n\n// Operation Specifications\nconst serializer = coreClient.createSerializer(Mappers, /* isXml */ false);\n\nconst checkPrincipalAccessOperationSpec: coreClient.OperationSpec = {\n  path: \"/checkAccessSynapseRbac\",\n  httpMethod: \"POST\",\n  responses: {\n    200: {\n      bodyMapper: Mappers.CheckPrincipalAccessResponse,\n    },\n    default: {\n      bodyMapper: Mappers.ErrorContract,\n    },\n  },\n  requestBody: {\n    parameterPath: {\n      subject: [\"subject\"],\n      actions: [\"actions\"],\n      scope: [\"scope\"],\n    },\n    mapper: { ...Mappers.CheckPrincipalAccessRequest, required: true },\n  },\n  queryParameters: [Parameters.apiVersion],\n  urlParameters: [Parameters.endpoint],\n  headerParameters: [Parameters.contentType, Parameters.accept],\n  mediaType: \"json\",\n  serializer,\n};\nconst listRoleAssignmentsOperationSpec: coreClient.OperationSpec = {\n  path: \"/roleAssignments\",\n  httpMethod: \"GET\",\n  responses: {\n    200: {\n      bodyMapper: Mappers.RoleAssignmentDetailsList,\n      headersMapper: Mappers.RoleAssignmentsListRoleAssignmentsHeaders,\n    },\n    default: {\n      bodyMapper: Mappers.ErrorContract,\n    },\n  },\n  queryParameters: [\n    Parameters.apiVersion,\n    Parameters.roleId,\n    Parameters.principalId,\n    Parameters.scope1,\n  ],\n  urlParameters: [Parameters.endpoint],\n  headerParameters: [Parameters.accept, Parameters.continuationToken],\n  serializer,\n};\nconst createRoleAssignmentOperationSpec: coreClient.OperationSpec = {\n  path: \"/roleAssignments/{roleAssignmentId}\",\n  httpMethod: \"PUT\",\n  responses: {\n    200: {\n      bodyMapper: Mappers.RoleAssignmentDetails,\n    },\n    default: {\n      bodyMapper: Mappers.ErrorContract,\n    },\n  },\n  requestBody: {\n    parameterPath: {\n      roleId: [\"roleId\"],\n      principalId: [\"principalId\"],\n      scope: [\"scope\"],\n      principalType: [\"options\", \"principalType\"],\n    },\n    mapper: { ...Mappers.RoleAssignmentRequest, required: true },\n  },\n  queryParameters: [Parameters.apiVersion],\n  urlParameters: [Parameters.endpoint, Parameters.roleAssignmentId],\n  headerParameters: [Parameters.contentType, Parameters.accept],\n  mediaType: \"json\",\n  serializer,\n};\nconst getRoleAssignmentByIdOperationSpec: coreClient.OperationSpec = {\n  path: \"/roleAssignments/{roleAssignmentId}\",\n  httpMethod: \"GET\",\n  responses: {\n    200: {\n      bodyMapper: Mappers.RoleAssignmentDetails,\n    },\n    default: {\n      bodyMapper: Mappers.ErrorContract,\n    },\n  },\n  queryParameters: [Parameters.apiVersion],\n  urlParameters: [Parameters.endpoint, Parameters.roleAssignmentId],\n  headerParameters: [Parameters.accept],\n  serializer,\n};\nconst deleteRoleAssignmentByIdOperationSpec: coreClient.OperationSpec = {\n  path: \"/roleAssignments/{roleAssignmentId}\",\n  httpMethod: \"DELETE\",\n  responses: {\n    200: {},\n    204: {},\n    default: {\n      bodyMapper: Mappers.ErrorContract,\n    },\n  },\n  queryParameters: [Parameters.apiVersion, Parameters.scope1],\n  urlParameters: [Parameters.endpoint, Parameters.roleAssignmentId],\n  headerParameters: [Parameters.accept],\n  serializer,\n};\n\n/** Class containing RoleAssignments operations. */\nexport class RoleAssignmentsImpl implements RoleAssignments {\n  private readonly client: AccessControlClient;\n\n  /**\n   * Initialize a new instance of the class RoleAssignments class.\n   * @param client - Reference to the service client\n   */\n  constructor(client: AccessControlClient) {\n    this.client = client;\n  }\n\n  /**\n   * List role assignments.\n   * @param options - The options parameters.\n   */\n  public listRoleAssignments(\n    options?: RoleAssignmentsListRoleAssignmentsOptionalParams,\n  ): PagedAsyncIterableIterator<RoleAssignmentDetails> {\n    const iter = this.listRoleAssignmentsPagingAll(options);\n    return {\n      next() {\n        return iter.next();\n      },\n      [Symbol.asyncIterator]() {\n        return this;\n      },\n      byPage: () => {\n        return this.listRoleAssignmentsPagingPage(options);\n      },\n    };\n  }\n\n  private async *listRoleAssignmentsPagingPage(\n    options?: RoleAssignmentsListRoleAssignmentsOptionalParams,\n  ): AsyncIterableIterator<RoleAssignmentDetails[]> {\n    const result = await this._listRoleAssignments(options);\n    yield result.value || [];\n  }\n\n  private async *listRoleAssignmentsPagingAll(\n    options?: RoleAssignmentsListRoleAssignmentsOptionalParams,\n  ): AsyncIterableIterator<RoleAssignmentDetails> {\n    for await (const page of this.listRoleAssignmentsPagingPage(options)) {\n      yield* page;\n    }\n  }\n\n  /**\n   * Check if the given principalId has access to perform list of actions at a given scope.\n   * @param subject - Subject details\n   * @param actions - List of actions.\n   * @param scope - - Scope at which the check access is done.\n   * @param options - The options parameters.\n   */\n  async checkPrincipalAccess(\n    subject: SubjectInfo,\n    actions: RequiredAction[],\n    scope: string,\n    options?: RoleAssignmentsCheckPrincipalAccessOptionalParams,\n  ): Promise<RoleAssignmentsCheckPrincipalAccessResponse> {\n    return tracingClient.withSpan(\n      \"AccessControlClient.checkPrincipalAccess\",\n      options ?? {},\n      async (updatedOptions) => {\n        return this.client.sendOperationRequest(\n          { subject, actions, scope, updatedOptions },\n          checkPrincipalAccessOperationSpec,\n        ) as Promise<RoleAssignmentsCheckPrincipalAccessResponse>;\n      },\n    );\n  }\n\n  /**\n   * List role assignments.\n   * @param options - The options parameters.\n   */\n  private async _listRoleAssignments(\n    options?: RoleAssignmentsListRoleAssignmentsOptionalParams,\n  ): Promise<RoleAssignmentsListRoleAssignmentsResponse> {\n    return tracingClient.withSpan(\n      \"AccessControlClient._listRoleAssignments\",\n      options ?? {},\n      async (updatedOptions) => {\n        return this.client.sendOperationRequest(\n          { updatedOptions },\n          listRoleAssignmentsOperationSpec,\n        ) as Promise<RoleAssignmentsListRoleAssignmentsResponse>;\n      },\n    );\n  }\n\n  /**\n   * Create role assignment.\n   * @param roleAssignmentId - The ID of the role assignment.\n   * @param roleId - Role ID of the Synapse Built-In Role\n   * @param principalId - Object ID of the AAD principal or security-group\n   * @param scope - Scope at which the role assignment is created\n   * @param options - The options parameters.\n   */\n  async createRoleAssignment(\n    roleAssignmentId: string,\n    roleId: string,\n    principalId: string,\n    scope: string,\n    options?: RoleAssignmentsCreateRoleAssignmentOptionalParams,\n  ): Promise<RoleAssignmentsCreateRoleAssignmentResponse> {\n    return tracingClient.withSpan(\n      \"AccessControlClient.createRoleAssignment\",\n      options ?? {},\n      async (updatedOptions) => {\n        return this.client.sendOperationRequest(\n          { roleAssignmentId, roleId, principalId, scope, updatedOptions },\n          createRoleAssignmentOperationSpec,\n        ) as Promise<RoleAssignmentsCreateRoleAssignmentResponse>;\n      },\n    );\n  }\n\n  /**\n   * Get role assignment by role assignment Id.\n   * @param roleAssignmentId - The ID of the role assignment.\n   * @param options - The options parameters.\n   */\n  async getRoleAssignmentById(\n    roleAssignmentId: string,\n    options?: RoleAssignmentsGetRoleAssignmentByIdOptionalParams,\n  ): Promise<RoleAssignmentsGetRoleAssignmentByIdResponse> {\n    return tracingClient.withSpan(\n      \"AccessControlClient.getRoleAssignmentById\",\n      options ?? {},\n      async (updatedOptions) => {\n        return this.client.sendOperationRequest(\n          { roleAssignmentId, updatedOptions },\n          getRoleAssignmentByIdOperationSpec,\n        ) as Promise<RoleAssignmentsGetRoleAssignmentByIdResponse>;\n      },\n    );\n  }\n\n  /**\n   * Delete role assignment by role assignment Id.\n   * @param roleAssignmentId - The ID of the role assignment.\n   * @param options - The options parameters.\n   */\n  async deleteRoleAssignmentById(\n    roleAssignmentId: string,\n    options?: RoleAssignmentsDeleteRoleAssignmentByIdOptionalParams,\n  ): Promise<void> {\n    return tracingClient.withSpan(\n      \"AccessControlClient.deleteRoleAssignmentById\",\n      options ?? {},\n      async (updatedOptions) => {\n        return this.client.sendOperationRequest(\n          { roleAssignmentId, updatedOptions },\n          deleteRoleAssignmentByIdOperationSpec,\n        ) as Promise<void>;\n      },\n    );\n  }\n}\n"]}