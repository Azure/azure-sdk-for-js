/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */
import { tracingClient } from "../tracing.js";
import * as coreClient from "@azure/core-client";
import * as Mappers from "../models/mappers.js";
import * as Parameters from "../models/parameters.js";
// Operation Specifications
const serializer = coreClient.createSerializer(Mappers, /* isXml */ false);
const listRoleDefinitionsOperationSpec = {
    path: "/roleDefinitions",
    httpMethod: "GET",
    responses: {
        200: {
            bodyMapper: {
                type: {
                    name: "Sequence",
                    element: {
                        type: { name: "Composite", className: "SynapseRoleDefinition" },
                    },
                },
            },
        },
        default: {
            bodyMapper: Mappers.ErrorContract,
        },
    },
    queryParameters: [Parameters.apiVersion, Parameters.scope1, Parameters.isBuiltIn],
    urlParameters: [Parameters.endpoint],
    headerParameters: [Parameters.accept],
    serializer,
};
const getRoleDefinitionByIdOperationSpec = {
    path: "/roleDefinitions/{roleDefinitionId}",
    httpMethod: "GET",
    responses: {
        200: {
            bodyMapper: Mappers.SynapseRoleDefinition,
        },
        default: {
            bodyMapper: Mappers.ErrorContract,
        },
    },
    queryParameters: [Parameters.apiVersion],
    urlParameters: [Parameters.endpoint, Parameters.roleDefinitionId],
    headerParameters: [Parameters.accept],
    serializer,
};
const listScopesOperationSpec = {
    path: "/rbacScopes",
    httpMethod: "GET",
    responses: {
        200: {
            bodyMapper: {
                type: { name: "Sequence", element: { type: { name: "String" } } },
            },
        },
        default: {
            bodyMapper: Mappers.ErrorContract,
        },
    },
    queryParameters: [Parameters.apiVersion],
    urlParameters: [Parameters.endpoint],
    headerParameters: [Parameters.accept],
    serializer,
};
/** Class containing RoleDefinitions operations. */
export class RoleDefinitionsImpl {
    /**
     * Initialize a new instance of the class RoleDefinitions class.
     * @param client - Reference to the service client
     */
    constructor(client) {
        this.client = client;
    }
    /**
     * List role definitions.
     * @param options - The options parameters.
     */
    async listRoleDefinitions(options) {
        return tracingClient.withSpan("AccessControlClient.listRoleDefinitions", options !== null && options !== void 0 ? options : {}, async (updatedOptions) => {
            return this.client.sendOperationRequest({ updatedOptions }, listRoleDefinitionsOperationSpec);
        });
    }
    /**
     * Get role definition by role definition Id.
     * @param roleDefinitionId - Synapse Built-In Role Definition Id.
     * @param options - The options parameters.
     */
    async getRoleDefinitionById(roleDefinitionId, options) {
        return tracingClient.withSpan("AccessControlClient.getRoleDefinitionById", options !== null && options !== void 0 ? options : {}, async (updatedOptions) => {
            return this.client.sendOperationRequest({ roleDefinitionId, updatedOptions }, getRoleDefinitionByIdOperationSpec);
        });
    }
    /**
     * List rbac scopes.
     * @param options - The options parameters.
     */
    async listScopes(options) {
        return tracingClient.withSpan("AccessControlClient.listScopes", options !== null && options !== void 0 ? options : {}, async (updatedOptions) => {
            return this.client.sendOperationRequest({ updatedOptions }, listScopesOperationSpec);
        });
    }
}
//# sourceMappingURL=roleDefinitions.js.map