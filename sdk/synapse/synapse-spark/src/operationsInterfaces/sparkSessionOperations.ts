/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */

import {
  SparkSessionOperationsGetSparkSessionsOptionalParams,
  SparkSessionOperationsGetSparkSessionsResponse,
  SparkSessionOptions,
  SparkSessionOperationsCreateSparkSessionOptionalParams,
  SparkSessionOperationsCreateSparkSessionResponse,
  SparkSessionOperationsGetSparkSessionOptionalParams,
  SparkSessionOperationsGetSparkSessionResponse,
  SparkSessionOperationsCancelSparkSessionOptionalParams,
  SparkSessionOperationsResetSparkSessionTimeoutOptionalParams,
  SparkSessionOperationsGetSparkStatementsOptionalParams,
  SparkSessionOperationsGetSparkStatementsResponse,
  SparkStatementOptions,
  SparkSessionOperationsCreateSparkStatementOptionalParams,
  SparkSessionOperationsCreateSparkStatementResponse,
  SparkSessionOperationsGetSparkStatementOptionalParams,
  SparkSessionOperationsGetSparkStatementResponse,
  SparkSessionOperationsCancelSparkStatementOptionalParams,
  SparkSessionOperationsCancelSparkStatementResponse
} from "../models";

/** Interface representing a SparkSessionOperations. */
export interface SparkSessionOperations {
  /**
   * List all spark sessions which are running under a particular spark pool.
   * @param options The options parameters.
   */
  getSparkSessions(
    options?: SparkSessionOperationsGetSparkSessionsOptionalParams
  ): Promise<SparkSessionOperationsGetSparkSessionsResponse>;
  /**
   * Create new spark session.
   * @param sparkSessionOptions Livy compatible batch job request payload.
   * @param options The options parameters.
   */
  createSparkSession(
    sparkSessionOptions: SparkSessionOptions,
    options?: SparkSessionOperationsCreateSparkSessionOptionalParams
  ): Promise<SparkSessionOperationsCreateSparkSessionResponse>;
  /**
   * Gets a single spark session.
   * @param sessionId Identifier for the session.
   * @param options The options parameters.
   */
  getSparkSession(
    sessionId: number,
    options?: SparkSessionOperationsGetSparkSessionOptionalParams
  ): Promise<SparkSessionOperationsGetSparkSessionResponse>;
  /**
   * Cancels a running spark session.
   * @param sessionId Identifier for the session.
   * @param options The options parameters.
   */
  cancelSparkSession(
    sessionId: number,
    options?: SparkSessionOperationsCancelSparkSessionOptionalParams
  ): Promise<void>;
  /**
   * Sends a keep alive call to the current session to reset the session timeout.
   * @param sessionId Identifier for the session.
   * @param options The options parameters.
   */
  resetSparkSessionTimeout(
    sessionId: number,
    options?: SparkSessionOperationsResetSparkSessionTimeoutOptionalParams
  ): Promise<void>;
  /**
   * Gets a list of statements within a spark session.
   * @param sessionId Identifier for the session.
   * @param options The options parameters.
   */
  getSparkStatements(
    sessionId: number,
    options?: SparkSessionOperationsGetSparkStatementsOptionalParams
  ): Promise<SparkSessionOperationsGetSparkStatementsResponse>;
  /**
   * Create statement within a spark session.
   * @param sessionId Identifier for the session.
   * @param sparkStatementOptions Livy compatible batch job request payload.
   * @param options The options parameters.
   */
  createSparkStatement(
    sessionId: number,
    sparkStatementOptions: SparkStatementOptions,
    options?: SparkSessionOperationsCreateSparkStatementOptionalParams
  ): Promise<SparkSessionOperationsCreateSparkStatementResponse>;
  /**
   * Gets a single statement within a spark session.
   * @param sessionId Identifier for the session.
   * @param statementId Identifier for the statement.
   * @param options The options parameters.
   */
  getSparkStatement(
    sessionId: number,
    statementId: number,
    options?: SparkSessionOperationsGetSparkStatementOptionalParams
  ): Promise<SparkSessionOperationsGetSparkStatementResponse>;
  /**
   * Kill a statement within a session.
   * @param sessionId Identifier for the session.
   * @param statementId Identifier for the statement.
   * @param options The options parameters.
   */
  cancelSparkStatement(
    sessionId: number,
    statementId: number,
    options?: SparkSessionOperationsCancelSparkStatementOptionalParams
  ): Promise<SparkSessionOperationsCancelSparkStatementResponse>;
}
