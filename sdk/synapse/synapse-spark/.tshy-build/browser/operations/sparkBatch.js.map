{"version":3,"file":"sparkBatch.js","sourceRoot":"","sources":["../../../src/operations/sparkBatch.ts"],"names":[],"mappings":"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","sourcesContent":["/*\n * Copyright (c) Microsoft Corporation.\n * Licensed under the MIT License.\n *\n * Code generated by Microsoft (R) AutoRest Code Generator.\n * Changes may cause incorrect behavior and will be lost if the code is regenerated.\n */\n\nimport { tracingClient } from \"../tracing.js\";\nimport type { SparkBatch } from \"../operationsInterfaces/index.js\";\nimport * as coreClient from \"@azure/core-client\";\nimport * as Mappers from \"../models/mappers.js\";\nimport * as Parameters from \"../models/parameters.js\";\nimport type { SparkClient } from \"../sparkClient.js\";\nimport type {\n  SparkBatchGetSparkBatchJobsOptionalParams,\n  SparkBatchGetSparkBatchJobsResponse,\n  SparkBatchJobOptions,\n  SparkBatchCreateSparkBatchJobOptionalParams,\n  SparkBatchCreateSparkBatchJobResponse,\n  SparkBatchGetSparkBatchJobOptionalParams,\n  SparkBatchGetSparkBatchJobResponse,\n  SparkBatchCancelSparkBatchJobOptionalParams,\n} from \"../models/index.js\";\n\n// Operation Specifications\nconst serializer = coreClient.createSerializer(Mappers, /* isXml */ false);\n\nconst getSparkBatchJobsOperationSpec: coreClient.OperationSpec = {\n  path: \"/livyApi/versions/{livyApiVersion}/sparkPools/{sparkPoolName}/batches\",\n  httpMethod: \"GET\",\n  responses: {\n    200: {\n      bodyMapper: Mappers.SparkBatchJobCollection,\n    },\n  },\n  queryParameters: [Parameters.fromParam, Parameters.size, Parameters.detailed],\n  urlParameters: [Parameters.endpoint, Parameters.livyApiVersion, Parameters.sparkPoolName],\n  headerParameters: [Parameters.accept],\n  serializer,\n};\nconst createSparkBatchJobOperationSpec: coreClient.OperationSpec = {\n  path: \"/livyApi/versions/{livyApiVersion}/sparkPools/{sparkPoolName}/batches\",\n  httpMethod: \"POST\",\n  responses: {\n    200: {\n      bodyMapper: Mappers.SparkBatchJob,\n    },\n  },\n  requestBody: Parameters.sparkBatchJobOptions,\n  queryParameters: [Parameters.detailed],\n  urlParameters: [Parameters.endpoint, Parameters.livyApiVersion, Parameters.sparkPoolName],\n  headerParameters: [Parameters.accept, Parameters.contentType],\n  mediaType: \"json\",\n  serializer,\n};\nconst getSparkBatchJobOperationSpec: coreClient.OperationSpec = {\n  path: \"/livyApi/versions/{livyApiVersion}/sparkPools/{sparkPoolName}/batches/{batchId}\",\n  httpMethod: \"GET\",\n  responses: {\n    200: {\n      bodyMapper: Mappers.SparkBatchJob,\n    },\n  },\n  queryParameters: [Parameters.detailed],\n  urlParameters: [\n    Parameters.endpoint,\n    Parameters.livyApiVersion,\n    Parameters.sparkPoolName,\n    Parameters.batchId,\n  ],\n  headerParameters: [Parameters.accept],\n  serializer,\n};\nconst cancelSparkBatchJobOperationSpec: coreClient.OperationSpec = {\n  path: \"/livyApi/versions/{livyApiVersion}/sparkPools/{sparkPoolName}/batches/{batchId}\",\n  httpMethod: \"DELETE\",\n  responses: { 200: {} },\n  urlParameters: [\n    Parameters.endpoint,\n    Parameters.livyApiVersion,\n    Parameters.sparkPoolName,\n    Parameters.batchId,\n  ],\n  serializer,\n};\n\n/** Class containing SparkBatch operations. */\nexport class SparkBatchImpl implements SparkBatch {\n  private readonly client: SparkClient;\n\n  /**\n   * Initialize a new instance of the class SparkBatch class.\n   * @param client - Reference to the service client\n   */\n  constructor(client: SparkClient) {\n    this.client = client;\n  }\n\n  /**\n   * List all spark batch jobs which are running under a particular spark pool.\n   * @param options - The options parameters.\n   */\n  async getSparkBatchJobs(\n    options?: SparkBatchGetSparkBatchJobsOptionalParams,\n  ): Promise<SparkBatchGetSparkBatchJobsResponse> {\n    return tracingClient.withSpan(\n      \"SparkClient.getSparkBatchJobs\",\n      options ?? {},\n      async (updatedOptions) => {\n        return this.client.sendOperationRequest(\n          { updatedOptions },\n          getSparkBatchJobsOperationSpec,\n        ) as Promise<SparkBatchGetSparkBatchJobsResponse>;\n      },\n    );\n  }\n\n  /**\n   * Create new spark batch job.\n   * @param sparkBatchJobOptions - Livy compatible batch job request payload.\n   * @param options - The options parameters.\n   */\n  async createSparkBatchJob(\n    sparkBatchJobOptions: SparkBatchJobOptions,\n    options?: SparkBatchCreateSparkBatchJobOptionalParams,\n  ): Promise<SparkBatchCreateSparkBatchJobResponse> {\n    return tracingClient.withSpan(\n      \"SparkClient.createSparkBatchJob\",\n      options ?? {},\n      async (updatedOptions) => {\n        return this.client.sendOperationRequest(\n          { sparkBatchJobOptions, updatedOptions },\n          createSparkBatchJobOperationSpec,\n        ) as Promise<SparkBatchCreateSparkBatchJobResponse>;\n      },\n    );\n  }\n\n  /**\n   * Gets a single spark batch job.\n   * @param batchId - Identifier for the batch job.\n   * @param options - The options parameters.\n   */\n  async getSparkBatchJob(\n    batchId: number,\n    options?: SparkBatchGetSparkBatchJobOptionalParams,\n  ): Promise<SparkBatchGetSparkBatchJobResponse> {\n    return tracingClient.withSpan(\n      \"SparkClient.getSparkBatchJob\",\n      options ?? {},\n      async (updatedOptions) => {\n        return this.client.sendOperationRequest(\n          { batchId, updatedOptions },\n          getSparkBatchJobOperationSpec,\n        ) as Promise<SparkBatchGetSparkBatchJobResponse>;\n      },\n    );\n  }\n\n  /**\n   * Cancels a running spark batch job.\n   * @param batchId - Identifier for the batch job.\n   * @param options - The options parameters.\n   */\n  async cancelSparkBatchJob(\n    batchId: number,\n    options?: SparkBatchCancelSparkBatchJobOptionalParams,\n  ): Promise<void> {\n    return tracingClient.withSpan(\n      \"SparkClient.cancelSparkBatchJob\",\n      options ?? {},\n      async (updatedOptions) => {\n        return this.client.sendOperationRequest(\n          { batchId, updatedOptions },\n          cancelSparkBatchJobOperationSpec,\n        ) as Promise<void>;\n      },\n    );\n  }\n}\n"]}