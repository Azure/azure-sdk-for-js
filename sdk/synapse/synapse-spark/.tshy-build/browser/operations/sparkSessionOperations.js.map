{"version":3,"file":"sparkSessionOperations.js","sourceRoot":"","sources":["../../../src/operations/sparkSessionOperations.ts"],"names":[],"mappings":"AAAA;;;;;;GAMG;AAEH,OAAO,EAAE,aAAa,EAAE,MAAM,eAAe,CAAC;AAE9C,OAAO,KAAK,UAAU,MAAM,oBAAoB,CAAC;AACjD,OAAO,KAAK,OAAO,MAAM,sBAAsB,CAAC;AAChD,OAAO,KAAK,UAAU,MAAM,yBAAyB,CAAC;AAuBtD,2BAA2B;AAC3B,MAAM,UAAU,GAAG,UAAU,CAAC,gBAAgB,CAAC,OAAO,EAAE,WAAW,CAAC,KAAK,CAAC,CAAC;AAE3E,MAAM,6BAA6B,GAA6B;IAC9D,IAAI,EAAE,wEAAwE;IAC9E,UAAU,EAAE,KAAK;IACjB,SAAS,EAAE;QACT,GAAG,EAAE;YACH,UAAU,EAAE,OAAO,CAAC,sBAAsB;SAC3C;KACF;IACD,eAAe,EAAE,CAAC,UAAU,CAAC,SAAS,EAAE,UAAU,CAAC,IAAI,EAAE,UAAU,CAAC,QAAQ,CAAC;IAC7E,aAAa,EAAE,CAAC,UAAU,CAAC,QAAQ,EAAE,UAAU,CAAC,cAAc,EAAE,UAAU,CAAC,aAAa,CAAC;IACzF,gBAAgB,EAAE,CAAC,UAAU,CAAC,MAAM,CAAC;IACrC,UAAU;CACX,CAAC;AACF,MAAM,+BAA+B,GAA6B;IAChE,IAAI,EAAE,wEAAwE;IAC9E,UAAU,EAAE,MAAM;IAClB,SAAS,EAAE;QACT,GAAG,EAAE;YACH,UAAU,EAAE,OAAO,CAAC,YAAY;SACjC;KACF;IACD,WAAW,EAAE,UAAU,CAAC,mBAAmB;IAC3C,eAAe,EAAE,CAAC,UAAU,CAAC,QAAQ,CAAC;IACtC,aAAa,EAAE,CAAC,UAAU,CAAC,QAAQ,EAAE,UAAU,CAAC,cAAc,EAAE,UAAU,CAAC,aAAa,CAAC;IACzF,gBAAgB,EAAE,CAAC,UAAU,CAAC,MAAM,EAAE,UAAU,CAAC,WAAW,CAAC;IAC7D,SAAS,EAAE,MAAM;IACjB,UAAU;CACX,CAAC;AACF,MAAM,4BAA4B,GAA6B;IAC7D,IAAI,EAAE,oFAAoF;IAC1F,UAAU,EAAE,KAAK;IACjB,SAAS,EAAE;QACT,GAAG,EAAE;YACH,UAAU,EAAE,OAAO,CAAC,YAAY;SACjC;KACF;IACD,eAAe,EAAE,CAAC,UAAU,CAAC,QAAQ,CAAC;IACtC,aAAa,EAAE;QACb,UAAU,CAAC,QAAQ;QACnB,UAAU,CAAC,cAAc;QACzB,UAAU,CAAC,aAAa;QACxB,UAAU,CAAC,SAAS;KACrB;IACD,gBAAgB,EAAE,CAAC,UAAU,CAAC,MAAM,CAAC;IACrC,UAAU;CACX,CAAC;AACF,MAAM,+BAA+B,GAA6B;IAChE,IAAI,EAAE,oFAAoF;IAC1F,UAAU,EAAE,QAAQ;IACpB,SAAS,EAAE,EAAE,GAAG,EAAE,EAAE,EAAE;IACtB,aAAa,EAAE;QACb,UAAU,CAAC,QAAQ;QACnB,UAAU,CAAC,cAAc;QACzB,UAAU,CAAC,aAAa;QACxB,UAAU,CAAC,SAAS;KACrB;IACD,UAAU;CACX,CAAC;AACF,MAAM,qCAAqC,GAA6B;IACtE,IAAI,EAAE,kGAAkG;IACxG,UAAU,EAAE,KAAK;IACjB,SAAS,EAAE,EAAE,GAAG,EAAE,EAAE,EAAE;IACtB,aAAa,EAAE;QACb,UAAU,CAAC,QAAQ;QACnB,UAAU,CAAC,cAAc;QACzB,UAAU,CAAC,aAAa;QACxB,UAAU,CAAC,SAAS;KACrB;IACD,UAAU;CACX,CAAC;AACF,MAAM,+BAA+B,GAA6B;IAChE,IAAI,EAAE,+FAA+F;IACrG,UAAU,EAAE,KAAK;IACjB,SAAS,EAAE;QACT,GAAG,EAAE;YACH,UAAU,EAAE,OAAO,CAAC,wBAAwB;SAC7C;KACF;IACD,aAAa,EAAE;QACb,UAAU,CAAC,QAAQ;QACnB,UAAU,CAAC,cAAc;QACzB,UAAU,CAAC,aAAa;QACxB,UAAU,CAAC,SAAS;KACrB;IACD,gBAAgB,EAAE,CAAC,UAAU,CAAC,MAAM,CAAC;IACrC,UAAU;CACX,CAAC;AACF,MAAM,iCAAiC,GAA6B;IAClE,IAAI,EAAE,+FAA+F;IACrG,UAAU,EAAE,MAAM;IAClB,SAAS,EAAE;QACT,GAAG,EAAE;YACH,UAAU,EAAE,OAAO,CAAC,cAAc;SACnC;KACF;IACD,WAAW,EAAE,UAAU,CAAC,qBAAqB;IAC7C,aAAa,EAAE;QACb,UAAU,CAAC,QAAQ;QACnB,UAAU,CAAC,cAAc;QACzB,UAAU,CAAC,aAAa;QACxB,UAAU,CAAC,SAAS;KACrB;IACD,gBAAgB,EAAE,CAAC,UAAU,CAAC,MAAM,EAAE,UAAU,CAAC,WAAW,CAAC;IAC7D,SAAS,EAAE,MAAM;IACjB,UAAU;CACX,CAAC;AACF,MAAM,8BAA8B,GAA6B;IAC/D,IAAI,EAAE,6GAA6G;IACnH,UAAU,EAAE,KAAK;IACjB,SAAS,EAAE;QACT,GAAG,EAAE;YACH,UAAU,EAAE,OAAO,CAAC,cAAc;SACnC;KACF;IACD,aAAa,EAAE;QACb,UAAU,CAAC,QAAQ;QACnB,UAAU,CAAC,cAAc;QACzB,UAAU,CAAC,aAAa;QACxB,UAAU,CAAC,SAAS;QACpB,UAAU,CAAC,WAAW;KACvB;IACD,gBAAgB,EAAE,CAAC,UAAU,CAAC,MAAM,CAAC;IACrC,UAAU;CACX,CAAC;AACF,MAAM,iCAAiC,GAA6B;IAClE,IAAI,EAAE,oHAAoH;IAC1H,UAAU,EAAE,MAAM;IAClB,SAAS,EAAE;QACT,GAAG,EAAE;YACH,UAAU,EAAE,OAAO,CAAC,gCAAgC;SACrD;KACF;IACD,aAAa,EAAE;QACb,UAAU,CAAC,QAAQ;QACnB,UAAU,CAAC,cAAc;QACzB,UAAU,CAAC,aAAa;QACxB,UAAU,CAAC,SAAS;QACpB,UAAU,CAAC,WAAW;KACvB;IACD,gBAAgB,EAAE,CAAC,UAAU,CAAC,MAAM,CAAC;IACrC,UAAU;CACX,CAAC;AAEF,0DAA0D;AAC1D,MAAM,OAAO,0BAA0B;IAGrC;;;OAGG;IACH,YAAY,MAAmB;QAC7B,IAAI,CAAC,MAAM,GAAG,MAAM,CAAC;IACvB,CAAC;IAED;;;OAGG;IACH,KAAK,CAAC,gBAAgB,CACpB,OAAoD;QAEpD,OAAO,aAAa,CAAC,QAAQ,CAC3B,8BAA8B,EAC9B,OAAO,aAAP,OAAO,cAAP,OAAO,GAAI,EAAE,EACb,KAAK,EAAE,cAAc,EAAE,EAAE;YACvB,OAAO,IAAI,CAAC,MAAM,CAAC,oBAAoB,CACrC,EAAE,cAAc,EAAE,EAClB,6BAA6B,CACmB,CAAC;QACrD,CAAC,CACF,CAAC;IACJ,CAAC;IAED;;;;OAIG;IACH,KAAK,CAAC,kBAAkB,CACtB,mBAAwC,EACxC,OAAsD;QAEtD,OAAO,aAAa,CAAC,QAAQ,CAC3B,gCAAgC,EAChC,OAAO,aAAP,OAAO,cAAP,OAAO,GAAI,EAAE,EACb,KAAK,EAAE,cAAc,EAAE,EAAE;YACvB,OAAO,IAAI,CAAC,MAAM,CAAC,oBAAoB,CACrC,EAAE,mBAAmB,EAAE,cAAc,EAAE,EACvC,+BAA+B,CACmB,CAAC;QACvD,CAAC,CACF,CAAC;IACJ,CAAC;IAED;;;;OAIG;IACH,KAAK,CAAC,eAAe,CACnB,SAAiB,EACjB,OAAmD;QAEnD,OAAO,aAAa,CAAC,QAAQ,CAC3B,6BAA6B,EAC7B,OAAO,aAAP,OAAO,cAAP,OAAO,GAAI,EAAE,EACb,KAAK,EAAE,cAAc,EAAE,EAAE;YACvB,OAAO,IAAI,CAAC,MAAM,CAAC,oBAAoB,CACrC,EAAE,SAAS,EAAE,cAAc,EAAE,EAC7B,4BAA4B,CACmB,CAAC;QACpD,CAAC,CACF,CAAC;IACJ,CAAC;IAED;;;;OAIG;IACH,KAAK,CAAC,kBAAkB,CACtB,SAAiB,EACjB,OAAsD;QAEtD,OAAO,aAAa,CAAC,QAAQ,CAC3B,gCAAgC,EAChC,OAAO,aAAP,OAAO,cAAP,OAAO,GAAI,EAAE,EACb,KAAK,EAAE,cAAc,EAAE,EAAE;YACvB,OAAO,IAAI,CAAC,MAAM,CAAC,oBAAoB,CACrC,EAAE,SAAS,EAAE,cAAc,EAAE,EAC7B,+BAA+B,CACf,CAAC;QACrB,CAAC,CACF,CAAC;IACJ,CAAC;IAED;;;;OAIG;IACH,KAAK,CAAC,wBAAwB,CAC5B,SAAiB,EACjB,OAA4D;QAE5D,OAAO,aAAa,CAAC,QAAQ,CAC3B,sCAAsC,EACtC,OAAO,aAAP,OAAO,cAAP,OAAO,GAAI,EAAE,EACb,KAAK,EAAE,cAAc,EAAE,EAAE;YACvB,OAAO,IAAI,CAAC,MAAM,CAAC,oBAAoB,CACrC,EAAE,SAAS,EAAE,cAAc,EAAE,EAC7B,qCAAqC,CACrB,CAAC;QACrB,CAAC,CACF,CAAC;IACJ,CAAC;IAED;;;;OAIG;IACH,KAAK,CAAC,kBAAkB,CACtB,SAAiB,EACjB,OAAsD;QAEtD,OAAO,aAAa,CAAC,QAAQ,CAC3B,gCAAgC,EAChC,OAAO,aAAP,OAAO,cAAP,OAAO,GAAI,EAAE,EACb,KAAK,EAAE,cAAc,EAAE,EAAE;YACvB,OAAO,IAAI,CAAC,MAAM,CAAC,oBAAoB,CACrC,EAAE,SAAS,EAAE,cAAc,EAAE,EAC7B,+BAA+B,CACmB,CAAC;QACvD,CAAC,CACF,CAAC;IACJ,CAAC;IAED;;;;;OAKG;IACH,KAAK,CAAC,oBAAoB,CACxB,SAAiB,EACjB,qBAA4C,EAC5C,OAAwD;QAExD,OAAO,aAAa,CAAC,QAAQ,CAC3B,kCAAkC,EAClC,OAAO,aAAP,OAAO,cAAP,OAAO,GAAI,EAAE,EACb,KAAK,EAAE,cAAc,EAAE,EAAE;YACvB,OAAO,IAAI,CAAC,MAAM,CAAC,oBAAoB,CACrC,EAAE,SAAS,EAAE,qBAAqB,EAAE,cAAc,EAAE,EACpD,iCAAiC,CACmB,CAAC;QACzD,CAAC,CACF,CAAC;IACJ,CAAC;IAED;;;;;OAKG;IACH,KAAK,CAAC,iBAAiB,CACrB,SAAiB,EACjB,WAAmB,EACnB,OAAqD;QAErD,OAAO,aAAa,CAAC,QAAQ,CAC3B,+BAA+B,EAC/B,OAAO,aAAP,OAAO,cAAP,OAAO,GAAI,EAAE,EACb,KAAK,EAAE,cAAc,EAAE,EAAE;YACvB,OAAO,IAAI,CAAC,MAAM,CAAC,oBAAoB,CACrC,EAAE,SAAS,EAAE,WAAW,EAAE,cAAc,EAAE,EAC1C,8BAA8B,CACmB,CAAC;QACtD,CAAC,CACF,CAAC;IACJ,CAAC;IAED;;;;;OAKG;IACH,KAAK,CAAC,oBAAoB,CACxB,SAAiB,EACjB,WAAmB,EACnB,OAAwD;QAExD,OAAO,aAAa,CAAC,QAAQ,CAC3B,kCAAkC,EAClC,OAAO,aAAP,OAAO,cAAP,OAAO,GAAI,EAAE,EACb,KAAK,EAAE,cAAc,EAAE,EAAE;YACvB,OAAO,IAAI,CAAC,MAAM,CAAC,oBAAoB,CACrC,EAAE,SAAS,EAAE,WAAW,EAAE,cAAc,EAAE,EAC1C,iCAAiC,CACmB,CAAC;QACzD,CAAC,CACF,CAAC;IACJ,CAAC;CACF","sourcesContent":["/*\n * Copyright (c) Microsoft Corporation.\n * Licensed under the MIT License.\n *\n * Code generated by Microsoft (R) AutoRest Code Generator.\n * Changes may cause incorrect behavior and will be lost if the code is regenerated.\n */\n\nimport { tracingClient } from \"../tracing.js\";\nimport type { SparkSessionOperations } from \"../operationsInterfaces/index.js\";\nimport * as coreClient from \"@azure/core-client\";\nimport * as Mappers from \"../models/mappers.js\";\nimport * as Parameters from \"../models/parameters.js\";\nimport type { SparkClient } from \"../sparkClient.js\";\nimport type {\n  SparkSessionGetSparkSessionsOptionalParams,\n  SparkSessionGetSparkSessionsResponse,\n  SparkSessionOptions,\n  SparkSessionCreateSparkSessionOptionalParams,\n  SparkSessionCreateSparkSessionResponse,\n  SparkSessionGetSparkSessionOptionalParams,\n  SparkSessionGetSparkSessionResponse,\n  SparkSessionCancelSparkSessionOptionalParams,\n  SparkSessionResetSparkSessionTimeoutOptionalParams,\n  SparkSessionGetSparkStatementsOptionalParams,\n  SparkSessionGetSparkStatementsResponse,\n  SparkStatementOptions,\n  SparkSessionCreateSparkStatementOptionalParams,\n  SparkSessionCreateSparkStatementResponse,\n  SparkSessionGetSparkStatementOptionalParams,\n  SparkSessionGetSparkStatementResponse,\n  SparkSessionCancelSparkStatementOptionalParams,\n  SparkSessionCancelSparkStatementResponse,\n} from \"../models/index.js\";\n\n// Operation Specifications\nconst serializer = coreClient.createSerializer(Mappers, /* isXml */ false);\n\nconst getSparkSessionsOperationSpec: coreClient.OperationSpec = {\n  path: \"/livyApi/versions/{livyApiVersion}/sparkPools/{sparkPoolName}/sessions\",\n  httpMethod: \"GET\",\n  responses: {\n    200: {\n      bodyMapper: Mappers.SparkSessionCollection,\n    },\n  },\n  queryParameters: [Parameters.fromParam, Parameters.size, Parameters.detailed],\n  urlParameters: [Parameters.endpoint, Parameters.livyApiVersion, Parameters.sparkPoolName],\n  headerParameters: [Parameters.accept],\n  serializer,\n};\nconst createSparkSessionOperationSpec: coreClient.OperationSpec = {\n  path: \"/livyApi/versions/{livyApiVersion}/sparkPools/{sparkPoolName}/sessions\",\n  httpMethod: \"POST\",\n  responses: {\n    200: {\n      bodyMapper: Mappers.SparkSession,\n    },\n  },\n  requestBody: Parameters.sparkSessionOptions,\n  queryParameters: [Parameters.detailed],\n  urlParameters: [Parameters.endpoint, Parameters.livyApiVersion, Parameters.sparkPoolName],\n  headerParameters: [Parameters.accept, Parameters.contentType],\n  mediaType: \"json\",\n  serializer,\n};\nconst getSparkSessionOperationSpec: coreClient.OperationSpec = {\n  path: \"/livyApi/versions/{livyApiVersion}/sparkPools/{sparkPoolName}/sessions/{sessionId}\",\n  httpMethod: \"GET\",\n  responses: {\n    200: {\n      bodyMapper: Mappers.SparkSession,\n    },\n  },\n  queryParameters: [Parameters.detailed],\n  urlParameters: [\n    Parameters.endpoint,\n    Parameters.livyApiVersion,\n    Parameters.sparkPoolName,\n    Parameters.sessionId,\n  ],\n  headerParameters: [Parameters.accept],\n  serializer,\n};\nconst cancelSparkSessionOperationSpec: coreClient.OperationSpec = {\n  path: \"/livyApi/versions/{livyApiVersion}/sparkPools/{sparkPoolName}/sessions/{sessionId}\",\n  httpMethod: \"DELETE\",\n  responses: { 200: {} },\n  urlParameters: [\n    Parameters.endpoint,\n    Parameters.livyApiVersion,\n    Parameters.sparkPoolName,\n    Parameters.sessionId,\n  ],\n  serializer,\n};\nconst resetSparkSessionTimeoutOperationSpec: coreClient.OperationSpec = {\n  path: \"/livyApi/versions/{livyApiVersion}/sparkPools/{sparkPoolName}/sessions/{sessionId}/reset-timeout\",\n  httpMethod: \"PUT\",\n  responses: { 200: {} },\n  urlParameters: [\n    Parameters.endpoint,\n    Parameters.livyApiVersion,\n    Parameters.sparkPoolName,\n    Parameters.sessionId,\n  ],\n  serializer,\n};\nconst getSparkStatementsOperationSpec: coreClient.OperationSpec = {\n  path: \"/livyApi/versions/{livyApiVersion}/sparkPools/{sparkPoolName}/sessions/{sessionId}/statements\",\n  httpMethod: \"GET\",\n  responses: {\n    200: {\n      bodyMapper: Mappers.SparkStatementCollection,\n    },\n  },\n  urlParameters: [\n    Parameters.endpoint,\n    Parameters.livyApiVersion,\n    Parameters.sparkPoolName,\n    Parameters.sessionId,\n  ],\n  headerParameters: [Parameters.accept],\n  serializer,\n};\nconst createSparkStatementOperationSpec: coreClient.OperationSpec = {\n  path: \"/livyApi/versions/{livyApiVersion}/sparkPools/{sparkPoolName}/sessions/{sessionId}/statements\",\n  httpMethod: \"POST\",\n  responses: {\n    200: {\n      bodyMapper: Mappers.SparkStatement,\n    },\n  },\n  requestBody: Parameters.sparkStatementOptions,\n  urlParameters: [\n    Parameters.endpoint,\n    Parameters.livyApiVersion,\n    Parameters.sparkPoolName,\n    Parameters.sessionId,\n  ],\n  headerParameters: [Parameters.accept, Parameters.contentType],\n  mediaType: \"json\",\n  serializer,\n};\nconst getSparkStatementOperationSpec: coreClient.OperationSpec = {\n  path: \"/livyApi/versions/{livyApiVersion}/sparkPools/{sparkPoolName}/sessions/{sessionId}/statements/{statementId}\",\n  httpMethod: \"GET\",\n  responses: {\n    200: {\n      bodyMapper: Mappers.SparkStatement,\n    },\n  },\n  urlParameters: [\n    Parameters.endpoint,\n    Parameters.livyApiVersion,\n    Parameters.sparkPoolName,\n    Parameters.sessionId,\n    Parameters.statementId,\n  ],\n  headerParameters: [Parameters.accept],\n  serializer,\n};\nconst cancelSparkStatementOperationSpec: coreClient.OperationSpec = {\n  path: \"/livyApi/versions/{livyApiVersion}/sparkPools/{sparkPoolName}/sessions/{sessionId}/statements/{statementId}/cancel\",\n  httpMethod: \"POST\",\n  responses: {\n    200: {\n      bodyMapper: Mappers.SparkStatementCancellationResult,\n    },\n  },\n  urlParameters: [\n    Parameters.endpoint,\n    Parameters.livyApiVersion,\n    Parameters.sparkPoolName,\n    Parameters.sessionId,\n    Parameters.statementId,\n  ],\n  headerParameters: [Parameters.accept],\n  serializer,\n};\n\n/** Class containing SparkSessionOperations operations. */\nexport class SparkSessionOperationsImpl implements SparkSessionOperations {\n  private readonly client: SparkClient;\n\n  /**\n   * Initialize a new instance of the class SparkSessionOperations class.\n   * @param client - Reference to the service client\n   */\n  constructor(client: SparkClient) {\n    this.client = client;\n  }\n\n  /**\n   * List all spark sessions which are running under a particular spark pool.\n   * @param options - The options parameters.\n   */\n  async getSparkSessions(\n    options?: SparkSessionGetSparkSessionsOptionalParams,\n  ): Promise<SparkSessionGetSparkSessionsResponse> {\n    return tracingClient.withSpan(\n      \"SparkClient.getSparkSessions\",\n      options ?? {},\n      async (updatedOptions) => {\n        return this.client.sendOperationRequest(\n          { updatedOptions },\n          getSparkSessionsOperationSpec,\n        ) as Promise<SparkSessionGetSparkSessionsResponse>;\n      },\n    );\n  }\n\n  /**\n   * Create new spark session.\n   * @param sparkSessionOptions - Livy compatible batch job request payload.\n   * @param options - The options parameters.\n   */\n  async createSparkSession(\n    sparkSessionOptions: SparkSessionOptions,\n    options?: SparkSessionCreateSparkSessionOptionalParams,\n  ): Promise<SparkSessionCreateSparkSessionResponse> {\n    return tracingClient.withSpan(\n      \"SparkClient.createSparkSession\",\n      options ?? {},\n      async (updatedOptions) => {\n        return this.client.sendOperationRequest(\n          { sparkSessionOptions, updatedOptions },\n          createSparkSessionOperationSpec,\n        ) as Promise<SparkSessionCreateSparkSessionResponse>;\n      },\n    );\n  }\n\n  /**\n   * Gets a single spark session.\n   * @param sessionId - Identifier for the session.\n   * @param options - The options parameters.\n   */\n  async getSparkSession(\n    sessionId: number,\n    options?: SparkSessionGetSparkSessionOptionalParams,\n  ): Promise<SparkSessionGetSparkSessionResponse> {\n    return tracingClient.withSpan(\n      \"SparkClient.getSparkSession\",\n      options ?? {},\n      async (updatedOptions) => {\n        return this.client.sendOperationRequest(\n          { sessionId, updatedOptions },\n          getSparkSessionOperationSpec,\n        ) as Promise<SparkSessionGetSparkSessionResponse>;\n      },\n    );\n  }\n\n  /**\n   * Cancels a running spark session.\n   * @param sessionId - Identifier for the session.\n   * @param options - The options parameters.\n   */\n  async cancelSparkSession(\n    sessionId: number,\n    options?: SparkSessionCancelSparkSessionOptionalParams,\n  ): Promise<void> {\n    return tracingClient.withSpan(\n      \"SparkClient.cancelSparkSession\",\n      options ?? {},\n      async (updatedOptions) => {\n        return this.client.sendOperationRequest(\n          { sessionId, updatedOptions },\n          cancelSparkSessionOperationSpec,\n        ) as Promise<void>;\n      },\n    );\n  }\n\n  /**\n   * Sends a keep alive call to the current session to reset the session timeout.\n   * @param sessionId - Identifier for the session.\n   * @param options - The options parameters.\n   */\n  async resetSparkSessionTimeout(\n    sessionId: number,\n    options?: SparkSessionResetSparkSessionTimeoutOptionalParams,\n  ): Promise<void> {\n    return tracingClient.withSpan(\n      \"SparkClient.resetSparkSessionTimeout\",\n      options ?? {},\n      async (updatedOptions) => {\n        return this.client.sendOperationRequest(\n          { sessionId, updatedOptions },\n          resetSparkSessionTimeoutOperationSpec,\n        ) as Promise<void>;\n      },\n    );\n  }\n\n  /**\n   * Gets a list of statements within a spark session.\n   * @param sessionId - Identifier for the session.\n   * @param options - The options parameters.\n   */\n  async getSparkStatements(\n    sessionId: number,\n    options?: SparkSessionGetSparkStatementsOptionalParams,\n  ): Promise<SparkSessionGetSparkStatementsResponse> {\n    return tracingClient.withSpan(\n      \"SparkClient.getSparkStatements\",\n      options ?? {},\n      async (updatedOptions) => {\n        return this.client.sendOperationRequest(\n          { sessionId, updatedOptions },\n          getSparkStatementsOperationSpec,\n        ) as Promise<SparkSessionGetSparkStatementsResponse>;\n      },\n    );\n  }\n\n  /**\n   * Create statement within a spark session.\n   * @param sessionId - Identifier for the session.\n   * @param sparkStatementOptions - Livy compatible batch job request payload.\n   * @param options - The options parameters.\n   */\n  async createSparkStatement(\n    sessionId: number,\n    sparkStatementOptions: SparkStatementOptions,\n    options?: SparkSessionCreateSparkStatementOptionalParams,\n  ): Promise<SparkSessionCreateSparkStatementResponse> {\n    return tracingClient.withSpan(\n      \"SparkClient.createSparkStatement\",\n      options ?? {},\n      async (updatedOptions) => {\n        return this.client.sendOperationRequest(\n          { sessionId, sparkStatementOptions, updatedOptions },\n          createSparkStatementOperationSpec,\n        ) as Promise<SparkSessionCreateSparkStatementResponse>;\n      },\n    );\n  }\n\n  /**\n   * Gets a single statement within a spark session.\n   * @param sessionId - Identifier for the session.\n   * @param statementId - Identifier for the statement.\n   * @param options - The options parameters.\n   */\n  async getSparkStatement(\n    sessionId: number,\n    statementId: number,\n    options?: SparkSessionGetSparkStatementOptionalParams,\n  ): Promise<SparkSessionGetSparkStatementResponse> {\n    return tracingClient.withSpan(\n      \"SparkClient.getSparkStatement\",\n      options ?? {},\n      async (updatedOptions) => {\n        return this.client.sendOperationRequest(\n          { sessionId, statementId, updatedOptions },\n          getSparkStatementOperationSpec,\n        ) as Promise<SparkSessionGetSparkStatementResponse>;\n      },\n    );\n  }\n\n  /**\n   * Kill a statement within a session.\n   * @param sessionId - Identifier for the session.\n   * @param statementId - Identifier for the statement.\n   * @param options - The options parameters.\n   */\n  async cancelSparkStatement(\n    sessionId: number,\n    statementId: number,\n    options?: SparkSessionCancelSparkStatementOptionalParams,\n  ): Promise<SparkSessionCancelSparkStatementResponse> {\n    return tracingClient.withSpan(\n      \"SparkClient.cancelSparkStatement\",\n      options ?? {},\n      async (updatedOptions) => {\n        return this.client.sendOperationRequest(\n          { sessionId, statementId, updatedOptions },\n          cancelSparkStatementOperationSpec,\n        ) as Promise<SparkSessionCancelSparkStatementResponse>;\n      },\n    );\n  }\n}\n"]}