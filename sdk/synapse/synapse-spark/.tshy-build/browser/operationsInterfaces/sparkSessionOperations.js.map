{"version":3,"file":"sparkSessionOperations.js","sourceRoot":"","sources":["../../../src/operationsInterfaces/sparkSessionOperations.ts"],"names":[],"mappings":"AAAA;;;;;;GAMG","sourcesContent":["/*\n * Copyright (c) Microsoft Corporation.\n * Licensed under the MIT License.\n *\n * Code generated by Microsoft (R) AutoRest Code Generator.\n * Changes may cause incorrect behavior and will be lost if the code is regenerated.\n */\n\nimport type {\n  SparkSessionGetSparkSessionsOptionalParams,\n  SparkSessionGetSparkSessionsResponse,\n  SparkSessionOptions,\n  SparkSessionCreateSparkSessionOptionalParams,\n  SparkSessionCreateSparkSessionResponse,\n  SparkSessionGetSparkSessionOptionalParams,\n  SparkSessionGetSparkSessionResponse,\n  SparkSessionCancelSparkSessionOptionalParams,\n  SparkSessionResetSparkSessionTimeoutOptionalParams,\n  SparkSessionGetSparkStatementsOptionalParams,\n  SparkSessionGetSparkStatementsResponse,\n  SparkStatementOptions,\n  SparkSessionCreateSparkStatementOptionalParams,\n  SparkSessionCreateSparkStatementResponse,\n  SparkSessionGetSparkStatementOptionalParams,\n  SparkSessionGetSparkStatementResponse,\n  SparkSessionCancelSparkStatementOptionalParams,\n  SparkSessionCancelSparkStatementResponse,\n} from \"../models/index.js\";\n\n/** Interface representing a SparkSessionOperations. */\nexport interface SparkSessionOperations {\n  /**\n   * List all spark sessions which are running under a particular spark pool.\n   * @param options - The options parameters.\n   */\n  getSparkSessions(\n    options?: SparkSessionGetSparkSessionsOptionalParams,\n  ): Promise<SparkSessionGetSparkSessionsResponse>;\n  /**\n   * Create new spark session.\n   * @param sparkSessionOptions - Livy compatible batch job request payload.\n   * @param options - The options parameters.\n   */\n  createSparkSession(\n    sparkSessionOptions: SparkSessionOptions,\n    options?: SparkSessionCreateSparkSessionOptionalParams,\n  ): Promise<SparkSessionCreateSparkSessionResponse>;\n  /**\n   * Gets a single spark session.\n   * @param sessionId - Identifier for the session.\n   * @param options - The options parameters.\n   */\n  getSparkSession(\n    sessionId: number,\n    options?: SparkSessionGetSparkSessionOptionalParams,\n  ): Promise<SparkSessionGetSparkSessionResponse>;\n  /**\n   * Cancels a running spark session.\n   * @param sessionId - Identifier for the session.\n   * @param options - The options parameters.\n   */\n  cancelSparkSession(\n    sessionId: number,\n    options?: SparkSessionCancelSparkSessionOptionalParams,\n  ): Promise<void>;\n  /**\n   * Sends a keep alive call to the current session to reset the session timeout.\n   * @param sessionId - Identifier for the session.\n   * @param options - The options parameters.\n   */\n  resetSparkSessionTimeout(\n    sessionId: number,\n    options?: SparkSessionResetSparkSessionTimeoutOptionalParams,\n  ): Promise<void>;\n  /**\n   * Gets a list of statements within a spark session.\n   * @param sessionId - Identifier for the session.\n   * @param options - The options parameters.\n   */\n  getSparkStatements(\n    sessionId: number,\n    options?: SparkSessionGetSparkStatementsOptionalParams,\n  ): Promise<SparkSessionGetSparkStatementsResponse>;\n  /**\n   * Create statement within a spark session.\n   * @param sessionId - Identifier for the session.\n   * @param sparkStatementOptions - Livy compatible batch job request payload.\n   * @param options - The options parameters.\n   */\n  createSparkStatement(\n    sessionId: number,\n    sparkStatementOptions: SparkStatementOptions,\n    options?: SparkSessionCreateSparkStatementOptionalParams,\n  ): Promise<SparkSessionCreateSparkStatementResponse>;\n  /**\n   * Gets a single statement within a spark session.\n   * @param sessionId - Identifier for the session.\n   * @param statementId - Identifier for the statement.\n   * @param options - The options parameters.\n   */\n  getSparkStatement(\n    sessionId: number,\n    statementId: number,\n    options?: SparkSessionGetSparkStatementOptionalParams,\n  ): Promise<SparkSessionGetSparkStatementResponse>;\n  /**\n   * Kill a statement within a session.\n   * @param sessionId - Identifier for the session.\n   * @param statementId - Identifier for the statement.\n   * @param options - The options parameters.\n   */\n  cancelSparkStatement(\n    sessionId: number,\n    statementId: number,\n    options?: SparkSessionCancelSparkStatementOptionalParams,\n  ): Promise<SparkSessionCancelSparkStatementResponse>;\n}\n"]}