{"version":3,"file":"index.js","sourceRoot":"","sources":["../../../src/models/index.ts"],"names":[],"mappings":"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","sourcesContent":["/*\n * Copyright (c) Microsoft Corporation.\n * Licensed under the MIT License.\n *\n * Code generated by Microsoft (R) AutoRest Code Generator.\n * Changes may cause incorrect behavior and will be lost if the code is regenerated.\n */\n\nimport type * as coreClient from \"@azure/core-client\";\n\n/** Response for batch list operation. */\nexport interface SparkBatchJobCollection {\n  /** The start index of fetched sessions. */\n  from: number;\n  /** Number of sessions fetched. */\n  total: number;\n  /** Batch list */\n  sessions?: SparkBatchJob[];\n}\n\nexport interface SparkBatchJob {\n  livyInfo?: SparkBatchJobState;\n  /** The batch name. */\n  name?: string;\n  /** The workspace name. */\n  workspaceName?: string;\n  /** The Spark pool name. */\n  sparkPoolName?: string;\n  /** The submitter name. */\n  submitterName?: string;\n  /** The submitter identifier. */\n  submitterId?: string;\n  /** The artifact identifier. */\n  artifactId?: string;\n  /** The job type. */\n  jobType?: SparkJobType;\n  /** The Spark batch job result. */\n  result?: SparkBatchJobResultType;\n  /** The scheduler information. */\n  scheduler?: SparkScheduler;\n  /** The plugin information. */\n  plugin?: SparkServicePlugin;\n  /** The error information. */\n  errors?: SparkServiceError[];\n  /** The tags. */\n  tags?: { [propertyName: string]: string };\n  /** The session Id. */\n  id: number;\n  /** The application id of this session */\n  appId?: string;\n  /** The detailed application info. */\n  appInfo?: { [propertyName: string]: string };\n  /** The batch state */\n  state?: LivyStates;\n  /** The log lines. */\n  logLines?: string[];\n}\n\nexport interface SparkBatchJobState {\n  /** the time that at which \"not_started\" livy state was first seen. */\n  notStartedAt?: Date;\n  /** the time that at which \"starting\" livy state was first seen. */\n  startingAt?: Date;\n  /** the time that at which \"running\" livy state was first seen. */\n  runningAt?: Date;\n  /** time that at which \"dead\" livy state was first seen. */\n  deadAt?: Date;\n  /** the time that at which \"success\" livy state was first seen. */\n  successAt?: Date;\n  /** the time that at which \"killed\" livy state was first seen. */\n  terminatedAt?: Date;\n  /** the time that at which \"recovering\" livy state was first seen. */\n  recoveringAt?: Date;\n  /** the Spark job state. */\n  currentState?: string;\n  jobCreationRequest?: SparkRequest;\n}\n\nexport interface SparkRequest {\n  name?: string;\n  file?: string;\n  className?: string;\n  arguments?: string[];\n  jars?: string[];\n  pythonFiles?: string[];\n  files?: string[];\n  archives?: string[];\n  /** Dictionary of <string> */\n  configuration?: { [propertyName: string]: string };\n  driverMemory?: string;\n  driverCores?: number;\n  executorMemory?: string;\n  executorCores?: number;\n  executorCount?: number;\n}\n\nexport interface SparkScheduler {\n  submittedAt?: Date;\n  scheduledAt?: Date;\n  endedAt?: Date;\n  cancellationRequestedAt?: Date;\n  currentState?: SchedulerCurrentState;\n}\n\nexport interface SparkServicePlugin {\n  preparationStartedAt?: Date;\n  resourceAcquisitionStartedAt?: Date;\n  submissionStartedAt?: Date;\n  monitoringStartedAt?: Date;\n  cleanupStartedAt?: Date;\n  currentState?: PluginCurrentState;\n}\n\nexport interface SparkServiceError {\n  message?: string;\n  errorCode?: string;\n  source?: SparkErrorSource;\n}\n\nexport interface SparkBatchJobOptions {\n  /** Dictionary of <string> */\n  tags?: { [propertyName: string]: string };\n  artifactId?: string;\n  name: string;\n  file: string;\n  className?: string;\n  arguments?: string[];\n  jars?: string[];\n  pythonFiles?: string[];\n  files?: string[];\n  archives?: string[];\n  /** Dictionary of <string> */\n  configuration?: { [propertyName: string]: string };\n  driverMemory?: string;\n  driverCores?: number;\n  executorMemory?: string;\n  executorCores?: number;\n  executorCount?: number;\n}\n\nexport interface SparkSessionCollection {\n  from: number;\n  total: number;\n  sessions?: SparkSession[];\n}\n\nexport interface SparkSession {\n  livyInfo?: SparkSessionState;\n  name?: string;\n  workspaceName?: string;\n  sparkPoolName?: string;\n  submitterName?: string;\n  submitterId?: string;\n  artifactId?: string;\n  /** The job type. */\n  jobType?: SparkJobType;\n  result?: SparkSessionResultType;\n  scheduler?: SparkScheduler;\n  plugin?: SparkServicePlugin;\n  errors?: SparkServiceError[];\n  /** Dictionary of <string> */\n  tags?: { [propertyName: string]: string };\n  id: number;\n  appId?: string;\n  /** Dictionary of <string> */\n  appInfo?: { [propertyName: string]: string };\n  /** The session state. */\n  state?: LivyStates;\n  logLines?: string[];\n}\n\nexport interface SparkSessionState {\n  notStartedAt?: Date;\n  startingAt?: Date;\n  idleAt?: Date;\n  deadAt?: Date;\n  shuttingDownAt?: Date;\n  terminatedAt?: Date;\n  recoveringAt?: Date;\n  busyAt?: Date;\n  errorAt?: Date;\n  currentState?: string;\n  jobCreationRequest?: SparkRequest;\n}\n\nexport interface SparkSessionOptions {\n  /** Dictionary of <string> */\n  tags?: { [propertyName: string]: string };\n  artifactId?: string;\n  name: string;\n  file?: string;\n  className?: string;\n  arguments?: string[];\n  jars?: string[];\n  pythonFiles?: string[];\n  files?: string[];\n  archives?: string[];\n  /** Dictionary of <string> */\n  configuration?: { [propertyName: string]: string };\n  driverMemory?: string;\n  driverCores?: number;\n  executorMemory?: string;\n  executorCores?: number;\n  executorCount?: number;\n}\n\nexport interface SparkStatementCollection {\n  total: number;\n  statements?: SparkStatement[];\n}\n\nexport interface SparkStatement {\n  id: number;\n  code?: string;\n  state?: LivyStatementStates;\n  output?: SparkStatementOutput;\n}\n\nexport interface SparkStatementOutput {\n  status?: string;\n  executionCount: number;\n  /** Any object */\n  data?: Record<string, unknown>;\n  errorName?: string;\n  errorValue?: string;\n  traceback?: string[];\n}\n\nexport interface SparkStatementOptions {\n  code?: string;\n  kind?: SparkStatementLanguageType;\n}\n\nexport interface SparkStatementCancellationResult {\n  /** The msg property from the Livy API. The value is always \"canceled\". */\n  message?: string;\n}\n\n/** Known values of {@link SparkJobType} that the service accepts. */\nexport enum KnownSparkJobType {\n  /** SparkBatch */\n  SparkBatch = \"SparkBatch\",\n  /** SparkSession */\n  SparkSession = \"SparkSession\",\n}\n\n/**\n * Defines values for SparkJobType.\n * {@link KnownSparkJobType} can be used interchangeably with SparkJobType,\n *  this enum contains the known values that the service supports.\n * ### Known values supported by the service\n * **SparkBatch**\n * **SparkSession**\n */\nexport type SparkJobType = string;\n\n/** Known values of {@link SparkBatchJobResultType} that the service accepts. */\nexport enum KnownSparkBatchJobResultType {\n  /** Uncertain */\n  Uncertain = \"Uncertain\",\n  /** Succeeded */\n  Succeeded = \"Succeeded\",\n  /** Failed */\n  Failed = \"Failed\",\n  /** Cancelled */\n  Cancelled = \"Cancelled\",\n}\n\n/**\n * Defines values for SparkBatchJobResultType.\n * {@link KnownSparkBatchJobResultType} can be used interchangeably with SparkBatchJobResultType,\n *  this enum contains the known values that the service supports.\n * ### Known values supported by the service\n * **Uncertain**\n * **Succeeded**\n * **Failed**\n * **Cancelled**\n */\nexport type SparkBatchJobResultType = string;\n\n/** Known values of {@link SchedulerCurrentState} that the service accepts. */\nexport enum KnownSchedulerCurrentState {\n  /** Queued */\n  Queued = \"Queued\",\n  /** Scheduled */\n  Scheduled = \"Scheduled\",\n  /** Ended */\n  Ended = \"Ended\",\n}\n\n/**\n * Defines values for SchedulerCurrentState.\n * {@link KnownSchedulerCurrentState} can be used interchangeably with SchedulerCurrentState,\n *  this enum contains the known values that the service supports.\n * ### Known values supported by the service\n * **Queued**\n * **Scheduled**\n * **Ended**\n */\nexport type SchedulerCurrentState = string;\n\n/** Known values of {@link PluginCurrentState} that the service accepts. */\nexport enum KnownPluginCurrentState {\n  /** Preparation */\n  Preparation = \"Preparation\",\n  /** ResourceAcquisition */\n  ResourceAcquisition = \"ResourceAcquisition\",\n  /** Queued */\n  Queued = \"Queued\",\n  /** Submission */\n  Submission = \"Submission\",\n  /** Monitoring */\n  Monitoring = \"Monitoring\",\n  /** Cleanup */\n  Cleanup = \"Cleanup\",\n  /** Ended */\n  Ended = \"Ended\",\n}\n\n/**\n * Defines values for PluginCurrentState.\n * {@link KnownPluginCurrentState} can be used interchangeably with PluginCurrentState,\n *  this enum contains the known values that the service supports.\n * ### Known values supported by the service\n * **Preparation**\n * **ResourceAcquisition**\n * **Queued**\n * **Submission**\n * **Monitoring**\n * **Cleanup**\n * **Ended**\n */\nexport type PluginCurrentState = string;\n\n/** Known values of {@link SparkErrorSource} that the service accepts. */\nexport enum KnownSparkErrorSource {\n  /** System */\n  System = \"System\",\n  /** User */\n  User = \"User\",\n  /** Unknown */\n  Unknown = \"Unknown\",\n  /** Dependency */\n  Dependency = \"Dependency\",\n}\n\n/**\n * Defines values for SparkErrorSource.\n * {@link KnownSparkErrorSource} can be used interchangeably with SparkErrorSource,\n *  this enum contains the known values that the service supports.\n * ### Known values supported by the service\n * **System**\n * **User**\n * **Unknown**\n * **Dependency**\n */\nexport type SparkErrorSource = string;\n\n/** Known values of {@link LivyStates} that the service accepts. */\nexport enum KnownLivyStates {\n  /** NotStarted */\n  NotStarted = \"not_started\",\n  /** Starting */\n  Starting = \"starting\",\n  /** Idle */\n  Idle = \"idle\",\n  /** Busy */\n  Busy = \"busy\",\n  /** ShuttingDown */\n  ShuttingDown = \"shutting_down\",\n  /** Error */\n  Error = \"error\",\n  /** Dead */\n  Dead = \"dead\",\n  /** Killed */\n  Killed = \"killed\",\n  /** Success */\n  Success = \"success\",\n  /** Running */\n  Running = \"running\",\n  /** Recovering */\n  Recovering = \"recovering\",\n}\n\n/**\n * Defines values for LivyStates.\n * {@link KnownLivyStates} can be used interchangeably with LivyStates,\n *  this enum contains the known values that the service supports.\n * ### Known values supported by the service\n * **not_started**\n * **starting**\n * **idle**\n * **busy**\n * **shutting_down**\n * **error**\n * **dead**\n * **killed**\n * **success**\n * **running**\n * **recovering**\n */\nexport type LivyStates = string;\n\n/** Known values of {@link SparkSessionResultType} that the service accepts. */\nexport enum KnownSparkSessionResultType {\n  /** Uncertain */\n  Uncertain = \"Uncertain\",\n  /** Succeeded */\n  Succeeded = \"Succeeded\",\n  /** Failed */\n  Failed = \"Failed\",\n  /** Cancelled */\n  Cancelled = \"Cancelled\",\n}\n\n/**\n * Defines values for SparkSessionResultType.\n * {@link KnownSparkSessionResultType} can be used interchangeably with SparkSessionResultType,\n *  this enum contains the known values that the service supports.\n * ### Known values supported by the service\n * **Uncertain**\n * **Succeeded**\n * **Failed**\n * **Cancelled**\n */\nexport type SparkSessionResultType = string;\n\n/** Known values of {@link LivyStatementStates} that the service accepts. */\nexport enum KnownLivyStatementStates {\n  /** Waiting */\n  Waiting = \"waiting\",\n  /** Running */\n  Running = \"running\",\n  /** Available */\n  Available = \"available\",\n  /** Error */\n  Error = \"error\",\n  /** Cancelling */\n  Cancelling = \"cancelling\",\n  /** Cancelled */\n  Cancelled = \"cancelled\",\n}\n\n/**\n * Defines values for LivyStatementStates.\n * {@link KnownLivyStatementStates} can be used interchangeably with LivyStatementStates,\n *  this enum contains the known values that the service supports.\n * ### Known values supported by the service\n * **waiting**\n * **running**\n * **available**\n * **error**\n * **cancelling**\n * **cancelled**\n */\nexport type LivyStatementStates = string;\n\n/** Known values of {@link SparkStatementLanguageType} that the service accepts. */\nexport enum KnownSparkStatementLanguageType {\n  /** Spark */\n  Spark = \"spark\",\n  /** PySpark */\n  PySpark = \"pyspark\",\n  /** DotNetSpark */\n  DotNetSpark = \"dotnetspark\",\n  /** Sql */\n  Sql = \"sql\",\n}\n\n/**\n * Defines values for SparkStatementLanguageType.\n * {@link KnownSparkStatementLanguageType} can be used interchangeably with SparkStatementLanguageType,\n *  this enum contains the known values that the service supports.\n * ### Known values supported by the service\n * **spark**\n * **pyspark**\n * **dotnetspark**\n * **sql**\n */\nexport type SparkStatementLanguageType = string;\n\n/** Optional parameters. */\nexport interface SparkBatchGetSparkBatchJobsOptionalParams extends coreClient.OperationOptions {\n  /** Optional param specifying which index the list should begin from. */\n  fromParam?: number;\n  /**\n   * Optional param specifying the size of the returned list.\n   *             By default it is 20 and that is the maximum.\n   */\n  size?: number;\n  /** Optional query param specifying whether detailed response is returned beyond plain livy. */\n  detailed?: boolean;\n}\n\n/** Contains response data for the getSparkBatchJobs operation. */\nexport type SparkBatchGetSparkBatchJobsResponse = SparkBatchJobCollection;\n\n/** Optional parameters. */\nexport interface SparkBatchCreateSparkBatchJobOptionalParams extends coreClient.OperationOptions {\n  /** Optional query param specifying whether detailed response is returned beyond plain livy. */\n  detailed?: boolean;\n}\n\n/** Contains response data for the createSparkBatchJob operation. */\nexport type SparkBatchCreateSparkBatchJobResponse = SparkBatchJob;\n\n/** Optional parameters. */\nexport interface SparkBatchGetSparkBatchJobOptionalParams extends coreClient.OperationOptions {\n  /** Optional query param specifying whether detailed response is returned beyond plain livy. */\n  detailed?: boolean;\n}\n\n/** Contains response data for the getSparkBatchJob operation. */\nexport type SparkBatchGetSparkBatchJobResponse = SparkBatchJob;\n\n/** Optional parameters. */\nexport interface SparkBatchCancelSparkBatchJobOptionalParams extends coreClient.OperationOptions {}\n\n/** Optional parameters. */\nexport interface SparkSessionGetSparkSessionsOptionalParams extends coreClient.OperationOptions {\n  /** Optional param specifying which index the list should begin from. */\n  fromParam?: number;\n  /**\n   * Optional param specifying the size of the returned list.\n   *             By default it is 20 and that is the maximum.\n   */\n  size?: number;\n  /** Optional query param specifying whether detailed response is returned beyond plain livy. */\n  detailed?: boolean;\n}\n\n/** Contains response data for the getSparkSessions operation. */\nexport type SparkSessionGetSparkSessionsResponse = SparkSessionCollection;\n\n/** Optional parameters. */\nexport interface SparkSessionCreateSparkSessionOptionalParams extends coreClient.OperationOptions {\n  /** Optional query param specifying whether detailed response is returned beyond plain livy. */\n  detailed?: boolean;\n}\n\n/** Contains response data for the createSparkSession operation. */\nexport type SparkSessionCreateSparkSessionResponse = SparkSession;\n\n/** Optional parameters. */\nexport interface SparkSessionGetSparkSessionOptionalParams extends coreClient.OperationOptions {\n  /** Optional query param specifying whether detailed response is returned beyond plain livy. */\n  detailed?: boolean;\n}\n\n/** Contains response data for the getSparkSession operation. */\nexport type SparkSessionGetSparkSessionResponse = SparkSession;\n\n/** Optional parameters. */\nexport interface SparkSessionCancelSparkSessionOptionalParams extends coreClient.OperationOptions {}\n\n/** Optional parameters. */\nexport interface SparkSessionResetSparkSessionTimeoutOptionalParams\n  extends coreClient.OperationOptions {}\n\n/** Optional parameters. */\nexport interface SparkSessionGetSparkStatementsOptionalParams extends coreClient.OperationOptions {}\n\n/** Contains response data for the getSparkStatements operation. */\nexport type SparkSessionGetSparkStatementsResponse = SparkStatementCollection;\n\n/** Optional parameters. */\nexport interface SparkSessionCreateSparkStatementOptionalParams\n  extends coreClient.OperationOptions {}\n\n/** Contains response data for the createSparkStatement operation. */\nexport type SparkSessionCreateSparkStatementResponse = SparkStatement;\n\n/** Optional parameters. */\nexport interface SparkSessionGetSparkStatementOptionalParams extends coreClient.OperationOptions {}\n\n/** Contains response data for the getSparkStatement operation. */\nexport type SparkSessionGetSparkStatementResponse = SparkStatement;\n\n/** Optional parameters. */\nexport interface SparkSessionCancelSparkStatementOptionalParams\n  extends coreClient.OperationOptions {}\n\n/** Contains response data for the cancelSparkStatement operation. */\nexport type SparkSessionCancelSparkStatementResponse = SparkStatementCancellationResult;\n\n/** Optional parameters. */\nexport interface SparkClientOptionalParams extends coreClient.ServiceClientOptions {\n  /** Valid api-version for the request. */\n  livyApiVersion?: string;\n  /** Overrides client endpoint. */\n  endpoint?: string;\n}\n"]}