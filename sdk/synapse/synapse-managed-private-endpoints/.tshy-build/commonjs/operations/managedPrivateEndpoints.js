"use strict";
/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.ManagedPrivateEndpointsImpl = void 0;
const tslib_1 = require("tslib");
const tracing_js_1 = require("../tracing.js");
const coreClient = tslib_1.__importStar(require("@azure/core-client"));
const Mappers = tslib_1.__importStar(require("../models/mappers.js"));
const Parameters = tslib_1.__importStar(require("../models/parameters.js"));
// Operation Specifications
const serializer = coreClient.createSerializer(Mappers, /* isXml */ false);
const getOperationSpec = {
    path: "/managedVirtualNetworks/{managedVirtualNetworkName}/managedPrivateEndpoints/{managedPrivateEndpointName}",
    httpMethod: "GET",
    responses: {
        200: {
            bodyMapper: Mappers.ManagedPrivateEndpoint,
        },
    },
    queryParameters: [Parameters.apiVersion],
    urlParameters: [
        Parameters.endpoint,
        Parameters.managedVirtualNetworkName,
        Parameters.managedPrivateEndpointName,
    ],
    headerParameters: [Parameters.accept],
    serializer,
};
const createOperationSpec = {
    path: "/managedVirtualNetworks/{managedVirtualNetworkName}/managedPrivateEndpoints/{managedPrivateEndpointName}",
    httpMethod: "PUT",
    responses: {
        200: {
            bodyMapper: Mappers.ManagedPrivateEndpoint,
        },
    },
    requestBody: Parameters.managedPrivateEndpoint,
    queryParameters: [Parameters.apiVersion],
    urlParameters: [
        Parameters.endpoint,
        Parameters.managedVirtualNetworkName,
        Parameters.managedPrivateEndpointName,
    ],
    headerParameters: [Parameters.accept, Parameters.contentType],
    mediaType: "json",
    serializer,
};
const deleteOperationSpec = {
    path: "/managedVirtualNetworks/{managedVirtualNetworkName}/managedPrivateEndpoints/{managedPrivateEndpointName}",
    httpMethod: "DELETE",
    responses: { 202: {}, 204: {} },
    queryParameters: [Parameters.apiVersion],
    urlParameters: [
        Parameters.endpoint,
        Parameters.managedVirtualNetworkName,
        Parameters.managedPrivateEndpointName,
    ],
    serializer,
};
const listOperationSpec = {
    path: "/managedVirtualNetworks/{managedVirtualNetworkName}/managedPrivateEndpoints",
    httpMethod: "GET",
    responses: {
        200: {
            bodyMapper: Mappers.ManagedPrivateEndpointListResponse,
        },
    },
    queryParameters: [Parameters.apiVersion],
    urlParameters: [Parameters.endpoint, Parameters.managedVirtualNetworkName],
    headerParameters: [Parameters.accept],
    serializer,
};
const listNextOperationSpec = {
    path: "{nextLink}",
    httpMethod: "GET",
    responses: {
        200: {
            bodyMapper: Mappers.ManagedPrivateEndpointListResponse,
        },
    },
    queryParameters: [Parameters.apiVersion],
    urlParameters: [Parameters.endpoint, Parameters.managedVirtualNetworkName, Parameters.nextLink],
    headerParameters: [Parameters.accept],
    serializer,
};
/** Class containing ManagedPrivateEndpoints operations. */
class ManagedPrivateEndpointsImpl {
    /**
     * Initialize a new instance of the class ManagedPrivateEndpoints class.
     * @param client - Reference to the service client
     */
    constructor(client) {
        this.client = client;
    }
    /**
     * List Managed Private Endpoints
     * @param managedVirtualNetworkName - Managed virtual network name
     * @param options - The options parameters.
     */
    list(managedVirtualNetworkName, options) {
        const iter = this.listPagingAll(managedVirtualNetworkName, options);
        return {
            next() {
                return iter.next();
            },
            [Symbol.asyncIterator]() {
                return this;
            },
            byPage: () => {
                return this.listPagingPage(managedVirtualNetworkName, options);
            },
        };
    }
    listPagingPage(managedVirtualNetworkName, options) {
        return tslib_1.__asyncGenerator(this, arguments, function* listPagingPage_1() {
            let result = yield tslib_1.__await(this._list(managedVirtualNetworkName, options));
            yield yield tslib_1.__await(result.value || []);
            let continuationToken = result.nextLink;
            while (continuationToken) {
                result = yield tslib_1.__await(this._listNext(managedVirtualNetworkName, continuationToken, options));
                continuationToken = result.nextLink;
                yield yield tslib_1.__await(result.value || []);
            }
        });
    }
    listPagingAll(managedVirtualNetworkName, options) {
        return tslib_1.__asyncGenerator(this, arguments, function* listPagingAll_1() {
            var _a, e_1, _b, _c;
            try {
                for (var _d = true, _e = tslib_1.__asyncValues(this.listPagingPage(managedVirtualNetworkName, options)), _f; _f = yield tslib_1.__await(_e.next()), _a = _f.done, !_a; _d = true) {
                    _c = _f.value;
                    _d = false;
                    const page = _c;
                    yield tslib_1.__await(yield* tslib_1.__asyncDelegator(tslib_1.__asyncValues(page)));
                }
            }
            catch (e_1_1) { e_1 = { error: e_1_1 }; }
            finally {
                try {
                    if (!_d && !_a && (_b = _e.return)) yield tslib_1.__await(_b.call(_e));
                }
                finally { if (e_1) throw e_1.error; }
            }
        });
    }
    /**
     * Get Managed Private Endpoints
     * @param managedVirtualNetworkName - Managed virtual network name
     * @param managedPrivateEndpointName - Managed private endpoint name
     * @param options - The options parameters.
     */
    async get(managedVirtualNetworkName, managedPrivateEndpointName, options) {
        return tracing_js_1.tracingClient.withSpan("ManagedPrivateEndpointsClient.get", options !== null && options !== void 0 ? options : {}, async (updatedOptions) => {
            return this.client.sendOperationRequest({ managedVirtualNetworkName, managedPrivateEndpointName, updatedOptions }, getOperationSpec);
        });
    }
    /**
     * Create Managed Private Endpoints
     * @param managedVirtualNetworkName - Managed virtual network name
     * @param managedPrivateEndpointName - Managed private endpoint name
     * @param managedPrivateEndpoint - Managed private endpoint properties.
     * @param options - The options parameters.
     */
    async create(managedVirtualNetworkName, managedPrivateEndpointName, managedPrivateEndpoint, options) {
        return tracing_js_1.tracingClient.withSpan("ManagedPrivateEndpointsClient.create", options !== null && options !== void 0 ? options : {}, async (updatedOptions) => {
            return this.client.sendOperationRequest({
                managedVirtualNetworkName,
                managedPrivateEndpointName,
                managedPrivateEndpoint,
                updatedOptions,
            }, createOperationSpec);
        });
    }
    /**
     * Delete Managed Private Endpoints
     * @param managedVirtualNetworkName - Managed virtual network name
     * @param managedPrivateEndpointName - Managed private endpoint name
     * @param options - The options parameters.
     */
    async delete(managedVirtualNetworkName, managedPrivateEndpointName, options) {
        return tracing_js_1.tracingClient.withSpan("ManagedPrivateEndpointsClient.delete", options !== null && options !== void 0 ? options : {}, async (updatedOptions) => {
            return this.client.sendOperationRequest({ managedVirtualNetworkName, managedPrivateEndpointName, updatedOptions }, deleteOperationSpec);
        });
    }
    /**
     * List Managed Private Endpoints
     * @param managedVirtualNetworkName - Managed virtual network name
     * @param options - The options parameters.
     */
    async _list(managedVirtualNetworkName, options) {
        return tracing_js_1.tracingClient.withSpan("ManagedPrivateEndpointsClient._list", options !== null && options !== void 0 ? options : {}, async (updatedOptions) => {
            return this.client.sendOperationRequest({ managedVirtualNetworkName, updatedOptions }, listOperationSpec);
        });
    }
    /**
     * ListNext
     * @param managedVirtualNetworkName - Managed virtual network name
     * @param nextLink - The nextLink from the previous successful call to the List method.
     * @param options - The options parameters.
     */
    async _listNext(managedVirtualNetworkName, nextLink, options) {
        return tracing_js_1.tracingClient.withSpan("ManagedPrivateEndpointsClient._listNext", options !== null && options !== void 0 ? options : {}, async (updatedOptions) => {
            return this.client.sendOperationRequest({ managedVirtualNetworkName, nextLink, updatedOptions }, listNextOperationSpec);
        });
    }
}
exports.ManagedPrivateEndpointsImpl = ManagedPrivateEndpointsImpl;
//# sourceMappingURL=managedPrivateEndpoints.js.map