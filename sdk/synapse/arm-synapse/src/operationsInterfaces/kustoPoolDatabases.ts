/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */

import { PagedAsyncIterableIterator } from "@azure/core-paging";
import { PollerLike, PollOperationState } from "@azure/core-lro";
import {
  DatabaseUnion,
  KustoPoolDatabasesListByKustoPoolOptionalParams,
  KustoPoolDatabasesGetOptionalParams,
  KustoPoolDatabasesGetResponse,
  KustoPoolDatabasesCreateOrUpdateOptionalParams,
  KustoPoolDatabasesCreateOrUpdateResponse,
  KustoPoolDatabasesUpdateOptionalParams,
  KustoPoolDatabasesUpdateResponse,
  KustoPoolDatabasesDeleteOptionalParams
} from "../models";

/// <reference lib="esnext.asynciterable" />
/** Interface representing a KustoPoolDatabases. */
export interface KustoPoolDatabases {
  /**
   * Returns the list of databases of the given Kusto pool.
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param workspaceName The name of the workspace.
   * @param kustoPoolName The name of the Kusto pool.
   * @param options The options parameters.
   */
  listByKustoPool(
    resourceGroupName: string,
    workspaceName: string,
    kustoPoolName: string,
    options?: KustoPoolDatabasesListByKustoPoolOptionalParams
  ): PagedAsyncIterableIterator<DatabaseUnion>;
  /**
   * Returns a database.
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param workspaceName The name of the workspace.
   * @param kustoPoolName The name of the Kusto pool.
   * @param databaseName The name of the database in the Kusto pool.
   * @param options The options parameters.
   */
  get(
    resourceGroupName: string,
    workspaceName: string,
    kustoPoolName: string,
    databaseName: string,
    options?: KustoPoolDatabasesGetOptionalParams
  ): Promise<KustoPoolDatabasesGetResponse>;
  /**
   * Creates or updates a database.
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param workspaceName The name of the workspace.
   * @param kustoPoolName The name of the Kusto pool.
   * @param databaseName The name of the database in the Kusto pool.
   * @param parameters The database parameters supplied to the CreateOrUpdate operation.
   * @param options The options parameters.
   */
  beginCreateOrUpdate(
    resourceGroupName: string,
    workspaceName: string,
    kustoPoolName: string,
    databaseName: string,
    parameters: DatabaseUnion,
    options?: KustoPoolDatabasesCreateOrUpdateOptionalParams
  ): Promise<
    PollerLike<
      PollOperationState<KustoPoolDatabasesCreateOrUpdateResponse>,
      KustoPoolDatabasesCreateOrUpdateResponse
    >
  >;
  /**
   * Creates or updates a database.
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param workspaceName The name of the workspace.
   * @param kustoPoolName The name of the Kusto pool.
   * @param databaseName The name of the database in the Kusto pool.
   * @param parameters The database parameters supplied to the CreateOrUpdate operation.
   * @param options The options parameters.
   */
  beginCreateOrUpdateAndWait(
    resourceGroupName: string,
    workspaceName: string,
    kustoPoolName: string,
    databaseName: string,
    parameters: DatabaseUnion,
    options?: KustoPoolDatabasesCreateOrUpdateOptionalParams
  ): Promise<KustoPoolDatabasesCreateOrUpdateResponse>;
  /**
   * Updates a database.
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param workspaceName The name of the workspace.
   * @param kustoPoolName The name of the Kusto pool.
   * @param databaseName The name of the database in the Kusto pool.
   * @param parameters The database parameters supplied to the Update operation.
   * @param options The options parameters.
   */
  beginUpdate(
    resourceGroupName: string,
    workspaceName: string,
    kustoPoolName: string,
    databaseName: string,
    parameters: DatabaseUnion,
    options?: KustoPoolDatabasesUpdateOptionalParams
  ): Promise<
    PollerLike<
      PollOperationState<KustoPoolDatabasesUpdateResponse>,
      KustoPoolDatabasesUpdateResponse
    >
  >;
  /**
   * Updates a database.
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param workspaceName The name of the workspace.
   * @param kustoPoolName The name of the Kusto pool.
   * @param databaseName The name of the database in the Kusto pool.
   * @param parameters The database parameters supplied to the Update operation.
   * @param options The options parameters.
   */
  beginUpdateAndWait(
    resourceGroupName: string,
    workspaceName: string,
    kustoPoolName: string,
    databaseName: string,
    parameters: DatabaseUnion,
    options?: KustoPoolDatabasesUpdateOptionalParams
  ): Promise<KustoPoolDatabasesUpdateResponse>;
  /**
   * Deletes the database with the given name.
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param workspaceName The name of the workspace.
   * @param kustoPoolName The name of the Kusto pool.
   * @param databaseName The name of the database in the Kusto pool.
   * @param options The options parameters.
   */
  beginDelete(
    resourceGroupName: string,
    workspaceName: string,
    kustoPoolName: string,
    databaseName: string,
    options?: KustoPoolDatabasesDeleteOptionalParams
  ): Promise<PollerLike<PollOperationState<void>, void>>;
  /**
   * Deletes the database with the given name.
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param workspaceName The name of the workspace.
   * @param kustoPoolName The name of the Kusto pool.
   * @param databaseName The name of the database in the Kusto pool.
   * @param options The options parameters.
   */
  beginDeleteAndWait(
    resourceGroupName: string,
    workspaceName: string,
    kustoPoolName: string,
    databaseName: string,
    options?: KustoPoolDatabasesDeleteOptionalParams
  ): Promise<void>;
}
