/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */

import { PagedAsyncIterableIterator } from "@azure/core-paging";
import { PollerLike, PollOperationState } from "@azure/core-lro";
import {
  IntegrationRuntimeResource,
  IntegrationRuntimesListByWorkspaceOptionalParams,
  UpdateIntegrationRuntimeRequest,
  IntegrationRuntimesUpdateOptionalParams,
  IntegrationRuntimesUpdateResponse,
  IntegrationRuntimesGetOptionalParams,
  IntegrationRuntimesGetResponse,
  IntegrationRuntimesCreateOptionalParams,
  IntegrationRuntimesCreateResponse,
  IntegrationRuntimesDeleteOptionalParams,
  IntegrationRuntimesUpgradeOptionalParams,
  IntegrationRuntimesStartOptionalParams,
  IntegrationRuntimesStartResponse,
  IntegrationRuntimesStopOptionalParams,
  IntegrationRuntimesListOutboundNetworkDependenciesEndpointsOptionalParams,
  IntegrationRuntimesListOutboundNetworkDependenciesEndpointsResponse,
  IntegrationRuntimesEnableInteractiveQueryOptionalParams,
  IntegrationRuntimesDisableInteractiveQueryOptionalParams
} from "../models";

/// <reference lib="esnext.asynciterable" />
/** Interface representing a IntegrationRuntimes. */
export interface IntegrationRuntimes {
  /**
   * List all integration runtimes
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param workspaceName The name of the workspace.
   * @param options The options parameters.
   */
  listByWorkspace(
    resourceGroupName: string,
    workspaceName: string,
    options?: IntegrationRuntimesListByWorkspaceOptionalParams
  ): PagedAsyncIterableIterator<IntegrationRuntimeResource>;
  /**
   * Update an integration runtime
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param workspaceName The name of the workspace.
   * @param integrationRuntimeName Integration runtime name
   * @param updateIntegrationRuntimeRequest The parameters for updating an integration runtime.
   * @param options The options parameters.
   */
  update(
    resourceGroupName: string,
    workspaceName: string,
    integrationRuntimeName: string,
    updateIntegrationRuntimeRequest: UpdateIntegrationRuntimeRequest,
    options?: IntegrationRuntimesUpdateOptionalParams
  ): Promise<IntegrationRuntimesUpdateResponse>;
  /**
   * Get an integration runtime
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param workspaceName The name of the workspace.
   * @param integrationRuntimeName Integration runtime name
   * @param options The options parameters.
   */
  get(
    resourceGroupName: string,
    workspaceName: string,
    integrationRuntimeName: string,
    options?: IntegrationRuntimesGetOptionalParams
  ): Promise<IntegrationRuntimesGetResponse>;
  /**
   * Create an integration runtime
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param workspaceName The name of the workspace.
   * @param integrationRuntimeName Integration runtime name
   * @param integrationRuntime Integration runtime resource definition.
   * @param options The options parameters.
   */
  beginCreate(
    resourceGroupName: string,
    workspaceName: string,
    integrationRuntimeName: string,
    integrationRuntime: IntegrationRuntimeResource,
    options?: IntegrationRuntimesCreateOptionalParams
  ): Promise<
    PollerLike<
      PollOperationState<IntegrationRuntimesCreateResponse>,
      IntegrationRuntimesCreateResponse
    >
  >;
  /**
   * Create an integration runtime
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param workspaceName The name of the workspace.
   * @param integrationRuntimeName Integration runtime name
   * @param integrationRuntime Integration runtime resource definition.
   * @param options The options parameters.
   */
  beginCreateAndWait(
    resourceGroupName: string,
    workspaceName: string,
    integrationRuntimeName: string,
    integrationRuntime: IntegrationRuntimeResource,
    options?: IntegrationRuntimesCreateOptionalParams
  ): Promise<IntegrationRuntimesCreateResponse>;
  /**
   * Delete an integration runtime
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param workspaceName The name of the workspace.
   * @param integrationRuntimeName Integration runtime name
   * @param options The options parameters.
   */
  beginDelete(
    resourceGroupName: string,
    workspaceName: string,
    integrationRuntimeName: string,
    options?: IntegrationRuntimesDeleteOptionalParams
  ): Promise<PollerLike<PollOperationState<void>, void>>;
  /**
   * Delete an integration runtime
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param workspaceName The name of the workspace.
   * @param integrationRuntimeName Integration runtime name
   * @param options The options parameters.
   */
  beginDeleteAndWait(
    resourceGroupName: string,
    workspaceName: string,
    integrationRuntimeName: string,
    options?: IntegrationRuntimesDeleteOptionalParams
  ): Promise<void>;
  /**
   * Upgrade an integration runtime
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param workspaceName The name of the workspace.
   * @param integrationRuntimeName Integration runtime name
   * @param options The options parameters.
   */
  upgrade(
    resourceGroupName: string,
    workspaceName: string,
    integrationRuntimeName: string,
    options?: IntegrationRuntimesUpgradeOptionalParams
  ): Promise<void>;
  /**
   * Start an integration runtime
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param workspaceName The name of the workspace.
   * @param integrationRuntimeName Integration runtime name
   * @param options The options parameters.
   */
  beginStart(
    resourceGroupName: string,
    workspaceName: string,
    integrationRuntimeName: string,
    options?: IntegrationRuntimesStartOptionalParams
  ): Promise<
    PollerLike<
      PollOperationState<IntegrationRuntimesStartResponse>,
      IntegrationRuntimesStartResponse
    >
  >;
  /**
   * Start an integration runtime
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param workspaceName The name of the workspace.
   * @param integrationRuntimeName Integration runtime name
   * @param options The options parameters.
   */
  beginStartAndWait(
    resourceGroupName: string,
    workspaceName: string,
    integrationRuntimeName: string,
    options?: IntegrationRuntimesStartOptionalParams
  ): Promise<IntegrationRuntimesStartResponse>;
  /**
   * Stop an integration runtime
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param workspaceName The name of the workspace.
   * @param integrationRuntimeName Integration runtime name
   * @param options The options parameters.
   */
  beginStop(
    resourceGroupName: string,
    workspaceName: string,
    integrationRuntimeName: string,
    options?: IntegrationRuntimesStopOptionalParams
  ): Promise<PollerLike<PollOperationState<void>, void>>;
  /**
   * Stop an integration runtime
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param workspaceName The name of the workspace.
   * @param integrationRuntimeName Integration runtime name
   * @param options The options parameters.
   */
  beginStopAndWait(
    resourceGroupName: string,
    workspaceName: string,
    integrationRuntimeName: string,
    options?: IntegrationRuntimesStopOptionalParams
  ): Promise<void>;
  /**
   * Gets the list of outbound network dependencies for a given Azure-SSIS integration runtime.
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param workspaceName The name of the workspace.
   * @param integrationRuntimeName Integration runtime name
   * @param options The options parameters.
   */
  listOutboundNetworkDependenciesEndpoints(
    resourceGroupName: string,
    workspaceName: string,
    integrationRuntimeName: string,
    options?: IntegrationRuntimesListOutboundNetworkDependenciesEndpointsOptionalParams
  ): Promise<
    IntegrationRuntimesListOutboundNetworkDependenciesEndpointsResponse
  >;
  /**
   * Enable interactive query in integration runtime
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param workspaceName The name of the workspace.
   * @param integrationRuntimeName Integration runtime name
   * @param options The options parameters.
   */
  beginEnableInteractiveQuery(
    resourceGroupName: string,
    workspaceName: string,
    integrationRuntimeName: string,
    options?: IntegrationRuntimesEnableInteractiveQueryOptionalParams
  ): Promise<PollerLike<PollOperationState<void>, void>>;
  /**
   * Enable interactive query in integration runtime
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param workspaceName The name of the workspace.
   * @param integrationRuntimeName Integration runtime name
   * @param options The options parameters.
   */
  beginEnableInteractiveQueryAndWait(
    resourceGroupName: string,
    workspaceName: string,
    integrationRuntimeName: string,
    options?: IntegrationRuntimesEnableInteractiveQueryOptionalParams
  ): Promise<void>;
  /**
   * Disable interactive query in integration runtime
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param workspaceName The name of the workspace.
   * @param integrationRuntimeName Integration runtime name
   * @param options The options parameters.
   */
  beginDisableInteractiveQuery(
    resourceGroupName: string,
    workspaceName: string,
    integrationRuntimeName: string,
    options?: IntegrationRuntimesDisableInteractiveQueryOptionalParams
  ): Promise<PollerLike<PollOperationState<void>, void>>;
  /**
   * Disable interactive query in integration runtime
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param workspaceName The name of the workspace.
   * @param integrationRuntimeName Integration runtime name
   * @param options The options parameters.
   */
  beginDisableInteractiveQueryAndWait(
    resourceGroupName: string,
    workspaceName: string,
    integrationRuntimeName: string,
    options?: IntegrationRuntimesDisableInteractiveQueryOptionalParams
  ): Promise<void>;
}
