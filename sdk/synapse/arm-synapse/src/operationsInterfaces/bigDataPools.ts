/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */

import { PagedAsyncIterableIterator } from "@azure/core-paging";
import { PollerLike, PollOperationState } from "@azure/core-lro";
import {
  BigDataPoolResourceInfo,
  BigDataPoolsListByWorkspaceOptionalParams,
  BigDataPoolsGetOptionalParams,
  BigDataPoolsGetResponse,
  BigDataPoolPatchInfo,
  BigDataPoolsUpdateOptionalParams,
  BigDataPoolsUpdateResponse,
  BigDataPoolsCreateOrUpdateOptionalParams,
  BigDataPoolsCreateOrUpdateResponse,
  BigDataPoolsDeleteOptionalParams,
  BigDataPoolsDeleteResponse
} from "../models";

/// <reference lib="esnext.asynciterable" />
/** Interface representing a BigDataPools. */
export interface BigDataPools {
  /**
   * List Big Data pools in a workspace.
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param workspaceName The name of the workspace.
   * @param options The options parameters.
   */
  listByWorkspace(
    resourceGroupName: string,
    workspaceName: string,
    options?: BigDataPoolsListByWorkspaceOptionalParams
  ): PagedAsyncIterableIterator<BigDataPoolResourceInfo>;
  /**
   * Get a Big Data pool.
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param workspaceName The name of the workspace.
   * @param bigDataPoolName Big Data pool name
   * @param options The options parameters.
   */
  get(
    resourceGroupName: string,
    workspaceName: string,
    bigDataPoolName: string,
    options?: BigDataPoolsGetOptionalParams
  ): Promise<BigDataPoolsGetResponse>;
  /**
   * Patch a Big Data pool.
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param workspaceName The name of the workspace.
   * @param bigDataPoolName Big Data pool name
   * @param bigDataPoolPatchInfo The updated Big Data pool properties
   * @param options The options parameters.
   */
  update(
    resourceGroupName: string,
    workspaceName: string,
    bigDataPoolName: string,
    bigDataPoolPatchInfo: BigDataPoolPatchInfo,
    options?: BigDataPoolsUpdateOptionalParams
  ): Promise<BigDataPoolsUpdateResponse>;
  /**
   * Create a new Big Data pool.
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param workspaceName The name of the workspace.
   * @param bigDataPoolName Big Data pool name
   * @param bigDataPoolInfo The Big Data pool to create.
   * @param options The options parameters.
   */
  beginCreateOrUpdate(
    resourceGroupName: string,
    workspaceName: string,
    bigDataPoolName: string,
    bigDataPoolInfo: BigDataPoolResourceInfo,
    options?: BigDataPoolsCreateOrUpdateOptionalParams
  ): Promise<
    PollerLike<
      PollOperationState<BigDataPoolsCreateOrUpdateResponse>,
      BigDataPoolsCreateOrUpdateResponse
    >
  >;
  /**
   * Create a new Big Data pool.
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param workspaceName The name of the workspace.
   * @param bigDataPoolName Big Data pool name
   * @param bigDataPoolInfo The Big Data pool to create.
   * @param options The options parameters.
   */
  beginCreateOrUpdateAndWait(
    resourceGroupName: string,
    workspaceName: string,
    bigDataPoolName: string,
    bigDataPoolInfo: BigDataPoolResourceInfo,
    options?: BigDataPoolsCreateOrUpdateOptionalParams
  ): Promise<BigDataPoolsCreateOrUpdateResponse>;
  /**
   * Delete a Big Data pool from the workspace.
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param workspaceName The name of the workspace.
   * @param bigDataPoolName Big Data pool name
   * @param options The options parameters.
   */
  beginDelete(
    resourceGroupName: string,
    workspaceName: string,
    bigDataPoolName: string,
    options?: BigDataPoolsDeleteOptionalParams
  ): Promise<
    PollerLike<
      PollOperationState<BigDataPoolsDeleteResponse>,
      BigDataPoolsDeleteResponse
    >
  >;
  /**
   * Delete a Big Data pool from the workspace.
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param workspaceName The name of the workspace.
   * @param bigDataPoolName Big Data pool name
   * @param options The options parameters.
   */
  beginDeleteAndWait(
    resourceGroupName: string,
    workspaceName: string,
    bigDataPoolName: string,
    options?: BigDataPoolsDeleteOptionalParams
  ): Promise<BigDataPoolsDeleteResponse>;
}
