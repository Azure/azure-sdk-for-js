/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */

import { CloudErrorMapper, BaseResourceMapper } from "@azure/ms-rest-azure-js";
import * as msRest from "@azure/ms-rest-js";

export const CloudError = CloudErrorMapper;
export const BaseResource = BaseResourceMapper;

export const AutoScaleProperties: msRest.CompositeMapper = {
  serializedName: "AutoScaleProperties",
  type: {
    name: "Composite",
    className: "AutoScaleProperties",
    modelProperties: {
      minNodeCount: {
        serializedName: "minNodeCount",
        type: {
          name: "Number"
        }
      },
      enabled: {
        serializedName: "enabled",
        type: {
          name: "Boolean"
        }
      },
      maxNodeCount: {
        serializedName: "maxNodeCount",
        type: {
          name: "Number"
        }
      }
    }
  }
};

export const AutoPauseProperties: msRest.CompositeMapper = {
  serializedName: "AutoPauseProperties",
  type: {
    name: "Composite",
    className: "AutoPauseProperties",
    modelProperties: {
      delayInMinutes: {
        serializedName: "delayInMinutes",
        type: {
          name: "Number"
        }
      },
      enabled: {
        serializedName: "enabled",
        type: {
          name: "Boolean"
        }
      }
    }
  }
};

export const DynamicExecutorAllocation: msRest.CompositeMapper = {
  serializedName: "DynamicExecutorAllocation",
  type: {
    name: "Composite",
    className: "DynamicExecutorAllocation",
    modelProperties: {
      enabled: {
        serializedName: "enabled",
        type: {
          name: "Boolean"
        }
      }
    }
  }
};

export const LibraryRequirements: msRest.CompositeMapper = {
  serializedName: "LibraryRequirements",
  type: {
    name: "Composite",
    className: "LibraryRequirements",
    modelProperties: {
      time: {
        readOnly: true,
        serializedName: "time",
        type: {
          name: "DateTime"
        }
      },
      content: {
        serializedName: "content",
        type: {
          name: "String"
        }
      },
      filename: {
        serializedName: "filename",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const LibraryInfo: msRest.CompositeMapper = {
  serializedName: "LibraryInfo",
  type: {
    name: "Composite",
    className: "LibraryInfo",
    modelProperties: {
      name: {
        serializedName: "name",
        type: {
          name: "String"
        }
      },
      path: {
        serializedName: "path",
        type: {
          name: "String"
        }
      },
      containerName: {
        serializedName: "containerName",
        type: {
          name: "String"
        }
      },
      uploadedTimestamp: {
        readOnly: true,
        serializedName: "uploadedTimestamp",
        type: {
          name: "DateTime"
        }
      },
      type: {
        serializedName: "type",
        type: {
          name: "String"
        }
      },
      provisioningStatus: {
        readOnly: true,
        serializedName: "provisioningStatus",
        type: {
          name: "String"
        }
      },
      creatorId: {
        readOnly: true,
        serializedName: "creatorId",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const Resource: msRest.CompositeMapper = {
  serializedName: "Resource",
  type: {
    name: "Composite",
    className: "Resource",
    modelProperties: {
      id: {
        readOnly: true,
        serializedName: "id",
        type: {
          name: "String"
        }
      },
      name: {
        readOnly: true,
        serializedName: "name",
        type: {
          name: "String"
        }
      },
      type: {
        readOnly: true,
        serializedName: "type",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const TrackedResource: msRest.CompositeMapper = {
  serializedName: "TrackedResource",
  type: {
    name: "Composite",
    className: "TrackedResource",
    modelProperties: {
      ...Resource.type.modelProperties,
      tags: {
        serializedName: "tags",
        type: {
          name: "Dictionary",
          value: {
            type: {
              name: "String"
            }
          }
        }
      },
      location: {
        required: true,
        serializedName: "location",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const BigDataPoolResourceInfo: msRest.CompositeMapper = {
  serializedName: "BigDataPoolResourceInfo",
  type: {
    name: "Composite",
    className: "BigDataPoolResourceInfo",
    modelProperties: {
      ...TrackedResource.type.modelProperties,
      provisioningState: {
        serializedName: "properties.provisioningState",
        type: {
          name: "String"
        }
      },
      autoScale: {
        serializedName: "properties.autoScale",
        type: {
          name: "Composite",
          className: "AutoScaleProperties"
        }
      },
      creationDate: {
        serializedName: "properties.creationDate",
        type: {
          name: "DateTime"
        }
      },
      autoPause: {
        serializedName: "properties.autoPause",
        type: {
          name: "Composite",
          className: "AutoPauseProperties"
        }
      },
      isComputeIsolationEnabled: {
        serializedName: "properties.isComputeIsolationEnabled",
        type: {
          name: "Boolean"
        }
      },
      sessionLevelPackagesEnabled: {
        serializedName: "properties.sessionLevelPackagesEnabled",
        type: {
          name: "Boolean"
        }
      },
      cacheSize: {
        serializedName: "properties.cacheSize",
        type: {
          name: "Number"
        }
      },
      dynamicExecutorAllocation: {
        serializedName: "properties.dynamicExecutorAllocation",
        type: {
          name: "Composite",
          className: "DynamicExecutorAllocation"
        }
      },
      sparkEventsFolder: {
        serializedName: "properties.sparkEventsFolder",
        type: {
          name: "String"
        }
      },
      nodeCount: {
        serializedName: "properties.nodeCount",
        type: {
          name: "Number"
        }
      },
      libraryRequirements: {
        serializedName: "properties.libraryRequirements",
        type: {
          name: "Composite",
          className: "LibraryRequirements"
        }
      },
      customLibraries: {
        serializedName: "properties.customLibraries",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "LibraryInfo"
            }
          }
        }
      },
      sparkConfigProperties: {
        serializedName: "properties.sparkConfigProperties",
        type: {
          name: "Composite",
          className: "LibraryRequirements"
        }
      },
      sparkVersion: {
        serializedName: "properties.sparkVersion",
        type: {
          name: "String"
        }
      },
      defaultSparkLogFolder: {
        serializedName: "properties.defaultSparkLogFolder",
        type: {
          name: "String"
        }
      },
      nodeSize: {
        serializedName: "properties.nodeSize",
        type: {
          name: "String"
        }
      },
      nodeSizeFamily: {
        serializedName: "properties.nodeSizeFamily",
        type: {
          name: "String"
        }
      },
      lastSucceededTimestamp: {
        readOnly: true,
        serializedName: "properties.lastSucceededTimestamp",
        type: {
          name: "DateTime"
        }
      }
    }
  }
};

export const BigDataPoolPatchInfo: msRest.CompositeMapper = {
  serializedName: "BigDataPoolPatchInfo",
  type: {
    name: "Composite",
    className: "BigDataPoolPatchInfo",
    modelProperties: {
      tags: {
        serializedName: "tags",
        type: {
          name: "Dictionary",
          value: {
            type: {
              name: "String"
            }
          }
        }
      }
    }
  }
};

export const ProxyResource: msRest.CompositeMapper = {
  serializedName: "ProxyResource",
  type: {
    name: "Composite",
    className: "ProxyResource",
    modelProperties: {
      ...Resource.type.modelProperties
    }
  }
};

export const AzureEntityResource: msRest.CompositeMapper = {
  serializedName: "AzureEntityResource",
  type: {
    name: "Composite",
    className: "AzureEntityResource",
    modelProperties: {
      ...Resource.type.modelProperties,
      etag: {
        readOnly: true,
        serializedName: "etag",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const ErrorAdditionalInfo: msRest.CompositeMapper = {
  serializedName: "ErrorAdditionalInfo",
  type: {
    name: "Composite",
    className: "ErrorAdditionalInfo",
    modelProperties: {
      type: {
        readOnly: true,
        serializedName: "type",
        type: {
          name: "String"
        }
      },
      info: {
        readOnly: true,
        serializedName: "info",
        type: {
          name: "Object"
        }
      }
    }
  }
};

export const ErrorDetail: msRest.CompositeMapper = {
  serializedName: "ErrorDetail",
  type: {
    name: "Composite",
    className: "ErrorDetail",
    modelProperties: {
      code: {
        readOnly: true,
        serializedName: "code",
        type: {
          name: "String"
        }
      },
      message: {
        readOnly: true,
        serializedName: "message",
        type: {
          name: "String"
        }
      },
      target: {
        readOnly: true,
        serializedName: "target",
        type: {
          name: "String"
        }
      },
      details: {
        readOnly: true,
        serializedName: "details",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "ErrorDetail"
            }
          }
        }
      },
      additionalInfo: {
        readOnly: true,
        serializedName: "additionalInfo",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "ErrorAdditionalInfo"
            }
          }
        }
      }
    }
  }
};

export const ErrorResponse: msRest.CompositeMapper = {
  serializedName: "ErrorResponse",
  type: {
    name: "Composite",
    className: "ErrorResponse",
    modelProperties: {
      error: {
        serializedName: "error",
        type: {
          name: "Composite",
          className: "ErrorDetail"
        }
      }
    }
  }
};

export const CheckNameAvailabilityRequest: msRest.CompositeMapper = {
  serializedName: "CheckNameAvailabilityRequest",
  type: {
    name: "Composite",
    className: "CheckNameAvailabilityRequest",
    modelProperties: {
      name: {
        serializedName: "name",
        type: {
          name: "String"
        }
      },
      type: {
        serializedName: "type",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const CheckNameAvailabilityResponse: msRest.CompositeMapper = {
  serializedName: "CheckNameAvailabilityResponse",
  type: {
    name: "Composite",
    className: "CheckNameAvailabilityResponse",
    modelProperties: {
      message: {
        serializedName: "message",
        type: {
          name: "String"
        }
      },
      available: {
        serializedName: "available",
        type: {
          name: "Boolean"
        }
      },
      reason: {
        serializedName: "reason",
        type: {
          name: "String"
        }
      },
      name: {
        serializedName: "name",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const IpFirewallRuleProperties: msRest.CompositeMapper = {
  serializedName: "IpFirewallRuleProperties",
  type: {
    name: "Composite",
    className: "IpFirewallRuleProperties",
    modelProperties: {
      endIpAddress: {
        serializedName: "endIpAddress",
        type: {
          name: "String"
        }
      },
      provisioningState: {
        readOnly: true,
        serializedName: "provisioningState",
        type: {
          name: "String"
        }
      },
      startIpAddress: {
        serializedName: "startIpAddress",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const IpFirewallRuleInfo: msRest.CompositeMapper = {
  serializedName: "IpFirewallRuleInfo",
  type: {
    name: "Composite",
    className: "IpFirewallRuleInfo",
    modelProperties: {
      endIpAddress: {
        serializedName: "properties.endIpAddress",
        type: {
          name: "String"
        }
      },
      provisioningState: {
        readOnly: true,
        serializedName: "properties.provisioningState",
        type: {
          name: "String"
        }
      },
      startIpAddress: {
        serializedName: "properties.startIpAddress",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const ReplaceAllIpFirewallRulesRequest: msRest.CompositeMapper = {
  serializedName: "ReplaceAllIpFirewallRulesRequest",
  type: {
    name: "Composite",
    className: "ReplaceAllIpFirewallRulesRequest",
    modelProperties: {
      ipFirewallRules: {
        serializedName: "ipFirewallRules",
        type: {
          name: "Dictionary",
          value: {
            type: {
              name: "Composite",
              className: "IpFirewallRuleProperties"
            }
          }
        }
      }
    }
  }
};

export const ReplaceAllFirewallRulesOperationResponse: msRest.CompositeMapper = {
  serializedName: "ReplaceAllFirewallRulesOperationResponse",
  type: {
    name: "Composite",
    className: "ReplaceAllFirewallRulesOperationResponse",
    modelProperties: {
      operationId: {
        serializedName: "operationId",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const SubResource: msRest.CompositeMapper = {
  serializedName: "SubResource",
  type: {
    name: "Composite",
    className: "SubResource",
    modelProperties: {
      ...AzureEntityResource.type.modelProperties
    }
  }
};

export const IntegrationRuntime: msRest.CompositeMapper = {
  serializedName: "IntegrationRuntime",
  type: {
    name: "Composite",
    polymorphicDiscriminator: {
      serializedName: "type",
      clientName: "type"
    },
    uberParent: "IntegrationRuntime",
    className: "IntegrationRuntime",
    modelProperties: {
      description: {
        serializedName: "description",
        type: {
          name: "String"
        }
      },
      type: {
        required: true,
        serializedName: "type",
        type: {
          name: "String"
        }
      }
    },
    additionalProperties: {
      type: {
        name: "Object"
      }
    }
  }
};

export const IntegrationRuntimeDataFlowProperties: msRest.CompositeMapper = {
  serializedName: "IntegrationRuntimeDataFlowProperties",
  type: {
    name: "Composite",
    className: "IntegrationRuntimeDataFlowProperties",
    modelProperties: {
      computeType: {
        serializedName: "computeType",
        type: {
          name: "String"
        }
      },
      coreCount: {
        serializedName: "coreCount",
        type: {
          name: "Number"
        }
      },
      timeToLive: {
        serializedName: "timeToLive",
        constraints: {
          InclusiveMinimum: 0
        },
        type: {
          name: "Number"
        }
      }
    },
    additionalProperties: {
      type: {
        name: "Object"
      }
    }
  }
};

export const IntegrationRuntimeVNetProperties: msRest.CompositeMapper = {
  serializedName: "IntegrationRuntimeVNetProperties",
  type: {
    name: "Composite",
    className: "IntegrationRuntimeVNetProperties",
    modelProperties: {
      vNetId: {
        serializedName: "vNetId",
        type: {
          name: "String"
        }
      },
      subnet: {
        serializedName: "subnet",
        type: {
          name: "String"
        }
      },
      publicIPs: {
        serializedName: "publicIPs",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "String"
            }
          }
        }
      }
    },
    additionalProperties: {
      type: {
        name: "Object"
      }
    }
  }
};

export const IntegrationRuntimeComputeProperties: msRest.CompositeMapper = {
  serializedName: "IntegrationRuntimeComputeProperties",
  type: {
    name: "Composite",
    className: "IntegrationRuntimeComputeProperties",
    modelProperties: {
      location: {
        serializedName: "location",
        type: {
          name: "String"
        }
      },
      nodeSize: {
        serializedName: "nodeSize",
        type: {
          name: "String"
        }
      },
      numberOfNodes: {
        serializedName: "numberOfNodes",
        constraints: {
          InclusiveMinimum: 1
        },
        type: {
          name: "Number"
        }
      },
      maxParallelExecutionsPerNode: {
        serializedName: "maxParallelExecutionsPerNode",
        constraints: {
          InclusiveMinimum: 1
        },
        type: {
          name: "Number"
        }
      },
      dataFlowProperties: {
        serializedName: "dataFlowProperties",
        type: {
          name: "Composite",
          className: "IntegrationRuntimeDataFlowProperties",
          additionalProperties: {
            type: {
              name: "Object"
            }
          }
        }
      },
      vNetProperties: {
        serializedName: "vNetProperties",
        type: {
          name: "Composite",
          className: "IntegrationRuntimeVNetProperties",
          additionalProperties: {
            type: {
              name: "Object"
            }
          }
        }
      }
    },
    additionalProperties: {
      type: {
        name: "Object"
      }
    }
  }
};

export const SecretBase: msRest.CompositeMapper = {
  serializedName: "SecretBase",
  type: {
    name: "Composite",
    polymorphicDiscriminator: {
      serializedName: "type",
      clientName: "type"
    },
    uberParent: "SecretBase",
    className: "SecretBase",
    modelProperties: {
      type: {
        required: true,
        serializedName: "type",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const SecureString: msRest.CompositeMapper = {
  serializedName: "SecureString",
  type: {
    name: "Composite",
    polymorphicDiscriminator: SecretBase.type.polymorphicDiscriminator,
    uberParent: "SecretBase",
    className: "SecureString",
    modelProperties: {
      ...SecretBase.type.modelProperties,
      value: {
        required: true,
        serializedName: "value",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const IntegrationRuntimeSsisCatalogInfo: msRest.CompositeMapper = {
  serializedName: "IntegrationRuntimeSsisCatalogInfo",
  type: {
    name: "Composite",
    className: "IntegrationRuntimeSsisCatalogInfo",
    modelProperties: {
      catalogServerEndpoint: {
        serializedName: "catalogServerEndpoint",
        type: {
          name: "String"
        }
      },
      catalogAdminUserName: {
        serializedName: "catalogAdminUserName",
        constraints: {
          MaxLength: 128,
          MinLength: 1
        },
        type: {
          name: "String"
        }
      },
      catalogAdminPassword: {
        serializedName: "catalogAdminPassword",
        type: {
          name: "Composite",
          className: "SecureString"
        }
      },
      catalogPricingTier: {
        serializedName: "catalogPricingTier",
        type: {
          name: "String"
        }
      }
    },
    additionalProperties: {
      type: {
        name: "Object"
      }
    }
  }
};

export const IntegrationRuntimeCustomSetupScriptProperties: msRest.CompositeMapper = {
  serializedName: "IntegrationRuntimeCustomSetupScriptProperties",
  type: {
    name: "Composite",
    className: "IntegrationRuntimeCustomSetupScriptProperties",
    modelProperties: {
      blobContainerUri: {
        serializedName: "blobContainerUri",
        type: {
          name: "String"
        }
      },
      sasToken: {
        serializedName: "sasToken",
        type: {
          name: "Composite",
          className: "SecureString"
        }
      }
    }
  }
};

export const EntityReference: msRest.CompositeMapper = {
  serializedName: "EntityReference",
  type: {
    name: "Composite",
    className: "EntityReference",
    modelProperties: {
      type: {
        serializedName: "type",
        type: {
          name: "String"
        }
      },
      referenceName: {
        serializedName: "referenceName",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const IntegrationRuntimeDataProxyProperties: msRest.CompositeMapper = {
  serializedName: "IntegrationRuntimeDataProxyProperties",
  type: {
    name: "Composite",
    className: "IntegrationRuntimeDataProxyProperties",
    modelProperties: {
      connectVia: {
        serializedName: "connectVia",
        type: {
          name: "Composite",
          className: "EntityReference"
        }
      },
      stagingLinkedService: {
        serializedName: "stagingLinkedService",
        type: {
          name: "Composite",
          className: "EntityReference"
        }
      },
      path: {
        serializedName: "path",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const CustomSetupBase: msRest.CompositeMapper = {
  serializedName: "CustomSetupBase",
  type: {
    name: "Composite",
    polymorphicDiscriminator: {
      serializedName: "type",
      clientName: "type"
    },
    uberParent: "CustomSetupBase",
    className: "CustomSetupBase",
    modelProperties: {
      type: {
        required: true,
        serializedName: "type",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const IntegrationRuntimeSsisProperties: msRest.CompositeMapper = {
  serializedName: "IntegrationRuntimeSsisProperties",
  type: {
    name: "Composite",
    className: "IntegrationRuntimeSsisProperties",
    modelProperties: {
      catalogInfo: {
        serializedName: "catalogInfo",
        type: {
          name: "Composite",
          className: "IntegrationRuntimeSsisCatalogInfo",
          additionalProperties: {
            type: {
              name: "Object"
            }
          }
        }
      },
      licenseType: {
        serializedName: "licenseType",
        type: {
          name: "String"
        }
      },
      customSetupScriptProperties: {
        serializedName: "customSetupScriptProperties",
        type: {
          name: "Composite",
          className: "IntegrationRuntimeCustomSetupScriptProperties"
        }
      },
      dataProxyProperties: {
        serializedName: "dataProxyProperties",
        type: {
          name: "Composite",
          className: "IntegrationRuntimeDataProxyProperties"
        }
      },
      edition: {
        serializedName: "edition",
        type: {
          name: "String"
        }
      },
      expressCustomSetupProperties: {
        serializedName: "expressCustomSetupProperties",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "CustomSetupBase"
            }
          }
        }
      }
    },
    additionalProperties: {
      type: {
        name: "Object"
      }
    }
  }
};

export const ManagedIntegrationRuntime: msRest.CompositeMapper = {
  serializedName: "Managed",
  type: {
    name: "Composite",
    polymorphicDiscriminator: IntegrationRuntime.type.polymorphicDiscriminator,
    uberParent: "IntegrationRuntime",
    className: "ManagedIntegrationRuntime",
    modelProperties: {
      ...IntegrationRuntime.type.modelProperties,
      state: {
        readOnly: true,
        serializedName: "state",
        type: {
          name: "String"
        }
      },
      computeProperties: {
        serializedName: "typeProperties.computeProperties",
        type: {
          name: "Composite",
          className: "IntegrationRuntimeComputeProperties",
          additionalProperties: {
            type: {
              name: "Object"
            }
          }
        }
      },
      ssisProperties: {
        serializedName: "typeProperties.ssisProperties",
        type: {
          name: "Composite",
          className: "IntegrationRuntimeSsisProperties",
          additionalProperties: {
            type: {
              name: "Object"
            }
          }
        }
      }
    },
    additionalProperties: IntegrationRuntime.type.additionalProperties
  }
};

export const CmdkeySetup: msRest.CompositeMapper = {
  serializedName: "CmdkeySetup",
  type: {
    name: "Composite",
    polymorphicDiscriminator: CustomSetupBase.type.polymorphicDiscriminator,
    uberParent: "CustomSetupBase",
    className: "CmdkeySetup",
    modelProperties: {
      ...CustomSetupBase.type.modelProperties,
      targetName: {
        required: true,
        serializedName: "typeProperties.targetName",
        type: {
          name: "Object"
        }
      },
      userName: {
        required: true,
        serializedName: "typeProperties.userName",
        type: {
          name: "Object"
        }
      },
      password: {
        required: true,
        serializedName: "typeProperties.password",
        type: {
          name: "Composite",
          className: "SecretBase"
        }
      }
    }
  }
};

export const EnvironmentVariableSetup: msRest.CompositeMapper = {
  serializedName: "EnvironmentVariableSetup",
  type: {
    name: "Composite",
    polymorphicDiscriminator: CustomSetupBase.type.polymorphicDiscriminator,
    uberParent: "CustomSetupBase",
    className: "EnvironmentVariableSetup",
    modelProperties: {
      ...CustomSetupBase.type.modelProperties,
      variableName: {
        required: true,
        serializedName: "typeProperties.variableName",
        type: {
          name: "String"
        }
      },
      variableValue: {
        required: true,
        serializedName: "typeProperties.variableValue",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const ComponentSetup: msRest.CompositeMapper = {
  serializedName: "ComponentSetup",
  type: {
    name: "Composite",
    polymorphicDiscriminator: CustomSetupBase.type.polymorphicDiscriminator,
    uberParent: "CustomSetupBase",
    className: "ComponentSetup",
    modelProperties: {
      ...CustomSetupBase.type.modelProperties,
      componentName: {
        required: true,
        serializedName: "typeProperties.componentName",
        type: {
          name: "String"
        }
      },
      licenseKey: {
        serializedName: "typeProperties.licenseKey",
        type: {
          name: "Composite",
          className: "SecretBase"
        }
      }
    }
  }
};

export const LinkedIntegrationRuntimeType: msRest.CompositeMapper = {
  serializedName: "LinkedIntegrationRuntimeType",
  type: {
    name: "Composite",
    polymorphicDiscriminator: {
      serializedName: "authorizationType",
      clientName: "authorizationType"
    },
    uberParent: "LinkedIntegrationRuntimeType",
    className: "LinkedIntegrationRuntimeType",
    modelProperties: {
      authorizationType: {
        required: true,
        serializedName: "authorizationType",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const SelfHostedIntegrationRuntime: msRest.CompositeMapper = {
  serializedName: "SelfHosted",
  type: {
    name: "Composite",
    polymorphicDiscriminator: IntegrationRuntime.type.polymorphicDiscriminator,
    uberParent: "IntegrationRuntime",
    className: "SelfHostedIntegrationRuntime",
    modelProperties: {
      ...IntegrationRuntime.type.modelProperties,
      linkedInfo: {
        serializedName: "typeProperties.linkedInfo",
        type: {
          name: "Composite",
          className: "LinkedIntegrationRuntimeType"
        }
      }
    },
    additionalProperties: IntegrationRuntime.type.additionalProperties
  }
};

export const LinkedIntegrationRuntimeKeyAuthorization: msRest.CompositeMapper = {
  serializedName: "Key",
  type: {
    name: "Composite",
    polymorphicDiscriminator: LinkedIntegrationRuntimeType.type.polymorphicDiscriminator,
    uberParent: "LinkedIntegrationRuntimeType",
    className: "LinkedIntegrationRuntimeKeyAuthorization",
    modelProperties: {
      ...LinkedIntegrationRuntimeType.type.modelProperties,
      key: {
        required: true,
        serializedName: "key",
        type: {
          name: "Composite",
          className: "SecureString"
        }
      }
    }
  }
};

export const LinkedIntegrationRuntimeRbacAuthorization: msRest.CompositeMapper = {
  serializedName: "RBAC",
  type: {
    name: "Composite",
    polymorphicDiscriminator: LinkedIntegrationRuntimeType.type.polymorphicDiscriminator,
    uberParent: "LinkedIntegrationRuntimeType",
    className: "LinkedIntegrationRuntimeRbacAuthorization",
    modelProperties: {
      ...LinkedIntegrationRuntimeType.type.modelProperties,
      resourceId: {
        required: true,
        serializedName: "resourceId",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const IntegrationRuntimeStatus: msRest.CompositeMapper = {
  serializedName: "IntegrationRuntimeStatus",
  type: {
    name: "Composite",
    polymorphicDiscriminator: {
      serializedName: "type",
      clientName: "type"
    },
    uberParent: "IntegrationRuntimeStatus",
    className: "IntegrationRuntimeStatus",
    modelProperties: {
      dataFactoryName: {
        readOnly: true,
        serializedName: "dataFactoryName",
        type: {
          name: "String"
        }
      },
      state: {
        readOnly: true,
        serializedName: "state",
        type: {
          name: "String"
        }
      },
      type: {
        required: true,
        serializedName: "type",
        type: {
          name: "String"
        }
      }
    },
    additionalProperties: {
      type: {
        name: "Object"
      }
    }
  }
};

export const ManagedIntegrationRuntimeError: msRest.CompositeMapper = {
  serializedName: "ManagedIntegrationRuntimeError",
  type: {
    name: "Composite",
    className: "ManagedIntegrationRuntimeError",
    modelProperties: {
      time: {
        readOnly: true,
        serializedName: "time",
        type: {
          name: "DateTime"
        }
      },
      code: {
        readOnly: true,
        serializedName: "code",
        type: {
          name: "String"
        }
      },
      parameters: {
        readOnly: true,
        serializedName: "parameters",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "String"
            }
          }
        }
      },
      message: {
        readOnly: true,
        serializedName: "message",
        type: {
          name: "String"
        }
      }
    },
    additionalProperties: {
      type: {
        name: "Object"
      }
    }
  }
};

export const ManagedIntegrationRuntimeNode: msRest.CompositeMapper = {
  serializedName: "ManagedIntegrationRuntimeNode",
  type: {
    name: "Composite",
    className: "ManagedIntegrationRuntimeNode",
    modelProperties: {
      nodeId: {
        readOnly: true,
        serializedName: "nodeId",
        type: {
          name: "String"
        }
      },
      status: {
        readOnly: true,
        serializedName: "status",
        type: {
          name: "String"
        }
      },
      errors: {
        serializedName: "errors",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "ManagedIntegrationRuntimeError",
              additionalProperties: {
                type: {
                  name: "Object"
                }
              }
            }
          }
        }
      }
    },
    additionalProperties: {
      type: {
        name: "Object"
      }
    }
  }
};

export const ManagedIntegrationRuntimeOperationResult: msRest.CompositeMapper = {
  serializedName: "ManagedIntegrationRuntimeOperationResult",
  type: {
    name: "Composite",
    className: "ManagedIntegrationRuntimeOperationResult",
    modelProperties: {
      type: {
        readOnly: true,
        serializedName: "type",
        type: {
          name: "String"
        }
      },
      startTime: {
        readOnly: true,
        serializedName: "startTime",
        type: {
          name: "DateTime"
        }
      },
      result: {
        readOnly: true,
        serializedName: "result",
        type: {
          name: "String"
        }
      },
      errorCode: {
        readOnly: true,
        serializedName: "errorCode",
        type: {
          name: "String"
        }
      },
      parameters: {
        readOnly: true,
        serializedName: "parameters",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "String"
            }
          }
        }
      },
      activityId: {
        readOnly: true,
        serializedName: "activityId",
        type: {
          name: "String"
        }
      }
    },
    additionalProperties: {
      type: {
        name: "Object"
      }
    }
  }
};

export const ManagedIntegrationRuntimeStatus: msRest.CompositeMapper = {
  serializedName: "Managed",
  type: {
    name: "Composite",
    polymorphicDiscriminator: IntegrationRuntimeStatus.type.polymorphicDiscriminator,
    uberParent: "IntegrationRuntimeStatus",
    className: "ManagedIntegrationRuntimeStatus",
    modelProperties: {
      ...IntegrationRuntimeStatus.type.modelProperties,
      createTime: {
        readOnly: true,
        serializedName: "typeProperties.createTime",
        type: {
          name: "DateTime"
        }
      },
      nodes: {
        readOnly: true,
        serializedName: "typeProperties.nodes",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "ManagedIntegrationRuntimeNode",
              additionalProperties: {
                type: {
                  name: "Object"
                }
              }
            }
          }
        }
      },
      otherErrors: {
        readOnly: true,
        serializedName: "typeProperties.otherErrors",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "ManagedIntegrationRuntimeError",
              additionalProperties: {
                type: {
                  name: "Object"
                }
              }
            }
          }
        }
      },
      lastOperation: {
        readOnly: true,
        serializedName: "typeProperties.lastOperation",
        type: {
          name: "Composite",
          className: "ManagedIntegrationRuntimeOperationResult",
          additionalProperties: {
            type: {
              name: "Object"
            }
          }
        }
      }
    },
    additionalProperties: IntegrationRuntimeStatus.type.additionalProperties
  }
};

export const SelfHostedIntegrationRuntimeNode: msRest.CompositeMapper = {
  serializedName: "SelfHostedIntegrationRuntimeNode",
  type: {
    name: "Composite",
    className: "SelfHostedIntegrationRuntimeNode",
    modelProperties: {
      nodeName: {
        readOnly: true,
        serializedName: "nodeName",
        type: {
          name: "String"
        }
      },
      machineName: {
        readOnly: true,
        serializedName: "machineName",
        type: {
          name: "String"
        }
      },
      hostServiceUri: {
        readOnly: true,
        serializedName: "hostServiceUri",
        type: {
          name: "String"
        }
      },
      status: {
        readOnly: true,
        serializedName: "status",
        type: {
          name: "String"
        }
      },
      capabilities: {
        readOnly: true,
        serializedName: "capabilities",
        type: {
          name: "Dictionary",
          value: {
            type: {
              name: "String"
            }
          }
        }
      },
      versionStatus: {
        readOnly: true,
        serializedName: "versionStatus",
        type: {
          name: "String"
        }
      },
      version: {
        readOnly: true,
        serializedName: "version",
        type: {
          name: "String"
        }
      },
      registerTime: {
        readOnly: true,
        serializedName: "registerTime",
        type: {
          name: "DateTime"
        }
      },
      lastConnectTime: {
        readOnly: true,
        serializedName: "lastConnectTime",
        type: {
          name: "DateTime"
        }
      },
      expiryTime: {
        readOnly: true,
        serializedName: "expiryTime",
        type: {
          name: "DateTime"
        }
      },
      lastStartTime: {
        readOnly: true,
        serializedName: "lastStartTime",
        type: {
          name: "DateTime"
        }
      },
      lastStopTime: {
        readOnly: true,
        serializedName: "lastStopTime",
        type: {
          name: "DateTime"
        }
      },
      lastUpdateResult: {
        readOnly: true,
        serializedName: "lastUpdateResult",
        type: {
          name: "String"
        }
      },
      lastStartUpdateTime: {
        readOnly: true,
        serializedName: "lastStartUpdateTime",
        type: {
          name: "DateTime"
        }
      },
      lastEndUpdateTime: {
        readOnly: true,
        serializedName: "lastEndUpdateTime",
        type: {
          name: "DateTime"
        }
      },
      isActiveDispatcher: {
        readOnly: true,
        serializedName: "isActiveDispatcher",
        type: {
          name: "Boolean"
        }
      },
      concurrentJobsLimit: {
        readOnly: true,
        serializedName: "concurrentJobsLimit",
        type: {
          name: "Number"
        }
      },
      maxConcurrentJobs: {
        readOnly: true,
        serializedName: "maxConcurrentJobs",
        type: {
          name: "Number"
        }
      }
    },
    additionalProperties: {
      type: {
        name: "Object"
      }
    }
  }
};

export const LinkedIntegrationRuntime: msRest.CompositeMapper = {
  serializedName: "LinkedIntegrationRuntime",
  type: {
    name: "Composite",
    className: "LinkedIntegrationRuntime",
    modelProperties: {
      name: {
        readOnly: true,
        serializedName: "name",
        type: {
          name: "String"
        }
      },
      subscriptionId: {
        readOnly: true,
        serializedName: "subscriptionId",
        type: {
          name: "String"
        }
      },
      dataFactoryName: {
        readOnly: true,
        serializedName: "dataFactoryName",
        type: {
          name: "String"
        }
      },
      dataFactoryLocation: {
        readOnly: true,
        serializedName: "dataFactoryLocation",
        type: {
          name: "String"
        }
      },
      createTime: {
        readOnly: true,
        serializedName: "createTime",
        type: {
          name: "DateTime"
        }
      }
    }
  }
};

export const SelfHostedIntegrationRuntimeStatus: msRest.CompositeMapper = {
  serializedName: "SelfHosted",
  type: {
    name: "Composite",
    polymorphicDiscriminator: IntegrationRuntimeStatus.type.polymorphicDiscriminator,
    uberParent: "IntegrationRuntimeStatus",
    className: "SelfHostedIntegrationRuntimeStatus",
    modelProperties: {
      ...IntegrationRuntimeStatus.type.modelProperties,
      createTime: {
        readOnly: true,
        serializedName: "typeProperties.createTime",
        type: {
          name: "DateTime"
        }
      },
      taskQueueId: {
        readOnly: true,
        serializedName: "typeProperties.taskQueueId",
        type: {
          name: "String"
        }
      },
      nodeCommunicationChannelEncryptionMode: {
        readOnly: true,
        serializedName: "typeProperties.nodeCommunicationChannelEncryptionMode",
        type: {
          name: "String"
        }
      },
      internalChannelEncryption: {
        readOnly: true,
        serializedName: "typeProperties.internalChannelEncryption",
        type: {
          name: "String"
        }
      },
      version: {
        readOnly: true,
        serializedName: "typeProperties.version",
        type: {
          name: "String"
        }
      },
      nodes: {
        serializedName: "typeProperties.nodes",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "SelfHostedIntegrationRuntimeNode",
              additionalProperties: {
                type: {
                  name: "Object"
                }
              }
            }
          }
        }
      },
      scheduledUpdateDate: {
        readOnly: true,
        serializedName: "typeProperties.scheduledUpdateDate",
        type: {
          name: "DateTime"
        }
      },
      updateDelayOffset: {
        readOnly: true,
        serializedName: "typeProperties.updateDelayOffset",
        type: {
          name: "String"
        }
      },
      localTimeZoneOffset: {
        readOnly: true,
        serializedName: "typeProperties.localTimeZoneOffset",
        type: {
          name: "String"
        }
      },
      capabilities: {
        readOnly: true,
        serializedName: "typeProperties.capabilities",
        type: {
          name: "Dictionary",
          value: {
            type: {
              name: "String"
            }
          }
        }
      },
      serviceUrls: {
        readOnly: true,
        serializedName: "typeProperties.serviceUrls",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "String"
            }
          }
        }
      },
      autoUpdate: {
        readOnly: true,
        serializedName: "typeProperties.autoUpdate",
        type: {
          name: "String"
        }
      },
      versionStatus: {
        readOnly: true,
        serializedName: "typeProperties.versionStatus",
        type: {
          name: "String"
        }
      },
      links: {
        serializedName: "typeProperties.links",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "LinkedIntegrationRuntime"
            }
          }
        }
      },
      pushedVersion: {
        readOnly: true,
        serializedName: "typeProperties.pushedVersion",
        type: {
          name: "String"
        }
      },
      latestVersion: {
        readOnly: true,
        serializedName: "typeProperties.latestVersion",
        type: {
          name: "String"
        }
      },
      autoUpdateETA: {
        readOnly: true,
        serializedName: "typeProperties.autoUpdateETA",
        type: {
          name: "DateTime"
        }
      }
    },
    additionalProperties: IntegrationRuntimeStatus.type.additionalProperties
  }
};

export const IntegrationRuntimeConnectionInfo: msRest.CompositeMapper = {
  serializedName: "IntegrationRuntimeConnectionInfo",
  type: {
    name: "Composite",
    className: "IntegrationRuntimeConnectionInfo",
    modelProperties: {
      serviceToken: {
        readOnly: true,
        serializedName: "serviceToken",
        type: {
          name: "String"
        }
      },
      identityCertThumbprint: {
        readOnly: true,
        serializedName: "identityCertThumbprint",
        type: {
          name: "String"
        }
      },
      hostServiceUri: {
        readOnly: true,
        serializedName: "hostServiceUri",
        type: {
          name: "String"
        }
      },
      version: {
        readOnly: true,
        serializedName: "version",
        type: {
          name: "String"
        }
      },
      publicKey: {
        readOnly: true,
        serializedName: "publicKey",
        type: {
          name: "String"
        }
      },
      isIdentityCertExprired: {
        readOnly: true,
        serializedName: "isIdentityCertExprired",
        type: {
          name: "Boolean"
        }
      }
    },
    additionalProperties: {
      type: {
        name: "Object"
      }
    }
  }
};

export const IntegrationRuntimeRegenerateKeyParameters: msRest.CompositeMapper = {
  serializedName: "IntegrationRuntimeRegenerateKeyParameters",
  type: {
    name: "Composite",
    className: "IntegrationRuntimeRegenerateKeyParameters",
    modelProperties: {
      keyName: {
        serializedName: "keyName",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const IntegrationRuntimeAuthKeys: msRest.CompositeMapper = {
  serializedName: "IntegrationRuntimeAuthKeys",
  type: {
    name: "Composite",
    className: "IntegrationRuntimeAuthKeys",
    modelProperties: {
      authKey1: {
        serializedName: "authKey1",
        type: {
          name: "String"
        }
      },
      authKey2: {
        serializedName: "authKey2",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const IntegrationRuntimeNodeMonitoringData: msRest.CompositeMapper = {
  serializedName: "IntegrationRuntimeNodeMonitoringData",
  type: {
    name: "Composite",
    className: "IntegrationRuntimeNodeMonitoringData",
    modelProperties: {
      nodeName: {
        readOnly: true,
        serializedName: "nodeName",
        type: {
          name: "String"
        }
      },
      availableMemoryInMB: {
        readOnly: true,
        serializedName: "availableMemoryInMB",
        type: {
          name: "Number"
        }
      },
      cpuUtilization: {
        readOnly: true,
        serializedName: "cpuUtilization",
        type: {
          name: "Number"
        }
      },
      concurrentJobsLimit: {
        readOnly: true,
        serializedName: "concurrentJobsLimit",
        type: {
          name: "Number"
        }
      },
      concurrentJobsRunning: {
        readOnly: true,
        serializedName: "concurrentJobsRunning",
        type: {
          name: "Number"
        }
      },
      maxConcurrentJobs: {
        readOnly: true,
        serializedName: "maxConcurrentJobs",
        type: {
          name: "Number"
        }
      },
      sentBytes: {
        readOnly: true,
        serializedName: "sentBytes",
        type: {
          name: "Number"
        }
      },
      receivedBytes: {
        readOnly: true,
        serializedName: "receivedBytes",
        type: {
          name: "Number"
        }
      }
    },
    additionalProperties: {
      type: {
        name: "Object"
      }
    }
  }
};

export const IntegrationRuntimeMonitoringData: msRest.CompositeMapper = {
  serializedName: "IntegrationRuntimeMonitoringData",
  type: {
    name: "Composite",
    className: "IntegrationRuntimeMonitoringData",
    modelProperties: {
      name: {
        serializedName: "name",
        type: {
          name: "String"
        }
      },
      nodes: {
        serializedName: "nodes",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "IntegrationRuntimeNodeMonitoringData",
              additionalProperties: {
                type: {
                  name: "Object"
                }
              }
            }
          }
        }
      }
    }
  }
};

export const IntegrationRuntimeNodeIpAddress: msRest.CompositeMapper = {
  serializedName: "IntegrationRuntimeNodeIpAddress",
  type: {
    name: "Composite",
    className: "IntegrationRuntimeNodeIpAddress",
    modelProperties: {
      ipAddress: {
        readOnly: true,
        serializedName: "ipAddress",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const SsisObjectMetadata: msRest.CompositeMapper = {
  serializedName: "SsisObjectMetadata",
  type: {
    name: "Composite",
    polymorphicDiscriminator: {
      serializedName: "type",
      clientName: "type"
    },
    uberParent: "SsisObjectMetadata",
    className: "SsisObjectMetadata",
    modelProperties: {
      id: {
        serializedName: "id",
        type: {
          name: "Number"
        }
      },
      name: {
        serializedName: "name",
        type: {
          name: "String"
        }
      },
      description: {
        serializedName: "description",
        type: {
          name: "String"
        }
      },
      type: {
        required: true,
        serializedName: "type",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const SsisObjectMetadataListResponse: msRest.CompositeMapper = {
  serializedName: "SsisObjectMetadataListResponse",
  type: {
    name: "Composite",
    className: "SsisObjectMetadataListResponse",
    modelProperties: {
      value: {
        serializedName: "value",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "SsisObjectMetadata"
            }
          }
        }
      },
      nextLink: {
        serializedName: "nextLink",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const SsisFolder: msRest.CompositeMapper = {
  serializedName: "Folder",
  type: {
    name: "Composite",
    polymorphicDiscriminator: SsisObjectMetadata.type.polymorphicDiscriminator,
    uberParent: "SsisObjectMetadata",
    className: "SsisFolder",
    modelProperties: {
      ...SsisObjectMetadata.type.modelProperties
    }
  }
};

export const SsisEnvironmentReference: msRest.CompositeMapper = {
  serializedName: "SsisEnvironmentReference",
  type: {
    name: "Composite",
    className: "SsisEnvironmentReference",
    modelProperties: {
      id: {
        serializedName: "id",
        type: {
          name: "Number"
        }
      },
      environmentFolderName: {
        serializedName: "environmentFolderName",
        type: {
          name: "String"
        }
      },
      environmentName: {
        serializedName: "environmentName",
        type: {
          name: "String"
        }
      },
      referenceType: {
        serializedName: "referenceType",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const SsisParameter: msRest.CompositeMapper = {
  serializedName: "SsisParameter",
  type: {
    name: "Composite",
    className: "SsisParameter",
    modelProperties: {
      id: {
        serializedName: "id",
        type: {
          name: "Number"
        }
      },
      name: {
        serializedName: "name",
        type: {
          name: "String"
        }
      },
      description: {
        serializedName: "description",
        type: {
          name: "String"
        }
      },
      dataType: {
        serializedName: "dataType",
        type: {
          name: "String"
        }
      },
      required: {
        serializedName: "required",
        type: {
          name: "Boolean"
        }
      },
      sensitive: {
        serializedName: "sensitive",
        type: {
          name: "Boolean"
        }
      },
      designDefaultValue: {
        serializedName: "designDefaultValue",
        type: {
          name: "String"
        }
      },
      defaultValue: {
        serializedName: "defaultValue",
        type: {
          name: "String"
        }
      },
      sensitiveDefaultValue: {
        serializedName: "sensitiveDefaultValue",
        type: {
          name: "String"
        }
      },
      valueType: {
        serializedName: "valueType",
        type: {
          name: "String"
        }
      },
      valueSet: {
        serializedName: "valueSet",
        type: {
          name: "Boolean"
        }
      },
      variable: {
        serializedName: "variable",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const SsisProject: msRest.CompositeMapper = {
  serializedName: "Project",
  type: {
    name: "Composite",
    polymorphicDiscriminator: SsisObjectMetadata.type.polymorphicDiscriminator,
    uberParent: "SsisObjectMetadata",
    className: "SsisProject",
    modelProperties: {
      ...SsisObjectMetadata.type.modelProperties,
      folderId: {
        serializedName: "folderId",
        type: {
          name: "Number"
        }
      },
      version: {
        serializedName: "version",
        type: {
          name: "Number"
        }
      },
      environmentRefs: {
        serializedName: "environmentRefs",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "SsisEnvironmentReference"
            }
          }
        }
      },
      parameters: {
        serializedName: "parameters",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "SsisParameter"
            }
          }
        }
      }
    }
  }
};

export const SsisPackage: msRest.CompositeMapper = {
  serializedName: "Package",
  type: {
    name: "Composite",
    polymorphicDiscriminator: SsisObjectMetadata.type.polymorphicDiscriminator,
    uberParent: "SsisObjectMetadata",
    className: "SsisPackage",
    modelProperties: {
      ...SsisObjectMetadata.type.modelProperties,
      folderId: {
        serializedName: "folderId",
        type: {
          name: "Number"
        }
      },
      projectVersion: {
        serializedName: "projectVersion",
        type: {
          name: "Number"
        }
      },
      projectId: {
        serializedName: "projectId",
        type: {
          name: "Number"
        }
      },
      parameters: {
        serializedName: "parameters",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "SsisParameter"
            }
          }
        }
      }
    }
  }
};

export const SsisVariable: msRest.CompositeMapper = {
  serializedName: "SsisVariable",
  type: {
    name: "Composite",
    className: "SsisVariable",
    modelProperties: {
      id: {
        serializedName: "id",
        type: {
          name: "Number"
        }
      },
      name: {
        serializedName: "name",
        type: {
          name: "String"
        }
      },
      description: {
        serializedName: "description",
        type: {
          name: "String"
        }
      },
      dataType: {
        serializedName: "dataType",
        type: {
          name: "String"
        }
      },
      sensitive: {
        serializedName: "sensitive",
        type: {
          name: "Boolean"
        }
      },
      value: {
        serializedName: "value",
        type: {
          name: "String"
        }
      },
      sensitiveValue: {
        serializedName: "sensitiveValue",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const SsisEnvironment: msRest.CompositeMapper = {
  serializedName: "Environment",
  type: {
    name: "Composite",
    polymorphicDiscriminator: SsisObjectMetadata.type.polymorphicDiscriminator,
    uberParent: "SsisObjectMetadata",
    className: "SsisEnvironment",
    modelProperties: {
      ...SsisObjectMetadata.type.modelProperties,
      folderId: {
        serializedName: "folderId",
        type: {
          name: "Number"
        }
      },
      variables: {
        serializedName: "variables",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "SsisVariable"
            }
          }
        }
      }
    }
  }
};

export const UpdateIntegrationRuntimeRequest: msRest.CompositeMapper = {
  serializedName: "UpdateIntegrationRuntimeRequest",
  type: {
    name: "Composite",
    className: "UpdateIntegrationRuntimeRequest",
    modelProperties: {
      autoUpdate: {
        serializedName: "autoUpdate",
        type: {
          name: "String"
        }
      },
      updateDelayOffset: {
        serializedName: "updateDelayOffset",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const IntegrationRuntimeResource: msRest.CompositeMapper = {
  serializedName: "IntegrationRuntimeResource",
  type: {
    name: "Composite",
    className: "IntegrationRuntimeResource",
    modelProperties: {
      ...SubResource.type.modelProperties,
      properties: {
        required: true,
        serializedName: "properties",
        type: {
          name: "Composite",
          className: "IntegrationRuntime",
          additionalProperties: {
            type: {
              name: "Object"
            }
          }
        }
      }
    }
  }
};

export const GetSsisObjectMetadataRequest: msRest.CompositeMapper = {
  serializedName: "GetSsisObjectMetadataRequest",
  type: {
    name: "Composite",
    className: "GetSsisObjectMetadataRequest",
    modelProperties: {
      metadataPath: {
        serializedName: "metadataPath",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const UpdateIntegrationRuntimeNodeRequest: msRest.CompositeMapper = {
  serializedName: "UpdateIntegrationRuntimeNodeRequest",
  type: {
    name: "Composite",
    className: "UpdateIntegrationRuntimeNodeRequest",
    modelProperties: {
      concurrentJobsLimit: {
        serializedName: "concurrentJobsLimit",
        constraints: {
          InclusiveMinimum: 1
        },
        type: {
          name: "Number"
        }
      }
    }
  }
};

export const IntegrationRuntimeStatusResponse: msRest.CompositeMapper = {
  serializedName: "IntegrationRuntimeStatusResponse",
  type: {
    name: "Composite",
    className: "IntegrationRuntimeStatusResponse",
    modelProperties: {
      name: {
        readOnly: true,
        serializedName: "name",
        type: {
          name: "String"
        }
      },
      properties: {
        required: true,
        serializedName: "properties",
        type: {
          name: "Composite",
          className: "IntegrationRuntimeStatus",
          additionalProperties: {
            type: {
              name: "Object"
            }
          }
        }
      }
    }
  }
};

export const SsisObjectMetadataStatusResponse: msRest.CompositeMapper = {
  serializedName: "SsisObjectMetadataStatusResponse",
  type: {
    name: "Composite",
    className: "SsisObjectMetadataStatusResponse",
    modelProperties: {
      status: {
        serializedName: "status",
        type: {
          name: "String"
        }
      },
      name: {
        serializedName: "name",
        type: {
          name: "String"
        }
      },
      properties: {
        serializedName: "properties",
        type: {
          name: "String"
        }
      },
      error: {
        serializedName: "error",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const Key: msRest.CompositeMapper = {
  serializedName: "Key",
  type: {
    name: "Composite",
    className: "Key",
    modelProperties: {
      ...ProxyResource.type.modelProperties,
      isActiveCMK: {
        serializedName: "properties.isActiveCMK",
        type: {
          name: "Boolean"
        }
      },
      keyVaultUrl: {
        serializedName: "properties.keyVaultUrl",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const LibraryResource: msRest.CompositeMapper = {
  serializedName: "LibraryResource",
  type: {
    name: "Composite",
    className: "LibraryResource",
    modelProperties: {
      ...SubResource.type.modelProperties,
      libraryResourceName: {
        serializedName: "properties.name",
        type: {
          name: "String"
        }
      },
      path: {
        serializedName: "properties.path",
        type: {
          name: "String"
        }
      },
      containerName: {
        serializedName: "properties.containerName",
        type: {
          name: "String"
        }
      },
      uploadedTimestamp: {
        readOnly: true,
        serializedName: "properties.uploadedTimestamp",
        type: {
          name: "DateTime"
        }
      },
      libraryResourceType: {
        serializedName: "properties.type",
        type: {
          name: "String"
        }
      },
      provisioningStatus: {
        readOnly: true,
        serializedName: "properties.provisioningStatus",
        type: {
          name: "String"
        }
      },
      creatorId: {
        readOnly: true,
        serializedName: "properties.creatorId",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const AvailableRpOperationDisplayInfo: msRest.CompositeMapper = {
  serializedName: "AvailableRpOperationDisplayInfo",
  type: {
    name: "Composite",
    className: "AvailableRpOperationDisplayInfo",
    modelProperties: {
      description: {
        serializedName: "description",
        type: {
          name: "String"
        }
      },
      resource: {
        serializedName: "resource",
        type: {
          name: "String"
        }
      },
      provider: {
        serializedName: "provider",
        type: {
          name: "String"
        }
      },
      operation: {
        serializedName: "operation",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const OperationMetaMetricDimensionSpecification: msRest.CompositeMapper = {
  serializedName: "OperationMetaMetricDimensionSpecification",
  type: {
    name: "Composite",
    className: "OperationMetaMetricDimensionSpecification",
    modelProperties: {
      displayName: {
        serializedName: "displayName",
        type: {
          name: "String"
        }
      },
      name: {
        serializedName: "name",
        type: {
          name: "String"
        }
      },
      toBeExportedForShoebox: {
        serializedName: "toBeExportedForShoebox",
        type: {
          name: "Boolean"
        }
      }
    }
  }
};

export const OperationMetaMetricSpecification: msRest.CompositeMapper = {
  serializedName: "OperationMetaMetricSpecification",
  type: {
    name: "Composite",
    className: "OperationMetaMetricSpecification",
    modelProperties: {
      sourceMdmNamespace: {
        serializedName: "sourceMdmNamespace",
        type: {
          name: "String"
        }
      },
      displayName: {
        serializedName: "displayName",
        type: {
          name: "String"
        }
      },
      name: {
        serializedName: "name",
        type: {
          name: "String"
        }
      },
      aggregationType: {
        serializedName: "aggregationType",
        type: {
          name: "String"
        }
      },
      displayDescription: {
        serializedName: "displayDescription",
        type: {
          name: "String"
        }
      },
      sourceMdmAccount: {
        serializedName: "sourceMdmAccount",
        type: {
          name: "String"
        }
      },
      enableRegionalMdmAccount: {
        serializedName: "enableRegionalMdmAccount",
        type: {
          name: "Boolean"
        }
      },
      unit: {
        serializedName: "unit",
        type: {
          name: "String"
        }
      },
      dimensions: {
        serializedName: "dimensions",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "OperationMetaMetricDimensionSpecification"
            }
          }
        }
      },
      supportsInstanceLevelAggregation: {
        serializedName: "supportsInstanceLevelAggregation",
        type: {
          name: "Boolean"
        }
      },
      metricFilterPattern: {
        serializedName: "metricFilterPattern",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const OperationMetaLogSpecification: msRest.CompositeMapper = {
  serializedName: "OperationMetaLogSpecification",
  type: {
    name: "Composite",
    className: "OperationMetaLogSpecification",
    modelProperties: {
      displayName: {
        serializedName: "displayName",
        type: {
          name: "String"
        }
      },
      blobDuration: {
        serializedName: "blobDuration",
        type: {
          name: "String"
        }
      },
      name: {
        serializedName: "name",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const OperationMetaServiceSpecification: msRest.CompositeMapper = {
  serializedName: "OperationMetaServiceSpecification",
  type: {
    name: "Composite",
    className: "OperationMetaServiceSpecification",
    modelProperties: {
      metricSpecifications: {
        serializedName: "metricSpecifications",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "OperationMetaMetricSpecification"
            }
          }
        }
      },
      logSpecifications: {
        serializedName: "logSpecifications",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "OperationMetaLogSpecification"
            }
          }
        }
      }
    }
  }
};

export const AvailableRpOperation: msRest.CompositeMapper = {
  serializedName: "AvailableRpOperation",
  type: {
    name: "Composite",
    className: "AvailableRpOperation",
    modelProperties: {
      display: {
        serializedName: "display",
        type: {
          name: "Composite",
          className: "AvailableRpOperationDisplayInfo"
        }
      },
      isDataAction: {
        serializedName: "isDataAction",
        type: {
          name: "String"
        }
      },
      name: {
        serializedName: "name",
        type: {
          name: "String"
        }
      },
      serviceSpecification: {
        serializedName: "properties.serviceSpecification",
        type: {
          name: "Composite",
          className: "OperationMetaServiceSpecification"
        }
      },
      origin: {
        serializedName: "origin",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const OperationResource: msRest.CompositeMapper = {
  serializedName: "OperationResource",
  type: {
    name: "Composite",
    className: "OperationResource",
    modelProperties: {
      id: {
        serializedName: "id",
        type: {
          name: "String"
        }
      },
      name: {
        serializedName: "name",
        type: {
          name: "String"
        }
      },
      status: {
        serializedName: "status",
        type: {
          name: "String"
        }
      },
      properties: {
        serializedName: "properties",
        type: {
          name: "Object"
        }
      },
      error: {
        serializedName: "error",
        type: {
          name: "Composite",
          className: "ErrorDetail"
        }
      },
      startTime: {
        serializedName: "startTime",
        type: {
          name: "DateTime"
        }
      },
      endTime: {
        serializedName: "endTime",
        type: {
          name: "DateTime"
        }
      },
      percentComplete: {
        serializedName: "percentComplete",
        type: {
          name: "Number"
        }
      }
    }
  }
};

export const PrivateLinkServiceConnectionState: msRest.CompositeMapper = {
  serializedName: "PrivateLinkServiceConnectionState",
  type: {
    name: "Composite",
    className: "PrivateLinkServiceConnectionState",
    modelProperties: {
      status: {
        serializedName: "status",
        type: {
          name: "String"
        }
      },
      description: {
        serializedName: "description",
        type: {
          name: "String"
        }
      },
      actionsRequired: {
        readOnly: true,
        serializedName: "actionsRequired",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const PrivateEndpoint: msRest.CompositeMapper = {
  serializedName: "PrivateEndpoint",
  type: {
    name: "Composite",
    className: "PrivateEndpoint",
    modelProperties: {
      id: {
        readOnly: true,
        serializedName: "id",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const PrivateEndpointConnection: msRest.CompositeMapper = {
  serializedName: "PrivateEndpointConnection",
  type: {
    name: "Composite",
    className: "PrivateEndpointConnection",
    modelProperties: {
      ...ProxyResource.type.modelProperties,
      privateEndpoint: {
        serializedName: "properties.privateEndpoint",
        type: {
          name: "Composite",
          className: "PrivateEndpoint"
        }
      },
      privateLinkServiceConnectionState: {
        serializedName: "properties.privateLinkServiceConnectionState",
        type: {
          name: "Composite",
          className: "PrivateLinkServiceConnectionState"
        }
      },
      provisioningState: {
        readOnly: true,
        serializedName: "properties.provisioningState",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const PrivateLinkResourceProperties: msRest.CompositeMapper = {
  serializedName: "PrivateLinkResourceProperties",
  type: {
    name: "Composite",
    className: "PrivateLinkResourceProperties",
    modelProperties: {
      groupId: {
        readOnly: true,
        serializedName: "groupId",
        type: {
          name: "String"
        }
      },
      requiredMembers: {
        readOnly: true,
        serializedName: "requiredMembers",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "String"
            }
          }
        }
      },
      requiredZoneNames: {
        readOnly: true,
        serializedName: "requiredZoneNames",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "String"
            }
          }
        }
      }
    }
  }
};

export const PrivateLinkResource: msRest.CompositeMapper = {
  serializedName: "PrivateLinkResource",
  type: {
    name: "Composite",
    className: "PrivateLinkResource",
    modelProperties: {
      ...ProxyResource.type.modelProperties,
      properties: {
        readOnly: true,
        serializedName: "properties",
        type: {
          name: "Composite",
          className: "PrivateLinkResourceProperties"
        }
      }
    }
  }
};

export const PrivateEndpointConnectionForPrivateLinkHubBasic: msRest.CompositeMapper = {
  serializedName: "PrivateEndpointConnectionForPrivateLinkHubBasic",
  type: {
    name: "Composite",
    className: "PrivateEndpointConnectionForPrivateLinkHubBasic",
    modelProperties: {
      id: {
        readOnly: true,
        serializedName: "id",
        type: {
          name: "String"
        }
      },
      privateEndpoint: {
        serializedName: "properties.privateEndpoint",
        type: {
          name: "Composite",
          className: "PrivateEndpoint"
        }
      },
      privateLinkServiceConnectionState: {
        serializedName: "properties.privateLinkServiceConnectionState",
        type: {
          name: "Composite",
          className: "PrivateLinkServiceConnectionState"
        }
      },
      provisioningState: {
        readOnly: true,
        serializedName: "properties.provisioningState",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const PrivateLinkHub: msRest.CompositeMapper = {
  serializedName: "PrivateLinkHub",
  type: {
    name: "Composite",
    className: "PrivateLinkHub",
    modelProperties: {
      ...TrackedResource.type.modelProperties,
      provisioningState: {
        serializedName: "properties.provisioningState",
        type: {
          name: "String"
        }
      },
      privateEndpointConnections: {
        readOnly: true,
        serializedName: "properties.privateEndpointConnections",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "PrivateEndpointConnectionForPrivateLinkHubBasic"
            }
          }
        }
      }
    }
  }
};

export const PrivateLinkHubPatchInfo: msRest.CompositeMapper = {
  serializedName: "PrivateLinkHubPatchInfo",
  type: {
    name: "Composite",
    className: "PrivateLinkHubPatchInfo",
    modelProperties: {
      tags: {
        serializedName: "tags",
        type: {
          name: "Dictionary",
          value: {
            type: {
              name: "String"
            }
          }
        }
      }
    }
  }
};

export const PrivateEndpointConnectionForPrivateLinkHub: msRest.CompositeMapper = {
  serializedName: "PrivateEndpointConnectionForPrivateLinkHub",
  type: {
    name: "Composite",
    className: "PrivateEndpointConnectionForPrivateLinkHub",
    modelProperties: {
      ...PrivateEndpointConnectionForPrivateLinkHubBasic.type.modelProperties,
      name: {
        serializedName: "name",
        type: {
          name: "String"
        }
      },
      type: {
        serializedName: "type",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const Sku: msRest.CompositeMapper = {
  serializedName: "Sku",
  type: {
    name: "Composite",
    className: "Sku",
    modelProperties: {
      tier: {
        serializedName: "tier",
        type: {
          name: "String"
        }
      },
      name: {
        serializedName: "name",
        type: {
          name: "String"
        }
      },
      capacity: {
        serializedName: "capacity",
        type: {
          name: "Number"
        }
      }
    }
  }
};

export const SqlPool: msRest.CompositeMapper = {
  serializedName: "SqlPool",
  type: {
    name: "Composite",
    className: "SqlPool",
    modelProperties: {
      ...TrackedResource.type.modelProperties,
      sku: {
        serializedName: "sku",
        type: {
          name: "Composite",
          className: "Sku"
        }
      },
      maxSizeBytes: {
        serializedName: "properties.maxSizeBytes",
        type: {
          name: "Number"
        }
      },
      collation: {
        serializedName: "properties.collation",
        type: {
          name: "String"
        }
      },
      sourceDatabaseId: {
        serializedName: "properties.sourceDatabaseId",
        type: {
          name: "String"
        }
      },
      recoverableDatabaseId: {
        serializedName: "properties.recoverableDatabaseId",
        type: {
          name: "String"
        }
      },
      provisioningState: {
        serializedName: "properties.provisioningState",
        type: {
          name: "String"
        }
      },
      status: {
        serializedName: "properties.status",
        type: {
          name: "String"
        }
      },
      restorePointInTime: {
        serializedName: "properties.restorePointInTime",
        type: {
          name: "DateTime"
        }
      },
      createMode: {
        serializedName: "properties.createMode",
        type: {
          name: "String"
        }
      },
      creationDate: {
        serializedName: "properties.creationDate",
        type: {
          name: "DateTime"
        }
      },
      storageAccountType: {
        serializedName: "properties.storageAccountType",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const SqlPoolPatchInfo: msRest.CompositeMapper = {
  serializedName: "SqlPoolPatchInfo",
  type: {
    name: "Composite",
    className: "SqlPoolPatchInfo",
    modelProperties: {
      tags: {
        serializedName: "tags",
        type: {
          name: "Dictionary",
          value: {
            type: {
              name: "String"
            }
          }
        }
      },
      location: {
        serializedName: "location",
        type: {
          name: "String"
        }
      },
      sku: {
        serializedName: "sku",
        type: {
          name: "Composite",
          className: "Sku"
        }
      },
      maxSizeBytes: {
        serializedName: "properties.maxSizeBytes",
        type: {
          name: "Number"
        }
      },
      collation: {
        serializedName: "properties.collation",
        type: {
          name: "String"
        }
      },
      sourceDatabaseId: {
        serializedName: "properties.sourceDatabaseId",
        type: {
          name: "String"
        }
      },
      recoverableDatabaseId: {
        serializedName: "properties.recoverableDatabaseId",
        type: {
          name: "String"
        }
      },
      provisioningState: {
        serializedName: "properties.provisioningState",
        type: {
          name: "String"
        }
      },
      status: {
        serializedName: "properties.status",
        type: {
          name: "String"
        }
      },
      restorePointInTime: {
        serializedName: "properties.restorePointInTime",
        type: {
          name: "DateTime"
        }
      },
      createMode: {
        serializedName: "properties.createMode",
        type: {
          name: "String"
        }
      },
      creationDate: {
        serializedName: "properties.creationDate",
        type: {
          name: "DateTime"
        }
      },
      storageAccountType: {
        serializedName: "properties.storageAccountType",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const MetadataSyncConfig: msRest.CompositeMapper = {
  serializedName: "MetadataSyncConfig",
  type: {
    name: "Composite",
    className: "MetadataSyncConfig",
    modelProperties: {
      enabled: {
        serializedName: "properties.enabled",
        type: {
          name: "Boolean"
        }
      },
      syncIntervalInMinutes: {
        serializedName: "properties.syncIntervalInMinutes",
        type: {
          name: "Number"
        }
      }
    }
  }
};

export const GeoBackupPolicy: msRest.CompositeMapper = {
  serializedName: "GeoBackupPolicy",
  type: {
    name: "Composite",
    className: "GeoBackupPolicy",
    modelProperties: {
      ...ProxyResource.type.modelProperties,
      state: {
        required: true,
        serializedName: "properties.state",
        type: {
          name: "Enum",
          allowedValues: [
            "Disabled",
            "Enabled"
          ]
        }
      },
      storageType: {
        readOnly: true,
        serializedName: "properties.storageType",
        type: {
          name: "String"
        }
      },
      kind: {
        readOnly: true,
        serializedName: "kind",
        type: {
          name: "String"
        }
      },
      location: {
        readOnly: true,
        serializedName: "location",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const QueryMetric: msRest.CompositeMapper = {
  serializedName: "QueryMetric",
  type: {
    name: "Composite",
    className: "QueryMetric",
    modelProperties: {
      name: {
        readOnly: true,
        serializedName: "name",
        type: {
          name: "String"
        }
      },
      displayName: {
        readOnly: true,
        serializedName: "displayName",
        type: {
          name: "String"
        }
      },
      unit: {
        readOnly: true,
        serializedName: "unit",
        type: {
          name: "Enum",
          allowedValues: [
            "percentage",
            "KB",
            "microseconds"
          ]
        }
      },
      value: {
        readOnly: true,
        serializedName: "value",
        type: {
          name: "Number"
        }
      }
    }
  }
};

export const QueryInterval: msRest.CompositeMapper = {
  serializedName: "QueryInterval",
  type: {
    name: "Composite",
    className: "QueryInterval",
    modelProperties: {
      intervalStartTime: {
        readOnly: true,
        serializedName: "intervalStartTime",
        type: {
          name: "DateTime"
        }
      },
      executionCount: {
        readOnly: true,
        serializedName: "executionCount",
        type: {
          name: "Number"
        }
      },
      metrics: {
        readOnly: true,
        serializedName: "metrics",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "QueryMetric"
            }
          }
        }
      }
    }
  }
};

export const QueryStatistic: msRest.CompositeMapper = {
  serializedName: "QueryStatistic",
  type: {
    name: "Composite",
    className: "QueryStatistic",
    modelProperties: {
      queryId: {
        readOnly: true,
        serializedName: "queryId",
        type: {
          name: "String"
        }
      },
      intervals: {
        readOnly: true,
        serializedName: "intervals",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "QueryInterval"
            }
          }
        }
      }
    }
  }
};

export const TopQueries: msRest.CompositeMapper = {
  serializedName: "TopQueries",
  type: {
    name: "Composite",
    className: "TopQueries",
    modelProperties: {
      aggregationFunction: {
        readOnly: true,
        serializedName: "aggregationFunction",
        type: {
          name: "Enum",
          allowedValues: [
            "min",
            "max",
            "avg",
            "sum"
          ]
        }
      },
      executionType: {
        readOnly: true,
        serializedName: "executionType",
        type: {
          name: "Enum",
          allowedValues: [
            "any",
            "regular",
            "irregular",
            "aborted",
            "exception"
          ]
        }
      },
      intervalType: {
        readOnly: true,
        serializedName: "intervalType",
        type: {
          name: "String"
        }
      },
      numberOfTopQueries: {
        readOnly: true,
        serializedName: "numberOfTopQueries",
        type: {
          name: "Number"
        }
      },
      observationStartTime: {
        readOnly: true,
        serializedName: "observationStartTime",
        type: {
          name: "DateTime"
        }
      },
      observationEndTime: {
        readOnly: true,
        serializedName: "observationEndTime",
        type: {
          name: "DateTime"
        }
      },
      observedMetric: {
        readOnly: true,
        serializedName: "observedMetric",
        type: {
          name: "Enum",
          allowedValues: [
            "cpu",
            "io",
            "logio",
            "duration",
            "executionCount"
          ]
        }
      },
      queries: {
        readOnly: true,
        serializedName: "queries",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "QueryStatistic"
            }
          }
        }
      }
    }
  }
};

export const TopQueriesListResult: msRest.CompositeMapper = {
  serializedName: "TopQueriesListResult",
  type: {
    name: "Composite",
    className: "TopQueriesListResult",
    modelProperties: {
      value: {
        required: true,
        serializedName: "value",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "TopQueries"
            }
          }
        }
      }
    }
  }
};

export const DataWarehouseUserActivities: msRest.CompositeMapper = {
  serializedName: "DataWarehouseUserActivities",
  type: {
    name: "Composite",
    className: "DataWarehouseUserActivities",
    modelProperties: {
      ...ProxyResource.type.modelProperties,
      activeQueriesCount: {
        readOnly: true,
        serializedName: "properties.activeQueriesCount",
        type: {
          name: "Number"
        }
      }
    }
  }
};

export const RestorePoint: msRest.CompositeMapper = {
  serializedName: "RestorePoint",
  type: {
    name: "Composite",
    className: "RestorePoint",
    modelProperties: {
      ...ProxyResource.type.modelProperties,
      location: {
        readOnly: true,
        serializedName: "location",
        type: {
          name: "String"
        }
      },
      restorePointType: {
        readOnly: true,
        serializedName: "properties.restorePointType",
        type: {
          name: "Enum",
          allowedValues: [
            "CONTINUOUS",
            "DISCRETE"
          ]
        }
      },
      earliestRestoreDate: {
        readOnly: true,
        serializedName: "properties.earliestRestoreDate",
        type: {
          name: "DateTime"
        }
      },
      restorePointCreationDate: {
        readOnly: true,
        serializedName: "properties.restorePointCreationDate",
        type: {
          name: "DateTime"
        }
      },
      restorePointLabel: {
        readOnly: true,
        serializedName: "properties.restorePointLabel",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const ReplicationLink: msRest.CompositeMapper = {
  serializedName: "ReplicationLink",
  type: {
    name: "Composite",
    className: "ReplicationLink",
    modelProperties: {
      ...ProxyResource.type.modelProperties,
      location: {
        readOnly: true,
        serializedName: "location",
        type: {
          name: "String"
        }
      },
      isTerminationAllowed: {
        readOnly: true,
        serializedName: "properties.isTerminationAllowed",
        type: {
          name: "Boolean"
        }
      },
      replicationMode: {
        readOnly: true,
        serializedName: "properties.replicationMode",
        type: {
          name: "String"
        }
      },
      partnerServer: {
        readOnly: true,
        serializedName: "properties.partnerServer",
        type: {
          name: "String"
        }
      },
      partnerDatabase: {
        readOnly: true,
        serializedName: "properties.partnerDatabase",
        type: {
          name: "String"
        }
      },
      partnerLocation: {
        readOnly: true,
        serializedName: "properties.partnerLocation",
        type: {
          name: "String"
        }
      },
      role: {
        readOnly: true,
        serializedName: "properties.role",
        type: {
          name: "Enum",
          allowedValues: [
            "Primary",
            "Secondary",
            "NonReadableSecondary",
            "Source",
            "Copy"
          ]
        }
      },
      partnerRole: {
        readOnly: true,
        serializedName: "properties.partnerRole",
        type: {
          name: "Enum",
          allowedValues: [
            "Primary",
            "Secondary",
            "NonReadableSecondary",
            "Source",
            "Copy"
          ]
        }
      },
      startTime: {
        readOnly: true,
        serializedName: "properties.startTime",
        type: {
          name: "DateTime"
        }
      },
      percentComplete: {
        readOnly: true,
        serializedName: "properties.percentComplete",
        type: {
          name: "Number"
        }
      },
      replicationState: {
        readOnly: true,
        serializedName: "properties.replicationState",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const MaintenanceWindowTimeRange: msRest.CompositeMapper = {
  serializedName: "MaintenanceWindowTimeRange",
  type: {
    name: "Composite",
    className: "MaintenanceWindowTimeRange",
    modelProperties: {
      dayOfWeek: {
        serializedName: "dayOfWeek",
        type: {
          name: "String"
        }
      },
      startTime: {
        serializedName: "startTime",
        type: {
          name: "String"
        }
      },
      duration: {
        serializedName: "duration",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const MaintenanceWindowOptions: msRest.CompositeMapper = {
  serializedName: "MaintenanceWindowOptions",
  type: {
    name: "Composite",
    className: "MaintenanceWindowOptions",
    modelProperties: {
      ...ProxyResource.type.modelProperties,
      isEnabled: {
        serializedName: "properties.isEnabled",
        type: {
          name: "Boolean"
        }
      },
      maintenanceWindowCycles: {
        serializedName: "properties.maintenanceWindowCycles",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "MaintenanceWindowTimeRange"
            }
          }
        }
      },
      minDurationInMinutes: {
        serializedName: "properties.minDurationInMinutes",
        type: {
          name: "Number"
        }
      },
      defaultDurationInMinutes: {
        serializedName: "properties.defaultDurationInMinutes",
        type: {
          name: "Number"
        }
      },
      minCycles: {
        serializedName: "properties.minCycles",
        type: {
          name: "Number"
        }
      },
      timeGranularityInMinutes: {
        serializedName: "properties.timeGranularityInMinutes",
        type: {
          name: "Number"
        }
      },
      allowMultipleMaintenanceWindowsPerCycle: {
        serializedName: "properties.allowMultipleMaintenanceWindowsPerCycle",
        type: {
          name: "Boolean"
        }
      }
    }
  }
};

export const MaintenanceWindows: msRest.CompositeMapper = {
  serializedName: "MaintenanceWindows",
  type: {
    name: "Composite",
    className: "MaintenanceWindows",
    modelProperties: {
      ...ProxyResource.type.modelProperties,
      timeRanges: {
        serializedName: "properties.timeRanges",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "MaintenanceWindowTimeRange"
            }
          }
        }
      }
    }
  }
};

export const TransparentDataEncryption: msRest.CompositeMapper = {
  serializedName: "TransparentDataEncryption",
  type: {
    name: "Composite",
    className: "TransparentDataEncryption",
    modelProperties: {
      ...ProxyResource.type.modelProperties,
      location: {
        readOnly: true,
        serializedName: "location",
        type: {
          name: "String"
        }
      },
      status: {
        serializedName: "properties.status",
        type: {
          name: "Enum",
          allowedValues: [
            "Enabled",
            "Disabled"
          ]
        }
      }
    }
  }
};

export const SqlPoolBlobAuditingPolicy: msRest.CompositeMapper = {
  serializedName: "SqlPoolBlobAuditingPolicy",
  type: {
    name: "Composite",
    className: "SqlPoolBlobAuditingPolicy",
    modelProperties: {
      ...ProxyResource.type.modelProperties,
      kind: {
        readOnly: true,
        serializedName: "kind",
        type: {
          name: "String"
        }
      },
      state: {
        required: true,
        serializedName: "properties.state",
        type: {
          name: "Enum",
          allowedValues: [
            "Enabled",
            "Disabled"
          ]
        }
      },
      storageEndpoint: {
        serializedName: "properties.storageEndpoint",
        type: {
          name: "String"
        }
      },
      storageAccountAccessKey: {
        serializedName: "properties.storageAccountAccessKey",
        type: {
          name: "String"
        }
      },
      retentionDays: {
        serializedName: "properties.retentionDays",
        type: {
          name: "Number"
        }
      },
      auditActionsAndGroups: {
        serializedName: "properties.auditActionsAndGroups",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "String"
            }
          }
        }
      },
      storageAccountSubscriptionId: {
        serializedName: "properties.storageAccountSubscriptionId",
        type: {
          name: "Uuid"
        }
      },
      isStorageSecondaryKeyInUse: {
        serializedName: "properties.isStorageSecondaryKeyInUse",
        type: {
          name: "Boolean"
        }
      },
      isAzureMonitorTargetEnabled: {
        serializedName: "properties.isAzureMonitorTargetEnabled",
        type: {
          name: "Boolean"
        }
      }
    }
  }
};

export const SqlPoolOperation: msRest.CompositeMapper = {
  serializedName: "SqlPoolOperation",
  type: {
    name: "Composite",
    className: "SqlPoolOperation",
    modelProperties: {
      ...ProxyResource.type.modelProperties,
      databaseName: {
        readOnly: true,
        serializedName: "properties.databaseName",
        type: {
          name: "String"
        }
      },
      operation: {
        readOnly: true,
        serializedName: "properties.operation",
        type: {
          name: "String"
        }
      },
      operationFriendlyName: {
        readOnly: true,
        serializedName: "properties.operationFriendlyName",
        type: {
          name: "String"
        }
      },
      percentComplete: {
        readOnly: true,
        serializedName: "properties.percentComplete",
        type: {
          name: "Number"
        }
      },
      serverName: {
        readOnly: true,
        serializedName: "properties.serverName",
        type: {
          name: "String"
        }
      },
      startTime: {
        readOnly: true,
        serializedName: "properties.startTime",
        type: {
          name: "DateTime"
        }
      },
      state: {
        readOnly: true,
        serializedName: "properties.state",
        type: {
          name: "String"
        }
      },
      errorCode: {
        readOnly: true,
        serializedName: "properties.errorCode",
        type: {
          name: "Number"
        }
      },
      errorDescription: {
        readOnly: true,
        serializedName: "properties.errorDescription",
        type: {
          name: "String"
        }
      },
      errorSeverity: {
        readOnly: true,
        serializedName: "properties.errorSeverity",
        type: {
          name: "Number"
        }
      },
      isUserError: {
        readOnly: true,
        serializedName: "properties.isUserError",
        type: {
          name: "Boolean"
        }
      },
      estimatedCompletionTime: {
        readOnly: true,
        serializedName: "properties.estimatedCompletionTime",
        type: {
          name: "DateTime"
        }
      },
      description: {
        readOnly: true,
        serializedName: "properties.description",
        type: {
          name: "String"
        }
      },
      isCancellable: {
        readOnly: true,
        serializedName: "properties.isCancellable",
        type: {
          name: "Boolean"
        }
      }
    }
  }
};

export const SqlPoolUsage: msRest.CompositeMapper = {
  serializedName: "SqlPoolUsage",
  type: {
    name: "Composite",
    className: "SqlPoolUsage",
    modelProperties: {
      name: {
        readOnly: true,
        serializedName: "name",
        type: {
          name: "String"
        }
      },
      resourceName: {
        readOnly: true,
        serializedName: "resourceName",
        type: {
          name: "String"
        }
      },
      displayName: {
        readOnly: true,
        serializedName: "displayName",
        type: {
          name: "String"
        }
      },
      currentValue: {
        readOnly: true,
        serializedName: "currentValue",
        type: {
          name: "Number"
        }
      },
      limit: {
        readOnly: true,
        serializedName: "limit",
        type: {
          name: "Number"
        }
      },
      unit: {
        readOnly: true,
        serializedName: "unit",
        type: {
          name: "String"
        }
      },
      nextResetTime: {
        readOnly: true,
        serializedName: "nextResetTime",
        type: {
          name: "DateTime"
        }
      }
    }
  }
};

export const SensitivityLabel: msRest.CompositeMapper = {
  serializedName: "SensitivityLabel",
  type: {
    name: "Composite",
    className: "SensitivityLabel",
    modelProperties: {
      ...ProxyResource.type.modelProperties,
      schemaName: {
        readOnly: true,
        serializedName: "properties.schemaName",
        type: {
          name: "String"
        }
      },
      tableName: {
        readOnly: true,
        serializedName: "properties.tableName",
        type: {
          name: "String"
        }
      },
      columnName: {
        readOnly: true,
        serializedName: "properties.columnName",
        type: {
          name: "String"
        }
      },
      labelName: {
        serializedName: "properties.labelName",
        type: {
          name: "String"
        }
      },
      labelId: {
        serializedName: "properties.labelId",
        type: {
          name: "String"
        }
      },
      informationType: {
        serializedName: "properties.informationType",
        type: {
          name: "String"
        }
      },
      informationTypeId: {
        serializedName: "properties.informationTypeId",
        type: {
          name: "String"
        }
      },
      isDisabled: {
        readOnly: true,
        serializedName: "properties.isDisabled",
        type: {
          name: "Boolean"
        }
      },
      rank: {
        serializedName: "properties.rank",
        type: {
          name: "Enum",
          allowedValues: [
            "None",
            "Low",
            "Medium",
            "High",
            "Critical"
          ]
        }
      },
      managedBy: {
        readOnly: true,
        serializedName: "managedBy",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const SqlPoolSchema: msRest.CompositeMapper = {
  serializedName: "SqlPoolSchema",
  type: {
    name: "Composite",
    className: "SqlPoolSchema",
    modelProperties: {
      ...ProxyResource.type.modelProperties
    }
  }
};

export const SqlPoolTable: msRest.CompositeMapper = {
  serializedName: "SqlPoolTable",
  type: {
    name: "Composite",
    className: "SqlPoolTable",
    modelProperties: {
      ...ProxyResource.type.modelProperties
    }
  }
};

export const SqlPoolColumn: msRest.CompositeMapper = {
  serializedName: "SqlPoolColumn",
  type: {
    name: "Composite",
    className: "SqlPoolColumn",
    modelProperties: {
      ...ProxyResource.type.modelProperties,
      columnType: {
        serializedName: "properties.columnType",
        type: {
          name: "String"
        }
      },
      isComputed: {
        readOnly: true,
        serializedName: "properties.isComputed",
        type: {
          name: "Boolean"
        }
      }
    }
  }
};

export const SqlPoolConnectionPolicy: msRest.CompositeMapper = {
  serializedName: "SqlPoolConnectionPolicy",
  type: {
    name: "Composite",
    className: "SqlPoolConnectionPolicy",
    modelProperties: {
      ...ProxyResource.type.modelProperties,
      kind: {
        readOnly: true,
        serializedName: "kind",
        type: {
          name: "String"
        }
      },
      location: {
        readOnly: true,
        serializedName: "location",
        type: {
          name: "String"
        }
      },
      securityEnabledAccess: {
        serializedName: "properties.securityEnabledAccess",
        type: {
          name: "String"
        }
      },
      proxyDnsName: {
        serializedName: "properties.proxyDnsName",
        type: {
          name: "String"
        }
      },
      proxyPort: {
        serializedName: "properties.proxyPort",
        type: {
          name: "String"
        }
      },
      visibility: {
        serializedName: "properties.visibility",
        type: {
          name: "String"
        }
      },
      useServerDefault: {
        serializedName: "properties.useServerDefault",
        type: {
          name: "String"
        }
      },
      redirectionState: {
        serializedName: "properties.redirectionState",
        type: {
          name: "String"
        }
      },
      state: {
        serializedName: "properties.state",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const VulnerabilityAssessmentRecurringScansProperties: msRest.CompositeMapper = {
  serializedName: "VulnerabilityAssessmentRecurringScansProperties",
  type: {
    name: "Composite",
    className: "VulnerabilityAssessmentRecurringScansProperties",
    modelProperties: {
      isEnabled: {
        serializedName: "isEnabled",
        type: {
          name: "Boolean"
        }
      },
      emailSubscriptionAdmins: {
        serializedName: "emailSubscriptionAdmins",
        defaultValue: true,
        type: {
          name: "Boolean"
        }
      },
      emails: {
        serializedName: "emails",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "String"
            }
          }
        }
      }
    }
  }
};

export const SqlPoolVulnerabilityAssessment: msRest.CompositeMapper = {
  serializedName: "SqlPoolVulnerabilityAssessment",
  type: {
    name: "Composite",
    className: "SqlPoolVulnerabilityAssessment",
    modelProperties: {
      ...ProxyResource.type.modelProperties,
      storageContainerPath: {
        serializedName: "properties.storageContainerPath",
        type: {
          name: "String"
        }
      },
      storageContainerSasKey: {
        serializedName: "properties.storageContainerSasKey",
        type: {
          name: "String"
        }
      },
      storageAccountAccessKey: {
        serializedName: "properties.storageAccountAccessKey",
        type: {
          name: "String"
        }
      },
      recurringScans: {
        serializedName: "properties.recurringScans",
        type: {
          name: "Composite",
          className: "VulnerabilityAssessmentRecurringScansProperties"
        }
      }
    }
  }
};

export const VulnerabilityAssessmentScanError: msRest.CompositeMapper = {
  serializedName: "VulnerabilityAssessmentScanError",
  type: {
    name: "Composite",
    className: "VulnerabilityAssessmentScanError",
    modelProperties: {
      code: {
        readOnly: true,
        serializedName: "code",
        type: {
          name: "String"
        }
      },
      message: {
        readOnly: true,
        serializedName: "message",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const VulnerabilityAssessmentScanRecord: msRest.CompositeMapper = {
  serializedName: "VulnerabilityAssessmentScanRecord",
  type: {
    name: "Composite",
    className: "VulnerabilityAssessmentScanRecord",
    modelProperties: {
      ...ProxyResource.type.modelProperties,
      scanId: {
        readOnly: true,
        serializedName: "properties.scanId",
        type: {
          name: "String"
        }
      },
      triggerType: {
        readOnly: true,
        serializedName: "properties.triggerType",
        type: {
          name: "String"
        }
      },
      state: {
        readOnly: true,
        serializedName: "properties.state",
        type: {
          name: "String"
        }
      },
      startTime: {
        readOnly: true,
        serializedName: "properties.startTime",
        type: {
          name: "DateTime"
        }
      },
      endTime: {
        readOnly: true,
        serializedName: "properties.endTime",
        type: {
          name: "DateTime"
        }
      },
      errors: {
        readOnly: true,
        serializedName: "properties.errors",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "VulnerabilityAssessmentScanError"
            }
          }
        }
      },
      storageContainerPath: {
        readOnly: true,
        serializedName: "properties.storageContainerPath",
        type: {
          name: "String"
        }
      },
      numberOfFailedSecurityChecks: {
        readOnly: true,
        serializedName: "properties.numberOfFailedSecurityChecks",
        type: {
          name: "Number"
        }
      }
    }
  }
};

export const SqlPoolSecurityAlertPolicy: msRest.CompositeMapper = {
  serializedName: "SqlPoolSecurityAlertPolicy",
  type: {
    name: "Composite",
    className: "SqlPoolSecurityAlertPolicy",
    modelProperties: {
      ...ProxyResource.type.modelProperties,
      state: {
        required: true,
        serializedName: "properties.state",
        type: {
          name: "Enum",
          allowedValues: [
            "New",
            "Enabled",
            "Disabled"
          ]
        }
      },
      disabledAlerts: {
        serializedName: "properties.disabledAlerts",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "String"
            }
          }
        }
      },
      emailAddresses: {
        serializedName: "properties.emailAddresses",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "String"
            }
          }
        }
      },
      emailAccountAdmins: {
        serializedName: "properties.emailAccountAdmins",
        type: {
          name: "Boolean"
        }
      },
      storageEndpoint: {
        serializedName: "properties.storageEndpoint",
        type: {
          name: "String"
        }
      },
      storageAccountAccessKey: {
        serializedName: "properties.storageAccountAccessKey",
        type: {
          name: "String"
        }
      },
      retentionDays: {
        serializedName: "properties.retentionDays",
        type: {
          name: "Number"
        }
      },
      creationTime: {
        readOnly: true,
        serializedName: "properties.creationTime",
        type: {
          name: "DateTime"
        }
      }
    }
  }
};

export const SqlPoolVulnerabilityAssessmentRuleBaselineItem: msRest.CompositeMapper = {
  serializedName: "SqlPoolVulnerabilityAssessmentRuleBaselineItem",
  type: {
    name: "Composite",
    className: "SqlPoolVulnerabilityAssessmentRuleBaselineItem",
    modelProperties: {
      result: {
        required: true,
        serializedName: "result",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "String"
            }
          }
        }
      }
    }
  }
};

export const SqlPoolVulnerabilityAssessmentRuleBaseline: msRest.CompositeMapper = {
  serializedName: "SqlPoolVulnerabilityAssessmentRuleBaseline",
  type: {
    name: "Composite",
    className: "SqlPoolVulnerabilityAssessmentRuleBaseline",
    modelProperties: {
      ...ProxyResource.type.modelProperties,
      baselineResults: {
        required: true,
        serializedName: "properties.baselineResults",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "SqlPoolVulnerabilityAssessmentRuleBaselineItem"
            }
          }
        }
      }
    }
  }
};

export const SqlPoolVulnerabilityAssessmentScansExport: msRest.CompositeMapper = {
  serializedName: "SqlPoolVulnerabilityAssessmentScansExport",
  type: {
    name: "Composite",
    className: "SqlPoolVulnerabilityAssessmentScansExport",
    modelProperties: {
      ...ProxyResource.type.modelProperties,
      exportedReportLocation: {
        readOnly: true,
        serializedName: "properties.exportedReportLocation",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const ResourceMoveDefinition: msRest.CompositeMapper = {
  serializedName: "ResourceMoveDefinition",
  type: {
    name: "Composite",
    className: "ResourceMoveDefinition",
    modelProperties: {
      id: {
        required: true,
        serializedName: "id",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const CreateSqlPoolRestorePointDefinition: msRest.CompositeMapper = {
  serializedName: "CreateSqlPoolRestorePointDefinition",
  type: {
    name: "Composite",
    className: "CreateSqlPoolRestorePointDefinition",
    modelProperties: {
      restorePointLabel: {
        required: true,
        serializedName: "restorePointLabel",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const WorkloadGroup: msRest.CompositeMapper = {
  serializedName: "WorkloadGroup",
  type: {
    name: "Composite",
    className: "WorkloadGroup",
    modelProperties: {
      ...ProxyResource.type.modelProperties,
      minResourcePercent: {
        required: true,
        serializedName: "properties.minResourcePercent",
        type: {
          name: "Number"
        }
      },
      maxResourcePercent: {
        required: true,
        serializedName: "properties.maxResourcePercent",
        type: {
          name: "Number"
        }
      },
      minResourcePercentPerRequest: {
        required: true,
        serializedName: "properties.minResourcePercentPerRequest",
        type: {
          name: "Number"
        }
      },
      maxResourcePercentPerRequest: {
        serializedName: "properties.maxResourcePercentPerRequest",
        type: {
          name: "Number"
        }
      },
      importance: {
        serializedName: "properties.importance",
        type: {
          name: "String"
        }
      },
      queryExecutionTimeout: {
        serializedName: "properties.queryExecutionTimeout",
        type: {
          name: "Number"
        }
      }
    }
  }
};

export const WorkloadClassifier: msRest.CompositeMapper = {
  serializedName: "WorkloadClassifier",
  type: {
    name: "Composite",
    className: "WorkloadClassifier",
    modelProperties: {
      ...ProxyResource.type.modelProperties,
      memberName: {
        required: true,
        serializedName: "properties.memberName",
        type: {
          name: "String"
        }
      },
      label: {
        serializedName: "properties.label",
        type: {
          name: "String"
        }
      },
      context: {
        serializedName: "properties.context",
        type: {
          name: "String"
        }
      },
      startTime: {
        serializedName: "properties.startTime",
        type: {
          name: "String"
        }
      },
      endTime: {
        serializedName: "properties.endTime",
        type: {
          name: "String"
        }
      },
      importance: {
        serializedName: "properties.importance",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const DataMaskingPolicy: msRest.CompositeMapper = {
  serializedName: "DataMaskingPolicy",
  type: {
    name: "Composite",
    className: "DataMaskingPolicy",
    modelProperties: {
      ...ProxyResource.type.modelProperties,
      dataMaskingState: {
        required: true,
        serializedName: "properties.dataMaskingState",
        type: {
          name: "Enum",
          allowedValues: [
            "Disabled",
            "Enabled"
          ]
        }
      },
      exemptPrincipals: {
        serializedName: "properties.exemptPrincipals",
        type: {
          name: "String"
        }
      },
      applicationPrincipals: {
        readOnly: true,
        serializedName: "properties.applicationPrincipals",
        type: {
          name: "String"
        }
      },
      maskingLevel: {
        readOnly: true,
        serializedName: "properties.maskingLevel",
        type: {
          name: "String"
        }
      },
      location: {
        readOnly: true,
        serializedName: "location",
        type: {
          name: "String"
        }
      },
      kind: {
        readOnly: true,
        serializedName: "kind",
        type: {
          name: "String"
        }
      },
      managedBy: {
        readOnly: true,
        serializedName: "managedBy",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const ExtendedSqlPoolBlobAuditingPolicy: msRest.CompositeMapper = {
  serializedName: "ExtendedSqlPoolBlobAuditingPolicy",
  type: {
    name: "Composite",
    className: "ExtendedSqlPoolBlobAuditingPolicy",
    modelProperties: {
      ...ProxyResource.type.modelProperties,
      predicateExpression: {
        serializedName: "properties.predicateExpression",
        type: {
          name: "String"
        }
      },
      state: {
        required: true,
        serializedName: "properties.state",
        type: {
          name: "Enum",
          allowedValues: [
            "Enabled",
            "Disabled"
          ]
        }
      },
      storageEndpoint: {
        serializedName: "properties.storageEndpoint",
        type: {
          name: "String"
        }
      },
      storageAccountAccessKey: {
        serializedName: "properties.storageAccountAccessKey",
        type: {
          name: "String"
        }
      },
      retentionDays: {
        serializedName: "properties.retentionDays",
        type: {
          name: "Number"
        }
      },
      auditActionsAndGroups: {
        serializedName: "properties.auditActionsAndGroups",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "String"
            }
          }
        }
      },
      storageAccountSubscriptionId: {
        serializedName: "properties.storageAccountSubscriptionId",
        type: {
          name: "Uuid"
        }
      },
      isStorageSecondaryKeyInUse: {
        serializedName: "properties.isStorageSecondaryKeyInUse",
        type: {
          name: "Boolean"
        }
      },
      isAzureMonitorTargetEnabled: {
        serializedName: "properties.isAzureMonitorTargetEnabled",
        type: {
          name: "Boolean"
        }
      },
      queueDelayMs: {
        serializedName: "properties.queueDelayMs",
        type: {
          name: "Number"
        }
      }
    }
  }
};

export const DataMaskingRule: msRest.CompositeMapper = {
  serializedName: "DataMaskingRule",
  type: {
    name: "Composite",
    className: "DataMaskingRule",
    modelProperties: {
      ...ProxyResource.type.modelProperties,
      dataMaskingRuleId: {
        readOnly: true,
        serializedName: "properties.id",
        type: {
          name: "String"
        }
      },
      aliasName: {
        serializedName: "properties.aliasName",
        type: {
          name: "String"
        }
      },
      ruleState: {
        serializedName: "properties.ruleState",
        type: {
          name: "Enum",
          allowedValues: [
            "Disabled",
            "Enabled"
          ]
        }
      },
      schemaName: {
        required: true,
        serializedName: "properties.schemaName",
        type: {
          name: "String"
        }
      },
      tableName: {
        required: true,
        serializedName: "properties.tableName",
        type: {
          name: "String"
        }
      },
      columnName: {
        required: true,
        serializedName: "properties.columnName",
        type: {
          name: "String"
        }
      },
      maskingFunction: {
        required: true,
        serializedName: "properties.maskingFunction",
        type: {
          name: "Enum",
          allowedValues: [
            "Default",
            "CCN",
            "Email",
            "Number",
            "SSN",
            "Text"
          ]
        }
      },
      numberFrom: {
        serializedName: "properties.numberFrom",
        type: {
          name: "String"
        }
      },
      numberTo: {
        serializedName: "properties.numberTo",
        type: {
          name: "String"
        }
      },
      prefixSize: {
        serializedName: "properties.prefixSize",
        type: {
          name: "String"
        }
      },
      suffixSize: {
        serializedName: "properties.suffixSize",
        type: {
          name: "String"
        }
      },
      replacementString: {
        serializedName: "properties.replacementString",
        type: {
          name: "String"
        }
      },
      location: {
        readOnly: true,
        serializedName: "location",
        type: {
          name: "String"
        }
      },
      kind: {
        readOnly: true,
        serializedName: "kind",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const SensitivityLabelUpdate: msRest.CompositeMapper = {
  serializedName: "SensitivityLabelUpdate",
  type: {
    name: "Composite",
    className: "SensitivityLabelUpdate",
    modelProperties: {
      ...ProxyResource.type.modelProperties,
      op: {
        required: true,
        serializedName: "properties.op",
        type: {
          name: "Enum",
          allowedValues: [
            "set",
            "remove"
          ]
        }
      },
      schema: {
        required: true,
        serializedName: "properties.schema",
        type: {
          name: "String"
        }
      },
      table: {
        required: true,
        serializedName: "properties.table",
        type: {
          name: "String"
        }
      },
      column: {
        required: true,
        serializedName: "properties.column",
        type: {
          name: "String"
        }
      },
      sensitivityLabel: {
        serializedName: "properties.sensitivityLabel",
        type: {
          name: "Composite",
          className: "SensitivityLabel"
        }
      }
    }
  }
};

export const SensitivityLabelUpdateList: msRest.CompositeMapper = {
  serializedName: "SensitivityLabelUpdateList",
  type: {
    name: "Composite",
    className: "SensitivityLabelUpdateList",
    modelProperties: {
      operations: {
        serializedName: "operations",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "SensitivityLabelUpdate"
            }
          }
        }
      }
    }
  }
};

export const RecommendedSensitivityLabelUpdate: msRest.CompositeMapper = {
  serializedName: "RecommendedSensitivityLabelUpdate",
  type: {
    name: "Composite",
    className: "RecommendedSensitivityLabelUpdate",
    modelProperties: {
      ...ProxyResource.type.modelProperties,
      op: {
        required: true,
        serializedName: "properties.op",
        type: {
          name: "Enum",
          allowedValues: [
            "enable",
            "disable"
          ]
        }
      },
      schema: {
        required: true,
        serializedName: "properties.schema",
        type: {
          name: "String"
        }
      },
      table: {
        required: true,
        serializedName: "properties.table",
        type: {
          name: "String"
        }
      },
      column: {
        required: true,
        serializedName: "properties.column",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const RecommendedSensitivityLabelUpdateList: msRest.CompositeMapper = {
  serializedName: "RecommendedSensitivityLabelUpdateList",
  type: {
    name: "Composite",
    className: "RecommendedSensitivityLabelUpdateList",
    modelProperties: {
      operations: {
        serializedName: "operations",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "RecommendedSensitivityLabelUpdate"
            }
          }
        }
      }
    }
  }
};

export const ServerBlobAuditingPolicy: msRest.CompositeMapper = {
  serializedName: "ServerBlobAuditingPolicy",
  type: {
    name: "Composite",
    className: "ServerBlobAuditingPolicy",
    modelProperties: {
      ...ProxyResource.type.modelProperties,
      state: {
        required: true,
        serializedName: "properties.state",
        type: {
          name: "Enum",
          allowedValues: [
            "Enabled",
            "Disabled"
          ]
        }
      },
      storageEndpoint: {
        serializedName: "properties.storageEndpoint",
        type: {
          name: "String"
        }
      },
      storageAccountAccessKey: {
        serializedName: "properties.storageAccountAccessKey",
        type: {
          name: "String"
        }
      },
      retentionDays: {
        serializedName: "properties.retentionDays",
        type: {
          name: "Number"
        }
      },
      auditActionsAndGroups: {
        serializedName: "properties.auditActionsAndGroups",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "String"
            }
          }
        }
      },
      storageAccountSubscriptionId: {
        serializedName: "properties.storageAccountSubscriptionId",
        type: {
          name: "Uuid"
        }
      },
      isStorageSecondaryKeyInUse: {
        serializedName: "properties.isStorageSecondaryKeyInUse",
        type: {
          name: "Boolean"
        }
      },
      isAzureMonitorTargetEnabled: {
        serializedName: "properties.isAzureMonitorTargetEnabled",
        type: {
          name: "Boolean"
        }
      },
      queueDelayMs: {
        serializedName: "properties.queueDelayMs",
        type: {
          name: "Number"
        }
      }
    }
  }
};

export const ExtendedServerBlobAuditingPolicy: msRest.CompositeMapper = {
  serializedName: "ExtendedServerBlobAuditingPolicy",
  type: {
    name: "Composite",
    className: "ExtendedServerBlobAuditingPolicy",
    modelProperties: {
      ...ProxyResource.type.modelProperties,
      predicateExpression: {
        serializedName: "properties.predicateExpression",
        type: {
          name: "String"
        }
      },
      state: {
        required: true,
        serializedName: "properties.state",
        type: {
          name: "Enum",
          allowedValues: [
            "Enabled",
            "Disabled"
          ]
        }
      },
      storageEndpoint: {
        serializedName: "properties.storageEndpoint",
        type: {
          name: "String"
        }
      },
      storageAccountAccessKey: {
        serializedName: "properties.storageAccountAccessKey",
        type: {
          name: "String"
        }
      },
      retentionDays: {
        serializedName: "properties.retentionDays",
        type: {
          name: "Number"
        }
      },
      auditActionsAndGroups: {
        serializedName: "properties.auditActionsAndGroups",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "String"
            }
          }
        }
      },
      storageAccountSubscriptionId: {
        serializedName: "properties.storageAccountSubscriptionId",
        type: {
          name: "Uuid"
        }
      },
      isStorageSecondaryKeyInUse: {
        serializedName: "properties.isStorageSecondaryKeyInUse",
        type: {
          name: "Boolean"
        }
      },
      isAzureMonitorTargetEnabled: {
        serializedName: "properties.isAzureMonitorTargetEnabled",
        type: {
          name: "Boolean"
        }
      },
      queueDelayMs: {
        serializedName: "properties.queueDelayMs",
        type: {
          name: "Number"
        }
      }
    }
  }
};

export const ServerSecurityAlertPolicy: msRest.CompositeMapper = {
  serializedName: "ServerSecurityAlertPolicy",
  type: {
    name: "Composite",
    className: "ServerSecurityAlertPolicy",
    modelProperties: {
      ...ProxyResource.type.modelProperties,
      state: {
        required: true,
        serializedName: "properties.state",
        type: {
          name: "Enum",
          allowedValues: [
            "New",
            "Enabled",
            "Disabled"
          ]
        }
      },
      disabledAlerts: {
        serializedName: "properties.disabledAlerts",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "String"
            }
          }
        }
      },
      emailAddresses: {
        serializedName: "properties.emailAddresses",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "String"
            }
          }
        }
      },
      emailAccountAdmins: {
        serializedName: "properties.emailAccountAdmins",
        type: {
          name: "Boolean"
        }
      },
      storageEndpoint: {
        serializedName: "properties.storageEndpoint",
        type: {
          name: "String"
        }
      },
      storageAccountAccessKey: {
        serializedName: "properties.storageAccountAccessKey",
        type: {
          name: "String"
        }
      },
      retentionDays: {
        serializedName: "properties.retentionDays",
        type: {
          name: "Number"
        }
      },
      creationTime: {
        readOnly: true,
        serializedName: "properties.creationTime",
        type: {
          name: "DateTime"
        }
      }
    }
  }
};

export const ServerVulnerabilityAssessment: msRest.CompositeMapper = {
  serializedName: "ServerVulnerabilityAssessment",
  type: {
    name: "Composite",
    className: "ServerVulnerabilityAssessment",
    modelProperties: {
      ...ProxyResource.type.modelProperties,
      storageContainerPath: {
        required: true,
        serializedName: "properties.storageContainerPath",
        type: {
          name: "String"
        }
      },
      storageContainerSasKey: {
        serializedName: "properties.storageContainerSasKey",
        type: {
          name: "String"
        }
      },
      storageAccountAccessKey: {
        serializedName: "properties.storageAccountAccessKey",
        type: {
          name: "String"
        }
      },
      recurringScans: {
        serializedName: "properties.recurringScans",
        type: {
          name: "Composite",
          className: "VulnerabilityAssessmentRecurringScansProperties"
        }
      }
    }
  }
};

export const EncryptionProtector: msRest.CompositeMapper = {
  serializedName: "EncryptionProtector",
  type: {
    name: "Composite",
    className: "EncryptionProtector",
    modelProperties: {
      ...ProxyResource.type.modelProperties,
      kind: {
        readOnly: true,
        serializedName: "kind",
        type: {
          name: "String"
        }
      },
      location: {
        readOnly: true,
        serializedName: "location",
        type: {
          name: "String"
        }
      },
      subregion: {
        readOnly: true,
        serializedName: "properties.subregion",
        type: {
          name: "String"
        }
      },
      serverKeyName: {
        serializedName: "properties.serverKeyName",
        type: {
          name: "String"
        }
      },
      serverKeyType: {
        required: true,
        serializedName: "properties.serverKeyType",
        type: {
          name: "String"
        }
      },
      uri: {
        readOnly: true,
        serializedName: "properties.uri",
        type: {
          name: "String"
        }
      },
      thumbprint: {
        readOnly: true,
        serializedName: "properties.thumbprint",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const ServerUsage: msRest.CompositeMapper = {
  serializedName: "ServerUsage",
  type: {
    name: "Composite",
    className: "ServerUsage",
    modelProperties: {
      name: {
        readOnly: true,
        serializedName: "name",
        type: {
          name: "String"
        }
      },
      resourceName: {
        readOnly: true,
        serializedName: "resourceName",
        type: {
          name: "String"
        }
      },
      displayName: {
        readOnly: true,
        serializedName: "displayName",
        type: {
          name: "String"
        }
      },
      currentValue: {
        readOnly: true,
        serializedName: "currentValue",
        type: {
          name: "Number"
        }
      },
      limit: {
        readOnly: true,
        serializedName: "limit",
        type: {
          name: "Number"
        }
      },
      unit: {
        readOnly: true,
        serializedName: "unit",
        type: {
          name: "String"
        }
      },
      nextResetTime: {
        readOnly: true,
        serializedName: "nextResetTime",
        type: {
          name: "DateTime"
        }
      }
    }
  }
};

export const RecoverableSqlPool: msRest.CompositeMapper = {
  serializedName: "RecoverableSqlPool",
  type: {
    name: "Composite",
    className: "RecoverableSqlPool",
    modelProperties: {
      ...ProxyResource.type.modelProperties,
      edition: {
        readOnly: true,
        serializedName: "properties.edition",
        type: {
          name: "String"
        }
      },
      serviceLevelObjective: {
        readOnly: true,
        serializedName: "properties.serviceLevelObjective",
        type: {
          name: "String"
        }
      },
      elasticPoolName: {
        readOnly: true,
        serializedName: "properties.elasticPoolName",
        type: {
          name: "String"
        }
      },
      lastAvailableBackupDate: {
        readOnly: true,
        serializedName: "properties.lastAvailableBackupDate",
        type: {
          name: "DateTime"
        }
      }
    }
  }
};

export const DataLakeStorageAccountDetails: msRest.CompositeMapper = {
  serializedName: "DataLakeStorageAccountDetails",
  type: {
    name: "Composite",
    className: "DataLakeStorageAccountDetails",
    modelProperties: {
      accountUrl: {
        serializedName: "accountUrl",
        type: {
          name: "String"
        }
      },
      filesystem: {
        serializedName: "filesystem",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const VirtualNetworkProfile: msRest.CompositeMapper = {
  serializedName: "VirtualNetworkProfile",
  type: {
    name: "Composite",
    className: "VirtualNetworkProfile",
    modelProperties: {
      computeSubnetId: {
        serializedName: "computeSubnetId",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const WorkspaceKeyDetails: msRest.CompositeMapper = {
  serializedName: "WorkspaceKeyDetails",
  type: {
    name: "Composite",
    className: "WorkspaceKeyDetails",
    modelProperties: {
      name: {
        serializedName: "name",
        type: {
          name: "String"
        }
      },
      keyVaultUrl: {
        serializedName: "keyVaultUrl",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const CustomerManagedKeyDetails: msRest.CompositeMapper = {
  serializedName: "CustomerManagedKeyDetails",
  type: {
    name: "Composite",
    className: "CustomerManagedKeyDetails",
    modelProperties: {
      status: {
        readOnly: true,
        serializedName: "status",
        type: {
          name: "String"
        }
      },
      key: {
        serializedName: "key",
        type: {
          name: "Composite",
          className: "WorkspaceKeyDetails"
        }
      }
    }
  }
};

export const EncryptionDetails: msRest.CompositeMapper = {
  serializedName: "EncryptionDetails",
  type: {
    name: "Composite",
    className: "EncryptionDetails",
    modelProperties: {
      doubleEncryptionEnabled: {
        readOnly: true,
        serializedName: "doubleEncryptionEnabled",
        type: {
          name: "Boolean"
        }
      },
      cmk: {
        serializedName: "cmk",
        type: {
          name: "Composite",
          className: "CustomerManagedKeyDetails"
        }
      }
    }
  }
};

export const ManagedVirtualNetworkSettings: msRest.CompositeMapper = {
  serializedName: "ManagedVirtualNetworkSettings",
  type: {
    name: "Composite",
    className: "ManagedVirtualNetworkSettings",
    modelProperties: {
      preventDataExfiltration: {
        serializedName: "preventDataExfiltration",
        type: {
          name: "Boolean"
        }
      },
      linkedAccessCheckOnTargetResource: {
        serializedName: "linkedAccessCheckOnTargetResource",
        type: {
          name: "Boolean"
        }
      },
      allowedAadTenantIdsForLinking: {
        serializedName: "allowedAadTenantIdsForLinking",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "String"
            }
          }
        }
      }
    }
  }
};

export const WorkspaceRepositoryConfiguration: msRest.CompositeMapper = {
  serializedName: "WorkspaceRepositoryConfiguration",
  type: {
    name: "Composite",
    className: "WorkspaceRepositoryConfiguration",
    modelProperties: {
      type: {
        serializedName: "type",
        type: {
          name: "String"
        }
      },
      hostName: {
        serializedName: "hostName",
        type: {
          name: "String"
        }
      },
      accountName: {
        serializedName: "accountName",
        type: {
          name: "String"
        }
      },
      projectName: {
        serializedName: "projectName",
        type: {
          name: "String"
        }
      },
      repositoryName: {
        serializedName: "repositoryName",
        type: {
          name: "String"
        }
      },
      collaborationBranch: {
        serializedName: "collaborationBranch",
        type: {
          name: "String"
        }
      },
      rootFolder: {
        serializedName: "rootFolder",
        type: {
          name: "String"
        }
      },
      lastCommitId: {
        serializedName: "lastCommitId",
        type: {
          name: "String"
        }
      },
      tenantId: {
        serializedName: "tenantId",
        type: {
          name: "Uuid"
        }
      }
    }
  }
};

export const PurviewConfiguration: msRest.CompositeMapper = {
  serializedName: "PurviewConfiguration",
  type: {
    name: "Composite",
    className: "PurviewConfiguration",
    modelProperties: {
      purviewResourceId: {
        serializedName: "purviewResourceId",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const ManagedIdentity: msRest.CompositeMapper = {
  serializedName: "ManagedIdentity",
  type: {
    name: "Composite",
    className: "ManagedIdentity",
    modelProperties: {
      principalId: {
        readOnly: true,
        serializedName: "principalId",
        type: {
          name: "String"
        }
      },
      tenantId: {
        readOnly: true,
        serializedName: "tenantId",
        type: {
          name: "Uuid"
        }
      },
      type: {
        serializedName: "type",
        type: {
          name: "Enum",
          allowedValues: [
            "None",
            "SystemAssigned"
          ]
        }
      }
    }
  }
};

export const Workspace: msRest.CompositeMapper = {
  serializedName: "Workspace",
  type: {
    name: "Composite",
    className: "Workspace",
    modelProperties: {
      ...TrackedResource.type.modelProperties,
      defaultDataLakeStorage: {
        serializedName: "properties.defaultDataLakeStorage",
        type: {
          name: "Composite",
          className: "DataLakeStorageAccountDetails"
        }
      },
      sqlAdministratorLoginPassword: {
        serializedName: "properties.sqlAdministratorLoginPassword",
        type: {
          name: "String"
        }
      },
      managedResourceGroupName: {
        serializedName: "properties.managedResourceGroupName",
        type: {
          name: "String"
        }
      },
      provisioningState: {
        readOnly: true,
        serializedName: "properties.provisioningState",
        type: {
          name: "String"
        }
      },
      sqlAdministratorLogin: {
        serializedName: "properties.sqlAdministratorLogin",
        type: {
          name: "String"
        }
      },
      virtualNetworkProfile: {
        serializedName: "properties.virtualNetworkProfile",
        type: {
          name: "Composite",
          className: "VirtualNetworkProfile"
        }
      },
      connectivityEndpoints: {
        serializedName: "properties.connectivityEndpoints",
        type: {
          name: "Dictionary",
          value: {
            type: {
              name: "String"
            }
          }
        }
      },
      managedVirtualNetwork: {
        serializedName: "properties.managedVirtualNetwork",
        type: {
          name: "String"
        }
      },
      privateEndpointConnections: {
        serializedName: "properties.privateEndpointConnections",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "PrivateEndpointConnection"
            }
          }
        }
      },
      encryption: {
        serializedName: "properties.encryption",
        type: {
          name: "Composite",
          className: "EncryptionDetails"
        }
      },
      workspaceUID: {
        readOnly: true,
        serializedName: "properties.workspaceUID",
        type: {
          name: "Uuid"
        }
      },
      extraProperties: {
        readOnly: true,
        serializedName: "properties.extraProperties",
        type: {
          name: "Dictionary",
          value: {
            type: {
              name: "Object"
            }
          }
        }
      },
      managedVirtualNetworkSettings: {
        serializedName: "properties.managedVirtualNetworkSettings",
        type: {
          name: "Composite",
          className: "ManagedVirtualNetworkSettings"
        }
      },
      workspaceRepositoryConfiguration: {
        serializedName: "properties.workspaceRepositoryConfiguration",
        type: {
          name: "Composite",
          className: "WorkspaceRepositoryConfiguration"
        }
      },
      purviewConfiguration: {
        serializedName: "properties.purviewConfiguration",
        type: {
          name: "Composite",
          className: "PurviewConfiguration"
        }
      },
      adlaResourceId: {
        readOnly: true,
        serializedName: "properties.adlaResourceId",
        type: {
          name: "String"
        }
      },
      publicNetworkAccess: {
        serializedName: "properties.publicNetworkAccess",
        type: {
          name: "String"
        }
      },
      identity: {
        serializedName: "identity",
        type: {
          name: "Composite",
          className: "ManagedIdentity"
        }
      }
    }
  }
};

export const WorkspaceAadAdminInfo: msRest.CompositeMapper = {
  serializedName: "WorkspaceAadAdminInfo",
  type: {
    name: "Composite",
    className: "WorkspaceAadAdminInfo",
    modelProperties: {
      tenantId: {
        serializedName: "properties.tenantId",
        type: {
          name: "String"
        }
      },
      login: {
        serializedName: "properties.login",
        type: {
          name: "String"
        }
      },
      administratorType: {
        serializedName: "properties.administratorType",
        type: {
          name: "String"
        }
      },
      sid: {
        serializedName: "properties.sid",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const WorkspacePatchInfo: msRest.CompositeMapper = {
  serializedName: "WorkspacePatchInfo",
  type: {
    name: "Composite",
    className: "WorkspacePatchInfo",
    modelProperties: {
      tags: {
        serializedName: "tags",
        type: {
          name: "Dictionary",
          value: {
            type: {
              name: "String"
            }
          }
        }
      },
      identity: {
        serializedName: "identity",
        type: {
          name: "Composite",
          className: "ManagedIdentity"
        }
      },
      sqlAdministratorLoginPassword: {
        serializedName: "properties.sqlAdministratorLoginPassword",
        type: {
          name: "String"
        }
      },
      managedVirtualNetworkSettings: {
        serializedName: "properties.managedVirtualNetworkSettings",
        type: {
          name: "Composite",
          className: "ManagedVirtualNetworkSettings"
        }
      },
      workspaceRepositoryConfiguration: {
        serializedName: "properties.workspaceRepositoryConfiguration",
        type: {
          name: "Composite",
          className: "WorkspaceRepositoryConfiguration"
        }
      },
      purviewConfiguration: {
        serializedName: "properties.purviewConfiguration",
        type: {
          name: "Composite",
          className: "PurviewConfiguration"
        }
      },
      provisioningState: {
        readOnly: true,
        serializedName: "properties.provisioningState",
        type: {
          name: "String"
        }
      },
      encryption: {
        serializedName: "properties.encryption",
        type: {
          name: "Composite",
          className: "EncryptionDetails"
        }
      },
      publicNetworkAccess: {
        serializedName: "properties.publicNetworkAccess",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const ManagedIdentitySqlControlSettingsModelPropertiesGrantSqlControlToManagedIdentity: msRest.CompositeMapper = {
  serializedName: "ManagedIdentitySqlControlSettingsModel_properties_grantSqlControlToManagedIdentity",
  type: {
    name: "Composite",
    className: "ManagedIdentitySqlControlSettingsModelPropertiesGrantSqlControlToManagedIdentity",
    modelProperties: {
      desiredState: {
        serializedName: "desiredState",
        type: {
          name: "String"
        }
      },
      actualState: {
        readOnly: true,
        serializedName: "actualState",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const ManagedIdentitySqlControlSettingsModel: msRest.CompositeMapper = {
  serializedName: "ManagedIdentitySqlControlSettingsModel",
  type: {
    name: "Composite",
    className: "ManagedIdentitySqlControlSettingsModel",
    modelProperties: {
      ...ProxyResource.type.modelProperties,
      grantSqlControlToManagedIdentity: {
        serializedName: "properties.grantSqlControlToManagedIdentity",
        type: {
          name: "Composite",
          className: "ManagedIdentitySqlControlSettingsModelPropertiesGrantSqlControlToManagedIdentity"
        }
      }
    }
  }
};

export const RestorableDroppedSqlPool: msRest.CompositeMapper = {
  serializedName: "RestorableDroppedSqlPool",
  type: {
    name: "Composite",
    className: "RestorableDroppedSqlPool",
    modelProperties: {
      ...ProxyResource.type.modelProperties,
      location: {
        readOnly: true,
        serializedName: "location",
        type: {
          name: "String"
        }
      },
      databaseName: {
        readOnly: true,
        serializedName: "properties.databaseName",
        type: {
          name: "String"
        }
      },
      edition: {
        readOnly: true,
        serializedName: "properties.edition",
        type: {
          name: "String"
        }
      },
      maxSizeBytes: {
        readOnly: true,
        serializedName: "properties.maxSizeBytes",
        type: {
          name: "String"
        }
      },
      serviceLevelObjective: {
        readOnly: true,
        serializedName: "properties.serviceLevelObjective",
        type: {
          name: "String"
        }
      },
      elasticPoolName: {
        readOnly: true,
        serializedName: "properties.elasticPoolName",
        type: {
          name: "String"
        }
      },
      creationDate: {
        readOnly: true,
        serializedName: "properties.creationDate",
        type: {
          name: "DateTime"
        }
      },
      deletionDate: {
        readOnly: true,
        serializedName: "properties.deletionDate",
        type: {
          name: "DateTime"
        }
      },
      earliestRestoreDate: {
        readOnly: true,
        serializedName: "properties.earliestRestoreDate",
        type: {
          name: "DateTime"
        }
      }
    }
  }
};

export const BigDataPoolResourceInfoListResult: msRest.CompositeMapper = {
  serializedName: "BigDataPoolResourceInfoListResult",
  type: {
    name: "Composite",
    className: "BigDataPoolResourceInfoListResult",
    modelProperties: {
      nextLink: {
        serializedName: "nextLink",
        type: {
          name: "String"
        }
      },
      value: {
        serializedName: "",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "BigDataPoolResourceInfo"
            }
          }
        }
      }
    }
  }
};

export const IpFirewallRuleInfoListResult: msRest.CompositeMapper = {
  serializedName: "IpFirewallRuleInfoListResult",
  type: {
    name: "Composite",
    className: "IpFirewallRuleInfoListResult",
    modelProperties: {
      nextLink: {
        serializedName: "nextLink",
        type: {
          name: "String"
        }
      },
      value: {
        serializedName: "",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "IpFirewallRuleInfo"
            }
          }
        }
      }
    }
  }
};

export const IntegrationRuntimeListResponse: msRest.CompositeMapper = {
  serializedName: "IntegrationRuntimeListResponse",
  type: {
    name: "Composite",
    className: "IntegrationRuntimeListResponse",
    modelProperties: {
      value: {
        required: true,
        serializedName: "",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "IntegrationRuntimeResource"
            }
          }
        }
      },
      nextLink: {
        serializedName: "nextLink",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const KeyInfoListResult: msRest.CompositeMapper = {
  serializedName: "KeyInfoListResult",
  type: {
    name: "Composite",
    className: "KeyInfoListResult",
    modelProperties: {
      nextLink: {
        serializedName: "nextLink",
        type: {
          name: "String"
        }
      },
      value: {
        serializedName: "",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "Key"
            }
          }
        }
      }
    }
  }
};

export const LibraryListResponse: msRest.CompositeMapper = {
  serializedName: "LibraryListResponse",
  type: {
    name: "Composite",
    className: "LibraryListResponse",
    modelProperties: {
      value: {
        required: true,
        serializedName: "",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "LibraryResource"
            }
          }
        }
      },
      nextLink: {
        serializedName: "nextLink",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const PrivateEndpointConnectionList: msRest.CompositeMapper = {
  serializedName: "PrivateEndpointConnectionList",
  type: {
    name: "Composite",
    className: "PrivateEndpointConnectionList",
    modelProperties: {
      value: {
        readOnly: true,
        serializedName: "",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "PrivateEndpointConnection"
            }
          }
        }
      },
      nextLink: {
        readOnly: true,
        serializedName: "nextLink",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const PrivateLinkResourceListResult: msRest.CompositeMapper = {
  serializedName: "PrivateLinkResourceListResult",
  type: {
    name: "Composite",
    className: "PrivateLinkResourceListResult",
    modelProperties: {
      value: {
        readOnly: true,
        serializedName: "",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "PrivateLinkResource"
            }
          }
        }
      },
      nextLink: {
        readOnly: true,
        serializedName: "nextLink",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const PrivateLinkHubInfoListResult: msRest.CompositeMapper = {
  serializedName: "PrivateLinkHubInfoListResult",
  type: {
    name: "Composite",
    className: "PrivateLinkHubInfoListResult",
    modelProperties: {
      nextLink: {
        serializedName: "nextLink",
        type: {
          name: "String"
        }
      },
      value: {
        serializedName: "",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "PrivateLinkHub"
            }
          }
        }
      }
    }
  }
};

export const PrivateEndpointConnectionForPrivateLinkHubResourceCollectionResponse: msRest.CompositeMapper = {
  serializedName: "PrivateEndpointConnectionForPrivateLinkHub_ResourceCollectionResponse",
  type: {
    name: "Composite",
    className: "PrivateEndpointConnectionForPrivateLinkHubResourceCollectionResponse",
    modelProperties: {
      value: {
        serializedName: "",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "PrivateEndpointConnectionForPrivateLinkHub"
            }
          }
        }
      },
      nextLink: {
        serializedName: "nextLink",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const SqlPoolInfoListResult: msRest.CompositeMapper = {
  serializedName: "SqlPoolInfoListResult",
  type: {
    name: "Composite",
    className: "SqlPoolInfoListResult",
    modelProperties: {
      nextLink: {
        serializedName: "nextLink",
        type: {
          name: "String"
        }
      },
      value: {
        serializedName: "",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "SqlPool"
            }
          }
        }
      }
    }
  }
};

export const GeoBackupPolicyListResult: msRest.CompositeMapper = {
  serializedName: "GeoBackupPolicyListResult",
  type: {
    name: "Composite",
    className: "GeoBackupPolicyListResult",
    modelProperties: {
      value: {
        serializedName: "",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "GeoBackupPolicy"
            }
          }
        }
      }
    }
  }
};

export const RestorePointListResult: msRest.CompositeMapper = {
  serializedName: "RestorePointListResult",
  type: {
    name: "Composite",
    className: "RestorePointListResult",
    modelProperties: {
      value: {
        readOnly: true,
        serializedName: "",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "RestorePoint"
            }
          }
        }
      },
      nextLink: {
        readOnly: true,
        serializedName: "nextLink",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const ReplicationLinkListResult: msRest.CompositeMapper = {
  serializedName: "ReplicationLinkListResult",
  type: {
    name: "Composite",
    className: "ReplicationLinkListResult",
    modelProperties: {
      value: {
        serializedName: "",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "ReplicationLink"
            }
          }
        }
      },
      nextLink: {
        readOnly: true,
        serializedName: "nextLink",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const TransparentDataEncryptionListResult: msRest.CompositeMapper = {
  serializedName: "TransparentDataEncryptionListResult",
  type: {
    name: "Composite",
    className: "TransparentDataEncryptionListResult",
    modelProperties: {
      value: {
        readOnly: true,
        serializedName: "",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "TransparentDataEncryption"
            }
          }
        }
      },
      nextLink: {
        readOnly: true,
        serializedName: "nextLink",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const SqlPoolBlobAuditingPolicyListResult: msRest.CompositeMapper = {
  serializedName: "SqlPoolBlobAuditingPolicyListResult",
  type: {
    name: "Composite",
    className: "SqlPoolBlobAuditingPolicyListResult",
    modelProperties: {
      value: {
        readOnly: true,
        serializedName: "",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "SqlPoolBlobAuditingPolicy"
            }
          }
        }
      },
      nextLink: {
        readOnly: true,
        serializedName: "nextLink",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const SqlPoolBlobAuditingPolicySqlPoolOperationListResult: msRest.CompositeMapper = {
  serializedName: "SqlPoolBlobAuditingPolicySqlPoolOperationListResult",
  type: {
    name: "Composite",
    className: "SqlPoolBlobAuditingPolicySqlPoolOperationListResult",
    modelProperties: {
      value: {
        readOnly: true,
        serializedName: "",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "SqlPoolOperation"
            }
          }
        }
      },
      nextLink: {
        readOnly: true,
        serializedName: "nextLink",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const SqlPoolUsageListResult: msRest.CompositeMapper = {
  serializedName: "SqlPoolUsageListResult",
  type: {
    name: "Composite",
    className: "SqlPoolUsageListResult",
    modelProperties: {
      value: {
        required: true,
        serializedName: "",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "SqlPoolUsage"
            }
          }
        }
      },
      nextLink: {
        readOnly: true,
        serializedName: "nextLink",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const SensitivityLabelListResult: msRest.CompositeMapper = {
  serializedName: "SensitivityLabelListResult",
  type: {
    name: "Composite",
    className: "SensitivityLabelListResult",
    modelProperties: {
      value: {
        readOnly: true,
        serializedName: "",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "SensitivityLabel"
            }
          }
        }
      },
      nextLink: {
        readOnly: true,
        serializedName: "nextLink",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const SqlPoolSchemaListResult: msRest.CompositeMapper = {
  serializedName: "SqlPoolSchemaListResult",
  type: {
    name: "Composite",
    className: "SqlPoolSchemaListResult",
    modelProperties: {
      value: {
        readOnly: true,
        serializedName: "",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "SqlPoolSchema"
            }
          }
        }
      },
      nextLink: {
        readOnly: true,
        serializedName: "nextLink",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const SqlPoolTableListResult: msRest.CompositeMapper = {
  serializedName: "SqlPoolTableListResult",
  type: {
    name: "Composite",
    className: "SqlPoolTableListResult",
    modelProperties: {
      value: {
        readOnly: true,
        serializedName: "",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "SqlPoolTable"
            }
          }
        }
      },
      nextLink: {
        readOnly: true,
        serializedName: "nextLink",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const SqlPoolColumnListResult: msRest.CompositeMapper = {
  serializedName: "SqlPoolColumnListResult",
  type: {
    name: "Composite",
    className: "SqlPoolColumnListResult",
    modelProperties: {
      value: {
        readOnly: true,
        serializedName: "",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "SqlPoolColumn"
            }
          }
        }
      },
      nextLink: {
        readOnly: true,
        serializedName: "nextLink",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const SqlPoolVulnerabilityAssessmentListResult: msRest.CompositeMapper = {
  serializedName: "SqlPoolVulnerabilityAssessmentListResult",
  type: {
    name: "Composite",
    className: "SqlPoolVulnerabilityAssessmentListResult",
    modelProperties: {
      value: {
        readOnly: true,
        serializedName: "",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "SqlPoolVulnerabilityAssessment"
            }
          }
        }
      },
      nextLink: {
        readOnly: true,
        serializedName: "nextLink",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const VulnerabilityAssessmentScanRecordListResult: msRest.CompositeMapper = {
  serializedName: "VulnerabilityAssessmentScanRecordListResult",
  type: {
    name: "Composite",
    className: "VulnerabilityAssessmentScanRecordListResult",
    modelProperties: {
      value: {
        readOnly: true,
        serializedName: "",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "VulnerabilityAssessmentScanRecord"
            }
          }
        }
      },
      nextLink: {
        readOnly: true,
        serializedName: "nextLink",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const ListSqlPoolSecurityAlertPolicies: msRest.CompositeMapper = {
  serializedName: "ListSqlPoolSecurityAlertPolicies",
  type: {
    name: "Composite",
    className: "ListSqlPoolSecurityAlertPolicies",
    modelProperties: {
      value: {
        readOnly: true,
        serializedName: "",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "SqlPoolSecurityAlertPolicy"
            }
          }
        }
      },
      nextLink: {
        readOnly: true,
        serializedName: "nextLink",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const ExtendedSqlPoolBlobAuditingPolicyListResult: msRest.CompositeMapper = {
  serializedName: "ExtendedSqlPoolBlobAuditingPolicyListResult",
  type: {
    name: "Composite",
    className: "ExtendedSqlPoolBlobAuditingPolicyListResult",
    modelProperties: {
      value: {
        readOnly: true,
        serializedName: "",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "ExtendedSqlPoolBlobAuditingPolicy"
            }
          }
        }
      },
      nextLink: {
        readOnly: true,
        serializedName: "nextLink",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const DataMaskingRuleListResult: msRest.CompositeMapper = {
  serializedName: "DataMaskingRuleListResult",
  type: {
    name: "Composite",
    className: "DataMaskingRuleListResult",
    modelProperties: {
      value: {
        serializedName: "",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "DataMaskingRule"
            }
          }
        }
      }
    }
  }
};

export const WorkloadGroupListResult: msRest.CompositeMapper = {
  serializedName: "WorkloadGroupListResult",
  type: {
    name: "Composite",
    className: "WorkloadGroupListResult",
    modelProperties: {
      value: {
        readOnly: true,
        serializedName: "",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "WorkloadGroup"
            }
          }
        }
      },
      nextLink: {
        readOnly: true,
        serializedName: "nextLink",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const WorkloadClassifierListResult: msRest.CompositeMapper = {
  serializedName: "WorkloadClassifierListResult",
  type: {
    name: "Composite",
    className: "WorkloadClassifierListResult",
    modelProperties: {
      value: {
        readOnly: true,
        serializedName: "",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "WorkloadClassifier"
            }
          }
        }
      },
      nextLink: {
        readOnly: true,
        serializedName: "nextLink",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const ServerBlobAuditingPolicyListResult: msRest.CompositeMapper = {
  serializedName: "ServerBlobAuditingPolicyListResult",
  type: {
    name: "Composite",
    className: "ServerBlobAuditingPolicyListResult",
    modelProperties: {
      value: {
        readOnly: true,
        serializedName: "",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "ServerBlobAuditingPolicy"
            }
          }
        }
      },
      nextLink: {
        readOnly: true,
        serializedName: "nextLink",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const ExtendedServerBlobAuditingPolicyListResult: msRest.CompositeMapper = {
  serializedName: "ExtendedServerBlobAuditingPolicyListResult",
  type: {
    name: "Composite",
    className: "ExtendedServerBlobAuditingPolicyListResult",
    modelProperties: {
      value: {
        readOnly: true,
        serializedName: "",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "ExtendedServerBlobAuditingPolicy"
            }
          }
        }
      },
      nextLink: {
        readOnly: true,
        serializedName: "nextLink",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const ServerSecurityAlertPolicyListResult: msRest.CompositeMapper = {
  serializedName: "ServerSecurityAlertPolicyListResult",
  type: {
    name: "Composite",
    className: "ServerSecurityAlertPolicyListResult",
    modelProperties: {
      value: {
        readOnly: true,
        serializedName: "",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "ServerSecurityAlertPolicy"
            }
          }
        }
      },
      nextLink: {
        readOnly: true,
        serializedName: "nextLink",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const ServerVulnerabilityAssessmentListResult: msRest.CompositeMapper = {
  serializedName: "ServerVulnerabilityAssessmentListResult",
  type: {
    name: "Composite",
    className: "ServerVulnerabilityAssessmentListResult",
    modelProperties: {
      value: {
        readOnly: true,
        serializedName: "",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "ServerVulnerabilityAssessment"
            }
          }
        }
      },
      nextLink: {
        readOnly: true,
        serializedName: "nextLink",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const EncryptionProtectorListResult: msRest.CompositeMapper = {
  serializedName: "EncryptionProtectorListResult",
  type: {
    name: "Composite",
    className: "EncryptionProtectorListResult",
    modelProperties: {
      value: {
        readOnly: true,
        serializedName: "",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "EncryptionProtector"
            }
          }
        }
      },
      nextLink: {
        readOnly: true,
        serializedName: "nextLink",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const ServerUsageListResult: msRest.CompositeMapper = {
  serializedName: "ServerUsageListResult",
  type: {
    name: "Composite",
    className: "ServerUsageListResult",
    modelProperties: {
      value: {
        required: true,
        serializedName: "",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "ServerUsage"
            }
          }
        }
      },
      nextLink: {
        readOnly: true,
        serializedName: "nextLink",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const RecoverableSqlPoolListResult: msRest.CompositeMapper = {
  serializedName: "RecoverableSqlPoolListResult",
  type: {
    name: "Composite",
    className: "RecoverableSqlPoolListResult",
    modelProperties: {
      value: {
        readOnly: true,
        serializedName: "",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "RecoverableSqlPool"
            }
          }
        }
      },
      nextLink: {
        readOnly: true,
        serializedName: "nextLink",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const WorkspaceInfoListResult: msRest.CompositeMapper = {
  serializedName: "WorkspaceInfoListResult",
  type: {
    name: "Composite",
    className: "WorkspaceInfoListResult",
    modelProperties: {
      nextLink: {
        serializedName: "nextLink",
        type: {
          name: "String"
        }
      },
      value: {
        serializedName: "",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "Workspace"
            }
          }
        }
      }
    }
  }
};

export const RestorableDroppedSqlPoolListResult: msRest.CompositeMapper = {
  serializedName: "RestorableDroppedSqlPoolListResult",
  type: {
    name: "Composite",
    className: "RestorableDroppedSqlPoolListResult",
    modelProperties: {
      value: {
        required: true,
        serializedName: "",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "RestorableDroppedSqlPool"
            }
          }
        }
      }
    }
  }
};

export const discriminators = {
  'IntegrationRuntime' : IntegrationRuntime,
  'SecretBase.SecureString' : SecureString,
  'CustomSetupBase' : CustomSetupBase,
  'IntegrationRuntime.Managed' : ManagedIntegrationRuntime,
  'SecretBase' : SecretBase,
  'CustomSetupBase.CmdkeySetup' : CmdkeySetup,
  'CustomSetupBase.EnvironmentVariableSetup' : EnvironmentVariableSetup,
  'CustomSetupBase.ComponentSetup' : ComponentSetup,
  'LinkedIntegrationRuntimeType' : LinkedIntegrationRuntimeType,
  'IntegrationRuntime.SelfHosted' : SelfHostedIntegrationRuntime,
  'LinkedIntegrationRuntimeType.Key' : LinkedIntegrationRuntimeKeyAuthorization,
  'LinkedIntegrationRuntimeType.RBAC' : LinkedIntegrationRuntimeRbacAuthorization,
  'IntegrationRuntimeStatus' : IntegrationRuntimeStatus,
  'IntegrationRuntimeStatus.Managed' : ManagedIntegrationRuntimeStatus,
  'IntegrationRuntimeStatus.SelfHosted' : SelfHostedIntegrationRuntimeStatus,
  'SsisObjectMetadata' : SsisObjectMetadata,
  'SsisObjectMetadata.Folder' : SsisFolder,
  'SsisObjectMetadata.Project' : SsisProject,
  'SsisObjectMetadata.Package' : SsisPackage,
  'SsisObjectMetadata.Environment' : SsisEnvironment

};
