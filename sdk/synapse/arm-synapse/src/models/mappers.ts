/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */

import * as coreClient from "@azure/core-client";

export const Resource: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "Resource",
    modelProperties: {
      id: {
        serializedName: "id",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      name: {
        serializedName: "name",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      type: {
        serializedName: "type",
        readOnly: true,
        type: {
          name: "String"
        }
      }
    }
  }
};

export const ErrorResponse: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "ErrorResponse",
    modelProperties: {
      error: {
        serializedName: "error",
        type: {
          name: "Composite",
          className: "ErrorDetail"
        }
      }
    }
  }
};

export const ErrorDetail: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "ErrorDetail",
    modelProperties: {
      code: {
        serializedName: "code",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      message: {
        serializedName: "message",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      target: {
        serializedName: "target",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      details: {
        serializedName: "details",
        readOnly: true,
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "ErrorDetail"
            }
          }
        }
      },
      additionalInfo: {
        serializedName: "additionalInfo",
        readOnly: true,
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "ErrorAdditionalInfo"
            }
          }
        }
      }
    }
  }
};

export const ErrorAdditionalInfo: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "ErrorAdditionalInfo",
    modelProperties: {
      type: {
        serializedName: "type",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      info: {
        serializedName: "info",
        readOnly: true,
        type: {
          name: "Dictionary",
          value: { type: { name: "any" } }
        }
      }
    }
  }
};

export const AzureADOnlyAuthenticationListResult: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "AzureADOnlyAuthenticationListResult",
    modelProperties: {
      value: {
        serializedName: "value",
        readOnly: true,
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "AzureADOnlyAuthentication"
            }
          }
        }
      },
      nextLink: {
        serializedName: "nextLink",
        readOnly: true,
        type: {
          name: "String"
        }
      }
    }
  }
};

export const CheckNameAvailabilityRequest: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "CheckNameAvailabilityRequest",
    modelProperties: {
      name: {
        serializedName: "name",
        type: {
          name: "String"
        }
      },
      type: {
        serializedName: "type",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const CheckNameAvailabilityResponse: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "CheckNameAvailabilityResponse",
    modelProperties: {
      message: {
        serializedName: "message",
        type: {
          name: "String"
        }
      },
      available: {
        serializedName: "available",
        type: {
          name: "Boolean"
        }
      },
      reason: {
        serializedName: "reason",
        type: {
          name: "String"
        }
      },
      name: {
        serializedName: "name",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const IpFirewallRuleInfoListResult: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "IpFirewallRuleInfoListResult",
    modelProperties: {
      nextLink: {
        serializedName: "nextLink",
        type: {
          name: "String"
        }
      },
      value: {
        serializedName: "value",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "IpFirewallRuleInfo"
            }
          }
        }
      }
    }
  }
};

export const IpFirewallRuleProperties: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "IpFirewallRuleProperties",
    modelProperties: {
      endIpAddress: {
        serializedName: "endIpAddress",
        type: {
          name: "String"
        }
      },
      provisioningState: {
        serializedName: "provisioningState",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      startIpAddress: {
        serializedName: "startIpAddress",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const ReplaceAllIpFirewallRulesRequest: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "ReplaceAllIpFirewallRulesRequest",
    modelProperties: {
      ipFirewallRules: {
        serializedName: "ipFirewallRules",
        type: {
          name: "Dictionary",
          value: {
            type: { name: "Composite", className: "IpFirewallRuleProperties" }
          }
        }
      }
    }
  }
};

export const ReplaceAllFirewallRulesOperationResponse: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "ReplaceAllFirewallRulesOperationResponse",
    modelProperties: {
      operationId: {
        serializedName: "operationId",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const KeyInfoListResult: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "KeyInfoListResult",
    modelProperties: {
      nextLink: {
        serializedName: "nextLink",
        type: {
          name: "String"
        }
      },
      value: {
        serializedName: "value",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "Key"
            }
          }
        }
      }
    }
  }
};

export const AvailableRpOperation: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "AvailableRpOperation",
    modelProperties: {
      display: {
        serializedName: "display",
        type: {
          name: "Composite",
          className: "AvailableRpOperationDisplayInfo"
        }
      },
      isDataAction: {
        serializedName: "isDataAction",
        type: {
          name: "String"
        }
      },
      name: {
        serializedName: "name",
        type: {
          name: "String"
        }
      },
      origin: {
        serializedName: "origin",
        type: {
          name: "String"
        }
      },
      serviceSpecification: {
        serializedName: "properties.serviceSpecification",
        type: {
          name: "Composite",
          className: "OperationMetaServiceSpecification"
        }
      }
    }
  }
};

export const AvailableRpOperationDisplayInfo: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "AvailableRpOperationDisplayInfo",
    modelProperties: {
      description: {
        serializedName: "description",
        type: {
          name: "String"
        }
      },
      resource: {
        serializedName: "resource",
        type: {
          name: "String"
        }
      },
      provider: {
        serializedName: "provider",
        type: {
          name: "String"
        }
      },
      operation: {
        serializedName: "operation",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const OperationMetaServiceSpecification: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "OperationMetaServiceSpecification",
    modelProperties: {
      metricSpecifications: {
        serializedName: "metricSpecifications",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "OperationMetaMetricSpecification"
            }
          }
        }
      },
      logSpecifications: {
        serializedName: "logSpecifications",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "OperationMetaLogSpecification"
            }
          }
        }
      }
    }
  }
};

export const OperationMetaMetricSpecification: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "OperationMetaMetricSpecification",
    modelProperties: {
      sourceMdmNamespace: {
        serializedName: "sourceMdmNamespace",
        type: {
          name: "String"
        }
      },
      displayName: {
        serializedName: "displayName",
        type: {
          name: "String"
        }
      },
      name: {
        serializedName: "name",
        type: {
          name: "String"
        }
      },
      aggregationType: {
        serializedName: "aggregationType",
        type: {
          name: "String"
        }
      },
      displayDescription: {
        serializedName: "displayDescription",
        type: {
          name: "String"
        }
      },
      sourceMdmAccount: {
        serializedName: "sourceMdmAccount",
        type: {
          name: "String"
        }
      },
      enableRegionalMdmAccount: {
        serializedName: "enableRegionalMdmAccount",
        type: {
          name: "Boolean"
        }
      },
      unit: {
        serializedName: "unit",
        type: {
          name: "String"
        }
      },
      dimensions: {
        serializedName: "dimensions",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "OperationMetaMetricDimensionSpecification"
            }
          }
        }
      },
      supportsInstanceLevelAggregation: {
        serializedName: "supportsInstanceLevelAggregation",
        type: {
          name: "Boolean"
        }
      },
      metricFilterPattern: {
        serializedName: "metricFilterPattern",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const OperationMetaMetricDimensionSpecification: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "OperationMetaMetricDimensionSpecification",
    modelProperties: {
      displayName: {
        serializedName: "displayName",
        type: {
          name: "String"
        }
      },
      name: {
        serializedName: "name",
        type: {
          name: "String"
        }
      },
      toBeExportedForShoebox: {
        serializedName: "toBeExportedForShoebox",
        type: {
          name: "Boolean"
        }
      }
    }
  }
};

export const OperationMetaLogSpecification: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "OperationMetaLogSpecification",
    modelProperties: {
      displayName: {
        serializedName: "displayName",
        type: {
          name: "String"
        }
      },
      blobDuration: {
        serializedName: "blobDuration",
        type: {
          name: "String"
        }
      },
      name: {
        serializedName: "name",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const OperationResource: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "OperationResource",
    modelProperties: {
      id: {
        serializedName: "id",
        type: {
          name: "String"
        }
      },
      name: {
        serializedName: "name",
        type: {
          name: "String"
        }
      },
      status: {
        serializedName: "status",
        type: {
          name: "String"
        }
      },
      properties: {
        serializedName: "properties",
        type: {
          name: "Dictionary",
          value: { type: { name: "any" } }
        }
      },
      error: {
        serializedName: "error",
        type: {
          name: "Composite",
          className: "ErrorDetail"
        }
      },
      startTime: {
        serializedName: "startTime",
        type: {
          name: "DateTime"
        }
      },
      endTime: {
        serializedName: "endTime",
        type: {
          name: "DateTime"
        }
      },
      percentComplete: {
        serializedName: "percentComplete",
        type: {
          name: "Number"
        }
      }
    }
  }
};

export const PrivateEndpointConnectionProperties: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "PrivateEndpointConnectionProperties",
    modelProperties: {
      privateEndpoint: {
        serializedName: "privateEndpoint",
        type: {
          name: "Composite",
          className: "PrivateEndpoint"
        }
      },
      privateLinkServiceConnectionState: {
        serializedName: "privateLinkServiceConnectionState",
        type: {
          name: "Composite",
          className: "PrivateLinkServiceConnectionState"
        }
      },
      provisioningState: {
        serializedName: "provisioningState",
        readOnly: true,
        type: {
          name: "String"
        }
      }
    }
  }
};

export const PrivateEndpoint: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "PrivateEndpoint",
    modelProperties: {
      id: {
        serializedName: "id",
        readOnly: true,
        type: {
          name: "String"
        }
      }
    }
  }
};

export const PrivateLinkServiceConnectionState: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "PrivateLinkServiceConnectionState",
    modelProperties: {
      status: {
        serializedName: "status",
        type: {
          name: "String"
        }
      },
      description: {
        serializedName: "description",
        type: {
          name: "String"
        }
      },
      actionsRequired: {
        serializedName: "actionsRequired",
        readOnly: true,
        type: {
          name: "String"
        }
      }
    }
  }
};

export const PrivateEndpointConnectionList: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "PrivateEndpointConnectionList",
    modelProperties: {
      value: {
        serializedName: "value",
        readOnly: true,
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "PrivateEndpointConnection"
            }
          }
        }
      },
      nextLink: {
        serializedName: "nextLink",
        readOnly: true,
        type: {
          name: "String"
        }
      }
    }
  }
};

export const PrivateLinkResourceListResult: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "PrivateLinkResourceListResult",
    modelProperties: {
      value: {
        serializedName: "value",
        readOnly: true,
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "PrivateLinkResource"
            }
          }
        }
      },
      nextLink: {
        serializedName: "nextLink",
        readOnly: true,
        type: {
          name: "String"
        }
      }
    }
  }
};

export const PrivateLinkResourceProperties: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "PrivateLinkResourceProperties",
    modelProperties: {
      groupId: {
        serializedName: "groupId",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      requiredMembers: {
        serializedName: "requiredMembers",
        readOnly: true,
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "String"
            }
          }
        }
      },
      requiredZoneNames: {
        serializedName: "requiredZoneNames",
        readOnly: true,
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "String"
            }
          }
        }
      }
    }
  }
};

export const PrivateLinkHubInfoListResult: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "PrivateLinkHubInfoListResult",
    modelProperties: {
      nextLink: {
        serializedName: "nextLink",
        type: {
          name: "String"
        }
      },
      value: {
        serializedName: "value",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "PrivateLinkHub"
            }
          }
        }
      }
    }
  }
};

export const PrivateEndpointConnectionForPrivateLinkHubBasic: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "PrivateEndpointConnectionForPrivateLinkHubBasic",
    modelProperties: {
      id: {
        serializedName: "id",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      privateEndpoint: {
        serializedName: "properties.privateEndpoint",
        type: {
          name: "Composite",
          className: "PrivateEndpoint"
        }
      },
      privateLinkServiceConnectionState: {
        serializedName: "properties.privateLinkServiceConnectionState",
        type: {
          name: "Composite",
          className: "PrivateLinkServiceConnectionState"
        }
      },
      provisioningState: {
        serializedName: "properties.provisioningState",
        readOnly: true,
        type: {
          name: "String"
        }
      }
    }
  }
};

export const PrivateLinkHubPatchInfo: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "PrivateLinkHubPatchInfo",
    modelProperties: {
      tags: {
        serializedName: "tags",
        type: {
          name: "Dictionary",
          value: { type: { name: "String" } }
        }
      }
    }
  }
};

export const PrivateEndpointConnectionForPrivateLinkHubResourceCollectionResponse: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className:
      "PrivateEndpointConnectionForPrivateLinkHubResourceCollectionResponse",
    modelProperties: {
      value: {
        serializedName: "value",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "PrivateEndpointConnectionForPrivateLinkHub"
            }
          }
        }
      },
      nextLink: {
        serializedName: "nextLink",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const PrivateEndpointConnectionForPrivateLinkHubBasicAutoGenerated: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "PrivateEndpointConnectionForPrivateLinkHubBasicAutoGenerated",
    modelProperties: {
      id: {
        serializedName: "id",
        type: {
          name: "String"
        }
      },
      properties: {
        serializedName: "properties",
        type: {
          name: "Composite",
          className: "PrivateEndpointConnectionProperties"
        }
      }
    }
  }
};

export const Sku: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "Sku",
    modelProperties: {
      tier: {
        serializedName: "tier",
        type: {
          name: "String"
        }
      },
      name: {
        serializedName: "name",
        type: {
          name: "String"
        }
      },
      capacity: {
        serializedName: "capacity",
        type: {
          name: "Number"
        }
      }
    }
  }
};

export const SqlPoolPatchInfo: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "SqlPoolPatchInfo",
    modelProperties: {
      tags: {
        serializedName: "tags",
        type: {
          name: "Dictionary",
          value: { type: { name: "String" } }
        }
      },
      location: {
        serializedName: "location",
        type: {
          name: "String"
        }
      },
      sku: {
        serializedName: "sku",
        type: {
          name: "Composite",
          className: "Sku"
        }
      },
      maxSizeBytes: {
        serializedName: "properties.maxSizeBytes",
        type: {
          name: "Number"
        }
      },
      collation: {
        defaultValue: "",
        serializedName: "properties.collation",
        type: {
          name: "String"
        }
      },
      sourceDatabaseId: {
        serializedName: "properties.sourceDatabaseId",
        type: {
          name: "String"
        }
      },
      recoverableDatabaseId: {
        serializedName: "properties.recoverableDatabaseId",
        type: {
          name: "String"
        }
      },
      provisioningState: {
        serializedName: "properties.provisioningState",
        type: {
          name: "String"
        }
      },
      status: {
        serializedName: "properties.status",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      restorePointInTime: {
        serializedName: "properties.restorePointInTime",
        type: {
          name: "DateTime"
        }
      },
      createMode: {
        serializedName: "properties.createMode",
        type: {
          name: "String"
        }
      },
      creationDate: {
        serializedName: "properties.creationDate",
        readOnly: true,
        type: {
          name: "DateTime"
        }
      },
      storageAccountType: {
        defaultValue: "GRS",
        serializedName: "properties.storageAccountType",
        type: {
          name: "String"
        }
      },
      sourceDatabaseDeletionDate: {
        serializedName: "properties.sourceDatabaseDeletionDate",
        type: {
          name: "DateTime"
        }
      }
    }
  }
};

export const SqlPoolInfoListResult: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "SqlPoolInfoListResult",
    modelProperties: {
      nextLink: {
        serializedName: "nextLink",
        type: {
          name: "String"
        }
      },
      value: {
        serializedName: "value",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "SqlPool"
            }
          }
        }
      }
    }
  }
};

export const ResourceMoveDefinition: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "ResourceMoveDefinition",
    modelProperties: {
      id: {
        serializedName: "id",
        required: true,
        type: {
          name: "String"
        }
      }
    }
  }
};

export const GeoBackupPolicyListResult: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "GeoBackupPolicyListResult",
    modelProperties: {
      value: {
        serializedName: "value",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "GeoBackupPolicy"
            }
          }
        }
      }
    }
  }
};

export const RestorePointListResult: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "RestorePointListResult",
    modelProperties: {
      value: {
        serializedName: "value",
        readOnly: true,
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "RestorePoint"
            }
          }
        }
      },
      nextLink: {
        serializedName: "nextLink",
        readOnly: true,
        type: {
          name: "String"
        }
      }
    }
  }
};

export const CreateSqlPoolRestorePointDefinition: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "CreateSqlPoolRestorePointDefinition",
    modelProperties: {
      restorePointLabel: {
        serializedName: "restorePointLabel",
        required: true,
        type: {
          name: "String"
        }
      }
    }
  }
};

export const ReplicationLinkListResult: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "ReplicationLinkListResult",
    modelProperties: {
      value: {
        serializedName: "value",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "ReplicationLink"
            }
          }
        }
      },
      nextLink: {
        serializedName: "nextLink",
        readOnly: true,
        type: {
          name: "String"
        }
      }
    }
  }
};

export const MaintenanceWindowTimeRange: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "MaintenanceWindowTimeRange",
    modelProperties: {
      dayOfWeek: {
        serializedName: "dayOfWeek",
        type: {
          name: "String"
        }
      },
      startTime: {
        serializedName: "startTime",
        type: {
          name: "String"
        }
      },
      duration: {
        serializedName: "duration",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const TransparentDataEncryptionListResult: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "TransparentDataEncryptionListResult",
    modelProperties: {
      value: {
        serializedName: "value",
        readOnly: true,
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "TransparentDataEncryption"
            }
          }
        }
      },
      nextLink: {
        serializedName: "nextLink",
        readOnly: true,
        type: {
          name: "String"
        }
      }
    }
  }
};

export const SqlPoolBlobAuditingPolicySqlPoolOperationListResult: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "SqlPoolBlobAuditingPolicySqlPoolOperationListResult",
    modelProperties: {
      value: {
        serializedName: "value",
        readOnly: true,
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "SqlPoolOperation"
            }
          }
        }
      },
      nextLink: {
        serializedName: "nextLink",
        readOnly: true,
        type: {
          name: "String"
        }
      }
    }
  }
};

export const SqlPoolUsageListResult: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "SqlPoolUsageListResult",
    modelProperties: {
      value: {
        serializedName: "value",
        required: true,
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "SqlPoolUsage"
            }
          }
        }
      },
      nextLink: {
        serializedName: "nextLink",
        readOnly: true,
        type: {
          name: "String"
        }
      }
    }
  }
};

export const SqlPoolUsage: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "SqlPoolUsage",
    modelProperties: {
      name: {
        serializedName: "name",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      resourceName: {
        serializedName: "resourceName",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      displayName: {
        serializedName: "displayName",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      currentValue: {
        serializedName: "currentValue",
        readOnly: true,
        type: {
          name: "Number"
        }
      },
      limit: {
        serializedName: "limit",
        readOnly: true,
        type: {
          name: "Number"
        }
      },
      unit: {
        serializedName: "unit",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      nextResetTime: {
        serializedName: "nextResetTime",
        readOnly: true,
        type: {
          name: "DateTime"
        }
      }
    }
  }
};

export const SensitivityLabelListResult: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "SensitivityLabelListResult",
    modelProperties: {
      value: {
        serializedName: "value",
        readOnly: true,
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "SensitivityLabel"
            }
          }
        }
      },
      nextLink: {
        serializedName: "nextLink",
        readOnly: true,
        type: {
          name: "String"
        }
      }
    }
  }
};

export const SensitivityLabelUpdateList: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "SensitivityLabelUpdateList",
    modelProperties: {
      operations: {
        serializedName: "operations",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "SensitivityLabelUpdate"
            }
          }
        }
      }
    }
  }
};

export const RecommendedSensitivityLabelUpdateList: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "RecommendedSensitivityLabelUpdateList",
    modelProperties: {
      operations: {
        serializedName: "operations",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "RecommendedSensitivityLabelUpdate"
            }
          }
        }
      }
    }
  }
};

export const SqlPoolSchemaListResult: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "SqlPoolSchemaListResult",
    modelProperties: {
      value: {
        serializedName: "value",
        readOnly: true,
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "SqlPoolSchema"
            }
          }
        }
      },
      nextLink: {
        serializedName: "nextLink",
        readOnly: true,
        type: {
          name: "String"
        }
      }
    }
  }
};

export const SqlPoolTableListResult: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "SqlPoolTableListResult",
    modelProperties: {
      value: {
        serializedName: "value",
        readOnly: true,
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "SqlPoolTable"
            }
          }
        }
      },
      nextLink: {
        serializedName: "nextLink",
        readOnly: true,
        type: {
          name: "String"
        }
      }
    }
  }
};

export const SqlPoolColumnListResult: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "SqlPoolColumnListResult",
    modelProperties: {
      value: {
        serializedName: "value",
        readOnly: true,
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "SqlPoolColumn"
            }
          }
        }
      },
      nextLink: {
        serializedName: "nextLink",
        readOnly: true,
        type: {
          name: "String"
        }
      }
    }
  }
};

export const SqlPoolVulnerabilityAssessmentListResult: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "SqlPoolVulnerabilityAssessmentListResult",
    modelProperties: {
      value: {
        serializedName: "value",
        readOnly: true,
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "SqlPoolVulnerabilityAssessment"
            }
          }
        }
      },
      nextLink: {
        serializedName: "nextLink",
        readOnly: true,
        type: {
          name: "String"
        }
      }
    }
  }
};

export const VulnerabilityAssessmentRecurringScansProperties: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "VulnerabilityAssessmentRecurringScansProperties",
    modelProperties: {
      isEnabled: {
        serializedName: "isEnabled",
        type: {
          name: "Boolean"
        }
      },
      emailSubscriptionAdmins: {
        defaultValue: true,
        serializedName: "emailSubscriptionAdmins",
        type: {
          name: "Boolean"
        }
      },
      emails: {
        serializedName: "emails",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "String"
            }
          }
        }
      }
    }
  }
};

export const VulnerabilityAssessmentScanRecordListResult: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "VulnerabilityAssessmentScanRecordListResult",
    modelProperties: {
      value: {
        serializedName: "value",
        readOnly: true,
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "VulnerabilityAssessmentScanRecord"
            }
          }
        }
      },
      nextLink: {
        serializedName: "nextLink",
        readOnly: true,
        type: {
          name: "String"
        }
      }
    }
  }
};

export const VulnerabilityAssessmentScanError: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "VulnerabilityAssessmentScanError",
    modelProperties: {
      code: {
        serializedName: "code",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      message: {
        serializedName: "message",
        readOnly: true,
        type: {
          name: "String"
        }
      }
    }
  }
};

export const ListSqlPoolSecurityAlertPolicies: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "ListSqlPoolSecurityAlertPolicies",
    modelProperties: {
      value: {
        serializedName: "value",
        readOnly: true,
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "SqlPoolSecurityAlertPolicy"
            }
          }
        }
      },
      nextLink: {
        serializedName: "nextLink",
        readOnly: true,
        type: {
          name: "String"
        }
      }
    }
  }
};

export const SqlPoolVulnerabilityAssessmentRuleBaselineItem: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "SqlPoolVulnerabilityAssessmentRuleBaselineItem",
    modelProperties: {
      result: {
        serializedName: "result",
        required: true,
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "String"
            }
          }
        }
      }
    }
  }
};

export const ExtendedSqlPoolBlobAuditingPolicyListResult: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "ExtendedSqlPoolBlobAuditingPolicyListResult",
    modelProperties: {
      value: {
        serializedName: "value",
        readOnly: true,
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "ExtendedSqlPoolBlobAuditingPolicy"
            }
          }
        }
      },
      nextLink: {
        serializedName: "nextLink",
        readOnly: true,
        type: {
          name: "String"
        }
      }
    }
  }
};

export const DataMaskingRuleListResult: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "DataMaskingRuleListResult",
    modelProperties: {
      value: {
        serializedName: "value",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "DataMaskingRule"
            }
          }
        }
      }
    }
  }
};

export const SqlPoolBlobAuditingPolicyListResult: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "SqlPoolBlobAuditingPolicyListResult",
    modelProperties: {
      value: {
        serializedName: "value",
        readOnly: true,
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "SqlPoolBlobAuditingPolicy"
            }
          }
        }
      },
      nextLink: {
        serializedName: "nextLink",
        readOnly: true,
        type: {
          name: "String"
        }
      }
    }
  }
};

export const WorkloadGroupListResult: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "WorkloadGroupListResult",
    modelProperties: {
      value: {
        serializedName: "value",
        readOnly: true,
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "WorkloadGroup"
            }
          }
        }
      },
      nextLink: {
        serializedName: "nextLink",
        readOnly: true,
        type: {
          name: "String"
        }
      }
    }
  }
};

export const WorkloadClassifierListResult: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "WorkloadClassifierListResult",
    modelProperties: {
      value: {
        serializedName: "value",
        readOnly: true,
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "WorkloadClassifier"
            }
          }
        }
      },
      nextLink: {
        serializedName: "nextLink",
        readOnly: true,
        type: {
          name: "String"
        }
      }
    }
  }
};

export const ServerBlobAuditingPolicyListResult: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "ServerBlobAuditingPolicyListResult",
    modelProperties: {
      value: {
        serializedName: "value",
        readOnly: true,
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "ServerBlobAuditingPolicy"
            }
          }
        }
      },
      nextLink: {
        serializedName: "nextLink",
        readOnly: true,
        type: {
          name: "String"
        }
      }
    }
  }
};

export const ExtendedServerBlobAuditingPolicyListResult: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "ExtendedServerBlobAuditingPolicyListResult",
    modelProperties: {
      value: {
        serializedName: "value",
        readOnly: true,
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "ExtendedServerBlobAuditingPolicy"
            }
          }
        }
      },
      nextLink: {
        serializedName: "nextLink",
        readOnly: true,
        type: {
          name: "String"
        }
      }
    }
  }
};

export const ServerSecurityAlertPolicyListResult: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "ServerSecurityAlertPolicyListResult",
    modelProperties: {
      value: {
        serializedName: "value",
        readOnly: true,
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "ServerSecurityAlertPolicy"
            }
          }
        }
      },
      nextLink: {
        serializedName: "nextLink",
        readOnly: true,
        type: {
          name: "String"
        }
      }
    }
  }
};

export const ServerVulnerabilityAssessmentListResult: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "ServerVulnerabilityAssessmentListResult",
    modelProperties: {
      value: {
        serializedName: "value",
        readOnly: true,
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "ServerVulnerabilityAssessment"
            }
          }
        }
      },
      nextLink: {
        serializedName: "nextLink",
        readOnly: true,
        type: {
          name: "String"
        }
      }
    }
  }
};

export const EncryptionProtectorListResult: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "EncryptionProtectorListResult",
    modelProperties: {
      value: {
        serializedName: "value",
        readOnly: true,
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "EncryptionProtector"
            }
          }
        }
      },
      nextLink: {
        serializedName: "nextLink",
        readOnly: true,
        type: {
          name: "String"
        }
      }
    }
  }
};

export const ServerUsageListResult: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "ServerUsageListResult",
    modelProperties: {
      value: {
        serializedName: "value",
        required: true,
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "ServerUsage"
            }
          }
        }
      },
      nextLink: {
        serializedName: "nextLink",
        readOnly: true,
        type: {
          name: "String"
        }
      }
    }
  }
};

export const ServerUsage: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "ServerUsage",
    modelProperties: {
      name: {
        serializedName: "name",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      resourceName: {
        serializedName: "resourceName",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      displayName: {
        serializedName: "displayName",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      currentValue: {
        serializedName: "currentValue",
        readOnly: true,
        type: {
          name: "Number"
        }
      },
      limit: {
        serializedName: "limit",
        readOnly: true,
        type: {
          name: "Number"
        }
      },
      unit: {
        serializedName: "unit",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      nextResetTime: {
        serializedName: "nextResetTime",
        readOnly: true,
        type: {
          name: "DateTime"
        }
      }
    }
  }
};

export const RecoverableSqlPoolListResult: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "RecoverableSqlPoolListResult",
    modelProperties: {
      value: {
        serializedName: "value",
        readOnly: true,
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "RecoverableSqlPool"
            }
          }
        }
      },
      nextLink: {
        serializedName: "nextLink",
        readOnly: true,
        type: {
          name: "String"
        }
      }
    }
  }
};

export const DedicatedSQLminimalTlsSettingsListResult: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "DedicatedSQLminimalTlsSettingsListResult",
    modelProperties: {
      value: {
        serializedName: "value",
        readOnly: true,
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "DedicatedSQLminimalTlsSettings"
            }
          }
        }
      },
      nextLink: {
        serializedName: "nextLink",
        readOnly: true,
        type: {
          name: "String"
        }
      }
    }
  }
};

export const WorkspaceInfoListResult: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "WorkspaceInfoListResult",
    modelProperties: {
      nextLink: {
        serializedName: "nextLink",
        type: {
          name: "String"
        }
      },
      value: {
        serializedName: "value",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "Workspace"
            }
          }
        }
      }
    }
  }
};

export const DataLakeStorageAccountDetails: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "DataLakeStorageAccountDetails",
    modelProperties: {
      accountUrl: {
        serializedName: "accountUrl",
        type: {
          name: "String"
        }
      },
      filesystem: {
        serializedName: "filesystem",
        type: {
          name: "String"
        }
      },
      resourceId: {
        serializedName: "resourceId",
        type: {
          name: "String"
        }
      },
      createManagedPrivateEndpoint: {
        serializedName: "createManagedPrivateEndpoint",
        type: {
          name: "Boolean"
        }
      }
    }
  }
};

export const VirtualNetworkProfile: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "VirtualNetworkProfile",
    modelProperties: {
      computeSubnetId: {
        serializedName: "computeSubnetId",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const EncryptionDetails: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "EncryptionDetails",
    modelProperties: {
      doubleEncryptionEnabled: {
        serializedName: "doubleEncryptionEnabled",
        readOnly: true,
        type: {
          name: "Boolean"
        }
      },
      cmk: {
        serializedName: "cmk",
        type: {
          name: "Composite",
          className: "CustomerManagedKeyDetails"
        }
      }
    }
  }
};

export const CustomerManagedKeyDetails: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "CustomerManagedKeyDetails",
    modelProperties: {
      status: {
        serializedName: "status",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      key: {
        serializedName: "key",
        type: {
          name: "Composite",
          className: "WorkspaceKeyDetails"
        }
      },
      kekIdentity: {
        serializedName: "kekIdentity",
        type: {
          name: "Composite",
          className: "KekIdentityProperties"
        }
      }
    }
  }
};

export const WorkspaceKeyDetails: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "WorkspaceKeyDetails",
    modelProperties: {
      name: {
        serializedName: "name",
        type: {
          name: "String"
        }
      },
      keyVaultUrl: {
        serializedName: "keyVaultUrl",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const KekIdentityProperties: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "KekIdentityProperties",
    modelProperties: {
      userAssignedIdentity: {
        serializedName: "userAssignedIdentity",
        type: {
          name: "String"
        }
      },
      useSystemAssignedIdentity: {
        serializedName: "useSystemAssignedIdentity",
        type: {
          name: "any"
        }
      }
    }
  }
};

export const ManagedVirtualNetworkSettings: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "ManagedVirtualNetworkSettings",
    modelProperties: {
      preventDataExfiltration: {
        serializedName: "preventDataExfiltration",
        type: {
          name: "Boolean"
        }
      },
      linkedAccessCheckOnTargetResource: {
        serializedName: "linkedAccessCheckOnTargetResource",
        type: {
          name: "Boolean"
        }
      },
      allowedAadTenantIdsForLinking: {
        serializedName: "allowedAadTenantIdsForLinking",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "String"
            }
          }
        }
      }
    }
  }
};

export const WorkspaceRepositoryConfiguration: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "WorkspaceRepositoryConfiguration",
    modelProperties: {
      type: {
        serializedName: "type",
        type: {
          name: "String"
        }
      },
      hostName: {
        serializedName: "hostName",
        type: {
          name: "String"
        }
      },
      accountName: {
        serializedName: "accountName",
        type: {
          name: "String"
        }
      },
      projectName: {
        serializedName: "projectName",
        type: {
          name: "String"
        }
      },
      repositoryName: {
        serializedName: "repositoryName",
        type: {
          name: "String"
        }
      },
      collaborationBranch: {
        serializedName: "collaborationBranch",
        type: {
          name: "String"
        }
      },
      rootFolder: {
        serializedName: "rootFolder",
        type: {
          name: "String"
        }
      },
      lastCommitId: {
        serializedName: "lastCommitId",
        type: {
          name: "String"
        }
      },
      tenantId: {
        serializedName: "tenantId",
        type: {
          name: "Uuid"
        }
      }
    }
  }
};

export const PurviewConfiguration: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "PurviewConfiguration",
    modelProperties: {
      purviewResourceId: {
        serializedName: "purviewResourceId",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const CspWorkspaceAdminProperties: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "CspWorkspaceAdminProperties",
    modelProperties: {
      initialWorkspaceAdminObjectId: {
        serializedName: "initialWorkspaceAdminObjectId",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const ManagedIdentity: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "ManagedIdentity",
    modelProperties: {
      principalId: {
        serializedName: "principalId",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      tenantId: {
        serializedName: "tenantId",
        readOnly: true,
        type: {
          name: "Uuid"
        }
      },
      type: {
        serializedName: "type",
        type: {
          name: "Enum",
          allowedValues: [
            "None",
            "SystemAssigned",
            "SystemAssigned,UserAssigned"
          ]
        }
      },
      userAssignedIdentities: {
        serializedName: "userAssignedIdentities",
        type: {
          name: "Dictionary",
          value: {
            type: {
              name: "Composite",
              className: "UserAssignedManagedIdentity"
            }
          }
        }
      }
    }
  }
};

export const UserAssignedManagedIdentity: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "UserAssignedManagedIdentity",
    modelProperties: {
      clientId: {
        serializedName: "clientId",
        readOnly: true,
        nullable: true,
        type: {
          name: "Uuid"
        }
      },
      principalId: {
        serializedName: "principalId",
        readOnly: true,
        nullable: true,
        type: {
          name: "Uuid"
        }
      }
    }
  }
};

export const WorkspacePatchInfo: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "WorkspacePatchInfo",
    modelProperties: {
      tags: {
        serializedName: "tags",
        type: {
          name: "Dictionary",
          value: { type: { name: "String" } }
        }
      },
      identity: {
        serializedName: "identity",
        type: {
          name: "Composite",
          className: "ManagedIdentity"
        }
      },
      sqlAdministratorLoginPassword: {
        serializedName: "properties.sqlAdministratorLoginPassword",
        type: {
          name: "String"
        }
      },
      managedVirtualNetworkSettings: {
        serializedName: "properties.managedVirtualNetworkSettings",
        type: {
          name: "Composite",
          className: "ManagedVirtualNetworkSettings"
        }
      },
      workspaceRepositoryConfiguration: {
        serializedName: "properties.workspaceRepositoryConfiguration",
        type: {
          name: "Composite",
          className: "WorkspaceRepositoryConfiguration"
        }
      },
      purviewConfiguration: {
        serializedName: "properties.purviewConfiguration",
        type: {
          name: "Composite",
          className: "PurviewConfiguration"
        }
      },
      provisioningState: {
        serializedName: "properties.provisioningState",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      encryption: {
        serializedName: "properties.encryption",
        type: {
          name: "Composite",
          className: "EncryptionDetails"
        }
      },
      publicNetworkAccess: {
        serializedName: "properties.publicNetworkAccess",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const ManagedIdentitySqlControlSettingsModelPropertiesGrantSqlControlToManagedIdentity: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className:
      "ManagedIdentitySqlControlSettingsModelPropertiesGrantSqlControlToManagedIdentity",
    modelProperties: {
      desiredState: {
        serializedName: "desiredState",
        type: {
          name: "String"
        }
      },
      actualState: {
        serializedName: "actualState",
        readOnly: true,
        type: {
          name: "String"
        }
      }
    }
  }
};

export const RestorableDroppedSqlPoolListResult: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "RestorableDroppedSqlPoolListResult",
    modelProperties: {
      value: {
        serializedName: "value",
        required: true,
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "RestorableDroppedSqlPool"
            }
          }
        }
      }
    }
  }
};

export const AutoScaleProperties: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "AutoScaleProperties",
    modelProperties: {
      minNodeCount: {
        serializedName: "minNodeCount",
        type: {
          name: "Number"
        }
      },
      enabled: {
        serializedName: "enabled",
        type: {
          name: "Boolean"
        }
      },
      maxNodeCount: {
        serializedName: "maxNodeCount",
        type: {
          name: "Number"
        }
      }
    }
  }
};

export const AutoPauseProperties: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "AutoPauseProperties",
    modelProperties: {
      delayInMinutes: {
        serializedName: "delayInMinutes",
        type: {
          name: "Number"
        }
      },
      enabled: {
        serializedName: "enabled",
        type: {
          name: "Boolean"
        }
      }
    }
  }
};

export const DynamicExecutorAllocation: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "DynamicExecutorAllocation",
    modelProperties: {
      enabled: {
        serializedName: "enabled",
        type: {
          name: "Boolean"
        }
      },
      minExecutors: {
        serializedName: "minExecutors",
        type: {
          name: "Number"
        }
      },
      maxExecutors: {
        serializedName: "maxExecutors",
        type: {
          name: "Number"
        }
      }
    }
  }
};

export const LibraryRequirements: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "LibraryRequirements",
    modelProperties: {
      time: {
        serializedName: "time",
        readOnly: true,
        type: {
          name: "DateTime"
        }
      },
      content: {
        serializedName: "content",
        type: {
          name: "String"
        }
      },
      filename: {
        serializedName: "filename",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const LibraryInfo: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "LibraryInfo",
    modelProperties: {
      name: {
        serializedName: "name",
        type: {
          name: "String"
        }
      },
      path: {
        serializedName: "path",
        type: {
          name: "String"
        }
      },
      containerName: {
        serializedName: "containerName",
        type: {
          name: "String"
        }
      },
      uploadedTimestamp: {
        serializedName: "uploadedTimestamp",
        type: {
          name: "DateTime"
        }
      },
      type: {
        serializedName: "type",
        type: {
          name: "String"
        }
      },
      provisioningStatus: {
        serializedName: "provisioningStatus",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      creatorId: {
        serializedName: "creatorId",
        readOnly: true,
        type: {
          name: "String"
        }
      }
    }
  }
};

export const SparkConfigProperties: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "SparkConfigProperties",
    modelProperties: {
      time: {
        serializedName: "time",
        readOnly: true,
        type: {
          name: "DateTime"
        }
      },
      content: {
        serializedName: "content",
        type: {
          name: "String"
        }
      },
      filename: {
        serializedName: "filename",
        type: {
          name: "String"
        }
      },
      configurationType: {
        serializedName: "configurationType",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const BigDataPoolPatchInfo: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "BigDataPoolPatchInfo",
    modelProperties: {
      tags: {
        serializedName: "tags",
        type: {
          name: "Dictionary",
          value: { type: { name: "String" } }
        }
      }
    }
  }
};

export const BigDataPoolResourceInfoListResult: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "BigDataPoolResourceInfoListResult",
    modelProperties: {
      nextLink: {
        serializedName: "nextLink",
        type: {
          name: "String"
        }
      },
      value: {
        serializedName: "value",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "BigDataPoolResourceInfo"
            }
          }
        }
      }
    }
  }
};

export const LibraryListResponse: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "LibraryListResponse",
    modelProperties: {
      value: {
        serializedName: "value",
        required: true,
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "LibraryResource"
            }
          }
        }
      },
      nextLink: {
        serializedName: "nextLink",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const UpdateIntegrationRuntimeRequest: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "UpdateIntegrationRuntimeRequest",
    modelProperties: {
      autoUpdate: {
        serializedName: "autoUpdate",
        type: {
          name: "String"
        }
      },
      updateDelayOffset: {
        serializedName: "updateDelayOffset",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const IntegrationRuntime: coreClient.CompositeMapper = {
  serializedName: "IntegrationRuntime",
  type: {
    name: "Composite",
    className: "IntegrationRuntime",
    uberParent: "IntegrationRuntime",
    additionalProperties: { type: { name: "Object" } },
    polymorphicDiscriminator: {
      serializedName: "type",
      clientName: "type"
    },
    modelProperties: {
      type: {
        serializedName: "type",
        required: true,
        type: {
          name: "String"
        }
      },
      description: {
        serializedName: "description",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const IntegrationRuntimeNodeIpAddress: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "IntegrationRuntimeNodeIpAddress",
    modelProperties: {
      ipAddress: {
        serializedName: "ipAddress",
        readOnly: true,
        type: {
          name: "String"
        }
      }
    }
  }
};

export const GetSsisObjectMetadataRequest: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "GetSsisObjectMetadataRequest",
    modelProperties: {
      metadataPath: {
        serializedName: "metadataPath",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const SsisObjectMetadataListResponse: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "SsisObjectMetadataListResponse",
    modelProperties: {
      value: {
        serializedName: "value",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "SsisObjectMetadata"
            }
          }
        }
      },
      nextLink: {
        serializedName: "nextLink",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const SsisObjectMetadata: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "SsisObjectMetadata",
    uberParent: "SsisObjectMetadata",
    polymorphicDiscriminator: {
      serializedName: "type",
      clientName: "type"
    },
    modelProperties: {
      type: {
        serializedName: "type",
        required: true,
        type: {
          name: "String"
        }
      },
      id: {
        serializedName: "id",
        type: {
          name: "Number"
        }
      },
      name: {
        serializedName: "name",
        type: {
          name: "String"
        }
      },
      description: {
        serializedName: "description",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const SelfHostedIntegrationRuntimeNode: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "SelfHostedIntegrationRuntimeNode",
    additionalProperties: { type: { name: "Object" } },
    modelProperties: {
      nodeName: {
        serializedName: "nodeName",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      machineName: {
        serializedName: "machineName",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      hostServiceUri: {
        serializedName: "hostServiceUri",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      status: {
        serializedName: "status",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      capabilities: {
        serializedName: "capabilities",
        readOnly: true,
        type: {
          name: "Dictionary",
          value: { type: { name: "String" } }
        }
      },
      versionStatus: {
        serializedName: "versionStatus",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      version: {
        serializedName: "version",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      registerTime: {
        serializedName: "registerTime",
        readOnly: true,
        type: {
          name: "DateTime"
        }
      },
      lastConnectTime: {
        serializedName: "lastConnectTime",
        readOnly: true,
        type: {
          name: "DateTime"
        }
      },
      expiryTime: {
        serializedName: "expiryTime",
        readOnly: true,
        type: {
          name: "DateTime"
        }
      },
      lastStartTime: {
        serializedName: "lastStartTime",
        readOnly: true,
        type: {
          name: "DateTime"
        }
      },
      lastStopTime: {
        serializedName: "lastStopTime",
        readOnly: true,
        type: {
          name: "DateTime"
        }
      },
      lastUpdateResult: {
        serializedName: "lastUpdateResult",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      lastStartUpdateTime: {
        serializedName: "lastStartUpdateTime",
        readOnly: true,
        type: {
          name: "DateTime"
        }
      },
      lastEndUpdateTime: {
        serializedName: "lastEndUpdateTime",
        readOnly: true,
        type: {
          name: "DateTime"
        }
      },
      isActiveDispatcher: {
        serializedName: "isActiveDispatcher",
        readOnly: true,
        type: {
          name: "Boolean"
        }
      },
      concurrentJobsLimit: {
        serializedName: "concurrentJobsLimit",
        readOnly: true,
        type: {
          name: "Number"
        }
      },
      maxConcurrentJobs: {
        serializedName: "maxConcurrentJobs",
        readOnly: true,
        type: {
          name: "Number"
        }
      }
    }
  }
};

export const UpdateIntegrationRuntimeNodeRequest: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "UpdateIntegrationRuntimeNodeRequest",
    modelProperties: {
      concurrentJobsLimit: {
        constraints: {
          InclusiveMinimum: 1
        },
        serializedName: "concurrentJobsLimit",
        type: {
          name: "Number"
        }
      }
    }
  }
};

export const IntegrationRuntimeListResponse: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "IntegrationRuntimeListResponse",
    modelProperties: {
      value: {
        serializedName: "value",
        required: true,
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "IntegrationRuntimeResource"
            }
          }
        }
      },
      nextLink: {
        serializedName: "nextLink",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const IntegrationRuntimeConnectionInfo: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "IntegrationRuntimeConnectionInfo",
    additionalProperties: { type: { name: "Object" } },
    modelProperties: {
      serviceToken: {
        serializedName: "serviceToken",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      identityCertThumbprint: {
        serializedName: "identityCertThumbprint",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      hostServiceUri: {
        serializedName: "hostServiceUri",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      version: {
        serializedName: "version",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      publicKey: {
        serializedName: "publicKey",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      isIdentityCertExprired: {
        serializedName: "isIdentityCertExprired",
        readOnly: true,
        type: {
          name: "Boolean"
        }
      }
    }
  }
};

export const IntegrationRuntimeStatusResponse: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "IntegrationRuntimeStatusResponse",
    modelProperties: {
      name: {
        serializedName: "name",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      properties: {
        serializedName: "properties",
        type: {
          name: "Composite",
          className: "IntegrationRuntimeStatus"
        }
      }
    }
  }
};

export const IntegrationRuntimeStatus: coreClient.CompositeMapper = {
  serializedName: "IntegrationRuntimeStatus",
  type: {
    name: "Composite",
    className: "IntegrationRuntimeStatus",
    uberParent: "IntegrationRuntimeStatus",
    additionalProperties: { type: { name: "Object" } },
    polymorphicDiscriminator: {
      serializedName: "type",
      clientName: "type"
    },
    modelProperties: {
      type: {
        serializedName: "type",
        required: true,
        type: {
          name: "String"
        }
      },
      dataFactoryName: {
        serializedName: "dataFactoryName",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      state: {
        serializedName: "state",
        readOnly: true,
        type: {
          name: "String"
        }
      }
    }
  }
};

export const IntegrationRuntimeRegenerateKeyParameters: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "IntegrationRuntimeRegenerateKeyParameters",
    modelProperties: {
      keyName: {
        serializedName: "keyName",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const IntegrationRuntimeAuthKeys: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "IntegrationRuntimeAuthKeys",
    modelProperties: {
      authKey1: {
        serializedName: "authKey1",
        type: {
          name: "String"
        }
      },
      authKey2: {
        serializedName: "authKey2",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const IntegrationRuntimeMonitoringData: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "IntegrationRuntimeMonitoringData",
    modelProperties: {
      name: {
        serializedName: "name",
        type: {
          name: "String"
        }
      },
      nodes: {
        serializedName: "nodes",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "IntegrationRuntimeNodeMonitoringData"
            }
          }
        }
      }
    }
  }
};

export const IntegrationRuntimeNodeMonitoringData: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "IntegrationRuntimeNodeMonitoringData",
    additionalProperties: { type: { name: "Object" } },
    modelProperties: {
      nodeName: {
        serializedName: "nodeName",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      availableMemoryInMB: {
        serializedName: "availableMemoryInMB",
        readOnly: true,
        type: {
          name: "Number"
        }
      },
      cpuUtilization: {
        serializedName: "cpuUtilization",
        readOnly: true,
        type: {
          name: "Number"
        }
      },
      concurrentJobsLimit: {
        serializedName: "concurrentJobsLimit",
        readOnly: true,
        type: {
          name: "Number"
        }
      },
      concurrentJobsRunning: {
        serializedName: "concurrentJobsRunning",
        readOnly: true,
        type: {
          name: "Number"
        }
      },
      maxConcurrentJobs: {
        serializedName: "maxConcurrentJobs",
        readOnly: true,
        type: {
          name: "Number"
        }
      },
      sentBytes: {
        serializedName: "sentBytes",
        readOnly: true,
        type: {
          name: "Number"
        }
      },
      receivedBytes: {
        serializedName: "receivedBytes",
        readOnly: true,
        type: {
          name: "Number"
        }
      }
    }
  }
};

export const SsisObjectMetadataStatusResponse: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "SsisObjectMetadataStatusResponse",
    modelProperties: {
      status: {
        serializedName: "status",
        type: {
          name: "String"
        }
      },
      name: {
        serializedName: "name",
        type: {
          name: "String"
        }
      },
      properties: {
        serializedName: "properties",
        type: {
          name: "String"
        }
      },
      error: {
        serializedName: "error",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const IntegrationRuntimeOutboundNetworkDependenciesEndpointsResponse: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "IntegrationRuntimeOutboundNetworkDependenciesEndpointsResponse",
    modelProperties: {
      value: {
        serializedName: "value",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className:
                "IntegrationRuntimeOutboundNetworkDependenciesCategoryEndpoint"
            }
          }
        }
      }
    }
  }
};

export const IntegrationRuntimeOutboundNetworkDependenciesCategoryEndpoint: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "IntegrationRuntimeOutboundNetworkDependenciesCategoryEndpoint",
    modelProperties: {
      category: {
        serializedName: "category",
        type: {
          name: "String"
        }
      },
      endpoints: {
        serializedName: "endpoints",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "IntegrationRuntimeOutboundNetworkDependenciesEndpoint"
            }
          }
        }
      }
    }
  }
};

export const IntegrationRuntimeOutboundNetworkDependenciesEndpoint: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "IntegrationRuntimeOutboundNetworkDependenciesEndpoint",
    modelProperties: {
      domainName: {
        serializedName: "domainName",
        type: {
          name: "String"
        }
      },
      endpointDetails: {
        serializedName: "endpointDetails",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className:
                "IntegrationRuntimeOutboundNetworkDependenciesEndpointDetails"
            }
          }
        }
      }
    }
  }
};

export const IntegrationRuntimeOutboundNetworkDependenciesEndpointDetails: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "IntegrationRuntimeOutboundNetworkDependenciesEndpointDetails",
    modelProperties: {
      port: {
        serializedName: "port",
        type: {
          name: "Number"
        }
      }
    }
  }
};

export const SparkConfigurationListResponse: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "SparkConfigurationListResponse",
    modelProperties: {
      value: {
        serializedName: "value",
        required: true,
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "SparkConfigurationResource"
            }
          }
        }
      },
      nextLink: {
        serializedName: "nextLink",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const OperationListResult: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "OperationListResult",
    modelProperties: {
      value: {
        serializedName: "value",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "Operation"
            }
          }
        }
      },
      nextLink: {
        serializedName: "nextLink",
        readOnly: true,
        type: {
          name: "String"
        }
      }
    }
  }
};

export const Operation: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "Operation",
    modelProperties: {
      name: {
        serializedName: "name",
        type: {
          name: "String"
        }
      },
      display: {
        serializedName: "display",
        type: {
          name: "Composite",
          className: "OperationDisplay"
        }
      },
      origin: {
        serializedName: "origin",
        type: {
          name: "String"
        }
      },
      properties: {
        serializedName: "properties",
        type: {
          name: "Dictionary",
          value: { type: { name: "any" } }
        }
      }
    }
  }
};

export const OperationDisplay: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "OperationDisplay",
    modelProperties: {
      provider: {
        serializedName: "provider",
        type: {
          name: "String"
        }
      },
      operation: {
        serializedName: "operation",
        type: {
          name: "String"
        }
      },
      resource: {
        serializedName: "resource",
        type: {
          name: "String"
        }
      },
      description: {
        serializedName: "description",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const SkuDescriptionList: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "SkuDescriptionList",
    modelProperties: {
      value: {
        serializedName: "value",
        readOnly: true,
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "SkuDescription"
            }
          }
        }
      }
    }
  }
};

export const SkuDescription: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "SkuDescription",
    modelProperties: {
      resourceType: {
        serializedName: "resourceType",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      name: {
        serializedName: "name",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      size: {
        serializedName: "size",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      locations: {
        serializedName: "locations",
        readOnly: true,
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "String"
            }
          }
        }
      },
      locationInfo: {
        serializedName: "locationInfo",
        readOnly: true,
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "SkuLocationInfoItem"
            }
          }
        }
      },
      restrictions: {
        serializedName: "restrictions",
        readOnly: true,
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Dictionary",
              value: { type: { name: "any" } }
            }
          }
        }
      }
    }
  }
};

export const SkuLocationInfoItem: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "SkuLocationInfoItem",
    modelProperties: {
      location: {
        serializedName: "location",
        required: true,
        type: {
          name: "String"
        }
      },
      zones: {
        serializedName: "zones",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "String"
            }
          }
        }
      }
    }
  }
};

export const KustoPoolCheckNameRequest: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "KustoPoolCheckNameRequest",
    modelProperties: {
      name: {
        serializedName: "name",
        required: true,
        type: {
          name: "String"
        }
      },
      type: {
        defaultValue: "Microsoft.Synapse/workspaces/kustoPools",
        isConstant: true,
        serializedName: "type",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const CheckNameResult: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "CheckNameResult",
    modelProperties: {
      nameAvailable: {
        serializedName: "nameAvailable",
        type: {
          name: "Boolean"
        }
      },
      name: {
        serializedName: "name",
        type: {
          name: "String"
        }
      },
      message: {
        serializedName: "message",
        type: {
          name: "String"
        }
      },
      reason: {
        serializedName: "reason",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const KustoPoolListResult: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "KustoPoolListResult",
    modelProperties: {
      value: {
        serializedName: "value",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "KustoPool"
            }
          }
        }
      }
    }
  }
};

export const AzureSku: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "AzureSku",
    modelProperties: {
      name: {
        serializedName: "name",
        required: true,
        type: {
          name: "String"
        }
      },
      capacity: {
        serializedName: "capacity",
        type: {
          name: "Number"
        }
      },
      size: {
        serializedName: "size",
        required: true,
        type: {
          name: "String"
        }
      }
    }
  }
};

export const OptimizedAutoscale: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "OptimizedAutoscale",
    modelProperties: {
      version: {
        serializedName: "version",
        required: true,
        type: {
          name: "Number"
        }
      },
      isEnabled: {
        serializedName: "isEnabled",
        required: true,
        type: {
          name: "Boolean"
        }
      },
      minimum: {
        serializedName: "minimum",
        required: true,
        type: {
          name: "Number"
        }
      },
      maximum: {
        serializedName: "maximum",
        required: true,
        type: {
          name: "Number"
        }
      }
    }
  }
};

export const LanguageExtensionsList: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "LanguageExtensionsList",
    modelProperties: {
      value: {
        serializedName: "value",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "LanguageExtension"
            }
          }
        }
      }
    }
  }
};

export const LanguageExtension: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "LanguageExtension",
    modelProperties: {
      languageExtensionName: {
        serializedName: "languageExtensionName",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const SystemData: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "SystemData",
    modelProperties: {
      createdBy: {
        serializedName: "createdBy",
        type: {
          name: "String"
        }
      },
      createdByType: {
        serializedName: "createdByType",
        type: {
          name: "String"
        }
      },
      createdAt: {
        serializedName: "createdAt",
        type: {
          name: "DateTime"
        }
      },
      lastModifiedBy: {
        serializedName: "lastModifiedBy",
        type: {
          name: "String"
        }
      },
      lastModifiedByType: {
        serializedName: "lastModifiedByType",
        type: {
          name: "String"
        }
      },
      lastModifiedAt: {
        serializedName: "lastModifiedAt",
        type: {
          name: "DateTime"
        }
      }
    }
  }
};

export const ListResourceSkusResult: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "ListResourceSkusResult",
    modelProperties: {
      value: {
        serializedName: "value",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "AzureResourceSku"
            }
          }
        }
      }
    }
  }
};

export const AzureResourceSku: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "AzureResourceSku",
    modelProperties: {
      resourceType: {
        serializedName: "resourceType",
        type: {
          name: "String"
        }
      },
      sku: {
        serializedName: "sku",
        type: {
          name: "Composite",
          className: "AzureSku"
        }
      },
      capacity: {
        serializedName: "capacity",
        type: {
          name: "Composite",
          className: "AzureCapacity"
        }
      }
    }
  }
};

export const AzureCapacity: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "AzureCapacity",
    modelProperties: {
      scaleType: {
        serializedName: "scaleType",
        required: true,
        type: {
          name: "String"
        }
      },
      minimum: {
        serializedName: "minimum",
        required: true,
        type: {
          name: "Number"
        }
      },
      maximum: {
        serializedName: "maximum",
        required: true,
        type: {
          name: "Number"
        }
      },
      default: {
        serializedName: "default",
        required: true,
        type: {
          name: "Number"
        }
      }
    }
  }
};

export const DatabaseCheckNameRequest: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "DatabaseCheckNameRequest",
    modelProperties: {
      name: {
        serializedName: "name",
        required: true,
        type: {
          name: "String"
        }
      },
      type: {
        serializedName: "type",
        required: true,
        type: {
          name: "Enum",
          allowedValues: [
            "Microsoft.Synapse/workspaces/kustoPools/databases",
            "Microsoft.Synapse/workspaces/kustoPools/attachedDatabaseConfigurations"
          ]
        }
      }
    }
  }
};

export const FollowerDatabaseListResult: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "FollowerDatabaseListResult",
    modelProperties: {
      value: {
        serializedName: "value",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "FollowerDatabaseDefinition"
            }
          }
        }
      }
    }
  }
};

export const FollowerDatabaseDefinition: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "FollowerDatabaseDefinition",
    modelProperties: {
      kustoPoolResourceId: {
        serializedName: "clusterResourceId",
        required: true,
        type: {
          name: "String"
        }
      },
      attachedDatabaseConfigurationName: {
        serializedName: "attachedDatabaseConfigurationName",
        required: true,
        type: {
          name: "String"
        }
      },
      databaseName: {
        serializedName: "databaseName",
        readOnly: true,
        type: {
          name: "String"
        }
      }
    }
  }
};

export const AttachedDatabaseConfigurationListResult: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "AttachedDatabaseConfigurationListResult",
    modelProperties: {
      value: {
        serializedName: "value",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "AttachedDatabaseConfiguration"
            }
          }
        }
      }
    }
  }
};

export const TableLevelSharingProperties: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "TableLevelSharingProperties",
    modelProperties: {
      tablesToInclude: {
        serializedName: "tablesToInclude",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "String"
            }
          }
        }
      },
      tablesToExclude: {
        serializedName: "tablesToExclude",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "String"
            }
          }
        }
      },
      externalTablesToInclude: {
        serializedName: "externalTablesToInclude",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "String"
            }
          }
        }
      },
      externalTablesToExclude: {
        serializedName: "externalTablesToExclude",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "String"
            }
          }
        }
      },
      materializedViewsToInclude: {
        serializedName: "materializedViewsToInclude",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "String"
            }
          }
        }
      },
      materializedViewsToExclude: {
        serializedName: "materializedViewsToExclude",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "String"
            }
          }
        }
      }
    }
  }
};

export const DatabaseListResult: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "DatabaseListResult",
    modelProperties: {
      value: {
        serializedName: "value",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "Database"
            }
          }
        }
      }
    }
  }
};

export const DataConnectionCheckNameRequest: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "DataConnectionCheckNameRequest",
    modelProperties: {
      name: {
        serializedName: "name",
        required: true,
        type: {
          name: "String"
        }
      },
      type: {
        defaultValue:
          "Microsoft.Synapse/workspaces/kustoPools/databases/dataConnections",
        isConstant: true,
        serializedName: "type",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const DataConnectionValidation: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "DataConnectionValidation",
    modelProperties: {
      dataConnectionName: {
        serializedName: "dataConnectionName",
        type: {
          name: "String"
        }
      },
      properties: {
        serializedName: "properties",
        type: {
          name: "Composite",
          className: "DataConnection"
        }
      }
    }
  }
};

export const DataConnectionValidationListResult: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "DataConnectionValidationListResult",
    modelProperties: {
      value: {
        serializedName: "value",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "DataConnectionValidationResult"
            }
          }
        }
      }
    }
  }
};

export const DataConnectionValidationResult: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "DataConnectionValidationResult",
    modelProperties: {
      errorMessage: {
        serializedName: "errorMessage",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const DataConnectionListResult: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "DataConnectionListResult",
    modelProperties: {
      value: {
        serializedName: "value",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "DataConnection"
            }
          }
        }
      }
    }
  }
};

export const ClusterPrincipalAssignmentCheckNameRequest: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "ClusterPrincipalAssignmentCheckNameRequest",
    modelProperties: {
      name: {
        serializedName: "name",
        required: true,
        type: {
          name: "String"
        }
      },
      type: {
        defaultValue:
          "Microsoft.Synapse/workspaces/kustoPools/principalAssignments",
        isConstant: true,
        serializedName: "type",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const ClusterPrincipalAssignmentListResult: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "ClusterPrincipalAssignmentListResult",
    modelProperties: {
      value: {
        serializedName: "value",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "ClusterPrincipalAssignment"
            }
          }
        }
      }
    }
  }
};

export const DatabasePrincipalAssignmentCheckNameRequest: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "DatabasePrincipalAssignmentCheckNameRequest",
    modelProperties: {
      name: {
        serializedName: "name",
        required: true,
        type: {
          name: "String"
        }
      },
      type: {
        defaultValue:
          "Microsoft.Synapse/workspaces/kustoPools/databases/principalAssignments",
        isConstant: true,
        serializedName: "type",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const DatabasePrincipalAssignmentListResult: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "DatabasePrincipalAssignmentListResult",
    modelProperties: {
      value: {
        serializedName: "value",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "DatabasePrincipalAssignment"
            }
          }
        }
      }
    }
  }
};

export const TopQueries: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "TopQueries",
    modelProperties: {
      aggregationFunction: {
        serializedName: "aggregationFunction",
        readOnly: true,
        type: {
          name: "Enum",
          allowedValues: ["min", "max", "avg", "sum"]
        }
      },
      executionType: {
        serializedName: "executionType",
        readOnly: true,
        type: {
          name: "Enum",
          allowedValues: ["any", "regular", "irregular", "aborted", "exception"]
        }
      },
      intervalType: {
        serializedName: "intervalType",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      numberOfTopQueries: {
        serializedName: "numberOfTopQueries",
        readOnly: true,
        type: {
          name: "Number"
        }
      },
      observationStartTime: {
        serializedName: "observationStartTime",
        readOnly: true,
        type: {
          name: "DateTime"
        }
      },
      observationEndTime: {
        serializedName: "observationEndTime",
        readOnly: true,
        type: {
          name: "DateTime"
        }
      },
      observedMetric: {
        serializedName: "observedMetric",
        readOnly: true,
        type: {
          name: "Enum",
          allowedValues: ["cpu", "io", "logio", "duration", "executionCount"]
        }
      },
      queries: {
        serializedName: "queries",
        readOnly: true,
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "QueryStatistic"
            }
          }
        }
      }
    }
  }
};

export const QueryStatistic: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "QueryStatistic",
    modelProperties: {
      queryId: {
        serializedName: "queryId",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      intervals: {
        serializedName: "intervals",
        readOnly: true,
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "QueryInterval"
            }
          }
        }
      }
    }
  }
};

export const QueryInterval: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "QueryInterval",
    modelProperties: {
      intervalStartTime: {
        serializedName: "intervalStartTime",
        readOnly: true,
        type: {
          name: "DateTime"
        }
      },
      executionCount: {
        serializedName: "executionCount",
        readOnly: true,
        type: {
          name: "Number"
        }
      },
      metrics: {
        serializedName: "metrics",
        readOnly: true,
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "QueryMetric"
            }
          }
        }
      }
    }
  }
};

export const QueryMetric: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "QueryMetric",
    modelProperties: {
      name: {
        serializedName: "name",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      displayName: {
        serializedName: "displayName",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      unit: {
        serializedName: "unit",
        readOnly: true,
        type: {
          name: "Enum",
          allowedValues: ["percentage", "KB", "microseconds"]
        }
      },
      value: {
        serializedName: "value",
        readOnly: true,
        type: {
          name: "Number"
        }
      }
    }
  }
};

export const TopQueriesListResult: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "TopQueriesListResult",
    modelProperties: {
      value: {
        serializedName: "value",
        required: true,
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "TopQueries"
            }
          }
        }
      }
    }
  }
};

export const DedicatedSQLminimalTlsSettingsPatchInfo: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "DedicatedSQLminimalTlsSettingsPatchInfo",
    modelProperties: {
      minimalTlsVersion: {
        serializedName: "minimalTlsVersion",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const IntegrationRuntimeComputeProperties: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "IntegrationRuntimeComputeProperties",
    additionalProperties: { type: { name: "Object" } },
    modelProperties: {
      location: {
        serializedName: "location",
        type: {
          name: "String"
        }
      },
      nodeSize: {
        serializedName: "nodeSize",
        type: {
          name: "String"
        }
      },
      numberOfNodes: {
        constraints: {
          InclusiveMinimum: 1
        },
        serializedName: "numberOfNodes",
        type: {
          name: "Number"
        }
      },
      maxParallelExecutionsPerNode: {
        constraints: {
          InclusiveMinimum: 1
        },
        serializedName: "maxParallelExecutionsPerNode",
        type: {
          name: "Number"
        }
      },
      dataFlowProperties: {
        serializedName: "dataFlowProperties",
        type: {
          name: "Composite",
          className: "IntegrationRuntimeDataFlowProperties"
        }
      },
      vNetProperties: {
        serializedName: "vNetProperties",
        type: {
          name: "Composite",
          className: "IntegrationRuntimeVNetProperties"
        }
      }
    }
  }
};

export const IntegrationRuntimeDataFlowProperties: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "IntegrationRuntimeDataFlowProperties",
    additionalProperties: { type: { name: "Object" } },
    modelProperties: {
      computeType: {
        serializedName: "computeType",
        type: {
          name: "String"
        }
      },
      coreCount: {
        serializedName: "coreCount",
        type: {
          name: "Number"
        }
      },
      timeToLive: {
        constraints: {
          InclusiveMinimum: 0
        },
        serializedName: "timeToLive",
        type: {
          name: "Number"
        }
      },
      cleanup: {
        serializedName: "cleanup",
        type: {
          name: "Boolean"
        }
      }
    }
  }
};

export const IntegrationRuntimeVNetProperties: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "IntegrationRuntimeVNetProperties",
    additionalProperties: { type: { name: "Object" } },
    modelProperties: {
      vNetId: {
        serializedName: "vNetId",
        type: {
          name: "String"
        }
      },
      subnet: {
        serializedName: "subnet",
        type: {
          name: "String"
        }
      },
      publicIPs: {
        serializedName: "publicIPs",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "String"
            }
          }
        }
      },
      subnetId: {
        serializedName: "subnetId",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const IntegrationRuntimeSsisProperties: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "IntegrationRuntimeSsisProperties",
    additionalProperties: { type: { name: "Object" } },
    modelProperties: {
      catalogInfo: {
        serializedName: "catalogInfo",
        type: {
          name: "Composite",
          className: "IntegrationRuntimeSsisCatalogInfo"
        }
      },
      licenseType: {
        serializedName: "licenseType",
        type: {
          name: "String"
        }
      },
      customSetupScriptProperties: {
        serializedName: "customSetupScriptProperties",
        type: {
          name: "Composite",
          className: "IntegrationRuntimeCustomSetupScriptProperties"
        }
      },
      dataProxyProperties: {
        serializedName: "dataProxyProperties",
        type: {
          name: "Composite",
          className: "IntegrationRuntimeDataProxyProperties"
        }
      },
      edition: {
        serializedName: "edition",
        type: {
          name: "String"
        }
      },
      expressCustomSetupProperties: {
        serializedName: "expressCustomSetupProperties",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "CustomSetupBase"
            }
          }
        }
      }
    }
  }
};

export const IntegrationRuntimeSsisCatalogInfo: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "IntegrationRuntimeSsisCatalogInfo",
    additionalProperties: { type: { name: "Object" } },
    modelProperties: {
      catalogServerEndpoint: {
        serializedName: "catalogServerEndpoint",
        type: {
          name: "String"
        }
      },
      catalogAdminUserName: {
        constraints: {
          MaxLength: 128,
          MinLength: 1
        },
        serializedName: "catalogAdminUserName",
        type: {
          name: "String"
        }
      },
      catalogAdminPassword: {
        serializedName: "catalogAdminPassword",
        type: {
          name: "Composite",
          className: "SecureString"
        }
      },
      catalogPricingTier: {
        serializedName: "catalogPricingTier",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const SecretBase: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "SecretBase",
    uberParent: "SecretBase",
    polymorphicDiscriminator: {
      serializedName: "type",
      clientName: "type"
    },
    modelProperties: {
      type: {
        serializedName: "type",
        required: true,
        type: {
          name: "String"
        }
      }
    }
  }
};

export const IntegrationRuntimeCustomSetupScriptProperties: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "IntegrationRuntimeCustomSetupScriptProperties",
    modelProperties: {
      blobContainerUri: {
        serializedName: "blobContainerUri",
        type: {
          name: "String"
        }
      },
      sasToken: {
        serializedName: "sasToken",
        type: {
          name: "Composite",
          className: "SecureString"
        }
      }
    }
  }
};

export const IntegrationRuntimeDataProxyProperties: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "IntegrationRuntimeDataProxyProperties",
    modelProperties: {
      connectVia: {
        serializedName: "connectVia",
        type: {
          name: "Composite",
          className: "EntityReference"
        }
      },
      stagingLinkedService: {
        serializedName: "stagingLinkedService",
        type: {
          name: "Composite",
          className: "EntityReference"
        }
      },
      path: {
        serializedName: "path",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const EntityReference: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "EntityReference",
    modelProperties: {
      type: {
        serializedName: "type",
        type: {
          name: "String"
        }
      },
      referenceName: {
        serializedName: "referenceName",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const CustomSetupBase: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "CustomSetupBase",
    uberParent: "CustomSetupBase",
    polymorphicDiscriminator: {
      serializedName: "type",
      clientName: "type"
    },
    modelProperties: {
      type: {
        serializedName: "type",
        required: true,
        type: {
          name: "String"
        }
      }
    }
  }
};

export const LinkedIntegrationRuntimeType: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "LinkedIntegrationRuntimeType",
    uberParent: "LinkedIntegrationRuntimeType",
    polymorphicDiscriminator: {
      serializedName: "authorizationType",
      clientName: "authorizationType"
    },
    modelProperties: {
      authorizationType: {
        serializedName: "authorizationType",
        required: true,
        type: {
          name: "String"
        }
      }
    }
  }
};

export const ManagedIntegrationRuntimeNode: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "ManagedIntegrationRuntimeNode",
    additionalProperties: { type: { name: "Object" } },
    modelProperties: {
      nodeId: {
        serializedName: "nodeId",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      status: {
        serializedName: "status",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      errors: {
        serializedName: "errors",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "ManagedIntegrationRuntimeError"
            }
          }
        }
      }
    }
  }
};

export const ManagedIntegrationRuntimeError: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "ManagedIntegrationRuntimeError",
    additionalProperties: { type: { name: "Object" } },
    modelProperties: {
      time: {
        serializedName: "time",
        readOnly: true,
        type: {
          name: "DateTime"
        }
      },
      code: {
        serializedName: "code",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      parameters: {
        serializedName: "parameters",
        readOnly: true,
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "String"
            }
          }
        }
      },
      message: {
        serializedName: "message",
        readOnly: true,
        type: {
          name: "String"
        }
      }
    }
  }
};

export const ManagedIntegrationRuntimeOperationResult: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "ManagedIntegrationRuntimeOperationResult",
    additionalProperties: { type: { name: "Object" } },
    modelProperties: {
      type: {
        serializedName: "type",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      startTime: {
        serializedName: "startTime",
        readOnly: true,
        type: {
          name: "DateTime"
        }
      },
      result: {
        serializedName: "result",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      errorCode: {
        serializedName: "errorCode",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      parameters: {
        serializedName: "parameters",
        readOnly: true,
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "String"
            }
          }
        }
      },
      activityId: {
        serializedName: "activityId",
        readOnly: true,
        type: {
          name: "String"
        }
      }
    }
  }
};

export const LinkedIntegrationRuntime: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "LinkedIntegrationRuntime",
    modelProperties: {
      name: {
        serializedName: "name",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      subscriptionId: {
        serializedName: "subscriptionId",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      dataFactoryName: {
        serializedName: "dataFactoryName",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      dataFactoryLocation: {
        serializedName: "dataFactoryLocation",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      createTime: {
        serializedName: "createTime",
        readOnly: true,
        type: {
          name: "DateTime"
        }
      }
    }
  }
};

export const SsisEnvironmentReference: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "SsisEnvironmentReference",
    modelProperties: {
      id: {
        serializedName: "id",
        type: {
          name: "Number"
        }
      },
      environmentFolderName: {
        serializedName: "environmentFolderName",
        type: {
          name: "String"
        }
      },
      environmentName: {
        serializedName: "environmentName",
        type: {
          name: "String"
        }
      },
      referenceType: {
        serializedName: "referenceType",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const SsisParameter: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "SsisParameter",
    modelProperties: {
      id: {
        serializedName: "id",
        type: {
          name: "Number"
        }
      },
      name: {
        serializedName: "name",
        type: {
          name: "String"
        }
      },
      description: {
        serializedName: "description",
        type: {
          name: "String"
        }
      },
      dataType: {
        serializedName: "dataType",
        type: {
          name: "String"
        }
      },
      required: {
        serializedName: "required",
        type: {
          name: "Boolean"
        }
      },
      sensitive: {
        serializedName: "sensitive",
        type: {
          name: "Boolean"
        }
      },
      designDefaultValue: {
        serializedName: "designDefaultValue",
        type: {
          name: "String"
        }
      },
      defaultValue: {
        serializedName: "defaultValue",
        type: {
          name: "String"
        }
      },
      sensitiveDefaultValue: {
        serializedName: "sensitiveDefaultValue",
        type: {
          name: "String"
        }
      },
      valueType: {
        serializedName: "valueType",
        type: {
          name: "String"
        }
      },
      valueSet: {
        serializedName: "valueSet",
        type: {
          name: "Boolean"
        }
      },
      variable: {
        serializedName: "variable",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const SsisVariable: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "SsisVariable",
    modelProperties: {
      id: {
        serializedName: "id",
        type: {
          name: "Number"
        }
      },
      name: {
        serializedName: "name",
        type: {
          name: "String"
        }
      },
      description: {
        serializedName: "description",
        type: {
          name: "String"
        }
      },
      dataType: {
        serializedName: "dataType",
        type: {
          name: "String"
        }
      },
      sensitive: {
        serializedName: "sensitive",
        type: {
          name: "Boolean"
        }
      },
      value: {
        serializedName: "value",
        type: {
          name: "String"
        }
      },
      sensitiveValue: {
        serializedName: "sensitiveValue",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const DatabaseStatistics: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "DatabaseStatistics",
    modelProperties: {
      size: {
        serializedName: "size",
        type: {
          name: "Number"
        }
      }
    }
  }
};

export const ProxyResource: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "ProxyResource",
    modelProperties: {
      ...Resource.type.modelProperties
    }
  }
};

export const TrackedResource: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "TrackedResource",
    modelProperties: {
      ...Resource.type.modelProperties,
      tags: {
        serializedName: "tags",
        type: {
          name: "Dictionary",
          value: { type: { name: "String" } }
        }
      },
      location: {
        serializedName: "location",
        required: true,
        type: {
          name: "String"
        }
      }
    }
  }
};

export const AzureEntityResource: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "AzureEntityResource",
    modelProperties: {
      ...Resource.type.modelProperties,
      etag: {
        serializedName: "etag",
        readOnly: true,
        type: {
          name: "String"
        }
      }
    }
  }
};

export const KustoPoolUpdate: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "KustoPoolUpdate",
    modelProperties: {
      ...Resource.type.modelProperties,
      tags: {
        serializedName: "tags",
        type: {
          name: "Dictionary",
          value: { type: { name: "String" } }
        }
      },
      sku: {
        serializedName: "sku",
        type: {
          name: "Composite",
          className: "AzureSku"
        }
      },
      state: {
        serializedName: "properties.state",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      provisioningState: {
        serializedName: "properties.provisioningState",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      uri: {
        serializedName: "properties.uri",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      dataIngestionUri: {
        serializedName: "properties.dataIngestionUri",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      stateReason: {
        serializedName: "properties.stateReason",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      optimizedAutoscale: {
        serializedName: "properties.optimizedAutoscale",
        type: {
          name: "Composite",
          className: "OptimizedAutoscale"
        }
      },
      enableStreamingIngest: {
        defaultValue: false,
        serializedName: "properties.enableStreamingIngest",
        type: {
          name: "Boolean"
        }
      },
      enablePurge: {
        defaultValue: false,
        serializedName: "properties.enablePurge",
        type: {
          name: "Boolean"
        }
      },
      languageExtensions: {
        serializedName: "properties.languageExtensions",
        type: {
          name: "Composite",
          className: "LanguageExtensionsList"
        }
      },
      workspaceUID: {
        serializedName: "properties.workspaceUID",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const PrivateEndpointConnectionForPrivateLinkHub: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "PrivateEndpointConnectionForPrivateLinkHub",
    modelProperties: {
      ...PrivateEndpointConnectionForPrivateLinkHubBasicAutoGenerated.type
        .modelProperties,
      name: {
        serializedName: "name",
        type: {
          name: "String"
        }
      },
      type: {
        serializedName: "type",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const ManagedIntegrationRuntime: coreClient.CompositeMapper = {
  serializedName: "Managed",
  type: {
    name: "Composite",
    className: "ManagedIntegrationRuntime",
    uberParent: "IntegrationRuntime",
    additionalProperties: { type: { name: "Object" } },
    polymorphicDiscriminator: IntegrationRuntime.type.polymorphicDiscriminator,
    modelProperties: {
      ...IntegrationRuntime.type.modelProperties,
      state: {
        serializedName: "state",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      referenceName: {
        serializedName: "managedVirtualNetwork.referenceName",
        type: {
          name: "String"
        }
      },
      typeManagedVirtualNetworkType: {
        serializedName: "managedVirtualNetwork.type",
        type: {
          name: "String"
        }
      },
      id: {
        serializedName: "managedVirtualNetwork.id",
        type: {
          name: "String"
        }
      },
      computeProperties: {
        serializedName: "typeProperties.computeProperties",
        type: {
          name: "Composite",
          className: "IntegrationRuntimeComputeProperties"
        }
      },
      ssisProperties: {
        serializedName: "typeProperties.ssisProperties",
        type: {
          name: "Composite",
          className: "IntegrationRuntimeSsisProperties"
        }
      }
    }
  }
};

export const SelfHostedIntegrationRuntime: coreClient.CompositeMapper = {
  serializedName: "SelfHosted",
  type: {
    name: "Composite",
    className: "SelfHostedIntegrationRuntime",
    uberParent: "IntegrationRuntime",
    additionalProperties: { type: { name: "Object" } },
    polymorphicDiscriminator: IntegrationRuntime.type.polymorphicDiscriminator,
    modelProperties: {
      ...IntegrationRuntime.type.modelProperties,
      linkedInfo: {
        serializedName: "typeProperties.linkedInfo",
        type: {
          name: "Composite",
          className: "LinkedIntegrationRuntimeType"
        }
      }
    }
  }
};

export const SsisFolder: coreClient.CompositeMapper = {
  serializedName: "Folder",
  type: {
    name: "Composite",
    className: "SsisFolder",
    uberParent: "SsisObjectMetadata",
    polymorphicDiscriminator: SsisObjectMetadata.type.polymorphicDiscriminator,
    modelProperties: {
      ...SsisObjectMetadata.type.modelProperties
    }
  }
};

export const SsisProject: coreClient.CompositeMapper = {
  serializedName: "Project",
  type: {
    name: "Composite",
    className: "SsisProject",
    uberParent: "SsisObjectMetadata",
    polymorphicDiscriminator: SsisObjectMetadata.type.polymorphicDiscriminator,
    modelProperties: {
      ...SsisObjectMetadata.type.modelProperties,
      folderId: {
        serializedName: "folderId",
        type: {
          name: "Number"
        }
      },
      version: {
        serializedName: "version",
        type: {
          name: "Number"
        }
      },
      environmentRefs: {
        serializedName: "environmentRefs",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "SsisEnvironmentReference"
            }
          }
        }
      },
      parameters: {
        serializedName: "parameters",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "SsisParameter"
            }
          }
        }
      }
    }
  }
};

export const SsisPackage: coreClient.CompositeMapper = {
  serializedName: "Package",
  type: {
    name: "Composite",
    className: "SsisPackage",
    uberParent: "SsisObjectMetadata",
    polymorphicDiscriminator: SsisObjectMetadata.type.polymorphicDiscriminator,
    modelProperties: {
      ...SsisObjectMetadata.type.modelProperties,
      folderId: {
        serializedName: "folderId",
        type: {
          name: "Number"
        }
      },
      projectVersion: {
        serializedName: "projectVersion",
        type: {
          name: "Number"
        }
      },
      projectId: {
        serializedName: "projectId",
        type: {
          name: "Number"
        }
      },
      parameters: {
        serializedName: "parameters",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "SsisParameter"
            }
          }
        }
      }
    }
  }
};

export const SsisEnvironment: coreClient.CompositeMapper = {
  serializedName: "Environment",
  type: {
    name: "Composite",
    className: "SsisEnvironment",
    uberParent: "SsisObjectMetadata",
    polymorphicDiscriminator: SsisObjectMetadata.type.polymorphicDiscriminator,
    modelProperties: {
      ...SsisObjectMetadata.type.modelProperties,
      folderId: {
        serializedName: "folderId",
        type: {
          name: "Number"
        }
      },
      variables: {
        serializedName: "variables",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "SsisVariable"
            }
          }
        }
      }
    }
  }
};

export const ManagedIntegrationRuntimeStatus: coreClient.CompositeMapper = {
  serializedName: "Managed",
  type: {
    name: "Composite",
    className: "ManagedIntegrationRuntimeStatus",
    uberParent: "IntegrationRuntimeStatus",
    additionalProperties: { type: { name: "Object" } },
    polymorphicDiscriminator:
      IntegrationRuntimeStatus.type.polymorphicDiscriminator,
    modelProperties: {
      ...IntegrationRuntimeStatus.type.modelProperties,
      createTime: {
        serializedName: "typeProperties.createTime",
        readOnly: true,
        type: {
          name: "DateTime"
        }
      },
      nodes: {
        serializedName: "typeProperties.nodes",
        readOnly: true,
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "ManagedIntegrationRuntimeNode"
            }
          }
        }
      },
      otherErrors: {
        serializedName: "typeProperties.otherErrors",
        readOnly: true,
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "ManagedIntegrationRuntimeError"
            }
          }
        }
      },
      lastOperation: {
        serializedName: "typeProperties.lastOperation",
        type: {
          name: "Composite",
          className: "ManagedIntegrationRuntimeOperationResult"
        }
      }
    }
  }
};

export const SelfHostedIntegrationRuntimeStatus: coreClient.CompositeMapper = {
  serializedName: "SelfHosted",
  type: {
    name: "Composite",
    className: "SelfHostedIntegrationRuntimeStatus",
    uberParent: "IntegrationRuntimeStatus",
    additionalProperties: { type: { name: "Object" } },
    polymorphicDiscriminator:
      IntegrationRuntimeStatus.type.polymorphicDiscriminator,
    modelProperties: {
      ...IntegrationRuntimeStatus.type.modelProperties,
      createTime: {
        serializedName: "typeProperties.createTime",
        readOnly: true,
        type: {
          name: "DateTime"
        }
      },
      taskQueueId: {
        serializedName: "typeProperties.taskQueueId",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      nodeCommunicationChannelEncryptionMode: {
        serializedName: "typeProperties.nodeCommunicationChannelEncryptionMode",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      internalChannelEncryption: {
        serializedName: "typeProperties.internalChannelEncryption",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      version: {
        serializedName: "typeProperties.version",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      nodes: {
        serializedName: "typeProperties.nodes",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "SelfHostedIntegrationRuntimeNode"
            }
          }
        }
      },
      scheduledUpdateDate: {
        serializedName: "typeProperties.scheduledUpdateDate",
        readOnly: true,
        type: {
          name: "DateTime"
        }
      },
      updateDelayOffset: {
        serializedName: "typeProperties.updateDelayOffset",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      localTimeZoneOffset: {
        serializedName: "typeProperties.localTimeZoneOffset",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      capabilities: {
        serializedName: "typeProperties.capabilities",
        readOnly: true,
        type: {
          name: "Dictionary",
          value: { type: { name: "String" } }
        }
      },
      serviceUrls: {
        serializedName: "typeProperties.serviceUrls",
        readOnly: true,
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "String"
            }
          }
        }
      },
      autoUpdate: {
        serializedName: "typeProperties.autoUpdate",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      versionStatus: {
        serializedName: "typeProperties.versionStatus",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      links: {
        serializedName: "typeProperties.links",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "LinkedIntegrationRuntime"
            }
          }
        }
      },
      pushedVersion: {
        serializedName: "typeProperties.pushedVersion",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      latestVersion: {
        serializedName: "typeProperties.latestVersion",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      autoUpdateETA: {
        serializedName: "typeProperties.autoUpdateETA",
        readOnly: true,
        type: {
          name: "DateTime"
        }
      },
      serviceRegion: {
        serializedName: "typeProperties.serviceRegion",
        type: {
          name: "String"
        }
      },
      newerVersions: {
        serializedName: "typeProperties.newerVersions",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "String"
            }
          }
        }
      }
    }
  }
};

export const SecureString: coreClient.CompositeMapper = {
  serializedName: "SecureString",
  type: {
    name: "Composite",
    className: "SecureString",
    uberParent: "SecretBase",
    polymorphicDiscriminator: SecretBase.type.polymorphicDiscriminator,
    modelProperties: {
      ...SecretBase.type.modelProperties,
      value: {
        serializedName: "value",
        required: true,
        type: {
          name: "String"
        }
      }
    }
  }
};

export const CmdkeySetup: coreClient.CompositeMapper = {
  serializedName: "CmdkeySetup",
  type: {
    name: "Composite",
    className: "CmdkeySetup",
    uberParent: "CustomSetupBase",
    polymorphicDiscriminator: CustomSetupBase.type.polymorphicDiscriminator,
    modelProperties: {
      ...CustomSetupBase.type.modelProperties,
      targetName: {
        serializedName: "typeProperties.targetName",
        required: true,
        type: {
          name: "Dictionary",
          value: { type: { name: "any" } }
        }
      },
      userName: {
        serializedName: "typeProperties.userName",
        required: true,
        type: {
          name: "Dictionary",
          value: { type: { name: "any" } }
        }
      },
      password: {
        serializedName: "typeProperties.password",
        type: {
          name: "Composite",
          className: "SecretBase"
        }
      }
    }
  }
};

export const EnvironmentVariableSetup: coreClient.CompositeMapper = {
  serializedName: "EnvironmentVariableSetup",
  type: {
    name: "Composite",
    className: "EnvironmentVariableSetup",
    uberParent: "CustomSetupBase",
    polymorphicDiscriminator: CustomSetupBase.type.polymorphicDiscriminator,
    modelProperties: {
      ...CustomSetupBase.type.modelProperties,
      variableName: {
        serializedName: "typeProperties.variableName",
        required: true,
        type: {
          name: "String"
        }
      },
      variableValue: {
        serializedName: "typeProperties.variableValue",
        required: true,
        type: {
          name: "String"
        }
      }
    }
  }
};

export const ComponentSetup: coreClient.CompositeMapper = {
  serializedName: "ComponentSetup",
  type: {
    name: "Composite",
    className: "ComponentSetup",
    uberParent: "CustomSetupBase",
    polymorphicDiscriminator: CustomSetupBase.type.polymorphicDiscriminator,
    modelProperties: {
      ...CustomSetupBase.type.modelProperties,
      componentName: {
        serializedName: "typeProperties.componentName",
        required: true,
        type: {
          name: "String"
        }
      },
      licenseKey: {
        serializedName: "typeProperties.licenseKey",
        type: {
          name: "Composite",
          className: "SecretBase"
        }
      }
    }
  }
};

export const LinkedIntegrationRuntimeKeyAuthorization: coreClient.CompositeMapper = {
  serializedName: "Key",
  type: {
    name: "Composite",
    className: "LinkedIntegrationRuntimeKeyAuthorization",
    uberParent: "LinkedIntegrationRuntimeType",
    polymorphicDiscriminator:
      LinkedIntegrationRuntimeType.type.polymorphicDiscriminator,
    modelProperties: {
      ...LinkedIntegrationRuntimeType.type.modelProperties,
      key: {
        serializedName: "key",
        type: {
          name: "Composite",
          className: "SecureString"
        }
      }
    }
  }
};

export const LinkedIntegrationRuntimeRbacAuthorization: coreClient.CompositeMapper = {
  serializedName: "RBAC",
  type: {
    name: "Composite",
    className: "LinkedIntegrationRuntimeRbacAuthorization",
    uberParent: "LinkedIntegrationRuntimeType",
    polymorphicDiscriminator:
      LinkedIntegrationRuntimeType.type.polymorphicDiscriminator,
    modelProperties: {
      ...LinkedIntegrationRuntimeType.type.modelProperties,
      resourceId: {
        serializedName: "resourceId",
        required: true,
        type: {
          name: "String"
        }
      }
    }
  }
};

export const AzureADOnlyAuthentication: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "AzureADOnlyAuthentication",
    modelProperties: {
      ...ProxyResource.type.modelProperties,
      azureADOnlyAuthentication: {
        serializedName: "properties.azureADOnlyAuthentication",
        type: {
          name: "Boolean"
        }
      },
      state: {
        serializedName: "properties.state",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      creationDate: {
        serializedName: "properties.creationDate",
        readOnly: true,
        type: {
          name: "DateTime"
        }
      }
    }
  }
};

export const IpFirewallRuleInfo: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "IpFirewallRuleInfo",
    modelProperties: {
      ...ProxyResource.type.modelProperties,
      endIpAddress: {
        serializedName: "properties.endIpAddress",
        type: {
          name: "String"
        }
      },
      provisioningState: {
        serializedName: "properties.provisioningState",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      startIpAddress: {
        serializedName: "properties.startIpAddress",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const Key: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "Key",
    modelProperties: {
      ...ProxyResource.type.modelProperties,
      isActiveCMK: {
        serializedName: "properties.isActiveCMK",
        type: {
          name: "Boolean"
        }
      },
      keyVaultUrl: {
        serializedName: "properties.keyVaultUrl",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const PrivateEndpointConnection: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "PrivateEndpointConnection",
    modelProperties: {
      ...ProxyResource.type.modelProperties,
      privateEndpoint: {
        serializedName: "properties.privateEndpoint",
        type: {
          name: "Composite",
          className: "PrivateEndpoint"
        }
      },
      privateLinkServiceConnectionState: {
        serializedName: "properties.privateLinkServiceConnectionState",
        type: {
          name: "Composite",
          className: "PrivateLinkServiceConnectionState"
        }
      },
      provisioningState: {
        serializedName: "properties.provisioningState",
        readOnly: true,
        type: {
          name: "String"
        }
      }
    }
  }
};

export const PrivateLinkResource: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "PrivateLinkResource",
    modelProperties: {
      ...ProxyResource.type.modelProperties,
      properties: {
        serializedName: "properties",
        type: {
          name: "Composite",
          className: "PrivateLinkResourceProperties"
        }
      }
    }
  }
};

export const MetadataSyncConfig: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "MetadataSyncConfig",
    modelProperties: {
      ...ProxyResource.type.modelProperties,
      enabled: {
        serializedName: "properties.enabled",
        type: {
          name: "Boolean"
        }
      },
      syncIntervalInMinutes: {
        serializedName: "properties.syncIntervalInMinutes",
        type: {
          name: "Number"
        }
      }
    }
  }
};

export const GeoBackupPolicy: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "GeoBackupPolicy",
    modelProperties: {
      ...ProxyResource.type.modelProperties,
      kind: {
        serializedName: "kind",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      location: {
        serializedName: "location",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      state: {
        serializedName: "properties.state",
        required: true,
        type: {
          name: "Enum",
          allowedValues: ["Disabled", "Enabled"]
        }
      },
      storageType: {
        serializedName: "properties.storageType",
        readOnly: true,
        type: {
          name: "String"
        }
      }
    }
  }
};

export const DataWarehouseUserActivities: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "DataWarehouseUserActivities",
    modelProperties: {
      ...ProxyResource.type.modelProperties,
      activeQueriesCount: {
        serializedName: "properties.activeQueriesCount",
        readOnly: true,
        type: {
          name: "Number"
        }
      }
    }
  }
};

export const RestorePoint: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "RestorePoint",
    modelProperties: {
      ...ProxyResource.type.modelProperties,
      location: {
        serializedName: "location",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      restorePointType: {
        serializedName: "properties.restorePointType",
        readOnly: true,
        type: {
          name: "Enum",
          allowedValues: ["CONTINUOUS", "DISCRETE"]
        }
      },
      earliestRestoreDate: {
        serializedName: "properties.earliestRestoreDate",
        readOnly: true,
        type: {
          name: "DateTime"
        }
      },
      restorePointCreationDate: {
        serializedName: "properties.restorePointCreationDate",
        readOnly: true,
        type: {
          name: "DateTime"
        }
      },
      restorePointLabel: {
        serializedName: "properties.restorePointLabel",
        readOnly: true,
        type: {
          name: "String"
        }
      }
    }
  }
};

export const ReplicationLink: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "ReplicationLink",
    modelProperties: {
      ...ProxyResource.type.modelProperties,
      location: {
        serializedName: "location",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      isTerminationAllowed: {
        serializedName: "properties.isTerminationAllowed",
        readOnly: true,
        type: {
          name: "Boolean"
        }
      },
      replicationMode: {
        serializedName: "properties.replicationMode",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      partnerServer: {
        serializedName: "properties.partnerServer",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      partnerDatabase: {
        serializedName: "properties.partnerDatabase",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      partnerLocation: {
        serializedName: "properties.partnerLocation",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      role: {
        serializedName: "properties.role",
        readOnly: true,
        type: {
          name: "Enum",
          allowedValues: [
            "Primary",
            "Secondary",
            "NonReadableSecondary",
            "Source",
            "Copy"
          ]
        }
      },
      partnerRole: {
        serializedName: "properties.partnerRole",
        readOnly: true,
        type: {
          name: "Enum",
          allowedValues: [
            "Primary",
            "Secondary",
            "NonReadableSecondary",
            "Source",
            "Copy"
          ]
        }
      },
      startTime: {
        serializedName: "properties.startTime",
        readOnly: true,
        type: {
          name: "DateTime"
        }
      },
      percentComplete: {
        serializedName: "properties.percentComplete",
        readOnly: true,
        type: {
          name: "Number"
        }
      },
      replicationState: {
        serializedName: "properties.replicationState",
        readOnly: true,
        type: {
          name: "String"
        }
      }
    }
  }
};

export const MaintenanceWindows: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "MaintenanceWindows",
    modelProperties: {
      ...ProxyResource.type.modelProperties,
      timeRanges: {
        serializedName: "properties.timeRanges",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "MaintenanceWindowTimeRange"
            }
          }
        }
      }
    }
  }
};

export const MaintenanceWindowOptions: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "MaintenanceWindowOptions",
    modelProperties: {
      ...ProxyResource.type.modelProperties,
      isEnabled: {
        serializedName: "properties.isEnabled",
        type: {
          name: "Boolean"
        }
      },
      maintenanceWindowCycles: {
        serializedName: "properties.maintenanceWindowCycles",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "MaintenanceWindowTimeRange"
            }
          }
        }
      },
      minDurationInMinutes: {
        serializedName: "properties.minDurationInMinutes",
        type: {
          name: "Number"
        }
      },
      defaultDurationInMinutes: {
        serializedName: "properties.defaultDurationInMinutes",
        type: {
          name: "Number"
        }
      },
      minCycles: {
        serializedName: "properties.minCycles",
        type: {
          name: "Number"
        }
      },
      timeGranularityInMinutes: {
        serializedName: "properties.timeGranularityInMinutes",
        type: {
          name: "Number"
        }
      },
      allowMultipleMaintenanceWindowsPerCycle: {
        serializedName: "properties.allowMultipleMaintenanceWindowsPerCycle",
        type: {
          name: "Boolean"
        }
      }
    }
  }
};

export const TransparentDataEncryption: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "TransparentDataEncryption",
    modelProperties: {
      ...ProxyResource.type.modelProperties,
      location: {
        serializedName: "location",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      status: {
        serializedName: "properties.status",
        type: {
          name: "Enum",
          allowedValues: ["Enabled", "Disabled"]
        }
      }
    }
  }
};

export const SqlPoolBlobAuditingPolicy: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "SqlPoolBlobAuditingPolicy",
    modelProperties: {
      ...ProxyResource.type.modelProperties,
      kind: {
        serializedName: "kind",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      state: {
        serializedName: "properties.state",
        type: {
          name: "Enum",
          allowedValues: ["Enabled", "Disabled"]
        }
      },
      storageEndpoint: {
        serializedName: "properties.storageEndpoint",
        type: {
          name: "String"
        }
      },
      storageAccountAccessKey: {
        serializedName: "properties.storageAccountAccessKey",
        type: {
          name: "String"
        }
      },
      retentionDays: {
        serializedName: "properties.retentionDays",
        type: {
          name: "Number"
        }
      },
      auditActionsAndGroups: {
        serializedName: "properties.auditActionsAndGroups",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "String"
            }
          }
        }
      },
      storageAccountSubscriptionId: {
        serializedName: "properties.storageAccountSubscriptionId",
        type: {
          name: "Uuid"
        }
      },
      isStorageSecondaryKeyInUse: {
        serializedName: "properties.isStorageSecondaryKeyInUse",
        type: {
          name: "Boolean"
        }
      },
      isAzureMonitorTargetEnabled: {
        defaultValue: false,
        serializedName: "properties.isAzureMonitorTargetEnabled",
        type: {
          name: "Boolean"
        }
      }
    }
  }
};

export const SqlPoolOperation: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "SqlPoolOperation",
    modelProperties: {
      ...ProxyResource.type.modelProperties,
      databaseName: {
        serializedName: "properties.databaseName",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      operation: {
        serializedName: "properties.operation",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      operationFriendlyName: {
        serializedName: "properties.operationFriendlyName",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      percentComplete: {
        serializedName: "properties.percentComplete",
        readOnly: true,
        type: {
          name: "Number"
        }
      },
      serverName: {
        serializedName: "properties.serverName",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      startTime: {
        serializedName: "properties.startTime",
        readOnly: true,
        type: {
          name: "DateTime"
        }
      },
      state: {
        serializedName: "properties.state",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      errorCode: {
        serializedName: "properties.errorCode",
        readOnly: true,
        type: {
          name: "Number"
        }
      },
      errorDescription: {
        serializedName: "properties.errorDescription",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      errorSeverity: {
        serializedName: "properties.errorSeverity",
        readOnly: true,
        type: {
          name: "Number"
        }
      },
      isUserError: {
        serializedName: "properties.isUserError",
        readOnly: true,
        type: {
          name: "Boolean"
        }
      },
      estimatedCompletionTime: {
        serializedName: "properties.estimatedCompletionTime",
        readOnly: true,
        type: {
          name: "DateTime"
        }
      },
      description: {
        serializedName: "properties.description",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      isCancellable: {
        serializedName: "properties.isCancellable",
        readOnly: true,
        type: {
          name: "Boolean"
        }
      }
    }
  }
};

export const SensitivityLabel: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "SensitivityLabel",
    modelProperties: {
      ...ProxyResource.type.modelProperties,
      managedBy: {
        serializedName: "managedBy",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      schemaName: {
        serializedName: "properties.schemaName",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      tableName: {
        serializedName: "properties.tableName",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      columnName: {
        serializedName: "properties.columnName",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      labelName: {
        serializedName: "properties.labelName",
        type: {
          name: "String"
        }
      },
      labelId: {
        serializedName: "properties.labelId",
        type: {
          name: "String"
        }
      },
      informationType: {
        serializedName: "properties.informationType",
        type: {
          name: "String"
        }
      },
      informationTypeId: {
        serializedName: "properties.informationTypeId",
        type: {
          name: "String"
        }
      },
      isDisabled: {
        serializedName: "properties.isDisabled",
        readOnly: true,
        type: {
          name: "Boolean"
        }
      },
      rank: {
        serializedName: "properties.rank",
        type: {
          name: "Enum",
          allowedValues: ["None", "Low", "Medium", "High", "Critical"]
        }
      }
    }
  }
};

export const SensitivityLabelUpdate: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "SensitivityLabelUpdate",
    modelProperties: {
      ...ProxyResource.type.modelProperties,
      op: {
        serializedName: "properties.op",
        type: {
          name: "Enum",
          allowedValues: ["set", "remove"]
        }
      },
      schema: {
        serializedName: "properties.schema",
        type: {
          name: "String"
        }
      },
      table: {
        serializedName: "properties.table",
        type: {
          name: "String"
        }
      },
      column: {
        serializedName: "properties.column",
        type: {
          name: "String"
        }
      },
      sensitivityLabel: {
        serializedName: "properties.sensitivityLabel",
        type: {
          name: "Composite",
          className: "SensitivityLabel"
        }
      }
    }
  }
};

export const RecommendedSensitivityLabelUpdate: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "RecommendedSensitivityLabelUpdate",
    modelProperties: {
      ...ProxyResource.type.modelProperties,
      op: {
        serializedName: "properties.op",
        type: {
          name: "Enum",
          allowedValues: ["enable", "disable"]
        }
      },
      schema: {
        serializedName: "properties.schema",
        type: {
          name: "String"
        }
      },
      table: {
        serializedName: "properties.table",
        type: {
          name: "String"
        }
      },
      column: {
        serializedName: "properties.column",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const SqlPoolSchema: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "SqlPoolSchema",
    modelProperties: {
      ...ProxyResource.type.modelProperties
    }
  }
};

export const SqlPoolTable: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "SqlPoolTable",
    modelProperties: {
      ...ProxyResource.type.modelProperties
    }
  }
};

export const SqlPoolColumn: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "SqlPoolColumn",
    modelProperties: {
      ...ProxyResource.type.modelProperties,
      columnType: {
        serializedName: "properties.columnType",
        type: {
          name: "String"
        }
      },
      isComputed: {
        serializedName: "properties.isComputed",
        readOnly: true,
        type: {
          name: "Boolean"
        }
      }
    }
  }
};

export const SqlPoolConnectionPolicy: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "SqlPoolConnectionPolicy",
    modelProperties: {
      ...ProxyResource.type.modelProperties,
      kind: {
        serializedName: "kind",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      location: {
        serializedName: "location",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      securityEnabledAccess: {
        serializedName: "properties.securityEnabledAccess",
        type: {
          name: "String"
        }
      },
      proxyDnsName: {
        serializedName: "properties.proxyDnsName",
        type: {
          name: "String"
        }
      },
      proxyPort: {
        serializedName: "properties.proxyPort",
        type: {
          name: "String"
        }
      },
      visibility: {
        serializedName: "properties.visibility",
        type: {
          name: "String"
        }
      },
      useServerDefault: {
        serializedName: "properties.useServerDefault",
        type: {
          name: "String"
        }
      },
      redirectionState: {
        serializedName: "properties.redirectionState",
        type: {
          name: "String"
        }
      },
      state: {
        serializedName: "properties.state",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const SqlPoolVulnerabilityAssessment: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "SqlPoolVulnerabilityAssessment",
    modelProperties: {
      ...ProxyResource.type.modelProperties,
      storageContainerPath: {
        serializedName: "properties.storageContainerPath",
        type: {
          name: "String"
        }
      },
      storageContainerSasKey: {
        serializedName: "properties.storageContainerSasKey",
        type: {
          name: "String"
        }
      },
      storageAccountAccessKey: {
        serializedName: "properties.storageAccountAccessKey",
        type: {
          name: "String"
        }
      },
      recurringScans: {
        serializedName: "properties.recurringScans",
        type: {
          name: "Composite",
          className: "VulnerabilityAssessmentRecurringScansProperties"
        }
      }
    }
  }
};

export const VulnerabilityAssessmentScanRecord: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "VulnerabilityAssessmentScanRecord",
    modelProperties: {
      ...ProxyResource.type.modelProperties,
      scanId: {
        serializedName: "properties.scanId",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      triggerType: {
        serializedName: "properties.triggerType",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      state: {
        serializedName: "properties.state",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      startTime: {
        serializedName: "properties.startTime",
        readOnly: true,
        type: {
          name: "DateTime"
        }
      },
      endTime: {
        serializedName: "properties.endTime",
        readOnly: true,
        type: {
          name: "DateTime"
        }
      },
      errors: {
        serializedName: "properties.errors",
        readOnly: true,
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "VulnerabilityAssessmentScanError"
            }
          }
        }
      },
      storageContainerPath: {
        serializedName: "properties.storageContainerPath",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      numberOfFailedSecurityChecks: {
        serializedName: "properties.numberOfFailedSecurityChecks",
        readOnly: true,
        type: {
          name: "Number"
        }
      }
    }
  }
};

export const SqlPoolVulnerabilityAssessmentScansExport: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "SqlPoolVulnerabilityAssessmentScansExport",
    modelProperties: {
      ...ProxyResource.type.modelProperties,
      exportedReportLocation: {
        serializedName: "properties.exportedReportLocation",
        readOnly: true,
        type: {
          name: "String"
        }
      }
    }
  }
};

export const SqlPoolSecurityAlertPolicy: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "SqlPoolSecurityAlertPolicy",
    modelProperties: {
      ...ProxyResource.type.modelProperties,
      state: {
        serializedName: "properties.state",
        type: {
          name: "Enum",
          allowedValues: ["New", "Enabled", "Disabled"]
        }
      },
      disabledAlerts: {
        serializedName: "properties.disabledAlerts",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "String"
            }
          }
        }
      },
      emailAddresses: {
        serializedName: "properties.emailAddresses",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "String"
            }
          }
        }
      },
      emailAccountAdmins: {
        serializedName: "properties.emailAccountAdmins",
        type: {
          name: "Boolean"
        }
      },
      storageEndpoint: {
        serializedName: "properties.storageEndpoint",
        type: {
          name: "String"
        }
      },
      storageAccountAccessKey: {
        serializedName: "properties.storageAccountAccessKey",
        type: {
          name: "String"
        }
      },
      retentionDays: {
        serializedName: "properties.retentionDays",
        type: {
          name: "Number"
        }
      },
      creationTime: {
        serializedName: "properties.creationTime",
        readOnly: true,
        type: {
          name: "DateTime"
        }
      }
    }
  }
};

export const SqlPoolVulnerabilityAssessmentRuleBaseline: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "SqlPoolVulnerabilityAssessmentRuleBaseline",
    modelProperties: {
      ...ProxyResource.type.modelProperties,
      baselineResults: {
        serializedName: "properties.baselineResults",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "SqlPoolVulnerabilityAssessmentRuleBaselineItem"
            }
          }
        }
      }
    }
  }
};

export const ExtendedSqlPoolBlobAuditingPolicy: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "ExtendedSqlPoolBlobAuditingPolicy",
    modelProperties: {
      ...ProxyResource.type.modelProperties,
      predicateExpression: {
        serializedName: "properties.predicateExpression",
        type: {
          name: "String"
        }
      },
      state: {
        serializedName: "properties.state",
        type: {
          name: "Enum",
          allowedValues: ["Enabled", "Disabled"]
        }
      },
      storageEndpoint: {
        serializedName: "properties.storageEndpoint",
        type: {
          name: "String"
        }
      },
      storageAccountAccessKey: {
        serializedName: "properties.storageAccountAccessKey",
        type: {
          name: "String"
        }
      },
      retentionDays: {
        serializedName: "properties.retentionDays",
        type: {
          name: "Number"
        }
      },
      auditActionsAndGroups: {
        serializedName: "properties.auditActionsAndGroups",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "String"
            }
          }
        }
      },
      storageAccountSubscriptionId: {
        serializedName: "properties.storageAccountSubscriptionId",
        type: {
          name: "Uuid"
        }
      },
      isStorageSecondaryKeyInUse: {
        serializedName: "properties.isStorageSecondaryKeyInUse",
        type: {
          name: "Boolean"
        }
      },
      isAzureMonitorTargetEnabled: {
        serializedName: "properties.isAzureMonitorTargetEnabled",
        type: {
          name: "Boolean"
        }
      },
      queueDelayMs: {
        serializedName: "properties.queueDelayMs",
        type: {
          name: "Number"
        }
      }
    }
  }
};

export const DataMaskingPolicy: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "DataMaskingPolicy",
    modelProperties: {
      ...ProxyResource.type.modelProperties,
      location: {
        serializedName: "location",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      kind: {
        serializedName: "kind",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      managedBy: {
        serializedName: "managedBy",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      dataMaskingState: {
        serializedName: "properties.dataMaskingState",
        type: {
          name: "Enum",
          allowedValues: ["Disabled", "Enabled"]
        }
      },
      exemptPrincipals: {
        serializedName: "properties.exemptPrincipals",
        type: {
          name: "String"
        }
      },
      applicationPrincipals: {
        serializedName: "properties.applicationPrincipals",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      maskingLevel: {
        serializedName: "properties.maskingLevel",
        readOnly: true,
        type: {
          name: "String"
        }
      }
    }
  }
};

export const DataMaskingRule: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "DataMaskingRule",
    modelProperties: {
      ...ProxyResource.type.modelProperties,
      location: {
        serializedName: "location",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      kind: {
        serializedName: "kind",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      idPropertiesId: {
        serializedName: "properties.id",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      aliasName: {
        serializedName: "properties.aliasName",
        type: {
          name: "String"
        }
      },
      ruleState: {
        serializedName: "properties.ruleState",
        type: {
          name: "Enum",
          allowedValues: ["Disabled", "Enabled"]
        }
      },
      schemaName: {
        serializedName: "properties.schemaName",
        type: {
          name: "String"
        }
      },
      tableName: {
        serializedName: "properties.tableName",
        type: {
          name: "String"
        }
      },
      columnName: {
        serializedName: "properties.columnName",
        type: {
          name: "String"
        }
      },
      maskingFunction: {
        serializedName: "properties.maskingFunction",
        type: {
          name: "Enum",
          allowedValues: ["Default", "CCN", "Email", "Number", "SSN", "Text"]
        }
      },
      numberFrom: {
        serializedName: "properties.numberFrom",
        type: {
          name: "String"
        }
      },
      numberTo: {
        serializedName: "properties.numberTo",
        type: {
          name: "String"
        }
      },
      prefixSize: {
        serializedName: "properties.prefixSize",
        type: {
          name: "String"
        }
      },
      suffixSize: {
        serializedName: "properties.suffixSize",
        type: {
          name: "String"
        }
      },
      replacementString: {
        serializedName: "properties.replacementString",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const WorkloadGroup: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "WorkloadGroup",
    modelProperties: {
      ...ProxyResource.type.modelProperties,
      minResourcePercent: {
        serializedName: "properties.minResourcePercent",
        type: {
          name: "Number"
        }
      },
      maxResourcePercent: {
        serializedName: "properties.maxResourcePercent",
        type: {
          name: "Number"
        }
      },
      minResourcePercentPerRequest: {
        serializedName: "properties.minResourcePercentPerRequest",
        type: {
          name: "Number"
        }
      },
      maxResourcePercentPerRequest: {
        serializedName: "properties.maxResourcePercentPerRequest",
        type: {
          name: "Number"
        }
      },
      importance: {
        serializedName: "properties.importance",
        type: {
          name: "String"
        }
      },
      queryExecutionTimeout: {
        serializedName: "properties.queryExecutionTimeout",
        type: {
          name: "Number"
        }
      }
    }
  }
};

export const WorkloadClassifier: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "WorkloadClassifier",
    modelProperties: {
      ...ProxyResource.type.modelProperties,
      memberName: {
        serializedName: "properties.memberName",
        type: {
          name: "String"
        }
      },
      label: {
        serializedName: "properties.label",
        type: {
          name: "String"
        }
      },
      context: {
        serializedName: "properties.context",
        type: {
          name: "String"
        }
      },
      startTime: {
        serializedName: "properties.startTime",
        type: {
          name: "String"
        }
      },
      endTime: {
        serializedName: "properties.endTime",
        type: {
          name: "String"
        }
      },
      importance: {
        serializedName: "properties.importance",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const ServerBlobAuditingPolicy: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "ServerBlobAuditingPolicy",
    modelProperties: {
      ...ProxyResource.type.modelProperties,
      state: {
        serializedName: "properties.state",
        type: {
          name: "Enum",
          allowedValues: ["Enabled", "Disabled"]
        }
      },
      storageEndpoint: {
        serializedName: "properties.storageEndpoint",
        type: {
          name: "String"
        }
      },
      storageAccountAccessKey: {
        serializedName: "properties.storageAccountAccessKey",
        type: {
          name: "String"
        }
      },
      retentionDays: {
        serializedName: "properties.retentionDays",
        type: {
          name: "Number"
        }
      },
      auditActionsAndGroups: {
        serializedName: "properties.auditActionsAndGroups",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "String"
            }
          }
        }
      },
      storageAccountSubscriptionId: {
        serializedName: "properties.storageAccountSubscriptionId",
        type: {
          name: "Uuid"
        }
      },
      isStorageSecondaryKeyInUse: {
        serializedName: "properties.isStorageSecondaryKeyInUse",
        type: {
          name: "Boolean"
        }
      },
      isAzureMonitorTargetEnabled: {
        serializedName: "properties.isAzureMonitorTargetEnabled",
        type: {
          name: "Boolean"
        }
      },
      queueDelayMs: {
        serializedName: "properties.queueDelayMs",
        type: {
          name: "Number"
        }
      },
      isDevopsAuditEnabled: {
        serializedName: "properties.isDevopsAuditEnabled",
        type: {
          name: "Boolean"
        }
      }
    }
  }
};

export const ExtendedServerBlobAuditingPolicy: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "ExtendedServerBlobAuditingPolicy",
    modelProperties: {
      ...ProxyResource.type.modelProperties,
      predicateExpression: {
        serializedName: "properties.predicateExpression",
        type: {
          name: "String"
        }
      },
      state: {
        serializedName: "properties.state",
        type: {
          name: "Enum",
          allowedValues: ["Enabled", "Disabled"]
        }
      },
      storageEndpoint: {
        serializedName: "properties.storageEndpoint",
        type: {
          name: "String"
        }
      },
      storageAccountAccessKey: {
        serializedName: "properties.storageAccountAccessKey",
        type: {
          name: "String"
        }
      },
      retentionDays: {
        serializedName: "properties.retentionDays",
        type: {
          name: "Number"
        }
      },
      auditActionsAndGroups: {
        serializedName: "properties.auditActionsAndGroups",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "String"
            }
          }
        }
      },
      storageAccountSubscriptionId: {
        serializedName: "properties.storageAccountSubscriptionId",
        type: {
          name: "Uuid"
        }
      },
      isStorageSecondaryKeyInUse: {
        serializedName: "properties.isStorageSecondaryKeyInUse",
        type: {
          name: "Boolean"
        }
      },
      isAzureMonitorTargetEnabled: {
        serializedName: "properties.isAzureMonitorTargetEnabled",
        type: {
          name: "Boolean"
        }
      },
      queueDelayMs: {
        serializedName: "properties.queueDelayMs",
        type: {
          name: "Number"
        }
      },
      isDevopsAuditEnabled: {
        serializedName: "properties.isDevopsAuditEnabled",
        type: {
          name: "Boolean"
        }
      }
    }
  }
};

export const ServerSecurityAlertPolicy: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "ServerSecurityAlertPolicy",
    modelProperties: {
      ...ProxyResource.type.modelProperties,
      state: {
        serializedName: "properties.state",
        type: {
          name: "Enum",
          allowedValues: ["New", "Enabled", "Disabled"]
        }
      },
      disabledAlerts: {
        serializedName: "properties.disabledAlerts",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "String"
            }
          }
        }
      },
      emailAddresses: {
        serializedName: "properties.emailAddresses",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "String"
            }
          }
        }
      },
      emailAccountAdmins: {
        serializedName: "properties.emailAccountAdmins",
        type: {
          name: "Boolean"
        }
      },
      storageEndpoint: {
        serializedName: "properties.storageEndpoint",
        type: {
          name: "String"
        }
      },
      storageAccountAccessKey: {
        serializedName: "properties.storageAccountAccessKey",
        type: {
          name: "String"
        }
      },
      retentionDays: {
        serializedName: "properties.retentionDays",
        type: {
          name: "Number"
        }
      },
      creationTime: {
        serializedName: "properties.creationTime",
        readOnly: true,
        type: {
          name: "DateTime"
        }
      }
    }
  }
};

export const ServerVulnerabilityAssessment: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "ServerVulnerabilityAssessment",
    modelProperties: {
      ...ProxyResource.type.modelProperties,
      storageContainerPath: {
        serializedName: "properties.storageContainerPath",
        type: {
          name: "String"
        }
      },
      storageContainerSasKey: {
        serializedName: "properties.storageContainerSasKey",
        type: {
          name: "String"
        }
      },
      storageAccountAccessKey: {
        serializedName: "properties.storageAccountAccessKey",
        type: {
          name: "String"
        }
      },
      recurringScans: {
        serializedName: "properties.recurringScans",
        type: {
          name: "Composite",
          className: "VulnerabilityAssessmentRecurringScansProperties"
        }
      }
    }
  }
};

export const EncryptionProtector: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "EncryptionProtector",
    modelProperties: {
      ...ProxyResource.type.modelProperties,
      kind: {
        serializedName: "kind",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      location: {
        serializedName: "location",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      subregion: {
        serializedName: "properties.subregion",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      serverKeyName: {
        serializedName: "properties.serverKeyName",
        type: {
          name: "String"
        }
      },
      serverKeyType: {
        serializedName: "properties.serverKeyType",
        type: {
          name: "String"
        }
      },
      uri: {
        serializedName: "properties.uri",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      thumbprint: {
        serializedName: "properties.thumbprint",
        readOnly: true,
        type: {
          name: "String"
        }
      }
    }
  }
};

export const RecoverableSqlPool: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "RecoverableSqlPool",
    modelProperties: {
      ...ProxyResource.type.modelProperties,
      edition: {
        serializedName: "properties.edition",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      serviceLevelObjective: {
        serializedName: "properties.serviceLevelObjective",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      elasticPoolName: {
        serializedName: "properties.elasticPoolName",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      lastAvailableBackupDate: {
        serializedName: "properties.lastAvailableBackupDate",
        readOnly: true,
        type: {
          name: "DateTime"
        }
      }
    }
  }
};

export const DedicatedSQLminimalTlsSettings: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "DedicatedSQLminimalTlsSettings",
    modelProperties: {
      ...ProxyResource.type.modelProperties,
      location: {
        serializedName: "location",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      minimalTlsVersion: {
        serializedName: "properties.minimalTlsVersion",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const WorkspaceAadAdminInfo: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "WorkspaceAadAdminInfo",
    modelProperties: {
      ...ProxyResource.type.modelProperties,
      tenantId: {
        serializedName: "properties.tenantId",
        type: {
          name: "String"
        }
      },
      login: {
        serializedName: "properties.login",
        type: {
          name: "String"
        }
      },
      administratorType: {
        serializedName: "properties.administratorType",
        type: {
          name: "String"
        }
      },
      sid: {
        serializedName: "properties.sid",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const ManagedIdentitySqlControlSettingsModel: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "ManagedIdentitySqlControlSettingsModel",
    modelProperties: {
      ...ProxyResource.type.modelProperties,
      grantSqlControlToManagedIdentity: {
        serializedName: "properties.grantSqlControlToManagedIdentity",
        type: {
          name: "Composite",
          className:
            "ManagedIdentitySqlControlSettingsModelPropertiesGrantSqlControlToManagedIdentity"
        }
      }
    }
  }
};

export const RestorableDroppedSqlPool: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "RestorableDroppedSqlPool",
    modelProperties: {
      ...ProxyResource.type.modelProperties,
      location: {
        serializedName: "location",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      databaseName: {
        serializedName: "properties.databaseName",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      edition: {
        serializedName: "properties.edition",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      maxSizeBytes: {
        serializedName: "properties.maxSizeBytes",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      serviceLevelObjective: {
        serializedName: "properties.serviceLevelObjective",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      elasticPoolName: {
        serializedName: "properties.elasticPoolName",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      creationDate: {
        serializedName: "properties.creationDate",
        readOnly: true,
        type: {
          name: "DateTime"
        }
      },
      deletionDate: {
        serializedName: "properties.deletionDate",
        readOnly: true,
        type: {
          name: "DateTime"
        }
      },
      earliestRestoreDate: {
        serializedName: "properties.earliestRestoreDate",
        readOnly: true,
        type: {
          name: "DateTime"
        }
      }
    }
  }
};

export const AttachedDatabaseConfiguration: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "AttachedDatabaseConfiguration",
    modelProperties: {
      ...ProxyResource.type.modelProperties,
      location: {
        serializedName: "location",
        type: {
          name: "String"
        }
      },
      systemData: {
        serializedName: "systemData",
        type: {
          name: "Composite",
          className: "SystemData"
        }
      },
      provisioningState: {
        serializedName: "properties.provisioningState",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      databaseName: {
        serializedName: "properties.databaseName",
        type: {
          name: "String"
        }
      },
      kustoPoolResourceId: {
        serializedName: "properties.clusterResourceId",
        type: {
          name: "String"
        }
      },
      attachedDatabaseNames: {
        serializedName: "properties.attachedDatabaseNames",
        readOnly: true,
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "String"
            }
          }
        }
      },
      defaultPrincipalsModificationKind: {
        serializedName: "properties.defaultPrincipalsModificationKind",
        type: {
          name: "String"
        }
      },
      tableLevelSharingProperties: {
        serializedName: "properties.tableLevelSharingProperties",
        type: {
          name: "Composite",
          className: "TableLevelSharingProperties"
        }
      }
    }
  }
};

export const Database: coreClient.CompositeMapper = {
  serializedName: "Database",
  type: {
    name: "Composite",
    className: "Database",
    uberParent: "Resource",
    polymorphicDiscriminator: {
      serializedName: "kind",
      clientName: "kind"
    },
    modelProperties: {
      ...ProxyResource.type.modelProperties,
      location: {
        serializedName: "location",
        type: {
          name: "String"
        }
      },
      kind: {
        serializedName: "kind",
        required: true,
        type: {
          name: "String"
        }
      },
      systemData: {
        serializedName: "systemData",
        type: {
          name: "Composite",
          className: "SystemData"
        }
      }
    }
  }
};

export const DataConnection: coreClient.CompositeMapper = {
  serializedName: "DataConnection",
  type: {
    name: "Composite",
    className: "DataConnection",
    uberParent: "Resource",
    polymorphicDiscriminator: {
      serializedName: "kind",
      clientName: "kind"
    },
    modelProperties: {
      ...ProxyResource.type.modelProperties,
      location: {
        serializedName: "location",
        type: {
          name: "String"
        }
      },
      kind: {
        serializedName: "kind",
        required: true,
        type: {
          name: "String"
        }
      },
      systemData: {
        serializedName: "systemData",
        type: {
          name: "Composite",
          className: "SystemData"
        }
      }
    }
  }
};

export const ClusterPrincipalAssignment: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "ClusterPrincipalAssignment",
    modelProperties: {
      ...ProxyResource.type.modelProperties,
      systemData: {
        serializedName: "systemData",
        type: {
          name: "Composite",
          className: "SystemData"
        }
      },
      principalId: {
        serializedName: "properties.principalId",
        type: {
          name: "String"
        }
      },
      role: {
        serializedName: "properties.role",
        type: {
          name: "String"
        }
      },
      tenantId: {
        serializedName: "properties.tenantId",
        type: {
          name: "String"
        }
      },
      principalType: {
        serializedName: "properties.principalType",
        type: {
          name: "String"
        }
      },
      tenantName: {
        serializedName: "properties.tenantName",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      principalName: {
        serializedName: "properties.principalName",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      provisioningState: {
        serializedName: "properties.provisioningState",
        readOnly: true,
        type: {
          name: "String"
        }
      }
    }
  }
};

export const DatabasePrincipalAssignment: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "DatabasePrincipalAssignment",
    modelProperties: {
      ...ProxyResource.type.modelProperties,
      systemData: {
        serializedName: "systemData",
        type: {
          name: "Composite",
          className: "SystemData"
        }
      },
      principalId: {
        serializedName: "properties.principalId",
        type: {
          name: "String"
        }
      },
      role: {
        serializedName: "properties.role",
        type: {
          name: "String"
        }
      },
      tenantId: {
        serializedName: "properties.tenantId",
        type: {
          name: "String"
        }
      },
      principalType: {
        serializedName: "properties.principalType",
        type: {
          name: "String"
        }
      },
      tenantName: {
        serializedName: "properties.tenantName",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      principalName: {
        serializedName: "properties.principalName",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      provisioningState: {
        serializedName: "properties.provisioningState",
        readOnly: true,
        type: {
          name: "String"
        }
      }
    }
  }
};

export const PrivateLinkHub: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "PrivateLinkHub",
    modelProperties: {
      ...TrackedResource.type.modelProperties,
      provisioningState: {
        serializedName: "properties.provisioningState",
        type: {
          name: "String"
        }
      },
      privateEndpointConnections: {
        serializedName: "properties.privateEndpointConnections",
        readOnly: true,
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "PrivateEndpointConnectionForPrivateLinkHubBasic"
            }
          }
        }
      }
    }
  }
};

export const SqlPool: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "SqlPool",
    modelProperties: {
      ...TrackedResource.type.modelProperties,
      sku: {
        serializedName: "sku",
        type: {
          name: "Composite",
          className: "Sku"
        }
      },
      maxSizeBytes: {
        serializedName: "properties.maxSizeBytes",
        type: {
          name: "Number"
        }
      },
      collation: {
        defaultValue: "",
        serializedName: "properties.collation",
        type: {
          name: "String"
        }
      },
      sourceDatabaseId: {
        serializedName: "properties.sourceDatabaseId",
        type: {
          name: "String"
        }
      },
      recoverableDatabaseId: {
        serializedName: "properties.recoverableDatabaseId",
        type: {
          name: "String"
        }
      },
      provisioningState: {
        serializedName: "properties.provisioningState",
        type: {
          name: "String"
        }
      },
      status: {
        serializedName: "properties.status",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      restorePointInTime: {
        serializedName: "properties.restorePointInTime",
        type: {
          name: "DateTime"
        }
      },
      createMode: {
        serializedName: "properties.createMode",
        type: {
          name: "String"
        }
      },
      creationDate: {
        serializedName: "properties.creationDate",
        readOnly: true,
        type: {
          name: "DateTime"
        }
      },
      storageAccountType: {
        defaultValue: "GRS",
        serializedName: "properties.storageAccountType",
        type: {
          name: "String"
        }
      },
      sourceDatabaseDeletionDate: {
        serializedName: "properties.sourceDatabaseDeletionDate",
        type: {
          name: "DateTime"
        }
      }
    }
  }
};

export const Workspace: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "Workspace",
    modelProperties: {
      ...TrackedResource.type.modelProperties,
      identity: {
        serializedName: "identity",
        type: {
          name: "Composite",
          className: "ManagedIdentity"
        }
      },
      defaultDataLakeStorage: {
        serializedName: "properties.defaultDataLakeStorage",
        type: {
          name: "Composite",
          className: "DataLakeStorageAccountDetails"
        }
      },
      sqlAdministratorLoginPassword: {
        serializedName: "properties.sqlAdministratorLoginPassword",
        type: {
          name: "String"
        }
      },
      managedResourceGroupName: {
        serializedName: "properties.managedResourceGroupName",
        type: {
          name: "String"
        }
      },
      provisioningState: {
        serializedName: "properties.provisioningState",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      sqlAdministratorLogin: {
        serializedName: "properties.sqlAdministratorLogin",
        type: {
          name: "String"
        }
      },
      virtualNetworkProfile: {
        serializedName: "properties.virtualNetworkProfile",
        type: {
          name: "Composite",
          className: "VirtualNetworkProfile"
        }
      },
      connectivityEndpoints: {
        serializedName: "properties.connectivityEndpoints",
        type: {
          name: "Dictionary",
          value: { type: { name: "String" } }
        }
      },
      managedVirtualNetwork: {
        serializedName: "properties.managedVirtualNetwork",
        type: {
          name: "String"
        }
      },
      privateEndpointConnections: {
        serializedName: "properties.privateEndpointConnections",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "PrivateEndpointConnection"
            }
          }
        }
      },
      encryption: {
        serializedName: "properties.encryption",
        type: {
          name: "Composite",
          className: "EncryptionDetails"
        }
      },
      workspaceUID: {
        serializedName: "properties.workspaceUID",
        readOnly: true,
        type: {
          name: "Uuid"
        }
      },
      extraProperties: {
        serializedName: "properties.extraProperties",
        readOnly: true,
        type: {
          name: "Dictionary",
          value: {
            type: { name: "Dictionary", value: { type: { name: "any" } } }
          }
        }
      },
      managedVirtualNetworkSettings: {
        serializedName: "properties.managedVirtualNetworkSettings",
        type: {
          name: "Composite",
          className: "ManagedVirtualNetworkSettings"
        }
      },
      workspaceRepositoryConfiguration: {
        serializedName: "properties.workspaceRepositoryConfiguration",
        type: {
          name: "Composite",
          className: "WorkspaceRepositoryConfiguration"
        }
      },
      purviewConfiguration: {
        serializedName: "properties.purviewConfiguration",
        type: {
          name: "Composite",
          className: "PurviewConfiguration"
        }
      },
      adlaResourceId: {
        serializedName: "properties.adlaResourceId",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      publicNetworkAccess: {
        serializedName: "properties.publicNetworkAccess",
        type: {
          name: "String"
        }
      },
      cspWorkspaceAdminProperties: {
        serializedName: "properties.cspWorkspaceAdminProperties",
        type: {
          name: "Composite",
          className: "CspWorkspaceAdminProperties"
        }
      },
      settings: {
        serializedName: "properties.settings",
        readOnly: true,
        type: {
          name: "Dictionary",
          value: {
            type: { name: "Dictionary", value: { type: { name: "any" } } }
          }
        }
      },
      azureADOnlyAuthentication: {
        serializedName: "properties.azureADOnlyAuthentication",
        type: {
          name: "Boolean"
        }
      },
      trustedServiceBypassEnabled: {
        defaultValue: false,
        serializedName: "properties.trustedServiceBypassEnabled",
        type: {
          name: "Boolean"
        }
      }
    }
  }
};

export const BigDataPoolResourceInfo: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "BigDataPoolResourceInfo",
    modelProperties: {
      ...TrackedResource.type.modelProperties,
      provisioningState: {
        serializedName: "properties.provisioningState",
        type: {
          name: "String"
        }
      },
      autoScale: {
        serializedName: "properties.autoScale",
        type: {
          name: "Composite",
          className: "AutoScaleProperties"
        }
      },
      creationDate: {
        serializedName: "properties.creationDate",
        readOnly: true,
        type: {
          name: "DateTime"
        }
      },
      autoPause: {
        serializedName: "properties.autoPause",
        type: {
          name: "Composite",
          className: "AutoPauseProperties"
        }
      },
      isComputeIsolationEnabled: {
        serializedName: "properties.isComputeIsolationEnabled",
        type: {
          name: "Boolean"
        }
      },
      sessionLevelPackagesEnabled: {
        serializedName: "properties.sessionLevelPackagesEnabled",
        type: {
          name: "Boolean"
        }
      },
      cacheSize: {
        serializedName: "properties.cacheSize",
        type: {
          name: "Number"
        }
      },
      dynamicExecutorAllocation: {
        serializedName: "properties.dynamicExecutorAllocation",
        type: {
          name: "Composite",
          className: "DynamicExecutorAllocation"
        }
      },
      sparkEventsFolder: {
        serializedName: "properties.sparkEventsFolder",
        type: {
          name: "String"
        }
      },
      nodeCount: {
        serializedName: "properties.nodeCount",
        type: {
          name: "Number"
        }
      },
      libraryRequirements: {
        serializedName: "properties.libraryRequirements",
        type: {
          name: "Composite",
          className: "LibraryRequirements"
        }
      },
      customLibraries: {
        serializedName: "properties.customLibraries",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "LibraryInfo"
            }
          }
        }
      },
      sparkConfigProperties: {
        serializedName: "properties.sparkConfigProperties",
        type: {
          name: "Composite",
          className: "SparkConfigProperties"
        }
      },
      sparkVersion: {
        serializedName: "properties.sparkVersion",
        type: {
          name: "String"
        }
      },
      defaultSparkLogFolder: {
        serializedName: "properties.defaultSparkLogFolder",
        type: {
          name: "String"
        }
      },
      nodeSize: {
        serializedName: "properties.nodeSize",
        type: {
          name: "String"
        }
      },
      nodeSizeFamily: {
        serializedName: "properties.nodeSizeFamily",
        type: {
          name: "String"
        }
      },
      lastSucceededTimestamp: {
        serializedName: "properties.lastSucceededTimestamp",
        readOnly: true,
        type: {
          name: "DateTime"
        }
      }
    }
  }
};

export const KustoPool: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "KustoPool",
    modelProperties: {
      ...TrackedResource.type.modelProperties,
      sku: {
        serializedName: "sku",
        type: {
          name: "Composite",
          className: "AzureSku"
        }
      },
      etag: {
        serializedName: "etag",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      systemData: {
        serializedName: "systemData",
        type: {
          name: "Composite",
          className: "SystemData"
        }
      },
      state: {
        serializedName: "properties.state",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      provisioningState: {
        serializedName: "properties.provisioningState",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      uri: {
        serializedName: "properties.uri",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      dataIngestionUri: {
        serializedName: "properties.dataIngestionUri",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      stateReason: {
        serializedName: "properties.stateReason",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      optimizedAutoscale: {
        serializedName: "properties.optimizedAutoscale",
        type: {
          name: "Composite",
          className: "OptimizedAutoscale"
        }
      },
      enableStreamingIngest: {
        defaultValue: false,
        serializedName: "properties.enableStreamingIngest",
        type: {
          name: "Boolean"
        }
      },
      enablePurge: {
        defaultValue: false,
        serializedName: "properties.enablePurge",
        type: {
          name: "Boolean"
        }
      },
      languageExtensions: {
        serializedName: "properties.languageExtensions",
        type: {
          name: "Composite",
          className: "LanguageExtensionsList"
        }
      },
      workspaceUID: {
        serializedName: "properties.workspaceUID",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const SubResource: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "SubResource",
    modelProperties: {
      ...AzureEntityResource.type.modelProperties
    }
  }
};

export const ReadWriteDatabase: coreClient.CompositeMapper = {
  serializedName: "ReadWrite",
  type: {
    name: "Composite",
    className: "ReadWriteDatabase",
    uberParent: "Resource",
    polymorphicDiscriminator: Resource.type.polymorphicDiscriminator,
    modelProperties: {
      ...Database.type.modelProperties,
      provisioningState: {
        serializedName: "properties.provisioningState",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      softDeletePeriod: {
        serializedName: "properties.softDeletePeriod",
        type: {
          name: "TimeSpan"
        }
      },
      hotCachePeriod: {
        serializedName: "properties.hotCachePeriod",
        type: {
          name: "TimeSpan"
        }
      },
      statistics: {
        serializedName: "properties.statistics",
        type: {
          name: "Composite",
          className: "DatabaseStatistics"
        }
      },
      isFollowed: {
        serializedName: "properties.isFollowed",
        readOnly: true,
        type: {
          name: "Boolean"
        }
      }
    }
  }
};

export const ReadOnlyFollowingDatabase: coreClient.CompositeMapper = {
  serializedName: "ReadOnlyFollowing",
  type: {
    name: "Composite",
    className: "ReadOnlyFollowingDatabase",
    uberParent: "Resource",
    polymorphicDiscriminator: Resource.type.polymorphicDiscriminator,
    modelProperties: {
      ...Database.type.modelProperties,
      provisioningState: {
        serializedName: "properties.provisioningState",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      softDeletePeriod: {
        serializedName: "properties.softDeletePeriod",
        readOnly: true,
        type: {
          name: "TimeSpan"
        }
      },
      hotCachePeriod: {
        serializedName: "properties.hotCachePeriod",
        type: {
          name: "TimeSpan"
        }
      },
      statistics: {
        serializedName: "properties.statistics",
        type: {
          name: "Composite",
          className: "DatabaseStatistics"
        }
      },
      leaderClusterResourceId: {
        serializedName: "properties.leaderClusterResourceId",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      attachedDatabaseConfigurationName: {
        serializedName: "properties.attachedDatabaseConfigurationName",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      principalsModificationKind: {
        serializedName: "properties.principalsModificationKind",
        readOnly: true,
        type: {
          name: "String"
        }
      }
    }
  }
};

export const EventHubDataConnection: coreClient.CompositeMapper = {
  serializedName: "EventHub",
  type: {
    name: "Composite",
    className: "EventHubDataConnection",
    uberParent: "Resource",
    polymorphicDiscriminator: Resource.type.polymorphicDiscriminator,
    modelProperties: {
      ...DataConnection.type.modelProperties,
      eventHubResourceId: {
        serializedName: "properties.eventHubResourceId",
        type: {
          name: "String"
        }
      },
      consumerGroup: {
        serializedName: "properties.consumerGroup",
        type: {
          name: "String"
        }
      },
      tableName: {
        serializedName: "properties.tableName",
        type: {
          name: "String"
        }
      },
      mappingRuleName: {
        serializedName: "properties.mappingRuleName",
        type: {
          name: "String"
        }
      },
      dataFormat: {
        serializedName: "properties.dataFormat",
        type: {
          name: "String"
        }
      },
      eventSystemProperties: {
        serializedName: "properties.eventSystemProperties",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "String"
            }
          }
        }
      },
      compression: {
        serializedName: "properties.compression",
        type: {
          name: "String"
        }
      },
      provisioningState: {
        serializedName: "properties.provisioningState",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      managedIdentityResourceId: {
        serializedName: "properties.managedIdentityResourceId",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const IotHubDataConnection: coreClient.CompositeMapper = {
  serializedName: "IotHub",
  type: {
    name: "Composite",
    className: "IotHubDataConnection",
    uberParent: "Resource",
    polymorphicDiscriminator: Resource.type.polymorphicDiscriminator,
    modelProperties: {
      ...DataConnection.type.modelProperties,
      iotHubResourceId: {
        serializedName: "properties.iotHubResourceId",
        type: {
          name: "String"
        }
      },
      consumerGroup: {
        serializedName: "properties.consumerGroup",
        type: {
          name: "String"
        }
      },
      tableName: {
        serializedName: "properties.tableName",
        type: {
          name: "String"
        }
      },
      mappingRuleName: {
        serializedName: "properties.mappingRuleName",
        type: {
          name: "String"
        }
      },
      dataFormat: {
        serializedName: "properties.dataFormat",
        type: {
          name: "String"
        }
      },
      eventSystemProperties: {
        serializedName: "properties.eventSystemProperties",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "String"
            }
          }
        }
      },
      sharedAccessPolicyName: {
        serializedName: "properties.sharedAccessPolicyName",
        type: {
          name: "String"
        }
      },
      provisioningState: {
        serializedName: "properties.provisioningState",
        readOnly: true,
        type: {
          name: "String"
        }
      }
    }
  }
};

export const EventGridDataConnection: coreClient.CompositeMapper = {
  serializedName: "EventGrid",
  type: {
    name: "Composite",
    className: "EventGridDataConnection",
    uberParent: "Resource",
    polymorphicDiscriminator: Resource.type.polymorphicDiscriminator,
    modelProperties: {
      ...DataConnection.type.modelProperties,
      storageAccountResourceId: {
        serializedName: "properties.storageAccountResourceId",
        type: {
          name: "String"
        }
      },
      eventHubResourceId: {
        serializedName: "properties.eventHubResourceId",
        type: {
          name: "String"
        }
      },
      consumerGroup: {
        serializedName: "properties.consumerGroup",
        type: {
          name: "String"
        }
      },
      tableName: {
        serializedName: "properties.tableName",
        type: {
          name: "String"
        }
      },
      mappingRuleName: {
        serializedName: "properties.mappingRuleName",
        type: {
          name: "String"
        }
      },
      dataFormat: {
        serializedName: "properties.dataFormat",
        type: {
          name: "String"
        }
      },
      ignoreFirstRecord: {
        serializedName: "properties.ignoreFirstRecord",
        type: {
          name: "Boolean"
        }
      },
      blobStorageEventType: {
        serializedName: "properties.blobStorageEventType",
        type: {
          name: "String"
        }
      },
      provisioningState: {
        serializedName: "properties.provisioningState",
        readOnly: true,
        type: {
          name: "String"
        }
      }
    }
  }
};

export const LibraryResource: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "LibraryResource",
    modelProperties: {
      ...SubResource.type.modelProperties,
      namePropertiesName: {
        serializedName: "properties.name",
        type: {
          name: "String"
        }
      },
      path: {
        serializedName: "properties.path",
        type: {
          name: "String"
        }
      },
      containerName: {
        serializedName: "properties.containerName",
        type: {
          name: "String"
        }
      },
      uploadedTimestamp: {
        serializedName: "properties.uploadedTimestamp",
        type: {
          name: "DateTime"
        }
      },
      typePropertiesType: {
        serializedName: "properties.type",
        type: {
          name: "String"
        }
      },
      provisioningStatus: {
        serializedName: "properties.provisioningStatus",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      creatorId: {
        serializedName: "properties.creatorId",
        readOnly: true,
        type: {
          name: "String"
        }
      }
    }
  }
};

export const IntegrationRuntimeResource: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "IntegrationRuntimeResource",
    modelProperties: {
      ...SubResource.type.modelProperties,
      properties: {
        serializedName: "properties",
        type: {
          name: "Composite",
          className: "IntegrationRuntime"
        }
      }
    }
  }
};

export const SparkConfigurationResource: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "SparkConfigurationResource",
    modelProperties: {
      ...SubResource.type.modelProperties,
      description: {
        serializedName: "properties.description",
        type: {
          name: "String"
        }
      },
      configs: {
        serializedName: "properties.configs",
        required: true,
        type: {
          name: "Dictionary",
          value: { type: { name: "String" } }
        }
      },
      annotations: {
        serializedName: "properties.annotations",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "String"
            }
          }
        }
      },
      notes: {
        serializedName: "properties.notes",
        type: {
          name: "String"
        }
      },
      createdBy: {
        serializedName: "properties.createdBy",
        type: {
          name: "String"
        }
      },
      created: {
        serializedName: "properties.created",
        type: {
          name: "DateTime"
        }
      }
    }
  }
};

export let discriminators = {
  IntegrationRuntime: IntegrationRuntime,
  SsisObjectMetadata: SsisObjectMetadata,
  IntegrationRuntimeStatus: IntegrationRuntimeStatus,
  SecretBase: SecretBase,
  CustomSetupBase: CustomSetupBase,
  LinkedIntegrationRuntimeType: LinkedIntegrationRuntimeType,
  "IntegrationRuntime.Managed": ManagedIntegrationRuntime,
  "IntegrationRuntime.SelfHosted": SelfHostedIntegrationRuntime,
  "SsisObjectMetadata.Folder": SsisFolder,
  "SsisObjectMetadata.Project": SsisProject,
  "SsisObjectMetadata.Package": SsisPackage,
  "SsisObjectMetadata.Environment": SsisEnvironment,
  "IntegrationRuntimeStatus.Managed": ManagedIntegrationRuntimeStatus,
  "IntegrationRuntimeStatus.SelfHosted": SelfHostedIntegrationRuntimeStatus,
  "SecretBase.SecureString": SecureString,
  "CustomSetupBase.CmdkeySetup": CmdkeySetup,
  "CustomSetupBase.EnvironmentVariableSetup": EnvironmentVariableSetup,
  "CustomSetupBase.ComponentSetup": ComponentSetup,
  "LinkedIntegrationRuntimeType.Key": LinkedIntegrationRuntimeKeyAuthorization,
  "LinkedIntegrationRuntimeType.RBAC": LinkedIntegrationRuntimeRbacAuthorization,
  "Resource.Database": Database,
  "Resource.DataConnection": DataConnection,
  "Resource.ReadWrite": ReadWriteDatabase,
  "Resource.ReadOnlyFollowing": ReadOnlyFollowingDatabase,
  "Resource.EventHub": EventHubDataConnection,
  "Resource.IotHub": IotHubDataConnection,
  "Resource.EventGrid": EventGridDataConnection
};
