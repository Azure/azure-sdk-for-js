/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */

import {
  OperationParameter,
  OperationURLParameter,
  OperationQueryParameter
} from "@azure/core-client";
import {
  AzureADOnlyAuthentication as AzureADOnlyAuthenticationMapper,
  CheckNameAvailabilityRequest as CheckNameAvailabilityRequestMapper,
  IpFirewallRuleInfo as IpFirewallRuleInfoMapper,
  ReplaceAllIpFirewallRulesRequest as ReplaceAllIpFirewallRulesRequestMapper,
  Key as KeyMapper,
  PrivateEndpointConnection as PrivateEndpointConnectionMapper,
  PrivateLinkHubPatchInfo as PrivateLinkHubPatchInfoMapper,
  PrivateLinkHub as PrivateLinkHubMapper,
  SqlPoolPatchInfo as SqlPoolPatchInfoMapper,
  SqlPool as SqlPoolMapper,
  ResourceMoveDefinition as ResourceMoveDefinitionMapper,
  MetadataSyncConfig as MetadataSyncConfigMapper,
  GeoBackupPolicy as GeoBackupPolicyMapper,
  CreateSqlPoolRestorePointDefinition as CreateSqlPoolRestorePointDefinitionMapper,
  MaintenanceWindows as MaintenanceWindowsMapper,
  TransparentDataEncryption as TransparentDataEncryptionMapper,
  SqlPoolBlobAuditingPolicy as SqlPoolBlobAuditingPolicyMapper,
  SensitivityLabelUpdateList as SensitivityLabelUpdateListMapper,
  SensitivityLabel as SensitivityLabelMapper,
  RecommendedSensitivityLabelUpdateList as RecommendedSensitivityLabelUpdateListMapper,
  SqlPoolVulnerabilityAssessment as SqlPoolVulnerabilityAssessmentMapper,
  SqlPoolSecurityAlertPolicy as SqlPoolSecurityAlertPolicyMapper,
  SqlPoolVulnerabilityAssessmentRuleBaseline as SqlPoolVulnerabilityAssessmentRuleBaselineMapper,
  ExtendedSqlPoolBlobAuditingPolicy as ExtendedSqlPoolBlobAuditingPolicyMapper,
  DataMaskingPolicy as DataMaskingPolicyMapper,
  DataMaskingRule as DataMaskingRuleMapper,
  WorkloadGroup as WorkloadGroupMapper,
  WorkloadClassifier as WorkloadClassifierMapper,
  ServerBlobAuditingPolicy as ServerBlobAuditingPolicyMapper,
  ExtendedServerBlobAuditingPolicy as ExtendedServerBlobAuditingPolicyMapper,
  ServerSecurityAlertPolicy as ServerSecurityAlertPolicyMapper,
  ServerVulnerabilityAssessment as ServerVulnerabilityAssessmentMapper,
  EncryptionProtector as EncryptionProtectorMapper,
  DedicatedSQLminimalTlsSettings as DedicatedSQLminimalTlsSettingsMapper,
  WorkspacePatchInfo as WorkspacePatchInfoMapper,
  Workspace as WorkspaceMapper,
  WorkspaceAadAdminInfo as WorkspaceAadAdminInfoMapper,
  ManagedIdentitySqlControlSettingsModel as ManagedIdentitySqlControlSettingsModelMapper,
  BigDataPoolPatchInfo as BigDataPoolPatchInfoMapper,
  BigDataPoolResourceInfo as BigDataPoolResourceInfoMapper,
  UpdateIntegrationRuntimeRequest as UpdateIntegrationRuntimeRequestMapper,
  IntegrationRuntimeResource as IntegrationRuntimeResourceMapper,
  GetSsisObjectMetadataRequest as GetSsisObjectMetadataRequestMapper,
  UpdateIntegrationRuntimeNodeRequest as UpdateIntegrationRuntimeNodeRequestMapper,
  IntegrationRuntimeRegenerateKeyParameters as IntegrationRuntimeRegenerateKeyParametersMapper,
  KustoPoolCheckNameRequest as KustoPoolCheckNameRequestMapper,
  KustoPool as KustoPoolMapper,
  KustoPoolUpdate as KustoPoolUpdateMapper,
  LanguageExtensionsList as LanguageExtensionsListMapper,
  FollowerDatabaseDefinition as FollowerDatabaseDefinitionMapper,
  DatabaseCheckNameRequest as DatabaseCheckNameRequestMapper,
  AttachedDatabaseConfiguration as AttachedDatabaseConfigurationMapper,
  Database as DatabaseMapper,
  DataConnectionCheckNameRequest as DataConnectionCheckNameRequestMapper,
  DataConnectionValidation as DataConnectionValidationMapper,
  DataConnection as DataConnectionMapper,
  ClusterPrincipalAssignmentCheckNameRequest as ClusterPrincipalAssignmentCheckNameRequestMapper,
  ClusterPrincipalAssignment as ClusterPrincipalAssignmentMapper,
  DatabasePrincipalAssignmentCheckNameRequest as DatabasePrincipalAssignmentCheckNameRequestMapper,
  DatabasePrincipalAssignment as DatabasePrincipalAssignmentMapper
} from "../models/mappers";

export const accept: OperationParameter = {
  parameterPath: "accept",
  mapper: {
    defaultValue: "application/json",
    isConstant: true,
    serializedName: "Accept",
    type: {
      name: "String"
    }
  }
};

export const $host: OperationURLParameter = {
  parameterPath: "$host",
  mapper: {
    serializedName: "$host",
    required: true,
    type: {
      name: "String"
    }
  },
  skipEncoding: true
};

export const apiVersion: OperationQueryParameter = {
  parameterPath: "apiVersion",
  mapper: {
    defaultValue: "2021-06-01",
    isConstant: true,
    serializedName: "api-version",
    type: {
      name: "String"
    }
  }
};

export const subscriptionId: OperationURLParameter = {
  parameterPath: "subscriptionId",
  mapper: {
    constraints: {
      MinLength: 1
    },
    serializedName: "subscriptionId",
    required: true,
    type: {
      name: "String"
    }
  }
};

export const resourceGroupName: OperationURLParameter = {
  parameterPath: "resourceGroupName",
  mapper: {
    constraints: {
      MaxLength: 90,
      MinLength: 1
    },
    serializedName: "resourceGroupName",
    required: true,
    type: {
      name: "String"
    }
  }
};

export const workspaceName: OperationURLParameter = {
  parameterPath: "workspaceName",
  mapper: {
    serializedName: "workspaceName",
    required: true,
    type: {
      name: "String"
    }
  }
};

export const azureADOnlyAuthenticationName: OperationURLParameter = {
  parameterPath: "azureADOnlyAuthenticationName",
  mapper: {
    serializedName: "azureADOnlyAuthenticationName",
    required: true,
    type: {
      name: "String"
    }
  }
};

export const contentType: OperationParameter = {
  parameterPath: ["options", "contentType"],
  mapper: {
    defaultValue: "application/json",
    isConstant: true,
    serializedName: "Content-Type",
    type: {
      name: "String"
    }
  }
};

export const azureADOnlyAuthenticationInfo: OperationParameter = {
  parameterPath: "azureADOnlyAuthenticationInfo",
  mapper: AzureADOnlyAuthenticationMapper
};

export const nextLink: OperationURLParameter = {
  parameterPath: "nextLink",
  mapper: {
    serializedName: "nextLink",
    required: true,
    type: {
      name: "String"
    }
  },
  skipEncoding: true
};

export const request: OperationParameter = {
  parameterPath: "request",
  mapper: CheckNameAvailabilityRequestMapper
};

export const operationId: OperationURLParameter = {
  parameterPath: "operationId",
  mapper: {
    serializedName: "operationId",
    required: true,
    type: {
      name: "String"
    }
  }
};

export const ipFirewallRuleInfo: OperationParameter = {
  parameterPath: "ipFirewallRuleInfo",
  mapper: IpFirewallRuleInfoMapper
};

export const ruleName: OperationURLParameter = {
  parameterPath: "ruleName",
  mapper: {
    serializedName: "ruleName",
    required: true,
    type: {
      name: "String"
    }
  }
};

export const request1: OperationParameter = {
  parameterPath: "request",
  mapper: ReplaceAllIpFirewallRulesRequestMapper
};

export const keyName: OperationURLParameter = {
  parameterPath: "keyName",
  mapper: {
    serializedName: "keyName",
    required: true,
    type: {
      name: "String"
    }
  }
};

export const keyProperties: OperationParameter = {
  parameterPath: "keyProperties",
  mapper: KeyMapper
};

export const privateEndpointConnectionName: OperationURLParameter = {
  parameterPath: "privateEndpointConnectionName",
  mapper: {
    serializedName: "privateEndpointConnectionName",
    required: true,
    type: {
      name: "String"
    }
  }
};

export const request2: OperationParameter = {
  parameterPath: "request",
  mapper: PrivateEndpointConnectionMapper
};

export const privateLinkResourceName: OperationURLParameter = {
  parameterPath: "privateLinkResourceName",
  mapper: {
    serializedName: "privateLinkResourceName",
    required: true,
    type: {
      name: "String"
    }
  }
};

export const privateLinkHubName: OperationURLParameter = {
  parameterPath: "privateLinkHubName",
  mapper: {
    serializedName: "privateLinkHubName",
    required: true,
    type: {
      name: "String"
    }
  }
};

export const privateLinkHubPatchInfo: OperationParameter = {
  parameterPath: "privateLinkHubPatchInfo",
  mapper: PrivateLinkHubPatchInfoMapper
};

export const privateLinkHubInfo: OperationParameter = {
  parameterPath: "privateLinkHubInfo",
  mapper: PrivateLinkHubMapper
};

export const sqlPoolName: OperationURLParameter = {
  parameterPath: "sqlPoolName",
  mapper: {
    serializedName: "sqlPoolName",
    required: true,
    type: {
      name: "String"
    }
  }
};

export const sqlPoolInfo: OperationParameter = {
  parameterPath: "sqlPoolInfo",
  mapper: SqlPoolPatchInfoMapper
};

export const sqlPoolInfo1: OperationParameter = {
  parameterPath: "sqlPoolInfo",
  mapper: SqlPoolMapper
};

export const parameters: OperationParameter = {
  parameterPath: "parameters",
  mapper: ResourceMoveDefinitionMapper
};

export const metadataSyncConfiguration: OperationParameter = {
  parameterPath: "metadataSyncConfiguration",
  mapper: MetadataSyncConfigMapper
};

export const parameters1: OperationParameter = {
  parameterPath: "parameters",
  mapper: GeoBackupPolicyMapper
};

export const geoBackupPolicyName: OperationURLParameter = {
  parameterPath: "geoBackupPolicyName",
  mapper: {
    serializedName: "geoBackupPolicyName",
    required: true,
    type: {
      name: "String"
    }
  }
};

export const dataWarehouseUserActivityName: OperationURLParameter = {
  parameterPath: "dataWarehouseUserActivityName",
  mapper: {
    serializedName: "dataWarehouseUserActivityName",
    required: true,
    type: {
      name: "String"
    }
  }
};

export const parameters2: OperationParameter = {
  parameterPath: "parameters",
  mapper: CreateSqlPoolRestorePointDefinitionMapper
};

export const restorePointName: OperationURLParameter = {
  parameterPath: "restorePointName",
  mapper: {
    serializedName: "restorePointName",
    required: true,
    type: {
      name: "String"
    }
  }
};

export const linkId: OperationURLParameter = {
  parameterPath: "linkId",
  mapper: {
    serializedName: "linkId",
    required: true,
    type: {
      name: "String"
    }
  }
};

export const maintenanceWindowName: OperationQueryParameter = {
  parameterPath: "maintenanceWindowName",
  mapper: {
    serializedName: "maintenanceWindowName",
    required: true,
    type: {
      name: "String"
    }
  }
};

export const parameters3: OperationParameter = {
  parameterPath: "parameters",
  mapper: MaintenanceWindowsMapper
};

export const maintenanceWindowOptionsName: OperationQueryParameter = {
  parameterPath: "maintenanceWindowOptionsName",
  mapper: {
    serializedName: "maintenanceWindowOptionsName",
    required: true,
    type: {
      name: "String"
    }
  }
};

export const transparentDataEncryptionName: OperationURLParameter = {
  parameterPath: "transparentDataEncryptionName",
  mapper: {
    serializedName: "transparentDataEncryptionName",
    required: true,
    type: {
      name: "String"
    }
  }
};

export const parameters4: OperationParameter = {
  parameterPath: "parameters",
  mapper: TransparentDataEncryptionMapper
};

export const blobAuditingPolicyName: OperationURLParameter = {
  parameterPath: "blobAuditingPolicyName",
  mapper: {
    defaultValue: "default",
    isConstant: true,
    serializedName: "blobAuditingPolicyName",
    type: {
      name: "String"
    }
  }
};

export const parameters5: OperationParameter = {
  parameterPath: "parameters",
  mapper: SqlPoolBlobAuditingPolicyMapper
};

export const filter: OperationQueryParameter = {
  parameterPath: ["options", "filter"],
  mapper: {
    serializedName: "$filter",
    type: {
      name: "String"
    }
  }
};

export const parameters6: OperationParameter = {
  parameterPath: "parameters",
  mapper: SensitivityLabelUpdateListMapper
};

export const includeDisabledRecommendations: OperationQueryParameter = {
  parameterPath: ["options", "includeDisabledRecommendations"],
  mapper: {
    serializedName: "includeDisabledRecommendations",
    type: {
      name: "Boolean"
    }
  }
};

export const skipToken: OperationQueryParameter = {
  parameterPath: ["options", "skipToken"],
  mapper: {
    serializedName: "$skipToken",
    type: {
      name: "String"
    }
  }
};

export const parameters7: OperationParameter = {
  parameterPath: "parameters",
  mapper: SensitivityLabelMapper
};

export const schemaName: OperationURLParameter = {
  parameterPath: "schemaName",
  mapper: {
    serializedName: "schemaName",
    required: true,
    type: {
      name: "String"
    }
  }
};

export const tableName: OperationURLParameter = {
  parameterPath: "tableName",
  mapper: {
    serializedName: "tableName",
    required: true,
    type: {
      name: "String"
    }
  }
};

export const columnName: OperationURLParameter = {
  parameterPath: "columnName",
  mapper: {
    serializedName: "columnName",
    required: true,
    type: {
      name: "String"
    }
  }
};

export const sensitivityLabelSource: OperationURLParameter = {
  parameterPath: "sensitivityLabelSource",
  mapper: {
    defaultValue: "current",
    isConstant: true,
    serializedName: "sensitivityLabelSource",
    type: {
      name: "String"
    }
  }
};

export const sensitivityLabelSource1: OperationURLParameter = {
  parameterPath: "sensitivityLabelSource",
  mapper: {
    serializedName: "sensitivityLabelSource",
    required: true,
    type: {
      name: "Enum",
      allowedValues: ["current", "recommended"]
    }
  }
};

export const sensitivityLabelSource2: OperationURLParameter = {
  parameterPath: "sensitivityLabelSource",
  mapper: {
    defaultValue: "recommended",
    isConstant: true,
    serializedName: "sensitivityLabelSource",
    type: {
      name: "String"
    }
  }
};

export const parameters8: OperationParameter = {
  parameterPath: "parameters",
  mapper: RecommendedSensitivityLabelUpdateListMapper
};

export const connectionPolicyName: OperationURLParameter = {
  parameterPath: "connectionPolicyName",
  mapper: {
    serializedName: "connectionPolicyName",
    required: true,
    type: {
      name: "String"
    }
  }
};

export const vulnerabilityAssessmentName: OperationURLParameter = {
  parameterPath: "vulnerabilityAssessmentName",
  mapper: {
    serializedName: "vulnerabilityAssessmentName",
    required: true,
    type: {
      name: "String"
    }
  }
};

export const parameters9: OperationParameter = {
  parameterPath: "parameters",
  mapper: SqlPoolVulnerabilityAssessmentMapper
};

export const scanId: OperationURLParameter = {
  parameterPath: "scanId",
  mapper: {
    serializedName: "scanId",
    required: true,
    type: {
      name: "String"
    }
  }
};

export const securityAlertPolicyName: OperationURLParameter = {
  parameterPath: "securityAlertPolicyName",
  mapper: {
    serializedName: "securityAlertPolicyName",
    required: true,
    type: {
      name: "String"
    }
  }
};

export const parameters10: OperationParameter = {
  parameterPath: "parameters",
  mapper: SqlPoolSecurityAlertPolicyMapper
};

export const parameters11: OperationParameter = {
  parameterPath: "parameters",
  mapper: SqlPoolVulnerabilityAssessmentRuleBaselineMapper
};

export const ruleId: OperationURLParameter = {
  parameterPath: "ruleId",
  mapper: {
    serializedName: "ruleId",
    required: true,
    type: {
      name: "String"
    }
  }
};

export const baselineName: OperationURLParameter = {
  parameterPath: "baselineName",
  mapper: {
    serializedName: "baselineName",
    required: true,
    type: {
      name: "Enum",
      allowedValues: ["master", "default"]
    }
  }
};

export const parameters12: OperationParameter = {
  parameterPath: "parameters",
  mapper: ExtendedSqlPoolBlobAuditingPolicyMapper
};

export const parameters13: OperationParameter = {
  parameterPath: "parameters",
  mapper: DataMaskingPolicyMapper
};

export const dataMaskingPolicyName: OperationURLParameter = {
  parameterPath: "dataMaskingPolicyName",
  mapper: {
    defaultValue: "Default",
    isConstant: true,
    serializedName: "dataMaskingPolicyName",
    type: {
      name: "String"
    }
  }
};

export const parameters14: OperationParameter = {
  parameterPath: "parameters",
  mapper: DataMaskingRuleMapper
};

export const dataMaskingRuleName: OperationURLParameter = {
  parameterPath: "dataMaskingRuleName",
  mapper: {
    serializedName: "dataMaskingRuleName",
    required: true,
    type: {
      name: "String"
    }
  }
};

export const workloadGroupName: OperationURLParameter = {
  parameterPath: "workloadGroupName",
  mapper: {
    serializedName: "workloadGroupName",
    required: true,
    type: {
      name: "String"
    }
  }
};

export const parameters15: OperationParameter = {
  parameterPath: "parameters",
  mapper: WorkloadGroupMapper
};

export const workloadClassifierName: OperationURLParameter = {
  parameterPath: "workloadClassifierName",
  mapper: {
    serializedName: "workloadClassifierName",
    required: true,
    type: {
      name: "String"
    }
  }
};

export const parameters16: OperationParameter = {
  parameterPath: "parameters",
  mapper: WorkloadClassifierMapper
};

export const blobAuditingPolicyName1: OperationURLParameter = {
  parameterPath: "blobAuditingPolicyName",
  mapper: {
    serializedName: "blobAuditingPolicyName",
    required: true,
    type: {
      name: "String"
    }
  }
};

export const parameters17: OperationParameter = {
  parameterPath: "parameters",
  mapper: ServerBlobAuditingPolicyMapper
};

export const parameters18: OperationParameter = {
  parameterPath: "parameters",
  mapper: ExtendedServerBlobAuditingPolicyMapper
};

export const securityAlertPolicyName1: OperationURLParameter = {
  parameterPath: "securityAlertPolicyName",
  mapper: {
    serializedName: "securityAlertPolicyName",
    required: true,
    type: {
      name: "String"
    }
  }
};

export const parameters19: OperationParameter = {
  parameterPath: "parameters",
  mapper: ServerSecurityAlertPolicyMapper
};

export const parameters20: OperationParameter = {
  parameterPath: "parameters",
  mapper: ServerVulnerabilityAssessmentMapper
};

export const encryptionProtectorName: OperationURLParameter = {
  parameterPath: "encryptionProtectorName",
  mapper: {
    serializedName: "encryptionProtectorName",
    required: true,
    type: {
      name: "String"
    }
  }
};

export const parameters21: OperationParameter = {
  parameterPath: "parameters",
  mapper: EncryptionProtectorMapper
};

export const parameters22: OperationParameter = {
  parameterPath: "parameters",
  mapper: DedicatedSQLminimalTlsSettingsMapper
};

export const dedicatedSQLminimalTlsSettingsName: OperationURLParameter = {
  parameterPath: "dedicatedSQLminimalTlsSettingsName",
  mapper: {
    serializedName: "dedicatedSQLminimalTlsSettingsName",
    required: true,
    type: {
      name: "String"
    }
  }
};

export const dedicatedSQLminimalTlsSettingsName1: OperationURLParameter = {
  parameterPath: "dedicatedSQLminimalTlsSettingsName",
  mapper: {
    serializedName: "dedicatedSQLminimalTlsSettingsName",
    required: true,
    type: {
      name: "String"
    }
  }
};

export const workspacePatchInfo: OperationParameter = {
  parameterPath: "workspacePatchInfo",
  mapper: WorkspacePatchInfoMapper
};

export const workspaceInfo: OperationParameter = {
  parameterPath: "workspaceInfo",
  mapper: WorkspaceMapper
};

export const aadAdminInfo: OperationParameter = {
  parameterPath: "aadAdminInfo",
  mapper: WorkspaceAadAdminInfoMapper
};

export const managedIdentitySqlControlSettings: OperationParameter = {
  parameterPath: "managedIdentitySqlControlSettings",
  mapper: ManagedIdentitySqlControlSettingsModelMapper
};

export const restorableDroppedSqlPoolId: OperationURLParameter = {
  parameterPath: "restorableDroppedSqlPoolId",
  mapper: {
    serializedName: "restorableDroppedSqlPoolId",
    required: true,
    type: {
      name: "String"
    }
  }
};

export const apiVersion1: OperationQueryParameter = {
  parameterPath: "apiVersion",
  mapper: {
    defaultValue: "2021-06-01-preview",
    isConstant: true,
    serializedName: "api-version",
    type: {
      name: "String"
    }
  }
};

export const bigDataPoolName: OperationURLParameter = {
  parameterPath: "bigDataPoolName",
  mapper: {
    serializedName: "bigDataPoolName",
    required: true,
    type: {
      name: "String"
    }
  }
};

export const bigDataPoolPatchInfo: OperationParameter = {
  parameterPath: "bigDataPoolPatchInfo",
  mapper: BigDataPoolPatchInfoMapper
};

export const bigDataPoolInfo: OperationParameter = {
  parameterPath: "bigDataPoolInfo",
  mapper: BigDataPoolResourceInfoMapper
};

export const force: OperationQueryParameter = {
  parameterPath: ["options", "force"],
  mapper: {
    defaultValue: false,
    serializedName: "force",
    type: {
      name: "Boolean"
    }
  }
};

export const libraryName: OperationURLParameter = {
  parameterPath: "libraryName",
  mapper: {
    serializedName: "libraryName",
    required: true,
    type: {
      name: "String"
    }
  }
};

export const updateIntegrationRuntimeRequest: OperationParameter = {
  parameterPath: "updateIntegrationRuntimeRequest",
  mapper: UpdateIntegrationRuntimeRequestMapper
};

export const integrationRuntimeName: OperationURLParameter = {
  parameterPath: "integrationRuntimeName",
  mapper: {
    serializedName: "integrationRuntimeName",
    required: true,
    type: {
      name: "String"
    }
  }
};

export const ifNoneMatch: OperationParameter = {
  parameterPath: ["options", "ifNoneMatch"],
  mapper: {
    serializedName: "If-None-Match",
    type: {
      name: "String"
    }
  }
};

export const integrationRuntime: OperationParameter = {
  parameterPath: "integrationRuntime",
  mapper: IntegrationRuntimeResourceMapper
};

export const ifMatch: OperationParameter = {
  parameterPath: ["options", "ifMatch"],
  mapper: {
    serializedName: "If-Match",
    type: {
      name: "String"
    }
  }
};

export const nodeName: OperationURLParameter = {
  parameterPath: "nodeName",
  mapper: {
    serializedName: "nodeName",
    required: true,
    type: {
      name: "String"
    }
  }
};

export const getMetadataRequest: OperationParameter = {
  parameterPath: ["options", "getMetadataRequest"],
  mapper: GetSsisObjectMetadataRequestMapper
};

export const updateIntegrationRuntimeNodeRequest: OperationParameter = {
  parameterPath: "updateIntegrationRuntimeNodeRequest",
  mapper: UpdateIntegrationRuntimeNodeRequestMapper
};

export const regenerateKeyParameters: OperationParameter = {
  parameterPath: "regenerateKeyParameters",
  mapper: IntegrationRuntimeRegenerateKeyParametersMapper
};

export const sparkConfigurationName: OperationURLParameter = {
  parameterPath: "sparkConfigurationName",
  mapper: {
    serializedName: "sparkConfigurationName",
    required: true,
    type: {
      name: "String"
    }
  }
};

export const kustoPoolName: OperationParameter = {
  parameterPath: "kustoPoolName",
  mapper: KustoPoolCheckNameRequestMapper
};

export const location: OperationURLParameter = {
  parameterPath: "location",
  mapper: {
    constraints: {
      MinLength: 1
    },
    serializedName: "location",
    required: true,
    type: {
      name: "String"
    }
  }
};

export const kustoPoolName1: OperationURLParameter = {
  parameterPath: "kustoPoolName",
  mapper: {
    serializedName: "kustoPoolName",
    required: true,
    type: {
      name: "String"
    }
  }
};

export const parameters23: OperationParameter = {
  parameterPath: "parameters",
  mapper: KustoPoolMapper
};

export const parameters24: OperationParameter = {
  parameterPath: "parameters",
  mapper: KustoPoolUpdateMapper
};

export const languageExtensionsToAdd: OperationParameter = {
  parameterPath: "languageExtensionsToAdd",
  mapper: LanguageExtensionsListMapper
};

export const languageExtensionsToRemove: OperationParameter = {
  parameterPath: "languageExtensionsToRemove",
  mapper: LanguageExtensionsListMapper
};

export const followerDatabaseToRemove: OperationParameter = {
  parameterPath: "followerDatabaseToRemove",
  mapper: FollowerDatabaseDefinitionMapper
};

export const resourceName: OperationParameter = {
  parameterPath: "resourceName",
  mapper: DatabaseCheckNameRequestMapper
};

export const attachedDatabaseConfigurationName: OperationURLParameter = {
  parameterPath: "attachedDatabaseConfigurationName",
  mapper: {
    serializedName: "attachedDatabaseConfigurationName",
    required: true,
    type: {
      name: "String"
    }
  }
};

export const parameters25: OperationParameter = {
  parameterPath: "parameters",
  mapper: AttachedDatabaseConfigurationMapper
};

export const databaseName: OperationURLParameter = {
  parameterPath: "databaseName",
  mapper: {
    serializedName: "databaseName",
    required: true,
    type: {
      name: "String"
    }
  }
};

export const parameters26: OperationParameter = {
  parameterPath: "parameters",
  mapper: DatabaseMapper
};

export const dataConnectionName: OperationParameter = {
  parameterPath: "dataConnectionName",
  mapper: DataConnectionCheckNameRequestMapper
};

export const parameters27: OperationParameter = {
  parameterPath: "parameters",
  mapper: DataConnectionValidationMapper
};

export const dataConnectionName1: OperationURLParameter = {
  parameterPath: "dataConnectionName",
  mapper: {
    serializedName: "dataConnectionName",
    required: true,
    type: {
      name: "String"
    }
  }
};

export const parameters28: OperationParameter = {
  parameterPath: "parameters",
  mapper: DataConnectionMapper
};

export const principalAssignmentName: OperationParameter = {
  parameterPath: "principalAssignmentName",
  mapper: ClusterPrincipalAssignmentCheckNameRequestMapper
};

export const principalAssignmentName1: OperationURLParameter = {
  parameterPath: "principalAssignmentName",
  mapper: {
    serializedName: "principalAssignmentName",
    required: true,
    type: {
      name: "String"
    }
  }
};

export const parameters29: OperationParameter = {
  parameterPath: "parameters",
  mapper: ClusterPrincipalAssignmentMapper
};

export const principalAssignmentName2: OperationParameter = {
  parameterPath: "principalAssignmentName",
  mapper: DatabasePrincipalAssignmentCheckNameRequestMapper
};

export const parameters30: OperationParameter = {
  parameterPath: "parameters",
  mapper: DatabasePrincipalAssignmentMapper
};
