/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */

import { PagedAsyncIterableIterator } from "@azure/core-paging";
import { SqlPoolVulnerabilityAssessmentScans } from "../operationsInterfaces";
import * as coreClient from "@azure/core-client";
import * as Mappers from "../models/mappers";
import * as Parameters from "../models/parameters";
import { SynapseManagementClient } from "../synapseManagementClient";
import { PollerLike, PollOperationState, LroEngine } from "@azure/core-lro";
import { LroImpl } from "../lroImpl";
import {
  VulnerabilityAssessmentScanRecord,
  VulnerabilityAssessmentName,
  SqlPoolVulnerabilityAssessmentScansListNextOptionalParams,
  SqlPoolVulnerabilityAssessmentScansListOptionalParams,
  SqlPoolVulnerabilityAssessmentScansListResponse,
  SqlPoolVulnerabilityAssessmentScansInitiateScanOptionalParams,
  SqlPoolVulnerabilityAssessmentScansExportOptionalParams,
  SqlPoolVulnerabilityAssessmentScansExportResponse,
  SqlPoolVulnerabilityAssessmentScansGetOptionalParams,
  SqlPoolVulnerabilityAssessmentScansGetResponse,
  SqlPoolVulnerabilityAssessmentScansListNextResponse
} from "../models";

/// <reference lib="esnext.asynciterable" />
/** Class containing SqlPoolVulnerabilityAssessmentScans operations. */
export class SqlPoolVulnerabilityAssessmentScansImpl
  implements SqlPoolVulnerabilityAssessmentScans {
  private readonly client: SynapseManagementClient;

  /**
   * Initialize a new instance of the class SqlPoolVulnerabilityAssessmentScans class.
   * @param client Reference to the service client
   */
  constructor(client: SynapseManagementClient) {
    this.client = client;
  }

  /**
   * Lists the vulnerability assessment scans of a SQL pool.
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param workspaceName The name of the workspace.
   * @param sqlPoolName SQL pool name
   * @param vulnerabilityAssessmentName The name of the vulnerability assessment.
   * @param options The options parameters.
   */
  public list(
    resourceGroupName: string,
    workspaceName: string,
    sqlPoolName: string,
    vulnerabilityAssessmentName: VulnerabilityAssessmentName,
    options?: SqlPoolVulnerabilityAssessmentScansListOptionalParams
  ): PagedAsyncIterableIterator<VulnerabilityAssessmentScanRecord> {
    const iter = this.listPagingAll(
      resourceGroupName,
      workspaceName,
      sqlPoolName,
      vulnerabilityAssessmentName,
      options
    );
    return {
      next() {
        return iter.next();
      },
      [Symbol.asyncIterator]() {
        return this;
      },
      byPage: () => {
        return this.listPagingPage(
          resourceGroupName,
          workspaceName,
          sqlPoolName,
          vulnerabilityAssessmentName,
          options
        );
      }
    };
  }

  private async *listPagingPage(
    resourceGroupName: string,
    workspaceName: string,
    sqlPoolName: string,
    vulnerabilityAssessmentName: VulnerabilityAssessmentName,
    options?: SqlPoolVulnerabilityAssessmentScansListOptionalParams
  ): AsyncIterableIterator<VulnerabilityAssessmentScanRecord[]> {
    let result = await this._list(
      resourceGroupName,
      workspaceName,
      sqlPoolName,
      vulnerabilityAssessmentName,
      options
    );
    yield result.value || [];
    let continuationToken = result.nextLink;
    while (continuationToken) {
      result = await this._listNext(
        resourceGroupName,
        workspaceName,
        sqlPoolName,
        vulnerabilityAssessmentName,
        continuationToken,
        options
      );
      continuationToken = result.nextLink;
      yield result.value || [];
    }
  }

  private async *listPagingAll(
    resourceGroupName: string,
    workspaceName: string,
    sqlPoolName: string,
    vulnerabilityAssessmentName: VulnerabilityAssessmentName,
    options?: SqlPoolVulnerabilityAssessmentScansListOptionalParams
  ): AsyncIterableIterator<VulnerabilityAssessmentScanRecord> {
    for await (const page of this.listPagingPage(
      resourceGroupName,
      workspaceName,
      sqlPoolName,
      vulnerabilityAssessmentName,
      options
    )) {
      yield* page;
    }
  }

  /**
   * Lists the vulnerability assessment scans of a SQL pool.
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param workspaceName The name of the workspace.
   * @param sqlPoolName SQL pool name
   * @param vulnerabilityAssessmentName The name of the vulnerability assessment.
   * @param options The options parameters.
   */
  private _list(
    resourceGroupName: string,
    workspaceName: string,
    sqlPoolName: string,
    vulnerabilityAssessmentName: VulnerabilityAssessmentName,
    options?: SqlPoolVulnerabilityAssessmentScansListOptionalParams
  ): Promise<SqlPoolVulnerabilityAssessmentScansListResponse> {
    return this.client.sendOperationRequest(
      {
        resourceGroupName,
        workspaceName,
        sqlPoolName,
        vulnerabilityAssessmentName,
        options
      },
      listOperationSpec
    );
  }

  /**
   * Executes a Vulnerability Assessment database scan.
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param workspaceName The name of the workspace.
   * @param sqlPoolName SQL pool name
   * @param vulnerabilityAssessmentName The name of the vulnerability assessment.
   * @param scanId The vulnerability assessment scan Id of the scan to retrieve.
   * @param options The options parameters.
   */
  async beginInitiateScan(
    resourceGroupName: string,
    workspaceName: string,
    sqlPoolName: string,
    vulnerabilityAssessmentName: VulnerabilityAssessmentName,
    scanId: string,
    options?: SqlPoolVulnerabilityAssessmentScansInitiateScanOptionalParams
  ): Promise<PollerLike<PollOperationState<void>, void>> {
    const directSendOperation = async (
      args: coreClient.OperationArguments,
      spec: coreClient.OperationSpec
    ): Promise<void> => {
      return this.client.sendOperationRequest(args, spec);
    };
    const sendOperation = async (
      args: coreClient.OperationArguments,
      spec: coreClient.OperationSpec
    ) => {
      let currentRawResponse:
        | coreClient.FullOperationResponse
        | undefined = undefined;
      const providedCallback = args.options?.onResponse;
      const callback: coreClient.RawResponseCallback = (
        rawResponse: coreClient.FullOperationResponse,
        flatResponse: unknown
      ) => {
        currentRawResponse = rawResponse;
        providedCallback?.(rawResponse, flatResponse);
      };
      const updatedArgs = {
        ...args,
        options: {
          ...args.options,
          onResponse: callback
        }
      };
      const flatResponse = await directSendOperation(updatedArgs, spec);
      return {
        flatResponse,
        rawResponse: {
          statusCode: currentRawResponse!.status,
          body: currentRawResponse!.parsedBody,
          headers: currentRawResponse!.headers.toJSON()
        }
      };
    };

    const lro = new LroImpl(
      sendOperation,
      {
        resourceGroupName,
        workspaceName,
        sqlPoolName,
        vulnerabilityAssessmentName,
        scanId,
        options
      },
      initiateScanOperationSpec
    );
    const poller = new LroEngine(lro, {
      resumeFrom: options?.resumeFrom,
      intervalInMs: options?.updateIntervalInMs
    });
    await poller.poll();
    return poller;
  }

  /**
   * Executes a Vulnerability Assessment database scan.
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param workspaceName The name of the workspace.
   * @param sqlPoolName SQL pool name
   * @param vulnerabilityAssessmentName The name of the vulnerability assessment.
   * @param scanId The vulnerability assessment scan Id of the scan to retrieve.
   * @param options The options parameters.
   */
  async beginInitiateScanAndWait(
    resourceGroupName: string,
    workspaceName: string,
    sqlPoolName: string,
    vulnerabilityAssessmentName: VulnerabilityAssessmentName,
    scanId: string,
    options?: SqlPoolVulnerabilityAssessmentScansInitiateScanOptionalParams
  ): Promise<void> {
    const poller = await this.beginInitiateScan(
      resourceGroupName,
      workspaceName,
      sqlPoolName,
      vulnerabilityAssessmentName,
      scanId,
      options
    );
    return poller.pollUntilDone();
  }

  /**
   * Convert an existing scan result to a human readable format. If already exists nothing happens
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param workspaceName The name of the workspace.
   * @param sqlPoolName SQL pool name
   * @param vulnerabilityAssessmentName The name of the vulnerability assessment.
   * @param scanId The vulnerability assessment scan Id of the scan to retrieve.
   * @param options The options parameters.
   */
  export(
    resourceGroupName: string,
    workspaceName: string,
    sqlPoolName: string,
    vulnerabilityAssessmentName: VulnerabilityAssessmentName,
    scanId: string,
    options?: SqlPoolVulnerabilityAssessmentScansExportOptionalParams
  ): Promise<SqlPoolVulnerabilityAssessmentScansExportResponse> {
    return this.client.sendOperationRequest(
      {
        resourceGroupName,
        workspaceName,
        sqlPoolName,
        vulnerabilityAssessmentName,
        scanId,
        options
      },
      exportOperationSpec
    );
  }

  /**
   * Gets a vulnerability assessment scan record of a Sql pool.
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param workspaceName The name of the workspace.
   * @param sqlPoolName SQL pool name
   * @param vulnerabilityAssessmentName The name of the vulnerability assessment.
   * @param scanId The vulnerability assessment scan Id of the scan to retrieve.
   * @param options The options parameters.
   */
  get(
    resourceGroupName: string,
    workspaceName: string,
    sqlPoolName: string,
    vulnerabilityAssessmentName: VulnerabilityAssessmentName,
    scanId: string,
    options?: SqlPoolVulnerabilityAssessmentScansGetOptionalParams
  ): Promise<SqlPoolVulnerabilityAssessmentScansGetResponse> {
    return this.client.sendOperationRequest(
      {
        resourceGroupName,
        workspaceName,
        sqlPoolName,
        vulnerabilityAssessmentName,
        scanId,
        options
      },
      getOperationSpec
    );
  }

  /**
   * ListNext
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param workspaceName The name of the workspace.
   * @param sqlPoolName SQL pool name
   * @param vulnerabilityAssessmentName The name of the vulnerability assessment.
   * @param nextLink The nextLink from the previous successful call to the List method.
   * @param options The options parameters.
   */
  private _listNext(
    resourceGroupName: string,
    workspaceName: string,
    sqlPoolName: string,
    vulnerabilityAssessmentName: VulnerabilityAssessmentName,
    nextLink: string,
    options?: SqlPoolVulnerabilityAssessmentScansListNextOptionalParams
  ): Promise<SqlPoolVulnerabilityAssessmentScansListNextResponse> {
    return this.client.sendOperationRequest(
      {
        resourceGroupName,
        workspaceName,
        sqlPoolName,
        vulnerabilityAssessmentName,
        nextLink,
        options
      },
      listNextOperationSpec
    );
  }
}
// Operation Specifications
const serializer = coreClient.createSerializer(Mappers, /* isXml */ false);

const listOperationSpec: coreClient.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Synapse/workspaces/{workspaceName}/sqlPools/{sqlPoolName}/vulnerabilityAssessments/{vulnerabilityAssessmentName}/scans",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.VulnerabilityAssessmentScanRecordListResult
    },
    default: {}
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.workspaceName,
    Parameters.sqlPoolName,
    Parameters.vulnerabilityAssessmentName
  ],
  headerParameters: [Parameters.accept],
  serializer
};
const initiateScanOperationSpec: coreClient.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Synapse/workspaces/{workspaceName}/sqlPools/{sqlPoolName}/vulnerabilityAssessments/{vulnerabilityAssessmentName}/scans/{scanId}/initiateScan",
  httpMethod: "POST",
  responses: { 200: {}, 201: {}, 202: {}, 204: {}, default: {} },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.workspaceName,
    Parameters.sqlPoolName,
    Parameters.vulnerabilityAssessmentName,
    Parameters.scanId
  ],
  serializer
};
const exportOperationSpec: coreClient.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Synapse/workspaces/{workspaceName}/sqlPools/{sqlPoolName}/vulnerabilityAssessments/{vulnerabilityAssessmentName}/scans/{scanId}/export",
  httpMethod: "POST",
  responses: {
    200: {
      bodyMapper: Mappers.SqlPoolVulnerabilityAssessmentScansExport
    },
    201: {
      bodyMapper: Mappers.SqlPoolVulnerabilityAssessmentScansExport
    },
    default: {}
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.workspaceName,
    Parameters.sqlPoolName,
    Parameters.vulnerabilityAssessmentName,
    Parameters.scanId
  ],
  headerParameters: [Parameters.accept],
  serializer
};
const getOperationSpec: coreClient.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Synapse/workspaces/{workspaceName}/sqlPools/{sqlPoolName}/vulnerabilityAssessments/{vulnerabilityAssessmentName}/scans/{scanId}",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.VulnerabilityAssessmentScanRecord
    },
    default: {}
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.workspaceName,
    Parameters.sqlPoolName,
    Parameters.vulnerabilityAssessmentName,
    Parameters.scanId
  ],
  headerParameters: [Parameters.accept],
  serializer
};
const listNextOperationSpec: coreClient.OperationSpec = {
  path: "{nextLink}",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.VulnerabilityAssessmentScanRecordListResult
    },
    default: {}
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.workspaceName,
    Parameters.nextLink,
    Parameters.sqlPoolName,
    Parameters.vulnerabilityAssessmentName
  ],
  headerParameters: [Parameters.accept],
  serializer
};
