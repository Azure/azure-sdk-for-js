/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */

import { PagedAsyncIterableIterator } from "@azure/core-paging";
import { DataMaskingRules } from "../operationsInterfaces";
import * as coreClient from "@azure/core-client";
import * as Mappers from "../models/mappers";
import * as Parameters from "../models/parameters";
import { SynapseManagementClient } from "../synapseManagementClient";
import {
  DataMaskingRule,
  DataMaskingRulesListBySqlPoolOptionalParams,
  DataMaskingRulesCreateOrUpdateOptionalParams,
  DataMaskingRulesCreateOrUpdateResponse,
  DataMaskingRulesGetOptionalParams,
  DataMaskingRulesGetResponse,
  DataMaskingRulesListBySqlPoolResponse
} from "../models";

/// <reference lib="esnext.asynciterable" />
/** Class containing DataMaskingRules operations. */
export class DataMaskingRulesImpl implements DataMaskingRules {
  private readonly client: SynapseManagementClient;

  /**
   * Initialize a new instance of the class DataMaskingRules class.
   * @param client Reference to the service client
   */
  constructor(client: SynapseManagementClient) {
    this.client = client;
  }

  /**
   * Gets a list of Sql pool data masking rules.
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param workspaceName The name of the workspace.
   * @param sqlPoolName SQL pool name
   * @param options The options parameters.
   */
  public listBySqlPool(
    resourceGroupName: string,
    workspaceName: string,
    sqlPoolName: string,
    options?: DataMaskingRulesListBySqlPoolOptionalParams
  ): PagedAsyncIterableIterator<DataMaskingRule> {
    const iter = this.listBySqlPoolPagingAll(
      resourceGroupName,
      workspaceName,
      sqlPoolName,
      options
    );
    return {
      next() {
        return iter.next();
      },
      [Symbol.asyncIterator]() {
        return this;
      },
      byPage: () => {
        return this.listBySqlPoolPagingPage(
          resourceGroupName,
          workspaceName,
          sqlPoolName,
          options
        );
      }
    };
  }

  private async *listBySqlPoolPagingPage(
    resourceGroupName: string,
    workspaceName: string,
    sqlPoolName: string,
    options?: DataMaskingRulesListBySqlPoolOptionalParams
  ): AsyncIterableIterator<DataMaskingRule[]> {
    let result = await this._listBySqlPool(
      resourceGroupName,
      workspaceName,
      sqlPoolName,
      options
    );
    yield result.value || [];
  }

  private async *listBySqlPoolPagingAll(
    resourceGroupName: string,
    workspaceName: string,
    sqlPoolName: string,
    options?: DataMaskingRulesListBySqlPoolOptionalParams
  ): AsyncIterableIterator<DataMaskingRule> {
    for await (const page of this.listBySqlPoolPagingPage(
      resourceGroupName,
      workspaceName,
      sqlPoolName,
      options
    )) {
      yield* page;
    }
  }

  /**
   * Creates or updates a Sql pool data masking rule.
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param workspaceName The name of the workspace.
   * @param sqlPoolName SQL pool name
   * @param dataMaskingRuleName The name of the data masking rule.
   * @param parameters The required parameters for creating or updating a data masking rule.
   * @param options The options parameters.
   */
  createOrUpdate(
    resourceGroupName: string,
    workspaceName: string,
    sqlPoolName: string,
    dataMaskingRuleName: string,
    parameters: DataMaskingRule,
    options?: DataMaskingRulesCreateOrUpdateOptionalParams
  ): Promise<DataMaskingRulesCreateOrUpdateResponse> {
    return this.client.sendOperationRequest(
      {
        resourceGroupName,
        workspaceName,
        sqlPoolName,
        dataMaskingRuleName,
        parameters,
        options
      },
      createOrUpdateOperationSpec
    );
  }

  /**
   * Gets the specific Sql pool data masking rule.
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param workspaceName The name of the workspace.
   * @param sqlPoolName SQL pool name
   * @param dataMaskingRuleName The name of the data masking rule.
   * @param options The options parameters.
   */
  get(
    resourceGroupName: string,
    workspaceName: string,
    sqlPoolName: string,
    dataMaskingRuleName: string,
    options?: DataMaskingRulesGetOptionalParams
  ): Promise<DataMaskingRulesGetResponse> {
    return this.client.sendOperationRequest(
      {
        resourceGroupName,
        workspaceName,
        sqlPoolName,
        dataMaskingRuleName,
        options
      },
      getOperationSpec
    );
  }

  /**
   * Gets a list of Sql pool data masking rules.
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param workspaceName The name of the workspace.
   * @param sqlPoolName SQL pool name
   * @param options The options parameters.
   */
  private _listBySqlPool(
    resourceGroupName: string,
    workspaceName: string,
    sqlPoolName: string,
    options?: DataMaskingRulesListBySqlPoolOptionalParams
  ): Promise<DataMaskingRulesListBySqlPoolResponse> {
    return this.client.sendOperationRequest(
      { resourceGroupName, workspaceName, sqlPoolName, options },
      listBySqlPoolOperationSpec
    );
  }
}
// Operation Specifications
const serializer = coreClient.createSerializer(Mappers, /* isXml */ false);

const createOrUpdateOperationSpec: coreClient.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Synapse/workspaces/{workspaceName}/sqlPools/{sqlPoolName}/dataMaskingPolicies/{dataMaskingPolicyName}/rules/{dataMaskingRuleName}",
  httpMethod: "PUT",
  responses: {
    200: {
      bodyMapper: Mappers.DataMaskingRule
    },
    201: {
      bodyMapper: Mappers.DataMaskingRule
    },
    default: {
      bodyMapper: Mappers.ErrorResponse
    }
  },
  requestBody: Parameters.parameters14,
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.workspaceName,
    Parameters.sqlPoolName,
    Parameters.dataMaskingPolicyName,
    Parameters.dataMaskingRuleName
  ],
  headerParameters: [Parameters.accept, Parameters.contentType],
  mediaType: "json",
  serializer
};
const getOperationSpec: coreClient.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Synapse/workspaces/{workspaceName}/sqlPools/{sqlPoolName}/dataMaskingPolicies/{dataMaskingPolicyName}/rules/{dataMaskingRuleName}",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.DataMaskingRule
    },
    default: {
      bodyMapper: Mappers.ErrorResponse
    }
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.workspaceName,
    Parameters.sqlPoolName,
    Parameters.dataMaskingPolicyName,
    Parameters.dataMaskingRuleName
  ],
  headerParameters: [Parameters.accept],
  serializer
};
const listBySqlPoolOperationSpec: coreClient.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Synapse/workspaces/{workspaceName}/sqlPools/{sqlPoolName}/dataMaskingPolicies/{dataMaskingPolicyName}/rules",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.DataMaskingRuleListResult
    },
    default: {
      bodyMapper: Mappers.ErrorResponse
    }
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.workspaceName,
    Parameters.sqlPoolName,
    Parameters.dataMaskingPolicyName
  ],
  headerParameters: [Parameters.accept],
  serializer
};
