/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is
 * regenerated.
 */

import * as msRest from "@azure/ms-rest-js";
import * as msRestAzure from "@azure/ms-rest-azure-js";
import * as Models from "../models";
import * as Mappers from "../models/ipFirewallRulesMappers";
import * as Parameters from "../models/parameters";
import { SynapseManagementClientContext } from "../synapseManagementClientContext";

/** Class representing a IpFirewallRules. */
export class IpFirewallRules {
  private readonly client: SynapseManagementClientContext;

  /**
   * Create a IpFirewallRules.
   * @param {SynapseManagementClientContext} client Reference to the service client.
   */
  constructor(client: SynapseManagementClientContext) {
    this.client = client;
  }

  /**
   * Returns a list of firewall rules
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param workspaceName The name of the workspace
   * @param [options] The optional parameters
   * @returns Promise<Models.IpFirewallRulesListByWorkspaceResponse>
   */
  listByWorkspace(resourceGroupName: string, workspaceName: string, options?: msRest.RequestOptionsBase): Promise<Models.IpFirewallRulesListByWorkspaceResponse>;
  /**
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param workspaceName The name of the workspace
   * @param callback The callback
   */
  listByWorkspace(resourceGroupName: string, workspaceName: string, callback: msRest.ServiceCallback<Models.IpFirewallRuleInfoListResult>): void;
  /**
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param workspaceName The name of the workspace
   * @param options The optional parameters
   * @param callback The callback
   */
  listByWorkspace(resourceGroupName: string, workspaceName: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.IpFirewallRuleInfoListResult>): void;
  listByWorkspace(resourceGroupName: string, workspaceName: string, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<Models.IpFirewallRuleInfoListResult>, callback?: msRest.ServiceCallback<Models.IpFirewallRuleInfoListResult>): Promise<Models.IpFirewallRulesListByWorkspaceResponse> {
    return this.client.sendOperationRequest(
      {
        resourceGroupName,
        workspaceName,
        options
      },
      listByWorkspaceOperationSpec,
      callback) as Promise<Models.IpFirewallRulesListByWorkspaceResponse>;
  }

  /**
   * Creates or updates a firewall rule
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param workspaceName The name of the workspace
   * @param ruleName The IP firewall rule name
   * @param ipFirewallRuleInfo IP firewall rule properties
   * @param [options] The optional parameters
   * @returns Promise<Models.IpFirewallRulesCreateOrUpdateResponse>
   */
  createOrUpdate(resourceGroupName: string, workspaceName: string, ruleName: string, ipFirewallRuleInfo: Models.IpFirewallRuleInfo, options?: msRest.RequestOptionsBase): Promise<Models.IpFirewallRulesCreateOrUpdateResponse> {
    return this.beginCreateOrUpdate(resourceGroupName,workspaceName,ruleName,ipFirewallRuleInfo,options)
      .then(lroPoller => lroPoller.pollUntilFinished()) as Promise<Models.IpFirewallRulesCreateOrUpdateResponse>;
  }

  /**
   * Deletes a firewall rule
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param workspaceName The name of the workspace
   * @param ruleName The IP firewall rule name
   * @param [options] The optional parameters
   * @returns Promise<Models.IpFirewallRulesDeleteMethodResponse>
   */
  deleteMethod(resourceGroupName: string, workspaceName: string, ruleName: string, options?: msRest.RequestOptionsBase): Promise<Models.IpFirewallRulesDeleteMethodResponse> {
    return this.beginDeleteMethod(resourceGroupName,workspaceName,ruleName,options)
      .then(lroPoller => lroPoller.pollUntilFinished()) as Promise<Models.IpFirewallRulesDeleteMethodResponse>;
  }

  /**
   * Get a firewall rule
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param workspaceName The name of the workspace
   * @param ruleName The IP firewall rule name
   * @param [options] The optional parameters
   * @returns Promise<Models.IpFirewallRulesGetResponse>
   */
  get(resourceGroupName: string, workspaceName: string, ruleName: string, options?: msRest.RequestOptionsBase): Promise<Models.IpFirewallRulesGetResponse>;
  /**
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param workspaceName The name of the workspace
   * @param ruleName The IP firewall rule name
   * @param callback The callback
   */
  get(resourceGroupName: string, workspaceName: string, ruleName: string, callback: msRest.ServiceCallback<Models.IpFirewallRuleInfo>): void;
  /**
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param workspaceName The name of the workspace
   * @param ruleName The IP firewall rule name
   * @param options The optional parameters
   * @param callback The callback
   */
  get(resourceGroupName: string, workspaceName: string, ruleName: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.IpFirewallRuleInfo>): void;
  get(resourceGroupName: string, workspaceName: string, ruleName: string, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<Models.IpFirewallRuleInfo>, callback?: msRest.ServiceCallback<Models.IpFirewallRuleInfo>): Promise<Models.IpFirewallRulesGetResponse> {
    return this.client.sendOperationRequest(
      {
        resourceGroupName,
        workspaceName,
        ruleName,
        options
      },
      getOperationSpec,
      callback) as Promise<Models.IpFirewallRulesGetResponse>;
  }

  /**
   * Replaces firewall rules
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param workspaceName The name of the workspace
   * @param request Replace all IP firewall rules request
   * @param [options] The optional parameters
   * @returns Promise<Models.IpFirewallRulesReplaceAllResponse>
   */
  replaceAll(resourceGroupName: string, workspaceName: string, request: Models.ReplaceAllIpFirewallRulesRequest, options?: msRest.RequestOptionsBase): Promise<Models.IpFirewallRulesReplaceAllResponse> {
    return this.beginReplaceAll(resourceGroupName,workspaceName,request,options)
      .then(lroPoller => lroPoller.pollUntilFinished()) as Promise<Models.IpFirewallRulesReplaceAllResponse>;
  }

  /**
   * Creates or updates a firewall rule
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param workspaceName The name of the workspace
   * @param ruleName The IP firewall rule name
   * @param ipFirewallRuleInfo IP firewall rule properties
   * @param [options] The optional parameters
   * @returns Promise<msRestAzure.LROPoller>
   */
  beginCreateOrUpdate(resourceGroupName: string, workspaceName: string, ruleName: string, ipFirewallRuleInfo: Models.IpFirewallRuleInfo, options?: msRest.RequestOptionsBase): Promise<msRestAzure.LROPoller> {
    return this.client.sendLRORequest(
      {
        resourceGroupName,
        workspaceName,
        ruleName,
        ipFirewallRuleInfo,
        options
      },
      beginCreateOrUpdateOperationSpec,
      options);
  }

  /**
   * Deletes a firewall rule
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param workspaceName The name of the workspace
   * @param ruleName The IP firewall rule name
   * @param [options] The optional parameters
   * @returns Promise<msRestAzure.LROPoller>
   */
  beginDeleteMethod(resourceGroupName: string, workspaceName: string, ruleName: string, options?: msRest.RequestOptionsBase): Promise<msRestAzure.LROPoller> {
    return this.client.sendLRORequest(
      {
        resourceGroupName,
        workspaceName,
        ruleName,
        options
      },
      beginDeleteMethodOperationSpec,
      options);
  }

  /**
   * Replaces firewall rules
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param workspaceName The name of the workspace
   * @param request Replace all IP firewall rules request
   * @param [options] The optional parameters
   * @returns Promise<msRestAzure.LROPoller>
   */
  beginReplaceAll(resourceGroupName: string, workspaceName: string, request: Models.ReplaceAllIpFirewallRulesRequest, options?: msRest.RequestOptionsBase): Promise<msRestAzure.LROPoller> {
    return this.client.sendLRORequest(
      {
        resourceGroupName,
        workspaceName,
        request,
        options
      },
      beginReplaceAllOperationSpec,
      options);
  }

  /**
   * Returns a list of firewall rules
   * @param nextPageLink The NextLink from the previous successful call to List operation.
   * @param [options] The optional parameters
   * @returns Promise<Models.IpFirewallRulesListByWorkspaceNextResponse>
   */
  listByWorkspaceNext(nextPageLink: string, options?: msRest.RequestOptionsBase): Promise<Models.IpFirewallRulesListByWorkspaceNextResponse>;
  /**
   * @param nextPageLink The NextLink from the previous successful call to List operation.
   * @param callback The callback
   */
  listByWorkspaceNext(nextPageLink: string, callback: msRest.ServiceCallback<Models.IpFirewallRuleInfoListResult>): void;
  /**
   * @param nextPageLink The NextLink from the previous successful call to List operation.
   * @param options The optional parameters
   * @param callback The callback
   */
  listByWorkspaceNext(nextPageLink: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.IpFirewallRuleInfoListResult>): void;
  listByWorkspaceNext(nextPageLink: string, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<Models.IpFirewallRuleInfoListResult>, callback?: msRest.ServiceCallback<Models.IpFirewallRuleInfoListResult>): Promise<Models.IpFirewallRulesListByWorkspaceNextResponse> {
    return this.client.sendOperationRequest(
      {
        nextPageLink,
        options
      },
      listByWorkspaceNextOperationSpec,
      callback) as Promise<Models.IpFirewallRulesListByWorkspaceNextResponse>;
  }
}

// Operation Specifications
const serializer = new msRest.Serializer(Mappers);
const listByWorkspaceOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Synapse/workspaces/{workspaceName}/firewallRules",
  urlParameters: [
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.workspaceName
  ],
  queryParameters: [
    Parameters.apiVersion
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    200: {
      bodyMapper: Mappers.IpFirewallRuleInfoListResult
    },
    default: {
      bodyMapper: Mappers.ErrorResponse
    }
  },
  serializer
};

const getOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Synapse/workspaces/{workspaceName}/firewallRules/{ruleName}",
  urlParameters: [
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.workspaceName,
    Parameters.ruleName
  ],
  queryParameters: [
    Parameters.apiVersion
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    200: {
      bodyMapper: Mappers.IpFirewallRuleInfo
    },
    default: {
      bodyMapper: Mappers.ErrorResponse
    }
  },
  serializer
};

const beginCreateOrUpdateOperationSpec: msRest.OperationSpec = {
  httpMethod: "PUT",
  path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Synapse/workspaces/{workspaceName}/firewallRules/{ruleName}",
  urlParameters: [
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.workspaceName,
    Parameters.ruleName
  ],
  queryParameters: [
    Parameters.apiVersion
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  requestBody: {
    parameterPath: "ipFirewallRuleInfo",
    mapper: {
      ...Mappers.IpFirewallRuleInfo,
      required: true
    }
  },
  responses: {
    200: {
      bodyMapper: Mappers.IpFirewallRuleInfo
    },
    201: {
      bodyMapper: Mappers.IpFirewallRuleInfo
    },
    default: {
      bodyMapper: Mappers.ErrorResponse
    }
  },
  serializer
};

const beginDeleteMethodOperationSpec: msRest.OperationSpec = {
  httpMethod: "DELETE",
  path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Synapse/workspaces/{workspaceName}/firewallRules/{ruleName}",
  urlParameters: [
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.workspaceName,
    Parameters.ruleName
  ],
  queryParameters: [
    Parameters.apiVersion
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    200: {
      bodyMapper: {
        serializedName: "parsedResponse",
        type: {
          name: "Object"
        }
      }
    },
    202: {},
    204: {},
    default: {
      bodyMapper: Mappers.ErrorResponse
    }
  },
  serializer
};

const beginReplaceAllOperationSpec: msRest.OperationSpec = {
  httpMethod: "POST",
  path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Synapse/workspaces/{workspaceName}/replaceAllIpFirewallRules",
  urlParameters: [
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.workspaceName
  ],
  queryParameters: [
    Parameters.apiVersion
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  requestBody: {
    parameterPath: "request",
    mapper: {
      ...Mappers.ReplaceAllIpFirewallRulesRequest,
      required: true
    }
  },
  responses: {
    200: {
      bodyMapper: Mappers.ReplaceAllFirewallRulesOperationResponse
    },
    202: {},
    default: {
      bodyMapper: Mappers.ErrorResponse
    }
  },
  serializer
};

const listByWorkspaceNextOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  baseUrl: "https://management.azure.com",
  path: "{nextLink}",
  urlParameters: [
    Parameters.nextPageLink
  ],
  queryParameters: [
    Parameters.apiVersion
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    200: {
      bodyMapper: Mappers.IpFirewallRuleInfoListResult
    },
    default: {
      bodyMapper: Mappers.ErrorResponse
    }
  },
  serializer
};
