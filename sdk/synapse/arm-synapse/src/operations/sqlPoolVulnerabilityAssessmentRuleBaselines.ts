/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */

import { SqlPoolVulnerabilityAssessmentRuleBaselines } from "../operationsInterfaces";
import * as coreClient from "@azure/core-client";
import * as Mappers from "../models/mappers";
import * as Parameters from "../models/parameters";
import { SynapseManagementClient } from "../synapseManagementClient";
import {
  VulnerabilityAssessmentName,
  SqlPoolVulnerabilityAssessmentRuleBaseline,
  VulnerabilityAssessmentPolicyBaselineName,
  SqlPoolVulnerabilityAssessmentRuleBaselinesCreateOrUpdateOptionalParams,
  SqlPoolVulnerabilityAssessmentRuleBaselinesCreateOrUpdateResponse,
  SqlPoolVulnerabilityAssessmentRuleBaselinesDeleteOptionalParams,
  SqlPoolVulnerabilityAssessmentRuleBaselinesGetOptionalParams,
  SqlPoolVulnerabilityAssessmentRuleBaselinesGetResponse
} from "../models";

/** Class containing SqlPoolVulnerabilityAssessmentRuleBaselines operations. */
export class SqlPoolVulnerabilityAssessmentRuleBaselinesImpl
  implements SqlPoolVulnerabilityAssessmentRuleBaselines {
  private readonly client: SynapseManagementClient;

  /**
   * Initialize a new instance of the class SqlPoolVulnerabilityAssessmentRuleBaselines class.
   * @param client Reference to the service client
   */
  constructor(client: SynapseManagementClient) {
    this.client = client;
  }

  /**
   * Creates or updates a Sql pool's vulnerability assessment rule baseline.
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param workspaceName The name of the workspace.
   * @param sqlPoolName SQL pool name
   * @param vulnerabilityAssessmentName The name of the vulnerability assessment.
   * @param ruleId The vulnerability assessment rule ID.
   * @param baselineName The name of the vulnerability assessment rule baseline (default implies a
   *                     baseline on a Sql pool level rule and master for workspace level rule).
   * @param parameters The requested rule baseline resource.
   * @param options The options parameters.
   */
  createOrUpdate(
    resourceGroupName: string,
    workspaceName: string,
    sqlPoolName: string,
    vulnerabilityAssessmentName: VulnerabilityAssessmentName,
    ruleId: string,
    baselineName: VulnerabilityAssessmentPolicyBaselineName,
    parameters: SqlPoolVulnerabilityAssessmentRuleBaseline,
    options?: SqlPoolVulnerabilityAssessmentRuleBaselinesCreateOrUpdateOptionalParams
  ): Promise<
    SqlPoolVulnerabilityAssessmentRuleBaselinesCreateOrUpdateResponse
  > {
    return this.client.sendOperationRequest(
      {
        resourceGroupName,
        workspaceName,
        sqlPoolName,
        vulnerabilityAssessmentName,
        ruleId,
        baselineName,
        parameters,
        options
      },
      createOrUpdateOperationSpec
    );
  }

  /**
   * Removes the database's vulnerability assessment rule baseline.
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param workspaceName The name of the workspace.
   * @param sqlPoolName SQL pool name
   * @param vulnerabilityAssessmentName The name of the vulnerability assessment.
   * @param ruleId The vulnerability assessment rule ID.
   * @param baselineName The name of the vulnerability assessment rule baseline (default implies a
   *                     baseline on a Sql pool level rule and master for workspace level rule).
   * @param options The options parameters.
   */
  delete(
    resourceGroupName: string,
    workspaceName: string,
    sqlPoolName: string,
    vulnerabilityAssessmentName: VulnerabilityAssessmentName,
    ruleId: string,
    baselineName: VulnerabilityAssessmentPolicyBaselineName,
    options?: SqlPoolVulnerabilityAssessmentRuleBaselinesDeleteOptionalParams
  ): Promise<void> {
    return this.client.sendOperationRequest(
      {
        resourceGroupName,
        workspaceName,
        sqlPoolName,
        vulnerabilityAssessmentName,
        ruleId,
        baselineName,
        options
      },
      deleteOperationSpec
    );
  }

  /**
   * Gets a SqlPool's vulnerability assessment rule baseline.
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param workspaceName The name of the workspace.
   * @param sqlPoolName SQL pool name
   * @param vulnerabilityAssessmentName The name of the vulnerability assessment.
   * @param ruleId The vulnerability assessment rule ID.
   * @param baselineName The name of the vulnerability assessment rule baseline (default implies a
   *                     baseline on a Sql pool level rule and master for server level rule).
   * @param options The options parameters.
   */
  get(
    resourceGroupName: string,
    workspaceName: string,
    sqlPoolName: string,
    vulnerabilityAssessmentName: VulnerabilityAssessmentName,
    ruleId: string,
    baselineName: VulnerabilityAssessmentPolicyBaselineName,
    options?: SqlPoolVulnerabilityAssessmentRuleBaselinesGetOptionalParams
  ): Promise<SqlPoolVulnerabilityAssessmentRuleBaselinesGetResponse> {
    return this.client.sendOperationRequest(
      {
        resourceGroupName,
        workspaceName,
        sqlPoolName,
        vulnerabilityAssessmentName,
        ruleId,
        baselineName,
        options
      },
      getOperationSpec
    );
  }
}
// Operation Specifications
const serializer = coreClient.createSerializer(Mappers, /* isXml */ false);

const createOrUpdateOperationSpec: coreClient.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Synapse/workspaces/{workspaceName}/sqlPools/{sqlPoolName}/vulnerabilityAssessments/{vulnerabilityAssessmentName}/rules/{ruleId}/baselines/{baselineName}",
  httpMethod: "PUT",
  responses: {
    200: {
      bodyMapper: Mappers.SqlPoolVulnerabilityAssessmentRuleBaseline
    },
    default: {}
  },
  requestBody: Parameters.parameters11,
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.workspaceName,
    Parameters.sqlPoolName,
    Parameters.vulnerabilityAssessmentName,
    Parameters.ruleId,
    Parameters.baselineName
  ],
  headerParameters: [Parameters.accept, Parameters.contentType],
  mediaType: "json",
  serializer
};
const deleteOperationSpec: coreClient.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Synapse/workspaces/{workspaceName}/sqlPools/{sqlPoolName}/vulnerabilityAssessments/{vulnerabilityAssessmentName}/rules/{ruleId}/baselines/{baselineName}",
  httpMethod: "DELETE",
  responses: { 200: {}, 204: {}, default: {} },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.workspaceName,
    Parameters.sqlPoolName,
    Parameters.vulnerabilityAssessmentName,
    Parameters.ruleId,
    Parameters.baselineName
  ],
  serializer
};
const getOperationSpec: coreClient.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Synapse/workspaces/{workspaceName}/sqlPools/{sqlPoolName}/vulnerabilityAssessments/{vulnerabilityAssessmentName}/rules/{ruleId}/baselines/{baselineName}",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.SqlPoolVulnerabilityAssessmentRuleBaseline
    },
    default: {}
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.workspaceName,
    Parameters.sqlPoolName,
    Parameters.vulnerabilityAssessmentName,
    Parameters.ruleId,
    Parameters.baselineName
  ],
  headerParameters: [Parameters.accept],
  serializer
};
