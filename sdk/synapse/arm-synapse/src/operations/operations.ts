/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */

import { Operations } from "../operationsInterfaces";
import * as coreClient from "@azure/core-client";
import * as Mappers from "../models/mappers";
import * as Parameters from "../models/parameters";
import { SynapseManagementClient } from "../synapseManagementClient";
import {
  CheckNameAvailabilityRequest,
  OperationsCheckNameAvailabilityOptionalParams,
  OperationsCheckNameAvailabilityResponse,
  OperationsListOptionalParams,
  OperationsListResponse,
  OperationsGetLocationHeaderResultOptionalParams,
  OperationsGetAzureAsyncHeaderResultOptionalParams,
  OperationsGetAzureAsyncHeaderResultResponse
} from "../models";

/** Class containing Operations operations. */
export class OperationsImpl implements Operations {
  private readonly client: SynapseManagementClient;

  /**
   * Initialize a new instance of the class Operations class.
   * @param client Reference to the service client
   */
  constructor(client: SynapseManagementClient) {
    this.client = client;
  }

  /**
   * Check whether a workspace name is available
   * @param request The check request
   * @param options The options parameters.
   */
  checkNameAvailability(
    request: CheckNameAvailabilityRequest,
    options?: OperationsCheckNameAvailabilityOptionalParams
  ): Promise<OperationsCheckNameAvailabilityResponse> {
    return this.client.sendOperationRequest(
      { request, options },
      checkNameAvailabilityOperationSpec
    );
  }

  /**
   * Get all available operations
   * @param options The options parameters.
   */
  list(
    options?: OperationsListOptionalParams
  ): Promise<OperationsListResponse> {
    return this.client.sendOperationRequest({ options }, listOperationSpec);
  }

  /**
   * Get the result of an operation
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param workspaceName The name of the workspace.
   * @param operationId Operation ID
   * @param options The options parameters.
   */
  getLocationHeaderResult(
    resourceGroupName: string,
    workspaceName: string,
    operationId: string,
    options?: OperationsGetLocationHeaderResultOptionalParams
  ): Promise<void> {
    return this.client.sendOperationRequest(
      { resourceGroupName, workspaceName, operationId, options },
      getLocationHeaderResultOperationSpec
    );
  }

  /**
   * Get the status of an operation
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param workspaceName The name of the workspace.
   * @param operationId Operation ID
   * @param options The options parameters.
   */
  getAzureAsyncHeaderResult(
    resourceGroupName: string,
    workspaceName: string,
    operationId: string,
    options?: OperationsGetAzureAsyncHeaderResultOptionalParams
  ): Promise<OperationsGetAzureAsyncHeaderResultResponse> {
    return this.client.sendOperationRequest(
      { resourceGroupName, workspaceName, operationId, options },
      getAzureAsyncHeaderResultOperationSpec
    );
  }
}
// Operation Specifications
const serializer = coreClient.createSerializer(Mappers, /* isXml */ false);

const checkNameAvailabilityOperationSpec: coreClient.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/providers/Microsoft.Synapse/checkNameAvailability",
  httpMethod: "POST",
  responses: {
    200: {
      bodyMapper: Mappers.CheckNameAvailabilityResponse
    },
    default: {
      bodyMapper: Mappers.ErrorResponse
    }
  },
  requestBody: Parameters.request,
  queryParameters: [Parameters.apiVersion],
  urlParameters: [Parameters.$host, Parameters.subscriptionId],
  headerParameters: [Parameters.accept, Parameters.contentType],
  mediaType: "json",
  serializer
};
const listOperationSpec: coreClient.OperationSpec = {
  path: "/providers/Microsoft.Synapse/operations",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: {
        type: {
          name: "Sequence",
          element: {
            type: { name: "Composite", className: "AvailableRpOperation" }
          }
        }
      }
    },
    default: {
      bodyMapper: Mappers.ErrorResponse
    }
  },
  urlParameters: [Parameters.$host],
  headerParameters: [Parameters.accept],
  serializer
};
const getLocationHeaderResultOperationSpec: coreClient.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Synapse/workspaces/{workspaceName}/operationResults/{operationId}",
  httpMethod: "GET",
  responses: {
    200: {},
    201: {},
    202: {},
    204: {},
    default: {
      bodyMapper: Mappers.ErrorResponse
    }
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.workspaceName,
    Parameters.operationId
  ],
  headerParameters: [Parameters.accept],
  serializer
};
const getAzureAsyncHeaderResultOperationSpec: coreClient.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Synapse/workspaces/{workspaceName}/operationStatuses/{operationId}",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.OperationResource
    },
    404: {},
    default: {
      bodyMapper: Mappers.ErrorResponse
    }
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.workspaceName,
    Parameters.operationId
  ],
  headerParameters: [Parameters.accept],
  serializer
};
