/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is
 * regenerated.
 */

import * as msRest from "@azure/ms-rest-js";
import * as Models from "../models";
import * as Mappers from "../models/operationsMappers";
import * as Parameters from "../models/parameters";
import { SynapseManagementClientContext } from "../synapseManagementClientContext";

/** Class representing a Operations. */
export class Operations {
  private readonly client: SynapseManagementClientContext;

  /**
   * Create a Operations.
   * @param {SynapseManagementClientContext} client Reference to the service client.
   */
  constructor(client: SynapseManagementClientContext) {
    this.client = client;
  }

  /**
   * Check whether a workspace name is available
   * @summary Check name availability
   * @param request The check request
   * @param [options] The optional parameters
   * @returns Promise<Models.OperationsCheckNameAvailabilityResponse>
   */
  checkNameAvailability(request: Models.CheckNameAvailabilityRequest, options?: msRest.RequestOptionsBase): Promise<Models.OperationsCheckNameAvailabilityResponse>;
  /**
   * @param request The check request
   * @param callback The callback
   */
  checkNameAvailability(request: Models.CheckNameAvailabilityRequest, callback: msRest.ServiceCallback<Models.CheckNameAvailabilityResponse>): void;
  /**
   * @param request The check request
   * @param options The optional parameters
   * @param callback The callback
   */
  checkNameAvailability(request: Models.CheckNameAvailabilityRequest, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.CheckNameAvailabilityResponse>): void;
  checkNameAvailability(request: Models.CheckNameAvailabilityRequest, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<Models.CheckNameAvailabilityResponse>, callback?: msRest.ServiceCallback<Models.CheckNameAvailabilityResponse>): Promise<Models.OperationsCheckNameAvailabilityResponse> {
    return this.client.sendOperationRequest(
      {
        request,
        options
      },
      checkNameAvailabilityOperationSpec,
      callback) as Promise<Models.OperationsCheckNameAvailabilityResponse>;
  }

  /**
   * Get all available operations
   * @summary All operations
   * @param [options] The optional parameters
   * @returns Promise<Models.OperationsListResponse>
   */
  list(options?: msRest.RequestOptionsBase): Promise<Models.OperationsListResponse>;
  /**
   * @param callback The callback
   */
  list(callback: msRest.ServiceCallback<Models.AvailableRpOperation[]>): void;
  /**
   * @param options The optional parameters
   * @param callback The callback
   */
  list(options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.AvailableRpOperation[]>): void;
  list(options?: msRest.RequestOptionsBase | msRest.ServiceCallback<Models.AvailableRpOperation[]>, callback?: msRest.ServiceCallback<Models.AvailableRpOperation[]>): Promise<Models.OperationsListResponse> {
    return this.client.sendOperationRequest(
      {
        options
      },
      listOperationSpec,
      callback) as Promise<Models.OperationsListResponse>;
  }

  /**
   * Get the result of an operation
   * @summary Get operation result
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param workspaceName The name of the workspace
   * @param operationId Operation ID
   * @param [options] The optional parameters
   * @returns Promise<msRest.RestResponse>
   */
  getLocationHeaderResult(resourceGroupName: string, workspaceName: string, operationId: string, options?: msRest.RequestOptionsBase): Promise<msRest.RestResponse>;
  /**
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param workspaceName The name of the workspace
   * @param operationId Operation ID
   * @param callback The callback
   */
  getLocationHeaderResult(resourceGroupName: string, workspaceName: string, operationId: string, callback: msRest.ServiceCallback<void>): void;
  /**
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param workspaceName The name of the workspace
   * @param operationId Operation ID
   * @param options The optional parameters
   * @param callback The callback
   */
  getLocationHeaderResult(resourceGroupName: string, workspaceName: string, operationId: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<void>): void;
  getLocationHeaderResult(resourceGroupName: string, workspaceName: string, operationId: string, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<void>, callback?: msRest.ServiceCallback<void>): Promise<msRest.RestResponse> {
    return this.client.sendOperationRequest(
      {
        resourceGroupName,
        workspaceName,
        operationId,
        options
      },
      getLocationHeaderResultOperationSpec,
      callback);
  }

  /**
   * Get the status of an operation
   * @summary Get operation status
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param workspaceName The name of the workspace
   * @param operationId Operation ID
   * @param [options] The optional parameters
   * @returns Promise<Models.OperationsGetAzureAsyncHeaderResultResponse>
   */
  getAzureAsyncHeaderResult(resourceGroupName: string, workspaceName: string, operationId: string, options?: msRest.RequestOptionsBase): Promise<Models.OperationsGetAzureAsyncHeaderResultResponse>;
  /**
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param workspaceName The name of the workspace
   * @param operationId Operation ID
   * @param callback The callback
   */
  getAzureAsyncHeaderResult(resourceGroupName: string, workspaceName: string, operationId: string, callback: msRest.ServiceCallback<Models.OperationResource>): void;
  /**
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param workspaceName The name of the workspace
   * @param operationId Operation ID
   * @param options The optional parameters
   * @param callback The callback
   */
  getAzureAsyncHeaderResult(resourceGroupName: string, workspaceName: string, operationId: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.OperationResource>): void;
  getAzureAsyncHeaderResult(resourceGroupName: string, workspaceName: string, operationId: string, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<Models.OperationResource>, callback?: msRest.ServiceCallback<Models.OperationResource>): Promise<Models.OperationsGetAzureAsyncHeaderResultResponse> {
    return this.client.sendOperationRequest(
      {
        resourceGroupName,
        workspaceName,
        operationId,
        options
      },
      getAzureAsyncHeaderResultOperationSpec,
      callback) as Promise<Models.OperationsGetAzureAsyncHeaderResultResponse>;
  }
}

// Operation Specifications
const serializer = new msRest.Serializer(Mappers);
const checkNameAvailabilityOperationSpec: msRest.OperationSpec = {
  httpMethod: "POST",
  path: "subscriptions/{subscriptionId}/providers/Microsoft.Synapse/checkNameAvailability",
  urlParameters: [
    Parameters.subscriptionId
  ],
  queryParameters: [
    Parameters.apiVersion
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  requestBody: {
    parameterPath: "request",
    mapper: {
      ...Mappers.CheckNameAvailabilityRequest,
      required: true
    }
  },
  responses: {
    200: {
      bodyMapper: Mappers.CheckNameAvailabilityResponse
    },
    default: {
      bodyMapper: Mappers.ErrorResponse
    }
  },
  serializer
};

const listOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "providers/Microsoft.Synapse/operations",
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    200: {
      bodyMapper: {
        serializedName: "parsedResponse",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "AvailableRpOperation"
            }
          }
        }
      }
    },
    default: {
      bodyMapper: Mappers.ErrorResponse
    }
  },
  serializer
};

const getLocationHeaderResultOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Synapse/workspaces/{workspaceName}/operationResults/{operationId}",
  urlParameters: [
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.workspaceName,
    Parameters.operationId
  ],
  queryParameters: [
    Parameters.apiVersion
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    200: {},
    201: {},
    202: {},
    204: {},
    default: {
      bodyMapper: Mappers.ErrorResponse
    }
  },
  serializer
};

const getAzureAsyncHeaderResultOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Synapse/workspaces/{workspaceName}/operationStatuses/{operationId}",
  urlParameters: [
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.workspaceName,
    Parameters.operationId
  ],
  queryParameters: [
    Parameters.apiVersion
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    200: {
      bodyMapper: Mappers.OperationResource
    },
    404: {},
    default: {
      bodyMapper: Mappers.ErrorResponse
    }
  },
  serializer
};
