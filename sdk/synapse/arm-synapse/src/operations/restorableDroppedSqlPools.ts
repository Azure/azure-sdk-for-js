/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */

import { PagedAsyncIterableIterator } from "@azure/core-paging";
import { RestorableDroppedSqlPools } from "../operationsInterfaces";
import * as coreClient from "@azure/core-client";
import * as Mappers from "../models/mappers";
import * as Parameters from "../models/parameters";
import { SynapseManagementClient } from "../synapseManagementClient";
import {
  RestorableDroppedSqlPool,
  RestorableDroppedSqlPoolsListByWorkspaceOptionalParams,
  RestorableDroppedSqlPoolsGetOptionalParams,
  RestorableDroppedSqlPoolsGetResponse,
  RestorableDroppedSqlPoolsListByWorkspaceResponse
} from "../models";

/// <reference lib="esnext.asynciterable" />
/** Class containing RestorableDroppedSqlPools operations. */
export class RestorableDroppedSqlPoolsImpl
  implements RestorableDroppedSqlPools {
  private readonly client: SynapseManagementClient;

  /**
   * Initialize a new instance of the class RestorableDroppedSqlPools class.
   * @param client Reference to the service client
   */
  constructor(client: SynapseManagementClient) {
    this.client = client;
  }

  /**
   * Gets a list of deleted Sql pools that can be restored
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param workspaceName The name of the workspace.
   * @param options The options parameters.
   */
  public listByWorkspace(
    resourceGroupName: string,
    workspaceName: string,
    options?: RestorableDroppedSqlPoolsListByWorkspaceOptionalParams
  ): PagedAsyncIterableIterator<RestorableDroppedSqlPool> {
    const iter = this.listByWorkspacePagingAll(
      resourceGroupName,
      workspaceName,
      options
    );
    return {
      next() {
        return iter.next();
      },
      [Symbol.asyncIterator]() {
        return this;
      },
      byPage: () => {
        return this.listByWorkspacePagingPage(
          resourceGroupName,
          workspaceName,
          options
        );
      }
    };
  }

  private async *listByWorkspacePagingPage(
    resourceGroupName: string,
    workspaceName: string,
    options?: RestorableDroppedSqlPoolsListByWorkspaceOptionalParams
  ): AsyncIterableIterator<RestorableDroppedSqlPool[]> {
    let result = await this._listByWorkspace(
      resourceGroupName,
      workspaceName,
      options
    );
    yield result.value || [];
  }

  private async *listByWorkspacePagingAll(
    resourceGroupName: string,
    workspaceName: string,
    options?: RestorableDroppedSqlPoolsListByWorkspaceOptionalParams
  ): AsyncIterableIterator<RestorableDroppedSqlPool> {
    for await (const page of this.listByWorkspacePagingPage(
      resourceGroupName,
      workspaceName,
      options
    )) {
      yield* page;
    }
  }

  /**
   * Gets a deleted sql pool that can be restored
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param workspaceName The name of the workspace.
   * @param restorableDroppedSqlPoolId The id of the deleted Sql Pool in the form of
   *                                   sqlPoolName,deletionTimeInFileTimeFormat
   * @param options The options parameters.
   */
  get(
    resourceGroupName: string,
    workspaceName: string,
    restorableDroppedSqlPoolId: string,
    options?: RestorableDroppedSqlPoolsGetOptionalParams
  ): Promise<RestorableDroppedSqlPoolsGetResponse> {
    return this.client.sendOperationRequest(
      { resourceGroupName, workspaceName, restorableDroppedSqlPoolId, options },
      getOperationSpec
    );
  }

  /**
   * Gets a list of deleted Sql pools that can be restored
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param workspaceName The name of the workspace.
   * @param options The options parameters.
   */
  private _listByWorkspace(
    resourceGroupName: string,
    workspaceName: string,
    options?: RestorableDroppedSqlPoolsListByWorkspaceOptionalParams
  ): Promise<RestorableDroppedSqlPoolsListByWorkspaceResponse> {
    return this.client.sendOperationRequest(
      { resourceGroupName, workspaceName, options },
      listByWorkspaceOperationSpec
    );
  }
}
// Operation Specifications
const serializer = coreClient.createSerializer(Mappers, /* isXml */ false);

const getOperationSpec: coreClient.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Synapse/workspaces/{workspaceName}/restorableDroppedSqlPools/{restorableDroppedSqlPoolId}",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.RestorableDroppedSqlPool
    },
    default: {
      bodyMapper: Mappers.ErrorResponse
    }
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.workspaceName,
    Parameters.restorableDroppedSqlPoolId
  ],
  headerParameters: [Parameters.accept],
  serializer
};
const listByWorkspaceOperationSpec: coreClient.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Synapse/workspaces/{workspaceName}/restorableDroppedSqlPools",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.RestorableDroppedSqlPoolListResult
    },
    default: {
      bodyMapper: Mappers.ErrorResponse
    }
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.workspaceName
  ],
  headerParameters: [Parameters.accept],
  serializer
};
