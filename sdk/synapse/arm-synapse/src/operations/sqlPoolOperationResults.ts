/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */

import { SqlPoolOperationResults } from "../operationsInterfaces";
import * as coreClient from "@azure/core-client";
import * as Mappers from "../models/mappers";
import * as Parameters from "../models/parameters";
import { SynapseManagementClient } from "../synapseManagementClient";
import {
  SqlPoolOperationResultsGetLocationHeaderResultOptionalParams,
  SqlPoolOperationResultsGetLocationHeaderResultResponse
} from "../models";

/** Class containing SqlPoolOperationResults operations. */
export class SqlPoolOperationResultsImpl implements SqlPoolOperationResults {
  private readonly client: SynapseManagementClient;

  /**
   * Initialize a new instance of the class SqlPoolOperationResults class.
   * @param client Reference to the service client
   */
  constructor(client: SynapseManagementClient) {
    this.client = client;
  }

  /**
   * Get the status of a SQL pool operation
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param workspaceName The name of the workspace.
   * @param sqlPoolName SQL pool name
   * @param operationId Operation ID
   * @param options The options parameters.
   */
  getLocationHeaderResult(
    resourceGroupName: string,
    workspaceName: string,
    sqlPoolName: string,
    operationId: string,
    options?: SqlPoolOperationResultsGetLocationHeaderResultOptionalParams
  ): Promise<SqlPoolOperationResultsGetLocationHeaderResultResponse> {
    return this.client.sendOperationRequest(
      { resourceGroupName, workspaceName, sqlPoolName, operationId, options },
      getLocationHeaderResultOperationSpec
    );
  }
}
// Operation Specifications
const serializer = coreClient.createSerializer(Mappers, /* isXml */ false);

const getLocationHeaderResultOperationSpec: coreClient.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Synapse/workspaces/{workspaceName}/sqlPools/{sqlPoolName}/operationResults/{operationId}",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: {
        type: { name: "Dictionary", value: { type: { name: "any" } } }
      }
    },
    202: {
      bodyMapper: {
        type: { name: "Dictionary", value: { type: { name: "any" } } }
      }
    },
    default: {
      bodyMapper: Mappers.ErrorResponse
    }
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.workspaceName,
    Parameters.operationId,
    Parameters.sqlPoolName
  ],
  headerParameters: [Parameters.accept],
  serializer
};
