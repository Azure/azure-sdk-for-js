/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is
 * regenerated.
 */

import * as msRest from "@azure/ms-rest-js";
import * as msRestAzure from "@azure/ms-rest-azure-js";
import * as Models from "../models";
import * as Mappers from "../models/workspaceManagedIdentitySqlControlSettingsMappers";
import * as Parameters from "../models/parameters";
import { SynapseManagementClientContext } from "../synapseManagementClientContext";

/** Class representing a WorkspaceManagedIdentitySqlControlSettings. */
export class WorkspaceManagedIdentitySqlControlSettings {
  private readonly client: SynapseManagementClientContext;

  /**
   * Create a WorkspaceManagedIdentitySqlControlSettings.
   * @param {SynapseManagementClientContext} client Reference to the service client.
   */
  constructor(client: SynapseManagementClientContext) {
    this.client = client;
  }

  /**
   * @summary Get Managed Identity Sql Control Settings
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param workspaceName The name of the workspace
   * @param [options] The optional parameters
   * @returns Promise<Models.WorkspaceManagedIdentitySqlControlSettingsGetResponse>
   */
  get(resourceGroupName: string, workspaceName: string, options?: msRest.RequestOptionsBase): Promise<Models.WorkspaceManagedIdentitySqlControlSettingsGetResponse>;
  /**
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param workspaceName The name of the workspace
   * @param callback The callback
   */
  get(resourceGroupName: string, workspaceName: string, callback: msRest.ServiceCallback<Models.ManagedIdentitySqlControlSettingsModel>): void;
  /**
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param workspaceName The name of the workspace
   * @param options The optional parameters
   * @param callback The callback
   */
  get(resourceGroupName: string, workspaceName: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.ManagedIdentitySqlControlSettingsModel>): void;
  get(resourceGroupName: string, workspaceName: string, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<Models.ManagedIdentitySqlControlSettingsModel>, callback?: msRest.ServiceCallback<Models.ManagedIdentitySqlControlSettingsModel>): Promise<Models.WorkspaceManagedIdentitySqlControlSettingsGetResponse> {
    return this.client.sendOperationRequest(
      {
        resourceGroupName,
        workspaceName,
        options
      },
      getOperationSpec,
      callback) as Promise<Models.WorkspaceManagedIdentitySqlControlSettingsGetResponse>;
  }

  /**
   * @summary Create or update Managed Identity Sql Control Settings
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param workspaceName The name of the workspace
   * @param managedIdentitySqlControlSettings Managed Identity Sql Control Settings
   * @param [options] The optional parameters
   * @returns Promise<Models.WorkspaceManagedIdentitySqlControlSettingsCreateOrUpdateResponse>
   */
  createOrUpdate(resourceGroupName: string, workspaceName: string, managedIdentitySqlControlSettings: Models.ManagedIdentitySqlControlSettingsModel, options?: msRest.RequestOptionsBase): Promise<Models.WorkspaceManagedIdentitySqlControlSettingsCreateOrUpdateResponse> {
    return this.beginCreateOrUpdate(resourceGroupName,workspaceName,managedIdentitySqlControlSettings,options)
      .then(lroPoller => lroPoller.pollUntilFinished()) as Promise<Models.WorkspaceManagedIdentitySqlControlSettingsCreateOrUpdateResponse>;
  }

  /**
   * @summary Create or update Managed Identity Sql Control Settings
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param workspaceName The name of the workspace
   * @param managedIdentitySqlControlSettings Managed Identity Sql Control Settings
   * @param [options] The optional parameters
   * @returns Promise<msRestAzure.LROPoller>
   */
  beginCreateOrUpdate(resourceGroupName: string, workspaceName: string, managedIdentitySqlControlSettings: Models.ManagedIdentitySqlControlSettingsModel, options?: msRest.RequestOptionsBase): Promise<msRestAzure.LROPoller> {
    return this.client.sendLRORequest(
      {
        resourceGroupName,
        workspaceName,
        managedIdentitySqlControlSettings,
        options
      },
      beginCreateOrUpdateOperationSpec,
      options);
  }
}

// Operation Specifications
const serializer = new msRest.Serializer(Mappers);
const getOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Synapse/workspaces/{workspaceName}/managedIdentitySqlControlSettings/default",
  urlParameters: [
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.workspaceName
  ],
  queryParameters: [
    Parameters.apiVersion
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    200: {
      bodyMapper: Mappers.ManagedIdentitySqlControlSettingsModel
    },
    default: {
      bodyMapper: Mappers.ErrorResponse
    }
  },
  serializer
};

const beginCreateOrUpdateOperationSpec: msRest.OperationSpec = {
  httpMethod: "PUT",
  path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Synapse/workspaces/{workspaceName}/managedIdentitySqlControlSettings/default",
  urlParameters: [
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.workspaceName
  ],
  queryParameters: [
    Parameters.apiVersion
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  requestBody: {
    parameterPath: "managedIdentitySqlControlSettings",
    mapper: {
      ...Mappers.ManagedIdentitySqlControlSettingsModel,
      required: true
    }
  },
  responses: {
    200: {
      bodyMapper: Mappers.ManagedIdentitySqlControlSettingsModel
    },
    201: {},
    default: {
      bodyMapper: Mappers.ErrorResponse
    }
  },
  serializer
};
