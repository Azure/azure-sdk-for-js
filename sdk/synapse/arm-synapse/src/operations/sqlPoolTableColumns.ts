/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */

import { PagedAsyncIterableIterator } from "@azure/core-paging";
import { SqlPoolTableColumns } from "../operationsInterfaces";
import * as coreClient from "@azure/core-client";
import * as Mappers from "../models/mappers";
import * as Parameters from "../models/parameters";
import { SynapseManagementClient } from "../synapseManagementClient";
import {
  SqlPoolColumn,
  SqlPoolTableColumnsListByTableNameNextOptionalParams,
  SqlPoolTableColumnsListByTableNameOptionalParams,
  SqlPoolTableColumnsListByTableNameResponse,
  SqlPoolTableColumnsListByTableNameNextResponse
} from "../models";

/// <reference lib="esnext.asynciterable" />
/** Class containing SqlPoolTableColumns operations. */
export class SqlPoolTableColumnsImpl implements SqlPoolTableColumns {
  private readonly client: SynapseManagementClient;

  /**
   * Initialize a new instance of the class SqlPoolTableColumns class.
   * @param client Reference to the service client
   */
  constructor(client: SynapseManagementClient) {
    this.client = client;
  }

  /**
   * Gets columns in a given table in a SQL pool.
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param workspaceName The name of the workspace.
   * @param sqlPoolName SQL pool name
   * @param schemaName The name of the schema.
   * @param tableName The name of the table.
   * @param options The options parameters.
   */
  public listByTableName(
    resourceGroupName: string,
    workspaceName: string,
    sqlPoolName: string,
    schemaName: string,
    tableName: string,
    options?: SqlPoolTableColumnsListByTableNameOptionalParams
  ): PagedAsyncIterableIterator<SqlPoolColumn> {
    const iter = this.listByTableNamePagingAll(
      resourceGroupName,
      workspaceName,
      sqlPoolName,
      schemaName,
      tableName,
      options
    );
    return {
      next() {
        return iter.next();
      },
      [Symbol.asyncIterator]() {
        return this;
      },
      byPage: () => {
        return this.listByTableNamePagingPage(
          resourceGroupName,
          workspaceName,
          sqlPoolName,
          schemaName,
          tableName,
          options
        );
      }
    };
  }

  private async *listByTableNamePagingPage(
    resourceGroupName: string,
    workspaceName: string,
    sqlPoolName: string,
    schemaName: string,
    tableName: string,
    options?: SqlPoolTableColumnsListByTableNameOptionalParams
  ): AsyncIterableIterator<SqlPoolColumn[]> {
    let result = await this._listByTableName(
      resourceGroupName,
      workspaceName,
      sqlPoolName,
      schemaName,
      tableName,
      options
    );
    yield result.value || [];
    let continuationToken = result.nextLink;
    while (continuationToken) {
      result = await this._listByTableNameNext(
        resourceGroupName,
        workspaceName,
        sqlPoolName,
        schemaName,
        tableName,
        continuationToken,
        options
      );
      continuationToken = result.nextLink;
      yield result.value || [];
    }
  }

  private async *listByTableNamePagingAll(
    resourceGroupName: string,
    workspaceName: string,
    sqlPoolName: string,
    schemaName: string,
    tableName: string,
    options?: SqlPoolTableColumnsListByTableNameOptionalParams
  ): AsyncIterableIterator<SqlPoolColumn> {
    for await (const page of this.listByTableNamePagingPage(
      resourceGroupName,
      workspaceName,
      sqlPoolName,
      schemaName,
      tableName,
      options
    )) {
      yield* page;
    }
  }

  /**
   * Gets columns in a given table in a SQL pool.
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param workspaceName The name of the workspace.
   * @param sqlPoolName SQL pool name
   * @param schemaName The name of the schema.
   * @param tableName The name of the table.
   * @param options The options parameters.
   */
  private _listByTableName(
    resourceGroupName: string,
    workspaceName: string,
    sqlPoolName: string,
    schemaName: string,
    tableName: string,
    options?: SqlPoolTableColumnsListByTableNameOptionalParams
  ): Promise<SqlPoolTableColumnsListByTableNameResponse> {
    return this.client.sendOperationRequest(
      {
        resourceGroupName,
        workspaceName,
        sqlPoolName,
        schemaName,
        tableName,
        options
      },
      listByTableNameOperationSpec
    );
  }

  /**
   * ListByTableNameNext
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param workspaceName The name of the workspace.
   * @param sqlPoolName SQL pool name
   * @param schemaName The name of the schema.
   * @param tableName The name of the table.
   * @param nextLink The nextLink from the previous successful call to the ListByTableName method.
   * @param options The options parameters.
   */
  private _listByTableNameNext(
    resourceGroupName: string,
    workspaceName: string,
    sqlPoolName: string,
    schemaName: string,
    tableName: string,
    nextLink: string,
    options?: SqlPoolTableColumnsListByTableNameNextOptionalParams
  ): Promise<SqlPoolTableColumnsListByTableNameNextResponse> {
    return this.client.sendOperationRequest(
      {
        resourceGroupName,
        workspaceName,
        sqlPoolName,
        schemaName,
        tableName,
        nextLink,
        options
      },
      listByTableNameNextOperationSpec
    );
  }
}
// Operation Specifications
const serializer = coreClient.createSerializer(Mappers, /* isXml */ false);

const listByTableNameOperationSpec: coreClient.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Synapse/workspaces/{workspaceName}/sqlPools/{sqlPoolName}/schemas/{schemaName}/tables/{tableName}/columns",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.SqlPoolColumnListResult
    },
    default: {}
  },
  queryParameters: [Parameters.apiVersion, Parameters.filter],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.workspaceName,
    Parameters.sqlPoolName,
    Parameters.schemaName,
    Parameters.tableName
  ],
  headerParameters: [Parameters.accept],
  serializer
};
const listByTableNameNextOperationSpec: coreClient.OperationSpec = {
  path: "{nextLink}",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.SqlPoolColumnListResult
    },
    default: {}
  },
  queryParameters: [Parameters.apiVersion, Parameters.filter],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.workspaceName,
    Parameters.nextLink,
    Parameters.sqlPoolName,
    Parameters.schemaName,
    Parameters.tableName
  ],
  headerParameters: [Parameters.accept],
  serializer
};
