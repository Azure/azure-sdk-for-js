/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is
 * regenerated.
 */

import * as msRest from "@azure/ms-rest-js";
import * as Models from "../models";
import * as Mappers from "../models/kustoPoolChildResourceMappers";
import * as Parameters from "../models/parameters";
import { SynapseManagementClientContext } from "../synapseManagementClientContext";

/** Class representing a KustoPoolChildResource. */
export class KustoPoolChildResource {
  private readonly client: SynapseManagementClientContext;

  /**
   * Create a KustoPoolChildResource.
   * @param {SynapseManagementClientContext} client Reference to the service client.
   */
  constructor(client: SynapseManagementClientContext) {
    this.client = client;
  }

  /**
   * Checks that the Kusto Pool child resource name is valid and is not already in use.
   * @param workspaceName The name of the workspace.
   * @param kustoPoolName The name of the Kusto pool.
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param resourceName The name of the Kusto Pool child resource.
   * @param [options] The optional parameters
   * @returns Promise<Models.KustoPoolChildResourceCheckNameAvailabilityResponse>
   */
  checkNameAvailability(workspaceName: string, kustoPoolName: string, resourceGroupName: string, resourceName: Models.DatabaseCheckNameRequest, options?: msRest.RequestOptionsBase): Promise<Models.KustoPoolChildResourceCheckNameAvailabilityResponse>;
  /**
   * @param workspaceName The name of the workspace.
   * @param kustoPoolName The name of the Kusto pool.
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param resourceName The name of the Kusto Pool child resource.
   * @param callback The callback
   */
  checkNameAvailability(workspaceName: string, kustoPoolName: string, resourceGroupName: string, resourceName: Models.DatabaseCheckNameRequest, callback: msRest.ServiceCallback<Models.CheckNameResult>): void;
  /**
   * @param workspaceName The name of the workspace.
   * @param kustoPoolName The name of the Kusto pool.
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param resourceName The name of the Kusto Pool child resource.
   * @param options The optional parameters
   * @param callback The callback
   */
  checkNameAvailability(workspaceName: string, kustoPoolName: string, resourceGroupName: string, resourceName: Models.DatabaseCheckNameRequest, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.CheckNameResult>): void;
  checkNameAvailability(workspaceName: string, kustoPoolName: string, resourceGroupName: string, resourceName: Models.DatabaseCheckNameRequest, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<Models.CheckNameResult>, callback?: msRest.ServiceCallback<Models.CheckNameResult>): Promise<Models.KustoPoolChildResourceCheckNameAvailabilityResponse> {
    return this.client.sendOperationRequest(
      {
        workspaceName,
        kustoPoolName,
        resourceGroupName,
        resourceName,
        options
      },
      checkNameAvailabilityOperationSpec,
      callback) as Promise<Models.KustoPoolChildResourceCheckNameAvailabilityResponse>;
  }
}

// Operation Specifications
const serializer = new msRest.Serializer(Mappers);
const checkNameAvailabilityOperationSpec: msRest.OperationSpec = {
  httpMethod: "POST",
  path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Synapse/workspaces/{workspaceName}/kustoPools/{kustoPoolName}/checkNameAvailability",
  urlParameters: [
    Parameters.workspaceName,
    Parameters.kustoPoolName,
    Parameters.subscriptionId,
    Parameters.resourceGroupName
  ],
  queryParameters: [
    Parameters.apiVersion1
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  requestBody: {
    parameterPath: "resourceName",
    mapper: {
      ...Mappers.DatabaseCheckNameRequest,
      required: true
    }
  },
  responses: {
    200: {
      bodyMapper: Mappers.CheckNameResult
    },
    default: {
      bodyMapper: Mappers.ErrorResponse
    }
  },
  serializer
};
