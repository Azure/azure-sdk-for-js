/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is
 * regenerated.
 */

import * as msRest from "@azure/ms-rest-js";
import * as msRestAzure from "@azure/ms-rest-azure-js";
import * as Models from "../models";
import * as Mappers from "../models/kustoPoolsMappers";
import * as Parameters from "../models/parameters";
import { SynapseManagementClientContext } from "../synapseManagementClientContext";

/** Class representing a KustoPools. */
export class KustoPools {
  private readonly client: SynapseManagementClientContext;

  /**
   * Create a KustoPools.
   * @param {SynapseManagementClientContext} client Reference to the service client.
   */
  constructor(client: SynapseManagementClientContext) {
    this.client = client;
  }

  /**
   * Checks that the kusto pool name is valid and is not already in use.
   * @param location The name of Azure region.
   * @param kustoPoolName The name of the cluster.
   * @param [options] The optional parameters
   * @returns Promise<Models.KustoPoolsCheckNameAvailabilityResponse>
   */
  checkNameAvailability(location: string, kustoPoolName: Models.KustoPoolCheckNameRequest, options?: msRest.RequestOptionsBase): Promise<Models.KustoPoolsCheckNameAvailabilityResponse>;
  /**
   * @param location The name of Azure region.
   * @param kustoPoolName The name of the cluster.
   * @param callback The callback
   */
  checkNameAvailability(location: string, kustoPoolName: Models.KustoPoolCheckNameRequest, callback: msRest.ServiceCallback<Models.CheckNameResult>): void;
  /**
   * @param location The name of Azure region.
   * @param kustoPoolName The name of the cluster.
   * @param options The optional parameters
   * @param callback The callback
   */
  checkNameAvailability(location: string, kustoPoolName: Models.KustoPoolCheckNameRequest, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.CheckNameResult>): void;
  checkNameAvailability(location: string, kustoPoolName: Models.KustoPoolCheckNameRequest, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<Models.CheckNameResult>, callback?: msRest.ServiceCallback<Models.CheckNameResult>): Promise<Models.KustoPoolsCheckNameAvailabilityResponse> {
    return this.client.sendOperationRequest(
      {
        location,
        kustoPoolName,
        options
      },
      checkNameAvailabilityOperationSpec,
      callback) as Promise<Models.KustoPoolsCheckNameAvailabilityResponse>;
  }

  /**
   * List all Kusto pools
   * @summary List Kusto pools
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param workspaceName The name of the workspace
   * @param [options] The optional parameters
   * @returns Promise<Models.KustoPoolsListByWorkspaceResponse>
   */
  listByWorkspace(resourceGroupName: string, workspaceName: string, options?: msRest.RequestOptionsBase): Promise<Models.KustoPoolsListByWorkspaceResponse>;
  /**
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param workspaceName The name of the workspace
   * @param callback The callback
   */
  listByWorkspace(resourceGroupName: string, workspaceName: string, callback: msRest.ServiceCallback<Models.KustoPoolListResult>): void;
  /**
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param workspaceName The name of the workspace
   * @param options The optional parameters
   * @param callback The callback
   */
  listByWorkspace(resourceGroupName: string, workspaceName: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.KustoPoolListResult>): void;
  listByWorkspace(resourceGroupName: string, workspaceName: string, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<Models.KustoPoolListResult>, callback?: msRest.ServiceCallback<Models.KustoPoolListResult>): Promise<Models.KustoPoolsListByWorkspaceResponse> {
    return this.client.sendOperationRequest(
      {
        resourceGroupName,
        workspaceName,
        options
      },
      listByWorkspaceOperationSpec,
      callback) as Promise<Models.KustoPoolsListByWorkspaceResponse>;
  }

  /**
   * Gets a Kusto pool.
   * @param workspaceName The name of the workspace
   * @param kustoPoolName The name of the Kusto pool.
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param [options] The optional parameters
   * @returns Promise<Models.KustoPoolsGetResponse>
   */
  get(workspaceName: string, kustoPoolName: string, resourceGroupName: string, options?: msRest.RequestOptionsBase): Promise<Models.KustoPoolsGetResponse>;
  /**
   * @param workspaceName The name of the workspace
   * @param kustoPoolName The name of the Kusto pool.
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param callback The callback
   */
  get(workspaceName: string, kustoPoolName: string, resourceGroupName: string, callback: msRest.ServiceCallback<Models.KustoPool>): void;
  /**
   * @param workspaceName The name of the workspace
   * @param kustoPoolName The name of the Kusto pool.
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param options The optional parameters
   * @param callback The callback
   */
  get(workspaceName: string, kustoPoolName: string, resourceGroupName: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.KustoPool>): void;
  get(workspaceName: string, kustoPoolName: string, resourceGroupName: string, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<Models.KustoPool>, callback?: msRest.ServiceCallback<Models.KustoPool>): Promise<Models.KustoPoolsGetResponse> {
    return this.client.sendOperationRequest(
      {
        workspaceName,
        kustoPoolName,
        resourceGroupName,
        options
      },
      getOperationSpec,
      callback) as Promise<Models.KustoPoolsGetResponse>;
  }

  /**
   * Create or update a Kusto pool.
   * @param workspaceName The name of the workspace
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param kustoPoolName The name of the Kusto pool.
   * @param parameters The Kusto pool parameters supplied to the CreateOrUpdate operation.
   * @param [options] The optional parameters
   * @returns Promise<Models.KustoPoolsCreateOrUpdateResponse>
   */
  createOrUpdate(workspaceName: string, resourceGroupName: string, kustoPoolName: string, parameters: Models.KustoPool, options?: Models.KustoPoolsCreateOrUpdateOptionalParams): Promise<Models.KustoPoolsCreateOrUpdateResponse> {
    return this.beginCreateOrUpdate(workspaceName,resourceGroupName,kustoPoolName,parameters,options)
      .then(lroPoller => lroPoller.pollUntilFinished()) as Promise<Models.KustoPoolsCreateOrUpdateResponse>;
  }

  /**
   * Update a Kusto Kusto Pool.
   * @param workspaceName The name of the workspace
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param kustoPoolName The name of the Kusto pool.
   * @param parameters The Kusto pool parameters supplied to the Update operation.
   * @param [options] The optional parameters
   * @returns Promise<Models.KustoPoolsUpdateResponse>
   */
  update(workspaceName: string, resourceGroupName: string, kustoPoolName: string, parameters: Models.KustoPoolUpdate, options?: Models.KustoPoolsUpdateOptionalParams): Promise<Models.KustoPoolsUpdateResponse> {
    return this.beginUpdate(workspaceName,resourceGroupName,kustoPoolName,parameters,options)
      .then(lroPoller => lroPoller.pollUntilFinished()) as Promise<Models.KustoPoolsUpdateResponse>;
  }

  /**
   * Deletes a Kusto pool.
   * @param workspaceName The name of the workspace
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param kustoPoolName The name of the Kusto pool.
   * @param [options] The optional parameters
   * @returns Promise<msRest.RestResponse>
   */
  deleteMethod(workspaceName: string, resourceGroupName: string, kustoPoolName: string, options?: msRest.RequestOptionsBase): Promise<msRest.RestResponse> {
    return this.beginDeleteMethod(workspaceName,resourceGroupName,kustoPoolName,options)
      .then(lroPoller => lroPoller.pollUntilFinished());
  }

  /**
   * Stops a Kusto pool.
   * @param workspaceName The name of the workspace
   * @param kustoPoolName The name of the Kusto pool.
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param [options] The optional parameters
   * @returns Promise<msRest.RestResponse>
   */
  stop(workspaceName: string, kustoPoolName: string, resourceGroupName: string, options?: msRest.RequestOptionsBase): Promise<msRest.RestResponse> {
    return this.beginStop(workspaceName,kustoPoolName,resourceGroupName,options)
      .then(lroPoller => lroPoller.pollUntilFinished());
  }

  /**
   * Starts a Kusto pool.
   * @param workspaceName The name of the workspace
   * @param kustoPoolName The name of the Kusto pool.
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param [options] The optional parameters
   * @returns Promise<msRest.RestResponse>
   */
  start(workspaceName: string, kustoPoolName: string, resourceGroupName: string, options?: msRest.RequestOptionsBase): Promise<msRest.RestResponse> {
    return this.beginStart(workspaceName,kustoPoolName,resourceGroupName,options)
      .then(lroPoller => lroPoller.pollUntilFinished());
  }

  /**
   * Returns the SKUs available for the provided resource.
   * @param workspaceName The name of the workspace
   * @param kustoPoolName The name of the Kusto pool.
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param [options] The optional parameters
   * @returns Promise<Models.KustoPoolsListSkusByResourceResponse>
   */
  listSkusByResource(workspaceName: string, kustoPoolName: string, resourceGroupName: string, options?: msRest.RequestOptionsBase): Promise<Models.KustoPoolsListSkusByResourceResponse>;
  /**
   * @param workspaceName The name of the workspace
   * @param kustoPoolName The name of the Kusto pool.
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param callback The callback
   */
  listSkusByResource(workspaceName: string, kustoPoolName: string, resourceGroupName: string, callback: msRest.ServiceCallback<Models.ListResourceSkusResult>): void;
  /**
   * @param workspaceName The name of the workspace
   * @param kustoPoolName The name of the Kusto pool.
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param options The optional parameters
   * @param callback The callback
   */
  listSkusByResource(workspaceName: string, kustoPoolName: string, resourceGroupName: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.ListResourceSkusResult>): void;
  listSkusByResource(workspaceName: string, kustoPoolName: string, resourceGroupName: string, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<Models.ListResourceSkusResult>, callback?: msRest.ServiceCallback<Models.ListResourceSkusResult>): Promise<Models.KustoPoolsListSkusByResourceResponse> {
    return this.client.sendOperationRequest(
      {
        workspaceName,
        kustoPoolName,
        resourceGroupName,
        options
      },
      listSkusByResourceOperationSpec,
      callback) as Promise<Models.KustoPoolsListSkusByResourceResponse>;
  }

  /**
   * Returns a list of language extensions that can run within KQL queries.
   * @param workspaceName The name of the workspace
   * @param kustoPoolName The name of the Kusto pool.
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param [options] The optional parameters
   * @returns Promise<Models.KustoPoolsListLanguageExtensionsResponse>
   */
  listLanguageExtensions(workspaceName: string, kustoPoolName: string, resourceGroupName: string, options?: msRest.RequestOptionsBase): Promise<Models.KustoPoolsListLanguageExtensionsResponse>;
  /**
   * @param workspaceName The name of the workspace
   * @param kustoPoolName The name of the Kusto pool.
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param callback The callback
   */
  listLanguageExtensions(workspaceName: string, kustoPoolName: string, resourceGroupName: string, callback: msRest.ServiceCallback<Models.LanguageExtensionsList>): void;
  /**
   * @param workspaceName The name of the workspace
   * @param kustoPoolName The name of the Kusto pool.
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param options The optional parameters
   * @param callback The callback
   */
  listLanguageExtensions(workspaceName: string, kustoPoolName: string, resourceGroupName: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.LanguageExtensionsList>): void;
  listLanguageExtensions(workspaceName: string, kustoPoolName: string, resourceGroupName: string, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<Models.LanguageExtensionsList>, callback?: msRest.ServiceCallback<Models.LanguageExtensionsList>): Promise<Models.KustoPoolsListLanguageExtensionsResponse> {
    return this.client.sendOperationRequest(
      {
        workspaceName,
        kustoPoolName,
        resourceGroupName,
        options
      },
      listLanguageExtensionsOperationSpec,
      callback) as Promise<Models.KustoPoolsListLanguageExtensionsResponse>;
  }

  /**
   * Add a list of language extensions that can run within KQL queries.
   * @param workspaceName The name of the workspace
   * @param kustoPoolName The name of the Kusto pool.
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param languageExtensionsToAdd The language extensions to add.
   * @param [options] The optional parameters
   * @returns Promise<msRest.RestResponse>
   */
  addLanguageExtensions(workspaceName: string, kustoPoolName: string, resourceGroupName: string, languageExtensionsToAdd: Models.LanguageExtensionsList, options?: msRest.RequestOptionsBase): Promise<msRest.RestResponse> {
    return this.beginAddLanguageExtensions(workspaceName,kustoPoolName,resourceGroupName,languageExtensionsToAdd,options)
      .then(lroPoller => lroPoller.pollUntilFinished());
  }

  /**
   * Remove a list of language extensions that can run within KQL queries.
   * @param workspaceName The name of the workspace
   * @param kustoPoolName The name of the Kusto pool.
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param languageExtensionsToRemove The language extensions to remove.
   * @param [options] The optional parameters
   * @returns Promise<msRest.RestResponse>
   */
  removeLanguageExtensions(workspaceName: string, kustoPoolName: string, resourceGroupName: string, languageExtensionsToRemove: Models.LanguageExtensionsList, options?: msRest.RequestOptionsBase): Promise<msRest.RestResponse> {
    return this.beginRemoveLanguageExtensions(workspaceName,kustoPoolName,resourceGroupName,languageExtensionsToRemove,options)
      .then(lroPoller => lroPoller.pollUntilFinished());
  }

  /**
   * Returns a list of databases that are owned by this Kusto Pool and were followed by another Kusto
   * Pool.
   * @param workspaceName The name of the workspace
   * @param kustoPoolName The name of the Kusto pool.
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param [options] The optional parameters
   * @returns Promise<Models.KustoPoolsListFollowerDatabasesResponse>
   */
  listFollowerDatabases(workspaceName: string, kustoPoolName: string, resourceGroupName: string, options?: msRest.RequestOptionsBase): Promise<Models.KustoPoolsListFollowerDatabasesResponse>;
  /**
   * @param workspaceName The name of the workspace
   * @param kustoPoolName The name of the Kusto pool.
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param callback The callback
   */
  listFollowerDatabases(workspaceName: string, kustoPoolName: string, resourceGroupName: string, callback: msRest.ServiceCallback<Models.FollowerDatabaseListResult>): void;
  /**
   * @param workspaceName The name of the workspace
   * @param kustoPoolName The name of the Kusto pool.
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param options The optional parameters
   * @param callback The callback
   */
  listFollowerDatabases(workspaceName: string, kustoPoolName: string, resourceGroupName: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.FollowerDatabaseListResult>): void;
  listFollowerDatabases(workspaceName: string, kustoPoolName: string, resourceGroupName: string, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<Models.FollowerDatabaseListResult>, callback?: msRest.ServiceCallback<Models.FollowerDatabaseListResult>): Promise<Models.KustoPoolsListFollowerDatabasesResponse> {
    return this.client.sendOperationRequest(
      {
        workspaceName,
        kustoPoolName,
        resourceGroupName,
        options
      },
      listFollowerDatabasesOperationSpec,
      callback) as Promise<Models.KustoPoolsListFollowerDatabasesResponse>;
  }

  /**
   * Detaches all followers of a database owned by this Kusto Pool.
   * @param workspaceName The name of the workspace
   * @param kustoPoolName The name of the Kusto pool.
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param followerDatabaseToRemove The follower databases properties to remove.
   * @param [options] The optional parameters
   * @returns Promise<msRest.RestResponse>
   */
  detachFollowerDatabases(workspaceName: string, kustoPoolName: string, resourceGroupName: string, followerDatabaseToRemove: Models.FollowerDatabaseDefinition, options?: msRest.RequestOptionsBase): Promise<msRest.RestResponse> {
    return this.beginDetachFollowerDatabases(workspaceName,kustoPoolName,resourceGroupName,followerDatabaseToRemove,options)
      .then(lroPoller => lroPoller.pollUntilFinished());
  }

  /**
   * Create or update a Kusto pool.
   * @param workspaceName The name of the workspace
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param kustoPoolName The name of the Kusto pool.
   * @param parameters The Kusto pool parameters supplied to the CreateOrUpdate operation.
   * @param [options] The optional parameters
   * @returns Promise<msRestAzure.LROPoller>
   */
  beginCreateOrUpdate(workspaceName: string, resourceGroupName: string, kustoPoolName: string, parameters: Models.KustoPool, options?: Models.KustoPoolsBeginCreateOrUpdateOptionalParams): Promise<msRestAzure.LROPoller> {
    return this.client.sendLRORequest(
      {
        workspaceName,
        resourceGroupName,
        kustoPoolName,
        parameters,
        options
      },
      beginCreateOrUpdateOperationSpec,
      options);
  }

  /**
   * Update a Kusto Kusto Pool.
   * @param workspaceName The name of the workspace
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param kustoPoolName The name of the Kusto pool.
   * @param parameters The Kusto pool parameters supplied to the Update operation.
   * @param [options] The optional parameters
   * @returns Promise<msRestAzure.LROPoller>
   */
  beginUpdate(workspaceName: string, resourceGroupName: string, kustoPoolName: string, parameters: Models.KustoPoolUpdate, options?: Models.KustoPoolsBeginUpdateOptionalParams): Promise<msRestAzure.LROPoller> {
    return this.client.sendLRORequest(
      {
        workspaceName,
        resourceGroupName,
        kustoPoolName,
        parameters,
        options
      },
      beginUpdateOperationSpec,
      options);
  }

  /**
   * Deletes a Kusto pool.
   * @param workspaceName The name of the workspace
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param kustoPoolName The name of the Kusto pool.
   * @param [options] The optional parameters
   * @returns Promise<msRestAzure.LROPoller>
   */
  beginDeleteMethod(workspaceName: string, resourceGroupName: string, kustoPoolName: string, options?: msRest.RequestOptionsBase): Promise<msRestAzure.LROPoller> {
    return this.client.sendLRORequest(
      {
        workspaceName,
        resourceGroupName,
        kustoPoolName,
        options
      },
      beginDeleteMethodOperationSpec,
      options);
  }

  /**
   * Stops a Kusto pool.
   * @param workspaceName The name of the workspace
   * @param kustoPoolName The name of the Kusto pool.
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param [options] The optional parameters
   * @returns Promise<msRestAzure.LROPoller>
   */
  beginStop(workspaceName: string, kustoPoolName: string, resourceGroupName: string, options?: msRest.RequestOptionsBase): Promise<msRestAzure.LROPoller> {
    return this.client.sendLRORequest(
      {
        workspaceName,
        kustoPoolName,
        resourceGroupName,
        options
      },
      beginStopOperationSpec,
      options);
  }

  /**
   * Starts a Kusto pool.
   * @param workspaceName The name of the workspace
   * @param kustoPoolName The name of the Kusto pool.
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param [options] The optional parameters
   * @returns Promise<msRestAzure.LROPoller>
   */
  beginStart(workspaceName: string, kustoPoolName: string, resourceGroupName: string, options?: msRest.RequestOptionsBase): Promise<msRestAzure.LROPoller> {
    return this.client.sendLRORequest(
      {
        workspaceName,
        kustoPoolName,
        resourceGroupName,
        options
      },
      beginStartOperationSpec,
      options);
  }

  /**
   * Add a list of language extensions that can run within KQL queries.
   * @param workspaceName The name of the workspace
   * @param kustoPoolName The name of the Kusto pool.
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param languageExtensionsToAdd The language extensions to add.
   * @param [options] The optional parameters
   * @returns Promise<msRestAzure.LROPoller>
   */
  beginAddLanguageExtensions(workspaceName: string, kustoPoolName: string, resourceGroupName: string, languageExtensionsToAdd: Models.LanguageExtensionsList, options?: msRest.RequestOptionsBase): Promise<msRestAzure.LROPoller> {
    return this.client.sendLRORequest(
      {
        workspaceName,
        kustoPoolName,
        resourceGroupName,
        languageExtensionsToAdd,
        options
      },
      beginAddLanguageExtensionsOperationSpec,
      options);
  }

  /**
   * Remove a list of language extensions that can run within KQL queries.
   * @param workspaceName The name of the workspace
   * @param kustoPoolName The name of the Kusto pool.
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param languageExtensionsToRemove The language extensions to remove.
   * @param [options] The optional parameters
   * @returns Promise<msRestAzure.LROPoller>
   */
  beginRemoveLanguageExtensions(workspaceName: string, kustoPoolName: string, resourceGroupName: string, languageExtensionsToRemove: Models.LanguageExtensionsList, options?: msRest.RequestOptionsBase): Promise<msRestAzure.LROPoller> {
    return this.client.sendLRORequest(
      {
        workspaceName,
        kustoPoolName,
        resourceGroupName,
        languageExtensionsToRemove,
        options
      },
      beginRemoveLanguageExtensionsOperationSpec,
      options);
  }

  /**
   * Detaches all followers of a database owned by this Kusto Pool.
   * @param workspaceName The name of the workspace
   * @param kustoPoolName The name of the Kusto pool.
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param followerDatabaseToRemove The follower databases properties to remove.
   * @param [options] The optional parameters
   * @returns Promise<msRestAzure.LROPoller>
   */
  beginDetachFollowerDatabases(workspaceName: string, kustoPoolName: string, resourceGroupName: string, followerDatabaseToRemove: Models.FollowerDatabaseDefinition, options?: msRest.RequestOptionsBase): Promise<msRestAzure.LROPoller> {
    return this.client.sendLRORequest(
      {
        workspaceName,
        kustoPoolName,
        resourceGroupName,
        followerDatabaseToRemove,
        options
      },
      beginDetachFollowerDatabasesOperationSpec,
      options);
  }
}

// Operation Specifications
const serializer = new msRest.Serializer(Mappers);
const checkNameAvailabilityOperationSpec: msRest.OperationSpec = {
  httpMethod: "POST",
  path: "subscriptions/{subscriptionId}/providers/Microsoft.Synapse/locations/{location}/kustoPoolCheckNameAvailability",
  urlParameters: [
    Parameters.subscriptionId,
    Parameters.location
  ],
  queryParameters: [
    Parameters.apiVersion1
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  requestBody: {
    parameterPath: "kustoPoolName",
    mapper: {
      ...Mappers.KustoPoolCheckNameRequest,
      required: true
    }
  },
  responses: {
    200: {
      bodyMapper: Mappers.CheckNameResult
    },
    default: {
      bodyMapper: Mappers.ErrorResponse
    }
  },
  serializer
};

const listByWorkspaceOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Synapse/workspaces/{workspaceName}/kustoPools",
  urlParameters: [
    Parameters.resourceGroupName,
    Parameters.subscriptionId,
    Parameters.workspaceName
  ],
  queryParameters: [
    Parameters.apiVersion1
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    200: {
      bodyMapper: Mappers.KustoPoolListResult
    },
    default: {
      bodyMapper: Mappers.ErrorResponse
    }
  },
  serializer
};

const getOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Synapse/workspaces/{workspaceName}/kustoPools/{kustoPoolName}",
  urlParameters: [
    Parameters.workspaceName,
    Parameters.kustoPoolName,
    Parameters.subscriptionId,
    Parameters.resourceGroupName
  ],
  queryParameters: [
    Parameters.apiVersion1
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    200: {
      bodyMapper: Mappers.KustoPool
    },
    default: {
      bodyMapper: Mappers.ErrorResponse
    }
  },
  serializer
};

const listSkusByResourceOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Synapse/workspaces/{workspaceName}/kustoPools/{kustoPoolName}/skus",
  urlParameters: [
    Parameters.workspaceName,
    Parameters.kustoPoolName,
    Parameters.subscriptionId,
    Parameters.resourceGroupName
  ],
  queryParameters: [
    Parameters.apiVersion1
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    200: {
      bodyMapper: Mappers.ListResourceSkusResult
    },
    default: {
      bodyMapper: Mappers.ErrorResponse
    }
  },
  serializer
};

const listLanguageExtensionsOperationSpec: msRest.OperationSpec = {
  httpMethod: "POST",
  path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Synapse/workspaces/{workspaceName}/kustoPools/{kustoPoolName}/listLanguageExtensions",
  urlParameters: [
    Parameters.workspaceName,
    Parameters.kustoPoolName,
    Parameters.subscriptionId,
    Parameters.resourceGroupName
  ],
  queryParameters: [
    Parameters.apiVersion1
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    200: {
      bodyMapper: Mappers.LanguageExtensionsList
    },
    default: {
      bodyMapper: Mappers.ErrorResponse
    }
  },
  serializer
};

const listFollowerDatabasesOperationSpec: msRest.OperationSpec = {
  httpMethod: "POST",
  path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Synapse/workspaces/{workspaceName}/kustoPools/{kustoPoolName}/listFollowerDatabases",
  urlParameters: [
    Parameters.workspaceName,
    Parameters.kustoPoolName,
    Parameters.subscriptionId,
    Parameters.resourceGroupName
  ],
  queryParameters: [
    Parameters.apiVersion1
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    200: {
      bodyMapper: Mappers.FollowerDatabaseListResult
    },
    default: {
      bodyMapper: Mappers.ErrorResponse
    }
  },
  serializer
};

const beginCreateOrUpdateOperationSpec: msRest.OperationSpec = {
  httpMethod: "PUT",
  path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Synapse/workspaces/{workspaceName}/kustoPools/{kustoPoolName}",
  urlParameters: [
    Parameters.workspaceName,
    Parameters.resourceGroupName,
    Parameters.kustoPoolName,
    Parameters.subscriptionId
  ],
  queryParameters: [
    Parameters.apiVersion1
  ],
  headerParameters: [
    Parameters.ifMatch,
    Parameters.ifNoneMatch,
    Parameters.acceptLanguage
  ],
  requestBody: {
    parameterPath: "parameters",
    mapper: {
      ...Mappers.KustoPool,
      required: true
    }
  },
  responses: {
    200: {
      bodyMapper: Mappers.KustoPool
    },
    201: {
      bodyMapper: Mappers.KustoPool
    },
    default: {
      bodyMapper: Mappers.ErrorResponse
    }
  },
  serializer
};

const beginUpdateOperationSpec: msRest.OperationSpec = {
  httpMethod: "PATCH",
  path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Synapse/workspaces/{workspaceName}/kustoPools/{kustoPoolName}",
  urlParameters: [
    Parameters.workspaceName,
    Parameters.resourceGroupName,
    Parameters.kustoPoolName,
    Parameters.subscriptionId
  ],
  queryParameters: [
    Parameters.apiVersion1
  ],
  headerParameters: [
    Parameters.ifMatch,
    Parameters.acceptLanguage
  ],
  requestBody: {
    parameterPath: "parameters",
    mapper: {
      ...Mappers.KustoPoolUpdate,
      required: true
    }
  },
  responses: {
    200: {
      bodyMapper: Mappers.KustoPool
    },
    202: {
      bodyMapper: Mappers.KustoPool
    },
    default: {
      bodyMapper: Mappers.ErrorResponse
    }
  },
  serializer
};

const beginDeleteMethodOperationSpec: msRest.OperationSpec = {
  httpMethod: "DELETE",
  path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Synapse/workspaces/{workspaceName}/kustoPools/{kustoPoolName}",
  urlParameters: [
    Parameters.workspaceName,
    Parameters.resourceGroupName,
    Parameters.kustoPoolName,
    Parameters.subscriptionId
  ],
  queryParameters: [
    Parameters.apiVersion1
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    200: {},
    202: {},
    204: {},
    default: {
      bodyMapper: Mappers.ErrorResponse
    }
  },
  serializer
};

const beginStopOperationSpec: msRest.OperationSpec = {
  httpMethod: "POST",
  path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Synapse/workspaces/{workspaceName}/kustoPools/{kustoPoolName}/stop",
  urlParameters: [
    Parameters.workspaceName,
    Parameters.kustoPoolName,
    Parameters.subscriptionId,
    Parameters.resourceGroupName
  ],
  queryParameters: [
    Parameters.apiVersion1
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    200: {},
    202: {},
    default: {
      bodyMapper: Mappers.ErrorResponse
    }
  },
  serializer
};

const beginStartOperationSpec: msRest.OperationSpec = {
  httpMethod: "POST",
  path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Synapse/workspaces/{workspaceName}/kustoPools/{kustoPoolName}/start",
  urlParameters: [
    Parameters.workspaceName,
    Parameters.kustoPoolName,
    Parameters.subscriptionId,
    Parameters.resourceGroupName
  ],
  queryParameters: [
    Parameters.apiVersion1
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    200: {},
    202: {},
    default: {
      bodyMapper: Mappers.ErrorResponse
    }
  },
  serializer
};

const beginAddLanguageExtensionsOperationSpec: msRest.OperationSpec = {
  httpMethod: "POST",
  path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Synapse/workspaces/{workspaceName}/kustoPools/{kustoPoolName}/addLanguageExtensions",
  urlParameters: [
    Parameters.workspaceName,
    Parameters.kustoPoolName,
    Parameters.subscriptionId,
    Parameters.resourceGroupName
  ],
  queryParameters: [
    Parameters.apiVersion1
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  requestBody: {
    parameterPath: "languageExtensionsToAdd",
    mapper: {
      ...Mappers.LanguageExtensionsList,
      required: true
    }
  },
  responses: {
    200: {},
    202: {},
    default: {
      bodyMapper: Mappers.ErrorResponse
    }
  },
  serializer
};

const beginRemoveLanguageExtensionsOperationSpec: msRest.OperationSpec = {
  httpMethod: "POST",
  path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Synapse/workspaces/{workspaceName}/kustoPools/{kustoPoolName}/removeLanguageExtensions",
  urlParameters: [
    Parameters.workspaceName,
    Parameters.kustoPoolName,
    Parameters.subscriptionId,
    Parameters.resourceGroupName
  ],
  queryParameters: [
    Parameters.apiVersion1
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  requestBody: {
    parameterPath: "languageExtensionsToRemove",
    mapper: {
      ...Mappers.LanguageExtensionsList,
      required: true
    }
  },
  responses: {
    200: {},
    202: {},
    default: {
      bodyMapper: Mappers.ErrorResponse
    }
  },
  serializer
};

const beginDetachFollowerDatabasesOperationSpec: msRest.OperationSpec = {
  httpMethod: "POST",
  path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Synapse/workspaces/{workspaceName}/kustoPools/{kustoPoolName}/detachFollowerDatabases",
  urlParameters: [
    Parameters.workspaceName,
    Parameters.kustoPoolName,
    Parameters.subscriptionId,
    Parameters.resourceGroupName
  ],
  queryParameters: [
    Parameters.apiVersion1
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  requestBody: {
    parameterPath: "followerDatabaseToRemove",
    mapper: {
      ...Mappers.FollowerDatabaseDefinition,
      required: true
    }
  },
  responses: {
    200: {},
    202: {},
    default: {
      bodyMapper: Mappers.ErrorResponse
    }
  },
  serializer
};
