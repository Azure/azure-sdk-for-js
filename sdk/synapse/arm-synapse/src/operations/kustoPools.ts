/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */

import { PagedAsyncIterableIterator, PageSettings } from "@azure/core-paging";
import { KustoPools } from "../operationsInterfaces";
import * as coreClient from "@azure/core-client";
import * as Mappers from "../models/mappers";
import * as Parameters from "../models/parameters";
import { SynapseManagementClient } from "../synapseManagementClient";
import { PollerLike, PollOperationState, LroEngine } from "@azure/core-lro";
import { LroImpl } from "../lroImpl";
import {
  SkuDescription,
  KustoPoolsListSkusOptionalParams,
  KustoPoolsListSkusResponse,
  AzureResourceSku,
  KustoPoolsListSkusByResourceOptionalParams,
  KustoPoolsListSkusByResourceResponse,
  LanguageExtension,
  KustoPoolsListLanguageExtensionsOptionalParams,
  KustoPoolsListLanguageExtensionsResponse,
  FollowerDatabaseDefinition,
  KustoPoolsListFollowerDatabasesOptionalParams,
  KustoPoolsListFollowerDatabasesResponse,
  KustoPoolCheckNameRequest,
  KustoPoolsCheckNameAvailabilityOptionalParams,
  KustoPoolsCheckNameAvailabilityResponse,
  KustoPoolsListByWorkspaceOptionalParams,
  KustoPoolsListByWorkspaceResponse,
  KustoPoolsGetOptionalParams,
  KustoPoolsGetResponse,
  KustoPool,
  KustoPoolsCreateOrUpdateOptionalParams,
  KustoPoolsCreateOrUpdateResponse,
  KustoPoolUpdate,
  KustoPoolsUpdateOptionalParams,
  KustoPoolsUpdateResponse,
  KustoPoolsDeleteOptionalParams,
  KustoPoolsStopOptionalParams,
  KustoPoolsStartOptionalParams,
  LanguageExtensionsList,
  KustoPoolsAddLanguageExtensionsOptionalParams,
  KustoPoolsRemoveLanguageExtensionsOptionalParams,
  KustoPoolsDetachFollowerDatabasesOptionalParams
} from "../models";

/// <reference lib="esnext.asynciterable" />
/** Class containing KustoPools operations. */
export class KustoPoolsImpl implements KustoPools {
  private readonly client: SynapseManagementClient;

  /**
   * Initialize a new instance of the class KustoPools class.
   * @param client Reference to the service client
   */
  constructor(client: SynapseManagementClient) {
    this.client = client;
  }

  /**
   * Lists eligible SKUs for Kusto Pool resource.
   * @param options The options parameters.
   */
  public listSkus(
    options?: KustoPoolsListSkusOptionalParams
  ): PagedAsyncIterableIterator<SkuDescription> {
    const iter = this.listSkusPagingAll(options);
    return {
      next() {
        return iter.next();
      },
      [Symbol.asyncIterator]() {
        return this;
      },
      byPage: (settings?: PageSettings) => {
        if (settings?.maxPageSize) {
          throw new Error("maxPageSize is not supported by this operation.");
        }
        return this.listSkusPagingPage(options, settings);
      }
    };
  }

  private async *listSkusPagingPage(
    options?: KustoPoolsListSkusOptionalParams,
    _settings?: PageSettings
  ): AsyncIterableIterator<SkuDescription[]> {
    let result: KustoPoolsListSkusResponse;
    result = await this._listSkus(options);
    yield result.value || [];
  }

  private async *listSkusPagingAll(
    options?: KustoPoolsListSkusOptionalParams
  ): AsyncIterableIterator<SkuDescription> {
    for await (const page of this.listSkusPagingPage(options)) {
      yield* page;
    }
  }

  /**
   * Returns the SKUs available for the provided resource.
   * @param workspaceName The name of the workspace.
   * @param kustoPoolName The name of the Kusto pool.
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param options The options parameters.
   */
  public listSkusByResource(
    workspaceName: string,
    kustoPoolName: string,
    resourceGroupName: string,
    options?: KustoPoolsListSkusByResourceOptionalParams
  ): PagedAsyncIterableIterator<AzureResourceSku> {
    const iter = this.listSkusByResourcePagingAll(
      workspaceName,
      kustoPoolName,
      resourceGroupName,
      options
    );
    return {
      next() {
        return iter.next();
      },
      [Symbol.asyncIterator]() {
        return this;
      },
      byPage: (settings?: PageSettings) => {
        if (settings?.maxPageSize) {
          throw new Error("maxPageSize is not supported by this operation.");
        }
        return this.listSkusByResourcePagingPage(
          workspaceName,
          kustoPoolName,
          resourceGroupName,
          options,
          settings
        );
      }
    };
  }

  private async *listSkusByResourcePagingPage(
    workspaceName: string,
    kustoPoolName: string,
    resourceGroupName: string,
    options?: KustoPoolsListSkusByResourceOptionalParams,
    _settings?: PageSettings
  ): AsyncIterableIterator<AzureResourceSku[]> {
    let result: KustoPoolsListSkusByResourceResponse;
    result = await this._listSkusByResource(
      workspaceName,
      kustoPoolName,
      resourceGroupName,
      options
    );
    yield result.value || [];
  }

  private async *listSkusByResourcePagingAll(
    workspaceName: string,
    kustoPoolName: string,
    resourceGroupName: string,
    options?: KustoPoolsListSkusByResourceOptionalParams
  ): AsyncIterableIterator<AzureResourceSku> {
    for await (const page of this.listSkusByResourcePagingPage(
      workspaceName,
      kustoPoolName,
      resourceGroupName,
      options
    )) {
      yield* page;
    }
  }

  /**
   * Returns a list of language extensions that can run within KQL queries.
   * @param workspaceName The name of the workspace.
   * @param kustoPoolName The name of the Kusto pool.
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param options The options parameters.
   */
  public listLanguageExtensions(
    workspaceName: string,
    kustoPoolName: string,
    resourceGroupName: string,
    options?: KustoPoolsListLanguageExtensionsOptionalParams
  ): PagedAsyncIterableIterator<LanguageExtension> {
    const iter = this.listLanguageExtensionsPagingAll(
      workspaceName,
      kustoPoolName,
      resourceGroupName,
      options
    );
    return {
      next() {
        return iter.next();
      },
      [Symbol.asyncIterator]() {
        return this;
      },
      byPage: (settings?: PageSettings) => {
        if (settings?.maxPageSize) {
          throw new Error("maxPageSize is not supported by this operation.");
        }
        return this.listLanguageExtensionsPagingPage(
          workspaceName,
          kustoPoolName,
          resourceGroupName,
          options,
          settings
        );
      }
    };
  }

  private async *listLanguageExtensionsPagingPage(
    workspaceName: string,
    kustoPoolName: string,
    resourceGroupName: string,
    options?: KustoPoolsListLanguageExtensionsOptionalParams,
    _settings?: PageSettings
  ): AsyncIterableIterator<LanguageExtension[]> {
    let result: KustoPoolsListLanguageExtensionsResponse;
    result = await this._listLanguageExtensions(
      workspaceName,
      kustoPoolName,
      resourceGroupName,
      options
    );
    yield result.value || [];
  }

  private async *listLanguageExtensionsPagingAll(
    workspaceName: string,
    kustoPoolName: string,
    resourceGroupName: string,
    options?: KustoPoolsListLanguageExtensionsOptionalParams
  ): AsyncIterableIterator<LanguageExtension> {
    for await (const page of this.listLanguageExtensionsPagingPage(
      workspaceName,
      kustoPoolName,
      resourceGroupName,
      options
    )) {
      yield* page;
    }
  }

  /**
   * Returns a list of databases that are owned by this Kusto Pool and were followed by another Kusto
   * Pool.
   * @param workspaceName The name of the workspace.
   * @param kustoPoolName The name of the Kusto pool.
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param options The options parameters.
   */
  public listFollowerDatabases(
    workspaceName: string,
    kustoPoolName: string,
    resourceGroupName: string,
    options?: KustoPoolsListFollowerDatabasesOptionalParams
  ): PagedAsyncIterableIterator<FollowerDatabaseDefinition> {
    const iter = this.listFollowerDatabasesPagingAll(
      workspaceName,
      kustoPoolName,
      resourceGroupName,
      options
    );
    return {
      next() {
        return iter.next();
      },
      [Symbol.asyncIterator]() {
        return this;
      },
      byPage: (settings?: PageSettings) => {
        if (settings?.maxPageSize) {
          throw new Error("maxPageSize is not supported by this operation.");
        }
        return this.listFollowerDatabasesPagingPage(
          workspaceName,
          kustoPoolName,
          resourceGroupName,
          options,
          settings
        );
      }
    };
  }

  private async *listFollowerDatabasesPagingPage(
    workspaceName: string,
    kustoPoolName: string,
    resourceGroupName: string,
    options?: KustoPoolsListFollowerDatabasesOptionalParams,
    _settings?: PageSettings
  ): AsyncIterableIterator<FollowerDatabaseDefinition[]> {
    let result: KustoPoolsListFollowerDatabasesResponse;
    result = await this._listFollowerDatabases(
      workspaceName,
      kustoPoolName,
      resourceGroupName,
      options
    );
    yield result.value || [];
  }

  private async *listFollowerDatabasesPagingAll(
    workspaceName: string,
    kustoPoolName: string,
    resourceGroupName: string,
    options?: KustoPoolsListFollowerDatabasesOptionalParams
  ): AsyncIterableIterator<FollowerDatabaseDefinition> {
    for await (const page of this.listFollowerDatabasesPagingPage(
      workspaceName,
      kustoPoolName,
      resourceGroupName,
      options
    )) {
      yield* page;
    }
  }

  /**
   * Lists eligible SKUs for Kusto Pool resource.
   * @param options The options parameters.
   */
  private _listSkus(
    options?: KustoPoolsListSkusOptionalParams
  ): Promise<KustoPoolsListSkusResponse> {
    return this.client.sendOperationRequest({ options }, listSkusOperationSpec);
  }

  /**
   * Checks that the kusto pool name is valid and is not already in use.
   * @param location The name of Azure region.
   * @param kustoPoolName The name of the cluster.
   * @param options The options parameters.
   */
  checkNameAvailability(
    location: string,
    kustoPoolName: KustoPoolCheckNameRequest,
    options?: KustoPoolsCheckNameAvailabilityOptionalParams
  ): Promise<KustoPoolsCheckNameAvailabilityResponse> {
    return this.client.sendOperationRequest(
      { location, kustoPoolName, options },
      checkNameAvailabilityOperationSpec
    );
  }

  /**
   * List all Kusto pools
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param workspaceName The name of the workspace.
   * @param options The options parameters.
   */
  listByWorkspace(
    resourceGroupName: string,
    workspaceName: string,
    options?: KustoPoolsListByWorkspaceOptionalParams
  ): Promise<KustoPoolsListByWorkspaceResponse> {
    return this.client.sendOperationRequest(
      { resourceGroupName, workspaceName, options },
      listByWorkspaceOperationSpec
    );
  }

  /**
   * Gets a Kusto pool.
   * @param workspaceName The name of the workspace.
   * @param kustoPoolName The name of the Kusto pool.
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param options The options parameters.
   */
  get(
    workspaceName: string,
    kustoPoolName: string,
    resourceGroupName: string,
    options?: KustoPoolsGetOptionalParams
  ): Promise<KustoPoolsGetResponse> {
    return this.client.sendOperationRequest(
      { workspaceName, kustoPoolName, resourceGroupName, options },
      getOperationSpec
    );
  }

  /**
   * Create or update a Kusto pool.
   * @param workspaceName The name of the workspace.
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param kustoPoolName The name of the Kusto pool.
   * @param parameters The Kusto pool parameters supplied to the CreateOrUpdate operation.
   * @param options The options parameters.
   */
  async beginCreateOrUpdate(
    workspaceName: string,
    resourceGroupName: string,
    kustoPoolName: string,
    parameters: KustoPool,
    options?: KustoPoolsCreateOrUpdateOptionalParams
  ): Promise<
    PollerLike<
      PollOperationState<KustoPoolsCreateOrUpdateResponse>,
      KustoPoolsCreateOrUpdateResponse
    >
  > {
    const directSendOperation = async (
      args: coreClient.OperationArguments,
      spec: coreClient.OperationSpec
    ): Promise<KustoPoolsCreateOrUpdateResponse> => {
      return this.client.sendOperationRequest(args, spec);
    };
    const sendOperation = async (
      args: coreClient.OperationArguments,
      spec: coreClient.OperationSpec
    ) => {
      let currentRawResponse:
        | coreClient.FullOperationResponse
        | undefined = undefined;
      const providedCallback = args.options?.onResponse;
      const callback: coreClient.RawResponseCallback = (
        rawResponse: coreClient.FullOperationResponse,
        flatResponse: unknown
      ) => {
        currentRawResponse = rawResponse;
        providedCallback?.(rawResponse, flatResponse);
      };
      const updatedArgs = {
        ...args,
        options: {
          ...args.options,
          onResponse: callback
        }
      };
      const flatResponse = await directSendOperation(updatedArgs, spec);
      return {
        flatResponse,
        rawResponse: {
          statusCode: currentRawResponse!.status,
          body: currentRawResponse!.parsedBody,
          headers: currentRawResponse!.headers.toJSON()
        }
      };
    };

    const lro = new LroImpl(
      sendOperation,
      { workspaceName, resourceGroupName, kustoPoolName, parameters, options },
      createOrUpdateOperationSpec
    );
    const poller = new LroEngine(lro, {
      resumeFrom: options?.resumeFrom,
      intervalInMs: options?.updateIntervalInMs
    });
    await poller.poll();
    return poller;
  }

  /**
   * Create or update a Kusto pool.
   * @param workspaceName The name of the workspace.
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param kustoPoolName The name of the Kusto pool.
   * @param parameters The Kusto pool parameters supplied to the CreateOrUpdate operation.
   * @param options The options parameters.
   */
  async beginCreateOrUpdateAndWait(
    workspaceName: string,
    resourceGroupName: string,
    kustoPoolName: string,
    parameters: KustoPool,
    options?: KustoPoolsCreateOrUpdateOptionalParams
  ): Promise<KustoPoolsCreateOrUpdateResponse> {
    const poller = await this.beginCreateOrUpdate(
      workspaceName,
      resourceGroupName,
      kustoPoolName,
      parameters,
      options
    );
    return poller.pollUntilDone();
  }

  /**
   * Update a Kusto Kusto Pool.
   * @param workspaceName The name of the workspace.
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param kustoPoolName The name of the Kusto pool.
   * @param parameters The Kusto pool parameters supplied to the Update operation.
   * @param options The options parameters.
   */
  async beginUpdate(
    workspaceName: string,
    resourceGroupName: string,
    kustoPoolName: string,
    parameters: KustoPoolUpdate,
    options?: KustoPoolsUpdateOptionalParams
  ): Promise<
    PollerLike<
      PollOperationState<KustoPoolsUpdateResponse>,
      KustoPoolsUpdateResponse
    >
  > {
    const directSendOperation = async (
      args: coreClient.OperationArguments,
      spec: coreClient.OperationSpec
    ): Promise<KustoPoolsUpdateResponse> => {
      return this.client.sendOperationRequest(args, spec);
    };
    const sendOperation = async (
      args: coreClient.OperationArguments,
      spec: coreClient.OperationSpec
    ) => {
      let currentRawResponse:
        | coreClient.FullOperationResponse
        | undefined = undefined;
      const providedCallback = args.options?.onResponse;
      const callback: coreClient.RawResponseCallback = (
        rawResponse: coreClient.FullOperationResponse,
        flatResponse: unknown
      ) => {
        currentRawResponse = rawResponse;
        providedCallback?.(rawResponse, flatResponse);
      };
      const updatedArgs = {
        ...args,
        options: {
          ...args.options,
          onResponse: callback
        }
      };
      const flatResponse = await directSendOperation(updatedArgs, spec);
      return {
        flatResponse,
        rawResponse: {
          statusCode: currentRawResponse!.status,
          body: currentRawResponse!.parsedBody,
          headers: currentRawResponse!.headers.toJSON()
        }
      };
    };

    const lro = new LroImpl(
      sendOperation,
      { workspaceName, resourceGroupName, kustoPoolName, parameters, options },
      updateOperationSpec
    );
    const poller = new LroEngine(lro, {
      resumeFrom: options?.resumeFrom,
      intervalInMs: options?.updateIntervalInMs
    });
    await poller.poll();
    return poller;
  }

  /**
   * Update a Kusto Kusto Pool.
   * @param workspaceName The name of the workspace.
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param kustoPoolName The name of the Kusto pool.
   * @param parameters The Kusto pool parameters supplied to the Update operation.
   * @param options The options parameters.
   */
  async beginUpdateAndWait(
    workspaceName: string,
    resourceGroupName: string,
    kustoPoolName: string,
    parameters: KustoPoolUpdate,
    options?: KustoPoolsUpdateOptionalParams
  ): Promise<KustoPoolsUpdateResponse> {
    const poller = await this.beginUpdate(
      workspaceName,
      resourceGroupName,
      kustoPoolName,
      parameters,
      options
    );
    return poller.pollUntilDone();
  }

  /**
   * Deletes a Kusto pool.
   * @param workspaceName The name of the workspace.
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param kustoPoolName The name of the Kusto pool.
   * @param options The options parameters.
   */
  async beginDelete(
    workspaceName: string,
    resourceGroupName: string,
    kustoPoolName: string,
    options?: KustoPoolsDeleteOptionalParams
  ): Promise<PollerLike<PollOperationState<void>, void>> {
    const directSendOperation = async (
      args: coreClient.OperationArguments,
      spec: coreClient.OperationSpec
    ): Promise<void> => {
      return this.client.sendOperationRequest(args, spec);
    };
    const sendOperation = async (
      args: coreClient.OperationArguments,
      spec: coreClient.OperationSpec
    ) => {
      let currentRawResponse:
        | coreClient.FullOperationResponse
        | undefined = undefined;
      const providedCallback = args.options?.onResponse;
      const callback: coreClient.RawResponseCallback = (
        rawResponse: coreClient.FullOperationResponse,
        flatResponse: unknown
      ) => {
        currentRawResponse = rawResponse;
        providedCallback?.(rawResponse, flatResponse);
      };
      const updatedArgs = {
        ...args,
        options: {
          ...args.options,
          onResponse: callback
        }
      };
      const flatResponse = await directSendOperation(updatedArgs, spec);
      return {
        flatResponse,
        rawResponse: {
          statusCode: currentRawResponse!.status,
          body: currentRawResponse!.parsedBody,
          headers: currentRawResponse!.headers.toJSON()
        }
      };
    };

    const lro = new LroImpl(
      sendOperation,
      { workspaceName, resourceGroupName, kustoPoolName, options },
      deleteOperationSpec
    );
    const poller = new LroEngine(lro, {
      resumeFrom: options?.resumeFrom,
      intervalInMs: options?.updateIntervalInMs
    });
    await poller.poll();
    return poller;
  }

  /**
   * Deletes a Kusto pool.
   * @param workspaceName The name of the workspace.
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param kustoPoolName The name of the Kusto pool.
   * @param options The options parameters.
   */
  async beginDeleteAndWait(
    workspaceName: string,
    resourceGroupName: string,
    kustoPoolName: string,
    options?: KustoPoolsDeleteOptionalParams
  ): Promise<void> {
    const poller = await this.beginDelete(
      workspaceName,
      resourceGroupName,
      kustoPoolName,
      options
    );
    return poller.pollUntilDone();
  }

  /**
   * Stops a Kusto pool.
   * @param workspaceName The name of the workspace.
   * @param kustoPoolName The name of the Kusto pool.
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param options The options parameters.
   */
  async beginStop(
    workspaceName: string,
    kustoPoolName: string,
    resourceGroupName: string,
    options?: KustoPoolsStopOptionalParams
  ): Promise<PollerLike<PollOperationState<void>, void>> {
    const directSendOperation = async (
      args: coreClient.OperationArguments,
      spec: coreClient.OperationSpec
    ): Promise<void> => {
      return this.client.sendOperationRequest(args, spec);
    };
    const sendOperation = async (
      args: coreClient.OperationArguments,
      spec: coreClient.OperationSpec
    ) => {
      let currentRawResponse:
        | coreClient.FullOperationResponse
        | undefined = undefined;
      const providedCallback = args.options?.onResponse;
      const callback: coreClient.RawResponseCallback = (
        rawResponse: coreClient.FullOperationResponse,
        flatResponse: unknown
      ) => {
        currentRawResponse = rawResponse;
        providedCallback?.(rawResponse, flatResponse);
      };
      const updatedArgs = {
        ...args,
        options: {
          ...args.options,
          onResponse: callback
        }
      };
      const flatResponse = await directSendOperation(updatedArgs, spec);
      return {
        flatResponse,
        rawResponse: {
          statusCode: currentRawResponse!.status,
          body: currentRawResponse!.parsedBody,
          headers: currentRawResponse!.headers.toJSON()
        }
      };
    };

    const lro = new LroImpl(
      sendOperation,
      { workspaceName, kustoPoolName, resourceGroupName, options },
      stopOperationSpec
    );
    const poller = new LroEngine(lro, {
      resumeFrom: options?.resumeFrom,
      intervalInMs: options?.updateIntervalInMs
    });
    await poller.poll();
    return poller;
  }

  /**
   * Stops a Kusto pool.
   * @param workspaceName The name of the workspace.
   * @param kustoPoolName The name of the Kusto pool.
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param options The options parameters.
   */
  async beginStopAndWait(
    workspaceName: string,
    kustoPoolName: string,
    resourceGroupName: string,
    options?: KustoPoolsStopOptionalParams
  ): Promise<void> {
    const poller = await this.beginStop(
      workspaceName,
      kustoPoolName,
      resourceGroupName,
      options
    );
    return poller.pollUntilDone();
  }

  /**
   * Starts a Kusto pool.
   * @param workspaceName The name of the workspace.
   * @param kustoPoolName The name of the Kusto pool.
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param options The options parameters.
   */
  async beginStart(
    workspaceName: string,
    kustoPoolName: string,
    resourceGroupName: string,
    options?: KustoPoolsStartOptionalParams
  ): Promise<PollerLike<PollOperationState<void>, void>> {
    const directSendOperation = async (
      args: coreClient.OperationArguments,
      spec: coreClient.OperationSpec
    ): Promise<void> => {
      return this.client.sendOperationRequest(args, spec);
    };
    const sendOperation = async (
      args: coreClient.OperationArguments,
      spec: coreClient.OperationSpec
    ) => {
      let currentRawResponse:
        | coreClient.FullOperationResponse
        | undefined = undefined;
      const providedCallback = args.options?.onResponse;
      const callback: coreClient.RawResponseCallback = (
        rawResponse: coreClient.FullOperationResponse,
        flatResponse: unknown
      ) => {
        currentRawResponse = rawResponse;
        providedCallback?.(rawResponse, flatResponse);
      };
      const updatedArgs = {
        ...args,
        options: {
          ...args.options,
          onResponse: callback
        }
      };
      const flatResponse = await directSendOperation(updatedArgs, spec);
      return {
        flatResponse,
        rawResponse: {
          statusCode: currentRawResponse!.status,
          body: currentRawResponse!.parsedBody,
          headers: currentRawResponse!.headers.toJSON()
        }
      };
    };

    const lro = new LroImpl(
      sendOperation,
      { workspaceName, kustoPoolName, resourceGroupName, options },
      startOperationSpec
    );
    const poller = new LroEngine(lro, {
      resumeFrom: options?.resumeFrom,
      intervalInMs: options?.updateIntervalInMs
    });
    await poller.poll();
    return poller;
  }

  /**
   * Starts a Kusto pool.
   * @param workspaceName The name of the workspace.
   * @param kustoPoolName The name of the Kusto pool.
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param options The options parameters.
   */
  async beginStartAndWait(
    workspaceName: string,
    kustoPoolName: string,
    resourceGroupName: string,
    options?: KustoPoolsStartOptionalParams
  ): Promise<void> {
    const poller = await this.beginStart(
      workspaceName,
      kustoPoolName,
      resourceGroupName,
      options
    );
    return poller.pollUntilDone();
  }

  /**
   * Returns the SKUs available for the provided resource.
   * @param workspaceName The name of the workspace.
   * @param kustoPoolName The name of the Kusto pool.
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param options The options parameters.
   */
  private _listSkusByResource(
    workspaceName: string,
    kustoPoolName: string,
    resourceGroupName: string,
    options?: KustoPoolsListSkusByResourceOptionalParams
  ): Promise<KustoPoolsListSkusByResourceResponse> {
    return this.client.sendOperationRequest(
      { workspaceName, kustoPoolName, resourceGroupName, options },
      listSkusByResourceOperationSpec
    );
  }

  /**
   * Returns a list of language extensions that can run within KQL queries.
   * @param workspaceName The name of the workspace.
   * @param kustoPoolName The name of the Kusto pool.
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param options The options parameters.
   */
  private _listLanguageExtensions(
    workspaceName: string,
    kustoPoolName: string,
    resourceGroupName: string,
    options?: KustoPoolsListLanguageExtensionsOptionalParams
  ): Promise<KustoPoolsListLanguageExtensionsResponse> {
    return this.client.sendOperationRequest(
      { workspaceName, kustoPoolName, resourceGroupName, options },
      listLanguageExtensionsOperationSpec
    );
  }

  /**
   * Add a list of language extensions that can run within KQL queries.
   * @param workspaceName The name of the workspace.
   * @param kustoPoolName The name of the Kusto pool.
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param languageExtensionsToAdd The language extensions to add.
   * @param options The options parameters.
   */
  async beginAddLanguageExtensions(
    workspaceName: string,
    kustoPoolName: string,
    resourceGroupName: string,
    languageExtensionsToAdd: LanguageExtensionsList,
    options?: KustoPoolsAddLanguageExtensionsOptionalParams
  ): Promise<PollerLike<PollOperationState<void>, void>> {
    const directSendOperation = async (
      args: coreClient.OperationArguments,
      spec: coreClient.OperationSpec
    ): Promise<void> => {
      return this.client.sendOperationRequest(args, spec);
    };
    const sendOperation = async (
      args: coreClient.OperationArguments,
      spec: coreClient.OperationSpec
    ) => {
      let currentRawResponse:
        | coreClient.FullOperationResponse
        | undefined = undefined;
      const providedCallback = args.options?.onResponse;
      const callback: coreClient.RawResponseCallback = (
        rawResponse: coreClient.FullOperationResponse,
        flatResponse: unknown
      ) => {
        currentRawResponse = rawResponse;
        providedCallback?.(rawResponse, flatResponse);
      };
      const updatedArgs = {
        ...args,
        options: {
          ...args.options,
          onResponse: callback
        }
      };
      const flatResponse = await directSendOperation(updatedArgs, spec);
      return {
        flatResponse,
        rawResponse: {
          statusCode: currentRawResponse!.status,
          body: currentRawResponse!.parsedBody,
          headers: currentRawResponse!.headers.toJSON()
        }
      };
    };

    const lro = new LroImpl(
      sendOperation,
      {
        workspaceName,
        kustoPoolName,
        resourceGroupName,
        languageExtensionsToAdd,
        options
      },
      addLanguageExtensionsOperationSpec
    );
    const poller = new LroEngine(lro, {
      resumeFrom: options?.resumeFrom,
      intervalInMs: options?.updateIntervalInMs
    });
    await poller.poll();
    return poller;
  }

  /**
   * Add a list of language extensions that can run within KQL queries.
   * @param workspaceName The name of the workspace.
   * @param kustoPoolName The name of the Kusto pool.
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param languageExtensionsToAdd The language extensions to add.
   * @param options The options parameters.
   */
  async beginAddLanguageExtensionsAndWait(
    workspaceName: string,
    kustoPoolName: string,
    resourceGroupName: string,
    languageExtensionsToAdd: LanguageExtensionsList,
    options?: KustoPoolsAddLanguageExtensionsOptionalParams
  ): Promise<void> {
    const poller = await this.beginAddLanguageExtensions(
      workspaceName,
      kustoPoolName,
      resourceGroupName,
      languageExtensionsToAdd,
      options
    );
    return poller.pollUntilDone();
  }

  /**
   * Remove a list of language extensions that can run within KQL queries.
   * @param workspaceName The name of the workspace.
   * @param kustoPoolName The name of the Kusto pool.
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param languageExtensionsToRemove The language extensions to remove.
   * @param options The options parameters.
   */
  async beginRemoveLanguageExtensions(
    workspaceName: string,
    kustoPoolName: string,
    resourceGroupName: string,
    languageExtensionsToRemove: LanguageExtensionsList,
    options?: KustoPoolsRemoveLanguageExtensionsOptionalParams
  ): Promise<PollerLike<PollOperationState<void>, void>> {
    const directSendOperation = async (
      args: coreClient.OperationArguments,
      spec: coreClient.OperationSpec
    ): Promise<void> => {
      return this.client.sendOperationRequest(args, spec);
    };
    const sendOperation = async (
      args: coreClient.OperationArguments,
      spec: coreClient.OperationSpec
    ) => {
      let currentRawResponse:
        | coreClient.FullOperationResponse
        | undefined = undefined;
      const providedCallback = args.options?.onResponse;
      const callback: coreClient.RawResponseCallback = (
        rawResponse: coreClient.FullOperationResponse,
        flatResponse: unknown
      ) => {
        currentRawResponse = rawResponse;
        providedCallback?.(rawResponse, flatResponse);
      };
      const updatedArgs = {
        ...args,
        options: {
          ...args.options,
          onResponse: callback
        }
      };
      const flatResponse = await directSendOperation(updatedArgs, spec);
      return {
        flatResponse,
        rawResponse: {
          statusCode: currentRawResponse!.status,
          body: currentRawResponse!.parsedBody,
          headers: currentRawResponse!.headers.toJSON()
        }
      };
    };

    const lro = new LroImpl(
      sendOperation,
      {
        workspaceName,
        kustoPoolName,
        resourceGroupName,
        languageExtensionsToRemove,
        options
      },
      removeLanguageExtensionsOperationSpec
    );
    const poller = new LroEngine(lro, {
      resumeFrom: options?.resumeFrom,
      intervalInMs: options?.updateIntervalInMs
    });
    await poller.poll();
    return poller;
  }

  /**
   * Remove a list of language extensions that can run within KQL queries.
   * @param workspaceName The name of the workspace.
   * @param kustoPoolName The name of the Kusto pool.
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param languageExtensionsToRemove The language extensions to remove.
   * @param options The options parameters.
   */
  async beginRemoveLanguageExtensionsAndWait(
    workspaceName: string,
    kustoPoolName: string,
    resourceGroupName: string,
    languageExtensionsToRemove: LanguageExtensionsList,
    options?: KustoPoolsRemoveLanguageExtensionsOptionalParams
  ): Promise<void> {
    const poller = await this.beginRemoveLanguageExtensions(
      workspaceName,
      kustoPoolName,
      resourceGroupName,
      languageExtensionsToRemove,
      options
    );
    return poller.pollUntilDone();
  }

  /**
   * Returns a list of databases that are owned by this Kusto Pool and were followed by another Kusto
   * Pool.
   * @param workspaceName The name of the workspace.
   * @param kustoPoolName The name of the Kusto pool.
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param options The options parameters.
   */
  private _listFollowerDatabases(
    workspaceName: string,
    kustoPoolName: string,
    resourceGroupName: string,
    options?: KustoPoolsListFollowerDatabasesOptionalParams
  ): Promise<KustoPoolsListFollowerDatabasesResponse> {
    return this.client.sendOperationRequest(
      { workspaceName, kustoPoolName, resourceGroupName, options },
      listFollowerDatabasesOperationSpec
    );
  }

  /**
   * Detaches all followers of a database owned by this Kusto Pool.
   * @param workspaceName The name of the workspace.
   * @param kustoPoolName The name of the Kusto pool.
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param followerDatabaseToRemove The follower databases properties to remove.
   * @param options The options parameters.
   */
  async beginDetachFollowerDatabases(
    workspaceName: string,
    kustoPoolName: string,
    resourceGroupName: string,
    followerDatabaseToRemove: FollowerDatabaseDefinition,
    options?: KustoPoolsDetachFollowerDatabasesOptionalParams
  ): Promise<PollerLike<PollOperationState<void>, void>> {
    const directSendOperation = async (
      args: coreClient.OperationArguments,
      spec: coreClient.OperationSpec
    ): Promise<void> => {
      return this.client.sendOperationRequest(args, spec);
    };
    const sendOperation = async (
      args: coreClient.OperationArguments,
      spec: coreClient.OperationSpec
    ) => {
      let currentRawResponse:
        | coreClient.FullOperationResponse
        | undefined = undefined;
      const providedCallback = args.options?.onResponse;
      const callback: coreClient.RawResponseCallback = (
        rawResponse: coreClient.FullOperationResponse,
        flatResponse: unknown
      ) => {
        currentRawResponse = rawResponse;
        providedCallback?.(rawResponse, flatResponse);
      };
      const updatedArgs = {
        ...args,
        options: {
          ...args.options,
          onResponse: callback
        }
      };
      const flatResponse = await directSendOperation(updatedArgs, spec);
      return {
        flatResponse,
        rawResponse: {
          statusCode: currentRawResponse!.status,
          body: currentRawResponse!.parsedBody,
          headers: currentRawResponse!.headers.toJSON()
        }
      };
    };

    const lro = new LroImpl(
      sendOperation,
      {
        workspaceName,
        kustoPoolName,
        resourceGroupName,
        followerDatabaseToRemove,
        options
      },
      detachFollowerDatabasesOperationSpec
    );
    const poller = new LroEngine(lro, {
      resumeFrom: options?.resumeFrom,
      intervalInMs: options?.updateIntervalInMs
    });
    await poller.poll();
    return poller;
  }

  /**
   * Detaches all followers of a database owned by this Kusto Pool.
   * @param workspaceName The name of the workspace.
   * @param kustoPoolName The name of the Kusto pool.
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param followerDatabaseToRemove The follower databases properties to remove.
   * @param options The options parameters.
   */
  async beginDetachFollowerDatabasesAndWait(
    workspaceName: string,
    kustoPoolName: string,
    resourceGroupName: string,
    followerDatabaseToRemove: FollowerDatabaseDefinition,
    options?: KustoPoolsDetachFollowerDatabasesOptionalParams
  ): Promise<void> {
    const poller = await this.beginDetachFollowerDatabases(
      workspaceName,
      kustoPoolName,
      resourceGroupName,
      followerDatabaseToRemove,
      options
    );
    return poller.pollUntilDone();
  }
}
// Operation Specifications
const serializer = coreClient.createSerializer(Mappers, /* isXml */ false);

const listSkusOperationSpec: coreClient.OperationSpec = {
  path: "/subscriptions/{subscriptionId}/providers/Microsoft.Synapse/skus",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.SkuDescriptionList
    },
    default: {
      bodyMapper: Mappers.ErrorResponse
    }
  },
  queryParameters: [Parameters.apiVersion1],
  urlParameters: [Parameters.$host, Parameters.subscriptionId],
  headerParameters: [Parameters.accept],
  serializer
};
const checkNameAvailabilityOperationSpec: coreClient.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/providers/Microsoft.Synapse/locations/{location}/kustoPoolCheckNameAvailability",
  httpMethod: "POST",
  responses: {
    200: {
      bodyMapper: Mappers.CheckNameResult
    },
    default: {
      bodyMapper: Mappers.ErrorResponse
    }
  },
  requestBody: Parameters.kustoPoolName,
  queryParameters: [Parameters.apiVersion1],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.location
  ],
  headerParameters: [Parameters.accept, Parameters.contentType],
  mediaType: "json",
  serializer
};
const listByWorkspaceOperationSpec: coreClient.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Synapse/workspaces/{workspaceName}/kustoPools",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.KustoPoolListResult
    },
    default: {
      bodyMapper: Mappers.ErrorResponse
    }
  },
  queryParameters: [Parameters.apiVersion1],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.workspaceName
  ],
  headerParameters: [Parameters.accept],
  serializer
};
const getOperationSpec: coreClient.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Synapse/workspaces/{workspaceName}/kustoPools/{kustoPoolName}",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.KustoPool
    },
    default: {
      bodyMapper: Mappers.ErrorResponse
    }
  },
  queryParameters: [Parameters.apiVersion1],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.workspaceName,
    Parameters.kustoPoolName1
  ],
  headerParameters: [Parameters.accept],
  serializer
};
const createOrUpdateOperationSpec: coreClient.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Synapse/workspaces/{workspaceName}/kustoPools/{kustoPoolName}",
  httpMethod: "PUT",
  responses: {
    200: {
      bodyMapper: Mappers.KustoPool
    },
    201: {
      bodyMapper: Mappers.KustoPool
    },
    202: {
      bodyMapper: Mappers.KustoPool
    },
    204: {
      bodyMapper: Mappers.KustoPool
    },
    default: {
      bodyMapper: Mappers.ErrorResponse
    }
  },
  requestBody: Parameters.parameters23,
  queryParameters: [Parameters.apiVersion1],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.workspaceName,
    Parameters.kustoPoolName1
  ],
  headerParameters: [
    Parameters.accept,
    Parameters.contentType,
    Parameters.ifNoneMatch,
    Parameters.ifMatch
  ],
  mediaType: "json",
  serializer
};
const updateOperationSpec: coreClient.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Synapse/workspaces/{workspaceName}/kustoPools/{kustoPoolName}",
  httpMethod: "PATCH",
  responses: {
    200: {
      bodyMapper: Mappers.KustoPool
    },
    201: {
      bodyMapper: Mappers.KustoPool
    },
    202: {
      bodyMapper: Mappers.KustoPool
    },
    204: {
      bodyMapper: Mappers.KustoPool
    },
    default: {
      bodyMapper: Mappers.ErrorResponse
    }
  },
  requestBody: Parameters.parameters24,
  queryParameters: [Parameters.apiVersion1],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.workspaceName,
    Parameters.kustoPoolName1
  ],
  headerParameters: [
    Parameters.accept,
    Parameters.contentType,
    Parameters.ifMatch
  ],
  mediaType: "json",
  serializer
};
const deleteOperationSpec: coreClient.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Synapse/workspaces/{workspaceName}/kustoPools/{kustoPoolName}",
  httpMethod: "DELETE",
  responses: {
    200: {},
    201: {},
    202: {},
    204: {},
    default: {
      bodyMapper: Mappers.ErrorResponse
    }
  },
  queryParameters: [Parameters.apiVersion1],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.workspaceName,
    Parameters.kustoPoolName1
  ],
  headerParameters: [Parameters.accept],
  serializer
};
const stopOperationSpec: coreClient.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Synapse/workspaces/{workspaceName}/kustoPools/{kustoPoolName}/stop",
  httpMethod: "POST",
  responses: {
    200: {},
    201: {},
    202: {},
    204: {},
    default: {
      bodyMapper: Mappers.ErrorResponse
    }
  },
  queryParameters: [Parameters.apiVersion1],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.workspaceName,
    Parameters.kustoPoolName1
  ],
  headerParameters: [Parameters.accept],
  serializer
};
const startOperationSpec: coreClient.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Synapse/workspaces/{workspaceName}/kustoPools/{kustoPoolName}/start",
  httpMethod: "POST",
  responses: {
    200: {},
    201: {},
    202: {},
    204: {},
    default: {
      bodyMapper: Mappers.ErrorResponse
    }
  },
  queryParameters: [Parameters.apiVersion1],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.workspaceName,
    Parameters.kustoPoolName1
  ],
  headerParameters: [Parameters.accept],
  serializer
};
const listSkusByResourceOperationSpec: coreClient.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Synapse/workspaces/{workspaceName}/kustoPools/{kustoPoolName}/skus",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.ListResourceSkusResult
    },
    default: {
      bodyMapper: Mappers.ErrorResponse
    }
  },
  queryParameters: [Parameters.apiVersion1],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.workspaceName,
    Parameters.kustoPoolName1
  ],
  headerParameters: [Parameters.accept],
  serializer
};
const listLanguageExtensionsOperationSpec: coreClient.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Synapse/workspaces/{workspaceName}/kustoPools/{kustoPoolName}/listLanguageExtensions",
  httpMethod: "POST",
  responses: {
    200: {
      bodyMapper: Mappers.LanguageExtensionsList
    },
    default: {
      bodyMapper: Mappers.ErrorResponse
    }
  },
  queryParameters: [Parameters.apiVersion1],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.workspaceName,
    Parameters.kustoPoolName1
  ],
  headerParameters: [Parameters.accept],
  serializer
};
const addLanguageExtensionsOperationSpec: coreClient.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Synapse/workspaces/{workspaceName}/kustoPools/{kustoPoolName}/addLanguageExtensions",
  httpMethod: "POST",
  responses: {
    200: {},
    201: {},
    202: {},
    204: {},
    default: {
      bodyMapper: Mappers.ErrorResponse
    }
  },
  requestBody: Parameters.languageExtensionsToAdd,
  queryParameters: [Parameters.apiVersion1],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.workspaceName,
    Parameters.kustoPoolName1
  ],
  headerParameters: [Parameters.accept, Parameters.contentType],
  mediaType: "json",
  serializer
};
const removeLanguageExtensionsOperationSpec: coreClient.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Synapse/workspaces/{workspaceName}/kustoPools/{kustoPoolName}/removeLanguageExtensions",
  httpMethod: "POST",
  responses: {
    200: {},
    201: {},
    202: {},
    204: {},
    default: {
      bodyMapper: Mappers.ErrorResponse
    }
  },
  requestBody: Parameters.languageExtensionsToRemove,
  queryParameters: [Parameters.apiVersion1],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.workspaceName,
    Parameters.kustoPoolName1
  ],
  headerParameters: [Parameters.accept, Parameters.contentType],
  mediaType: "json",
  serializer
};
const listFollowerDatabasesOperationSpec: coreClient.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Synapse/workspaces/{workspaceName}/kustoPools/{kustoPoolName}/listFollowerDatabases",
  httpMethod: "POST",
  responses: {
    200: {
      bodyMapper: Mappers.FollowerDatabaseListResult
    },
    default: {
      bodyMapper: Mappers.ErrorResponse
    }
  },
  queryParameters: [Parameters.apiVersion1],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.workspaceName,
    Parameters.kustoPoolName1
  ],
  headerParameters: [Parameters.accept],
  serializer
};
const detachFollowerDatabasesOperationSpec: coreClient.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Synapse/workspaces/{workspaceName}/kustoPools/{kustoPoolName}/detachFollowerDatabases",
  httpMethod: "POST",
  responses: {
    200: {},
    201: {},
    202: {},
    204: {},
    default: {
      bodyMapper: Mappers.ErrorResponse
    }
  },
  requestBody: Parameters.followerDatabaseToRemove,
  queryParameters: [Parameters.apiVersion1],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.workspaceName,
    Parameters.kustoPoolName1
  ],
  headerParameters: [Parameters.accept, Parameters.contentType],
  mediaType: "json",
  serializer
};
