/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */

import { PagedAsyncIterableIterator } from "@azure/core-paging";
import { VirtualMachineImageTemplates } from "../operationsInterfaces";
import * as coreClient from "@azure/core-client";
import * as Mappers from "../models/mappers";
import * as Parameters from "../models/parameters";
import { ImageBuilderClient } from "../imageBuilderClient";
import { PollerLike, PollOperationState, LroEngine } from "@azure/core-lro";
import { LroImpl } from "../lroImpl";
import {
  ImageTemplate,
  VirtualMachineImageTemplatesListNextOptionalParams,
  VirtualMachineImageTemplatesListOptionalParams,
  VirtualMachineImageTemplatesListByResourceGroupNextOptionalParams,
  VirtualMachineImageTemplatesListByResourceGroupOptionalParams,
  RunOutput,
  VirtualMachineImageTemplatesListRunOutputsNextOptionalParams,
  VirtualMachineImageTemplatesListRunOutputsOptionalParams,
  VirtualMachineImageTemplatesListResponse,
  VirtualMachineImageTemplatesListByResourceGroupResponse,
  VirtualMachineImageTemplatesCreateOrUpdateOptionalParams,
  VirtualMachineImageTemplatesCreateOrUpdateResponse,
  ImageTemplateUpdateParameters,
  VirtualMachineImageTemplatesUpdateOptionalParams,
  VirtualMachineImageTemplatesUpdateResponse,
  VirtualMachineImageTemplatesGetOptionalParams,
  VirtualMachineImageTemplatesGetResponse,
  VirtualMachineImageTemplatesDeleteOptionalParams,
  VirtualMachineImageTemplatesRunOptionalParams,
  VirtualMachineImageTemplatesCancelOptionalParams,
  VirtualMachineImageTemplatesListRunOutputsResponse,
  VirtualMachineImageTemplatesGetRunOutputOptionalParams,
  VirtualMachineImageTemplatesGetRunOutputResponse,
  VirtualMachineImageTemplatesListNextResponse,
  VirtualMachineImageTemplatesListByResourceGroupNextResponse,
  VirtualMachineImageTemplatesListRunOutputsNextResponse
} from "../models";

/// <reference lib="esnext.asynciterable" />
/** Class containing VirtualMachineImageTemplates operations. */
export class VirtualMachineImageTemplatesImpl
  implements VirtualMachineImageTemplates {
  private readonly client: ImageBuilderClient;

  /**
   * Initialize a new instance of the class VirtualMachineImageTemplates class.
   * @param client Reference to the service client
   */
  constructor(client: ImageBuilderClient) {
    this.client = client;
  }

  /**
   * Gets information about the VM image templates associated with the subscription.
   * @param options The options parameters.
   */
  public list(
    options?: VirtualMachineImageTemplatesListOptionalParams
  ): PagedAsyncIterableIterator<ImageTemplate> {
    const iter = this.listPagingAll(options);
    return {
      next() {
        return iter.next();
      },
      [Symbol.asyncIterator]() {
        return this;
      },
      byPage: () => {
        return this.listPagingPage(options);
      }
    };
  }

  private async *listPagingPage(
    options?: VirtualMachineImageTemplatesListOptionalParams
  ): AsyncIterableIterator<ImageTemplate[]> {
    let result = await this._list(options);
    yield result.value || [];
    let continuationToken = result.nextLink;
    while (continuationToken) {
      result = await this._listNext(continuationToken, options);
      continuationToken = result.nextLink;
      yield result.value || [];
    }
  }

  private async *listPagingAll(
    options?: VirtualMachineImageTemplatesListOptionalParams
  ): AsyncIterableIterator<ImageTemplate> {
    for await (const page of this.listPagingPage(options)) {
      yield* page;
    }
  }

  /**
   * Gets information about the VM image templates associated with the specified resource group.
   * @param resourceGroupName The name of the resource group.
   * @param options The options parameters.
   */
  public listByResourceGroup(
    resourceGroupName: string,
    options?: VirtualMachineImageTemplatesListByResourceGroupOptionalParams
  ): PagedAsyncIterableIterator<ImageTemplate> {
    const iter = this.listByResourceGroupPagingAll(resourceGroupName, options);
    return {
      next() {
        return iter.next();
      },
      [Symbol.asyncIterator]() {
        return this;
      },
      byPage: () => {
        return this.listByResourceGroupPagingPage(resourceGroupName, options);
      }
    };
  }

  private async *listByResourceGroupPagingPage(
    resourceGroupName: string,
    options?: VirtualMachineImageTemplatesListByResourceGroupOptionalParams
  ): AsyncIterableIterator<ImageTemplate[]> {
    let result = await this._listByResourceGroup(resourceGroupName, options);
    yield result.value || [];
    let continuationToken = result.nextLink;
    while (continuationToken) {
      result = await this._listByResourceGroupNext(
        resourceGroupName,
        continuationToken,
        options
      );
      continuationToken = result.nextLink;
      yield result.value || [];
    }
  }

  private async *listByResourceGroupPagingAll(
    resourceGroupName: string,
    options?: VirtualMachineImageTemplatesListByResourceGroupOptionalParams
  ): AsyncIterableIterator<ImageTemplate> {
    for await (const page of this.listByResourceGroupPagingPage(
      resourceGroupName,
      options
    )) {
      yield* page;
    }
  }

  /**
   * List all run outputs for the specified Image Template resource
   * @param resourceGroupName The name of the resource group.
   * @param imageTemplateName The name of the image Template
   * @param options The options parameters.
   */
  public listRunOutputs(
    resourceGroupName: string,
    imageTemplateName: string,
    options?: VirtualMachineImageTemplatesListRunOutputsOptionalParams
  ): PagedAsyncIterableIterator<RunOutput> {
    const iter = this.listRunOutputsPagingAll(
      resourceGroupName,
      imageTemplateName,
      options
    );
    return {
      next() {
        return iter.next();
      },
      [Symbol.asyncIterator]() {
        return this;
      },
      byPage: () => {
        return this.listRunOutputsPagingPage(
          resourceGroupName,
          imageTemplateName,
          options
        );
      }
    };
  }

  private async *listRunOutputsPagingPage(
    resourceGroupName: string,
    imageTemplateName: string,
    options?: VirtualMachineImageTemplatesListRunOutputsOptionalParams
  ): AsyncIterableIterator<RunOutput[]> {
    let result = await this._listRunOutputs(
      resourceGroupName,
      imageTemplateName,
      options
    );
    yield result.value || [];
    let continuationToken = result.nextLink;
    while (continuationToken) {
      result = await this._listRunOutputsNext(
        resourceGroupName,
        imageTemplateName,
        continuationToken,
        options
      );
      continuationToken = result.nextLink;
      yield result.value || [];
    }
  }

  private async *listRunOutputsPagingAll(
    resourceGroupName: string,
    imageTemplateName: string,
    options?: VirtualMachineImageTemplatesListRunOutputsOptionalParams
  ): AsyncIterableIterator<RunOutput> {
    for await (const page of this.listRunOutputsPagingPage(
      resourceGroupName,
      imageTemplateName,
      options
    )) {
      yield* page;
    }
  }

  /**
   * Gets information about the VM image templates associated with the subscription.
   * @param options The options parameters.
   */
  private _list(
    options?: VirtualMachineImageTemplatesListOptionalParams
  ): Promise<VirtualMachineImageTemplatesListResponse> {
    return this.client.sendOperationRequest({ options }, listOperationSpec);
  }

  /**
   * Gets information about the VM image templates associated with the specified resource group.
   * @param resourceGroupName The name of the resource group.
   * @param options The options parameters.
   */
  private _listByResourceGroup(
    resourceGroupName: string,
    options?: VirtualMachineImageTemplatesListByResourceGroupOptionalParams
  ): Promise<VirtualMachineImageTemplatesListByResourceGroupResponse> {
    return this.client.sendOperationRequest(
      { resourceGroupName, options },
      listByResourceGroupOperationSpec
    );
  }

  /**
   * Create or update a virtual machine image template
   * @param resourceGroupName The name of the resource group.
   * @param imageTemplateName The name of the image Template
   * @param parameters Parameters supplied to the CreateImageTemplate operation
   * @param options The options parameters.
   */
  async beginCreateOrUpdate(
    resourceGroupName: string,
    imageTemplateName: string,
    parameters: ImageTemplate,
    options?: VirtualMachineImageTemplatesCreateOrUpdateOptionalParams
  ): Promise<
    PollerLike<
      PollOperationState<VirtualMachineImageTemplatesCreateOrUpdateResponse>,
      VirtualMachineImageTemplatesCreateOrUpdateResponse
    >
  > {
    const directSendOperation = async (
      args: coreClient.OperationArguments,
      spec: coreClient.OperationSpec
    ): Promise<VirtualMachineImageTemplatesCreateOrUpdateResponse> => {
      return this.client.sendOperationRequest(args, spec);
    };
    const sendOperation = async (
      args: coreClient.OperationArguments,
      spec: coreClient.OperationSpec
    ) => {
      let currentRawResponse:
        | coreClient.FullOperationResponse
        | undefined = undefined;
      const providedCallback = args.options?.onResponse;
      const callback: coreClient.RawResponseCallback = (
        rawResponse: coreClient.FullOperationResponse,
        flatResponse: unknown
      ) => {
        currentRawResponse = rawResponse;
        providedCallback?.(rawResponse, flatResponse);
      };
      const updatedArgs = {
        ...args,
        options: {
          ...args.options,
          onResponse: callback
        }
      };
      const flatResponse = await directSendOperation(updatedArgs, spec);
      return {
        flatResponse,
        rawResponse: {
          statusCode: currentRawResponse!.status,
          body: currentRawResponse!.parsedBody,
          headers: currentRawResponse!.headers.toJSON()
        }
      };
    };

    const lro = new LroImpl(
      sendOperation,
      { resourceGroupName, imageTemplateName, parameters, options },
      createOrUpdateOperationSpec
    );
    const poller = new LroEngine(lro, {
      resumeFrom: options?.resumeFrom,
      intervalInMs: options?.updateIntervalInMs,
      lroResourceLocationConfig: "azure-async-operation"
    });
    await poller.poll();
    return poller;
  }

  /**
   * Create or update a virtual machine image template
   * @param resourceGroupName The name of the resource group.
   * @param imageTemplateName The name of the image Template
   * @param parameters Parameters supplied to the CreateImageTemplate operation
   * @param options The options parameters.
   */
  async beginCreateOrUpdateAndWait(
    resourceGroupName: string,
    imageTemplateName: string,
    parameters: ImageTemplate,
    options?: VirtualMachineImageTemplatesCreateOrUpdateOptionalParams
  ): Promise<VirtualMachineImageTemplatesCreateOrUpdateResponse> {
    const poller = await this.beginCreateOrUpdate(
      resourceGroupName,
      imageTemplateName,
      parameters,
      options
    );
    return poller.pollUntilDone();
  }

  /**
   * Update the tags for this Virtual Machine Image Template
   * @param resourceGroupName The name of the resource group.
   * @param imageTemplateName The name of the image Template
   * @param parameters Additional parameters for Image Template update.
   * @param options The options parameters.
   */
  async beginUpdate(
    resourceGroupName: string,
    imageTemplateName: string,
    parameters: ImageTemplateUpdateParameters,
    options?: VirtualMachineImageTemplatesUpdateOptionalParams
  ): Promise<
    PollerLike<
      PollOperationState<VirtualMachineImageTemplatesUpdateResponse>,
      VirtualMachineImageTemplatesUpdateResponse
    >
  > {
    const directSendOperation = async (
      args: coreClient.OperationArguments,
      spec: coreClient.OperationSpec
    ): Promise<VirtualMachineImageTemplatesUpdateResponse> => {
      return this.client.sendOperationRequest(args, spec);
    };
    const sendOperation = async (
      args: coreClient.OperationArguments,
      spec: coreClient.OperationSpec
    ) => {
      let currentRawResponse:
        | coreClient.FullOperationResponse
        | undefined = undefined;
      const providedCallback = args.options?.onResponse;
      const callback: coreClient.RawResponseCallback = (
        rawResponse: coreClient.FullOperationResponse,
        flatResponse: unknown
      ) => {
        currentRawResponse = rawResponse;
        providedCallback?.(rawResponse, flatResponse);
      };
      const updatedArgs = {
        ...args,
        options: {
          ...args.options,
          onResponse: callback
        }
      };
      const flatResponse = await directSendOperation(updatedArgs, spec);
      return {
        flatResponse,
        rawResponse: {
          statusCode: currentRawResponse!.status,
          body: currentRawResponse!.parsedBody,
          headers: currentRawResponse!.headers.toJSON()
        }
      };
    };

    const lro = new LroImpl(
      sendOperation,
      { resourceGroupName, imageTemplateName, parameters, options },
      updateOperationSpec
    );
    const poller = new LroEngine(lro, {
      resumeFrom: options?.resumeFrom,
      intervalInMs: options?.updateIntervalInMs,
      lroResourceLocationConfig: "azure-async-operation"
    });
    await poller.poll();
    return poller;
  }

  /**
   * Update the tags for this Virtual Machine Image Template
   * @param resourceGroupName The name of the resource group.
   * @param imageTemplateName The name of the image Template
   * @param parameters Additional parameters for Image Template update.
   * @param options The options parameters.
   */
  async beginUpdateAndWait(
    resourceGroupName: string,
    imageTemplateName: string,
    parameters: ImageTemplateUpdateParameters,
    options?: VirtualMachineImageTemplatesUpdateOptionalParams
  ): Promise<VirtualMachineImageTemplatesUpdateResponse> {
    const poller = await this.beginUpdate(
      resourceGroupName,
      imageTemplateName,
      parameters,
      options
    );
    return poller.pollUntilDone();
  }

  /**
   * Get information about a virtual machine image template
   * @param resourceGroupName The name of the resource group.
   * @param imageTemplateName The name of the image Template
   * @param options The options parameters.
   */
  get(
    resourceGroupName: string,
    imageTemplateName: string,
    options?: VirtualMachineImageTemplatesGetOptionalParams
  ): Promise<VirtualMachineImageTemplatesGetResponse> {
    return this.client.sendOperationRequest(
      { resourceGroupName, imageTemplateName, options },
      getOperationSpec
    );
  }

  /**
   * Delete a virtual machine image template
   * @param resourceGroupName The name of the resource group.
   * @param imageTemplateName The name of the image Template
   * @param options The options parameters.
   */
  async beginDelete(
    resourceGroupName: string,
    imageTemplateName: string,
    options?: VirtualMachineImageTemplatesDeleteOptionalParams
  ): Promise<PollerLike<PollOperationState<void>, void>> {
    const directSendOperation = async (
      args: coreClient.OperationArguments,
      spec: coreClient.OperationSpec
    ): Promise<void> => {
      return this.client.sendOperationRequest(args, spec);
    };
    const sendOperation = async (
      args: coreClient.OperationArguments,
      spec: coreClient.OperationSpec
    ) => {
      let currentRawResponse:
        | coreClient.FullOperationResponse
        | undefined = undefined;
      const providedCallback = args.options?.onResponse;
      const callback: coreClient.RawResponseCallback = (
        rawResponse: coreClient.FullOperationResponse,
        flatResponse: unknown
      ) => {
        currentRawResponse = rawResponse;
        providedCallback?.(rawResponse, flatResponse);
      };
      const updatedArgs = {
        ...args,
        options: {
          ...args.options,
          onResponse: callback
        }
      };
      const flatResponse = await directSendOperation(updatedArgs, spec);
      return {
        flatResponse,
        rawResponse: {
          statusCode: currentRawResponse!.status,
          body: currentRawResponse!.parsedBody,
          headers: currentRawResponse!.headers.toJSON()
        }
      };
    };

    const lro = new LroImpl(
      sendOperation,
      { resourceGroupName, imageTemplateName, options },
      deleteOperationSpec
    );
    const poller = new LroEngine(lro, {
      resumeFrom: options?.resumeFrom,
      intervalInMs: options?.updateIntervalInMs,
      lroResourceLocationConfig: "azure-async-operation"
    });
    await poller.poll();
    return poller;
  }

  /**
   * Delete a virtual machine image template
   * @param resourceGroupName The name of the resource group.
   * @param imageTemplateName The name of the image Template
   * @param options The options parameters.
   */
  async beginDeleteAndWait(
    resourceGroupName: string,
    imageTemplateName: string,
    options?: VirtualMachineImageTemplatesDeleteOptionalParams
  ): Promise<void> {
    const poller = await this.beginDelete(
      resourceGroupName,
      imageTemplateName,
      options
    );
    return poller.pollUntilDone();
  }

  /**
   * Create artifacts from a existing image template
   * @param resourceGroupName The name of the resource group.
   * @param imageTemplateName The name of the image Template
   * @param options The options parameters.
   */
  async beginRun(
    resourceGroupName: string,
    imageTemplateName: string,
    options?: VirtualMachineImageTemplatesRunOptionalParams
  ): Promise<PollerLike<PollOperationState<void>, void>> {
    const directSendOperation = async (
      args: coreClient.OperationArguments,
      spec: coreClient.OperationSpec
    ): Promise<void> => {
      return this.client.sendOperationRequest(args, spec);
    };
    const sendOperation = async (
      args: coreClient.OperationArguments,
      spec: coreClient.OperationSpec
    ) => {
      let currentRawResponse:
        | coreClient.FullOperationResponse
        | undefined = undefined;
      const providedCallback = args.options?.onResponse;
      const callback: coreClient.RawResponseCallback = (
        rawResponse: coreClient.FullOperationResponse,
        flatResponse: unknown
      ) => {
        currentRawResponse = rawResponse;
        providedCallback?.(rawResponse, flatResponse);
      };
      const updatedArgs = {
        ...args,
        options: {
          ...args.options,
          onResponse: callback
        }
      };
      const flatResponse = await directSendOperation(updatedArgs, spec);
      return {
        flatResponse,
        rawResponse: {
          statusCode: currentRawResponse!.status,
          body: currentRawResponse!.parsedBody,
          headers: currentRawResponse!.headers.toJSON()
        }
      };
    };

    const lro = new LroImpl(
      sendOperation,
      { resourceGroupName, imageTemplateName, options },
      runOperationSpec
    );
    const poller = new LroEngine(lro, {
      resumeFrom: options?.resumeFrom,
      intervalInMs: options?.updateIntervalInMs,
      lroResourceLocationConfig: "azure-async-operation"
    });
    await poller.poll();
    return poller;
  }

  /**
   * Create artifacts from a existing image template
   * @param resourceGroupName The name of the resource group.
   * @param imageTemplateName The name of the image Template
   * @param options The options parameters.
   */
  async beginRunAndWait(
    resourceGroupName: string,
    imageTemplateName: string,
    options?: VirtualMachineImageTemplatesRunOptionalParams
  ): Promise<void> {
    const poller = await this.beginRun(
      resourceGroupName,
      imageTemplateName,
      options
    );
    return poller.pollUntilDone();
  }

  /**
   * Cancel the long running image build based on the image template
   * @param resourceGroupName The name of the resource group.
   * @param imageTemplateName The name of the image Template
   * @param options The options parameters.
   */
  async beginCancel(
    resourceGroupName: string,
    imageTemplateName: string,
    options?: VirtualMachineImageTemplatesCancelOptionalParams
  ): Promise<PollerLike<PollOperationState<void>, void>> {
    const directSendOperation = async (
      args: coreClient.OperationArguments,
      spec: coreClient.OperationSpec
    ): Promise<void> => {
      return this.client.sendOperationRequest(args, spec);
    };
    const sendOperation = async (
      args: coreClient.OperationArguments,
      spec: coreClient.OperationSpec
    ) => {
      let currentRawResponse:
        | coreClient.FullOperationResponse
        | undefined = undefined;
      const providedCallback = args.options?.onResponse;
      const callback: coreClient.RawResponseCallback = (
        rawResponse: coreClient.FullOperationResponse,
        flatResponse: unknown
      ) => {
        currentRawResponse = rawResponse;
        providedCallback?.(rawResponse, flatResponse);
      };
      const updatedArgs = {
        ...args,
        options: {
          ...args.options,
          onResponse: callback
        }
      };
      const flatResponse = await directSendOperation(updatedArgs, spec);
      return {
        flatResponse,
        rawResponse: {
          statusCode: currentRawResponse!.status,
          body: currentRawResponse!.parsedBody,
          headers: currentRawResponse!.headers.toJSON()
        }
      };
    };

    const lro = new LroImpl(
      sendOperation,
      { resourceGroupName, imageTemplateName, options },
      cancelOperationSpec
    );
    const poller = new LroEngine(lro, {
      resumeFrom: options?.resumeFrom,
      intervalInMs: options?.updateIntervalInMs,
      lroResourceLocationConfig: "azure-async-operation"
    });
    await poller.poll();
    return poller;
  }

  /**
   * Cancel the long running image build based on the image template
   * @param resourceGroupName The name of the resource group.
   * @param imageTemplateName The name of the image Template
   * @param options The options parameters.
   */
  async beginCancelAndWait(
    resourceGroupName: string,
    imageTemplateName: string,
    options?: VirtualMachineImageTemplatesCancelOptionalParams
  ): Promise<void> {
    const poller = await this.beginCancel(
      resourceGroupName,
      imageTemplateName,
      options
    );
    return poller.pollUntilDone();
  }

  /**
   * List all run outputs for the specified Image Template resource
   * @param resourceGroupName The name of the resource group.
   * @param imageTemplateName The name of the image Template
   * @param options The options parameters.
   */
  private _listRunOutputs(
    resourceGroupName: string,
    imageTemplateName: string,
    options?: VirtualMachineImageTemplatesListRunOutputsOptionalParams
  ): Promise<VirtualMachineImageTemplatesListRunOutputsResponse> {
    return this.client.sendOperationRequest(
      { resourceGroupName, imageTemplateName, options },
      listRunOutputsOperationSpec
    );
  }

  /**
   * Get the specified run output for the specified image template resource
   * @param resourceGroupName The name of the resource group.
   * @param imageTemplateName The name of the image Template
   * @param runOutputName The name of the run output
   * @param options The options parameters.
   */
  getRunOutput(
    resourceGroupName: string,
    imageTemplateName: string,
    runOutputName: string,
    options?: VirtualMachineImageTemplatesGetRunOutputOptionalParams
  ): Promise<VirtualMachineImageTemplatesGetRunOutputResponse> {
    return this.client.sendOperationRequest(
      { resourceGroupName, imageTemplateName, runOutputName, options },
      getRunOutputOperationSpec
    );
  }

  /**
   * ListNext
   * @param nextLink The nextLink from the previous successful call to the List method.
   * @param options The options parameters.
   */
  private _listNext(
    nextLink: string,
    options?: VirtualMachineImageTemplatesListNextOptionalParams
  ): Promise<VirtualMachineImageTemplatesListNextResponse> {
    return this.client.sendOperationRequest(
      { nextLink, options },
      listNextOperationSpec
    );
  }

  /**
   * ListByResourceGroupNext
   * @param resourceGroupName The name of the resource group.
   * @param nextLink The nextLink from the previous successful call to the ListByResourceGroup method.
   * @param options The options parameters.
   */
  private _listByResourceGroupNext(
    resourceGroupName: string,
    nextLink: string,
    options?: VirtualMachineImageTemplatesListByResourceGroupNextOptionalParams
  ): Promise<VirtualMachineImageTemplatesListByResourceGroupNextResponse> {
    return this.client.sendOperationRequest(
      { resourceGroupName, nextLink, options },
      listByResourceGroupNextOperationSpec
    );
  }

  /**
   * ListRunOutputsNext
   * @param resourceGroupName The name of the resource group.
   * @param imageTemplateName The name of the image Template
   * @param nextLink The nextLink from the previous successful call to the ListRunOutputs method.
   * @param options The options parameters.
   */
  private _listRunOutputsNext(
    resourceGroupName: string,
    imageTemplateName: string,
    nextLink: string,
    options?: VirtualMachineImageTemplatesListRunOutputsNextOptionalParams
  ): Promise<VirtualMachineImageTemplatesListRunOutputsNextResponse> {
    return this.client.sendOperationRequest(
      { resourceGroupName, imageTemplateName, nextLink, options },
      listRunOutputsNextOperationSpec
    );
  }
}
// Operation Specifications
const serializer = coreClient.createSerializer(Mappers, /* isXml */ false);

const listOperationSpec: coreClient.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/providers/Microsoft.VirtualMachineImages/imageTemplates",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.ImageTemplateListResult
    },
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [Parameters.$host, Parameters.subscriptionId],
  headerParameters: [Parameters.accept],
  serializer
};
const listByResourceGroupOperationSpec: coreClient.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.VirtualMachineImages/imageTemplates",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.ImageTemplateListResult
    },
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName
  ],
  headerParameters: [Parameters.accept],
  serializer
};
const createOrUpdateOperationSpec: coreClient.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.VirtualMachineImages/imageTemplates/{imageTemplateName}",
  httpMethod: "PUT",
  responses: {
    200: {
      bodyMapper: Mappers.ImageTemplate
    },
    201: {
      bodyMapper: Mappers.ImageTemplate
    },
    202: {
      bodyMapper: Mappers.ImageTemplate
    },
    204: {
      bodyMapper: Mappers.ImageTemplate
    },
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  requestBody: Parameters.parameters,
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.imageTemplateName
  ],
  headerParameters: [Parameters.accept, Parameters.contentType],
  mediaType: "json",
  serializer
};
const updateOperationSpec: coreClient.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.VirtualMachineImages/imageTemplates/{imageTemplateName}",
  httpMethod: "PATCH",
  responses: {
    200: {
      bodyMapper: Mappers.ImageTemplate
    },
    201: {
      bodyMapper: Mappers.ImageTemplate
    },
    202: {
      bodyMapper: Mappers.ImageTemplate
    },
    204: {
      bodyMapper: Mappers.ImageTemplate
    },
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  requestBody: Parameters.parameters1,
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.imageTemplateName
  ],
  headerParameters: [Parameters.accept, Parameters.contentType],
  mediaType: "json",
  serializer
};
const getOperationSpec: coreClient.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.VirtualMachineImages/imageTemplates/{imageTemplateName}",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.ImageTemplate
    },
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.imageTemplateName
  ],
  headerParameters: [Parameters.accept],
  serializer
};
const deleteOperationSpec: coreClient.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.VirtualMachineImages/imageTemplates/{imageTemplateName}",
  httpMethod: "DELETE",
  responses: {
    200: {},
    201: {},
    202: {},
    204: {},
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.imageTemplateName
  ],
  headerParameters: [Parameters.accept],
  serializer
};
const runOperationSpec: coreClient.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.VirtualMachineImages/imageTemplates/{imageTemplateName}/run",
  httpMethod: "POST",
  responses: {
    200: {},
    201: {},
    202: {},
    204: {},
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.imageTemplateName
  ],
  headerParameters: [Parameters.accept],
  serializer
};
const cancelOperationSpec: coreClient.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.VirtualMachineImages/imageTemplates/{imageTemplateName}/cancel",
  httpMethod: "POST",
  responses: {
    200: {},
    201: {},
    202: {},
    204: {},
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.imageTemplateName
  ],
  headerParameters: [Parameters.accept],
  serializer
};
const listRunOutputsOperationSpec: coreClient.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.VirtualMachineImages/imageTemplates/{imageTemplateName}/runOutputs",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.RunOutputCollection
    },
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.imageTemplateName
  ],
  headerParameters: [Parameters.accept],
  serializer
};
const getRunOutputOperationSpec: coreClient.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.VirtualMachineImages/imageTemplates/{imageTemplateName}/runOutputs/{runOutputName}",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.RunOutput
    },
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.imageTemplateName,
    Parameters.runOutputName
  ],
  headerParameters: [Parameters.accept],
  serializer
};
const listNextOperationSpec: coreClient.OperationSpec = {
  path: "{nextLink}",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.ImageTemplateListResult
    },
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.nextLink
  ],
  headerParameters: [Parameters.accept],
  serializer
};
const listByResourceGroupNextOperationSpec: coreClient.OperationSpec = {
  path: "{nextLink}",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.ImageTemplateListResult
    },
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.nextLink
  ],
  headerParameters: [Parameters.accept],
  serializer
};
const listRunOutputsNextOperationSpec: coreClient.OperationSpec = {
  path: "{nextLink}",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.RunOutputCollection
    },
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.imageTemplateName,
    Parameters.nextLink
  ],
  headerParameters: [Parameters.accept],
  serializer
};
