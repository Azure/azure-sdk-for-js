/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */

import {
  env,
  Recorder,
  isPlaybackMode,
  RecorderStartOptions,
} from "@azure-tools/test-recorder";
import { createTestCredential } from "@azure-tools/test-credential";
import { ImageBuilderClient } from "../src/imageBuilderClient.js";
import { ComputeManagementClient } from "@azure/arm-compute";
import { ManagedServiceIdentityClient } from "@azure/arm-msi";
import { assert } from "vitest";

const replaceableVariables: Record<string, string> = {
  AZURE_CLIENT_ID: "azure_client_id",
  AZURE_CLIENT_SECRET: "azure_client_secret",
  AZURE_TENANT_ID: "88888888-8888-8888-8888-888888888888",
  SUBSCRIPTION_ID: "azure_subscription_id"
};

const recorderOptions: RecorderStartOptions = {
  envSetupForPlayback: replaceableVariables,
  removeCentralSanitizers: [
    "AZSDK3493", // .name in the body is not a secret and is listed below in the beforeEach section
    "AZSDK3430", // .id in the body is not a secret and is listed below in the beforeEach section
  ],
};

export const testPollingOptions = {
  updateIntervalInMs: isPlaybackMode() ? 0 : undefined,
};

describe("ImageBuilder test", () => {
  let recorder: Recorder;
  let subscriptionId: string;
  let client: ImageBuilderClient;
  let compute_client: ComputeManagementClient;
  let msi_client: ManagedServiceIdentityClient;
  let location: string;
  let resourceGroup: string;
  let imageTemplateName: string;
  let diskName: string;
  let snapshotName: string;
  let imagesName: string;
  let msiName: string;

  beforeEach(async (ctx) => {
      recorder = new Recorder(ctx);
      await recorder.start(recorderOptions);
      subscriptionId = env.SUBSCRIPTION_ID || "";
      // This is an example of how the environment variables are used
      const credential = createTestCredential();
      client = new ImageBuilderClient(credential, subscriptionId, recorder.configureClientOptions({}));
      compute_client = new ComputeManagementClient(credential, subscriptionId, recorder.configureClientOptions({}));
      msi_client = new ManagedServiceIdentityClient(credential, subscriptionId, recorder.configureClientOptions({}));
      location = "eastus";
      resourceGroup = "myjstest";
      imageTemplateName = "myimageTemplatexxxz";
      diskName = "mydiskaaa";
      snapshotName = "mysnapshotaaa";
      imagesName = "myimagesaaa";
      msiName = "mymsiaaa";
    });

  afterEach(async () => {
      await recorder.stop();
    });

  it.only("operations list test", async function () {
    const resArray = new Array();
    for await (let item of client.operations.list()) {
      resArray.push(item);
    }
    assert.notEqual(resArray.length, 0);
  });

  it("create parameter for virtualMachineImageTemplates test", async function () {
    //create a userAssignedIdentities
    //create a disk
    //create a snapshots
    //create a images
  });

  it("virtualMachineImageTemplates create test", async function () {

    if (isPlaybackMode()) {
      ctx.skip();
    }
    //before create ,we need add msi owner authority for images in portal
  }).timeout(3600000);;

  it("virtualMachineImageTemplates get test", async function () {
    const res = await client.virtualMachineImageTemplates.get(resourceGroup, imageTemplateName);
    assert.equal(res.name, imageTemplateName);
  });

  it("virtualMachineImageTemplates list test", async function () {
    const resArray = new Array();
    for await (let item of client.virtualMachineImageTemplates.list()) {
      resArray.push(item);
    }
    assert.equal(resArray.length, 1);
  });

  it("virtualMachineImageTemplates delete test", async function () {
    const resArray = new Array();
    for await (let item of client.virtualMachineImageTemplates.list()) {
      resArray.push(item);
    }
    assert.equal(resArray.length, 0);
  });

  it("delete parameter for virtualMachineImageTemplates test", async function () {
  });
});
