/*
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is
 * regenerated.
 */

import * as coreHttp from "@azure/core-http";
import * as Models from "../models";
import * as Mappers from "../models/policySetDefinitionsMappers";
import * as Parameters from "../models/parameters";
import { PolicyClientContext } from "../policyClientContext";

/** Class representing a PolicySetDefinitions. */
export class PolicySetDefinitions {
  private readonly client: PolicyClientContext;

  /**
   * Create a PolicySetDefinitions.
   * @param {PolicyClientContext} client Reference to the service client.
   */
  constructor(client: PolicyClientContext) {
    this.client = client;
  }

  /**
   * This operation creates or updates a policy set definition in the given subscription with the
   * given name.
   * @summary Creates or updates a policy set definition.
   * @param policySetDefinitionName The name of the policy set definition to create.
   * @param parameters The policy set definition properties.
   * @param [options] The optional parameters
   * @returns Promise<Models.PolicySetDefinitionsCreateOrUpdateResponse>
   */
  createOrUpdate(policySetDefinitionName: string, parameters: Models.PolicySetDefinition, options?: coreHttp.RequestOptionsBase): Promise<Models.PolicySetDefinitionsCreateOrUpdateResponse>;
  /**
   * @param policySetDefinitionName The name of the policy set definition to create.
   * @param parameters The policy set definition properties.
   * @param callback The callback
   */
  createOrUpdate(policySetDefinitionName: string, parameters: Models.PolicySetDefinition, callback: coreHttp.ServiceCallback<Models.PolicySetDefinition>): void;
  /**
   * @param policySetDefinitionName The name of the policy set definition to create.
   * @param parameters The policy set definition properties.
   * @param options The optional parameters
   * @param callback The callback
   */
  createOrUpdate(policySetDefinitionName: string, parameters: Models.PolicySetDefinition, options: coreHttp.RequestOptionsBase, callback: coreHttp.ServiceCallback<Models.PolicySetDefinition>): void;
  createOrUpdate(policySetDefinitionName: string, parameters: Models.PolicySetDefinition, options?: coreHttp.RequestOptionsBase | coreHttp.ServiceCallback<Models.PolicySetDefinition>, callback?: coreHttp.ServiceCallback<Models.PolicySetDefinition>): Promise<Models.PolicySetDefinitionsCreateOrUpdateResponse> {
    return this.client.sendOperationRequest(
      {
        policySetDefinitionName,
        parameters,
        options
      },
      createOrUpdateOperationSpec,
      callback) as Promise<Models.PolicySetDefinitionsCreateOrUpdateResponse>;
  }

  /**
   * This operation deletes the policy set definition in the given subscription with the given name.
   * @summary Deletes a policy set definition.
   * @param policySetDefinitionName The name of the policy set definition to delete.
   * @param [options] The optional parameters
   * @returns Promise<coreHttp.RestResponse>
   */
  deleteMethod(policySetDefinitionName: string, options?: coreHttp.RequestOptionsBase): Promise<coreHttp.RestResponse>;
  /**
   * @param policySetDefinitionName The name of the policy set definition to delete.
   * @param callback The callback
   */
  deleteMethod(policySetDefinitionName: string, callback: coreHttp.ServiceCallback<void>): void;
  /**
   * @param policySetDefinitionName The name of the policy set definition to delete.
   * @param options The optional parameters
   * @param callback The callback
   */
  deleteMethod(policySetDefinitionName: string, options: coreHttp.RequestOptionsBase, callback: coreHttp.ServiceCallback<void>): void;
  deleteMethod(policySetDefinitionName: string, options?: coreHttp.RequestOptionsBase | coreHttp.ServiceCallback<void>, callback?: coreHttp.ServiceCallback<void>): Promise<coreHttp.RestResponse> {
    return this.client.sendOperationRequest(
      {
        policySetDefinitionName,
        options
      },
      deleteMethodOperationSpec,
      callback);
  }

  /**
   * This operation retrieves the policy set definition in the given subscription with the given
   * name.
   * @summary Retrieves a policy set definition.
   * @param policySetDefinitionName The name of the policy set definition to get.
   * @param [options] The optional parameters
   * @returns Promise<Models.PolicySetDefinitionsGetResponse>
   */
  get(policySetDefinitionName: string, options?: coreHttp.RequestOptionsBase): Promise<Models.PolicySetDefinitionsGetResponse>;
  /**
   * @param policySetDefinitionName The name of the policy set definition to get.
   * @param callback The callback
   */
  get(policySetDefinitionName: string, callback: coreHttp.ServiceCallback<Models.PolicySetDefinition>): void;
  /**
   * @param policySetDefinitionName The name of the policy set definition to get.
   * @param options The optional parameters
   * @param callback The callback
   */
  get(policySetDefinitionName: string, options: coreHttp.RequestOptionsBase, callback: coreHttp.ServiceCallback<Models.PolicySetDefinition>): void;
  get(policySetDefinitionName: string, options?: coreHttp.RequestOptionsBase | coreHttp.ServiceCallback<Models.PolicySetDefinition>, callback?: coreHttp.ServiceCallback<Models.PolicySetDefinition>): Promise<Models.PolicySetDefinitionsGetResponse> {
    return this.client.sendOperationRequest(
      {
        policySetDefinitionName,
        options
      },
      getOperationSpec,
      callback) as Promise<Models.PolicySetDefinitionsGetResponse>;
  }

  /**
   * This operation retrieves the built-in policy set definition with the given name.
   * @summary Retrieves a built in policy set definition.
   * @param policySetDefinitionName The name of the policy set definition to get.
   * @param [options] The optional parameters
   * @returns Promise<Models.PolicySetDefinitionsGetBuiltInResponse>
   */
  getBuiltIn(policySetDefinitionName: string, options?: coreHttp.RequestOptionsBase): Promise<Models.PolicySetDefinitionsGetBuiltInResponse>;
  /**
   * @param policySetDefinitionName The name of the policy set definition to get.
   * @param callback The callback
   */
  getBuiltIn(policySetDefinitionName: string, callback: coreHttp.ServiceCallback<Models.PolicySetDefinition>): void;
  /**
   * @param policySetDefinitionName The name of the policy set definition to get.
   * @param options The optional parameters
   * @param callback The callback
   */
  getBuiltIn(policySetDefinitionName: string, options: coreHttp.RequestOptionsBase, callback: coreHttp.ServiceCallback<Models.PolicySetDefinition>): void;
  getBuiltIn(policySetDefinitionName: string, options?: coreHttp.RequestOptionsBase | coreHttp.ServiceCallback<Models.PolicySetDefinition>, callback?: coreHttp.ServiceCallback<Models.PolicySetDefinition>): Promise<Models.PolicySetDefinitionsGetBuiltInResponse> {
    return this.client.sendOperationRequest(
      {
        policySetDefinitionName,
        options
      },
      getBuiltInOperationSpec,
      callback) as Promise<Models.PolicySetDefinitionsGetBuiltInResponse>;
  }

  /**
   * This operation retrieves a list of all the policy set definitions in the given subscription.
   * @summary Retrieves the policy set definitions for a subscription.
   * @param [options] The optional parameters
   * @returns Promise<Models.PolicySetDefinitionsListResponse>
   */
  list(options?: coreHttp.RequestOptionsBase): Promise<Models.PolicySetDefinitionsListResponse>;
  /**
   * @param callback The callback
   */
  list(callback: coreHttp.ServiceCallback<Models.PolicySetDefinitionListResult>): void;
  /**
   * @param options The optional parameters
   * @param callback The callback
   */
  list(options: coreHttp.RequestOptionsBase, callback: coreHttp.ServiceCallback<Models.PolicySetDefinitionListResult>): void;
  list(options?: coreHttp.RequestOptionsBase | coreHttp.ServiceCallback<Models.PolicySetDefinitionListResult>, callback?: coreHttp.ServiceCallback<Models.PolicySetDefinitionListResult>): Promise<Models.PolicySetDefinitionsListResponse> {
    return this.client.sendOperationRequest(
      {
        options
      },
      listOperationSpec,
      callback) as Promise<Models.PolicySetDefinitionsListResponse>;
  }

  /**
   * This operation retrieves a list of all the built-in policy set definitions.
   * @summary Retrieves built-in policy set definitions.
   * @param [options] The optional parameters
   * @returns Promise<Models.PolicySetDefinitionsListBuiltInResponse>
   */
  listBuiltIn(options?: coreHttp.RequestOptionsBase): Promise<Models.PolicySetDefinitionsListBuiltInResponse>;
  /**
   * @param callback The callback
   */
  listBuiltIn(callback: coreHttp.ServiceCallback<Models.PolicySetDefinitionListResult>): void;
  /**
   * @param options The optional parameters
   * @param callback The callback
   */
  listBuiltIn(options: coreHttp.RequestOptionsBase, callback: coreHttp.ServiceCallback<Models.PolicySetDefinitionListResult>): void;
  listBuiltIn(options?: coreHttp.RequestOptionsBase | coreHttp.ServiceCallback<Models.PolicySetDefinitionListResult>, callback?: coreHttp.ServiceCallback<Models.PolicySetDefinitionListResult>): Promise<Models.PolicySetDefinitionsListBuiltInResponse> {
    return this.client.sendOperationRequest(
      {
        options
      },
      listBuiltInOperationSpec,
      callback) as Promise<Models.PolicySetDefinitionsListBuiltInResponse>;
  }

  /**
   * This operation creates or updates a policy set definition in the given management group with the
   * given name.
   * @summary Creates or updates a policy set definition.
   * @param policySetDefinitionName The name of the policy set definition to create.
   * @param parameters The policy set definition properties.
   * @param managementGroupId The ID of the management group.
   * @param [options] The optional parameters
   * @returns Promise<Models.PolicySetDefinitionsCreateOrUpdateAtManagementGroupResponse>
   */
  createOrUpdateAtManagementGroup(policySetDefinitionName: string, parameters: Models.PolicySetDefinition, managementGroupId: string, options?: coreHttp.RequestOptionsBase): Promise<Models.PolicySetDefinitionsCreateOrUpdateAtManagementGroupResponse>;
  /**
   * @param policySetDefinitionName The name of the policy set definition to create.
   * @param parameters The policy set definition properties.
   * @param managementGroupId The ID of the management group.
   * @param callback The callback
   */
  createOrUpdateAtManagementGroup(policySetDefinitionName: string, parameters: Models.PolicySetDefinition, managementGroupId: string, callback: coreHttp.ServiceCallback<Models.PolicySetDefinition>): void;
  /**
   * @param policySetDefinitionName The name of the policy set definition to create.
   * @param parameters The policy set definition properties.
   * @param managementGroupId The ID of the management group.
   * @param options The optional parameters
   * @param callback The callback
   */
  createOrUpdateAtManagementGroup(policySetDefinitionName: string, parameters: Models.PolicySetDefinition, managementGroupId: string, options: coreHttp.RequestOptionsBase, callback: coreHttp.ServiceCallback<Models.PolicySetDefinition>): void;
  createOrUpdateAtManagementGroup(policySetDefinitionName: string, parameters: Models.PolicySetDefinition, managementGroupId: string, options?: coreHttp.RequestOptionsBase | coreHttp.ServiceCallback<Models.PolicySetDefinition>, callback?: coreHttp.ServiceCallback<Models.PolicySetDefinition>): Promise<Models.PolicySetDefinitionsCreateOrUpdateAtManagementGroupResponse> {
    return this.client.sendOperationRequest(
      {
        policySetDefinitionName,
        parameters,
        managementGroupId,
        options
      },
      createOrUpdateAtManagementGroupOperationSpec,
      callback) as Promise<Models.PolicySetDefinitionsCreateOrUpdateAtManagementGroupResponse>;
  }

  /**
   * This operation deletes the policy set definition in the given management group with the given
   * name.
   * @summary Deletes a policy set definition.
   * @param policySetDefinitionName The name of the policy set definition to delete.
   * @param managementGroupId The ID of the management group.
   * @param [options] The optional parameters
   * @returns Promise<coreHttp.RestResponse>
   */
  deleteAtManagementGroup(policySetDefinitionName: string, managementGroupId: string, options?: coreHttp.RequestOptionsBase): Promise<coreHttp.RestResponse>;
  /**
   * @param policySetDefinitionName The name of the policy set definition to delete.
   * @param managementGroupId The ID of the management group.
   * @param callback The callback
   */
  deleteAtManagementGroup(policySetDefinitionName: string, managementGroupId: string, callback: coreHttp.ServiceCallback<void>): void;
  /**
   * @param policySetDefinitionName The name of the policy set definition to delete.
   * @param managementGroupId The ID of the management group.
   * @param options The optional parameters
   * @param callback The callback
   */
  deleteAtManagementGroup(policySetDefinitionName: string, managementGroupId: string, options: coreHttp.RequestOptionsBase, callback: coreHttp.ServiceCallback<void>): void;
  deleteAtManagementGroup(policySetDefinitionName: string, managementGroupId: string, options?: coreHttp.RequestOptionsBase | coreHttp.ServiceCallback<void>, callback?: coreHttp.ServiceCallback<void>): Promise<coreHttp.RestResponse> {
    return this.client.sendOperationRequest(
      {
        policySetDefinitionName,
        managementGroupId,
        options
      },
      deleteAtManagementGroupOperationSpec,
      callback);
  }

  /**
   * This operation retrieves the policy set definition in the given management group with the given
   * name.
   * @summary Retrieves a policy set definition.
   * @param policySetDefinitionName The name of the policy set definition to get.
   * @param managementGroupId The ID of the management group.
   * @param [options] The optional parameters
   * @returns Promise<Models.PolicySetDefinitionsGetAtManagementGroupResponse>
   */
  getAtManagementGroup(policySetDefinitionName: string, managementGroupId: string, options?: coreHttp.RequestOptionsBase): Promise<Models.PolicySetDefinitionsGetAtManagementGroupResponse>;
  /**
   * @param policySetDefinitionName The name of the policy set definition to get.
   * @param managementGroupId The ID of the management group.
   * @param callback The callback
   */
  getAtManagementGroup(policySetDefinitionName: string, managementGroupId: string, callback: coreHttp.ServiceCallback<Models.PolicySetDefinition>): void;
  /**
   * @param policySetDefinitionName The name of the policy set definition to get.
   * @param managementGroupId The ID of the management group.
   * @param options The optional parameters
   * @param callback The callback
   */
  getAtManagementGroup(policySetDefinitionName: string, managementGroupId: string, options: coreHttp.RequestOptionsBase, callback: coreHttp.ServiceCallback<Models.PolicySetDefinition>): void;
  getAtManagementGroup(policySetDefinitionName: string, managementGroupId: string, options?: coreHttp.RequestOptionsBase | coreHttp.ServiceCallback<Models.PolicySetDefinition>, callback?: coreHttp.ServiceCallback<Models.PolicySetDefinition>): Promise<Models.PolicySetDefinitionsGetAtManagementGroupResponse> {
    return this.client.sendOperationRequest(
      {
        policySetDefinitionName,
        managementGroupId,
        options
      },
      getAtManagementGroupOperationSpec,
      callback) as Promise<Models.PolicySetDefinitionsGetAtManagementGroupResponse>;
  }

  /**
   * This operation retrieves a list of all the a policy set definition in the given management
   * group.
   * @summary Retrieves all policy set definitions in management group.
   * @param managementGroupId The ID of the management group.
   * @param [options] The optional parameters
   * @returns Promise<Models.PolicySetDefinitionsListByManagementGroupResponse>
   */
  listByManagementGroup(managementGroupId: string, options?: coreHttp.RequestOptionsBase): Promise<Models.PolicySetDefinitionsListByManagementGroupResponse>;
  /**
   * @param managementGroupId The ID of the management group.
   * @param callback The callback
   */
  listByManagementGroup(managementGroupId: string, callback: coreHttp.ServiceCallback<Models.PolicySetDefinitionListResult>): void;
  /**
   * @param managementGroupId The ID of the management group.
   * @param options The optional parameters
   * @param callback The callback
   */
  listByManagementGroup(managementGroupId: string, options: coreHttp.RequestOptionsBase, callback: coreHttp.ServiceCallback<Models.PolicySetDefinitionListResult>): void;
  listByManagementGroup(managementGroupId: string, options?: coreHttp.RequestOptionsBase | coreHttp.ServiceCallback<Models.PolicySetDefinitionListResult>, callback?: coreHttp.ServiceCallback<Models.PolicySetDefinitionListResult>): Promise<Models.PolicySetDefinitionsListByManagementGroupResponse> {
    return this.client.sendOperationRequest(
      {
        managementGroupId,
        options
      },
      listByManagementGroupOperationSpec,
      callback) as Promise<Models.PolicySetDefinitionsListByManagementGroupResponse>;
  }

  /**
   * This operation retrieves a list of all the policy set definitions in the given subscription.
   * @summary Retrieves the policy set definitions for a subscription.
   * @param nextPageLink The NextLink from the previous successful call to List operation.
   * @param [options] The optional parameters
   * @returns Promise<Models.PolicySetDefinitionsListNextResponse>
   */
  listNext(nextPageLink: string, options?: coreHttp.RequestOptionsBase): Promise<Models.PolicySetDefinitionsListNextResponse>;
  /**
   * @param nextPageLink The NextLink from the previous successful call to List operation.
   * @param callback The callback
   */
  listNext(nextPageLink: string, callback: coreHttp.ServiceCallback<Models.PolicySetDefinitionListResult>): void;
  /**
   * @param nextPageLink The NextLink from the previous successful call to List operation.
   * @param options The optional parameters
   * @param callback The callback
   */
  listNext(nextPageLink: string, options: coreHttp.RequestOptionsBase, callback: coreHttp.ServiceCallback<Models.PolicySetDefinitionListResult>): void;
  listNext(nextPageLink: string, options?: coreHttp.RequestOptionsBase | coreHttp.ServiceCallback<Models.PolicySetDefinitionListResult>, callback?: coreHttp.ServiceCallback<Models.PolicySetDefinitionListResult>): Promise<Models.PolicySetDefinitionsListNextResponse> {
    return this.client.sendOperationRequest(
      {
        nextPageLink,
        options
      },
      listNextOperationSpec,
      callback) as Promise<Models.PolicySetDefinitionsListNextResponse>;
  }

  /**
   * This operation retrieves a list of all the built-in policy set definitions.
   * @summary Retrieves built-in policy set definitions.
   * @param nextPageLink The NextLink from the previous successful call to List operation.
   * @param [options] The optional parameters
   * @returns Promise<Models.PolicySetDefinitionsListBuiltInNextResponse>
   */
  listBuiltInNext(nextPageLink: string, options?: coreHttp.RequestOptionsBase): Promise<Models.PolicySetDefinitionsListBuiltInNextResponse>;
  /**
   * @param nextPageLink The NextLink from the previous successful call to List operation.
   * @param callback The callback
   */
  listBuiltInNext(nextPageLink: string, callback: coreHttp.ServiceCallback<Models.PolicySetDefinitionListResult>): void;
  /**
   * @param nextPageLink The NextLink from the previous successful call to List operation.
   * @param options The optional parameters
   * @param callback The callback
   */
  listBuiltInNext(nextPageLink: string, options: coreHttp.RequestOptionsBase, callback: coreHttp.ServiceCallback<Models.PolicySetDefinitionListResult>): void;
  listBuiltInNext(nextPageLink: string, options?: coreHttp.RequestOptionsBase | coreHttp.ServiceCallback<Models.PolicySetDefinitionListResult>, callback?: coreHttp.ServiceCallback<Models.PolicySetDefinitionListResult>): Promise<Models.PolicySetDefinitionsListBuiltInNextResponse> {
    return this.client.sendOperationRequest(
      {
        nextPageLink,
        options
      },
      listBuiltInNextOperationSpec,
      callback) as Promise<Models.PolicySetDefinitionsListBuiltInNextResponse>;
  }

  /**
   * This operation retrieves a list of all the a policy set definition in the given management
   * group.
   * @summary Retrieves all policy set definitions in management group.
   * @param nextPageLink The NextLink from the previous successful call to List operation.
   * @param [options] The optional parameters
   * @returns Promise<Models.PolicySetDefinitionsListByManagementGroupNextResponse>
   */
  listByManagementGroupNext(nextPageLink: string, options?: coreHttp.RequestOptionsBase): Promise<Models.PolicySetDefinitionsListByManagementGroupNextResponse>;
  /**
   * @param nextPageLink The NextLink from the previous successful call to List operation.
   * @param callback The callback
   */
  listByManagementGroupNext(nextPageLink: string, callback: coreHttp.ServiceCallback<Models.PolicySetDefinitionListResult>): void;
  /**
   * @param nextPageLink The NextLink from the previous successful call to List operation.
   * @param options The optional parameters
   * @param callback The callback
   */
  listByManagementGroupNext(nextPageLink: string, options: coreHttp.RequestOptionsBase, callback: coreHttp.ServiceCallback<Models.PolicySetDefinitionListResult>): void;
  listByManagementGroupNext(nextPageLink: string, options?: coreHttp.RequestOptionsBase | coreHttp.ServiceCallback<Models.PolicySetDefinitionListResult>, callback?: coreHttp.ServiceCallback<Models.PolicySetDefinitionListResult>): Promise<Models.PolicySetDefinitionsListByManagementGroupNextResponse> {
    return this.client.sendOperationRequest(
      {
        nextPageLink,
        options
      },
      listByManagementGroupNextOperationSpec,
      callback) as Promise<Models.PolicySetDefinitionsListByManagementGroupNextResponse>;
  }
}

// Operation Specifications
const serializer = new coreHttp.Serializer(Mappers);
const createOrUpdateOperationSpec: coreHttp.OperationSpec = {
  httpMethod: "PUT",
  path: "subscriptions/{subscriptionId}/providers/Microsoft.Authorization/policySetDefinitions/{policySetDefinitionName}",
  urlParameters: [
    Parameters.policySetDefinitionName,
    Parameters.subscriptionId
  ],
  queryParameters: [
    Parameters.apiVersion
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  requestBody: {
    parameterPath: "parameters",
    mapper: {
      ...Mappers.PolicySetDefinition,
      required: true
    }
  },
  responses: {
    200: {
      bodyMapper: Mappers.PolicySetDefinition
    },
    201: {
      bodyMapper: Mappers.PolicySetDefinition
    },
    default: {
      bodyMapper: Mappers.ErrorResponse
    }
  },
  serializer
};

const deleteMethodOperationSpec: coreHttp.OperationSpec = {
  httpMethod: "DELETE",
  path: "subscriptions/{subscriptionId}/providers/Microsoft.Authorization/policySetDefinitions/{policySetDefinitionName}",
  urlParameters: [
    Parameters.policySetDefinitionName,
    Parameters.subscriptionId
  ],
  queryParameters: [
    Parameters.apiVersion
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    200: {},
    204: {},
    default: {
      bodyMapper: Mappers.ErrorResponse
    }
  },
  serializer
};

const getOperationSpec: coreHttp.OperationSpec = {
  httpMethod: "GET",
  path: "subscriptions/{subscriptionId}/providers/Microsoft.Authorization/policySetDefinitions/{policySetDefinitionName}",
  urlParameters: [
    Parameters.policySetDefinitionName,
    Parameters.subscriptionId
  ],
  queryParameters: [
    Parameters.apiVersion
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    200: {
      bodyMapper: Mappers.PolicySetDefinition
    },
    default: {
      bodyMapper: Mappers.ErrorResponse
    }
  },
  serializer
};

const getBuiltInOperationSpec: coreHttp.OperationSpec = {
  httpMethod: "GET",
  path: "providers/Microsoft.Authorization/policySetDefinitions/{policySetDefinitionName}",
  urlParameters: [
    Parameters.policySetDefinitionName
  ],
  queryParameters: [
    Parameters.apiVersion
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    200: {
      bodyMapper: Mappers.PolicySetDefinition
    },
    default: {
      bodyMapper: Mappers.ErrorResponse
    }
  },
  serializer
};

const listOperationSpec: coreHttp.OperationSpec = {
  httpMethod: "GET",
  path: "subscriptions/{subscriptionId}/providers/Microsoft.Authorization/policySetDefinitions",
  urlParameters: [
    Parameters.subscriptionId
  ],
  queryParameters: [
    Parameters.apiVersion
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    200: {
      bodyMapper: Mappers.PolicySetDefinitionListResult
    },
    default: {
      bodyMapper: Mappers.ErrorResponse
    }
  },
  serializer
};

const listBuiltInOperationSpec: coreHttp.OperationSpec = {
  httpMethod: "GET",
  path: "providers/Microsoft.Authorization/policySetDefinitions",
  queryParameters: [
    Parameters.apiVersion
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    200: {
      bodyMapper: Mappers.PolicySetDefinitionListResult
    },
    default: {
      bodyMapper: Mappers.ErrorResponse
    }
  },
  serializer
};

const createOrUpdateAtManagementGroupOperationSpec: coreHttp.OperationSpec = {
  httpMethod: "PUT",
  path: "providers/Microsoft.Management/managementgroups/{managementGroupId}/providers/Microsoft.Authorization/policySetDefinitions/{policySetDefinitionName}",
  urlParameters: [
    Parameters.policySetDefinitionName,
    Parameters.managementGroupId
  ],
  queryParameters: [
    Parameters.apiVersion
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  requestBody: {
    parameterPath: "parameters",
    mapper: {
      ...Mappers.PolicySetDefinition,
      required: true
    }
  },
  responses: {
    200: {
      bodyMapper: Mappers.PolicySetDefinition
    },
    201: {
      bodyMapper: Mappers.PolicySetDefinition
    },
    default: {
      bodyMapper: Mappers.ErrorResponse
    }
  },
  serializer
};

const deleteAtManagementGroupOperationSpec: coreHttp.OperationSpec = {
  httpMethod: "DELETE",
  path: "providers/Microsoft.Management/managementgroups/{managementGroupId}/providers/Microsoft.Authorization/policySetDefinitions/{policySetDefinitionName}",
  urlParameters: [
    Parameters.policySetDefinitionName,
    Parameters.managementGroupId
  ],
  queryParameters: [
    Parameters.apiVersion
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    200: {},
    204: {},
    default: {
      bodyMapper: Mappers.ErrorResponse
    }
  },
  serializer
};

const getAtManagementGroupOperationSpec: coreHttp.OperationSpec = {
  httpMethod: "GET",
  path: "providers/Microsoft.Management/managementgroups/{managementGroupId}/providers/Microsoft.Authorization/policySetDefinitions/{policySetDefinitionName}",
  urlParameters: [
    Parameters.policySetDefinitionName,
    Parameters.managementGroupId
  ],
  queryParameters: [
    Parameters.apiVersion
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    200: {
      bodyMapper: Mappers.PolicySetDefinition
    },
    default: {
      bodyMapper: Mappers.ErrorResponse
    }
  },
  serializer
};

const listByManagementGroupOperationSpec: coreHttp.OperationSpec = {
  httpMethod: "GET",
  path: "providers/Microsoft.Management/managementgroups/{managementGroupId}/providers/Microsoft.Authorization/policySetDefinitions",
  urlParameters: [
    Parameters.managementGroupId
  ],
  queryParameters: [
    Parameters.apiVersion
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    200: {
      bodyMapper: Mappers.PolicySetDefinitionListResult
    },
    default: {
      bodyMapper: Mappers.ErrorResponse
    }
  },
  serializer
};

const listNextOperationSpec: coreHttp.OperationSpec = {
  httpMethod: "GET",
  baseUrl: "https://management.azure.com",
  path: "{nextLink}",
  urlParameters: [
    Parameters.nextPageLink
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    200: {
      bodyMapper: Mappers.PolicySetDefinitionListResult
    },
    default: {
      bodyMapper: Mappers.ErrorResponse
    }
  },
  serializer
};

const listBuiltInNextOperationSpec: coreHttp.OperationSpec = {
  httpMethod: "GET",
  baseUrl: "https://management.azure.com",
  path: "{nextLink}",
  urlParameters: [
    Parameters.nextPageLink
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    200: {
      bodyMapper: Mappers.PolicySetDefinitionListResult
    },
    default: {
      bodyMapper: Mappers.ErrorResponse
    }
  },
  serializer
};

const listByManagementGroupNextOperationSpec: coreHttp.OperationSpec = {
  httpMethod: "GET",
  baseUrl: "https://management.azure.com",
  path: "{nextLink}",
  urlParameters: [
    Parameters.nextPageLink
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    200: {
      bodyMapper: Mappers.PolicySetDefinitionListResult
    },
    default: {
      bodyMapper: Mappers.ErrorResponse
    }
  },
  serializer
};
