/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */

import { PagedAsyncIterableIterator, PageSettings } from "@azure/core-paging";
import { setContinuationToken } from "../pagingHelper";
import { Variables } from "../operationsInterfaces";
import * as coreClient from "@azure/core-client";
import * as Mappers from "../models/mappers";
import * as Parameters from "../models/parameters";
import { PolicyClient } from "../policyClient";
import {
  Variable,
  VariablesListNextOptionalParams,
  VariablesListOptionalParams,
  VariablesListResponse,
  VariablesListForManagementGroupNextOptionalParams,
  VariablesListForManagementGroupOptionalParams,
  VariablesListForManagementGroupResponse,
  VariablesDeleteOptionalParams,
  VariablesCreateOrUpdateOptionalParams,
  VariablesCreateOrUpdateResponse,
  VariablesGetOptionalParams,
  VariablesGetResponse,
  VariablesDeleteAtManagementGroupOptionalParams,
  VariablesCreateOrUpdateAtManagementGroupOptionalParams,
  VariablesCreateOrUpdateAtManagementGroupResponse,
  VariablesGetAtManagementGroupOptionalParams,
  VariablesGetAtManagementGroupResponse,
  VariablesListNextResponse,
  VariablesListForManagementGroupNextResponse,
} from "../models";

/// <reference lib="esnext.asynciterable" />
/** Class containing Variables operations. */
export class VariablesImpl implements Variables {
  private readonly client: PolicyClient;

  /**
   * Initialize a new instance of the class Variables class.
   * @param client Reference to the service client
   */
  constructor(client: PolicyClient) {
    this.client = client;
  }

  /**
   * This operation retrieves the list of all variables associated with the given subscription.
   * @param options The options parameters.
   */
  public list(
    options?: VariablesListOptionalParams,
  ): PagedAsyncIterableIterator<Variable> {
    const iter = this.listPagingAll(options);
    return {
      next() {
        return iter.next();
      },
      [Symbol.asyncIterator]() {
        return this;
      },
      byPage: (settings?: PageSettings) => {
        if (settings?.maxPageSize) {
          throw new Error("maxPageSize is not supported by this operation.");
        }
        return this.listPagingPage(options, settings);
      },
    };
  }

  private async *listPagingPage(
    options?: VariablesListOptionalParams,
    settings?: PageSettings,
  ): AsyncIterableIterator<Variable[]> {
    let result: VariablesListResponse;
    let continuationToken = settings?.continuationToken;
    if (!continuationToken) {
      result = await this._list(options);
      let page = result.value || [];
      continuationToken = result.nextLink;
      setContinuationToken(page, continuationToken);
      yield page;
    }
    while (continuationToken) {
      result = await this._listNext(continuationToken, options);
      continuationToken = result.nextLink;
      let page = result.value || [];
      setContinuationToken(page, continuationToken);
      yield page;
    }
  }

  private async *listPagingAll(
    options?: VariablesListOptionalParams,
  ): AsyncIterableIterator<Variable> {
    for await (const page of this.listPagingPage(options)) {
      yield* page;
    }
  }

  /**
   * This operation retrieves the list of all variables applicable to the management group.
   * @param managementGroupId The ID of the management group.
   * @param options The options parameters.
   */
  public listForManagementGroup(
    managementGroupId: string,
    options?: VariablesListForManagementGroupOptionalParams,
  ): PagedAsyncIterableIterator<Variable> {
    const iter = this.listForManagementGroupPagingAll(
      managementGroupId,
      options,
    );
    return {
      next() {
        return iter.next();
      },
      [Symbol.asyncIterator]() {
        return this;
      },
      byPage: (settings?: PageSettings) => {
        if (settings?.maxPageSize) {
          throw new Error("maxPageSize is not supported by this operation.");
        }
        return this.listForManagementGroupPagingPage(
          managementGroupId,
          options,
          settings,
        );
      },
    };
  }

  private async *listForManagementGroupPagingPage(
    managementGroupId: string,
    options?: VariablesListForManagementGroupOptionalParams,
    settings?: PageSettings,
  ): AsyncIterableIterator<Variable[]> {
    let result: VariablesListForManagementGroupResponse;
    let continuationToken = settings?.continuationToken;
    if (!continuationToken) {
      result = await this._listForManagementGroup(managementGroupId, options);
      let page = result.value || [];
      continuationToken = result.nextLink;
      setContinuationToken(page, continuationToken);
      yield page;
    }
    while (continuationToken) {
      result = await this._listForManagementGroupNext(
        managementGroupId,
        continuationToken,
        options,
      );
      continuationToken = result.nextLink;
      let page = result.value || [];
      setContinuationToken(page, continuationToken);
      yield page;
    }
  }

  private async *listForManagementGroupPagingAll(
    managementGroupId: string,
    options?: VariablesListForManagementGroupOptionalParams,
  ): AsyncIterableIterator<Variable> {
    for await (const page of this.listForManagementGroupPagingPage(
      managementGroupId,
      options,
    )) {
      yield* page;
    }
  }

  /**
   * This operation deletes a variable, given its name and the subscription it was created in. The scope
   * of a variable is the part of its ID preceding
   * '/providers/Microsoft.Authorization/variables/{variableName}'.
   * @param variableName The name of the variable to operate on.
   * @param options The options parameters.
   */
  delete(
    variableName: string,
    options?: VariablesDeleteOptionalParams,
  ): Promise<void> {
    return this.client.sendOperationRequest(
      { variableName, options },
      deleteOperationSpec,
    );
  }

  /**
   *  This operation creates or updates a variable with the given subscription and name. Policy variables
   * can only be used by a policy definition at the scope they are created or below.
   * @param variableName The name of the variable to operate on.
   * @param parameters Parameters for the variable.
   * @param options The options parameters.
   */
  createOrUpdate(
    variableName: string,
    parameters: Variable,
    options?: VariablesCreateOrUpdateOptionalParams,
  ): Promise<VariablesCreateOrUpdateResponse> {
    return this.client.sendOperationRequest(
      { variableName, parameters, options },
      createOrUpdateOperationSpec,
    );
  }

  /**
   * This operation retrieves a single variable, given its name and the subscription it was created at.
   * @param variableName The name of the variable to operate on.
   * @param options The options parameters.
   */
  get(
    variableName: string,
    options?: VariablesGetOptionalParams,
  ): Promise<VariablesGetResponse> {
    return this.client.sendOperationRequest(
      { variableName, options },
      getOperationSpec,
    );
  }

  /**
   * This operation deletes a variable, given its name and the management group it was created in. The
   * scope of a variable is the part of its ID preceding
   * '/providers/Microsoft.Authorization/variables/{variableName}'.
   * @param managementGroupId The ID of the management group.
   * @param variableName The name of the variable to operate on.
   * @param options The options parameters.
   */
  deleteAtManagementGroup(
    managementGroupId: string,
    variableName: string,
    options?: VariablesDeleteAtManagementGroupOptionalParams,
  ): Promise<void> {
    return this.client.sendOperationRequest(
      { managementGroupId, variableName, options },
      deleteAtManagementGroupOperationSpec,
    );
  }

  /**
   *  This operation creates or updates a variable with the given  management group and name. Policy
   * variables can only be used by a policy definition at the scope they are created or below.
   * @param managementGroupId The ID of the management group.
   * @param variableName The name of the variable to operate on.
   * @param parameters Parameters for the variable.
   * @param options The options parameters.
   */
  createOrUpdateAtManagementGroup(
    managementGroupId: string,
    variableName: string,
    parameters: Variable,
    options?: VariablesCreateOrUpdateAtManagementGroupOptionalParams,
  ): Promise<VariablesCreateOrUpdateAtManagementGroupResponse> {
    return this.client.sendOperationRequest(
      { managementGroupId, variableName, parameters, options },
      createOrUpdateAtManagementGroupOperationSpec,
    );
  }

  /**
   * This operation retrieves a single variable, given its name and the  management group it was created
   * at.
   * @param managementGroupId The ID of the management group.
   * @param variableName The name of the variable to operate on.
   * @param options The options parameters.
   */
  getAtManagementGroup(
    managementGroupId: string,
    variableName: string,
    options?: VariablesGetAtManagementGroupOptionalParams,
  ): Promise<VariablesGetAtManagementGroupResponse> {
    return this.client.sendOperationRequest(
      { managementGroupId, variableName, options },
      getAtManagementGroupOperationSpec,
    );
  }

  /**
   * This operation retrieves the list of all variables associated with the given subscription.
   * @param options The options parameters.
   */
  private _list(
    options?: VariablesListOptionalParams,
  ): Promise<VariablesListResponse> {
    return this.client.sendOperationRequest({ options }, listOperationSpec);
  }

  /**
   * This operation retrieves the list of all variables applicable to the management group.
   * @param managementGroupId The ID of the management group.
   * @param options The options parameters.
   */
  private _listForManagementGroup(
    managementGroupId: string,
    options?: VariablesListForManagementGroupOptionalParams,
  ): Promise<VariablesListForManagementGroupResponse> {
    return this.client.sendOperationRequest(
      { managementGroupId, options },
      listForManagementGroupOperationSpec,
    );
  }

  /**
   * ListNext
   * @param nextLink The nextLink from the previous successful call to the List method.
   * @param options The options parameters.
   */
  private _listNext(
    nextLink: string,
    options?: VariablesListNextOptionalParams,
  ): Promise<VariablesListNextResponse> {
    return this.client.sendOperationRequest(
      { nextLink, options },
      listNextOperationSpec,
    );
  }

  /**
   * ListForManagementGroupNext
   * @param managementGroupId The ID of the management group.
   * @param nextLink The nextLink from the previous successful call to the ListForManagementGroup method.
   * @param options The options parameters.
   */
  private _listForManagementGroupNext(
    managementGroupId: string,
    nextLink: string,
    options?: VariablesListForManagementGroupNextOptionalParams,
  ): Promise<VariablesListForManagementGroupNextResponse> {
    return this.client.sendOperationRequest(
      { managementGroupId, nextLink, options },
      listForManagementGroupNextOperationSpec,
    );
  }
}
// Operation Specifications
const serializer = coreClient.createSerializer(Mappers, /* isXml */ false);

const deleteOperationSpec: coreClient.OperationSpec = {
  path: "/subscriptions/{subscriptionId}/providers/Microsoft.Authorization/variables/{variableName}",
  httpMethod: "DELETE",
  responses: {
    200: {},
    204: {},
    default: {
      bodyMapper: Mappers.CloudError,
    },
  },
  queryParameters: [Parameters.apiVersion3],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.variableName,
  ],
  headerParameters: [Parameters.accept],
  serializer,
};
const createOrUpdateOperationSpec: coreClient.OperationSpec = {
  path: "/subscriptions/{subscriptionId}/providers/Microsoft.Authorization/variables/{variableName}",
  httpMethod: "PUT",
  responses: {
    200: {
      bodyMapper: Mappers.Variable,
    },
    201: {
      bodyMapper: Mappers.Variable,
    },
    default: {
      bodyMapper: Mappers.CloudError,
    },
  },
  requestBody: Parameters.parameters8,
  queryParameters: [Parameters.apiVersion3],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.variableName,
  ],
  headerParameters: [Parameters.accept, Parameters.contentType],
  mediaType: "json",
  serializer,
};
const getOperationSpec: coreClient.OperationSpec = {
  path: "/subscriptions/{subscriptionId}/providers/Microsoft.Authorization/variables/{variableName}",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.Variable,
    },
    default: {
      bodyMapper: Mappers.CloudError,
    },
  },
  queryParameters: [Parameters.apiVersion3],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.variableName,
  ],
  headerParameters: [Parameters.accept],
  serializer,
};
const deleteAtManagementGroupOperationSpec: coreClient.OperationSpec = {
  path: "/providers/Microsoft.Management/managementGroups/{managementGroupId}/providers/Microsoft.Authorization/variables/{variableName}",
  httpMethod: "DELETE",
  responses: {
    200: {},
    204: {},
    default: {
      bodyMapper: Mappers.CloudError,
    },
  },
  queryParameters: [Parameters.apiVersion3],
  urlParameters: [
    Parameters.$host,
    Parameters.managementGroupId,
    Parameters.variableName,
  ],
  headerParameters: [Parameters.accept],
  serializer,
};
const createOrUpdateAtManagementGroupOperationSpec: coreClient.OperationSpec = {
  path: "/providers/Microsoft.Management/managementGroups/{managementGroupId}/providers/Microsoft.Authorization/variables/{variableName}",
  httpMethod: "PUT",
  responses: {
    200: {
      bodyMapper: Mappers.Variable,
    },
    201: {
      bodyMapper: Mappers.Variable,
    },
    default: {
      bodyMapper: Mappers.CloudError,
    },
  },
  requestBody: Parameters.parameters8,
  queryParameters: [Parameters.apiVersion3],
  urlParameters: [
    Parameters.$host,
    Parameters.managementGroupId,
    Parameters.variableName,
  ],
  headerParameters: [Parameters.accept, Parameters.contentType],
  mediaType: "json",
  serializer,
};
const getAtManagementGroupOperationSpec: coreClient.OperationSpec = {
  path: "/providers/Microsoft.Management/managementGroups/{managementGroupId}/providers/Microsoft.Authorization/variables/{variableName}",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.Variable,
    },
    default: {
      bodyMapper: Mappers.CloudError,
    },
  },
  queryParameters: [Parameters.apiVersion3],
  urlParameters: [
    Parameters.$host,
    Parameters.managementGroupId,
    Parameters.variableName,
  ],
  headerParameters: [Parameters.accept],
  serializer,
};
const listOperationSpec: coreClient.OperationSpec = {
  path: "/subscriptions/{subscriptionId}/providers/Microsoft.Authorization/variables",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.VariableListResult,
    },
    default: {
      bodyMapper: Mappers.CloudError,
    },
  },
  queryParameters: [Parameters.apiVersion3],
  urlParameters: [Parameters.$host, Parameters.subscriptionId],
  headerParameters: [Parameters.accept],
  serializer,
};
const listForManagementGroupOperationSpec: coreClient.OperationSpec = {
  path: "/providers/Microsoft.Management/managementGroups/{managementGroupId}/providers/Microsoft.Authorization/variables",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.VariableListResult,
    },
    default: {
      bodyMapper: Mappers.CloudError,
    },
  },
  queryParameters: [Parameters.apiVersion3],
  urlParameters: [Parameters.$host, Parameters.managementGroupId],
  headerParameters: [Parameters.accept],
  serializer,
};
const listNextOperationSpec: coreClient.OperationSpec = {
  path: "{nextLink}",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.VariableListResult,
    },
    default: {
      bodyMapper: Mappers.CloudError,
    },
  },
  urlParameters: [
    Parameters.$host,
    Parameters.nextLink,
    Parameters.subscriptionId,
  ],
  headerParameters: [Parameters.accept],
  serializer,
};
const listForManagementGroupNextOperationSpec: coreClient.OperationSpec = {
  path: "{nextLink}",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.VariableListResult,
    },
    default: {
      bodyMapper: Mappers.CloudError,
    },
  },
  urlParameters: [
    Parameters.$host,
    Parameters.nextLink,
    Parameters.managementGroupId,
  ],
  headerParameters: [Parameters.accept],
  serializer,
};
