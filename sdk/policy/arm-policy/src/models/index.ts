/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */

import { BaseResource, CloudError, AzureServiceClientOptions } from "@azure/ms-rest-azure-js";
import * as msRest from "@azure/ms-rest-js";

export { BaseResource, CloudError };

/**
 * The resource management error additional info.
 */
export interface ErrorAdditionalInfo {
  /**
   * The additional info type.
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly type?: string;
  /**
   * The additional info.
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly info?: any;
}

/**
 * Common error response for all Azure Resource Manager APIs to return error details for failed
 * operations. (This also follows the OData error response format.)
 * @summary Error Response
 */
export interface ErrorResponse {
  /**
   * The error code.
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly code?: string;
  /**
   * The error message.
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly message?: string;
  /**
   * The error target.
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly target?: string;
  /**
   * The error details.
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly details?: ErrorResponse[];
  /**
   * The error additional info.
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly additionalInfo?: ErrorAdditionalInfo[];
}

/**
 * The custom resource function definition.
 */
export interface DataManifestCustomResourceFunctionDefinition {
  /**
   * The function name as it will appear in the policy rule. eg - 'vault'.
   */
  name?: string;
  /**
   * The fully qualified control plane resource type that this function represents. eg -
   * 'Microsoft.KeyVault/vaults'.
   */
  fullyQualifiedResourceType?: string;
  /**
   * The top-level properties that can be selected on the function's output. eg - [ "name",
   * "location" ] if vault().name and vault().location are supported
   */
  defaultProperties?: string[];
  /**
   * A value indicating whether the custom properties within the property bag are allowed. Needs
   * api-version to be specified in the policy rule eg - vault('2019-06-01').
   */
  allowCustomProperties?: boolean;
}

/**
 * The data effect definition.
 */
export interface DataEffect {
  /**
   * The data effect name.
   */
  name?: string;
  /**
   * The data effect details schema.
   */
  detailsSchema?: any;
}

/**
 * The type of the pattern for an alias path.
 */
export interface AliasPattern {
  /**
   * The alias pattern phrase.
   */
  phrase?: string;
  /**
   * The alias pattern variable.
   */
  variable?: string;
  /**
   * The type of alias pattern. Possible values include: 'NotSpecified', 'Extract'
   */
  type?: AliasPatternType;
}

/**
 * An interface representing AliasPathMetadata.
 */
export interface AliasPathMetadata {
  /**
   * The type of the token that the alias path is referring to. Possible values include:
   * 'NotSpecified', 'Any', 'String', 'Object', 'Array', 'Integer', 'Number', 'Boolean'
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly type?: AliasPathTokenType;
  /**
   * The attributes of the token that the alias path is referring to. Possible values include:
   * 'None', 'Modifiable'
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly attributes?: AliasPathAttributes;
}

/**
 * The type of the paths for alias.
 */
export interface AliasPath {
  /**
   * The path of an alias.
   */
  path?: string;
  /**
   * The API versions.
   */
  apiVersions?: string[];
  /**
   * The pattern for an alias path.
   */
  pattern?: AliasPattern;
  /**
   * The metadata of the alias path. If missing, fall back to the default metadata of the alias.
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly metadata?: AliasPathMetadata;
}

/**
 * The alias type.
 */
export interface Alias {
  /**
   * The alias name.
   */
  name?: string;
  /**
   * The paths for an alias.
   */
  paths?: AliasPath[];
  /**
   * The type of the alias. Possible values include: 'NotSpecified', 'PlainText', 'Mask'
   */
  type?: AliasType;
  /**
   * The default path for an alias.
   */
  defaultPath?: string;
  /**
   * The default pattern for an alias.
   */
  defaultPattern?: AliasPattern;
  /**
   * The default alias path metadata. Applies to the default path and to any alias path that
   * doesn't have metadata
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly defaultMetadata?: AliasPathMetadata;
}

/**
 * The resource type aliases definition.
 */
export interface ResourceTypeAliases {
  /**
   * The resource type name.
   */
  resourceType?: string;
  /**
   * The aliases for property names.
   */
  aliases?: Alias[];
}

/**
 * The data policy manifest.
 */
export interface DataPolicyManifest extends BaseResource {
  /**
   * The list of namespaces for the data policy manifest.
   */
  namespaces?: string[];
  /**
   * The policy mode of the data policy manifest.
   */
  policyMode?: string;
  /**
   * A value indicating whether policy mode is allowed only in built-in definitions.
   */
  isBuiltInOnly?: boolean;
  /**
   * An array of resource type aliases.
   */
  resourceTypeAliases?: ResourceTypeAliases[];
  /**
   * The effect definition.
   */
  effects?: DataEffect[];
  /**
   * The non-alias field accessor values that can be used in the policy rule.
   */
  fieldValues?: string[];
  /**
   * The standard resource functions (subscription and/or resourceGroup).
   */
  standard?: string[];
  /**
   * An array of data manifest custom resource definition.
   */
  custom?: DataManifestCustomResourceFunctionDefinition[];
  /**
   * The ID of the data policy manifest.
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly id?: string;
  /**
   * The name of the data policy manifest (it's the same as the Policy Mode).
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly name?: string;
  /**
   * The type of the resource (Microsoft.Authorization/dataPolicyManifests).
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly type?: string;
}

/**
 * The value of a parameter.
 */
export interface ParameterValuesValue {
  /**
   * The value of the parameter.
   */
  value?: any;
}

/**
 * A message that describes why a resource is non-compliant with the policy. This is shown in
 * 'deny' error messages and on resource's non-compliant compliance results.
 */
export interface NonComplianceMessage {
  /**
   * A message that describes why a resource is non-compliant with the policy. This is shown in
   * 'deny' error messages and on resource's non-compliant compliance results.
   */
  message: string;
  /**
   * The policy definition reference ID within a policy set definition the message is intended for.
   * This is only applicable if the policy assignment assigns a policy set definition. If this is
   * not provided the message applies to all policies assigned by this policy assignment.
   */
  policyDefinitionReferenceId?: string;
}

/**
 * Identity for the resource.
 */
export interface Identity {
  /**
   * The principal ID of the resource identity.
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly principalId?: string;
  /**
   * The tenant ID of the resource identity.
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly tenantId?: string;
  /**
   * The identity type. This is the only required field when adding a system assigned identity to a
   * resource. Possible values include: 'SystemAssigned', 'None'
   */
  type?: ResourceIdentityType;
}

/**
 * The policy assignment.
 */
export interface PolicyAssignment extends BaseResource {
  /**
   * The display name of the policy assignment.
   */
  displayName?: string;
  /**
   * The ID of the policy definition or policy set definition being assigned.
   */
  policyDefinitionId?: string;
  /**
   * The scope for the policy assignment.
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly scope?: string;
  /**
   * The policy's excluded scopes.
   */
  notScopes?: string[];
  /**
   * The parameter values for the assigned policy rule. The keys are the parameter names.
   */
  parameters?: { [propertyName: string]: ParameterValuesValue };
  /**
   * This message will be part of response in case of policy violation.
   */
  description?: string;
  /**
   * The policy assignment metadata. Metadata is an open ended object and is typically a collection
   * of key value pairs.
   */
  metadata?: any;
  /**
   * The policy assignment enforcement mode. Possible values are Default and DoNotEnforce. Possible
   * values include: 'Default', 'DoNotEnforce'. Default value: 'Default'.
   */
  enforcementMode?: EnforcementMode;
  /**
   * The messages that describe why a resource is non-compliant with the policy.
   */
  nonComplianceMessages?: NonComplianceMessage[];
  /**
   * The ID of the policy assignment.
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly id?: string;
  /**
   * The type of the policy assignment.
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly type?: string;
  /**
   * The name of the policy assignment.
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly name?: string;
  /**
   * The location of the policy assignment. Only required when utilizing managed identity.
   */
  location?: string;
  /**
   * The managed identity associated with the policy assignment.
   */
  identity?: Identity;
}

/**
 * General metadata for the parameter.
 */
export interface ParameterDefinitionsValueMetadata {
  /**
   * The display name for the parameter.
   */
  displayName?: string;
  /**
   * The description of the parameter.
   */
  description?: string;
  /**
   * Used when assigning the policy definition through the portal. Provides a context aware list of
   * values for the user to choose from.
   */
  strongType?: string;
  /**
   * Set to true to have Azure portal create role assignments on the resource ID or resource scope
   * value of this parameter during policy assignment. This property is useful in case you wish to
   * assign permissions outside the assignment scope.
   */
  assignPermissions?: boolean;
  /**
   * Describes unknown properties. The value of an unknown property can be of "any" type.
   */
  [property: string]: any;
}

/**
 * The definition of a parameter that can be provided to the policy.
 */
export interface ParameterDefinitionsValue {
  /**
   * The data type of the parameter. Possible values include: 'String', 'Array', 'Object',
   * 'Boolean', 'Integer', 'Float', 'DateTime'
   */
  type?: ParameterType;
  /**
   * The allowed values for the parameter.
   */
  allowedValues?: any[];
  /**
   * The default value for the parameter if no value is provided.
   */
  defaultValue?: any;
  /**
   * General metadata for the parameter.
   */
  metadata?: ParameterDefinitionsValueMetadata;
}

/**
 * The policy definition.
 */
export interface PolicyDefinition extends BaseResource {
  /**
   * The type of policy definition. Possible values are NotSpecified, BuiltIn, Custom, and Static.
   * Possible values include: 'NotSpecified', 'BuiltIn', 'Custom', 'Static'
   */
  policyType?: PolicyType;
  /**
   * The policy definition mode. Some examples are All, Indexed, Microsoft.KeyVault.Data. Default
   * value: 'Indexed'.
   */
  mode?: string;
  /**
   * The display name of the policy definition.
   */
  displayName?: string;
  /**
   * The policy definition description.
   */
  description?: string;
  /**
   * The policy rule.
   */
  policyRule?: any;
  /**
   * The policy definition metadata.  Metadata is an open ended object and is typically a
   * collection of key value pairs.
   */
  metadata?: any;
  /**
   * The parameter definitions for parameters used in the policy rule. The keys are the parameter
   * names.
   */
  parameters?: { [propertyName: string]: ParameterDefinitionsValue };
  /**
   * The ID of the policy definition.
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly id?: string;
  /**
   * The name of the policy definition.
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly name?: string;
  /**
   * The type of the resource (Microsoft.Authorization/policyDefinitions).
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly type?: string;
}

/**
 * The policy definition reference.
 */
export interface PolicyDefinitionReference {
  /**
   * The ID of the policy definition or policy set definition.
   */
  policyDefinitionId: string;
  /**
   * The parameter values for the referenced policy rule. The keys are the parameter names.
   */
  parameters?: { [propertyName: string]: ParameterValuesValue };
  /**
   * A unique id (within the policy set definition) for this policy definition reference.
   */
  policyDefinitionReferenceId?: string;
  /**
   * The name of the groups that this policy definition reference belongs to.
   */
  groupNames?: string[];
}

/**
 * The policy definition group.
 */
export interface PolicyDefinitionGroup {
  /**
   * The name of the group.
   */
  name: string;
  /**
   * The group's display name.
   */
  displayName?: string;
  /**
   * The group's category.
   */
  category?: string;
  /**
   * The group's description.
   */
  description?: string;
  /**
   * A resource ID of a resource that contains additional metadata about the group.
   */
  additionalMetadataId?: string;
}

/**
 * The policy set definition.
 */
export interface PolicySetDefinition extends BaseResource {
  /**
   * The type of policy definition. Possible values are NotSpecified, BuiltIn, Custom, and Static.
   * Possible values include: 'NotSpecified', 'BuiltIn', 'Custom', 'Static'
   */
  policyType?: PolicyType;
  /**
   * The display name of the policy set definition.
   */
  displayName?: string;
  /**
   * The policy set definition description.
   */
  description?: string;
  /**
   * The policy set definition metadata.  Metadata is an open ended object and is typically a
   * collection of key value pairs.
   */
  metadata?: any;
  /**
   * The policy set definition parameters that can be used in policy definition references.
   */
  parameters?: { [propertyName: string]: ParameterDefinitionsValue };
  /**
   * An array of policy definition references.
   */
  policyDefinitions: PolicyDefinitionReference[];
  /**
   * The metadata describing groups of policy definition references within the policy set
   * definition.
   */
  policyDefinitionGroups?: PolicyDefinitionGroup[];
  /**
   * The ID of the policy set definition.
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly id?: string;
  /**
   * The name of the policy set definition.
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly name?: string;
  /**
   * The type of the resource (Microsoft.Authorization/policySetDefinitions).
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly type?: string;
}

/**
 * Metadata pertaining to creation and last modification of the resource.
 */
export interface SystemData {
  /**
   * The identity that created the resource.
   */
  createdBy?: string;
  /**
   * The type of identity that created the resource. Possible values include: 'User',
   * 'Application', 'ManagedIdentity', 'Key'
   */
  createdByType?: CreatedByType;
  /**
   * The timestamp of resource creation (UTC).
   */
  createdAt?: Date;
  /**
   * The identity that last modified the resource.
   */
  lastModifiedBy?: string;
  /**
   * The type of identity that last modified the resource. Possible values include: 'User',
   * 'Application', 'ManagedIdentity', 'Key'
   */
  lastModifiedByType?: CreatedByType;
  /**
   * The timestamp of resource last modification (UTC)
   */
  lastModifiedAt?: Date;
}

/**
 * The policy exemption.
 */
export interface PolicyExemption extends BaseResource {
  /**
   * The ID of the policy assignment that is being exempted.
   */
  policyAssignmentId: string;
  /**
   * The policy definition reference ID list when the associated policy assignment is an assignment
   * of a policy set definition.
   */
  policyDefinitionReferenceIds?: string[];
  /**
   * The policy exemption category. Possible values are Waiver and Mitigated. Possible values
   * include: 'Waiver', 'Mitigated'
   */
  exemptionCategory: ExemptionCategory;
  /**
   * The expiration date and time (in UTC ISO 8601 format yyyy-MM-ddTHH:mm:ssZ) of the policy
   * exemption.
   */
  expiresOn?: Date;
  /**
   * The display name of the policy exemption.
   */
  displayName?: string;
  /**
   * The description of the policy exemption.
   */
  description?: string;
  /**
   * The policy exemption metadata. Metadata is an open ended object and is typically a collection
   * of key value pairs.
   */
  metadata?: any;
  /**
   * Azure Resource Manager metadata containing createdBy and modifiedBy information.
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly systemData?: SystemData;
  /**
   * The ID of the policy exemption.
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly id?: string;
  /**
   * The name of the policy exemption.
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly name?: string;
  /**
   * The type of the resource (Microsoft.Authorization/policyExemptions).
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly type?: string;
}

/**
 * Optional Parameters.
 */
export interface DataPolicyManifestsListOptionalParams extends msRest.RequestOptionsBase {
  /**
   * The filter to apply on the operation. Valid values for $filter are: "namespace eq '{value}'".
   * If $filter is not provided, no filtering is performed. If $filter=namespace eq '{value}' is
   * provided, the returned list only includes all data policy manifests that have a namespace
   * matching the provided value.
   */
  filter?: string;
}

/**
 * Optional Parameters.
 */
export interface DataPolicyManifestsListNextOptionalParams extends msRest.RequestOptionsBase {
  /**
   * The filter to apply on the operation. Valid values for $filter are: "namespace eq '{value}'".
   * If $filter is not provided, no filtering is performed. If $filter=namespace eq '{value}' is
   * provided, the returned list only includes all data policy manifests that have a namespace
   * matching the provided value.
   */
  filter?: string;
}

/**
 * Optional Parameters.
 */
export interface PolicyAssignmentsListForResourceGroupOptionalParams
  extends msRest.RequestOptionsBase {
  /**
   * The filter to apply on the operation. Valid values for $filter are: 'atScope()',
   * 'atExactScope()' or 'policyDefinitionId eq '{value}''. If $filter is not provided, no
   * filtering is performed. If $filter=atScope() is provided, the returned list only includes all
   * policy assignments that apply to the scope, which is everything in the unfiltered list except
   * those applied to sub scopes contained within the given scope. If $filter=atExactScope() is
   * provided, the returned list only includes all policy assignments that at the given scope. If
   * $filter=policyDefinitionId eq '{value}' is provided, the returned list includes all policy
   * assignments of the policy definition whose id is {value}.
   */
  filter?: string;
  /**
   * Maximum number of records to return. When the $top filter is not provided, it will return 500
   * records.
   */
  top?: number;
}

/**
 * Optional Parameters.
 */
export interface PolicyAssignmentsListForResourceOptionalParams extends msRest.RequestOptionsBase {
  /**
   * The filter to apply on the operation. Valid values for $filter are: 'atScope()',
   * 'atExactScope()' or 'policyDefinitionId eq '{value}''. If $filter is not provided, no
   * filtering is performed. If $filter=atScope() is provided, the returned list only includes all
   * policy assignments that apply to the scope, which is everything in the unfiltered list except
   * those applied to sub scopes contained within the given scope. If $filter=atExactScope() is
   * provided, the returned list only includes all policy assignments that at the given scope. If
   * $filter=policyDefinitionId eq '{value}' is provided, the returned list includes all policy
   * assignments of the policy definition whose id is {value}.
   */
  filter?: string;
  /**
   * Maximum number of records to return. When the $top filter is not provided, it will return 500
   * records.
   */
  top?: number;
}

/**
 * Optional Parameters.
 */
export interface PolicyAssignmentsListForManagementGroupOptionalParams
  extends msRest.RequestOptionsBase {
  /**
   * The filter to apply on the operation. Valid values for $filter are: 'atScope()',
   * 'atExactScope()' or 'policyDefinitionId eq '{value}''. If $filter is not provided, no
   * filtering is performed. If $filter=atScope() is provided, the returned list only includes all
   * policy assignments that apply to the scope, which is everything in the unfiltered list except
   * those applied to sub scopes contained within the given scope. If $filter=atExactScope() is
   * provided, the returned list only includes all policy assignments that at the given scope. If
   * $filter=policyDefinitionId eq '{value}' is provided, the returned list includes all policy
   * assignments of the policy definition whose id is {value}.
   */
  filter?: string;
  /**
   * Maximum number of records to return. When the $top filter is not provided, it will return 500
   * records.
   */
  top?: number;
}

/**
 * Optional Parameters.
 */
export interface PolicyAssignmentsListOptionalParams extends msRest.RequestOptionsBase {
  /**
   * The filter to apply on the operation. Valid values for $filter are: 'atScope()',
   * 'atExactScope()' or 'policyDefinitionId eq '{value}''. If $filter is not provided, no
   * filtering is performed. If $filter=atScope() is provided, the returned list only includes all
   * policy assignments that apply to the scope, which is everything in the unfiltered list except
   * those applied to sub scopes contained within the given scope. If $filter=atExactScope() is
   * provided, the returned list only includes all policy assignments that at the given scope. If
   * $filter=policyDefinitionId eq '{value}' is provided, the returned list includes all policy
   * assignments of the policy definition whose id is {value}.
   */
  filter?: string;
  /**
   * Maximum number of records to return. When the $top filter is not provided, it will return 500
   * records.
   */
  top?: number;
}

/**
 * Optional Parameters.
 */
export interface PolicyAssignmentsListForResourceGroupNextOptionalParams
  extends msRest.RequestOptionsBase {
  /**
   * The filter to apply on the operation. Valid values for $filter are: 'atScope()',
   * 'atExactScope()' or 'policyDefinitionId eq '{value}''. If $filter is not provided, no
   * filtering is performed. If $filter=atScope() is provided, the returned list only includes all
   * policy assignments that apply to the scope, which is everything in the unfiltered list except
   * those applied to sub scopes contained within the given scope. If $filter=atExactScope() is
   * provided, the returned list only includes all policy assignments that at the given scope. If
   * $filter=policyDefinitionId eq '{value}' is provided, the returned list includes all policy
   * assignments of the policy definition whose id is {value}.
   */
  filter?: string;
  /**
   * Maximum number of records to return. When the $top filter is not provided, it will return 500
   * records.
   */
  top?: number;
}

/**
 * Optional Parameters.
 */
export interface PolicyAssignmentsListForResourceNextOptionalParams
  extends msRest.RequestOptionsBase {
  /**
   * The filter to apply on the operation. Valid values for $filter are: 'atScope()',
   * 'atExactScope()' or 'policyDefinitionId eq '{value}''. If $filter is not provided, no
   * filtering is performed. If $filter=atScope() is provided, the returned list only includes all
   * policy assignments that apply to the scope, which is everything in the unfiltered list except
   * those applied to sub scopes contained within the given scope. If $filter=atExactScope() is
   * provided, the returned list only includes all policy assignments that at the given scope. If
   * $filter=policyDefinitionId eq '{value}' is provided, the returned list includes all policy
   * assignments of the policy definition whose id is {value}.
   */
  filter?: string;
  /**
   * Maximum number of records to return. When the $top filter is not provided, it will return 500
   * records.
   */
  top?: number;
}

/**
 * Optional Parameters.
 */
export interface PolicyAssignmentsListForManagementGroupNextOptionalParams
  extends msRest.RequestOptionsBase {
  /**
   * The filter to apply on the operation. Valid values for $filter are: 'atScope()',
   * 'atExactScope()' or 'policyDefinitionId eq '{value}''. If $filter is not provided, no
   * filtering is performed. If $filter=atScope() is provided, the returned list only includes all
   * policy assignments that apply to the scope, which is everything in the unfiltered list except
   * those applied to sub scopes contained within the given scope. If $filter=atExactScope() is
   * provided, the returned list only includes all policy assignments that at the given scope. If
   * $filter=policyDefinitionId eq '{value}' is provided, the returned list includes all policy
   * assignments of the policy definition whose id is {value}.
   */
  filter?: string;
  /**
   * Maximum number of records to return. When the $top filter is not provided, it will return 500
   * records.
   */
  top?: number;
}

/**
 * Optional Parameters.
 */
export interface PolicyAssignmentsListNextOptionalParams extends msRest.RequestOptionsBase {
  /**
   * The filter to apply on the operation. Valid values for $filter are: 'atScope()',
   * 'atExactScope()' or 'policyDefinitionId eq '{value}''. If $filter is not provided, no
   * filtering is performed. If $filter=atScope() is provided, the returned list only includes all
   * policy assignments that apply to the scope, which is everything in the unfiltered list except
   * those applied to sub scopes contained within the given scope. If $filter=atExactScope() is
   * provided, the returned list only includes all policy assignments that at the given scope. If
   * $filter=policyDefinitionId eq '{value}' is provided, the returned list includes all policy
   * assignments of the policy definition whose id is {value}.
   */
  filter?: string;
  /**
   * Maximum number of records to return. When the $top filter is not provided, it will return 500
   * records.
   */
  top?: number;
}

/**
 * Optional Parameters.
 */
export interface PolicyDefinitionsListOptionalParams extends msRest.RequestOptionsBase {
  /**
   * The filter to apply on the operation. Valid values for $filter are: 'atExactScope()',
   * 'policyType -eq {value}' or 'category eq '{value}''. If $filter is not provided, no filtering
   * is performed. If $filter=atExactScope() is provided, the returned list only includes all
   * policy definitions that at the given scope. If $filter='policyType -eq {value}' is provided,
   * the returned list only includes all policy definitions whose type match the {value}. Possible
   * policyType values are NotSpecified, BuiltIn, Custom, and Static. If $filter='category -eq
   * {value}' is provided, the returned list only includes all policy definitions whose category
   * match the {value}.
   */
  filter?: string;
  /**
   * Maximum number of records to return. When the $top filter is not provided, it will return 500
   * records.
   */
  top?: number;
}

/**
 * Optional Parameters.
 */
export interface PolicyDefinitionsListBuiltInOptionalParams extends msRest.RequestOptionsBase {
  /**
   * The filter to apply on the operation. Valid values for $filter are: 'atExactScope()',
   * 'policyType -eq {value}' or 'category eq '{value}''. If $filter is not provided, no filtering
   * is performed. If $filter=atExactScope() is provided, the returned list only includes all
   * policy definitions that at the given scope. If $filter='policyType -eq {value}' is provided,
   * the returned list only includes all policy definitions whose type match the {value}. Possible
   * policyType values are NotSpecified, BuiltIn, Custom, and Static. If $filter='category -eq
   * {value}' is provided, the returned list only includes all policy definitions whose category
   * match the {value}.
   */
  filter?: string;
  /**
   * Maximum number of records to return. When the $top filter is not provided, it will return 500
   * records.
   */
  top?: number;
}

/**
 * Optional Parameters.
 */
export interface PolicyDefinitionsListByManagementGroupOptionalParams
  extends msRest.RequestOptionsBase {
  /**
   * The filter to apply on the operation. Valid values for $filter are: 'atExactScope()',
   * 'policyType -eq {value}' or 'category eq '{value}''. If $filter is not provided, no filtering
   * is performed. If $filter=atExactScope() is provided, the returned list only includes all
   * policy definitions that at the given scope. If $filter='policyType -eq {value}' is provided,
   * the returned list only includes all policy definitions whose type match the {value}. Possible
   * policyType values are NotSpecified, BuiltIn, Custom, and Static. If $filter='category -eq
   * {value}' is provided, the returned list only includes all policy definitions whose category
   * match the {value}.
   */
  filter?: string;
  /**
   * Maximum number of records to return. When the $top filter is not provided, it will return 500
   * records.
   */
  top?: number;
}

/**
 * Optional Parameters.
 */
export interface PolicyDefinitionsListNextOptionalParams extends msRest.RequestOptionsBase {
  /**
   * The filter to apply on the operation. Valid values for $filter are: 'atExactScope()',
   * 'policyType -eq {value}' or 'category eq '{value}''. If $filter is not provided, no filtering
   * is performed. If $filter=atExactScope() is provided, the returned list only includes all
   * policy definitions that at the given scope. If $filter='policyType -eq {value}' is provided,
   * the returned list only includes all policy definitions whose type match the {value}. Possible
   * policyType values are NotSpecified, BuiltIn, Custom, and Static. If $filter='category -eq
   * {value}' is provided, the returned list only includes all policy definitions whose category
   * match the {value}.
   */
  filter?: string;
  /**
   * Maximum number of records to return. When the $top filter is not provided, it will return 500
   * records.
   */
  top?: number;
}

/**
 * Optional Parameters.
 */
export interface PolicyDefinitionsListBuiltInNextOptionalParams extends msRest.RequestOptionsBase {
  /**
   * The filter to apply on the operation. Valid values for $filter are: 'atExactScope()',
   * 'policyType -eq {value}' or 'category eq '{value}''. If $filter is not provided, no filtering
   * is performed. If $filter=atExactScope() is provided, the returned list only includes all
   * policy definitions that at the given scope. If $filter='policyType -eq {value}' is provided,
   * the returned list only includes all policy definitions whose type match the {value}. Possible
   * policyType values are NotSpecified, BuiltIn, Custom, and Static. If $filter='category -eq
   * {value}' is provided, the returned list only includes all policy definitions whose category
   * match the {value}.
   */
  filter?: string;
  /**
   * Maximum number of records to return. When the $top filter is not provided, it will return 500
   * records.
   */
  top?: number;
}

/**
 * Optional Parameters.
 */
export interface PolicyDefinitionsListByManagementGroupNextOptionalParams
  extends msRest.RequestOptionsBase {
  /**
   * The filter to apply on the operation. Valid values for $filter are: 'atExactScope()',
   * 'policyType -eq {value}' or 'category eq '{value}''. If $filter is not provided, no filtering
   * is performed. If $filter=atExactScope() is provided, the returned list only includes all
   * policy definitions that at the given scope. If $filter='policyType -eq {value}' is provided,
   * the returned list only includes all policy definitions whose type match the {value}. Possible
   * policyType values are NotSpecified, BuiltIn, Custom, and Static. If $filter='category -eq
   * {value}' is provided, the returned list only includes all policy definitions whose category
   * match the {value}.
   */
  filter?: string;
  /**
   * Maximum number of records to return. When the $top filter is not provided, it will return 500
   * records.
   */
  top?: number;
}

/**
 * Optional Parameters.
 */
export interface PolicySetDefinitionsListOptionalParams extends msRest.RequestOptionsBase {
  /**
   * The filter to apply on the operation. Valid values for $filter are: 'atExactScope()',
   * 'policyType -eq {value}' or 'category eq '{value}''. If $filter is not provided, no filtering
   * is performed. If $filter=atExactScope() is provided, the returned list only includes all
   * policy set definitions that at the given scope. If $filter='policyType -eq {value}' is
   * provided, the returned list only includes all policy set definitions whose type match the
   * {value}. Possible policyType values are NotSpecified, BuiltIn, Custom, and Static. If
   * $filter='category -eq {value}' is provided, the returned list only includes all policy set
   * definitions whose category match the {value}.
   */
  filter?: string;
  /**
   * Maximum number of records to return. When the $top filter is not provided, it will return 500
   * records.
   */
  top?: number;
}

/**
 * Optional Parameters.
 */
export interface PolicySetDefinitionsListBuiltInOptionalParams extends msRest.RequestOptionsBase {
  /**
   * The filter to apply on the operation. Valid values for $filter are: 'atExactScope()',
   * 'policyType -eq {value}' or 'category eq '{value}''. If $filter is not provided, no filtering
   * is performed. If $filter=atExactScope() is provided, the returned list only includes all
   * policy set definitions that at the given scope. If $filter='policyType -eq {value}' is
   * provided, the returned list only includes all policy set definitions whose type match the
   * {value}. Possible policyType values are NotSpecified, BuiltIn, Custom, and Static. If
   * $filter='category -eq {value}' is provided, the returned list only includes all policy set
   * definitions whose category match the {value}.
   */
  filter?: string;
  /**
   * Maximum number of records to return. When the $top filter is not provided, it will return 500
   * records.
   */
  top?: number;
}

/**
 * Optional Parameters.
 */
export interface PolicySetDefinitionsListByManagementGroupOptionalParams
  extends msRest.RequestOptionsBase {
  /**
   * The filter to apply on the operation. Valid values for $filter are: 'atExactScope()',
   * 'policyType -eq {value}' or 'category eq '{value}''. If $filter is not provided, no filtering
   * is performed. If $filter=atExactScope() is provided, the returned list only includes all
   * policy set definitions that at the given scope. If $filter='policyType -eq {value}' is
   * provided, the returned list only includes all policy set definitions whose type match the
   * {value}. Possible policyType values are NotSpecified, BuiltIn, Custom, and Static. If
   * $filter='category -eq {value}' is provided, the returned list only includes all policy set
   * definitions whose category match the {value}.
   */
  filter?: string;
  /**
   * Maximum number of records to return. When the $top filter is not provided, it will return 500
   * records.
   */
  top?: number;
}

/**
 * Optional Parameters.
 */
export interface PolicySetDefinitionsListNextOptionalParams extends msRest.RequestOptionsBase {
  /**
   * The filter to apply on the operation. Valid values for $filter are: 'atExactScope()',
   * 'policyType -eq {value}' or 'category eq '{value}''. If $filter is not provided, no filtering
   * is performed. If $filter=atExactScope() is provided, the returned list only includes all
   * policy set definitions that at the given scope. If $filter='policyType -eq {value}' is
   * provided, the returned list only includes all policy set definitions whose type match the
   * {value}. Possible policyType values are NotSpecified, BuiltIn, Custom, and Static. If
   * $filter='category -eq {value}' is provided, the returned list only includes all policy set
   * definitions whose category match the {value}.
   */
  filter?: string;
  /**
   * Maximum number of records to return. When the $top filter is not provided, it will return 500
   * records.
   */
  top?: number;
}

/**
 * Optional Parameters.
 */
export interface PolicySetDefinitionsListBuiltInNextOptionalParams
  extends msRest.RequestOptionsBase {
  /**
   * The filter to apply on the operation. Valid values for $filter are: 'atExactScope()',
   * 'policyType -eq {value}' or 'category eq '{value}''. If $filter is not provided, no filtering
   * is performed. If $filter=atExactScope() is provided, the returned list only includes all
   * policy set definitions that at the given scope. If $filter='policyType -eq {value}' is
   * provided, the returned list only includes all policy set definitions whose type match the
   * {value}. Possible policyType values are NotSpecified, BuiltIn, Custom, and Static. If
   * $filter='category -eq {value}' is provided, the returned list only includes all policy set
   * definitions whose category match the {value}.
   */
  filter?: string;
  /**
   * Maximum number of records to return. When the $top filter is not provided, it will return 500
   * records.
   */
  top?: number;
}

/**
 * Optional Parameters.
 */
export interface PolicySetDefinitionsListByManagementGroupNextOptionalParams
  extends msRest.RequestOptionsBase {
  /**
   * The filter to apply on the operation. Valid values for $filter are: 'atExactScope()',
   * 'policyType -eq {value}' or 'category eq '{value}''. If $filter is not provided, no filtering
   * is performed. If $filter=atExactScope() is provided, the returned list only includes all
   * policy set definitions that at the given scope. If $filter='policyType -eq {value}' is
   * provided, the returned list only includes all policy set definitions whose type match the
   * {value}. Possible policyType values are NotSpecified, BuiltIn, Custom, and Static. If
   * $filter='category -eq {value}' is provided, the returned list only includes all policy set
   * definitions whose category match the {value}.
   */
  filter?: string;
  /**
   * Maximum number of records to return. When the $top filter is not provided, it will return 500
   * records.
   */
  top?: number;
}

/**
 * Optional Parameters.
 */
export interface PolicyExemptionsListOptionalParams extends msRest.RequestOptionsBase {
  /**
   * The filter to apply on the operation. Valid values for $filter are: 'atScope()',
   * 'atExactScope()', 'excludeExpired()' or 'policyAssignmentId eq '{value}''. If $filter is not
   * provided, no filtering is performed. If $filter is not provided, the unfiltered list includes
   * all policy exemptions associated with the scope, including those that apply directly or apply
   * from containing scopes. If $filter=atScope() is provided, the returned list only includes all
   * policy exemptions that apply to the scope, which is everything in the unfiltered list except
   * those applied to sub scopes contained within the given scope. If $filter=atExactScope() is
   * provided, the returned list only includes all policy exemptions that at the given scope. If
   * $filter=excludeExpired() is provided, the returned list only includes all policy exemptions
   * that either haven't expired or didn't set expiration date. If $filter=policyAssignmentId eq
   * '{value}' is provided. the returned list only includes all policy exemptions that are
   * associated with the give policyAssignmentId.
   */
  filter?: string;
}

/**
 * Optional Parameters.
 */
export interface PolicyExemptionsListForResourceGroupOptionalParams
  extends msRest.RequestOptionsBase {
  /**
   * The filter to apply on the operation. Valid values for $filter are: 'atScope()',
   * 'atExactScope()', 'excludeExpired()' or 'policyAssignmentId eq '{value}''. If $filter is not
   * provided, no filtering is performed. If $filter is not provided, the unfiltered list includes
   * all policy exemptions associated with the scope, including those that apply directly or apply
   * from containing scopes. If $filter=atScope() is provided, the returned list only includes all
   * policy exemptions that apply to the scope, which is everything in the unfiltered list except
   * those applied to sub scopes contained within the given scope. If $filter=atExactScope() is
   * provided, the returned list only includes all policy exemptions that at the given scope. If
   * $filter=excludeExpired() is provided, the returned list only includes all policy exemptions
   * that either haven't expired or didn't set expiration date. If $filter=policyAssignmentId eq
   * '{value}' is provided. the returned list only includes all policy exemptions that are
   * associated with the give policyAssignmentId.
   */
  filter?: string;
}

/**
 * Optional Parameters.
 */
export interface PolicyExemptionsListForResourceOptionalParams extends msRest.RequestOptionsBase {
  /**
   * The filter to apply on the operation. Valid values for $filter are: 'atScope()',
   * 'atExactScope()', 'excludeExpired()' or 'policyAssignmentId eq '{value}''. If $filter is not
   * provided, no filtering is performed. If $filter is not provided, the unfiltered list includes
   * all policy exemptions associated with the scope, including those that apply directly or apply
   * from containing scopes. If $filter=atScope() is provided, the returned list only includes all
   * policy exemptions that apply to the scope, which is everything in the unfiltered list except
   * those applied to sub scopes contained within the given scope. If $filter=atExactScope() is
   * provided, the returned list only includes all policy exemptions that at the given scope. If
   * $filter=excludeExpired() is provided, the returned list only includes all policy exemptions
   * that either haven't expired or didn't set expiration date. If $filter=policyAssignmentId eq
   * '{value}' is provided. the returned list only includes all policy exemptions that are
   * associated with the give policyAssignmentId.
   */
  filter?: string;
}

/**
 * Optional Parameters.
 */
export interface PolicyExemptionsListForManagementGroupOptionalParams
  extends msRest.RequestOptionsBase {
  /**
   * The filter to apply on the operation. Valid values for $filter are: 'atScope()',
   * 'atExactScope()', 'excludeExpired()' or 'policyAssignmentId eq '{value}''. If $filter is not
   * provided, no filtering is performed. If $filter is not provided, the unfiltered list includes
   * all policy exemptions associated with the scope, including those that apply directly or apply
   * from containing scopes. If $filter=atScope() is provided, the returned list only includes all
   * policy exemptions that apply to the scope, which is everything in the unfiltered list except
   * those applied to sub scopes contained within the given scope. If $filter=atExactScope() is
   * provided, the returned list only includes all policy exemptions that at the given scope. If
   * $filter=excludeExpired() is provided, the returned list only includes all policy exemptions
   * that either haven't expired or didn't set expiration date. If $filter=policyAssignmentId eq
   * '{value}' is provided. the returned list only includes all policy exemptions that are
   * associated with the give policyAssignmentId.
   */
  filter?: string;
}

/**
 * Optional Parameters.
 */
export interface PolicyExemptionsListNextOptionalParams extends msRest.RequestOptionsBase {
  /**
   * The filter to apply on the operation. Valid values for $filter are: 'atScope()',
   * 'atExactScope()', 'excludeExpired()' or 'policyAssignmentId eq '{value}''. If $filter is not
   * provided, no filtering is performed. If $filter is not provided, the unfiltered list includes
   * all policy exemptions associated with the scope, including those that apply directly or apply
   * from containing scopes. If $filter=atScope() is provided, the returned list only includes all
   * policy exemptions that apply to the scope, which is everything in the unfiltered list except
   * those applied to sub scopes contained within the given scope. If $filter=atExactScope() is
   * provided, the returned list only includes all policy exemptions that at the given scope. If
   * $filter=excludeExpired() is provided, the returned list only includes all policy exemptions
   * that either haven't expired or didn't set expiration date. If $filter=policyAssignmentId eq
   * '{value}' is provided. the returned list only includes all policy exemptions that are
   * associated with the give policyAssignmentId.
   */
  filter?: string;
}

/**
 * Optional Parameters.
 */
export interface PolicyExemptionsListForResourceGroupNextOptionalParams
  extends msRest.RequestOptionsBase {
  /**
   * The filter to apply on the operation. Valid values for $filter are: 'atScope()',
   * 'atExactScope()', 'excludeExpired()' or 'policyAssignmentId eq '{value}''. If $filter is not
   * provided, no filtering is performed. If $filter is not provided, the unfiltered list includes
   * all policy exemptions associated with the scope, including those that apply directly or apply
   * from containing scopes. If $filter=atScope() is provided, the returned list only includes all
   * policy exemptions that apply to the scope, which is everything in the unfiltered list except
   * those applied to sub scopes contained within the given scope. If $filter=atExactScope() is
   * provided, the returned list only includes all policy exemptions that at the given scope. If
   * $filter=excludeExpired() is provided, the returned list only includes all policy exemptions
   * that either haven't expired or didn't set expiration date. If $filter=policyAssignmentId eq
   * '{value}' is provided. the returned list only includes all policy exemptions that are
   * associated with the give policyAssignmentId.
   */
  filter?: string;
}

/**
 * Optional Parameters.
 */
export interface PolicyExemptionsListForResourceNextOptionalParams
  extends msRest.RequestOptionsBase {
  /**
   * The filter to apply on the operation. Valid values for $filter are: 'atScope()',
   * 'atExactScope()', 'excludeExpired()' or 'policyAssignmentId eq '{value}''. If $filter is not
   * provided, no filtering is performed. If $filter is not provided, the unfiltered list includes
   * all policy exemptions associated with the scope, including those that apply directly or apply
   * from containing scopes. If $filter=atScope() is provided, the returned list only includes all
   * policy exemptions that apply to the scope, which is everything in the unfiltered list except
   * those applied to sub scopes contained within the given scope. If $filter=atExactScope() is
   * provided, the returned list only includes all policy exemptions that at the given scope. If
   * $filter=excludeExpired() is provided, the returned list only includes all policy exemptions
   * that either haven't expired or didn't set expiration date. If $filter=policyAssignmentId eq
   * '{value}' is provided. the returned list only includes all policy exemptions that are
   * associated with the give policyAssignmentId.
   */
  filter?: string;
}

/**
 * Optional Parameters.
 */
export interface PolicyExemptionsListForManagementGroupNextOptionalParams
  extends msRest.RequestOptionsBase {
  /**
   * The filter to apply on the operation. Valid values for $filter are: 'atScope()',
   * 'atExactScope()', 'excludeExpired()' or 'policyAssignmentId eq '{value}''. If $filter is not
   * provided, no filtering is performed. If $filter is not provided, the unfiltered list includes
   * all policy exemptions associated with the scope, including those that apply directly or apply
   * from containing scopes. If $filter=atScope() is provided, the returned list only includes all
   * policy exemptions that apply to the scope, which is everything in the unfiltered list except
   * those applied to sub scopes contained within the given scope. If $filter=atExactScope() is
   * provided, the returned list only includes all policy exemptions that at the given scope. If
   * $filter=excludeExpired() is provided, the returned list only includes all policy exemptions
   * that either haven't expired or didn't set expiration date. If $filter=policyAssignmentId eq
   * '{value}' is provided. the returned list only includes all policy exemptions that are
   * associated with the give policyAssignmentId.
   */
  filter?: string;
}

/**
 * An interface representing PolicyClientOptions.
 */
export interface PolicyClientOptions extends AzureServiceClientOptions {
  baseUri?: string;
}

/**
 * @interface
 * List of data policy manifests.
 * @extends Array<DataPolicyManifest>
 */
export interface DataPolicyManifestListResult extends Array<DataPolicyManifest> {
  /**
   * The URL to use for getting the next set of results.
   */
  nextLink?: string;
}

/**
 * @interface
 * List of policy assignments.
 * @extends Array<PolicyAssignment>
 */
export interface PolicyAssignmentListResult extends Array<PolicyAssignment> {
  /**
   * The URL to use for getting the next set of results.
   */
  nextLink?: string;
}

/**
 * @interface
 * List of policy definitions.
 * @extends Array<PolicyDefinition>
 */
export interface PolicyDefinitionListResult extends Array<PolicyDefinition> {
  /**
   * The URL to use for getting the next set of results.
   */
  nextLink?: string;
}

/**
 * @interface
 * List of policy set definitions.
 * @extends Array<PolicySetDefinition>
 */
export interface PolicySetDefinitionListResult extends Array<PolicySetDefinition> {
  /**
   * The URL to use for getting the next set of results.
   */
  nextLink?: string;
}

/**
 * @interface
 * List of policy exemptions.
 * @extends Array<PolicyExemption>
 */
export interface PolicyExemptionListResult extends Array<PolicyExemption> {
  /**
   * The URL to use for getting the next set of results.
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly nextLink?: string;
}

/**
 * Defines values for AliasPatternType.
 * Possible values include: 'NotSpecified', 'Extract'
 * @readonly
 * @enum {string}
 */
export type AliasPatternType = "NotSpecified" | "Extract";

/**
 * Defines values for AliasPathTokenType.
 * Possible values include: 'NotSpecified', 'Any', 'String', 'Object', 'Array', 'Integer',
 * 'Number', 'Boolean'
 * @readonly
 * @enum {string}
 */
export type AliasPathTokenType =
  | "NotSpecified"
  | "Any"
  | "String"
  | "Object"
  | "Array"
  | "Integer"
  | "Number"
  | "Boolean";

/**
 * Defines values for AliasPathAttributes.
 * Possible values include: 'None', 'Modifiable'
 * @readonly
 * @enum {string}
 */
export type AliasPathAttributes = "None" | "Modifiable";

/**
 * Defines values for AliasType.
 * Possible values include: 'NotSpecified', 'PlainText', 'Mask'
 * @readonly
 * @enum {string}
 */
export type AliasType = "NotSpecified" | "PlainText" | "Mask";

/**
 * Defines values for EnforcementMode.
 * Possible values include: 'Default', 'DoNotEnforce'
 * @readonly
 * @enum {string}
 */
export type EnforcementMode = "Default" | "DoNotEnforce";

/**
 * Defines values for ResourceIdentityType.
 * Possible values include: 'SystemAssigned', 'None'
 * @readonly
 * @enum {string}
 */
export type ResourceIdentityType = "SystemAssigned" | "None";

/**
 * Defines values for PolicyType.
 * Possible values include: 'NotSpecified', 'BuiltIn', 'Custom', 'Static'
 * @readonly
 * @enum {string}
 */
export type PolicyType = "NotSpecified" | "BuiltIn" | "Custom" | "Static";

/**
 * Defines values for ParameterType.
 * Possible values include: 'String', 'Array', 'Object', 'Boolean', 'Integer', 'Float', 'DateTime'
 * @readonly
 * @enum {string}
 */
export type ParameterType =
  | "String"
  | "Array"
  | "Object"
  | "Boolean"
  | "Integer"
  | "Float"
  | "DateTime";

/**
 * Defines values for ExemptionCategory.
 * Possible values include: 'Waiver', 'Mitigated'
 * @readonly
 * @enum {string}
 */
export type ExemptionCategory = "Waiver" | "Mitigated";

/**
 * Defines values for CreatedByType.
 * Possible values include: 'User', 'Application', 'ManagedIdentity', 'Key'
 * @readonly
 * @enum {string}
 */
export type CreatedByType = "User" | "Application" | "ManagedIdentity" | "Key";

/**
 * Contains response data for the getByPolicyMode operation.
 */
export type DataPolicyManifestsGetByPolicyModeResponse = DataPolicyManifest & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: DataPolicyManifest;
  };
};

/**
 * Contains response data for the list operation.
 */
export type DataPolicyManifestsListResponse = DataPolicyManifestListResult & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: DataPolicyManifestListResult;
  };
};

/**
 * Contains response data for the listNext operation.
 */
export type DataPolicyManifestsListNextResponse = DataPolicyManifestListResult & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: DataPolicyManifestListResult;
  };
};

/**
 * Contains response data for the deleteMethod operation.
 */
export type PolicyAssignmentsDeleteMethodResponse = PolicyAssignment & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: PolicyAssignment;
  };
};

/**
 * Contains response data for the create operation.
 */
export type PolicyAssignmentsCreateResponse = PolicyAssignment & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: PolicyAssignment;
  };
};

/**
 * Contains response data for the get operation.
 */
export type PolicyAssignmentsGetResponse = PolicyAssignment & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: PolicyAssignment;
  };
};

/**
 * Contains response data for the listForResourceGroup operation.
 */
export type PolicyAssignmentsListForResourceGroupResponse = PolicyAssignmentListResult & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: PolicyAssignmentListResult;
  };
};

/**
 * Contains response data for the listForResource operation.
 */
export type PolicyAssignmentsListForResourceResponse = PolicyAssignmentListResult & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: PolicyAssignmentListResult;
  };
};

/**
 * Contains response data for the listForManagementGroup operation.
 */
export type PolicyAssignmentsListForManagementGroupResponse = PolicyAssignmentListResult & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: PolicyAssignmentListResult;
  };
};

/**
 * Contains response data for the list operation.
 */
export type PolicyAssignmentsListResponse = PolicyAssignmentListResult & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: PolicyAssignmentListResult;
  };
};

/**
 * Contains response data for the deleteById operation.
 */
export type PolicyAssignmentsDeleteByIdResponse = PolicyAssignment & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: PolicyAssignment;
  };
};

/**
 * Contains response data for the createById operation.
 */
export type PolicyAssignmentsCreateByIdResponse = PolicyAssignment & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: PolicyAssignment;
  };
};

/**
 * Contains response data for the getById operation.
 */
export type PolicyAssignmentsGetByIdResponse = PolicyAssignment & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: PolicyAssignment;
  };
};

/**
 * Contains response data for the listForResourceGroupNext operation.
 */
export type PolicyAssignmentsListForResourceGroupNextResponse = PolicyAssignmentListResult & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: PolicyAssignmentListResult;
  };
};

/**
 * Contains response data for the listForResourceNext operation.
 */
export type PolicyAssignmentsListForResourceNextResponse = PolicyAssignmentListResult & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: PolicyAssignmentListResult;
  };
};

/**
 * Contains response data for the listForManagementGroupNext operation.
 */
export type PolicyAssignmentsListForManagementGroupNextResponse = PolicyAssignmentListResult & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: PolicyAssignmentListResult;
  };
};

/**
 * Contains response data for the listNext operation.
 */
export type PolicyAssignmentsListNextResponse = PolicyAssignmentListResult & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: PolicyAssignmentListResult;
  };
};

/**
 * Contains response data for the createOrUpdate operation.
 */
export type PolicyDefinitionsCreateOrUpdateResponse = PolicyDefinition & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: PolicyDefinition;
  };
};

/**
 * Contains response data for the get operation.
 */
export type PolicyDefinitionsGetResponse = PolicyDefinition & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: PolicyDefinition;
  };
};

/**
 * Contains response data for the getBuiltIn operation.
 */
export type PolicyDefinitionsGetBuiltInResponse = PolicyDefinition & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: PolicyDefinition;
  };
};

/**
 * Contains response data for the createOrUpdateAtManagementGroup operation.
 */
export type PolicyDefinitionsCreateOrUpdateAtManagementGroupResponse = PolicyDefinition & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: PolicyDefinition;
  };
};

/**
 * Contains response data for the getAtManagementGroup operation.
 */
export type PolicyDefinitionsGetAtManagementGroupResponse = PolicyDefinition & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: PolicyDefinition;
  };
};

/**
 * Contains response data for the list operation.
 */
export type PolicyDefinitionsListResponse = PolicyDefinitionListResult & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: PolicyDefinitionListResult;
  };
};

/**
 * Contains response data for the listBuiltIn operation.
 */
export type PolicyDefinitionsListBuiltInResponse = PolicyDefinitionListResult & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: PolicyDefinitionListResult;
  };
};

/**
 * Contains response data for the listByManagementGroup operation.
 */
export type PolicyDefinitionsListByManagementGroupResponse = PolicyDefinitionListResult & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: PolicyDefinitionListResult;
  };
};

/**
 * Contains response data for the listNext operation.
 */
export type PolicyDefinitionsListNextResponse = PolicyDefinitionListResult & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: PolicyDefinitionListResult;
  };
};

/**
 * Contains response data for the listBuiltInNext operation.
 */
export type PolicyDefinitionsListBuiltInNextResponse = PolicyDefinitionListResult & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: PolicyDefinitionListResult;
  };
};

/**
 * Contains response data for the listByManagementGroupNext operation.
 */
export type PolicyDefinitionsListByManagementGroupNextResponse = PolicyDefinitionListResult & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: PolicyDefinitionListResult;
  };
};

/**
 * Contains response data for the createOrUpdate operation.
 */
export type PolicySetDefinitionsCreateOrUpdateResponse = PolicySetDefinition & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: PolicySetDefinition;
  };
};

/**
 * Contains response data for the get operation.
 */
export type PolicySetDefinitionsGetResponse = PolicySetDefinition & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: PolicySetDefinition;
  };
};

/**
 * Contains response data for the getBuiltIn operation.
 */
export type PolicySetDefinitionsGetBuiltInResponse = PolicySetDefinition & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: PolicySetDefinition;
  };
};

/**
 * Contains response data for the list operation.
 */
export type PolicySetDefinitionsListResponse = PolicySetDefinitionListResult & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: PolicySetDefinitionListResult;
  };
};

/**
 * Contains response data for the listBuiltIn operation.
 */
export type PolicySetDefinitionsListBuiltInResponse = PolicySetDefinitionListResult & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: PolicySetDefinitionListResult;
  };
};

/**
 * Contains response data for the createOrUpdateAtManagementGroup operation.
 */
export type PolicySetDefinitionsCreateOrUpdateAtManagementGroupResponse = PolicySetDefinition & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: PolicySetDefinition;
  };
};

/**
 * Contains response data for the getAtManagementGroup operation.
 */
export type PolicySetDefinitionsGetAtManagementGroupResponse = PolicySetDefinition & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: PolicySetDefinition;
  };
};

/**
 * Contains response data for the listByManagementGroup operation.
 */
export type PolicySetDefinitionsListByManagementGroupResponse = PolicySetDefinitionListResult & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: PolicySetDefinitionListResult;
  };
};

/**
 * Contains response data for the listNext operation.
 */
export type PolicySetDefinitionsListNextResponse = PolicySetDefinitionListResult & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: PolicySetDefinitionListResult;
  };
};

/**
 * Contains response data for the listBuiltInNext operation.
 */
export type PolicySetDefinitionsListBuiltInNextResponse = PolicySetDefinitionListResult & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: PolicySetDefinitionListResult;
  };
};

/**
 * Contains response data for the listByManagementGroupNext operation.
 */
export type PolicySetDefinitionsListByManagementGroupNextResponse = PolicySetDefinitionListResult & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: PolicySetDefinitionListResult;
  };
};

/**
 * Contains response data for the createOrUpdate operation.
 */
export type PolicyExemptionsCreateOrUpdateResponse = PolicyExemption & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: PolicyExemption;
  };
};

/**
 * Contains response data for the get operation.
 */
export type PolicyExemptionsGetResponse = PolicyExemption & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: PolicyExemption;
  };
};

/**
 * Contains response data for the list operation.
 */
export type PolicyExemptionsListResponse = PolicyExemptionListResult & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: PolicyExemptionListResult;
  };
};

/**
 * Contains response data for the listForResourceGroup operation.
 */
export type PolicyExemptionsListForResourceGroupResponse = PolicyExemptionListResult & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: PolicyExemptionListResult;
  };
};

/**
 * Contains response data for the listForResource operation.
 */
export type PolicyExemptionsListForResourceResponse = PolicyExemptionListResult & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: PolicyExemptionListResult;
  };
};

/**
 * Contains response data for the listForManagementGroup operation.
 */
export type PolicyExemptionsListForManagementGroupResponse = PolicyExemptionListResult & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: PolicyExemptionListResult;
  };
};

/**
 * Contains response data for the listNext operation.
 */
export type PolicyExemptionsListNextResponse = PolicyExemptionListResult & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: PolicyExemptionListResult;
  };
};

/**
 * Contains response data for the listForResourceGroupNext operation.
 */
export type PolicyExemptionsListForResourceGroupNextResponse = PolicyExemptionListResult & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: PolicyExemptionListResult;
  };
};

/**
 * Contains response data for the listForResourceNext operation.
 */
export type PolicyExemptionsListForResourceNextResponse = PolicyExemptionListResult & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: PolicyExemptionListResult;
  };
};

/**
 * Contains response data for the listForManagementGroupNext operation.
 */
export type PolicyExemptionsListForManagementGroupNextResponse = PolicyExemptionListResult & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
    /**
     * The response body as text (string format)
     */
    bodyAsText: string;

    /**
     * The response body as parsed JSON or XML
     */
    parsedBody: PolicyExemptionListResult;
  };
};
