/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */

import type { PagedAsyncIterableIterator } from "@azure/core-paging";
import type {
  PolicyDefinitionVersion,
  PolicyDefinitionVersionsListOptionalParams,
  PolicyDefinitionVersionsListBuiltInOptionalParams,
  PolicyDefinitionVersionsListByManagementGroupOptionalParams,
  PolicyDefinitionVersionsListAllBuiltinsOptionalParams,
  PolicyDefinitionVersionsListAllBuiltinsResponse,
  PolicyDefinitionVersionsListAllAtManagementGroupOptionalParams,
  PolicyDefinitionVersionsListAllAtManagementGroupResponse,
  PolicyDefinitionVersionsListAllOptionalParams,
  PolicyDefinitionVersionsListAllResponse,
  PolicyDefinitionVersionsCreateOrUpdateOptionalParams,
  PolicyDefinitionVersionsCreateOrUpdateResponse,
  PolicyDefinitionVersionsDeleteOptionalParams,
  PolicyDefinitionVersionsGetOptionalParams,
  PolicyDefinitionVersionsGetResponse,
  PolicyDefinitionVersionsGetBuiltInOptionalParams,
  PolicyDefinitionVersionsGetBuiltInResponse,
  PolicyDefinitionVersionsCreateOrUpdateAtManagementGroupOptionalParams,
  PolicyDefinitionVersionsCreateOrUpdateAtManagementGroupResponse,
  PolicyDefinitionVersionsDeleteAtManagementGroupOptionalParams,
  PolicyDefinitionVersionsGetAtManagementGroupOptionalParams,
  PolicyDefinitionVersionsGetAtManagementGroupResponse,
} from "../models/index.js";

/// <reference lib="esnext.asynciterable" />
/** Interface representing a PolicyDefinitionVersions. */
export interface PolicyDefinitionVersions {
  /**
   * This operation retrieves a list of all the policy definition versions for the given policy
   * definition.
   * @param policyDefinitionName The name of the policy definition.
   * @param options The options parameters.
   */
  list(
    policyDefinitionName: string,
    options?: PolicyDefinitionVersionsListOptionalParams,
  ): PagedAsyncIterableIterator<PolicyDefinitionVersion>;
  /**
   * This operation retrieves a list of all the built-in policy definition versions for the given policy
   * definition.
   * @param policyDefinitionName The name of the policy definition.
   * @param options The options parameters.
   */
  listBuiltIn(
    policyDefinitionName: string,
    options?: PolicyDefinitionVersionsListBuiltInOptionalParams,
  ): PagedAsyncIterableIterator<PolicyDefinitionVersion>;
  /**
   * This operation retrieves a list of all the policy definition versions for the given policy
   * definition in the given management group.
   * @param managementGroupName The name of the management group. The name is case insensitive.
   * @param policyDefinitionName The name of the policy definition.
   * @param options The options parameters.
   */
  listByManagementGroup(
    managementGroupName: string,
    policyDefinitionName: string,
    options?: PolicyDefinitionVersionsListByManagementGroupOptionalParams,
  ): PagedAsyncIterableIterator<PolicyDefinitionVersion>;
  /**
   * This operation lists all the built-in policy definition versions for all built-in policy
   * definitions.
   * @param options The options parameters.
   */
  listAllBuiltins(
    options?: PolicyDefinitionVersionsListAllBuiltinsOptionalParams,
  ): Promise<PolicyDefinitionVersionsListAllBuiltinsResponse>;
  /**
   * This operation lists all the policy definition versions for all policy definitions at the management
   * group scope.
   * @param managementGroupName The name of the management group. The name is case insensitive.
   * @param options The options parameters.
   */
  listAllAtManagementGroup(
    managementGroupName: string,
    options?: PolicyDefinitionVersionsListAllAtManagementGroupOptionalParams,
  ): Promise<PolicyDefinitionVersionsListAllAtManagementGroupResponse>;
  /**
   * This operation lists all the policy definition versions for all policy definitions within a
   * subscription.
   * @param options The options parameters.
   */
  listAll(
    options?: PolicyDefinitionVersionsListAllOptionalParams,
  ): Promise<PolicyDefinitionVersionsListAllResponse>;
  /**
   * This operation creates or updates a policy definition in the given subscription with the given name.
   * @param policyDefinitionName The name of the policy definition.
   * @param policyDefinitionVersion The policy definition version.  The format is x.y.z where x is the
   *                                major version number, y is the minor version number, and z is the patch number
   * @param parameters The policy definition properties.
   * @param options The options parameters.
   */
  createOrUpdate(
    policyDefinitionName: string,
    policyDefinitionVersion: string,
    parameters: PolicyDefinitionVersion,
    options?: PolicyDefinitionVersionsCreateOrUpdateOptionalParams,
  ): Promise<PolicyDefinitionVersionsCreateOrUpdateResponse>;
  /**
   * This operation deletes the policy definition version in the given subscription with the given name.
   * @param policyDefinitionName The name of the policy definition.
   * @param policyDefinitionVersion The policy definition version.  The format is x.y.z where x is the
   *                                major version number, y is the minor version number, and z is the patch number
   * @param options The options parameters.
   */
  delete(
    policyDefinitionName: string,
    policyDefinitionVersion: string,
    options?: PolicyDefinitionVersionsDeleteOptionalParams,
  ): Promise<void>;
  /**
   * This operation retrieves the policy definition version in the given subscription with the given
   * name.
   * @param policyDefinitionName The name of the policy definition.
   * @param policyDefinitionVersion The policy definition version.  The format is x.y.z where x is the
   *                                major version number, y is the minor version number, and z is the patch number
   * @param options The options parameters.
   */
  get(
    policyDefinitionName: string,
    policyDefinitionVersion: string,
    options?: PolicyDefinitionVersionsGetOptionalParams,
  ): Promise<PolicyDefinitionVersionsGetResponse>;
  /**
   * This operation retrieves the built-in policy definition version with the given name.
   * @param policyDefinitionName The name of the policy definition.
   * @param policyDefinitionVersion The policy definition version.  The format is x.y.z where x is the
   *                                major version number, y is the minor version number, and z is the patch number
   * @param options The options parameters.
   */
  getBuiltIn(
    policyDefinitionName: string,
    policyDefinitionVersion: string,
    options?: PolicyDefinitionVersionsGetBuiltInOptionalParams,
  ): Promise<PolicyDefinitionVersionsGetBuiltInResponse>;
  /**
   * This operation creates or updates a policy definition version in the given management group with the
   * given name.
   * @param managementGroupName The name of the management group. The name is case insensitive.
   * @param policyDefinitionName The name of the policy definition.
   * @param policyDefinitionVersion The policy definition version.  The format is x.y.z where x is the
   *                                major version number, y is the minor version number, and z is the patch number
   * @param parameters The policy definition properties.
   * @param options The options parameters.
   */
  createOrUpdateAtManagementGroup(
    managementGroupName: string,
    policyDefinitionName: string,
    policyDefinitionVersion: string,
    parameters: PolicyDefinitionVersion,
    options?: PolicyDefinitionVersionsCreateOrUpdateAtManagementGroupOptionalParams,
  ): Promise<PolicyDefinitionVersionsCreateOrUpdateAtManagementGroupResponse>;
  /**
   * This operation deletes the policy definition in the given management group with the given name.
   * @param managementGroupName The name of the management group. The name is case insensitive.
   * @param policyDefinitionName The name of the policy definition.
   * @param policyDefinitionVersion The policy definition version.  The format is x.y.z where x is the
   *                                major version number, y is the minor version number, and z is the patch number
   * @param options The options parameters.
   */
  deleteAtManagementGroup(
    managementGroupName: string,
    policyDefinitionName: string,
    policyDefinitionVersion: string,
    options?: PolicyDefinitionVersionsDeleteAtManagementGroupOptionalParams,
  ): Promise<void>;
  /**
   * This operation retrieves the policy definition version in the given management group with the given
   * name.
   * @param managementGroupName The name of the management group. The name is case insensitive.
   * @param policyDefinitionName The name of the policy definition.
   * @param policyDefinitionVersion The policy definition version.  The format is x.y.z where x is the
   *                                major version number, y is the minor version number, and z is the patch number
   * @param options The options parameters.
   */
  getAtManagementGroup(
    managementGroupName: string,
    policyDefinitionName: string,
    policyDefinitionVersion: string,
    options?: PolicyDefinitionVersionsGetAtManagementGroupOptionalParams,
  ): Promise<PolicyDefinitionVersionsGetAtManagementGroupResponse>;
}
