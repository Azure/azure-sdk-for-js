/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */

import { PagedAsyncIterableIterator } from "@azure/core-paging";
import {
  PolicyExemption,
  PolicyExemptionsListOptionalParams,
  PolicyExemptionsListForResourceGroupOptionalParams,
  PolicyExemptionsListForResourceOptionalParams,
  PolicyExemptionsListForManagementGroupOptionalParams,
  PolicyExemptionsDeleteOptionalParams,
  PolicyExemptionsCreateOrUpdateOptionalParams,
  PolicyExemptionsCreateOrUpdateResponse,
  PolicyExemptionsGetOptionalParams,
  PolicyExemptionsGetResponse
} from "../models";

/// <reference lib="esnext.asynciterable" />
/** Interface representing a PolicyExemptions. */
export interface PolicyExemptions {
  /**
   * This operation retrieves the list of all policy exemptions associated with the given subscription
   * that match the optional given $filter. Valid values for $filter are: 'atScope()', 'atExactScope()',
   * 'excludeExpired()' or 'policyAssignmentId eq '{value}''. If $filter is not provided, the unfiltered
   * list includes all policy exemptions associated with the subscription, including those that apply
   * directly or from management groups that contain the given subscription, as well as any applied to
   * objects contained within the subscription.
   * @param options The options parameters.
   */
  list(
    options?: PolicyExemptionsListOptionalParams
  ): PagedAsyncIterableIterator<PolicyExemption>;
  /**
   * This operation retrieves the list of all policy exemptions associated with the given resource group
   * in the given subscription that match the optional given $filter. Valid values for $filter are:
   * 'atScope()', 'atExactScope()', 'excludeExpired()' or 'policyAssignmentId eq '{value}''. If $filter
   * is not provided, the unfiltered list includes all policy exemptions associated with the resource
   * group, including those that apply directly or apply from containing scopes, as well as any applied
   * to resources contained within the resource group.
   * @param resourceGroupName The name of the resource group containing the resource.
   * @param options The options parameters.
   */
  listForResourceGroup(
    resourceGroupName: string,
    options?: PolicyExemptionsListForResourceGroupOptionalParams
  ): PagedAsyncIterableIterator<PolicyExemption>;
  /**
   * This operation retrieves the list of all policy exemptions associated with the specified resource in
   * the given resource group and subscription that match the optional given $filter. Valid values for
   * $filter are: 'atScope()', 'atExactScope()', 'excludeExpired()' or 'policyAssignmentId eq '{value}''.
   * If $filter is not provided, the unfiltered list includes all policy exemptions associated with the
   * resource, including those that apply directly or from all containing scopes, as well as any applied
   * to resources contained within the resource. Three parameters plus the resource name are used to
   * identify a specific resource. If the resource is not part of a parent resource (the more common
   * case), the parent resource path should not be provided (or provided as ''). For example a web app
   * could be specified as ({resourceProviderNamespace} == 'Microsoft.Web', {parentResourcePath} == '',
   * {resourceType} == 'sites', {resourceName} == 'MyWebApp'). If the resource is part of a parent
   * resource, then all parameters should be provided. For example a virtual machine DNS name could be
   * specified as ({resourceProviderNamespace} == 'Microsoft.Compute', {parentResourcePath} ==
   * 'virtualMachines/MyVirtualMachine', {resourceType} == 'domainNames', {resourceName} ==
   * 'MyComputerName'). A convenient alternative to providing the namespace and type name separately is
   * to provide both in the {resourceType} parameter, format: ({resourceProviderNamespace} == '',
   * {parentResourcePath} == '', {resourceType} == 'Microsoft.Web/sites', {resourceName} == 'MyWebApp').
   * @param resourceGroupName The name of the resource group containing the resource.
   * @param resourceProviderNamespace The namespace of the resource provider. For example, the namespace
   *                                  of a virtual machine is Microsoft.Compute (from Microsoft.Compute/virtualMachines)
   * @param parentResourcePath The parent resource path. Use empty string if there is none.
   * @param resourceType The resource type name. For example the type name of a web app is 'sites' (from
   *                     Microsoft.Web/sites).
   * @param resourceName The name of the resource.
   * @param options The options parameters.
   */
  listForResource(
    resourceGroupName: string,
    resourceProviderNamespace: string,
    parentResourcePath: string,
    resourceType: string,
    resourceName: string,
    options?: PolicyExemptionsListForResourceOptionalParams
  ): PagedAsyncIterableIterator<PolicyExemption>;
  /**
   * This operation retrieves the list of all policy exemptions applicable to the management group that
   * match the given $filter. Valid values for $filter are: 'atScope()', 'atExactScope()',
   * 'excludeExpired()' or 'policyAssignmentId eq '{value}''. If $filter=atScope() is provided, the
   * returned list includes all policy exemptions that are assigned to the management group or the
   * management group's ancestors.
   * @param managementGroupId The ID of the management group.
   * @param options The options parameters.
   */
  listForManagementGroup(
    managementGroupId: string,
    options?: PolicyExemptionsListForManagementGroupOptionalParams
  ): PagedAsyncIterableIterator<PolicyExemption>;
  /**
   * This operation deletes a policy exemption, given its name and the scope it was created in. The scope
   * of a policy exemption is the part of its ID preceding
   * '/providers/Microsoft.Authorization/policyExemptions/{policyExemptionName}'.
   * @param scope The scope of the policy exemption. Valid scopes are: management group (format:
   *              '/providers/Microsoft.Management/managementGroups/{managementGroup}'), subscription (format:
   *              '/subscriptions/{subscriptionId}'), resource group (format:
   *              '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}', or resource (format:
   *              '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/[{parentResourcePath}/]{resourceType}/{resourceName}'
   * @param policyExemptionName The name of the policy exemption to delete.
   * @param options The options parameters.
   */
  delete(
    scope: string,
    policyExemptionName: string,
    options?: PolicyExemptionsDeleteOptionalParams
  ): Promise<void>;
  /**
   *  This operation creates or updates a policy exemption with the given scope and name. Policy
   * exemptions apply to all resources contained within their scope. For example, when you create a
   * policy exemption at resource group scope for a policy assignment at the same or above level, the
   * exemption exempts to all applicable resources in the resource group.
   * @param scope The scope of the policy exemption. Valid scopes are: management group (format:
   *              '/providers/Microsoft.Management/managementGroups/{managementGroup}'), subscription (format:
   *              '/subscriptions/{subscriptionId}'), resource group (format:
   *              '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}', or resource (format:
   *              '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/[{parentResourcePath}/]{resourceType}/{resourceName}'
   * @param policyExemptionName The name of the policy exemption to delete.
   * @param parameters Parameters for the policy exemption.
   * @param options The options parameters.
   */
  createOrUpdate(
    scope: string,
    policyExemptionName: string,
    parameters: PolicyExemption,
    options?: PolicyExemptionsCreateOrUpdateOptionalParams
  ): Promise<PolicyExemptionsCreateOrUpdateResponse>;
  /**
   * This operation retrieves a single policy exemption, given its name and the scope it was created at.
   * @param scope The scope of the policy exemption. Valid scopes are: management group (format:
   *              '/providers/Microsoft.Management/managementGroups/{managementGroup}'), subscription (format:
   *              '/subscriptions/{subscriptionId}'), resource group (format:
   *              '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}', or resource (format:
   *              '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/[{parentResourcePath}/]{resourceType}/{resourceName}'
   * @param policyExemptionName The name of the policy exemption to delete.
   * @param options The options parameters.
   */
  get(
    scope: string,
    policyExemptionName: string,
    options?: PolicyExemptionsGetOptionalParams
  ): Promise<PolicyExemptionsGetResponse>;
}
