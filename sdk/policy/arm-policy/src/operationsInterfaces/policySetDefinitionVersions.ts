/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */

import type { PagedAsyncIterableIterator } from "@azure/core-paging";
import type {
  PolicySetDefinitionVersion,
  PolicySetDefinitionVersionsListOptionalParams,
  PolicySetDefinitionVersionsListBuiltInOptionalParams,
  PolicySetDefinitionVersionsListByManagementGroupOptionalParams,
  PolicySetDefinitionVersionsListAllBuiltinsOptionalParams,
  PolicySetDefinitionVersionsListAllBuiltinsResponse,
  PolicySetDefinitionVersionsListAllAtManagementGroupOptionalParams,
  PolicySetDefinitionVersionsListAllAtManagementGroupResponse,
  PolicySetDefinitionVersionsListAllOptionalParams,
  PolicySetDefinitionVersionsListAllResponse,
  PolicySetDefinitionVersionsCreateOrUpdateOptionalParams,
  PolicySetDefinitionVersionsCreateOrUpdateResponse,
  PolicySetDefinitionVersionsDeleteOptionalParams,
  PolicySetDefinitionVersionsGetOptionalParams,
  PolicySetDefinitionVersionsGetResponse,
  PolicySetDefinitionVersionsGetBuiltInOptionalParams,
  PolicySetDefinitionVersionsGetBuiltInResponse,
  PolicySetDefinitionVersionsCreateOrUpdateAtManagementGroupOptionalParams,
  PolicySetDefinitionVersionsCreateOrUpdateAtManagementGroupResponse,
  PolicySetDefinitionVersionsDeleteAtManagementGroupOptionalParams,
  PolicySetDefinitionVersionsGetAtManagementGroupOptionalParams,
  PolicySetDefinitionVersionsGetAtManagementGroupResponse,
} from "../models/index.js";

/// <reference lib="esnext.asynciterable" />
/** Interface representing a PolicySetDefinitionVersions. */
export interface PolicySetDefinitionVersions {
  /**
   * This operation retrieves a list of all the policy set definition versions for the given policy set
   * definition.
   * @param policySetDefinitionName The name of the policy set definition.
   * @param options The options parameters.
   */
  list(
    policySetDefinitionName: string,
    options?: PolicySetDefinitionVersionsListOptionalParams,
  ): PagedAsyncIterableIterator<PolicySetDefinitionVersion>;
  /**
   * This operation retrieves a list of all the built-in policy set definition versions for the given
   * built-in policy set definition.
   * @param policySetDefinitionName The name of the policy set definition.
   * @param options The options parameters.
   */
  listBuiltIn(
    policySetDefinitionName: string,
    options?: PolicySetDefinitionVersionsListBuiltInOptionalParams,
  ): PagedAsyncIterableIterator<PolicySetDefinitionVersion>;
  /**
   * This operation retrieves a list of all the policy set definition versions for the given policy set
   * definition in a given management group.
   * @param managementGroupName The name of the management group. The name is case insensitive.
   * @param policySetDefinitionName The name of the policy set definition.
   * @param options The options parameters.
   */
  listByManagementGroup(
    managementGroupName: string,
    policySetDefinitionName: string,
    options?: PolicySetDefinitionVersionsListByManagementGroupOptionalParams,
  ): PagedAsyncIterableIterator<PolicySetDefinitionVersion>;
  /**
   * This operation lists all the built-in policy set definition versions for all built-in policy set
   * definitions.
   * @param options The options parameters.
   */
  listAllBuiltins(
    options?: PolicySetDefinitionVersionsListAllBuiltinsOptionalParams,
  ): Promise<PolicySetDefinitionVersionsListAllBuiltinsResponse>;
  /**
   * This operation lists all the policy set definition versions for all policy set definitions at the
   * management group scope.
   * @param managementGroupName The name of the management group. The name is case insensitive.
   * @param options The options parameters.
   */
  listAllAtManagementGroup(
    managementGroupName: string,
    options?: PolicySetDefinitionVersionsListAllAtManagementGroupOptionalParams,
  ): Promise<PolicySetDefinitionVersionsListAllAtManagementGroupResponse>;
  /**
   * This operation lists all the policy set definition versions for all policy set definitions within a
   * subscription.
   * @param options The options parameters.
   */
  listAll(
    options?: PolicySetDefinitionVersionsListAllOptionalParams,
  ): Promise<PolicySetDefinitionVersionsListAllResponse>;
  /**
   * This operation creates or updates a policy set definition version in the given subscription with the
   * given name and version.
   * @param policySetDefinitionName The name of the policy set definition.
   * @param policyDefinitionVersion The policy set definition version.  The format is x.y.z where x is
   *                                the major version number, y is the minor version number, and z is the patch number
   * @param parameters The policy set definition properties.
   * @param options The options parameters.
   */
  createOrUpdate(
    policySetDefinitionName: string,
    policyDefinitionVersion: string,
    parameters: PolicySetDefinitionVersion,
    options?: PolicySetDefinitionVersionsCreateOrUpdateOptionalParams,
  ): Promise<PolicySetDefinitionVersionsCreateOrUpdateResponse>;
  /**
   * This operation deletes the policy set definition version in the given subscription with the given
   * name and version.
   * @param policySetDefinitionName The name of the policy set definition.
   * @param policyDefinitionVersion The policy set definition version.  The format is x.y.z where x is
   *                                the major version number, y is the minor version number, and z is the patch number
   * @param options The options parameters.
   */
  delete(
    policySetDefinitionName: string,
    policyDefinitionVersion: string,
    options?: PolicySetDefinitionVersionsDeleteOptionalParams,
  ): Promise<void>;
  /**
   * This operation retrieves the policy set definition version in the given subscription with the given
   * name and version.
   * @param policySetDefinitionName The name of the policy set definition.
   * @param policyDefinitionVersion The policy set definition version.  The format is x.y.z where x is
   *                                the major version number, y is the minor version number, and z is the patch number
   * @param options The options parameters.
   */
  get(
    policySetDefinitionName: string,
    policyDefinitionVersion: string,
    options?: PolicySetDefinitionVersionsGetOptionalParams,
  ): Promise<PolicySetDefinitionVersionsGetResponse>;
  /**
   * This operation retrieves the built-in policy set definition version with the given name and version.
   * @param policySetDefinitionName The name of the policy set definition.
   * @param policyDefinitionVersion The policy set definition version.  The format is x.y.z where x is
   *                                the major version number, y is the minor version number, and z is the patch number
   * @param options The options parameters.
   */
  getBuiltIn(
    policySetDefinitionName: string,
    policyDefinitionVersion: string,
    options?: PolicySetDefinitionVersionsGetBuiltInOptionalParams,
  ): Promise<PolicySetDefinitionVersionsGetBuiltInResponse>;
  /**
   * This operation creates or updates a policy set definition version in the given management group with
   * the given name and version.
   * @param managementGroupName The name of the management group. The name is case insensitive.
   * @param policySetDefinitionName The name of the policy set definition.
   * @param policyDefinitionVersion The policy set definition version.  The format is x.y.z where x is
   *                                the major version number, y is the minor version number, and z is the patch number
   * @param parameters The policy set definition version properties.
   * @param options The options parameters.
   */
  createOrUpdateAtManagementGroup(
    managementGroupName: string,
    policySetDefinitionName: string,
    policyDefinitionVersion: string,
    parameters: PolicySetDefinitionVersion,
    options?: PolicySetDefinitionVersionsCreateOrUpdateAtManagementGroupOptionalParams,
  ): Promise<PolicySetDefinitionVersionsCreateOrUpdateAtManagementGroupResponse>;
  /**
   * This operation deletes the policy set definition version in the given management group with the
   * given name and version.
   * @param managementGroupName The name of the management group. The name is case insensitive.
   * @param policySetDefinitionName The name of the policy set definition.
   * @param policyDefinitionVersion The policy set definition version.  The format is x.y.z where x is
   *                                the major version number, y is the minor version number, and z is the patch number
   * @param options The options parameters.
   */
  deleteAtManagementGroup(
    managementGroupName: string,
    policySetDefinitionName: string,
    policyDefinitionVersion: string,
    options?: PolicySetDefinitionVersionsDeleteAtManagementGroupOptionalParams,
  ): Promise<void>;
  /**
   * This operation retrieves the policy set definition version in the given management group with the
   * given name and version.
   * @param managementGroupName The name of the management group. The name is case insensitive.
   * @param policySetDefinitionName The name of the policy set definition.
   * @param policyDefinitionVersion The policy set definition version.  The format is x.y.z where x is
   *                                the major version number, y is the minor version number, and z is the patch number
   * @param options The options parameters.
   */
  getAtManagementGroup(
    managementGroupName: string,
    policySetDefinitionName: string,
    policyDefinitionVersion: string,
    options?: PolicySetDefinitionVersionsGetAtManagementGroupOptionalParams,
  ): Promise<PolicySetDefinitionVersionsGetAtManagementGroupResponse>;
}
