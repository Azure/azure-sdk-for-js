/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */

import { PagedAsyncIterableIterator } from "@azure/core-paging";
import {
  PolicyDefinition,
  PolicyDefinitionsListOptionalParams,
  PolicyDefinitionsListBuiltInOptionalParams,
  PolicyDefinitionsListByManagementGroupOptionalParams,
  PolicyDefinitionsCreateOrUpdateOptionalParams,
  PolicyDefinitionsCreateOrUpdateResponse,
  PolicyDefinitionsDeleteOptionalParams,
  PolicyDefinitionsGetOptionalParams,
  PolicyDefinitionsGetResponse,
  PolicyDefinitionsGetBuiltInOptionalParams,
  PolicyDefinitionsGetBuiltInResponse,
  PolicyDefinitionsCreateOrUpdateAtManagementGroupOptionalParams,
  PolicyDefinitionsCreateOrUpdateAtManagementGroupResponse,
  PolicyDefinitionsDeleteAtManagementGroupOptionalParams,
  PolicyDefinitionsGetAtManagementGroupOptionalParams,
  PolicyDefinitionsGetAtManagementGroupResponse
} from "../models";

/// <reference lib="esnext.asynciterable" />
/** Interface representing a PolicyDefinitions. */
export interface PolicyDefinitions {
  /**
   * Gets all the policy definitions for a subscription.
   * @param options The options parameters.
   */
  list(
    options?: PolicyDefinitionsListOptionalParams
  ): PagedAsyncIterableIterator<PolicyDefinition>;
  /**
   * Gets all the built in policy definitions.
   * @param options The options parameters.
   */
  listBuiltIn(
    options?: PolicyDefinitionsListBuiltInOptionalParams
  ): PagedAsyncIterableIterator<PolicyDefinition>;
  /**
   * Gets all the policy definitions for a subscription at management group level.
   * @param managementGroupId The ID of the management group.
   * @param options The options parameters.
   */
  listByManagementGroup(
    managementGroupId: string,
    options?: PolicyDefinitionsListByManagementGroupOptionalParams
  ): PagedAsyncIterableIterator<PolicyDefinition>;
  /**
   * Creates or updates a policy definition.
   * @param policyDefinitionName The name of the policy definition to create.
   * @param parameters The policy definition properties.
   * @param options The options parameters.
   */
  createOrUpdate(
    policyDefinitionName: string,
    parameters: PolicyDefinition,
    options?: PolicyDefinitionsCreateOrUpdateOptionalParams
  ): Promise<PolicyDefinitionsCreateOrUpdateResponse>;
  /**
   * Deletes a policy definition.
   * @param policyDefinitionName The name of the policy definition to delete.
   * @param options The options parameters.
   */
  delete(
    policyDefinitionName: string,
    options?: PolicyDefinitionsDeleteOptionalParams
  ): Promise<void>;
  /**
   * Gets the policy definition.
   * @param policyDefinitionName The name of the policy definition to get.
   * @param options The options parameters.
   */
  get(
    policyDefinitionName: string,
    options?: PolicyDefinitionsGetOptionalParams
  ): Promise<PolicyDefinitionsGetResponse>;
  /**
   * Gets the built in policy definition.
   * @param policyDefinitionName The name of the built in policy definition to get.
   * @param options The options parameters.
   */
  getBuiltIn(
    policyDefinitionName: string,
    options?: PolicyDefinitionsGetBuiltInOptionalParams
  ): Promise<PolicyDefinitionsGetBuiltInResponse>;
  /**
   * Creates or updates a policy definition at management group level.
   * @param policyDefinitionName The name of the policy definition to create.
   * @param managementGroupId The ID of the management group.
   * @param parameters The policy definition properties.
   * @param options The options parameters.
   */
  createOrUpdateAtManagementGroup(
    policyDefinitionName: string,
    managementGroupId: string,
    parameters: PolicyDefinition,
    options?: PolicyDefinitionsCreateOrUpdateAtManagementGroupOptionalParams
  ): Promise<PolicyDefinitionsCreateOrUpdateAtManagementGroupResponse>;
  /**
   * Deletes a policy definition at management group level.
   * @param policyDefinitionName The name of the policy definition to delete.
   * @param managementGroupId The ID of the management group.
   * @param options The options parameters.
   */
  deleteAtManagementGroup(
    policyDefinitionName: string,
    managementGroupId: string,
    options?: PolicyDefinitionsDeleteAtManagementGroupOptionalParams
  ): Promise<void>;
  /**
   * Gets the policy definition at management group level.
   * @param policyDefinitionName The name of the policy definition to get.
   * @param managementGroupId The ID of the management group.
   * @param options The options parameters.
   */
  getAtManagementGroup(
    policyDefinitionName: string,
    managementGroupId: string,
    options?: PolicyDefinitionsGetAtManagementGroupOptionalParams
  ): Promise<PolicyDefinitionsGetAtManagementGroupResponse>;
}
