/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */

import { PagedAsyncIterableIterator } from "@azure/core-paging";
import {
  PolicyAssignment,
  PolicyAssignmentsListForResourceGroupOptionalParams,
  PolicyAssignmentsListForResourceOptionalParams,
  PolicyAssignmentsListOptionalParams,
  PolicyAssignmentsDeleteOptionalParams,
  PolicyAssignmentsDeleteResponse,
  PolicyAssignmentsCreateOptionalParams,
  PolicyAssignmentsCreateResponse,
  PolicyAssignmentsGetOptionalParams,
  PolicyAssignmentsGetResponse,
  PolicyAssignmentsDeleteByIdOptionalParams,
  PolicyAssignmentsDeleteByIdResponse,
  PolicyAssignmentsCreateByIdOptionalParams,
  PolicyAssignmentsCreateByIdResponse,
  PolicyAssignmentsGetByIdOptionalParams,
  PolicyAssignmentsGetByIdResponse
} from "../models";

/// <reference lib="esnext.asynciterable" />
/** Interface representing a PolicyAssignments. */
export interface PolicyAssignments {
  /**
   * Gets policy assignments for the resource group.
   * @param resourceGroupName The name of the resource group that contains policy assignments.
   * @param options The options parameters.
   */
  listForResourceGroup(
    resourceGroupName: string,
    options?: PolicyAssignmentsListForResourceGroupOptionalParams
  ): PagedAsyncIterableIterator<PolicyAssignment>;
  /**
   * Gets policy assignments for a resource.
   * @param resourceGroupName The name of the resource group containing the resource. The name is case
   *                          insensitive.
   * @param resourceProviderNamespace The namespace of the resource provider.
   * @param parentResourcePath The parent resource path.
   * @param resourceType The resource type.
   * @param resourceName The name of the resource with policy assignments.
   * @param options The options parameters.
   */
  listForResource(
    resourceGroupName: string,
    resourceProviderNamespace: string,
    parentResourcePath: string,
    resourceType: string,
    resourceName: string,
    options?: PolicyAssignmentsListForResourceOptionalParams
  ): PagedAsyncIterableIterator<PolicyAssignment>;
  /**
   * Gets all the policy assignments for a subscription.
   * @param options The options parameters.
   */
  list(
    options?: PolicyAssignmentsListOptionalParams
  ): PagedAsyncIterableIterator<PolicyAssignment>;
  /**
   * Deletes a policy assignment.
   * @param scope The scope of the policy assignment.
   * @param policyAssignmentName The name of the policy assignment to delete.
   * @param options The options parameters.
   */
  delete(
    scope: string,
    policyAssignmentName: string,
    options?: PolicyAssignmentsDeleteOptionalParams
  ): Promise<PolicyAssignmentsDeleteResponse>;
  /**
   * Policy assignments are inherited by child resources. For example, when you apply a policy to a
   * resource group that policy is assigned to all resources in the group.
   * @param scope The scope of the policy assignment.
   * @param policyAssignmentName The name of the policy assignment.
   * @param parameters Parameters for the policy assignment.
   * @param options The options parameters.
   */
  create(
    scope: string,
    policyAssignmentName: string,
    parameters: PolicyAssignment,
    options?: PolicyAssignmentsCreateOptionalParams
  ): Promise<PolicyAssignmentsCreateResponse>;
  /**
   * Gets a policy assignment.
   * @param scope The scope of the policy assignment.
   * @param policyAssignmentName The name of the policy assignment to get.
   * @param options The options parameters.
   */
  get(
    scope: string,
    policyAssignmentName: string,
    options?: PolicyAssignmentsGetOptionalParams
  ): Promise<PolicyAssignmentsGetResponse>;
  /**
   * When providing a scope for the assignment, use '/subscriptions/{subscription-id}/' for
   * subscriptions, '/subscriptions/{subscription-id}/resourceGroups/{resource-group-name}' for resource
   * groups, and
   * '/subscriptions/{subscription-id}/resourceGroups/{resource-group-name}/providers/{resource-provider-namespace}/{resource-type}/{resource-name}'
   * for resources.
   * @param policyAssignmentId The ID of the policy assignment to delete. Use the format
   *                           '/{scope}/providers/Microsoft.Authorization/policyAssignments/{policy-assignment-name}'.
   * @param options The options parameters.
   */
  deleteById(
    policyAssignmentId: string,
    options?: PolicyAssignmentsDeleteByIdOptionalParams
  ): Promise<PolicyAssignmentsDeleteByIdResponse>;
  /**
   * Policy assignments are inherited by child resources. For example, when you apply a policy to a
   * resource group that policy is assigned to all resources in the group. When providing a scope for the
   * assignment, use '/subscriptions/{subscription-id}/' for subscriptions,
   * '/subscriptions/{subscription-id}/resourceGroups/{resource-group-name}' for resource groups, and
   * '/subscriptions/{subscription-id}/resourceGroups/{resource-group-name}/providers/{resource-provider-namespace}/{resource-type}/{resource-name}'
   * for resources.
   * @param policyAssignmentId The ID of the policy assignment to create. Use the format
   *                           '/{scope}/providers/Microsoft.Authorization/policyAssignments/{policy-assignment-name}'.
   * @param parameters Parameters for policy assignment.
   * @param options The options parameters.
   */
  createById(
    policyAssignmentId: string,
    parameters: PolicyAssignment,
    options?: PolicyAssignmentsCreateByIdOptionalParams
  ): Promise<PolicyAssignmentsCreateByIdResponse>;
  /**
   * When providing a scope for the assignment, use '/subscriptions/{subscription-id}/' for
   * subscriptions, '/subscriptions/{subscription-id}/resourceGroups/{resource-group-name}' for resource
   * groups, and
   * '/subscriptions/{subscription-id}/resourceGroups/{resource-group-name}/providers/{resource-provider-namespace}/{resource-type}/{resource-name}'
   * for resources.
   * @param policyAssignmentId The ID of the policy assignment to get. Use the format
   *                           '/{scope}/providers/Microsoft.Authorization/policyAssignments/{policy-assignment-name}'.
   * @param options The options parameters.
   */
  getById(
    policyAssignmentId: string,
    options?: PolicyAssignmentsGetByIdOptionalParams
  ): Promise<PolicyAssignmentsGetByIdResponse>;
}
