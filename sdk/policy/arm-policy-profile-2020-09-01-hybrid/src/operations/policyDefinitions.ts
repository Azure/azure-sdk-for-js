/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */

import { PagedAsyncIterableIterator } from "@azure/core-paging";
import { PolicyDefinitions } from "../operationsInterfaces";
import * as coreClient from "@azure/core-client";
import * as Mappers from "../models/mappers";
import * as Parameters from "../models/parameters";
import { PolicyClient } from "../policyClient";
import {
  PolicyDefinition,
  PolicyDefinitionsListNextOptionalParams,
  PolicyDefinitionsListOptionalParams,
  PolicyDefinitionsListBuiltInNextOptionalParams,
  PolicyDefinitionsListBuiltInOptionalParams,
  PolicyDefinitionsListByManagementGroupNextOptionalParams,
  PolicyDefinitionsListByManagementGroupOptionalParams,
  PolicyDefinitionsCreateOrUpdateOptionalParams,
  PolicyDefinitionsCreateOrUpdateResponse,
  PolicyDefinitionsDeleteOptionalParams,
  PolicyDefinitionsGetOptionalParams,
  PolicyDefinitionsGetResponse,
  PolicyDefinitionsGetBuiltInOptionalParams,
  PolicyDefinitionsGetBuiltInResponse,
  PolicyDefinitionsCreateOrUpdateAtManagementGroupOptionalParams,
  PolicyDefinitionsCreateOrUpdateAtManagementGroupResponse,
  PolicyDefinitionsDeleteAtManagementGroupOptionalParams,
  PolicyDefinitionsGetAtManagementGroupOptionalParams,
  PolicyDefinitionsGetAtManagementGroupResponse,
  PolicyDefinitionsListResponse,
  PolicyDefinitionsListBuiltInResponse,
  PolicyDefinitionsListByManagementGroupResponse,
  PolicyDefinitionsListNextResponse,
  PolicyDefinitionsListBuiltInNextResponse,
  PolicyDefinitionsListByManagementGroupNextResponse
} from "../models";

/// <reference lib="esnext.asynciterable" />
/** Class containing PolicyDefinitions operations. */
export class PolicyDefinitionsImpl implements PolicyDefinitions {
  private readonly client: PolicyClient;

  /**
   * Initialize a new instance of the class PolicyDefinitions class.
   * @param client Reference to the service client
   */
  constructor(client: PolicyClient) {
    this.client = client;
  }

  /**
   * Gets all the policy definitions for a subscription.
   * @param options The options parameters.
   */
  public list(
    options?: PolicyDefinitionsListOptionalParams
  ): PagedAsyncIterableIterator<PolicyDefinition> {
    const iter = this.listPagingAll(options);
    return {
      next() {
        return iter.next();
      },
      [Symbol.asyncIterator]() {
        return this;
      },
      byPage: () => {
        return this.listPagingPage(options);
      }
    };
  }

  private async *listPagingPage(
    options?: PolicyDefinitionsListOptionalParams
  ): AsyncIterableIterator<PolicyDefinition[]> {
    let result = await this._list(options);
    yield result.value || [];
    let continuationToken = result.nextLink;
    while (continuationToken) {
      result = await this._listNext(continuationToken, options);
      continuationToken = result.nextLink;
      yield result.value || [];
    }
  }

  private async *listPagingAll(
    options?: PolicyDefinitionsListOptionalParams
  ): AsyncIterableIterator<PolicyDefinition> {
    for await (const page of this.listPagingPage(options)) {
      yield* page;
    }
  }

  /**
   * Gets all the built in policy definitions.
   * @param options The options parameters.
   */
  public listBuiltIn(
    options?: PolicyDefinitionsListBuiltInOptionalParams
  ): PagedAsyncIterableIterator<PolicyDefinition> {
    const iter = this.listBuiltInPagingAll(options);
    return {
      next() {
        return iter.next();
      },
      [Symbol.asyncIterator]() {
        return this;
      },
      byPage: () => {
        return this.listBuiltInPagingPage(options);
      }
    };
  }

  private async *listBuiltInPagingPage(
    options?: PolicyDefinitionsListBuiltInOptionalParams
  ): AsyncIterableIterator<PolicyDefinition[]> {
    let result = await this._listBuiltIn(options);
    yield result.value || [];
    let continuationToken = result.nextLink;
    while (continuationToken) {
      result = await this._listBuiltInNext(continuationToken, options);
      continuationToken = result.nextLink;
      yield result.value || [];
    }
  }

  private async *listBuiltInPagingAll(
    options?: PolicyDefinitionsListBuiltInOptionalParams
  ): AsyncIterableIterator<PolicyDefinition> {
    for await (const page of this.listBuiltInPagingPage(options)) {
      yield* page;
    }
  }

  /**
   * Gets all the policy definitions for a subscription at management group level.
   * @param managementGroupId The ID of the management group.
   * @param options The options parameters.
   */
  public listByManagementGroup(
    managementGroupId: string,
    options?: PolicyDefinitionsListByManagementGroupOptionalParams
  ): PagedAsyncIterableIterator<PolicyDefinition> {
    const iter = this.listByManagementGroupPagingAll(
      managementGroupId,
      options
    );
    return {
      next() {
        return iter.next();
      },
      [Symbol.asyncIterator]() {
        return this;
      },
      byPage: () => {
        return this.listByManagementGroupPagingPage(managementGroupId, options);
      }
    };
  }

  private async *listByManagementGroupPagingPage(
    managementGroupId: string,
    options?: PolicyDefinitionsListByManagementGroupOptionalParams
  ): AsyncIterableIterator<PolicyDefinition[]> {
    let result = await this._listByManagementGroup(managementGroupId, options);
    yield result.value || [];
    let continuationToken = result.nextLink;
    while (continuationToken) {
      result = await this._listByManagementGroupNext(
        managementGroupId,
        continuationToken,
        options
      );
      continuationToken = result.nextLink;
      yield result.value || [];
    }
  }

  private async *listByManagementGroupPagingAll(
    managementGroupId: string,
    options?: PolicyDefinitionsListByManagementGroupOptionalParams
  ): AsyncIterableIterator<PolicyDefinition> {
    for await (const page of this.listByManagementGroupPagingPage(
      managementGroupId,
      options
    )) {
      yield* page;
    }
  }

  /**
   * Creates or updates a policy definition.
   * @param policyDefinitionName The name of the policy definition to create.
   * @param parameters The policy definition properties.
   * @param options The options parameters.
   */
  createOrUpdate(
    policyDefinitionName: string,
    parameters: PolicyDefinition,
    options?: PolicyDefinitionsCreateOrUpdateOptionalParams
  ): Promise<PolicyDefinitionsCreateOrUpdateResponse> {
    return this.client.sendOperationRequest(
      { policyDefinitionName, parameters, options },
      createOrUpdateOperationSpec
    );
  }

  /**
   * Deletes a policy definition.
   * @param policyDefinitionName The name of the policy definition to delete.
   * @param options The options parameters.
   */
  delete(
    policyDefinitionName: string,
    options?: PolicyDefinitionsDeleteOptionalParams
  ): Promise<void> {
    return this.client.sendOperationRequest(
      { policyDefinitionName, options },
      deleteOperationSpec
    );
  }

  /**
   * Gets the policy definition.
   * @param policyDefinitionName The name of the policy definition to get.
   * @param options The options parameters.
   */
  get(
    policyDefinitionName: string,
    options?: PolicyDefinitionsGetOptionalParams
  ): Promise<PolicyDefinitionsGetResponse> {
    return this.client.sendOperationRequest(
      { policyDefinitionName, options },
      getOperationSpec
    );
  }

  /**
   * Gets the built in policy definition.
   * @param policyDefinitionName The name of the built in policy definition to get.
   * @param options The options parameters.
   */
  getBuiltIn(
    policyDefinitionName: string,
    options?: PolicyDefinitionsGetBuiltInOptionalParams
  ): Promise<PolicyDefinitionsGetBuiltInResponse> {
    return this.client.sendOperationRequest(
      { policyDefinitionName, options },
      getBuiltInOperationSpec
    );
  }

  /**
   * Creates or updates a policy definition at management group level.
   * @param policyDefinitionName The name of the policy definition to create.
   * @param managementGroupId The ID of the management group.
   * @param parameters The policy definition properties.
   * @param options The options parameters.
   */
  createOrUpdateAtManagementGroup(
    policyDefinitionName: string,
    managementGroupId: string,
    parameters: PolicyDefinition,
    options?: PolicyDefinitionsCreateOrUpdateAtManagementGroupOptionalParams
  ): Promise<PolicyDefinitionsCreateOrUpdateAtManagementGroupResponse> {
    return this.client.sendOperationRequest(
      { policyDefinitionName, managementGroupId, parameters, options },
      createOrUpdateAtManagementGroupOperationSpec
    );
  }

  /**
   * Deletes a policy definition at management group level.
   * @param policyDefinitionName The name of the policy definition to delete.
   * @param managementGroupId The ID of the management group.
   * @param options The options parameters.
   */
  deleteAtManagementGroup(
    policyDefinitionName: string,
    managementGroupId: string,
    options?: PolicyDefinitionsDeleteAtManagementGroupOptionalParams
  ): Promise<void> {
    return this.client.sendOperationRequest(
      { policyDefinitionName, managementGroupId, options },
      deleteAtManagementGroupOperationSpec
    );
  }

  /**
   * Gets the policy definition at management group level.
   * @param policyDefinitionName The name of the policy definition to get.
   * @param managementGroupId The ID of the management group.
   * @param options The options parameters.
   */
  getAtManagementGroup(
    policyDefinitionName: string,
    managementGroupId: string,
    options?: PolicyDefinitionsGetAtManagementGroupOptionalParams
  ): Promise<PolicyDefinitionsGetAtManagementGroupResponse> {
    return this.client.sendOperationRequest(
      { policyDefinitionName, managementGroupId, options },
      getAtManagementGroupOperationSpec
    );
  }

  /**
   * Gets all the policy definitions for a subscription.
   * @param options The options parameters.
   */
  private _list(
    options?: PolicyDefinitionsListOptionalParams
  ): Promise<PolicyDefinitionsListResponse> {
    return this.client.sendOperationRequest({ options }, listOperationSpec);
  }

  /**
   * Gets all the built in policy definitions.
   * @param options The options parameters.
   */
  private _listBuiltIn(
    options?: PolicyDefinitionsListBuiltInOptionalParams
  ): Promise<PolicyDefinitionsListBuiltInResponse> {
    return this.client.sendOperationRequest(
      { options },
      listBuiltInOperationSpec
    );
  }

  /**
   * Gets all the policy definitions for a subscription at management group level.
   * @param managementGroupId The ID of the management group.
   * @param options The options parameters.
   */
  private _listByManagementGroup(
    managementGroupId: string,
    options?: PolicyDefinitionsListByManagementGroupOptionalParams
  ): Promise<PolicyDefinitionsListByManagementGroupResponse> {
    return this.client.sendOperationRequest(
      { managementGroupId, options },
      listByManagementGroupOperationSpec
    );
  }

  /**
   * ListNext
   * @param nextLink The nextLink from the previous successful call to the List method.
   * @param options The options parameters.
   */
  private _listNext(
    nextLink: string,
    options?: PolicyDefinitionsListNextOptionalParams
  ): Promise<PolicyDefinitionsListNextResponse> {
    return this.client.sendOperationRequest(
      { nextLink, options },
      listNextOperationSpec
    );
  }

  /**
   * ListBuiltInNext
   * @param nextLink The nextLink from the previous successful call to the ListBuiltIn method.
   * @param options The options parameters.
   */
  private _listBuiltInNext(
    nextLink: string,
    options?: PolicyDefinitionsListBuiltInNextOptionalParams
  ): Promise<PolicyDefinitionsListBuiltInNextResponse> {
    return this.client.sendOperationRequest(
      { nextLink, options },
      listBuiltInNextOperationSpec
    );
  }

  /**
   * ListByManagementGroupNext
   * @param managementGroupId The ID of the management group.
   * @param nextLink The nextLink from the previous successful call to the ListByManagementGroup method.
   * @param options The options parameters.
   */
  private _listByManagementGroupNext(
    managementGroupId: string,
    nextLink: string,
    options?: PolicyDefinitionsListByManagementGroupNextOptionalParams
  ): Promise<PolicyDefinitionsListByManagementGroupNextResponse> {
    return this.client.sendOperationRequest(
      { managementGroupId, nextLink, options },
      listByManagementGroupNextOperationSpec
    );
  }
}
// Operation Specifications
const serializer = coreClient.createSerializer(Mappers, /* isXml */ false);

const createOrUpdateOperationSpec: coreClient.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/providers/Microsoft.Authorization/policyDefinitions/{policyDefinitionName}",
  httpMethod: "PUT",
  responses: {
    201: {
      bodyMapper: Mappers.PolicyDefinition
    }
  },
  requestBody: Parameters.parameters,
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.policyDefinitionName,
    Parameters.subscriptionId
  ],
  headerParameters: [Parameters.contentType, Parameters.accept],
  mediaType: "json",
  serializer
};
const deleteOperationSpec: coreClient.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/providers/Microsoft.Authorization/policyDefinitions/{policyDefinitionName}",
  httpMethod: "DELETE",
  responses: { 200: {}, 204: {} },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.policyDefinitionName,
    Parameters.subscriptionId
  ],
  serializer
};
const getOperationSpec: coreClient.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/providers/Microsoft.Authorization/policyDefinitions/{policyDefinitionName}",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.PolicyDefinition
    }
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.policyDefinitionName,
    Parameters.subscriptionId
  ],
  headerParameters: [Parameters.accept],
  serializer
};
const getBuiltInOperationSpec: coreClient.OperationSpec = {
  path:
    "/providers/Microsoft.Authorization/policyDefinitions/{policyDefinitionName}",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.PolicyDefinition
    }
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [Parameters.$host, Parameters.policyDefinitionName],
  headerParameters: [Parameters.accept],
  serializer
};
const createOrUpdateAtManagementGroupOperationSpec: coreClient.OperationSpec = {
  path:
    "/providers/Microsoft.Management/managementgroups/{managementGroupId}/providers/Microsoft.Authorization/policyDefinitions/{policyDefinitionName}",
  httpMethod: "PUT",
  responses: {
    201: {
      bodyMapper: Mappers.PolicyDefinition
    }
  },
  requestBody: Parameters.parameters,
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.policyDefinitionName,
    Parameters.managementGroupId
  ],
  headerParameters: [Parameters.contentType, Parameters.accept],
  mediaType: "json",
  serializer
};
const deleteAtManagementGroupOperationSpec: coreClient.OperationSpec = {
  path:
    "/providers/Microsoft.Management/managementgroups/{managementGroupId}/providers/Microsoft.Authorization/policyDefinitions/{policyDefinitionName}",
  httpMethod: "DELETE",
  responses: { 200: {}, 204: {} },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.policyDefinitionName,
    Parameters.managementGroupId
  ],
  serializer
};
const getAtManagementGroupOperationSpec: coreClient.OperationSpec = {
  path:
    "/providers/Microsoft.Management/managementgroups/{managementGroupId}/providers/Microsoft.Authorization/policyDefinitions/{policyDefinitionName}",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.PolicyDefinition
    }
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.policyDefinitionName,
    Parameters.managementGroupId
  ],
  headerParameters: [Parameters.accept],
  serializer
};
const listOperationSpec: coreClient.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/providers/Microsoft.Authorization/policyDefinitions",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.PolicyDefinitionListResult
    }
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [Parameters.$host, Parameters.subscriptionId],
  headerParameters: [Parameters.accept],
  serializer
};
const listBuiltInOperationSpec: coreClient.OperationSpec = {
  path: "/providers/Microsoft.Authorization/policyDefinitions",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.PolicyDefinitionListResult
    }
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [Parameters.$host],
  headerParameters: [Parameters.accept],
  serializer
};
const listByManagementGroupOperationSpec: coreClient.OperationSpec = {
  path:
    "/providers/Microsoft.Management/managementgroups/{managementGroupId}/providers/Microsoft.Authorization/policyDefinitions",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.PolicyDefinitionListResult
    }
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [Parameters.$host, Parameters.managementGroupId],
  headerParameters: [Parameters.accept],
  serializer
};
const listNextOperationSpec: coreClient.OperationSpec = {
  path: "{nextLink}",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.PolicyDefinitionListResult
    }
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.nextLink
  ],
  headerParameters: [Parameters.accept],
  serializer
};
const listBuiltInNextOperationSpec: coreClient.OperationSpec = {
  path: "{nextLink}",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.PolicyDefinitionListResult
    }
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [Parameters.$host, Parameters.nextLink],
  headerParameters: [Parameters.accept],
  serializer
};
const listByManagementGroupNextOperationSpec: coreClient.OperationSpec = {
  path: "{nextLink}",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.PolicyDefinitionListResult
    }
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.managementGroupId,
    Parameters.nextLink
  ],
  headerParameters: [Parameters.accept],
  serializer
};
