/*
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is
 * regenerated.
 */

import * as msRest from "@azure/ms-rest-js";
import * as Models from "../models";
import * as Mappers from "../models/policyAssignmentsMappers";
import * as Parameters from "../models/parameters";
import { PolicyClientContext } from "../policyClientContext";

/** Class representing a PolicyAssignments. */
export class PolicyAssignments {
  private readonly client: PolicyClientContext;

  /**
   * Create a PolicyAssignments.
   * @param {PolicyClientContext} client Reference to the service client.
   */
  constructor(client: PolicyClientContext) {
    this.client = client;
  }

  /**
   * Deletes a policy assignment.
   * @param scope The scope of the policy assignment.
   * @param policyAssignmentName The name of the policy assignment to delete.
   * @param [options] The optional parameters
   * @returns Promise<Models.PolicyAssignmentsDeleteMethodResponse>
   */
  deleteMethod(scope: string, policyAssignmentName: string, options?: msRest.RequestOptionsBase): Promise<Models.PolicyAssignmentsDeleteMethodResponse>;
  /**
   * @param scope The scope of the policy assignment.
   * @param policyAssignmentName The name of the policy assignment to delete.
   * @param callback The callback
   */
  deleteMethod(scope: string, policyAssignmentName: string, callback: msRest.ServiceCallback<Models.PolicyAssignment>): void;
  /**
   * @param scope The scope of the policy assignment.
   * @param policyAssignmentName The name of the policy assignment to delete.
   * @param options The optional parameters
   * @param callback The callback
   */
  deleteMethod(scope: string, policyAssignmentName: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.PolicyAssignment>): void;
  deleteMethod(scope: string, policyAssignmentName: string, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<Models.PolicyAssignment>, callback?: msRest.ServiceCallback<Models.PolicyAssignment>): Promise<Models.PolicyAssignmentsDeleteMethodResponse> {
    return this.client.sendOperationRequest(
      {
        scope,
        policyAssignmentName,
        options
      },
      deleteMethodOperationSpec,
      callback) as Promise<Models.PolicyAssignmentsDeleteMethodResponse>;
  }

  /**
   * Policy assignments are inherited by child resources. For example, when you apply a policy to a
   * resource group that policy is assigned to all resources in the group.
   * @summary Creates a policy assignment.
   * @param scope The scope of the policy assignment.
   * @param policyAssignmentName The name of the policy assignment.
   * @param parameters Parameters for the policy assignment.
   * @param [options] The optional parameters
   * @returns Promise<Models.PolicyAssignmentsCreateResponse>
   */
  create(scope: string, policyAssignmentName: string, parameters: Models.PolicyAssignment, options?: msRest.RequestOptionsBase): Promise<Models.PolicyAssignmentsCreateResponse>;
  /**
   * @param scope The scope of the policy assignment.
   * @param policyAssignmentName The name of the policy assignment.
   * @param parameters Parameters for the policy assignment.
   * @param callback The callback
   */
  create(scope: string, policyAssignmentName: string, parameters: Models.PolicyAssignment, callback: msRest.ServiceCallback<Models.PolicyAssignment>): void;
  /**
   * @param scope The scope of the policy assignment.
   * @param policyAssignmentName The name of the policy assignment.
   * @param parameters Parameters for the policy assignment.
   * @param options The optional parameters
   * @param callback The callback
   */
  create(scope: string, policyAssignmentName: string, parameters: Models.PolicyAssignment, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.PolicyAssignment>): void;
  create(scope: string, policyAssignmentName: string, parameters: Models.PolicyAssignment, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<Models.PolicyAssignment>, callback?: msRest.ServiceCallback<Models.PolicyAssignment>): Promise<Models.PolicyAssignmentsCreateResponse> {
    return this.client.sendOperationRequest(
      {
        scope,
        policyAssignmentName,
        parameters,
        options
      },
      createOperationSpec,
      callback) as Promise<Models.PolicyAssignmentsCreateResponse>;
  }

  /**
   * Gets a policy assignment.
   * @param scope The scope of the policy assignment.
   * @param policyAssignmentName The name of the policy assignment to get.
   * @param [options] The optional parameters
   * @returns Promise<Models.PolicyAssignmentsGetResponse>
   */
  get(scope: string, policyAssignmentName: string, options?: msRest.RequestOptionsBase): Promise<Models.PolicyAssignmentsGetResponse>;
  /**
   * @param scope The scope of the policy assignment.
   * @param policyAssignmentName The name of the policy assignment to get.
   * @param callback The callback
   */
  get(scope: string, policyAssignmentName: string, callback: msRest.ServiceCallback<Models.PolicyAssignment>): void;
  /**
   * @param scope The scope of the policy assignment.
   * @param policyAssignmentName The name of the policy assignment to get.
   * @param options The optional parameters
   * @param callback The callback
   */
  get(scope: string, policyAssignmentName: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.PolicyAssignment>): void;
  get(scope: string, policyAssignmentName: string, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<Models.PolicyAssignment>, callback?: msRest.ServiceCallback<Models.PolicyAssignment>): Promise<Models.PolicyAssignmentsGetResponse> {
    return this.client.sendOperationRequest(
      {
        scope,
        policyAssignmentName,
        options
      },
      getOperationSpec,
      callback) as Promise<Models.PolicyAssignmentsGetResponse>;
  }

  /**
   * Gets policy assignments for the resource group.
   * @param resourceGroupName The name of the resource group that contains policy assignments.
   * @param [options] The optional parameters
   * @returns Promise<Models.PolicyAssignmentsListForResourceGroupResponse>
   */
  listForResourceGroup(resourceGroupName: string, options?: Models.PolicyAssignmentsListForResourceGroupOptionalParams): Promise<Models.PolicyAssignmentsListForResourceGroupResponse>;
  /**
   * @param resourceGroupName The name of the resource group that contains policy assignments.
   * @param callback The callback
   */
  listForResourceGroup(resourceGroupName: string, callback: msRest.ServiceCallback<Models.PolicyAssignmentListResult>): void;
  /**
   * @param resourceGroupName The name of the resource group that contains policy assignments.
   * @param options The optional parameters
   * @param callback The callback
   */
  listForResourceGroup(resourceGroupName: string, options: Models.PolicyAssignmentsListForResourceGroupOptionalParams, callback: msRest.ServiceCallback<Models.PolicyAssignmentListResult>): void;
  listForResourceGroup(resourceGroupName: string, options?: Models.PolicyAssignmentsListForResourceGroupOptionalParams | msRest.ServiceCallback<Models.PolicyAssignmentListResult>, callback?: msRest.ServiceCallback<Models.PolicyAssignmentListResult>): Promise<Models.PolicyAssignmentsListForResourceGroupResponse> {
    return this.client.sendOperationRequest(
      {
        resourceGroupName,
        options
      },
      listForResourceGroupOperationSpec,
      callback) as Promise<Models.PolicyAssignmentsListForResourceGroupResponse>;
  }

  /**
   * Gets policy assignments for a resource.
   * @param resourceGroupName The name of the resource group containing the resource. The name is
   * case insensitive.
   * @param resourceProviderNamespace The namespace of the resource provider.
   * @param parentResourcePath The parent resource path.
   * @param resourceType The resource type.
   * @param resourceName The name of the resource with policy assignments.
   * @param [options] The optional parameters
   * @deprecated This operation is deprecated. Please do not use it any longer.
   * @returns Promise<Models.PolicyAssignmentsListForResourceResponse>
   */
  listForResource(resourceGroupName: string, resourceProviderNamespace: string, parentResourcePath: string, resourceType: string, resourceName: string, options?: Models.PolicyAssignmentsListForResourceOptionalParams): Promise<Models.PolicyAssignmentsListForResourceResponse>;
  /**
   * @param resourceGroupName The name of the resource group containing the resource. The name is
   * case insensitive.
   * @param resourceProviderNamespace The namespace of the resource provider.
   * @param parentResourcePath The parent resource path.
   * @param resourceType The resource type.
   * @param resourceName The name of the resource with policy assignments.
   * @param callback The callback
   * @deprecated This operation is deprecated. Please do not use it any longer.
   */
  listForResource(resourceGroupName: string, resourceProviderNamespace: string, parentResourcePath: string, resourceType: string, resourceName: string, callback: msRest.ServiceCallback<Models.PolicyAssignmentListResult>): void;
  /**
   * @param resourceGroupName The name of the resource group containing the resource. The name is
   * case insensitive.
   * @param resourceProviderNamespace The namespace of the resource provider.
   * @param parentResourcePath The parent resource path.
   * @param resourceType The resource type.
   * @param resourceName The name of the resource with policy assignments.
   * @param options The optional parameters
   * @param callback The callback
   * @deprecated This operation is deprecated. Please do not use it any longer.
   */
  listForResource(resourceGroupName: string, resourceProviderNamespace: string, parentResourcePath: string, resourceType: string, resourceName: string, options: Models.PolicyAssignmentsListForResourceOptionalParams, callback: msRest.ServiceCallback<Models.PolicyAssignmentListResult>): void;
  listForResource(resourceGroupName: string, resourceProviderNamespace: string, parentResourcePath: string, resourceType: string, resourceName: string, options?: Models.PolicyAssignmentsListForResourceOptionalParams | msRest.ServiceCallback<Models.PolicyAssignmentListResult>, callback?: msRest.ServiceCallback<Models.PolicyAssignmentListResult>): Promise<Models.PolicyAssignmentsListForResourceResponse> {
    return this.client.sendOperationRequest(
      {
        resourceGroupName,
        resourceProviderNamespace,
        parentResourcePath,
        resourceType,
        resourceName,
        options
      },
      listForResourceOperationSpec,
      callback) as Promise<Models.PolicyAssignmentsListForResourceResponse>;
  }

  /**
   * Gets all the policy assignments for a subscription.
   * @param [options] The optional parameters
   * @returns Promise<Models.PolicyAssignmentsListResponse>
   */
  list(options?: Models.PolicyAssignmentsListOptionalParams): Promise<Models.PolicyAssignmentsListResponse>;
  /**
   * @param callback The callback
   */
  list(callback: msRest.ServiceCallback<Models.PolicyAssignmentListResult>): void;
  /**
   * @param options The optional parameters
   * @param callback The callback
   */
  list(options: Models.PolicyAssignmentsListOptionalParams, callback: msRest.ServiceCallback<Models.PolicyAssignmentListResult>): void;
  list(options?: Models.PolicyAssignmentsListOptionalParams | msRest.ServiceCallback<Models.PolicyAssignmentListResult>, callback?: msRest.ServiceCallback<Models.PolicyAssignmentListResult>): Promise<Models.PolicyAssignmentsListResponse> {
    return this.client.sendOperationRequest(
      {
        options
      },
      listOperationSpec,
      callback) as Promise<Models.PolicyAssignmentsListResponse>;
  }

  /**
   * When providing a scope for the assignment, use '/subscriptions/{subscription-id}/' for
   * subscriptions, '/subscriptions/{subscription-id}/resourceGroups/{resource-group-name}' for
   * resource groups, and
   * '/subscriptions/{subscription-id}/resourceGroups/{resource-group-name}/providers/{resource-provider-namespace}/{resource-type}/{resource-name}'
   * for resources.
   * @summary Deletes a policy assignment by ID.
   * @param policyAssignmentId The ID of the policy assignment to delete. Use the format
   * '/{scope}/providers/Microsoft.Authorization/policyAssignments/{policy-assignment-name}'.
   * @param [options] The optional parameters
   * @returns Promise<Models.PolicyAssignmentsDeleteByIdResponse>
   */
  deleteById(policyAssignmentId: string, options?: msRest.RequestOptionsBase): Promise<Models.PolicyAssignmentsDeleteByIdResponse>;
  /**
   * @param policyAssignmentId The ID of the policy assignment to delete. Use the format
   * '/{scope}/providers/Microsoft.Authorization/policyAssignments/{policy-assignment-name}'.
   * @param callback The callback
   */
  deleteById(policyAssignmentId: string, callback: msRest.ServiceCallback<Models.PolicyAssignment>): void;
  /**
   * @param policyAssignmentId The ID of the policy assignment to delete. Use the format
   * '/{scope}/providers/Microsoft.Authorization/policyAssignments/{policy-assignment-name}'.
   * @param options The optional parameters
   * @param callback The callback
   */
  deleteById(policyAssignmentId: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.PolicyAssignment>): void;
  deleteById(policyAssignmentId: string, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<Models.PolicyAssignment>, callback?: msRest.ServiceCallback<Models.PolicyAssignment>): Promise<Models.PolicyAssignmentsDeleteByIdResponse> {
    return this.client.sendOperationRequest(
      {
        policyAssignmentId,
        options
      },
      deleteByIdOperationSpec,
      callback) as Promise<Models.PolicyAssignmentsDeleteByIdResponse>;
  }

  /**
   * Policy assignments are inherited by child resources. For example, when you apply a policy to a
   * resource group that policy is assigned to all resources in the group. When providing a scope for
   * the assignment, use '/subscriptions/{subscription-id}/' for subscriptions,
   * '/subscriptions/{subscription-id}/resourceGroups/{resource-group-name}' for resource groups, and
   * '/subscriptions/{subscription-id}/resourceGroups/{resource-group-name}/providers/{resource-provider-namespace}/{resource-type}/{resource-name}'
   * for resources.
   * @summary Creates a policy assignment by ID.
   * @param policyAssignmentId The ID of the policy assignment to create. Use the format
   * '/{scope}/providers/Microsoft.Authorization/policyAssignments/{policy-assignment-name}'.
   * @param parameters Parameters for policy assignment.
   * @param [options] The optional parameters
   * @returns Promise<Models.PolicyAssignmentsCreateByIdResponse>
   */
  createById(policyAssignmentId: string, parameters: Models.PolicyAssignment, options?: msRest.RequestOptionsBase): Promise<Models.PolicyAssignmentsCreateByIdResponse>;
  /**
   * @param policyAssignmentId The ID of the policy assignment to create. Use the format
   * '/{scope}/providers/Microsoft.Authorization/policyAssignments/{policy-assignment-name}'.
   * @param parameters Parameters for policy assignment.
   * @param callback The callback
   */
  createById(policyAssignmentId: string, parameters: Models.PolicyAssignment, callback: msRest.ServiceCallback<Models.PolicyAssignment>): void;
  /**
   * @param policyAssignmentId The ID of the policy assignment to create. Use the format
   * '/{scope}/providers/Microsoft.Authorization/policyAssignments/{policy-assignment-name}'.
   * @param parameters Parameters for policy assignment.
   * @param options The optional parameters
   * @param callback The callback
   */
  createById(policyAssignmentId: string, parameters: Models.PolicyAssignment, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.PolicyAssignment>): void;
  createById(policyAssignmentId: string, parameters: Models.PolicyAssignment, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<Models.PolicyAssignment>, callback?: msRest.ServiceCallback<Models.PolicyAssignment>): Promise<Models.PolicyAssignmentsCreateByIdResponse> {
    return this.client.sendOperationRequest(
      {
        policyAssignmentId,
        parameters,
        options
      },
      createByIdOperationSpec,
      callback) as Promise<Models.PolicyAssignmentsCreateByIdResponse>;
  }

  /**
   * When providing a scope for the assignment, use '/subscriptions/{subscription-id}/' for
   * subscriptions, '/subscriptions/{subscription-id}/resourceGroups/{resource-group-name}' for
   * resource groups, and
   * '/subscriptions/{subscription-id}/resourceGroups/{resource-group-name}/providers/{resource-provider-namespace}/{resource-type}/{resource-name}'
   * for resources.
   * @summary Gets a policy assignment by ID.
   * @param policyAssignmentId The ID of the policy assignment to get. Use the format
   * '/{scope}/providers/Microsoft.Authorization/policyAssignments/{policy-assignment-name}'.
   * @param [options] The optional parameters
   * @returns Promise<Models.PolicyAssignmentsGetByIdResponse>
   */
  getById(policyAssignmentId: string, options?: msRest.RequestOptionsBase): Promise<Models.PolicyAssignmentsGetByIdResponse>;
  /**
   * @param policyAssignmentId The ID of the policy assignment to get. Use the format
   * '/{scope}/providers/Microsoft.Authorization/policyAssignments/{policy-assignment-name}'.
   * @param callback The callback
   */
  getById(policyAssignmentId: string, callback: msRest.ServiceCallback<Models.PolicyAssignment>): void;
  /**
   * @param policyAssignmentId The ID of the policy assignment to get. Use the format
   * '/{scope}/providers/Microsoft.Authorization/policyAssignments/{policy-assignment-name}'.
   * @param options The optional parameters
   * @param callback The callback
   */
  getById(policyAssignmentId: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.PolicyAssignment>): void;
  getById(policyAssignmentId: string, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<Models.PolicyAssignment>, callback?: msRest.ServiceCallback<Models.PolicyAssignment>): Promise<Models.PolicyAssignmentsGetByIdResponse> {
    return this.client.sendOperationRequest(
      {
        policyAssignmentId,
        options
      },
      getByIdOperationSpec,
      callback) as Promise<Models.PolicyAssignmentsGetByIdResponse>;
  }

  /**
   * Gets policy assignments for the resource group.
   * @param nextPageLink The NextLink from the previous successful call to List operation.
   * @param [options] The optional parameters
   * @returns Promise<Models.PolicyAssignmentsListForResourceGroupNextResponse>
   */
  listForResourceGroupNext(nextPageLink: string, options?: msRest.RequestOptionsBase): Promise<Models.PolicyAssignmentsListForResourceGroupNextResponse>;
  /**
   * @param nextPageLink The NextLink from the previous successful call to List operation.
   * @param callback The callback
   */
  listForResourceGroupNext(nextPageLink: string, callback: msRest.ServiceCallback<Models.PolicyAssignmentListResult>): void;
  /**
   * @param nextPageLink The NextLink from the previous successful call to List operation.
   * @param options The optional parameters
   * @param callback The callback
   */
  listForResourceGroupNext(nextPageLink: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.PolicyAssignmentListResult>): void;
  listForResourceGroupNext(nextPageLink: string, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<Models.PolicyAssignmentListResult>, callback?: msRest.ServiceCallback<Models.PolicyAssignmentListResult>): Promise<Models.PolicyAssignmentsListForResourceGroupNextResponse> {
    return this.client.sendOperationRequest(
      {
        nextPageLink,
        options
      },
      listForResourceGroupNextOperationSpec,
      callback) as Promise<Models.PolicyAssignmentsListForResourceGroupNextResponse>;
  }

  /**
   * Gets policy assignments for a resource.
   * @param nextPageLink The NextLink from the previous successful call to List operation.
   * @param [options] The optional parameters
   * @deprecated This operation is deprecated. Please do not use it any longer.
   * @returns Promise<Models.PolicyAssignmentsListForResourceNextResponse>
   */
  listForResourceNext(nextPageLink: string, options?: msRest.RequestOptionsBase): Promise<Models.PolicyAssignmentsListForResourceNextResponse>;
  /**
   * @param nextPageLink The NextLink from the previous successful call to List operation.
   * @param callback The callback
   * @deprecated This operation is deprecated. Please do not use it any longer.
   */
  listForResourceNext(nextPageLink: string, callback: msRest.ServiceCallback<Models.PolicyAssignmentListResult>): void;
  /**
   * @param nextPageLink The NextLink from the previous successful call to List operation.
   * @param options The optional parameters
   * @param callback The callback
   * @deprecated This operation is deprecated. Please do not use it any longer.
   */
  listForResourceNext(nextPageLink: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.PolicyAssignmentListResult>): void;
  listForResourceNext(nextPageLink: string, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<Models.PolicyAssignmentListResult>, callback?: msRest.ServiceCallback<Models.PolicyAssignmentListResult>): Promise<Models.PolicyAssignmentsListForResourceNextResponse> {
    return this.client.sendOperationRequest(
      {
        nextPageLink,
        options
      },
      listForResourceNextOperationSpec,
      callback) as Promise<Models.PolicyAssignmentsListForResourceNextResponse>;
  }

  /**
   * Gets all the policy assignments for a subscription.
   * @param nextPageLink The NextLink from the previous successful call to List operation.
   * @param [options] The optional parameters
   * @returns Promise<Models.PolicyAssignmentsListNextResponse>
   */
  listNext(nextPageLink: string, options?: msRest.RequestOptionsBase): Promise<Models.PolicyAssignmentsListNextResponse>;
  /**
   * @param nextPageLink The NextLink from the previous successful call to List operation.
   * @param callback The callback
   */
  listNext(nextPageLink: string, callback: msRest.ServiceCallback<Models.PolicyAssignmentListResult>): void;
  /**
   * @param nextPageLink The NextLink from the previous successful call to List operation.
   * @param options The optional parameters
   * @param callback The callback
   */
  listNext(nextPageLink: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.PolicyAssignmentListResult>): void;
  listNext(nextPageLink: string, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<Models.PolicyAssignmentListResult>, callback?: msRest.ServiceCallback<Models.PolicyAssignmentListResult>): Promise<Models.PolicyAssignmentsListNextResponse> {
    return this.client.sendOperationRequest(
      {
        nextPageLink,
        options
      },
      listNextOperationSpec,
      callback) as Promise<Models.PolicyAssignmentsListNextResponse>;
  }
}

// Operation Specifications
const serializer = new msRest.Serializer(Mappers);
const deleteMethodOperationSpec: msRest.OperationSpec = {
  httpMethod: "DELETE",
  path: "{scope}/providers/Microsoft.Authorization/policyAssignments/{policyAssignmentName}",
  urlParameters: [
    Parameters.scope,
    Parameters.policyAssignmentName
  ],
  queryParameters: [
    Parameters.apiVersion
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    200: {
      bodyMapper: Mappers.PolicyAssignment
    },
    204: {},
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  serializer
};

const createOperationSpec: msRest.OperationSpec = {
  httpMethod: "PUT",
  path: "{scope}/providers/Microsoft.Authorization/policyAssignments/{policyAssignmentName}",
  urlParameters: [
    Parameters.scope,
    Parameters.policyAssignmentName
  ],
  queryParameters: [
    Parameters.apiVersion
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  requestBody: {
    parameterPath: "parameters",
    mapper: {
      ...Mappers.PolicyAssignment,
      required: true
    }
  },
  responses: {
    201: {
      bodyMapper: Mappers.PolicyAssignment
    },
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  serializer
};

const getOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "{scope}/providers/Microsoft.Authorization/policyAssignments/{policyAssignmentName}",
  urlParameters: [
    Parameters.scope,
    Parameters.policyAssignmentName
  ],
  queryParameters: [
    Parameters.apiVersion
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    200: {
      bodyMapper: Mappers.PolicyAssignment
    },
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  serializer
};

const listForResourceGroupOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Authorization/policyAssignments",
  urlParameters: [
    Parameters.resourceGroupName,
    Parameters.subscriptionId
  ],
  queryParameters: [
    Parameters.filter0,
    Parameters.apiVersion
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    200: {
      bodyMapper: Mappers.PolicyAssignmentListResult
    },
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  serializer
};

const listForResourceOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "subscriptions/{subscriptionId}/resourcegroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{parentResourcePath}/{resourceType}/{resourceName}/providers/Microsoft.Authorization/policyAssignments",
  urlParameters: [
    Parameters.resourceGroupName,
    Parameters.resourceProviderNamespace,
    Parameters.parentResourcePath,
    Parameters.resourceType,
    Parameters.resourceName,
    Parameters.subscriptionId
  ],
  queryParameters: [
    Parameters.filter1,
    Parameters.apiVersion
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    200: {
      bodyMapper: Mappers.PolicyAssignmentListResult
    },
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  serializer
};

const listOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "subscriptions/{subscriptionId}/providers/Microsoft.Authorization/policyAssignments",
  urlParameters: [
    Parameters.subscriptionId
  ],
  queryParameters: [
    Parameters.filter1,
    Parameters.apiVersion
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    200: {
      bodyMapper: Mappers.PolicyAssignmentListResult
    },
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  serializer
};

const deleteByIdOperationSpec: msRest.OperationSpec = {
  httpMethod: "DELETE",
  path: "{policyAssignmentId}",
  urlParameters: [
    Parameters.policyAssignmentId
  ],
  queryParameters: [
    Parameters.apiVersion
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    200: {
      bodyMapper: Mappers.PolicyAssignment
    },
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  serializer
};

const createByIdOperationSpec: msRest.OperationSpec = {
  httpMethod: "PUT",
  path: "{policyAssignmentId}",
  urlParameters: [
    Parameters.policyAssignmentId
  ],
  queryParameters: [
    Parameters.apiVersion
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  requestBody: {
    parameterPath: "parameters",
    mapper: {
      ...Mappers.PolicyAssignment,
      required: true
    }
  },
  responses: {
    201: {
      bodyMapper: Mappers.PolicyAssignment
    },
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  serializer
};

const getByIdOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "{policyAssignmentId}",
  urlParameters: [
    Parameters.policyAssignmentId
  ],
  queryParameters: [
    Parameters.apiVersion
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    200: {
      bodyMapper: Mappers.PolicyAssignment
    },
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  serializer
};

const listForResourceGroupNextOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  baseUrl: "https://management.azure.com",
  path: "{nextLink}",
  urlParameters: [
    Parameters.nextPageLink
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    200: {
      bodyMapper: Mappers.PolicyAssignmentListResult
    },
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  serializer
};

const listForResourceNextOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  baseUrl: "https://management.azure.com",
  path: "{nextLink}",
  urlParameters: [
    Parameters.nextPageLink
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    200: {
      bodyMapper: Mappers.PolicyAssignmentListResult
    },
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  serializer
};

const listNextOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  baseUrl: "https://management.azure.com",
  path: "{nextLink}",
  urlParameters: [
    Parameters.nextPageLink
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    200: {
      bodyMapper: Mappers.PolicyAssignmentListResult
    },
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  serializer
};
