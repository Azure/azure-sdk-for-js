/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */

import { PagedAsyncIterableIterator, PageSettings } from "@azure/core-paging";
import { setContinuationToken } from "../pagingHelper";
import { PolicyAssignments } from "../operationsInterfaces";
import * as coreClient from "@azure/core-client";
import * as Mappers from "../models/mappers";
import * as Parameters from "../models/parameters";
import { PolicyClient } from "../policyClient";
import {
  PolicyAssignment,
  PolicyAssignmentsListForResourceGroupNextOptionalParams,
  PolicyAssignmentsListForResourceGroupOptionalParams,
  PolicyAssignmentsListForResourceGroupResponse,
  PolicyAssignmentsListForResourceNextOptionalParams,
  PolicyAssignmentsListForResourceOptionalParams,
  PolicyAssignmentsListForResourceResponse,
  PolicyAssignmentsListNextOptionalParams,
  PolicyAssignmentsListOptionalParams,
  PolicyAssignmentsListResponse,
  PolicyAssignmentsDeleteOptionalParams,
  PolicyAssignmentsDeleteResponse,
  PolicyAssignmentsCreateOptionalParams,
  PolicyAssignmentsCreateResponse,
  PolicyAssignmentsGetOptionalParams,
  PolicyAssignmentsGetResponse,
  PolicyAssignmentsDeleteByIdOptionalParams,
  PolicyAssignmentsDeleteByIdResponse,
  PolicyAssignmentsCreateByIdOptionalParams,
  PolicyAssignmentsCreateByIdResponse,
  PolicyAssignmentsGetByIdOptionalParams,
  PolicyAssignmentsGetByIdResponse,
  PolicyAssignmentsListForResourceGroupNextResponse,
  PolicyAssignmentsListForResourceNextResponse,
  PolicyAssignmentsListNextResponse
} from "../models";

/// <reference lib="esnext.asynciterable" />
/** Class containing PolicyAssignments operations. */
export class PolicyAssignmentsImpl implements PolicyAssignments {
  private readonly client: PolicyClient;

  /**
   * Initialize a new instance of the class PolicyAssignments class.
   * @param client Reference to the service client
   */
  constructor(client: PolicyClient) {
    this.client = client;
  }

  /**
   * Gets policy assignments for the resource group.
   * @param resourceGroupName The name of the resource group that contains policy assignments.
   * @param options The options parameters.
   */
  public listForResourceGroup(
    resourceGroupName: string,
    options?: PolicyAssignmentsListForResourceGroupOptionalParams
  ): PagedAsyncIterableIterator<PolicyAssignment> {
    const iter = this.listForResourceGroupPagingAll(resourceGroupName, options);
    return {
      next() {
        return iter.next();
      },
      [Symbol.asyncIterator]() {
        return this;
      },
      byPage: (settings?: PageSettings) => {
        if (settings?.maxPageSize) {
          throw new Error("maxPageSize is not supported by this operation.");
        }
        return this.listForResourceGroupPagingPage(
          resourceGroupName,
          options,
          settings
        );
      }
    };
  }

  private async *listForResourceGroupPagingPage(
    resourceGroupName: string,
    options?: PolicyAssignmentsListForResourceGroupOptionalParams,
    settings?: PageSettings
  ): AsyncIterableIterator<PolicyAssignment[]> {
    let result: PolicyAssignmentsListForResourceGroupResponse;
    let continuationToken = settings?.continuationToken;
    if (!continuationToken) {
      result = await this._listForResourceGroup(resourceGroupName, options);
      let page = result.value || [];
      continuationToken = result.nextLink;
      setContinuationToken(page, continuationToken);
      yield page;
    }
    while (continuationToken) {
      result = await this._listForResourceGroupNext(
        resourceGroupName,
        continuationToken,
        options
      );
      continuationToken = result.nextLink;
      let page = result.value || [];
      setContinuationToken(page, continuationToken);
      yield page;
    }
  }

  private async *listForResourceGroupPagingAll(
    resourceGroupName: string,
    options?: PolicyAssignmentsListForResourceGroupOptionalParams
  ): AsyncIterableIterator<PolicyAssignment> {
    for await (const page of this.listForResourceGroupPagingPage(
      resourceGroupName,
      options
    )) {
      yield* page;
    }
  }

  /**
   * Gets policy assignments for a resource.
   * @param resourceGroupName The name of the resource group containing the resource. The name is case
   *                          insensitive.
   * @param resourceProviderNamespace The namespace of the resource provider.
   * @param parentResourcePath The parent resource path.
   * @param resourceType The resource type.
   * @param resourceName The name of the resource with policy assignments.
   * @param options The options parameters.
   */
  public listForResource(
    resourceGroupName: string,
    resourceProviderNamespace: string,
    parentResourcePath: string,
    resourceType: string,
    resourceName: string,
    options?: PolicyAssignmentsListForResourceOptionalParams
  ): PagedAsyncIterableIterator<PolicyAssignment> {
    const iter = this.listForResourcePagingAll(
      resourceGroupName,
      resourceProviderNamespace,
      parentResourcePath,
      resourceType,
      resourceName,
      options
    );
    return {
      next() {
        return iter.next();
      },
      [Symbol.asyncIterator]() {
        return this;
      },
      byPage: (settings?: PageSettings) => {
        if (settings?.maxPageSize) {
          throw new Error("maxPageSize is not supported by this operation.");
        }
        return this.listForResourcePagingPage(
          resourceGroupName,
          resourceProviderNamespace,
          parentResourcePath,
          resourceType,
          resourceName,
          options,
          settings
        );
      }
    };
  }

  private async *listForResourcePagingPage(
    resourceGroupName: string,
    resourceProviderNamespace: string,
    parentResourcePath: string,
    resourceType: string,
    resourceName: string,
    options?: PolicyAssignmentsListForResourceOptionalParams,
    settings?: PageSettings
  ): AsyncIterableIterator<PolicyAssignment[]> {
    let result: PolicyAssignmentsListForResourceResponse;
    let continuationToken = settings?.continuationToken;
    if (!continuationToken) {
      result = await this._listForResource(
        resourceGroupName,
        resourceProviderNamespace,
        parentResourcePath,
        resourceType,
        resourceName,
        options
      );
      let page = result.value || [];
      continuationToken = result.nextLink;
      setContinuationToken(page, continuationToken);
      yield page;
    }
    while (continuationToken) {
      result = await this._listForResourceNext(
        resourceGroupName,
        resourceProviderNamespace,
        parentResourcePath,
        resourceType,
        resourceName,
        continuationToken,
        options
      );
      continuationToken = result.nextLink;
      let page = result.value || [];
      setContinuationToken(page, continuationToken);
      yield page;
    }
  }

  private async *listForResourcePagingAll(
    resourceGroupName: string,
    resourceProviderNamespace: string,
    parentResourcePath: string,
    resourceType: string,
    resourceName: string,
    options?: PolicyAssignmentsListForResourceOptionalParams
  ): AsyncIterableIterator<PolicyAssignment> {
    for await (const page of this.listForResourcePagingPage(
      resourceGroupName,
      resourceProviderNamespace,
      parentResourcePath,
      resourceType,
      resourceName,
      options
    )) {
      yield* page;
    }
  }

  /**
   * Gets all the policy assignments for a subscription.
   * @param options The options parameters.
   */
  public list(
    options?: PolicyAssignmentsListOptionalParams
  ): PagedAsyncIterableIterator<PolicyAssignment> {
    const iter = this.listPagingAll(options);
    return {
      next() {
        return iter.next();
      },
      [Symbol.asyncIterator]() {
        return this;
      },
      byPage: (settings?: PageSettings) => {
        if (settings?.maxPageSize) {
          throw new Error("maxPageSize is not supported by this operation.");
        }
        return this.listPagingPage(options, settings);
      }
    };
  }

  private async *listPagingPage(
    options?: PolicyAssignmentsListOptionalParams,
    settings?: PageSettings
  ): AsyncIterableIterator<PolicyAssignment[]> {
    let result: PolicyAssignmentsListResponse;
    let continuationToken = settings?.continuationToken;
    if (!continuationToken) {
      result = await this._list(options);
      let page = result.value || [];
      continuationToken = result.nextLink;
      setContinuationToken(page, continuationToken);
      yield page;
    }
    while (continuationToken) {
      result = await this._listNext(continuationToken, options);
      continuationToken = result.nextLink;
      let page = result.value || [];
      setContinuationToken(page, continuationToken);
      yield page;
    }
  }

  private async *listPagingAll(
    options?: PolicyAssignmentsListOptionalParams
  ): AsyncIterableIterator<PolicyAssignment> {
    for await (const page of this.listPagingPage(options)) {
      yield* page;
    }
  }

  /**
   * Deletes a policy assignment.
   * @param scope The scope of the policy assignment.
   * @param policyAssignmentName The name of the policy assignment to delete.
   * @param options The options parameters.
   */
  delete(
    scope: string,
    policyAssignmentName: string,
    options?: PolicyAssignmentsDeleteOptionalParams
  ): Promise<PolicyAssignmentsDeleteResponse> {
    return this.client.sendOperationRequest(
      { scope, policyAssignmentName, options },
      deleteOperationSpec
    );
  }

  /**
   * Policy assignments are inherited by child resources. For example, when you apply a policy to a
   * resource group that policy is assigned to all resources in the group.
   * @param scope The scope of the policy assignment.
   * @param policyAssignmentName The name of the policy assignment.
   * @param parameters Parameters for the policy assignment.
   * @param options The options parameters.
   */
  create(
    scope: string,
    policyAssignmentName: string,
    parameters: PolicyAssignment,
    options?: PolicyAssignmentsCreateOptionalParams
  ): Promise<PolicyAssignmentsCreateResponse> {
    return this.client.sendOperationRequest(
      { scope, policyAssignmentName, parameters, options },
      createOperationSpec
    );
  }

  /**
   * Gets a policy assignment.
   * @param scope The scope of the policy assignment.
   * @param policyAssignmentName The name of the policy assignment to get.
   * @param options The options parameters.
   */
  get(
    scope: string,
    policyAssignmentName: string,
    options?: PolicyAssignmentsGetOptionalParams
  ): Promise<PolicyAssignmentsGetResponse> {
    return this.client.sendOperationRequest(
      { scope, policyAssignmentName, options },
      getOperationSpec
    );
  }

  /**
   * Gets policy assignments for the resource group.
   * @param resourceGroupName The name of the resource group that contains policy assignments.
   * @param options The options parameters.
   */
  private _listForResourceGroup(
    resourceGroupName: string,
    options?: PolicyAssignmentsListForResourceGroupOptionalParams
  ): Promise<PolicyAssignmentsListForResourceGroupResponse> {
    return this.client.sendOperationRequest(
      { resourceGroupName, options },
      listForResourceGroupOperationSpec
    );
  }

  /**
   * Gets policy assignments for a resource.
   * @param resourceGroupName The name of the resource group containing the resource. The name is case
   *                          insensitive.
   * @param resourceProviderNamespace The namespace of the resource provider.
   * @param parentResourcePath The parent resource path.
   * @param resourceType The resource type.
   * @param resourceName The name of the resource with policy assignments.
   * @param options The options parameters.
   */
  private _listForResource(
    resourceGroupName: string,
    resourceProviderNamespace: string,
    parentResourcePath: string,
    resourceType: string,
    resourceName: string,
    options?: PolicyAssignmentsListForResourceOptionalParams
  ): Promise<PolicyAssignmentsListForResourceResponse> {
    return this.client.sendOperationRequest(
      {
        resourceGroupName,
        resourceProviderNamespace,
        parentResourcePath,
        resourceType,
        resourceName,
        options
      },
      listForResourceOperationSpec
    );
  }

  /**
   * Gets all the policy assignments for a subscription.
   * @param options The options parameters.
   */
  private _list(
    options?: PolicyAssignmentsListOptionalParams
  ): Promise<PolicyAssignmentsListResponse> {
    return this.client.sendOperationRequest({ options }, listOperationSpec);
  }

  /**
   * When providing a scope for the assignment, use '/subscriptions/{subscription-id}/' for
   * subscriptions, '/subscriptions/{subscription-id}/resourceGroups/{resource-group-name}' for resource
   * groups, and
   * '/subscriptions/{subscription-id}/resourceGroups/{resource-group-name}/providers/{resource-provider-namespace}/{resource-type}/{resource-name}'
   * for resources.
   * @param policyAssignmentId The ID of the policy assignment to delete. Use the format
   *                           '/{scope}/providers/Microsoft.Authorization/policyAssignments/{policy-assignment-name}'.
   * @param options The options parameters.
   */
  deleteById(
    policyAssignmentId: string,
    options?: PolicyAssignmentsDeleteByIdOptionalParams
  ): Promise<PolicyAssignmentsDeleteByIdResponse> {
    return this.client.sendOperationRequest(
      { policyAssignmentId, options },
      deleteByIdOperationSpec
    );
  }

  /**
   * Policy assignments are inherited by child resources. For example, when you apply a policy to a
   * resource group that policy is assigned to all resources in the group. When providing a scope for the
   * assignment, use '/subscriptions/{subscription-id}/' for subscriptions,
   * '/subscriptions/{subscription-id}/resourceGroups/{resource-group-name}' for resource groups, and
   * '/subscriptions/{subscription-id}/resourceGroups/{resource-group-name}/providers/{resource-provider-namespace}/{resource-type}/{resource-name}'
   * for resources.
   * @param policyAssignmentId The ID of the policy assignment to create. Use the format
   *                           '/{scope}/providers/Microsoft.Authorization/policyAssignments/{policy-assignment-name}'.
   * @param parameters Parameters for policy assignment.
   * @param options The options parameters.
   */
  createById(
    policyAssignmentId: string,
    parameters: PolicyAssignment,
    options?: PolicyAssignmentsCreateByIdOptionalParams
  ): Promise<PolicyAssignmentsCreateByIdResponse> {
    return this.client.sendOperationRequest(
      { policyAssignmentId, parameters, options },
      createByIdOperationSpec
    );
  }

  /**
   * When providing a scope for the assignment, use '/subscriptions/{subscription-id}/' for
   * subscriptions, '/subscriptions/{subscription-id}/resourceGroups/{resource-group-name}' for resource
   * groups, and
   * '/subscriptions/{subscription-id}/resourceGroups/{resource-group-name}/providers/{resource-provider-namespace}/{resource-type}/{resource-name}'
   * for resources.
   * @param policyAssignmentId The ID of the policy assignment to get. Use the format
   *                           '/{scope}/providers/Microsoft.Authorization/policyAssignments/{policy-assignment-name}'.
   * @param options The options parameters.
   */
  getById(
    policyAssignmentId: string,
    options?: PolicyAssignmentsGetByIdOptionalParams
  ): Promise<PolicyAssignmentsGetByIdResponse> {
    return this.client.sendOperationRequest(
      { policyAssignmentId, options },
      getByIdOperationSpec
    );
  }

  /**
   * ListForResourceGroupNext
   * @param resourceGroupName The name of the resource group that contains policy assignments.
   * @param nextLink The nextLink from the previous successful call to the ListForResourceGroup method.
   * @param options The options parameters.
   */
  private _listForResourceGroupNext(
    resourceGroupName: string,
    nextLink: string,
    options?: PolicyAssignmentsListForResourceGroupNextOptionalParams
  ): Promise<PolicyAssignmentsListForResourceGroupNextResponse> {
    return this.client.sendOperationRequest(
      { resourceGroupName, nextLink, options },
      listForResourceGroupNextOperationSpec
    );
  }

  /**
   * ListForResourceNext
   * @param resourceGroupName The name of the resource group containing the resource. The name is case
   *                          insensitive.
   * @param resourceProviderNamespace The namespace of the resource provider.
   * @param parentResourcePath The parent resource path.
   * @param resourceType The resource type.
   * @param resourceName The name of the resource with policy assignments.
   * @param nextLink The nextLink from the previous successful call to the ListForResource method.
   * @param options The options parameters.
   */
  private _listForResourceNext(
    resourceGroupName: string,
    resourceProviderNamespace: string,
    parentResourcePath: string,
    resourceType: string,
    resourceName: string,
    nextLink: string,
    options?: PolicyAssignmentsListForResourceNextOptionalParams
  ): Promise<PolicyAssignmentsListForResourceNextResponse> {
    return this.client.sendOperationRequest(
      {
        resourceGroupName,
        resourceProviderNamespace,
        parentResourcePath,
        resourceType,
        resourceName,
        nextLink,
        options
      },
      listForResourceNextOperationSpec
    );
  }

  /**
   * ListNext
   * @param nextLink The nextLink from the previous successful call to the List method.
   * @param options The options parameters.
   */
  private _listNext(
    nextLink: string,
    options?: PolicyAssignmentsListNextOptionalParams
  ): Promise<PolicyAssignmentsListNextResponse> {
    return this.client.sendOperationRequest(
      { nextLink, options },
      listNextOperationSpec
    );
  }
}
// Operation Specifications
const serializer = coreClient.createSerializer(Mappers, /* isXml */ false);

const deleteOperationSpec: coreClient.OperationSpec = {
  path:
    "/{scope}/providers/Microsoft.Authorization/policyAssignments/{policyAssignmentName}",
  httpMethod: "DELETE",
  responses: {
    200: {
      bodyMapper: Mappers.PolicyAssignment
    },
    204: {}
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.scope,
    Parameters.policyAssignmentName
  ],
  headerParameters: [Parameters.accept],
  serializer
};
const createOperationSpec: coreClient.OperationSpec = {
  path:
    "/{scope}/providers/Microsoft.Authorization/policyAssignments/{policyAssignmentName}",
  httpMethod: "PUT",
  responses: {
    201: {
      bodyMapper: Mappers.PolicyAssignment
    }
  },
  requestBody: Parameters.parameters1,
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.scope,
    Parameters.policyAssignmentName
  ],
  headerParameters: [Parameters.contentType, Parameters.accept],
  mediaType: "json",
  serializer
};
const getOperationSpec: coreClient.OperationSpec = {
  path:
    "/{scope}/providers/Microsoft.Authorization/policyAssignments/{policyAssignmentName}",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.PolicyAssignment
    }
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.scope,
    Parameters.policyAssignmentName
  ],
  headerParameters: [Parameters.accept],
  serializer
};
const listForResourceGroupOperationSpec: coreClient.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Authorization/policyAssignments",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.PolicyAssignmentListResult
    }
  },
  queryParameters: [Parameters.apiVersion, Parameters.filter],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName
  ],
  headerParameters: [Parameters.accept],
  serializer
};
const listForResourceOperationSpec: coreClient.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/resourcegroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{parentResourcePath}/{resourceType}/{resourceName}/providers/Microsoft.Authorization/policyAssignments",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.PolicyAssignmentListResult
    }
  },
  queryParameters: [Parameters.apiVersion, Parameters.filter1],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.resourceProviderNamespace,
    Parameters.parentResourcePath,
    Parameters.resourceType,
    Parameters.resourceName
  ],
  headerParameters: [Parameters.accept],
  serializer
};
const listOperationSpec: coreClient.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/providers/Microsoft.Authorization/policyAssignments",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.PolicyAssignmentListResult
    }
  },
  queryParameters: [Parameters.apiVersion, Parameters.filter1],
  urlParameters: [Parameters.$host, Parameters.subscriptionId],
  headerParameters: [Parameters.accept],
  serializer
};
const deleteByIdOperationSpec: coreClient.OperationSpec = {
  path: "/{policyAssignmentId}",
  httpMethod: "DELETE",
  responses: {
    200: {
      bodyMapper: Mappers.PolicyAssignment
    }
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [Parameters.$host, Parameters.policyAssignmentId],
  headerParameters: [Parameters.accept],
  serializer
};
const createByIdOperationSpec: coreClient.OperationSpec = {
  path: "/{policyAssignmentId}",
  httpMethod: "PUT",
  responses: {
    201: {
      bodyMapper: Mappers.PolicyAssignment
    }
  },
  requestBody: Parameters.parameters1,
  queryParameters: [Parameters.apiVersion],
  urlParameters: [Parameters.$host, Parameters.policyAssignmentId],
  headerParameters: [Parameters.contentType, Parameters.accept],
  mediaType: "json",
  serializer
};
const getByIdOperationSpec: coreClient.OperationSpec = {
  path: "/{policyAssignmentId}",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.PolicyAssignment
    }
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [Parameters.$host, Parameters.policyAssignmentId],
  headerParameters: [Parameters.accept],
  serializer
};
const listForResourceGroupNextOperationSpec: coreClient.OperationSpec = {
  path: "{nextLink}",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.PolicyAssignmentListResult
    }
  },
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.nextLink,
    Parameters.resourceGroupName
  ],
  headerParameters: [Parameters.accept],
  serializer
};
const listForResourceNextOperationSpec: coreClient.OperationSpec = {
  path: "{nextLink}",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.PolicyAssignmentListResult
    }
  },
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.nextLink,
    Parameters.resourceGroupName,
    Parameters.resourceProviderNamespace,
    Parameters.parentResourcePath,
    Parameters.resourceType,
    Parameters.resourceName
  ],
  headerParameters: [Parameters.accept],
  serializer
};
const listNextOperationSpec: coreClient.OperationSpec = {
  path: "{nextLink}",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.PolicyAssignmentListResult
    }
  },
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.nextLink
  ],
  headerParameters: [Parameters.accept],
  serializer
};
