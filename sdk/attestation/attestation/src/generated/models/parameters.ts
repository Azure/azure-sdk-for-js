/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */

import {
  OperationParameter,
  OperationURLParameter,
  OperationQueryParameter
} from "@azure/core-http";
import {
  AttestOpenEnclaveRequest as AttestOpenEnclaveRequestMapper,
  AttestSgxEnclaveRequest as AttestSgxEnclaveRequestMapper,
  TpmAttestationRequest as TpmAttestationRequestMapper
} from "../models/mappers";

export const accept: OperationParameter = {
  parameterPath: "accept",
  mapper: {
    defaultValue: "application/json",
    isConstant: true,
    serializedName: "Accept",
    type: {
      name: "String"
    }
  }
};

export const instanceUrl: OperationURLParameter = {
  parameterPath: "instanceUrl",
  mapper: {
    serializedName: "instanceUrl",
    required: true,
    type: {
      name: "String"
    }
  },
  skipEncoding: true
};

export const apiVersion: OperationQueryParameter = {
  parameterPath: "apiVersion",
  mapper: {
    defaultValue: "2020-10-01",
    isConstant: true,
    serializedName: "api-version",
    type: {
      name: "String"
    }
  }
};

export const attestationType: OperationURLParameter = {
  parameterPath: "attestationType",
  mapper: {
    serializedName: "attestationType",
    required: true,
    type: {
      name: "String"
    }
  }
};

export const contentType: OperationParameter = {
  parameterPath: ["options", "contentType"],
  mapper: {
    defaultValue: "text/plain",
    isConstant: true,
    serializedName: "Content-Type",
    type: {
      name: "String"
    }
  }
};

export const newAttestationPolicy: OperationParameter = {
  parameterPath: "newAttestationPolicy",
  mapper: {
    serializedName: "newAttestationPolicy",
    required: true,
    type: {
      name: "String"
    }
  }
};

export const accept1: OperationParameter = {
  parameterPath: "accept",
  mapper: {
    defaultValue: "application/json",
    isConstant: true,
    serializedName: "Accept",
    type: {
      name: "String"
    }
  }
};

export const policyJws: OperationParameter = {
  parameterPath: "policyJws",
  mapper: {
    serializedName: "policyJws",
    required: true,
    type: {
      name: "String"
    }
  }
};

export const contentType1: OperationParameter = {
  parameterPath: ["options", "contentType"],
  mapper: {
    defaultValue: "application/json",
    isConstant: true,
    serializedName: "Content-Type",
    type: {
      name: "String"
    }
  }
};

export const policyCertificateToAdd: OperationParameter = {
  parameterPath: "policyCertificateToAdd",
  mapper: {
    constraints: {
      Pattern: new RegExp("[A-Za-z0-9_-]+.[A-Za-z0-9_-]*.[A-Za-z0-9_-]*")
    },
    serializedName: "policyCertificateToAdd",
    required: true,
    type: {
      name: "String"
    }
  }
};

export const policyCertificateToRemove: OperationParameter = {
  parameterPath: "policyCertificateToRemove",
  mapper: {
    constraints: {
      Pattern: new RegExp("[A-Za-z0-9_-]+.[A-Za-z0-9_-]*.[A-Za-z0-9_-]*")
    },
    serializedName: "policyCertificateToRemove",
    required: true,
    type: {
      name: "String"
    }
  }
};

export const request: OperationParameter = {
  parameterPath: "request",
  mapper: AttestOpenEnclaveRequestMapper
};

export const request1: OperationParameter = {
  parameterPath: "request",
  mapper: AttestSgxEnclaveRequestMapper
};

export const request2: OperationParameter = {
  parameterPath: "request",
  mapper: TpmAttestationRequestMapper
};

export const accept2: OperationParameter = {
  parameterPath: "accept",
  mapper: {
    defaultValue: "application/jwk+json, application/json",
    isConstant: true,
    serializedName: "Accept",
    type: {
      name: "String"
    }
  }
};
