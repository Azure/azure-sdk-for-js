/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */

import { tracingClient } from "../tracing";
import { PolicyCertificates } from "../operationsInterfaces";
import * as coreClient from "@azure/core-client";
import * as Mappers from "../models/mappers";
import * as Parameters from "../models/parameters";
import { GeneratedClient } from "../generatedClient";
import {
  PolicyCertificatesGetOptionalParams,
  PolicyCertificatesGetResponse,
  PolicyCertificatesAddOptionalParams,
  PolicyCertificatesAddResponse,
  PolicyCertificatesRemoveOptionalParams,
  PolicyCertificatesRemoveResponse
} from "../models";

/** Class containing PolicyCertificates operations. */
export class PolicyCertificatesImpl implements PolicyCertificates {
  private readonly client: GeneratedClient;

  /**
   * Initialize a new instance of the class PolicyCertificates class.
   * @param client Reference to the service client
   */
  constructor(client: GeneratedClient) {
    this.client = client;
  }

  /**
   * Retrieves the set of certificates used to express policy for the current tenant.
   * @param options The options parameters.
   */
  async get(
    options?: PolicyCertificatesGetOptionalParams
  ): Promise<PolicyCertificatesGetResponse> {
    return tracingClient.withSpan(
      "GeneratedClient.get",
      options ?? {},
      async (options) => {
        return this.client.sendOperationRequest(
          { options },
          getOperationSpec
        ) as Promise<PolicyCertificatesGetResponse>;
      }
    );
  }

  /**
   * Adds a new attestation policy certificate to the set of policy management certificates.
   * @param policyCertificateToAdd An RFC7519 JSON Web Token whose body is an RFC7517 JSON Web Key
   *                               object. The RFC7519 JWT must be signed with one of the existing signing certificates
   * @param options The options parameters.
   */
  async add(
    policyCertificateToAdd: string,
    options?: PolicyCertificatesAddOptionalParams
  ): Promise<PolicyCertificatesAddResponse> {
    return tracingClient.withSpan(
      "GeneratedClient.add",
      options ?? {},
      async (options) => {
        return this.client.sendOperationRequest(
          { policyCertificateToAdd, options },
          addOperationSpec
        ) as Promise<PolicyCertificatesAddResponse>;
      }
    );
  }

  /**
   * Removes the specified policy management certificate. Note that the final policy management
   * certificate cannot be removed.
   * @param policyCertificateToRemove An RFC7519 JSON Web Token whose body is an
   *                                  AttestationCertificateManagementBody object. The RFC7519 JWT must be signed with one of the existing
   *                                  signing certificates
   * @param options The options parameters.
   */
  async remove(
    policyCertificateToRemove: string,
    options?: PolicyCertificatesRemoveOptionalParams
  ): Promise<PolicyCertificatesRemoveResponse> {
    return tracingClient.withSpan(
      "GeneratedClient.remove",
      options ?? {},
      async (options) => {
        return this.client.sendOperationRequest(
          { policyCertificateToRemove, options },
          removeOperationSpec
        ) as Promise<PolicyCertificatesRemoveResponse>;
      }
    );
  }
}
// Operation Specifications
const serializer = coreClient.createSerializer(Mappers, /* isXml */ false);

const getOperationSpec: coreClient.OperationSpec = {
  path: "/certificates",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.PolicyCertificatesResponse
    },
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [Parameters.instanceUrl],
  headerParameters: [Parameters.accept],
  serializer
};
const addOperationSpec: coreClient.OperationSpec = {
  path: "/certificates:add",
  httpMethod: "POST",
  responses: {
    200: {
      bodyMapper: Mappers.PolicyCertificatesModifyResponse
    },
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  requestBody: Parameters.policyCertificateToAdd,
  queryParameters: [Parameters.apiVersion],
  urlParameters: [Parameters.instanceUrl],
  headerParameters: [Parameters.accept, Parameters.contentType1],
  mediaType: "json",
  serializer
};
const removeOperationSpec: coreClient.OperationSpec = {
  path: "/certificates:remove",
  httpMethod: "POST",
  responses: {
    200: {
      bodyMapper: Mappers.PolicyCertificatesModifyResponse
    },
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  requestBody: Parameters.policyCertificateToRemove,
  queryParameters: [Parameters.apiVersion],
  urlParameters: [Parameters.instanceUrl],
  headerParameters: [Parameters.accept, Parameters.contentType1],
  mediaType: "json",
  serializer
};
