/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */

import * as coreHttp from "@azure/core-http";
import * as Mappers from "../models/mappers";
import * as Parameters from "../models/parameters";
import { GeneratedClient } from "../generatedClient";
import {
  PolicyCertificatesGetResponse,
  PolicyCertificatesAddResponse,
  PolicyCertificatesRemoveResponse
} from "../models";

/**
 * Class representing a PolicyCertificates.
 */
export class PolicyCertificates {
  private readonly client: GeneratedClient;

  /**
   * Initialize a new instance of the class PolicyCertificates class.
   * @param client Reference to the service client
   */
  constructor(client: GeneratedClient) {
    this.client = client;
  }

  /**
   * Retrieves the set of certificates used to express policy for the current tenant.
   * @param options The options parameters.
   */
  get(
    options?: coreHttp.OperationOptions
  ): Promise<PolicyCertificatesGetResponse> {
    const operationArguments: coreHttp.OperationArguments = {
      options: coreHttp.operationOptionsToRequestOptionsBase(options || {})
    };
    return this.client.sendOperationRequest(
      operationArguments,
      getOperationSpec
    ) as Promise<PolicyCertificatesGetResponse>;
  }

  /**
   * Adds a new attestation policy certificate to the set of policy management certificates.
   * @param policyCertificateToAdd An RFC7519 JSON Web Token whose body is an RFC7517 JSON Web Key
   *                               object. The RFC7519 JWT must be signed with one of the existing signing certificates
   * @param options The options parameters.
   */
  add(
    policyCertificateToAdd: string,
    options?: coreHttp.OperationOptions
  ): Promise<PolicyCertificatesAddResponse> {
    const operationArguments: coreHttp.OperationArguments = {
      policyCertificateToAdd,
      options: coreHttp.operationOptionsToRequestOptionsBase(options || {})
    };
    return this.client.sendOperationRequest(
      operationArguments,
      addOperationSpec
    ) as Promise<PolicyCertificatesAddResponse>;
  }

  /**
   * Removes the specified policy management certificate. Note that the final policy management
   * certificate cannot be removed.
   * @param policyCertificateToRemove An RFC7519 JSON Web Token whose body is an
   *                                  AttestationCertificateManagementBody object. The RFC7519 JWT must be signed with one of the existing
   *                                  signing certificates
   * @param options The options parameters.
   */
  remove(
    policyCertificateToRemove: string,
    options?: coreHttp.OperationOptions
  ): Promise<PolicyCertificatesRemoveResponse> {
    const operationArguments: coreHttp.OperationArguments = {
      policyCertificateToRemove,
      options: coreHttp.operationOptionsToRequestOptionsBase(options || {})
    };
    return this.client.sendOperationRequest(
      operationArguments,
      removeOperationSpec
    ) as Promise<PolicyCertificatesRemoveResponse>;
  }
}
// Operation Specifications

const serializer = new coreHttp.Serializer(Mappers, /* isXml */ false);

const getOperationSpec: coreHttp.OperationSpec = {
  path: "/certificates",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.PolicyCertificatesResponse
    },
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [Parameters.instanceUrl],
  headerParameters: [Parameters.accept],
  serializer
};
const addOperationSpec: coreHttp.OperationSpec = {
  path: "/certificates:add",
  httpMethod: "POST",
  responses: {
    200: {
      bodyMapper: Mappers.PolicyCertificatesModifyResponse
    },
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  requestBody: Parameters.policyCertificateToAdd,
  queryParameters: [Parameters.apiVersion],
  urlParameters: [Parameters.instanceUrl],
  headerParameters: [Parameters.accept, Parameters.contentType1],
  mediaType: "json",
  serializer
};
const removeOperationSpec: coreHttp.OperationSpec = {
  path: "/certificates:remove",
  httpMethod: "POST",
  responses: {
    200: {
      bodyMapper: Mappers.PolicyCertificatesModifyResponse
    },
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  requestBody: Parameters.policyCertificateToRemove,
  queryParameters: [Parameters.apiVersion],
  urlParameters: [Parameters.instanceUrl],
  headerParameters: [Parameters.accept, Parameters.contentType1],
  mediaType: "json",
  serializer
};
