/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */

import { SigningCertificates } from "../operationsInterfaces";
import * as coreClient from "@azure/core-client";
import * as Mappers from "../models/mappers";
import * as Parameters from "../models/parameters";
import { GeneratedClientContext } from "../generatedClientContext";
import {
  SigningCertificatesGetOptionalParams,
  SigningCertificatesGetResponse
} from "../models";

/** Class representing a SigningCertificates. */
export class SigningCertificatesImpl implements SigningCertificates {
  private readonly client: GeneratedClientContext;

  /**
   * Initialize a new instance of the class SigningCertificates class.
   * @param client Reference to the service client
   */
  constructor(client: GeneratedClientContext) {
    this.client = client;
  }

  /**
   * Retrieves metadata signing certificates in use by the attestation service
   * @param options The options parameters.
   */
  get(
    options?: SigningCertificatesGetOptionalParams
  ): Promise<SigningCertificatesGetResponse> {
    return this.client.sendOperationRequest({ options }, getOperationSpec);
  }
}
// Operation Specifications
const serializer = coreClient.createSerializer(Mappers, /* isXml */ false);

const getOperationSpec: coreClient.OperationSpec = {
  path: "/certs",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.JsonWebKeySet
    },
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  urlParameters: [Parameters.instanceUrl],
  headerParameters: [Parameters.accept2],
  serializer
};
