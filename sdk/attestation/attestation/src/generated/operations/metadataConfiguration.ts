/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */

import * as coreHttp from "@azure/core-http";
import * as Mappers from "../models/mappers";
import * as Parameters from "../models/parameters";
import { GeneratedClient } from "../generatedClient";
import { MetadataConfigurationGetResponse } from "../models";

/**
 * Class representing a MetadataConfiguration.
 */
export class MetadataConfiguration {
  private readonly client: GeneratedClient;

  /**
   * Initialize a new instance of the class MetadataConfiguration class.
   * @param client Reference to the service client
   */
  constructor(client: GeneratedClient) {
    this.client = client;
  }

  /**
   * Retrieves metadata about the attestation signing keys in use by the attestation service
   * @param options The options parameters.
   */
  get(
    options?: coreHttp.OperationOptions
  ): Promise<MetadataConfigurationGetResponse> {
    const operationArguments: coreHttp.OperationArguments = {
      options: coreHttp.operationOptionsToRequestOptionsBase(options || {})
    };
    return this.client.sendOperationRequest(
      operationArguments,
      getOperationSpec
    ) as Promise<MetadataConfigurationGetResponse>;
  }
}
// Operation Specifications

const serializer = new coreHttp.Serializer(Mappers, /* isXml */ false);

const getOperationSpec: coreHttp.OperationSpec = {
  path: "/.well-known/openid-configuration",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: { type: { name: "any" } }
    },
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  urlParameters: [Parameters.instanceUrl],
  headerParameters: [Parameters.accept],
  serializer
};
