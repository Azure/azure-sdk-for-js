/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */

import { tracingClient } from "../tracing";
import { Attestation } from "../operationsInterfaces";
import * as coreClient from "@azure/core-client";
import * as Mappers from "../models/mappers";
import * as Parameters from "../models/parameters";
import { GeneratedClient } from "../generatedClient";
import {
  AttestOpenEnclaveRequest,
  AttestationAttestOpenEnclaveOptionalParams,
  AttestationAttestOpenEnclaveResponse,
  AttestSgxEnclaveRequest,
  AttestationAttestSgxEnclaveOptionalParams,
  AttestationAttestSgxEnclaveResponse,
  TpmAttestationRequest,
  AttestationAttestTpmOptionalParams,
  AttestationAttestTpmResponse
} from "../models";

/** Class containing Attestation operations. */
export class AttestationImpl implements Attestation {
  private readonly client: GeneratedClient;

  /**
   * Initialize a new instance of the class Attestation class.
   * @param client Reference to the service client
   */
  constructor(client: GeneratedClient) {
    this.client = client;
  }

  /**
   * Processes an OpenEnclave report , producing an artifact. The type of artifact produced is dependent
   * upon attestation policy.
   * @param request Request object containing the quote
   * @param options The options parameters.
   */
  async attestOpenEnclave(
    request: AttestOpenEnclaveRequest,
    options?: AttestationAttestOpenEnclaveOptionalParams
  ): Promise<AttestationAttestOpenEnclaveResponse> {
    return tracingClient.withSpan(
      "GeneratedClient.attestOpenEnclave",
      options ?? {},
      async (options) => {
        return this.client.sendOperationRequest(
          { request, options },
          attestOpenEnclaveOperationSpec
        ) as Promise<AttestationAttestOpenEnclaveResponse>;
      }
    );
  }

  /**
   * Processes an SGX enclave quote, producing an artifact. The type of artifact produced is dependent
   * upon attestation policy.
   * @param request Request object containing the quote
   * @param options The options parameters.
   */
  async attestSgxEnclave(
    request: AttestSgxEnclaveRequest,
    options?: AttestationAttestSgxEnclaveOptionalParams
  ): Promise<AttestationAttestSgxEnclaveResponse> {
    return tracingClient.withSpan(
      "GeneratedClient.attestSgxEnclave",
      options ?? {},
      async (options) => {
        return this.client.sendOperationRequest(
          { request, options },
          attestSgxEnclaveOperationSpec
        ) as Promise<AttestationAttestSgxEnclaveResponse>;
      }
    );
  }

  /**
   * Processes attestation evidence from a VBS enclave, producing an attestation result. The attestation
   * result produced is dependent upon the attestation policy.
   * @param request Request object
   * @param options The options parameters.
   */
  async attestTpm(
    request: TpmAttestationRequest,
    options?: AttestationAttestTpmOptionalParams
  ): Promise<AttestationAttestTpmResponse> {
    return tracingClient.withSpan(
      "GeneratedClient.attestTpm",
      options ?? {},
      async (options) => {
        return this.client.sendOperationRequest(
          { request, options },
          attestTpmOperationSpec
        ) as Promise<AttestationAttestTpmResponse>;
      }
    );
  }
}
// Operation Specifications
const serializer = coreClient.createSerializer(Mappers, /* isXml */ false);

const attestOpenEnclaveOperationSpec: coreClient.OperationSpec = {
  path: "/attest/OpenEnclave",
  httpMethod: "POST",
  responses: {
    200: {
      bodyMapper: Mappers.AttestationResponse
    },
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  requestBody: Parameters.request,
  queryParameters: [Parameters.apiVersion],
  urlParameters: [Parameters.instanceUrl],
  headerParameters: [Parameters.accept, Parameters.contentType1],
  mediaType: "json",
  serializer
};
const attestSgxEnclaveOperationSpec: coreClient.OperationSpec = {
  path: "/attest/SgxEnclave",
  httpMethod: "POST",
  responses: {
    200: {
      bodyMapper: Mappers.AttestationResponse
    },
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  requestBody: Parameters.request1,
  queryParameters: [Parameters.apiVersion],
  urlParameters: [Parameters.instanceUrl],
  headerParameters: [Parameters.accept, Parameters.contentType1],
  mediaType: "json",
  serializer
};
const attestTpmOperationSpec: coreClient.OperationSpec = {
  path: "/attest/Tpm",
  httpMethod: "POST",
  responses: {
    200: {
      bodyMapper: Mappers.TpmAttestationResponse
    },
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  requestBody: Parameters.request2,
  queryParameters: [Parameters.apiVersion],
  urlParameters: [Parameters.instanceUrl],
  headerParameters: [Parameters.accept, Parameters.contentType1],
  mediaType: "json",
  serializer
};
