/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */

import * as coreHttp from "@azure/core-http";
import * as Mappers from "../models/mappers";
import * as Parameters from "../models/parameters";
import { GeneratedClient } from "../generatedClient";
import {
  AttestOpenEnclaveRequest,
  AttestationAttestOpenEnclaveResponse,
  AttestSgxEnclaveRequest,
  AttestationAttestSgxEnclaveResponse,
  TpmAttestationRequest,
  AttestationAttestTpmResponse
} from "../models";

/**
 * Class representing a Attestation.
 */
export class Attestation {
  private readonly client: GeneratedClient;

  /**
   * Initialize a new instance of the class Attestation class.
   * @param client Reference to the service client
   */
  constructor(client: GeneratedClient) {
    this.client = client;
  }

  /**
   * Processes an OpenEnclave report , producing an artifact. The type of artifact produced is dependent
   * upon attestation policy.
   * @param request Request object containing the quote
   * @param options The options parameters.
   */
  attestOpenEnclave(
    request: AttestOpenEnclaveRequest,
    options?: coreHttp.OperationOptions
  ): Promise<AttestationAttestOpenEnclaveResponse> {
    const operationArguments: coreHttp.OperationArguments = {
      request,
      options: coreHttp.operationOptionsToRequestOptionsBase(options || {})
    };
    return this.client.sendOperationRequest(
      operationArguments,
      attestOpenEnclaveOperationSpec
    ) as Promise<AttestationAttestOpenEnclaveResponse>;
  }

  /**
   * Processes an SGX enclave quote, producing an artifact. The type of artifact produced is dependent
   * upon attestation policy.
   * @param request Request object containing the quote
   * @param options The options parameters.
   */
  attestSgxEnclave(
    request: AttestSgxEnclaveRequest,
    options?: coreHttp.OperationOptions
  ): Promise<AttestationAttestSgxEnclaveResponse> {
    const operationArguments: coreHttp.OperationArguments = {
      request,
      options: coreHttp.operationOptionsToRequestOptionsBase(options || {})
    };
    return this.client.sendOperationRequest(
      operationArguments,
      attestSgxEnclaveOperationSpec
    ) as Promise<AttestationAttestSgxEnclaveResponse>;
  }

  /**
   * Processes attestation evidence from a VBS enclave, producing an attestation result. The attestation
   * result produced is dependent upon the attestation policy.
   * @param request Request object
   * @param options The options parameters.
   */
  attestTpm(
    request: TpmAttestationRequest,
    options?: coreHttp.OperationOptions
  ): Promise<AttestationAttestTpmResponse> {
    const operationArguments: coreHttp.OperationArguments = {
      request,
      options: coreHttp.operationOptionsToRequestOptionsBase(options || {})
    };
    return this.client.sendOperationRequest(
      operationArguments,
      attestTpmOperationSpec
    ) as Promise<AttestationAttestTpmResponse>;
  }
}
// Operation Specifications

const serializer = new coreHttp.Serializer(Mappers, /* isXml */ false);

const attestOpenEnclaveOperationSpec: coreHttp.OperationSpec = {
  path: "/attest/OpenEnclave",
  httpMethod: "POST",
  responses: {
    200: {
      bodyMapper: Mappers.AttestationResponse
    },
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  requestBody: Parameters.request,
  queryParameters: [Parameters.apiVersion],
  urlParameters: [Parameters.instanceUrl],
  headerParameters: [Parameters.accept, Parameters.contentType1],
  mediaType: "json",
  serializer
};
const attestSgxEnclaveOperationSpec: coreHttp.OperationSpec = {
  path: "/attest/SgxEnclave",
  httpMethod: "POST",
  responses: {
    200: {
      bodyMapper: Mappers.AttestationResponse
    },
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  requestBody: Parameters.request1,
  queryParameters: [Parameters.apiVersion],
  urlParameters: [Parameters.instanceUrl],
  headerParameters: [Parameters.accept, Parameters.contentType1],
  mediaType: "json",
  serializer
};
const attestTpmOperationSpec: coreHttp.OperationSpec = {
  path: "/attest/Tpm",
  httpMethod: "POST",
  responses: {
    200: {
      bodyMapper: Mappers.TpmAttestationResponse
    },
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  requestBody: Parameters.request2,
  queryParameters: [Parameters.apiVersion],
  urlParameters: [Parameters.instanceUrl],
  headerParameters: [Parameters.accept, Parameters.contentType1],
  mediaType: "json",
  serializer
};
