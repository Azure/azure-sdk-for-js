/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */

import * as coreHttp from "@azure/core-http";

export const PolicyResponse: coreHttp.CompositeMapper = {
  type: {
    name: "Composite",
    className: "PolicyResponse",
    modelProperties: {
      token: {
        constraints: {
          Pattern: new RegExp("[A-Za-z0-9_-]+.[A-Za-z0-9_-]*.[A-Za-z0-9_-]*")
        },
        serializedName: "token",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const CloudError: coreHttp.CompositeMapper = {
  type: {
    name: "Composite",
    className: "CloudError",
    modelProperties: {
      error: {
        serializedName: "error",
        type: {
          name: "Composite",
          className: "CloudErrorBody"
        }
      }
    }
  }
};

export const CloudErrorBody: coreHttp.CompositeMapper = {
  type: {
    name: "Composite",
    className: "CloudErrorBody",
    modelProperties: {
      code: {
        serializedName: "code",
        type: {
          name: "String"
        }
      },
      message: {
        serializedName: "message",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const PolicyCertificatesResponse: coreHttp.CompositeMapper = {
  type: {
    name: "Composite",
    className: "PolicyCertificatesResponse",
    modelProperties: {
      token: {
        constraints: {
          Pattern: new RegExp("[A-Za-z0-9_-]+.[A-Za-z0-9_-]*.[A-Za-z0-9_-]*")
        },
        serializedName: "token",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const PolicyCertificatesModifyResponse: coreHttp.CompositeMapper = {
  type: {
    name: "Composite",
    className: "PolicyCertificatesModifyResponse",
    modelProperties: {
      token: {
        constraints: {
          Pattern: new RegExp("[A-Za-z0-9_-]+.[A-Za-z0-9_-]*.[A-Za-z0-9_-]*")
        },
        serializedName: "token",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const AttestOpenEnclaveRequest: coreHttp.CompositeMapper = {
  type: {
    name: "Composite",
    className: "AttestOpenEnclaveRequest",
    modelProperties: {
      report: {
        serializedName: "report",
        type: {
          name: "Base64Url"
        }
      },
      runtimeData: {
        serializedName: "runtimeData",
        type: {
          name: "Composite",
          className: "RuntimeData"
        }
      },
      initTimeData: {
        serializedName: "initTimeData",
        type: {
          name: "Composite",
          className: "InitTimeData"
        }
      },
      draftPolicyForAttestation: {
        serializedName: "draftPolicyForAttestation",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const RuntimeData: coreHttp.CompositeMapper = {
  type: {
    name: "Composite",
    className: "RuntimeData",
    modelProperties: {
      data: {
        serializedName: "data",
        type: {
          name: "Base64Url"
        }
      },
      dataType: {
        serializedName: "dataType",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const InitTimeData: coreHttp.CompositeMapper = {
  type: {
    name: "Composite",
    className: "InitTimeData",
    modelProperties: {
      data: {
        serializedName: "data",
        type: {
          name: "Base64Url"
        }
      },
      dataType: {
        serializedName: "dataType",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const AttestationResponse: coreHttp.CompositeMapper = {
  type: {
    name: "Composite",
    className: "AttestationResponse",
    modelProperties: {
      token: {
        constraints: {
          Pattern: new RegExp("[A-Za-z0-9_-]+.[A-Za-z0-9_-]*.[A-Za-z0-9_-]*")
        },
        serializedName: "token",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const AttestSgxEnclaveRequest: coreHttp.CompositeMapper = {
  type: {
    name: "Composite",
    className: "AttestSgxEnclaveRequest",
    modelProperties: {
      quote: {
        serializedName: "quote",
        type: {
          name: "Base64Url"
        }
      },
      runtimeData: {
        serializedName: "runtimeData",
        type: {
          name: "Composite",
          className: "RuntimeData"
        }
      },
      initTimeData: {
        serializedName: "initTimeData",
        type: {
          name: "Composite",
          className: "InitTimeData"
        }
      },
      draftPolicyForAttestation: {
        serializedName: "draftPolicyForAttestation",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const TpmAttestationRequest: coreHttp.CompositeMapper = {
  type: {
    name: "Composite",
    className: "TpmAttestationRequest",
    modelProperties: {
      data: {
        serializedName: "data",
        type: {
          name: "Base64Url"
        }
      }
    }
  }
};

export const TpmAttestationResponse: coreHttp.CompositeMapper = {
  type: {
    name: "Composite",
    className: "TpmAttestationResponse",
    modelProperties: {
      data: {
        serializedName: "data",
        type: {
          name: "Base64Url"
        }
      }
    }
  }
};

export const JsonWebKeySet: coreHttp.CompositeMapper = {
  type: {
    name: "Composite",
    className: "JsonWebKeySet",
    modelProperties: {
      keys: {
        serializedName: "keys",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "JsonWebKey"
            }
          }
        }
      }
    }
  }
};

export const JsonWebKey: coreHttp.CompositeMapper = {
  type: {
    name: "Composite",
    className: "JsonWebKey",
    modelProperties: {
      alg: {
        serializedName: "alg",
        type: {
          name: "String"
        }
      },
      crv: {
        serializedName: "crv",
        type: {
          name: "String"
        }
      },
      d: {
        serializedName: "d",
        type: {
          name: "String"
        }
      },
      dp: {
        serializedName: "dp",
        type: {
          name: "String"
        }
      },
      dq: {
        serializedName: "dq",
        type: {
          name: "String"
        }
      },
      e: {
        serializedName: "e",
        type: {
          name: "String"
        }
      },
      k: {
        serializedName: "k",
        type: {
          name: "String"
        }
      },
      kid: {
        serializedName: "kid",
        type: {
          name: "String"
        }
      },
      kty: {
        serializedName: "kty",
        required: true,
        type: {
          name: "String"
        }
      },
      n: {
        serializedName: "n",
        type: {
          name: "String"
        }
      },
      p: {
        serializedName: "p",
        type: {
          name: "String"
        }
      },
      q: {
        serializedName: "q",
        type: {
          name: "String"
        }
      },
      qi: {
        serializedName: "qi",
        type: {
          name: "String"
        }
      },
      use: {
        serializedName: "use",
        type: {
          name: "String"
        }
      },
      x: {
        serializedName: "x",
        type: {
          name: "String"
        }
      },
      x5C: {
        serializedName: "x5c",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "String"
            }
          }
        }
      },
      y: {
        serializedName: "y",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const AttestationCertificateManagementBody: coreHttp.CompositeMapper = {
  type: {
    name: "Composite",
    className: "AttestationCertificateManagementBody",
    modelProperties: {
      policyCertificate: {
        serializedName: "policyCertificate",
        type: {
          name: "Composite",
          className: "JsonWebKey"
        }
      }
    }
  }
};

export const PolicyCertificatesResult: coreHttp.CompositeMapper = {
  type: {
    name: "Composite",
    className: "PolicyCertificatesResult",
    modelProperties: {
      policyCertificates: {
        serializedName: "x-ms-policy-certificates",
        type: {
          name: "Composite",
          className: "JsonWebKeySet"
        }
      }
    }
  }
};

export const PolicyCertificatesModificationResult: coreHttp.CompositeMapper = {
  type: {
    name: "Composite",
    className: "PolicyCertificatesModificationResult",
    modelProperties: {
      certificateThumbprint: {
        serializedName: "x-ms-certificate-thumbprint",
        type: {
          name: "String"
        }
      },
      certificateResolution: {
        serializedName: "x-ms-policycertificates-result",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const StoredAttestationPolicy: coreHttp.CompositeMapper = {
  type: {
    name: "Composite",
    className: "StoredAttestationPolicy",
    modelProperties: {
      attestationPolicy: {
        serializedName: "AttestationPolicy",
        type: {
          name: "Base64Url"
        }
      }
    }
  }
};

export const PolicyResult: coreHttp.CompositeMapper = {
  type: {
    name: "Composite",
    className: "PolicyResult",
    modelProperties: {
      policyResolution: {
        serializedName: "x-ms-policy-result",
        type: {
          name: "String"
        }
      },
      policyTokenHash: {
        serializedName: "x-ms-policy-token-hash",
        type: {
          name: "Base64Url"
        }
      },
      policySigner: {
        serializedName: "x-ms-policy-signer",
        type: {
          name: "Composite",
          className: "JsonWebKey"
        }
      },
      policy: {
        constraints: {
          Pattern: new RegExp("[A-Za-z0-9_-]+.[A-Za-z0-9_-]*.[A-Za-z0-9_-]*")
        },
        serializedName: "x-ms-policy",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const AttestationResult: coreHttp.CompositeMapper = {
  type: {
    name: "Composite",
    className: "AttestationResult",
    modelProperties: {
      jti: {
        serializedName: "jti",
        type: {
          name: "String"
        }
      },
      iss: {
        serializedName: "iss",
        type: {
          name: "String"
        }
      },
      iat: {
        serializedName: "iat",
        type: {
          name: "Number"
        }
      },
      exp: {
        serializedName: "exp",
        type: {
          name: "Number"
        }
      },
      nbf: {
        serializedName: "nbf",
        type: {
          name: "Number"
        }
      },
      cnf: {
        serializedName: "cnf",
        type: {
          name: "any"
        }
      },
      nonce: {
        serializedName: "nonce",
        type: {
          name: "String"
        }
      },
      version: {
        serializedName: "x-ms-ver",
        type: {
          name: "String"
        }
      },
      runtimeClaims: {
        serializedName: "x-ms-runtime",
        type: {
          name: "any"
        }
      },
      inittimeClaims: {
        serializedName: "x-ms-inittime",
        type: {
          name: "any"
        }
      },
      policyClaims: {
        serializedName: "x-ms-policy",
        type: {
          name: "any"
        }
      },
      verifierType: {
        serializedName: "x-ms-attestation-type",
        type: {
          name: "String"
        }
      },
      policySigner: {
        serializedName: "x-ms-policy-signer",
        type: {
          name: "Composite",
          className: "JsonWebKey"
        }
      },
      policyHash: {
        serializedName: "x-ms-policy-hash",
        type: {
          name: "Base64Url"
        }
      },
      isDebuggable: {
        serializedName: "x-ms-sgx-is-debuggable",
        type: {
          name: "Boolean"
        }
      },
      productId: {
        serializedName: "x-ms-sgx-product-id",
        type: {
          name: "Number"
        }
      },
      mrEnclave: {
        serializedName: "x-ms-sgx-mrenclave",
        type: {
          name: "String"
        }
      },
      mrSigner: {
        serializedName: "x-ms-sgx-mrsigner",
        type: {
          name: "String"
        }
      },
      svn: {
        serializedName: "x-ms-sgx-svn",
        type: {
          name: "Number"
        }
      },
      enclaveHeldData: {
        serializedName: "x-ms-sgx-ehd",
        type: {
          name: "Base64Url"
        }
      },
      sgxCollateral: {
        serializedName: "x-ms-sgx-collateral",
        type: {
          name: "any"
        }
      },
      deprecatedVersion: {
        serializedName: "ver",
        type: {
          name: "String"
        }
      },
      deprecatedIsDebuggable: {
        serializedName: "is-debuggable",
        type: {
          name: "Boolean"
        }
      },
      deprecatedSgxCollateral: {
        serializedName: "maa-attestationcollateral",
        type: {
          name: "any"
        }
      },
      deprecatedEnclaveHeldData: {
        serializedName: "aas-ehd",
        type: {
          name: "Base64Url"
        }
      },
      deprecatedEnclaveHeldData2: {
        serializedName: "maa-ehd",
        type: {
          name: "Base64Url"
        }
      },
      deprecatedProductId: {
        serializedName: "product-id",
        type: {
          name: "Number"
        }
      },
      deprecatedMrEnclave: {
        serializedName: "sgx-mrenclave",
        type: {
          name: "String"
        }
      },
      deprecatedMrSigner: {
        serializedName: "sgx-mrsigner",
        type: {
          name: "String"
        }
      },
      deprecatedSvn: {
        serializedName: "svn",
        type: {
          name: "Number"
        }
      },
      deprecatedTee: {
        serializedName: "tee",
        type: {
          name: "String"
        }
      },
      deprecatedPolicySigner: {
        serializedName: "policy_signer",
        type: {
          name: "Composite",
          className: "JsonWebKey"
        }
      },
      deprecatedPolicyHash: {
        serializedName: "policy_hash",
        type: {
          name: "Base64Url"
        }
      },
      deprecatedRpData: {
        serializedName: "rp_data",
        type: {
          name: "String"
        }
      }
    }
  }
};
