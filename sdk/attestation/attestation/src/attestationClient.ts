/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */

import * as coreHttp from "@azure/core-http";
//import { OperationOptions } from "@azure/core-client";
import { SDK_VERSION } from "./constants";
import {
  Policy,
  PolicyCertificates,
  Attestation,
} from "./operations";
import { GeneratedClient } from "./generated/generatedClient"
  
import { AttestationSigner, AttestationClientOptions  } from "./models";

import { logger } from "./logger";
import { createSpan } from "./tracing";
import { GeneratedClientOptionalParams } from "./generated/models";

export class AttestationClient {
  /**
   * Initializes a new instance of the AttestationClient class.
   * @param credentials Subscription credentials which uniquely identify client subscription.
   * @param instanceUrl The attestation instance base URI, for example https://mytenant.attest.azure.net.
   * @param options The parameter options
   */
  constructor(
    credentials: coreHttp.TokenCredential,
    instanceUrl: string,
    options: AttestationClientOptions = {}
  ) {

    // The below code helps us set a proper User-Agent header on all requests
    const libInfo = `azsdk-js-api-security-attestation/${SDK_VERSION}`;
    if (!options.userAgentOptions) {
      options.userAgentOptions = {};
    }
    if (options.userAgentOptions.userAgentPrefix) {
      options.userAgentOptions.userAgentPrefix = `${options.userAgentOptions.userAgentPrefix} ${libInfo}`;
    } else {
      options.userAgentOptions.userAgentPrefix = libInfo;
    }

    const internalPipelineOptions: GeneratedClientOptionalParams = {
      ...options,
      ...{
        loggingOptions: {
          logger: logger.info,
          allowedHeaderNames: [
            'x-ms-request-id',
            'x-ms-maa-service-version'
          ]
        }
      }
    };

    const authPolicy = coreHttp.bearerTokenAuthenticationPolicy(credentials, 'https://attest.azure.net/.default');

    const pipeline = coreHttp.createPipelineFromOptions(internalPipelineOptions, authPolicy);

    this._client = new GeneratedClient(credentials, instanceUrl, pipeline);
    this.instanceUrl = instanceUrl;

    // Legacy compatibility classes functions which will be removed eventually.
    this.policy = new Policy(this);
    this.policyCertificates = new PolicyCertificates(this);
    this.attestation = new Attestation(this);
  }

  public BaseClient() : GeneratedClient
  {
    return this._client;
  }

  public async getAttestationSigners(options: coreHttp.OperationOptions = {}) : Promise<AttestationSigner[]>
  {
    const { span, updatedOptions} = createSpan("AttestationClient-getAttestationSigners", options);
    try {
      let signingCertificates = await this._client.signingCertificates.get(updatedOptions);
      let signers:AttestationSigner[] = new Array();
      signingCertificates.keys?.forEach(element => {
        signers.push(new AttestationSigner(element));
      });
      return signers;
    } catch (e) {
      span.recordException(e);
      throw e;
    } finally {
      span.end();
    }
  }

  public async getOpenIdMetadata(options: coreHttp.OperationOptions = {}) : Promise<any>
  {
    const { span, updatedOptions} = createSpan("AttestationClient-getAttestationSigners", options);
    try {
      return await (await this._client.metadataConfiguration.get(updatedOptions)).body;
    } catch (e) {
      span.recordException(e);
    } finally {
      span.end();
    }

  }
  

  private _client: GeneratedClient;

  instanceUrl: string;

  policy: Policy;
  policyCertificates: PolicyCertificates;
  attestation: Attestation;
}
