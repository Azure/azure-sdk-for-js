{"version":3,"file":"storedAttestationPolicy.js","sourceRoot":"","sources":["../../../src/models/storedAttestationPolicy.ts"],"names":[],"mappings":";;;;AAAA,uCAAuC;AACvC,kCAAkC;AAClC,8CAAiD;AACjD,sEAAgE;AAEhE,gFAA0D;AAE1D;;GAEG;AACH,MAAa,uBAAuB;IAClC,YAAY,KAAa;QACvB,IAAI,CAAC,iBAAiB,GAAG,IAAA,uBAAa,EAAC,KAAK,CAAC,CAAC;IAChD,CAAC;IAED;;;;OAIG;IACH,SAAS;QACP,OAAO,sCAAgB,CAAC,SAAS,CAC/B,IAAI,EACJ,EAAE,uBAAuB,EAAE,OAAO,CAAC,uBAAuB,EAAE,EAC5D,OAAO,CAAC,uBAAuB,CAChC,CAAC;IACJ,CAAC;IAED;;;;;OAKG;IACH,MAAM,CAAC,WAAW,CAAC,KAAc;QAC/B,OAAO,sCAAgB,CAAC,WAAW,CACjC,KAAK,EACL,EAAE,uBAAuB,EAAE,OAAO,CAAC,uBAAuB,EAAE,EAC5D,yBAAyB,CACC,CAAC;IAC/B,CAAC;CAMF;AApCD,0DAoCC","sourcesContent":["// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT License.\nimport { stringToBytes } from \"../utils/utf8.js\";\nimport { TypeDeserializer } from \"../utils/typeDeserializer.js\";\n\nimport * as Mappers from \"../generated/models/mappers.js\";\n\n/**\n * Represents a stored attestation policy sent to the attestation service.\n */\nexport class StoredAttestationPolicy {\n  constructor(value: string) {\n    this.attestationPolicy = stringToBytes(value);\n  }\n\n  /**\n   * Serializes a StoredAttestationPolicy object to a JSON encoded string.\n   *\n   * @returns The serialized JSON policy.\n   */\n  serialize(): string {\n    return TypeDeserializer.serialize(\n      this,\n      { StoredAttestationPolicy: Mappers.StoredAttestationPolicy },\n      Mappers.StoredAttestationPolicy,\n    );\n  }\n\n  /**\n   * Deserializes a stored attestation policy object returned from the attestation service.\n   *\n   * @param value - Raw JSON object from service to serialize as an attestation policy.\n   * @returns Stored attestation policy.\n   */\n  static deserialize(value: unknown): StoredAttestationPolicy {\n    return TypeDeserializer.deserialize(\n      value,\n      { StoredAttestationPolicy: Mappers.StoredAttestationPolicy },\n      \"StoredAttestationPolicy\",\n    ) as StoredAttestationPolicy;\n  }\n\n  /**\n   * Stored attestation policy, utf8 encoded.\n   */\n  attestationPolicy: Uint8Array;\n}\n"]}