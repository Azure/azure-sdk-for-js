{"version":3,"file":"attestationResult.js","sourceRoot":"","sources":["../../../src/models/attestationResult.ts"],"names":[],"mappings":"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","sourcesContent":["// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT License.\n\nimport type { AttestationSigner } from \"./index.js\";\nimport type { GeneratedAttestationResult } from \"../generated/index.js\";\nimport { _attestationSignerFromGenerated } from \"./attestationSigner.js\";\n\n/**\n * Defines the contents of the {@link AttestationResult.sgxCollateral} claim in\n * an {@link AttestationResult}.\n */\nexport interface AttestationSgxCollateralInfo {\n  /**\n   * Hex encoded Sha256 hash of the Quoting Enclave Certificates.\n   *\n   * See the {@link https://software.intel.com/content/www/us/en/develop/articles/quote-verification-attestation-with-intel-sgx-dcap.html | Intel SGX documentation }\n   *  for more information on quote validation.\n   */\n  qeidcertshash?: string;\n  /**\n   * Hex encoded Sha256 hash of the Quoting Enclave Certificate CRL.\n   *\n   * See the {@link https://software.intel.com/content/www/us/en/develop/articles/quote-verification-attestation-with-intel-sgx-dcap.html | Intel SGX documentation }\n   *  for more information on quote validation.\n   */\n  qeidcrlhash?: string;\n  /**\n   * Hex encoded Sha256 hash of the Quoting Enclave Identity.\n   *\n   * See the {@link https://software.intel.com/content/www/us/en/develop/articles/quote-verification-attestation-with-intel-sgx-dcap.html | Intel SGX documentation }\n   *  for more information on quote validation.\n   */\n  qeidhash?: string;\n  /**\n   * Hex encoded Sha256 hash of the SGX Quote or OpenEnclave Report validated\n   * by this token.\n   *\n   * See the {@link https://software.intel.com/content/www/us/en/develop/articles/quote-verification-attestation-with-intel-sgx-dcap.html | Intel SGX documentation }\n   *  for more information on quote validation.\n   */\n  quotehash?: string;\n  /**\n   * Hex encoded Sha256 hash of the TCB Info Certificates.\n   *\n   * See the {@link https://software.intel.com/content/www/us/en/develop/articles/quote-verification-attestation-with-intel-sgx-dcap.html | Intel SGX documentation }\n   *  for more information on quote validation.\n   */\n  tcbinfocertshash?: string;\n  /**\n   * Hex encoded Sha256 hash of the TCB Info Certificate CRL.\n   *\n   * See the {@link https://software.intel.com/content/www/us/en/develop/articles/quote-verification-attestation-with-intel-sgx-dcap.html | Intel SGX documentation }\n   *  for more information on quote validation.\n   */\n  tcbinfocrlhash?: string;\n  /**\n   * Hex encoded Sha256 hash of the TCB Info for the device being attested.\n   *\n   * See the {@link https://software.intel.com/content/www/us/en/develop/articles/quote-verification-attestation-with-intel-sgx-dcap.html | Intel SGX documentation }\n   *  for more information on quote validation.\n   */\n  tcbinfohash?: string;\n}\n\n/**\n * A Microsoft Azure Attestation response token body - the body of a response token issued by MAA\n */\nexport interface AttestationResult {\n  /**\n   * Unique Identifier for the token.\n   *\n   * Corresponds to the 'jti' claim defined in\n   * {@link https://datatracker.ietf.org/doc/html/rfc7519#section-4.1.7 | RFC 7519 section 4.1.7}\n   */\n  uniqueId: string;\n\n  /**\n   * Returns the issuer of the attestation token. MUST be the same as the\n   * endpoint used when constructing the attestation client instance.\n   */\n  issuer: string;\n\n  /**\n   * Returns the \"nonce\" value if one was specified in the Attest request.\n   */\n  nonce?: string;\n\n  /**\n   * The Schema version of this structure. Current Value: 1.0\n   */\n  version: string;\n\n  /**\n   *  Returns the runtime claims in the token.\n   *\n   * This value will match the input `runTimeJson` property to the\n   * {@link AttestationClient.attestSgxEnclave} or\n   * {@link AttestationClient.attestOpenEnclave} API.\n   *\n   * @remarks\n   *\n   * The `runtimeClaims` property will only be populated if the\n   * `runtimeJson` parameter to the `Attest` API is specified. It will\n   * not be populated if the `runtimeData` parameter is specified.\n   */\n  runTimeClaims: unknown;\n  /**\n   * Returns the initialization time claims in the token.\n   * This value will match the input `initTimeJson` property to the\n   * {@link AttestationClient.attestSgxEnclave} or\n   * {@link AttestationClient.attestOpenEnclave} API.\n   *\n   * @remarks\n   *\n   *  The `initTimeClaims` property will only be populated if the `initTimeJson`\n   *  parameter to the `Attest` API is specified. It will not be populated if\n   *  the `initTimeData` parameter is specified.\n   */\n  initTimeClaims: unknown;\n\n  /**\n   * Returns the set of claims generated by the attestation policy on the instance.\n   */\n  policyClaims: unknown;\n\n  /**\n   * Returns the verifier which generated this attestation token. Normally one of:\n   * \"SGX\" or \"TPM\", but others can be specified.\n   */\n  verifierType: string;\n  /**\n   * The certificate used to sign the policy object, if specified.\n   */\n  policySigner?: AttestationSigner;\n  /**\n   * The base64url encoded SHA256 hash of the BASE64URL encoded policy text\n   * used for attestation.\n   */\n  policyHash: Uint8Array;\n  /**\n   * True if the enclave is debuggable, false otherwise. Only valid if `verifierType` is SGX.\n   */\n  isDebuggable?: boolean;\n\n  /**\n   * The SGX Product ID for the enclave. Only valid if the `verifierType` field is \"SGX\"\n   */\n  productId?: number;\n  /**\n   * The HEX encoded SGX MRENCLAVE value for the enclave. Only valid if the\n   * `verifierType` field is \"SGX\"\n   */\n  mrEnclave?: string;\n\n  /**\n   * The HEX encoded SGX MRSIGNER value for the enclave. Only valid if the\n   * `verifierType` field is \"SGX\"\n   */\n  mrSigner?: string;\n\n  /**\n   * The SGX SVN value for the enclave. Only valid if the `verifierType` field is \"SGX\"\n   */\n  svn?: number;\n\n  /**\n   * Returns the value of the runtime_data field specified as an input to the\n   * {@link AttestationClient.attestSgxEnclave} or {@link AttestationClient.attestOpenEnclave} API.\n   *\n   * @remarks\n   *\n   * The `enclaveHeldData` property will only be populated if the\n   * `runtimeData` parameter to the `Attest` API is specified.\n   */\n  enclaveHeldData?: Uint8Array;\n\n  /**\n   * Returns a set of information describing the complete set of inputs to the\n   * Attestation validation logic.\n   *\n   * See the {@link https://software.intel.com/content/www/us/en/develop/articles/quote-verification-attestation-with-intel-sgx-dcap.html | Intel SGX documentation }\n   *  for more information on quote validation.\n   */\n  sgxCollateral?: AttestationSgxCollateralInfo;\n}\n\n/**\n * A Microsoft Azure Attestation response token body - the body of a response token issued by MAA\n */\nexport class AttestationResultImpl implements AttestationResult {\n  /**\n   *\n   * @param params - The parameters for the constructor.\n   *\n   * @hidden\n   */\n  constructor(params: {\n    issuer: string;\n    version: string;\n    nonce?: string;\n    uniqueId: string;\n    runTimeClaims?: unknown;\n    initTimeClaims?: unknown;\n    policyClaims?: unknown;\n    verifierType: string;\n    policySigner?: AttestationSigner;\n    policyHash: Uint8Array;\n    isDebuggable?: boolean;\n    productId?: number;\n    mrEnclave?: string;\n    mrSigner?: string;\n    svn?: number;\n    enclaveHeldData?: Uint8Array;\n    sgxCollateral?: AttestationSgxCollateralInfo;\n  }) {\n    this._issuer = params.issuer;\n    this._nonce = params.nonce;\n    this._version = params.version;\n    this._uniqueId = params.uniqueId;\n    this._runTimeClaims = params.runTimeClaims;\n    this._initTimeClaims = params.initTimeClaims;\n    this._policyClaims = params.policyClaims;\n    this._verifierType = params.verifierType;\n    this._policySigner = params.policySigner;\n    this._policyHash = params.policyHash;\n    this._isDebuggable = params.isDebuggable;\n    this._productId = params.productId;\n    this._mrEnclave = params.mrEnclave;\n    this._mrSigner = params.mrSigner;\n    this._svn = params.svn;\n    this._enclaveHeldData = params.enclaveHeldData;\n    this._sgxCollateral = params.sgxCollateral;\n  }\n\n  private _issuer: string;\n  private _version: string;\n  private _nonce?: string;\n  private _uniqueId: string;\n  private _runTimeClaims?: unknown;\n  private _initTimeClaims?: unknown;\n  private _policyClaims?: unknown;\n  private _verifierType: string;\n  private _policySigner?: AttestationSigner;\n  private _policyHash: Uint8Array;\n  private _isDebuggable?: boolean;\n  private _productId?: number;\n  private _mrEnclave?: string;\n  private _mrSigner?: string;\n  private _svn?: number;\n  private _enclaveHeldData?: Uint8Array;\n  private _sgxCollateral?: AttestationSgxCollateralInfo;\n\n  /**\n   * Unique Identifier for the token\n   *\n   */\n  get uniqueId(): string {\n    return this._uniqueId;\n  }\n\n  /**\n   * Returns the issuer of the attestation token. MUST be the same as the\n   * endpoint used when constructing the attestation client instance.\n   */\n  get issuer(): string {\n    return this._issuer;\n  }\n\n  /**\n   * Returns the \"nonce\" value specified in the Attest request.\n   */\n  get nonce(): string | undefined {\n    return this._nonce;\n  }\n\n  /**\n   * The Schema version of this structure. Current Value: 1.0\n   */\n  get version(): string {\n    return this._version;\n  }\n\n  /**\n   * Runtime Claims\n   */\n  get runTimeClaims(): unknown {\n    return this._runTimeClaims;\n  }\n  /**\n   * Inittime Claims\n   */\n  get initTimeClaims(): unknown {\n    return this._initTimeClaims;\n  }\n\n  /**\n   * Policy Generated Claims\n   */\n  get policyClaims(): unknown {\n    return this._policyClaims;\n  }\n  /**\n   * The Attestation type being attested.\n   */\n  get verifierType(): string {\n    return this._verifierType;\n  }\n  /**\n   * The certificate used to sign the policy object, if specified.\n   */\n  get policySigner(): AttestationSigner | undefined {\n    return this._policySigner;\n  }\n  /**\n   * The SHA256 hash of the BASE64URL encoded policy text used for attestation\n   */\n  get policyHash(): Uint8Array {\n    return this._policyHash;\n  }\n  /**\n   * True if the enclave is debuggable, false otherwise\n   */\n  get isDebuggable(): boolean | undefined {\n    return this._isDebuggable;\n  }\n  /**\n   * The SGX Product ID for the enclave.\n   */\n  get productId(): number | undefined {\n    return this._productId;\n  }\n  /**\n   * The HEX encoded SGX MRENCLAVE value for the enclave.\n   */\n  get mrEnclave(): string | undefined {\n    return this._mrEnclave;\n  }\n  /**\n   * The HEX encoded SGX MRSIGNER value for the enclave.\n   */\n  get mrSigner(): string | undefined {\n    return this._mrSigner;\n  }\n  /**\n   * The SGX SVN value for the enclave.\n   */\n  get svn(): number | undefined {\n    return this._svn;\n  }\n  /**\n   * A copy of the RuntimeData specified as an input to the attest call.\n   */\n  get enclaveHeldData(): Uint8Array | undefined {\n    return this._enclaveHeldData;\n  }\n  /**\n   * The SGX SVN value for the enclave.\n   */\n  get sgxCollateral(): AttestationSgxCollateralInfo | undefined {\n    return this._sgxCollateral;\n  }\n}\n\n/**\n *\n * @param generated - Generated attestation result object.\n * @returns newly created AttestationResult from the generated result.\n *\n * @internal\n */\nexport function _attestationResultFromGenerated(\n  generated: GeneratedAttestationResult,\n): AttestationResultImpl {\n  return new AttestationResultImpl({\n    issuer: generated.iss,\n    version: generated.version,\n    nonce: generated.nonce,\n    uniqueId: generated.jti,\n    policySigner: generated.policySigner\n      ? _attestationSignerFromGenerated(generated.policySigner)\n      : undefined,\n    runTimeClaims: generated.runtimeClaims,\n    initTimeClaims: generated.inittimeClaims,\n    policyClaims: generated.policyClaims,\n    verifierType: generated.verifierType,\n    policyHash: generated.policyHash,\n    isDebuggable: generated.isDebuggable,\n    productId: generated.productId,\n    mrEnclave: generated.mrEnclave,\n    mrSigner: generated.mrSigner,\n    svn: generated.svn,\n    enclaveHeldData: generated.enclaveHeldData,\n    sgxCollateral: generated.sgxCollateral,\n  });\n}\n"]}