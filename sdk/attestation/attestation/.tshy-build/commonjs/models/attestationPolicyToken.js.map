{"version":3,"file":"attestationPolicyToken.js","sourceRoot":"","sources":["../../../src/models/attestationPolicyToken.ts"],"names":[],"mappings":";AAAA,uCAAuC;AACvC,kCAAkC;;AAgClC,oEAWC;AAzCD,6EAAuE;AAGvE,+DAA6D;AAe7D;;;;;;;;;;;GAWG;AACH,SAAgB,4BAA4B,CAC1C,MAAc,EACd,UAAmB,EACnB,WAAoB;IAEpB,MAAM,KAAK,GAAG,0CAAoB,CAAC,MAAM,CAAC;QACxC,IAAI,EAAE,IAAI,oDAAuB,CAAC,MAAM,CAAC,CAAC,SAAS,EAAE;QACrD,UAAU,EAAE,UAAU;QACtB,WAAW,EAAE,WAAW;KACzB,CAAC,CAAC;IACH,OAAO,KAAK,CAAC;AACf,CAAC","sourcesContent":["// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT License.\n\nimport { StoredAttestationPolicy } from \"./storedAttestationPolicy.js\";\n// import { AttestationSigningKey } from \"./attestationSigningKey\";\nimport type { AttestationToken } from \"./attestationToken.js\";\nimport { AttestationTokenImpl } from \"./attestationToken.js\";\n\n/**\n *\n * An AttestationPolicyToken represents an AttestationToken which holds an attestation\n * policy document.\n *\n * When the attestation service receives a set policy request, the payload of the\n * set policy token contains a {@link https://datatracker.ietf.org/doc/html/rfc7515 | JSON Web Signature}\n * whose body contains the actual attestation policy document.\n *\n * The AttestationPolicyToken represents this JWS object.\n */\nexport interface AttestationPolicyToken extends AttestationToken {}\n\n/** Constructs an AttestationToken containing an Attestation Policy document.\n *\n * @param policy - Attestation policy to embed in the attestation token.\n * @param privateKey - optional private key used to sign the attestation token.\n * @param certificate - optional certificate used to verify the attestation token.\n *\n * @remarks Note that if the attestation instance is running in `Isolated` mode,\n *  the privateKey and certificate are required. If the attestation instance\n *  is running in `AAD` mode, they are optional.\n *\n * @throws {@link Error} when the key in the certificate provided does not match the private key.\n */\nexport function createAttestationPolicyToken(\n  policy: string,\n  privateKey?: string,\n  certificate?: string,\n): AttestationPolicyToken {\n  const token = AttestationTokenImpl.create({\n    body: new StoredAttestationPolicy(policy).serialize(),\n    privateKey: privateKey,\n    certificate: certificate,\n  });\n  return token;\n}\n"]}