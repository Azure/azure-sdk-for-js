{"version":3,"file":"typeDeserializer.js","sourceRoot":"","sources":["../../../src/utils/typeDeserializer.ts"],"names":[],"mappings":";AAAA,uCAAuC;AACvC,kCAAkC;;;AAGlC,oDAAsD;AAEtD;;;GAGG;AACH,MAAa,gBAAgB;IAC3B;;;;;;;;;;;OAWG;IACI,MAAM,CAAC,WAAW,CACvB,OAAgB,EAChB,WAAmC,EACnC,YAAoB;QAEpB,MAAM,UAAU,GAAG,IAAA,8BAAgB,EAAC,WAAW,CAAC,CAAC;QACjD,OAAO,UAAU,CAAC,WAAW,CAAC,WAAW,CAAC,YAAY,CAAC,EAAE,OAAO,EAAE,YAAY,CAAC,CAAC;IAClF,CAAC;IAED;;;;;;;OAOG;IACI,MAAM,CAAC,SAAS,CACrB,iBAA0B,EAC1B,WAAsC,EACtC,UAAkB;QAElB,MAAM,UAAU,GAAG,IAAA,8BAAgB,EAAC,WAAW,CAAC,CAAC;QACjD,OAAO,IAAI,CAAC,SAAS,CAAC,UAAU,CAAC,SAAS,CAAC,UAAU,EAAE,iBAAiB,CAAC,CAAC,CAAC;IAC7E,CAAC;CACF;AAtCD,4CAsCC","sourcesContent":["// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT License.\n\nimport type { Mapper } from \"@azure/core-client\";\nimport { createSerializer } from \"@azure/core-client\";\n\n/**\n * The TypeDeserializer class enables easy access to the Attestation Model serialization\n * and deserialization APIs.\n */\nexport class TypeDeserializer {\n  /**\n   * Deserializes a JSON object into a model type.\n   * @param rawJson - The JSON encoded object to convert into model type.\n   * @param bodyMapper - A mapping between type names and {@link Mapper} objects\n   *  which defines the model properties for the type. the {@link bodyTypeName}\n   *  must be one of the properties in the {@link bodyMapper} parameter.\n   * @param bodyTypeName - The name of the type of the body.\n   * @returns The deserialized type. It is the responsibility of the caller to cast to the\n   *      expected return type.\n   *\n   * @internal\n   */\n  public static deserialize(\n    rawJson: unknown,\n    typeMappers: { [key: string]: any },\n    bodyTypeName: string,\n  ): unknown {\n    const serializer = createSerializer(typeMappers);\n    return serializer.deserialize(typeMappers[bodyTypeName], rawJson, bodyTypeName);\n  }\n\n  /**\n   * Serializes a JSON object into a model type.\n   * @param objectToSerialize - The JSON encoded object to convert into model type.\n   * @param bodyMapper - A {@link Mapper} object which defines the model properties for the type.\n   * @returns The serialized type as a JSON encoded string.\n   *\n   * @internal\n   */\n  public static serialize(\n    objectToSerialize: unknown,\n    typeMappers: { [key: string]: Mapper },\n    bodyMapper: Mapper,\n  ): string {\n    const serializer = createSerializer(typeMappers);\n    return JSON.stringify(serializer.serialize(bodyMapper, objectToSerialize));\n  }\n}\n"]}