{"version":3,"file":"policy.js","sourceRoot":"","sources":["../../../../src/generated/operations/policy.ts"],"names":[],"mappings":"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","sourcesContent":["/*\n * Copyright (c) Microsoft Corporation.\n * Licensed under the MIT License.\n *\n * Code generated by Microsoft (R) AutoRest Code Generator.\n * Changes may cause incorrect behavior and will be lost if the code is regenerated.\n */\n\nimport { tracingClient } from \"../tracing.js\";\nimport { Policy } from \"../operationsInterfaces/index.js\";\nimport * as coreClient from \"@azure/core-client\";\nimport * as Mappers from \"../models/mappers.js\";\nimport * as Parameters from \"../models/parameters.js\";\nimport { GeneratedClient } from \"../generatedClient.js\";\nimport {\n  AttestationType,\n  PolicyGetOptionalParams,\n  PolicyGetResponse,\n  PolicySetModelOptionalParams,\n  PolicySetModelResponse,\n  PolicyResetOptionalParams,\n  PolicyResetResponse\n} from \"../models/index.js\";\n\n/** Class containing Policy operations. */\nexport class PolicyImpl implements Policy {\n  private readonly client: GeneratedClient;\n\n  /**\n   * Initialize a new instance of the class Policy class.\n   * @param client Reference to the service client\n   */\n  constructor(client: GeneratedClient) {\n    this.client = client;\n  }\n\n  /**\n   * Retrieves the current policy for an attestation type.\n   * @param attestationType Specifies the trusted execution environment to be used to validate the\n   *                        evidence\n   * @param options The options parameters.\n   */\n  async get(\n    attestationType: AttestationType,\n    options?: PolicyGetOptionalParams\n  ): Promise<PolicyGetResponse> {\n    return tracingClient.withSpan(\n      \"GeneratedClient.get\",\n      options ?? {},\n      async (options) => {\n        return this.client.sendOperationRequest(\n          { attestationType, options },\n          getOperationSpec\n        ) as Promise<PolicyGetResponse>;\n      }\n    );\n  }\n\n  /**\n   * Sets the policy for a given attestation type.\n   * @param attestationType Specifies the trusted execution environment to be used to validate the\n   *                        evidence\n   * @param newAttestationPolicy JWT Expressing the new policy whose body is a StoredAttestationPolicy\n   *                             object.\n   * @param options The options parameters.\n   */\n  async set(\n    attestationType: AttestationType,\n    newAttestationPolicy: string,\n    options?: PolicySetModelOptionalParams\n  ): Promise<PolicySetModelResponse> {\n    return tracingClient.withSpan(\n      \"GeneratedClient.set\",\n      options ?? {},\n      async (options) => {\n        return this.client.sendOperationRequest(\n          { attestationType, newAttestationPolicy, options },\n          setOperationSpec\n        ) as Promise<PolicySetModelResponse>;\n      }\n    );\n  }\n\n  /**\n   * Resets the attestation policy for the specified tenant and reverts to the default policy.\n   * @param attestationType Specifies the trusted execution environment to be used to validate the\n   *                        evidence\n   * @param policyJws JSON Web Signature with an empty policy document\n   * @param options The options parameters.\n   */\n  async reset(\n    attestationType: AttestationType,\n    policyJws: string,\n    options?: PolicyResetOptionalParams\n  ): Promise<PolicyResetResponse> {\n    return tracingClient.withSpan(\n      \"GeneratedClient.reset\",\n      options ?? {},\n      async (options) => {\n        return this.client.sendOperationRequest(\n          { attestationType, policyJws, options },\n          resetOperationSpec\n        ) as Promise<PolicyResetResponse>;\n      }\n    );\n  }\n}\n// Operation Specifications\nconst serializer = coreClient.createSerializer(Mappers, /* isXml */ false);\n\nconst getOperationSpec: coreClient.OperationSpec = {\n  path: \"/policies/{attestationType}\",\n  httpMethod: \"GET\",\n  responses: {\n    200: {\n      bodyMapper: Mappers.PolicyResponse\n    },\n    default: {\n      bodyMapper: Mappers.CloudError\n    }\n  },\n  queryParameters: [Parameters.apiVersion],\n  urlParameters: [Parameters.instanceUrl, Parameters.attestationType],\n  headerParameters: [Parameters.accept],\n  serializer\n};\nconst setOperationSpec: coreClient.OperationSpec = {\n  path: \"/policies/{attestationType}\",\n  httpMethod: \"PUT\",\n  responses: {\n    200: {\n      bodyMapper: Mappers.PolicyResponse\n    },\n    default: {\n      bodyMapper: Mappers.CloudError\n    }\n  },\n  requestBody: Parameters.newAttestationPolicy,\n  queryParameters: [Parameters.apiVersion],\n  urlParameters: [Parameters.instanceUrl, Parameters.attestationType],\n  headerParameters: [Parameters.contentType, Parameters.accept1],\n  mediaType: \"text\",\n  serializer\n};\nconst resetOperationSpec: coreClient.OperationSpec = {\n  path: \"/policies/{attestationType}:reset\",\n  httpMethod: \"POST\",\n  responses: {\n    200: {\n      bodyMapper: Mappers.PolicyResponse\n    },\n    default: {\n      bodyMapper: Mappers.CloudError\n    }\n  },\n  requestBody: Parameters.policyJws,\n  queryParameters: [Parameters.apiVersion],\n  urlParameters: [Parameters.instanceUrl, Parameters.attestationType],\n  headerParameters: [Parameters.contentType, Parameters.accept1],\n  mediaType: \"text\",\n  serializer\n};\n"]}