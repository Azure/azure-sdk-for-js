"use strict";
/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.PolicyImpl = void 0;
const tslib_1 = require("tslib");
const tracing_js_1 = require("../tracing.js");
const coreClient = tslib_1.__importStar(require("@azure/core-client"));
const Mappers = tslib_1.__importStar(require("../models/mappers.js"));
const Parameters = tslib_1.__importStar(require("../models/parameters.js"));
/** Class containing Policy operations. */
class PolicyImpl {
    /**
     * Initialize a new instance of the class Policy class.
     * @param client Reference to the service client
     */
    constructor(client) {
        this.client = client;
    }
    /**
     * Retrieves the current policy for an attestation type.
     * @param attestationType Specifies the trusted execution environment to be used to validate the
     *                        evidence
     * @param options The options parameters.
     */
    async get(attestationType, options) {
        return tracing_js_1.tracingClient.withSpan("GeneratedClient.get", options !== null && options !== void 0 ? options : {}, async (options) => {
            return this.client.sendOperationRequest({ attestationType, options }, getOperationSpec);
        });
    }
    /**
     * Sets the policy for a given attestation type.
     * @param attestationType Specifies the trusted execution environment to be used to validate the
     *                        evidence
     * @param newAttestationPolicy JWT Expressing the new policy whose body is a StoredAttestationPolicy
     *                             object.
     * @param options The options parameters.
     */
    async set(attestationType, newAttestationPolicy, options) {
        return tracing_js_1.tracingClient.withSpan("GeneratedClient.set", options !== null && options !== void 0 ? options : {}, async (options) => {
            return this.client.sendOperationRequest({ attestationType, newAttestationPolicy, options }, setOperationSpec);
        });
    }
    /**
     * Resets the attestation policy for the specified tenant and reverts to the default policy.
     * @param attestationType Specifies the trusted execution environment to be used to validate the
     *                        evidence
     * @param policyJws JSON Web Signature with an empty policy document
     * @param options The options parameters.
     */
    async reset(attestationType, policyJws, options) {
        return tracing_js_1.tracingClient.withSpan("GeneratedClient.reset", options !== null && options !== void 0 ? options : {}, async (options) => {
            return this.client.sendOperationRequest({ attestationType, policyJws, options }, resetOperationSpec);
        });
    }
}
exports.PolicyImpl = PolicyImpl;
// Operation Specifications
const serializer = coreClient.createSerializer(Mappers, /* isXml */ false);
const getOperationSpec = {
    path: "/policies/{attestationType}",
    httpMethod: "GET",
    responses: {
        200: {
            bodyMapper: Mappers.PolicyResponse
        },
        default: {
            bodyMapper: Mappers.CloudError
        }
    },
    queryParameters: [Parameters.apiVersion],
    urlParameters: [Parameters.instanceUrl, Parameters.attestationType],
    headerParameters: [Parameters.accept],
    serializer
};
const setOperationSpec = {
    path: "/policies/{attestationType}",
    httpMethod: "PUT",
    responses: {
        200: {
            bodyMapper: Mappers.PolicyResponse
        },
        default: {
            bodyMapper: Mappers.CloudError
        }
    },
    requestBody: Parameters.newAttestationPolicy,
    queryParameters: [Parameters.apiVersion],
    urlParameters: [Parameters.instanceUrl, Parameters.attestationType],
    headerParameters: [Parameters.contentType, Parameters.accept1],
    mediaType: "text",
    serializer
};
const resetOperationSpec = {
    path: "/policies/{attestationType}:reset",
    httpMethod: "POST",
    responses: {
        200: {
            bodyMapper: Mappers.PolicyResponse
        },
        default: {
            bodyMapper: Mappers.CloudError
        }
    },
    requestBody: Parameters.policyJws,
    queryParameters: [Parameters.apiVersion],
    urlParameters: [Parameters.instanceUrl, Parameters.attestationType],
    headerParameters: [Parameters.contentType, Parameters.accept1],
    mediaType: "text",
    serializer
};
//# sourceMappingURL=policy.js.map