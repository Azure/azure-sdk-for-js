"use strict";
/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.AttestationImpl = void 0;
const tslib_1 = require("tslib");
const tracing_js_1 = require("../tracing.js");
const coreClient = tslib_1.__importStar(require("@azure/core-client"));
const Mappers = tslib_1.__importStar(require("../models/mappers.js"));
const Parameters = tslib_1.__importStar(require("../models/parameters.js"));
/** Class containing Attestation operations. */
class AttestationImpl {
    /**
     * Initialize a new instance of the class Attestation class.
     * @param client Reference to the service client
     */
    constructor(client) {
        this.client = client;
    }
    /**
     * Processes an OpenEnclave report , producing an artifact. The type of artifact produced is dependent
     * upon attestation policy.
     * @param request Request object containing the quote
     * @param options The options parameters.
     */
    async attestOpenEnclave(request, options) {
        return tracing_js_1.tracingClient.withSpan("GeneratedClient.attestOpenEnclave", options !== null && options !== void 0 ? options : {}, async (options) => {
            return this.client.sendOperationRequest({ request, options }, attestOpenEnclaveOperationSpec);
        });
    }
    /**
     * Processes an SGX enclave quote, producing an artifact. The type of artifact produced is dependent
     * upon attestation policy.
     * @param request Request object containing the quote
     * @param options The options parameters.
     */
    async attestSgxEnclave(request, options) {
        return tracing_js_1.tracingClient.withSpan("GeneratedClient.attestSgxEnclave", options !== null && options !== void 0 ? options : {}, async (options) => {
            return this.client.sendOperationRequest({ request, options }, attestSgxEnclaveOperationSpec);
        });
    }
    /**
     * Processes attestation evidence from a VBS enclave, producing an attestation result. The attestation
     * result produced is dependent upon the attestation policy.
     * @param request Request object
     * @param options The options parameters.
     */
    async attestTpm(request, options) {
        return tracing_js_1.tracingClient.withSpan("GeneratedClient.attestTpm", options !== null && options !== void 0 ? options : {}, async (options) => {
            return this.client.sendOperationRequest({ request, options }, attestTpmOperationSpec);
        });
    }
}
exports.AttestationImpl = AttestationImpl;
// Operation Specifications
const serializer = coreClient.createSerializer(Mappers, /* isXml */ false);
const attestOpenEnclaveOperationSpec = {
    path: "/attest/OpenEnclave",
    httpMethod: "POST",
    responses: {
        200: {
            bodyMapper: Mappers.AttestationResponse
        },
        default: {
            bodyMapper: Mappers.CloudError
        }
    },
    requestBody: Parameters.request,
    queryParameters: [Parameters.apiVersion],
    urlParameters: [Parameters.instanceUrl],
    headerParameters: [Parameters.accept, Parameters.contentType1],
    mediaType: "json",
    serializer
};
const attestSgxEnclaveOperationSpec = {
    path: "/attest/SgxEnclave",
    httpMethod: "POST",
    responses: {
        200: {
            bodyMapper: Mappers.AttestationResponse
        },
        default: {
            bodyMapper: Mappers.CloudError
        }
    },
    requestBody: Parameters.request1,
    queryParameters: [Parameters.apiVersion],
    urlParameters: [Parameters.instanceUrl],
    headerParameters: [Parameters.accept, Parameters.contentType1],
    mediaType: "json",
    serializer
};
const attestTpmOperationSpec = {
    path: "/attest/Tpm",
    httpMethod: "POST",
    responses: {
        200: {
            bodyMapper: Mappers.TpmAttestationResponse
        },
        default: {
            bodyMapper: Mappers.CloudError
        }
    },
    requestBody: Parameters.request2,
    queryParameters: [Parameters.apiVersion],
    urlParameters: [Parameters.instanceUrl],
    headerParameters: [Parameters.accept, Parameters.contentType1],
    mediaType: "json",
    serializer
};
//# sourceMappingURL=attestation.js.map