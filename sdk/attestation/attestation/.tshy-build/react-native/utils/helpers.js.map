{"version":3,"file":"helpers.js","sourceRoot":"","sources":["../../../src/utils/helpers.ts"],"names":[],"mappings":"AAAA,uCAAuC;AACvC,kCAAkC;AAElC,qEAAqE;AACrE,yCAAyC;AACzC,OAAO,KAAK,SAAS,MAAM,WAAW,CAAC;AACvC,OAAO,EAAE,qBAAqB,EAAE,cAAc,EAAE,MAAM,aAAa,CAAC;AAEpE;;;;GAIG;AACH,MAAM,UAAU,2BAA2B,CACzC,UAAkB,EAClB,WAAmB;IAEnB,EAAE;IACF,sEAAsE;IACtE,EAAE;IACF,iEAAiE;IACjE,eAAe;IACf,MAAM,IAAI,GAAG,IAAI,SAAS,CAAC,IAAI,EAAE,CAAC;IAClC,IAAI,CAAC,WAAW,CAAC,WAAW,CAAC,CAAC;IAE9B,MAAM,GAAG,GAAG,IAAI,CAAC,yBAAyB,EAAE,CAAC;IAE7C,MAAM,MAAM,GAAG,IAAI,SAAS,CAAC,IAAI,CAAC,MAAM,CAAC,SAAS,CAAC,EAAE,GAAG,EAAE,GAAG,EAAE,CAAC,CAAC;IAEjE,0EAA0E;IAC1E,MAAM,YAAY,GAAG,MAAM,CAAC;IAE5B,MAAM,CAAC,IAAI,CAAC,UAAU,CAAC,CAAC;IACxB,MAAM,CAAC,YAAY,CAAC,YAAY,CAAC,CAAC;IAClC,MAAM,MAAM,GAAG,MAAM,CAAC,IAAI,EAAE,CAAC;IAE7B,MAAM,QAAQ,GAAG,IAAI,SAAS,CAAC,IAAI,CAAC,MAAM,CAAC,SAAS,CAAC,EAAE,GAAG,EAAE,GAAG,EAAE,CAAC,CAAC;IACnE,QAAQ,CAAC,IAAI,CAAC,IAAI,CAAC,YAAY,EAAE,CAAC,CAAC;IACnC,QAAQ,CAAC,YAAY,CAAC,YAAY,CAAC,CAAC;IACpC,IAAI,CAAC,QAAQ,CAAC,MAAM,CAAC,MAAM,CAAC,EAAE,CAAC;QAC7B,MAAM,IAAI,KAAK,CAAC,8DAA8D,CAAC,CAAC;IAClF,CAAC;IACD,OAAO,EAAE,WAAW,EAAE,WAAW,EAAE,UAAU,EAAE,UAAU,EAAE,CAAC;AAC9D,CAAC;AAID;;;;GAIG;AACH,MAAM,UAAU,aAAa,CAAC,MAAc,EAAE,OAAgB;IAC5D,IAAI,GAAG,GAAG,aAAa,GAAG,OAAO,GAAG,SAAS,CAAC;IAC9C,OAAO,MAAM,KAAK,EAAE,EAAE,CAAC;QACrB,GAAG,IAAI,MAAM,CAAC,MAAM,CAAC,CAAC,EAAE,EAAE,CAAC,GAAG,IAAI,CAAC;QACnC,MAAM,GAAG,MAAM,CAAC,MAAM,CAAC,EAAE,CAAC,CAAC;IAC7B,CAAC;IACD,GAAG,IAAI,WAAW,GAAG,OAAO,GAAG,SAAS,CAAC;IAEzC,OAAO,GAAG,CAAC;AACb,CAAC;AAED;;;GAGG;AACH,MAAM,UAAU,WAAW,CAAC,KAAa;IACvC,OAAO,qBAAqB,CAAC,cAAc,CAAC,KAAK,CAAC,CAAC,CAAC;AACtD,CAAC","sourcesContent":["// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT License.\n\n// eslint-disable-next-line @typescript-eslint/triple-slash-reference\n/// <reference path=\"../jsrsasign.d.ts\"/>\nimport * as jsrsasign from \"jsrsasign\";\nimport { base64EncodeByteArray, hexToByteArray } from \"./base64.js\";\n\n/** Create an AttestationSigningKey from the provided private key and certificate.\n *\n * @param privateKey - PEM encoded DER Encoded RSA or ECDS key.\n * @param certificate - PEM encoded DER encoded X.509 certificate.\n */\nexport function verifyAttestationSigningKey(\n  privateKey: string,\n  certificate: string,\n): { certificate: string; privateKey: string } {\n  //\n  // Ensure that the key and certificate are associated with each other.\n  //\n  // Sign a buffer with the key, then verify the signature with the\n  // certificate.\n  const x509 = new jsrsasign.X509();\n  x509.readCertPEM(certificate);\n\n  const alg = x509.getSignatureAlgorithmName();\n\n  const signer = new jsrsasign.KJUR.crypto.Signature({ alg: alg });\n\n  // Confirm that the certificate and private key are related to each other.\n  const bufferToSign = \"1234\";\n\n  signer.init(privateKey);\n  signer.updateString(bufferToSign);\n  const sigVal = signer.sign();\n\n  const verifier = new jsrsasign.KJUR.crypto.Signature({ alg: alg });\n  verifier.init(x509.getPublicKey());\n  verifier.updateString(bufferToSign);\n  if (!verifier.verify(sigVal)) {\n    throw new Error(\"verifyAttestationSigningKey: Key does not match Certificate.\");\n  }\n  return { certificate: certificate, privateKey: privateKey };\n}\n\nexport type PemType = \"CERTIFICATE\" | \"PRIVATE KEY\";\n\n/**\n *\n * @param base64 - Base64 encoded DER object to encode as PEM.\n * @param pemType - PEM object type - typically \"CERTIFICATE\" |\n */\nexport function pemFromBase64(base64: string, pemType: PemType): string {\n  let pem = \"-----BEGIN \" + pemType + \"-----\\n\";\n  while (base64 !== \"\") {\n    pem += base64.substr(0, 64) + \"\\n\";\n    base64 = base64.substr(64);\n  }\n  pem += \"-----END \" + pemType + \"-----\\n\";\n\n  return pem;\n}\n\n/**\n * Converts a hex encoded string to its base64 equivalent.\n * @param value - Hex encoded value\n */\nexport function hexToBase64(value: string): string {\n  return base64EncodeByteArray(hexToByteArray(value));\n}\n"]}