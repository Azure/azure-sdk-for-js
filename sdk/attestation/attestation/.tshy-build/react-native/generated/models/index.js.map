{"version":3,"file":"index.js","sourceRoot":"","sources":["../../../../src/generated/models/index.ts"],"names":[],"mappings":"AAAA;;;;;;GAMG;AA8RH,wEAAwE;AACxE,MAAM,CAAN,IAAY,oBAOX;AAPD,WAAY,oBAAoB;IAC9B,sCAAsC;IACtC,iDAAyB,CAAA;IACzB,oCAAoC;IACpC,mDAA2B,CAAA;IAC3B,6CAA6C;IAC7C,mCAAW,CAAA;AACb,CAAC,EAPW,oBAAoB,KAApB,oBAAoB,QAO/B;AAaD,iEAAiE;AACjE,MAAM,CAAN,IAAY,aAKX;AALD,WAAY,aAAa;IACvB,wFAAwF;IACxF,kCAAiB,CAAA;IACjB,0GAA0G;IAC1G,8BAAa,CAAA;AACf,CAAC,EALW,aAAa,KAAb,aAAa,QAKxB;AAYD,gFAAgF;AAChF,MAAM,CAAN,IAAY,4BAKX;AALD,WAAY,4BAA4B;IACtC,wFAAwF;IACxF,uDAAuB,CAAA;IACvB,0GAA0G;IAC1G,qDAAqB,CAAA;AACvB,CAAC,EALW,4BAA4B,KAA5B,4BAA4B,QAKvC;AAYD,2EAA2E;AAC3E,MAAM,CAAN,IAAY,uBAKX;AALD,WAAY,uBAAuB;IACjC,+CAA+C;IAC/C,8CAAmB,CAAA;IACnB,+CAA+C;IAC/C,8CAAmB,CAAA;AACrB,CAAC,EALW,uBAAuB,KAAvB,uBAAuB,QAKlC","sourcesContent":["/*\n * Copyright (c) Microsoft Corporation.\n * Licensed under the MIT License.\n *\n * Code generated by Microsoft (R) AutoRest Code Generator.\n * Changes may cause incorrect behavior and will be lost if the code is regenerated.\n */\n\nimport * as coreClient from \"@azure/core-client\";\n\n/** The response to an attestation policy operation */\nexport interface PolicyResponse {\n  /** An RFC7519 JSON Web Token structure whose body is an PolicyResult object. */\n  token: string;\n}\n\n/** An error response from Attestation. */\nexport interface CloudError {\n  /** An error response from Attestation. */\n  error?: CloudErrorBody;\n}\n\n/** An error response from Attestation. */\nexport interface CloudErrorBody {\n  /** An identifier for the error. Codes are invariant and are intended to be consumed programmatically. */\n  code?: string;\n  /** A message describing the error, intended to be suitable for displaying in a user interface. */\n  message?: string;\n}\n\n/** The response to an attestation policy management API */\nexport interface PolicyCertificatesResponse {\n  /** An RFC7519 JSON Web Token structure containing a PolicyCertificatesResults object which contains the certificates used to validate policy changes */\n  token: string;\n}\n\n/** The response to an attestation policy management API */\nexport interface PolicyCertificatesModifyResponse {\n  /** An RFC7519 JSON Web Token structure whose body is a PolicyCertificatesModificationResult object. */\n  token: string;\n}\n\n/** Attestation request for Intel SGX enclaves */\nexport interface AttestOpenEnclaveRequest {\n  /** OpenEnclave report from the enclave to be attested */\n  report?: Uint8Array;\n  /** Runtime data provided by the enclave at the time of report generation. The MAA will verify that the first 32 bytes of the report_data field of the quote contains the SHA256 hash of the decoded \"data\" field of the runtime data. */\n  runtimeData?: RuntimeData;\n  /** Base64Url encoded \"InitTime data\". The MAA will verify that the init data was known to the enclave. Note that InitTimeData is invalid for CoffeeLake processors. */\n  initTimeData?: InitTimeData;\n  /** Attest against the provided draft policy. Note that the resulting token cannot be validated. */\n  draftPolicyForAttestation?: string;\n}\n\n/** Defines the \"run time data\" provided by the attestation target for use by the MAA */\nexport interface RuntimeData {\n  /** UTF-8 encoded Runtime Data generated by the trusted environment */\n  data?: Uint8Array;\n  /** The type of data contained within the \"data\" field */\n  dataType?: DataType;\n}\n\n/** Defines the \"initialization time data\" used to provision the attestation target for use by the MAA */\nexport interface InitTimeData {\n  /** UTF-8 encoded Initialization Data passed into the trusted environment when it is created. */\n  data?: Uint8Array;\n  /** The type of data contained within the \"data\" field */\n  dataType?: DataType;\n}\n\n/** The result of an attestation operation */\nexport interface AttestationResponse {\n  /** An RFC 7519 JSON Web Token, the body of which is an AttestationResult object. */\n  token: string;\n}\n\n/** Attestation request for Intel SGX enclaves */\nexport interface AttestSgxEnclaveRequest {\n  /** Quote of the enclave to be attested */\n  quote?: Uint8Array;\n  /** Runtime data provided by the enclave at the time of quote generation. The MAA will verify that the first 32 bytes of the report_data field of the quote contains the SHA256 hash of the decoded \"data\" field of the runtime data. */\n  runtimeData?: RuntimeData;\n  /** Initialization data provided when the enclave is created. MAA will verify that the init data was known to the enclave. Note that InitTimeData is invalid for CoffeeLake processors. */\n  initTimeData?: InitTimeData;\n  /** Attest against the provided draft policy. Note that the resulting token cannot be validated. */\n  draftPolicyForAttestation?: string;\n}\n\n/** Attestation request for Trusted Platform Module (TPM) attestation. */\nexport interface TpmAttestationRequest {\n  /** Protocol data containing artifacts for attestation. */\n  data?: Uint8Array;\n}\n\n/** Attestation response for Trusted Platform Module (TPM) attestation. */\nexport interface TpmAttestationResponse {\n  /** Protocol data containing attestation service response. */\n  data?: Uint8Array;\n}\n\nexport interface JsonWebKeySet {\n  /**\n   * The value of the \"keys\" parameter is an array of JWK values.  By\n   * default, the order of the JWK values within the array does not imply\n   * an order of preference among them, although applications of JWK Sets\n   * can choose to assign a meaning to the order for their purposes, if\n   * desired.\n   */\n  keys: JsonWebKey[];\n}\n\nexport interface JsonWebKey {\n  /**\n   * The \"alg\" (algorithm) parameter identifies the algorithm intended for\n   * use with the key.  The values used should either be registered in the\n   * IANA \"JSON Web Signature and Encryption Algorithms\" registry\n   * established by [JWA] or be a value that contains a Collision-\n   * Resistant Name.\n   */\n  alg?: string;\n  /** The \"crv\" (curve) parameter identifies the curve type */\n  crv?: string;\n  /** RSA private exponent or ECC private key */\n  d?: string;\n  /** RSA Private Key Parameter */\n  dp?: string;\n  /** RSA Private Key Parameter */\n  dq?: string;\n  /** RSA public exponent, in Base64 */\n  e?: string;\n  /** Symmetric key */\n  k?: string;\n  /**\n   * The \"kid\" (key ID) parameter is used to match a specific key.  This\n   * is used, for instance, to choose among a set of keys within a JWK Set\n   * during key rollover.  The structure of the \"kid\" value is\n   * unspecified.  When \"kid\" values are used within a JWK Set, different\n   * keys within the JWK Set SHOULD use distinct \"kid\" values.  (One\n   * example in which different keys might use the same \"kid\" value is if\n   * they have different \"kty\" (key type) values but are considered to be\n   * equivalent alternatives by the application using them.)  The \"kid\"\n   * value is a case-sensitive string.\n   */\n  kid?: string;\n  /**\n   * The \"kty\" (key type) parameter identifies the cryptographic algorithm\n   * family used with the key, such as \"RSA\" or \"EC\". \"kty\" values should\n   * either be registered in the IANA \"JSON Web Key Types\" registry\n   * established by [JWA] or be a value that contains a Collision-\n   * Resistant Name.  The \"kty\" value is a case-sensitive string.\n   */\n  kty: string;\n  /** RSA modulus, in Base64 */\n  n?: string;\n  /** RSA secret prime */\n  p?: string;\n  /** RSA secret prime, with p < q */\n  q?: string;\n  /** RSA Private Key Parameter */\n  qi?: string;\n  /**\n   * Use (\"public key use\") identifies the intended use of\n   * the public key. The \"use\" parameter is employed to indicate whether\n   * a public key is used for encrypting data or verifying the signature\n   * on data. Values are commonly \"sig\" (signature) or \"enc\" (encryption).\n   */\n  use?: string;\n  /** X coordinate for the Elliptic Curve point */\n  x?: string;\n  /**\n   * The \"x5c\" (X.509 certificate chain) parameter contains a chain of one\n   * or more PKIX certificates [RFC5280].  The certificate chain is\n   * represented as a JSON array of certificate value strings.  Each\n   * string in the array is a base64-encoded (Section 4 of [RFC4648] --\n   * not base64url-encoded) DER [ITU.X690.1994] PKIX certificate value.\n   * The PKIX certificate containing the key value MUST be the first\n   * certificate.\n   */\n  x5C?: string[];\n  /** Y coordinate for the Elliptic Curve point */\n  y?: string;\n}\n\n/** The body of the JWT used for the PolicyCertificates APIs */\nexport interface AttestationCertificateManagementBody {\n  /** RFC 7517 Json Web Key describing the certificate. */\n  policyCertificate?: JsonWebKey;\n}\n\n/** The result of a call to retrieve policy certificates. */\nexport interface PolicyCertificatesResult {\n  /** SHA256 Hash of the binary representation certificate which was added or removed */\n  policyCertificates: JsonWebKeySet;\n}\n\n/** The result of a policy certificate modification */\nexport interface PolicyCertificatesModificationResult {\n  /** Hex encoded SHA1 Hash of the binary representation certificate which was added or removed */\n  certificateThumbprint: string;\n  /** The result of the operation */\n  certificateResolution: CertificateModification;\n}\n\nexport interface StoredAttestationPolicy {\n  /** Policy text to set as a sequence of UTF-8 encoded octets. */\n  attestationPolicy?: Uint8Array;\n}\n\n/** The result of a policy certificate modification */\nexport interface PolicyResult {\n  /** The result of the operation */\n  policyResolution: PolicyModification;\n  /** The SHA256 hash of the policy object modified */\n  policyTokenHash: Uint8Array;\n  /** The certificate used to sign the policy object, if specified */\n  policySigner?: JsonWebKey;\n  /** A JSON Web Token containing a StoredAttestationPolicy object with the attestation policy */\n  policy?: string;\n}\n\n/** A Microsoft Azure Attestation response token body - the body of a response token issued by MAA */\nexport interface GeneratedAttestationResult {\n  /** Unique Identifier for the token */\n  jti: string;\n  /** The Principal who issued the token */\n  iss: string;\n  /** The time at which the token was issued, in the number of seconds since 1970-01-0T00:00:00Z UTC */\n  iat?: number;\n  /** The expiration time after which the token is no longer valid, in the number of seconds since 1970-01-0T00:00:00Z UTC */\n  exp?: number;\n  /** The not before time before which the token cannot be considered valid, in the number of seconds since 1970-01-0T00:00:00Z UTC */\n  nbf?: number;\n  /** An RFC 7800 Proof of Possession Key */\n  cnf?: Record<string, unknown>;\n  /** The Nonce input to the attestation request, if provided. */\n  nonce?: string;\n  /** The Schema version of this structure. Current Value: 1.0 */\n  version: string;\n  /** Runtime Claims */\n  runtimeClaims?: Record<string, unknown>;\n  /** Inittime Claims */\n  inittimeClaims?: Record<string, unknown>;\n  /** Policy Generated Claims */\n  policyClaims?: Record<string, unknown>;\n  /** The Attestation type being attested. */\n  verifierType: string;\n  /** The certificate used to sign the policy object, if specified. */\n  policySigner?: JsonWebKey;\n  /** The SHA256 hash of the BASE64URL encoded policy text used for attestation */\n  policyHash: Uint8Array;\n  /** True if the enclave is debuggable, false otherwise */\n  isDebuggable: boolean;\n  /** The SGX Product ID for the enclave. */\n  productId: number;\n  /** The HEX encoded SGX MRENCLAVE value for the enclave. */\n  mrEnclave: string;\n  /** The HEX encoded SGX MRSIGNER value for the enclave. */\n  mrSigner: string;\n  /** The SGX SVN value for the enclave. */\n  svn: number;\n  /** A copy of the RuntimeData specified as an input to the attest call. */\n  enclaveHeldData?: Uint8Array;\n  /** The SGX SVN value for the enclave. */\n  sgxCollateral?: Record<string, unknown>;\n  /** DEPRECATED: Private Preview version of x-ms-ver claim. */\n  deprecatedVersion?: string;\n  /** DEPRECATED: Private Preview version of x-ms-sgx-is-debuggable claim. */\n  deprecatedIsDebuggable?: boolean;\n  /** DEPRECATED: Private Preview version of x-ms-sgx-collateral claim. */\n  deprecatedSgxCollateral?: Record<string, unknown>;\n  /** DEPRECATED: Private Preview version of x-ms-sgx-ehd claim. */\n  deprecatedEnclaveHeldData?: Uint8Array;\n  /** DEPRECATED: Private Preview version of x-ms-sgx-ehd claim. */\n  deprecatedEnclaveHeldData2?: Uint8Array;\n  /** DEPRECATED: Private Preview version of x-ms-sgx-product-id */\n  deprecatedProductId?: number;\n  /** DEPRECATED: Private Preview version of x-ms-sgx-mrenclave. */\n  deprecatedMrEnclave?: string;\n  /** DEPRECATED: Private Preview version of x-ms-sgx-mrsigner. */\n  deprecatedMrSigner?: string;\n  /** DEPRECATED: Private Preview version of x-ms-sgx-svn. */\n  deprecatedSvn?: number;\n  /** DEPRECATED: Private Preview version of x-ms-tee. */\n  deprecatedTee?: string;\n  /** DEPRECATED: Private Preview version of x-ms-policy-signer */\n  deprecatedPolicySigner?: JsonWebKey;\n  /** DEPRECATED: Private Preview version of x-ms-policy-hash */\n  deprecatedPolicyHash?: Uint8Array;\n  /** DEPRECATED: Private Preview version of nonce */\n  deprecatedRpData?: string;\n}\n\n/** Known values of {@link AttestationType} that the service accepts. */\nexport enum KnownAttestationType {\n  /** Intel Software Guard eXtensions */\n  SgxEnclave = \"SgxEnclave\",\n  /** OpenEnclave extensions to SGX */\n  OpenEnclave = \"OpenEnclave\",\n  /** Edge TPM Virtualization Based Security */\n  Tpm = \"Tpm\"\n}\n\n/**\n * Defines values for AttestationType. \\\n * {@link KnownAttestationType} can be used interchangeably with AttestationType,\n *  this enum contains the known values that the service supports.\n * ### Known values supported by the service\n * **SgxEnclave**: Intel Software Guard eXtensions \\\n * **OpenEnclave**: OpenEnclave extensions to SGX \\\n * **Tpm**: Edge TPM Virtualization Based Security\n */\nexport type AttestationType = string;\n\n/** Known values of {@link DataType} that the service accepts. */\nexport enum KnownDataType {\n  /** The contents of the field should be treated as binary and not interpreted by MAA. */\n  Binary = \"Binary\",\n  /** The contents of the field should be treated as a JSON object and may be further interpreted by MAA. */\n  Json = \"JSON\"\n}\n\n/**\n * Defines values for DataType. \\\n * {@link KnownDataType} can be used interchangeably with DataType,\n *  this enum contains the known values that the service supports.\n * ### Known values supported by the service\n * **Binary**: The contents of the field should be treated as binary and not interpreted by MAA. \\\n * **JSON**: The contents of the field should be treated as a JSON object and may be further interpreted by MAA.\n */\nexport type DataType = string;\n\n/** Known values of {@link CertificateModification} that the service accepts. */\nexport enum KnownCertificateModification {\n  /** After the operation was performed, the certificate is in the set of certificates. */\n  IsPresent = \"IsPresent\",\n  /** After the operation was performed, the certificate is no longer present in the set of certificates. */\n  IsAbsent = \"IsAbsent\"\n}\n\n/**\n * Defines values for CertificateModification. \\\n * {@link KnownCertificateModification} can be used interchangeably with CertificateModification,\n *  this enum contains the known values that the service supports.\n * ### Known values supported by the service\n * **IsPresent**: After the operation was performed, the certificate is in the set of certificates. \\\n * **IsAbsent**: After the operation was performed, the certificate is no longer present in the set of certificates.\n */\nexport type CertificateModification = string;\n\n/** Known values of {@link PolicyModification} that the service accepts. */\nexport enum KnownPolicyModification {\n  /** The specified policy object was updated. */\n  Updated = \"Updated\",\n  /** The specified policy object was removed. */\n  Removed = \"Removed\"\n}\n\n/**\n * Defines values for PolicyModification. \\\n * {@link KnownPolicyModification} can be used interchangeably with PolicyModification,\n *  this enum contains the known values that the service supports.\n * ### Known values supported by the service\n * **Updated**: The specified policy object was updated. \\\n * **Removed**: The specified policy object was removed.\n */\nexport type PolicyModification = string;\n\n/** Optional parameters. */\nexport interface PolicyGetOptionalParams extends coreClient.OperationOptions {}\n\n/** Contains response data for the get operation. */\nexport type PolicyGetResponse = PolicyResponse;\n\n/** Optional parameters. */\nexport interface PolicySetModelOptionalParams\n  extends coreClient.OperationOptions {}\n\n/** Contains response data for the set operation. */\nexport type PolicySetModelResponse = PolicyResponse;\n\n/** Optional parameters. */\nexport interface PolicyResetOptionalParams\n  extends coreClient.OperationOptions {}\n\n/** Contains response data for the reset operation. */\nexport type PolicyResetResponse = PolicyResponse;\n\n/** Optional parameters. */\nexport interface PolicyCertificatesGetOptionalParams\n  extends coreClient.OperationOptions {}\n\n/** Contains response data for the get operation. */\nexport type PolicyCertificatesGetResponse = PolicyCertificatesResponse;\n\n/** Optional parameters. */\nexport interface PolicyCertificatesAddOptionalParams\n  extends coreClient.OperationOptions {}\n\n/** Contains response data for the add operation. */\nexport type PolicyCertificatesAddResponse = PolicyCertificatesModifyResponse;\n\n/** Optional parameters. */\nexport interface PolicyCertificatesRemoveOptionalParams\n  extends coreClient.OperationOptions {}\n\n/** Contains response data for the remove operation. */\nexport type PolicyCertificatesRemoveResponse = PolicyCertificatesModifyResponse;\n\n/** Optional parameters. */\nexport interface AttestationAttestOpenEnclaveOptionalParams\n  extends coreClient.OperationOptions {}\n\n/** Contains response data for the attestOpenEnclave operation. */\nexport type AttestationAttestOpenEnclaveResponse = AttestationResponse;\n\n/** Optional parameters. */\nexport interface AttestationAttestSgxEnclaveOptionalParams\n  extends coreClient.OperationOptions {}\n\n/** Contains response data for the attestSgxEnclave operation. */\nexport type AttestationAttestSgxEnclaveResponse = AttestationResponse;\n\n/** Optional parameters. */\nexport interface AttestationAttestTpmOptionalParams\n  extends coreClient.OperationOptions {}\n\n/** Contains response data for the attestTpm operation. */\nexport type AttestationAttestTpmResponse = TpmAttestationResponse;\n\n/** Optional parameters. */\nexport interface SigningCertificatesGetOptionalParams\n  extends coreClient.OperationOptions {}\n\n/** Contains response data for the get operation. */\nexport type SigningCertificatesGetResponse = JsonWebKeySet;\n\n/** Optional parameters. */\nexport interface MetadataConfigurationGetOptionalParams\n  extends coreClient.OperationOptions {}\n\n/** Contains response data for the get operation. */\nexport type MetadataConfigurationGetResponse = Record<string, unknown>;\n\n/** Optional parameters. */\nexport interface GeneratedClientOptionalParams\n  extends coreClient.ServiceClientOptions {\n  /** Api Version */\n  apiVersion?: string;\n  /** Overrides client endpoint. */\n  endpoint?: string;\n}\n"]}