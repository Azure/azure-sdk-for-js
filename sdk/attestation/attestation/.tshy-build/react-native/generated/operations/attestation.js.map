{"version":3,"file":"attestation.js","sourceRoot":"","sources":["../../../../src/generated/operations/attestation.ts"],"names":[],"mappings":"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","sourcesContent":["/*\n * Copyright (c) Microsoft Corporation.\n * Licensed under the MIT License.\n *\n * Code generated by Microsoft (R) AutoRest Code Generator.\n * Changes may cause incorrect behavior and will be lost if the code is regenerated.\n */\n\nimport { tracingClient } from \"../tracing.js\";\nimport { Attestation } from \"../operationsInterfaces/index.js\";\nimport * as coreClient from \"@azure/core-client\";\nimport * as Mappers from \"../models/mappers.js\";\nimport * as Parameters from \"../models/parameters.js\";\nimport { GeneratedClient } from \"../generatedClient.js\";\nimport {\n  AttestOpenEnclaveRequest,\n  AttestationAttestOpenEnclaveOptionalParams,\n  AttestationAttestOpenEnclaveResponse,\n  AttestSgxEnclaveRequest,\n  AttestationAttestSgxEnclaveOptionalParams,\n  AttestationAttestSgxEnclaveResponse,\n  TpmAttestationRequest,\n  AttestationAttestTpmOptionalParams,\n  AttestationAttestTpmResponse\n} from \"../models/index.js\";\n\n/** Class containing Attestation operations. */\nexport class AttestationImpl implements Attestation {\n  private readonly client: GeneratedClient;\n\n  /**\n   * Initialize a new instance of the class Attestation class.\n   * @param client Reference to the service client\n   */\n  constructor(client: GeneratedClient) {\n    this.client = client;\n  }\n\n  /**\n   * Processes an OpenEnclave report , producing an artifact. The type of artifact produced is dependent\n   * upon attestation policy.\n   * @param request Request object containing the quote\n   * @param options The options parameters.\n   */\n  async attestOpenEnclave(\n    request: AttestOpenEnclaveRequest,\n    options?: AttestationAttestOpenEnclaveOptionalParams\n  ): Promise<AttestationAttestOpenEnclaveResponse> {\n    return tracingClient.withSpan(\n      \"GeneratedClient.attestOpenEnclave\",\n      options ?? {},\n      async (options) => {\n        return this.client.sendOperationRequest(\n          { request, options },\n          attestOpenEnclaveOperationSpec\n        ) as Promise<AttestationAttestOpenEnclaveResponse>;\n      }\n    );\n  }\n\n  /**\n   * Processes an SGX enclave quote, producing an artifact. The type of artifact produced is dependent\n   * upon attestation policy.\n   * @param request Request object containing the quote\n   * @param options The options parameters.\n   */\n  async attestSgxEnclave(\n    request: AttestSgxEnclaveRequest,\n    options?: AttestationAttestSgxEnclaveOptionalParams\n  ): Promise<AttestationAttestSgxEnclaveResponse> {\n    return tracingClient.withSpan(\n      \"GeneratedClient.attestSgxEnclave\",\n      options ?? {},\n      async (options) => {\n        return this.client.sendOperationRequest(\n          { request, options },\n          attestSgxEnclaveOperationSpec\n        ) as Promise<AttestationAttestSgxEnclaveResponse>;\n      }\n    );\n  }\n\n  /**\n   * Processes attestation evidence from a VBS enclave, producing an attestation result. The attestation\n   * result produced is dependent upon the attestation policy.\n   * @param request Request object\n   * @param options The options parameters.\n   */\n  async attestTpm(\n    request: TpmAttestationRequest,\n    options?: AttestationAttestTpmOptionalParams\n  ): Promise<AttestationAttestTpmResponse> {\n    return tracingClient.withSpan(\n      \"GeneratedClient.attestTpm\",\n      options ?? {},\n      async (options) => {\n        return this.client.sendOperationRequest(\n          { request, options },\n          attestTpmOperationSpec\n        ) as Promise<AttestationAttestTpmResponse>;\n      }\n    );\n  }\n}\n// Operation Specifications\nconst serializer = coreClient.createSerializer(Mappers, /* isXml */ false);\n\nconst attestOpenEnclaveOperationSpec: coreClient.OperationSpec = {\n  path: \"/attest/OpenEnclave\",\n  httpMethod: \"POST\",\n  responses: {\n    200: {\n      bodyMapper: Mappers.AttestationResponse\n    },\n    default: {\n      bodyMapper: Mappers.CloudError\n    }\n  },\n  requestBody: Parameters.request,\n  queryParameters: [Parameters.apiVersion],\n  urlParameters: [Parameters.instanceUrl],\n  headerParameters: [Parameters.accept, Parameters.contentType1],\n  mediaType: \"json\",\n  serializer\n};\nconst attestSgxEnclaveOperationSpec: coreClient.OperationSpec = {\n  path: \"/attest/SgxEnclave\",\n  httpMethod: \"POST\",\n  responses: {\n    200: {\n      bodyMapper: Mappers.AttestationResponse\n    },\n    default: {\n      bodyMapper: Mappers.CloudError\n    }\n  },\n  requestBody: Parameters.request1,\n  queryParameters: [Parameters.apiVersion],\n  urlParameters: [Parameters.instanceUrl],\n  headerParameters: [Parameters.accept, Parameters.contentType1],\n  mediaType: \"json\",\n  serializer\n};\nconst attestTpmOperationSpec: coreClient.OperationSpec = {\n  path: \"/attest/Tpm\",\n  httpMethod: \"POST\",\n  responses: {\n    200: {\n      bodyMapper: Mappers.TpmAttestationResponse\n    },\n    default: {\n      bodyMapper: Mappers.CloudError\n    }\n  },\n  requestBody: Parameters.request2,\n  queryParameters: [Parameters.apiVersion],\n  urlParameters: [Parameters.instanceUrl],\n  headerParameters: [Parameters.accept, Parameters.contentType1],\n  mediaType: \"json\",\n  serializer\n};\n"]}