import type { AttestationSigner } from "./index.js";
import type { GeneratedAttestationResult } from "../generated/index.js";
/**
 * Defines the contents of the {@link AttestationResult.sgxCollateral} claim in
 * an {@link AttestationResult}.
 */
export interface AttestationSgxCollateralInfo {
    /**
     * Hex encoded Sha256 hash of the Quoting Enclave Certificates.
     *
     * See the {@link https://software.intel.com/content/www/us/en/develop/articles/quote-verification-attestation-with-intel-sgx-dcap.html | Intel SGX documentation }
     *  for more information on quote validation.
     */
    qeidcertshash?: string;
    /**
     * Hex encoded Sha256 hash of the Quoting Enclave Certificate CRL.
     *
     * See the {@link https://software.intel.com/content/www/us/en/develop/articles/quote-verification-attestation-with-intel-sgx-dcap.html | Intel SGX documentation }
     *  for more information on quote validation.
     */
    qeidcrlhash?: string;
    /**
     * Hex encoded Sha256 hash of the Quoting Enclave Identity.
     *
     * See the {@link https://software.intel.com/content/www/us/en/develop/articles/quote-verification-attestation-with-intel-sgx-dcap.html | Intel SGX documentation }
     *  for more information on quote validation.
     */
    qeidhash?: string;
    /**
     * Hex encoded Sha256 hash of the SGX Quote or OpenEnclave Report validated
     * by this token.
     *
     * See the {@link https://software.intel.com/content/www/us/en/develop/articles/quote-verification-attestation-with-intel-sgx-dcap.html | Intel SGX documentation }
     *  for more information on quote validation.
     */
    quotehash?: string;
    /**
     * Hex encoded Sha256 hash of the TCB Info Certificates.
     *
     * See the {@link https://software.intel.com/content/www/us/en/develop/articles/quote-verification-attestation-with-intel-sgx-dcap.html | Intel SGX documentation }
     *  for more information on quote validation.
     */
    tcbinfocertshash?: string;
    /**
     * Hex encoded Sha256 hash of the TCB Info Certificate CRL.
     *
     * See the {@link https://software.intel.com/content/www/us/en/develop/articles/quote-verification-attestation-with-intel-sgx-dcap.html | Intel SGX documentation }
     *  for more information on quote validation.
     */
    tcbinfocrlhash?: string;
    /**
     * Hex encoded Sha256 hash of the TCB Info for the device being attested.
     *
     * See the {@link https://software.intel.com/content/www/us/en/develop/articles/quote-verification-attestation-with-intel-sgx-dcap.html | Intel SGX documentation }
     *  for more information on quote validation.
     */
    tcbinfohash?: string;
}
/**
 * A Microsoft Azure Attestation response token body - the body of a response token issued by MAA
 */
export interface AttestationResult {
    /**
     * Unique Identifier for the token.
     *
     * Corresponds to the 'jti' claim defined in
     * {@link https://datatracker.ietf.org/doc/html/rfc7519#section-4.1.7 | RFC 7519 section 4.1.7}
     */
    uniqueId: string;
    /**
     * Returns the issuer of the attestation token. MUST be the same as the
     * endpoint used when constructing the attestation client instance.
     */
    issuer: string;
    /**
     * Returns the "nonce" value if one was specified in the Attest request.
     */
    nonce?: string;
    /**
     * The Schema version of this structure. Current Value: 1.0
     */
    version: string;
    /**
     *  Returns the runtime claims in the token.
     *
     * This value will match the input `runTimeJson` property to the
     * {@link AttestationClient.attestSgxEnclave} or
     * {@link AttestationClient.attestOpenEnclave} API.
     *
     * @remarks
     *
     * The `runtimeClaims` property will only be populated if the
     * `runtimeJson` parameter to the `Attest` API is specified. It will
     * not be populated if the `runtimeData` parameter is specified.
     */
    runTimeClaims: unknown;
    /**
     * Returns the initialization time claims in the token.
     * This value will match the input `initTimeJson` property to the
     * {@link AttestationClient.attestSgxEnclave} or
     * {@link AttestationClient.attestOpenEnclave} API.
     *
     * @remarks
     *
     *  The `initTimeClaims` property will only be populated if the `initTimeJson`
     *  parameter to the `Attest` API is specified. It will not be populated if
     *  the `initTimeData` parameter is specified.
     */
    initTimeClaims: unknown;
    /**
     * Returns the set of claims generated by the attestation policy on the instance.
     */
    policyClaims: unknown;
    /**
     * Returns the verifier which generated this attestation token. Normally one of:
     * "SGX" or "TPM", but others can be specified.
     */
    verifierType: string;
    /**
     * The certificate used to sign the policy object, if specified.
     */
    policySigner?: AttestationSigner;
    /**
     * The base64url encoded SHA256 hash of the BASE64URL encoded policy text
     * used for attestation.
     */
    policyHash: Uint8Array;
    /**
     * True if the enclave is debuggable, false otherwise. Only valid if `verifierType` is SGX.
     */
    isDebuggable?: boolean;
    /**
     * The SGX Product ID for the enclave. Only valid if the `verifierType` field is "SGX"
     */
    productId?: number;
    /**
     * The HEX encoded SGX MRENCLAVE value for the enclave. Only valid if the
     * `verifierType` field is "SGX"
     */
    mrEnclave?: string;
    /**
     * The HEX encoded SGX MRSIGNER value for the enclave. Only valid if the
     * `verifierType` field is "SGX"
     */
    mrSigner?: string;
    /**
     * The SGX SVN value for the enclave. Only valid if the `verifierType` field is "SGX"
     */
    svn?: number;
    /**
     * Returns the value of the runtime_data field specified as an input to the
     * {@link AttestationClient.attestSgxEnclave} or {@link AttestationClient.attestOpenEnclave} API.
     *
     * @remarks
     *
     * The `enclaveHeldData` property will only be populated if the
     * `runtimeData` parameter to the `Attest` API is specified.
     */
    enclaveHeldData?: Uint8Array;
    /**
     * Returns a set of information describing the complete set of inputs to the
     * Attestation validation logic.
     *
     * See the {@link https://software.intel.com/content/www/us/en/develop/articles/quote-verification-attestation-with-intel-sgx-dcap.html | Intel SGX documentation }
     *  for more information on quote validation.
     */
    sgxCollateral?: AttestationSgxCollateralInfo;
}
/**
 * A Microsoft Azure Attestation response token body - the body of a response token issued by MAA
 */
export declare class AttestationResultImpl implements AttestationResult {
    /**
     *
     * @param params - The parameters for the constructor.
     *
     * @hidden
     */
    constructor(params: {
        issuer: string;
        version: string;
        nonce?: string;
        uniqueId: string;
        runTimeClaims?: unknown;
        initTimeClaims?: unknown;
        policyClaims?: unknown;
        verifierType: string;
        policySigner?: AttestationSigner;
        policyHash: Uint8Array;
        isDebuggable?: boolean;
        productId?: number;
        mrEnclave?: string;
        mrSigner?: string;
        svn?: number;
        enclaveHeldData?: Uint8Array;
        sgxCollateral?: AttestationSgxCollateralInfo;
    });
    private _issuer;
    private _version;
    private _nonce?;
    private _uniqueId;
    private _runTimeClaims?;
    private _initTimeClaims?;
    private _policyClaims?;
    private _verifierType;
    private _policySigner?;
    private _policyHash;
    private _isDebuggable?;
    private _productId?;
    private _mrEnclave?;
    private _mrSigner?;
    private _svn?;
    private _enclaveHeldData?;
    private _sgxCollateral?;
    /**
     * Unique Identifier for the token
     *
     */
    get uniqueId(): string;
    /**
     * Returns the issuer of the attestation token. MUST be the same as the
     * endpoint used when constructing the attestation client instance.
     */
    get issuer(): string;
    /**
     * Returns the "nonce" value specified in the Attest request.
     */
    get nonce(): string | undefined;
    /**
     * The Schema version of this structure. Current Value: 1.0
     */
    get version(): string;
    /**
     * Runtime Claims
     */
    get runTimeClaims(): unknown;
    /**
     * Inittime Claims
     */
    get initTimeClaims(): unknown;
    /**
     * Policy Generated Claims
     */
    get policyClaims(): unknown;
    /**
     * The Attestation type being attested.
     */
    get verifierType(): string;
    /**
     * The certificate used to sign the policy object, if specified.
     */
    get policySigner(): AttestationSigner | undefined;
    /**
     * The SHA256 hash of the BASE64URL encoded policy text used for attestation
     */
    get policyHash(): Uint8Array;
    /**
     * True if the enclave is debuggable, false otherwise
     */
    get isDebuggable(): boolean | undefined;
    /**
     * The SGX Product ID for the enclave.
     */
    get productId(): number | undefined;
    /**
     * The HEX encoded SGX MRENCLAVE value for the enclave.
     */
    get mrEnclave(): string | undefined;
    /**
     * The HEX encoded SGX MRSIGNER value for the enclave.
     */
    get mrSigner(): string | undefined;
    /**
     * The SGX SVN value for the enclave.
     */
    get svn(): number | undefined;
    /**
     * A copy of the RuntimeData specified as an input to the attest call.
     */
    get enclaveHeldData(): Uint8Array | undefined;
    /**
     * The SGX SVN value for the enclave.
     */
    get sgxCollateral(): AttestationSgxCollateralInfo | undefined;
}
/**
 *
 * @param generated - Generated attestation result object.
 * @returns newly created AttestationResult from the generated result.
 *
 * @internal
 */
export declare function _attestationResultFromGenerated(generated: GeneratedAttestationResult): AttestationResultImpl;
//# sourceMappingURL=attestationResult.d.ts.map