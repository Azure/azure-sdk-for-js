/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */

import { AttestationProviders } from "../operationsInterfaces";
import * as coreClient from "@azure/core-client";
import * as Mappers from "../models/mappers";
import * as Parameters from "../models/parameters";
import { AttestationManagementClient } from "../attestationManagementClient";
import {
  AttestationProvidersGetOptionalParams,
  AttestationProvidersGetResponse,
  AttestationServiceCreationParams,
  AttestationProvidersCreateOptionalParams,
  AttestationProvidersCreateResponse,
  AttestationServicePatchParams,
  AttestationProvidersUpdateOptionalParams,
  AttestationProvidersUpdateResponse,
  AttestationProvidersDeleteOptionalParams,
  AttestationProvidersListOptionalParams,
  AttestationProvidersListResponse,
  AttestationProvidersListByResourceGroupOptionalParams,
  AttestationProvidersListByResourceGroupResponse,
  AttestationProvidersListDefaultOptionalParams,
  AttestationProvidersListDefaultResponse,
  AttestationProvidersGetDefaultByLocationOptionalParams,
  AttestationProvidersGetDefaultByLocationResponse
} from "../models";

/** Class containing AttestationProviders operations. */
export class AttestationProvidersImpl implements AttestationProviders {
  private readonly client: AttestationManagementClient;

  /**
   * Initialize a new instance of the class AttestationProviders class.
   * @param client Reference to the service client
   */
  constructor(client: AttestationManagementClient) {
    this.client = client;
  }

  /**
   * Get the status of Attestation Provider.
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param providerName Name of the attestation provider.
   * @param options The options parameters.
   */
  get(
    resourceGroupName: string,
    providerName: string,
    options?: AttestationProvidersGetOptionalParams
  ): Promise<AttestationProvidersGetResponse> {
    return this.client.sendOperationRequest(
      { resourceGroupName, providerName, options },
      getOperationSpec
    );
  }

  /**
   * Creates a new Attestation Provider.
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param providerName Name of the attestation provider.
   * @param creationParams Client supplied parameters.
   * @param options The options parameters.
   */
  create(
    resourceGroupName: string,
    providerName: string,
    creationParams: AttestationServiceCreationParams,
    options?: AttestationProvidersCreateOptionalParams
  ): Promise<AttestationProvidersCreateResponse> {
    return this.client.sendOperationRequest(
      { resourceGroupName, providerName, creationParams, options },
      createOperationSpec
    );
  }

  /**
   * Updates the Attestation Provider.
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param providerName Name of the attestation provider.
   * @param updateParams Client supplied parameters.
   * @param options The options parameters.
   */
  update(
    resourceGroupName: string,
    providerName: string,
    updateParams: AttestationServicePatchParams,
    options?: AttestationProvidersUpdateOptionalParams
  ): Promise<AttestationProvidersUpdateResponse> {
    return this.client.sendOperationRequest(
      { resourceGroupName, providerName, updateParams, options },
      updateOperationSpec
    );
  }

  /**
   * Delete Attestation Service.
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param providerName Name of the attestation service
   * @param options The options parameters.
   */
  delete(
    resourceGroupName: string,
    providerName: string,
    options?: AttestationProvidersDeleteOptionalParams
  ): Promise<void> {
    return this.client.sendOperationRequest(
      { resourceGroupName, providerName, options },
      deleteOperationSpec
    );
  }

  /**
   * Returns a list of attestation providers in a subscription.
   * @param options The options parameters.
   */
  list(
    options?: AttestationProvidersListOptionalParams
  ): Promise<AttestationProvidersListResponse> {
    return this.client.sendOperationRequest({ options }, listOperationSpec);
  }

  /**
   * Returns attestation providers list in a resource group.
   * @param resourceGroupName The name of the resource group. The name is case insensitive.
   * @param options The options parameters.
   */
  listByResourceGroup(
    resourceGroupName: string,
    options?: AttestationProvidersListByResourceGroupOptionalParams
  ): Promise<AttestationProvidersListByResourceGroupResponse> {
    return this.client.sendOperationRequest(
      { resourceGroupName, options },
      listByResourceGroupOperationSpec
    );
  }

  /**
   * Get the default provider
   * @param options The options parameters.
   */
  listDefault(
    options?: AttestationProvidersListDefaultOptionalParams
  ): Promise<AttestationProvidersListDefaultResponse> {
    return this.client.sendOperationRequest(
      { options },
      listDefaultOperationSpec
    );
  }

  /**
   * Get the default provider by location.
   * @param location The location of the default provider.
   * @param options The options parameters.
   */
  getDefaultByLocation(
    location: string,
    options?: AttestationProvidersGetDefaultByLocationOptionalParams
  ): Promise<AttestationProvidersGetDefaultByLocationResponse> {
    return this.client.sendOperationRequest(
      { location, options },
      getDefaultByLocationOperationSpec
    );
  }
}
// Operation Specifications
const serializer = coreClient.createSerializer(Mappers, /* isXml */ false);

const getOperationSpec: coreClient.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Attestation/attestationProviders/{providerName}",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.AttestationProvider
    },
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.providerName
  ],
  headerParameters: [Parameters.accept],
  serializer
};
const createOperationSpec: coreClient.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Attestation/attestationProviders/{providerName}",
  httpMethod: "PUT",
  responses: {
    200: {
      bodyMapper: Mappers.AttestationProvider
    },
    201: {
      bodyMapper: Mappers.AttestationProvider
    },
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  requestBody: Parameters.creationParams,
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.providerName
  ],
  headerParameters: [Parameters.accept, Parameters.contentType],
  mediaType: "json",
  serializer
};
const updateOperationSpec: coreClient.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Attestation/attestationProviders/{providerName}",
  httpMethod: "PATCH",
  responses: {
    200: {
      bodyMapper: Mappers.AttestationProvider
    },
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  requestBody: Parameters.updateParams,
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.providerName
  ],
  headerParameters: [Parameters.accept, Parameters.contentType],
  mediaType: "json",
  serializer
};
const deleteOperationSpec: coreClient.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Attestation/attestationProviders/{providerName}",
  httpMethod: "DELETE",
  responses: {
    200: {},
    202: {},
    204: {},
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.providerName
  ],
  headerParameters: [Parameters.accept],
  serializer
};
const listOperationSpec: coreClient.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/providers/Microsoft.Attestation/attestationProviders",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.AttestationProviderListResult
    },
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [Parameters.$host, Parameters.subscriptionId],
  headerParameters: [Parameters.accept],
  serializer
};
const listByResourceGroupOperationSpec: coreClient.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Attestation/attestationProviders",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.AttestationProviderListResult
    },
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName
  ],
  headerParameters: [Parameters.accept],
  serializer
};
const listDefaultOperationSpec: coreClient.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/providers/Microsoft.Attestation/defaultProviders",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.AttestationProviderListResult
    },
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [Parameters.$host, Parameters.subscriptionId],
  headerParameters: [Parameters.accept],
  serializer
};
const getDefaultByLocationOperationSpec: coreClient.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/providers/Microsoft.Attestation/locations/{location}/defaultProvider",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.AttestationProvider
    },
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.location
  ],
  headerParameters: [Parameters.accept],
  serializer
};
