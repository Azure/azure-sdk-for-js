/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */

import {
  EventGetBySubscriptionIdAndTrackingIdOptionalParams,
  EventGetBySubscriptionIdAndTrackingIdResponse,
  EventFetchDetailsBySubscriptionIdAndTrackingIdOptionalParams,
  EventFetchDetailsBySubscriptionIdAndTrackingIdResponse,
  EventGetByTenantIdAndTrackingIdOptionalParams,
  EventGetByTenantIdAndTrackingIdResponse,
  EventFetchDetailsByTenantIdAndTrackingIdOptionalParams,
  EventFetchDetailsByTenantIdAndTrackingIdResponse
} from "../models";

/** Interface representing a EventOperations. */
export interface EventOperations {
  /**
   * Service health event in the subscription by event tracking id
   * @param eventTrackingId Event Id which uniquely identifies ServiceHealth event.
   * @param options The options parameters.
   */
  getBySubscriptionIdAndTrackingId(
    eventTrackingId: string,
    options?: EventGetBySubscriptionIdAndTrackingIdOptionalParams
  ): Promise<EventGetBySubscriptionIdAndTrackingIdResponse>;
  /**
   * Service health event details in the subscription by event tracking id. This can be used to fetch
   * sensitive properties for Security Advisory events
   * @param eventTrackingId Event Id which uniquely identifies ServiceHealth event.
   * @param options The options parameters.
   */
  fetchDetailsBySubscriptionIdAndTrackingId(
    eventTrackingId: string,
    options?: EventFetchDetailsBySubscriptionIdAndTrackingIdOptionalParams
  ): Promise<EventFetchDetailsBySubscriptionIdAndTrackingIdResponse>;
  /**
   * Service health event in the tenant by event tracking id
   * @param eventTrackingId Event Id which uniquely identifies ServiceHealth event.
   * @param options The options parameters.
   */
  getByTenantIdAndTrackingId(
    eventTrackingId: string,
    options?: EventGetByTenantIdAndTrackingIdOptionalParams
  ): Promise<EventGetByTenantIdAndTrackingIdResponse>;
  /**
   * Service health event details in the tenant by event tracking id. This can be used to fetch sensitive
   * properties for Security Advisory events
   * @param eventTrackingId Event Id which uniquely identifies ServiceHealth event.
   * @param options The options parameters.
   */
  fetchDetailsByTenantIdAndTrackingId(
    eventTrackingId: string,
    options?: EventFetchDetailsByTenantIdAndTrackingIdOptionalParams
  ): Promise<EventFetchDetailsByTenantIdAndTrackingIdResponse>;
}
