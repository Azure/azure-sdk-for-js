/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */

import { EventOperations } from "../operationsInterfaces";
import * as coreClient from "@azure/core-client";
import * as Mappers from "../models/mappers";
import * as Parameters from "../models/parameters";
import { MicrosoftResourceHealth } from "../microsoftResourceHealth";
import {
  EventGetBySubscriptionIdAndTrackingIdOptionalParams,
  EventGetBySubscriptionIdAndTrackingIdResponse,
  EventFetchDetailsBySubscriptionIdAndTrackingIdOptionalParams,
  EventFetchDetailsBySubscriptionIdAndTrackingIdResponse,
  EventGetByTenantIdAndTrackingIdOptionalParams,
  EventGetByTenantIdAndTrackingIdResponse,
  EventFetchDetailsByTenantIdAndTrackingIdOptionalParams,
  EventFetchDetailsByTenantIdAndTrackingIdResponse
} from "../models";

/** Class containing EventOperations operations. */
export class EventOperationsImpl implements EventOperations {
  private readonly client: MicrosoftResourceHealth;

  /**
   * Initialize a new instance of the class EventOperations class.
   * @param client Reference to the service client
   */
  constructor(client: MicrosoftResourceHealth) {
    this.client = client;
  }

  /**
   * Service health event in the subscription by event tracking id
   * @param eventTrackingId Event Id which uniquely identifies ServiceHealth event.
   * @param options The options parameters.
   */
  getBySubscriptionIdAndTrackingId(
    eventTrackingId: string,
    options?: EventGetBySubscriptionIdAndTrackingIdOptionalParams
  ): Promise<EventGetBySubscriptionIdAndTrackingIdResponse> {
    return this.client.sendOperationRequest(
      { eventTrackingId, options },
      getBySubscriptionIdAndTrackingIdOperationSpec
    );
  }

  /**
   * Service health event details in the subscription by event tracking id. This can be used to fetch
   * sensitive properties for Security Advisory events
   * @param eventTrackingId Event Id which uniquely identifies ServiceHealth event.
   * @param options The options parameters.
   */
  fetchDetailsBySubscriptionIdAndTrackingId(
    eventTrackingId: string,
    options?: EventFetchDetailsBySubscriptionIdAndTrackingIdOptionalParams
  ): Promise<EventFetchDetailsBySubscriptionIdAndTrackingIdResponse> {
    return this.client.sendOperationRequest(
      { eventTrackingId, options },
      fetchDetailsBySubscriptionIdAndTrackingIdOperationSpec
    );
  }

  /**
   * Service health event in the tenant by event tracking id
   * @param eventTrackingId Event Id which uniquely identifies ServiceHealth event.
   * @param options The options parameters.
   */
  getByTenantIdAndTrackingId(
    eventTrackingId: string,
    options?: EventGetByTenantIdAndTrackingIdOptionalParams
  ): Promise<EventGetByTenantIdAndTrackingIdResponse> {
    return this.client.sendOperationRequest(
      { eventTrackingId, options },
      getByTenantIdAndTrackingIdOperationSpec
    );
  }

  /**
   * Service health event details in the tenant by event tracking id. This can be used to fetch sensitive
   * properties for Security Advisory events
   * @param eventTrackingId Event Id which uniquely identifies ServiceHealth event.
   * @param options The options parameters.
   */
  fetchDetailsByTenantIdAndTrackingId(
    eventTrackingId: string,
    options?: EventFetchDetailsByTenantIdAndTrackingIdOptionalParams
  ): Promise<EventFetchDetailsByTenantIdAndTrackingIdResponse> {
    return this.client.sendOperationRequest(
      { eventTrackingId, options },
      fetchDetailsByTenantIdAndTrackingIdOperationSpec
    );
  }
}
// Operation Specifications
const serializer = coreClient.createSerializer(Mappers, /* isXml */ false);

const getBySubscriptionIdAndTrackingIdOperationSpec: coreClient.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/providers/Microsoft.ResourceHealth/events/{eventTrackingId}",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.Event
    },
    default: {
      bodyMapper: Mappers.ErrorResponse
    }
  },
  queryParameters: [
    Parameters.apiVersion,
    Parameters.filter,
    Parameters.queryStartTime
  ],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.eventTrackingId
  ],
  headerParameters: [Parameters.accept],
  serializer
};
const fetchDetailsBySubscriptionIdAndTrackingIdOperationSpec: coreClient.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/providers/Microsoft.ResourceHealth/events/{eventTrackingId}/fetchEventDetails",
  httpMethod: "POST",
  responses: {
    200: {
      bodyMapper: Mappers.Event
    },
    default: {
      bodyMapper: Mappers.ErrorResponse
    }
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.eventTrackingId
  ],
  headerParameters: [Parameters.accept],
  serializer
};
const getByTenantIdAndTrackingIdOperationSpec: coreClient.OperationSpec = {
  path: "/providers/Microsoft.ResourceHealth/events/{eventTrackingId}",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.Event
    },
    default: {
      bodyMapper: Mappers.ErrorResponse
    }
  },
  queryParameters: [
    Parameters.apiVersion,
    Parameters.filter,
    Parameters.queryStartTime
  ],
  urlParameters: [Parameters.$host, Parameters.eventTrackingId],
  headerParameters: [Parameters.accept],
  serializer
};
const fetchDetailsByTenantIdAndTrackingIdOperationSpec: coreClient.OperationSpec = {
  path:
    "/providers/Microsoft.ResourceHealth/events/{eventTrackingId}/fetchEventDetails",
  httpMethod: "POST",
  responses: {
    200: {
      bodyMapper: Mappers.Event
    },
    default: {
      bodyMapper: Mappers.ErrorResponse
    }
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [Parameters.$host, Parameters.eventTrackingId],
  headerParameters: [Parameters.accept],
  serializer
};
