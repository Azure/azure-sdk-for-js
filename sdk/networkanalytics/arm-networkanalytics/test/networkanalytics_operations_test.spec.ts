/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */

import {
  env,
  Recorder,
  RecorderStartOptions,
  // delay,
  isPlaybackMode,
} from "@azure-tools/test-recorder";
import { createTestCredential } from "@azure-tools/test-credential";
import { assert } from "chai";
import { Context } from "mocha";
import { NetworkAnalyticsClient } from "../src/NetworkAnalyticsClient.js";
import { delay } from "@azure/core-util";

const replaceableVariables: Record<string, string> = {
  AZURE_CLIENT_ID: "azure_client_id",
  AZURE_CLIENT_SECRET: "azure_client_secret",
  AZURE_TENANT_ID: "88888888-8888-8888-8888-888888888888",
  SUBSCRIPTION_ID: "azure_subscription_id"
};

const recorderOptions: RecorderStartOptions = {
  envSetupForPlayback: replaceableVariables
};

export const testPollingOptions = {
  updateIntervalInMs: isPlaybackMode() ? 0 : undefined,
};

describe("NetworkAnalytics test", () => {
  let recorder: Recorder;
  let subscriptionId: string;
  let client: NetworkAnalyticsClient;
  let location: string;
  let resourceGroup: string;
  let resourcename: string;

  beforeEach(async function (this: Context) {
    recorder = new Recorder(this.currentTest);
    await recorder.start(recorderOptions);
    subscriptionId = env.SUBSCRIPTION_ID || '';
    // This is an example of how the environment variables are used
    const credential = createTestCredential();
    client = new NetworkAnalyticsClient(credential, recorder.configureClientOptions({ credentials: { scopes: ["https://management.azure.com/.default"] } }));
    location = "eastus2euap";
    resourceGroup = "myjstest";
    resourcename = "resourcetest";

  });

  afterEach(async function () {
    await recorder.stop();
  });

  it("operation list test", async function () {
    const resArray = new Array();
    for await (let item of client.operations.list().byPage()) {
      resArray.push(item);
    }
    assert.notEqual(resArray.length, 0);
  });

  it("dataProducts create test", async function () {
    const res = await client.dataProducts.create(
      subscriptionId,
      resourceGroup,
      resourcename,
      {
        location,
        properties: {
          majorVersion: "1",
          product: "MCC",
          publisher: "Microsoft"
        },
        id: "",
        type: ""
      });

  }).timeout(14400000);

  it.skip("dataProducts update test", async function () {
    const res = await client.dataProducts.update(
      subscriptionId,
      resourceGroup,
      resourcename,
      {
        properties: {
          purviewAccount: "1"
        }
      });
    // assert.equal(res.name, resourcename);
  });

  it("dataProducts list test", async function () {
    const resArray = new Array();
    for await (let item of client.dataProducts.listByResourceGroup(subscriptionId, resourceGroup)) {
      resArray.push(item);
    }
    assert.equal(resArray.length, 1);
  });

  it("dataProducts delete test", async function () {
    const resArray = new Array();
    const res = await client.dataProducts.deleteOperation(
      subscriptionId,
      resourceGroup,
      resourcename,
    );
    for await (let item of client.dataProducts.listByResourceGroup(subscriptionId, resourceGroup)) {
      resArray.push(item);
    }
    assert.equal(resArray.length, 0);
  });

})
