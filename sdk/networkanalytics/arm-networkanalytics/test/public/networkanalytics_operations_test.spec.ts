/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */

import {
  env,
  Recorder,
  isPlaybackMode,
} from "@azure-tools/test-recorder";
import { createTestCredential } from "@azure-tools/test-credential";
import { assert, beforeEach, afterEach, it, describe } from "vitest";
import { NetworkAnalyticsClient } from "../../src/networkAnalyticsClient.js";
import { createRecorder } from "./utils/recordedClient.js";

export const testPollingOptions = {
  updateIntervalInMs: isPlaybackMode() ? 0 : undefined,
};

describe("NetworkAnalytics test", () => {
  let recorder: Recorder;
  let subscriptionId: string;
  let client: NetworkAnalyticsClient;
  let location: string;
  let resourceGroup: string;
  let resourcename: string;

  beforeEach(async (context) => {
    recorder = await createRecorder(context);
    subscriptionId = env.SUBSCRIPTION_ID || '';
    // This is an example of how the environment variables are used
    const credential = createTestCredential();
    client = new NetworkAnalyticsClient(credential, recorder.configureClientOptions({}));
    location = "eastus2euap";
    resourceGroup = "myjstest";
    resourcename = "resourcetest";

  });

  afterEach(async function () {
    if (recorder?.recordingId) {
      await recorder.stop();
    }
  });

  it("operation list test", async function () {
    const resArray = new Array();
    for await (let item of client.operations.list()) {
      resArray.push(item);
    }
    assert.notEqual(resArray.length, 0);
  });

  it("dataProducts create test", async function () {
    const res = await client.dataProducts.create(
      subscriptionId,
      resourceGroup,
      resourcename,
      {
        location,
        properties: {
          majorVersion: "1",
          product: "MCC",
          publisher: "Microsoft"
        }
      },
      testPollingOptions);
    assert.equal(res.name, resourcename);
  });

  it("dataProducts get test", async function () {
    const res = await client.dataProducts.get(
      subscriptionId,
      resourceGroup,
      resourcename);
    assert.equal(res.name, resourcename);
  });

  it("dataProducts list test", async function () {
    const resArray = new Array();
    for await (let item of client.dataProducts.listByResourceGroup(
      subscriptionId,
      resourceGroup)) {
      resArray.push(item);
    }
    assert.equal(resArray.length, 1);
  });

  it("dataProducts delete test", async function () {
    const resArray = new Array();
    const res = await client.dataProducts.delete(
      subscriptionId,
      resourceGroup,
      resourcename,
      testPollingOptions,
    );
    for await (let item of client.dataProducts.listByResourceGroup(subscriptionId, resourceGroup)) {
      resArray.push(item);
    }
    assert.equal(resArray.length, 0);
  });

})
