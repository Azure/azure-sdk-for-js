/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */

import {
  OperationParameter,
  OperationURLParameter,
  OperationQueryParameter
} from "@azure/core-client";
import {
  DataProduct as DataProductMapper,
  DataProductUpdate as DataProductUpdateMapper,
  RoleAssignmentCommonProperties as RoleAssignmentCommonPropertiesMapper,
  AccountSas as AccountSasMapper,
  RoleAssignmentDetail as RoleAssignmentDetailMapper,
  KeyVaultInfo as KeyVaultInfoMapper,
  DataType as DataTypeMapper,
  DataTypeUpdate as DataTypeUpdateMapper,
  ContainerSaS as ContainerSaSMapper
} from "../models/mappers";

export const accept: OperationParameter = {
  parameterPath: "accept",
  mapper: {
    defaultValue: "application/json",
    isConstant: true,
    serializedName: "Accept",
    type: {
      name: "String"
    }
  }
};

export const $host: OperationURLParameter = {
  parameterPath: "$host",
  mapper: {
    serializedName: "$host",
    required: true,
    type: {
      name: "String"
    }
  },
  skipEncoding: true
};

export const apiVersion: OperationQueryParameter = {
  parameterPath: "apiVersion",
  mapper: {
    defaultValue: "2023-11-15",
    isConstant: true,
    serializedName: "api-version",
    type: {
      name: "String"
    }
  }
};

export const nextLink: OperationURLParameter = {
  parameterPath: "nextLink",
  mapper: {
    serializedName: "nextLink",
    required: true,
    type: {
      name: "String"
    }
  },
  skipEncoding: true
};

export const subscriptionId: OperationURLParameter = {
  parameterPath: "subscriptionId",
  mapper: {
    constraints: {
      MinLength: 1
    },
    serializedName: "subscriptionId",
    required: true,
    type: {
      name: "String"
    }
  }
};

export const resourceGroupName: OperationURLParameter = {
  parameterPath: "resourceGroupName",
  mapper: {
    constraints: {
      MaxLength: 90,
      MinLength: 1
    },
    serializedName: "resourceGroupName",
    required: true,
    type: {
      name: "String"
    }
  }
};

export const dataProductName: OperationURLParameter = {
  parameterPath: "dataProductName",
  mapper: {
    constraints: {
      Pattern: new RegExp("^[a-z][a-z0-9]*$"),
      MaxLength: 63,
      MinLength: 3
    },
    serializedName: "dataProductName",
    required: true,
    type: {
      name: "String"
    }
  }
};

export const contentType: OperationParameter = {
  parameterPath: ["options", "contentType"],
  mapper: {
    defaultValue: "application/json",
    isConstant: true,
    serializedName: "Content-Type",
    type: {
      name: "String"
    }
  }
};

export const resource: OperationParameter = {
  parameterPath: "resource",
  mapper: DataProductMapper
};

export const properties: OperationParameter = {
  parameterPath: "properties",
  mapper: DataProductUpdateMapper
};

export const body: OperationParameter = {
  parameterPath: "body",
  mapper: RoleAssignmentCommonPropertiesMapper
};

export const body1: OperationParameter = {
  parameterPath: "body",
  mapper: AccountSasMapper
};

export const body2: OperationParameter = {
  parameterPath: "body",
  mapper: {
    serializedName: "body",
    required: true,
    type: {
      name: "Dictionary",
      value: { type: { name: "any" } }
    }
  }
};

export const body3: OperationParameter = {
  parameterPath: "body",
  mapper: RoleAssignmentDetailMapper
};

export const body4: OperationParameter = {
  parameterPath: "body",
  mapper: KeyVaultInfoMapper
};

export const dataTypeName: OperationURLParameter = {
  parameterPath: "dataTypeName",
  mapper: {
    constraints: {
      Pattern: new RegExp("^[a-z][a-z0-9-]*$"),
      MaxLength: 63,
      MinLength: 3
    },
    serializedName: "dataTypeName",
    required: true,
    type: {
      name: "String"
    }
  }
};

export const resource1: OperationParameter = {
  parameterPath: "resource",
  mapper: DataTypeMapper
};

export const properties1: OperationParameter = {
  parameterPath: "properties",
  mapper: DataTypeUpdateMapper
};

export const body5: OperationParameter = {
  parameterPath: "body",
  mapper: ContainerSaSMapper
};
