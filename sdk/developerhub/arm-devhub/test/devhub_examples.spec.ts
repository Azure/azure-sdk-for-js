/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */

import {
  env,
  Recorder,
  RecorderStartOptions,
  delay,
  isPlaybackMode,
} from "@azure-tools/test-recorder";
import { createTestCredential } from "@azure-tools/test-credential";
import { assert } from "chai";
import { Context } from "mocha";
import { DeveloperHubServiceClient } from "../src/developerHubServiceClient";
import { GitHubOAuthCallRequest, GitHubOAuthOptionalParams } from "../src/models";

const replaceableVariables: Record<string, string> = {
  AZURE_CLIENT_ID: "azure_client_id",
  AZURE_CLIENT_SECRET: "azure_client_secret",
  AZURE_TENANT_ID: "88888888-8888-8888-8888-888888888888",
  SUBSCRIPTION_ID: "azure_subscription_id"
};

const recorderOptions: RecorderStartOptions = {
  envSetupForPlayback: replaceableVariables
};

export const testPollingOptions = {
  updateIntervalInMs: isPlaybackMode() ? 0 : undefined,
};

describe("devhub test", () => {
  let recorder: Recorder;
  let subscriptionId: string;
  let client: DeveloperHubServiceClient;
  let location: string;
  let resourceGroup: string;
  let workflowName: string;
  let azureClientId: string;
  let azureTenantId: string;

  beforeEach(async function (this: Context) {
    recorder = new Recorder(this.currentTest);
    await recorder.start(recorderOptions);
    subscriptionId = env.SUBSCRIPTION_ID || '';
    azureClientId = env.AZURE_CLIENT_ID || '';
    azureTenantId = env.AZURE_TENANT_ID || '';
    // This is an example of how the environment variables are used
    const credential = createTestCredential();
    client = new DeveloperHubServiceClient(credential, subscriptionId, recorder.configureClientOptions({}));
    location = "eastus";
    resourceGroup = "myjstest";
    workflowName = "workflow1";
  });

  afterEach(async function () {
    await recorder.stop();
  });

  it("workflow create test", async function () {
    const res = await client.workflowOperations.createOrUpdate(
      resourceGroup,
      workflowName,
      {
        acr: {
          acrRegistryName: "registry1",
          acrRepositoryName: "repo1",
          acrResourceGroup: resourceGroup,
          acrSubscriptionId: subscriptionId
        },
        aksResourceId:
          "/subscriptions/" + subscriptionId + "/resourcegroups/" + resourceGroup + "/providers/Microsoft.ContainerService/managedClusters/cluster1",
        branchName: "branch1",
        deploymentProperties: {
          kubeManifestLocations: ["/src/manifests/"],
          manifestType: "kube",
          overrides: { key1: "value1" }
        },
        dockerBuildContext: "repo1/src/",
        dockerfile: "repo1/images/Dockerfile",
        location: location,
        oidcCredentials: {
          azureClientId: azureClientId,
          azureTenantId: azureTenantId
        },
        repositoryName: "repo1",
        repositoryOwner: "owner1",
        tags: { appname: "testApp" },
        namespace: "Kubernetestest"
      }
    );
    assert.equal(res.name, workflowName);
  });

  it("workflow get test", async function () {
    const res = await client.workflowOperations.get(resourceGroup, workflowName);
    assert.equal(res.name, workflowName);
  });

  it("workflow list test", async function () {
    const resArray = new Array();
    for await (let item of client.workflowOperations.listByResourceGroup(resourceGroup)) {
      resArray.push(item);
    }
    assert.equal(resArray.length, 1);
  });

  it("workflow delete test", async function () {
    const resArray = new Array();
    const res = await client.workflowOperations.delete(resourceGroup, workflowName)
    for await (let item of client.workflowOperations.listByResourceGroup(resourceGroup)) {
      resArray.push(item);
    }
    assert.equal(resArray.length, 0);
  });
})
