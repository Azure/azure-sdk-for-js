/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */
import {
  ForecastDefinition,
  CostManagementClient
} from "@azure/arm-costmanagement";
import { DefaultAzureCredential } from "@azure/identity";
import "dotenv/config";

/**
 * This sample demonstrates how to Lists the forecast charges for scope defined.
 *
 * @summary Lists the forecast charges for scope defined.
 * x-ms-original-file: specification/cost-management/resource-manager/Microsoft.CostManagement/stable/2022-10-01/examples/BillingAccountForecast.json
 */
async function billingAccountForecast(): Promise<void> {
  const scope = "providers/Microsoft.Billing/billingAccounts/12345:6789";
  const parameters: ForecastDefinition = {
    type: "Usage",
    dataset: {
      aggregation: { totalCost: { name: "Cost", function: "Sum" } },
      filter: {
        and: [
          {
            or: [
              {
                dimensions: {
                  name: "ResourceLocation",
                  operator: "In",
                  values: ["East US", "West Europe"]
                }
              },
              {
                tags: {
                  name: "Environment",
                  operator: "In",
                  values: ["UAT", "Prod"]
                }
              }
            ]
          },
          {
            dimensions: {
              name: "ResourceGroup",
              operator: "In",
              values: ["API"]
            }
          }
        ]
      },
      granularity: "Daily"
    },
    includeActualCost: false,
    includeFreshPartialCost: false,
    timePeriod: {
      from: new Date("2022-08-01T00:00:00+00:00"),
      to: new Date("2022-08-31T23:59:59+00:00")
    },
    timeframe: "Custom"
  };
  const credential = new DefaultAzureCredential();
  const client = new CostManagementClient(credential);
  const result = await client.forecast.usage(scope, parameters);
  console.log(result);
}

/**
 * This sample demonstrates how to Lists the forecast charges for scope defined.
 *
 * @summary Lists the forecast charges for scope defined.
 * x-ms-original-file: specification/cost-management/resource-manager/Microsoft.CostManagement/stable/2022-10-01/examples/BillingProfileForecast.json
 */
async function billingProfileForecast(): Promise<void> {
  const scope =
    "providers/Microsoft.Billing/billingAccounts/12345:6789/billingProfiles/13579";
  const parameters: ForecastDefinition = {
    type: "Usage",
    dataset: {
      aggregation: { totalCost: { name: "Cost", function: "Sum" } },
      filter: {
        and: [
          {
            or: [
              {
                dimensions: {
                  name: "ResourceLocation",
                  operator: "In",
                  values: ["East US", "West Europe"]
                }
              },
              {
                tags: {
                  name: "Environment",
                  operator: "In",
                  values: ["UAT", "Prod"]
                }
              }
            ]
          },
          {
            dimensions: {
              name: "ResourceGroup",
              operator: "In",
              values: ["API"]
            }
          }
        ]
      },
      granularity: "Daily"
    },
    includeActualCost: false,
    includeFreshPartialCost: false,
    timePeriod: {
      from: new Date("2022-08-01T00:00:00+00:00"),
      to: new Date("2022-08-31T23:59:59+00:00")
    },
    timeframe: "Custom"
  };
  const credential = new DefaultAzureCredential();
  const client = new CostManagementClient(credential);
  const result = await client.forecast.usage(scope, parameters);
  console.log(result);
}

/**
 * This sample demonstrates how to Lists the forecast charges for scope defined.
 *
 * @summary Lists the forecast charges for scope defined.
 * x-ms-original-file: specification/cost-management/resource-manager/Microsoft.CostManagement/stable/2022-10-01/examples/DepartmentForecast.json
 */
async function departmentForecast(): Promise<void> {
  const scope =
    "providers/Microsoft.Billing/billingAccounts/12345:6789/departments/123";
  const parameters: ForecastDefinition = {
    type: "Usage",
    dataset: {
      aggregation: { totalCost: { name: "Cost", function: "Sum" } },
      filter: {
        and: [
          {
            or: [
              {
                dimensions: {
                  name: "ResourceLocation",
                  operator: "In",
                  values: ["East US", "West Europe"]
                }
              },
              {
                tags: {
                  name: "Environment",
                  operator: "In",
                  values: ["UAT", "Prod"]
                }
              }
            ]
          },
          {
            dimensions: {
              name: "ResourceGroup",
              operator: "In",
              values: ["API"]
            }
          }
        ]
      },
      granularity: "Daily"
    },
    includeActualCost: false,
    includeFreshPartialCost: false,
    timePeriod: {
      from: new Date("2022-08-01T00:00:00+00:00"),
      to: new Date("2022-08-31T23:59:59+00:00")
    },
    timeframe: "Custom"
  };
  const credential = new DefaultAzureCredential();
  const client = new CostManagementClient(credential);
  const result = await client.forecast.usage(scope, parameters);
  console.log(result);
}

/**
 * This sample demonstrates how to Lists the forecast charges for scope defined.
 *
 * @summary Lists the forecast charges for scope defined.
 * x-ms-original-file: specification/cost-management/resource-manager/Microsoft.CostManagement/stable/2022-10-01/examples/EnrollmentAccountForecast.json
 */
async function enrollmentAccountForecast(): Promise<void> {
  const scope =
    "providers/Microsoft.Billing/billingAccounts/12345:6789/enrollmentAccounts/456";
  const parameters: ForecastDefinition = {
    type: "Usage",
    dataset: {
      aggregation: { totalCost: { name: "Cost", function: "Sum" } },
      filter: {
        and: [
          {
            or: [
              {
                dimensions: {
                  name: "ResourceLocation",
                  operator: "In",
                  values: ["East US", "West Europe"]
                }
              },
              {
                tags: {
                  name: "Environment",
                  operator: "In",
                  values: ["UAT", "Prod"]
                }
              }
            ]
          },
          {
            dimensions: {
              name: "ResourceGroup",
              operator: "In",
              values: ["API"]
            }
          }
        ]
      },
      granularity: "Daily"
    },
    includeActualCost: false,
    includeFreshPartialCost: false,
    timePeriod: {
      from: new Date("2022-08-01T00:00:00+00:00"),
      to: new Date("2022-08-31T23:59:59+00:00")
    },
    timeframe: "Custom"
  };
  const credential = new DefaultAzureCredential();
  const client = new CostManagementClient(credential);
  const result = await client.forecast.usage(scope, parameters);
  console.log(result);
}

/**
 * This sample demonstrates how to Lists the forecast charges for scope defined.
 *
 * @summary Lists the forecast charges for scope defined.
 * x-ms-original-file: specification/cost-management/resource-manager/Microsoft.CostManagement/stable/2022-10-01/examples/InvoiceSectionForecast.json
 */
async function invoiceSectionForecast(): Promise<void> {
  const scope =
    "providers/Microsoft.Billing/billingAccounts/12345:6789/billingProfiles/13579/invoiceSections/9876";
  const parameters: ForecastDefinition = {
    type: "Usage",
    dataset: {
      aggregation: { totalCost: { name: "Cost", function: "Sum" } },
      filter: {
        and: [
          {
            or: [
              {
                dimensions: {
                  name: "ResourceLocation",
                  operator: "In",
                  values: ["East US", "West Europe"]
                }
              },
              {
                tags: {
                  name: "Environment",
                  operator: "In",
                  values: ["UAT", "Prod"]
                }
              }
            ]
          },
          {
            dimensions: {
              name: "ResourceGroup",
              operator: "In",
              values: ["API"]
            }
          }
        ]
      },
      granularity: "Daily"
    },
    includeActualCost: false,
    includeFreshPartialCost: false,
    timePeriod: {
      from: new Date("2022-08-01T00:00:00+00:00"),
      to: new Date("2022-08-31T23:59:59+00:00")
    },
    timeframe: "Custom"
  };
  const credential = new DefaultAzureCredential();
  const client = new CostManagementClient(credential);
  const result = await client.forecast.usage(scope, parameters);
  console.log(result);
}

/**
 * This sample demonstrates how to Lists the forecast charges for scope defined.
 *
 * @summary Lists the forecast charges for scope defined.
 * x-ms-original-file: specification/cost-management/resource-manager/Microsoft.CostManagement/stable/2022-10-01/examples/ResourceGroupForecast.json
 */
async function resourceGroupForecast(): Promise<void> {
  const scope =
    "subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/ScreenSharingTest-peer";
  const parameters: ForecastDefinition = {
    type: "Usage",
    dataset: {
      aggregation: { totalCost: { name: "Cost", function: "Sum" } },
      filter: {
        and: [
          {
            or: [
              {
                dimensions: {
                  name: "ResourceLocation",
                  operator: "In",
                  values: ["East US", "West Europe"]
                }
              },
              {
                tags: {
                  name: "Environment",
                  operator: "In",
                  values: ["UAT", "Prod"]
                }
              }
            ]
          },
          {
            dimensions: {
              name: "ResourceGroup",
              operator: "In",
              values: ["API"]
            }
          }
        ]
      },
      granularity: "Daily"
    },
    includeActualCost: false,
    includeFreshPartialCost: false,
    timePeriod: {
      from: new Date("2022-08-01T00:00:00+00:00"),
      to: new Date("2022-08-31T23:59:59+00:00")
    },
    timeframe: "Custom"
  };
  const credential = new DefaultAzureCredential();
  const client = new CostManagementClient(credential);
  const result = await client.forecast.usage(scope, parameters);
  console.log(result);
}

/**
 * This sample demonstrates how to Lists the forecast charges for scope defined.
 *
 * @summary Lists the forecast charges for scope defined.
 * x-ms-original-file: specification/cost-management/resource-manager/Microsoft.CostManagement/stable/2022-10-01/examples/SubscriptionForecast.json
 */
async function subscriptionForecast(): Promise<void> {
  const scope = "subscriptions/00000000-0000-0000-0000-000000000000";
  const parameters: ForecastDefinition = {
    type: "Usage",
    dataset: {
      aggregation: { totalCost: { name: "Cost", function: "Sum" } },
      filter: {
        and: [
          {
            or: [
              {
                dimensions: {
                  name: "ResourceLocation",
                  operator: "In",
                  values: ["East US", "West Europe"]
                }
              },
              {
                tags: {
                  name: "Environment",
                  operator: "In",
                  values: ["UAT", "Prod"]
                }
              }
            ]
          },
          {
            dimensions: {
              name: "ResourceGroup",
              operator: "In",
              values: ["API"]
            }
          }
        ]
      },
      granularity: "Daily"
    },
    includeActualCost: false,
    includeFreshPartialCost: false,
    timePeriod: {
      from: new Date("2022-08-01T00:00:00+00:00"),
      to: new Date("2022-08-31T23:59:59+00:00")
    },
    timeframe: "Custom"
  };
  const credential = new DefaultAzureCredential();
  const client = new CostManagementClient(credential);
  const result = await client.forecast.usage(scope, parameters);
  console.log(result);
}

async function main(): Promise<void> {
  billingAccountForecast();
  billingProfileForecast();
  departmentForecast();
  enrollmentAccountForecast();
  invoiceSectionForecast();
  resourceGroupForecast();
  subscriptionForecast();
}

main().catch(console.error);
