/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */

import { BaseResource, CloudError, AzureServiceClientOptions } from "@azure/ms-rest-azure-js";
import * as msRest from "@azure/ms-rest-js";

export { BaseResource, CloudError };

/**
 * The start and end date for pulling data for the report.
 */
export interface ReportConfigTimePeriod {
  /**
   * The start date to pull data from.
   */
  from: Date;
  /**
   * The end date to pull data to.
   */
  to: Date;
}

/**
 * The configuration of dataset in the report.
 */
export interface ReportConfigDatasetConfiguration {
  /**
   * Array of column names to be included in the report. Any valid report column name is allowed.
   * If not provided, then report includes all columns.
   */
  columns?: string[];
}

/**
 * The aggregation expression to be used in the report.
 */
export interface ReportConfigAggregation {
  /**
   * The name of the column to aggregate.
   */
  name: string;
  /**
   * The name of the aggregation function to use. Possible values include: 'Avg', 'Max', 'Min',
   * 'Sum'
   */
  functionProperty: FunctionType;
}

/**
 * The group by expression to be used in the report.
 */
export interface ReportConfigGrouping {
  /**
   * Has type of the column to group. Possible values include: 'Tag', 'Dimension'
   */
  type: ReportConfigColumnType;
  /**
   * The name of the column to group. This version supports subscription lowest possible grain.
   */
  name: string;
}

/**
 * The order by expression to be used in the report.
 */
export interface ReportConfigSorting {
  /**
   * Direction of sort. Possible values include: 'Ascending', 'Descending'
   */
  direction?: Direction;
  /**
   * The name of the column to sort.
   */
  name: string;
}

/**
 * The comparison expression to be used in the report.
 */
export interface ReportConfigComparisonExpression {
  /**
   * The name of the column to use in comparison.
   */
  name: string;
  /**
   * The operator to use for comparison. Possible values include: 'In', 'Contains'
   */
  operator: OperatorType;
  /**
   * Array of values to use for comparison
   */
  values: string[];
}

/**
 * The filter expression to be used in the report.
 */
export interface ReportConfigFilter {
  /**
   * The logical "AND" expression. Must have at least 2 items.
   */
  and?: ReportConfigFilter[];
  /**
   * The logical "OR" expression. Must have at least 2 items.
   */
  or?: ReportConfigFilter[];
  /**
   * Has comparison expression for a dimension
   */
  dimensions?: ReportConfigComparisonExpression;
  /**
   * Has comparison expression for a tag
   */
  tags?: ReportConfigComparisonExpression;
  /**
   * Has comparison expression for a tag key
   */
  tagKey?: ReportConfigComparisonExpression;
  /**
   * Has comparison expression for a tag value
   */
  tagValue?: ReportConfigComparisonExpression;
}

/**
 * The definition of data present in the report.
 */
export interface ReportConfigDataset {
  /**
   * The granularity of rows in the report. Possible values include: 'Daily', 'Monthly'
   */
  granularity?: ReportGranularityType;
  /**
   * Has configuration information for the data in the report. The configuration will be ignored if
   * aggregation and grouping are provided.
   */
  configuration?: ReportConfigDatasetConfiguration;
  /**
   * Dictionary of aggregation expression to use in the report. The key of each item in the
   * dictionary is the alias for the aggregated column. Report can have up to 2 aggregation
   * clauses.
   */
  aggregation?: { [propertyName: string]: ReportConfigAggregation };
  /**
   * Array of group by expression to use in the report. Report can have up to 2 group by clauses.
   */
  grouping?: ReportConfigGrouping[];
  /**
   * Array of order by expression to use in the report.
   */
  sorting?: ReportConfigSorting[];
  /**
   * Has filter expression to use in the report.
   */
  filter?: ReportConfigFilter;
}

/**
 * An interface representing CacheItem.
 */
export interface CacheItem {
  /**
   * Resource ID used by Resource Manager to uniquely identify the scope.
   */
  id: string;
  /**
   * Display name for the scope.
   */
  name: string;
  /**
   * Indicates the account type. Allowed values include: EA, PAYG, Modern, Internal, Unknown.
   */
  channel: string;
  /**
   * Indicates the type of modern account. Allowed values include: Individual, Enterprise, Partner,
   * Indirect, NotApplicable
   */
  subchannel: string;
  /**
   * Resource ID of the parent scope. For instance, subscription's resource ID for a resource group
   * or a management group resource ID for a subscription.
   */
  parent?: string;
  /**
   * Indicates the status of the scope. Status only applies to subscriptions and billing accounts.
   */
  status?: string;
}

/**
 * The Resource model definition.
 */
export interface ProxySettingResource extends BaseResource {
  /**
   * Resource Id.
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly id?: string;
  /**
   * Resource name.
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly name?: string;
  /**
   * Resource kind.
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly kind?: string;
  /**
   * Resource type.
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly type?: string;
}

/**
 * State of the myscope setting.
 */
export interface Setting extends ProxySettingResource {
  /**
   * Sets the default scope the current user will see when they sign into Azure Cost Management in
   * the Azure portal.
   */
  scope: string;
  /**
   * Indicates what scope Cost Management in the Azure portal should default to. Allowed values:
   * LastUsed. Possible values include: 'LastUsed', 'ScopePicker', 'SpecificScope'
   */
  startOn?: StartOn;
  cache?: CacheItem[];
}

/**
 * Each KPI must contain a 'type' and 'enabled' key.
 */
export interface KpiProperties {
  /**
   * KPI type (Forecast, Budget). Possible values include: 'Forecast', 'Budget'
   */
  type?: KpiTypeType;
  /**
   * ID of resource related to metric (budget).
   */
  id?: string;
  /**
   * show the KPI in the UI?
   */
  enabled?: boolean;
}

/**
 * Each pivot must contain a 'type' and 'name'.
 */
export interface PivotProperties {
  /**
   * Data type to show in view. Possible values include: 'Dimension', 'TagKey'
   */
  type?: PivotTypeType;
  /**
   * Data field to show in view.
   */
  name?: string;
}

/**
 * The Resource model definition.
 */
export interface ProxyResource extends BaseResource {
  /**
   * Resource Id.
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly id?: string;
  /**
   * Resource name.
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly name?: string;
  /**
   * Resource type.
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly type?: string;
  /**
   * eTag of the resource. To handle concurrent update scenario, this field will be used to
   * determine whether the user is updating the latest version or not.
   */
  eTag?: string;
}

/**
 * States and configurations of Cost Analysis.
 */
export interface View extends ProxyResource {
  /**
   * User input name of the view. Required.
   */
  displayName?: string;
  /**
   * Cost Management scope to save the view on. This includes 'subscriptions/{subscriptionId}' for
   * subscription scope, 'subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}' for
   * resourceGroup scope, 'providers/Microsoft.Billing/billingAccounts/{billingAccountId}' for
   * Billing Account scope,
   * 'providers/Microsoft.Billing/billingAccounts/{billingAccountId}/departments/{departmentId}'
   * for Department scope,
   * 'providers/Microsoft.Billing/billingAccounts/{billingAccountId}/enrollmentAccounts/{enrollmentAccountId}'
   * for EnrollmentAccount scope,
   * 'providers/Microsoft.Billing/billingAccounts/{billingAccountId}/billingProfiles/{billingProfileId}'
   * for BillingProfile scope,
   * 'providers/Microsoft.Billing/billingAccounts/{billingAccountId}/invoiceSections/{invoiceSectionId}'
   * for InvoiceSection scope,
   * 'providers/Microsoft.Management/managementGroups/{managementGroupId}' for Management Group
   * scope,
   * '/providers/Microsoft.CostManagement/externalBillingAccounts/{externalBillingAccountName}' for
   * ExternalBillingAccount scope, and
   * '/providers/Microsoft.CostManagement/externalSubscriptions/{externalSubscriptionName}' for
   * ExternalSubscription scope.
   */
  scope?: string;
  /**
   * Date the user created this view.
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly createdOn?: Date;
  /**
   * Date when the user last modified this view.
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly modifiedOn?: Date;
  /**
   * Selected date range for viewing cost in.
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly dateRange?: string;
  /**
   * Selected currency.
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly currency?: string;
  /**
   * The time frame for pulling data for the report. If custom, then a specific time period must be
   * provided. Possible values include: 'WeekToDate', 'MonthToDate', 'YearToDate', 'Custom'
   */
  timeframe: ReportTimeframeType;
  /**
   * Has time period for pulling data for the report.
   */
  timePeriod?: ReportConfigTimePeriod;
  /**
   * Has definition for data in this report config.
   */
  dataSet?: ReportConfigDataset;
  /**
   * Include monetary commitment
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly includeMonetaryCommitment?: boolean;
  /**
   * Chart type of the main view in Cost Analysis. Required. Possible values include: 'Area',
   * 'Line', 'StackedColumn', 'GroupedColumn', 'Table'
   */
  chart?: ChartType;
  /**
   * Show costs accumulated over time. Possible values include: 'true', 'false'
   */
  accumulated?: AccumulatedType;
  /**
   * Metric to use when displaying costs. Possible values include: 'ActualCost', 'AmortizedCost',
   * 'AHUB'
   */
  metric?: MetricType;
  /**
   * List of KPIs to show in Cost Analysis UI.
   */
  kpis?: KpiProperties[];
  /**
   * Configuration of 3 sub-views in the Cost Analysis UI.
   */
  pivots?: PivotProperties[];
}

/**
 * The details of the error.
 */
export interface ErrorDetails {
  /**
   * Error code.
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly code?: string;
  /**
   * Error message indicating why the operation failed.
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly message?: string;
}

/**
 * Error response indicates that the service is not able to process the incoming request. The
 * reason is provided in the error message.
 *
 * Some Error responses:
 *
 * * 429 TooManyRequests - Request is throttled. Retry after waiting for the time specified in the
 * "x-ms-ratelimit-microsoft.consumption-retry-after" header.
 *
 * * 503 ServiceUnavailable - Service is temporarily unavailable. Retry after waiting for the time
 * specified in the "Retry-After" header.
 */
export interface ErrorResponse {
  /**
   * The details of the error.
   */
  error?: ErrorDetails;
}

/**
 * The Resource model definition.
 */
export interface Resource extends BaseResource {
  /**
   * Resource Id.
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly id?: string;
  /**
   * Resource name.
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly name?: string;
  /**
   * Resource type.
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly type?: string;
  /**
   * Resource tags.
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly tags?: { [propertyName: string]: string };
}

/**
 * An interface representing Dimension.
 */
export interface Dimension extends Resource {
  /**
   * Dimension description.
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly description?: string;
  /**
   * Filter enabled.
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly filterEnabled?: boolean;
  /**
   * Grouping enabled.
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly groupingEnabled?: boolean;
  data?: string[];
  /**
   * Total number of data for the dimension.
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly total?: number;
  /**
   * Dimension category.
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly category?: string;
  /**
   * Usage start.
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly usageStart?: Date;
  /**
   * Usage end.
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly usageEnd?: Date;
  /**
   * The link (url) to the next page of results.
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly nextLink?: string;
}

/**
 * defines the type of alert
 */
export interface AlertPropertiesDefinition {
  /**
   * type of alert. Possible values include: 'Budget', 'Invoice', 'Credit', 'Quota', 'General',
   * 'xCloud', 'BudgetForecast'
   */
  type?: AlertType;
  /**
   * Alert category. Possible values include: 'Cost', 'Usage', 'Billing', 'System'
   */
  category?: AlertCategory;
  /**
   * Criteria that triggered alert. Possible values include: 'CostThresholdExceeded',
   * 'UsageThresholdExceeded', 'CreditThresholdApproaching', 'CreditThresholdReached',
   * 'QuotaThresholdApproaching', 'QuotaThresholdReached', 'MultiCurrency',
   * 'ForecastCostThresholdExceeded', 'ForecastUsageThresholdExceeded',
   * 'InvoiceDueDateApproaching', 'InvoiceDueDateReached', 'CrossCloudNewDataAvailable',
   * 'CrossCloudCollectionError', 'GeneralThresholdError'
   */
  criteria?: AlertCriteria;
}

/**
 * Alert details
 */
export interface AlertPropertiesDetails {
  /**
   * Type of timegrain cadence. Possible values include: 'None', 'Monthly', 'Quarterly',
   * 'Annually', 'BillingMonth', 'BillingQuarter', 'BillingAnnual'
   */
  timeGrainType?: AlertTimeGrainType;
  /**
   * datetime of periodStartDate
   */
  periodStartDate?: string;
  /**
   * notificationId that triggered this alert
   */
  triggeredBy?: string;
  /**
   * array of resourceGroups to filter by
   */
  resourceGroupFilter?: any[];
  /**
   * array of resources to filter by
   */
  resourceFilter?: any[];
  /**
   * array of meters to filter by
   */
  meterFilter?: any[];
  /**
   * tags to filter by
   */
  tagFilter?: any;
  /**
   * notification threshold percentage as a decimal which activated this alert
   */
  threshold?: number;
  /**
   * operator used to compare currentSpend with amount. Possible values include: 'None', 'EqualTo',
   * 'GreaterThan', 'GreaterThanOrEqualTo', 'LessThan', 'LessThanOrEqualTo'
   */
  operator?: AlertOperator;
  /**
   * budget threshold amount
   */
  amount?: number;
  /**
   * unit of currency being used
   */
  unit?: string;
  /**
   * current spend
   */
  currentSpend?: number;
  /**
   * list of emails to contact
   */
  contactEmails?: string[];
  /**
   * list of action groups to broadcast to
   */
  contactGroups?: string[];
  /**
   * list of contact roles
   */
  contactRoles?: string[];
  /**
   * overriding alert
   */
  overridingAlert?: string;
}

/**
 * An individual alert.
 */
export interface Alert extends Resource {
  /**
   * defines the type of alert
   */
  definition?: AlertPropertiesDefinition;
  /**
   * Alert description
   */
  description?: string;
  /**
   * Source of alert. Possible values include: 'Preset', 'User'
   */
  source?: AlertSource;
  /**
   * Alert details
   */
  details?: AlertPropertiesDetails;
  /**
   * related budget
   */
  costEntityId?: string;
  /**
   * alert status. Possible values include: 'None', 'Active', 'Overridden', 'Resolved', 'Dismissed'
   */
  status?: AlertStatus;
  /**
   * dateTime in which alert was created
   */
  creationTime?: string;
  /**
   * dateTime in which alert was closed
   */
  closeTime?: string;
  /**
   * dateTime in which alert was last modified
   */
  modificationTime?: string;
  statusModificationUserName?: string;
  /**
   * dateTime in which the alert status was last modified
   */
  statusModificationTime?: string;
}

/**
 * Result of alerts.
 */
export interface AlertsResult {
  /**
   * List of alerts.
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly value?: Alert[];
  /**
   * URL to get the next set of alerts results if there are any.
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly nextLink?: string;
}

/**
 * The request payload to update an alert
 */
export interface DismissAlertPayload {
  /**
   * defines the type of alert
   */
  definition?: AlertPropertiesDefinition;
  /**
   * Alert description
   */
  description?: string;
  /**
   * Source of alert. Possible values include: 'Preset', 'User'
   */
  source?: AlertSource;
  /**
   * Alert details
   */
  details?: AlertPropertiesDetails;
  /**
   * related budget
   */
  costEntityId?: string;
  /**
   * alert status. Possible values include: 'None', 'Active', 'Overridden', 'Resolved', 'Dismissed'
   */
  status?: AlertStatus;
  /**
   * dateTime in which alert was created
   */
  creationTime?: string;
  /**
   * dateTime in which alert was closed
   */
  closeTime?: string;
  /**
   * dateTime in which alert was last modified
   */
  modificationTime?: string;
  statusModificationUserName?: string;
  /**
   * dateTime in which the alert status was last modified
   */
  statusModificationTime?: string;
}

/**
 * An interface representing QueryColumn.
 */
export interface QueryColumn {
  /**
   * The name of column.
   */
  name?: string;
  /**
   * The type of column.
   */
  type?: string;
}

/**
 * Result of query. It contains all columns listed under groupings and aggregation.
 */
export interface QueryResult extends Resource {
  /**
   * eTag of the resource. To handle concurrent update scenario, this field will be used to
   * determine whether the user is updating the latest version or not.
   */
  eTag?: string;
  /**
   * Resource location
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly location?: string;
  /**
   * Resource SKU
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly sku?: string;
  /**
   * The link (url) to the next page of results.
   */
  nextLink?: string;
  /**
   * Array of columns
   */
  columns?: QueryColumn[];
  /**
   * Array of rows
   */
  rows?: any[][];
}

/**
 * The object that represents the operation.
 */
export interface OperationDisplay {
  /**
   * Service provider: Microsoft.CostManagement.
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly provider?: string;
  /**
   * Resource on which the operation is performed: Dimensions, Query.
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly resource?: string;
  /**
   * Operation type: Read, write, delete, etc.
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly operation?: string;
}

/**
 * A Cost management REST API operation.
 */
export interface Operation {
  /**
   * Operation name: {provider}/{resource}/{operation}.
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly name?: string;
  /**
   * The object that represents the operation.
   */
  display?: OperationDisplay;
}

/**
 * The start and end date for pulling data for the query.
 */
export interface QueryTimePeriod {
  /**
   * The start date to pull data from.
   */
  from: Date;
  /**
   * The end date to pull data to.
   */
  to: Date;
}

/**
 * The configuration of dataset in the query.
 */
export interface QueryDatasetConfiguration {
  /**
   * Array of column names to be included in the query. Any valid query column name is allowed. If
   * not provided, then query includes all columns.
   */
  columns?: string[];
}

/**
 * The aggregation expression to be used in the query.
 */
export interface QueryAggregation {
  /**
   * The name of the column to aggregate.
   */
  name: string;
  /**
   * The name of the aggregation function to use. Possible values include: 'Avg', 'Max', 'Min',
   * 'Sum'
   */
  functionProperty: FunctionType;
}

/**
 * The group by expression to be used in the query.
 */
export interface QueryGrouping {
  /**
   * Has type of the column to group. Possible values include: 'Tag', 'Dimension'
   */
  type: QueryColumnType;
  /**
   * The name of the column to group.
   */
  name: string;
}

/**
 * The comparison expression to be used in the query.
 */
export interface QueryComparisonExpression {
  /**
   * The name of the column to use in comparison.
   */
  name: string;
  /**
   * Array of values to use for comparison
   */
  values: string[];
}

/**
 * The filter expression to be used in the export.
 */
export interface QueryFilter {
  /**
   * The logical "AND" expression. Must have at least 2 items.
   */
  and?: QueryFilter[];
  /**
   * The logical "OR" expression. Must have at least 2 items.
   */
  or?: QueryFilter[];
  /**
   * Has comparison expression for a dimension
   */
  dimensions?: QueryComparisonExpression;
  /**
   * Has comparison expression for a tag
   */
  tags?: QueryComparisonExpression;
}

/**
 * The definition of data present in the query.
 */
export interface QueryDataset {
  /**
   * The granularity of rows in the query. Possible values include: 'Daily'
   */
  granularity?: GranularityType;
  /**
   * Has configuration information for the data in the export. The configuration will be ignored if
   * aggregation and grouping are provided.
   */
  configuration?: QueryDatasetConfiguration;
  /**
   * Dictionary of aggregation expression to use in the query. The key of each item in the
   * dictionary is the alias for the aggregated column. Query can have up to 2 aggregation clauses.
   */
  aggregation?: { [propertyName: string]: QueryAggregation };
  /**
   * Array of group by expression to use in the query. Query can have up to 2 group by clauses.
   */
  grouping?: QueryGrouping[];
  /**
   * The filter expression to use in the query. Please reference our Query API REST documentation
   * for how to properly format the filter.
   */
  filter?: QueryFilter;
}

/**
 * The definition of a forecast.
 */
export interface ForecastDefinition {
  /**
   * The type of the forecast. Possible values include: 'Usage', 'ActualCost', 'AmortizedCost'
   */
  type: ForecastType;
  /**
   * The time frame for pulling data for the forecast. If custom, then a specific time period must
   * be provided. Possible values include: 'MonthToDate', 'BillingMonthToDate', 'TheLastMonth',
   * 'TheLastBillingMonth', 'WeekToDate', 'Custom'
   */
  timeframe: ForecastTimeframeType;
  /**
   * Has time period for pulling data for the forecast.
   */
  timePeriod?: QueryTimePeriod;
  /**
   * Has definition for data in this forecast.
   */
  dataset: QueryDataset;
  /**
   * a boolean determining if actualCost will be included
   */
  includeActualCost?: boolean;
  /**
   * a boolean determining if FreshPartialCost will be included
   */
  includeFreshPartialCost?: boolean;
}

/**
 * The definition of a query.
 */
export interface QueryDefinition {
  /**
   * The type of the query. Possible values include: 'Usage', 'ActualCost', 'AmortizedCost'
   */
  type: ExportType;
  /**
   * The time frame for pulling data for the query. If custom, then a specific time period must be
   * provided. Possible values include: 'MonthToDate', 'BillingMonthToDate', 'TheLastMonth',
   * 'TheLastBillingMonth', 'WeekToDate', 'Custom'
   */
  timeframe: TimeframeType;
  /**
   * Has time period for pulling data for the query.
   */
  timePeriod?: QueryTimePeriod;
  /**
   * Has definition for data in this query.
   */
  dataset: QueryDataset;
}

/**
 * The status of the long running operation.
 */
export interface Status {
  /**
   * The status of the long running operation. Possible values include: 'Running', 'Completed',
   * 'Failed'
   */
  status?: OperationStatusType;
}

/**
 * The status of the long running operation.
 */
export interface OperationStatus {
  /**
   * The status of the long running operation.
   */
  status?: Status;
  /**
   * The URL to download the generated report.
   */
  reportUrl?: string;
  /**
   * The time at which report URL becomes invalid.
   */
  validUntil?: Date;
}

/**
 * The definition of a query.
 */
export interface ExportDefinition {
  /**
   * The type of the query. Possible values include: 'Usage', 'ActualCost', 'AmortizedCost'
   */
  type: ExportType;
  /**
   * The time frame for pulling data for the query. If custom, then a specific time period must be
   * provided. Possible values include: 'MonthToDate', 'BillingMonthToDate', 'TheLastMonth',
   * 'TheLastBillingMonth', 'WeekToDate', 'Custom'
   */
  timeframe: TimeframeType;
  /**
   * Has time period for pulling data for the query.
   */
  timePeriod?: QueryTimePeriod;
  /**
   * Has definition for data in this query.
   */
  dataSet?: QueryDataset;
}

/**
 * The start and end date for recurrence schedule.
 */
export interface ExportRecurrencePeriod {
  /**
   * The start date of recurrence.
   */
  from: Date;
  /**
   * The end date of recurrence.
   */
  to?: Date;
}

/**
 * The schedule associated with a export.
 */
export interface ExportSchedule {
  /**
   * The status of the schedule. Whether active or not. If inactive, the export's scheduled
   * execution is paused. Possible values include: 'Active', 'Inactive'
   */
  status?: StatusType;
  /**
   * The schedule recurrence. Possible values include: 'Daily', 'Weekly', 'Monthly', 'Annually'
   */
  recurrence: RecurrenceType;
  /**
   * Has start and end date of the recurrence. The start date must be in future. If present, the
   * end date must be greater than start date.
   */
  recurrencePeriod?: ExportRecurrencePeriod;
}

/**
 * A export resource.
 */
export interface ExportModel extends ProxyResource {
  /**
   * The format of the export being delivered. Possible values include: 'Csv'
   */
  format?: FormatType;
  /**
   * Has delivery information for the export.
   */
  deliveryInfo: ExportDeliveryInfo;
  /**
   * Has definition for the export.
   */
  definition: ExportDefinition;
  /**
   * Has schedule information for the export.
   */
  schedule?: ExportSchedule;
}

/**
 * Result of listing exports. It contains a list of available exports in the scope provided.
 */
export interface ExportListResult {
  /**
   * The list of exports.
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly value?: ExportModel[];
}

/**
 * The destination information for the delivery of the export. To allow access to a storage
 * account, you must register the account's subscription with the Microsoft.CostManagementExports
 * resource provider. This is required once per subscription. When creating an export in the Azure
 * portal, it is done automatically, however API users need to register the subscription. For more
 * information see
 * https://docs.microsoft.com/en-us/azure/azure-resource-manager/resource-manager-supported-services
 * .
 */
export interface ExportDeliveryDestination {
  /**
   * The resource id of the storage account where exports will be delivered.
   */
  resourceId: string;
  /**
   * The name of the container where exports will be uploaded.
   */
  container: string;
  /**
   * The name of the directory where exports will be uploaded.
   */
  rootFolderPath?: string;
}

/**
 * The delivery information associated with a export.
 */
export interface ExportDeliveryInfo {
  /**
   * Has destination for the export being delivered.
   */
  destination: ExportDeliveryDestination;
}

/**
 * The common properties of the export.
 */
export interface CommonExportProperties {
  /**
   * The format of the export being delivered. Possible values include: 'Csv'
   */
  format?: FormatType;
  /**
   * Has delivery information for the export.
   */
  deliveryInfo: ExportDeliveryInfo;
  /**
   * Has definition for the export.
   */
  definition: ExportDefinition;
}

/**
 * A export execution.
 */
export interface ExportExecution extends Resource {
  /**
   * The type of the export execution. Possible values include: 'OnDemand', 'Scheduled'
   */
  executionType?: ExecutionType;
  /**
   * The status of the export execution. Possible values include: 'Queued', 'InProgress',
   * 'Completed', 'Failed', 'Timeout', 'NewDataNotAvailable', 'DataNotAvailable'
   */
  status?: ExecutionStatus;
  /**
   * The identifier for the entity that executed the export. For OnDemand executions, it is the
   * email id. For Scheduled executions, it is the constant value - System.
   */
  submittedBy?: string;
  /**
   * The time when export was queued to be executed.
   */
  submittedTime?: Date;
  /**
   * The time when export was picked up to be executed.
   */
  processingStartTime?: Date;
  /**
   * The time when export execution finished.
   */
  processingEndTime?: Date;
  /**
   * The name of the file export got written to.
   */
  fileName?: string;
  runSettings?: CommonExportProperties;
}

/**
 * Result of listing exports execution history of a export by name
 */
export interface ExportExecutionListResult {
  /**
   * The list of export executions.
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly value?: ExportExecution[];
}

/**
 * Optional Parameters.
 */
export interface ForecastUsageOptionalParams extends msRest.RequestOptionsBase {
  /**
   * May be used to filter forecasts by properties/usageDate (Utc time), properties/chargeType or
   * properties/grain. The filter supports 'eq', 'lt', 'gt', 'le', 'ge', and 'and'. It does not
   * currently support 'ne', 'or', or 'not'.
   */
  filter?: string;
}

/**
 * Optional Parameters.
 */
export interface ForecastExternalCloudProviderUsageOptionalParams extends msRest.RequestOptionsBase {
  /**
   * May be used to filter forecasts by properties/usageDate (Utc time), properties/chargeType or
   * properties/grain. The filter supports 'eq', 'lt', 'gt', 'le', 'ge', and 'and'. It does not
   * currently support 'ne', 'or', or 'not'.
   */
  filter?: string;
}

/**
 * Optional Parameters.
 */
export interface DimensionsListOptionalParams extends msRest.RequestOptionsBase {
  /**
   * May be used to filter dimensions by properties/category, properties/usageStart,
   * properties/usageEnd. Supported operators are 'eq','lt', 'gt', 'le', 'ge'.
   */
  filter?: string;
  /**
   * May be used to expand the properties/data within a dimension category. By default, data is not
   * included when listing dimensions.
   */
  expand?: string;
  /**
   * Skiptoken is only used if a previous operation returned a partial result. If a previous
   * response contains a nextLink element, the value of the nextLink element will include a
   * skiptoken parameter that specifies a starting point to use for subsequent calls.
   */
  skiptoken?: string;
  /**
   * May be used to limit the number of results to the most recent N dimension data.
   */
  top?: number;
}

/**
 * Optional Parameters.
 */
export interface DimensionsByExternalCloudProviderTypeOptionalParams extends msRest.RequestOptionsBase {
  /**
   * May be used to filter dimensions by properties/category, properties/usageStart,
   * properties/usageEnd. Supported operators are 'eq','lt', 'gt', 'le', 'ge'.
   */
  filter?: string;
  /**
   * May be used to expand the properties/data within a dimension category. By default, data is not
   * included when listing dimensions.
   */
  expand?: string;
  /**
   * Skiptoken is only used if a previous operation returned a partial result. If a previous
   * response contains a nextLink element, the value of the nextLink element will include a
   * skiptoken parameter that specifies a starting point to use for subsequent calls.
   */
  skiptoken?: string;
  /**
   * May be used to limit the number of results to the most recent N dimension data.
   */
  top?: number;
}

/**
 * An interface representing CostManagementClientOptions.
 */
export interface CostManagementClientOptions extends AzureServiceClientOptions {
  baseUri?: string;
}

/**
 * Defines headers for ByBillingAccountId operation.
 */
export interface GenerateReservationDetailsReportByBillingAccountIdHeaders {
  /**
   * The URL to check the status of the asynchronous operation.
   */
  location: string;
  /**
   * The amount of delay to use while the status of the operation is checked. The value is
   * expressed in seconds.
   */
  retryAfter: number;
}

/**
 * Defines headers for ByBillingProfileId operation.
 */
export interface GenerateReservationDetailsReportByBillingProfileIdHeaders {
  /**
   * The URL to check the status of the asynchronous operation.
   */
  location: string;
  /**
   * The amount of delay to use while the status of the operation is checked. The value is
   * expressed in seconds.
   */
  retryAfter: number;
}

/**
 * @interface
 * Result of listing settings. It contains a list of available settings.
 * @extends Array<Setting>
 */
export interface SettingsListResult extends Array<Setting> {
  /**
   * The link (url) to the next page of results.
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly nextLink?: string;
}

/**
 * @interface
 * Result of listing views. It contains a list of available views.
 * @extends Array<View>
 */
export interface ViewListResult extends Array<View> {
  /**
   * The link (url) to the next page of results.
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly nextLink?: string;
}

/**
 * @interface
 * Result of listing dimensions. It contains a list of available dimensions.
 * @extends Array<Dimension>
 */
export interface DimensionsListResult extends Array<Dimension> {
}

/**
 * @interface
 * Result of listing cost management operations. It contains a list of operations and a URL link to
 * get the next set of results.
 * @extends Array<Operation>
 */
export interface OperationListResult extends Array<Operation> {
  /**
   * URL to get the next set of operation list results if there are any.
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly nextLink?: string;
}

/**
 * Defines values for ReportTimeframeType.
 * Possible values include: 'WeekToDate', 'MonthToDate', 'YearToDate', 'Custom'
 * @readonly
 * @enum {string}
 */
export type ReportTimeframeType = 'WeekToDate' | 'MonthToDate' | 'YearToDate' | 'Custom';

/**
 * Defines values for ReportGranularityType.
 * Possible values include: 'Daily', 'Monthly'
 * @readonly
 * @enum {string}
 */
export type ReportGranularityType = 'Daily' | 'Monthly';

/**
 * Defines values for FunctionType.
 * Possible values include: 'Avg', 'Max', 'Min', 'Sum'
 * @readonly
 * @enum {string}
 */
export type FunctionType = 'Avg' | 'Max' | 'Min' | 'Sum';

/**
 * Defines values for ReportConfigColumnType.
 * Possible values include: 'Tag', 'Dimension'
 * @readonly
 * @enum {string}
 */
export type ReportConfigColumnType = 'Tag' | 'Dimension';

/**
 * Defines values for OperatorType.
 * Possible values include: 'In', 'Contains'
 * @readonly
 * @enum {string}
 */
export type OperatorType = 'In' | 'Contains';

/**
 * Defines values for ChartType.
 * Possible values include: 'Area', 'Line', 'StackedColumn', 'GroupedColumn', 'Table'
 * @readonly
 * @enum {string}
 */
export type ChartType = 'Area' | 'Line' | 'StackedColumn' | 'GroupedColumn' | 'Table';

/**
 * Defines values for AccumulatedType.
 * Possible values include: 'true', 'false'
 * @readonly
 * @enum {string}
 */
export type AccumulatedType = 'true' | 'false';

/**
 * Defines values for MetricType.
 * Possible values include: 'ActualCost', 'AmortizedCost', 'AHUB'
 * @readonly
 * @enum {string}
 */
export type MetricType = 'ActualCost' | 'AmortizedCost' | 'AHUB';

/**
 * Defines values for KpiTypeType.
 * Possible values include: 'Forecast', 'Budget'
 * @readonly
 * @enum {string}
 */
export type KpiTypeType = 'Forecast' | 'Budget';

/**
 * Defines values for PivotTypeType.
 * Possible values include: 'Dimension', 'TagKey'
 * @readonly
 * @enum {string}
 */
export type PivotTypeType = 'Dimension' | 'TagKey';

/**
 * Defines values for AlertType.
 * Possible values include: 'Budget', 'Invoice', 'Credit', 'Quota', 'General', 'xCloud',
 * 'BudgetForecast'
 * @readonly
 * @enum {string}
 */
export type AlertType = 'Budget' | 'Invoice' | 'Credit' | 'Quota' | 'General' | 'xCloud' | 'BudgetForecast';

/**
 * Defines values for AlertCategory.
 * Possible values include: 'Cost', 'Usage', 'Billing', 'System'
 * @readonly
 * @enum {string}
 */
export type AlertCategory = 'Cost' | 'Usage' | 'Billing' | 'System';

/**
 * Defines values for AlertCriteria.
 * Possible values include: 'CostThresholdExceeded', 'UsageThresholdExceeded',
 * 'CreditThresholdApproaching', 'CreditThresholdReached', 'QuotaThresholdApproaching',
 * 'QuotaThresholdReached', 'MultiCurrency', 'ForecastCostThresholdExceeded',
 * 'ForecastUsageThresholdExceeded', 'InvoiceDueDateApproaching', 'InvoiceDueDateReached',
 * 'CrossCloudNewDataAvailable', 'CrossCloudCollectionError', 'GeneralThresholdError'
 * @readonly
 * @enum {string}
 */
export type AlertCriteria = 'CostThresholdExceeded' | 'UsageThresholdExceeded' | 'CreditThresholdApproaching' | 'CreditThresholdReached' | 'QuotaThresholdApproaching' | 'QuotaThresholdReached' | 'MultiCurrency' | 'ForecastCostThresholdExceeded' | 'ForecastUsageThresholdExceeded' | 'InvoiceDueDateApproaching' | 'InvoiceDueDateReached' | 'CrossCloudNewDataAvailable' | 'CrossCloudCollectionError' | 'GeneralThresholdError';

/**
 * Defines values for AlertSource.
 * Possible values include: 'Preset', 'User'
 * @readonly
 * @enum {string}
 */
export type AlertSource = 'Preset' | 'User';

/**
 * Defines values for AlertTimeGrainType.
 * Possible values include: 'None', 'Monthly', 'Quarterly', 'Annually', 'BillingMonth',
 * 'BillingQuarter', 'BillingAnnual'
 * @readonly
 * @enum {string}
 */
export type AlertTimeGrainType = 'None' | 'Monthly' | 'Quarterly' | 'Annually' | 'BillingMonth' | 'BillingQuarter' | 'BillingAnnual';

/**
 * Defines values for AlertOperator.
 * Possible values include: 'None', 'EqualTo', 'GreaterThan', 'GreaterThanOrEqualTo', 'LessThan',
 * 'LessThanOrEqualTo'
 * @readonly
 * @enum {string}
 */
export type AlertOperator = 'None' | 'EqualTo' | 'GreaterThan' | 'GreaterThanOrEqualTo' | 'LessThan' | 'LessThanOrEqualTo';

/**
 * Defines values for AlertStatus.
 * Possible values include: 'None', 'Active', 'Overridden', 'Resolved', 'Dismissed'
 * @readonly
 * @enum {string}
 */
export type AlertStatus = 'None' | 'Active' | 'Overridden' | 'Resolved' | 'Dismissed';

/**
 * Defines values for ForecastType.
 * Possible values include: 'Usage', 'ActualCost', 'AmortizedCost'
 * @readonly
 * @enum {string}
 */
export type ForecastType = 'Usage' | 'ActualCost' | 'AmortizedCost';

/**
 * Defines values for ForecastTimeframeType.
 * Possible values include: 'MonthToDate', 'BillingMonthToDate', 'TheLastMonth',
 * 'TheLastBillingMonth', 'WeekToDate', 'Custom'
 * @readonly
 * @enum {string}
 */
export type ForecastTimeframeType = 'MonthToDate' | 'BillingMonthToDate' | 'TheLastMonth' | 'TheLastBillingMonth' | 'WeekToDate' | 'Custom';

/**
 * Defines values for GranularityType.
 * Possible values include: 'Daily'
 * @readonly
 * @enum {string}
 */
export type GranularityType = 'Daily';

/**
 * Defines values for QueryColumnType.
 * Possible values include: 'Tag', 'Dimension'
 * @readonly
 * @enum {string}
 */
export type QueryColumnType = 'Tag' | 'Dimension';

/**
 * Defines values for ExportType.
 * Possible values include: 'Usage', 'ActualCost', 'AmortizedCost'
 * @readonly
 * @enum {string}
 */
export type ExportType = 'Usage' | 'ActualCost' | 'AmortizedCost';

/**
 * Defines values for TimeframeType.
 * Possible values include: 'MonthToDate', 'BillingMonthToDate', 'TheLastMonth',
 * 'TheLastBillingMonth', 'WeekToDate', 'Custom'
 * @readonly
 * @enum {string}
 */
export type TimeframeType = 'MonthToDate' | 'BillingMonthToDate' | 'TheLastMonth' | 'TheLastBillingMonth' | 'WeekToDate' | 'Custom';

/**
 * Defines values for OperationStatusType.
 * Possible values include: 'Running', 'Completed', 'Failed'
 * @readonly
 * @enum {string}
 */
export type OperationStatusType = 'Running' | 'Completed' | 'Failed';

/**
 * Defines values for StatusType.
 * Possible values include: 'Active', 'Inactive'
 * @readonly
 * @enum {string}
 */
export type StatusType = 'Active' | 'Inactive';

/**
 * Defines values for RecurrenceType.
 * Possible values include: 'Daily', 'Weekly', 'Monthly', 'Annually'
 * @readonly
 * @enum {string}
 */
export type RecurrenceType = 'Daily' | 'Weekly' | 'Monthly' | 'Annually';

/**
 * Defines values for FormatType.
 * Possible values include: 'Csv'
 * @readonly
 * @enum {string}
 */
export type FormatType = 'Csv';

/**
 * Defines values for ExecutionType.
 * Possible values include: 'OnDemand', 'Scheduled'
 * @readonly
 * @enum {string}
 */
export type ExecutionType = 'OnDemand' | 'Scheduled';

/**
 * Defines values for ExecutionStatus.
 * Possible values include: 'Queued', 'InProgress', 'Completed', 'Failed', 'Timeout',
 * 'NewDataNotAvailable', 'DataNotAvailable'
 * @readonly
 * @enum {string}
 */
export type ExecutionStatus = 'Queued' | 'InProgress' | 'Completed' | 'Failed' | 'Timeout' | 'NewDataNotAvailable' | 'DataNotAvailable';

/**
 * Defines values for ExternalCloudProviderType.
 * Possible values include: 'externalSubscriptions', 'externalBillingAccounts'
 * @readonly
 * @enum {string}
 */
export type ExternalCloudProviderType = 'externalSubscriptions' | 'externalBillingAccounts';

/**
 * Defines values for Direction.
 * Possible values include: 'Ascending', 'Descending'
 * @readonly
 * @enum {string}
 */
export type Direction = 'Ascending' | 'Descending';

/**
 * Defines values for StartOn.
 * Possible values include: 'LastUsed', 'ScopePicker', 'SpecificScope'
 * @readonly
 * @enum {string}
 */
export type StartOn = 'LastUsed' | 'ScopePicker' | 'SpecificScope';

/**
 * Contains response data for the list operation.
 */
export type SettingsListResponse = SettingsListResult & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;

      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: SettingsListResult;
    };
};

/**
 * Contains response data for the get operation.
 */
export type SettingsGetResponse = Setting & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;

      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: Setting;
    };
};

/**
 * Contains response data for the createOrUpdate operation.
 */
export type SettingsCreateOrUpdateResponse = Setting & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;

      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: Setting;
    };
};

/**
 * Contains response data for the listNext operation.
 */
export type SettingsListNextResponse = SettingsListResult & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;

      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: SettingsListResult;
    };
};

/**
 * Contains response data for the list operation.
 */
export type ViewsListResponse = ViewListResult & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;

      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: ViewListResult;
    };
};

/**
 * Contains response data for the listByScope operation.
 */
export type ViewsListByScopeResponse = ViewListResult & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;

      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: ViewListResult;
    };
};

/**
 * Contains response data for the get operation.
 */
export type ViewsGetResponse = View & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;

      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: View;
    };
};

/**
 * Contains response data for the createOrUpdate operation.
 */
export type ViewsCreateOrUpdateResponse = View & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;

      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: View;
    };
};

/**
 * Contains response data for the getByScope operation.
 */
export type ViewsGetByScopeResponse = View & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;

      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: View;
    };
};

/**
 * Contains response data for the createOrUpdateByScope operation.
 */
export type ViewsCreateOrUpdateByScopeResponse = View & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;

      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: View;
    };
};

/**
 * Contains response data for the listNext operation.
 */
export type ViewsListNextResponse = ViewListResult & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;

      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: ViewListResult;
    };
};

/**
 * Contains response data for the listByScopeNext operation.
 */
export type ViewsListByScopeNextResponse = ViewListResult & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;

      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: ViewListResult;
    };
};

/**
 * Contains response data for the list operation.
 */
export type AlertsListResponse = AlertsResult & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;

      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: AlertsResult;
    };
};

/**
 * Contains response data for the get operation.
 */
export type AlertsGetResponse = Alert & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;

      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: Alert;
    };
};

/**
 * Contains response data for the dismiss operation.
 */
export type AlertsDismissResponse = Alert & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;

      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: Alert;
    };
};

/**
 * Contains response data for the listExternal operation.
 */
export type AlertsListExternalResponse = AlertsResult & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;

      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: AlertsResult;
    };
};

/**
 * Contains response data for the usage operation.
 */
export type ForecastUsageResponse = QueryResult & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;

      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: QueryResult;
    };
};

/**
 * Contains response data for the externalCloudProviderUsage operation.
 */
export type ForecastExternalCloudProviderUsageResponse = QueryResult & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;

      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: QueryResult;
    };
};

/**
 * Contains response data for the list operation.
 */
export type DimensionsListResponse = DimensionsListResult & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;

      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: DimensionsListResult;
    };
};

/**
 * Contains response data for the byExternalCloudProviderType operation.
 */
export type DimensionsByExternalCloudProviderTypeResponse = DimensionsListResult & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;

      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: DimensionsListResult;
    };
};

/**
 * Contains response data for the usage operation.
 */
export type QueryUsageResponse = QueryResult & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;

      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: QueryResult;
    };
};

/**
 * Contains response data for the usageByExternalCloudProviderType operation.
 */
export type QueryUsageByExternalCloudProviderTypeResponse = QueryResult & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;

      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: QueryResult;
    };
};

/**
 * Contains response data for the byBillingAccountId operation.
 */
export type GenerateReservationDetailsReportByBillingAccountIdResponse = OperationStatus & GenerateReservationDetailsReportByBillingAccountIdHeaders & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The parsed HTTP response headers.
       */
      parsedHeaders: GenerateReservationDetailsReportByBillingAccountIdHeaders;

      /**
       * The response body as text (string format)
       */
      bodyAsText: string;

      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: OperationStatus;
    };
};

/**
 * Contains response data for the byBillingProfileId operation.
 */
export type GenerateReservationDetailsReportByBillingProfileIdResponse = OperationStatus & GenerateReservationDetailsReportByBillingProfileIdHeaders & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The parsed HTTP response headers.
       */
      parsedHeaders: GenerateReservationDetailsReportByBillingProfileIdHeaders;

      /**
       * The response body as text (string format)
       */
      bodyAsText: string;

      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: OperationStatus;
    };
};

/**
 * Contains response data for the list operation.
 */
export type OperationsListResponse = OperationListResult & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;

      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: OperationListResult;
    };
};

/**
 * Contains response data for the listNext operation.
 */
export type OperationsListNextResponse = OperationListResult & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;

      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: OperationListResult;
    };
};

/**
 * Contains response data for the list operation.
 */
export type ExportsListResponse = ExportListResult & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;

      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: ExportListResult;
    };
};

/**
 * Contains response data for the get operation.
 */
export type ExportsGetResponse = ExportModel & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;

      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: ExportModel;
    };
};

/**
 * Contains response data for the createOrUpdate operation.
 */
export type ExportsCreateOrUpdateResponse = ExportModel & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;

      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: ExportModel;
    };
};

/**
 * Contains response data for the getExecutionHistory operation.
 */
export type ExportsGetExecutionHistoryResponse = ExportExecutionListResult & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;

      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: ExportExecutionListResult;
    };
};
