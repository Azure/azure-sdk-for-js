/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */

import * as coreClient from "@azure/core-client";

export type BenefitRecommendationPropertiesUnion =
  | BenefitRecommendationProperties
  | SingleScopeBenefitRecommendationProperties
  | SharedScopeBenefitRecommendationProperties;
export type BenefitUtilizationSummaryUnion =
  | BenefitUtilizationSummary
  | IncludedQuantityUtilizationSummary
  | SavingsPlanUtilizationSummary;

/** Result of listing cost management operations. It contains a list of operations and a URL link to get the next set of results. */
export interface OperationListResult {
  /**
   * List of cost management operations supported by the Microsoft.CostManagement resource provider.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly value?: CostManagementOperation[];
  /**
   * URL to get the next set of operation list results if there are any.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly nextLink?: string;
}

/** Details of a REST API operation, returned from the Resource Provider Operations API */
export interface Operation {
  /**
   * The name of the operation, as per Resource-Based Access Control (RBAC). Examples: "Microsoft.Compute/virtualMachines/write", "Microsoft.Compute/virtualMachines/capture/action"
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly name?: string;
  /**
   * Whether the operation applies to data-plane. This is "true" for data-plane operations and "false" for ARM/control-plane operations.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly isDataAction?: boolean;
  /** Localized display information for this particular operation. */
  display?: OperationDisplay;
  /**
   * The intended executor of the operation; as in Resource Based Access Control (RBAC) and audit logs UX. Default value is "user,system"
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly origin?: Origin;
  /**
   * Enum. Indicates the action type. "Internal" refers to actions that are for internal only APIs.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly actionType?: ActionType;
}

/** Localized display information for this particular operation. */
export interface OperationDisplay {
  /**
   * The localized friendly form of the resource provider name, e.g. "Microsoft Monitoring Insights" or "Microsoft Compute".
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly provider?: string;
  /**
   * The localized friendly name of the resource type related to this operation. E.g. "Virtual Machines" or "Job Schedule Collections".
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly resource?: string;
  /**
   * The concise, localized friendly name for the operation; suitable for dropdowns. E.g. "Create or Update Virtual Machine", "Restart Virtual Machine".
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly operation?: string;
  /**
   * The short, localized friendly description of the operation; suitable for tool tips and detailed views.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly description?: string;
}

/**
 * Error response indicates that the service is not able to process the incoming request. The reason is provided in the error message.
 *
 * Some Error responses:
 *
 *  * 429 TooManyRequests - Request is throttled. Retry after waiting for the time specified in the "x-ms-ratelimit-microsoft.consumption-retry-after" header.
 *
 *  * 503 ServiceUnavailable - Service is temporarily unavailable. Retry after waiting for the time specified in the "Retry-After" header.
 */
export interface ErrorResponse {
  /** The details of the error. */
  error?: ErrorDetails;
}

/** The details of the error. */
export interface ErrorDetails {
  /**
   * Error code.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly code?: string;
  /**
   * Error message indicating why the operation failed.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly message?: string;
}

/** Result of listing views. It contains a list of available views. */
export interface ViewListResult {
  /**
   * The list of views.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly value?: View[];
  /**
   * The link (url) to the next page of results.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly nextLink?: string;
}

/** The start and end date for pulling data for the report. */
export interface ReportConfigTimePeriod {
  /** The start date to pull data from. */
  from: Date;
  /** The end date to pull data to. */
  to: Date;
}

/** The definition of data present in the report. */
export interface ReportConfigDataset {
  /** The granularity of rows in the report. */
  granularity?: ReportGranularityType;
  /** Has configuration information for the data in the report. The configuration will be ignored if aggregation and grouping are provided. */
  configuration?: ReportConfigDatasetConfiguration;
  /** Dictionary of aggregation expression to use in the report. The key of each item in the dictionary is the alias for the aggregated column. Report can have up to 2 aggregation clauses. */
  aggregation?: { [propertyName: string]: ReportConfigAggregation };
  /** Array of group by expression to use in the report. Report can have up to 2 group by clauses. */
  grouping?: ReportConfigGrouping[];
  /** Array of order by expression to use in the report. */
  sorting?: ReportConfigSorting[];
  /** Has filter expression to use in the report. */
  filter?: ReportConfigFilter;
}

/** The configuration of dataset in the report. */
export interface ReportConfigDatasetConfiguration {
  /** Array of column names to be included in the report. Any valid report column name is allowed. If not provided, then report includes all columns. */
  columns?: string[];
}

/** The aggregation expression to be used in the report. */
export interface ReportConfigAggregation {
  /** The name of the column to aggregate. */
  name: string;
  /** The name of the aggregation function to use. */
  function: FunctionType;
}

/** The group by expression to be used in the report. */
export interface ReportConfigGrouping {
  /** Has type of the column to group. */
  type: QueryColumnType;
  /** The name of the column to group. This version supports subscription lowest possible grain. */
  name: string;
}

/** The order by expression to be used in the report. */
export interface ReportConfigSorting {
  /** Direction of sort. */
  direction?: ReportConfigSortingType;
  /** The name of the column to sort. */
  name: string;
}

/** The filter expression to be used in the report. */
export interface ReportConfigFilter {
  /** The logical "AND" expression. Must have at least 2 items. */
  and?: ReportConfigFilter[];
  /** The logical "OR" expression. Must have at least 2 items. */
  or?: ReportConfigFilter[];
  /** Has comparison expression for a dimension */
  dimensions?: ReportConfigComparisonExpression;
  /** Has comparison expression for a tag */
  tags?: ReportConfigComparisonExpression;
}

/** The comparison expression to be used in the report. */
export interface ReportConfigComparisonExpression {
  /** The name of the column to use in comparison. */
  name: string;
  /** The operator to use for comparison. */
  operator: OperatorType;
  /** Array of values to use for comparison */
  values: string[];
}

/** Each KPI must contain a 'type' and 'enabled' key. */
export interface KpiProperties {
  /** KPI type (Forecast, Budget). */
  type?: KpiType;
  /** ID of resource related to metric (budget). */
  id?: string;
  /** show the KPI in the UI? */
  enabled?: boolean;
}

/** Each pivot must contain a 'type' and 'name'. */
export interface PivotProperties {
  /** Data type to show in view. */
  type?: PivotType;
  /** Data field to show in view. */
  name?: string;
}

/** The Resource model definition. */
export interface CostManagementProxyResource {
  /**
   * Resource Id.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly id?: string;
  /**
   * Resource name.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly name?: string;
  /**
   * Resource type.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly type?: string;
  /** eTag of the resource. To handle concurrent update scenario, this field will be used to determine whether the user is updating the latest version or not. */
  eTag?: string;
}

/** Result of alerts. */
export interface AlertsResult {
  /**
   * List of alerts.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly value?: Alert[];
  /**
   * URL to get the next set of alerts results if there are any.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly nextLink?: string;
}

/** defines the type of alert */
export interface AlertPropertiesDefinition {
  /** type of alert */
  type?: AlertType;
  /** Alert category */
  category?: AlertCategory;
  /** Criteria that triggered alert */
  criteria?: AlertCriteria;
}

/** Alert details */
export interface AlertPropertiesDetails {
  /** Type of timegrain cadence */
  timeGrainType?: AlertTimeGrainType;
  /** datetime of periodStartDate */
  periodStartDate?: string;
  /** notificationId that triggered this alert */
  triggeredBy?: string;
  /** array of resourceGroups to filter by */
  resourceGroupFilter?: any[];
  /** array of resources to filter by */
  resourceFilter?: any[];
  /** array of meters to filter by */
  meterFilter?: any[];
  /** tags to filter by */
  tagFilter?: Record<string, unknown>;
  /** notification threshold percentage as a decimal which activated this alert */
  threshold?: number;
  /** operator used to compare currentSpend with amount */
  operator?: AlertOperator;
  /** budget threshold amount */
  amount?: number;
  /** unit of currency being used */
  unit?: string;
  /** current spend */
  currentSpend?: number;
  /** list of emails to contact */
  contactEmails?: string[];
  /** list of action groups to broadcast to */
  contactGroups?: string[];
  /** list of contact roles */
  contactRoles?: string[];
  /** overriding alert */
  overridingAlert?: string;
  /** department name */
  departmentName?: string;
  /** company name */
  companyName?: string;
  /** enrollment number */
  enrollmentNumber?: string;
  /** datetime of enrollmentStartDate */
  enrollmentStartDate?: string;
  /** datetime of enrollmentEndDate */
  enrollmentEndDate?: string;
  /** invoicing threshold */
  invoicingThreshold?: number;
}

/** The request payload to update an alert */
export interface DismissAlertPayload {
  /** defines the type of alert */
  definition?: AlertPropertiesDefinition;
  /** Alert description */
  description?: string;
  /** Source of alert */
  source?: AlertSource;
  /** Alert details */
  details?: AlertPropertiesDetails;
  /** related budget */
  costEntityId?: string;
  /** alert status */
  status?: AlertStatus;
  /** dateTime in which alert was created */
  creationTime?: string;
  /** dateTime in which alert was closed */
  closeTime?: string;
  /** dateTime in which alert was last modified */
  modificationTime?: string;
  /** User who last modified the alert */
  statusModificationUserName?: string;
  /** dateTime in which the alert status was last modified */
  statusModificationTime?: string;
}

/** The definition of a forecast. */
export interface ForecastDefinition {
  /** The type of the forecast. */
  type: ForecastType;
  /** The time frame for pulling data for the forecast. If custom, then a specific time period must be provided. */
  timeframe: ForecastTimeframe;
  /** Has time period for pulling data for the forecast. */
  timePeriod?: ForecastTimePeriod;
  /** Has definition for data in this forecast. */
  dataset: ForecastDataset;
  /** A boolean determining if actualCost will be included. */
  includeActualCost?: boolean;
  /** A boolean determining if FreshPartialCost will be included. */
  includeFreshPartialCost?: boolean;
}

/** Has time period for pulling data for the forecast. */
export interface ForecastTimePeriod {
  /** The start date to pull data from. */
  from: Date;
  /** The end date to pull data to. */
  to: Date;
}

/** The definition of data present in the forecast. */
export interface ForecastDataset {
  /** The granularity of rows in the forecast. */
  granularity?: GranularityType;
  /** Has configuration information for the data in the export. The configuration will be ignored if aggregation and grouping are provided. */
  configuration?: ForecastDatasetConfiguration;
  /** Dictionary of aggregation expression to use in the forecast. The key of each item in the dictionary is the alias for the aggregated column. forecast can have up to 2 aggregation clauses. */
  aggregation: { [propertyName: string]: ForecastAggregation };
  /** Has filter expression to use in the forecast. */
  filter?: ForecastFilter;
}

/** The configuration of dataset in the forecast. */
export interface ForecastDatasetConfiguration {
  /** Array of column names to be included in the forecast. Any valid forecast column name is allowed. If not provided, then forecast includes all columns. */
  columns?: string[];
}

/** The aggregation expression to be used in the forecast. */
export interface ForecastAggregation {
  /** The name of the column to aggregate. */
  name: FunctionName;
  /** The name of the aggregation function to use. */
  function: FunctionType;
}

/** The filter expression to be used in the export. */
export interface ForecastFilter {
  /** The logical "AND" expression. Must have at least 2 items. */
  and?: ForecastFilter[];
  /** The logical "OR" expression. Must have at least 2 items. */
  or?: ForecastFilter[];
  /** Has comparison expression for a dimension */
  dimensions?: ForecastComparisonExpression;
  /** Has comparison expression for a tag */
  tags?: ForecastComparisonExpression;
}

/** The comparison expression to be used in the forecast. */
export interface ForecastComparisonExpression {
  /** The name of the column to use in comparison. */
  name: string;
  /** The operator to use for comparison. */
  operator: ForecastOperatorType;
  /** Array of values to use for comparison */
  values: string[];
}

/** Forecast column properties */
export interface ForecastColumn {
  /** The name of column. */
  name?: string;
  /** The type of column. */
  type?: string;
}

/** The Resource model definition. */
export interface CostManagementResource {
  /**
   * Resource Id.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly id?: string;
  /**
   * Resource name.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly name?: string;
  /**
   * Resource type.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly type?: string;
  /**
   * Location of the resource.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly location?: string;
  /**
   * SKU of the resource.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly sku?: string;
  /**
   * ETag of the resource.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly eTag?: string;
  /**
   * Resource tags.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly tags?: { [propertyName: string]: string };
}

/** Result of listing dimensions. It contains a list of available dimensions. */
export interface DimensionsListResult {
  /**
   * The list of dimensions.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly value?: Dimension[];
}

/** The definition of a query. */
export interface QueryDefinition {
  /** The type of the query. */
  type: ExportType;
  /** The time frame for pulling data for the query. If custom, then a specific time period must be provided. */
  timeframe: TimeframeType;
  /** Has time period for pulling data for the query. */
  timePeriod?: QueryTimePeriod;
  /** Has definition for data in this query. */
  dataset: QueryDataset;
}

/** The start and end date for pulling data for the query. */
export interface QueryTimePeriod {
  /** The start date to pull data from. */
  from: Date;
  /** The end date to pull data to. */
  to: Date;
}

/** The definition of data present in the query. */
export interface QueryDataset {
  /** The granularity of rows in the query. */
  granularity?: GranularityType;
  /** Has configuration information for the data in the export. The configuration will be ignored if aggregation and grouping are provided. */
  configuration?: QueryDatasetConfiguration;
  /** Dictionary of aggregation expression to use in the query. The key of each item in the dictionary is the alias for the aggregated column. Query can have up to 2 aggregation clauses. */
  aggregation?: { [propertyName: string]: QueryAggregation };
  /** Array of group by expression to use in the query. Query can have up to 2 group by clauses. */
  grouping?: QueryGrouping[];
  /** The filter expression to use in the query. Please reference our Query API REST documentation for how to properly format the filter. */
  filter?: QueryFilter;
}

/** The configuration of dataset in the query. */
export interface QueryDatasetConfiguration {
  /** Array of column names to be included in the query. Any valid query column name is allowed. If not provided, then query includes all columns. */
  columns?: string[];
}

/** The aggregation expression to be used in the query. */
export interface QueryAggregation {
  /** The name of the column to aggregate. */
  name: string;
  /** The name of the aggregation function to use. */
  function: FunctionType;
}

/** The group by expression to be used in the query. */
export interface QueryGrouping {
  /** Has type of the column to group. */
  type: QueryColumnType;
  /** The name of the column to group. */
  name: string;
}

/** The filter expression to be used in the export. */
export interface QueryFilter {
  /** The logical "AND" expression. Must have at least 2 items. */
  and?: QueryFilter[];
  /** The logical "OR" expression. Must have at least 2 items. */
  or?: QueryFilter[];
  /** Has comparison expression for a dimension */
  dimensions?: QueryComparisonExpression;
  /** Has comparison expression for a tag */
  tags?: QueryComparisonExpression;
}

/** The comparison expression to be used in the query. */
export interface QueryComparisonExpression {
  /** The name of the column to use in comparison. */
  name: string;
  /** The operator to use for comparison. */
  operator: QueryOperatorType;
  /** Array of values to use for comparison */
  values: string[];
}

/** QueryColumn properties */
export interface QueryColumn {
  /** The name of column. */
  name?: string;
  /** The type of column. */
  type?: string;
}

/** The status of the long running operation. */
export interface OperationStatus {
  /** The status of the long running operation. */
  status?: OperationStatusType;
  /** The CSV file from the reportUrl blob link consists of reservation usage data with the following schema at daily granularity */
  reportUrl?: ReservationReportSchema;
  /** The time at which report URL becomes invalid. */
  validUntil?: Date;
}

/** Result of listing exports. It contains a list of available exports in the scope provided. */
export interface ExportListResult {
  /**
   * The list of exports.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly value?: Export[];
}

/** The schedule associated with the export. */
export interface ExportSchedule {
  /** The status of the export's schedule. If 'Inactive', the export's schedule is paused. */
  status?: StatusType;
  /** The schedule recurrence. */
  recurrence?: RecurrenceType;
  /** Has start and end date of the recurrence. The start date must be in future. If present, the end date must be greater than start date. */
  recurrencePeriod?: ExportRecurrencePeriod;
}

/** The start and end date for recurrence schedule. */
export interface ExportRecurrencePeriod {
  /** The start date of recurrence. */
  from: Date;
  /** The end date of recurrence. */
  to?: Date;
}

/** The common properties of the export. */
export interface CommonExportProperties {
  /** The format of the export being delivered. Currently only 'Csv' is supported. */
  format?: FormatType;
  /** Has delivery information for the export. */
  deliveryInfo: ExportDeliveryInfo;
  /** Has the definition for the export. */
  definition: ExportDefinition;
  /** If requested, has the most recent run history for the export. */
  runHistory?: ExportExecutionListResult;
  /** If set to true, exported data will be partitioned by size and placed in a blob directory together with a manifest file. Note: this option is currently available only for Microsoft Customer Agreement commerce scopes. */
  partitionData?: boolean;
  /**
   * If the export has an active schedule, provides an estimate of the next run time.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly nextRunTimeEstimate?: Date;
}

/** The delivery information associated with a export. */
export interface ExportDeliveryInfo {
  /** Has destination for the export being delivered. */
  destination: ExportDeliveryDestination;
}

/** This represents the blob storage account location where exports of costs will be delivered. There are two ways to configure the destination. The approach recommended for most customers is to specify the resourceId of the storage account. This requires a one-time registration of the account's subscription with the Microsoft.CostManagementExports resource provider in order to give Cost Management services access to the storage. When creating an export in the Azure portal this registration is performed automatically but API users may need to register the subscription explicitly (for more information see https://docs.microsoft.com/en-us/azure/azure-resource-manager/resource-manager-supported-services ). Another way to configure the destination is available ONLY to Partners with a Microsoft Partner Agreement plan who are global admins of their billing account. These Partners, instead of specifying the resourceId of a storage account, can specify the storage account name along with a SAS token for the account. This allows exports of costs to a storage account in any tenant. The SAS token should be created for the blob service with Service/Container/Object resource types and with Read/Write/Delete/List/Add/Create permissions (for more information see https://docs.microsoft.com/en-us/azure/cost-management-billing/costs/export-cost-data-storage-account-sas-key ). */
export interface ExportDeliveryDestination {
  /** The resource id of the storage account where exports will be delivered. This is not required if a sasToken and storageAccount are specified. */
  resourceId?: string;
  /** The name of the container where exports will be uploaded. If the container does not exist it will be created. */
  container: string;
  /** The name of the directory where exports will be uploaded. */
  rootFolderPath?: string;
  /** A SAS token for the storage account. For a restricted set of Azure customers this together with storageAccount can be specified instead of resourceId. Note: the value returned by the API for this property will always be obfuscated. Returning this same obfuscated value will not result in the SAS token being updated. To update this value a new SAS token must be specified. */
  sasToken?: string;
  /** The storage account where exports will be uploaded. For a restricted set of Azure customers this together with sasToken can be specified instead of resourceId. */
  storageAccount?: string;
}

/** The definition of an export. */
export interface ExportDefinition {
  /** The type of the export. Note that 'Usage' is equivalent to 'ActualCost' and is applicable to exports that do not yet provide data for charges or amortization for service reservations. */
  type: ExportType;
  /** The time frame for pulling data for the export. If custom, then a specific time period must be provided. */
  timeframe: TimeframeType;
  /** Has time period for pulling data for the export. */
  timePeriod?: ExportTimePeriod;
  /** The definition for data in the export. */
  dataSet?: ExportDataset;
}

/** The date range for data in the export. This should only be specified with timeFrame set to 'Custom'. The maximum date range is 3 months. */
export interface ExportTimePeriod {
  /** The start date for export data. */
  from: Date;
  /** The end date for export data. */
  to: Date;
}

/** The definition for data in the export. */
export interface ExportDataset {
  /** The granularity of rows in the export. Currently only 'Daily' is supported. */
  granularity?: GranularityType;
  /** The export dataset configuration. */
  configuration?: ExportDatasetConfiguration;
}

/** The export dataset configuration. Allows columns to be selected for the export. If not provided then the export will include all available columns. */
export interface ExportDatasetConfiguration {
  /** Array of column names to be included in the export. If not provided then the export will include all available columns. The available columns can vary by customer channel (see examples). */
  columns?: string[];
}

/** Result of listing the run history of an export. */
export interface ExportExecutionListResult {
  /**
   * A list of export runs.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly value?: ExportRun[];
}

/** The definition of a cost detailed report. */
export interface GenerateCostDetailsReportRequestDefinition {
  /** The type of the detailed report. By default ActualCost is provided */
  metric?: CostDetailsMetricType;
  /** The specific date range of cost details requested for the report. This parameter cannot be used alongside either the invoiceId or billingPeriod parameters. If a timePeriod, invoiceId or billingPeriod parameter is not provided in the request body the API will return the current month's cost. API only allows data to be pulled for 1 month or less and no older than 13 months. If no timePeriod or billingPeriod or invoiceId is provided the API defaults to the open month time period */
  timePeriod?: CostDetailsTimePeriod;
  /** This parameter can be used only by Enterprise Agreement customers. Use the YearMonth(e.g. 202008) format. This parameter cannot be used alongside either the invoiceId or timePeriod parameters. If a timePeriod, invoiceId or billingPeriod parameter is not provided in the request body the API will return the current month's cost. */
  billingPeriod?: string;
  /** This parameter can only be used by Microsoft Customer Agreement customers. Additionally, it can only be used at the Billing Profile or Customer scope. This parameter cannot be used alongside either the billingPeriod or timePeriod parameters. If a timePeriod, invoiceId or billingPeriod parameter is not provided in the request body the API will return the current month's cost. */
  invoiceId?: string;
}

/** The start and end date for pulling data for the cost detailed report. API only allows data to be pulled for 1 month or less and no older than 13 months. */
export interface CostDetailsTimePeriod {
  /** The start date to pull data from. example format 2020-03-15 */
  start: string;
  /** The end date to pull data to. example format 2020-03-15 */
  end: string;
}

/** The result of the long running operation for cost details Api. */
export interface CostDetailsOperationResults {
  /** The id of the long running operation. */
  id?: string;
  /** The name of the long running operation. */
  name?: string;
  /** The type of the long running operation. */
  type?: string;
  /** The status of the cost details operation */
  status?: CostDetailsStatusType;
  /** The time at which report URL becomes invalid/expires in UTC e.g. 2020-12-08T05:55:59.4394737Z. */
  validTill?: Date;
  /** The details of the error. */
  error?: ErrorDetails;
  /** The Manifest version. */
  manifestVersion?: string;
  /** The data format of the report */
  dataFormat?: CostDetailsDataFormat;
  /** The total number of bytes in all blobs. */
  byteCount?: number;
  /** The total number of blobs. */
  blobCount?: number;
  /** Is the data in compressed format. */
  compressData?: boolean;
  /** List of blob information generated by this operation. */
  blobs?: BlobInfo[];
  /** The request scope of the request. */
  requestScope?: string;
  /** The request payload body provided in Cost Details call */
  requestBody?: GenerateCostDetailsReportRequestDefinition;
}

/** The blob information generated by this operation. */
export interface BlobInfo {
  /** Link to the blob to download file. */
  blobLink?: string;
  /** Bytes in the blob. */
  byteCount?: number;
}

/**
 * Error response indicates that the service is not able to process the incoming request. The reason is provided in the error message.
 *
 * Some Error responses:
 *
 *  * 400 Bad Request - Invalid Request Payload. Request payload provided is not in a json format or had an invalid member not accepted in the request payload.
 *
 *  * 400 Bad Request - Invalid request payload:  can only have either timePeriod or invoiceId or billingPeriod. API only allows data to be pulled for either timePeriod or invoiceId or billingPeriod. Customer should provide only one of these parameters.
 *
 *  * 400 Bad Request - Start date must be after . API only allows data to be pulled no older than 13 months from now.
 *
 *  * 400 Bad Request - The maximum allowed date range is 1 months. API only allows data to be pulled for 1 month or less.
 *
 *  * 429 TooManyRequests - Request is throttled. Retry after waiting for the time specified in the "retry-after" header.
 *
 *  * 503 ServiceUnavailable - Service is temporarily unavailable. Retry after waiting for the time specified in the "Retry-After" header.
 */
export interface GenerateCostDetailsReportErrorResponse {
  /** The details of the error. */
  error?: ErrorDetails;
}

/** The definition of a cost detailed report. */
export interface GenerateDetailedCostReportDefinition {
  /** The type of the detailed report. By default ActualCost is provided */
  metric?: GenerateDetailedCostReportMetricType;
  /** Has time period for pulling data for the cost detailed report. Can only have one of either timePeriod or invoiceId or billingPeriod parameters. If none provided current month cost is provided. */
  timePeriod?: GenerateDetailedCostReportTimePeriod;
  /** Billing period in YearMonth(e.g. 202008) format. Only for legacy enterprise customers can use this. Can only have one of either timePeriod or invoiceId or billingPeriod parameters. If none provided current month cost is provided. */
  billingPeriod?: string;
  /** Invoice ID for Pay-as-you-go and Microsoft Customer Agreement scopes. Can only have one of either timePeriod or invoiceId or billingPeriod parameters. If none provided current month cost is provided. */
  invoiceId?: string;
  /** Customer ID for Microsoft Customer Agreement scopes (Invoice Id is also required for this). */
  customerId?: string;
}

/** The start and end date for pulling data for the cost detailed report. */
export interface GenerateDetailedCostReportTimePeriod {
  /** The start date to pull data from. example format 2020-03-15 */
  start: string;
  /** The end date to pull data to. example format 2020-03-15 */
  end: string;
}

/** The result of the long running operation for cost detailed report. */
export interface GenerateDetailedCostReportOperationResult {
  /** The ARM resource id of the long running operation. */
  id?: string;
  /** The name of the long running operation. */
  name?: string;
  /** The type of the long running operation. */
  type?: string;
  /**
   * The time at which report URL becomes invalid/expires in UTC e.g. 2020-12-08T05:55:59.4394737Z.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly expiryTime?: Date;
  /** The time at which report URL becomes invalid/expires in UTC e.g. 2020-12-08T05:55:59.4394737Z. */
  validTill?: Date;
  /** The URL to download the generated report. */
  downloadUrl?: string;
}

/** The URL to download the generated report. */
export interface DownloadURL {
  /**
   * The time at which report URL becomes invalid/expires in UTC e.g. 2020-12-08T05:55:59.4394737Z.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly expiryTime?: Date;
  /** The time at which report URL becomes invalid/expires in UTC e.g. 2020-12-08T05:55:59.4394737Z. */
  validTill?: Date;
  /** The URL to download the generated report. */
  downloadUrl?: string;
}

/**
 * Error response indicates that the service is not able to process the incoming request. The reason is provided in the error message.
 *
 * Some Error responses:
 *
 *  * 413 Request Entity Too Large - Request is throttled. The amount of data required to fulfill the request exceeds the maximum size permitted of 2Gb. Please utilize our Exports feature instead.
 *
 *  * 429 TooManyRequests - Request is throttled. Retry after waiting for the time specified in the "x-ms-ratelimit-microsoft.consumption-retry-after" header.
 *
 *  * 503 ServiceUnavailable - Service is temporarily unavailable. Retry after waiting for the time specified in the "Retry-After" header.
 */
export interface GenerateDetailedCostReportErrorResponse {
  /** The details of the error. */
  error?: ErrorDetails;
}

/** The status of the long running operation for cost detailed report. */
export interface GenerateDetailedCostReportOperationStatuses {
  /** The ID of the long running operation. */
  id?: string;
  /** The name of the long running operation. */
  name?: string;
  /** The status of the long running operation. */
  status?: Status;
  /** The startTime of the operation. */
  startTime?: string;
  /** The endTime of the operation. */
  endTime?: string;
  /** The type of the long running operation. */
  type?: string;
  /** The details of the error. */
  error?: ErrorDetails;
  /**
   * The time at which report URL becomes invalid/expires in UTC e.g. 2020-12-08T05:55:59.4394737Z.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly expiryTime?: Date;
  /** The time at which report URL becomes invalid/expires in UTC e.g. 2020-12-08T05:55:59.4394737Z. */
  validTill?: Date;
  /** The URL to download the generated report. */
  downloadUrl?: string;
}

/** The status of the long running operation. */
export interface Status {
  /** The status of the long running operation. */
  status?: ReportOperationStatusType;
}

/** Scheduled actions list result. It contains a list of scheduled actions. */
export interface ScheduledActionListResult {
  /**
   * The list of scheduled actions.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly value?: ScheduledAction[];
  /**
   * The link (url) to the next page of results.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly nextLink?: string;
}

/** Destination of the view data. This is optional. Currently only CSV format is supported. */
export interface FileDestination {
  /** Destination of the view data. Currently only CSV format is supported. */
  fileFormats?: FileFormat[];
}

/** The properties of the scheduled action notification. */
export interface NotificationProperties {
  /** Array of email addresses. */
  to: string[];
  /** Locale of the email. */
  language?: string;
  /** Optional message to be added in the email. Length is limited to 250 characters. */
  message?: string;
  /** Regional format used for formatting date/time and currency values in the email. */
  regionalFormat?: string;
  /** Subject of the email. Length is limited to 70 characters. */
  subject: string;
}

/** The properties of the schedule. */
export interface ScheduleProperties {
  /** Frequency of the schedule. */
  frequency: ScheduleFrequency;
  /** UTC time at which cost analysis data will be emailed. */
  hourOfDay?: number;
  /** Day names in english on which cost analysis data will be emailed. This property is applicable when frequency is Weekly or Monthly. */
  daysOfWeek?: DaysOfWeek[];
  /** Weeks in which cost analysis data will be emailed. This property is applicable when frequency is Monthly and used in combination with daysOfWeek. */
  weeksOfMonth?: WeeksOfMonth[];
  /** UTC day on which cost analysis data will be emailed. Must be between 1 and 31. This property is applicable when frequency is Monthly and overrides weeksOfMonth or daysOfWeek. */
  dayOfMonth?: number;
  /** The start date and time of the scheduled action (UTC). */
  startDate: Date;
  /** The end date and time of the scheduled action (UTC). */
  endDate: Date;
}

/** Metadata pertaining to creation and last modification of the resource. */
export interface SystemData {
  /** The identity that created the resource. */
  createdBy?: string;
  /** The type of identity that created the resource. */
  createdByType?: CreatedByType;
  /** The timestamp of resource creation (UTC). */
  createdAt?: Date;
  /** The identity that last modified the resource. */
  lastModifiedBy?: string;
  /** The type of identity that last modified the resource. */
  lastModifiedByType?: CreatedByType;
  /** The timestamp of resource last modification (UTC) */
  lastModifiedAt?: Date;
}

/** Common fields that are returned in the response for all Azure Resource Manager resources */
export interface Resource {
  /**
   * Fully qualified resource ID for the resource. Ex - /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly id?: string;
  /**
   * The name of the resource
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly name?: string;
  /**
   * The type of the resource. E.g. "Microsoft.Compute/virtualMachines" or "Microsoft.Storage/storageAccounts"
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly type?: string;
}

/**
 * Error response indicates that the service is not able to process the incoming request. The reason is provided in the error message.
 *
 * Some Error responses:
 *
 *  * 429 TooManyRequests - Request is throttled. Retry after waiting for the time specified in the "x-ms-ratelimit-microsoft.consumption-retry-after" header.
 *
 *  * 503 ServiceUnavailable - Service is temporarily unavailable. Retry after waiting for the time specified in the "Retry-After" header.
 */
export interface ErrorResponseWithNestedDetails {
  /** The details of the error. */
  error?: ErrorDetailsWithNestedDetails;
}

/** The check availability request body. */
export interface CheckNameAvailabilityRequest {
  /** The name of the resource for which availability needs to be checked. */
  name?: string;
  /** The resource type. */
  type?: string;
}

/** The check availability result. */
export interface CheckNameAvailabilityResponse {
  /** Indicates if the resource name is available. */
  nameAvailable?: boolean;
  /** The reason why the given name is not available. */
  reason?: CheckNameAvailabilityReason;
  /** Detailed reason why the given name is available. */
  message?: string;
}

/** Result of listing benefit recommendations. */
export interface BenefitRecommendationsListResult {
  /**
   * The list of benefit recommendations.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly value?: BenefitRecommendationModel[];
  /**
   * The link (URL) to the next page of results.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly nextLink?: string;
}

/** The properties of the benefit recommendations. */
export interface BenefitRecommendationProperties {
  /** Polymorphic discriminator, which specifies the different types this object can be */
  scope: "Single" | "Shared";
  /**
   * The first usage date used for looking back for computing the recommendations.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly firstConsumptionDate?: Date;
  /**
   * The last usage date used for looking back for computing the recommendations.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly lastConsumptionDate?: Date;
  /** The number of days of usage evaluated for computing the recommendations. */
  lookBackPeriod?: LookBackPeriod;
  /**
   * The total hours for which the cost is covered. Its equal to number of records in a property 'properties/usage/charges'.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly totalHours?: number;
  /** On-demand charges between firstConsumptionDate and lastConsumptionDate that were used for computing benefit recommendations. */
  usage?: RecommendationUsageDetails;
  /**
   * ARM SKU name. 'Compute_Savings_Plan' for SavingsPlan.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly armSkuName?: string;
  /** Term period of the benefit. For example, P1Y or P3Y. */
  term?: Term;
  /** Grain of the proposed commitment amount. Supported values: 'Hourly' */
  commitmentGranularity?: Grain;
  /**
   * An ISO 4217 currency code identifier for the costs and savings amounts.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly currencyCode?: string;
  /**
   * The current cost without benefit, corresponds to 'totalHours' in the look-back period.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly costWithoutBenefit?: number;
  /** The details of the proposed recommendation. */
  recommendationDetails?: AllSavingsBenefitDetails;
  /**
   * The list of all benefit recommendations with the recommendation details.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly allRecommendationDetails?: AllSavingsList;
}

/** On-demand charges between firstConsumptionDate and lastConsumptionDate that were used for computing benefit recommendations. */
export interface RecommendationUsageDetails {
  /** The grain of the usage. Supported values: 'Hourly' */
  usageGrain?: Grain;
  /**
   * On-demand charges for each hour between firstConsumptionDate and lastConsumptionDate that were used for computing benefit recommendations.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly charges?: number[];
}

/** Benefit recommendation details. */
export interface AllSavingsBenefitDetails {
  /**
   * The difference between total cost and benefit cost for the 'totalHours' in the look-back period.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly overageCost?: number;
  /**
   * The estimated cost with benefit for the 'totalHours' in the look-back period. It's equal to (commitmentAmount * totalHours)
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly benefitCost?: number;
  /**
   * Total cost, which is sum of benefit cost and overage cost.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly totalCost?: number;
  /**
   * The amount saved for the 'totalHours' in the look-back period, by purchasing the recommended quantity of the benefit.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly savingsAmount?: number;
  /**
   * The savings in percentage for the 'totalHours' in the look-back period, by purchasing the recommended quantity of benefit.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly savingsPercentage?: number;
  /**
   * Estimated benefit coverage percentage for the 'totalHours' in the look-back period, with this commitment.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly coveragePercentage?: number;
  /**
   * The commitment amount at the commitmentGranularity.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly commitmentAmount?: number;
  /**
   * Estimated average utilization percentage for the 'totalHours' in the look-back period, with this commitment.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly averageUtilizationPercentage?: number;
  /**
   * Estimated unused portion of the 'benefitCost'.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly wastageCost?: number;
}

/** The list of all benefit recommendations with the recommendation details. */
export interface AllSavingsList {
  /**
   * The list of benefit recommendations with the recommendation details..
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly value?: AllSavingsBenefitDetails[];
  /**
   * The link (URL) to the next page of results.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly nextLink?: string;
}

/** List of benefit utilization summaries. */
export interface BenefitUtilizationSummariesListResult {
  /**
   * The list of benefit utilization summaries.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly value?: BenefitUtilizationSummaryUnion[];
  /**
   * The link (URL) to the next page of results.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly nextLink?: string;
}

/** The properties of a benefit utilization summary. */
export interface BenefitUtilizationSummaryProperties {
  /**
   * ARM SKU name. For example, 'Compute_Savings_Plan' for savings plan.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly armSkuName?: string;
  /**
   * The benefit ID is the identifier of the benefit.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly benefitId?: string;
  /**
   * The benefit order ID is the identifier for a benefit purchase.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly benefitOrderId?: string;
  /** The benefit type. Supported values: 'SavingsPlan'. */
  benefitType?: BenefitKind;
  /**
   * Date corresponding to the utilization summary record. If the grain of data is monthly, value for this field will be first day of the month.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly usageDate?: Date;
}

/** A Cost management REST API operation. */
export interface CostManagementOperation extends Operation {
  /**
   * Operation id: {provider}/{resource}/{operation}.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly id?: string;
}

/** The details of the error. */
export interface ErrorDetailsWithNestedDetails extends ErrorDetails {
  /**
   * The additional details of the error.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly details?: ErrorDetailsWithNestedDetails[];
}

/** States and configurations of Cost Analysis. */
export interface View extends CostManagementProxyResource {
  /** User input name of the view. Required. */
  displayName?: string;
  /** Cost Management scope to save the view on. This includes 'subscriptions/{subscriptionId}' for subscription scope, 'subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}' for resourceGroup scope, 'providers/Microsoft.Billing/billingAccounts/{billingAccountId}' for Billing Account scope, 'providers/Microsoft.Billing/billingAccounts/{billingAccountId}/departments/{departmentId}' for Department scope, 'providers/Microsoft.Billing/billingAccounts/{billingAccountId}/enrollmentAccounts/{enrollmentAccountId}' for EnrollmentAccount scope, 'providers/Microsoft.Billing/billingAccounts/{billingAccountId}/billingProfiles/{billingProfileId}' for BillingProfile scope, 'providers/Microsoft.Billing/billingAccounts/{billingAccountId}/invoiceSections/{invoiceSectionId}' for InvoiceSection scope, 'providers/Microsoft.Management/managementGroups/{managementGroupId}' for Management Group scope, '/providers/Microsoft.CostManagement/externalBillingAccounts/{externalBillingAccountName}' for ExternalBillingAccount scope, and '/providers/Microsoft.CostManagement/externalSubscriptions/{externalSubscriptionName}' for ExternalSubscription scope. */
  scope?: string;
  /**
   * Date the user created this view.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly createdOn?: Date;
  /**
   * Date when the user last modified this view.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly modifiedOn?: Date;
  /**
   * Date range of the current view.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly dateRange?: string;
  /**
   * Currency of the current view.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly currency?: string;
  /** Chart type of the main view in Cost Analysis. Required. */
  chart?: ChartType;
  /** Show costs accumulated over time. */
  accumulated?: AccumulatedType;
  /** Metric to use when displaying costs. */
  metric?: MetricType;
  /** List of KPIs to show in Cost Analysis UI. */
  kpis?: KpiProperties[];
  /** Configuration of 3 sub-views in the Cost Analysis UI. */
  pivots?: PivotProperties[];
  /** The type of the report. Usage represents actual usage, forecast represents forecasted data and UsageAndForecast represents both usage and forecasted data. Actual usage and forecasted data can be differentiated based on dates. */
  typePropertiesQueryType?: ReportType;
  /** The time frame for pulling data for the report. If custom, then a specific time period must be provided. */
  timeframe?: ReportTimeframeType;
  /** Has time period for pulling data for the report. */
  timePeriod?: ReportConfigTimePeriod;
  /** Has definition for data in this report config. */
  dataSet?: ReportConfigDataset;
  /** If true, report includes monetary commitment. */
  includeMonetaryCommitment?: boolean;
}

/** An individual alert. */
export interface Alert extends CostManagementProxyResource {
  /** defines the type of alert */
  definition?: AlertPropertiesDefinition;
  /** Alert description */
  description?: string;
  /** Source of alert */
  source?: AlertSource;
  /** Alert details */
  details?: AlertPropertiesDetails;
  /** related budget */
  costEntityId?: string;
  /** alert status */
  status?: AlertStatus;
  /** dateTime in which alert was created */
  creationTime?: string;
  /** dateTime in which alert was closed */
  closeTime?: string;
  /** dateTime in which alert was last modified */
  modificationTime?: string;
  /** User who last modified the alert */
  statusModificationUserName?: string;
  /** dateTime in which the alert status was last modified */
  statusModificationTime?: string;
}

/** An export run. */
export interface ExportRun extends CostManagementProxyResource {
  /** The type of the export run. */
  executionType?: ExecutionType;
  /** The last known status of the export run. */
  status?: ExecutionStatus;
  /** The identifier for the entity that triggered the export. For on-demand runs it is the user email. For scheduled runs it is 'System'. */
  submittedBy?: string;
  /** The time when export was queued to be run. */
  submittedTime?: Date;
  /** The time when export was picked up to be run. */
  processingStartTime?: Date;
  /** The time when the export run finished. */
  processingEndTime?: Date;
  /** The name of the exported file. */
  fileName?: string;
  /** The export settings that were in effect for this run. */
  runSettings?: CommonExportProperties;
  /** The details of any error. */
  error?: ErrorDetails;
}

/** An export resource. */
export interface Export extends CostManagementProxyResource {
  /** The format of the export being delivered. Currently only 'Csv' is supported. */
  format?: FormatType;
  /** Has delivery information for the export. */
  deliveryInfo?: ExportDeliveryInfo;
  /** Has the definition for the export. */
  definition?: ExportDefinition;
  /** If requested, has the most recent run history for the export. */
  runHistory?: ExportExecutionListResult;
  /** If set to true, exported data will be partitioned by size and placed in a blob directory together with a manifest file. Note: this option is currently available only for Microsoft Customer Agreement commerce scopes. */
  partitionData?: boolean;
  /**
   * If the export has an active schedule, provides an estimate of the next run time.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly nextRunTimeEstimate?: Date;
  /** Has schedule information for the export. */
  schedule?: ExportSchedule;
}

/** Result of forecast. It contains all columns listed under groupings and aggregation. */
export interface ForecastResult extends CostManagementResource {
  /** The link (url) to the next page of results. */
  nextLink?: string;
  /** Array of columns */
  columns?: ForecastColumn[];
  /** Array of rows */
  rows?: any[][];
}

/** List of Dimension. */
export interface Dimension extends CostManagementResource {
  /**
   * Dimension description.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly description?: string;
  /**
   * Filter enabled.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly filterEnabled?: boolean;
  /**
   * Grouping enabled.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly groupingEnabled?: boolean;
  /** Dimension data. */
  data?: string[];
  /**
   * Total number of data for the dimension.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly total?: number;
  /**
   * Dimension category.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly category?: string;
  /**
   * Usage start.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly usageStart?: Date;
  /**
   * Usage end.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly usageEnd?: Date;
  /**
   * The link (url) to the next page of results.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly nextLink?: string;
}

/** Result of query. It contains all columns listed under groupings and aggregation. */
export interface QueryResult extends CostManagementResource {
  /** The link (url) to the next page of results. */
  nextLink?: string;
  /** Array of columns */
  columns?: QueryColumn[];
  /** Array of rows */
  rows?: any[][];
}

/** The properties of the export. */
export interface ExportProperties extends CommonExportProperties {
  /** Has schedule information for the export. */
  schedule?: ExportSchedule;
}

/** The resource model definition for a Azure Resource Manager proxy resource. It will not have tags and a location */
export interface ProxyResource extends Resource {}

/** The benefit resource model definition. */
export interface BenefitResource extends Resource {
  /** Reservation or SavingsPlan. */
  kind?: BenefitKind;
}

/** Benefit utilization summary resource. */
export interface BenefitUtilizationSummary extends Resource {
  /** Supported values: 'SavingsPlan'. */
  kind: BenefitKind;
}

/** The properties of the benefit recommendations when scope is 'Single'. */
export interface SingleScopeBenefitRecommendationProperties
  extends BenefitRecommendationProperties {
  /** Polymorphic discriminator, which specifies the different types this object can be */
  scope: "Single";
  /**
   * The subscription ID that this single scope recommendation is for. Applicable only if recommendation is for 'Single' scope.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly subscriptionId?: string;
  /**
   * The resource group that this single scope recommendation is for. Applicable only if recommendation is for 'Single' scope and 'ResourceGroup' request scope.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly resourceGroup?: string;
}

/** The properties of the benefit recommendation when scope is 'Shared'. */
export interface SharedScopeBenefitRecommendationProperties
  extends BenefitRecommendationProperties {
  /** Polymorphic discriminator, which specifies the different types this object can be */
  scope: "Shared";
}

/** Included Quantity utilization summary properties. */
export interface IncludedQuantityUtilizationSummaryProperties
  extends BenefitUtilizationSummaryProperties {
  /**
   * This is the utilized percentage for the benefit ID.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly utilizationPercentage?: number;
}

/** Savings plan utilization summary properties. */
export interface SavingsPlanUtilizationSummaryProperties
  extends BenefitUtilizationSummaryProperties {
  /**
   * This is the average hourly utilization for each date range that corresponds to given grain (Daily, Monthly). Suppose the API call is for usageDate > 2022-10-01 and usageDate < 2022-10-31 at a daily granularity. There will be one record per benefit id for each day. For a single day, the avgUtilizationPercentage value will be equal to the average of the set of values where the set contains 24 utilization percentage entries one for each hour in a specific day.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly avgUtilizationPercentage?: number;
  /**
   * This is the minimum hourly utilization for each date range that corresponds to given grain (Daily, Monthly). Suppose the API call is for usageDate > 2022-10-01 and usageDate < 2022-10-31 at a daily granularity. There will be one record per benefit id for each day. For a single day, the minUtilizationPercentage value will be equal to the smallest in the set of values where the set contains 24 utilization percentage entries one for each hour in a specific day. If on the day 2022-10-18, the lowest utilization percentage was 10% at hour 4, then the value for the minUtilizationPercentage in the response will be 10%.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly minUtilizationPercentage?: number;
  /**
   * This is the maximum hourly utilization for each date range that corresponds to given grain (Daily, Monthly). Suppose the API call is for usageDate > 2022-10-01 and usageDate < 2022-10-31 at a daily granularity. There will be one record per benefit id for each day. For a single day, the maxUtilizationPercentage value will be equal to the largest in the set of values where the set contains 24 utilization percentage entries one for each hour in a specific day. If on the day 2022-10-18, the largest utilization percentage was 90% at hour 5, then the value for the maxUtilizationPercentage in the response will be 90%.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly maxUtilizationPercentage?: number;
}

/** The Resource model definition. */
export interface ScheduledActionProxyResource extends ProxyResource {
  /**
   * Resource Etag. For update calls, eTag is optional and can be specified to achieve optimistic concurrency. Fetch the resource's eTag by doing a 'GET' call first and then including the latest eTag as part of the request body or 'If-Match' header while performing the update. For create calls, eTag is not required.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly eTag?: string;
  /** Kind of the scheduled action. */
  kind?: ScheduledActionKind;
  /**
   * Kind of the scheduled action.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly systemData?: SystemData;
}

/** benefit plan recommendation details. */
export interface BenefitRecommendationModel extends BenefitResource {
  /** The properties of the benefit recommendations. */
  properties?: BenefitRecommendationPropertiesUnion;
}

/** Included Quantity utilization summary resource. */
export interface IncludedQuantityUtilizationSummary
  extends BenefitUtilizationSummary {
  /** Polymorphic discriminator, which specifies the different types this object can be */
  kind: "IncludedQuantity";
  /**
   * ARM SKU name. For example, 'Compute_Savings_Plan' for savings plan.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly armSkuName?: string;
  /**
   * The benefit ID is the identifier of the benefit.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly benefitId?: string;
  /**
   * The benefit order ID is the identifier for a benefit purchase.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly benefitOrderId?: string;
  /** The benefit type. Supported values: 'SavingsPlan'. */
  benefitType?: BenefitKind;
  /**
   * Date corresponding to the utilization summary record. If the grain of data is monthly, value for this field will be first day of the month.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly usageDate?: Date;
  /**
   * This is the utilized percentage for the benefit ID.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly utilizationPercentage?: number;
}

/** Savings plan utilization summary resource. */
export interface SavingsPlanUtilizationSummary
  extends BenefitUtilizationSummary {
  /** Polymorphic discriminator, which specifies the different types this object can be */
  kind: "SavingsPlan";
  /**
   * ARM SKU name. For example, 'Compute_Savings_Plan' for savings plan.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly armSkuName?: string;
  /**
   * The benefit ID is the identifier of the benefit.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly benefitId?: string;
  /**
   * The benefit order ID is the identifier for a benefit purchase.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly benefitOrderId?: string;
  /** The benefit type. Supported values: 'SavingsPlan'. */
  benefitType?: BenefitKind;
  /**
   * Date corresponding to the utilization summary record. If the grain of data is monthly, value for this field will be first day of the month.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly usageDate?: Date;
  /**
   * This is the average hourly utilization for each date range that corresponds to given grain (Daily, Monthly). Suppose the API call is for usageDate > 2022-10-01 and usageDate < 2022-10-31 at a daily granularity. There will be one record per benefit id for each day. For a single day, the avgUtilizationPercentage value will be equal to the average of the set of values where the set contains 24 utilization percentage entries one for each hour in a specific day.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly avgUtilizationPercentage?: number;
  /**
   * This is the minimum hourly utilization for each date range that corresponds to given grain (Daily, Monthly). Suppose the API call is for usageDate > 2022-10-01 and usageDate < 2022-10-31 at a daily granularity. There will be one record per benefit id for each day. For a single day, the minUtilizationPercentage value will be equal to the smallest in the set of values where the set contains 24 utilization percentage entries one for each hour in a specific day. If on the day 2022-10-18, the lowest utilization percentage was 10% at hour 4, then the value for the minUtilizationPercentage in the response will be 10%.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly minUtilizationPercentage?: number;
  /**
   * This is the maximum hourly utilization for each date range that corresponds to given grain (Daily, Monthly). Suppose the API call is for usageDate > 2022-10-01 and usageDate < 2022-10-31 at a daily granularity. There will be one record per benefit id for each day. For a single day, the maxUtilizationPercentage value will be equal to the largest in the set of values where the set contains 24 utilization percentage entries one for each hour in a specific day. If on the day 2022-10-18, the largest utilization percentage was 90% at hour 5, then the value for the maxUtilizationPercentage in the response will be 90%.
   * NOTE: This property will not be serialized. It can only be populated by the server.
   */
  readonly maxUtilizationPercentage?: number;
}

/** Scheduled action definition. */
export interface ScheduledAction extends ScheduledActionProxyResource {
  /** Scheduled action name. */
  displayName?: string;
  /** Destination format of the view data. This is optional. */
  fileDestination?: FileDestination;
  /** Notification properties based on scheduled action kind. */
  notification?: NotificationProperties;
  /** Email address of the point of contact that should get the unsubscribe requests and notification emails. */
  notificationEmail?: string;
  /** Schedule of the scheduled action. */
  schedule?: ScheduleProperties;
  /** Cost Management scope like 'subscriptions/{subscriptionId}' for subscription scope, 'subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}' for resourceGroup scope, 'providers/Microsoft.Billing/billingAccounts/{billingAccountId}' for Billing Account scope, 'providers/Microsoft.Billing/billingAccounts/{billingAccountId}/departments/{departmentId}' for Department scope, 'providers/Microsoft.Billing/billingAccounts/{billingAccountId}/enrollmentAccounts/{enrollmentAccountId}' for EnrollmentAccount scope, 'providers/Microsoft.Billing/billingAccounts/{billingAccountId}/billingProfiles/{billingProfileId}' for BillingProfile scope, 'providers/Microsoft.Billing/billingAccounts/{billingAccountId}/invoiceSections/{invoiceSectionId}' for InvoiceSection scope, '/providers/Microsoft.CostManagement/externalBillingAccounts/{externalBillingAccountName}' for ExternalBillingAccount scope, and '/providers/Microsoft.CostManagement/externalSubscriptions/{externalSubscriptionName}' for ExternalSubscription scope. */
  scope?: string;
  /** Status of the scheduled action. */
  status?: ScheduledActionStatus;
  /** Cost analysis viewId used for scheduled action. For example, '/providers/Microsoft.CostManagement/views/swaggerExample' */
  viewId?: string;
}

/** Defines headers for GenerateReservationDetailsReport_byBillingAccountId operation. */
export interface GenerateReservationDetailsReportByBillingAccountIdHeaders {
  /** The URL to check the status of the asynchronous operation. */
  location?: string;
  /** The amount of delay to use while the status of the operation is checked. The value is expressed in seconds. */
  retryAfter?: number;
}

/** Defines headers for GenerateReservationDetailsReport_byBillingProfileId operation. */
export interface GenerateReservationDetailsReportByBillingProfileIdHeaders {
  /** The URL to check the status of the asynchronous operation. */
  location?: string;
  /** The amount of delay to use while the status of the operation is checked. The value is expressed in seconds. */
  retryAfter?: number;
}

/** Defines headers for GenerateCostDetailsReport_createOperation operation. */
export interface GenerateCostDetailsReportCreateOperationHeaders {
  /** The URL to check the result of the asynchronous operation. */
  location?: string;
  /** The amount of delay to use while the status of the operation is checked. The value is expressed in seconds. */
  retryAfter?: number;
}

/** Defines headers for GenerateDetailedCostReport_createOperation operation. */
export interface GenerateDetailedCostReportCreateOperationHeaders {
  /** The URL to check the result of the asynchronous operation. */
  location?: string;
  /** The URL to check the status of the asynchronous operation. */
  azureConsumptionAsyncOperation?: string;
  /** The URL to check the status of the asynchronous operation. */
  azureAsyncOperation?: string;
  /** The amount of delay to use while the status of the operation is checked. The value is expressed in seconds. */
  retryAfter?: number;
}

/** Defines headers for PriceSheet_download operation. */
export interface PriceSheetDownloadHeaders {
  /** GET this URL to retrieve the status of the asynchronous operation. */
  location?: string;
  /** The amount of delay to use while the status of the operation is checked. The value is expressed in seconds. */
  retryAfter?: string;
  /** The operation entity Id GUID. */
  oDataEntityId?: string;
}

/** Defines headers for PriceSheet_downloadByBillingProfile operation. */
export interface PriceSheetDownloadByBillingProfileHeaders {
  /** GET this URL to retrieve the status of the asynchronous operation. */
  location?: string;
  /** The amount of delay to use while the status of the operation is checked. The value is expressed in seconds. */
  retryAfter?: string;
  /** The operation entity Id GUID. */
  oDataEntityId?: string;
}

/** Known values of {@link Origin} that the service accepts. */
export enum KnownOrigin {
  /** User */
  User = "user",
  /** System */
  System = "system",
  /** UserSystem */
  UserSystem = "user,system"
}

/**
 * Defines values for Origin. \
 * {@link KnownOrigin} can be used interchangeably with Origin,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **user** \
 * **system** \
 * **user,system**
 */
export type Origin = string;

/** Known values of {@link ActionType} that the service accepts. */
export enum KnownActionType {
  /** Internal */
  Internal = "Internal"
}

/**
 * Defines values for ActionType. \
 * {@link KnownActionType} can be used interchangeably with ActionType,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **Internal**
 */
export type ActionType = string;

/** Known values of {@link ReportType} that the service accepts. */
export enum KnownReportType {
  /** Usage */
  Usage = "Usage"
}

/**
 * Defines values for ReportType. \
 * {@link KnownReportType} can be used interchangeably with ReportType,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **Usage**
 */
export type ReportType = string;

/** Known values of {@link ReportTimeframeType} that the service accepts. */
export enum KnownReportTimeframeType {
  /** WeekToDate */
  WeekToDate = "WeekToDate",
  /** MonthToDate */
  MonthToDate = "MonthToDate",
  /** YearToDate */
  YearToDate = "YearToDate",
  /** Custom */
  Custom = "Custom"
}

/**
 * Defines values for ReportTimeframeType. \
 * {@link KnownReportTimeframeType} can be used interchangeably with ReportTimeframeType,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **WeekToDate** \
 * **MonthToDate** \
 * **YearToDate** \
 * **Custom**
 */
export type ReportTimeframeType = string;

/** Known values of {@link ReportGranularityType} that the service accepts. */
export enum KnownReportGranularityType {
  /** Daily */
  Daily = "Daily",
  /** Monthly */
  Monthly = "Monthly"
}

/**
 * Defines values for ReportGranularityType. \
 * {@link KnownReportGranularityType} can be used interchangeably with ReportGranularityType,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **Daily** \
 * **Monthly**
 */
export type ReportGranularityType = string;

/** Known values of {@link FunctionType} that the service accepts. */
export enum KnownFunctionType {
  /** Sum */
  Sum = "Sum"
}

/**
 * Defines values for FunctionType. \
 * {@link KnownFunctionType} can be used interchangeably with FunctionType,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **Sum**
 */
export type FunctionType = string;

/** Known values of {@link QueryColumnType} that the service accepts. */
export enum KnownQueryColumnType {
  /** The tag associated with the cost data. */
  TagKey = "TagKey",
  /** The dimension of cost data. */
  Dimension = "Dimension"
}

/**
 * Defines values for QueryColumnType. \
 * {@link KnownQueryColumnType} can be used interchangeably with QueryColumnType,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **TagKey**: The tag associated with the cost data. \
 * **Dimension**: The dimension of cost data.
 */
export type QueryColumnType = string;

/** Known values of {@link ReportConfigSortingType} that the service accepts. */
export enum KnownReportConfigSortingType {
  /** Ascending */
  Ascending = "Ascending",
  /** Descending */
  Descending = "Descending"
}

/**
 * Defines values for ReportConfigSortingType. \
 * {@link KnownReportConfigSortingType} can be used interchangeably with ReportConfigSortingType,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **Ascending** \
 * **Descending**
 */
export type ReportConfigSortingType = string;

/** Known values of {@link OperatorType} that the service accepts. */
export enum KnownOperatorType {
  /** In */
  In = "In",
  /** Contains */
  Contains = "Contains"
}

/**
 * Defines values for OperatorType. \
 * {@link KnownOperatorType} can be used interchangeably with OperatorType,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **In** \
 * **Contains**
 */
export type OperatorType = string;

/** Known values of {@link ChartType} that the service accepts. */
export enum KnownChartType {
  /** Area */
  Area = "Area",
  /** Line */
  Line = "Line",
  /** StackedColumn */
  StackedColumn = "StackedColumn",
  /** GroupedColumn */
  GroupedColumn = "GroupedColumn",
  /** Table */
  Table = "Table"
}

/**
 * Defines values for ChartType. \
 * {@link KnownChartType} can be used interchangeably with ChartType,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **Area** \
 * **Line** \
 * **StackedColumn** \
 * **GroupedColumn** \
 * **Table**
 */
export type ChartType = string;

/** Known values of {@link AccumulatedType} that the service accepts. */
export enum KnownAccumulatedType {
  /** True */
  True = "true",
  /** False */
  False = "false"
}

/**
 * Defines values for AccumulatedType. \
 * {@link KnownAccumulatedType} can be used interchangeably with AccumulatedType,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **true** \
 * **false**
 */
export type AccumulatedType = string;

/** Known values of {@link MetricType} that the service accepts. */
export enum KnownMetricType {
  /** ActualCost */
  ActualCost = "ActualCost",
  /** AmortizedCost */
  AmortizedCost = "AmortizedCost",
  /** Ahub */
  Ahub = "AHUB"
}

/**
 * Defines values for MetricType. \
 * {@link KnownMetricType} can be used interchangeably with MetricType,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **ActualCost** \
 * **AmortizedCost** \
 * **AHUB**
 */
export type MetricType = string;

/** Known values of {@link KpiType} that the service accepts. */
export enum KnownKpiType {
  /** Forecast */
  Forecast = "Forecast",
  /** Budget */
  Budget = "Budget"
}

/**
 * Defines values for KpiType. \
 * {@link KnownKpiType} can be used interchangeably with KpiType,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **Forecast** \
 * **Budget**
 */
export type KpiType = string;

/** Known values of {@link PivotType} that the service accepts. */
export enum KnownPivotType {
  /** Dimension */
  Dimension = "Dimension",
  /** TagKey */
  TagKey = "TagKey"
}

/**
 * Defines values for PivotType. \
 * {@link KnownPivotType} can be used interchangeably with PivotType,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **Dimension** \
 * **TagKey**
 */
export type PivotType = string;

/** Known values of {@link AlertType} that the service accepts. */
export enum KnownAlertType {
  /** Budget */
  Budget = "Budget",
  /** Invoice */
  Invoice = "Invoice",
  /** Credit */
  Credit = "Credit",
  /** Quota */
  Quota = "Quota",
  /** General */
  General = "General",
  /** XCloud */
  XCloud = "xCloud",
  /** BudgetForecast */
  BudgetForecast = "BudgetForecast"
}

/**
 * Defines values for AlertType. \
 * {@link KnownAlertType} can be used interchangeably with AlertType,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **Budget** \
 * **Invoice** \
 * **Credit** \
 * **Quota** \
 * **General** \
 * **xCloud** \
 * **BudgetForecast**
 */
export type AlertType = string;

/** Known values of {@link AlertCategory} that the service accepts. */
export enum KnownAlertCategory {
  /** Cost */
  Cost = "Cost",
  /** Usage */
  Usage = "Usage",
  /** Billing */
  Billing = "Billing",
  /** System */
  System = "System"
}

/**
 * Defines values for AlertCategory. \
 * {@link KnownAlertCategory} can be used interchangeably with AlertCategory,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **Cost** \
 * **Usage** \
 * **Billing** \
 * **System**
 */
export type AlertCategory = string;

/** Known values of {@link AlertCriteria} that the service accepts. */
export enum KnownAlertCriteria {
  /** CostThresholdExceeded */
  CostThresholdExceeded = "CostThresholdExceeded",
  /** UsageThresholdExceeded */
  UsageThresholdExceeded = "UsageThresholdExceeded",
  /** CreditThresholdApproaching */
  CreditThresholdApproaching = "CreditThresholdApproaching",
  /** CreditThresholdReached */
  CreditThresholdReached = "CreditThresholdReached",
  /** QuotaThresholdApproaching */
  QuotaThresholdApproaching = "QuotaThresholdApproaching",
  /** QuotaThresholdReached */
  QuotaThresholdReached = "QuotaThresholdReached",
  /** MultiCurrency */
  MultiCurrency = "MultiCurrency",
  /** ForecastCostThresholdExceeded */
  ForecastCostThresholdExceeded = "ForecastCostThresholdExceeded",
  /** ForecastUsageThresholdExceeded */
  ForecastUsageThresholdExceeded = "ForecastUsageThresholdExceeded",
  /** InvoiceDueDateApproaching */
  InvoiceDueDateApproaching = "InvoiceDueDateApproaching",
  /** InvoiceDueDateReached */
  InvoiceDueDateReached = "InvoiceDueDateReached",
  /** CrossCloudNewDataAvailable */
  CrossCloudNewDataAvailable = "CrossCloudNewDataAvailable",
  /** CrossCloudCollectionError */
  CrossCloudCollectionError = "CrossCloudCollectionError",
  /** GeneralThresholdError */
  GeneralThresholdError = "GeneralThresholdError"
}

/**
 * Defines values for AlertCriteria. \
 * {@link KnownAlertCriteria} can be used interchangeably with AlertCriteria,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **CostThresholdExceeded** \
 * **UsageThresholdExceeded** \
 * **CreditThresholdApproaching** \
 * **CreditThresholdReached** \
 * **QuotaThresholdApproaching** \
 * **QuotaThresholdReached** \
 * **MultiCurrency** \
 * **ForecastCostThresholdExceeded** \
 * **ForecastUsageThresholdExceeded** \
 * **InvoiceDueDateApproaching** \
 * **InvoiceDueDateReached** \
 * **CrossCloudNewDataAvailable** \
 * **CrossCloudCollectionError** \
 * **GeneralThresholdError**
 */
export type AlertCriteria = string;

/** Known values of {@link AlertSource} that the service accepts. */
export enum KnownAlertSource {
  /** Preset */
  Preset = "Preset",
  /** User */
  User = "User"
}

/**
 * Defines values for AlertSource. \
 * {@link KnownAlertSource} can be used interchangeably with AlertSource,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **Preset** \
 * **User**
 */
export type AlertSource = string;

/** Known values of {@link AlertTimeGrainType} that the service accepts. */
export enum KnownAlertTimeGrainType {
  /** None */
  None = "None",
  /** Monthly */
  Monthly = "Monthly",
  /** Quarterly */
  Quarterly = "Quarterly",
  /** Annually */
  Annually = "Annually",
  /** BillingMonth */
  BillingMonth = "BillingMonth",
  /** BillingQuarter */
  BillingQuarter = "BillingQuarter",
  /** BillingAnnual */
  BillingAnnual = "BillingAnnual"
}

/**
 * Defines values for AlertTimeGrainType. \
 * {@link KnownAlertTimeGrainType} can be used interchangeably with AlertTimeGrainType,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **None** \
 * **Monthly** \
 * **Quarterly** \
 * **Annually** \
 * **BillingMonth** \
 * **BillingQuarter** \
 * **BillingAnnual**
 */
export type AlertTimeGrainType = string;

/** Known values of {@link AlertOperator} that the service accepts. */
export enum KnownAlertOperator {
  /** None */
  None = "None",
  /** EqualTo */
  EqualTo = "EqualTo",
  /** GreaterThan */
  GreaterThan = "GreaterThan",
  /** GreaterThanOrEqualTo */
  GreaterThanOrEqualTo = "GreaterThanOrEqualTo",
  /** LessThan */
  LessThan = "LessThan",
  /** LessThanOrEqualTo */
  LessThanOrEqualTo = "LessThanOrEqualTo"
}

/**
 * Defines values for AlertOperator. \
 * {@link KnownAlertOperator} can be used interchangeably with AlertOperator,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **None** \
 * **EqualTo** \
 * **GreaterThan** \
 * **GreaterThanOrEqualTo** \
 * **LessThan** \
 * **LessThanOrEqualTo**
 */
export type AlertOperator = string;

/** Known values of {@link AlertStatus} that the service accepts. */
export enum KnownAlertStatus {
  /** None */
  None = "None",
  /** Active */
  Active = "Active",
  /** Overridden */
  Overridden = "Overridden",
  /** Resolved */
  Resolved = "Resolved",
  /** Dismissed */
  Dismissed = "Dismissed"
}

/**
 * Defines values for AlertStatus. \
 * {@link KnownAlertStatus} can be used interchangeably with AlertStatus,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **None** \
 * **Active** \
 * **Overridden** \
 * **Resolved** \
 * **Dismissed**
 */
export type AlertStatus = string;

/** Known values of {@link ExternalCloudProviderType} that the service accepts. */
export enum KnownExternalCloudProviderType {
  /** ExternalSubscriptions */
  ExternalSubscriptions = "externalSubscriptions",
  /** ExternalBillingAccounts */
  ExternalBillingAccounts = "externalBillingAccounts"
}

/**
 * Defines values for ExternalCloudProviderType. \
 * {@link KnownExternalCloudProviderType} can be used interchangeably with ExternalCloudProviderType,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **externalSubscriptions** \
 * **externalBillingAccounts**
 */
export type ExternalCloudProviderType = string;

/** Known values of {@link ForecastType} that the service accepts. */
export enum KnownForecastType {
  /** Usage */
  Usage = "Usage",
  /** ActualCost */
  ActualCost = "ActualCost",
  /** AmortizedCost */
  AmortizedCost = "AmortizedCost"
}

/**
 * Defines values for ForecastType. \
 * {@link KnownForecastType} can be used interchangeably with ForecastType,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **Usage** \
 * **ActualCost** \
 * **AmortizedCost**
 */
export type ForecastType = string;

/** Known values of {@link ForecastTimeframe} that the service accepts. */
export enum KnownForecastTimeframe {
  /** Custom */
  Custom = "Custom"
}

/**
 * Defines values for ForecastTimeframe. \
 * {@link KnownForecastTimeframe} can be used interchangeably with ForecastTimeframe,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **Custom**
 */
export type ForecastTimeframe = string;

/** Known values of {@link GranularityType} that the service accepts. */
export enum KnownGranularityType {
  /** Daily */
  Daily = "Daily"
}

/**
 * Defines values for GranularityType. \
 * {@link KnownGranularityType} can be used interchangeably with GranularityType,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **Daily**
 */
export type GranularityType = string;

/** Known values of {@link FunctionName} that the service accepts. */
export enum KnownFunctionName {
  /** PreTaxCostUSD */
  PreTaxCostUSD = "PreTaxCostUSD",
  /** Cost */
  Cost = "Cost",
  /** CostUSD */
  CostUSD = "CostUSD",
  /** PreTaxCost */
  PreTaxCost = "PreTaxCost"
}

/**
 * Defines values for FunctionName. \
 * {@link KnownFunctionName} can be used interchangeably with FunctionName,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **PreTaxCostUSD** \
 * **Cost** \
 * **CostUSD** \
 * **PreTaxCost**
 */
export type FunctionName = string;

/** Known values of {@link ForecastOperatorType} that the service accepts. */
export enum KnownForecastOperatorType {
  /** In */
  In = "In"
}

/**
 * Defines values for ForecastOperatorType. \
 * {@link KnownForecastOperatorType} can be used interchangeably with ForecastOperatorType,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **In**
 */
export type ForecastOperatorType = string;

/** Known values of {@link ExportType} that the service accepts. */
export enum KnownExportType {
  /** Usage */
  Usage = "Usage",
  /** ActualCost */
  ActualCost = "ActualCost",
  /** AmortizedCost */
  AmortizedCost = "AmortizedCost"
}

/**
 * Defines values for ExportType. \
 * {@link KnownExportType} can be used interchangeably with ExportType,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **Usage** \
 * **ActualCost** \
 * **AmortizedCost**
 */
export type ExportType = string;

/** Known values of {@link TimeframeType} that the service accepts. */
export enum KnownTimeframeType {
  /** MonthToDate */
  MonthToDate = "MonthToDate",
  /** BillingMonthToDate */
  BillingMonthToDate = "BillingMonthToDate",
  /** TheLastMonth */
  TheLastMonth = "TheLastMonth",
  /** TheLastBillingMonth */
  TheLastBillingMonth = "TheLastBillingMonth",
  /** WeekToDate */
  WeekToDate = "WeekToDate",
  /** Custom */
  Custom = "Custom"
}

/**
 * Defines values for TimeframeType. \
 * {@link KnownTimeframeType} can be used interchangeably with TimeframeType,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **MonthToDate** \
 * **BillingMonthToDate** \
 * **TheLastMonth** \
 * **TheLastBillingMonth** \
 * **WeekToDate** \
 * **Custom**
 */
export type TimeframeType = string;

/** Known values of {@link QueryOperatorType} that the service accepts. */
export enum KnownQueryOperatorType {
  /** In */
  In = "In"
}

/**
 * Defines values for QueryOperatorType. \
 * {@link KnownQueryOperatorType} can be used interchangeably with QueryOperatorType,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **In**
 */
export type QueryOperatorType = string;

/** Known values of {@link OperationStatusType} that the service accepts. */
export enum KnownOperationStatusType {
  /** Running */
  Running = "Running",
  /** Completed */
  Completed = "Completed",
  /** Failed */
  Failed = "Failed"
}

/**
 * Defines values for OperationStatusType. \
 * {@link KnownOperationStatusType} can be used interchangeably with OperationStatusType,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **Running** \
 * **Completed** \
 * **Failed**
 */
export type OperationStatusType = string;

/** Known values of {@link ReservationReportSchema} that the service accepts. */
export enum KnownReservationReportSchema {
  /** InstanceFlexibilityGroup */
  InstanceFlexibilityGroup = "InstanceFlexibilityGroup",
  /** InstanceFlexibilityRatio */
  InstanceFlexibilityRatio = "InstanceFlexibilityRatio",
  /** InstanceId */
  InstanceId = "InstanceId",
  /** Kind */
  Kind = "Kind",
  /** ReservationId */
  ReservationId = "ReservationId",
  /** ReservationOrderId */
  ReservationOrderId = "ReservationOrderId",
  /** ReservedHours */
  ReservedHours = "ReservedHours",
  /** SkuName */
  SkuName = "SkuName",
  /** TotalReservedQuantity */
  TotalReservedQuantity = "TotalReservedQuantity",
  /** UsageDate */
  UsageDate = "UsageDate",
  /** UsedHours */
  UsedHours = "UsedHours"
}

/**
 * Defines values for ReservationReportSchema. \
 * {@link KnownReservationReportSchema} can be used interchangeably with ReservationReportSchema,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **InstanceFlexibilityGroup** \
 * **InstanceFlexibilityRatio** \
 * **InstanceId** \
 * **Kind** \
 * **ReservationId** \
 * **ReservationOrderId** \
 * **ReservedHours** \
 * **SkuName** \
 * **TotalReservedQuantity** \
 * **UsageDate** \
 * **UsedHours**
 */
export type ReservationReportSchema = string;

/** Known values of {@link StatusType} that the service accepts. */
export enum KnownStatusType {
  /** Active */
  Active = "Active",
  /** Inactive */
  Inactive = "Inactive"
}

/**
 * Defines values for StatusType. \
 * {@link KnownStatusType} can be used interchangeably with StatusType,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **Active** \
 * **Inactive**
 */
export type StatusType = string;

/** Known values of {@link RecurrenceType} that the service accepts. */
export enum KnownRecurrenceType {
  /** Daily */
  Daily = "Daily",
  /** Weekly */
  Weekly = "Weekly",
  /** Monthly */
  Monthly = "Monthly",
  /** Annually */
  Annually = "Annually"
}

/**
 * Defines values for RecurrenceType. \
 * {@link KnownRecurrenceType} can be used interchangeably with RecurrenceType,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **Daily** \
 * **Weekly** \
 * **Monthly** \
 * **Annually**
 */
export type RecurrenceType = string;

/** Known values of {@link FormatType} that the service accepts. */
export enum KnownFormatType {
  /** Csv */
  Csv = "Csv"
}

/**
 * Defines values for FormatType. \
 * {@link KnownFormatType} can be used interchangeably with FormatType,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **Csv**
 */
export type FormatType = string;

/** Known values of {@link ExecutionType} that the service accepts. */
export enum KnownExecutionType {
  /** OnDemand */
  OnDemand = "OnDemand",
  /** Scheduled */
  Scheduled = "Scheduled"
}

/**
 * Defines values for ExecutionType. \
 * {@link KnownExecutionType} can be used interchangeably with ExecutionType,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **OnDemand** \
 * **Scheduled**
 */
export type ExecutionType = string;

/** Known values of {@link ExecutionStatus} that the service accepts. */
export enum KnownExecutionStatus {
  /** Queued */
  Queued = "Queued",
  /** InProgress */
  InProgress = "InProgress",
  /** Completed */
  Completed = "Completed",
  /** Failed */
  Failed = "Failed",
  /** Timeout */
  Timeout = "Timeout",
  /** NewDataNotAvailable */
  NewDataNotAvailable = "NewDataNotAvailable",
  /** DataNotAvailable */
  DataNotAvailable = "DataNotAvailable"
}

/**
 * Defines values for ExecutionStatus. \
 * {@link KnownExecutionStatus} can be used interchangeably with ExecutionStatus,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **Queued** \
 * **InProgress** \
 * **Completed** \
 * **Failed** \
 * **Timeout** \
 * **NewDataNotAvailable** \
 * **DataNotAvailable**
 */
export type ExecutionStatus = string;

/** Known values of {@link CostDetailsMetricType} that the service accepts. */
export enum KnownCostDetailsMetricType {
  /** Actual cost data. */
  ActualCostCostDetailsMetricType = "ActualCost",
  /** Amortized cost data. */
  AmortizedCostCostDetailsMetricType = "AmortizedCost"
}

/**
 * Defines values for CostDetailsMetricType. \
 * {@link KnownCostDetailsMetricType} can be used interchangeably with CostDetailsMetricType,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **ActualCost**: Actual cost data. \
 * **AmortizedCost**: Amortized cost data.
 */
export type CostDetailsMetricType = string;

/** Known values of {@link CostDetailsStatusType} that the service accepts. */
export enum KnownCostDetailsStatusType {
  /** Operation is Completed. */
  CompletedCostDetailsStatusType = "Completed",
  /** Operation is Completed and no cost data found. */
  NoDataFoundCostDetailsStatusType = "NoDataFound",
  /** Operation Failed. */
  FailedCostDetailsStatusType = "Failed"
}

/**
 * Defines values for CostDetailsStatusType. \
 * {@link KnownCostDetailsStatusType} can be used interchangeably with CostDetailsStatusType,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **Completed**: Operation is Completed. \
 * **NoDataFound**: Operation is Completed and no cost data found. \
 * **Failed**: Operation Failed.
 */
export type CostDetailsStatusType = string;

/** Known values of {@link CostDetailsDataFormat} that the service accepts. */
export enum KnownCostDetailsDataFormat {
  /** Csv data format. */
  CsvCostDetailsDataFormat = "Csv"
}

/**
 * Defines values for CostDetailsDataFormat. \
 * {@link KnownCostDetailsDataFormat} can be used interchangeably with CostDetailsDataFormat,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **Csv**: Csv data format.
 */
export type CostDetailsDataFormat = string;

/** Known values of {@link GenerateDetailedCostReportMetricType} that the service accepts. */
export enum KnownGenerateDetailedCostReportMetricType {
  /** ActualCost */
  ActualCost = "ActualCost",
  /** AmortizedCost */
  AmortizedCost = "AmortizedCost"
}

/**
 * Defines values for GenerateDetailedCostReportMetricType. \
 * {@link KnownGenerateDetailedCostReportMetricType} can be used interchangeably with GenerateDetailedCostReportMetricType,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **ActualCost** \
 * **AmortizedCost**
 */
export type GenerateDetailedCostReportMetricType = string;

/** Known values of {@link ReportOperationStatusType} that the service accepts. */
export enum KnownReportOperationStatusType {
  /** InProgress */
  InProgress = "InProgress",
  /** Completed */
  Completed = "Completed",
  /** Failed */
  Failed = "Failed",
  /** Queued */
  Queued = "Queued",
  /** NoDataFound */
  NoDataFound = "NoDataFound",
  /** ReadyToDownload */
  ReadyToDownload = "ReadyToDownload",
  /** TimedOut */
  TimedOut = "TimedOut"
}

/**
 * Defines values for ReportOperationStatusType. \
 * {@link KnownReportOperationStatusType} can be used interchangeably with ReportOperationStatusType,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **InProgress** \
 * **Completed** \
 * **Failed** \
 * **Queued** \
 * **NoDataFound** \
 * **ReadyToDownload** \
 * **TimedOut**
 */
export type ReportOperationStatusType = string;

/** Known values of {@link FileFormat} that the service accepts. */
export enum KnownFileFormat {
  /** Csv */
  Csv = "Csv"
}

/**
 * Defines values for FileFormat. \
 * {@link KnownFileFormat} can be used interchangeably with FileFormat,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **Csv**
 */
export type FileFormat = string;

/** Known values of {@link ScheduleFrequency} that the service accepts. */
export enum KnownScheduleFrequency {
  /** Cost analysis data will be emailed every day. */
  Daily = "Daily",
  /** Cost analysis data will be emailed every week. */
  Weekly = "Weekly",
  /** Cost analysis data will be emailed every month. */
  Monthly = "Monthly"
}

/**
 * Defines values for ScheduleFrequency. \
 * {@link KnownScheduleFrequency} can be used interchangeably with ScheduleFrequency,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **Daily**: Cost analysis data will be emailed every day. \
 * **Weekly**: Cost analysis data will be emailed every week. \
 * **Monthly**: Cost analysis data will be emailed every month.
 */
export type ScheduleFrequency = string;

/** Known values of {@link DaysOfWeek} that the service accepts. */
export enum KnownDaysOfWeek {
  /** Monday */
  Monday = "Monday",
  /** Tuesday */
  Tuesday = "Tuesday",
  /** Wednesday */
  Wednesday = "Wednesday",
  /** Thursday */
  Thursday = "Thursday",
  /** Friday */
  Friday = "Friday",
  /** Saturday */
  Saturday = "Saturday",
  /** Sunday */
  Sunday = "Sunday"
}

/**
 * Defines values for DaysOfWeek. \
 * {@link KnownDaysOfWeek} can be used interchangeably with DaysOfWeek,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **Monday** \
 * **Tuesday** \
 * **Wednesday** \
 * **Thursday** \
 * **Friday** \
 * **Saturday** \
 * **Sunday**
 */
export type DaysOfWeek = string;

/** Known values of {@link WeeksOfMonth} that the service accepts. */
export enum KnownWeeksOfMonth {
  /** First */
  First = "First",
  /** Second */
  Second = "Second",
  /** Third */
  Third = "Third",
  /** Fourth */
  Fourth = "Fourth",
  /** Last */
  Last = "Last"
}

/**
 * Defines values for WeeksOfMonth. \
 * {@link KnownWeeksOfMonth} can be used interchangeably with WeeksOfMonth,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **First** \
 * **Second** \
 * **Third** \
 * **Fourth** \
 * **Last**
 */
export type WeeksOfMonth = string;

/** Known values of {@link ScheduledActionStatus} that the service accepts. */
export enum KnownScheduledActionStatus {
  /** Scheduled action is saved but will not be run. */
  Disabled = "Disabled",
  /** Scheduled action is saved and will be run. */
  Enabled = "Enabled",
  /** Scheduled action is expired. */
  Expired = "Expired"
}

/**
 * Defines values for ScheduledActionStatus. \
 * {@link KnownScheduledActionStatus} can be used interchangeably with ScheduledActionStatus,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **Disabled**: Scheduled action is saved but will not be run. \
 * **Enabled**: Scheduled action is saved and will be run. \
 * **Expired**: Scheduled action is expired.
 */
export type ScheduledActionStatus = string;

/** Known values of {@link ScheduledActionKind} that the service accepts. */
export enum KnownScheduledActionKind {
  /** Cost analysis data will be emailed. */
  Email = "Email",
  /** Cost anomaly information will be emailed. Available only on subscription scope at daily frequency. If no anomaly is detected on the resource, an email won't be sent. */
  InsightAlert = "InsightAlert"
}

/**
 * Defines values for ScheduledActionKind. \
 * {@link KnownScheduledActionKind} can be used interchangeably with ScheduledActionKind,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **Email**: Cost analysis data will be emailed. \
 * **InsightAlert**: Cost anomaly information will be emailed. Available only on subscription scope at daily frequency. If no anomaly is detected on the resource, an email won't be sent.
 */
export type ScheduledActionKind = string;

/** Known values of {@link CreatedByType} that the service accepts. */
export enum KnownCreatedByType {
  /** User */
  User = "User",
  /** Application */
  Application = "Application",
  /** ManagedIdentity */
  ManagedIdentity = "ManagedIdentity",
  /** Key */
  Key = "Key"
}

/**
 * Defines values for CreatedByType. \
 * {@link KnownCreatedByType} can be used interchangeably with CreatedByType,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **User** \
 * **Application** \
 * **ManagedIdentity** \
 * **Key**
 */
export type CreatedByType = string;

/** Known values of {@link CheckNameAvailabilityReason} that the service accepts. */
export enum KnownCheckNameAvailabilityReason {
  /** Invalid */
  Invalid = "Invalid",
  /** AlreadyExists */
  AlreadyExists = "AlreadyExists"
}

/**
 * Defines values for CheckNameAvailabilityReason. \
 * {@link KnownCheckNameAvailabilityReason} can be used interchangeably with CheckNameAvailabilityReason,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **Invalid** \
 * **AlreadyExists**
 */
export type CheckNameAvailabilityReason = string;

/** Known values of {@link LookBackPeriod} that the service accepts. */
export enum KnownLookBackPeriod {
  /** 7 days used to look back. */
  Last7Days = "Last7Days",
  /** 30 days used to look back. */
  Last30Days = "Last30Days",
  /** 60 days used to look back. */
  Last60Days = "Last60Days"
}

/**
 * Defines values for LookBackPeriod. \
 * {@link KnownLookBackPeriod} can be used interchangeably with LookBackPeriod,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **Last7Days**: 7 days used to look back. \
 * **Last30Days**: 30 days used to look back. \
 * **Last60Days**: 60 days used to look back.
 */
export type LookBackPeriod = string;

/** Known values of {@link Grain} that the service accepts. */
export enum KnownGrain {
  /** Hourly grain corresponds to value per hour. */
  Hourly = "Hourly",
  /** Hourly grain corresponds to value per day. */
  Daily = "Daily",
  /** Hourly grain corresponds to value per month. */
  Monthly = "Monthly"
}

/**
 * Defines values for Grain. \
 * {@link KnownGrain} can be used interchangeably with Grain,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **Hourly**: Hourly grain corresponds to value per hour. \
 * **Daily**: Hourly grain corresponds to value per day. \
 * **Monthly**: Hourly grain corresponds to value per month.
 */
export type Grain = string;

/** Known values of {@link Term} that the service accepts. */
export enum KnownTerm {
  /** Benefit term is 1 year. */
  P1Y = "P1Y",
  /** Benefit term is 3 years. */
  P3Y = "P3Y"
}

/**
 * Defines values for Term. \
 * {@link KnownTerm} can be used interchangeably with Term,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **P1Y**: Benefit term is 1 year. \
 * **P3Y**: Benefit term is 3 years.
 */
export type Term = string;

/** Known values of {@link Scope} that the service accepts. */
export enum KnownScope {
  /** Single scope recommendation. */
  Single = "Single",
  /** Shared scope recommendation. */
  Shared = "Shared"
}

/**
 * Defines values for Scope. \
 * {@link KnownScope} can be used interchangeably with Scope,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **Single**: Single scope recommendation. \
 * **Shared**: Shared scope recommendation.
 */
export type Scope = string;

/** Known values of {@link BenefitKind} that the service accepts. */
export enum KnownBenefitKind {
  /** Benefit is IncludedQuantity. */
  IncludedQuantity = "IncludedQuantity",
  /** Benefit is Reservation. */
  Reservation = "Reservation",
  /** Benefit is SavingsPlan. */
  SavingsPlan = "SavingsPlan"
}

/**
 * Defines values for BenefitKind. \
 * {@link KnownBenefitKind} can be used interchangeably with BenefitKind,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **IncludedQuantity**: Benefit is IncludedQuantity. \
 * **Reservation**: Benefit is Reservation. \
 * **SavingsPlan**: Benefit is SavingsPlan.
 */
export type BenefitKind = string;

/** Known values of {@link GrainParameter} that the service accepts. */
export enum KnownGrainParameter {
  /** Hourly grain corresponds to value per hour. */
  Hourly = "Hourly",
  /** Hourly grain corresponds to value per day. */
  Daily = "Daily",
  /** Hourly grain corresponds to value per month. */
  Monthly = "Monthly"
}

/**
 * Defines values for GrainParameter. \
 * {@link KnownGrainParameter} can be used interchangeably with GrainParameter,
 *  this enum contains the known values that the service supports.
 * ### Known values supported by the service
 * **Hourly**: Hourly grain corresponds to value per hour. \
 * **Daily**: Hourly grain corresponds to value per day. \
 * **Monthly**: Hourly grain corresponds to value per month.
 */
export type GrainParameter = string;

/** Optional parameters. */
export interface OperationsListOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the list operation. */
export type OperationsListResponse = OperationListResult;

/** Optional parameters. */
export interface OperationsListNextOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the listNext operation. */
export type OperationsListNextResponse = OperationListResult;

/** Optional parameters. */
export interface ViewsListOptionalParams extends coreClient.OperationOptions {}

/** Contains response data for the list operation. */
export type ViewsListResponse = ViewListResult;

/** Optional parameters. */
export interface ViewsListByScopeOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the listByScope operation. */
export type ViewsListByScopeResponse = ViewListResult;

/** Optional parameters. */
export interface ViewsGetOptionalParams extends coreClient.OperationOptions {}

/** Contains response data for the get operation. */
export type ViewsGetResponse = View;

/** Optional parameters. */
export interface ViewsCreateOrUpdateOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the createOrUpdate operation. */
export type ViewsCreateOrUpdateResponse = View;

/** Optional parameters. */
export interface ViewsDeleteOptionalParams
  extends coreClient.OperationOptions {}

/** Optional parameters. */
export interface ViewsGetByScopeOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the getByScope operation. */
export type ViewsGetByScopeResponse = View;

/** Optional parameters. */
export interface ViewsCreateOrUpdateByScopeOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the createOrUpdateByScope operation. */
export type ViewsCreateOrUpdateByScopeResponse = View;

/** Optional parameters. */
export interface ViewsDeleteByScopeOptionalParams
  extends coreClient.OperationOptions {}

/** Optional parameters. */
export interface ViewsListNextOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the listNext operation. */
export type ViewsListNextResponse = ViewListResult;

/** Optional parameters. */
export interface ViewsListByScopeNextOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the listByScopeNext operation. */
export type ViewsListByScopeNextResponse = ViewListResult;

/** Optional parameters. */
export interface AlertsListOptionalParams extends coreClient.OperationOptions {}

/** Contains response data for the list operation. */
export type AlertsListResponse = AlertsResult;

/** Optional parameters. */
export interface AlertsGetOptionalParams extends coreClient.OperationOptions {}

/** Contains response data for the get operation. */
export type AlertsGetResponse = Alert;

/** Optional parameters. */
export interface AlertsDismissOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the dismiss operation. */
export type AlertsDismissResponse = Alert;

/** Optional parameters. */
export interface AlertsListExternalOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the listExternal operation. */
export type AlertsListExternalResponse = AlertsResult;

/** Optional parameters. */
export interface ForecastUsageOptionalParams
  extends coreClient.OperationOptions {
  /** May be used to filter forecasts by properties/usageDate (Utc time), properties/chargeType or properties/grain. The filter supports 'eq', 'lt', 'gt', 'le', 'ge', and 'and'. It does not currently support 'ne', 'or', or 'not'. */
  filter?: string;
}

/** Contains response data for the usage operation. */
export type ForecastUsageResponse = ForecastResult;

/** Optional parameters. */
export interface ForecastExternalCloudProviderUsageOptionalParams
  extends coreClient.OperationOptions {
  /** May be used to filter forecasts by properties/usageDate (Utc time), properties/chargeType or properties/grain. The filter supports 'eq', 'lt', 'gt', 'le', 'ge', and 'and'. It does not currently support 'ne', 'or', or 'not'. */
  filter?: string;
}

/** Contains response data for the externalCloudProviderUsage operation. */
export type ForecastExternalCloudProviderUsageResponse = ForecastResult;

/** Optional parameters. */
export interface DimensionsListOptionalParams
  extends coreClient.OperationOptions {
  /** May be used to filter dimensions by properties/category, properties/usageStart, properties/usageEnd. Supported operators are 'eq','lt', 'gt', 'le', 'ge'. */
  filter?: string;
  /** May be used to expand the properties/data within a dimension category. By default, data is not included when listing dimensions. */
  expand?: string;
  /** Skiptoken is only used if a previous operation returned a partial result. If a previous response contains a nextLink element, the value of the nextLink element will include a skiptoken parameter that specifies a starting point to use for subsequent calls. */
  skiptoken?: string;
  /** May be used to limit the number of results to the most recent N dimension data. */
  top?: number;
}

/** Contains response data for the list operation. */
export type DimensionsListResponse = DimensionsListResult;

/** Optional parameters. */
export interface DimensionsByExternalCloudProviderTypeOptionalParams
  extends coreClient.OperationOptions {
  /** May be used to filter dimensions by properties/category, properties/usageStart, properties/usageEnd. Supported operators are 'eq','lt', 'gt', 'le', 'ge'. */
  filter?: string;
  /** May be used to expand the properties/data within a dimension category. By default, data is not included when listing dimensions. */
  expand?: string;
  /** Skiptoken is only used if a previous operation returned a partial result. If a previous response contains a nextLink element, the value of the nextLink element will include a skiptoken parameter that specifies a starting point to use for subsequent calls. */
  skiptoken?: string;
  /** May be used to limit the number of results to the most recent N dimension data. */
  top?: number;
}

/** Contains response data for the byExternalCloudProviderType operation. */
export type DimensionsByExternalCloudProviderTypeResponse = DimensionsListResult;

/** Optional parameters. */
export interface QueryUsageOptionalParams extends coreClient.OperationOptions {}

/** Contains response data for the usage operation. */
export type QueryUsageResponse = QueryResult;

/** Optional parameters. */
export interface QueryUsageByExternalCloudProviderTypeOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the usageByExternalCloudProviderType operation. */
export type QueryUsageByExternalCloudProviderTypeResponse = QueryResult;

/** Optional parameters. */
export interface GenerateReservationDetailsReportByBillingAccountIdOptionalParams
  extends coreClient.OperationOptions {
  /** Delay to wait until next poll, in milliseconds. */
  updateIntervalInMs?: number;
  /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */
  resumeFrom?: string;
}

/** Contains response data for the byBillingAccountId operation. */
export type GenerateReservationDetailsReportByBillingAccountIdResponse = OperationStatus;

/** Optional parameters. */
export interface GenerateReservationDetailsReportByBillingProfileIdOptionalParams
  extends coreClient.OperationOptions {
  /** Delay to wait until next poll, in milliseconds. */
  updateIntervalInMs?: number;
  /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */
  resumeFrom?: string;
}

/** Contains response data for the byBillingProfileId operation. */
export type GenerateReservationDetailsReportByBillingProfileIdResponse = OperationStatus;

/** Optional parameters. */
export interface ExportsListOptionalParams extends coreClient.OperationOptions {
  /** May be used to expand the properties within an export. Currently only 'runHistory' is supported and will return information for the last run of each export. */
  expand?: string;
}

/** Contains response data for the list operation. */
export type ExportsListResponse = ExportListResult;

/** Optional parameters. */
export interface ExportsGetOptionalParams extends coreClient.OperationOptions {
  /** May be used to expand the properties within an export. Currently only 'runHistory' is supported and will return information for the last 10 runs of the export. */
  expand?: string;
}

/** Contains response data for the get operation. */
export type ExportsGetResponse = Export;

/** Optional parameters. */
export interface ExportsCreateOrUpdateOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the createOrUpdate operation. */
export type ExportsCreateOrUpdateResponse = Export;

/** Optional parameters. */
export interface ExportsDeleteOptionalParams
  extends coreClient.OperationOptions {}

/** Optional parameters. */
export interface ExportsExecuteOptionalParams
  extends coreClient.OperationOptions {}

/** Optional parameters. */
export interface ExportsGetExecutionHistoryOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the getExecutionHistory operation. */
export type ExportsGetExecutionHistoryResponse = ExportExecutionListResult;

/** Optional parameters. */
export interface GenerateCostDetailsReportCreateOperationOptionalParams
  extends coreClient.OperationOptions {
  /** Delay to wait until next poll, in milliseconds. */
  updateIntervalInMs?: number;
  /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */
  resumeFrom?: string;
}

/** Contains response data for the createOperation operation. */
export type GenerateCostDetailsReportCreateOperationResponse = CostDetailsOperationResults;

/** Optional parameters. */
export interface GenerateCostDetailsReportGetOperationResultsOptionalParams
  extends coreClient.OperationOptions {
  /** Delay to wait until next poll, in milliseconds. */
  updateIntervalInMs?: number;
  /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */
  resumeFrom?: string;
}

/** Contains response data for the getOperationResults operation. */
export type GenerateCostDetailsReportGetOperationResultsResponse = CostDetailsOperationResults;

/** Optional parameters. */
export interface GenerateDetailedCostReportCreateOperationOptionalParams
  extends coreClient.OperationOptions {
  /** Delay to wait until next poll, in milliseconds. */
  updateIntervalInMs?: number;
  /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */
  resumeFrom?: string;
}

/** Contains response data for the createOperation operation. */
export type GenerateDetailedCostReportCreateOperationResponse = GenerateDetailedCostReportOperationResult;

/** Optional parameters. */
export interface GenerateDetailedCostReportOperationResultsGetOptionalParams
  extends coreClient.OperationOptions {
  /** Delay to wait until next poll, in milliseconds. */
  updateIntervalInMs?: number;
  /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */
  resumeFrom?: string;
}

/** Contains response data for the get operation. */
export type GenerateDetailedCostReportOperationResultsGetResponse = GenerateDetailedCostReportOperationResult;

/** Optional parameters. */
export interface GenerateDetailedCostReportOperationStatusGetOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the get operation. */
export type GenerateDetailedCostReportOperationStatusGetResponse = GenerateDetailedCostReportOperationStatuses;

/** Optional parameters. */
export interface PriceSheetDownloadOptionalParams
  extends coreClient.OperationOptions {
  /** Delay to wait until next poll, in milliseconds. */
  updateIntervalInMs?: number;
  /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */
  resumeFrom?: string;
}

/** Contains response data for the download operation. */
export type PriceSheetDownloadResponse = DownloadURL;

/** Optional parameters. */
export interface PriceSheetDownloadByBillingProfileOptionalParams
  extends coreClient.OperationOptions {
  /** Delay to wait until next poll, in milliseconds. */
  updateIntervalInMs?: number;
  /** A serialized poller which can be used to resume an existing paused Long-Running-Operation. */
  resumeFrom?: string;
}

/** Contains response data for the downloadByBillingProfile operation. */
export type PriceSheetDownloadByBillingProfileResponse = DownloadURL;

/** Optional parameters. */
export interface ScheduledActionsListOptionalParams
  extends coreClient.OperationOptions {
  /** May be used to filter scheduled actions by properties/viewId. Supported operator is 'eq'. */
  filter?: string;
}

/** Contains response data for the list operation. */
export type ScheduledActionsListResponse = ScheduledActionListResult;

/** Optional parameters. */
export interface ScheduledActionsListByScopeOptionalParams
  extends coreClient.OperationOptions {
  /** May be used to filter scheduled actions by properties/viewId. Supported operator is 'eq'. */
  filter?: string;
}

/** Contains response data for the listByScope operation. */
export type ScheduledActionsListByScopeResponse = ScheduledActionListResult;

/** Optional parameters. */
export interface ScheduledActionsCreateOrUpdateOptionalParams
  extends coreClient.OperationOptions {
  /** ETag of the Entity. Not required when creating an entity. Optional when updating an entity and can be specified to achieve optimistic concurrency. */
  ifMatch?: string;
}

/** Contains response data for the createOrUpdate operation. */
export type ScheduledActionsCreateOrUpdateResponse = ScheduledAction;

/** Optional parameters. */
export interface ScheduledActionsGetOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the get operation. */
export type ScheduledActionsGetResponse = ScheduledAction;

/** Optional parameters. */
export interface ScheduledActionsDeleteOptionalParams
  extends coreClient.OperationOptions {}

/** Optional parameters. */
export interface ScheduledActionsCreateOrUpdateByScopeOptionalParams
  extends coreClient.OperationOptions {
  /** ETag of the Entity. Not required when creating an entity. Optional when updating an entity and can be specified to achieve optimistic concurrency. */
  ifMatch?: string;
}

/** Contains response data for the createOrUpdateByScope operation. */
export type ScheduledActionsCreateOrUpdateByScopeResponse = ScheduledAction;

/** Optional parameters. */
export interface ScheduledActionsGetByScopeOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the getByScope operation. */
export type ScheduledActionsGetByScopeResponse = ScheduledAction;

/** Optional parameters. */
export interface ScheduledActionsDeleteByScopeOptionalParams
  extends coreClient.OperationOptions {}

/** Optional parameters. */
export interface ScheduledActionsRunOptionalParams
  extends coreClient.OperationOptions {}

/** Optional parameters. */
export interface ScheduledActionsRunByScopeOptionalParams
  extends coreClient.OperationOptions {}

/** Optional parameters. */
export interface ScheduledActionsCheckNameAvailabilityOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the checkNameAvailability operation. */
export type ScheduledActionsCheckNameAvailabilityResponse = CheckNameAvailabilityResponse;

/** Optional parameters. */
export interface ScheduledActionsCheckNameAvailabilityByScopeOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the checkNameAvailabilityByScope operation. */
export type ScheduledActionsCheckNameAvailabilityByScopeResponse = CheckNameAvailabilityResponse;

/** Optional parameters. */
export interface ScheduledActionsListNextOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the listNext operation. */
export type ScheduledActionsListNextResponse = ScheduledActionListResult;

/** Optional parameters. */
export interface ScheduledActionsListByScopeNextOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the listByScopeNext operation. */
export type ScheduledActionsListByScopeNextResponse = ScheduledActionListResult;

/** Optional parameters. */
export interface BenefitRecommendationsListOptionalParams
  extends coreClient.OperationOptions {
  /** Can be used to filter benefitRecommendations by: properties/scope with allowed values ['Single', 'Shared'] and default value 'Shared'; and properties/lookBackPeriod with allowed values ['Last7Days', 'Last30Days', 'Last60Days'] and default value 'Last60Days'; properties/term with allowed values ['P1Y', 'P3Y'] and default value 'P3Y'; properties/subscriptionId; properties/resourceGroup */
  filter?: string;
  /** May be used to expand the properties by: properties/usage, properties/allRecommendationDetails */
  expand?: string;
  /** May be used to order the recommendations by: properties/armSkuName. For the savings plan, the results are in order by default. There is no need to use this clause. */
  orderby?: string;
}

/** Contains response data for the list operation. */
export type BenefitRecommendationsListResponse = BenefitRecommendationsListResult;

/** Optional parameters. */
export interface BenefitRecommendationsListNextOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the listNext operation. */
export type BenefitRecommendationsListNextResponse = BenefitRecommendationsListResult;

/** Optional parameters. */
export interface BenefitUtilizationSummariesListByBillingAccountIdOptionalParams
  extends coreClient.OperationOptions {
  /** Grain. */
  grainParameter?: GrainParameter;
  /** Supports filtering by properties/benefitId, properties/benefitOrderId and properties/usageDate. */
  filter?: string;
}

/** Contains response data for the listByBillingAccountId operation. */
export type BenefitUtilizationSummariesListByBillingAccountIdResponse = BenefitUtilizationSummariesListResult;

/** Optional parameters. */
export interface BenefitUtilizationSummariesListByBillingProfileIdOptionalParams
  extends coreClient.OperationOptions {
  /** Grain. */
  grainParameter?: GrainParameter;
  /** Supports filtering by properties/benefitId, properties/benefitOrderId and properties/usageDate. */
  filter?: string;
}

/** Contains response data for the listByBillingProfileId operation. */
export type BenefitUtilizationSummariesListByBillingProfileIdResponse = BenefitUtilizationSummariesListResult;

/** Optional parameters. */
export interface BenefitUtilizationSummariesListBySavingsPlanOrderOptionalParams
  extends coreClient.OperationOptions {
  /** Supports filtering by properties/usageDate. */
  filter?: string;
  /** Grain. */
  grainParameter?: GrainParameter;
}

/** Contains response data for the listBySavingsPlanOrder operation. */
export type BenefitUtilizationSummariesListBySavingsPlanOrderResponse = BenefitUtilizationSummariesListResult;

/** Optional parameters. */
export interface BenefitUtilizationSummariesListBySavingsPlanIdOptionalParams
  extends coreClient.OperationOptions {
  /** Supports filtering by properties/usageDate. */
  filter?: string;
  /** Grain. */
  grainParameter?: GrainParameter;
}

/** Contains response data for the listBySavingsPlanId operation. */
export type BenefitUtilizationSummariesListBySavingsPlanIdResponse = BenefitUtilizationSummariesListResult;

/** Optional parameters. */
export interface BenefitUtilizationSummariesListByBillingAccountIdNextOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the listByBillingAccountIdNext operation. */
export type BenefitUtilizationSummariesListByBillingAccountIdNextResponse = BenefitUtilizationSummariesListResult;

/** Optional parameters. */
export interface BenefitUtilizationSummariesListByBillingProfileIdNextOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the listByBillingProfileIdNext operation. */
export type BenefitUtilizationSummariesListByBillingProfileIdNextResponse = BenefitUtilizationSummariesListResult;

/** Optional parameters. */
export interface BenefitUtilizationSummariesListBySavingsPlanOrderNextOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the listBySavingsPlanOrderNext operation. */
export type BenefitUtilizationSummariesListBySavingsPlanOrderNextResponse = BenefitUtilizationSummariesListResult;

/** Optional parameters. */
export interface BenefitUtilizationSummariesListBySavingsPlanIdNextOptionalParams
  extends coreClient.OperationOptions {}

/** Contains response data for the listBySavingsPlanIdNext operation. */
export type BenefitUtilizationSummariesListBySavingsPlanIdNextResponse = BenefitUtilizationSummariesListResult;

/** Optional parameters. */
export interface CostManagementClientOptionalParams
  extends coreClient.ServiceClientOptions {
  /** server parameter */
  $host?: string;
  /** Api Version */
  apiVersion?: string;
  /** Overrides client endpoint. */
  endpoint?: string;
}
