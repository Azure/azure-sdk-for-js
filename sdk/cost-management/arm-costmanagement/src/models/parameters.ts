/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */

import {
  OperationParameter,
  OperationURLParameter,
  OperationQueryParameter
} from "@azure/core-client";
import {
  View as ViewMapper,
  DismissAlertPayload as DismissAlertPayloadMapper,
  ForecastDefinition as ForecastDefinitionMapper,
  QueryDefinition as QueryDefinitionMapper,
  Export as ExportMapper,
  GenerateCostDetailsReportRequestDefinition as GenerateCostDetailsReportRequestDefinitionMapper,
  GenerateDetailedCostReportDefinition as GenerateDetailedCostReportDefinitionMapper,
  ScheduledAction as ScheduledActionMapper,
  CheckNameAvailabilityRequest as CheckNameAvailabilityRequestMapper
} from "../models/mappers";

export const accept: OperationParameter = {
  parameterPath: "accept",
  mapper: {
    defaultValue: "application/json",
    isConstant: true,
    serializedName: "Accept",
    type: {
      name: "String"
    }
  }
};

export const $host: OperationURLParameter = {
  parameterPath: "$host",
  mapper: {
    serializedName: "$host",
    required: true,
    type: {
      name: "String"
    }
  },
  skipEncoding: true
};

export const apiVersion: OperationQueryParameter = {
  parameterPath: "apiVersion",
  mapper: {
    defaultValue: "2022-10-01",
    isConstant: true,
    serializedName: "api-version",
    type: {
      name: "String"
    }
  }
};

export const nextLink: OperationURLParameter = {
  parameterPath: "nextLink",
  mapper: {
    serializedName: "nextLink",
    required: true,
    type: {
      name: "String"
    }
  },
  skipEncoding: true
};

export const scope: OperationURLParameter = {
  parameterPath: "scope",
  mapper: {
    serializedName: "scope",
    required: true,
    type: {
      name: "String"
    }
  }
};

export const viewName: OperationURLParameter = {
  parameterPath: "viewName",
  mapper: {
    serializedName: "viewName",
    required: true,
    type: {
      name: "String"
    }
  }
};

export const contentType: OperationParameter = {
  parameterPath: ["options", "contentType"],
  mapper: {
    defaultValue: "application/json",
    isConstant: true,
    serializedName: "Content-Type",
    type: {
      name: "String"
    }
  }
};

export const parameters: OperationParameter = {
  parameterPath: "parameters",
  mapper: ViewMapper
};

export const scope1: OperationURLParameter = {
  parameterPath: "scope",
  mapper: {
    serializedName: "scope",
    required: true,
    type: {
      name: "String"
    }
  },
  skipEncoding: true
};

export const alertId: OperationURLParameter = {
  parameterPath: "alertId",
  mapper: {
    serializedName: "alertId",
    required: true,
    type: {
      name: "String"
    }
  },
  skipEncoding: true
};

export const parameters1: OperationParameter = {
  parameterPath: "parameters",
  mapper: DismissAlertPayloadMapper
};

export const externalCloudProviderType: OperationURLParameter = {
  parameterPath: "externalCloudProviderType",
  mapper: {
    serializedName: "externalCloudProviderType",
    required: true,
    type: {
      name: "String"
    }
  }
};

export const externalCloudProviderId: OperationURLParameter = {
  parameterPath: "externalCloudProviderId",
  mapper: {
    serializedName: "externalCloudProviderId",
    required: true,
    type: {
      name: "String"
    }
  }
};

export const parameters2: OperationParameter = {
  parameterPath: "parameters",
  mapper: ForecastDefinitionMapper
};

export const filter: OperationQueryParameter = {
  parameterPath: ["options", "filter"],
  mapper: {
    serializedName: "$filter",
    type: {
      name: "String"
    }
  }
};

export const expand: OperationQueryParameter = {
  parameterPath: ["options", "expand"],
  mapper: {
    serializedName: "$expand",
    type: {
      name: "String"
    }
  }
};

export const skiptoken: OperationQueryParameter = {
  parameterPath: ["options", "skiptoken"],
  mapper: {
    serializedName: "$skiptoken",
    type: {
      name: "String"
    }
  }
};

export const top: OperationQueryParameter = {
  parameterPath: ["options", "top"],
  mapper: {
    constraints: {
      InclusiveMaximum: 1000,
      InclusiveMinimum: 1
    },
    serializedName: "$top",
    type: {
      name: "Number"
    }
  }
};

export const parameters3: OperationParameter = {
  parameterPath: "parameters",
  mapper: QueryDefinitionMapper
};

export const billingAccountId: OperationURLParameter = {
  parameterPath: "billingAccountId",
  mapper: {
    serializedName: "billingAccountId",
    required: true,
    type: {
      name: "String"
    }
  }
};

export const startDate: OperationQueryParameter = {
  parameterPath: "startDate",
  mapper: {
    serializedName: "startDate",
    required: true,
    type: {
      name: "String"
    }
  }
};

export const endDate: OperationQueryParameter = {
  parameterPath: "endDate",
  mapper: {
    serializedName: "endDate",
    required: true,
    type: {
      name: "String"
    }
  }
};

export const billingProfileId: OperationURLParameter = {
  parameterPath: "billingProfileId",
  mapper: {
    serializedName: "billingProfileId",
    required: true,
    type: {
      name: "String"
    }
  }
};

export const exportName: OperationURLParameter = {
  parameterPath: "exportName",
  mapper: {
    serializedName: "exportName",
    required: true,
    type: {
      name: "String"
    }
  }
};

export const parameters4: OperationParameter = {
  parameterPath: "parameters",
  mapper: ExportMapper
};

export const parameters5: OperationParameter = {
  parameterPath: "parameters",
  mapper: GenerateCostDetailsReportRequestDefinitionMapper
};

export const operationId: OperationURLParameter = {
  parameterPath: "operationId",
  mapper: {
    serializedName: "operationId",
    required: true,
    type: {
      name: "String"
    }
  }
};

export const parameters6: OperationParameter = {
  parameterPath: "parameters",
  mapper: GenerateDetailedCostReportDefinitionMapper
};

export const billingAccountName: OperationURLParameter = {
  parameterPath: "billingAccountName",
  mapper: {
    constraints: {
      Pattern: new RegExp(
        "([A-Za-z0-9]+(-[A-Za-z0-9]+)+):([A-Za-z0-9]+(-[A-Za-z0-9]+)+)_[0-9]{4}-[0-9]{2}-[0-9]{2}"
      )
    },
    serializedName: "billingAccountName",
    required: true,
    type: {
      name: "String"
    }
  }
};

export const billingProfileName: OperationURLParameter = {
  parameterPath: "billingProfileName",
  mapper: {
    constraints: {
      Pattern: new RegExp("([A-Za-z0-9]+(-[A-Za-z0-9]+)+)")
    },
    serializedName: "billingProfileName",
    required: true,
    type: {
      name: "String"
    }
  }
};

export const invoiceName: OperationURLParameter = {
  parameterPath: "invoiceName",
  mapper: {
    constraints: {
      Pattern: new RegExp("[A-Za-z0-9]+")
    },
    serializedName: "invoiceName",
    required: true,
    type: {
      name: "String"
    }
  }
};

export const scheduledAction: OperationParameter = {
  parameterPath: "scheduledAction",
  mapper: ScheduledActionMapper
};

export const name: OperationURLParameter = {
  parameterPath: "name",
  mapper: {
    serializedName: "name",
    required: true,
    type: {
      name: "String"
    }
  }
};

export const ifMatch: OperationParameter = {
  parameterPath: ["options", "ifMatch"],
  mapper: {
    serializedName: "If-Match",
    type: {
      name: "String"
    }
  }
};

export const checkNameAvailabilityRequest: OperationParameter = {
  parameterPath: "checkNameAvailabilityRequest",
  mapper: CheckNameAvailabilityRequestMapper
};

export const orderby: OperationQueryParameter = {
  parameterPath: ["options", "orderby"],
  mapper: {
    serializedName: "$orderby",
    type: {
      name: "String"
    }
  }
};

export const billingScope: OperationURLParameter = {
  parameterPath: "billingScope",
  mapper: {
    serializedName: "billingScope",
    required: true,
    type: {
      name: "String"
    }
  },
  skipEncoding: true
};

export const grainParameter: OperationQueryParameter = {
  parameterPath: ["options", "grainParameter"],
  mapper: {
    serializedName: "grainParameter",
    type: {
      name: "String"
    }
  }
};

export const filter1: OperationQueryParameter = {
  parameterPath: ["options", "filter"],
  mapper: {
    serializedName: "filter",
    type: {
      name: "String"
    }
  }
};

export const savingsPlanOrderId: OperationURLParameter = {
  parameterPath: "savingsPlanOrderId",
  mapper: {
    serializedName: "savingsPlanOrderId",
    required: true,
    type: {
      name: "String"
    }
  }
};

export const savingsPlanId: OperationURLParameter = {
  parameterPath: "savingsPlanId",
  mapper: {
    serializedName: "savingsPlanId",
    required: true,
    type: {
      name: "String"
    }
  }
};
