/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */

import * as coreClient from "@azure/core-client";

export const OperationListResult: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "OperationListResult",
    modelProperties: {
      value: {
        serializedName: "value",
        readOnly: true,
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "CostManagementOperation"
            }
          }
        }
      },
      nextLink: {
        serializedName: "nextLink",
        readOnly: true,
        type: {
          name: "String"
        }
      }
    }
  }
};

export const Operation: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "Operation",
    modelProperties: {
      name: {
        serializedName: "name",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      isDataAction: {
        serializedName: "isDataAction",
        readOnly: true,
        type: {
          name: "Boolean"
        }
      },
      display: {
        serializedName: "display",
        type: {
          name: "Composite",
          className: "OperationDisplay"
        }
      },
      origin: {
        serializedName: "origin",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      actionType: {
        serializedName: "actionType",
        readOnly: true,
        type: {
          name: "String"
        }
      }
    }
  }
};

export const OperationDisplay: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "OperationDisplay",
    modelProperties: {
      provider: {
        serializedName: "provider",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      resource: {
        serializedName: "resource",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      operation: {
        serializedName: "operation",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      description: {
        serializedName: "description",
        readOnly: true,
        type: {
          name: "String"
        }
      }
    }
  }
};

export const ErrorResponse: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "ErrorResponse",
    modelProperties: {
      error: {
        serializedName: "error",
        type: {
          name: "Composite",
          className: "ErrorDetails"
        }
      }
    }
  }
};

export const ErrorDetails: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "ErrorDetails",
    modelProperties: {
      code: {
        serializedName: "code",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      message: {
        serializedName: "message",
        readOnly: true,
        type: {
          name: "String"
        }
      }
    }
  }
};

export const ViewListResult: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "ViewListResult",
    modelProperties: {
      value: {
        serializedName: "value",
        readOnly: true,
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "View"
            }
          }
        }
      },
      nextLink: {
        serializedName: "nextLink",
        readOnly: true,
        type: {
          name: "String"
        }
      }
    }
  }
};

export const ReportConfigTimePeriod: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "ReportConfigTimePeriod",
    modelProperties: {
      from: {
        serializedName: "from",
        required: true,
        type: {
          name: "DateTime"
        }
      },
      to: {
        serializedName: "to",
        required: true,
        type: {
          name: "DateTime"
        }
      }
    }
  }
};

export const ReportConfigDataset: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "ReportConfigDataset",
    modelProperties: {
      granularity: {
        serializedName: "granularity",
        type: {
          name: "String"
        }
      },
      configuration: {
        serializedName: "configuration",
        type: {
          name: "Composite",
          className: "ReportConfigDatasetConfiguration"
        }
      },
      aggregation: {
        serializedName: "aggregation",
        type: {
          name: "Dictionary",
          value: {
            type: { name: "Composite", className: "ReportConfigAggregation" }
          }
        }
      },
      grouping: {
        constraints: {
          MaxItems: 2
        },
        serializedName: "grouping",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "ReportConfigGrouping"
            }
          }
        }
      },
      sorting: {
        serializedName: "sorting",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "ReportConfigSorting"
            }
          }
        }
      },
      filter: {
        serializedName: "filter",
        type: {
          name: "Composite",
          className: "ReportConfigFilter"
        }
      }
    }
  }
};

export const ReportConfigDatasetConfiguration: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "ReportConfigDatasetConfiguration",
    modelProperties: {
      columns: {
        serializedName: "columns",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "String"
            }
          }
        }
      }
    }
  }
};

export const ReportConfigAggregation: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "ReportConfigAggregation",
    modelProperties: {
      name: {
        serializedName: "name",
        required: true,
        type: {
          name: "String"
        }
      },
      function: {
        serializedName: "function",
        required: true,
        type: {
          name: "String"
        }
      }
    }
  }
};

export const ReportConfigGrouping: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "ReportConfigGrouping",
    modelProperties: {
      type: {
        serializedName: "type",
        required: true,
        type: {
          name: "String"
        }
      },
      name: {
        serializedName: "name",
        required: true,
        type: {
          name: "String"
        }
      }
    }
  }
};

export const ReportConfigSorting: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "ReportConfigSorting",
    modelProperties: {
      direction: {
        serializedName: "direction",
        type: {
          name: "String"
        }
      },
      name: {
        serializedName: "name",
        required: true,
        type: {
          name: "String"
        }
      }
    }
  }
};

export const ReportConfigFilter: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "ReportConfigFilter",
    modelProperties: {
      and: {
        constraints: {
          MinItems: 2
        },
        serializedName: "and",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "ReportConfigFilter"
            }
          }
        }
      },
      or: {
        constraints: {
          MinItems: 2
        },
        serializedName: "or",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "ReportConfigFilter"
            }
          }
        }
      },
      dimensions: {
        serializedName: "dimensions",
        type: {
          name: "Composite",
          className: "ReportConfigComparisonExpression"
        }
      },
      tags: {
        serializedName: "tags",
        type: {
          name: "Composite",
          className: "ReportConfigComparisonExpression"
        }
      }
    }
  }
};

export const ReportConfigComparisonExpression: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "ReportConfigComparisonExpression",
    modelProperties: {
      name: {
        serializedName: "name",
        required: true,
        type: {
          name: "String"
        }
      },
      operator: {
        serializedName: "operator",
        required: true,
        type: {
          name: "String"
        }
      },
      values: {
        constraints: {
          MinItems: 1
        },
        serializedName: "values",
        required: true,
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "String"
            }
          }
        }
      }
    }
  }
};

export const KpiProperties: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "KpiProperties",
    modelProperties: {
      type: {
        serializedName: "type",
        type: {
          name: "String"
        }
      },
      id: {
        serializedName: "id",
        type: {
          name: "String"
        }
      },
      enabled: {
        serializedName: "enabled",
        type: {
          name: "Boolean"
        }
      }
    }
  }
};

export const PivotProperties: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "PivotProperties",
    modelProperties: {
      type: {
        serializedName: "type",
        type: {
          name: "String"
        }
      },
      name: {
        serializedName: "name",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const CostManagementProxyResource: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "CostManagementProxyResource",
    modelProperties: {
      id: {
        serializedName: "id",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      name: {
        serializedName: "name",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      type: {
        serializedName: "type",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      eTag: {
        serializedName: "eTag",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const AlertsResult: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "AlertsResult",
    modelProperties: {
      value: {
        serializedName: "value",
        readOnly: true,
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "Alert"
            }
          }
        }
      },
      nextLink: {
        serializedName: "nextLink",
        readOnly: true,
        type: {
          name: "String"
        }
      }
    }
  }
};

export const AlertPropertiesDefinition: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "AlertPropertiesDefinition",
    modelProperties: {
      type: {
        serializedName: "type",
        type: {
          name: "String"
        }
      },
      category: {
        serializedName: "category",
        type: {
          name: "String"
        }
      },
      criteria: {
        serializedName: "criteria",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const AlertPropertiesDetails: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "AlertPropertiesDetails",
    modelProperties: {
      timeGrainType: {
        serializedName: "timeGrainType",
        type: {
          name: "String"
        }
      },
      periodStartDate: {
        serializedName: "periodStartDate",
        type: {
          name: "String"
        }
      },
      triggeredBy: {
        serializedName: "triggeredBy",
        type: {
          name: "String"
        }
      },
      resourceGroupFilter: {
        serializedName: "resourceGroupFilter",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "any"
            }
          }
        }
      },
      resourceFilter: {
        serializedName: "resourceFilter",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "any"
            }
          }
        }
      },
      meterFilter: {
        serializedName: "meterFilter",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "any"
            }
          }
        }
      },
      tagFilter: {
        serializedName: "tagFilter",
        type: {
          name: "Dictionary",
          value: { type: { name: "any" } }
        }
      },
      threshold: {
        serializedName: "threshold",
        type: {
          name: "Number"
        }
      },
      operator: {
        serializedName: "operator",
        type: {
          name: "String"
        }
      },
      amount: {
        serializedName: "amount",
        type: {
          name: "Number"
        }
      },
      unit: {
        serializedName: "unit",
        type: {
          name: "String"
        }
      },
      currentSpend: {
        serializedName: "currentSpend",
        type: {
          name: "Number"
        }
      },
      contactEmails: {
        serializedName: "contactEmails",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "String"
            }
          }
        }
      },
      contactGroups: {
        serializedName: "contactGroups",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "String"
            }
          }
        }
      },
      contactRoles: {
        serializedName: "contactRoles",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "String"
            }
          }
        }
      },
      overridingAlert: {
        serializedName: "overridingAlert",
        type: {
          name: "String"
        }
      },
      departmentName: {
        serializedName: "departmentName",
        type: {
          name: "String"
        }
      },
      companyName: {
        serializedName: "companyName",
        type: {
          name: "String"
        }
      },
      enrollmentNumber: {
        serializedName: "enrollmentNumber",
        type: {
          name: "String"
        }
      },
      enrollmentStartDate: {
        serializedName: "enrollmentStartDate",
        type: {
          name: "String"
        }
      },
      enrollmentEndDate: {
        serializedName: "enrollmentEndDate",
        type: {
          name: "String"
        }
      },
      invoicingThreshold: {
        serializedName: "invoicingThreshold",
        type: {
          name: "Number"
        }
      }
    }
  }
};

export const DismissAlertPayload: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "DismissAlertPayload",
    modelProperties: {
      definition: {
        serializedName: "properties.definition",
        type: {
          name: "Composite",
          className: "AlertPropertiesDefinition"
        }
      },
      description: {
        serializedName: "properties.description",
        type: {
          name: "String"
        }
      },
      source: {
        serializedName: "properties.source",
        type: {
          name: "String"
        }
      },
      details: {
        serializedName: "properties.details",
        type: {
          name: "Composite",
          className: "AlertPropertiesDetails"
        }
      },
      costEntityId: {
        serializedName: "properties.costEntityId",
        type: {
          name: "String"
        }
      },
      status: {
        serializedName: "properties.status",
        type: {
          name: "String"
        }
      },
      creationTime: {
        serializedName: "properties.creationTime",
        type: {
          name: "String"
        }
      },
      closeTime: {
        serializedName: "properties.closeTime",
        type: {
          name: "String"
        }
      },
      modificationTime: {
        serializedName: "properties.modificationTime",
        type: {
          name: "String"
        }
      },
      statusModificationUserName: {
        serializedName: "properties.statusModificationUserName",
        type: {
          name: "String"
        }
      },
      statusModificationTime: {
        serializedName: "properties.statusModificationTime",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const ForecastDefinition: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "ForecastDefinition",
    modelProperties: {
      type: {
        serializedName: "type",
        required: true,
        type: {
          name: "String"
        }
      },
      timeframe: {
        serializedName: "timeframe",
        required: true,
        type: {
          name: "String"
        }
      },
      timePeriod: {
        serializedName: "timePeriod",
        type: {
          name: "Composite",
          className: "ForecastTimePeriod"
        }
      },
      dataset: {
        serializedName: "dataset",
        type: {
          name: "Composite",
          className: "ForecastDataset"
        }
      },
      includeActualCost: {
        serializedName: "includeActualCost",
        type: {
          name: "Boolean"
        }
      },
      includeFreshPartialCost: {
        serializedName: "includeFreshPartialCost",
        type: {
          name: "Boolean"
        }
      }
    }
  }
};

export const ForecastTimePeriod: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "ForecastTimePeriod",
    modelProperties: {
      from: {
        serializedName: "from",
        required: true,
        type: {
          name: "DateTime"
        }
      },
      to: {
        serializedName: "to",
        required: true,
        type: {
          name: "DateTime"
        }
      }
    }
  }
};

export const ForecastDataset: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "ForecastDataset",
    modelProperties: {
      granularity: {
        serializedName: "granularity",
        type: {
          name: "String"
        }
      },
      configuration: {
        serializedName: "configuration",
        type: {
          name: "Composite",
          className: "ForecastDatasetConfiguration"
        }
      },
      aggregation: {
        serializedName: "aggregation",
        required: true,
        type: {
          name: "Dictionary",
          value: {
            type: { name: "Composite", className: "ForecastAggregation" }
          }
        }
      },
      filter: {
        serializedName: "filter",
        type: {
          name: "Composite",
          className: "ForecastFilter"
        }
      }
    }
  }
};

export const ForecastDatasetConfiguration: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "ForecastDatasetConfiguration",
    modelProperties: {
      columns: {
        serializedName: "columns",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "String"
            }
          }
        }
      }
    }
  }
};

export const ForecastAggregation: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "ForecastAggregation",
    modelProperties: {
      name: {
        serializedName: "name",
        required: true,
        type: {
          name: "String"
        }
      },
      function: {
        serializedName: "function",
        required: true,
        type: {
          name: "String"
        }
      }
    }
  }
};

export const ForecastFilter: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "ForecastFilter",
    modelProperties: {
      and: {
        constraints: {
          MinItems: 2
        },
        serializedName: "and",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "ForecastFilter"
            }
          }
        }
      },
      or: {
        constraints: {
          MinItems: 2
        },
        serializedName: "or",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "ForecastFilter"
            }
          }
        }
      },
      dimensions: {
        serializedName: "dimensions",
        type: {
          name: "Composite",
          className: "ForecastComparisonExpression"
        }
      },
      tags: {
        serializedName: "tags",
        type: {
          name: "Composite",
          className: "ForecastComparisonExpression"
        }
      }
    }
  }
};

export const ForecastComparisonExpression: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "ForecastComparisonExpression",
    modelProperties: {
      name: {
        serializedName: "name",
        required: true,
        type: {
          name: "String"
        }
      },
      operator: {
        serializedName: "operator",
        required: true,
        type: {
          name: "String"
        }
      },
      values: {
        constraints: {
          MinItems: 1
        },
        serializedName: "values",
        required: true,
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "String"
            }
          }
        }
      }
    }
  }
};

export const ForecastColumn: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "ForecastColumn",
    modelProperties: {
      name: {
        serializedName: "name",
        type: {
          name: "String"
        }
      },
      type: {
        serializedName: "type",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const CostManagementResource: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "CostManagementResource",
    modelProperties: {
      id: {
        serializedName: "id",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      name: {
        serializedName: "name",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      type: {
        serializedName: "type",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      location: {
        serializedName: "location",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      sku: {
        serializedName: "sku",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      eTag: {
        serializedName: "eTag",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      tags: {
        serializedName: "tags",
        readOnly: true,
        type: {
          name: "Dictionary",
          value: { type: { name: "String" } }
        }
      }
    }
  }
};

export const DimensionsListResult: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "DimensionsListResult",
    modelProperties: {
      value: {
        serializedName: "value",
        readOnly: true,
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "Dimension"
            }
          }
        }
      }
    }
  }
};

export const QueryDefinition: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "QueryDefinition",
    modelProperties: {
      type: {
        serializedName: "type",
        required: true,
        type: {
          name: "String"
        }
      },
      timeframe: {
        serializedName: "timeframe",
        required: true,
        type: {
          name: "String"
        }
      },
      timePeriod: {
        serializedName: "timePeriod",
        type: {
          name: "Composite",
          className: "QueryTimePeriod"
        }
      },
      dataset: {
        serializedName: "dataset",
        type: {
          name: "Composite",
          className: "QueryDataset"
        }
      }
    }
  }
};

export const QueryTimePeriod: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "QueryTimePeriod",
    modelProperties: {
      from: {
        serializedName: "from",
        required: true,
        type: {
          name: "DateTime"
        }
      },
      to: {
        serializedName: "to",
        required: true,
        type: {
          name: "DateTime"
        }
      }
    }
  }
};

export const QueryDataset: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "QueryDataset",
    modelProperties: {
      granularity: {
        serializedName: "granularity",
        type: {
          name: "String"
        }
      },
      configuration: {
        serializedName: "configuration",
        type: {
          name: "Composite",
          className: "QueryDatasetConfiguration"
        }
      },
      aggregation: {
        serializedName: "aggregation",
        type: {
          name: "Dictionary",
          value: { type: { name: "Composite", className: "QueryAggregation" } }
        }
      },
      grouping: {
        constraints: {
          MaxItems: 2
        },
        serializedName: "grouping",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "QueryGrouping"
            }
          }
        }
      },
      filter: {
        serializedName: "filter",
        type: {
          name: "Composite",
          className: "QueryFilter"
        }
      }
    }
  }
};

export const QueryDatasetConfiguration: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "QueryDatasetConfiguration",
    modelProperties: {
      columns: {
        serializedName: "columns",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "String"
            }
          }
        }
      }
    }
  }
};

export const QueryAggregation: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "QueryAggregation",
    modelProperties: {
      name: {
        serializedName: "name",
        required: true,
        type: {
          name: "String"
        }
      },
      function: {
        serializedName: "function",
        required: true,
        type: {
          name: "String"
        }
      }
    }
  }
};

export const QueryGrouping: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "QueryGrouping",
    modelProperties: {
      type: {
        serializedName: "type",
        required: true,
        type: {
          name: "String"
        }
      },
      name: {
        serializedName: "name",
        required: true,
        type: {
          name: "String"
        }
      }
    }
  }
};

export const QueryFilter: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "QueryFilter",
    modelProperties: {
      and: {
        constraints: {
          MinItems: 2
        },
        serializedName: "and",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "QueryFilter"
            }
          }
        }
      },
      or: {
        constraints: {
          MinItems: 2
        },
        serializedName: "or",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "QueryFilter"
            }
          }
        }
      },
      dimensions: {
        serializedName: "dimensions",
        type: {
          name: "Composite",
          className: "QueryComparisonExpression"
        }
      },
      tags: {
        serializedName: "tags",
        type: {
          name: "Composite",
          className: "QueryComparisonExpression"
        }
      }
    }
  }
};

export const QueryComparisonExpression: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "QueryComparisonExpression",
    modelProperties: {
      name: {
        serializedName: "name",
        required: true,
        type: {
          name: "String"
        }
      },
      operator: {
        serializedName: "operator",
        required: true,
        type: {
          name: "String"
        }
      },
      values: {
        constraints: {
          MinItems: 1
        },
        serializedName: "values",
        required: true,
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "String"
            }
          }
        }
      }
    }
  }
};

export const QueryColumn: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "QueryColumn",
    modelProperties: {
      name: {
        serializedName: "name",
        type: {
          name: "String"
        }
      },
      type: {
        serializedName: "type",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const OperationStatus: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "OperationStatus",
    modelProperties: {
      status: {
        serializedName: "status",
        type: {
          name: "String"
        }
      },
      reportUrl: {
        serializedName: "properties.reportUrl",
        type: {
          name: "String"
        }
      },
      validUntil: {
        serializedName: "properties.validUntil",
        type: {
          name: "DateTime"
        }
      }
    }
  }
};

export const ExportListResult: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "ExportListResult",
    modelProperties: {
      value: {
        serializedName: "value",
        readOnly: true,
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "Export"
            }
          }
        }
      }
    }
  }
};

export const ExportSchedule: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "ExportSchedule",
    modelProperties: {
      status: {
        serializedName: "status",
        type: {
          name: "String"
        }
      },
      recurrence: {
        serializedName: "recurrence",
        type: {
          name: "String"
        }
      },
      recurrencePeriod: {
        serializedName: "recurrencePeriod",
        type: {
          name: "Composite",
          className: "ExportRecurrencePeriod"
        }
      }
    }
  }
};

export const ExportRecurrencePeriod: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "ExportRecurrencePeriod",
    modelProperties: {
      from: {
        serializedName: "from",
        required: true,
        type: {
          name: "DateTime"
        }
      },
      to: {
        serializedName: "to",
        type: {
          name: "DateTime"
        }
      }
    }
  }
};

export const CommonExportProperties: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "CommonExportProperties",
    modelProperties: {
      format: {
        serializedName: "format",
        type: {
          name: "String"
        }
      },
      deliveryInfo: {
        serializedName: "deliveryInfo",
        type: {
          name: "Composite",
          className: "ExportDeliveryInfo"
        }
      },
      definition: {
        serializedName: "definition",
        type: {
          name: "Composite",
          className: "ExportDefinition"
        }
      },
      runHistory: {
        serializedName: "runHistory",
        type: {
          name: "Composite",
          className: "ExportExecutionListResult"
        }
      },
      partitionData: {
        serializedName: "partitionData",
        type: {
          name: "Boolean"
        }
      },
      nextRunTimeEstimate: {
        serializedName: "nextRunTimeEstimate",
        readOnly: true,
        type: {
          name: "DateTime"
        }
      }
    }
  }
};

export const ExportDeliveryInfo: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "ExportDeliveryInfo",
    modelProperties: {
      destination: {
        serializedName: "destination",
        type: {
          name: "Composite",
          className: "ExportDeliveryDestination"
        }
      }
    }
  }
};

export const ExportDeliveryDestination: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "ExportDeliveryDestination",
    modelProperties: {
      resourceId: {
        serializedName: "resourceId",
        type: {
          name: "String"
        }
      },
      container: {
        serializedName: "container",
        required: true,
        type: {
          name: "String"
        }
      },
      rootFolderPath: {
        serializedName: "rootFolderPath",
        type: {
          name: "String"
        }
      },
      sasToken: {
        serializedName: "sasToken",
        type: {
          name: "String"
        }
      },
      storageAccount: {
        serializedName: "storageAccount",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const ExportDefinition: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "ExportDefinition",
    modelProperties: {
      type: {
        serializedName: "type",
        required: true,
        type: {
          name: "String"
        }
      },
      timeframe: {
        serializedName: "timeframe",
        required: true,
        type: {
          name: "String"
        }
      },
      timePeriod: {
        serializedName: "timePeriod",
        type: {
          name: "Composite",
          className: "ExportTimePeriod"
        }
      },
      dataSet: {
        serializedName: "dataSet",
        type: {
          name: "Composite",
          className: "ExportDataset"
        }
      }
    }
  }
};

export const ExportTimePeriod: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "ExportTimePeriod",
    modelProperties: {
      from: {
        serializedName: "from",
        required: true,
        type: {
          name: "DateTime"
        }
      },
      to: {
        serializedName: "to",
        required: true,
        type: {
          name: "DateTime"
        }
      }
    }
  }
};

export const ExportDataset: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "ExportDataset",
    modelProperties: {
      granularity: {
        serializedName: "granularity",
        type: {
          name: "String"
        }
      },
      configuration: {
        serializedName: "configuration",
        type: {
          name: "Composite",
          className: "ExportDatasetConfiguration"
        }
      }
    }
  }
};

export const ExportDatasetConfiguration: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "ExportDatasetConfiguration",
    modelProperties: {
      columns: {
        serializedName: "columns",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "String"
            }
          }
        }
      }
    }
  }
};

export const ExportExecutionListResult: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "ExportExecutionListResult",
    modelProperties: {
      value: {
        serializedName: "value",
        readOnly: true,
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "ExportRun"
            }
          }
        }
      }
    }
  }
};

export const GenerateCostDetailsReportRequestDefinition: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "GenerateCostDetailsReportRequestDefinition",
    modelProperties: {
      metric: {
        serializedName: "metric",
        type: {
          name: "String"
        }
      },
      timePeriod: {
        serializedName: "timePeriod",
        type: {
          name: "Composite",
          className: "CostDetailsTimePeriod"
        }
      },
      billingPeriod: {
        serializedName: "billingPeriod",
        type: {
          name: "String"
        }
      },
      invoiceId: {
        serializedName: "invoiceId",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const CostDetailsTimePeriod: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "CostDetailsTimePeriod",
    modelProperties: {
      start: {
        serializedName: "start",
        required: true,
        type: {
          name: "String"
        }
      },
      end: {
        serializedName: "end",
        required: true,
        type: {
          name: "String"
        }
      }
    }
  }
};

export const CostDetailsOperationResults: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "CostDetailsOperationResults",
    modelProperties: {
      id: {
        serializedName: "id",
        type: {
          name: "String"
        }
      },
      name: {
        serializedName: "name",
        type: {
          name: "String"
        }
      },
      type: {
        serializedName: "type",
        type: {
          name: "String"
        }
      },
      status: {
        serializedName: "status",
        type: {
          name: "String"
        }
      },
      validTill: {
        serializedName: "validTill",
        type: {
          name: "DateTime"
        }
      },
      error: {
        serializedName: "error",
        type: {
          name: "Composite",
          className: "ErrorDetails"
        }
      },
      manifestVersion: {
        serializedName: "manifest.manifestVersion",
        type: {
          name: "String"
        }
      },
      dataFormat: {
        serializedName: "manifest.dataFormat",
        type: {
          name: "String"
        }
      },
      byteCount: {
        serializedName: "manifest.byteCount",
        type: {
          name: "Number"
        }
      },
      blobCount: {
        serializedName: "manifest.blobCount",
        type: {
          name: "Number"
        }
      },
      compressData: {
        serializedName: "manifest.compressData",
        type: {
          name: "Boolean"
        }
      },
      blobs: {
        serializedName: "manifest.blobs",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "BlobInfo"
            }
          }
        }
      },
      requestScope: {
        serializedName: "manifest.requestContext.requestScope",
        type: {
          name: "String"
        }
      },
      requestBody: {
        serializedName: "manifest.requestContext.requestBody",
        type: {
          name: "Composite",
          className: "GenerateCostDetailsReportRequestDefinition"
        }
      }
    }
  }
};

export const BlobInfo: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "BlobInfo",
    modelProperties: {
      blobLink: {
        serializedName: "blobLink",
        type: {
          name: "String"
        }
      },
      byteCount: {
        serializedName: "byteCount",
        type: {
          name: "Number"
        }
      }
    }
  }
};

export const GenerateCostDetailsReportErrorResponse: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "GenerateCostDetailsReportErrorResponse",
    modelProperties: {
      error: {
        serializedName: "error",
        type: {
          name: "Composite",
          className: "ErrorDetails"
        }
      }
    }
  }
};

export const GenerateDetailedCostReportDefinition: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "GenerateDetailedCostReportDefinition",
    modelProperties: {
      metric: {
        serializedName: "metric",
        type: {
          name: "String"
        }
      },
      timePeriod: {
        serializedName: "timePeriod",
        type: {
          name: "Composite",
          className: "GenerateDetailedCostReportTimePeriod"
        }
      },
      billingPeriod: {
        serializedName: "billingPeriod",
        type: {
          name: "String"
        }
      },
      invoiceId: {
        serializedName: "invoiceId",
        type: {
          name: "String"
        }
      },
      customerId: {
        serializedName: "customerId",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const GenerateDetailedCostReportTimePeriod: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "GenerateDetailedCostReportTimePeriod",
    modelProperties: {
      start: {
        serializedName: "start",
        required: true,
        type: {
          name: "String"
        }
      },
      end: {
        serializedName: "end",
        required: true,
        type: {
          name: "String"
        }
      }
    }
  }
};

export const GenerateDetailedCostReportOperationResult: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "GenerateDetailedCostReportOperationResult",
    modelProperties: {
      id: {
        serializedName: "id",
        type: {
          name: "String"
        }
      },
      name: {
        serializedName: "name",
        type: {
          name: "String"
        }
      },
      type: {
        serializedName: "type",
        type: {
          name: "String"
        }
      },
      expiryTime: {
        serializedName: "properties.expiryTime",
        readOnly: true,
        type: {
          name: "DateTime"
        }
      },
      validTill: {
        serializedName: "properties.validTill",
        type: {
          name: "DateTime"
        }
      },
      downloadUrl: {
        serializedName: "properties.downloadUrl",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const DownloadURL: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "DownloadURL",
    modelProperties: {
      expiryTime: {
        serializedName: "expiryTime",
        readOnly: true,
        type: {
          name: "DateTime"
        }
      },
      validTill: {
        serializedName: "validTill",
        type: {
          name: "DateTime"
        }
      },
      downloadUrl: {
        serializedName: "downloadUrl",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const GenerateDetailedCostReportErrorResponse: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "GenerateDetailedCostReportErrorResponse",
    modelProperties: {
      error: {
        serializedName: "error",
        type: {
          name: "Composite",
          className: "ErrorDetails"
        }
      }
    }
  }
};

export const GenerateDetailedCostReportOperationStatuses: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "GenerateDetailedCostReportOperationStatuses",
    modelProperties: {
      id: {
        serializedName: "id",
        type: {
          name: "String"
        }
      },
      name: {
        serializedName: "name",
        type: {
          name: "String"
        }
      },
      status: {
        serializedName: "status",
        type: {
          name: "Composite",
          className: "Status"
        }
      },
      startTime: {
        serializedName: "startTime",
        type: {
          name: "String"
        }
      },
      endTime: {
        serializedName: "endTime",
        type: {
          name: "String"
        }
      },
      type: {
        serializedName: "type",
        type: {
          name: "String"
        }
      },
      error: {
        serializedName: "error",
        type: {
          name: "Composite",
          className: "ErrorDetails"
        }
      },
      expiryTime: {
        serializedName: "properties.expiryTime",
        readOnly: true,
        type: {
          name: "DateTime"
        }
      },
      validTill: {
        serializedName: "properties.validTill",
        type: {
          name: "DateTime"
        }
      },
      downloadUrl: {
        serializedName: "properties.downloadUrl",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const Status: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "Status",
    modelProperties: {
      status: {
        serializedName: "status",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const ScheduledActionListResult: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "ScheduledActionListResult",
    modelProperties: {
      value: {
        serializedName: "value",
        readOnly: true,
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "ScheduledAction"
            }
          }
        }
      },
      nextLink: {
        serializedName: "nextLink",
        readOnly: true,
        type: {
          name: "String"
        }
      }
    }
  }
};

export const FileDestination: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "FileDestination",
    modelProperties: {
      fileFormats: {
        serializedName: "fileFormats",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "String"
            }
          }
        }
      }
    }
  }
};

export const NotificationProperties: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "NotificationProperties",
    modelProperties: {
      to: {
        constraints: {
          MinItems: 1,
          MaxItems: 20
        },
        serializedName: "to",
        required: true,
        type: {
          name: "Sequence",
          element: {
            constraints: {
              Pattern: new RegExp(
                "^[A-Za-z0-9._%+-]+@(?:[A-Za-z0-9-]+\\.)+[A-Za-z]{2,}$"
              )
            },
            type: {
              name: "String"
            }
          }
        }
      },
      language: {
        serializedName: "language",
        type: {
          name: "String"
        }
      },
      message: {
        serializedName: "message",
        type: {
          name: "String"
        }
      },
      regionalFormat: {
        serializedName: "regionalFormat",
        type: {
          name: "String"
        }
      },
      subject: {
        serializedName: "subject",
        required: true,
        type: {
          name: "String"
        }
      }
    }
  }
};

export const ScheduleProperties: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "ScheduleProperties",
    modelProperties: {
      frequency: {
        serializedName: "frequency",
        required: true,
        type: {
          name: "String"
        }
      },
      hourOfDay: {
        serializedName: "hourOfDay",
        type: {
          name: "Number"
        }
      },
      daysOfWeek: {
        serializedName: "daysOfWeek",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "String"
            }
          }
        }
      },
      weeksOfMonth: {
        serializedName: "weeksOfMonth",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "String"
            }
          }
        }
      },
      dayOfMonth: {
        serializedName: "dayOfMonth",
        type: {
          name: "Number"
        }
      },
      startDate: {
        serializedName: "startDate",
        required: true,
        type: {
          name: "DateTime"
        }
      },
      endDate: {
        serializedName: "endDate",
        required: true,
        type: {
          name: "DateTime"
        }
      }
    }
  }
};

export const SystemData: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "SystemData",
    modelProperties: {
      createdBy: {
        serializedName: "createdBy",
        type: {
          name: "String"
        }
      },
      createdByType: {
        serializedName: "createdByType",
        type: {
          name: "String"
        }
      },
      createdAt: {
        serializedName: "createdAt",
        type: {
          name: "DateTime"
        }
      },
      lastModifiedBy: {
        serializedName: "lastModifiedBy",
        type: {
          name: "String"
        }
      },
      lastModifiedByType: {
        serializedName: "lastModifiedByType",
        type: {
          name: "String"
        }
      },
      lastModifiedAt: {
        serializedName: "lastModifiedAt",
        type: {
          name: "DateTime"
        }
      }
    }
  }
};

export const Resource: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "Resource",
    modelProperties: {
      id: {
        serializedName: "id",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      name: {
        serializedName: "name",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      type: {
        serializedName: "type",
        readOnly: true,
        type: {
          name: "String"
        }
      }
    }
  }
};

export const ErrorResponseWithNestedDetails: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "ErrorResponseWithNestedDetails",
    modelProperties: {
      error: {
        serializedName: "error",
        type: {
          name: "Composite",
          className: "ErrorDetailsWithNestedDetails"
        }
      }
    }
  }
};

export const CheckNameAvailabilityRequest: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "CheckNameAvailabilityRequest",
    modelProperties: {
      name: {
        serializedName: "name",
        type: {
          name: "String"
        }
      },
      type: {
        serializedName: "type",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const CheckNameAvailabilityResponse: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "CheckNameAvailabilityResponse",
    modelProperties: {
      nameAvailable: {
        serializedName: "nameAvailable",
        type: {
          name: "Boolean"
        }
      },
      reason: {
        serializedName: "reason",
        type: {
          name: "String"
        }
      },
      message: {
        serializedName: "message",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const BenefitRecommendationsListResult: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "BenefitRecommendationsListResult",
    modelProperties: {
      value: {
        serializedName: "value",
        readOnly: true,
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "BenefitRecommendationModel"
            }
          }
        }
      },
      nextLink: {
        serializedName: "nextLink",
        readOnly: true,
        type: {
          name: "String"
        }
      }
    }
  }
};

export const BenefitRecommendationProperties: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "BenefitRecommendationProperties",
    uberParent: "BenefitRecommendationProperties",
    polymorphicDiscriminator: {
      serializedName: "scope",
      clientName: "scope"
    },
    modelProperties: {
      firstConsumptionDate: {
        serializedName: "firstConsumptionDate",
        readOnly: true,
        type: {
          name: "DateTime"
        }
      },
      lastConsumptionDate: {
        serializedName: "lastConsumptionDate",
        readOnly: true,
        type: {
          name: "DateTime"
        }
      },
      lookBackPeriod: {
        serializedName: "lookBackPeriod",
        type: {
          name: "String"
        }
      },
      totalHours: {
        serializedName: "totalHours",
        readOnly: true,
        type: {
          name: "Number"
        }
      },
      usage: {
        serializedName: "usage",
        type: {
          name: "Composite",
          className: "RecommendationUsageDetails"
        }
      },
      armSkuName: {
        serializedName: "armSkuName",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      term: {
        serializedName: "term",
        type: {
          name: "String"
        }
      },
      commitmentGranularity: {
        serializedName: "commitmentGranularity",
        type: {
          name: "String"
        }
      },
      currencyCode: {
        serializedName: "currencyCode",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      costWithoutBenefit: {
        serializedName: "costWithoutBenefit",
        readOnly: true,
        type: {
          name: "Number"
        }
      },
      recommendationDetails: {
        serializedName: "recommendationDetails",
        type: {
          name: "Composite",
          className: "AllSavingsBenefitDetails"
        }
      },
      allRecommendationDetails: {
        serializedName: "allRecommendationDetails",
        type: {
          name: "Composite",
          className: "AllSavingsList"
        }
      },
      scope: {
        serializedName: "scope",
        required: true,
        type: {
          name: "String"
        }
      }
    }
  }
};

export const RecommendationUsageDetails: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "RecommendationUsageDetails",
    modelProperties: {
      usageGrain: {
        serializedName: "usageGrain",
        type: {
          name: "String"
        }
      },
      charges: {
        serializedName: "charges",
        readOnly: true,
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Number"
            }
          }
        }
      }
    }
  }
};

export const AllSavingsBenefitDetails: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "AllSavingsBenefitDetails",
    modelProperties: {
      overageCost: {
        serializedName: "overageCost",
        readOnly: true,
        type: {
          name: "Number"
        }
      },
      benefitCost: {
        serializedName: "benefitCost",
        readOnly: true,
        type: {
          name: "Number"
        }
      },
      totalCost: {
        serializedName: "totalCost",
        readOnly: true,
        type: {
          name: "Number"
        }
      },
      savingsAmount: {
        serializedName: "savingsAmount",
        readOnly: true,
        type: {
          name: "Number"
        }
      },
      savingsPercentage: {
        serializedName: "savingsPercentage",
        readOnly: true,
        type: {
          name: "Number"
        }
      },
      coveragePercentage: {
        serializedName: "coveragePercentage",
        readOnly: true,
        type: {
          name: "Number"
        }
      },
      commitmentAmount: {
        serializedName: "commitmentAmount",
        readOnly: true,
        type: {
          name: "Number"
        }
      },
      averageUtilizationPercentage: {
        serializedName: "averageUtilizationPercentage",
        readOnly: true,
        type: {
          name: "Number"
        }
      },
      wastageCost: {
        serializedName: "wastageCost",
        readOnly: true,
        type: {
          name: "Number"
        }
      }
    }
  }
};

export const AllSavingsList: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "AllSavingsList",
    modelProperties: {
      value: {
        serializedName: "value",
        readOnly: true,
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "AllSavingsBenefitDetails"
            }
          }
        }
      },
      nextLink: {
        serializedName: "nextLink",
        readOnly: true,
        type: {
          name: "String"
        }
      }
    }
  }
};

export const BenefitUtilizationSummariesListResult: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "BenefitUtilizationSummariesListResult",
    modelProperties: {
      value: {
        serializedName: "value",
        readOnly: true,
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "BenefitUtilizationSummary"
            }
          }
        }
      },
      nextLink: {
        serializedName: "nextLink",
        readOnly: true,
        type: {
          name: "String"
        }
      }
    }
  }
};

export const BenefitUtilizationSummaryProperties: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "BenefitUtilizationSummaryProperties",
    modelProperties: {
      armSkuName: {
        serializedName: "armSkuName",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      benefitId: {
        serializedName: "benefitId",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      benefitOrderId: {
        serializedName: "benefitOrderId",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      benefitType: {
        serializedName: "benefitType",
        type: {
          name: "String"
        }
      },
      usageDate: {
        serializedName: "usageDate",
        readOnly: true,
        type: {
          name: "DateTime"
        }
      }
    }
  }
};

export const CostManagementOperation: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "CostManagementOperation",
    modelProperties: {
      ...Operation.type.modelProperties,
      id: {
        serializedName: "id",
        readOnly: true,
        type: {
          name: "String"
        }
      }
    }
  }
};

export const ErrorDetailsWithNestedDetails: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "ErrorDetailsWithNestedDetails",
    modelProperties: {
      ...ErrorDetails.type.modelProperties,
      details: {
        serializedName: "details",
        readOnly: true,
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "ErrorDetailsWithNestedDetails"
            }
          }
        }
      }
    }
  }
};

export const View: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "View",
    modelProperties: {
      ...CostManagementProxyResource.type.modelProperties,
      displayName: {
        serializedName: "properties.displayName",
        type: {
          name: "String"
        }
      },
      scope: {
        serializedName: "properties.scope",
        type: {
          name: "String"
        }
      },
      createdOn: {
        serializedName: "properties.createdOn",
        readOnly: true,
        type: {
          name: "DateTime"
        }
      },
      modifiedOn: {
        serializedName: "properties.modifiedOn",
        readOnly: true,
        type: {
          name: "DateTime"
        }
      },
      dateRange: {
        serializedName: "properties.dateRange",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      currency: {
        serializedName: "properties.currency",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      chart: {
        serializedName: "properties.chart",
        type: {
          name: "String"
        }
      },
      accumulated: {
        serializedName: "properties.accumulated",
        type: {
          name: "String"
        }
      },
      metric: {
        serializedName: "properties.metric",
        type: {
          name: "String"
        }
      },
      kpis: {
        serializedName: "properties.kpis",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "KpiProperties"
            }
          }
        }
      },
      pivots: {
        serializedName: "properties.pivots",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "PivotProperties"
            }
          }
        }
      },
      typePropertiesQueryType: {
        serializedName: "properties.query.type",
        type: {
          name: "String"
        }
      },
      timeframe: {
        serializedName: "properties.query.timeframe",
        type: {
          name: "String"
        }
      },
      timePeriod: {
        serializedName: "properties.query.timePeriod",
        type: {
          name: "Composite",
          className: "ReportConfigTimePeriod"
        }
      },
      dataSet: {
        serializedName: "properties.query.dataSet",
        type: {
          name: "Composite",
          className: "ReportConfigDataset"
        }
      },
      includeMonetaryCommitment: {
        serializedName: "properties.query.includeMonetaryCommitment",
        type: {
          name: "Boolean"
        }
      }
    }
  }
};

export const Alert: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "Alert",
    modelProperties: {
      ...CostManagementProxyResource.type.modelProperties,
      definition: {
        serializedName: "properties.definition",
        type: {
          name: "Composite",
          className: "AlertPropertiesDefinition"
        }
      },
      description: {
        serializedName: "properties.description",
        type: {
          name: "String"
        }
      },
      source: {
        serializedName: "properties.source",
        type: {
          name: "String"
        }
      },
      details: {
        serializedName: "properties.details",
        type: {
          name: "Composite",
          className: "AlertPropertiesDetails"
        }
      },
      costEntityId: {
        serializedName: "properties.costEntityId",
        type: {
          name: "String"
        }
      },
      status: {
        serializedName: "properties.status",
        type: {
          name: "String"
        }
      },
      creationTime: {
        serializedName: "properties.creationTime",
        type: {
          name: "String"
        }
      },
      closeTime: {
        serializedName: "properties.closeTime",
        type: {
          name: "String"
        }
      },
      modificationTime: {
        serializedName: "properties.modificationTime",
        type: {
          name: "String"
        }
      },
      statusModificationUserName: {
        serializedName: "properties.statusModificationUserName",
        type: {
          name: "String"
        }
      },
      statusModificationTime: {
        serializedName: "properties.statusModificationTime",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const ExportRun: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "ExportRun",
    modelProperties: {
      ...CostManagementProxyResource.type.modelProperties,
      executionType: {
        serializedName: "properties.executionType",
        type: {
          name: "String"
        }
      },
      status: {
        serializedName: "properties.status",
        type: {
          name: "String"
        }
      },
      submittedBy: {
        serializedName: "properties.submittedBy",
        type: {
          name: "String"
        }
      },
      submittedTime: {
        serializedName: "properties.submittedTime",
        type: {
          name: "DateTime"
        }
      },
      processingStartTime: {
        serializedName: "properties.processingStartTime",
        type: {
          name: "DateTime"
        }
      },
      processingEndTime: {
        serializedName: "properties.processingEndTime",
        type: {
          name: "DateTime"
        }
      },
      fileName: {
        serializedName: "properties.fileName",
        type: {
          name: "String"
        }
      },
      runSettings: {
        serializedName: "properties.runSettings",
        type: {
          name: "Composite",
          className: "CommonExportProperties"
        }
      },
      error: {
        serializedName: "properties.error",
        type: {
          name: "Composite",
          className: "ErrorDetails"
        }
      }
    }
  }
};

export const Export: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "Export",
    modelProperties: {
      ...CostManagementProxyResource.type.modelProperties,
      format: {
        serializedName: "properties.format",
        type: {
          name: "String"
        }
      },
      deliveryInfo: {
        serializedName: "properties.deliveryInfo",
        type: {
          name: "Composite",
          className: "ExportDeliveryInfo"
        }
      },
      definition: {
        serializedName: "properties.definition",
        type: {
          name: "Composite",
          className: "ExportDefinition"
        }
      },
      runHistory: {
        serializedName: "properties.runHistory",
        type: {
          name: "Composite",
          className: "ExportExecutionListResult"
        }
      },
      partitionData: {
        serializedName: "properties.partitionData",
        type: {
          name: "Boolean"
        }
      },
      nextRunTimeEstimate: {
        serializedName: "properties.nextRunTimeEstimate",
        readOnly: true,
        type: {
          name: "DateTime"
        }
      },
      schedule: {
        serializedName: "properties.schedule",
        type: {
          name: "Composite",
          className: "ExportSchedule"
        }
      }
    }
  }
};

export const ForecastResult: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "ForecastResult",
    modelProperties: {
      ...CostManagementResource.type.modelProperties,
      nextLink: {
        serializedName: "properties.nextLink",
        type: {
          name: "String"
        }
      },
      columns: {
        serializedName: "properties.columns",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "ForecastColumn"
            }
          }
        }
      },
      rows: {
        serializedName: "properties.rows",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Sequence",
              element: {
                type: {
                  name: "any"
                }
              }
            }
          }
        }
      }
    }
  }
};

export const Dimension: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "Dimension",
    modelProperties: {
      ...CostManagementResource.type.modelProperties,
      description: {
        serializedName: "properties.description",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      filterEnabled: {
        serializedName: "properties.filterEnabled",
        readOnly: true,
        type: {
          name: "Boolean"
        }
      },
      groupingEnabled: {
        serializedName: "properties.groupingEnabled",
        readOnly: true,
        type: {
          name: "Boolean"
        }
      },
      data: {
        serializedName: "properties.data",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "String"
            }
          }
        }
      },
      total: {
        serializedName: "properties.total",
        readOnly: true,
        type: {
          name: "Number"
        }
      },
      category: {
        serializedName: "properties.category",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      usageStart: {
        serializedName: "properties.usageStart",
        readOnly: true,
        type: {
          name: "DateTime"
        }
      },
      usageEnd: {
        serializedName: "properties.usageEnd",
        readOnly: true,
        type: {
          name: "DateTime"
        }
      },
      nextLink: {
        serializedName: "properties.nextLink",
        readOnly: true,
        type: {
          name: "String"
        }
      }
    }
  }
};

export const QueryResult: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "QueryResult",
    modelProperties: {
      ...CostManagementResource.type.modelProperties,
      nextLink: {
        serializedName: "properties.nextLink",
        type: {
          name: "String"
        }
      },
      columns: {
        serializedName: "properties.columns",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "QueryColumn"
            }
          }
        }
      },
      rows: {
        serializedName: "properties.rows",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Sequence",
              element: {
                type: {
                  name: "any"
                }
              }
            }
          }
        }
      }
    }
  }
};

export const ExportProperties: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "ExportProperties",
    modelProperties: {
      ...CommonExportProperties.type.modelProperties,
      schedule: {
        serializedName: "schedule",
        type: {
          name: "Composite",
          className: "ExportSchedule"
        }
      }
    }
  }
};

export const ProxyResource: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "ProxyResource",
    modelProperties: {
      ...Resource.type.modelProperties
    }
  }
};

export const BenefitResource: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "BenefitResource",
    modelProperties: {
      ...Resource.type.modelProperties,
      kind: {
        serializedName: "kind",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const BenefitUtilizationSummary: coreClient.CompositeMapper = {
  serializedName: "BenefitUtilizationSummary",
  type: {
    name: "Composite",
    className: "BenefitUtilizationSummary",
    uberParent: "Resource",
    polymorphicDiscriminator: {
      serializedName: "kind",
      clientName: "kind"
    },
    modelProperties: {
      ...Resource.type.modelProperties,
      kind: {
        serializedName: "kind",
        required: true,
        type: {
          name: "String"
        }
      }
    }
  }
};

export const SingleScopeBenefitRecommendationProperties: coreClient.CompositeMapper = {
  serializedName: "Single",
  type: {
    name: "Composite",
    className: "SingleScopeBenefitRecommendationProperties",
    uberParent: "BenefitRecommendationProperties",
    polymorphicDiscriminator:
      BenefitRecommendationProperties.type.polymorphicDiscriminator,
    modelProperties: {
      ...BenefitRecommendationProperties.type.modelProperties,
      subscriptionId: {
        serializedName: "subscriptionId",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      resourceGroup: {
        serializedName: "resourceGroup",
        readOnly: true,
        type: {
          name: "String"
        }
      }
    }
  }
};

export const SharedScopeBenefitRecommendationProperties: coreClient.CompositeMapper = {
  serializedName: "Shared",
  type: {
    name: "Composite",
    className: "SharedScopeBenefitRecommendationProperties",
    uberParent: "BenefitRecommendationProperties",
    polymorphicDiscriminator:
      BenefitRecommendationProperties.type.polymorphicDiscriminator,
    modelProperties: {
      ...BenefitRecommendationProperties.type.modelProperties
    }
  }
};

export const IncludedQuantityUtilizationSummaryProperties: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "IncludedQuantityUtilizationSummaryProperties",
    modelProperties: {
      ...BenefitUtilizationSummaryProperties.type.modelProperties,
      utilizationPercentage: {
        serializedName: "utilizationPercentage",
        readOnly: true,
        type: {
          name: "Number"
        }
      }
    }
  }
};

export const SavingsPlanUtilizationSummaryProperties: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "SavingsPlanUtilizationSummaryProperties",
    modelProperties: {
      ...BenefitUtilizationSummaryProperties.type.modelProperties,
      avgUtilizationPercentage: {
        serializedName: "avgUtilizationPercentage",
        readOnly: true,
        type: {
          name: "Number"
        }
      },
      minUtilizationPercentage: {
        serializedName: "minUtilizationPercentage",
        readOnly: true,
        type: {
          name: "Number"
        }
      },
      maxUtilizationPercentage: {
        serializedName: "maxUtilizationPercentage",
        readOnly: true,
        type: {
          name: "Number"
        }
      }
    }
  }
};

export const ScheduledActionProxyResource: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "ScheduledActionProxyResource",
    modelProperties: {
      ...ProxyResource.type.modelProperties,
      eTag: {
        serializedName: "eTag",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      kind: {
        serializedName: "kind",
        type: {
          name: "String"
        }
      },
      systemData: {
        serializedName: "systemData",
        type: {
          name: "Composite",
          className: "SystemData"
        }
      }
    }
  }
};

export const BenefitRecommendationModel: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "BenefitRecommendationModel",
    modelProperties: {
      ...BenefitResource.type.modelProperties,
      properties: {
        serializedName: "properties",
        type: {
          name: "Composite",
          className: "BenefitRecommendationProperties"
        }
      }
    }
  }
};

export const IncludedQuantityUtilizationSummary: coreClient.CompositeMapper = {
  serializedName: "IncludedQuantity",
  type: {
    name: "Composite",
    className: "IncludedQuantityUtilizationSummary",
    uberParent: "BenefitUtilizationSummary",
    polymorphicDiscriminator:
      BenefitUtilizationSummary.type.polymorphicDiscriminator,
    modelProperties: {
      ...BenefitUtilizationSummary.type.modelProperties,
      armSkuName: {
        serializedName: "properties.armSkuName",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      benefitId: {
        serializedName: "properties.benefitId",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      benefitOrderId: {
        serializedName: "properties.benefitOrderId",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      benefitType: {
        serializedName: "properties.benefitType",
        type: {
          name: "String"
        }
      },
      usageDate: {
        serializedName: "properties.usageDate",
        readOnly: true,
        type: {
          name: "DateTime"
        }
      },
      utilizationPercentage: {
        serializedName: "properties.utilizationPercentage",
        readOnly: true,
        type: {
          name: "Number"
        }
      }
    }
  }
};

export const SavingsPlanUtilizationSummary: coreClient.CompositeMapper = {
  serializedName: "SavingsPlan",
  type: {
    name: "Composite",
    className: "SavingsPlanUtilizationSummary",
    uberParent: "BenefitUtilizationSummary",
    polymorphicDiscriminator:
      BenefitUtilizationSummary.type.polymorphicDiscriminator,
    modelProperties: {
      ...BenefitUtilizationSummary.type.modelProperties,
      armSkuName: {
        serializedName: "properties.armSkuName",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      benefitId: {
        serializedName: "properties.benefitId",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      benefitOrderId: {
        serializedName: "properties.benefitOrderId",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      benefitType: {
        serializedName: "properties.benefitType",
        type: {
          name: "String"
        }
      },
      usageDate: {
        serializedName: "properties.usageDate",
        readOnly: true,
        type: {
          name: "DateTime"
        }
      },
      avgUtilizationPercentage: {
        serializedName: "properties.avgUtilizationPercentage",
        readOnly: true,
        type: {
          name: "Number"
        }
      },
      minUtilizationPercentage: {
        serializedName: "properties.minUtilizationPercentage",
        readOnly: true,
        type: {
          name: "Number"
        }
      },
      maxUtilizationPercentage: {
        serializedName: "properties.maxUtilizationPercentage",
        readOnly: true,
        type: {
          name: "Number"
        }
      }
    }
  }
};

export const ScheduledAction: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "ScheduledAction",
    modelProperties: {
      ...ScheduledActionProxyResource.type.modelProperties,
      displayName: {
        serializedName: "properties.displayName",
        type: {
          name: "String"
        }
      },
      fileDestination: {
        serializedName: "properties.fileDestination",
        type: {
          name: "Composite",
          className: "FileDestination"
        }
      },
      notification: {
        serializedName: "properties.notification",
        type: {
          name: "Composite",
          className: "NotificationProperties"
        }
      },
      notificationEmail: {
        serializedName: "properties.notificationEmail",
        type: {
          name: "String"
        }
      },
      schedule: {
        serializedName: "properties.schedule",
        type: {
          name: "Composite",
          className: "ScheduleProperties"
        }
      },
      scope: {
        serializedName: "properties.scope",
        type: {
          name: "String"
        }
      },
      status: {
        serializedName: "properties.status",
        type: {
          name: "String"
        }
      },
      viewId: {
        serializedName: "properties.viewId",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const GenerateReservationDetailsReportByBillingAccountIdHeaders: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "GenerateReservationDetailsReportByBillingAccountIdHeaders",
    modelProperties: {
      location: {
        serializedName: "location",
        type: {
          name: "String"
        }
      },
      retryAfter: {
        serializedName: "retry-after",
        type: {
          name: "Number"
        }
      }
    }
  }
};

export const GenerateReservationDetailsReportByBillingProfileIdHeaders: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "GenerateReservationDetailsReportByBillingProfileIdHeaders",
    modelProperties: {
      location: {
        serializedName: "location",
        type: {
          name: "String"
        }
      },
      retryAfter: {
        serializedName: "retry-after",
        type: {
          name: "Number"
        }
      }
    }
  }
};

export const GenerateCostDetailsReportCreateOperationHeaders: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "GenerateCostDetailsReportCreateOperationHeaders",
    modelProperties: {
      location: {
        serializedName: "location",
        type: {
          name: "String"
        }
      },
      retryAfter: {
        serializedName: "retry-after",
        type: {
          name: "Number"
        }
      }
    }
  }
};

export const GenerateDetailedCostReportCreateOperationHeaders: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "GenerateDetailedCostReportCreateOperationHeaders",
    modelProperties: {
      location: {
        serializedName: "location",
        type: {
          name: "String"
        }
      },
      azureConsumptionAsyncOperation: {
        serializedName: "azure-consumption-asyncoperation",
        type: {
          name: "String"
        }
      },
      azureAsyncOperation: {
        serializedName: "azure-asyncoperation",
        type: {
          name: "String"
        }
      },
      retryAfter: {
        serializedName: "retry-after",
        type: {
          name: "Number"
        }
      }
    }
  }
};

export const PriceSheetDownloadHeaders: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "PriceSheetDownloadHeaders",
    modelProperties: {
      location: {
        serializedName: "location",
        type: {
          name: "String"
        }
      },
      retryAfter: {
        serializedName: "retry-after",
        type: {
          name: "String"
        }
      },
      oDataEntityId: {
        serializedName: "odata-entityid",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const PriceSheetDownloadByBillingProfileHeaders: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "PriceSheetDownloadByBillingProfileHeaders",
    modelProperties: {
      location: {
        serializedName: "location",
        type: {
          name: "String"
        }
      },
      retryAfter: {
        serializedName: "retry-after",
        type: {
          name: "String"
        }
      },
      oDataEntityId: {
        serializedName: "odata-entityid",
        type: {
          name: "String"
        }
      }
    }
  }
};

export let discriminators = {
  BenefitRecommendationProperties: BenefitRecommendationProperties,
  "Resource.BenefitUtilizationSummary": BenefitUtilizationSummary,
  "BenefitRecommendationProperties.Single": SingleScopeBenefitRecommendationProperties,
  "BenefitRecommendationProperties.Shared": SharedScopeBenefitRecommendationProperties,
  "BenefitUtilizationSummary.IncludedQuantity": IncludedQuantityUtilizationSummary,
  "BenefitUtilizationSummary.SavingsPlan": SavingsPlanUtilizationSummary
};
