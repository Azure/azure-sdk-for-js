/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */

import { GenerateDetailedCostReportOperationResults } from "../operationsInterfaces";
import * as coreClient from "@azure/core-client";
import * as Mappers from "../models/mappers";
import * as Parameters from "../models/parameters";
import { CostManagementClient } from "../costManagementClient";
import {
  SimplePollerLike,
  OperationState,
  createHttpPoller
} from "@azure/core-lro";
import { createLroSpec } from "../lroImpl";
import {
  GenerateDetailedCostReportOperationResultsGetOptionalParams,
  GenerateDetailedCostReportOperationResultsGetResponse
} from "../models";

/** Class containing GenerateDetailedCostReportOperationResults operations. */
export class GenerateDetailedCostReportOperationResultsImpl
  implements GenerateDetailedCostReportOperationResults {
  private readonly client: CostManagementClient;

  /**
   * Initialize a new instance of the class GenerateDetailedCostReportOperationResults class.
   * @param client Reference to the service client
   */
  constructor(client: CostManagementClient) {
    this.client = client;
  }

  /**
   * Gets the result of the specified operation. The link with this operationId is provided as a response
   * header of the initial request.
   * @param operationId The target operation Id.
   * @param scope The ARM Resource ID for subscription, resource group, billing account, or other billing
   *              scopes. For details, see https://aka.ms/costmgmt/scopes.
   * @param options The options parameters.
   */
  async beginGet(
    operationId: string,
    scope: string,
    options?: GenerateDetailedCostReportOperationResultsGetOptionalParams
  ): Promise<
    SimplePollerLike<
      OperationState<GenerateDetailedCostReportOperationResultsGetResponse>,
      GenerateDetailedCostReportOperationResultsGetResponse
    >
  > {
    const directSendOperation = async (
      args: coreClient.OperationArguments,
      spec: coreClient.OperationSpec
    ): Promise<GenerateDetailedCostReportOperationResultsGetResponse> => {
      return this.client.sendOperationRequest(args, spec);
    };
    const sendOperationFn = async (
      args: coreClient.OperationArguments,
      spec: coreClient.OperationSpec
    ) => {
      let currentRawResponse:
        | coreClient.FullOperationResponse
        | undefined = undefined;
      const providedCallback = args.options?.onResponse;
      const callback: coreClient.RawResponseCallback = (
        rawResponse: coreClient.FullOperationResponse,
        flatResponse: unknown
      ) => {
        currentRawResponse = rawResponse;
        providedCallback?.(rawResponse, flatResponse);
      };
      const updatedArgs = {
        ...args,
        options: {
          ...args.options,
          onResponse: callback
        }
      };
      const flatResponse = await directSendOperation(updatedArgs, spec);
      return {
        flatResponse,
        rawResponse: {
          statusCode: currentRawResponse!.status,
          body: currentRawResponse!.parsedBody,
          headers: currentRawResponse!.headers.toJSON()
        }
      };
    };

    const lro = createLroSpec({
      sendOperationFn,
      args: { operationId, scope, options },
      spec: getOperationSpec
    });
    const poller = await createHttpPoller<
      GenerateDetailedCostReportOperationResultsGetResponse,
      OperationState<GenerateDetailedCostReportOperationResultsGetResponse>
    >(lro, {
      restoreFrom: options?.resumeFrom,
      intervalInMs: options?.updateIntervalInMs
    });
    await poller.poll();
    return poller;
  }

  /**
   * Gets the result of the specified operation. The link with this operationId is provided as a response
   * header of the initial request.
   * @param operationId The target operation Id.
   * @param scope The ARM Resource ID for subscription, resource group, billing account, or other billing
   *              scopes. For details, see https://aka.ms/costmgmt/scopes.
   * @param options The options parameters.
   */
  async beginGetAndWait(
    operationId: string,
    scope: string,
    options?: GenerateDetailedCostReportOperationResultsGetOptionalParams
  ): Promise<GenerateDetailedCostReportOperationResultsGetResponse> {
    const poller = await this.beginGet(operationId, scope, options);
    return poller.pollUntilDone();
  }
}
// Operation Specifications
const serializer = coreClient.createSerializer(Mappers, /* isXml */ false);

const getOperationSpec: coreClient.OperationSpec = {
  path:
    "/{scope}/providers/Microsoft.CostManagement/operationResults/{operationId}",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.GenerateDetailedCostReportOperationResult
    },
    201: {
      bodyMapper: Mappers.GenerateDetailedCostReportOperationResult
    },
    202: {
      bodyMapper: Mappers.GenerateDetailedCostReportOperationResult
    },
    204: {
      bodyMapper: Mappers.GenerateDetailedCostReportOperationResult
    },
    default: {
      bodyMapper: Mappers.ErrorResponse
    }
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [Parameters.$host, Parameters.scope1, Parameters.operationId],
  headerParameters: [Parameters.accept],
  serializer
};
