/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is
 * regenerated.
 */

import * as msRest from "@azure/ms-rest-js";
import * as Models from "../models";
import * as Mappers from "../models/settingsMappers";
import * as Parameters from "../models/parameters";
import { CostManagementClientContext } from "../costManagementClientContext";

/** Class representing a Settings. */
export class Settings {
  private readonly client: CostManagementClientContext;

  /**
   * Create a Settings.
   * @param {CostManagementClientContext} client Reference to the service client.
   */
  constructor(client: CostManagementClientContext) {
    this.client = client;
  }

  /**
   * Lists all of the settings that have been customized.
   * @param [options] The optional parameters
   * @returns Promise<Models.SettingsListResponse>
   */
  list(options?: msRest.RequestOptionsBase): Promise<Models.SettingsListResponse>;
  /**
   * @param callback The callback
   */
  list(callback: msRest.ServiceCallback<Models.SettingsListResult>): void;
  /**
   * @param options The optional parameters
   * @param callback The callback
   */
  list(options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.SettingsListResult>): void;
  list(options?: msRest.RequestOptionsBase | msRest.ServiceCallback<Models.SettingsListResult>, callback?: msRest.ServiceCallback<Models.SettingsListResult>): Promise<Models.SettingsListResponse> {
    return this.client.sendOperationRequest(
      {
        options
      },
      listOperationSpec,
      callback) as Promise<Models.SettingsListResponse>;
  }

  /**
   * Retrieves the current value for a specific setting.
   * @param settingName Name of the setting. Allowed values: myscope
   * @param [options] The optional parameters
   * @returns Promise<Models.SettingsGetResponse>
   */
  get(settingName: string, options?: msRest.RequestOptionsBase): Promise<Models.SettingsGetResponse>;
  /**
   * @param settingName Name of the setting. Allowed values: myscope
   * @param callback The callback
   */
  get(settingName: string, callback: msRest.ServiceCallback<Models.Setting>): void;
  /**
   * @param settingName Name of the setting. Allowed values: myscope
   * @param options The optional parameters
   * @param callback The callback
   */
  get(settingName: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.Setting>): void;
  get(settingName: string, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<Models.Setting>, callback?: msRest.ServiceCallback<Models.Setting>): Promise<Models.SettingsGetResponse> {
    return this.client.sendOperationRequest(
      {
        settingName,
        options
      },
      getOperationSpec,
      callback) as Promise<Models.SettingsGetResponse>;
  }

  /**
   * Sets a new value for a specific setting.
   * @param settingName Name of the setting. Allowed values: myscope
   * @param parameters Body supplied to the CreateOrUpdate setting operation.
   * @param [options] The optional parameters
   * @returns Promise<Models.SettingsCreateOrUpdateResponse>
   */
  createOrUpdate(settingName: string, parameters: Models.Setting, options?: msRest.RequestOptionsBase): Promise<Models.SettingsCreateOrUpdateResponse>;
  /**
   * @param settingName Name of the setting. Allowed values: myscope
   * @param parameters Body supplied to the CreateOrUpdate setting operation.
   * @param callback The callback
   */
  createOrUpdate(settingName: string, parameters: Models.Setting, callback: msRest.ServiceCallback<Models.Setting>): void;
  /**
   * @param settingName Name of the setting. Allowed values: myscope
   * @param parameters Body supplied to the CreateOrUpdate setting operation.
   * @param options The optional parameters
   * @param callback The callback
   */
  createOrUpdate(settingName: string, parameters: Models.Setting, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.Setting>): void;
  createOrUpdate(settingName: string, parameters: Models.Setting, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<Models.Setting>, callback?: msRest.ServiceCallback<Models.Setting>): Promise<Models.SettingsCreateOrUpdateResponse> {
    return this.client.sendOperationRequest(
      {
        settingName,
        parameters,
        options
      },
      createOrUpdateOperationSpec,
      callback) as Promise<Models.SettingsCreateOrUpdateResponse>;
  }

  /**
   * Remove the current value for a specific setting and reverts back to the default value, if
   * applicable.
   * @param settingName Name of the setting. Allowed values: myscope
   * @param [options] The optional parameters
   * @returns Promise<msRest.RestResponse>
   */
  deleteMethod(settingName: string, options?: msRest.RequestOptionsBase): Promise<msRest.RestResponse>;
  /**
   * @param settingName Name of the setting. Allowed values: myscope
   * @param callback The callback
   */
  deleteMethod(settingName: string, callback: msRest.ServiceCallback<void>): void;
  /**
   * @param settingName Name of the setting. Allowed values: myscope
   * @param options The optional parameters
   * @param callback The callback
   */
  deleteMethod(settingName: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<void>): void;
  deleteMethod(settingName: string, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<void>, callback?: msRest.ServiceCallback<void>): Promise<msRest.RestResponse> {
    return this.client.sendOperationRequest(
      {
        settingName,
        options
      },
      deleteMethodOperationSpec,
      callback);
  }

  /**
   * Lists all of the settings that have been customized.
   * @param nextPageLink The NextLink from the previous successful call to List operation.
   * @param [options] The optional parameters
   * @returns Promise<Models.SettingsListNextResponse>
   */
  listNext(nextPageLink: string, options?: msRest.RequestOptionsBase): Promise<Models.SettingsListNextResponse>;
  /**
   * @param nextPageLink The NextLink from the previous successful call to List operation.
   * @param callback The callback
   */
  listNext(nextPageLink: string, callback: msRest.ServiceCallback<Models.SettingsListResult>): void;
  /**
   * @param nextPageLink The NextLink from the previous successful call to List operation.
   * @param options The optional parameters
   * @param callback The callback
   */
  listNext(nextPageLink: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.SettingsListResult>): void;
  listNext(nextPageLink: string, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<Models.SettingsListResult>, callback?: msRest.ServiceCallback<Models.SettingsListResult>): Promise<Models.SettingsListNextResponse> {
    return this.client.sendOperationRequest(
      {
        nextPageLink,
        options
      },
      listNextOperationSpec,
      callback) as Promise<Models.SettingsListNextResponse>;
  }
}

// Operation Specifications
const serializer = new msRest.Serializer(Mappers);
const listOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "providers/Microsoft.CostManagement/settings",
  queryParameters: [
    Parameters.apiVersion
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    200: {
      bodyMapper: Mappers.SettingsListResult
    },
    default: {
      bodyMapper: Mappers.ErrorResponse
    }
  },
  serializer
};

const getOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "providers/Microsoft.CostManagement/settings/{settingName}",
  urlParameters: [
    Parameters.settingName
  ],
  queryParameters: [
    Parameters.apiVersion
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    200: {
      bodyMapper: Mappers.Setting
    },
    default: {
      bodyMapper: Mappers.ErrorResponse
    }
  },
  serializer
};

const createOrUpdateOperationSpec: msRest.OperationSpec = {
  httpMethod: "PUT",
  path: "providers/Microsoft.CostManagement/settings/{settingName}",
  urlParameters: [
    Parameters.settingName
  ],
  queryParameters: [
    Parameters.apiVersion
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  requestBody: {
    parameterPath: "parameters",
    mapper: {
      ...Mappers.Setting,
      required: true
    }
  },
  responses: {
    200: {
      bodyMapper: Mappers.Setting
    },
    default: {
      bodyMapper: Mappers.ErrorResponse
    }
  },
  serializer
};

const deleteMethodOperationSpec: msRest.OperationSpec = {
  httpMethod: "DELETE",
  path: "providers/Microsoft.CostManagement/settings/{settingName}",
  urlParameters: [
    Parameters.settingName
  ],
  queryParameters: [
    Parameters.apiVersion
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    200: {},
    204: {},
    default: {
      bodyMapper: Mappers.ErrorResponse
    }
  },
  serializer
};

const listNextOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  baseUrl: "https://management.azure.com",
  path: "{nextLink}",
  urlParameters: [
    Parameters.nextPageLink
  ],
  queryParameters: [
    Parameters.apiVersion
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    200: {
      bodyMapper: Mappers.SettingsListResult
    },
    default: {
      bodyMapper: Mappers.ErrorResponse
    }
  },
  serializer
};
