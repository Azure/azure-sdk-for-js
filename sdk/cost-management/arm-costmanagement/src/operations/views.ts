/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is
 * regenerated.
 */

import * as msRest from "@azure/ms-rest-js";
import * as Models from "../models";
import * as Mappers from "../models/viewsMappers";
import * as Parameters from "../models/parameters";
import { CostManagementClientContext } from "../costManagementClientContext";

/** Class representing a Views. */
export class Views {
  private readonly client: CostManagementClientContext;

  /**
   * Create a Views.
   * @param {CostManagementClientContext} client Reference to the service client.
   */
  constructor(client: CostManagementClientContext) {
    this.client = client;
  }

  /**
   * Lists all views by tenant and object.
   * @param [options] The optional parameters
   * @returns Promise<Models.ViewsListResponse>
   */
  list(options?: msRest.RequestOptionsBase): Promise<Models.ViewsListResponse>;
  /**
   * @param callback The callback
   */
  list(callback: msRest.ServiceCallback<Models.ViewListResult>): void;
  /**
   * @param options The optional parameters
   * @param callback The callback
   */
  list(options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.ViewListResult>): void;
  list(options?: msRest.RequestOptionsBase | msRest.ServiceCallback<Models.ViewListResult>, callback?: msRest.ServiceCallback<Models.ViewListResult>): Promise<Models.ViewsListResponse> {
    return this.client.sendOperationRequest(
      {
        options
      },
      listOperationSpec,
      callback) as Promise<Models.ViewsListResponse>;
  }

  /**
   * Lists all views at the given scope.
   * @param scope The scope associated with view operations. This includes
   * 'subscriptions/{subscriptionId}' for subscription scope,
   * 'subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}' for resourceGroup scope,
   * 'providers/Microsoft.Billing/billingAccounts/{billingAccountId}' for Billing Account scope,
   * 'providers/Microsoft.Billing/billingAccounts/{billingAccountId}/departments/{departmentId}' for
   * Department scope,
   * 'providers/Microsoft.Billing/billingAccounts/{billingAccountId}/enrollmentAccounts/{enrollmentAccountId}'
   * for EnrollmentAccount scope,
   * 'providers/Microsoft.Billing/billingAccounts/{billingAccountId}/billingProfiles/{billingProfileId}'
   * for BillingProfile scope,
   * 'providers/Microsoft.Billing/billingAccounts/{billingAccountId}/invoiceSections/{invoiceSectionId}'
   * for InvoiceSection scope, 'providers/Microsoft.Management/managementGroups/{managementGroupId}'
   * for Management Group scope,
   * 'providers/Microsoft.CostManagement/externalBillingAccounts/{externalBillingAccountName}' for
   * External Billing Account scope and
   * 'providers/Microsoft.CostManagement/externalSubscriptions/{externalSubscriptionName}' for
   * External Subscription scope.
   * @param [options] The optional parameters
   * @returns Promise<Models.ViewsListByScopeResponse>
   */
  listByScope(scope: string, options?: msRest.RequestOptionsBase): Promise<Models.ViewsListByScopeResponse>;
  /**
   * @param scope The scope associated with view operations. This includes
   * 'subscriptions/{subscriptionId}' for subscription scope,
   * 'subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}' for resourceGroup scope,
   * 'providers/Microsoft.Billing/billingAccounts/{billingAccountId}' for Billing Account scope,
   * 'providers/Microsoft.Billing/billingAccounts/{billingAccountId}/departments/{departmentId}' for
   * Department scope,
   * 'providers/Microsoft.Billing/billingAccounts/{billingAccountId}/enrollmentAccounts/{enrollmentAccountId}'
   * for EnrollmentAccount scope,
   * 'providers/Microsoft.Billing/billingAccounts/{billingAccountId}/billingProfiles/{billingProfileId}'
   * for BillingProfile scope,
   * 'providers/Microsoft.Billing/billingAccounts/{billingAccountId}/invoiceSections/{invoiceSectionId}'
   * for InvoiceSection scope, 'providers/Microsoft.Management/managementGroups/{managementGroupId}'
   * for Management Group scope,
   * 'providers/Microsoft.CostManagement/externalBillingAccounts/{externalBillingAccountName}' for
   * External Billing Account scope and
   * 'providers/Microsoft.CostManagement/externalSubscriptions/{externalSubscriptionName}' for
   * External Subscription scope.
   * @param callback The callback
   */
  listByScope(scope: string, callback: msRest.ServiceCallback<Models.ViewListResult>): void;
  /**
   * @param scope The scope associated with view operations. This includes
   * 'subscriptions/{subscriptionId}' for subscription scope,
   * 'subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}' for resourceGroup scope,
   * 'providers/Microsoft.Billing/billingAccounts/{billingAccountId}' for Billing Account scope,
   * 'providers/Microsoft.Billing/billingAccounts/{billingAccountId}/departments/{departmentId}' for
   * Department scope,
   * 'providers/Microsoft.Billing/billingAccounts/{billingAccountId}/enrollmentAccounts/{enrollmentAccountId}'
   * for EnrollmentAccount scope,
   * 'providers/Microsoft.Billing/billingAccounts/{billingAccountId}/billingProfiles/{billingProfileId}'
   * for BillingProfile scope,
   * 'providers/Microsoft.Billing/billingAccounts/{billingAccountId}/invoiceSections/{invoiceSectionId}'
   * for InvoiceSection scope, 'providers/Microsoft.Management/managementGroups/{managementGroupId}'
   * for Management Group scope,
   * 'providers/Microsoft.CostManagement/externalBillingAccounts/{externalBillingAccountName}' for
   * External Billing Account scope and
   * 'providers/Microsoft.CostManagement/externalSubscriptions/{externalSubscriptionName}' for
   * External Subscription scope.
   * @param options The optional parameters
   * @param callback The callback
   */
  listByScope(scope: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.ViewListResult>): void;
  listByScope(scope: string, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<Models.ViewListResult>, callback?: msRest.ServiceCallback<Models.ViewListResult>): Promise<Models.ViewsListByScopeResponse> {
    return this.client.sendOperationRequest(
      {
        scope,
        options
      },
      listByScopeOperationSpec,
      callback) as Promise<Models.ViewsListByScopeResponse>;
  }

  /**
   * Gets the view by view name.
   * @param viewName View name
   * @param [options] The optional parameters
   * @returns Promise<Models.ViewsGetResponse>
   */
  get(viewName: string, options?: msRest.RequestOptionsBase): Promise<Models.ViewsGetResponse>;
  /**
   * @param viewName View name
   * @param callback The callback
   */
  get(viewName: string, callback: msRest.ServiceCallback<Models.View>): void;
  /**
   * @param viewName View name
   * @param options The optional parameters
   * @param callback The callback
   */
  get(viewName: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.View>): void;
  get(viewName: string, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<Models.View>, callback?: msRest.ServiceCallback<Models.View>): Promise<Models.ViewsGetResponse> {
    return this.client.sendOperationRequest(
      {
        viewName,
        options
      },
      getOperationSpec,
      callback) as Promise<Models.ViewsGetResponse>;
  }

  /**
   * The operation to create or update a view. Update operation requires latest eTag to be set in the
   * request. You may obtain the latest eTag by performing a get operation. Create operation does not
   * require eTag.
   * @param viewName View name
   * @param parameters Parameters supplied to the CreateOrUpdate View operation.
   * @param [options] The optional parameters
   * @returns Promise<Models.ViewsCreateOrUpdateResponse>
   */
  createOrUpdate(viewName: string, parameters: Models.View, options?: msRest.RequestOptionsBase): Promise<Models.ViewsCreateOrUpdateResponse>;
  /**
   * @param viewName View name
   * @param parameters Parameters supplied to the CreateOrUpdate View operation.
   * @param callback The callback
   */
  createOrUpdate(viewName: string, parameters: Models.View, callback: msRest.ServiceCallback<Models.View>): void;
  /**
   * @param viewName View name
   * @param parameters Parameters supplied to the CreateOrUpdate View operation.
   * @param options The optional parameters
   * @param callback The callback
   */
  createOrUpdate(viewName: string, parameters: Models.View, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.View>): void;
  createOrUpdate(viewName: string, parameters: Models.View, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<Models.View>, callback?: msRest.ServiceCallback<Models.View>): Promise<Models.ViewsCreateOrUpdateResponse> {
    return this.client.sendOperationRequest(
      {
        viewName,
        parameters,
        options
      },
      createOrUpdateOperationSpec,
      callback) as Promise<Models.ViewsCreateOrUpdateResponse>;
  }

  /**
   * The operation to delete a view.
   * @param viewName View name
   * @param [options] The optional parameters
   * @returns Promise<msRest.RestResponse>
   */
  deleteMethod(viewName: string, options?: msRest.RequestOptionsBase): Promise<msRest.RestResponse>;
  /**
   * @param viewName View name
   * @param callback The callback
   */
  deleteMethod(viewName: string, callback: msRest.ServiceCallback<void>): void;
  /**
   * @param viewName View name
   * @param options The optional parameters
   * @param callback The callback
   */
  deleteMethod(viewName: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<void>): void;
  deleteMethod(viewName: string, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<void>, callback?: msRest.ServiceCallback<void>): Promise<msRest.RestResponse> {
    return this.client.sendOperationRequest(
      {
        viewName,
        options
      },
      deleteMethodOperationSpec,
      callback);
  }

  /**
   * Gets the view for the defined scope by view name.
   * @param scope The scope associated with view operations. This includes
   * 'subscriptions/{subscriptionId}' for subscription scope,
   * 'subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}' for resourceGroup scope,
   * 'providers/Microsoft.Billing/billingAccounts/{billingAccountId}' for Billing Account scope,
   * 'providers/Microsoft.Billing/billingAccounts/{billingAccountId}/departments/{departmentId}' for
   * Department scope,
   * 'providers/Microsoft.Billing/billingAccounts/{billingAccountId}/enrollmentAccounts/{enrollmentAccountId}'
   * for EnrollmentAccount scope,
   * 'providers/Microsoft.Billing/billingAccounts/{billingAccountId}/billingProfiles/{billingProfileId}'
   * for BillingProfile scope,
   * 'providers/Microsoft.Billing/billingAccounts/{billingAccountId}/invoiceSections/{invoiceSectionId}'
   * for InvoiceSection scope, 'providers/Microsoft.Management/managementGroups/{managementGroupId}'
   * for Management Group scope,
   * 'providers/Microsoft.CostManagement/externalBillingAccounts/{externalBillingAccountName}' for
   * External Billing Account scope and
   * 'providers/Microsoft.CostManagement/externalSubscriptions/{externalSubscriptionName}' for
   * External Subscription scope.
   * @param viewName View name
   * @param [options] The optional parameters
   * @returns Promise<Models.ViewsGetByScopeResponse>
   */
  getByScope(scope: string, viewName: string, options?: msRest.RequestOptionsBase): Promise<Models.ViewsGetByScopeResponse>;
  /**
   * @param scope The scope associated with view operations. This includes
   * 'subscriptions/{subscriptionId}' for subscription scope,
   * 'subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}' for resourceGroup scope,
   * 'providers/Microsoft.Billing/billingAccounts/{billingAccountId}' for Billing Account scope,
   * 'providers/Microsoft.Billing/billingAccounts/{billingAccountId}/departments/{departmentId}' for
   * Department scope,
   * 'providers/Microsoft.Billing/billingAccounts/{billingAccountId}/enrollmentAccounts/{enrollmentAccountId}'
   * for EnrollmentAccount scope,
   * 'providers/Microsoft.Billing/billingAccounts/{billingAccountId}/billingProfiles/{billingProfileId}'
   * for BillingProfile scope,
   * 'providers/Microsoft.Billing/billingAccounts/{billingAccountId}/invoiceSections/{invoiceSectionId}'
   * for InvoiceSection scope, 'providers/Microsoft.Management/managementGroups/{managementGroupId}'
   * for Management Group scope,
   * 'providers/Microsoft.CostManagement/externalBillingAccounts/{externalBillingAccountName}' for
   * External Billing Account scope and
   * 'providers/Microsoft.CostManagement/externalSubscriptions/{externalSubscriptionName}' for
   * External Subscription scope.
   * @param viewName View name
   * @param callback The callback
   */
  getByScope(scope: string, viewName: string, callback: msRest.ServiceCallback<Models.View>): void;
  /**
   * @param scope The scope associated with view operations. This includes
   * 'subscriptions/{subscriptionId}' for subscription scope,
   * 'subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}' for resourceGroup scope,
   * 'providers/Microsoft.Billing/billingAccounts/{billingAccountId}' for Billing Account scope,
   * 'providers/Microsoft.Billing/billingAccounts/{billingAccountId}/departments/{departmentId}' for
   * Department scope,
   * 'providers/Microsoft.Billing/billingAccounts/{billingAccountId}/enrollmentAccounts/{enrollmentAccountId}'
   * for EnrollmentAccount scope,
   * 'providers/Microsoft.Billing/billingAccounts/{billingAccountId}/billingProfiles/{billingProfileId}'
   * for BillingProfile scope,
   * 'providers/Microsoft.Billing/billingAccounts/{billingAccountId}/invoiceSections/{invoiceSectionId}'
   * for InvoiceSection scope, 'providers/Microsoft.Management/managementGroups/{managementGroupId}'
   * for Management Group scope,
   * 'providers/Microsoft.CostManagement/externalBillingAccounts/{externalBillingAccountName}' for
   * External Billing Account scope and
   * 'providers/Microsoft.CostManagement/externalSubscriptions/{externalSubscriptionName}' for
   * External Subscription scope.
   * @param viewName View name
   * @param options The optional parameters
   * @param callback The callback
   */
  getByScope(scope: string, viewName: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.View>): void;
  getByScope(scope: string, viewName: string, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<Models.View>, callback?: msRest.ServiceCallback<Models.View>): Promise<Models.ViewsGetByScopeResponse> {
    return this.client.sendOperationRequest(
      {
        scope,
        viewName,
        options
      },
      getByScopeOperationSpec,
      callback) as Promise<Models.ViewsGetByScopeResponse>;
  }

  /**
   * The operation to create or update a view. Update operation requires latest eTag to be set in the
   * request. You may obtain the latest eTag by performing a get operation. Create operation does not
   * require eTag.
   * @param scope The scope associated with view operations. This includes
   * 'subscriptions/{subscriptionId}' for subscription scope,
   * 'subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}' for resourceGroup scope,
   * 'providers/Microsoft.Billing/billingAccounts/{billingAccountId}' for Billing Account scope,
   * 'providers/Microsoft.Billing/billingAccounts/{billingAccountId}/departments/{departmentId}' for
   * Department scope,
   * 'providers/Microsoft.Billing/billingAccounts/{billingAccountId}/enrollmentAccounts/{enrollmentAccountId}'
   * for EnrollmentAccount scope,
   * 'providers/Microsoft.Billing/billingAccounts/{billingAccountId}/billingProfiles/{billingProfileId}'
   * for BillingProfile scope,
   * 'providers/Microsoft.Billing/billingAccounts/{billingAccountId}/invoiceSections/{invoiceSectionId}'
   * for InvoiceSection scope, 'providers/Microsoft.Management/managementGroups/{managementGroupId}'
   * for Management Group scope,
   * 'providers/Microsoft.CostManagement/externalBillingAccounts/{externalBillingAccountName}' for
   * External Billing Account scope and
   * 'providers/Microsoft.CostManagement/externalSubscriptions/{externalSubscriptionName}' for
   * External Subscription scope.
   * @param viewName View name
   * @param parameters Parameters supplied to the CreateOrUpdate View operation.
   * @param [options] The optional parameters
   * @returns Promise<Models.ViewsCreateOrUpdateByScopeResponse>
   */
  createOrUpdateByScope(scope: string, viewName: string, parameters: Models.View, options?: msRest.RequestOptionsBase): Promise<Models.ViewsCreateOrUpdateByScopeResponse>;
  /**
   * @param scope The scope associated with view operations. This includes
   * 'subscriptions/{subscriptionId}' for subscription scope,
   * 'subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}' for resourceGroup scope,
   * 'providers/Microsoft.Billing/billingAccounts/{billingAccountId}' for Billing Account scope,
   * 'providers/Microsoft.Billing/billingAccounts/{billingAccountId}/departments/{departmentId}' for
   * Department scope,
   * 'providers/Microsoft.Billing/billingAccounts/{billingAccountId}/enrollmentAccounts/{enrollmentAccountId}'
   * for EnrollmentAccount scope,
   * 'providers/Microsoft.Billing/billingAccounts/{billingAccountId}/billingProfiles/{billingProfileId}'
   * for BillingProfile scope,
   * 'providers/Microsoft.Billing/billingAccounts/{billingAccountId}/invoiceSections/{invoiceSectionId}'
   * for InvoiceSection scope, 'providers/Microsoft.Management/managementGroups/{managementGroupId}'
   * for Management Group scope,
   * 'providers/Microsoft.CostManagement/externalBillingAccounts/{externalBillingAccountName}' for
   * External Billing Account scope and
   * 'providers/Microsoft.CostManagement/externalSubscriptions/{externalSubscriptionName}' for
   * External Subscription scope.
   * @param viewName View name
   * @param parameters Parameters supplied to the CreateOrUpdate View operation.
   * @param callback The callback
   */
  createOrUpdateByScope(scope: string, viewName: string, parameters: Models.View, callback: msRest.ServiceCallback<Models.View>): void;
  /**
   * @param scope The scope associated with view operations. This includes
   * 'subscriptions/{subscriptionId}' for subscription scope,
   * 'subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}' for resourceGroup scope,
   * 'providers/Microsoft.Billing/billingAccounts/{billingAccountId}' for Billing Account scope,
   * 'providers/Microsoft.Billing/billingAccounts/{billingAccountId}/departments/{departmentId}' for
   * Department scope,
   * 'providers/Microsoft.Billing/billingAccounts/{billingAccountId}/enrollmentAccounts/{enrollmentAccountId}'
   * for EnrollmentAccount scope,
   * 'providers/Microsoft.Billing/billingAccounts/{billingAccountId}/billingProfiles/{billingProfileId}'
   * for BillingProfile scope,
   * 'providers/Microsoft.Billing/billingAccounts/{billingAccountId}/invoiceSections/{invoiceSectionId}'
   * for InvoiceSection scope, 'providers/Microsoft.Management/managementGroups/{managementGroupId}'
   * for Management Group scope,
   * 'providers/Microsoft.CostManagement/externalBillingAccounts/{externalBillingAccountName}' for
   * External Billing Account scope and
   * 'providers/Microsoft.CostManagement/externalSubscriptions/{externalSubscriptionName}' for
   * External Subscription scope.
   * @param viewName View name
   * @param parameters Parameters supplied to the CreateOrUpdate View operation.
   * @param options The optional parameters
   * @param callback The callback
   */
  createOrUpdateByScope(scope: string, viewName: string, parameters: Models.View, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.View>): void;
  createOrUpdateByScope(scope: string, viewName: string, parameters: Models.View, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<Models.View>, callback?: msRest.ServiceCallback<Models.View>): Promise<Models.ViewsCreateOrUpdateByScopeResponse> {
    return this.client.sendOperationRequest(
      {
        scope,
        viewName,
        parameters,
        options
      },
      createOrUpdateByScopeOperationSpec,
      callback) as Promise<Models.ViewsCreateOrUpdateByScopeResponse>;
  }

  /**
   * The operation to delete a view.
   * @param scope The scope associated with view operations. This includes
   * 'subscriptions/{subscriptionId}' for subscription scope,
   * 'subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}' for resourceGroup scope,
   * 'providers/Microsoft.Billing/billingAccounts/{billingAccountId}' for Billing Account scope,
   * 'providers/Microsoft.Billing/billingAccounts/{billingAccountId}/departments/{departmentId}' for
   * Department scope,
   * 'providers/Microsoft.Billing/billingAccounts/{billingAccountId}/enrollmentAccounts/{enrollmentAccountId}'
   * for EnrollmentAccount scope,
   * 'providers/Microsoft.Billing/billingAccounts/{billingAccountId}/billingProfiles/{billingProfileId}'
   * for BillingProfile scope,
   * 'providers/Microsoft.Billing/billingAccounts/{billingAccountId}/invoiceSections/{invoiceSectionId}'
   * for InvoiceSection scope, 'providers/Microsoft.Management/managementGroups/{managementGroupId}'
   * for Management Group scope,
   * 'providers/Microsoft.CostManagement/externalBillingAccounts/{externalBillingAccountName}' for
   * External Billing Account scope and
   * 'providers/Microsoft.CostManagement/externalSubscriptions/{externalSubscriptionName}' for
   * External Subscription scope.
   * @param viewName View name
   * @param [options] The optional parameters
   * @returns Promise<msRest.RestResponse>
   */
  deleteByScope(scope: string, viewName: string, options?: msRest.RequestOptionsBase): Promise<msRest.RestResponse>;
  /**
   * @param scope The scope associated with view operations. This includes
   * 'subscriptions/{subscriptionId}' for subscription scope,
   * 'subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}' for resourceGroup scope,
   * 'providers/Microsoft.Billing/billingAccounts/{billingAccountId}' for Billing Account scope,
   * 'providers/Microsoft.Billing/billingAccounts/{billingAccountId}/departments/{departmentId}' for
   * Department scope,
   * 'providers/Microsoft.Billing/billingAccounts/{billingAccountId}/enrollmentAccounts/{enrollmentAccountId}'
   * for EnrollmentAccount scope,
   * 'providers/Microsoft.Billing/billingAccounts/{billingAccountId}/billingProfiles/{billingProfileId}'
   * for BillingProfile scope,
   * 'providers/Microsoft.Billing/billingAccounts/{billingAccountId}/invoiceSections/{invoiceSectionId}'
   * for InvoiceSection scope, 'providers/Microsoft.Management/managementGroups/{managementGroupId}'
   * for Management Group scope,
   * 'providers/Microsoft.CostManagement/externalBillingAccounts/{externalBillingAccountName}' for
   * External Billing Account scope and
   * 'providers/Microsoft.CostManagement/externalSubscriptions/{externalSubscriptionName}' for
   * External Subscription scope.
   * @param viewName View name
   * @param callback The callback
   */
  deleteByScope(scope: string, viewName: string, callback: msRest.ServiceCallback<void>): void;
  /**
   * @param scope The scope associated with view operations. This includes
   * 'subscriptions/{subscriptionId}' for subscription scope,
   * 'subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}' for resourceGroup scope,
   * 'providers/Microsoft.Billing/billingAccounts/{billingAccountId}' for Billing Account scope,
   * 'providers/Microsoft.Billing/billingAccounts/{billingAccountId}/departments/{departmentId}' for
   * Department scope,
   * 'providers/Microsoft.Billing/billingAccounts/{billingAccountId}/enrollmentAccounts/{enrollmentAccountId}'
   * for EnrollmentAccount scope,
   * 'providers/Microsoft.Billing/billingAccounts/{billingAccountId}/billingProfiles/{billingProfileId}'
   * for BillingProfile scope,
   * 'providers/Microsoft.Billing/billingAccounts/{billingAccountId}/invoiceSections/{invoiceSectionId}'
   * for InvoiceSection scope, 'providers/Microsoft.Management/managementGroups/{managementGroupId}'
   * for Management Group scope,
   * 'providers/Microsoft.CostManagement/externalBillingAccounts/{externalBillingAccountName}' for
   * External Billing Account scope and
   * 'providers/Microsoft.CostManagement/externalSubscriptions/{externalSubscriptionName}' for
   * External Subscription scope.
   * @param viewName View name
   * @param options The optional parameters
   * @param callback The callback
   */
  deleteByScope(scope: string, viewName: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<void>): void;
  deleteByScope(scope: string, viewName: string, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<void>, callback?: msRest.ServiceCallback<void>): Promise<msRest.RestResponse> {
    return this.client.sendOperationRequest(
      {
        scope,
        viewName,
        options
      },
      deleteByScopeOperationSpec,
      callback);
  }

  /**
   * Lists all views by tenant and object.
   * @param nextPageLink The NextLink from the previous successful call to List operation.
   * @param [options] The optional parameters
   * @returns Promise<Models.ViewsListNextResponse>
   */
  listNext(nextPageLink: string, options?: msRest.RequestOptionsBase): Promise<Models.ViewsListNextResponse>;
  /**
   * @param nextPageLink The NextLink from the previous successful call to List operation.
   * @param callback The callback
   */
  listNext(nextPageLink: string, callback: msRest.ServiceCallback<Models.ViewListResult>): void;
  /**
   * @param nextPageLink The NextLink from the previous successful call to List operation.
   * @param options The optional parameters
   * @param callback The callback
   */
  listNext(nextPageLink: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.ViewListResult>): void;
  listNext(nextPageLink: string, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<Models.ViewListResult>, callback?: msRest.ServiceCallback<Models.ViewListResult>): Promise<Models.ViewsListNextResponse> {
    return this.client.sendOperationRequest(
      {
        nextPageLink,
        options
      },
      listNextOperationSpec,
      callback) as Promise<Models.ViewsListNextResponse>;
  }

  /**
   * Lists all views at the given scope.
   * @param nextPageLink The NextLink from the previous successful call to List operation.
   * @param [options] The optional parameters
   * @returns Promise<Models.ViewsListByScopeNextResponse>
   */
  listByScopeNext(nextPageLink: string, options?: msRest.RequestOptionsBase): Promise<Models.ViewsListByScopeNextResponse>;
  /**
   * @param nextPageLink The NextLink from the previous successful call to List operation.
   * @param callback The callback
   */
  listByScopeNext(nextPageLink: string, callback: msRest.ServiceCallback<Models.ViewListResult>): void;
  /**
   * @param nextPageLink The NextLink from the previous successful call to List operation.
   * @param options The optional parameters
   * @param callback The callback
   */
  listByScopeNext(nextPageLink: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.ViewListResult>): void;
  listByScopeNext(nextPageLink: string, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<Models.ViewListResult>, callback?: msRest.ServiceCallback<Models.ViewListResult>): Promise<Models.ViewsListByScopeNextResponse> {
    return this.client.sendOperationRequest(
      {
        nextPageLink,
        options
      },
      listByScopeNextOperationSpec,
      callback) as Promise<Models.ViewsListByScopeNextResponse>;
  }
}

// Operation Specifications
const serializer = new msRest.Serializer(Mappers);
const listOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "providers/Microsoft.CostManagement/views",
  queryParameters: [
    Parameters.apiVersion
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    200: {
      bodyMapper: Mappers.ViewListResult
    },
    204: {},
    default: {
      bodyMapper: Mappers.ErrorResponse
    }
  },
  serializer
};

const listByScopeOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "{scope}/providers/Microsoft.CostManagement/views",
  urlParameters: [
    Parameters.scope0
  ],
  queryParameters: [
    Parameters.apiVersion
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    200: {
      bodyMapper: Mappers.ViewListResult
    },
    204: {},
    default: {
      bodyMapper: Mappers.ErrorResponse
    }
  },
  serializer
};

const getOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "providers/Microsoft.CostManagement/views/{viewName}",
  urlParameters: [
    Parameters.viewName
  ],
  queryParameters: [
    Parameters.apiVersion
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    200: {
      bodyMapper: Mappers.View
    },
    default: {
      bodyMapper: Mappers.ErrorResponse
    }
  },
  serializer
};

const createOrUpdateOperationSpec: msRest.OperationSpec = {
  httpMethod: "PUT",
  path: "providers/Microsoft.CostManagement/views/{viewName}",
  urlParameters: [
    Parameters.viewName
  ],
  queryParameters: [
    Parameters.apiVersion
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  requestBody: {
    parameterPath: "parameters",
    mapper: {
      ...Mappers.View,
      required: true
    }
  },
  responses: {
    200: {
      bodyMapper: Mappers.View
    },
    201: {
      bodyMapper: Mappers.View
    },
    default: {
      bodyMapper: Mappers.ErrorResponse
    }
  },
  serializer
};

const deleteMethodOperationSpec: msRest.OperationSpec = {
  httpMethod: "DELETE",
  path: "providers/Microsoft.CostManagement/views/{viewName}",
  urlParameters: [
    Parameters.viewName
  ],
  queryParameters: [
    Parameters.apiVersion
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    200: {},
    204: {},
    default: {
      bodyMapper: Mappers.ErrorResponse
    }
  },
  serializer
};

const getByScopeOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "{scope}/providers/Microsoft.CostManagement/views/{viewName}",
  urlParameters: [
    Parameters.scope0,
    Parameters.viewName
  ],
  queryParameters: [
    Parameters.apiVersion
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    200: {
      bodyMapper: Mappers.View
    },
    default: {
      bodyMapper: Mappers.ErrorResponse
    }
  },
  serializer
};

const createOrUpdateByScopeOperationSpec: msRest.OperationSpec = {
  httpMethod: "PUT",
  path: "{scope}/providers/Microsoft.CostManagement/views/{viewName}",
  urlParameters: [
    Parameters.scope0,
    Parameters.viewName
  ],
  queryParameters: [
    Parameters.apiVersion
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  requestBody: {
    parameterPath: "parameters",
    mapper: {
      ...Mappers.View,
      required: true
    }
  },
  responses: {
    200: {
      bodyMapper: Mappers.View
    },
    201: {
      bodyMapper: Mappers.View
    },
    default: {
      bodyMapper: Mappers.ErrorResponse
    }
  },
  serializer
};

const deleteByScopeOperationSpec: msRest.OperationSpec = {
  httpMethod: "DELETE",
  path: "{scope}/providers/Microsoft.CostManagement/views/{viewName}",
  urlParameters: [
    Parameters.scope0,
    Parameters.viewName
  ],
  queryParameters: [
    Parameters.apiVersion
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    200: {},
    204: {},
    default: {
      bodyMapper: Mappers.ErrorResponse
    }
  },
  serializer
};

const listNextOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  baseUrl: "https://management.azure.com",
  path: "{nextLink}",
  urlParameters: [
    Parameters.nextPageLink
  ],
  queryParameters: [
    Parameters.apiVersion
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    200: {
      bodyMapper: Mappers.ViewListResult
    },
    204: {},
    default: {
      bodyMapper: Mappers.ErrorResponse
    }
  },
  serializer
};

const listByScopeNextOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  baseUrl: "https://management.azure.com",
  path: "{nextLink}",
  urlParameters: [
    Parameters.nextPageLink
  ],
  queryParameters: [
    Parameters.apiVersion
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    200: {
      bodyMapper: Mappers.ViewListResult
    },
    204: {},
    default: {
      bodyMapper: Mappers.ErrorResponse
    }
  },
  serializer
};
