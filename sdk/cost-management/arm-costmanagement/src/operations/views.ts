/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */

import { PagedAsyncIterableIterator, PageSettings } from "@azure/core-paging";
import { setContinuationToken } from "../pagingHelper";
import { Views } from "../operationsInterfaces";
import * as coreClient from "@azure/core-client";
import * as Mappers from "../models/mappers";
import * as Parameters from "../models/parameters";
import { CostManagementClient } from "../costManagementClient";
import {
  View,
  ViewsListNextOptionalParams,
  ViewsListOptionalParams,
  ViewsListResponse,
  ViewsListByScopeNextOptionalParams,
  ViewsListByScopeOptionalParams,
  ViewsListByScopeResponse,
  ViewsGetOptionalParams,
  ViewsGetResponse,
  ViewsCreateOrUpdateOptionalParams,
  ViewsCreateOrUpdateResponse,
  ViewsDeleteOptionalParams,
  ViewsGetByScopeOptionalParams,
  ViewsGetByScopeResponse,
  ViewsCreateOrUpdateByScopeOptionalParams,
  ViewsCreateOrUpdateByScopeResponse,
  ViewsDeleteByScopeOptionalParams,
  ViewsListNextResponse,
  ViewsListByScopeNextResponse
} from "../models";

/// <reference lib="esnext.asynciterable" />
/** Class containing Views operations. */
export class ViewsImpl implements Views {
  private readonly client: CostManagementClient;

  /**
   * Initialize a new instance of the class Views class.
   * @param client Reference to the service client
   */
  constructor(client: CostManagementClient) {
    this.client = client;
  }

  /**
   * Lists all views by tenant and object.
   * @param options The options parameters.
   */
  public list(
    options?: ViewsListOptionalParams
  ): PagedAsyncIterableIterator<View> {
    const iter = this.listPagingAll(options);
    return {
      next() {
        return iter.next();
      },
      [Symbol.asyncIterator]() {
        return this;
      },
      byPage: (settings?: PageSettings) => {
        if (settings?.maxPageSize) {
          throw new Error("maxPageSize is not supported by this operation.");
        }
        return this.listPagingPage(options, settings);
      }
    };
  }

  private async *listPagingPage(
    options?: ViewsListOptionalParams,
    settings?: PageSettings
  ): AsyncIterableIterator<View[]> {
    let result: ViewsListResponse;
    let continuationToken = settings?.continuationToken;
    if (!continuationToken) {
      result = await this._list(options);
      let page = result.value || [];
      continuationToken = result.nextLink;
      setContinuationToken(page, continuationToken);
      yield page;
    }
    while (continuationToken) {
      result = await this._listNext(continuationToken, options);
      continuationToken = result.nextLink;
      let page = result.value || [];
      setContinuationToken(page, continuationToken);
      yield page;
    }
  }

  private async *listPagingAll(
    options?: ViewsListOptionalParams
  ): AsyncIterableIterator<View> {
    for await (const page of this.listPagingPage(options)) {
      yield* page;
    }
  }

  /**
   * Lists all views at the given scope.
   * @param scope The scope associated with view operations. This includes
   *              'subscriptions/{subscriptionId}' for subscription scope,
   *              'subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}' for resourceGroup scope,
   *              'providers/Microsoft.Billing/billingAccounts/{billingAccountId}' for Billing Account scope,
   *              'providers/Microsoft.Billing/billingAccounts/{billingAccountId}/departments/{departmentId}' for
   *              Department scope,
   *              'providers/Microsoft.Billing/billingAccounts/{billingAccountId}/enrollmentAccounts/{enrollmentAccountId}'
   *              for EnrollmentAccount scope,
   *              'providers/Microsoft.Billing/billingAccounts/{billingAccountId}/billingProfiles/{billingProfileId}'
   *              for BillingProfile scope,
   *              'providers/Microsoft.Billing/billingAccounts/{billingAccountId}/invoiceSections/{invoiceSectionId}'
   *              for InvoiceSection scope, 'providers/Microsoft.Management/managementGroups/{managementGroupId}' for
   *              Management Group scope,
   *              'providers/Microsoft.CostManagement/externalBillingAccounts/{externalBillingAccountName}' for
   *              External Billing Account scope and
   *              'providers/Microsoft.CostManagement/externalSubscriptions/{externalSubscriptionName}' for External
   *              Subscription scope.
   * @param options The options parameters.
   */
  public listByScope(
    scope: string,
    options?: ViewsListByScopeOptionalParams
  ): PagedAsyncIterableIterator<View> {
    const iter = this.listByScopePagingAll(scope, options);
    return {
      next() {
        return iter.next();
      },
      [Symbol.asyncIterator]() {
        return this;
      },
      byPage: (settings?: PageSettings) => {
        if (settings?.maxPageSize) {
          throw new Error("maxPageSize is not supported by this operation.");
        }
        return this.listByScopePagingPage(scope, options, settings);
      }
    };
  }

  private async *listByScopePagingPage(
    scope: string,
    options?: ViewsListByScopeOptionalParams,
    settings?: PageSettings
  ): AsyncIterableIterator<View[]> {
    let result: ViewsListByScopeResponse;
    let continuationToken = settings?.continuationToken;
    if (!continuationToken) {
      result = await this._listByScope(scope, options);
      let page = result.value || [];
      continuationToken = result.nextLink;
      setContinuationToken(page, continuationToken);
      yield page;
    }
    while (continuationToken) {
      result = await this._listByScopeNext(scope, continuationToken, options);
      continuationToken = result.nextLink;
      let page = result.value || [];
      setContinuationToken(page, continuationToken);
      yield page;
    }
  }

  private async *listByScopePagingAll(
    scope: string,
    options?: ViewsListByScopeOptionalParams
  ): AsyncIterableIterator<View> {
    for await (const page of this.listByScopePagingPage(scope, options)) {
      yield* page;
    }
  }

  /**
   * Lists all views by tenant and object.
   * @param options The options parameters.
   */
  private _list(options?: ViewsListOptionalParams): Promise<ViewsListResponse> {
    return this.client.sendOperationRequest({ options }, listOperationSpec);
  }

  /**
   * Lists all views at the given scope.
   * @param scope The scope associated with view operations. This includes
   *              'subscriptions/{subscriptionId}' for subscription scope,
   *              'subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}' for resourceGroup scope,
   *              'providers/Microsoft.Billing/billingAccounts/{billingAccountId}' for Billing Account scope,
   *              'providers/Microsoft.Billing/billingAccounts/{billingAccountId}/departments/{departmentId}' for
   *              Department scope,
   *              'providers/Microsoft.Billing/billingAccounts/{billingAccountId}/enrollmentAccounts/{enrollmentAccountId}'
   *              for EnrollmentAccount scope,
   *              'providers/Microsoft.Billing/billingAccounts/{billingAccountId}/billingProfiles/{billingProfileId}'
   *              for BillingProfile scope,
   *              'providers/Microsoft.Billing/billingAccounts/{billingAccountId}/invoiceSections/{invoiceSectionId}'
   *              for InvoiceSection scope, 'providers/Microsoft.Management/managementGroups/{managementGroupId}' for
   *              Management Group scope,
   *              'providers/Microsoft.CostManagement/externalBillingAccounts/{externalBillingAccountName}' for
   *              External Billing Account scope and
   *              'providers/Microsoft.CostManagement/externalSubscriptions/{externalSubscriptionName}' for External
   *              Subscription scope.
   * @param options The options parameters.
   */
  private _listByScope(
    scope: string,
    options?: ViewsListByScopeOptionalParams
  ): Promise<ViewsListByScopeResponse> {
    return this.client.sendOperationRequest(
      { scope, options },
      listByScopeOperationSpec
    );
  }

  /**
   * Gets the view by view name.
   * @param viewName View name
   * @param options The options parameters.
   */
  get(
    viewName: string,
    options?: ViewsGetOptionalParams
  ): Promise<ViewsGetResponse> {
    return this.client.sendOperationRequest(
      { viewName, options },
      getOperationSpec
    );
  }

  /**
   * The operation to create or update a view. Update operation requires latest eTag to be set in the
   * request. You may obtain the latest eTag by performing a get operation. Create operation does not
   * require eTag.
   * @param viewName View name
   * @param parameters Parameters supplied to the CreateOrUpdate View operation.
   * @param options The options parameters.
   */
  createOrUpdate(
    viewName: string,
    parameters: View,
    options?: ViewsCreateOrUpdateOptionalParams
  ): Promise<ViewsCreateOrUpdateResponse> {
    return this.client.sendOperationRequest(
      { viewName, parameters, options },
      createOrUpdateOperationSpec
    );
  }

  /**
   * The operation to delete a view.
   * @param viewName View name
   * @param options The options parameters.
   */
  delete(viewName: string, options?: ViewsDeleteOptionalParams): Promise<void> {
    return this.client.sendOperationRequest(
      { viewName, options },
      deleteOperationSpec
    );
  }

  /**
   * Gets the view for the defined scope by view name.
   * @param scope The scope associated with view operations. This includes
   *              'subscriptions/{subscriptionId}' for subscription scope,
   *              'subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}' for resourceGroup scope,
   *              'providers/Microsoft.Billing/billingAccounts/{billingAccountId}' for Billing Account scope,
   *              'providers/Microsoft.Billing/billingAccounts/{billingAccountId}/departments/{departmentId}' for
   *              Department scope,
   *              'providers/Microsoft.Billing/billingAccounts/{billingAccountId}/enrollmentAccounts/{enrollmentAccountId}'
   *              for EnrollmentAccount scope,
   *              'providers/Microsoft.Billing/billingAccounts/{billingAccountId}/billingProfiles/{billingProfileId}'
   *              for BillingProfile scope,
   *              'providers/Microsoft.Billing/billingAccounts/{billingAccountId}/invoiceSections/{invoiceSectionId}'
   *              for InvoiceSection scope, 'providers/Microsoft.Management/managementGroups/{managementGroupId}' for
   *              Management Group scope,
   *              'providers/Microsoft.CostManagement/externalBillingAccounts/{externalBillingAccountName}' for
   *              External Billing Account scope and
   *              'providers/Microsoft.CostManagement/externalSubscriptions/{externalSubscriptionName}' for External
   *              Subscription scope.
   * @param viewName View name
   * @param options The options parameters.
   */
  getByScope(
    scope: string,
    viewName: string,
    options?: ViewsGetByScopeOptionalParams
  ): Promise<ViewsGetByScopeResponse> {
    return this.client.sendOperationRequest(
      { scope, viewName, options },
      getByScopeOperationSpec
    );
  }

  /**
   * The operation to create or update a view. Update operation requires latest eTag to be set in the
   * request. You may obtain the latest eTag by performing a get operation. Create operation does not
   * require eTag.
   * @param scope The scope associated with view operations. This includes
   *              'subscriptions/{subscriptionId}' for subscription scope,
   *              'subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}' for resourceGroup scope,
   *              'providers/Microsoft.Billing/billingAccounts/{billingAccountId}' for Billing Account scope,
   *              'providers/Microsoft.Billing/billingAccounts/{billingAccountId}/departments/{departmentId}' for
   *              Department scope,
   *              'providers/Microsoft.Billing/billingAccounts/{billingAccountId}/enrollmentAccounts/{enrollmentAccountId}'
   *              for EnrollmentAccount scope,
   *              'providers/Microsoft.Billing/billingAccounts/{billingAccountId}/billingProfiles/{billingProfileId}'
   *              for BillingProfile scope,
   *              'providers/Microsoft.Billing/billingAccounts/{billingAccountId}/invoiceSections/{invoiceSectionId}'
   *              for InvoiceSection scope, 'providers/Microsoft.Management/managementGroups/{managementGroupId}' for
   *              Management Group scope,
   *              'providers/Microsoft.CostManagement/externalBillingAccounts/{externalBillingAccountName}' for
   *              External Billing Account scope and
   *              'providers/Microsoft.CostManagement/externalSubscriptions/{externalSubscriptionName}' for External
   *              Subscription scope.
   * @param viewName View name
   * @param parameters Parameters supplied to the CreateOrUpdate View operation.
   * @param options The options parameters.
   */
  createOrUpdateByScope(
    scope: string,
    viewName: string,
    parameters: View,
    options?: ViewsCreateOrUpdateByScopeOptionalParams
  ): Promise<ViewsCreateOrUpdateByScopeResponse> {
    return this.client.sendOperationRequest(
      { scope, viewName, parameters, options },
      createOrUpdateByScopeOperationSpec
    );
  }

  /**
   * The operation to delete a view.
   * @param scope The scope associated with view operations. This includes
   *              'subscriptions/{subscriptionId}' for subscription scope,
   *              'subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}' for resourceGroup scope,
   *              'providers/Microsoft.Billing/billingAccounts/{billingAccountId}' for Billing Account scope,
   *              'providers/Microsoft.Billing/billingAccounts/{billingAccountId}/departments/{departmentId}' for
   *              Department scope,
   *              'providers/Microsoft.Billing/billingAccounts/{billingAccountId}/enrollmentAccounts/{enrollmentAccountId}'
   *              for EnrollmentAccount scope,
   *              'providers/Microsoft.Billing/billingAccounts/{billingAccountId}/billingProfiles/{billingProfileId}'
   *              for BillingProfile scope,
   *              'providers/Microsoft.Billing/billingAccounts/{billingAccountId}/invoiceSections/{invoiceSectionId}'
   *              for InvoiceSection scope, 'providers/Microsoft.Management/managementGroups/{managementGroupId}' for
   *              Management Group scope,
   *              'providers/Microsoft.CostManagement/externalBillingAccounts/{externalBillingAccountName}' for
   *              External Billing Account scope and
   *              'providers/Microsoft.CostManagement/externalSubscriptions/{externalSubscriptionName}' for External
   *              Subscription scope.
   * @param viewName View name
   * @param options The options parameters.
   */
  deleteByScope(
    scope: string,
    viewName: string,
    options?: ViewsDeleteByScopeOptionalParams
  ): Promise<void> {
    return this.client.sendOperationRequest(
      { scope, viewName, options },
      deleteByScopeOperationSpec
    );
  }

  /**
   * ListNext
   * @param nextLink The nextLink from the previous successful call to the List method.
   * @param options The options parameters.
   */
  private _listNext(
    nextLink: string,
    options?: ViewsListNextOptionalParams
  ): Promise<ViewsListNextResponse> {
    return this.client.sendOperationRequest(
      { nextLink, options },
      listNextOperationSpec
    );
  }

  /**
   * ListByScopeNext
   * @param scope The scope associated with view operations. This includes
   *              'subscriptions/{subscriptionId}' for subscription scope,
   *              'subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}' for resourceGroup scope,
   *              'providers/Microsoft.Billing/billingAccounts/{billingAccountId}' for Billing Account scope,
   *              'providers/Microsoft.Billing/billingAccounts/{billingAccountId}/departments/{departmentId}' for
   *              Department scope,
   *              'providers/Microsoft.Billing/billingAccounts/{billingAccountId}/enrollmentAccounts/{enrollmentAccountId}'
   *              for EnrollmentAccount scope,
   *              'providers/Microsoft.Billing/billingAccounts/{billingAccountId}/billingProfiles/{billingProfileId}'
   *              for BillingProfile scope,
   *              'providers/Microsoft.Billing/billingAccounts/{billingAccountId}/invoiceSections/{invoiceSectionId}'
   *              for InvoiceSection scope, 'providers/Microsoft.Management/managementGroups/{managementGroupId}' for
   *              Management Group scope,
   *              'providers/Microsoft.CostManagement/externalBillingAccounts/{externalBillingAccountName}' for
   *              External Billing Account scope and
   *              'providers/Microsoft.CostManagement/externalSubscriptions/{externalSubscriptionName}' for External
   *              Subscription scope.
   * @param nextLink The nextLink from the previous successful call to the ListByScope method.
   * @param options The options parameters.
   */
  private _listByScopeNext(
    scope: string,
    nextLink: string,
    options?: ViewsListByScopeNextOptionalParams
  ): Promise<ViewsListByScopeNextResponse> {
    return this.client.sendOperationRequest(
      { scope, nextLink, options },
      listByScopeNextOperationSpec
    );
  }
}
// Operation Specifications
const serializer = coreClient.createSerializer(Mappers, /* isXml */ false);

const listOperationSpec: coreClient.OperationSpec = {
  path: "/providers/Microsoft.CostManagement/views",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.ViewListResult
    },
    default: {
      bodyMapper: Mappers.ErrorResponse
    }
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [Parameters.$host],
  headerParameters: [Parameters.accept],
  serializer
};
const listByScopeOperationSpec: coreClient.OperationSpec = {
  path: "/{scope}/providers/Microsoft.CostManagement/views",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.ViewListResult
    },
    default: {
      bodyMapper: Mappers.ErrorResponse
    }
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [Parameters.$host, Parameters.scope],
  headerParameters: [Parameters.accept],
  serializer
};
const getOperationSpec: coreClient.OperationSpec = {
  path: "/providers/Microsoft.CostManagement/views/{viewName}",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.View
    },
    default: {
      bodyMapper: Mappers.ErrorResponse
    }
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [Parameters.$host, Parameters.viewName],
  headerParameters: [Parameters.accept],
  serializer
};
const createOrUpdateOperationSpec: coreClient.OperationSpec = {
  path: "/providers/Microsoft.CostManagement/views/{viewName}",
  httpMethod: "PUT",
  responses: {
    200: {
      bodyMapper: Mappers.View
    },
    201: {
      bodyMapper: Mappers.View
    },
    default: {
      bodyMapper: Mappers.ErrorResponse
    }
  },
  requestBody: Parameters.parameters,
  queryParameters: [Parameters.apiVersion],
  urlParameters: [Parameters.$host, Parameters.viewName],
  headerParameters: [Parameters.accept, Parameters.contentType],
  mediaType: "json",
  serializer
};
const deleteOperationSpec: coreClient.OperationSpec = {
  path: "/providers/Microsoft.CostManagement/views/{viewName}",
  httpMethod: "DELETE",
  responses: {
    200: {},
    204: {},
    default: {
      bodyMapper: Mappers.ErrorResponse
    }
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [Parameters.$host, Parameters.viewName],
  headerParameters: [Parameters.accept],
  serializer
};
const getByScopeOperationSpec: coreClient.OperationSpec = {
  path: "/{scope}/providers/Microsoft.CostManagement/views/{viewName}",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.View
    },
    default: {
      bodyMapper: Mappers.ErrorResponse
    }
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [Parameters.$host, Parameters.scope, Parameters.viewName],
  headerParameters: [Parameters.accept],
  serializer
};
const createOrUpdateByScopeOperationSpec: coreClient.OperationSpec = {
  path: "/{scope}/providers/Microsoft.CostManagement/views/{viewName}",
  httpMethod: "PUT",
  responses: {
    200: {
      bodyMapper: Mappers.View
    },
    201: {
      bodyMapper: Mappers.View
    },
    default: {
      bodyMapper: Mappers.ErrorResponse
    }
  },
  requestBody: Parameters.parameters,
  queryParameters: [Parameters.apiVersion],
  urlParameters: [Parameters.$host, Parameters.scope, Parameters.viewName],
  headerParameters: [Parameters.accept, Parameters.contentType],
  mediaType: "json",
  serializer
};
const deleteByScopeOperationSpec: coreClient.OperationSpec = {
  path: "/{scope}/providers/Microsoft.CostManagement/views/{viewName}",
  httpMethod: "DELETE",
  responses: {
    200: {},
    204: {},
    default: {
      bodyMapper: Mappers.ErrorResponse
    }
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [Parameters.$host, Parameters.scope, Parameters.viewName],
  headerParameters: [Parameters.accept],
  serializer
};
const listNextOperationSpec: coreClient.OperationSpec = {
  path: "{nextLink}",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.ViewListResult
    },
    default: {
      bodyMapper: Mappers.ErrorResponse
    }
  },
  urlParameters: [Parameters.$host, Parameters.nextLink],
  headerParameters: [Parameters.accept],
  serializer
};
const listByScopeNextOperationSpec: coreClient.OperationSpec = {
  path: "{nextLink}",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.ViewListResult
    },
    default: {
      bodyMapper: Mappers.ErrorResponse
    }
  },
  urlParameters: [Parameters.$host, Parameters.nextLink, Parameters.scope],
  headerParameters: [Parameters.accept],
  serializer
};
