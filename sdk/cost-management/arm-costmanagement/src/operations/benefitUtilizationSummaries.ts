/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */

import { PagedAsyncIterableIterator, PageSettings } from "@azure/core-paging";
import { setContinuationToken } from "../pagingHelper";
import { BenefitUtilizationSummaries } from "../operationsInterfaces";
import * as coreClient from "@azure/core-client";
import * as Mappers from "../models/mappers";
import * as Parameters from "../models/parameters";
import { CostManagementClient } from "../costManagementClient";
import {
  BenefitUtilizationSummaryUnion,
  BenefitUtilizationSummariesListByBillingAccountIdNextOptionalParams,
  BenefitUtilizationSummariesListByBillingAccountIdOptionalParams,
  BenefitUtilizationSummariesListByBillingAccountIdResponse,
  BenefitUtilizationSummariesListByBillingProfileIdNextOptionalParams,
  BenefitUtilizationSummariesListByBillingProfileIdOptionalParams,
  BenefitUtilizationSummariesListByBillingProfileIdResponse,
  BenefitUtilizationSummariesListBySavingsPlanOrderNextOptionalParams,
  BenefitUtilizationSummariesListBySavingsPlanOrderOptionalParams,
  BenefitUtilizationSummariesListBySavingsPlanOrderResponse,
  BenefitUtilizationSummariesListBySavingsPlanIdNextOptionalParams,
  BenefitUtilizationSummariesListBySavingsPlanIdOptionalParams,
  BenefitUtilizationSummariesListBySavingsPlanIdResponse,
  BenefitUtilizationSummariesListByBillingAccountIdNextResponse,
  BenefitUtilizationSummariesListByBillingProfileIdNextResponse,
  BenefitUtilizationSummariesListBySavingsPlanOrderNextResponse,
  BenefitUtilizationSummariesListBySavingsPlanIdNextResponse
} from "../models";

/// <reference lib="esnext.asynciterable" />
/** Class containing BenefitUtilizationSummaries operations. */
export class BenefitUtilizationSummariesImpl
  implements BenefitUtilizationSummaries {
  private readonly client: CostManagementClient;

  /**
   * Initialize a new instance of the class BenefitUtilizationSummaries class.
   * @param client Reference to the service client
   */
  constructor(client: CostManagementClient) {
    this.client = client;
  }

  /**
   * Lists savings plan utilization summaries for the enterprise agreement scope. Supported at grain
   * values: 'Daily' and 'Monthly'.
   * @param billingAccountId Billing account ID
   * @param options The options parameters.
   */
  public listByBillingAccountId(
    billingAccountId: string,
    options?: BenefitUtilizationSummariesListByBillingAccountIdOptionalParams
  ): PagedAsyncIterableIterator<BenefitUtilizationSummaryUnion> {
    const iter = this.listByBillingAccountIdPagingAll(
      billingAccountId,
      options
    );
    return {
      next() {
        return iter.next();
      },
      [Symbol.asyncIterator]() {
        return this;
      },
      byPage: (settings?: PageSettings) => {
        if (settings?.maxPageSize) {
          throw new Error("maxPageSize is not supported by this operation.");
        }
        return this.listByBillingAccountIdPagingPage(
          billingAccountId,
          options,
          settings
        );
      }
    };
  }

  private async *listByBillingAccountIdPagingPage(
    billingAccountId: string,
    options?: BenefitUtilizationSummariesListByBillingAccountIdOptionalParams,
    settings?: PageSettings
  ): AsyncIterableIterator<BenefitUtilizationSummaryUnion[]> {
    let result: BenefitUtilizationSummariesListByBillingAccountIdResponse;
    let continuationToken = settings?.continuationToken;
    if (!continuationToken) {
      result = await this._listByBillingAccountId(billingAccountId, options);
      let page = result.value || [];
      continuationToken = result.nextLink;
      setContinuationToken(page, continuationToken);
      yield page;
    }
    while (continuationToken) {
      result = await this._listByBillingAccountIdNext(
        billingAccountId,
        continuationToken,
        options
      );
      continuationToken = result.nextLink;
      let page = result.value || [];
      setContinuationToken(page, continuationToken);
      yield page;
    }
  }

  private async *listByBillingAccountIdPagingAll(
    billingAccountId: string,
    options?: BenefitUtilizationSummariesListByBillingAccountIdOptionalParams
  ): AsyncIterableIterator<BenefitUtilizationSummaryUnion> {
    for await (const page of this.listByBillingAccountIdPagingPage(
      billingAccountId,
      options
    )) {
      yield* page;
    }
  }

  /**
   * Lists savings plan utilization summaries for billing profile. Supported at grain values: 'Daily' and
   * 'Monthly'.
   * @param billingAccountId Billing account ID
   * @param billingProfileId Billing profile ID.
   * @param options The options parameters.
   */
  public listByBillingProfileId(
    billingAccountId: string,
    billingProfileId: string,
    options?: BenefitUtilizationSummariesListByBillingProfileIdOptionalParams
  ): PagedAsyncIterableIterator<BenefitUtilizationSummaryUnion> {
    const iter = this.listByBillingProfileIdPagingAll(
      billingAccountId,
      billingProfileId,
      options
    );
    return {
      next() {
        return iter.next();
      },
      [Symbol.asyncIterator]() {
        return this;
      },
      byPage: (settings?: PageSettings) => {
        if (settings?.maxPageSize) {
          throw new Error("maxPageSize is not supported by this operation.");
        }
        return this.listByBillingProfileIdPagingPage(
          billingAccountId,
          billingProfileId,
          options,
          settings
        );
      }
    };
  }

  private async *listByBillingProfileIdPagingPage(
    billingAccountId: string,
    billingProfileId: string,
    options?: BenefitUtilizationSummariesListByBillingProfileIdOptionalParams,
    settings?: PageSettings
  ): AsyncIterableIterator<BenefitUtilizationSummaryUnion[]> {
    let result: BenefitUtilizationSummariesListByBillingProfileIdResponse;
    let continuationToken = settings?.continuationToken;
    if (!continuationToken) {
      result = await this._listByBillingProfileId(
        billingAccountId,
        billingProfileId,
        options
      );
      let page = result.value || [];
      continuationToken = result.nextLink;
      setContinuationToken(page, continuationToken);
      yield page;
    }
    while (continuationToken) {
      result = await this._listByBillingProfileIdNext(
        billingAccountId,
        billingProfileId,
        continuationToken,
        options
      );
      continuationToken = result.nextLink;
      let page = result.value || [];
      setContinuationToken(page, continuationToken);
      yield page;
    }
  }

  private async *listByBillingProfileIdPagingAll(
    billingAccountId: string,
    billingProfileId: string,
    options?: BenefitUtilizationSummariesListByBillingProfileIdOptionalParams
  ): AsyncIterableIterator<BenefitUtilizationSummaryUnion> {
    for await (const page of this.listByBillingProfileIdPagingPage(
      billingAccountId,
      billingProfileId,
      options
    )) {
      yield* page;
    }
  }

  /**
   * Lists the savings plan utilization summaries for daily or monthly grain.
   * @param savingsPlanOrderId Savings plan order ID.
   * @param options The options parameters.
   */
  public listBySavingsPlanOrder(
    savingsPlanOrderId: string,
    options?: BenefitUtilizationSummariesListBySavingsPlanOrderOptionalParams
  ): PagedAsyncIterableIterator<BenefitUtilizationSummaryUnion> {
    const iter = this.listBySavingsPlanOrderPagingAll(
      savingsPlanOrderId,
      options
    );
    return {
      next() {
        return iter.next();
      },
      [Symbol.asyncIterator]() {
        return this;
      },
      byPage: (settings?: PageSettings) => {
        if (settings?.maxPageSize) {
          throw new Error("maxPageSize is not supported by this operation.");
        }
        return this.listBySavingsPlanOrderPagingPage(
          savingsPlanOrderId,
          options,
          settings
        );
      }
    };
  }

  private async *listBySavingsPlanOrderPagingPage(
    savingsPlanOrderId: string,
    options?: BenefitUtilizationSummariesListBySavingsPlanOrderOptionalParams,
    settings?: PageSettings
  ): AsyncIterableIterator<BenefitUtilizationSummaryUnion[]> {
    let result: BenefitUtilizationSummariesListBySavingsPlanOrderResponse;
    let continuationToken = settings?.continuationToken;
    if (!continuationToken) {
      result = await this._listBySavingsPlanOrder(savingsPlanOrderId, options);
      let page = result.value || [];
      continuationToken = result.nextLink;
      setContinuationToken(page, continuationToken);
      yield page;
    }
    while (continuationToken) {
      result = await this._listBySavingsPlanOrderNext(
        savingsPlanOrderId,
        continuationToken,
        options
      );
      continuationToken = result.nextLink;
      let page = result.value || [];
      setContinuationToken(page, continuationToken);
      yield page;
    }
  }

  private async *listBySavingsPlanOrderPagingAll(
    savingsPlanOrderId: string,
    options?: BenefitUtilizationSummariesListBySavingsPlanOrderOptionalParams
  ): AsyncIterableIterator<BenefitUtilizationSummaryUnion> {
    for await (const page of this.listBySavingsPlanOrderPagingPage(
      savingsPlanOrderId,
      options
    )) {
      yield* page;
    }
  }

  /**
   * Lists the savings plan utilization summaries for daily or monthly grain.
   * @param savingsPlanOrderId Savings plan order ID.
   * @param savingsPlanId Savings plan ID.
   * @param options The options parameters.
   */
  public listBySavingsPlanId(
    savingsPlanOrderId: string,
    savingsPlanId: string,
    options?: BenefitUtilizationSummariesListBySavingsPlanIdOptionalParams
  ): PagedAsyncIterableIterator<BenefitUtilizationSummaryUnion> {
    const iter = this.listBySavingsPlanIdPagingAll(
      savingsPlanOrderId,
      savingsPlanId,
      options
    );
    return {
      next() {
        return iter.next();
      },
      [Symbol.asyncIterator]() {
        return this;
      },
      byPage: (settings?: PageSettings) => {
        if (settings?.maxPageSize) {
          throw new Error("maxPageSize is not supported by this operation.");
        }
        return this.listBySavingsPlanIdPagingPage(
          savingsPlanOrderId,
          savingsPlanId,
          options,
          settings
        );
      }
    };
  }

  private async *listBySavingsPlanIdPagingPage(
    savingsPlanOrderId: string,
    savingsPlanId: string,
    options?: BenefitUtilizationSummariesListBySavingsPlanIdOptionalParams,
    settings?: PageSettings
  ): AsyncIterableIterator<BenefitUtilizationSummaryUnion[]> {
    let result: BenefitUtilizationSummariesListBySavingsPlanIdResponse;
    let continuationToken = settings?.continuationToken;
    if (!continuationToken) {
      result = await this._listBySavingsPlanId(
        savingsPlanOrderId,
        savingsPlanId,
        options
      );
      let page = result.value || [];
      continuationToken = result.nextLink;
      setContinuationToken(page, continuationToken);
      yield page;
    }
    while (continuationToken) {
      result = await this._listBySavingsPlanIdNext(
        savingsPlanOrderId,
        savingsPlanId,
        continuationToken,
        options
      );
      continuationToken = result.nextLink;
      let page = result.value || [];
      setContinuationToken(page, continuationToken);
      yield page;
    }
  }

  private async *listBySavingsPlanIdPagingAll(
    savingsPlanOrderId: string,
    savingsPlanId: string,
    options?: BenefitUtilizationSummariesListBySavingsPlanIdOptionalParams
  ): AsyncIterableIterator<BenefitUtilizationSummaryUnion> {
    for await (const page of this.listBySavingsPlanIdPagingPage(
      savingsPlanOrderId,
      savingsPlanId,
      options
    )) {
      yield* page;
    }
  }

  /**
   * Lists savings plan utilization summaries for the enterprise agreement scope. Supported at grain
   * values: 'Daily' and 'Monthly'.
   * @param billingAccountId Billing account ID
   * @param options The options parameters.
   */
  private _listByBillingAccountId(
    billingAccountId: string,
    options?: BenefitUtilizationSummariesListByBillingAccountIdOptionalParams
  ): Promise<BenefitUtilizationSummariesListByBillingAccountIdResponse> {
    return this.client.sendOperationRequest(
      { billingAccountId, options },
      listByBillingAccountIdOperationSpec
    );
  }

  /**
   * Lists savings plan utilization summaries for billing profile. Supported at grain values: 'Daily' and
   * 'Monthly'.
   * @param billingAccountId Billing account ID
   * @param billingProfileId Billing profile ID.
   * @param options The options parameters.
   */
  private _listByBillingProfileId(
    billingAccountId: string,
    billingProfileId: string,
    options?: BenefitUtilizationSummariesListByBillingProfileIdOptionalParams
  ): Promise<BenefitUtilizationSummariesListByBillingProfileIdResponse> {
    return this.client.sendOperationRequest(
      { billingAccountId, billingProfileId, options },
      listByBillingProfileIdOperationSpec
    );
  }

  /**
   * Lists the savings plan utilization summaries for daily or monthly grain.
   * @param savingsPlanOrderId Savings plan order ID.
   * @param options The options parameters.
   */
  private _listBySavingsPlanOrder(
    savingsPlanOrderId: string,
    options?: BenefitUtilizationSummariesListBySavingsPlanOrderOptionalParams
  ): Promise<BenefitUtilizationSummariesListBySavingsPlanOrderResponse> {
    return this.client.sendOperationRequest(
      { savingsPlanOrderId, options },
      listBySavingsPlanOrderOperationSpec
    );
  }

  /**
   * Lists the savings plan utilization summaries for daily or monthly grain.
   * @param savingsPlanOrderId Savings plan order ID.
   * @param savingsPlanId Savings plan ID.
   * @param options The options parameters.
   */
  private _listBySavingsPlanId(
    savingsPlanOrderId: string,
    savingsPlanId: string,
    options?: BenefitUtilizationSummariesListBySavingsPlanIdOptionalParams
  ): Promise<BenefitUtilizationSummariesListBySavingsPlanIdResponse> {
    return this.client.sendOperationRequest(
      { savingsPlanOrderId, savingsPlanId, options },
      listBySavingsPlanIdOperationSpec
    );
  }

  /**
   * ListByBillingAccountIdNext
   * @param billingAccountId Billing account ID
   * @param nextLink The nextLink from the previous successful call to the ListByBillingAccountId method.
   * @param options The options parameters.
   */
  private _listByBillingAccountIdNext(
    billingAccountId: string,
    nextLink: string,
    options?: BenefitUtilizationSummariesListByBillingAccountIdNextOptionalParams
  ): Promise<BenefitUtilizationSummariesListByBillingAccountIdNextResponse> {
    return this.client.sendOperationRequest(
      { billingAccountId, nextLink, options },
      listByBillingAccountIdNextOperationSpec
    );
  }

  /**
   * ListByBillingProfileIdNext
   * @param billingAccountId Billing account ID
   * @param billingProfileId Billing profile ID.
   * @param nextLink The nextLink from the previous successful call to the ListByBillingProfileId method.
   * @param options The options parameters.
   */
  private _listByBillingProfileIdNext(
    billingAccountId: string,
    billingProfileId: string,
    nextLink: string,
    options?: BenefitUtilizationSummariesListByBillingProfileIdNextOptionalParams
  ): Promise<BenefitUtilizationSummariesListByBillingProfileIdNextResponse> {
    return this.client.sendOperationRequest(
      { billingAccountId, billingProfileId, nextLink, options },
      listByBillingProfileIdNextOperationSpec
    );
  }

  /**
   * ListBySavingsPlanOrderNext
   * @param savingsPlanOrderId Savings plan order ID.
   * @param nextLink The nextLink from the previous successful call to the ListBySavingsPlanOrder method.
   * @param options The options parameters.
   */
  private _listBySavingsPlanOrderNext(
    savingsPlanOrderId: string,
    nextLink: string,
    options?: BenefitUtilizationSummariesListBySavingsPlanOrderNextOptionalParams
  ): Promise<BenefitUtilizationSummariesListBySavingsPlanOrderNextResponse> {
    return this.client.sendOperationRequest(
      { savingsPlanOrderId, nextLink, options },
      listBySavingsPlanOrderNextOperationSpec
    );
  }

  /**
   * ListBySavingsPlanIdNext
   * @param savingsPlanOrderId Savings plan order ID.
   * @param savingsPlanId Savings plan ID.
   * @param nextLink The nextLink from the previous successful call to the ListBySavingsPlanId method.
   * @param options The options parameters.
   */
  private _listBySavingsPlanIdNext(
    savingsPlanOrderId: string,
    savingsPlanId: string,
    nextLink: string,
    options?: BenefitUtilizationSummariesListBySavingsPlanIdNextOptionalParams
  ): Promise<BenefitUtilizationSummariesListBySavingsPlanIdNextResponse> {
    return this.client.sendOperationRequest(
      { savingsPlanOrderId, savingsPlanId, nextLink, options },
      listBySavingsPlanIdNextOperationSpec
    );
  }
}
// Operation Specifications
const serializer = coreClient.createSerializer(Mappers, /* isXml */ false);

const listByBillingAccountIdOperationSpec: coreClient.OperationSpec = {
  path:
    "/providers/Microsoft.Billing/billingAccounts/{billingAccountId}/providers/Microsoft.CostManagement/benefitUtilizationSummaries",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.BenefitUtilizationSummariesListResult
    },
    default: {
      bodyMapper: Mappers.ErrorResponse
    }
  },
  queryParameters: [
    Parameters.apiVersion,
    Parameters.grainParameter,
    Parameters.filter1
  ],
  urlParameters: [Parameters.$host, Parameters.billingAccountId],
  headerParameters: [Parameters.accept],
  serializer
};
const listByBillingProfileIdOperationSpec: coreClient.OperationSpec = {
  path:
    "/providers/Microsoft.Billing/billingAccounts/{billingAccountId}/billingProfiles/{billingProfileId}/providers/Microsoft.CostManagement/benefitUtilizationSummaries",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.BenefitUtilizationSummariesListResult
    },
    default: {
      bodyMapper: Mappers.ErrorResponse
    }
  },
  queryParameters: [
    Parameters.apiVersion,
    Parameters.grainParameter,
    Parameters.filter1
  ],
  urlParameters: [
    Parameters.$host,
    Parameters.billingAccountId,
    Parameters.billingProfileId
  ],
  headerParameters: [Parameters.accept],
  serializer
};
const listBySavingsPlanOrderOperationSpec: coreClient.OperationSpec = {
  path:
    "/providers/Microsoft.BillingBenefits/savingsPlanOrders/{savingsPlanOrderId}/providers/Microsoft.CostManagement/benefitUtilizationSummaries",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.BenefitUtilizationSummariesListResult
    },
    default: {
      bodyMapper: Mappers.ErrorResponse
    }
  },
  queryParameters: [
    Parameters.apiVersion,
    Parameters.filter,
    Parameters.grainParameter
  ],
  urlParameters: [Parameters.$host, Parameters.savingsPlanOrderId],
  headerParameters: [Parameters.accept],
  serializer
};
const listBySavingsPlanIdOperationSpec: coreClient.OperationSpec = {
  path:
    "/providers/Microsoft.BillingBenefits/savingsPlanOrders/{savingsPlanOrderId}/savingsPlans/{savingsPlanId}/providers/Microsoft.CostManagement/benefitUtilizationSummaries",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.BenefitUtilizationSummariesListResult
    },
    default: {
      bodyMapper: Mappers.ErrorResponse
    }
  },
  queryParameters: [
    Parameters.apiVersion,
    Parameters.filter,
    Parameters.grainParameter
  ],
  urlParameters: [
    Parameters.$host,
    Parameters.savingsPlanOrderId,
    Parameters.savingsPlanId
  ],
  headerParameters: [Parameters.accept],
  serializer
};
const listByBillingAccountIdNextOperationSpec: coreClient.OperationSpec = {
  path: "{nextLink}",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.BenefitUtilizationSummariesListResult
    },
    default: {
      bodyMapper: Mappers.ErrorResponse
    }
  },
  urlParameters: [
    Parameters.$host,
    Parameters.nextLink,
    Parameters.billingAccountId
  ],
  headerParameters: [Parameters.accept],
  serializer
};
const listByBillingProfileIdNextOperationSpec: coreClient.OperationSpec = {
  path: "{nextLink}",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.BenefitUtilizationSummariesListResult
    },
    default: {
      bodyMapper: Mappers.ErrorResponse
    }
  },
  urlParameters: [
    Parameters.$host,
    Parameters.nextLink,
    Parameters.billingAccountId,
    Parameters.billingProfileId
  ],
  headerParameters: [Parameters.accept],
  serializer
};
const listBySavingsPlanOrderNextOperationSpec: coreClient.OperationSpec = {
  path: "{nextLink}",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.BenefitUtilizationSummariesListResult
    },
    default: {
      bodyMapper: Mappers.ErrorResponse
    }
  },
  urlParameters: [
    Parameters.$host,
    Parameters.nextLink,
    Parameters.savingsPlanOrderId
  ],
  headerParameters: [Parameters.accept],
  serializer
};
const listBySavingsPlanIdNextOperationSpec: coreClient.OperationSpec = {
  path: "{nextLink}",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.BenefitUtilizationSummariesListResult
    },
    default: {
      bodyMapper: Mappers.ErrorResponse
    }
  },
  urlParameters: [
    Parameters.$host,
    Parameters.nextLink,
    Parameters.savingsPlanOrderId,
    Parameters.savingsPlanId
  ],
  headerParameters: [Parameters.accept],
  serializer
};
