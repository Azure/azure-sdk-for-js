/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */

import { GenerateReservationDetailsReport } from "../operationsInterfaces";
import * as coreClient from "@azure/core-client";
import * as Mappers from "../models/mappers";
import * as Parameters from "../models/parameters";
import { CostManagementClient } from "../costManagementClient";
import {
  SimplePollerLike,
  OperationState,
  createHttpPoller
} from "@azure/core-lro";
import { createLroSpec } from "../lroImpl";
import {
  GenerateReservationDetailsReportByBillingAccountIdOptionalParams,
  GenerateReservationDetailsReportByBillingAccountIdResponse,
  GenerateReservationDetailsReportByBillingProfileIdOptionalParams,
  GenerateReservationDetailsReportByBillingProfileIdResponse
} from "../models";

/** Class containing GenerateReservationDetailsReport operations. */
export class GenerateReservationDetailsReportImpl
  implements GenerateReservationDetailsReport {
  private readonly client: CostManagementClient;

  /**
   * Initialize a new instance of the class GenerateReservationDetailsReport class.
   * @param client Reference to the service client
   */
  constructor(client: CostManagementClient) {
    this.client = client;
  }

  /**
   * Generates the reservations details report for provided date range asynchronously based on enrollment
   * id. The Reservation usage details can be viewed only by certain enterprise roles. For more details
   * on the roles see,
   * https://docs.microsoft.com/azure/cost-management-billing/manage/understand-ea-roles#usage-and-costs-access-by-role
   * @param billingAccountId Enrollment ID (Legacy BillingAccount ID)
   * @param startDate Start Date
   * @param endDate End Date
   * @param options The options parameters.
   */
  async beginByBillingAccountId(
    billingAccountId: string,
    startDate: string,
    endDate: string,
    options?: GenerateReservationDetailsReportByBillingAccountIdOptionalParams
  ): Promise<
    SimplePollerLike<
      OperationState<
        GenerateReservationDetailsReportByBillingAccountIdResponse
      >,
      GenerateReservationDetailsReportByBillingAccountIdResponse
    >
  > {
    const directSendOperation = async (
      args: coreClient.OperationArguments,
      spec: coreClient.OperationSpec
    ): Promise<GenerateReservationDetailsReportByBillingAccountIdResponse> => {
      return this.client.sendOperationRequest(args, spec);
    };
    const sendOperationFn = async (
      args: coreClient.OperationArguments,
      spec: coreClient.OperationSpec
    ) => {
      let currentRawResponse:
        | coreClient.FullOperationResponse
        | undefined = undefined;
      const providedCallback = args.options?.onResponse;
      const callback: coreClient.RawResponseCallback = (
        rawResponse: coreClient.FullOperationResponse,
        flatResponse: unknown
      ) => {
        currentRawResponse = rawResponse;
        providedCallback?.(rawResponse, flatResponse);
      };
      const updatedArgs = {
        ...args,
        options: {
          ...args.options,
          onResponse: callback
        }
      };
      const flatResponse = await directSendOperation(updatedArgs, spec);
      return {
        flatResponse,
        rawResponse: {
          statusCode: currentRawResponse!.status,
          body: currentRawResponse!.parsedBody,
          headers: currentRawResponse!.headers.toJSON()
        }
      };
    };

    const lro = createLroSpec({
      sendOperationFn,
      args: { billingAccountId, startDate, endDate, options },
      spec: byBillingAccountIdOperationSpec
    });
    const poller = await createHttpPoller<
      GenerateReservationDetailsReportByBillingAccountIdResponse,
      OperationState<GenerateReservationDetailsReportByBillingAccountIdResponse>
    >(lro, {
      restoreFrom: options?.resumeFrom,
      intervalInMs: options?.updateIntervalInMs,
      resourceLocationConfig: "location"
    });
    await poller.poll();
    return poller;
  }

  /**
   * Generates the reservations details report for provided date range asynchronously based on enrollment
   * id. The Reservation usage details can be viewed only by certain enterprise roles. For more details
   * on the roles see,
   * https://docs.microsoft.com/azure/cost-management-billing/manage/understand-ea-roles#usage-and-costs-access-by-role
   * @param billingAccountId Enrollment ID (Legacy BillingAccount ID)
   * @param startDate Start Date
   * @param endDate End Date
   * @param options The options parameters.
   */
  async beginByBillingAccountIdAndWait(
    billingAccountId: string,
    startDate: string,
    endDate: string,
    options?: GenerateReservationDetailsReportByBillingAccountIdOptionalParams
  ): Promise<GenerateReservationDetailsReportByBillingAccountIdResponse> {
    const poller = await this.beginByBillingAccountId(
      billingAccountId,
      startDate,
      endDate,
      options
    );
    return poller.pollUntilDone();
  }

  /**
   * Generates the reservations details report for provided date range asynchronously by billing profile.
   * The Reservation usage details can be viewed by only certain enterprise roles by default. For more
   * details on the roles see,
   * https://docs.microsoft.com/azure/cost-management-billing/reservations/reservation-utilization#view-utilization-in-the-azure-portal-with-azure-rbac-access
   * @param billingAccountId Billing account ID
   * @param billingProfileId Billing profile ID.
   * @param startDate Start Date
   * @param endDate End Date
   * @param options The options parameters.
   */
  async beginByBillingProfileId(
    billingAccountId: string,
    billingProfileId: string,
    startDate: string,
    endDate: string,
    options?: GenerateReservationDetailsReportByBillingProfileIdOptionalParams
  ): Promise<
    SimplePollerLike<
      OperationState<
        GenerateReservationDetailsReportByBillingProfileIdResponse
      >,
      GenerateReservationDetailsReportByBillingProfileIdResponse
    >
  > {
    const directSendOperation = async (
      args: coreClient.OperationArguments,
      spec: coreClient.OperationSpec
    ): Promise<GenerateReservationDetailsReportByBillingProfileIdResponse> => {
      return this.client.sendOperationRequest(args, spec);
    };
    const sendOperationFn = async (
      args: coreClient.OperationArguments,
      spec: coreClient.OperationSpec
    ) => {
      let currentRawResponse:
        | coreClient.FullOperationResponse
        | undefined = undefined;
      const providedCallback = args.options?.onResponse;
      const callback: coreClient.RawResponseCallback = (
        rawResponse: coreClient.FullOperationResponse,
        flatResponse: unknown
      ) => {
        currentRawResponse = rawResponse;
        providedCallback?.(rawResponse, flatResponse);
      };
      const updatedArgs = {
        ...args,
        options: {
          ...args.options,
          onResponse: callback
        }
      };
      const flatResponse = await directSendOperation(updatedArgs, spec);
      return {
        flatResponse,
        rawResponse: {
          statusCode: currentRawResponse!.status,
          body: currentRawResponse!.parsedBody,
          headers: currentRawResponse!.headers.toJSON()
        }
      };
    };

    const lro = createLroSpec({
      sendOperationFn,
      args: { billingAccountId, billingProfileId, startDate, endDate, options },
      spec: byBillingProfileIdOperationSpec
    });
    const poller = await createHttpPoller<
      GenerateReservationDetailsReportByBillingProfileIdResponse,
      OperationState<GenerateReservationDetailsReportByBillingProfileIdResponse>
    >(lro, {
      restoreFrom: options?.resumeFrom,
      intervalInMs: options?.updateIntervalInMs,
      resourceLocationConfig: "location"
    });
    await poller.poll();
    return poller;
  }

  /**
   * Generates the reservations details report for provided date range asynchronously by billing profile.
   * The Reservation usage details can be viewed by only certain enterprise roles by default. For more
   * details on the roles see,
   * https://docs.microsoft.com/azure/cost-management-billing/reservations/reservation-utilization#view-utilization-in-the-azure-portal-with-azure-rbac-access
   * @param billingAccountId Billing account ID
   * @param billingProfileId Billing profile ID.
   * @param startDate Start Date
   * @param endDate End Date
   * @param options The options parameters.
   */
  async beginByBillingProfileIdAndWait(
    billingAccountId: string,
    billingProfileId: string,
    startDate: string,
    endDate: string,
    options?: GenerateReservationDetailsReportByBillingProfileIdOptionalParams
  ): Promise<GenerateReservationDetailsReportByBillingProfileIdResponse> {
    const poller = await this.beginByBillingProfileId(
      billingAccountId,
      billingProfileId,
      startDate,
      endDate,
      options
    );
    return poller.pollUntilDone();
  }
}
// Operation Specifications
const serializer = coreClient.createSerializer(Mappers, /* isXml */ false);

const byBillingAccountIdOperationSpec: coreClient.OperationSpec = {
  path:
    "/providers/Microsoft.Billing/billingAccounts/{billingAccountId}/providers/Microsoft.CostManagement/generateReservationDetailsReport",
  httpMethod: "POST",
  responses: {
    200: {
      bodyMapper: Mappers.OperationStatus
    },
    201: {
      bodyMapper: Mappers.OperationStatus
    },
    202: {
      bodyMapper: Mappers.OperationStatus
    },
    204: {
      bodyMapper: Mappers.OperationStatus
    },
    default: {
      bodyMapper: Mappers.ErrorResponse
    }
  },
  queryParameters: [
    Parameters.apiVersion,
    Parameters.startDate,
    Parameters.endDate
  ],
  urlParameters: [Parameters.$host, Parameters.billingAccountId],
  headerParameters: [Parameters.accept],
  serializer
};
const byBillingProfileIdOperationSpec: coreClient.OperationSpec = {
  path:
    "/providers/Microsoft.Billing/billingAccounts/{billingAccountId}/billingProfiles/{billingProfileId}/providers/Microsoft.CostManagement/generateReservationDetailsReport",
  httpMethod: "POST",
  responses: {
    200: {
      bodyMapper: Mappers.OperationStatus
    },
    201: {
      bodyMapper: Mappers.OperationStatus
    },
    202: {
      bodyMapper: Mappers.OperationStatus
    },
    204: {
      bodyMapper: Mappers.OperationStatus
    },
    default: {
      bodyMapper: Mappers.ErrorResponse
    }
  },
  queryParameters: [
    Parameters.apiVersion,
    Parameters.startDate,
    Parameters.endDate
  ],
  urlParameters: [
    Parameters.$host,
    Parameters.billingAccountId,
    Parameters.billingProfileId
  ],
  headerParameters: [Parameters.accept],
  serializer
};
