/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */

import { PagedAsyncIterableIterator, PageSettings } from "@azure/core-paging";
import { setContinuationToken } from "../pagingHelper";
import { BenefitRecommendations } from "../operationsInterfaces";
import * as coreClient from "@azure/core-client";
import * as Mappers from "../models/mappers";
import * as Parameters from "../models/parameters";
import { CostManagementClient } from "../costManagementClient";
import {
  BenefitRecommendationModel,
  BenefitRecommendationsListNextOptionalParams,
  BenefitRecommendationsListOptionalParams,
  BenefitRecommendationsListResponse,
  BenefitRecommendationsListNextResponse
} from "../models";

/// <reference lib="esnext.asynciterable" />
/** Class containing BenefitRecommendations operations. */
export class BenefitRecommendationsImpl implements BenefitRecommendations {
  private readonly client: CostManagementClient;

  /**
   * Initialize a new instance of the class BenefitRecommendations class.
   * @param client Reference to the service client
   */
  constructor(client: CostManagementClient) {
    this.client = client;
  }

  /**
   * List of recommendations for purchasing savings plan.
   * @param billingScope The scope associated with benefit recommendation operations. This includes
   *                     '/subscriptions/{subscriptionId}/' for subscription scope,
   *                     '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}' for resource group scope,
   *                     /providers/Microsoft.Billing/billingAccounts/{billingAccountId}' for enterprise agreement scope, and
   *                     '/providers/Microsoft.Billing/billingAccounts/{billingAccountId}/billingProfiles/{billingProfileId}'
   *                     for billing profile scope
   * @param options The options parameters.
   */
  public list(
    billingScope: string,
    options?: BenefitRecommendationsListOptionalParams
  ): PagedAsyncIterableIterator<BenefitRecommendationModel> {
    const iter = this.listPagingAll(billingScope, options);
    return {
      next() {
        return iter.next();
      },
      [Symbol.asyncIterator]() {
        return this;
      },
      byPage: (settings?: PageSettings) => {
        if (settings?.maxPageSize) {
          throw new Error("maxPageSize is not supported by this operation.");
        }
        return this.listPagingPage(billingScope, options, settings);
      }
    };
  }

  private async *listPagingPage(
    billingScope: string,
    options?: BenefitRecommendationsListOptionalParams,
    settings?: PageSettings
  ): AsyncIterableIterator<BenefitRecommendationModel[]> {
    let result: BenefitRecommendationsListResponse;
    let continuationToken = settings?.continuationToken;
    if (!continuationToken) {
      result = await this._list(billingScope, options);
      let page = result.value || [];
      continuationToken = result.nextLink;
      setContinuationToken(page, continuationToken);
      yield page;
    }
    while (continuationToken) {
      result = await this._listNext(billingScope, continuationToken, options);
      continuationToken = result.nextLink;
      let page = result.value || [];
      setContinuationToken(page, continuationToken);
      yield page;
    }
  }

  private async *listPagingAll(
    billingScope: string,
    options?: BenefitRecommendationsListOptionalParams
  ): AsyncIterableIterator<BenefitRecommendationModel> {
    for await (const page of this.listPagingPage(billingScope, options)) {
      yield* page;
    }
  }

  /**
   * List of recommendations for purchasing savings plan.
   * @param billingScope The scope associated with benefit recommendation operations. This includes
   *                     '/subscriptions/{subscriptionId}/' for subscription scope,
   *                     '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}' for resource group scope,
   *                     /providers/Microsoft.Billing/billingAccounts/{billingAccountId}' for enterprise agreement scope, and
   *                     '/providers/Microsoft.Billing/billingAccounts/{billingAccountId}/billingProfiles/{billingProfileId}'
   *                     for billing profile scope
   * @param options The options parameters.
   */
  private _list(
    billingScope: string,
    options?: BenefitRecommendationsListOptionalParams
  ): Promise<BenefitRecommendationsListResponse> {
    return this.client.sendOperationRequest(
      { billingScope, options },
      listOperationSpec
    );
  }

  /**
   * ListNext
   * @param billingScope The scope associated with benefit recommendation operations. This includes
   *                     '/subscriptions/{subscriptionId}/' for subscription scope,
   *                     '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}' for resource group scope,
   *                     /providers/Microsoft.Billing/billingAccounts/{billingAccountId}' for enterprise agreement scope, and
   *                     '/providers/Microsoft.Billing/billingAccounts/{billingAccountId}/billingProfiles/{billingProfileId}'
   *                     for billing profile scope
   * @param nextLink The nextLink from the previous successful call to the List method.
   * @param options The options parameters.
   */
  private _listNext(
    billingScope: string,
    nextLink: string,
    options?: BenefitRecommendationsListNextOptionalParams
  ): Promise<BenefitRecommendationsListNextResponse> {
    return this.client.sendOperationRequest(
      { billingScope, nextLink, options },
      listNextOperationSpec
    );
  }
}
// Operation Specifications
const serializer = coreClient.createSerializer(Mappers, /* isXml */ false);

const listOperationSpec: coreClient.OperationSpec = {
  path:
    "/{billingScope}/providers/Microsoft.CostManagement/benefitRecommendations",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.BenefitRecommendationsListResult
    },
    default: {
      bodyMapper: Mappers.ErrorResponse
    }
  },
  queryParameters: [
    Parameters.apiVersion,
    Parameters.filter,
    Parameters.expand,
    Parameters.orderby
  ],
  urlParameters: [Parameters.$host, Parameters.billingScope],
  headerParameters: [Parameters.accept],
  serializer
};
const listNextOperationSpec: coreClient.OperationSpec = {
  path: "{nextLink}",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.BenefitRecommendationsListResult
    },
    default: {
      bodyMapper: Mappers.ErrorResponse
    }
  },
  urlParameters: [
    Parameters.$host,
    Parameters.nextLink,
    Parameters.billingScope
  ],
  headerParameters: [Parameters.accept],
  serializer
};
