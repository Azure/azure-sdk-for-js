/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */

import { PagedAsyncIterableIterator, PageSettings } from "@azure/core-paging";
import { setContinuationToken } from "../pagingHelper";
import { ScheduledActions } from "../operationsInterfaces";
import * as coreClient from "@azure/core-client";
import * as Mappers from "../models/mappers";
import * as Parameters from "../models/parameters";
import { CostManagementClient } from "../costManagementClient";
import {
  ScheduledAction,
  ScheduledActionsListNextOptionalParams,
  ScheduledActionsListOptionalParams,
  ScheduledActionsListResponse,
  ScheduledActionsListByScopeNextOptionalParams,
  ScheduledActionsListByScopeOptionalParams,
  ScheduledActionsListByScopeResponse,
  ScheduledActionsCreateOrUpdateOptionalParams,
  ScheduledActionsCreateOrUpdateResponse,
  ScheduledActionsGetOptionalParams,
  ScheduledActionsGetResponse,
  ScheduledActionsDeleteOptionalParams,
  ScheduledActionsCreateOrUpdateByScopeOptionalParams,
  ScheduledActionsCreateOrUpdateByScopeResponse,
  ScheduledActionsGetByScopeOptionalParams,
  ScheduledActionsGetByScopeResponse,
  ScheduledActionsDeleteByScopeOptionalParams,
  ScheduledActionsRunOptionalParams,
  ScheduledActionsRunByScopeOptionalParams,
  CheckNameAvailabilityRequest,
  ScheduledActionsCheckNameAvailabilityOptionalParams,
  ScheduledActionsCheckNameAvailabilityResponse,
  ScheduledActionsCheckNameAvailabilityByScopeOptionalParams,
  ScheduledActionsCheckNameAvailabilityByScopeResponse,
  ScheduledActionsListNextResponse,
  ScheduledActionsListByScopeNextResponse
} from "../models";

/// <reference lib="esnext.asynciterable" />
/** Class containing ScheduledActions operations. */
export class ScheduledActionsImpl implements ScheduledActions {
  private readonly client: CostManagementClient;

  /**
   * Initialize a new instance of the class ScheduledActions class.
   * @param client Reference to the service client
   */
  constructor(client: CostManagementClient) {
    this.client = client;
  }

  /**
   * List all private scheduled actions.
   * @param options The options parameters.
   */
  public list(
    options?: ScheduledActionsListOptionalParams
  ): PagedAsyncIterableIterator<ScheduledAction> {
    const iter = this.listPagingAll(options);
    return {
      next() {
        return iter.next();
      },
      [Symbol.asyncIterator]() {
        return this;
      },
      byPage: (settings?: PageSettings) => {
        if (settings?.maxPageSize) {
          throw new Error("maxPageSize is not supported by this operation.");
        }
        return this.listPagingPage(options, settings);
      }
    };
  }

  private async *listPagingPage(
    options?: ScheduledActionsListOptionalParams,
    settings?: PageSettings
  ): AsyncIterableIterator<ScheduledAction[]> {
    let result: ScheduledActionsListResponse;
    let continuationToken = settings?.continuationToken;
    if (!continuationToken) {
      result = await this._list(options);
      let page = result.value || [];
      continuationToken = result.nextLink;
      setContinuationToken(page, continuationToken);
      yield page;
    }
    while (continuationToken) {
      result = await this._listNext(continuationToken, options);
      continuationToken = result.nextLink;
      let page = result.value || [];
      setContinuationToken(page, continuationToken);
      yield page;
    }
  }

  private async *listPagingAll(
    options?: ScheduledActionsListOptionalParams
  ): AsyncIterableIterator<ScheduledAction> {
    for await (const page of this.listPagingPage(options)) {
      yield* page;
    }
  }

  /**
   * List all shared scheduled actions within the given scope.
   * @param scope The scope associated with scheduled action operations. This includes
   *              'subscriptions/{subscriptionId}' for subscription scope,
   *              'subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}' for resourceGroup scope,
   *              'providers/Microsoft.Billing/billingAccounts/{billingAccountId}' for Billing Account scope,
   *              'providers/Microsoft.Billing/billingAccounts/{billingAccountId}/departments/{departmentId}' for
   *              Department scope,
   *              'providers/Microsoft.Billing/billingAccounts/{billingAccountId}/enrollmentAccounts/{enrollmentAccountId}'
   *              for EnrollmentAccount scope,
   *              'providers/Microsoft.Billing/billingAccounts/{billingAccountId}/billingProfiles/{billingProfileId}'
   *              for BillingProfile scope,
   *              'providers/Microsoft.Billing/billingAccounts/{billingAccountId}/invoiceSections/{invoiceSectionId}'
   *              for InvoiceSection scope,
   *              'providers/Microsoft.CostManagement/externalBillingAccounts/{externalBillingAccountName}' for
   *              External Billing Account scope and
   *              'providers/Microsoft.CostManagement/externalSubscriptions/{externalSubscriptionName}' for External
   *              Subscription scope. Note: Insight Alerts are only available on subscription scope.
   * @param options The options parameters.
   */
  public listByScope(
    scope: string,
    options?: ScheduledActionsListByScopeOptionalParams
  ): PagedAsyncIterableIterator<ScheduledAction> {
    const iter = this.listByScopePagingAll(scope, options);
    return {
      next() {
        return iter.next();
      },
      [Symbol.asyncIterator]() {
        return this;
      },
      byPage: (settings?: PageSettings) => {
        if (settings?.maxPageSize) {
          throw new Error("maxPageSize is not supported by this operation.");
        }
        return this.listByScopePagingPage(scope, options, settings);
      }
    };
  }

  private async *listByScopePagingPage(
    scope: string,
    options?: ScheduledActionsListByScopeOptionalParams,
    settings?: PageSettings
  ): AsyncIterableIterator<ScheduledAction[]> {
    let result: ScheduledActionsListByScopeResponse;
    let continuationToken = settings?.continuationToken;
    if (!continuationToken) {
      result = await this._listByScope(scope, options);
      let page = result.value || [];
      continuationToken = result.nextLink;
      setContinuationToken(page, continuationToken);
      yield page;
    }
    while (continuationToken) {
      result = await this._listByScopeNext(scope, continuationToken, options);
      continuationToken = result.nextLink;
      let page = result.value || [];
      setContinuationToken(page, continuationToken);
      yield page;
    }
  }

  private async *listByScopePagingAll(
    scope: string,
    options?: ScheduledActionsListByScopeOptionalParams
  ): AsyncIterableIterator<ScheduledAction> {
    for await (const page of this.listByScopePagingPage(scope, options)) {
      yield* page;
    }
  }

  /**
   * List all private scheduled actions.
   * @param options The options parameters.
   */
  private _list(
    options?: ScheduledActionsListOptionalParams
  ): Promise<ScheduledActionsListResponse> {
    return this.client.sendOperationRequest({ options }, listOperationSpec);
  }

  /**
   * List all shared scheduled actions within the given scope.
   * @param scope The scope associated with scheduled action operations. This includes
   *              'subscriptions/{subscriptionId}' for subscription scope,
   *              'subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}' for resourceGroup scope,
   *              'providers/Microsoft.Billing/billingAccounts/{billingAccountId}' for Billing Account scope,
   *              'providers/Microsoft.Billing/billingAccounts/{billingAccountId}/departments/{departmentId}' for
   *              Department scope,
   *              'providers/Microsoft.Billing/billingAccounts/{billingAccountId}/enrollmentAccounts/{enrollmentAccountId}'
   *              for EnrollmentAccount scope,
   *              'providers/Microsoft.Billing/billingAccounts/{billingAccountId}/billingProfiles/{billingProfileId}'
   *              for BillingProfile scope,
   *              'providers/Microsoft.Billing/billingAccounts/{billingAccountId}/invoiceSections/{invoiceSectionId}'
   *              for InvoiceSection scope,
   *              'providers/Microsoft.CostManagement/externalBillingAccounts/{externalBillingAccountName}' for
   *              External Billing Account scope and
   *              'providers/Microsoft.CostManagement/externalSubscriptions/{externalSubscriptionName}' for External
   *              Subscription scope. Note: Insight Alerts are only available on subscription scope.
   * @param options The options parameters.
   */
  private _listByScope(
    scope: string,
    options?: ScheduledActionsListByScopeOptionalParams
  ): Promise<ScheduledActionsListByScopeResponse> {
    return this.client.sendOperationRequest(
      { scope, options },
      listByScopeOperationSpec
    );
  }

  /**
   * Create or update a private scheduled action.
   * @param name Scheduled action name.
   * @param scheduledAction Scheduled action to be created or updated.
   * @param options The options parameters.
   */
  createOrUpdate(
    name: string,
    scheduledAction: ScheduledAction,
    options?: ScheduledActionsCreateOrUpdateOptionalParams
  ): Promise<ScheduledActionsCreateOrUpdateResponse> {
    return this.client.sendOperationRequest(
      { name, scheduledAction, options },
      createOrUpdateOperationSpec
    );
  }

  /**
   * Get the private scheduled action by name.
   * @param name Scheduled action name.
   * @param options The options parameters.
   */
  get(
    name: string,
    options?: ScheduledActionsGetOptionalParams
  ): Promise<ScheduledActionsGetResponse> {
    return this.client.sendOperationRequest(
      { name, options },
      getOperationSpec
    );
  }

  /**
   * Delete a private scheduled action.
   * @param name Scheduled action name.
   * @param options The options parameters.
   */
  delete(
    name: string,
    options?: ScheduledActionsDeleteOptionalParams
  ): Promise<void> {
    return this.client.sendOperationRequest(
      { name, options },
      deleteOperationSpec
    );
  }

  /**
   * Create or update a shared scheduled action within the given scope.
   * @param scope The scope associated with scheduled action operations. This includes
   *              'subscriptions/{subscriptionId}' for subscription scope,
   *              'subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}' for resourceGroup scope,
   *              'providers/Microsoft.Billing/billingAccounts/{billingAccountId}' for Billing Account scope,
   *              'providers/Microsoft.Billing/billingAccounts/{billingAccountId}/departments/{departmentId}' for
   *              Department scope,
   *              'providers/Microsoft.Billing/billingAccounts/{billingAccountId}/enrollmentAccounts/{enrollmentAccountId}'
   *              for EnrollmentAccount scope,
   *              'providers/Microsoft.Billing/billingAccounts/{billingAccountId}/billingProfiles/{billingProfileId}'
   *              for BillingProfile scope,
   *              'providers/Microsoft.Billing/billingAccounts/{billingAccountId}/invoiceSections/{invoiceSectionId}'
   *              for InvoiceSection scope,
   *              'providers/Microsoft.CostManagement/externalBillingAccounts/{externalBillingAccountName}' for
   *              External Billing Account scope and
   *              'providers/Microsoft.CostManagement/externalSubscriptions/{externalSubscriptionName}' for External
   *              Subscription scope. Note: Insight Alerts are only available on subscription scope.
   * @param name Scheduled action name.
   * @param scheduledAction Scheduled action to be created or updated.
   * @param options The options parameters.
   */
  createOrUpdateByScope(
    scope: string,
    name: string,
    scheduledAction: ScheduledAction,
    options?: ScheduledActionsCreateOrUpdateByScopeOptionalParams
  ): Promise<ScheduledActionsCreateOrUpdateByScopeResponse> {
    return this.client.sendOperationRequest(
      { scope, name, scheduledAction, options },
      createOrUpdateByScopeOperationSpec
    );
  }

  /**
   * Get the shared scheduled action from the given scope by name.
   * @param scope The scope associated with scheduled action operations. This includes
   *              'subscriptions/{subscriptionId}' for subscription scope,
   *              'subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}' for resourceGroup scope,
   *              'providers/Microsoft.Billing/billingAccounts/{billingAccountId}' for Billing Account scope,
   *              'providers/Microsoft.Billing/billingAccounts/{billingAccountId}/departments/{departmentId}' for
   *              Department scope,
   *              'providers/Microsoft.Billing/billingAccounts/{billingAccountId}/enrollmentAccounts/{enrollmentAccountId}'
   *              for EnrollmentAccount scope,
   *              'providers/Microsoft.Billing/billingAccounts/{billingAccountId}/billingProfiles/{billingProfileId}'
   *              for BillingProfile scope,
   *              'providers/Microsoft.Billing/billingAccounts/{billingAccountId}/invoiceSections/{invoiceSectionId}'
   *              for InvoiceSection scope,
   *              'providers/Microsoft.CostManagement/externalBillingAccounts/{externalBillingAccountName}' for
   *              External Billing Account scope and
   *              'providers/Microsoft.CostManagement/externalSubscriptions/{externalSubscriptionName}' for External
   *              Subscription scope. Note: Insight Alerts are only available on subscription scope.
   * @param name Scheduled action name.
   * @param options The options parameters.
   */
  getByScope(
    scope: string,
    name: string,
    options?: ScheduledActionsGetByScopeOptionalParams
  ): Promise<ScheduledActionsGetByScopeResponse> {
    return this.client.sendOperationRequest(
      { scope, name, options },
      getByScopeOperationSpec
    );
  }

  /**
   * Delete a scheduled action within the given scope.
   * @param scope The scope associated with scheduled action operations. This includes
   *              'subscriptions/{subscriptionId}' for subscription scope,
   *              'subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}' for resourceGroup scope,
   *              'providers/Microsoft.Billing/billingAccounts/{billingAccountId}' for Billing Account scope,
   *              'providers/Microsoft.Billing/billingAccounts/{billingAccountId}/departments/{departmentId}' for
   *              Department scope,
   *              'providers/Microsoft.Billing/billingAccounts/{billingAccountId}/enrollmentAccounts/{enrollmentAccountId}'
   *              for EnrollmentAccount scope,
   *              'providers/Microsoft.Billing/billingAccounts/{billingAccountId}/billingProfiles/{billingProfileId}'
   *              for BillingProfile scope,
   *              'providers/Microsoft.Billing/billingAccounts/{billingAccountId}/invoiceSections/{invoiceSectionId}'
   *              for InvoiceSection scope,
   *              'providers/Microsoft.CostManagement/externalBillingAccounts/{externalBillingAccountName}' for
   *              External Billing Account scope and
   *              'providers/Microsoft.CostManagement/externalSubscriptions/{externalSubscriptionName}' for External
   *              Subscription scope. Note: Insight Alerts are only available on subscription scope.
   * @param name Scheduled action name.
   * @param options The options parameters.
   */
  deleteByScope(
    scope: string,
    name: string,
    options?: ScheduledActionsDeleteByScopeOptionalParams
  ): Promise<void> {
    return this.client.sendOperationRequest(
      { scope, name, options },
      deleteByScopeOperationSpec
    );
  }

  /**
   * Processes a private scheduled action.
   * @param name Scheduled action name.
   * @param options The options parameters.
   */
  run(
    name: string,
    options?: ScheduledActionsRunOptionalParams
  ): Promise<void> {
    return this.client.sendOperationRequest(
      { name, options },
      runOperationSpec
    );
  }

  /**
   * Runs a shared scheduled action within the given scope.
   * @param scope The scope associated with scheduled action operations. This includes
   *              'subscriptions/{subscriptionId}' for subscription scope,
   *              'subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}' for resourceGroup scope,
   *              'providers/Microsoft.Billing/billingAccounts/{billingAccountId}' for Billing Account scope,
   *              'providers/Microsoft.Billing/billingAccounts/{billingAccountId}/departments/{departmentId}' for
   *              Department scope,
   *              'providers/Microsoft.Billing/billingAccounts/{billingAccountId}/enrollmentAccounts/{enrollmentAccountId}'
   *              for EnrollmentAccount scope,
   *              'providers/Microsoft.Billing/billingAccounts/{billingAccountId}/billingProfiles/{billingProfileId}'
   *              for BillingProfile scope,
   *              'providers/Microsoft.Billing/billingAccounts/{billingAccountId}/invoiceSections/{invoiceSectionId}'
   *              for InvoiceSection scope,
   *              'providers/Microsoft.CostManagement/externalBillingAccounts/{externalBillingAccountName}' for
   *              External Billing Account scope and
   *              'providers/Microsoft.CostManagement/externalSubscriptions/{externalSubscriptionName}' for External
   *              Subscription scope. Note: Insight Alerts are only available on subscription scope.
   * @param name Scheduled action name.
   * @param options The options parameters.
   */
  runByScope(
    scope: string,
    name: string,
    options?: ScheduledActionsRunByScopeOptionalParams
  ): Promise<void> {
    return this.client.sendOperationRequest(
      { scope, name, options },
      runByScopeOperationSpec
    );
  }

  /**
   * Checks availability and correctness of the name for a scheduled action.
   * @param checkNameAvailabilityRequest Scheduled action to be created or updated.
   * @param options The options parameters.
   */
  checkNameAvailability(
    checkNameAvailabilityRequest: CheckNameAvailabilityRequest,
    options?: ScheduledActionsCheckNameAvailabilityOptionalParams
  ): Promise<ScheduledActionsCheckNameAvailabilityResponse> {
    return this.client.sendOperationRequest(
      { checkNameAvailabilityRequest, options },
      checkNameAvailabilityOperationSpec
    );
  }

  /**
   * Checks availability and correctness of the name for a scheduled action within the given scope.
   * @param scope The scope associated with scheduled action operations. This includes
   *              'subscriptions/{subscriptionId}' for subscription scope,
   *              'subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}' for resourceGroup scope,
   *              'providers/Microsoft.Billing/billingAccounts/{billingAccountId}' for Billing Account scope,
   *              'providers/Microsoft.Billing/billingAccounts/{billingAccountId}/departments/{departmentId}' for
   *              Department scope,
   *              'providers/Microsoft.Billing/billingAccounts/{billingAccountId}/enrollmentAccounts/{enrollmentAccountId}'
   *              for EnrollmentAccount scope,
   *              'providers/Microsoft.Billing/billingAccounts/{billingAccountId}/billingProfiles/{billingProfileId}'
   *              for BillingProfile scope,
   *              'providers/Microsoft.Billing/billingAccounts/{billingAccountId}/invoiceSections/{invoiceSectionId}'
   *              for InvoiceSection scope,
   *              'providers/Microsoft.CostManagement/externalBillingAccounts/{externalBillingAccountName}' for
   *              External Billing Account scope and
   *              'providers/Microsoft.CostManagement/externalSubscriptions/{externalSubscriptionName}' for External
   *              Subscription scope. Note: Insight Alerts are only available on subscription scope.
   * @param checkNameAvailabilityRequest Scheduled action to be created or updated.
   * @param options The options parameters.
   */
  checkNameAvailabilityByScope(
    scope: string,
    checkNameAvailabilityRequest: CheckNameAvailabilityRequest,
    options?: ScheduledActionsCheckNameAvailabilityByScopeOptionalParams
  ): Promise<ScheduledActionsCheckNameAvailabilityByScopeResponse> {
    return this.client.sendOperationRequest(
      { scope, checkNameAvailabilityRequest, options },
      checkNameAvailabilityByScopeOperationSpec
    );
  }

  /**
   * ListNext
   * @param nextLink The nextLink from the previous successful call to the List method.
   * @param options The options parameters.
   */
  private _listNext(
    nextLink: string,
    options?: ScheduledActionsListNextOptionalParams
  ): Promise<ScheduledActionsListNextResponse> {
    return this.client.sendOperationRequest(
      { nextLink, options },
      listNextOperationSpec
    );
  }

  /**
   * ListByScopeNext
   * @param scope The scope associated with scheduled action operations. This includes
   *              'subscriptions/{subscriptionId}' for subscription scope,
   *              'subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}' for resourceGroup scope,
   *              'providers/Microsoft.Billing/billingAccounts/{billingAccountId}' for Billing Account scope,
   *              'providers/Microsoft.Billing/billingAccounts/{billingAccountId}/departments/{departmentId}' for
   *              Department scope,
   *              'providers/Microsoft.Billing/billingAccounts/{billingAccountId}/enrollmentAccounts/{enrollmentAccountId}'
   *              for EnrollmentAccount scope,
   *              'providers/Microsoft.Billing/billingAccounts/{billingAccountId}/billingProfiles/{billingProfileId}'
   *              for BillingProfile scope,
   *              'providers/Microsoft.Billing/billingAccounts/{billingAccountId}/invoiceSections/{invoiceSectionId}'
   *              for InvoiceSection scope,
   *              'providers/Microsoft.CostManagement/externalBillingAccounts/{externalBillingAccountName}' for
   *              External Billing Account scope and
   *              'providers/Microsoft.CostManagement/externalSubscriptions/{externalSubscriptionName}' for External
   *              Subscription scope. Note: Insight Alerts are only available on subscription scope.
   * @param nextLink The nextLink from the previous successful call to the ListByScope method.
   * @param options The options parameters.
   */
  private _listByScopeNext(
    scope: string,
    nextLink: string,
    options?: ScheduledActionsListByScopeNextOptionalParams
  ): Promise<ScheduledActionsListByScopeNextResponse> {
    return this.client.sendOperationRequest(
      { scope, nextLink, options },
      listByScopeNextOperationSpec
    );
  }
}
// Operation Specifications
const serializer = coreClient.createSerializer(Mappers, /* isXml */ false);

const listOperationSpec: coreClient.OperationSpec = {
  path: "/providers/Microsoft.CostManagement/scheduledActions",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.ScheduledActionListResult
    },
    default: {
      bodyMapper: Mappers.ErrorResponseWithNestedDetails
    }
  },
  queryParameters: [Parameters.apiVersion, Parameters.filter],
  urlParameters: [Parameters.$host],
  headerParameters: [Parameters.accept],
  serializer
};
const listByScopeOperationSpec: coreClient.OperationSpec = {
  path: "/{scope}/providers/Microsoft.CostManagement/scheduledActions",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.ScheduledActionListResult
    },
    default: {
      bodyMapper: Mappers.ErrorResponseWithNestedDetails
    }
  },
  queryParameters: [Parameters.apiVersion, Parameters.filter],
  urlParameters: [Parameters.$host, Parameters.scope],
  headerParameters: [Parameters.accept],
  serializer
};
const createOrUpdateOperationSpec: coreClient.OperationSpec = {
  path: "/providers/Microsoft.CostManagement/scheduledActions/{name}",
  httpMethod: "PUT",
  responses: {
    200: {
      bodyMapper: Mappers.ScheduledAction
    },
    201: {
      bodyMapper: Mappers.ScheduledAction
    },
    default: {
      bodyMapper: Mappers.ErrorResponseWithNestedDetails
    }
  },
  requestBody: Parameters.scheduledAction,
  queryParameters: [Parameters.apiVersion],
  urlParameters: [Parameters.$host, Parameters.name],
  headerParameters: [
    Parameters.accept,
    Parameters.contentType,
    Parameters.ifMatch
  ],
  mediaType: "json",
  serializer
};
const getOperationSpec: coreClient.OperationSpec = {
  path: "/providers/Microsoft.CostManagement/scheduledActions/{name}",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.ScheduledAction
    },
    default: {
      bodyMapper: Mappers.ErrorResponseWithNestedDetails
    }
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [Parameters.$host, Parameters.name],
  headerParameters: [Parameters.accept],
  serializer
};
const deleteOperationSpec: coreClient.OperationSpec = {
  path: "/providers/Microsoft.CostManagement/scheduledActions/{name}",
  httpMethod: "DELETE",
  responses: {
    200: {},
    204: {},
    default: {
      bodyMapper: Mappers.ErrorResponseWithNestedDetails
    }
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [Parameters.$host, Parameters.name],
  headerParameters: [Parameters.accept],
  serializer
};
const createOrUpdateByScopeOperationSpec: coreClient.OperationSpec = {
  path: "/{scope}/providers/Microsoft.CostManagement/scheduledActions/{name}",
  httpMethod: "PUT",
  responses: {
    200: {
      bodyMapper: Mappers.ScheduledAction
    },
    201: {
      bodyMapper: Mappers.ScheduledAction
    },
    default: {
      bodyMapper: Mappers.ErrorResponseWithNestedDetails
    }
  },
  requestBody: Parameters.scheduledAction,
  queryParameters: [Parameters.apiVersion],
  urlParameters: [Parameters.$host, Parameters.scope, Parameters.name],
  headerParameters: [
    Parameters.accept,
    Parameters.contentType,
    Parameters.ifMatch
  ],
  mediaType: "json",
  serializer
};
const getByScopeOperationSpec: coreClient.OperationSpec = {
  path: "/{scope}/providers/Microsoft.CostManagement/scheduledActions/{name}",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.ScheduledAction
    },
    default: {
      bodyMapper: Mappers.ErrorResponseWithNestedDetails
    }
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [Parameters.$host, Parameters.scope, Parameters.name],
  headerParameters: [Parameters.accept],
  serializer
};
const deleteByScopeOperationSpec: coreClient.OperationSpec = {
  path: "/{scope}/providers/Microsoft.CostManagement/scheduledActions/{name}",
  httpMethod: "DELETE",
  responses: {
    200: {},
    204: {},
    default: {
      bodyMapper: Mappers.ErrorResponseWithNestedDetails
    }
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [Parameters.$host, Parameters.scope, Parameters.name],
  headerParameters: [Parameters.accept],
  serializer
};
const runOperationSpec: coreClient.OperationSpec = {
  path: "/providers/Microsoft.CostManagement/scheduledActions/{name}/execute",
  httpMethod: "POST",
  responses: {
    200: {},
    default: {
      bodyMapper: Mappers.ErrorResponseWithNestedDetails
    }
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [Parameters.$host, Parameters.name],
  headerParameters: [Parameters.accept],
  serializer
};
const runByScopeOperationSpec: coreClient.OperationSpec = {
  path:
    "/{scope}/providers/Microsoft.CostManagement/scheduledActions/{name}/execute",
  httpMethod: "POST",
  responses: {
    200: {},
    default: {
      bodyMapper: Mappers.ErrorResponseWithNestedDetails
    }
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [Parameters.$host, Parameters.scope, Parameters.name],
  headerParameters: [Parameters.accept],
  serializer
};
const checkNameAvailabilityOperationSpec: coreClient.OperationSpec = {
  path: "/providers/Microsoft.CostManagement/checkNameAvailability",
  httpMethod: "POST",
  responses: {
    200: {
      bodyMapper: Mappers.CheckNameAvailabilityResponse
    },
    default: {
      bodyMapper: Mappers.ErrorResponseWithNestedDetails
    }
  },
  requestBody: Parameters.checkNameAvailabilityRequest,
  queryParameters: [Parameters.apiVersion],
  urlParameters: [Parameters.$host],
  headerParameters: [Parameters.accept, Parameters.contentType],
  mediaType: "json",
  serializer
};
const checkNameAvailabilityByScopeOperationSpec: coreClient.OperationSpec = {
  path: "/{scope}/providers/Microsoft.CostManagement/checkNameAvailability",
  httpMethod: "POST",
  responses: {
    200: {
      bodyMapper: Mappers.CheckNameAvailabilityResponse
    },
    default: {
      bodyMapper: Mappers.ErrorResponseWithNestedDetails
    }
  },
  requestBody: Parameters.checkNameAvailabilityRequest,
  queryParameters: [Parameters.apiVersion],
  urlParameters: [Parameters.$host, Parameters.scope],
  headerParameters: [Parameters.accept, Parameters.contentType],
  mediaType: "json",
  serializer
};
const listNextOperationSpec: coreClient.OperationSpec = {
  path: "{nextLink}",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.ScheduledActionListResult
    },
    default: {
      bodyMapper: Mappers.ErrorResponseWithNestedDetails
    }
  },
  urlParameters: [Parameters.$host, Parameters.nextLink],
  headerParameters: [Parameters.accept],
  serializer
};
const listByScopeNextOperationSpec: coreClient.OperationSpec = {
  path: "{nextLink}",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.ScheduledActionListResult
    },
    default: {
      bodyMapper: Mappers.ErrorResponseWithNestedDetails
    }
  },
  urlParameters: [Parameters.$host, Parameters.nextLink, Parameters.scope],
  headerParameters: [Parameters.accept],
  serializer
};
