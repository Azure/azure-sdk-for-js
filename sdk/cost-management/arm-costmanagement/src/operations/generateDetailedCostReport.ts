/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */

import { GenerateDetailedCostReport } from "../operationsInterfaces";
import * as coreClient from "@azure/core-client";
import * as Mappers from "../models/mappers";
import * as Parameters from "../models/parameters";
import { CostManagementClient } from "../costManagementClient";
import {
  SimplePollerLike,
  OperationState,
  createHttpPoller
} from "@azure/core-lro";
import { createLroSpec } from "../lroImpl";
import {
  GenerateDetailedCostReportDefinition,
  GenerateDetailedCostReportCreateOperationOptionalParams,
  GenerateDetailedCostReportCreateOperationResponse
} from "../models";

/** Class containing GenerateDetailedCostReport operations. */
export class GenerateDetailedCostReportImpl
  implements GenerateDetailedCostReport {
  private readonly client: CostManagementClient;

  /**
   * Initialize a new instance of the class GenerateDetailedCostReport class.
   * @param client Reference to the service client
   */
  constructor(client: CostManagementClient) {
    this.client = client;
  }

  /**
   * Generates the detailed cost report for provided date range, billing period(only enterprise
   * customers) or Invoice ID asynchronously at a certain scope. Call returns a 202 with header
   * Azure-Consumption-AsyncOperation providing a link to the operation created. A call on the operation
   * will provide the status and if the operation is completed the blob file where generated detailed
   * cost report is being stored.
   * @param scope The ARM Resource ID for subscription, resource group, billing account, or other billing
   *              scopes. For details, see https://aka.ms/costmgmt/scopes.
   * @param parameters Parameters supplied to the Create detailed cost report operation.
   * @param options The options parameters.
   */
  async beginCreateOperation(
    scope: string,
    parameters: GenerateDetailedCostReportDefinition,
    options?: GenerateDetailedCostReportCreateOperationOptionalParams
  ): Promise<
    SimplePollerLike<
      OperationState<GenerateDetailedCostReportCreateOperationResponse>,
      GenerateDetailedCostReportCreateOperationResponse
    >
  > {
    const directSendOperation = async (
      args: coreClient.OperationArguments,
      spec: coreClient.OperationSpec
    ): Promise<GenerateDetailedCostReportCreateOperationResponse> => {
      return this.client.sendOperationRequest(args, spec);
    };
    const sendOperationFn = async (
      args: coreClient.OperationArguments,
      spec: coreClient.OperationSpec
    ) => {
      let currentRawResponse:
        | coreClient.FullOperationResponse
        | undefined = undefined;
      const providedCallback = args.options?.onResponse;
      const callback: coreClient.RawResponseCallback = (
        rawResponse: coreClient.FullOperationResponse,
        flatResponse: unknown
      ) => {
        currentRawResponse = rawResponse;
        providedCallback?.(rawResponse, flatResponse);
      };
      const updatedArgs = {
        ...args,
        options: {
          ...args.options,
          onResponse: callback
        }
      };
      const flatResponse = await directSendOperation(updatedArgs, spec);
      return {
        flatResponse,
        rawResponse: {
          statusCode: currentRawResponse!.status,
          body: currentRawResponse!.parsedBody,
          headers: currentRawResponse!.headers.toJSON()
        }
      };
    };

    const lro = createLroSpec({
      sendOperationFn,
      args: { scope, parameters, options },
      spec: createOperationOperationSpec
    });
    const poller = await createHttpPoller<
      GenerateDetailedCostReportCreateOperationResponse,
      OperationState<GenerateDetailedCostReportCreateOperationResponse>
    >(lro, {
      restoreFrom: options?.resumeFrom,
      intervalInMs: options?.updateIntervalInMs,
      resourceLocationConfig: "location"
    });
    await poller.poll();
    return poller;
  }

  /**
   * Generates the detailed cost report for provided date range, billing period(only enterprise
   * customers) or Invoice ID asynchronously at a certain scope. Call returns a 202 with header
   * Azure-Consumption-AsyncOperation providing a link to the operation created. A call on the operation
   * will provide the status and if the operation is completed the blob file where generated detailed
   * cost report is being stored.
   * @param scope The ARM Resource ID for subscription, resource group, billing account, or other billing
   *              scopes. For details, see https://aka.ms/costmgmt/scopes.
   * @param parameters Parameters supplied to the Create detailed cost report operation.
   * @param options The options parameters.
   */
  async beginCreateOperationAndWait(
    scope: string,
    parameters: GenerateDetailedCostReportDefinition,
    options?: GenerateDetailedCostReportCreateOperationOptionalParams
  ): Promise<GenerateDetailedCostReportCreateOperationResponse> {
    const poller = await this.beginCreateOperation(scope, parameters, options);
    return poller.pollUntilDone();
  }
}
// Operation Specifications
const serializer = coreClient.createSerializer(Mappers, /* isXml */ false);

const createOperationOperationSpec: coreClient.OperationSpec = {
  path:
    "/{scope}/providers/Microsoft.CostManagement/generateDetailedCostReport",
  httpMethod: "POST",
  responses: {
    200: {
      bodyMapper: Mappers.GenerateDetailedCostReportOperationResult
    },
    201: {
      bodyMapper: Mappers.GenerateDetailedCostReportOperationResult
    },
    202: {
      bodyMapper: Mappers.GenerateDetailedCostReportOperationResult
    },
    204: {
      bodyMapper: Mappers.GenerateDetailedCostReportOperationResult
    },
    default: {
      bodyMapper: Mappers.GenerateDetailedCostReportErrorResponse
    }
  },
  requestBody: Parameters.parameters6,
  queryParameters: [Parameters.apiVersion],
  urlParameters: [Parameters.$host, Parameters.scope1],
  headerParameters: [Parameters.accept, Parameters.contentType],
  mediaType: "json",
  serializer
};
