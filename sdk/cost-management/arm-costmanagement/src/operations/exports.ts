/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */

import { Exports } from "../operationsInterfaces";
import * as coreClient from "@azure/core-client";
import * as Mappers from "../models/mappers";
import * as Parameters from "../models/parameters";
import { CostManagementClient } from "../costManagementClient";
import {
  ExportsListOptionalParams,
  ExportsListResponse,
  ExportsGetOptionalParams,
  ExportsGetResponse,
  Export,
  ExportsCreateOrUpdateOptionalParams,
  ExportsCreateOrUpdateResponse,
  ExportsDeleteOptionalParams,
  ExportsExecuteOptionalParams,
  ExportsGetExecutionHistoryOptionalParams,
  ExportsGetExecutionHistoryResponse
} from "../models";

/** Class containing Exports operations. */
export class ExportsImpl implements Exports {
  private readonly client: CostManagementClient;

  /**
   * Initialize a new instance of the class Exports class.
   * @param client Reference to the service client
   */
  constructor(client: CostManagementClient) {
    this.client = client;
  }

  /**
   * The operation to list all exports at the given scope.
   * @param scope The scope associated with export operations. This includes
   *              '/subscriptions/{subscriptionId}/' for subscription scope,
   *              '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}' for resourceGroup scope,
   *              '/providers/Microsoft.Billing/billingAccounts/{billingAccountId}' for Billing Account scope and
   *              '/providers/Microsoft.Billing/billingAccounts/{billingAccountId}/departments/{departmentId}' for
   *              Department scope,
   *              '/providers/Microsoft.Billing/billingAccounts/{billingAccountId}/enrollmentAccounts/{enrollmentAccountId}'
   *              for EnrollmentAccount scope, '/providers/Microsoft.Management/managementGroups/{managementGroupId}
   *              for Management Group scope,
   *              '/providers/Microsoft.Billing/billingAccounts/{billingAccountId}/billingProfiles/{billingProfileId}'
   *              for billingProfile scope,
   *              '/providers/Microsoft.Billing/billingAccounts/{billingAccountId}/billingProfiles/{billingProfileId}/invoiceSections/{invoiceSectionId}'
   *              for invoiceSection scope, and
   *              '/providers/Microsoft.Billing/billingAccounts/{billingAccountId}/customers/{customerId}' specific
   *              for partners.
   * @param options The options parameters.
   */
  list(
    scope: string,
    options?: ExportsListOptionalParams
  ): Promise<ExportsListResponse> {
    return this.client.sendOperationRequest(
      { scope, options },
      listOperationSpec
    );
  }

  /**
   * The operation to get the export for the defined scope by export name.
   * @param scope The scope associated with export operations. This includes
   *              '/subscriptions/{subscriptionId}/' for subscription scope,
   *              '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}' for resourceGroup scope,
   *              '/providers/Microsoft.Billing/billingAccounts/{billingAccountId}' for Billing Account scope and
   *              '/providers/Microsoft.Billing/billingAccounts/{billingAccountId}/departments/{departmentId}' for
   *              Department scope,
   *              '/providers/Microsoft.Billing/billingAccounts/{billingAccountId}/enrollmentAccounts/{enrollmentAccountId}'
   *              for EnrollmentAccount scope, '/providers/Microsoft.Management/managementGroups/{managementGroupId}
   *              for Management Group scope,
   *              '/providers/Microsoft.Billing/billingAccounts/{billingAccountId}/billingProfiles/{billingProfileId}'
   *              for billingProfile scope,
   *              '/providers/Microsoft.Billing/billingAccounts/{billingAccountId}/billingProfiles/{billingProfileId}/invoiceSections/{invoiceSectionId}'
   *              for invoiceSection scope, and
   *              '/providers/Microsoft.Billing/billingAccounts/{billingAccountId}/customers/{customerId}' specific
   *              for partners.
   * @param exportName Export Name.
   * @param options The options parameters.
   */
  get(
    scope: string,
    exportName: string,
    options?: ExportsGetOptionalParams
  ): Promise<ExportsGetResponse> {
    return this.client.sendOperationRequest(
      { scope, exportName, options },
      getOperationSpec
    );
  }

  /**
   * The operation to create or update a export. Update operation requires latest eTag to be set in the
   * request. You may obtain the latest eTag by performing a get operation. Create operation does not
   * require eTag.
   * @param scope The scope associated with export operations. This includes
   *              '/subscriptions/{subscriptionId}/' for subscription scope,
   *              '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}' for resourceGroup scope,
   *              '/providers/Microsoft.Billing/billingAccounts/{billingAccountId}' for Billing Account scope and
   *              '/providers/Microsoft.Billing/billingAccounts/{billingAccountId}/departments/{departmentId}' for
   *              Department scope,
   *              '/providers/Microsoft.Billing/billingAccounts/{billingAccountId}/enrollmentAccounts/{enrollmentAccountId}'
   *              for EnrollmentAccount scope, '/providers/Microsoft.Management/managementGroups/{managementGroupId}
   *              for Management Group scope,
   *              '/providers/Microsoft.Billing/billingAccounts/{billingAccountId}/billingProfiles/{billingProfileId}'
   *              for billingProfile scope,
   *              '/providers/Microsoft.Billing/billingAccounts/{billingAccountId}/billingProfiles/{billingProfileId}/invoiceSections/{invoiceSectionId}'
   *              for invoiceSection scope, and
   *              '/providers/Microsoft.Billing/billingAccounts/{billingAccountId}/customers/{customerId}' specific
   *              for partners.
   * @param exportName Export Name.
   * @param parameters Parameters supplied to the CreateOrUpdate Export operation.
   * @param options The options parameters.
   */
  createOrUpdate(
    scope: string,
    exportName: string,
    parameters: Export,
    options?: ExportsCreateOrUpdateOptionalParams
  ): Promise<ExportsCreateOrUpdateResponse> {
    return this.client.sendOperationRequest(
      { scope, exportName, parameters, options },
      createOrUpdateOperationSpec
    );
  }

  /**
   * The operation to delete a export.
   * @param scope The scope associated with export operations. This includes
   *              '/subscriptions/{subscriptionId}/' for subscription scope,
   *              '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}' for resourceGroup scope,
   *              '/providers/Microsoft.Billing/billingAccounts/{billingAccountId}' for Billing Account scope and
   *              '/providers/Microsoft.Billing/billingAccounts/{billingAccountId}/departments/{departmentId}' for
   *              Department scope,
   *              '/providers/Microsoft.Billing/billingAccounts/{billingAccountId}/enrollmentAccounts/{enrollmentAccountId}'
   *              for EnrollmentAccount scope, '/providers/Microsoft.Management/managementGroups/{managementGroupId}
   *              for Management Group scope,
   *              '/providers/Microsoft.Billing/billingAccounts/{billingAccountId}/billingProfiles/{billingProfileId}'
   *              for billingProfile scope,
   *              '/providers/Microsoft.Billing/billingAccounts/{billingAccountId}/billingProfiles/{billingProfileId}/invoiceSections/{invoiceSectionId}'
   *              for invoiceSection scope, and
   *              '/providers/Microsoft.Billing/billingAccounts/{billingAccountId}/customers/{customerId}' specific
   *              for partners.
   * @param exportName Export Name.
   * @param options The options parameters.
   */
  delete(
    scope: string,
    exportName: string,
    options?: ExportsDeleteOptionalParams
  ): Promise<void> {
    return this.client.sendOperationRequest(
      { scope, exportName, options },
      deleteOperationSpec
    );
  }

  /**
   * The operation to run an export.
   * @param scope The scope associated with export operations. This includes
   *              '/subscriptions/{subscriptionId}/' for subscription scope,
   *              '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}' for resourceGroup scope,
   *              '/providers/Microsoft.Billing/billingAccounts/{billingAccountId}' for Billing Account scope and
   *              '/providers/Microsoft.Billing/billingAccounts/{billingAccountId}/departments/{departmentId}' for
   *              Department scope,
   *              '/providers/Microsoft.Billing/billingAccounts/{billingAccountId}/enrollmentAccounts/{enrollmentAccountId}'
   *              for EnrollmentAccount scope, '/providers/Microsoft.Management/managementGroups/{managementGroupId}
   *              for Management Group scope,
   *              '/providers/Microsoft.Billing/billingAccounts/{billingAccountId}/billingProfiles/{billingProfileId}'
   *              for billingProfile scope,
   *              '/providers/Microsoft.Billing/billingAccounts/{billingAccountId}/billingProfiles/{billingProfileId}/invoiceSections/{invoiceSectionId}'
   *              for invoiceSection scope, and
   *              '/providers/Microsoft.Billing/billingAccounts/{billingAccountId}/customers/{customerId}' specific
   *              for partners.
   * @param exportName Export Name.
   * @param options The options parameters.
   */
  execute(
    scope: string,
    exportName: string,
    options?: ExportsExecuteOptionalParams
  ): Promise<void> {
    return this.client.sendOperationRequest(
      { scope, exportName, options },
      executeOperationSpec
    );
  }

  /**
   * The operation to get the run history of an export for the defined scope and export name.
   * @param scope The scope associated with export operations. This includes
   *              '/subscriptions/{subscriptionId}/' for subscription scope,
   *              '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}' for resourceGroup scope,
   *              '/providers/Microsoft.Billing/billingAccounts/{billingAccountId}' for Billing Account scope and
   *              '/providers/Microsoft.Billing/billingAccounts/{billingAccountId}/departments/{departmentId}' for
   *              Department scope,
   *              '/providers/Microsoft.Billing/billingAccounts/{billingAccountId}/enrollmentAccounts/{enrollmentAccountId}'
   *              for EnrollmentAccount scope, '/providers/Microsoft.Management/managementGroups/{managementGroupId}
   *              for Management Group scope,
   *              '/providers/Microsoft.Billing/billingAccounts/{billingAccountId}/billingProfiles/{billingProfileId}'
   *              for billingProfile scope,
   *              '/providers/Microsoft.Billing/billingAccounts/{billingAccountId}/billingProfiles/{billingProfileId}/invoiceSections/{invoiceSectionId}'
   *              for invoiceSection scope, and
   *              '/providers/Microsoft.Billing/billingAccounts/{billingAccountId}/customers/{customerId}' specific
   *              for partners.
   * @param exportName Export Name.
   * @param options The options parameters.
   */
  getExecutionHistory(
    scope: string,
    exportName: string,
    options?: ExportsGetExecutionHistoryOptionalParams
  ): Promise<ExportsGetExecutionHistoryResponse> {
    return this.client.sendOperationRequest(
      { scope, exportName, options },
      getExecutionHistoryOperationSpec
    );
  }
}
// Operation Specifications
const serializer = coreClient.createSerializer(Mappers, /* isXml */ false);

const listOperationSpec: coreClient.OperationSpec = {
  path: "/{scope}/providers/Microsoft.CostManagement/exports",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.ExportListResult
    },
    default: {
      bodyMapper: Mappers.ErrorResponse
    }
  },
  queryParameters: [Parameters.apiVersion, Parameters.expand],
  urlParameters: [Parameters.$host, Parameters.scope1],
  headerParameters: [Parameters.accept],
  serializer
};
const getOperationSpec: coreClient.OperationSpec = {
  path: "/{scope}/providers/Microsoft.CostManagement/exports/{exportName}",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.Export
    },
    default: {
      bodyMapper: Mappers.ErrorResponse
    }
  },
  queryParameters: [Parameters.apiVersion, Parameters.expand],
  urlParameters: [Parameters.$host, Parameters.scope1, Parameters.exportName],
  headerParameters: [Parameters.accept],
  serializer
};
const createOrUpdateOperationSpec: coreClient.OperationSpec = {
  path: "/{scope}/providers/Microsoft.CostManagement/exports/{exportName}",
  httpMethod: "PUT",
  responses: {
    200: {
      bodyMapper: Mappers.Export
    },
    201: {
      bodyMapper: Mappers.Export
    },
    default: {
      bodyMapper: Mappers.ErrorResponse
    }
  },
  requestBody: Parameters.parameters4,
  queryParameters: [Parameters.apiVersion],
  urlParameters: [Parameters.$host, Parameters.scope1, Parameters.exportName],
  headerParameters: [Parameters.accept, Parameters.contentType],
  mediaType: "json",
  serializer
};
const deleteOperationSpec: coreClient.OperationSpec = {
  path: "/{scope}/providers/Microsoft.CostManagement/exports/{exportName}",
  httpMethod: "DELETE",
  responses: {
    200: {},
    default: {
      bodyMapper: Mappers.ErrorResponse
    }
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [Parameters.$host, Parameters.scope1, Parameters.exportName],
  headerParameters: [Parameters.accept],
  serializer
};
const executeOperationSpec: coreClient.OperationSpec = {
  path: "/{scope}/providers/Microsoft.CostManagement/exports/{exportName}/run",
  httpMethod: "POST",
  responses: {
    200: {},
    default: {
      bodyMapper: Mappers.ErrorResponse
    }
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [Parameters.$host, Parameters.scope1, Parameters.exportName],
  headerParameters: [Parameters.accept],
  serializer
};
const getExecutionHistoryOperationSpec: coreClient.OperationSpec = {
  path:
    "/{scope}/providers/Microsoft.CostManagement/exports/{exportName}/runHistory",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.ExportExecutionListResult
    },
    default: {
      bodyMapper: Mappers.ErrorResponse
    }
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [Parameters.$host, Parameters.scope1, Parameters.exportName],
  headerParameters: [Parameters.accept],
  serializer
};
