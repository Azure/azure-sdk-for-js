/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */

import { PagedAsyncIterableIterator } from "@azure/core-paging";
import {
  View,
  ViewsListOptionalParams,
  ViewsListByScopeOptionalParams,
  ViewsGetOptionalParams,
  ViewsGetResponse,
  ViewsCreateOrUpdateOptionalParams,
  ViewsCreateOrUpdateResponse,
  ViewsDeleteOptionalParams,
  ViewsGetByScopeOptionalParams,
  ViewsGetByScopeResponse,
  ViewsCreateOrUpdateByScopeOptionalParams,
  ViewsCreateOrUpdateByScopeResponse,
  ViewsDeleteByScopeOptionalParams
} from "../models";

/// <reference lib="esnext.asynciterable" />
/** Interface representing a Views. */
export interface Views {
  /**
   * Lists all views by tenant and object.
   * @param options The options parameters.
   */
  list(options?: ViewsListOptionalParams): PagedAsyncIterableIterator<View>;
  /**
   * Lists all views at the given scope.
   * @param scope The scope associated with view operations. This includes
   *              'subscriptions/{subscriptionId}' for subscription scope,
   *              'subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}' for resourceGroup scope,
   *              'providers/Microsoft.Billing/billingAccounts/{billingAccountId}' for Billing Account scope,
   *              'providers/Microsoft.Billing/billingAccounts/{billingAccountId}/departments/{departmentId}' for
   *              Department scope,
   *              'providers/Microsoft.Billing/billingAccounts/{billingAccountId}/enrollmentAccounts/{enrollmentAccountId}'
   *              for EnrollmentAccount scope,
   *              'providers/Microsoft.Billing/billingAccounts/{billingAccountId}/billingProfiles/{billingProfileId}'
   *              for BillingProfile scope,
   *              'providers/Microsoft.Billing/billingAccounts/{billingAccountId}/invoiceSections/{invoiceSectionId}'
   *              for InvoiceSection scope, 'providers/Microsoft.Management/managementGroups/{managementGroupId}' for
   *              Management Group scope,
   *              'providers/Microsoft.CostManagement/externalBillingAccounts/{externalBillingAccountName}' for
   *              External Billing Account scope and
   *              'providers/Microsoft.CostManagement/externalSubscriptions/{externalSubscriptionName}' for External
   *              Subscription scope.
   * @param options The options parameters.
   */
  listByScope(
    scope: string,
    options?: ViewsListByScopeOptionalParams
  ): PagedAsyncIterableIterator<View>;
  /**
   * Gets the view by view name.
   * @param viewName View name
   * @param options The options parameters.
   */
  get(
    viewName: string,
    options?: ViewsGetOptionalParams
  ): Promise<ViewsGetResponse>;
  /**
   * The operation to create or update a view. Update operation requires latest eTag to be set in the
   * request. You may obtain the latest eTag by performing a get operation. Create operation does not
   * require eTag.
   * @param viewName View name
   * @param parameters Parameters supplied to the CreateOrUpdate View operation.
   * @param options The options parameters.
   */
  createOrUpdate(
    viewName: string,
    parameters: View,
    options?: ViewsCreateOrUpdateOptionalParams
  ): Promise<ViewsCreateOrUpdateResponse>;
  /**
   * The operation to delete a view.
   * @param viewName View name
   * @param options The options parameters.
   */
  delete(viewName: string, options?: ViewsDeleteOptionalParams): Promise<void>;
  /**
   * Gets the view for the defined scope by view name.
   * @param scope The scope associated with view operations. This includes
   *              'subscriptions/{subscriptionId}' for subscription scope,
   *              'subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}' for resourceGroup scope,
   *              'providers/Microsoft.Billing/billingAccounts/{billingAccountId}' for Billing Account scope,
   *              'providers/Microsoft.Billing/billingAccounts/{billingAccountId}/departments/{departmentId}' for
   *              Department scope,
   *              'providers/Microsoft.Billing/billingAccounts/{billingAccountId}/enrollmentAccounts/{enrollmentAccountId}'
   *              for EnrollmentAccount scope,
   *              'providers/Microsoft.Billing/billingAccounts/{billingAccountId}/billingProfiles/{billingProfileId}'
   *              for BillingProfile scope,
   *              'providers/Microsoft.Billing/billingAccounts/{billingAccountId}/invoiceSections/{invoiceSectionId}'
   *              for InvoiceSection scope, 'providers/Microsoft.Management/managementGroups/{managementGroupId}' for
   *              Management Group scope,
   *              'providers/Microsoft.CostManagement/externalBillingAccounts/{externalBillingAccountName}' for
   *              External Billing Account scope and
   *              'providers/Microsoft.CostManagement/externalSubscriptions/{externalSubscriptionName}' for External
   *              Subscription scope.
   * @param viewName View name
   * @param options The options parameters.
   */
  getByScope(
    scope: string,
    viewName: string,
    options?: ViewsGetByScopeOptionalParams
  ): Promise<ViewsGetByScopeResponse>;
  /**
   * The operation to create or update a view. Update operation requires latest eTag to be set in the
   * request. You may obtain the latest eTag by performing a get operation. Create operation does not
   * require eTag.
   * @param scope The scope associated with view operations. This includes
   *              'subscriptions/{subscriptionId}' for subscription scope,
   *              'subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}' for resourceGroup scope,
   *              'providers/Microsoft.Billing/billingAccounts/{billingAccountId}' for Billing Account scope,
   *              'providers/Microsoft.Billing/billingAccounts/{billingAccountId}/departments/{departmentId}' for
   *              Department scope,
   *              'providers/Microsoft.Billing/billingAccounts/{billingAccountId}/enrollmentAccounts/{enrollmentAccountId}'
   *              for EnrollmentAccount scope,
   *              'providers/Microsoft.Billing/billingAccounts/{billingAccountId}/billingProfiles/{billingProfileId}'
   *              for BillingProfile scope,
   *              'providers/Microsoft.Billing/billingAccounts/{billingAccountId}/invoiceSections/{invoiceSectionId}'
   *              for InvoiceSection scope, 'providers/Microsoft.Management/managementGroups/{managementGroupId}' for
   *              Management Group scope,
   *              'providers/Microsoft.CostManagement/externalBillingAccounts/{externalBillingAccountName}' for
   *              External Billing Account scope and
   *              'providers/Microsoft.CostManagement/externalSubscriptions/{externalSubscriptionName}' for External
   *              Subscription scope.
   * @param viewName View name
   * @param parameters Parameters supplied to the CreateOrUpdate View operation.
   * @param options The options parameters.
   */
  createOrUpdateByScope(
    scope: string,
    viewName: string,
    parameters: View,
    options?: ViewsCreateOrUpdateByScopeOptionalParams
  ): Promise<ViewsCreateOrUpdateByScopeResponse>;
  /**
   * The operation to delete a view.
   * @param scope The scope associated with view operations. This includes
   *              'subscriptions/{subscriptionId}' for subscription scope,
   *              'subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}' for resourceGroup scope,
   *              'providers/Microsoft.Billing/billingAccounts/{billingAccountId}' for Billing Account scope,
   *              'providers/Microsoft.Billing/billingAccounts/{billingAccountId}/departments/{departmentId}' for
   *              Department scope,
   *              'providers/Microsoft.Billing/billingAccounts/{billingAccountId}/enrollmentAccounts/{enrollmentAccountId}'
   *              for EnrollmentAccount scope,
   *              'providers/Microsoft.Billing/billingAccounts/{billingAccountId}/billingProfiles/{billingProfileId}'
   *              for BillingProfile scope,
   *              'providers/Microsoft.Billing/billingAccounts/{billingAccountId}/invoiceSections/{invoiceSectionId}'
   *              for InvoiceSection scope, 'providers/Microsoft.Management/managementGroups/{managementGroupId}' for
   *              Management Group scope,
   *              'providers/Microsoft.CostManagement/externalBillingAccounts/{externalBillingAccountName}' for
   *              External Billing Account scope and
   *              'providers/Microsoft.CostManagement/externalSubscriptions/{externalSubscriptionName}' for External
   *              Subscription scope.
   * @param viewName View name
   * @param options The options parameters.
   */
  deleteByScope(
    scope: string,
    viewName: string,
    options?: ViewsDeleteByScopeOptionalParams
  ): Promise<void>;
}
