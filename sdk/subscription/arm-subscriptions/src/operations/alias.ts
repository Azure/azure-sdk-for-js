/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */

import { Alias } from "../operationsInterfaces";
import * as coreClient from "@azure/core-client";
import * as Mappers from "../models/mappers";
import * as Parameters from "../models/parameters";
import { SubscriptionClient } from "../subscriptionClient";
import { PollerLike, PollOperationState, LroEngine } from "@azure/core-lro";
import { LroImpl } from "../lroImpl";
import {
  PutAliasRequest,
  AliasCreateOptionalParams,
  AliasCreateResponse,
  AliasGetOptionalParams,
  AliasGetResponse,
  AliasDeleteOptionalParams,
  AliasListOptionalParams,
  AliasListResponse
} from "../models";

/** Class containing Alias operations. */
export class AliasImpl implements Alias {
  private readonly client: SubscriptionClient;

  /**
   * Initialize a new instance of the class Alias class.
   * @param client Reference to the service client
   */
  constructor(client: SubscriptionClient) {
    this.client = client;
  }

  /**
   * Create Alias Subscription.
   * @param aliasName AliasName is the name for the subscription creation request. Note that this is not
   *                  the same as subscription name and this doesn’t have any other lifecycle need beyond the request for
   *                  subscription creation.
   * @param body The parameters required to create a new subscription.
   * @param options The options parameters.
   */
  async beginCreate(
    aliasName: string,
    body: PutAliasRequest,
    options?: AliasCreateOptionalParams
  ): Promise<
    PollerLike<PollOperationState<AliasCreateResponse>, AliasCreateResponse>
  > {
    const directSendOperation = async (
      args: coreClient.OperationArguments,
      spec: coreClient.OperationSpec
    ): Promise<AliasCreateResponse> => {
      return this.client.sendOperationRequest(args, spec);
    };
    const sendOperation = async (
      args: coreClient.OperationArguments,
      spec: coreClient.OperationSpec
    ) => {
      let currentRawResponse:
        | coreClient.FullOperationResponse
        | undefined = undefined;
      const providedCallback = args.options?.onResponse;
      const callback: coreClient.RawResponseCallback = (
        rawResponse: coreClient.FullOperationResponse,
        flatResponse: unknown
      ) => {
        currentRawResponse = rawResponse;
        providedCallback?.(rawResponse, flatResponse);
      };
      const updatedArgs = {
        ...args,
        options: {
          ...args.options,
          onResponse: callback
        }
      };
      const flatResponse = await directSendOperation(updatedArgs, spec);
      return {
        flatResponse,
        rawResponse: {
          statusCode: currentRawResponse!.status,
          body: currentRawResponse!.parsedBody,
          headers: currentRawResponse!.headers.toJSON()
        }
      };
    };

    const lro = new LroImpl(
      sendOperation,
      { aliasName, body, options },
      createOperationSpec
    );
    const poller = new LroEngine(lro, {
      resumeFrom: options?.resumeFrom,
      intervalInMs: options?.updateIntervalInMs
    });
    await poller.poll();
    return poller;
  }

  /**
   * Create Alias Subscription.
   * @param aliasName AliasName is the name for the subscription creation request. Note that this is not
   *                  the same as subscription name and this doesn’t have any other lifecycle need beyond the request for
   *                  subscription creation.
   * @param body The parameters required to create a new subscription.
   * @param options The options parameters.
   */
  async beginCreateAndWait(
    aliasName: string,
    body: PutAliasRequest,
    options?: AliasCreateOptionalParams
  ): Promise<AliasCreateResponse> {
    const poller = await this.beginCreate(aliasName, body, options);
    return poller.pollUntilDone();
  }

  /**
   * Get Alias Subscription.
   * @param aliasName AliasName is the name for the subscription creation request. Note that this is not
   *                  the same as subscription name and this doesn’t have any other lifecycle need beyond the request for
   *                  subscription creation.
   * @param options The options parameters.
   */
  get(
    aliasName: string,
    options?: AliasGetOptionalParams
  ): Promise<AliasGetResponse> {
    return this.client.sendOperationRequest(
      { aliasName, options },
      getOperationSpec
    );
  }

  /**
   * Delete Alias.
   * @param aliasName AliasName is the name for the subscription creation request. Note that this is not
   *                  the same as subscription name and this doesn’t have any other lifecycle need beyond the request for
   *                  subscription creation.
   * @param options The options parameters.
   */
  delete(
    aliasName: string,
    options?: AliasDeleteOptionalParams
  ): Promise<void> {
    return this.client.sendOperationRequest(
      { aliasName, options },
      deleteOperationSpec
    );
  }

  /**
   * List Alias Subscription.
   * @param options The options parameters.
   */
  list(options?: AliasListOptionalParams): Promise<AliasListResponse> {
    return this.client.sendOperationRequest({ options }, listOperationSpec);
  }
}
// Operation Specifications
const serializer = coreClient.createSerializer(Mappers, /* isXml */ false);

const createOperationSpec: coreClient.OperationSpec = {
  path: "/providers/Microsoft.Subscription/aliases/{aliasName}",
  httpMethod: "PUT",
  responses: {
    200: {
      bodyMapper: Mappers.SubscriptionAliasResponse
    },
    201: {
      bodyMapper: Mappers.SubscriptionAliasResponse
    },
    202: {
      bodyMapper: Mappers.SubscriptionAliasResponse
    },
    204: {
      bodyMapper: Mappers.SubscriptionAliasResponse
    },
    default: {
      bodyMapper: Mappers.ErrorResponseBody
    }
  },
  requestBody: Parameters.body2,
  queryParameters: [Parameters.apiVersion1],
  urlParameters: [Parameters.$host, Parameters.aliasName],
  headerParameters: [Parameters.accept, Parameters.contentType],
  mediaType: "json",
  serializer
};
const getOperationSpec: coreClient.OperationSpec = {
  path: "/providers/Microsoft.Subscription/aliases/{aliasName}",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.SubscriptionAliasResponse
    },
    default: {
      bodyMapper: Mappers.ErrorResponseBody
    }
  },
  queryParameters: [Parameters.apiVersion1],
  urlParameters: [Parameters.$host, Parameters.aliasName],
  headerParameters: [Parameters.accept],
  serializer
};
const deleteOperationSpec: coreClient.OperationSpec = {
  path: "/providers/Microsoft.Subscription/aliases/{aliasName}",
  httpMethod: "DELETE",
  responses: {
    200: {},
    204: {},
    default: {
      bodyMapper: Mappers.ErrorResponseBody
    }
  },
  queryParameters: [Parameters.apiVersion1],
  urlParameters: [Parameters.$host, Parameters.aliasName],
  headerParameters: [Parameters.accept],
  serializer
};
const listOperationSpec: coreClient.OperationSpec = {
  path: "/providers/Microsoft.Subscription/aliases",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.SubscriptionAliasListResult
    },
    default: {
      bodyMapper: Mappers.ErrorResponseBody
    }
  },
  queryParameters: [Parameters.apiVersion1],
  urlParameters: [Parameters.$host],
  headerParameters: [Parameters.accept],
  serializer
};
