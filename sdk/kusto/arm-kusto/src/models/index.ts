/*
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for license information.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */

import { BaseResource, CloudError, AzureServiceClientOptions } from "@azure/ms-rest-azure-js";
import * as msRest from "@azure/ms-rest-js";

export { BaseResource, CloudError };

/**
 * Represents a tenant ID that is trusted by the cluster.
 */
export interface TrustedExternalTenant {
  /**
   * GUID representing an external tenant.
   */
  value?: string;
}

/**
 * A class that contains the optimized auto scale definition.
 */
export interface OptimizedAutoscale {
  /**
   * The version of the template defined, for instance 1.
   */
  version: number;
  /**
   * A boolean value that indicate if the optimized autoscale feature is enabled or not.
   */
  isEnabled: boolean;
  /**
   * Minimum allowed instances count.
   */
  minimum: number;
  /**
   * Maximum allowed instances count.
   */
  maximum: number;
}

/**
 * A class that contains virtual network definition.
 */
export interface VirtualNetworkConfiguration {
  /**
   * The subnet resource id.
   */
  subnetId: string;
  /**
   * Engine service's public IP address resource id.
   */
  enginePublicIpId: string;
  /**
   * Data management's service public IP address resource id.
   */
  dataManagementPublicIpId: string;
}

/**
 * Properties of the key vault.
 */
export interface KeyVaultProperties {
  /**
   * The name of the key vault key.
   */
  keyName: string;
  /**
   * The version of the key vault key.
   */
  keyVersion: string;
  /**
   * The Uri of the key vault.
   */
  keyVaultUri: string;
}

/**
 * The language extension object.
 */
export interface LanguageExtension {
  /**
   * The language extension name. Possible values include: 'PYTHON', 'R'
   */
  languageExtensionName?: LanguageExtensionName;
}

/**
 * Azure SKU definition.
 */
export interface AzureSku {
  /**
   * SKU name. Possible values include: 'Standard_DS13_v2+1TB_PS', 'Standard_DS13_v2+2TB_PS',
   * 'Standard_DS14_v2+3TB_PS', 'Standard_DS14_v2+4TB_PS', 'Standard_D13_v2', 'Standard_D14_v2',
   * 'Standard_L8s', 'Standard_L16s', 'Standard_D11_v2', 'Standard_D12_v2', 'Standard_L4s', 'Dev(No
   * SLA)_Standard_D11_v2', 'Standard_E2a_v4', 'Standard_E4a_v4', 'Standard_E8a_v4',
   * 'Standard_E16a_v4', 'Standard_E8as_v4+1TB_PS', 'Standard_E8as_v4+2TB_PS',
   * 'Standard_E16as_v4+3TB_PS', 'Standard_E16as_v4+4TB_PS', 'Dev(No SLA)_Standard_E2a_v4'
   */
  name: AzureSkuName;
  /**
   * The number of instances of the cluster.
   */
  capacity?: number;
  /**
   * SKU tier. Possible values include: 'Basic', 'Standard'
   */
  tier: AzureSkuTier;
}

/**
 * Azure capacity definition.
 */
export interface AzureCapacity {
  /**
   * Scale type. Possible values include: 'automatic', 'manual', 'none'
   */
  scaleType: AzureScaleType;
  /**
   * Minimum allowed capacity.
   */
  minimum: number;
  /**
   * Maximum allowed capacity.
   */
  maximum: number;
  /**
   * The default capacity that would be used.
   */
  default: number;
}

/**
 * Azure resource SKU definition.
 */
export interface AzureResourceSku {
  /**
   * Resource Namespace and Type.
   */
  resourceType?: string;
  /**
   * The SKU details.
   */
  sku?: AzureSku;
  /**
   * The number of instances of the cluster.
   */
  capacity?: AzureCapacity;
}

/**
 * The locations and zones info for SKU.
 */
export interface SkuLocationInfoItem {
  /**
   * The available location of the SKU.
   */
  location: string;
  /**
   * The available zone of the SKU.
   */
  zones?: string[];
}

/**
 * The Kusto SKU description of given resource type
 */
export interface SkuDescription {
  /**
   * The resource type
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly resourceType?: string;
  /**
   * The name of the SKU
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly name?: string;
  /**
   * The tier of the SKU
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly tier?: string;
  /**
   * The set of locations that the SKU is available
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly locations?: string[];
  /**
   * Locations and zones
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly locationInfo?: SkuLocationInfoItem[];
  /**
   * The restrictions because of which SKU cannot be used
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly restrictions?: any[];
}

/**
 * A class that contains database statistics information.
 */
export interface DatabaseStatistics {
  /**
   * The database size - the total size of compressed data and index in bytes.
   */
  size?: number;
}

/**
 * An interface representing IdentityUserAssignedIdentitiesValue.
 */
export interface IdentityUserAssignedIdentitiesValue {
  /**
   * The principal id of user assigned identity.
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly principalId?: string;
  /**
   * The client id of user assigned identity.
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly clientId?: string;
}

/**
 * Identity for the resource.
 */
export interface Identity {
  /**
   * The principal ID of resource identity.
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly principalId?: string;
  /**
   * The tenant ID of resource.
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly tenantId?: string;
  /**
   * The identity type. Possible values include: 'None', 'SystemAssigned'
   */
  type: IdentityType;
  /**
   * The list of user identities associated with the Kusto cluster. The user identity dictionary
   * key references will be ARM resource ids in the form:
   * '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ManagedIdentity/userAssignedIdentities/{identityName}'.
   */
  userAssignedIdentities?: { [propertyName: string]: IdentityUserAssignedIdentitiesValue };
}

/**
 * An interface representing Resource.
 */
export interface Resource extends BaseResource {
  /**
   * Fully qualified resource Id for the resource. Ex -
   * /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly id?: string;
  /**
   * The name of the resource
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly name?: string;
  /**
   * The type of the resource. Ex- Microsoft.Compute/virtualMachines or
   * Microsoft.Storage/storageAccounts.
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly type?: string;
}

/**
 * The resource model definition for a ARM tracked top level resource
 */
export interface TrackedResource extends Resource {
  /**
   * Resource tags.
   */
  tags?: { [propertyName: string]: string };
  /**
   * The geo-location where the resource lives
   */
  location: string;
}

/**
 * Class representing a Kusto cluster.
 */
export interface Cluster extends TrackedResource {
  /**
   * The SKU of the cluster.
   */
  sku: AzureSku;
  /**
   * The availability zones of the cluster.
   */
  zones?: string[];
  /**
   * The identity of the cluster, if configured.
   */
  identity?: Identity;
  /**
   * The state of the resource. Possible values include: 'Creating', 'Unavailable', 'Running',
   * 'Deleting', 'Deleted', 'Stopping', 'Stopped', 'Starting', 'Updating'
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly state?: State;
  /**
   * The provisioned state of the resource. Possible values include: 'Running', 'Creating',
   * 'Deleting', 'Succeeded', 'Failed', 'Moving'
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly provisioningState?: ProvisioningState;
  /**
   * The cluster URI.
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly uri?: string;
  /**
   * The cluster data ingestion URI.
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly dataIngestionUri?: string;
  /**
   * The reason for the cluster's current state.
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly stateReason?: string;
  /**
   * The cluster's external tenants.
   */
  trustedExternalTenants?: TrustedExternalTenant[];
  /**
   * Optimized auto scale definition.
   */
  optimizedAutoscale?: OptimizedAutoscale;
  /**
   * A boolean value that indicates if the cluster's disks are encrypted.
   */
  enableDiskEncryption?: boolean;
  /**
   * A boolean value that indicates if the streaming ingest is enabled. Default value: false.
   */
  enableStreamingIngest?: boolean;
  /**
   * Virtual network definition.
   */
  virtualNetworkConfiguration?: VirtualNetworkConfiguration;
  /**
   * KeyVault properties for the cluster encryption.
   */
  keyVaultProperties?: KeyVaultProperties;
  /**
   * A boolean value that indicates if the purge operations are enabled. Default value: false.
   */
  enablePurge?: boolean;
  /**
   * List of the cluster's language extensions.
   */
  languageExtensions?: LanguageExtensionsList;
}

/**
 * Class representing an update to a Kusto cluster.
 */
export interface ClusterUpdate extends Resource {
  /**
   * Resource tags.
   */
  tags?: { [propertyName: string]: string };
  /**
   * Resource location.
   */
  location?: string;
  /**
   * The SKU of the cluster.
   */
  sku?: AzureSku;
  /**
   * The identity of the cluster, if configured.
   */
  identity?: Identity;
  /**
   * The state of the resource. Possible values include: 'Creating', 'Unavailable', 'Running',
   * 'Deleting', 'Deleted', 'Stopping', 'Stopped', 'Starting', 'Updating'
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly state?: State;
  /**
   * The provisioned state of the resource. Possible values include: 'Running', 'Creating',
   * 'Deleting', 'Succeeded', 'Failed', 'Moving'
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly provisioningState?: ProvisioningState;
  /**
   * The cluster URI.
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly uri?: string;
  /**
   * The cluster data ingestion URI.
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly dataIngestionUri?: string;
  /**
   * The reason for the cluster's current state.
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly stateReason?: string;
  /**
   * The cluster's external tenants.
   */
  trustedExternalTenants?: TrustedExternalTenant[];
  /**
   * Optimized auto scale definition.
   */
  optimizedAutoscale?: OptimizedAutoscale;
  /**
   * A boolean value that indicates if the cluster's disks are encrypted.
   */
  enableDiskEncryption?: boolean;
  /**
   * A boolean value that indicates if the streaming ingest is enabled. Default value: false.
   */
  enableStreamingIngest?: boolean;
  /**
   * Virtual network definition.
   */
  virtualNetworkConfiguration?: VirtualNetworkConfiguration;
  /**
   * KeyVault properties for the cluster encryption.
   */
  keyVaultProperties?: KeyVaultProperties;
  /**
   * A boolean value that indicates if the purge operations are enabled. Default value: false.
   */
  enablePurge?: boolean;
  /**
   * List of the cluster's language extensions.
   */
  languageExtensions?: LanguageExtensionsList;
}

/**
 * The resource model definition for a ARM proxy resource. It will have everything other than
 * required location and tags
 */
export interface ProxyResource extends Resource {
}

/**
 * Class representing an attached database configuration.
 */
export interface AttachedDatabaseConfiguration extends ProxyResource {
  /**
   * Resource location.
   */
  location?: string;
  /**
   * The provisioned state of the resource. Possible values include: 'Running', 'Creating',
   * 'Deleting', 'Succeeded', 'Failed', 'Moving'
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly provisioningState?: ProvisioningState;
  /**
   * The name of the database which you would like to attach, use * if you want to follow all
   * current and future databases.
   */
  databaseName: string;
  /**
   * The resource id of the cluster where the databases you would like to attach reside.
   */
  clusterResourceId: string;
  /**
   * The list of databases from the clusterResourceId which are currently attached to the cluster.
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly attachedDatabaseNames?: string[];
  /**
   * The default principals modification kind. Possible values include: 'Union', 'Replace', 'None'
   */
  defaultPrincipalsModificationKind: DefaultPrincipalsModificationKind;
}

/**
 * Contains the possible cases for Database.
 */
export type DatabaseUnion = Database | ReadWriteDatabase | ReadOnlyFollowingDatabase;

/**
 * Class representing a Kusto database.
 */
export interface Database {
  /**
   * Polymorphic Discriminator
   */
  kind: "Database";
  /**
   * Fully qualified resource Id for the resource. Ex -
   * /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly id?: string;
  /**
   * The name of the resource
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly name?: string;
  /**
   * The type of the resource. Ex- Microsoft.Compute/virtualMachines or
   * Microsoft.Storage/storageAccounts.
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly type?: string;
  /**
   * Resource location.
   */
  location?: string;
}

/**
 * Class representing a read write database.
 */
export interface ReadWriteDatabase {
  /**
   * Polymorphic Discriminator
   */
  kind: "ReadWrite";
  /**
   * Fully qualified resource Id for the resource. Ex -
   * /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly id?: string;
  /**
   * The name of the resource
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly name?: string;
  /**
   * The type of the resource. Ex- Microsoft.Compute/virtualMachines or
   * Microsoft.Storage/storageAccounts.
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly type?: string;
  /**
   * Resource location.
   */
  location?: string;
  /**
   * The provisioned state of the resource. Possible values include: 'Running', 'Creating',
   * 'Deleting', 'Succeeded', 'Failed', 'Moving'
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly provisioningState?: ProvisioningState;
  /**
   * The time the data should be kept before it stops being accessible to queries in TimeSpan.
   */
  softDeletePeriod?: string;
  /**
   * The time the data should be kept in cache for fast queries in TimeSpan.
   */
  hotCachePeriod?: string;
  /**
   * The statistics of the database.
   */
  statistics?: DatabaseStatistics;
  /**
   * Indicates whether the database is followed.
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly isFollowed?: string;
}

/**
 * Class representing a read only following database.
 */
export interface ReadOnlyFollowingDatabase {
  /**
   * Polymorphic Discriminator
   */
  kind: "ReadOnlyFollowing";
  /**
   * Fully qualified resource Id for the resource. Ex -
   * /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly id?: string;
  /**
   * The name of the resource
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly name?: string;
  /**
   * The type of the resource. Ex- Microsoft.Compute/virtualMachines or
   * Microsoft.Storage/storageAccounts.
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly type?: string;
  /**
   * Resource location.
   */
  location?: string;
  /**
   * The provisioned state of the resource. Possible values include: 'Running', 'Creating',
   * 'Deleting', 'Succeeded', 'Failed', 'Moving'
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly provisioningState?: ProvisioningState;
  /**
   * The time the data should be kept before it stops being accessible to queries in TimeSpan.
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly softDeletePeriod?: string;
  /**
   * The time the data should be kept in cache for fast queries in TimeSpan.
   */
  hotCachePeriod?: string;
  /**
   * The statistics of the database.
   */
  statistics?: DatabaseStatistics;
  /**
   * The name of the leader cluster
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly leaderClusterResourceId?: string;
  /**
   * The name of the attached database configuration cluster
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly attachedDatabaseConfigurationName?: string;
  /**
   * The principals modification kind of the database. Possible values include: 'Union', 'Replace',
   * 'None'
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly principalsModificationKind?: PrincipalsModificationKind;
}

/**
 * A class representing database principal entity.
 */
export interface DatabasePrincipal {
  /**
   * Database principal role. Possible values include: 'Admin', 'Ingestor', 'Monitor', 'User',
   * 'UnrestrictedViewers', 'Viewer'
   */
  role: DatabasePrincipalRole;
  /**
   * Database principal name.
   */
  name: string;
  /**
   * Database principal type. Possible values include: 'App', 'Group', 'User'
   */
  type: DatabasePrincipalType;
  /**
   * Database principal fully qualified name.
   */
  fqn?: string;
  /**
   * Database principal email if exists.
   */
  email?: string;
  /**
   * Application id - relevant only for application principal type.
   */
  appId?: string;
  /**
   * The tenant name of the principal
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly tenantName?: string;
}

/**
 * Class representing a database principal assignment.
 */
export interface DatabasePrincipalAssignment extends ProxyResource {
  /**
   * The principal ID assigned to the database principal. It can be a user email, application ID,
   * or security group name.
   */
  principalId: string;
  /**
   * Database principal role. Possible values include: 'Admin', 'Ingestor', 'Monitor', 'User',
   * 'UnrestrictedViewers', 'Viewer'
   */
  role: DatabasePrincipalRole;
  /**
   * The tenant id of the principal
   */
  tenantId?: string;
  /**
   * Principal type. Possible values include: 'App', 'Group', 'User'
   */
  principalType: PrincipalType;
  /**
   * The tenant name of the principal
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly tenantName?: string;
  /**
   * The principal name
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly principalName?: string;
  /**
   * The provisioned state of the resource. Possible values include: 'Running', 'Creating',
   * 'Deleting', 'Succeeded', 'Failed', 'Moving'
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly provisioningState?: ProvisioningState;
}

/**
 * Class representing a cluster principal assignment.
 */
export interface ClusterPrincipalAssignment extends ProxyResource {
  /**
   * The principal ID assigned to the cluster principal. It can be a user email, application ID, or
   * security group name.
   */
  principalId: string;
  /**
   * Cluster principal role. Possible values include: 'AllDatabasesAdmin', 'AllDatabasesViewer'
   */
  role: ClusterPrincipalRole;
  /**
   * The tenant id of the principal
   */
  tenantId?: string;
  /**
   * Principal type. Possible values include: 'App', 'Group', 'User'
   */
  principalType: PrincipalType;
  /**
   * The tenant name of the principal
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly tenantName?: string;
  /**
   * The principal name
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly principalName?: string;
  /**
   * The provisioned state of the resource. Possible values include: 'Running', 'Creating',
   * 'Deleting', 'Succeeded', 'Failed', 'Moving'
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly provisioningState?: ProvisioningState;
}

/**
 * A class representing follower database request.
 */
export interface FollowerDatabaseDefinition {
  /**
   * Resource id of the cluster that follows a database owned by this cluster.
   */
  clusterResourceId: string;
  /**
   * Resource name of the attached database configuration in the follower cluster.
   */
  attachedDatabaseConfigurationName: string;
  /**
   * The database name owned by this cluster that was followed. * in case following all databases.
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly databaseName?: string;
}

/**
 * Contains the possible cases for DataConnection.
 */
export type DataConnectionUnion = DataConnection | EventHubDataConnection | IotHubDataConnection | EventGridDataConnection;

/**
 * Class representing an data connection.
 */
export interface DataConnection {
  /**
   * Polymorphic Discriminator
   */
  kind: "DataConnection";
  /**
   * Fully qualified resource Id for the resource. Ex -
   * /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly id?: string;
  /**
   * The name of the resource
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly name?: string;
  /**
   * The type of the resource. Ex- Microsoft.Compute/virtualMachines or
   * Microsoft.Storage/storageAccounts.
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly type?: string;
  /**
   * Resource location.
   */
  location?: string;
}

/**
 * The result returned from a data connection validation request.
 */
export interface DataConnectionValidationResult {
  /**
   * A message which indicates a problem in data connection validation.
   */
  errorMessage?: string;
}

/**
 * The list Kusto database principals operation request.
 */
export interface DatabasePrincipalListRequest {
  /**
   * The list of Kusto database principals.
   */
  value?: DatabasePrincipal[];
}

/**
 * An interface representing DiagnoseVirtualNetworkResult.
 */
export interface DiagnoseVirtualNetworkResult {
  /**
   * The list of network connectivity diagnostic finding
   */
  findings?: string[];
}

/**
 * Class representing an data connection validation.
 */
export interface DataConnectionValidation {
  /**
   * The name of the data connection.
   */
  dataConnectionName?: string;
  /**
   * The data connection properties to validate.
   */
  properties?: DataConnectionUnion;
}

/**
 * Class representing an event hub data connection.
 */
export interface EventHubDataConnection {
  /**
   * Polymorphic Discriminator
   */
  kind: "EventHub";
  /**
   * Fully qualified resource Id for the resource. Ex -
   * /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly id?: string;
  /**
   * The name of the resource
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly name?: string;
  /**
   * The type of the resource. Ex- Microsoft.Compute/virtualMachines or
   * Microsoft.Storage/storageAccounts.
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly type?: string;
  /**
   * Resource location.
   */
  location?: string;
  /**
   * The resource ID of the event hub to be used to create a data connection.
   */
  eventHubResourceId: string;
  /**
   * The event hub consumer group.
   */
  consumerGroup: string;
  /**
   * The table where the data should be ingested. Optionally the table information can be added to
   * each message.
   */
  tableName?: string;
  /**
   * The mapping rule to be used to ingest the data. Optionally the mapping information can be
   * added to each message.
   */
  mappingRuleName?: string;
  /**
   * The data format of the message. Optionally the data format can be added to each message.
   * Possible values include: 'MULTIJSON', 'JSON', 'CSV', 'TSV', 'SCSV', 'SOHSV', 'PSV', 'TXT',
   * 'RAW', 'SINGLEJSON', 'AVRO', 'TSVE', 'PARQUET', 'ORC'
   */
  dataFormat?: EventHubDataFormat;
  /**
   * System properties of the event hub
   */
  eventSystemProperties?: string[];
  /**
   * The event hub messages compression type. Possible values include: 'None', 'GZip'
   */
  compression?: Compression;
}

/**
 * Class representing an iot hub data connection.
 */
export interface IotHubDataConnection {
  /**
   * Polymorphic Discriminator
   */
  kind: "IotHub";
  /**
   * Fully qualified resource Id for the resource. Ex -
   * /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly id?: string;
  /**
   * The name of the resource
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly name?: string;
  /**
   * The type of the resource. Ex- Microsoft.Compute/virtualMachines or
   * Microsoft.Storage/storageAccounts.
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly type?: string;
  /**
   * Resource location.
   */
  location?: string;
  /**
   * The resource ID of the Iot hub to be used to create a data connection.
   */
  iotHubResourceId: string;
  /**
   * The iot hub consumer group.
   */
  consumerGroup: string;
  /**
   * The table where the data should be ingested. Optionally the table information can be added to
   * each message.
   */
  tableName?: string;
  /**
   * The mapping rule to be used to ingest the data. Optionally the mapping information can be
   * added to each message.
   */
  mappingRuleName?: string;
  /**
   * The data format of the message. Optionally the data format can be added to each message.
   * Possible values include: 'MULTIJSON', 'JSON', 'CSV', 'TSV', 'SCSV', 'SOHSV', 'PSV', 'TXT',
   * 'RAW', 'SINGLEJSON', 'AVRO', 'TSVE', 'PARQUET', 'ORC'
   */
  dataFormat?: IotHubDataFormat;
  /**
   * System properties of the iot hub
   */
  eventSystemProperties?: string[];
  /**
   * The name of the share access policy
   */
  sharedAccessPolicyName: string;
}

/**
 * Class representing an Event Grid data connection.
 */
export interface EventGridDataConnection {
  /**
   * Polymorphic Discriminator
   */
  kind: "EventGrid";
  /**
   * Fully qualified resource Id for the resource. Ex -
   * /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly id?: string;
  /**
   * The name of the resource
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly name?: string;
  /**
   * The type of the resource. Ex- Microsoft.Compute/virtualMachines or
   * Microsoft.Storage/storageAccounts.
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly type?: string;
  /**
   * Resource location.
   */
  location?: string;
  /**
   * The resource ID of the storage account where the data resides.
   */
  storageAccountResourceId: string;
  /**
   * The resource ID where the event grid is configured to send events.
   */
  eventHubResourceId: string;
  /**
   * The event hub consumer group.
   */
  consumerGroup: string;
  /**
   * The table where the data should be ingested. Optionally the table information can be added to
   * each message.
   */
  tableName: string;
  /**
   * The mapping rule to be used to ingest the data. Optionally the mapping information can be
   * added to each message.
   */
  mappingRuleName?: string;
  /**
   * The data format of the message. Optionally the data format can be added to each message.
   * Possible values include: 'MULTIJSON', 'JSON', 'CSV', 'TSV', 'SCSV', 'SOHSV', 'PSV', 'TXT',
   * 'RAW', 'SINGLEJSON', 'AVRO', 'TSVE', 'PARQUET', 'ORC'
   */
  dataFormat: EventGridDataFormat;
}

/**
 * The list Kusto data connection validation result.
 */
export interface DataConnectionValidationListResult {
  /**
   * The list of Kusto data connection validation errors.
   */
  value?: DataConnectionValidationResult[];
}

/**
 * The result returned from a cluster check name availability request.
 */
export interface ClusterCheckNameRequest {
  /**
   * Cluster name.
   */
  name: string;
}

/**
 * The result returned from a database check name availability request.
 */
export interface CheckNameRequest {
  /**
   * Resource name.
   */
  name: string;
  /**
   * The type of resource, for instance Microsoft.Kusto/clusters/databases. Possible values
   * include: 'Microsoft.Kusto/clusters/databases',
   * 'Microsoft.Kusto/clusters/attachedDatabaseConfigurations'
   */
  type: Type;
}

/**
 * A principal assignment check name availability request.
 */
export interface ClusterPrincipalAssignmentCheckNameRequest {
  /**
   * Principal Assignment resource name.
   */
  name: string;
}

/**
 * A data connection check name availability request.
 */
export interface DataConnectionCheckNameRequest {
  /**
   * Data Connection name.
   */
  name: string;
}

/**
 * A principal assignment check name availability request.
 */
export interface DatabasePrincipalAssignmentCheckNameRequest {
  /**
   * Principal Assignment resource name.
   */
  name: string;
}

/**
 * The result returned from a check name availability request.
 */
export interface CheckNameResult {
  /**
   * Specifies a Boolean value that indicates if the name is available.
   */
  nameAvailable?: boolean;
  /**
   * The name that was checked.
   */
  name?: string;
  /**
   * Message indicating an unavailable name due to a conflict, or a description of the naming rules
   * that are violated.
   */
  message?: string;
  /**
   * Message providing the reason why the given name is invalid. Possible values include:
   * 'Invalid', 'AlreadyExists'
   */
  reason?: Reason;
}

/**
 * An interface representing OperationDisplay.
 * @summary The object that describes the operation.
 */
export interface OperationDisplay {
  /**
   * Friendly name of the resource provider.
   */
  provider?: string;
  /**
   * The operation type. For example: read, write, delete.
   */
  operation?: string;
  /**
   * The resource type on which the operation is performed.
   */
  resource?: string;
  /**
   * The friendly name of the operation.
   */
  description?: string;
}

/**
 * An interface representing Operation.
 * @summary A REST API operation
 */
export interface Operation {
  /**
   * The operation name. This is of the format {provider}/{resource}/{operation}.
   */
  name?: string;
  /**
   * The object that describes the operation.
   */
  display?: OperationDisplay;
  /**
   * The intended executor of the operation.
   */
  origin?: string;
  /**
   * Properties of the operation.
   */
  properties?: any;
}

/**
 * The resource model definition for a Azure Resource Manager resource with an etag.
 */
export interface AzureEntityResource extends Resource {
  /**
   * Resource Etag.
   * **NOTE: This property will not be serialized. It can only be populated by the server.**
   */
  readonly etag?: string;
}

/**
 * An interface representing KustoManagementClientOptions.
 */
export interface KustoManagementClientOptions extends AzureServiceClientOptions {
  baseUri?: string;
}

/**
 * @interface
 * The list Kusto database principals operation response.
 * @extends Array<FollowerDatabaseDefinition>
 */
export interface FollowerDatabaseListResult extends Array<FollowerDatabaseDefinition> {
}

/**
 * @interface
 * The list Kusto clusters operation response.
 * @extends Array<Cluster>
 */
export interface ClusterListResult extends Array<Cluster> {
}

/**
 * @interface
 * The list of the EngagementFabric SKU descriptions
 * @extends Array<SkuDescription>
 */
export interface SkuDescriptionList extends Array<SkuDescription> {
}

/**
 * @interface
 * List of available SKUs for a Kusto Cluster.
 * @extends Array<AzureResourceSku>
 */
export interface ListResourceSkusResult extends Array<AzureResourceSku> {
}

/**
 * @interface
 * The list of language extension objects.
 * @extends Array<LanguageExtension>
 */
export interface LanguageExtensionsList extends Array<LanguageExtension> {
}

/**
 * @interface
 * The list Kusto cluster principal assignments operation response.
 * @extends Array<ClusterPrincipalAssignment>
 */
export interface ClusterPrincipalAssignmentListResult extends Array<ClusterPrincipalAssignment> {
}

/**
 * @interface
 * The list Kusto databases operation response.
 * @extends Array<DatabaseUnion>
 */
export interface DatabaseListResult extends Array<DatabaseUnion> {
}

/**
 * @interface
 * The list Kusto database principals operation response.
 * @extends Array<DatabasePrincipal>
 */
export interface DatabasePrincipalListResult extends Array<DatabasePrincipal> {
}

/**
 * @interface
 * The list Kusto database principal assignments operation response.
 * @extends Array<DatabasePrincipalAssignment>
 */
export interface DatabasePrincipalAssignmentListResult extends Array<DatabasePrincipalAssignment> {
}

/**
 * @interface
 * The list attached database configurations operation response.
 * @extends Array<AttachedDatabaseConfiguration>
 */
export interface AttachedDatabaseConfigurationListResult extends Array<AttachedDatabaseConfiguration> {
}

/**
 * @interface
 * The list Kusto data connections operation response.
 * @extends Array<DataConnectionUnion>
 */
export interface DataConnectionListResult extends Array<DataConnectionUnion> {
}

/**
 * @interface
 * An interface representing the OperationListResult.
 * @summary Result of the request to list REST API operations. It contains a list of operations and
 * a URL nextLink to get the next set of results.
 * @extends Array<Operation>
 */
export interface OperationListResult extends Array<Operation> {
  nextLink?: string;
}

/**
 * Defines values for State.
 * Possible values include: 'Creating', 'Unavailable', 'Running', 'Deleting', 'Deleted',
 * 'Stopping', 'Stopped', 'Starting', 'Updating'
 * @readonly
 * @enum {string}
 */
export type State = 'Creating' | 'Unavailable' | 'Running' | 'Deleting' | 'Deleted' | 'Stopping' | 'Stopped' | 'Starting' | 'Updating';

/**
 * Defines values for ProvisioningState.
 * Possible values include: 'Running', 'Creating', 'Deleting', 'Succeeded', 'Failed', 'Moving'
 * @readonly
 * @enum {string}
 */
export type ProvisioningState = 'Running' | 'Creating' | 'Deleting' | 'Succeeded' | 'Failed' | 'Moving';

/**
 * Defines values for LanguageExtensionName.
 * Possible values include: 'PYTHON', 'R'
 * @readonly
 * @enum {string}
 */
export type LanguageExtensionName = 'PYTHON' | 'R';

/**
 * Defines values for AzureSkuName.
 * Possible values include: 'Standard_DS13_v2+1TB_PS', 'Standard_DS13_v2+2TB_PS',
 * 'Standard_DS14_v2+3TB_PS', 'Standard_DS14_v2+4TB_PS', 'Standard_D13_v2', 'Standard_D14_v2',
 * 'Standard_L8s', 'Standard_L16s', 'Standard_D11_v2', 'Standard_D12_v2', 'Standard_L4s', 'Dev(No
 * SLA)_Standard_D11_v2', 'Standard_E2a_v4', 'Standard_E4a_v4', 'Standard_E8a_v4',
 * 'Standard_E16a_v4', 'Standard_E8as_v4+1TB_PS', 'Standard_E8as_v4+2TB_PS',
 * 'Standard_E16as_v4+3TB_PS', 'Standard_E16as_v4+4TB_PS', 'Dev(No SLA)_Standard_E2a_v4'
 * @readonly
 * @enum {string}
 */
export type AzureSkuName = 'Standard_DS13_v2+1TB_PS' | 'Standard_DS13_v2+2TB_PS' | 'Standard_DS14_v2+3TB_PS' | 'Standard_DS14_v2+4TB_PS' | 'Standard_D13_v2' | 'Standard_D14_v2' | 'Standard_L8s' | 'Standard_L16s' | 'Standard_D11_v2' | 'Standard_D12_v2' | 'Standard_L4s' | 'Dev(No SLA)_Standard_D11_v2' | 'Standard_E2a_v4' | 'Standard_E4a_v4' | 'Standard_E8a_v4' | 'Standard_E16a_v4' | 'Standard_E8as_v4+1TB_PS' | 'Standard_E8as_v4+2TB_PS' | 'Standard_E16as_v4+3TB_PS' | 'Standard_E16as_v4+4TB_PS' | 'Dev(No SLA)_Standard_E2a_v4';

/**
 * Defines values for AzureSkuTier.
 * Possible values include: 'Basic', 'Standard'
 * @readonly
 * @enum {string}
 */
export type AzureSkuTier = 'Basic' | 'Standard';

/**
 * Defines values for AzureScaleType.
 * Possible values include: 'automatic', 'manual', 'none'
 * @readonly
 * @enum {string}
 */
export type AzureScaleType = 'automatic' | 'manual' | 'none';

/**
 * Defines values for DefaultPrincipalsModificationKind.
 * Possible values include: 'Union', 'Replace', 'None'
 * @readonly
 * @enum {string}
 */
export type DefaultPrincipalsModificationKind = 'Union' | 'Replace' | 'None';

/**
 * Defines values for PrincipalsModificationKind.
 * Possible values include: 'Union', 'Replace', 'None'
 * @readonly
 * @enum {string}
 */
export type PrincipalsModificationKind = 'Union' | 'Replace' | 'None';

/**
 * Defines values for EventHubDataFormat.
 * Possible values include: 'MULTIJSON', 'JSON', 'CSV', 'TSV', 'SCSV', 'SOHSV', 'PSV', 'TXT',
 * 'RAW', 'SINGLEJSON', 'AVRO', 'TSVE', 'PARQUET', 'ORC'
 * @readonly
 * @enum {string}
 */
export type EventHubDataFormat = 'MULTIJSON' | 'JSON' | 'CSV' | 'TSV' | 'SCSV' | 'SOHSV' | 'PSV' | 'TXT' | 'RAW' | 'SINGLEJSON' | 'AVRO' | 'TSVE' | 'PARQUET' | 'ORC';

/**
 * Defines values for Compression.
 * Possible values include: 'None', 'GZip'
 * @readonly
 * @enum {string}
 */
export type Compression = 'None' | 'GZip';

/**
 * Defines values for IotHubDataFormat.
 * Possible values include: 'MULTIJSON', 'JSON', 'CSV', 'TSV', 'SCSV', 'SOHSV', 'PSV', 'TXT',
 * 'RAW', 'SINGLEJSON', 'AVRO', 'TSVE', 'PARQUET', 'ORC'
 * @readonly
 * @enum {string}
 */
export type IotHubDataFormat = 'MULTIJSON' | 'JSON' | 'CSV' | 'TSV' | 'SCSV' | 'SOHSV' | 'PSV' | 'TXT' | 'RAW' | 'SINGLEJSON' | 'AVRO' | 'TSVE' | 'PARQUET' | 'ORC';

/**
 * Defines values for EventGridDataFormat.
 * Possible values include: 'MULTIJSON', 'JSON', 'CSV', 'TSV', 'SCSV', 'SOHSV', 'PSV', 'TXT',
 * 'RAW', 'SINGLEJSON', 'AVRO', 'TSVE', 'PARQUET', 'ORC'
 * @readonly
 * @enum {string}
 */
export type EventGridDataFormat = 'MULTIJSON' | 'JSON' | 'CSV' | 'TSV' | 'SCSV' | 'SOHSV' | 'PSV' | 'TXT' | 'RAW' | 'SINGLEJSON' | 'AVRO' | 'TSVE' | 'PARQUET' | 'ORC';

/**
 * Defines values for IdentityType.
 * Possible values include: 'None', 'SystemAssigned'
 * @readonly
 * @enum {string}
 */
export type IdentityType = 'None' | 'SystemAssigned';

/**
 * Defines values for DatabasePrincipalRole.
 * Possible values include: 'Admin', 'Ingestor', 'Monitor', 'User', 'UnrestrictedViewers', 'Viewer'
 * @readonly
 * @enum {string}
 */
export type DatabasePrincipalRole = 'Admin' | 'Ingestor' | 'Monitor' | 'User' | 'UnrestrictedViewers' | 'Viewer';

/**
 * Defines values for DatabasePrincipalType.
 * Possible values include: 'App', 'Group', 'User'
 * @readonly
 * @enum {string}
 */
export type DatabasePrincipalType = 'App' | 'Group' | 'User';

/**
 * Defines values for PrincipalType.
 * Possible values include: 'App', 'Group', 'User'
 * @readonly
 * @enum {string}
 */
export type PrincipalType = 'App' | 'Group' | 'User';

/**
 * Defines values for ClusterPrincipalRole.
 * Possible values include: 'AllDatabasesAdmin', 'AllDatabasesViewer'
 * @readonly
 * @enum {string}
 */
export type ClusterPrincipalRole = 'AllDatabasesAdmin' | 'AllDatabasesViewer';

/**
 * Defines values for Type.
 * Possible values include: 'Microsoft.Kusto/clusters/databases',
 * 'Microsoft.Kusto/clusters/attachedDatabaseConfigurations'
 * @readonly
 * @enum {string}
 */
export type Type = 'Microsoft.Kusto/clusters/databases' | 'Microsoft.Kusto/clusters/attachedDatabaseConfigurations';

/**
 * Defines values for Reason.
 * Possible values include: 'Invalid', 'AlreadyExists'
 * @readonly
 * @enum {string}
 */
export type Reason = 'Invalid' | 'AlreadyExists';

/**
 * Contains response data for the get operation.
 */
export type ClustersGetResponse = Cluster & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;

      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: Cluster;
    };
};

/**
 * Contains response data for the createOrUpdate operation.
 */
export type ClustersCreateOrUpdateResponse = Cluster & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;

      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: Cluster;
    };
};

/**
 * Contains response data for the update operation.
 */
export type ClustersUpdateResponse = Cluster & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;

      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: Cluster;
    };
};

/**
 * Contains response data for the listFollowerDatabases operation.
 */
export type ClustersListFollowerDatabasesResponse = FollowerDatabaseListResult & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;

      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: FollowerDatabaseListResult;
    };
};

/**
 * Contains response data for the diagnoseVirtualNetwork operation.
 */
export type ClustersDiagnoseVirtualNetworkResponse = DiagnoseVirtualNetworkResult & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;

      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: DiagnoseVirtualNetworkResult;
    };
};

/**
 * Contains response data for the listByResourceGroup operation.
 */
export type ClustersListByResourceGroupResponse = ClusterListResult & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;

      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: ClusterListResult;
    };
};

/**
 * Contains response data for the list operation.
 */
export type ClustersListResponse = ClusterListResult & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;

      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: ClusterListResult;
    };
};

/**
 * Contains response data for the listSkus operation.
 */
export type ClustersListSkusResponse = SkuDescriptionList & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;

      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: SkuDescriptionList;
    };
};

/**
 * Contains response data for the checkNameAvailability operation.
 */
export type ClustersCheckNameAvailabilityResponse = CheckNameResult & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;

      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: CheckNameResult;
    };
};

/**
 * Contains response data for the listSkusByResource operation.
 */
export type ClustersListSkusByResourceResponse = ListResourceSkusResult & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;

      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: ListResourceSkusResult;
    };
};

/**
 * Contains response data for the listLanguageExtensions operation.
 */
export type ClustersListLanguageExtensionsResponse = LanguageExtensionsList & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;

      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: LanguageExtensionsList;
    };
};

/**
 * Contains response data for the beginCreateOrUpdate operation.
 */
export type ClustersBeginCreateOrUpdateResponse = Cluster & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;

      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: Cluster;
    };
};

/**
 * Contains response data for the beginUpdate operation.
 */
export type ClustersBeginUpdateResponse = Cluster & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;

      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: Cluster;
    };
};

/**
 * Contains response data for the beginDiagnoseVirtualNetwork operation.
 */
export type ClustersBeginDiagnoseVirtualNetworkResponse = DiagnoseVirtualNetworkResult & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;

      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: DiagnoseVirtualNetworkResult;
    };
};

/**
 * Contains response data for the checkNameAvailability operation.
 */
export type ClusterPrincipalAssignmentsCheckNameAvailabilityResponse = CheckNameResult & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;

      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: CheckNameResult;
    };
};

/**
 * Contains response data for the get operation.
 */
export type ClusterPrincipalAssignmentsGetResponse = ClusterPrincipalAssignment & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;

      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: ClusterPrincipalAssignment;
    };
};

/**
 * Contains response data for the createOrUpdate operation.
 */
export type ClusterPrincipalAssignmentsCreateOrUpdateResponse = ClusterPrincipalAssignment & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;

      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: ClusterPrincipalAssignment;
    };
};

/**
 * Contains response data for the list operation.
 */
export type ClusterPrincipalAssignmentsListResponse = ClusterPrincipalAssignmentListResult & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;

      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: ClusterPrincipalAssignmentListResult;
    };
};

/**
 * Contains response data for the beginCreateOrUpdate operation.
 */
export type ClusterPrincipalAssignmentsBeginCreateOrUpdateResponse = ClusterPrincipalAssignment & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;

      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: ClusterPrincipalAssignment;
    };
};

/**
 * Contains response data for the checkNameAvailability operation.
 */
export type DatabasesCheckNameAvailabilityResponse = CheckNameResult & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;

      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: CheckNameResult;
    };
};

/**
 * Contains response data for the listByCluster operation.
 */
export type DatabasesListByClusterResponse = DatabaseListResult & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;

      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: DatabaseListResult;
    };
};

/**
 * Contains response data for the get operation.
 */
export type DatabasesGetResponse = DatabaseUnion & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;

      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: DatabaseUnion;
    };
};

/**
 * Contains response data for the createOrUpdate operation.
 */
export type DatabasesCreateOrUpdateResponse = DatabaseUnion & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;

      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: DatabaseUnion;
    };
};

/**
 * Contains response data for the update operation.
 */
export type DatabasesUpdateResponse = DatabaseUnion & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;

      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: DatabaseUnion;
    };
};

/**
 * Contains response data for the listPrincipals operation.
 */
export type DatabasesListPrincipalsResponse = DatabasePrincipalListResult & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;

      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: DatabasePrincipalListResult;
    };
};

/**
 * Contains response data for the addPrincipals operation.
 */
export type DatabasesAddPrincipalsResponse = DatabasePrincipalListResult & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;

      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: DatabasePrincipalListResult;
    };
};

/**
 * Contains response data for the removePrincipals operation.
 */
export type DatabasesRemovePrincipalsResponse = DatabasePrincipalListResult & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;

      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: DatabasePrincipalListResult;
    };
};

/**
 * Contains response data for the beginCreateOrUpdate operation.
 */
export type DatabasesBeginCreateOrUpdateResponse = DatabaseUnion & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;

      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: DatabaseUnion;
    };
};

/**
 * Contains response data for the beginUpdate operation.
 */
export type DatabasesBeginUpdateResponse = DatabaseUnion & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;

      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: DatabaseUnion;
    };
};

/**
 * Contains response data for the checkNameAvailability operation.
 */
export type DatabasePrincipalAssignmentsCheckNameAvailabilityResponse = CheckNameResult & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;

      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: CheckNameResult;
    };
};

/**
 * Contains response data for the get operation.
 */
export type DatabasePrincipalAssignmentsGetResponse = DatabasePrincipalAssignment & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;

      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: DatabasePrincipalAssignment;
    };
};

/**
 * Contains response data for the createOrUpdate operation.
 */
export type DatabasePrincipalAssignmentsCreateOrUpdateResponse = DatabasePrincipalAssignment & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;

      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: DatabasePrincipalAssignment;
    };
};

/**
 * Contains response data for the list operation.
 */
export type DatabasePrincipalAssignmentsListResponse = DatabasePrincipalAssignmentListResult & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;

      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: DatabasePrincipalAssignmentListResult;
    };
};

/**
 * Contains response data for the beginCreateOrUpdate operation.
 */
export type DatabasePrincipalAssignmentsBeginCreateOrUpdateResponse = DatabasePrincipalAssignment & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;

      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: DatabasePrincipalAssignment;
    };
};

/**
 * Contains response data for the listByCluster operation.
 */
export type AttachedDatabaseConfigurationsListByClusterResponse = AttachedDatabaseConfigurationListResult & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;

      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: AttachedDatabaseConfigurationListResult;
    };
};

/**
 * Contains response data for the get operation.
 */
export type AttachedDatabaseConfigurationsGetResponse = AttachedDatabaseConfiguration & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;

      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: AttachedDatabaseConfiguration;
    };
};

/**
 * Contains response data for the createOrUpdate operation.
 */
export type AttachedDatabaseConfigurationsCreateOrUpdateResponse = AttachedDatabaseConfiguration & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;

      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: AttachedDatabaseConfiguration;
    };
};

/**
 * Contains response data for the beginCreateOrUpdate operation.
 */
export type AttachedDatabaseConfigurationsBeginCreateOrUpdateResponse = AttachedDatabaseConfiguration & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;

      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: AttachedDatabaseConfiguration;
    };
};

/**
 * Contains response data for the listByDatabase operation.
 */
export type DataConnectionsListByDatabaseResponse = DataConnectionListResult & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;

      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: DataConnectionListResult;
    };
};

/**
 * Contains response data for the dataConnectionValidationMethod operation.
 */
export type DataConnectionsDataConnectionValidationMethodResponse = DataConnectionValidationListResult & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;

      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: DataConnectionValidationListResult;
    };
};

/**
 * Contains response data for the checkNameAvailability operation.
 */
export type DataConnectionsCheckNameAvailabilityResponse = CheckNameResult & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;

      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: CheckNameResult;
    };
};

/**
 * Contains response data for the get operation.
 */
export type DataConnectionsGetResponse = DataConnectionUnion & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;

      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: DataConnectionUnion;
    };
};

/**
 * Contains response data for the createOrUpdate operation.
 */
export type DataConnectionsCreateOrUpdateResponse = DataConnectionUnion & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;

      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: DataConnectionUnion;
    };
};

/**
 * Contains response data for the update operation.
 */
export type DataConnectionsUpdateResponse = DataConnectionUnion & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;

      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: DataConnectionUnion;
    };
};

/**
 * Contains response data for the beginCreateOrUpdate operation.
 */
export type DataConnectionsBeginCreateOrUpdateResponse = DataConnectionUnion & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;

      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: DataConnectionUnion;
    };
};

/**
 * Contains response data for the beginUpdate operation.
 */
export type DataConnectionsBeginUpdateResponse = DataConnectionUnion & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;

      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: DataConnectionUnion;
    };
};

/**
 * Contains response data for the list operation.
 */
export type OperationsListResponse = OperationListResult & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;

      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: OperationListResult;
    };
};

/**
 * Contains response data for the listNext operation.
 */
export type OperationsListNextResponse = OperationListResult & {
  /**
   * The underlying HTTP response.
   */
  _response: msRest.HttpResponse & {
      /**
       * The response body as text (string format)
       */
      bodyAsText: string;

      /**
       * The response body as parsed JSON or XML
       */
      parsedBody: OperationListResult;
    };
};
