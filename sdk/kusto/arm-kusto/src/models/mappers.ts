/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */

import * as coreClient from "@azure/core-client";

export const AzureSku: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "AzureSku",
    modelProperties: {
      name: {
        serializedName: "name",
        required: true,
        type: {
          name: "String"
        }
      },
      capacity: {
        serializedName: "capacity",
        type: {
          name: "Number"
        }
      },
      tier: {
        serializedName: "tier",
        required: true,
        type: {
          name: "String"
        }
      }
    }
  }
};

export const SystemData: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "SystemData",
    modelProperties: {
      createdBy: {
        serializedName: "createdBy",
        type: {
          name: "String"
        }
      },
      createdByType: {
        serializedName: "createdByType",
        type: {
          name: "String"
        }
      },
      createdAt: {
        serializedName: "createdAt",
        type: {
          name: "DateTime"
        }
      },
      lastModifiedBy: {
        serializedName: "lastModifiedBy",
        type: {
          name: "String"
        }
      },
      lastModifiedByType: {
        serializedName: "lastModifiedByType",
        type: {
          name: "String"
        }
      },
      lastModifiedAt: {
        serializedName: "lastModifiedAt",
        type: {
          name: "DateTime"
        }
      }
    }
  }
};

export const Identity: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "Identity",
    modelProperties: {
      principalId: {
        serializedName: "principalId",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      tenantId: {
        serializedName: "tenantId",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      type: {
        serializedName: "type",
        required: true,
        type: {
          name: "String"
        }
      },
      userAssignedIdentities: {
        serializedName: "userAssignedIdentities",
        type: {
          name: "Dictionary",
          value: {
            type: {
              name: "Composite",
              className:
                "ComponentsSgqdofSchemasIdentityPropertiesUserassignedidentitiesAdditionalproperties"
            }
          }
        }
      }
    }
  }
};

export const ComponentsSgqdofSchemasIdentityPropertiesUserassignedidentitiesAdditionalproperties: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className:
      "ComponentsSgqdofSchemasIdentityPropertiesUserassignedidentitiesAdditionalproperties",
    modelProperties: {
      principalId: {
        serializedName: "principalId",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      clientId: {
        serializedName: "clientId",
        readOnly: true,
        type: {
          name: "String"
        }
      }
    }
  }
};

export const TrustedExternalTenant: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "TrustedExternalTenant",
    modelProperties: {
      value: {
        serializedName: "value",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const OptimizedAutoscale: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "OptimizedAutoscale",
    modelProperties: {
      version: {
        serializedName: "version",
        required: true,
        type: {
          name: "Number"
        }
      },
      isEnabled: {
        serializedName: "isEnabled",
        required: true,
        type: {
          name: "Boolean"
        }
      },
      minimum: {
        serializedName: "minimum",
        required: true,
        type: {
          name: "Number"
        }
      },
      maximum: {
        serializedName: "maximum",
        required: true,
        type: {
          name: "Number"
        }
      }
    }
  }
};

export const VirtualNetworkConfiguration: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "VirtualNetworkConfiguration",
    modelProperties: {
      subnetId: {
        serializedName: "subnetId",
        required: true,
        type: {
          name: "String"
        }
      },
      enginePublicIpId: {
        serializedName: "enginePublicIpId",
        required: true,
        type: {
          name: "String"
        }
      },
      dataManagementPublicIpId: {
        serializedName: "dataManagementPublicIpId",
        required: true,
        type: {
          name: "String"
        }
      }
    }
  }
};

export const KeyVaultProperties: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "KeyVaultProperties",
    modelProperties: {
      keyName: {
        serializedName: "keyName",
        type: {
          name: "String"
        }
      },
      keyVersion: {
        serializedName: "keyVersion",
        type: {
          name: "String"
        }
      },
      keyVaultUri: {
        serializedName: "keyVaultUri",
        type: {
          name: "String"
        }
      },
      userIdentity: {
        serializedName: "userIdentity",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const LanguageExtensionsList: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "LanguageExtensionsList",
    modelProperties: {
      value: {
        serializedName: "value",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "LanguageExtension"
            }
          }
        }
      }
    }
  }
};

export const LanguageExtension: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "LanguageExtension",
    modelProperties: {
      languageExtensionName: {
        serializedName: "languageExtensionName",
        type: {
          name: "String"
        }
      },
      languageExtensionImageName: {
        serializedName: "languageExtensionImageName",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const AcceptedAudiences: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "AcceptedAudiences",
    modelProperties: {
      value: {
        serializedName: "value",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const PrivateEndpointProperty: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "PrivateEndpointProperty",
    modelProperties: {
      id: {
        serializedName: "id",
        readOnly: true,
        type: {
          name: "String"
        }
      }
    }
  }
};

export const PrivateLinkServiceConnectionStateProperty: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "PrivateLinkServiceConnectionStateProperty",
    modelProperties: {
      status: {
        serializedName: "status",
        type: {
          name: "String"
        }
      },
      description: {
        serializedName: "description",
        type: {
          name: "String"
        }
      },
      actionsRequired: {
        serializedName: "actionsRequired",
        readOnly: true,
        type: {
          name: "String"
        }
      }
    }
  }
};

export const Resource: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "Resource",
    modelProperties: {
      id: {
        serializedName: "id",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      name: {
        serializedName: "name",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      type: {
        serializedName: "type",
        readOnly: true,
        type: {
          name: "String"
        }
      }
    }
  }
};

export const MigrationClusterProperties: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "MigrationClusterProperties",
    modelProperties: {
      id: {
        serializedName: "id",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      uri: {
        serializedName: "uri",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      dataIngestionUri: {
        serializedName: "dataIngestionUri",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      role: {
        serializedName: "role",
        readOnly: true,
        type: {
          name: "String"
        }
      }
    }
  }
};

export const ErrorResponse: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "ErrorResponse",
    modelProperties: {
      error: {
        serializedName: "error",
        type: {
          name: "Composite",
          className: "ErrorDetail"
        }
      }
    }
  }
};

export const ErrorDetail: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "ErrorDetail",
    modelProperties: {
      code: {
        serializedName: "code",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      message: {
        serializedName: "message",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      target: {
        serializedName: "target",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      details: {
        serializedName: "details",
        readOnly: true,
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "ErrorDetail"
            }
          }
        }
      },
      additionalInfo: {
        serializedName: "additionalInfo",
        readOnly: true,
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "ErrorAdditionalInfo"
            }
          }
        }
      }
    }
  }
};

export const ErrorAdditionalInfo: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "ErrorAdditionalInfo",
    modelProperties: {
      type: {
        serializedName: "type",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      info: {
        serializedName: "info",
        readOnly: true,
        type: {
          name: "Dictionary",
          value: { type: { name: "any" } }
        }
      }
    }
  }
};

export const ClusterMigrateRequest: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "ClusterMigrateRequest",
    modelProperties: {
      clusterResourceId: {
        serializedName: "clusterResourceId",
        required: true,
        type: {
          name: "String"
        }
      }
    }
  }
};

export const ClusterPrincipalAssignmentCheckNameRequest: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "ClusterPrincipalAssignmentCheckNameRequest",
    modelProperties: {
      name: {
        serializedName: "name",
        required: true,
        type: {
          name: "String"
        }
      },
      type: {
        defaultValue: "Microsoft.Kusto/clusters/principalAssignments",
        isConstant: true,
        serializedName: "type",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const CheckNameResult: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "CheckNameResult",
    modelProperties: {
      nameAvailable: {
        serializedName: "nameAvailable",
        type: {
          name: "Boolean"
        }
      },
      name: {
        serializedName: "name",
        type: {
          name: "String"
        }
      },
      message: {
        serializedName: "message",
        type: {
          name: "String"
        }
      },
      reason: {
        serializedName: "reason",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const ClusterPrincipalAssignmentListResult: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "ClusterPrincipalAssignmentListResult",
    modelProperties: {
      value: {
        serializedName: "value",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "ClusterPrincipalAssignment"
            }
          }
        }
      }
    }
  }
};

export const FollowerDatabaseListResult: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "FollowerDatabaseListResult",
    modelProperties: {
      value: {
        serializedName: "value",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "FollowerDatabaseDefinition"
            }
          }
        }
      }
    }
  }
};

export const FollowerDatabaseDefinition: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "FollowerDatabaseDefinition",
    modelProperties: {
      clusterResourceId: {
        serializedName: "clusterResourceId",
        required: true,
        type: {
          name: "String"
        }
      },
      attachedDatabaseConfigurationName: {
        serializedName: "attachedDatabaseConfigurationName",
        required: true,
        type: {
          name: "String"
        }
      },
      databaseName: {
        serializedName: "databaseName",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      tableLevelSharingProperties: {
        serializedName: "tableLevelSharingProperties",
        type: {
          name: "Composite",
          className: "TableLevelSharingProperties"
        }
      },
      databaseShareOrigin: {
        serializedName: "databaseShareOrigin",
        readOnly: true,
        type: {
          name: "String"
        }
      }
    }
  }
};

export const TableLevelSharingProperties: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "TableLevelSharingProperties",
    modelProperties: {
      tablesToInclude: {
        serializedName: "tablesToInclude",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "String"
            }
          }
        }
      },
      tablesToExclude: {
        serializedName: "tablesToExclude",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "String"
            }
          }
        }
      },
      externalTablesToInclude: {
        serializedName: "externalTablesToInclude",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "String"
            }
          }
        }
      },
      externalTablesToExclude: {
        serializedName: "externalTablesToExclude",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "String"
            }
          }
        }
      },
      materializedViewsToInclude: {
        serializedName: "materializedViewsToInclude",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "String"
            }
          }
        }
      },
      materializedViewsToExclude: {
        serializedName: "materializedViewsToExclude",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "String"
            }
          }
        }
      },
      functionsToInclude: {
        serializedName: "functionsToInclude",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "String"
            }
          }
        }
      },
      functionsToExclude: {
        serializedName: "functionsToExclude",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "String"
            }
          }
        }
      }
    }
  }
};

export const DiagnoseVirtualNetworkResult: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "DiagnoseVirtualNetworkResult",
    modelProperties: {
      findings: {
        serializedName: "findings",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "String"
            }
          }
        }
      }
    }
  }
};

export const ClusterListResult: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "ClusterListResult",
    modelProperties: {
      value: {
        serializedName: "value",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "Cluster"
            }
          }
        }
      }
    }
  }
};

export const SkuDescriptionList: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "SkuDescriptionList",
    modelProperties: {
      value: {
        serializedName: "value",
        readOnly: true,
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "SkuDescription"
            }
          }
        }
      }
    }
  }
};

export const SkuDescription: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "SkuDescription",
    modelProperties: {
      resourceType: {
        serializedName: "resourceType",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      name: {
        serializedName: "name",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      tier: {
        serializedName: "tier",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      locations: {
        serializedName: "locations",
        readOnly: true,
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "String"
            }
          }
        }
      },
      locationInfo: {
        serializedName: "locationInfo",
        readOnly: true,
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "SkuLocationInfoItem"
            }
          }
        }
      },
      restrictions: {
        serializedName: "restrictions",
        readOnly: true,
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Dictionary",
              value: { type: { name: "any" } }
            }
          }
        }
      }
    }
  }
};

export const SkuLocationInfoItem: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "SkuLocationInfoItem",
    modelProperties: {
      location: {
        serializedName: "location",
        required: true,
        type: {
          name: "String"
        }
      },
      zones: {
        serializedName: "zones",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "String"
            }
          }
        }
      },
      zoneDetails: {
        serializedName: "zoneDetails",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "ResourceSkuZoneDetails"
            }
          }
        }
      }
    }
  }
};

export const ResourceSkuZoneDetails: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "ResourceSkuZoneDetails",
    modelProperties: {
      name: {
        serializedName: "name",
        readOnly: true,
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "String"
            }
          }
        }
      },
      capabilities: {
        serializedName: "capabilities",
        readOnly: true,
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "ResourceSkuCapabilities"
            }
          }
        }
      }
    }
  }
};

export const ResourceSkuCapabilities: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "ResourceSkuCapabilities",
    modelProperties: {
      name: {
        serializedName: "name",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      value: {
        serializedName: "value",
        readOnly: true,
        type: {
          name: "String"
        }
      }
    }
  }
};

export const ClusterCheckNameRequest: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "ClusterCheckNameRequest",
    modelProperties: {
      name: {
        serializedName: "name",
        required: true,
        type: {
          name: "String"
        }
      },
      type: {
        defaultValue: "Microsoft.Kusto/clusters",
        isConstant: true,
        serializedName: "type",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const CheckNameRequest: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "CheckNameRequest",
    modelProperties: {
      name: {
        serializedName: "name",
        required: true,
        type: {
          name: "String"
        }
      },
      type: {
        serializedName: "type",
        required: true,
        type: {
          name: "Enum",
          allowedValues: [
            "Microsoft.Kusto/clusters/databases",
            "Microsoft.Kusto/clusters/attachedDatabaseConfigurations"
          ]
        }
      }
    }
  }
};

export const AttachedDatabaseConfigurationsCheckNameRequest: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "AttachedDatabaseConfigurationsCheckNameRequest",
    modelProperties: {
      name: {
        serializedName: "name",
        required: true,
        type: {
          name: "String"
        }
      },
      type: {
        defaultValue: "Microsoft.Kusto/clusters/attachedDatabaseConfigurations",
        isConstant: true,
        serializedName: "type",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const ManagedPrivateEndpointsCheckNameRequest: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "ManagedPrivateEndpointsCheckNameRequest",
    modelProperties: {
      name: {
        serializedName: "name",
        required: true,
        type: {
          name: "String"
        }
      },
      type: {
        defaultValue: "Microsoft.Kusto/clusters/managedPrivateEndpoints",
        isConstant: true,
        serializedName: "type",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const ListResourceSkusResult: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "ListResourceSkusResult",
    modelProperties: {
      value: {
        serializedName: "value",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "AzureResourceSku"
            }
          }
        }
      }
    }
  }
};

export const AzureResourceSku: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "AzureResourceSku",
    modelProperties: {
      resourceType: {
        serializedName: "resourceType",
        type: {
          name: "String"
        }
      },
      sku: {
        serializedName: "sku",
        type: {
          name: "Composite",
          className: "AzureSku"
        }
      },
      capacity: {
        serializedName: "capacity",
        type: {
          name: "Composite",
          className: "AzureCapacity"
        }
      }
    }
  }
};

export const AzureCapacity: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "AzureCapacity",
    modelProperties: {
      scaleType: {
        serializedName: "scaleType",
        required: true,
        type: {
          name: "String"
        }
      },
      minimum: {
        serializedName: "minimum",
        required: true,
        type: {
          name: "Number"
        }
      },
      maximum: {
        serializedName: "maximum",
        required: true,
        type: {
          name: "Number"
        }
      },
      default: {
        serializedName: "default",
        required: true,
        type: {
          name: "Number"
        }
      }
    }
  }
};

export const DatabaseListResult: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "DatabaseListResult",
    modelProperties: {
      nextLink: {
        serializedName: "nextLink",
        type: {
          name: "String"
        }
      },
      value: {
        serializedName: "value",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "Database"
            }
          }
        }
      }
    }
  }
};

export const DatabaseInviteFollowerRequest: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "DatabaseInviteFollowerRequest",
    modelProperties: {
      inviteeEmail: {
        serializedName: "inviteeEmail",
        required: true,
        type: {
          name: "String"
        }
      },
      tableLevelSharingProperties: {
        serializedName: "tableLevelSharingProperties",
        type: {
          name: "Composite",
          className: "TableLevelSharingProperties"
        }
      }
    }
  }
};

export const DatabaseInviteFollowerResult: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "DatabaseInviteFollowerResult",
    modelProperties: {
      generatedInvitation: {
        serializedName: "generatedInvitation",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const DatabasePrincipalAssignmentCheckNameRequest: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "DatabasePrincipalAssignmentCheckNameRequest",
    modelProperties: {
      name: {
        serializedName: "name",
        required: true,
        type: {
          name: "String"
        }
      },
      type: {
        defaultValue: "Microsoft.Kusto/clusters/databases/principalAssignments",
        isConstant: true,
        serializedName: "type",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const DatabasePrincipalAssignmentListResult: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "DatabasePrincipalAssignmentListResult",
    modelProperties: {
      value: {
        serializedName: "value",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "DatabasePrincipalAssignment"
            }
          }
        }
      }
    }
  }
};

export const DatabasePrincipalListResult: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "DatabasePrincipalListResult",
    modelProperties: {
      value: {
        serializedName: "value",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "DatabasePrincipal"
            }
          }
        }
      }
    }
  }
};

export const DatabasePrincipal: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "DatabasePrincipal",
    modelProperties: {
      role: {
        serializedName: "role",
        required: true,
        type: {
          name: "String"
        }
      },
      name: {
        serializedName: "name",
        required: true,
        type: {
          name: "String"
        }
      },
      type: {
        serializedName: "type",
        required: true,
        type: {
          name: "String"
        }
      },
      fqn: {
        serializedName: "fqn",
        type: {
          name: "String"
        }
      },
      email: {
        serializedName: "email",
        type: {
          name: "String"
        }
      },
      appId: {
        serializedName: "appId",
        type: {
          name: "String"
        }
      },
      tenantName: {
        serializedName: "tenantName",
        readOnly: true,
        type: {
          name: "String"
        }
      }
    }
  }
};

export const DatabasePrincipalListRequest: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "DatabasePrincipalListRequest",
    modelProperties: {
      value: {
        serializedName: "value",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "DatabasePrincipal"
            }
          }
        }
      }
    }
  }
};

export const ScriptListResult: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "ScriptListResult",
    modelProperties: {
      value: {
        serializedName: "value",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "Script"
            }
          }
        }
      }
    }
  }
};

export const ManagedPrivateEndpointListResult: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "ManagedPrivateEndpointListResult",
    modelProperties: {
      value: {
        serializedName: "value",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "ManagedPrivateEndpoint"
            }
          }
        }
      }
    }
  }
};

export const PrivateEndpointConnectionListResult: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "PrivateEndpointConnectionListResult",
    modelProperties: {
      value: {
        serializedName: "value",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "PrivateEndpointConnection"
            }
          }
        }
      }
    }
  }
};

export const PrivateLinkResourceListResult: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "PrivateLinkResourceListResult",
    modelProperties: {
      value: {
        serializedName: "value",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "PrivateLinkResource"
            }
          }
        }
      }
    }
  }
};

export const OutboundNetworkDependenciesEndpointListResult: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "OutboundNetworkDependenciesEndpointListResult",
    modelProperties: {
      value: {
        serializedName: "value",
        required: true,
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "OutboundNetworkDependenciesEndpoint"
            }
          }
        }
      },
      nextLink: {
        serializedName: "nextLink",
        readOnly: true,
        type: {
          name: "String"
        }
      }
    }
  }
};

export const EndpointDependency: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "EndpointDependency",
    modelProperties: {
      domainName: {
        serializedName: "domainName",
        type: {
          name: "String"
        }
      },
      endpointDetails: {
        serializedName: "endpointDetails",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "EndpointDetail"
            }
          }
        }
      }
    }
  }
};

export const EndpointDetail: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "EndpointDetail",
    modelProperties: {
      port: {
        serializedName: "port",
        type: {
          name: "Number"
        }
      }
    }
  }
};

export const AttachedDatabaseConfigurationListResult: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "AttachedDatabaseConfigurationListResult",
    modelProperties: {
      value: {
        serializedName: "value",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "AttachedDatabaseConfiguration"
            }
          }
        }
      }
    }
  }
};

export const DataConnectionListResult: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "DataConnectionListResult",
    modelProperties: {
      value: {
        serializedName: "value",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "DataConnection"
            }
          }
        }
      }
    }
  }
};

export const DataConnectionValidation: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "DataConnectionValidation",
    modelProperties: {
      dataConnectionName: {
        serializedName: "dataConnectionName",
        type: {
          name: "String"
        }
      },
      properties: {
        serializedName: "properties",
        type: {
          name: "Composite",
          className: "DataConnection"
        }
      }
    }
  }
};

export const DataConnectionValidationListResult: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "DataConnectionValidationListResult",
    modelProperties: {
      value: {
        serializedName: "value",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "DataConnectionValidationResult"
            }
          }
        }
      }
    }
  }
};

export const DataConnectionValidationResult: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "DataConnectionValidationResult",
    modelProperties: {
      errorMessage: {
        serializedName: "errorMessage",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const DataConnectionCheckNameRequest: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "DataConnectionCheckNameRequest",
    modelProperties: {
      name: {
        serializedName: "name",
        required: true,
        type: {
          name: "String"
        }
      },
      type: {
        defaultValue: "Microsoft.Kusto/clusters/databases/dataConnections",
        isConstant: true,
        serializedName: "type",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const ScriptCheckNameRequest: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "ScriptCheckNameRequest",
    modelProperties: {
      name: {
        serializedName: "name",
        required: true,
        type: {
          name: "String"
        }
      },
      type: {
        defaultValue: "Microsoft.Kusto/clusters/databases/scripts",
        isConstant: true,
        serializedName: "type",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const OperationListResult: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "OperationListResult",
    modelProperties: {
      value: {
        serializedName: "value",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "Operation"
            }
          }
        }
      },
      nextLink: {
        serializedName: "nextLink",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const Operation: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "Operation",
    modelProperties: {
      name: {
        serializedName: "name",
        type: {
          name: "String"
        }
      },
      display: {
        serializedName: "display",
        type: {
          name: "Composite",
          className: "OperationDisplay"
        }
      },
      origin: {
        serializedName: "origin",
        type: {
          name: "String"
        }
      },
      properties: {
        serializedName: "properties",
        type: {
          name: "Dictionary",
          value: { type: { name: "any" } }
        }
      }
    }
  }
};

export const OperationDisplay: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "OperationDisplay",
    modelProperties: {
      provider: {
        serializedName: "provider",
        type: {
          name: "String"
        }
      },
      operation: {
        serializedName: "operation",
        type: {
          name: "String"
        }
      },
      resource: {
        serializedName: "resource",
        type: {
          name: "String"
        }
      },
      description: {
        serializedName: "description",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const OperationResult: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "OperationResult",
    modelProperties: {
      id: {
        serializedName: "id",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      name: {
        serializedName: "name",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      status: {
        serializedName: "status",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      startTime: {
        serializedName: "startTime",
        type: {
          name: "DateTime"
        }
      },
      endTime: {
        serializedName: "endTime",
        type: {
          name: "DateTime"
        }
      },
      percentComplete: {
        constraints: {
          InclusiveMaximum: 100,
          InclusiveMinimum: 0
        },
        serializedName: "percentComplete",
        type: {
          name: "Number"
        }
      },
      code: {
        serializedName: "error.code",
        type: {
          name: "String"
        }
      },
      message: {
        serializedName: "error.message",
        type: {
          name: "String"
        }
      },
      operationKind: {
        serializedName: "properties.operationKind",
        type: {
          name: "String"
        }
      },
      provisioningState: {
        serializedName: "properties.provisioningState",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      operationState: {
        serializedName: "properties.operationState",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const DatabaseStatistics: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "DatabaseStatistics",
    modelProperties: {
      size: {
        serializedName: "size",
        type: {
          name: "Number"
        }
      }
    }
  }
};

export const SuspensionDetails: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "SuspensionDetails",
    modelProperties: {
      suspensionStartDate: {
        serializedName: "suspensionStartDate",
        type: {
          name: "DateTime"
        }
      }
    }
  }
};

export const ProxyResource: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "ProxyResource",
    modelProperties: {
      ...Resource.type.modelProperties
    }
  }
};

export const TrackedResource: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "TrackedResource",
    modelProperties: {
      ...Resource.type.modelProperties,
      tags: {
        serializedName: "tags",
        type: {
          name: "Dictionary",
          value: { type: { name: "String" } }
        }
      },
      location: {
        serializedName: "location",
        required: true,
        type: {
          name: "String"
        }
      }
    }
  }
};

export const ClusterUpdate: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "ClusterUpdate",
    modelProperties: {
      ...Resource.type.modelProperties,
      tags: {
        serializedName: "tags",
        type: {
          name: "Dictionary",
          value: { type: { name: "String" } }
        }
      },
      location: {
        serializedName: "location",
        type: {
          name: "String"
        }
      },
      sku: {
        serializedName: "sku",
        type: {
          name: "Composite",
          className: "AzureSku"
        }
      },
      identity: {
        serializedName: "identity",
        type: {
          name: "Composite",
          className: "Identity"
        }
      },
      state: {
        serializedName: "properties.state",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      provisioningState: {
        serializedName: "properties.provisioningState",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      uri: {
        serializedName: "properties.uri",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      dataIngestionUri: {
        serializedName: "properties.dataIngestionUri",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      stateReason: {
        serializedName: "properties.stateReason",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      trustedExternalTenants: {
        serializedName: "properties.trustedExternalTenants",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "TrustedExternalTenant"
            }
          }
        }
      },
      optimizedAutoscale: {
        serializedName: "properties.optimizedAutoscale",
        type: {
          name: "Composite",
          className: "OptimizedAutoscale"
        }
      },
      enableDiskEncryption: {
        defaultValue: false,
        serializedName: "properties.enableDiskEncryption",
        type: {
          name: "Boolean"
        }
      },
      enableStreamingIngest: {
        defaultValue: false,
        serializedName: "properties.enableStreamingIngest",
        type: {
          name: "Boolean"
        }
      },
      virtualNetworkConfiguration: {
        serializedName: "properties.virtualNetworkConfiguration",
        type: {
          name: "Composite",
          className: "VirtualNetworkConfiguration"
        }
      },
      keyVaultProperties: {
        serializedName: "properties.keyVaultProperties",
        type: {
          name: "Composite",
          className: "KeyVaultProperties"
        }
      },
      enablePurge: {
        defaultValue: false,
        serializedName: "properties.enablePurge",
        type: {
          name: "Boolean"
        }
      },
      languageExtensions: {
        serializedName: "properties.languageExtensions",
        type: {
          name: "Composite",
          className: "LanguageExtensionsList"
        }
      },
      enableDoubleEncryption: {
        defaultValue: false,
        serializedName: "properties.enableDoubleEncryption",
        type: {
          name: "Boolean"
        }
      },
      publicNetworkAccess: {
        defaultValue: "Enabled",
        serializedName: "properties.publicNetworkAccess",
        type: {
          name: "String"
        }
      },
      allowedIpRangeList: {
        serializedName: "properties.allowedIpRangeList",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "String"
            }
          }
        }
      },
      engineType: {
        defaultValue: "V3",
        serializedName: "properties.engineType",
        type: {
          name: "String"
        }
      },
      acceptedAudiences: {
        serializedName: "properties.acceptedAudiences",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "AcceptedAudiences"
            }
          }
        }
      },
      enableAutoStop: {
        defaultValue: true,
        serializedName: "properties.enableAutoStop",
        type: {
          name: "Boolean"
        }
      },
      restrictOutboundNetworkAccess: {
        defaultValue: "Disabled",
        serializedName: "properties.restrictOutboundNetworkAccess",
        type: {
          name: "String"
        }
      },
      allowedFqdnList: {
        serializedName: "properties.allowedFqdnList",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "String"
            }
          }
        }
      },
      publicIPType: {
        defaultValue: "IPv4",
        serializedName: "properties.publicIPType",
        type: {
          name: "String"
        }
      },
      virtualClusterGraduationProperties: {
        serializedName: "properties.virtualClusterGraduationProperties",
        type: {
          name: "String"
        }
      },
      privateEndpointConnections: {
        serializedName: "properties.privateEndpointConnections",
        readOnly: true,
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "PrivateEndpointConnection"
            }
          }
        }
      },
      migrationCluster: {
        serializedName: "properties.migrationCluster",
        type: {
          name: "Composite",
          className: "MigrationClusterProperties"
        }
      }
    }
  }
};

export const PrivateLinkResource: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "PrivateLinkResource",
    modelProperties: {
      ...Resource.type.modelProperties,
      systemData: {
        serializedName: "systemData",
        type: {
          name: "Composite",
          className: "SystemData"
        }
      },
      groupId: {
        serializedName: "properties.groupId",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      requiredMembers: {
        serializedName: "properties.requiredMembers",
        readOnly: true,
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "String"
            }
          }
        }
      },
      requiredZoneNames: {
        serializedName: "properties.requiredZoneNames",
        readOnly: true,
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "String"
            }
          }
        }
      }
    }
  }
};

export const PrivateEndpointConnection: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "PrivateEndpointConnection",
    modelProperties: {
      ...ProxyResource.type.modelProperties,
      systemData: {
        serializedName: "systemData",
        type: {
          name: "Composite",
          className: "SystemData"
        }
      },
      privateEndpoint: {
        serializedName: "properties.privateEndpoint",
        type: {
          name: "Composite",
          className: "PrivateEndpointProperty"
        }
      },
      privateLinkServiceConnectionState: {
        serializedName: "properties.privateLinkServiceConnectionState",
        type: {
          name: "Composite",
          className: "PrivateLinkServiceConnectionStateProperty"
        }
      },
      groupId: {
        serializedName: "properties.groupId",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      provisioningState: {
        serializedName: "properties.provisioningState",
        readOnly: true,
        type: {
          name: "String"
        }
      }
    }
  }
};

export const ClusterPrincipalAssignment: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "ClusterPrincipalAssignment",
    modelProperties: {
      ...ProxyResource.type.modelProperties,
      principalId: {
        serializedName: "properties.principalId",
        type: {
          name: "String"
        }
      },
      role: {
        serializedName: "properties.role",
        type: {
          name: "String"
        }
      },
      tenantId: {
        serializedName: "properties.tenantId",
        type: {
          name: "String"
        }
      },
      principalType: {
        serializedName: "properties.principalType",
        type: {
          name: "String"
        }
      },
      tenantName: {
        serializedName: "properties.tenantName",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      principalName: {
        serializedName: "properties.principalName",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      provisioningState: {
        serializedName: "properties.provisioningState",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      aadObjectId: {
        serializedName: "properties.aadObjectId",
        readOnly: true,
        type: {
          name: "String"
        }
      }
    }
  }
};

export const Database: coreClient.CompositeMapper = {
  serializedName: "Database",
  type: {
    name: "Composite",
    className: "Database",
    uberParent: "ProxyResource",
    polymorphicDiscriminator: {
      serializedName: "kind",
      clientName: "kind"
    },
    modelProperties: {
      ...ProxyResource.type.modelProperties,
      location: {
        serializedName: "location",
        type: {
          name: "String"
        }
      },
      kind: {
        serializedName: "kind",
        required: true,
        type: {
          name: "String"
        }
      }
    }
  }
};

export const DatabasePrincipalAssignment: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "DatabasePrincipalAssignment",
    modelProperties: {
      ...ProxyResource.type.modelProperties,
      principalId: {
        serializedName: "properties.principalId",
        type: {
          name: "String"
        }
      },
      role: {
        serializedName: "properties.role",
        type: {
          name: "String"
        }
      },
      tenantId: {
        serializedName: "properties.tenantId",
        type: {
          name: "String"
        }
      },
      principalType: {
        serializedName: "properties.principalType",
        type: {
          name: "String"
        }
      },
      tenantName: {
        serializedName: "properties.tenantName",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      principalName: {
        serializedName: "properties.principalName",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      provisioningState: {
        serializedName: "properties.provisioningState",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      aadObjectId: {
        serializedName: "properties.aadObjectId",
        readOnly: true,
        type: {
          name: "String"
        }
      }
    }
  }
};

export const Script: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "Script",
    modelProperties: {
      ...ProxyResource.type.modelProperties,
      systemData: {
        serializedName: "systemData",
        type: {
          name: "Composite",
          className: "SystemData"
        }
      },
      scriptUrl: {
        serializedName: "properties.scriptUrl",
        type: {
          name: "String"
        }
      },
      scriptUrlSasToken: {
        serializedName: "properties.scriptUrlSasToken",
        type: {
          name: "String"
        }
      },
      scriptContent: {
        serializedName: "properties.scriptContent",
        type: {
          name: "String"
        }
      },
      forceUpdateTag: {
        serializedName: "properties.forceUpdateTag",
        type: {
          name: "String"
        }
      },
      continueOnErrors: {
        defaultValue: false,
        serializedName: "properties.continueOnErrors",
        type: {
          name: "Boolean"
        }
      },
      provisioningState: {
        serializedName: "properties.provisioningState",
        readOnly: true,
        type: {
          name: "String"
        }
      }
    }
  }
};

export const ManagedPrivateEndpoint: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "ManagedPrivateEndpoint",
    modelProperties: {
      ...ProxyResource.type.modelProperties,
      systemData: {
        serializedName: "systemData",
        type: {
          name: "Composite",
          className: "SystemData"
        }
      },
      privateLinkResourceId: {
        serializedName: "properties.privateLinkResourceId",
        type: {
          name: "String"
        }
      },
      privateLinkResourceRegion: {
        serializedName: "properties.privateLinkResourceRegion",
        type: {
          name: "String"
        }
      },
      groupId: {
        serializedName: "properties.groupId",
        type: {
          name: "String"
        }
      },
      requestMessage: {
        serializedName: "properties.requestMessage",
        type: {
          name: "String"
        }
      },
      provisioningState: {
        serializedName: "properties.provisioningState",
        readOnly: true,
        type: {
          name: "String"
        }
      }
    }
  }
};

export const OutboundNetworkDependenciesEndpoint: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "OutboundNetworkDependenciesEndpoint",
    modelProperties: {
      ...ProxyResource.type.modelProperties,
      etag: {
        serializedName: "etag",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      category: {
        serializedName: "properties.category",
        type: {
          name: "String"
        }
      },
      endpoints: {
        serializedName: "properties.endpoints",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "EndpointDependency"
            }
          }
        }
      },
      provisioningState: {
        serializedName: "properties.provisioningState",
        readOnly: true,
        type: {
          name: "String"
        }
      }
    }
  }
};

export const AttachedDatabaseConfiguration: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "AttachedDatabaseConfiguration",
    modelProperties: {
      ...ProxyResource.type.modelProperties,
      location: {
        serializedName: "location",
        type: {
          name: "String"
        }
      },
      provisioningState: {
        serializedName: "properties.provisioningState",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      databaseName: {
        serializedName: "properties.databaseName",
        type: {
          name: "String"
        }
      },
      clusterResourceId: {
        serializedName: "properties.clusterResourceId",
        type: {
          name: "String"
        }
      },
      attachedDatabaseNames: {
        serializedName: "properties.attachedDatabaseNames",
        readOnly: true,
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "String"
            }
          }
        }
      },
      defaultPrincipalsModificationKind: {
        serializedName: "properties.defaultPrincipalsModificationKind",
        type: {
          name: "String"
        }
      },
      tableLevelSharingProperties: {
        serializedName: "properties.tableLevelSharingProperties",
        type: {
          name: "Composite",
          className: "TableLevelSharingProperties"
        }
      },
      databaseNameOverride: {
        serializedName: "properties.databaseNameOverride",
        type: {
          name: "String"
        }
      },
      databaseNamePrefix: {
        serializedName: "properties.databaseNamePrefix",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const DataConnection: coreClient.CompositeMapper = {
  serializedName: "DataConnection",
  type: {
    name: "Composite",
    className: "DataConnection",
    uberParent: "ProxyResource",
    polymorphicDiscriminator: {
      serializedName: "kind",
      clientName: "kind"
    },
    modelProperties: {
      ...ProxyResource.type.modelProperties,
      location: {
        serializedName: "location",
        type: {
          name: "String"
        }
      },
      kind: {
        serializedName: "kind",
        required: true,
        type: {
          name: "String"
        }
      }
    }
  }
};

export const Cluster: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "Cluster",
    modelProperties: {
      ...TrackedResource.type.modelProperties,
      sku: {
        serializedName: "sku",
        type: {
          name: "Composite",
          className: "AzureSku"
        }
      },
      systemData: {
        serializedName: "systemData",
        type: {
          name: "Composite",
          className: "SystemData"
        }
      },
      zones: {
        serializedName: "zones",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "String"
            }
          }
        }
      },
      identity: {
        serializedName: "identity",
        type: {
          name: "Composite",
          className: "Identity"
        }
      },
      etag: {
        serializedName: "etag",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      state: {
        serializedName: "properties.state",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      provisioningState: {
        serializedName: "properties.provisioningState",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      uri: {
        serializedName: "properties.uri",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      dataIngestionUri: {
        serializedName: "properties.dataIngestionUri",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      stateReason: {
        serializedName: "properties.stateReason",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      trustedExternalTenants: {
        serializedName: "properties.trustedExternalTenants",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "TrustedExternalTenant"
            }
          }
        }
      },
      optimizedAutoscale: {
        serializedName: "properties.optimizedAutoscale",
        type: {
          name: "Composite",
          className: "OptimizedAutoscale"
        }
      },
      enableDiskEncryption: {
        defaultValue: false,
        serializedName: "properties.enableDiskEncryption",
        type: {
          name: "Boolean"
        }
      },
      enableStreamingIngest: {
        defaultValue: false,
        serializedName: "properties.enableStreamingIngest",
        type: {
          name: "Boolean"
        }
      },
      virtualNetworkConfiguration: {
        serializedName: "properties.virtualNetworkConfiguration",
        type: {
          name: "Composite",
          className: "VirtualNetworkConfiguration"
        }
      },
      keyVaultProperties: {
        serializedName: "properties.keyVaultProperties",
        type: {
          name: "Composite",
          className: "KeyVaultProperties"
        }
      },
      enablePurge: {
        defaultValue: false,
        serializedName: "properties.enablePurge",
        type: {
          name: "Boolean"
        }
      },
      languageExtensions: {
        serializedName: "properties.languageExtensions",
        type: {
          name: "Composite",
          className: "LanguageExtensionsList"
        }
      },
      enableDoubleEncryption: {
        defaultValue: false,
        serializedName: "properties.enableDoubleEncryption",
        type: {
          name: "Boolean"
        }
      },
      publicNetworkAccess: {
        defaultValue: "Enabled",
        serializedName: "properties.publicNetworkAccess",
        type: {
          name: "String"
        }
      },
      allowedIpRangeList: {
        serializedName: "properties.allowedIpRangeList",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "String"
            }
          }
        }
      },
      engineType: {
        defaultValue: "V3",
        serializedName: "properties.engineType",
        type: {
          name: "String"
        }
      },
      acceptedAudiences: {
        serializedName: "properties.acceptedAudiences",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "AcceptedAudiences"
            }
          }
        }
      },
      enableAutoStop: {
        defaultValue: true,
        serializedName: "properties.enableAutoStop",
        type: {
          name: "Boolean"
        }
      },
      restrictOutboundNetworkAccess: {
        defaultValue: "Disabled",
        serializedName: "properties.restrictOutboundNetworkAccess",
        type: {
          name: "String"
        }
      },
      allowedFqdnList: {
        serializedName: "properties.allowedFqdnList",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "String"
            }
          }
        }
      },
      publicIPType: {
        defaultValue: "IPv4",
        serializedName: "properties.publicIPType",
        type: {
          name: "String"
        }
      },
      virtualClusterGraduationProperties: {
        serializedName: "properties.virtualClusterGraduationProperties",
        type: {
          name: "String"
        }
      },
      privateEndpointConnections: {
        serializedName: "properties.privateEndpointConnections",
        readOnly: true,
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "PrivateEndpointConnection"
            }
          }
        }
      },
      migrationCluster: {
        serializedName: "properties.migrationCluster",
        type: {
          name: "Composite",
          className: "MigrationClusterProperties"
        }
      }
    }
  }
};

export const ReadWriteDatabase: coreClient.CompositeMapper = {
  serializedName: "ReadWrite",
  type: {
    name: "Composite",
    className: "ReadWriteDatabase",
    uberParent: "Database",
    polymorphicDiscriminator: Database.type.polymorphicDiscriminator,
    modelProperties: {
      ...Database.type.modelProperties,
      provisioningState: {
        serializedName: "properties.provisioningState",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      softDeletePeriod: {
        serializedName: "properties.softDeletePeriod",
        type: {
          name: "TimeSpan"
        }
      },
      hotCachePeriod: {
        serializedName: "properties.hotCachePeriod",
        type: {
          name: "TimeSpan"
        }
      },
      statistics: {
        serializedName: "properties.statistics",
        type: {
          name: "Composite",
          className: "DatabaseStatistics"
        }
      },
      isFollowed: {
        serializedName: "properties.isFollowed",
        readOnly: true,
        type: {
          name: "Boolean"
        }
      },
      keyVaultProperties: {
        serializedName: "properties.keyVaultProperties",
        type: {
          name: "Composite",
          className: "KeyVaultProperties"
        }
      },
      suspensionDetails: {
        serializedName: "properties.suspensionDetails",
        type: {
          name: "Composite",
          className: "SuspensionDetails"
        }
      }
    }
  }
};

export const ReadOnlyFollowingDatabase: coreClient.CompositeMapper = {
  serializedName: "ReadOnlyFollowing",
  type: {
    name: "Composite",
    className: "ReadOnlyFollowingDatabase",
    uberParent: "Database",
    polymorphicDiscriminator: Database.type.polymorphicDiscriminator,
    modelProperties: {
      ...Database.type.modelProperties,
      provisioningState: {
        serializedName: "properties.provisioningState",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      softDeletePeriod: {
        serializedName: "properties.softDeletePeriod",
        readOnly: true,
        type: {
          name: "TimeSpan"
        }
      },
      hotCachePeriod: {
        serializedName: "properties.hotCachePeriod",
        type: {
          name: "TimeSpan"
        }
      },
      statistics: {
        serializedName: "properties.statistics",
        type: {
          name: "Composite",
          className: "DatabaseStatistics"
        }
      },
      leaderClusterResourceId: {
        serializedName: "properties.leaderClusterResourceId",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      attachedDatabaseConfigurationName: {
        serializedName: "properties.attachedDatabaseConfigurationName",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      principalsModificationKind: {
        serializedName: "properties.principalsModificationKind",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      tableLevelSharingProperties: {
        serializedName: "properties.tableLevelSharingProperties",
        type: {
          name: "Composite",
          className: "TableLevelSharingProperties"
        }
      },
      originalDatabaseName: {
        serializedName: "properties.originalDatabaseName",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      databaseShareOrigin: {
        serializedName: "properties.databaseShareOrigin",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      suspensionDetails: {
        serializedName: "properties.suspensionDetails",
        type: {
          name: "Composite",
          className: "SuspensionDetails"
        }
      }
    }
  }
};

export const EventHubDataConnection: coreClient.CompositeMapper = {
  serializedName: "EventHub",
  type: {
    name: "Composite",
    className: "EventHubDataConnection",
    uberParent: "DataConnection",
    polymorphicDiscriminator: DataConnection.type.polymorphicDiscriminator,
    modelProperties: {
      ...DataConnection.type.modelProperties,
      eventHubResourceId: {
        serializedName: "properties.eventHubResourceId",
        type: {
          name: "String"
        }
      },
      consumerGroup: {
        serializedName: "properties.consumerGroup",
        type: {
          name: "String"
        }
      },
      tableName: {
        serializedName: "properties.tableName",
        type: {
          name: "String"
        }
      },
      mappingRuleName: {
        serializedName: "properties.mappingRuleName",
        type: {
          name: "String"
        }
      },
      dataFormat: {
        serializedName: "properties.dataFormat",
        type: {
          name: "String"
        }
      },
      eventSystemProperties: {
        serializedName: "properties.eventSystemProperties",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "String"
            }
          }
        }
      },
      compression: {
        defaultValue: "None",
        serializedName: "properties.compression",
        type: {
          name: "String"
        }
      },
      provisioningState: {
        serializedName: "properties.provisioningState",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      managedIdentityResourceId: {
        serializedName: "properties.managedIdentityResourceId",
        type: {
          name: "String"
        }
      },
      managedIdentityObjectId: {
        serializedName: "properties.managedIdentityObjectId",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      databaseRouting: {
        serializedName: "properties.databaseRouting",
        type: {
          name: "String"
        }
      },
      retrievalStartDate: {
        serializedName: "properties.retrievalStartDate",
        type: {
          name: "DateTime"
        }
      }
    }
  }
};

export const IotHubDataConnection: coreClient.CompositeMapper = {
  serializedName: "IotHub",
  type: {
    name: "Composite",
    className: "IotHubDataConnection",
    uberParent: "DataConnection",
    polymorphicDiscriminator: DataConnection.type.polymorphicDiscriminator,
    modelProperties: {
      ...DataConnection.type.modelProperties,
      iotHubResourceId: {
        serializedName: "properties.iotHubResourceId",
        type: {
          name: "String"
        }
      },
      consumerGroup: {
        serializedName: "properties.consumerGroup",
        type: {
          name: "String"
        }
      },
      tableName: {
        serializedName: "properties.tableName",
        type: {
          name: "String"
        }
      },
      mappingRuleName: {
        serializedName: "properties.mappingRuleName",
        type: {
          name: "String"
        }
      },
      dataFormat: {
        serializedName: "properties.dataFormat",
        type: {
          name: "String"
        }
      },
      eventSystemProperties: {
        serializedName: "properties.eventSystemProperties",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "String"
            }
          }
        }
      },
      sharedAccessPolicyName: {
        serializedName: "properties.sharedAccessPolicyName",
        type: {
          name: "String"
        }
      },
      databaseRouting: {
        serializedName: "properties.databaseRouting",
        type: {
          name: "String"
        }
      },
      retrievalStartDate: {
        serializedName: "properties.retrievalStartDate",
        type: {
          name: "DateTime"
        }
      },
      provisioningState: {
        serializedName: "properties.provisioningState",
        readOnly: true,
        type: {
          name: "String"
        }
      }
    }
  }
};

export const EventGridDataConnection: coreClient.CompositeMapper = {
  serializedName: "EventGrid",
  type: {
    name: "Composite",
    className: "EventGridDataConnection",
    uberParent: "DataConnection",
    polymorphicDiscriminator: DataConnection.type.polymorphicDiscriminator,
    modelProperties: {
      ...DataConnection.type.modelProperties,
      storageAccountResourceId: {
        serializedName: "properties.storageAccountResourceId",
        type: {
          name: "String"
        }
      },
      eventGridResourceId: {
        serializedName: "properties.eventGridResourceId",
        type: {
          name: "String"
        }
      },
      eventHubResourceId: {
        serializedName: "properties.eventHubResourceId",
        type: {
          name: "String"
        }
      },
      consumerGroup: {
        serializedName: "properties.consumerGroup",
        type: {
          name: "String"
        }
      },
      tableName: {
        serializedName: "properties.tableName",
        type: {
          name: "String"
        }
      },
      mappingRuleName: {
        serializedName: "properties.mappingRuleName",
        type: {
          name: "String"
        }
      },
      dataFormat: {
        serializedName: "properties.dataFormat",
        type: {
          name: "String"
        }
      },
      ignoreFirstRecord: {
        serializedName: "properties.ignoreFirstRecord",
        type: {
          name: "Boolean"
        }
      },
      blobStorageEventType: {
        serializedName: "properties.blobStorageEventType",
        type: {
          name: "String"
        }
      },
      managedIdentityResourceId: {
        serializedName: "properties.managedIdentityResourceId",
        type: {
          name: "String"
        }
      },
      managedIdentityObjectId: {
        serializedName: "properties.managedIdentityObjectId",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      databaseRouting: {
        serializedName: "properties.databaseRouting",
        type: {
          name: "String"
        }
      },
      provisioningState: {
        serializedName: "properties.provisioningState",
        readOnly: true,
        type: {
          name: "String"
        }
      }
    }
  }
};

export const CosmosDbDataConnection: coreClient.CompositeMapper = {
  serializedName: "CosmosDb",
  type: {
    name: "Composite",
    className: "CosmosDbDataConnection",
    uberParent: "DataConnection",
    polymorphicDiscriminator: DataConnection.type.polymorphicDiscriminator,
    modelProperties: {
      ...DataConnection.type.modelProperties,
      tableName: {
        serializedName: "properties.tableName",
        type: {
          name: "String"
        }
      },
      mappingRuleName: {
        serializedName: "properties.mappingRuleName",
        type: {
          name: "String"
        }
      },
      managedIdentityResourceId: {
        serializedName: "properties.managedIdentityResourceId",
        type: {
          name: "String"
        }
      },
      managedIdentityObjectId: {
        serializedName: "properties.managedIdentityObjectId",
        readOnly: true,
        type: {
          name: "String"
        }
      },
      cosmosDbAccountResourceId: {
        serializedName: "properties.cosmosDbAccountResourceId",
        type: {
          name: "String"
        }
      },
      cosmosDbDatabase: {
        serializedName: "properties.cosmosDbDatabase",
        type: {
          name: "String"
        }
      },
      cosmosDbContainer: {
        serializedName: "properties.cosmosDbContainer",
        type: {
          name: "String"
        }
      },
      retrievalStartDate: {
        serializedName: "properties.retrievalStartDate",
        type: {
          name: "DateTime"
        }
      },
      provisioningState: {
        serializedName: "properties.provisioningState",
        readOnly: true,
        type: {
          name: "String"
        }
      }
    }
  }
};

export const ClustersUpdateHeaders: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "ClustersUpdateHeaders",
    modelProperties: {
      azureAsyncOperation: {
        serializedName: "azure-asyncoperation",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const ClustersDeleteHeaders: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "ClustersDeleteHeaders",
    modelProperties: {
      azureAsyncOperation: {
        serializedName: "azure-asyncoperation",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const ClustersStopHeaders: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "ClustersStopHeaders",
    modelProperties: {
      azureAsyncOperation: {
        serializedName: "azure-asyncoperation",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const ClustersStartHeaders: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "ClustersStartHeaders",
    modelProperties: {
      azureAsyncOperation: {
        serializedName: "azure-asyncoperation",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const ClustersMigrateHeaders: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "ClustersMigrateHeaders",
    modelProperties: {
      azureAsyncOperation: {
        serializedName: "azure-asyncoperation",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const ClustersDetachFollowerDatabasesHeaders: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "ClustersDetachFollowerDatabasesHeaders",
    modelProperties: {
      azureAsyncOperation: {
        serializedName: "azure-asyncoperation",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const ClustersDiagnoseVirtualNetworkHeaders: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "ClustersDiagnoseVirtualNetworkHeaders",
    modelProperties: {
      azureAsyncOperation: {
        serializedName: "azure-asyncoperation",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const ClustersAddLanguageExtensionsHeaders: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "ClustersAddLanguageExtensionsHeaders",
    modelProperties: {
      azureAsyncOperation: {
        serializedName: "azure-asyncoperation",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const ClustersRemoveLanguageExtensionsHeaders: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "ClustersRemoveLanguageExtensionsHeaders",
    modelProperties: {
      azureAsyncOperation: {
        serializedName: "azure-asyncoperation",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const ClusterPrincipalAssignmentsDeleteHeaders: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "ClusterPrincipalAssignmentsDeleteHeaders",
    modelProperties: {
      azureAsyncOperation: {
        serializedName: "azure-asyncoperation",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const DatabasesCreateOrUpdateHeaders: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "DatabasesCreateOrUpdateHeaders",
    modelProperties: {
      azureAsyncOperation: {
        serializedName: "azure-asyncoperation",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const DatabasesUpdateHeaders: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "DatabasesUpdateHeaders",
    modelProperties: {
      azureAsyncOperation: {
        serializedName: "azure-asyncoperation",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const DatabasesDeleteHeaders: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "DatabasesDeleteHeaders",
    modelProperties: {
      azureAsyncOperation: {
        serializedName: "azure-asyncoperation",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const AttachedDatabaseConfigurationsCreateOrUpdateHeaders: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "AttachedDatabaseConfigurationsCreateOrUpdateHeaders",
    modelProperties: {
      azureAsyncOperation: {
        serializedName: "azure-asyncoperation",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const AttachedDatabaseConfigurationsDeleteHeaders: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "AttachedDatabaseConfigurationsDeleteHeaders",
    modelProperties: {
      azureAsyncOperation: {
        serializedName: "azure-asyncoperation",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const ManagedPrivateEndpointsCreateOrUpdateHeaders: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "ManagedPrivateEndpointsCreateOrUpdateHeaders",
    modelProperties: {
      azureAsyncOperation: {
        serializedName: "azure-asyncoperation",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const ManagedPrivateEndpointsUpdateHeaders: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "ManagedPrivateEndpointsUpdateHeaders",
    modelProperties: {
      azureAsyncOperation: {
        serializedName: "azure-asyncoperation",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const ManagedPrivateEndpointsDeleteHeaders: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "ManagedPrivateEndpointsDeleteHeaders",
    modelProperties: {
      azureAsyncOperation: {
        serializedName: "azure-asyncoperation",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const DatabasePrincipalAssignmentsDeleteHeaders: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "DatabasePrincipalAssignmentsDeleteHeaders",
    modelProperties: {
      azureAsyncOperation: {
        serializedName: "azure-asyncoperation",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const ScriptsCreateOrUpdateHeaders: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "ScriptsCreateOrUpdateHeaders",
    modelProperties: {
      azureAsyncOperation: {
        serializedName: "azure-asyncoperation",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const ScriptsUpdateHeaders: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "ScriptsUpdateHeaders",
    modelProperties: {
      azureAsyncOperation: {
        serializedName: "azure-asyncoperation",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const ScriptsDeleteHeaders: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "ScriptsDeleteHeaders",
    modelProperties: {
      azureAsyncOperation: {
        serializedName: "azure-asyncoperation",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const PrivateEndpointConnectionsDeleteHeaders: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "PrivateEndpointConnectionsDeleteHeaders",
    modelProperties: {
      azureAsyncOperation: {
        serializedName: "azure-asyncoperation",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const DataConnectionsDataConnectionValidationHeaders: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "DataConnectionsDataConnectionValidationHeaders",
    modelProperties: {
      azureAsyncOperation: {
        serializedName: "azure-asyncoperation",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const DataConnectionsCreateOrUpdateHeaders: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "DataConnectionsCreateOrUpdateHeaders",
    modelProperties: {
      azureAsyncOperation: {
        serializedName: "azure-asyncoperation",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const DataConnectionsUpdateHeaders: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "DataConnectionsUpdateHeaders",
    modelProperties: {
      azureAsyncOperation: {
        serializedName: "azure-asyncoperation",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const DataConnectionsDeleteHeaders: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "DataConnectionsDeleteHeaders",
    modelProperties: {
      azureAsyncOperation: {
        serializedName: "azure-asyncoperation",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const OperationsResultsLocationGetHeaders: coreClient.CompositeMapper = {
  type: {
    name: "Composite",
    className: "OperationsResultsLocationGetHeaders",
    modelProperties: {
      azureAsyncOperation: {
        serializedName: "azure-asyncoperation",
        type: {
          name: "String"
        }
      }
    }
  }
};

export let discriminators = {
  "ProxyResource.Database": Database,
  "ProxyResource.DataConnection": DataConnection,
  "Database.ReadWrite": ReadWriteDatabase,
  "Database.ReadOnlyFollowing": ReadOnlyFollowingDatabase,
  "DataConnection.EventHub": EventHubDataConnection,
  "DataConnection.IotHub": IotHubDataConnection,
  "DataConnection.EventGrid": EventGridDataConnection,
  "DataConnection.CosmosDb": CosmosDbDataConnection
};
