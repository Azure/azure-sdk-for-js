/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */

import * as coreClient from "@azure/core-client";
import * as coreAuth from "@azure/core-auth";
import {
  ClustersImpl,
  ClusterPrincipalAssignmentsImpl,
  DatabasesImpl,
  AttachedDatabaseConfigurationsImpl,
  ManagedPrivateEndpointsImpl,
  DatabasePrincipalAssignmentsImpl,
  ScriptsImpl,
  PrivateEndpointConnectionsImpl,
  PrivateLinkResourcesImpl,
  DataConnectionsImpl,
  OperationsImpl,
  OperationsResultsImpl
} from "./operations";
import {
  Clusters,
  ClusterPrincipalAssignments,
  Databases,
  AttachedDatabaseConfigurations,
  ManagedPrivateEndpoints,
  DatabasePrincipalAssignments,
  Scripts,
  PrivateEndpointConnections,
  PrivateLinkResources,
  DataConnections,
  Operations,
  OperationsResults
} from "./operationsInterfaces";
import { KustoManagementClientOptionalParams } from "./models";

export class KustoManagementClient extends coreClient.ServiceClient {
  $host: string;
  subscriptionId: string;
  apiVersion: string;

  /**
   * Initializes a new instance of the KustoManagementClient class.
   * @param credentials Subscription credentials which uniquely identify client subscription.
   * @param subscriptionId Gets subscription credentials which uniquely identify Microsoft Azure
   *                       subscription. The subscription ID forms part of the URI for every service call.
   * @param options The parameter options
   */
  constructor(
    credentials: coreAuth.TokenCredential,
    subscriptionId: string,
    options?: KustoManagementClientOptionalParams
  ) {
    if (credentials === undefined) {
      throw new Error("'credentials' cannot be null");
    }
    if (subscriptionId === undefined) {
      throw new Error("'subscriptionId' cannot be null");
    }

    // Initializing default values for options
    if (!options) {
      options = {};
    }
    const defaults: KustoManagementClientOptionalParams = {
      requestContentType: "application/json; charset=utf-8",
      credential: credentials
    };

    const packageDetails = `azsdk-js-arm-kusto/7.0.1`;
    const userAgentPrefix =
      options.userAgentOptions && options.userAgentOptions.userAgentPrefix
        ? `${options.userAgentOptions.userAgentPrefix} ${packageDetails}`
        : `${packageDetails}`;

    if (!options.credentialScopes) {
      options.credentialScopes = ["https://management.azure.com/.default"];
    }
    const optionsWithDefaults = {
      ...defaults,
      ...options,
      userAgentOptions: {
        userAgentPrefix
      },
      baseUri: options.endpoint || "https://management.azure.com"
    };
    super(optionsWithDefaults);
    // Parameter assignments
    this.subscriptionId = subscriptionId;

    // Assigning values to Constant parameters
    this.$host = options.$host || "https://management.azure.com";
    this.apiVersion = options.apiVersion || "2021-08-27";
    this.clusters = new ClustersImpl(this);
    this.clusterPrincipalAssignments = new ClusterPrincipalAssignmentsImpl(
      this
    );
    this.databases = new DatabasesImpl(this);
    this.attachedDatabaseConfigurations = new AttachedDatabaseConfigurationsImpl(
      this
    );
    this.managedPrivateEndpoints = new ManagedPrivateEndpointsImpl(this);
    this.databasePrincipalAssignments = new DatabasePrincipalAssignmentsImpl(
      this
    );
    this.scripts = new ScriptsImpl(this);
    this.privateEndpointConnections = new PrivateEndpointConnectionsImpl(this);
    this.privateLinkResources = new PrivateLinkResourcesImpl(this);
    this.dataConnections = new DataConnectionsImpl(this);
    this.operations = new OperationsImpl(this);
    this.operationsResults = new OperationsResultsImpl(this);
  }

  clusters: Clusters;
  clusterPrincipalAssignments: ClusterPrincipalAssignments;
  databases: Databases;
  attachedDatabaseConfigurations: AttachedDatabaseConfigurations;
  managedPrivateEndpoints: ManagedPrivateEndpoints;
  databasePrincipalAssignments: DatabasePrincipalAssignments;
  scripts: Scripts;
  privateEndpointConnections: PrivateEndpointConnections;
  privateLinkResources: PrivateLinkResources;
  dataConnections: DataConnections;
  operations: Operations;
  operationsResults: OperationsResults;
}
