/*
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is
 * regenerated.
 */

import * as msRest from "@azure/ms-rest-js";
import * as msRestAzure from "@azure/ms-rest-azure-js";
import * as Models from "../models";
import * as Mappers from "../models/clusterPrincipalAssignmentsMappers";
import * as Parameters from "../models/parameters";
import { KustoManagementClientContext } from "../kustoManagementClientContext";

/** Class representing a ClusterPrincipalAssignments. */
export class ClusterPrincipalAssignments {
  private readonly client: KustoManagementClientContext;

  /**
   * Create a ClusterPrincipalAssignments.
   * @param {KustoManagementClientContext} client Reference to the service client.
   */
  constructor(client: KustoManagementClientContext) {
    this.client = client;
  }

  /**
   * Checks that the principal assignment name is valid and is not already in use.
   * @param resourceGroupName The name of the resource group containing the Kusto cluster.
   * @param clusterName The name of the Kusto cluster.
   * @param principalAssignmentName The name of the principal assignment.
   * @param [options] The optional parameters
   * @returns Promise<Models.ClusterPrincipalAssignmentsCheckNameAvailabilityResponse>
   */
  checkNameAvailability(resourceGroupName: string, clusterName: string, principalAssignmentName: Models.ClusterPrincipalAssignmentCheckNameRequest, options?: msRest.RequestOptionsBase): Promise<Models.ClusterPrincipalAssignmentsCheckNameAvailabilityResponse>;
  /**
   * @param resourceGroupName The name of the resource group containing the Kusto cluster.
   * @param clusterName The name of the Kusto cluster.
   * @param principalAssignmentName The name of the principal assignment.
   * @param callback The callback
   */
  checkNameAvailability(resourceGroupName: string, clusterName: string, principalAssignmentName: Models.ClusterPrincipalAssignmentCheckNameRequest, callback: msRest.ServiceCallback<Models.CheckNameResult>): void;
  /**
   * @param resourceGroupName The name of the resource group containing the Kusto cluster.
   * @param clusterName The name of the Kusto cluster.
   * @param principalAssignmentName The name of the principal assignment.
   * @param options The optional parameters
   * @param callback The callback
   */
  checkNameAvailability(resourceGroupName: string, clusterName: string, principalAssignmentName: Models.ClusterPrincipalAssignmentCheckNameRequest, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.CheckNameResult>): void;
  checkNameAvailability(resourceGroupName: string, clusterName: string, principalAssignmentName: Models.ClusterPrincipalAssignmentCheckNameRequest, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<Models.CheckNameResult>, callback?: msRest.ServiceCallback<Models.CheckNameResult>): Promise<Models.ClusterPrincipalAssignmentsCheckNameAvailabilityResponse> {
    return this.client.sendOperationRequest(
      {
        resourceGroupName,
        clusterName,
        principalAssignmentName,
        options
      },
      checkNameAvailabilityOperationSpec,
      callback) as Promise<Models.ClusterPrincipalAssignmentsCheckNameAvailabilityResponse>;
  }

  /**
   * Gets a Kusto cluster principalAssignment.
   * @param resourceGroupName The name of the resource group containing the Kusto cluster.
   * @param clusterName The name of the Kusto cluster.
   * @param principalAssignmentName The name of the Kusto principalAssignment.
   * @param [options] The optional parameters
   * @returns Promise<Models.ClusterPrincipalAssignmentsGetResponse>
   */
  get(resourceGroupName: string, clusterName: string, principalAssignmentName: string, options?: msRest.RequestOptionsBase): Promise<Models.ClusterPrincipalAssignmentsGetResponse>;
  /**
   * @param resourceGroupName The name of the resource group containing the Kusto cluster.
   * @param clusterName The name of the Kusto cluster.
   * @param principalAssignmentName The name of the Kusto principalAssignment.
   * @param callback The callback
   */
  get(resourceGroupName: string, clusterName: string, principalAssignmentName: string, callback: msRest.ServiceCallback<Models.ClusterPrincipalAssignment>): void;
  /**
   * @param resourceGroupName The name of the resource group containing the Kusto cluster.
   * @param clusterName The name of the Kusto cluster.
   * @param principalAssignmentName The name of the Kusto principalAssignment.
   * @param options The optional parameters
   * @param callback The callback
   */
  get(resourceGroupName: string, clusterName: string, principalAssignmentName: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.ClusterPrincipalAssignment>): void;
  get(resourceGroupName: string, clusterName: string, principalAssignmentName: string, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<Models.ClusterPrincipalAssignment>, callback?: msRest.ServiceCallback<Models.ClusterPrincipalAssignment>): Promise<Models.ClusterPrincipalAssignmentsGetResponse> {
    return this.client.sendOperationRequest(
      {
        resourceGroupName,
        clusterName,
        principalAssignmentName,
        options
      },
      getOperationSpec,
      callback) as Promise<Models.ClusterPrincipalAssignmentsGetResponse>;
  }

  /**
   * Create a Kusto cluster principalAssignment.
   * @param resourceGroupName The name of the resource group containing the Kusto cluster.
   * @param clusterName The name of the Kusto cluster.
   * @param principalAssignmentName The name of the Kusto principalAssignment.
   * @param parameters The Kusto cluster principalAssignment's parameters supplied for the operation.
   * @param [options] The optional parameters
   * @returns Promise<Models.ClusterPrincipalAssignmentsCreateOrUpdateResponse>
   */
  createOrUpdate(resourceGroupName: string, clusterName: string, principalAssignmentName: string, parameters: Models.ClusterPrincipalAssignment, options?: msRest.RequestOptionsBase): Promise<Models.ClusterPrincipalAssignmentsCreateOrUpdateResponse> {
    return this.beginCreateOrUpdate(resourceGroupName,clusterName,principalAssignmentName,parameters,options)
      .then(lroPoller => lroPoller.pollUntilFinished()) as Promise<Models.ClusterPrincipalAssignmentsCreateOrUpdateResponse>;
  }

  /**
   * Deletes a Kusto cluster principalAssignment.
   * @param resourceGroupName The name of the resource group containing the Kusto cluster.
   * @param clusterName The name of the Kusto cluster.
   * @param principalAssignmentName The name of the Kusto principalAssignment.
   * @param [options] The optional parameters
   * @returns Promise<msRest.RestResponse>
   */
  deleteMethod(resourceGroupName: string, clusterName: string, principalAssignmentName: string, options?: msRest.RequestOptionsBase): Promise<msRest.RestResponse> {
    return this.beginDeleteMethod(resourceGroupName,clusterName,principalAssignmentName,options)
      .then(lroPoller => lroPoller.pollUntilFinished());
  }

  /**
   * Lists all Kusto cluster principalAssignments.
   * @param resourceGroupName The name of the resource group containing the Kusto cluster.
   * @param clusterName The name of the Kusto cluster.
   * @param [options] The optional parameters
   * @returns Promise<Models.ClusterPrincipalAssignmentsListResponse>
   */
  list(resourceGroupName: string, clusterName: string, options?: msRest.RequestOptionsBase): Promise<Models.ClusterPrincipalAssignmentsListResponse>;
  /**
   * @param resourceGroupName The name of the resource group containing the Kusto cluster.
   * @param clusterName The name of the Kusto cluster.
   * @param callback The callback
   */
  list(resourceGroupName: string, clusterName: string, callback: msRest.ServiceCallback<Models.ClusterPrincipalAssignmentListResult>): void;
  /**
   * @param resourceGroupName The name of the resource group containing the Kusto cluster.
   * @param clusterName The name of the Kusto cluster.
   * @param options The optional parameters
   * @param callback The callback
   */
  list(resourceGroupName: string, clusterName: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.ClusterPrincipalAssignmentListResult>): void;
  list(resourceGroupName: string, clusterName: string, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<Models.ClusterPrincipalAssignmentListResult>, callback?: msRest.ServiceCallback<Models.ClusterPrincipalAssignmentListResult>): Promise<Models.ClusterPrincipalAssignmentsListResponse> {
    return this.client.sendOperationRequest(
      {
        resourceGroupName,
        clusterName,
        options
      },
      listOperationSpec,
      callback) as Promise<Models.ClusterPrincipalAssignmentsListResponse>;
  }

  /**
   * Create a Kusto cluster principalAssignment.
   * @param resourceGroupName The name of the resource group containing the Kusto cluster.
   * @param clusterName The name of the Kusto cluster.
   * @param principalAssignmentName The name of the Kusto principalAssignment.
   * @param parameters The Kusto cluster principalAssignment's parameters supplied for the operation.
   * @param [options] The optional parameters
   * @returns Promise<msRestAzure.LROPoller>
   */
  beginCreateOrUpdate(resourceGroupName: string, clusterName: string, principalAssignmentName: string, parameters: Models.ClusterPrincipalAssignment, options?: msRest.RequestOptionsBase): Promise<msRestAzure.LROPoller> {
    return this.client.sendLRORequest(
      {
        resourceGroupName,
        clusterName,
        principalAssignmentName,
        parameters,
        options
      },
      beginCreateOrUpdateOperationSpec,
      options);
  }

  /**
   * Deletes a Kusto cluster principalAssignment.
   * @param resourceGroupName The name of the resource group containing the Kusto cluster.
   * @param clusterName The name of the Kusto cluster.
   * @param principalAssignmentName The name of the Kusto principalAssignment.
   * @param [options] The optional parameters
   * @returns Promise<msRestAzure.LROPoller>
   */
  beginDeleteMethod(resourceGroupName: string, clusterName: string, principalAssignmentName: string, options?: msRest.RequestOptionsBase): Promise<msRestAzure.LROPoller> {
    return this.client.sendLRORequest(
      {
        resourceGroupName,
        clusterName,
        principalAssignmentName,
        options
      },
      beginDeleteMethodOperationSpec,
      options);
  }
}

// Operation Specifications
const serializer = new msRest.Serializer(Mappers);
const checkNameAvailabilityOperationSpec: msRest.OperationSpec = {
  httpMethod: "POST",
  path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Kusto/clusters/{clusterName}/checkPrincipalAssignmentNameAvailability",
  urlParameters: [
    Parameters.resourceGroupName,
    Parameters.clusterName,
    Parameters.subscriptionId
  ],
  queryParameters: [
    Parameters.apiVersion
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  requestBody: {
    parameterPath: "principalAssignmentName",
    mapper: {
      ...Mappers.ClusterPrincipalAssignmentCheckNameRequest,
      required: true
    }
  },
  responses: {
    200: {
      bodyMapper: Mappers.CheckNameResult
    },
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  serializer
};

const getOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Kusto/clusters/{clusterName}/principalAssignments/{principalAssignmentName}",
  urlParameters: [
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.clusterName,
    Parameters.principalAssignmentName
  ],
  queryParameters: [
    Parameters.apiVersion
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    200: {
      bodyMapper: Mappers.ClusterPrincipalAssignment
    },
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  serializer
};

const listOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Kusto/clusters/{clusterName}/principalAssignments",
  urlParameters: [
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.clusterName
  ],
  queryParameters: [
    Parameters.apiVersion
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    200: {
      bodyMapper: Mappers.ClusterPrincipalAssignmentListResult
    },
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  serializer
};

const beginCreateOrUpdateOperationSpec: msRest.OperationSpec = {
  httpMethod: "PUT",
  path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Kusto/clusters/{clusterName}/principalAssignments/{principalAssignmentName}",
  urlParameters: [
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.clusterName,
    Parameters.principalAssignmentName
  ],
  queryParameters: [
    Parameters.apiVersion
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  requestBody: {
    parameterPath: "parameters",
    mapper: {
      ...Mappers.ClusterPrincipalAssignment,
      required: true
    }
  },
  responses: {
    200: {
      bodyMapper: Mappers.ClusterPrincipalAssignment
    },
    201: {
      bodyMapper: Mappers.ClusterPrincipalAssignment
    },
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  serializer
};

const beginDeleteMethodOperationSpec: msRest.OperationSpec = {
  httpMethod: "DELETE",
  path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Kusto/clusters/{clusterName}/principalAssignments/{principalAssignmentName}",
  urlParameters: [
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.clusterName,
    Parameters.principalAssignmentName
  ],
  queryParameters: [
    Parameters.apiVersion
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    200: {},
    202: {},
    204: {},
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  serializer
};
