/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is
 * regenerated.
 */

import * as msRest from "@azure/ms-rest-js";
import * as msRestAzure from "@azure/ms-rest-azure-js";
import * as Models from "../models";
import * as Mappers from "../models/scriptsMappers";
import * as Parameters from "../models/parameters";
import { KustoManagementClientContext } from "../kustoManagementClientContext";

/** Class representing a Scripts. */
export class Scripts {
  private readonly client: KustoManagementClientContext;

  /**
   * Create a Scripts.
   * @param {KustoManagementClientContext} client Reference to the service client.
   */
  constructor(client: KustoManagementClientContext) {
    this.client = client;
  }

  /**
   * Returns the list of database scripts for given database.
   * @param resourceGroupName The name of the resource group containing the Kusto cluster.
   * @param clusterName The name of the Kusto cluster.
   * @param databaseName The name of the database in the Kusto cluster.
   * @param [options] The optional parameters
   * @returns Promise<Models.ScriptsListByDatabaseResponse>
   */
  listByDatabase(
    resourceGroupName: string,
    clusterName: string,
    databaseName: string,
    options?: msRest.RequestOptionsBase
  ): Promise<Models.ScriptsListByDatabaseResponse>;
  /**
   * @param resourceGroupName The name of the resource group containing the Kusto cluster.
   * @param clusterName The name of the Kusto cluster.
   * @param databaseName The name of the database in the Kusto cluster.
   * @param callback The callback
   */
  listByDatabase(
    resourceGroupName: string,
    clusterName: string,
    databaseName: string,
    callback: msRest.ServiceCallback<Models.ScriptListResult>
  ): void;
  /**
   * @param resourceGroupName The name of the resource group containing the Kusto cluster.
   * @param clusterName The name of the Kusto cluster.
   * @param databaseName The name of the database in the Kusto cluster.
   * @param options The optional parameters
   * @param callback The callback
   */
  listByDatabase(
    resourceGroupName: string,
    clusterName: string,
    databaseName: string,
    options: msRest.RequestOptionsBase,
    callback: msRest.ServiceCallback<Models.ScriptListResult>
  ): void;
  listByDatabase(
    resourceGroupName: string,
    clusterName: string,
    databaseName: string,
    options?: msRest.RequestOptionsBase | msRest.ServiceCallback<Models.ScriptListResult>,
    callback?: msRest.ServiceCallback<Models.ScriptListResult>
  ): Promise<Models.ScriptsListByDatabaseResponse> {
    return this.client.sendOperationRequest(
      {
        resourceGroupName,
        clusterName,
        databaseName,
        options
      },
      listByDatabaseOperationSpec,
      callback
    ) as Promise<Models.ScriptsListByDatabaseResponse>;
  }

  /**
   * Gets a Kusto cluster database script.
   * @param resourceGroupName The name of the resource group containing the Kusto cluster.
   * @param clusterName The name of the Kusto cluster.
   * @param databaseName The name of the database in the Kusto cluster.
   * @param scriptName The name of the Kusto database script.
   * @param [options] The optional parameters
   * @returns Promise<Models.ScriptsGetResponse>
   */
  get(
    resourceGroupName: string,
    clusterName: string,
    databaseName: string,
    scriptName: string,
    options?: msRest.RequestOptionsBase
  ): Promise<Models.ScriptsGetResponse>;
  /**
   * @param resourceGroupName The name of the resource group containing the Kusto cluster.
   * @param clusterName The name of the Kusto cluster.
   * @param databaseName The name of the database in the Kusto cluster.
   * @param scriptName The name of the Kusto database script.
   * @param callback The callback
   */
  get(
    resourceGroupName: string,
    clusterName: string,
    databaseName: string,
    scriptName: string,
    callback: msRest.ServiceCallback<Models.Script>
  ): void;
  /**
   * @param resourceGroupName The name of the resource group containing the Kusto cluster.
   * @param clusterName The name of the Kusto cluster.
   * @param databaseName The name of the database in the Kusto cluster.
   * @param scriptName The name of the Kusto database script.
   * @param options The optional parameters
   * @param callback The callback
   */
  get(
    resourceGroupName: string,
    clusterName: string,
    databaseName: string,
    scriptName: string,
    options: msRest.RequestOptionsBase,
    callback: msRest.ServiceCallback<Models.Script>
  ): void;
  get(
    resourceGroupName: string,
    clusterName: string,
    databaseName: string,
    scriptName: string,
    options?: msRest.RequestOptionsBase | msRest.ServiceCallback<Models.Script>,
    callback?: msRest.ServiceCallback<Models.Script>
  ): Promise<Models.ScriptsGetResponse> {
    return this.client.sendOperationRequest(
      {
        resourceGroupName,
        clusterName,
        databaseName,
        scriptName,
        options
      },
      getOperationSpec,
      callback
    ) as Promise<Models.ScriptsGetResponse>;
  }

  /**
   * Creates a Kusto database script.
   * @param resourceGroupName The name of the resource group containing the Kusto cluster.
   * @param clusterName The name of the Kusto cluster.
   * @param databaseName The name of the database in the Kusto cluster.
   * @param scriptName The name of the Kusto database script.
   * @param parameters The Kusto Script parameters contains the KQL to run.
   * @param [options] The optional parameters
   * @returns Promise<Models.ScriptsCreateOrUpdateResponse>
   */
  createOrUpdate(
    resourceGroupName: string,
    clusterName: string,
    databaseName: string,
    scriptName: string,
    parameters: Models.Script,
    options?: msRest.RequestOptionsBase
  ): Promise<Models.ScriptsCreateOrUpdateResponse> {
    return this.beginCreateOrUpdate(
      resourceGroupName,
      clusterName,
      databaseName,
      scriptName,
      parameters,
      options
    ).then((lroPoller) => lroPoller.pollUntilFinished()) as Promise<
      Models.ScriptsCreateOrUpdateResponse
    >;
  }

  /**
   * Updates a database script.
   * @param resourceGroupName The name of the resource group containing the Kusto cluster.
   * @param clusterName The name of the Kusto cluster.
   * @param databaseName The name of the database in the Kusto cluster.
   * @param scriptName The name of the Kusto database script.
   * @param parameters The Kusto Script parameters contains to the KQL to run.
   * @param [options] The optional parameters
   * @returns Promise<Models.ScriptsUpdateResponse>
   */
  update(
    resourceGroupName: string,
    clusterName: string,
    databaseName: string,
    scriptName: string,
    parameters: Models.Script,
    options?: msRest.RequestOptionsBase
  ): Promise<Models.ScriptsUpdateResponse> {
    return this.beginUpdate(
      resourceGroupName,
      clusterName,
      databaseName,
      scriptName,
      parameters,
      options
    ).then((lroPoller) => lroPoller.pollUntilFinished()) as Promise<Models.ScriptsUpdateResponse>;
  }

  /**
   * Deletes a Kusto principalAssignment.
   * @param resourceGroupName The name of the resource group containing the Kusto cluster.
   * @param clusterName The name of the Kusto cluster.
   * @param databaseName The name of the database in the Kusto cluster.
   * @param scriptName The name of the Kusto database script.
   * @param [options] The optional parameters
   * @returns Promise<msRest.RestResponse>
   */
  deleteMethod(
    resourceGroupName: string,
    clusterName: string,
    databaseName: string,
    scriptName: string,
    options?: msRest.RequestOptionsBase
  ): Promise<msRest.RestResponse> {
    return this.beginDeleteMethod(
      resourceGroupName,
      clusterName,
      databaseName,
      scriptName,
      options
    ).then((lroPoller) => lroPoller.pollUntilFinished());
  }

  /**
   * Checks that the script name is valid and is not already in use.
   * @param resourceGroupName The name of the resource group containing the Kusto cluster.
   * @param clusterName The name of the Kusto cluster.
   * @param databaseName The name of the database in the Kusto cluster.
   * @param scriptName The name of the script.
   * @param [options] The optional parameters
   * @returns Promise<Models.ScriptsCheckNameAvailabilityResponse>
   */
  checkNameAvailability(
    resourceGroupName: string,
    clusterName: string,
    databaseName: string,
    scriptName: Models.ScriptCheckNameRequest,
    options?: msRest.RequestOptionsBase
  ): Promise<Models.ScriptsCheckNameAvailabilityResponse>;
  /**
   * @param resourceGroupName The name of the resource group containing the Kusto cluster.
   * @param clusterName The name of the Kusto cluster.
   * @param databaseName The name of the database in the Kusto cluster.
   * @param scriptName The name of the script.
   * @param callback The callback
   */
  checkNameAvailability(
    resourceGroupName: string,
    clusterName: string,
    databaseName: string,
    scriptName: Models.ScriptCheckNameRequest,
    callback: msRest.ServiceCallback<Models.CheckNameResult>
  ): void;
  /**
   * @param resourceGroupName The name of the resource group containing the Kusto cluster.
   * @param clusterName The name of the Kusto cluster.
   * @param databaseName The name of the database in the Kusto cluster.
   * @param scriptName The name of the script.
   * @param options The optional parameters
   * @param callback The callback
   */
  checkNameAvailability(
    resourceGroupName: string,
    clusterName: string,
    databaseName: string,
    scriptName: Models.ScriptCheckNameRequest,
    options: msRest.RequestOptionsBase,
    callback: msRest.ServiceCallback<Models.CheckNameResult>
  ): void;
  checkNameAvailability(
    resourceGroupName: string,
    clusterName: string,
    databaseName: string,
    scriptName: Models.ScriptCheckNameRequest,
    options?: msRest.RequestOptionsBase | msRest.ServiceCallback<Models.CheckNameResult>,
    callback?: msRest.ServiceCallback<Models.CheckNameResult>
  ): Promise<Models.ScriptsCheckNameAvailabilityResponse> {
    return this.client.sendOperationRequest(
      {
        resourceGroupName,
        clusterName,
        databaseName,
        scriptName,
        options
      },
      checkNameAvailabilityOperationSpec,
      callback
    ) as Promise<Models.ScriptsCheckNameAvailabilityResponse>;
  }

  /**
   * Creates a Kusto database script.
   * @param resourceGroupName The name of the resource group containing the Kusto cluster.
   * @param clusterName The name of the Kusto cluster.
   * @param databaseName The name of the database in the Kusto cluster.
   * @param scriptName The name of the Kusto database script.
   * @param parameters The Kusto Script parameters contains the KQL to run.
   * @param [options] The optional parameters
   * @returns Promise<msRestAzure.LROPoller>
   */
  beginCreateOrUpdate(
    resourceGroupName: string,
    clusterName: string,
    databaseName: string,
    scriptName: string,
    parameters: Models.Script,
    options?: msRest.RequestOptionsBase
  ): Promise<msRestAzure.LROPoller> {
    return this.client.sendLRORequest(
      {
        resourceGroupName,
        clusterName,
        databaseName,
        scriptName,
        parameters,
        options
      },
      beginCreateOrUpdateOperationSpec,
      options
    );
  }

  /**
   * Updates a database script.
   * @param resourceGroupName The name of the resource group containing the Kusto cluster.
   * @param clusterName The name of the Kusto cluster.
   * @param databaseName The name of the database in the Kusto cluster.
   * @param scriptName The name of the Kusto database script.
   * @param parameters The Kusto Script parameters contains to the KQL to run.
   * @param [options] The optional parameters
   * @returns Promise<msRestAzure.LROPoller>
   */
  beginUpdate(
    resourceGroupName: string,
    clusterName: string,
    databaseName: string,
    scriptName: string,
    parameters: Models.Script,
    options?: msRest.RequestOptionsBase
  ): Promise<msRestAzure.LROPoller> {
    return this.client.sendLRORequest(
      {
        resourceGroupName,
        clusterName,
        databaseName,
        scriptName,
        parameters,
        options
      },
      beginUpdateOperationSpec,
      options
    );
  }

  /**
   * Deletes a Kusto principalAssignment.
   * @param resourceGroupName The name of the resource group containing the Kusto cluster.
   * @param clusterName The name of the Kusto cluster.
   * @param databaseName The name of the database in the Kusto cluster.
   * @param scriptName The name of the Kusto database script.
   * @param [options] The optional parameters
   * @returns Promise<msRestAzure.LROPoller>
   */
  beginDeleteMethod(
    resourceGroupName: string,
    clusterName: string,
    databaseName: string,
    scriptName: string,
    options?: msRest.RequestOptionsBase
  ): Promise<msRestAzure.LROPoller> {
    return this.client.sendLRORequest(
      {
        resourceGroupName,
        clusterName,
        databaseName,
        scriptName,
        options
      },
      beginDeleteMethodOperationSpec,
      options
    );
  }
}

// Operation Specifications
const serializer = new msRest.Serializer(Mappers);
const listByDatabaseOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path:
    "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Kusto/clusters/{clusterName}/databases/{databaseName}/scripts",
  urlParameters: [
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.clusterName,
    Parameters.databaseName
  ],
  queryParameters: [Parameters.apiVersion],
  headerParameters: [Parameters.acceptLanguage],
  responses: {
    200: {
      bodyMapper: Mappers.ScriptListResult
    },
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  serializer
};

const getOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path:
    "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Kusto/clusters/{clusterName}/databases/{databaseName}/scripts/{scriptName}",
  urlParameters: [
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.clusterName,
    Parameters.databaseName,
    Parameters.scriptName
  ],
  queryParameters: [Parameters.apiVersion],
  headerParameters: [Parameters.acceptLanguage],
  responses: {
    200: {
      bodyMapper: Mappers.Script
    },
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  serializer
};

const checkNameAvailabilityOperationSpec: msRest.OperationSpec = {
  httpMethod: "POST",
  path:
    "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Kusto/clusters/{clusterName}/databases/{databaseName}/scriptsCheckNameAvailability",
  urlParameters: [
    Parameters.resourceGroupName,
    Parameters.clusterName,
    Parameters.databaseName,
    Parameters.subscriptionId
  ],
  queryParameters: [Parameters.apiVersion],
  headerParameters: [Parameters.acceptLanguage],
  requestBody: {
    parameterPath: "scriptName",
    mapper: {
      ...Mappers.ScriptCheckNameRequest,
      required: true
    }
  },
  responses: {
    200: {
      bodyMapper: Mappers.CheckNameResult
    },
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  serializer
};

const beginCreateOrUpdateOperationSpec: msRest.OperationSpec = {
  httpMethod: "PUT",
  path:
    "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Kusto/clusters/{clusterName}/databases/{databaseName}/scripts/{scriptName}",
  urlParameters: [
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.clusterName,
    Parameters.databaseName,
    Parameters.scriptName
  ],
  queryParameters: [Parameters.apiVersion],
  headerParameters: [Parameters.acceptLanguage],
  requestBody: {
    parameterPath: "parameters",
    mapper: {
      ...Mappers.Script,
      required: true
    }
  },
  responses: {
    200: {
      bodyMapper: Mappers.Script
    },
    201: {
      bodyMapper: Mappers.Script
    },
    202: {
      bodyMapper: Mappers.Script
    },
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  serializer
};

const beginUpdateOperationSpec: msRest.OperationSpec = {
  httpMethod: "PATCH",
  path:
    "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Kusto/clusters/{clusterName}/databases/{databaseName}/scripts/{scriptName}",
  urlParameters: [
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.clusterName,
    Parameters.databaseName,
    Parameters.scriptName
  ],
  queryParameters: [Parameters.apiVersion],
  headerParameters: [Parameters.acceptLanguage],
  requestBody: {
    parameterPath: "parameters",
    mapper: {
      ...Mappers.Script,
      required: true
    }
  },
  responses: {
    200: {
      bodyMapper: Mappers.Script
    },
    202: {
      bodyMapper: Mappers.Script
    },
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  serializer
};

const beginDeleteMethodOperationSpec: msRest.OperationSpec = {
  httpMethod: "DELETE",
  path:
    "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Kusto/clusters/{clusterName}/databases/{databaseName}/scripts/{scriptName}",
  urlParameters: [
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.clusterName,
    Parameters.databaseName,
    Parameters.scriptName
  ],
  queryParameters: [Parameters.apiVersion],
  headerParameters: [Parameters.acceptLanguage],
  responses: {
    200: {},
    202: {},
    204: {},
    default: {
      bodyMapper: Mappers.CloudError
    }
  },
  serializer
};
