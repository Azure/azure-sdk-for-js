/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */

import {
  env,
  record,
  RecorderEnvironmentSetup,
  Recorder
} from "@azure-tools/test-recorder";
import * as assert from "assert";
import { ResourceManagementClient, ResourceGroup, ResourceGroupPatchable } from "@azure/arm-resources";
import { NetworkManagementClient, VirtualNetwork, Subnet, NetworkInterface } from "@azure/arm-network";
import {
  ComputeManagementClient,
} from "@azure/arm-compute"
import { DefaultAzureCredential } from "@azure/identity";
import { Cluster, KustoManagementClient } from "../src";

const recorderEnvSetup: RecorderEnvironmentSetup = {
  replaceableVariables: {
    AZURE_CLIENT_ID: "5910ab76-9a08-40f9-88d4-48d5f01393a8",
    AZURE_CLIENT_SECRET: "n2~7Q~LcqY3OOf3r6j~f6MqQDq2Yu3csQBiwx",
    AZURE_TENANT_ID: "72f988bf-86f1-41af-91ab-2d7cd011db47",
    SUBSCRIPTION_ID: "92f95d8f-3c67-4124-91c7-8cf07cdbf241"
  },
  customizationsOnRecordings: [
    (recording: any): any =>
      recording.replace(
        /"access_token":"[^"]*"/g,
        `"access_token":"access_token"`
      )
  ],
  queryParametersToSkip: []
};

describe("My test", () => {
  let recorder: Recorder;
  let subscriptionId: string;
  let credential: DefaultAzureCredential;
  let resourcesClient: ResourceManagementClient;
  let computeClient;
  let networkClient: NetworkManagementClient;
  const existingGroup = "marytest";

  beforeEach(async function () {
    recorder = record(this, recorderEnvSetup);
  });

  afterEach(async function () {
    await recorder.stop();
  });
  before(async function () {
    subscriptionId = process.env.AZURE_SUBSCRIPTION_ID || '';
    credential = new DefaultAzureCredential();
    computeClient = new ComputeManagementClient(credential, subscriptionId);
    networkClient = new NetworkManagementClient(credential, subscriptionId);
    resourcesClient = new ResourceManagementClient(credential, subscriptionId);
  });

  it("manage resource group", async function () {
    await updateResourceGroup(existingGroup);
    await getResourceGroup(existingGroup);
  });

  it("manage virtual machines", async function () {
    const networkName = "test";
    await getResourceGroup(existingGroup);
    await createVirtualNetwork(existingGroup, networkName);
  });

  it("init kusto client", async () => {
    const kustoClient = new KustoManagementClient(credential, subscriptionId);
    const clusterName = "MyClusterNameXarqRnd";
    const BODY: Cluster = {
      "location": "eastus",
      "sku": {
        "name": "Standard_L8s_v2",
        "tier": "Standard"
      },
      "identity": {
        "type": "SystemAssigned"
      },
    };
    console.log("debugging", kustoClient, kustoClient.clusters);
    const get_result = await kustoClient.clusters.beginCreateOrUpdateAndWait(existingGroup, clusterName, BODY);
    console.log("create kusto resource", get_result);
  })

  /**
  * CURD for resource group
  */
  async function updateResourceGroup(resourceGroupName: string) {
    const parameter: ResourceGroupPatchable = {
      tags: {
        tag1: "mary1",
        tag2: "mary2"
      }
    };
    await resourcesClient.resourceGroups.update(resourceGroupName, parameter).then(
      (result: any) => {
        console.log(result);
      }
    )
  }

  async function getResourceGroup(resourceGroupName: string) {
    const get_result = await resourcesClient.resourceGroups.get(resourceGroupName);
    console.log("resource_group", get_result);
  }

  async function createResourceGroup(resourceGroupName: string, resourcesClient: any) {
    const parameter: ResourceGroup = {
      location: "eastus",
      tags: {
        tag1: "value1"
      }
    };
    await resourcesClient.resourceGroups.createOrUpdate(resourceGroupName, parameter).then(
      (result: any) => {
        console.log(result);
      }
    )
  }

  async function createVirtualNetwork(resourceGroupName: string, networkName: any) {
    const parameter: VirtualNetwork = {
      location: "eastus",
      addressSpace: {
        addressPrefixes: ['10.0.0.0/16']
      }
    };
    const poller_result = await networkClient.virtualNetworks.beginCreateOrUpdateAndWait(resourceGroupName, networkName, parameter);
    console.log("poller_result", poller_result);
    const virtualNetworks_create_info = await networkClient.virtualNetworks.get(resourceGroupName, networkName);
    console.log("virtualNetworks_create_info", virtualNetworks_create_info);
  }

});
