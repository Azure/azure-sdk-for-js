/*
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is
 * regenerated.
 */

import * as msRest from "@azure/ms-rest-js";
import * as Models from "./models";
import * as Mappers from "./models/mappers";
import * as Parameters from "./models/parameters";
import * as operations from "./operations";
import { AzureVMwareSolutionbyVirtustreamAPIContext } from "./azureVMwareSolutionbyVirtustreamAPIContext";


class AzureVMwareSolutionbyVirtustreamAPI extends AzureVMwareSolutionbyVirtustreamAPIContext {
  // Operation groups
  operations: operations.Operations;
  privateClouds: operations.PrivateClouds;
  clusters: operations.Clusters;

  /**
   * Initializes a new instance of the AzureVMwareSolutionbyVirtustreamAPI class.
   * @param credentials Credentials needed for the client to connect to Azure.
   * @param subscriptionId Unique identifier for the Azure subscription
   * @param [options] The parameter options
   */
  constructor(credentials: msRest.ServiceClientCredentials, subscriptionId: string, options?: Models.AzureVMwareSolutionbyVirtustreamAPIOptions) {
    super(credentials, subscriptionId, options);
    this.operations = new operations.Operations(this);
    this.privateClouds = new operations.PrivateClouds(this);
    this.clusters = new operations.Clusters(this);
  }

  /**
   * Return quota for subscription by region
   * @param location Azure region
   * @param [options] The optional parameters
   * @returns Promise<Models.CheckQuotaAvailabilityResponse>
   */
  checkQuotaAvailability(location: string, options?: msRest.RequestOptionsBase): Promise<Models.CheckQuotaAvailabilityResponse>;
  /**
   * @param location Azure region
   * @param callback The callback
   */
  checkQuotaAvailability(location: string, callback: msRest.ServiceCallback<Models.Quota>): void;
  /**
   * @param location Azure region
   * @param options The optional parameters
   * @param callback The callback
   */
  checkQuotaAvailability(location: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.Quota>): void;
  checkQuotaAvailability(location: string, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<Models.Quota>, callback?: msRest.ServiceCallback<Models.Quota>): Promise<Models.CheckQuotaAvailabilityResponse> {
    return this.sendOperationRequest(
      {
        location,
        options
      },
      checkQuotaAvailabilityOperationSpec,
      callback) as Promise<Models.CheckQuotaAvailabilityResponse>;
  }
}

// Operation Specifications
const serializer = new msRest.Serializer(Mappers);
const checkQuotaAvailabilityOperationSpec: msRest.OperationSpec = {
  httpMethod: "POST",
  path: "subscriptions/{subscriptionId}/providers/Microsoft.VMwareVirtustream/locations/{location}/checkQuotaAvailability",
  urlParameters: [
    Parameters.subscriptionId,
    Parameters.location
  ],
  queryParameters: [
    Parameters.apiVersion
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    200: {
      bodyMapper: Mappers.Quota
    },
    default: {
      bodyMapper: Mappers.ApiError
    }
  },
  serializer
};

export {
  AzureVMwareSolutionbyVirtustreamAPI,
  AzureVMwareSolutionbyVirtustreamAPIContext,
  Models as AzureVMwareSolutionbyVirtustreamAPIModels,
  Mappers as AzureVMwareSolutionbyVirtustreamAPIMappers
};
export * from "./operations";
