/*
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is
 * regenerated.
 */

import * as msRest from "@azure/ms-rest-js";
import * as msRestAzure from "@azure/ms-rest-azure-js";
import * as Models from "../models";
import * as Mappers from "../models/privateCloudsMappers";
import * as Parameters from "../models/parameters";
import { VirtustreamPrivateCloudResourceProviderAPIContext } from "../virtustreamPrivateCloudResourceProviderAPIContext";

/** Class representing a PrivateClouds. */
export class PrivateClouds {
  private readonly client: VirtustreamPrivateCloudResourceProviderAPIContext;

  /**
   * Create a PrivateClouds.
   * @param {VirtustreamPrivateCloudResourceProviderAPIContext} client Reference to the service client.
   */
  constructor(client: VirtustreamPrivateCloudResourceProviderAPIContext) {
    this.client = client;
  }

  /**
   * @summary List private clouds in a resource group
   * @param resourceGroupName Name of the resource group within the Azure subscription
   * @param [options] The optional parameters
   * @returns Promise<Models.PrivateCloudsListResponse>
   */
  list(resourceGroupName: string, options?: msRest.RequestOptionsBase): Promise<Models.PrivateCloudsListResponse>;
  /**
   * @param resourceGroupName Name of the resource group within the Azure subscription
   * @param callback The callback
   */
  list(resourceGroupName: string, callback: msRest.ServiceCallback<Models.PrivateCloudResponseList>): void;
  /**
   * @param resourceGroupName Name of the resource group within the Azure subscription
   * @param options The optional parameters
   * @param callback The callback
   */
  list(resourceGroupName: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.PrivateCloudResponseList>): void;
  list(resourceGroupName: string, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<Models.PrivateCloudResponseList>, callback?: msRest.ServiceCallback<Models.PrivateCloudResponseList>): Promise<Models.PrivateCloudsListResponse> {
    return this.client.sendOperationRequest(
      {
        resourceGroupName,
        options
      },
      listOperationSpec,
      callback) as Promise<Models.PrivateCloudsListResponse>;
  }

  /**
   * @summary Get a private cloud
   * @param resourceGroupName Name of the resource group within the Azure subscription
   * @param privateCloudName Name of the private cloud
   * @param [options] The optional parameters
   * @returns Promise<Models.PrivateCloudsGetResponse>
   */
  get(resourceGroupName: string, privateCloudName: string, options?: msRest.RequestOptionsBase): Promise<Models.PrivateCloudsGetResponse>;
  /**
   * @param resourceGroupName Name of the resource group within the Azure subscription
   * @param privateCloudName Name of the private cloud
   * @param callback The callback
   */
  get(resourceGroupName: string, privateCloudName: string, callback: msRest.ServiceCallback<Models.PrivateCloudResponse>): void;
  /**
   * @param resourceGroupName Name of the resource group within the Azure subscription
   * @param privateCloudName Name of the private cloud
   * @param options The optional parameters
   * @param callback The callback
   */
  get(resourceGroupName: string, privateCloudName: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.PrivateCloudResponse>): void;
  get(resourceGroupName: string, privateCloudName: string, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<Models.PrivateCloudResponse>, callback?: msRest.ServiceCallback<Models.PrivateCloudResponse>): Promise<Models.PrivateCloudsGetResponse> {
    return this.client.sendOperationRequest(
      {
        resourceGroupName,
        privateCloudName,
        options
      },
      getOperationSpec,
      callback) as Promise<Models.PrivateCloudsGetResponse>;
  }

  /**
   * @summary Create or update a private cloud
   * @param resourceGroupName Name of the resource group within the Azure subscription
   * @param privateCloudName Name of the private cloud
   * @param parameters
   * @param [options] The optional parameters
   * @returns Promise<Models.PrivateCloudsCreateOrUpdateResponse>
   */
  createOrUpdate(resourceGroupName: string, privateCloudName: string, parameters: Models.PrivateCloudRequest, options?: msRest.RequestOptionsBase): Promise<Models.PrivateCloudsCreateOrUpdateResponse> {
    return this.beginCreateOrUpdate(resourceGroupName,privateCloudName,parameters,options)
      .then(lroPoller => lroPoller.pollUntilFinished()) as Promise<Models.PrivateCloudsCreateOrUpdateResponse>;
  }

  /**
   * @summary Update a private cloud
   * @param resourceGroupName Name of the resource group within the Azure subscription
   * @param privateCloudName Name of the private cloud
   * @param parameters
   * @param [options] The optional parameters
   * @returns Promise<Models.PrivateCloudsUpdateResponse>
   */
  update(resourceGroupName: string, privateCloudName: string, parameters: Models.PrivateCloudRequest, options?: msRest.RequestOptionsBase): Promise<Models.PrivateCloudsUpdateResponse> {
    return this.beginUpdate(resourceGroupName,privateCloudName,parameters,options)
      .then(lroPoller => lroPoller.pollUntilFinished()) as Promise<Models.PrivateCloudsUpdateResponse>;
  }

  /**
   * @summary Delete a private cloud
   * @param resourceGroupName Name of the resource group within the Azure subscription
   * @param privateCloudName Name of the private cloud
   * @param [options] The optional parameters
   * @returns Promise<msRest.RestResponse>
   */
  deleteMethod(resourceGroupName: string, privateCloudName: string, options?: msRest.RequestOptionsBase): Promise<msRest.RestResponse> {
    return this.beginDeleteMethod(resourceGroupName,privateCloudName,options)
      .then(lroPoller => lroPoller.pollUntilFinished());
  }

  /**
   * @summary Add ExpressRoute circuit authorization
   * @param resourceGroupName Name of the resource group within the Azure subscription
   * @param privateCloudName Name of the private cloud
   * @param authorizationName Name of the ExpressRoute circuit authorization
   * @param [options] The optional parameters
   * @returns Promise<Models.PrivateCloudsAddAuthorizationResponse>
   */
  addAuthorization(resourceGroupName: string, privateCloudName: string, authorizationName: string, options?: msRest.RequestOptionsBase): Promise<Models.PrivateCloudsAddAuthorizationResponse> {
    return this.beginAddAuthorization(resourceGroupName,privateCloudName,authorizationName,options)
      .then(lroPoller => lroPoller.pollUntilFinished()) as Promise<Models.PrivateCloudsAddAuthorizationResponse>;
  }

  /**
   * @summary Delete ExpressRoute circuit authorization
   * @param resourceGroupName Name of the resource group within the Azure subscription
   * @param privateCloudName Name of the private cloud
   * @param authorizationName The name of the ER authorization.
   * @param [options] The optional parameters
   * @returns Promise<Models.PrivateCloudsDeleteAuthorizationResponse>
   */
  deleteAuthorization(resourceGroupName: string, privateCloudName: string, authorizationName: string, options?: msRest.RequestOptionsBase): Promise<Models.PrivateCloudsDeleteAuthorizationResponse> {
    return this.beginDeleteAuthorization(resourceGroupName,privateCloudName,authorizationName,options)
      .then(lroPoller => lroPoller.pollUntilFinished()) as Promise<Models.PrivateCloudsDeleteAuthorizationResponse>;
  }

  /**
   * @summary Add an identity source to the private cloud
   * @param resourceGroupName Name of the resource group within the Azure subscription
   * @param privateCloudName Name of the private cloud
   * @param parameters
   * @param [options] The optional parameters
   * @returns Promise<Models.PrivateCloudsAddIdentitySourceResponse>
   */
  addIdentitySource(resourceGroupName: string, privateCloudName: string, parameters: Models.AddIdentitySourceRequest, options?: msRest.RequestOptionsBase): Promise<Models.PrivateCloudsAddIdentitySourceResponse> {
    return this.beginAddIdentitySource(resourceGroupName,privateCloudName,parameters,options)
      .then(lroPoller => lroPoller.pollUntilFinished()) as Promise<Models.PrivateCloudsAddIdentitySourceResponse>;
  }

  /**
   * @summary Delete an identity source from the private cloud
   * @param resourceGroupName Name of the resource group within the Azure subscription
   * @param privateCloudName Name of the private cloud
   * @param parameters
   * @param [options] The optional parameters
   * @returns Promise<Models.PrivateCloudsDeleteIdentitySourceResponse>
   */
  deleteIdentitySource(resourceGroupName: string, privateCloudName: string, parameters: Models.DeleteIdentitySourceRequest, options?: msRest.RequestOptionsBase): Promise<Models.PrivateCloudsDeleteIdentitySourceResponse> {
    return this.beginDeleteIdentitySource(resourceGroupName,privateCloudName,parameters,options)
      .then(lroPoller => lroPoller.pollUntilFinished()) as Promise<Models.PrivateCloudsDeleteIdentitySourceResponse>;
  }

  /**
   * @summary Get the admin credentials for the private cloud
   * @param resourceGroupName Name of the resource group within the Azure subscription
   * @param privateCloudName Name of the private cloud
   * @param [options] The optional parameters
   * @returns Promise<Models.PrivateCloudsGetAdminCredentialsResponse>
   */
  getAdminCredentials(resourceGroupName: string, privateCloudName: string, options?: msRest.RequestOptionsBase): Promise<Models.PrivateCloudsGetAdminCredentialsResponse>;
  /**
   * @param resourceGroupName Name of the resource group within the Azure subscription
   * @param privateCloudName Name of the private cloud
   * @param callback The callback
   */
  getAdminCredentials(resourceGroupName: string, privateCloudName: string, callback: msRest.ServiceCallback<Models.GetAdminCredentialsResponse>): void;
  /**
   * @param resourceGroupName Name of the resource group within the Azure subscription
   * @param privateCloudName Name of the private cloud
   * @param options The optional parameters
   * @param callback The callback
   */
  getAdminCredentials(resourceGroupName: string, privateCloudName: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.GetAdminCredentialsResponse>): void;
  getAdminCredentials(resourceGroupName: string, privateCloudName: string, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<Models.GetAdminCredentialsResponse>, callback?: msRest.ServiceCallback<Models.GetAdminCredentialsResponse>): Promise<Models.PrivateCloudsGetAdminCredentialsResponse> {
    return this.client.sendOperationRequest(
      {
        resourceGroupName,
        privateCloudName,
        options
      },
      getAdminCredentialsOperationSpec,
      callback) as Promise<Models.PrivateCloudsGetAdminCredentialsResponse>;
  }

  /**
   * @summary Create or update a private cloud
   * @param resourceGroupName Name of the resource group within the Azure subscription
   * @param privateCloudName Name of the private cloud
   * @param parameters
   * @param [options] The optional parameters
   * @returns Promise<msRestAzure.LROPoller>
   */
  beginCreateOrUpdate(resourceGroupName: string, privateCloudName: string, parameters: Models.PrivateCloudRequest, options?: msRest.RequestOptionsBase): Promise<msRestAzure.LROPoller> {
    return this.client.sendLRORequest(
      {
        resourceGroupName,
        privateCloudName,
        parameters,
        options
      },
      beginCreateOrUpdateOperationSpec,
      options);
  }

  /**
   * @summary Update a private cloud
   * @param resourceGroupName Name of the resource group within the Azure subscription
   * @param privateCloudName Name of the private cloud
   * @param parameters
   * @param [options] The optional parameters
   * @returns Promise<msRestAzure.LROPoller>
   */
  beginUpdate(resourceGroupName: string, privateCloudName: string, parameters: Models.PrivateCloudRequest, options?: msRest.RequestOptionsBase): Promise<msRestAzure.LROPoller> {
    return this.client.sendLRORequest(
      {
        resourceGroupName,
        privateCloudName,
        parameters,
        options
      },
      beginUpdateOperationSpec,
      options);
  }

  /**
   * @summary Delete a private cloud
   * @param resourceGroupName Name of the resource group within the Azure subscription
   * @param privateCloudName Name of the private cloud
   * @param [options] The optional parameters
   * @returns Promise<msRestAzure.LROPoller>
   */
  beginDeleteMethod(resourceGroupName: string, privateCloudName: string, options?: msRest.RequestOptionsBase): Promise<msRestAzure.LROPoller> {
    return this.client.sendLRORequest(
      {
        resourceGroupName,
        privateCloudName,
        options
      },
      beginDeleteMethodOperationSpec,
      options);
  }

  /**
   * @summary Add ExpressRoute circuit authorization
   * @param resourceGroupName Name of the resource group within the Azure subscription
   * @param privateCloudName Name of the private cloud
   * @param authorizationName Name of the ExpressRoute circuit authorization
   * @param [options] The optional parameters
   * @returns Promise<msRestAzure.LROPoller>
   */
  beginAddAuthorization(resourceGroupName: string, privateCloudName: string, authorizationName: string, options?: msRest.RequestOptionsBase): Promise<msRestAzure.LROPoller> {
    return this.client.sendLRORequest(
      {
        resourceGroupName,
        privateCloudName,
        authorizationName,
        options
      },
      beginAddAuthorizationOperationSpec,
      options);
  }

  /**
   * @summary Delete ExpressRoute circuit authorization
   * @param resourceGroupName Name of the resource group within the Azure subscription
   * @param privateCloudName Name of the private cloud
   * @param authorizationName The name of the ER authorization.
   * @param [options] The optional parameters
   * @returns Promise<msRestAzure.LROPoller>
   */
  beginDeleteAuthorization(resourceGroupName: string, privateCloudName: string, authorizationName: string, options?: msRest.RequestOptionsBase): Promise<msRestAzure.LROPoller> {
    return this.client.sendLRORequest(
      {
        resourceGroupName,
        privateCloudName,
        authorizationName,
        options
      },
      beginDeleteAuthorizationOperationSpec,
      options);
  }

  /**
   * @summary Add an identity source to the private cloud
   * @param resourceGroupName Name of the resource group within the Azure subscription
   * @param privateCloudName Name of the private cloud
   * @param parameters
   * @param [options] The optional parameters
   * @returns Promise<msRestAzure.LROPoller>
   */
  beginAddIdentitySource(resourceGroupName: string, privateCloudName: string, parameters: Models.AddIdentitySourceRequest, options?: msRest.RequestOptionsBase): Promise<msRestAzure.LROPoller> {
    return this.client.sendLRORequest(
      {
        resourceGroupName,
        privateCloudName,
        parameters,
        options
      },
      beginAddIdentitySourceOperationSpec,
      options);
  }

  /**
   * @summary Delete an identity source from the private cloud
   * @param resourceGroupName Name of the resource group within the Azure subscription
   * @param privateCloudName Name of the private cloud
   * @param parameters
   * @param [options] The optional parameters
   * @returns Promise<msRestAzure.LROPoller>
   */
  beginDeleteIdentitySource(resourceGroupName: string, privateCloudName: string, parameters: Models.DeleteIdentitySourceRequest, options?: msRest.RequestOptionsBase): Promise<msRestAzure.LROPoller> {
    return this.client.sendLRORequest(
      {
        resourceGroupName,
        privateCloudName,
        parameters,
        options
      },
      beginDeleteIdentitySourceOperationSpec,
      options);
  }
}

// Operation Specifications
const serializer = new msRest.Serializer(Mappers);
const listOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.VMwareVirtustream/privateClouds",
  urlParameters: [
    Parameters.subscriptionId,
    Parameters.resourceGroupName
  ],
  queryParameters: [
    Parameters.apiVersion
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    200: {
      bodyMapper: Mappers.PrivateCloudResponseList
    },
    default: {
      bodyMapper: Mappers.ApiError
    }
  },
  serializer
};

const getOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.VMwareVirtustream/privateClouds/{privateCloudName}",
  urlParameters: [
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.privateCloudName
  ],
  queryParameters: [
    Parameters.apiVersion
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    200: {
      bodyMapper: Mappers.PrivateCloudResponse
    },
    default: {
      bodyMapper: Mappers.ApiError
    }
  },
  serializer
};

const getAdminCredentialsOperationSpec: msRest.OperationSpec = {
  httpMethod: "POST",
  path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.VMwareVirtustream/privateClouds/{privateCloudName}/getAdminCredentials",
  urlParameters: [
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.privateCloudName
  ],
  queryParameters: [
    Parameters.apiVersion
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    200: {
      bodyMapper: Mappers.GetAdminCredentialsResponse
    },
    default: {
      bodyMapper: Mappers.ApiError
    }
  },
  serializer
};

const beginCreateOrUpdateOperationSpec: msRest.OperationSpec = {
  httpMethod: "PUT",
  path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.VMwareVirtustream/privateClouds/{privateCloudName}",
  urlParameters: [
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.privateCloudName
  ],
  queryParameters: [
    Parameters.apiVersion
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  requestBody: {
    parameterPath: "parameters",
    mapper: {
      ...Mappers.PrivateCloudRequest,
      required: true
    }
  },
  responses: {
    200: {
      bodyMapper: Mappers.PrivateCloudResponse
    },
    202: {},
    default: {
      bodyMapper: Mappers.ApiError
    }
  },
  serializer
};

const beginUpdateOperationSpec: msRest.OperationSpec = {
  httpMethod: "PATCH",
  path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.VMwareVirtustream/privateClouds/{privateCloudName}",
  urlParameters: [
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.privateCloudName
  ],
  queryParameters: [
    Parameters.apiVersion
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  requestBody: {
    parameterPath: "parameters",
    mapper: {
      ...Mappers.PrivateCloudRequest,
      required: true
    }
  },
  responses: {
    200: {
      bodyMapper: Mappers.PrivateCloudResponse
    },
    default: {
      bodyMapper: Mappers.ApiError
    }
  },
  serializer
};

const beginDeleteMethodOperationSpec: msRest.OperationSpec = {
  httpMethod: "DELETE",
  path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.VMwareVirtustream/privateClouds/{privateCloudName}",
  urlParameters: [
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.privateCloudName
  ],
  queryParameters: [
    Parameters.apiVersion
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    202: {},
    204: {},
    default: {
      bodyMapper: Mappers.ApiError
    }
  },
  serializer
};

const beginAddAuthorizationOperationSpec: msRest.OperationSpec = {
  httpMethod: "POST",
  path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.VMwareVirtustream/privateClouds/{privateCloudName}/addAuthorization/{authorizationName}",
  urlParameters: [
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.privateCloudName,
    Parameters.authorizationName
  ],
  queryParameters: [
    Parameters.apiVersion
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    200: {
      bodyMapper: Mappers.PrivateCloudResponse
    },
    202: {},
    default: {
      bodyMapper: Mappers.ApiError
    }
  },
  serializer
};

const beginDeleteAuthorizationOperationSpec: msRest.OperationSpec = {
  httpMethod: "POST",
  path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.VMwareVirtustream/privateClouds/{privateCloudName}/deleteAuthorization/{authorizationName}",
  urlParameters: [
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.privateCloudName,
    Parameters.authorizationName
  ],
  queryParameters: [
    Parameters.apiVersion
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    200: {
      bodyMapper: Mappers.PrivateCloudResponse
    },
    202: {},
    default: {
      bodyMapper: Mappers.ApiError
    }
  },
  serializer
};

const beginAddIdentitySourceOperationSpec: msRest.OperationSpec = {
  httpMethod: "POST",
  path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.VMwareVirtustream/privateClouds/{privateCloudName}/addIdentitySource",
  urlParameters: [
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.privateCloudName
  ],
  queryParameters: [
    Parameters.apiVersion
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  requestBody: {
    parameterPath: "parameters",
    mapper: {
      ...Mappers.AddIdentitySourceRequest,
      required: true
    }
  },
  responses: {
    200: {
      bodyMapper: Mappers.PrivateCloudResponse
    },
    202: {},
    default: {
      bodyMapper: Mappers.ApiError
    }
  },
  serializer
};

const beginDeleteIdentitySourceOperationSpec: msRest.OperationSpec = {
  httpMethod: "POST",
  path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.VMwareVirtustream/privateClouds/{privateCloudName}/deleteIdentitySource",
  urlParameters: [
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.privateCloudName
  ],
  queryParameters: [
    Parameters.apiVersion
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  requestBody: {
    parameterPath: "parameters",
    mapper: {
      ...Mappers.DeleteIdentitySourceRequest,
      required: true
    }
  },
  responses: {
    200: {
      bodyMapper: Mappers.PrivateCloudResponse
    },
    202: {},
    default: {
      bodyMapper: Mappers.ApiError
    }
  },
  serializer
};
