/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */

import { PagedAsyncIterableIterator } from "@azure/core-paging";
import {
  PaymentMethodLink,
  PaymentMethodsListByBillingProfileOptionalParams,
  PaymentMethod,
  PaymentMethodsListByBillingAccountOptionalParams,
  PaymentMethodsListByUserOptionalParams,
  PaymentMethodsGetByBillingProfileOptionalParams,
  PaymentMethodsGetByBillingProfileResponse,
  PaymentMethodsGetByBillingAccountOptionalParams,
  PaymentMethodsGetByBillingAccountResponse,
  PaymentMethodsDeleteByUserOptionalParams,
  PaymentMethodsGetByUserOptionalParams,
  PaymentMethodsGetByUserResponse,
} from "../models";

/// <reference lib="esnext.asynciterable" />
/** Interface representing a PaymentMethods. */
export interface PaymentMethods {
  /**
   * Lists payment methods attached to a billing profile. The operation is supported only for billing
   * accounts with agreement type Microsoft Customer Agreement.
   * @param billingAccountName The ID that uniquely identifies a billing account.
   * @param billingProfileName The ID that uniquely identifies a billing profile.
   * @param options The options parameters.
   */
  listByBillingProfile(
    billingAccountName: string,
    billingProfileName: string,
    options?: PaymentMethodsListByBillingProfileOptionalParams,
  ): PagedAsyncIterableIterator<PaymentMethodLink>;
  /**
   * Lists the payment methods available for a billing account. Along with the payment methods owned by
   * the caller, these payment methods can be attached to a billing profile to make payments. The
   * operation is supported only for billing accounts with agreement type Microsoft Customer Agreement.
   * @param billingAccountName The ID that uniquely identifies a billing account.
   * @param options The options parameters.
   */
  listByBillingAccount(
    billingAccountName: string,
    options?: PaymentMethodsListByBillingAccountOptionalParams,
  ): PagedAsyncIterableIterator<PaymentMethod>;
  /**
   * Lists the payment methods owned by the caller.
   * @param options The options parameters.
   */
  listByUser(
    options?: PaymentMethodsListByUserOptionalParams,
  ): PagedAsyncIterableIterator<PaymentMethod>;
  /**
   * Gets a payment method linked with a billing profile. The operation is supported only for billing
   * accounts with agreement type Microsoft Customer Agreement.
   * @param billingAccountName The ID that uniquely identifies a billing account.
   * @param billingProfileName The ID that uniquely identifies a billing profile.
   * @param paymentMethodName The ID that uniquely identifies a payment method.
   * @param options The options parameters.
   */
  getByBillingProfile(
    billingAccountName: string,
    billingProfileName: string,
    paymentMethodName: string,
    options?: PaymentMethodsGetByBillingProfileOptionalParams,
  ): Promise<PaymentMethodsGetByBillingProfileResponse>;
  /**
   * Gets a payment method available for a billing account. The operation is supported only for billing
   * accounts with agreement type Microsoft Customer Agreement.
   * @param billingAccountName The ID that uniquely identifies a billing account.
   * @param paymentMethodName The ID that uniquely identifies a payment method.
   * @param options The options parameters.
   */
  getByBillingAccount(
    billingAccountName: string,
    paymentMethodName: string,
    options?: PaymentMethodsGetByBillingAccountOptionalParams,
  ): Promise<PaymentMethodsGetByBillingAccountResponse>;
  /**
   * Deletes a payment method owned by the caller.
   * @param paymentMethodName The ID that uniquely identifies a payment method.
   * @param options The options parameters.
   */
  deleteByUser(
    paymentMethodName: string,
    options?: PaymentMethodsDeleteByUserOptionalParams,
  ): Promise<void>;
  /**
   * Gets a payment method owned by the caller.
   * @param paymentMethodName The ID that uniquely identifies a payment method.
   * @param options The options parameters.
   */
  getByUser(
    paymentMethodName: string,
    options?: PaymentMethodsGetByUserOptionalParams,
  ): Promise<PaymentMethodsGetByUserResponse>;
}
