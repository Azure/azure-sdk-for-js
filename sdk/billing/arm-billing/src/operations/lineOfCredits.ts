/*
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is
 * regenerated.
 */

import * as coreHttp from "@azure/core-http";
import * as coreArm from "@azure/core-arm";
import * as Models from "../models";
import * as Mappers from "../models/lineOfCreditsMappers";
import * as Parameters from "../models/parameters";
import { BillingManagementClientContext } from "../billingManagementClientContext";

/** Class representing a LineOfCredits. */
export class LineOfCredits {
  private readonly client: BillingManagementClientContext;

  /**
   * Create a LineOfCredits.
   * @param {BillingManagementClientContext} client Reference to the service client.
   */
  constructor(client: BillingManagementClientContext) {
    this.client = client;
  }

  /**
   * Get the current line of credit.
   * @param [options] The optional parameters
   * @returns Promise<Models.LineOfCreditsGetResponse>
   */
  get(options?: coreHttp.RequestOptionsBase): Promise<Models.LineOfCreditsGetResponse>;
  /**
   * @param callback The callback
   */
  get(callback: coreHttp.ServiceCallback<Models.LineOfCredit>): void;
  /**
   * @param options The optional parameters
   * @param callback The callback
   */
  get(options: coreHttp.RequestOptionsBase, callback: coreHttp.ServiceCallback<Models.LineOfCredit>): void;
  get(options?: coreHttp.RequestOptionsBase | coreHttp.ServiceCallback<Models.LineOfCredit>, callback?: coreHttp.ServiceCallback<Models.LineOfCredit>): Promise<Models.LineOfCreditsGetResponse> {
    return this.client.sendOperationRequest(
      {
        options
      },
      getOperationSpec,
      callback) as Promise<Models.LineOfCreditsGetResponse>;
  }

  /**
   * Increase the current line of credit.
   * @param parameters Parameters supplied to the increase line of credit operation.
   * @param [options] The optional parameters
   * @returns Promise<Models.LineOfCreditsUpdateResponse>
   */
  update(parameters: Models.LineOfCredit, options?: coreHttp.RequestOptionsBase): Promise<Models.LineOfCreditsUpdateResponse> {
    return this.beginUpdate(parameters,options)
      .then(lroPoller => lroPoller.pollUntilFinished()) as Promise<Models.LineOfCreditsUpdateResponse>;
  }

  /**
   * Increase the current line of credit.
   * @param parameters Parameters supplied to the increase line of credit operation.
   * @param [options] The optional parameters
   * @returns Promise<coreArm.LROPoller>
   */
  beginUpdate(parameters: Models.LineOfCredit, options?: coreHttp.RequestOptionsBase): Promise<coreArm.LROPoller> {
    return this.client.sendLRORequest(
      {
        parameters,
        options
      },
      beginUpdateOperationSpec,
      options);
  }
}

// Operation Specifications
const serializer = new coreHttp.Serializer(Mappers);
const getOperationSpec: coreHttp.OperationSpec = {
  httpMethod: "GET",
  path: "subscriptions/{subscriptionId}/providers/Microsoft.Billing/billingAccounts/default/lineOfCredit/default",
  urlParameters: [
    Parameters.subscriptionId
  ],
  queryParameters: [
    Parameters.apiVersion
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    200: {
      bodyMapper: Mappers.LineOfCredit
    },
    default: {
      bodyMapper: Mappers.ErrorResponse
    }
  },
  serializer
};

const beginUpdateOperationSpec: coreHttp.OperationSpec = {
  httpMethod: "PUT",
  path: "subscriptions/{subscriptionId}/providers/Microsoft.Billing/billingAccounts/default/lineOfCredit/default",
  urlParameters: [
    Parameters.subscriptionId
  ],
  queryParameters: [
    Parameters.apiVersion
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  requestBody: {
    parameterPath: "parameters",
    mapper: {
      ...Mappers.LineOfCredit,
      required: true
    }
  },
  responses: {
    200: {
      bodyMapper: Mappers.LineOfCredit,
      headersMapper: Mappers.LineOfCreditsUpdateHeaders
    },
    202: {
      headersMapper: Mappers.LineOfCreditsUpdateHeaders
    },
    default: {
      bodyMapper: Mappers.ErrorResponse
    }
  },
  serializer
};
