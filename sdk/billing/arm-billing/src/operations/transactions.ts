/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */

import { PagedAsyncIterableIterator, PageSettings } from "@azure/core-paging";
import { setContinuationToken } from "../pagingHelper";
import { Transactions } from "../operationsInterfaces";
import * as coreClient from "@azure/core-client";
import * as Mappers from "../models/mappers";
import * as Parameters from "../models/parameters";
import { BillingManagementClient } from "../billingManagementClient";
import {
  Transaction,
  TransactionsListByInvoiceNextOptionalParams,
  TransactionsListByInvoiceOptionalParams,
  TransactionsListByInvoiceResponse,
  TransactionsListByInvoiceNextResponse
} from "../models";

/// <reference lib="esnext.asynciterable" />
/** Class containing Transactions operations. */
export class TransactionsImpl implements Transactions {
  private readonly client: BillingManagementClient;

  /**
   * Initialize a new instance of the class Transactions class.
   * @param client Reference to the service client
   */
  constructor(client: BillingManagementClient) {
    this.client = client;
  }

  /**
   * Lists the transactions for an invoice. Transactions include purchases, refunds and Azure usage
   * charges.
   * @param billingAccountName The ID that uniquely identifies a billing account.
   * @param invoiceName The ID that uniquely identifies an invoice.
   * @param options The options parameters.
   */
  public listByInvoice(
    billingAccountName: string,
    invoiceName: string,
    options?: TransactionsListByInvoiceOptionalParams
  ): PagedAsyncIterableIterator<Transaction> {
    const iter = this.listByInvoicePagingAll(
      billingAccountName,
      invoiceName,
      options
    );
    return {
      next() {
        return iter.next();
      },
      [Symbol.asyncIterator]() {
        return this;
      },
      byPage: (settings?: PageSettings) => {
        if (settings?.maxPageSize) {
          throw new Error("maxPageSize is not supported by this operation.");
        }
        return this.listByInvoicePagingPage(
          billingAccountName,
          invoiceName,
          options,
          settings
        );
      }
    };
  }

  private async *listByInvoicePagingPage(
    billingAccountName: string,
    invoiceName: string,
    options?: TransactionsListByInvoiceOptionalParams,
    settings?: PageSettings
  ): AsyncIterableIterator<Transaction[]> {
    let result: TransactionsListByInvoiceResponse;
    let continuationToken = settings?.continuationToken;
    if (!continuationToken) {
      result = await this._listByInvoice(
        billingAccountName,
        invoiceName,
        options
      );
      let page = result.value || [];
      continuationToken = result.nextLink;
      setContinuationToken(page, continuationToken);
      yield page;
    }
    while (continuationToken) {
      result = await this._listByInvoiceNext(
        billingAccountName,
        invoiceName,
        continuationToken,
        options
      );
      continuationToken = result.nextLink;
      let page = result.value || [];
      setContinuationToken(page, continuationToken);
      yield page;
    }
  }

  private async *listByInvoicePagingAll(
    billingAccountName: string,
    invoiceName: string,
    options?: TransactionsListByInvoiceOptionalParams
  ): AsyncIterableIterator<Transaction> {
    for await (const page of this.listByInvoicePagingPage(
      billingAccountName,
      invoiceName,
      options
    )) {
      yield* page;
    }
  }

  /**
   * Lists the transactions for an invoice. Transactions include purchases, refunds and Azure usage
   * charges.
   * @param billingAccountName The ID that uniquely identifies a billing account.
   * @param invoiceName The ID that uniquely identifies an invoice.
   * @param options The options parameters.
   */
  private _listByInvoice(
    billingAccountName: string,
    invoiceName: string,
    options?: TransactionsListByInvoiceOptionalParams
  ): Promise<TransactionsListByInvoiceResponse> {
    return this.client.sendOperationRequest(
      { billingAccountName, invoiceName, options },
      listByInvoiceOperationSpec
    );
  }

  /**
   * ListByInvoiceNext
   * @param billingAccountName The ID that uniquely identifies a billing account.
   * @param invoiceName The ID that uniquely identifies an invoice.
   * @param nextLink The nextLink from the previous successful call to the ListByInvoice method.
   * @param options The options parameters.
   */
  private _listByInvoiceNext(
    billingAccountName: string,
    invoiceName: string,
    nextLink: string,
    options?: TransactionsListByInvoiceNextOptionalParams
  ): Promise<TransactionsListByInvoiceNextResponse> {
    return this.client.sendOperationRequest(
      { billingAccountName, invoiceName, nextLink, options },
      listByInvoiceNextOperationSpec
    );
  }
}
// Operation Specifications
const serializer = coreClient.createSerializer(Mappers, /* isXml */ false);

const listByInvoiceOperationSpec: coreClient.OperationSpec = {
  path:
    "/providers/Microsoft.Billing/billingAccounts/{billingAccountName}/invoices/{invoiceName}/transactions",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.TransactionListResult
    },
    default: {
      bodyMapper: Mappers.ErrorResponse
    }
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.billingAccountName,
    Parameters.invoiceName
  ],
  headerParameters: [Parameters.accept],
  serializer
};
const listByInvoiceNextOperationSpec: coreClient.OperationSpec = {
  path: "{nextLink}",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.TransactionListResult
    },
    default: {
      bodyMapper: Mappers.ErrorResponse
    }
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.billingAccountName,
    Parameters.nextLink,
    Parameters.invoiceName
  ],
  headerParameters: [Parameters.accept],
  serializer
};
