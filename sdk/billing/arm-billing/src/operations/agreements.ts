/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */

import { PagedAsyncIterableIterator } from "@azure/core-paging";
import { Agreements } from "../operationsInterfaces";
import * as coreClient from "@azure/core-client";
import * as Mappers from "../models/mappers";
import * as Parameters from "../models/parameters";
import { BillingManagementClient } from "../billingManagementClient";
import {
  Agreement,
  AgreementsListByBillingAccountNextOptionalParams,
  AgreementsListByBillingAccountOptionalParams,
  AgreementsListByBillingAccountResponse,
  AgreementsGetOptionalParams,
  AgreementsGetResponse,
  AgreementsListByBillingAccountNextResponse
} from "../models";

/// <reference lib="esnext.asynciterable" />
/** Class containing Agreements operations. */
export class AgreementsImpl implements Agreements {
  private readonly client: BillingManagementClient;

  /**
   * Initialize a new instance of the class Agreements class.
   * @param client Reference to the service client
   */
  constructor(client: BillingManagementClient) {
    this.client = client;
  }

  /**
   * Lists the agreements for a billing account.
   * @param billingAccountName The ID that uniquely identifies a billing account.
   * @param options The options parameters.
   */
  public listByBillingAccount(
    billingAccountName: string,
    options?: AgreementsListByBillingAccountOptionalParams
  ): PagedAsyncIterableIterator<Agreement> {
    const iter = this.listByBillingAccountPagingAll(
      billingAccountName,
      options
    );
    return {
      next() {
        return iter.next();
      },
      [Symbol.asyncIterator]() {
        return this;
      },
      byPage: () => {
        return this.listByBillingAccountPagingPage(billingAccountName, options);
      }
    };
  }

  private async *listByBillingAccountPagingPage(
    billingAccountName: string,
    options?: AgreementsListByBillingAccountOptionalParams
  ): AsyncIterableIterator<Agreement[]> {
    let result = await this._listByBillingAccount(billingAccountName, options);
    yield result.value || [];
    let continuationToken = result.nextLink;
    while (continuationToken) {
      result = await this._listByBillingAccountNext(
        billingAccountName,
        continuationToken,
        options
      );
      continuationToken = result.nextLink;
      yield result.value || [];
    }
  }

  private async *listByBillingAccountPagingAll(
    billingAccountName: string,
    options?: AgreementsListByBillingAccountOptionalParams
  ): AsyncIterableIterator<Agreement> {
    for await (const page of this.listByBillingAccountPagingPage(
      billingAccountName,
      options
    )) {
      yield* page;
    }
  }

  /**
   * Lists the agreements for a billing account.
   * @param billingAccountName The ID that uniquely identifies a billing account.
   * @param options The options parameters.
   */
  private _listByBillingAccount(
    billingAccountName: string,
    options?: AgreementsListByBillingAccountOptionalParams
  ): Promise<AgreementsListByBillingAccountResponse> {
    return this.client.sendOperationRequest(
      { billingAccountName, options },
      listByBillingAccountOperationSpec
    );
  }

  /**
   * Gets an agreement by ID.
   * @param billingAccountName The ID that uniquely identifies a billing account.
   * @param agreementName The ID that uniquely identifies an agreement.
   * @param options The options parameters.
   */
  get(
    billingAccountName: string,
    agreementName: string,
    options?: AgreementsGetOptionalParams
  ): Promise<AgreementsGetResponse> {
    return this.client.sendOperationRequest(
      { billingAccountName, agreementName, options },
      getOperationSpec
    );
  }

  /**
   * ListByBillingAccountNext
   * @param billingAccountName The ID that uniquely identifies a billing account.
   * @param nextLink The nextLink from the previous successful call to the ListByBillingAccount method.
   * @param options The options parameters.
   */
  private _listByBillingAccountNext(
    billingAccountName: string,
    nextLink: string,
    options?: AgreementsListByBillingAccountNextOptionalParams
  ): Promise<AgreementsListByBillingAccountNextResponse> {
    return this.client.sendOperationRequest(
      { billingAccountName, nextLink, options },
      listByBillingAccountNextOperationSpec
    );
  }
}
// Operation Specifications
const serializer = coreClient.createSerializer(Mappers, /* isXml */ false);

const listByBillingAccountOperationSpec: coreClient.OperationSpec = {
  path:
    "/providers/Microsoft.Billing/billingAccounts/{billingAccountName}/agreements",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.AgreementListResult
    },
    default: {
      bodyMapper: Mappers.ErrorResponse
    }
  },
  queryParameters: [Parameters.apiVersion, Parameters.expand],
  urlParameters: [Parameters.$host, Parameters.billingAccountName],
  headerParameters: [Parameters.accept],
  serializer
};
const getOperationSpec: coreClient.OperationSpec = {
  path:
    "/providers/Microsoft.Billing/billingAccounts/{billingAccountName}/agreements/{agreementName}",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.Agreement
    },
    default: {
      bodyMapper: Mappers.ErrorResponse
    }
  },
  queryParameters: [Parameters.apiVersion, Parameters.expand],
  urlParameters: [
    Parameters.$host,
    Parameters.billingAccountName,
    Parameters.agreementName
  ],
  headerParameters: [Parameters.accept],
  serializer
};
const listByBillingAccountNextOperationSpec: coreClient.OperationSpec = {
  path: "{nextLink}",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.AgreementListResult
    },
    default: {
      bodyMapper: Mappers.ErrorResponse
    }
  },
  queryParameters: [Parameters.apiVersion, Parameters.expand],
  urlParameters: [
    Parameters.$host,
    Parameters.billingAccountName,
    Parameters.nextLink
  ],
  headerParameters: [Parameters.accept],
  serializer
};
