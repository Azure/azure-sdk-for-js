/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */

import { PagedAsyncIterableIterator, PageSettings } from "@azure/core-paging";
import { setContinuationToken } from "../pagingHelper";
import { PaymentMethods } from "../operationsInterfaces";
import * as coreClient from "@azure/core-client";
import * as Mappers from "../models/mappers";
import * as Parameters from "../models/parameters";
import { BillingManagementClient } from "../billingManagementClient";
import {
  PaymentMethodLink,
  PaymentMethodsListByBillingProfileNextOptionalParams,
  PaymentMethodsListByBillingProfileOptionalParams,
  PaymentMethodsListByBillingProfileResponse,
  PaymentMethod,
  PaymentMethodsListByBillingAccountNextOptionalParams,
  PaymentMethodsListByBillingAccountOptionalParams,
  PaymentMethodsListByBillingAccountResponse,
  PaymentMethodsListByUserNextOptionalParams,
  PaymentMethodsListByUserOptionalParams,
  PaymentMethodsListByUserResponse,
  PaymentMethodsGetByBillingProfileOptionalParams,
  PaymentMethodsGetByBillingProfileResponse,
  PaymentMethodsGetByBillingAccountOptionalParams,
  PaymentMethodsGetByBillingAccountResponse,
  PaymentMethodsDeleteByUserOptionalParams,
  PaymentMethodsGetByUserOptionalParams,
  PaymentMethodsGetByUserResponse,
  PaymentMethodsListByBillingProfileNextResponse,
  PaymentMethodsListByBillingAccountNextResponse,
  PaymentMethodsListByUserNextResponse,
} from "../models";

/// <reference lib="esnext.asynciterable" />
/** Class containing PaymentMethods operations. */
export class PaymentMethodsImpl implements PaymentMethods {
  private readonly client: BillingManagementClient;

  /**
   * Initialize a new instance of the class PaymentMethods class.
   * @param client Reference to the service client
   */
  constructor(client: BillingManagementClient) {
    this.client = client;
  }

  /**
   * Lists payment methods attached to a billing profile. The operation is supported only for billing
   * accounts with agreement type Microsoft Customer Agreement.
   * @param billingAccountName The ID that uniquely identifies a billing account.
   * @param billingProfileName The ID that uniquely identifies a billing profile.
   * @param options The options parameters.
   */
  public listByBillingProfile(
    billingAccountName: string,
    billingProfileName: string,
    options?: PaymentMethodsListByBillingProfileOptionalParams,
  ): PagedAsyncIterableIterator<PaymentMethodLink> {
    const iter = this.listByBillingProfilePagingAll(
      billingAccountName,
      billingProfileName,
      options,
    );
    return {
      next() {
        return iter.next();
      },
      [Symbol.asyncIterator]() {
        return this;
      },
      byPage: (settings?: PageSettings) => {
        if (settings?.maxPageSize) {
          throw new Error("maxPageSize is not supported by this operation.");
        }
        return this.listByBillingProfilePagingPage(
          billingAccountName,
          billingProfileName,
          options,
          settings,
        );
      },
    };
  }

  private async *listByBillingProfilePagingPage(
    billingAccountName: string,
    billingProfileName: string,
    options?: PaymentMethodsListByBillingProfileOptionalParams,
    settings?: PageSettings,
  ): AsyncIterableIterator<PaymentMethodLink[]> {
    let result: PaymentMethodsListByBillingProfileResponse;
    let continuationToken = settings?.continuationToken;
    if (!continuationToken) {
      result = await this._listByBillingProfile(
        billingAccountName,
        billingProfileName,
        options,
      );
      let page = result.value || [];
      continuationToken = result.nextLink;
      setContinuationToken(page, continuationToken);
      yield page;
    }
    while (continuationToken) {
      result = await this._listByBillingProfileNext(
        billingAccountName,
        billingProfileName,
        continuationToken,
        options,
      );
      continuationToken = result.nextLink;
      let page = result.value || [];
      setContinuationToken(page, continuationToken);
      yield page;
    }
  }

  private async *listByBillingProfilePagingAll(
    billingAccountName: string,
    billingProfileName: string,
    options?: PaymentMethodsListByBillingProfileOptionalParams,
  ): AsyncIterableIterator<PaymentMethodLink> {
    for await (const page of this.listByBillingProfilePagingPage(
      billingAccountName,
      billingProfileName,
      options,
    )) {
      yield* page;
    }
  }

  /**
   * Lists the payment methods available for a billing account. Along with the payment methods owned by
   * the caller, these payment methods can be attached to a billing profile to make payments. The
   * operation is supported only for billing accounts with agreement type Microsoft Customer Agreement.
   * @param billingAccountName The ID that uniquely identifies a billing account.
   * @param options The options parameters.
   */
  public listByBillingAccount(
    billingAccountName: string,
    options?: PaymentMethodsListByBillingAccountOptionalParams,
  ): PagedAsyncIterableIterator<PaymentMethod> {
    const iter = this.listByBillingAccountPagingAll(
      billingAccountName,
      options,
    );
    return {
      next() {
        return iter.next();
      },
      [Symbol.asyncIterator]() {
        return this;
      },
      byPage: (settings?: PageSettings) => {
        if (settings?.maxPageSize) {
          throw new Error("maxPageSize is not supported by this operation.");
        }
        return this.listByBillingAccountPagingPage(
          billingAccountName,
          options,
          settings,
        );
      },
    };
  }

  private async *listByBillingAccountPagingPage(
    billingAccountName: string,
    options?: PaymentMethodsListByBillingAccountOptionalParams,
    settings?: PageSettings,
  ): AsyncIterableIterator<PaymentMethod[]> {
    let result: PaymentMethodsListByBillingAccountResponse;
    let continuationToken = settings?.continuationToken;
    if (!continuationToken) {
      result = await this._listByBillingAccount(billingAccountName, options);
      let page = result.value || [];
      continuationToken = result.nextLink;
      setContinuationToken(page, continuationToken);
      yield page;
    }
    while (continuationToken) {
      result = await this._listByBillingAccountNext(
        billingAccountName,
        continuationToken,
        options,
      );
      continuationToken = result.nextLink;
      let page = result.value || [];
      setContinuationToken(page, continuationToken);
      yield page;
    }
  }

  private async *listByBillingAccountPagingAll(
    billingAccountName: string,
    options?: PaymentMethodsListByBillingAccountOptionalParams,
  ): AsyncIterableIterator<PaymentMethod> {
    for await (const page of this.listByBillingAccountPagingPage(
      billingAccountName,
      options,
    )) {
      yield* page;
    }
  }

  /**
   * Lists the payment methods owned by the caller.
   * @param options The options parameters.
   */
  public listByUser(
    options?: PaymentMethodsListByUserOptionalParams,
  ): PagedAsyncIterableIterator<PaymentMethod> {
    const iter = this.listByUserPagingAll(options);
    return {
      next() {
        return iter.next();
      },
      [Symbol.asyncIterator]() {
        return this;
      },
      byPage: (settings?: PageSettings) => {
        if (settings?.maxPageSize) {
          throw new Error("maxPageSize is not supported by this operation.");
        }
        return this.listByUserPagingPage(options, settings);
      },
    };
  }

  private async *listByUserPagingPage(
    options?: PaymentMethodsListByUserOptionalParams,
    settings?: PageSettings,
  ): AsyncIterableIterator<PaymentMethod[]> {
    let result: PaymentMethodsListByUserResponse;
    let continuationToken = settings?.continuationToken;
    if (!continuationToken) {
      result = await this._listByUser(options);
      let page = result.value || [];
      continuationToken = result.nextLink;
      setContinuationToken(page, continuationToken);
      yield page;
    }
    while (continuationToken) {
      result = await this._listByUserNext(continuationToken, options);
      continuationToken = result.nextLink;
      let page = result.value || [];
      setContinuationToken(page, continuationToken);
      yield page;
    }
  }

  private async *listByUserPagingAll(
    options?: PaymentMethodsListByUserOptionalParams,
  ): AsyncIterableIterator<PaymentMethod> {
    for await (const page of this.listByUserPagingPage(options)) {
      yield* page;
    }
  }

  /**
   * Lists payment methods attached to a billing profile. The operation is supported only for billing
   * accounts with agreement type Microsoft Customer Agreement.
   * @param billingAccountName The ID that uniquely identifies a billing account.
   * @param billingProfileName The ID that uniquely identifies a billing profile.
   * @param options The options parameters.
   */
  private _listByBillingProfile(
    billingAccountName: string,
    billingProfileName: string,
    options?: PaymentMethodsListByBillingProfileOptionalParams,
  ): Promise<PaymentMethodsListByBillingProfileResponse> {
    return this.client.sendOperationRequest(
      { billingAccountName, billingProfileName, options },
      listByBillingProfileOperationSpec,
    );
  }

  /**
   * Gets a payment method linked with a billing profile. The operation is supported only for billing
   * accounts with agreement type Microsoft Customer Agreement.
   * @param billingAccountName The ID that uniquely identifies a billing account.
   * @param billingProfileName The ID that uniquely identifies a billing profile.
   * @param paymentMethodName The ID that uniquely identifies a payment method.
   * @param options The options parameters.
   */
  getByBillingProfile(
    billingAccountName: string,
    billingProfileName: string,
    paymentMethodName: string,
    options?: PaymentMethodsGetByBillingProfileOptionalParams,
  ): Promise<PaymentMethodsGetByBillingProfileResponse> {
    return this.client.sendOperationRequest(
      { billingAccountName, billingProfileName, paymentMethodName, options },
      getByBillingProfileOperationSpec,
    );
  }

  /**
   * Lists the payment methods available for a billing account. Along with the payment methods owned by
   * the caller, these payment methods can be attached to a billing profile to make payments. The
   * operation is supported only for billing accounts with agreement type Microsoft Customer Agreement.
   * @param billingAccountName The ID that uniquely identifies a billing account.
   * @param options The options parameters.
   */
  private _listByBillingAccount(
    billingAccountName: string,
    options?: PaymentMethodsListByBillingAccountOptionalParams,
  ): Promise<PaymentMethodsListByBillingAccountResponse> {
    return this.client.sendOperationRequest(
      { billingAccountName, options },
      listByBillingAccountOperationSpec,
    );
  }

  /**
   * Gets a payment method available for a billing account. The operation is supported only for billing
   * accounts with agreement type Microsoft Customer Agreement.
   * @param billingAccountName The ID that uniquely identifies a billing account.
   * @param paymentMethodName The ID that uniquely identifies a payment method.
   * @param options The options parameters.
   */
  getByBillingAccount(
    billingAccountName: string,
    paymentMethodName: string,
    options?: PaymentMethodsGetByBillingAccountOptionalParams,
  ): Promise<PaymentMethodsGetByBillingAccountResponse> {
    return this.client.sendOperationRequest(
      { billingAccountName, paymentMethodName, options },
      getByBillingAccountOperationSpec,
    );
  }

  /**
   * Lists the payment methods owned by the caller.
   * @param options The options parameters.
   */
  private _listByUser(
    options?: PaymentMethodsListByUserOptionalParams,
  ): Promise<PaymentMethodsListByUserResponse> {
    return this.client.sendOperationRequest(
      { options },
      listByUserOperationSpec,
    );
  }

  /**
   * Deletes a payment method owned by the caller.
   * @param paymentMethodName The ID that uniquely identifies a payment method.
   * @param options The options parameters.
   */
  deleteByUser(
    paymentMethodName: string,
    options?: PaymentMethodsDeleteByUserOptionalParams,
  ): Promise<void> {
    return this.client.sendOperationRequest(
      { paymentMethodName, options },
      deleteByUserOperationSpec,
    );
  }

  /**
   * Gets a payment method owned by the caller.
   * @param paymentMethodName The ID that uniquely identifies a payment method.
   * @param options The options parameters.
   */
  getByUser(
    paymentMethodName: string,
    options?: PaymentMethodsGetByUserOptionalParams,
  ): Promise<PaymentMethodsGetByUserResponse> {
    return this.client.sendOperationRequest(
      { paymentMethodName, options },
      getByUserOperationSpec,
    );
  }

  /**
   * ListByBillingProfileNext
   * @param billingAccountName The ID that uniquely identifies a billing account.
   * @param billingProfileName The ID that uniquely identifies a billing profile.
   * @param nextLink The nextLink from the previous successful call to the ListByBillingProfile method.
   * @param options The options parameters.
   */
  private _listByBillingProfileNext(
    billingAccountName: string,
    billingProfileName: string,
    nextLink: string,
    options?: PaymentMethodsListByBillingProfileNextOptionalParams,
  ): Promise<PaymentMethodsListByBillingProfileNextResponse> {
    return this.client.sendOperationRequest(
      { billingAccountName, billingProfileName, nextLink, options },
      listByBillingProfileNextOperationSpec,
    );
  }

  /**
   * ListByBillingAccountNext
   * @param billingAccountName The ID that uniquely identifies a billing account.
   * @param nextLink The nextLink from the previous successful call to the ListByBillingAccount method.
   * @param options The options parameters.
   */
  private _listByBillingAccountNext(
    billingAccountName: string,
    nextLink: string,
    options?: PaymentMethodsListByBillingAccountNextOptionalParams,
  ): Promise<PaymentMethodsListByBillingAccountNextResponse> {
    return this.client.sendOperationRequest(
      { billingAccountName, nextLink, options },
      listByBillingAccountNextOperationSpec,
    );
  }

  /**
   * ListByUserNext
   * @param nextLink The nextLink from the previous successful call to the ListByUser method.
   * @param options The options parameters.
   */
  private _listByUserNext(
    nextLink: string,
    options?: PaymentMethodsListByUserNextOptionalParams,
  ): Promise<PaymentMethodsListByUserNextResponse> {
    return this.client.sendOperationRequest(
      { nextLink, options },
      listByUserNextOperationSpec,
    );
  }
}
// Operation Specifications
const serializer = coreClient.createSerializer(Mappers, /* isXml */ false);

const listByBillingProfileOperationSpec: coreClient.OperationSpec = {
  path: "/providers/Microsoft.Billing/billingAccounts/{billingAccountName}/billingProfiles/{billingProfileName}/paymentMethodLinks",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.PaymentMethodLinksListResult,
    },
    default: {
      bodyMapper: Mappers.ErrorResponse,
    },
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.billingAccountName1,
    Parameters.billingProfileName1,
  ],
  headerParameters: [Parameters.accept],
  serializer,
};
const getByBillingProfileOperationSpec: coreClient.OperationSpec = {
  path: "/providers/Microsoft.Billing/billingAccounts/{billingAccountName}/billingProfiles/{billingProfileName}/paymentMethodLinks/{paymentMethodName}",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.PaymentMethodLink,
    },
    default: {
      bodyMapper: Mappers.ErrorResponse,
    },
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.billingAccountName1,
    Parameters.billingProfileName1,
    Parameters.paymentMethodName,
  ],
  headerParameters: [Parameters.accept],
  serializer,
};
const listByBillingAccountOperationSpec: coreClient.OperationSpec = {
  path: "/providers/Microsoft.Billing/billingAccounts/{billingAccountName}/paymentMethods",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.PaymentMethodsListResult,
    },
    default: {
      bodyMapper: Mappers.ErrorResponse,
    },
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [Parameters.$host, Parameters.billingAccountName1],
  headerParameters: [Parameters.accept],
  serializer,
};
const getByBillingAccountOperationSpec: coreClient.OperationSpec = {
  path: "/providers/Microsoft.Billing/billingAccounts/{billingAccountName}/paymentMethods/{paymentMethodName}",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.PaymentMethod,
    },
    default: {
      bodyMapper: Mappers.ErrorResponse,
    },
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.billingAccountName1,
    Parameters.paymentMethodName,
  ],
  headerParameters: [Parameters.accept],
  serializer,
};
const listByUserOperationSpec: coreClient.OperationSpec = {
  path: "/providers/Microsoft.Billing/paymentMethods",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.PaymentMethodsListResult,
    },
    default: {
      bodyMapper: Mappers.ErrorResponse,
    },
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [Parameters.$host],
  headerParameters: [Parameters.accept],
  serializer,
};
const deleteByUserOperationSpec: coreClient.OperationSpec = {
  path: "/providers/Microsoft.Billing/paymentMethods/{paymentMethodName}",
  httpMethod: "DELETE",
  responses: {
    200: {},
    204: {},
    default: {
      bodyMapper: Mappers.ErrorResponse,
    },
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [Parameters.$host, Parameters.paymentMethodName],
  headerParameters: [Parameters.accept],
  serializer,
};
const getByUserOperationSpec: coreClient.OperationSpec = {
  path: "/providers/Microsoft.Billing/paymentMethods/{paymentMethodName}",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.PaymentMethod,
    },
    default: {
      bodyMapper: Mappers.ErrorResponse,
    },
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [Parameters.$host, Parameters.paymentMethodName],
  headerParameters: [Parameters.accept],
  serializer,
};
const listByBillingProfileNextOperationSpec: coreClient.OperationSpec = {
  path: "{nextLink}",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.PaymentMethodLinksListResult,
    },
    default: {
      bodyMapper: Mappers.ErrorResponse,
    },
  },
  urlParameters: [
    Parameters.$host,
    Parameters.nextLink,
    Parameters.billingAccountName1,
    Parameters.billingProfileName1,
  ],
  headerParameters: [Parameters.accept],
  serializer,
};
const listByBillingAccountNextOperationSpec: coreClient.OperationSpec = {
  path: "{nextLink}",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.PaymentMethodsListResult,
    },
    default: {
      bodyMapper: Mappers.ErrorResponse,
    },
  },
  urlParameters: [
    Parameters.$host,
    Parameters.nextLink,
    Parameters.billingAccountName1,
  ],
  headerParameters: [Parameters.accept],
  serializer,
};
const listByUserNextOperationSpec: coreClient.OperationSpec = {
  path: "{nextLink}",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.PaymentMethodsListResult,
    },
    default: {
      bodyMapper: Mappers.ErrorResponse,
    },
  },
  urlParameters: [Parameters.$host, Parameters.nextLink],
  headerParameters: [Parameters.accept],
  serializer,
};
