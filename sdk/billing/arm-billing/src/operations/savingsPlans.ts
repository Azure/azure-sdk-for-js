/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */

import { PagedAsyncIterableIterator, PageSettings } from "@azure/core-paging";
import { setContinuationToken } from "../pagingHelper";
import { SavingsPlans } from "../operationsInterfaces";
import * as coreClient from "@azure/core-client";
import * as Mappers from "../models/mappers";
import * as Parameters from "../models/parameters";
import { BillingManagementClient } from "../billingManagementClient";
import {
  SimplePollerLike,
  OperationState,
  createHttpPoller,
} from "@azure/core-lro";
import { createLroSpec } from "../lroImpl";
import {
  SavingsPlanModel,
  SavingsPlansListBySavingsPlanOrderNextOptionalParams,
  SavingsPlansListBySavingsPlanOrderOptionalParams,
  SavingsPlansListBySavingsPlanOrderResponse,
  SavingsPlansListByBillingAccountNextOptionalParams,
  SavingsPlansListByBillingAccountOptionalParams,
  SavingsPlansListByBillingAccountResponse,
  SavingsPlansGetByBillingAccountOptionalParams,
  SavingsPlansGetByBillingAccountResponse,
  SavingsPlanUpdateRequest,
  SavingsPlansUpdateByBillingAccountOptionalParams,
  SavingsPlansUpdateByBillingAccountResponse,
  SavingsPlanUpdateValidateRequest,
  SavingsPlansValidateUpdateByBillingAccountOptionalParams,
  SavingsPlansValidateUpdateByBillingAccountResponse,
  SavingsPlansListBySavingsPlanOrderNextResponse,
  SavingsPlansListByBillingAccountNextResponse,
} from "../models";

/// <reference lib="esnext.asynciterable" />
/** Class containing SavingsPlans operations. */
export class SavingsPlansImpl implements SavingsPlans {
  private readonly client: BillingManagementClient;

  /**
   * Initialize a new instance of the class SavingsPlans class.
   * @param client Reference to the service client
   */
  constructor(client: BillingManagementClient) {
    this.client = client;
  }

  /**
   * List savings plans in an order by billing account.
   * @param billingAccountName The ID that uniquely identifies a billing account.
   * @param savingsPlanOrderId Order ID of the savings plan
   * @param options The options parameters.
   */
  public listBySavingsPlanOrder(
    billingAccountName: string,
    savingsPlanOrderId: string,
    options?: SavingsPlansListBySavingsPlanOrderOptionalParams,
  ): PagedAsyncIterableIterator<SavingsPlanModel> {
    const iter = this.listBySavingsPlanOrderPagingAll(
      billingAccountName,
      savingsPlanOrderId,
      options,
    );
    return {
      next() {
        return iter.next();
      },
      [Symbol.asyncIterator]() {
        return this;
      },
      byPage: (settings?: PageSettings) => {
        if (settings?.maxPageSize) {
          throw new Error("maxPageSize is not supported by this operation.");
        }
        return this.listBySavingsPlanOrderPagingPage(
          billingAccountName,
          savingsPlanOrderId,
          options,
          settings,
        );
      },
    };
  }

  private async *listBySavingsPlanOrderPagingPage(
    billingAccountName: string,
    savingsPlanOrderId: string,
    options?: SavingsPlansListBySavingsPlanOrderOptionalParams,
    settings?: PageSettings,
  ): AsyncIterableIterator<SavingsPlanModel[]> {
    let result: SavingsPlansListBySavingsPlanOrderResponse;
    let continuationToken = settings?.continuationToken;
    if (!continuationToken) {
      result = await this._listBySavingsPlanOrder(
        billingAccountName,
        savingsPlanOrderId,
        options,
      );
      let page = result.value || [];
      continuationToken = result.nextLink;
      setContinuationToken(page, continuationToken);
      yield page;
    }
    while (continuationToken) {
      result = await this._listBySavingsPlanOrderNext(
        billingAccountName,
        savingsPlanOrderId,
        continuationToken,
        options,
      );
      continuationToken = result.nextLink;
      let page = result.value || [];
      setContinuationToken(page, continuationToken);
      yield page;
    }
  }

  private async *listBySavingsPlanOrderPagingAll(
    billingAccountName: string,
    savingsPlanOrderId: string,
    options?: SavingsPlansListBySavingsPlanOrderOptionalParams,
  ): AsyncIterableIterator<SavingsPlanModel> {
    for await (const page of this.listBySavingsPlanOrderPagingPage(
      billingAccountName,
      savingsPlanOrderId,
      options,
    )) {
      yield* page;
    }
  }

  /**
   * List savings plans by billing account.
   * @param billingAccountName The ID that uniquely identifies a billing account.
   * @param options The options parameters.
   */
  public listByBillingAccount(
    billingAccountName: string,
    options?: SavingsPlansListByBillingAccountOptionalParams,
  ): PagedAsyncIterableIterator<SavingsPlanModel> {
    const iter = this.listByBillingAccountPagingAll(
      billingAccountName,
      options,
    );
    return {
      next() {
        return iter.next();
      },
      [Symbol.asyncIterator]() {
        return this;
      },
      byPage: (settings?: PageSettings) => {
        if (settings?.maxPageSize) {
          throw new Error("maxPageSize is not supported by this operation.");
        }
        return this.listByBillingAccountPagingPage(
          billingAccountName,
          options,
          settings,
        );
      },
    };
  }

  private async *listByBillingAccountPagingPage(
    billingAccountName: string,
    options?: SavingsPlansListByBillingAccountOptionalParams,
    settings?: PageSettings,
  ): AsyncIterableIterator<SavingsPlanModel[]> {
    let result: SavingsPlansListByBillingAccountResponse;
    let continuationToken = settings?.continuationToken;
    if (!continuationToken) {
      result = await this._listByBillingAccount(billingAccountName, options);
      let page = result.value || [];
      continuationToken = result.nextLink;
      setContinuationToken(page, continuationToken);
      yield page;
    }
    while (continuationToken) {
      result = await this._listByBillingAccountNext(
        billingAccountName,
        continuationToken,
        options,
      );
      continuationToken = result.nextLink;
      let page = result.value || [];
      setContinuationToken(page, continuationToken);
      yield page;
    }
  }

  private async *listByBillingAccountPagingAll(
    billingAccountName: string,
    options?: SavingsPlansListByBillingAccountOptionalParams,
  ): AsyncIterableIterator<SavingsPlanModel> {
    for await (const page of this.listByBillingAccountPagingPage(
      billingAccountName,
      options,
    )) {
      yield* page;
    }
  }

  /**
   * List savings plans in an order by billing account.
   * @param billingAccountName The ID that uniquely identifies a billing account.
   * @param savingsPlanOrderId Order ID of the savings plan
   * @param options The options parameters.
   */
  private _listBySavingsPlanOrder(
    billingAccountName: string,
    savingsPlanOrderId: string,
    options?: SavingsPlansListBySavingsPlanOrderOptionalParams,
  ): Promise<SavingsPlansListBySavingsPlanOrderResponse> {
    return this.client.sendOperationRequest(
      { billingAccountName, savingsPlanOrderId, options },
      listBySavingsPlanOrderOperationSpec,
    );
  }

  /**
   * List savings plans by billing account.
   * @param billingAccountName The ID that uniquely identifies a billing account.
   * @param options The options parameters.
   */
  private _listByBillingAccount(
    billingAccountName: string,
    options?: SavingsPlansListByBillingAccountOptionalParams,
  ): Promise<SavingsPlansListByBillingAccountResponse> {
    return this.client.sendOperationRequest(
      { billingAccountName, options },
      listByBillingAccountOperationSpec,
    );
  }

  /**
   * Get savings plan by billing account.
   * @param billingAccountName The ID that uniquely identifies a billing account.
   * @param savingsPlanOrderId Order ID of the savings plan
   * @param savingsPlanId ID of the savings plan
   * @param options The options parameters.
   */
  getByBillingAccount(
    billingAccountName: string,
    savingsPlanOrderId: string,
    savingsPlanId: string,
    options?: SavingsPlansGetByBillingAccountOptionalParams,
  ): Promise<SavingsPlansGetByBillingAccountResponse> {
    return this.client.sendOperationRequest(
      { billingAccountName, savingsPlanOrderId, savingsPlanId, options },
      getByBillingAccountOperationSpec,
    );
  }

  /**
   * Update savings plan by billing account.
   * @param billingAccountName The ID that uniquely identifies a billing account.
   * @param savingsPlanOrderId Order ID of the savings plan
   * @param savingsPlanId ID of the savings plan
   * @param body Request body for patching a savings plan order alias
   * @param options The options parameters.
   */
  async beginUpdateByBillingAccount(
    billingAccountName: string,
    savingsPlanOrderId: string,
    savingsPlanId: string,
    body: SavingsPlanUpdateRequest,
    options?: SavingsPlansUpdateByBillingAccountOptionalParams,
  ): Promise<
    SimplePollerLike<
      OperationState<SavingsPlansUpdateByBillingAccountResponse>,
      SavingsPlansUpdateByBillingAccountResponse
    >
  > {
    const directSendOperation = async (
      args: coreClient.OperationArguments,
      spec: coreClient.OperationSpec,
    ): Promise<SavingsPlansUpdateByBillingAccountResponse> => {
      return this.client.sendOperationRequest(args, spec);
    };
    const sendOperationFn = async (
      args: coreClient.OperationArguments,
      spec: coreClient.OperationSpec,
    ) => {
      let currentRawResponse: coreClient.FullOperationResponse | undefined =
        undefined;
      const providedCallback = args.options?.onResponse;
      const callback: coreClient.RawResponseCallback = (
        rawResponse: coreClient.FullOperationResponse,
        flatResponse: unknown,
      ) => {
        currentRawResponse = rawResponse;
        providedCallback?.(rawResponse, flatResponse);
      };
      const updatedArgs = {
        ...args,
        options: {
          ...args.options,
          onResponse: callback,
        },
      };
      const flatResponse = await directSendOperation(updatedArgs, spec);
      return {
        flatResponse,
        rawResponse: {
          statusCode: currentRawResponse!.status,
          body: currentRawResponse!.parsedBody,
          headers: currentRawResponse!.headers.toJSON(),
        },
      };
    };

    const lro = createLroSpec({
      sendOperationFn,
      args: {
        billingAccountName,
        savingsPlanOrderId,
        savingsPlanId,
        body,
        options,
      },
      spec: updateByBillingAccountOperationSpec,
    });
    const poller = await createHttpPoller<
      SavingsPlansUpdateByBillingAccountResponse,
      OperationState<SavingsPlansUpdateByBillingAccountResponse>
    >(lro, {
      restoreFrom: options?.resumeFrom,
      intervalInMs: options?.updateIntervalInMs,
      resourceLocationConfig: "azure-async-operation",
    });
    await poller.poll();
    return poller;
  }

  /**
   * Update savings plan by billing account.
   * @param billingAccountName The ID that uniquely identifies a billing account.
   * @param savingsPlanOrderId Order ID of the savings plan
   * @param savingsPlanId ID of the savings plan
   * @param body Request body for patching a savings plan order alias
   * @param options The options parameters.
   */
  async beginUpdateByBillingAccountAndWait(
    billingAccountName: string,
    savingsPlanOrderId: string,
    savingsPlanId: string,
    body: SavingsPlanUpdateRequest,
    options?: SavingsPlansUpdateByBillingAccountOptionalParams,
  ): Promise<SavingsPlansUpdateByBillingAccountResponse> {
    const poller = await this.beginUpdateByBillingAccount(
      billingAccountName,
      savingsPlanOrderId,
      savingsPlanId,
      body,
      options,
    );
    return poller.pollUntilDone();
  }

  /**
   * Validate savings plan patch by billing account.
   * @param billingAccountName The ID that uniquely identifies a billing account.
   * @param savingsPlanOrderId Order ID of the savings plan
   * @param savingsPlanId ID of the savings plan
   * @param body Request body for patching a savings plan order alias
   * @param options The options parameters.
   */
  validateUpdateByBillingAccount(
    billingAccountName: string,
    savingsPlanOrderId: string,
    savingsPlanId: string,
    body: SavingsPlanUpdateValidateRequest,
    options?: SavingsPlansValidateUpdateByBillingAccountOptionalParams,
  ): Promise<SavingsPlansValidateUpdateByBillingAccountResponse> {
    return this.client.sendOperationRequest(
      { billingAccountName, savingsPlanOrderId, savingsPlanId, body, options },
      validateUpdateByBillingAccountOperationSpec,
    );
  }

  /**
   * ListBySavingsPlanOrderNext
   * @param billingAccountName The ID that uniquely identifies a billing account.
   * @param savingsPlanOrderId Order ID of the savings plan
   * @param nextLink The nextLink from the previous successful call to the ListBySavingsPlanOrder method.
   * @param options The options parameters.
   */
  private _listBySavingsPlanOrderNext(
    billingAccountName: string,
    savingsPlanOrderId: string,
    nextLink: string,
    options?: SavingsPlansListBySavingsPlanOrderNextOptionalParams,
  ): Promise<SavingsPlansListBySavingsPlanOrderNextResponse> {
    return this.client.sendOperationRequest(
      { billingAccountName, savingsPlanOrderId, nextLink, options },
      listBySavingsPlanOrderNextOperationSpec,
    );
  }

  /**
   * ListByBillingAccountNext
   * @param billingAccountName The ID that uniquely identifies a billing account.
   * @param nextLink The nextLink from the previous successful call to the ListByBillingAccount method.
   * @param options The options parameters.
   */
  private _listByBillingAccountNext(
    billingAccountName: string,
    nextLink: string,
    options?: SavingsPlansListByBillingAccountNextOptionalParams,
  ): Promise<SavingsPlansListByBillingAccountNextResponse> {
    return this.client.sendOperationRequest(
      { billingAccountName, nextLink, options },
      listByBillingAccountNextOperationSpec,
    );
  }
}
// Operation Specifications
const serializer = coreClient.createSerializer(Mappers, /* isXml */ false);

const listBySavingsPlanOrderOperationSpec: coreClient.OperationSpec = {
  path: "/providers/Microsoft.Billing/billingAccounts/{billingAccountName}/savingsPlanOrders/{savingsPlanOrderId}/savingsPlans",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.SavingsPlanModelList,
    },
    default: {
      bodyMapper: Mappers.ErrorResponse,
    },
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.billingAccountName,
    Parameters.savingsPlanOrderId,
  ],
  headerParameters: [Parameters.accept],
  serializer,
};
const listByBillingAccountOperationSpec: coreClient.OperationSpec = {
  path: "/providers/Microsoft.Billing/billingAccounts/{billingAccountName}/savingsPlans",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.SavingsPlanModelListResult,
    },
    default: {
      bodyMapper: Mappers.ErrorResponse,
    },
  },
  queryParameters: [
    Parameters.apiVersion,
    Parameters.filter,
    Parameters.orderBy,
    Parameters.skiptoken,
    Parameters.take,
    Parameters.selectedState,
    Parameters.refreshSummary,
  ],
  urlParameters: [Parameters.$host, Parameters.billingAccountName],
  headerParameters: [Parameters.accept],
  serializer,
};
const getByBillingAccountOperationSpec: coreClient.OperationSpec = {
  path: "/providers/Microsoft.Billing/billingAccounts/{billingAccountName}/savingsPlanOrders/{savingsPlanOrderId}/savingsPlans/{savingsPlanId}",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.SavingsPlanModel,
    },
    default: {
      bodyMapper: Mappers.ErrorResponse,
    },
  },
  queryParameters: [Parameters.apiVersion, Parameters.expand],
  urlParameters: [
    Parameters.$host,
    Parameters.billingAccountName,
    Parameters.savingsPlanOrderId,
    Parameters.savingsPlanId,
  ],
  headerParameters: [Parameters.accept],
  serializer,
};
const updateByBillingAccountOperationSpec: coreClient.OperationSpec = {
  path: "/providers/Microsoft.Billing/billingAccounts/{billingAccountName}/savingsPlanOrders/{savingsPlanOrderId}/savingsPlans/{savingsPlanId}",
  httpMethod: "PATCH",
  responses: {
    200: {
      bodyMapper: Mappers.SavingsPlanModel,
    },
    201: {
      bodyMapper: Mappers.SavingsPlanModel,
    },
    202: {
      bodyMapper: Mappers.SavingsPlanModel,
    },
    204: {
      bodyMapper: Mappers.SavingsPlanModel,
    },
    default: {
      bodyMapper: Mappers.ErrorResponse,
    },
  },
  requestBody: Parameters.body,
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.billingAccountName,
    Parameters.savingsPlanOrderId,
    Parameters.savingsPlanId,
  ],
  headerParameters: [Parameters.accept, Parameters.contentType],
  mediaType: "json",
  serializer,
};
const validateUpdateByBillingAccountOperationSpec: coreClient.OperationSpec = {
  path: "/providers/Microsoft.Billing/billingAccounts/{billingAccountName}/savingsPlanOrders/{savingsPlanOrderId}/savingsPlans/{savingsPlanId}/validate",
  httpMethod: "POST",
  responses: {
    200: {
      bodyMapper: Mappers.SavingsPlanValidateResponse,
    },
    default: {
      bodyMapper: Mappers.ErrorResponse,
    },
  },
  requestBody: Parameters.body1,
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.billingAccountName,
    Parameters.savingsPlanOrderId,
    Parameters.savingsPlanId,
  ],
  headerParameters: [Parameters.accept, Parameters.contentType],
  mediaType: "json",
  serializer,
};
const listBySavingsPlanOrderNextOperationSpec: coreClient.OperationSpec = {
  path: "{nextLink}",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.SavingsPlanModelList,
    },
    default: {
      bodyMapper: Mappers.ErrorResponse,
    },
  },
  urlParameters: [
    Parameters.$host,
    Parameters.billingAccountName,
    Parameters.nextLink,
    Parameters.savingsPlanOrderId,
  ],
  headerParameters: [Parameters.accept],
  serializer,
};
const listByBillingAccountNextOperationSpec: coreClient.OperationSpec = {
  path: "{nextLink}",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.SavingsPlanModelListResult,
    },
    default: {
      bodyMapper: Mappers.ErrorResponse,
    },
  },
  urlParameters: [
    Parameters.$host,
    Parameters.billingAccountName,
    Parameters.nextLink,
  ],
  headerParameters: [Parameters.accept],
  serializer,
};
