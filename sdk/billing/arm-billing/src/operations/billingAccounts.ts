/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */

import { PagedAsyncIterableIterator, PageSettings } from "@azure/core-paging";
import { setContinuationToken } from "../pagingHelper";
import { BillingAccounts } from "../operationsInterfaces";
import * as coreClient from "@azure/core-client";
import * as Mappers from "../models/mappers";
import * as Parameters from "../models/parameters";
import { BillingManagementClient } from "../billingManagementClient";
import {
  SimplePollerLike,
  OperationState,
  createHttpPoller,
} from "@azure/core-lro";
import { createLroSpec } from "../lroImpl";
import {
  InvoiceSectionWithCreateSubPermission,
  BillingAccountsListInvoiceSectionsByCreateSubscriptionPermissionNextOptionalParams,
  BillingAccountsListInvoiceSectionsByCreateSubscriptionPermissionOptionalParams,
  BillingAccountsListInvoiceSectionsByCreateSubscriptionPermissionResponse,
  BillingAccount,
  BillingAccountsListNextOptionalParams,
  BillingAccountsListOptionalParams,
  BillingAccountsListResponse,
  PaymentTerm,
  BillingAccountsAddPaymentTermsOptionalParams,
  BillingAccountsAddPaymentTermsResponse,
  BillingAccountsCancelPaymentTermsOptionalParams,
  BillingAccountsCancelPaymentTermsResponse,
  BillingAccountsConfirmTransitionOptionalParams,
  BillingAccountsConfirmTransitionResponse,
  BillingAccountsValidatePaymentTermsOptionalParams,
  BillingAccountsValidatePaymentTermsResponse,
  BillingAccountsGetOptionalParams,
  BillingAccountsGetResponse,
  BillingAccountPatch,
  BillingAccountsUpdateOptionalParams,
  BillingAccountsUpdateResponse,
  BillingAccountsListInvoiceSectionsByCreateSubscriptionPermissionNextResponse,
  BillingAccountsListNextResponse,
} from "../models";

/// <reference lib="esnext.asynciterable" />
/** Class containing BillingAccounts operations. */
export class BillingAccountsImpl implements BillingAccounts {
  private readonly client: BillingManagementClient;

  /**
   * Initialize a new instance of the class BillingAccounts class.
   * @param client Reference to the service client
   */
  constructor(client: BillingManagementClient) {
    this.client = client;
  }

  /**
   * Lists the invoice sections for which the user has permission to create Azure subscriptions. The
   * operation is supported only for billing accounts with agreement type Microsoft Customer Agreement.
   * @param billingAccountName The ID that uniquely identifies a billing account.
   * @param options The options parameters.
   */
  public listInvoiceSectionsByCreateSubscriptionPermission(
    billingAccountName: string,
    options?: BillingAccountsListInvoiceSectionsByCreateSubscriptionPermissionOptionalParams,
  ): PagedAsyncIterableIterator<InvoiceSectionWithCreateSubPermission> {
    const iter =
      this.listInvoiceSectionsByCreateSubscriptionPermissionPagingAll(
        billingAccountName,
        options,
      );
    return {
      next() {
        return iter.next();
      },
      [Symbol.asyncIterator]() {
        return this;
      },
      byPage: (settings?: PageSettings) => {
        if (settings?.maxPageSize) {
          throw new Error("maxPageSize is not supported by this operation.");
        }
        return this.listInvoiceSectionsByCreateSubscriptionPermissionPagingPage(
          billingAccountName,
          options,
          settings,
        );
      },
    };
  }

  private async *listInvoiceSectionsByCreateSubscriptionPermissionPagingPage(
    billingAccountName: string,
    options?: BillingAccountsListInvoiceSectionsByCreateSubscriptionPermissionOptionalParams,
    settings?: PageSettings,
  ): AsyncIterableIterator<InvoiceSectionWithCreateSubPermission[]> {
    let result: BillingAccountsListInvoiceSectionsByCreateSubscriptionPermissionResponse;
    let continuationToken = settings?.continuationToken;
    if (!continuationToken) {
      result = await this._listInvoiceSectionsByCreateSubscriptionPermission(
        billingAccountName,
        options,
      );
      let page = result.value || [];
      continuationToken = result.nextLink;
      setContinuationToken(page, continuationToken);
      yield page;
    }
    while (continuationToken) {
      result =
        await this._listInvoiceSectionsByCreateSubscriptionPermissionNext(
          billingAccountName,
          continuationToken,
          options,
        );
      continuationToken = result.nextLink;
      let page = result.value || [];
      setContinuationToken(page, continuationToken);
      yield page;
    }
  }

  private async *listInvoiceSectionsByCreateSubscriptionPermissionPagingAll(
    billingAccountName: string,
    options?: BillingAccountsListInvoiceSectionsByCreateSubscriptionPermissionOptionalParams,
  ): AsyncIterableIterator<InvoiceSectionWithCreateSubPermission> {
    for await (const page of this.listInvoiceSectionsByCreateSubscriptionPermissionPagingPage(
      billingAccountName,
      options,
    )) {
      yield* page;
    }
  }

  /**
   * Lists the billing accounts that a user has access to.
   * @param options The options parameters.
   */
  public list(
    options?: BillingAccountsListOptionalParams,
  ): PagedAsyncIterableIterator<BillingAccount> {
    const iter = this.listPagingAll(options);
    return {
      next() {
        return iter.next();
      },
      [Symbol.asyncIterator]() {
        return this;
      },
      byPage: (settings?: PageSettings) => {
        if (settings?.maxPageSize) {
          throw new Error("maxPageSize is not supported by this operation.");
        }
        return this.listPagingPage(options, settings);
      },
    };
  }

  private async *listPagingPage(
    options?: BillingAccountsListOptionalParams,
    settings?: PageSettings,
  ): AsyncIterableIterator<BillingAccount[]> {
    let result: BillingAccountsListResponse;
    let continuationToken = settings?.continuationToken;
    if (!continuationToken) {
      result = await this._list(options);
      let page = result.value || [];
      continuationToken = result.nextLink;
      setContinuationToken(page, continuationToken);
      yield page;
    }
    while (continuationToken) {
      result = await this._listNext(continuationToken, options);
      continuationToken = result.nextLink;
      let page = result.value || [];
      setContinuationToken(page, continuationToken);
      yield page;
    }
  }

  private async *listPagingAll(
    options?: BillingAccountsListOptionalParams,
  ): AsyncIterableIterator<BillingAccount> {
    for await (const page of this.listPagingPage(options)) {
      yield* page;
    }
  }

  /**
   * Adds payment terms to all the billing profiles under the billing account. Currently, payment terms
   * can be added only on billing accounts that have Agreement Type as 'Microsoft Customer Agreement' and
   * AccountType as 'Enterprise'. This action needs pre-authorization and only Field Sellers are
   * authorized to add the payment terms and is not a self-serve action.
   * @param billingAccountName The ID that uniquely identifies a billing account.
   * @param parameters The properties of payment term.
   * @param options The options parameters.
   */
  async beginAddPaymentTerms(
    billingAccountName: string,
    parameters: PaymentTerm[],
    options?: BillingAccountsAddPaymentTermsOptionalParams,
  ): Promise<
    SimplePollerLike<
      OperationState<BillingAccountsAddPaymentTermsResponse>,
      BillingAccountsAddPaymentTermsResponse
    >
  > {
    const directSendOperation = async (
      args: coreClient.OperationArguments,
      spec: coreClient.OperationSpec,
    ): Promise<BillingAccountsAddPaymentTermsResponse> => {
      return this.client.sendOperationRequest(args, spec);
    };
    const sendOperationFn = async (
      args: coreClient.OperationArguments,
      spec: coreClient.OperationSpec,
    ) => {
      let currentRawResponse: coreClient.FullOperationResponse | undefined =
        undefined;
      const providedCallback = args.options?.onResponse;
      const callback: coreClient.RawResponseCallback = (
        rawResponse: coreClient.FullOperationResponse,
        flatResponse: unknown,
      ) => {
        currentRawResponse = rawResponse;
        providedCallback?.(rawResponse, flatResponse);
      };
      const updatedArgs = {
        ...args,
        options: {
          ...args.options,
          onResponse: callback,
        },
      };
      const flatResponse = await directSendOperation(updatedArgs, spec);
      return {
        flatResponse,
        rawResponse: {
          statusCode: currentRawResponse!.status,
          body: currentRawResponse!.parsedBody,
          headers: currentRawResponse!.headers.toJSON(),
        },
      };
    };

    const lro = createLroSpec({
      sendOperationFn,
      args: { billingAccountName, parameters, options },
      spec: addPaymentTermsOperationSpec,
    });
    const poller = await createHttpPoller<
      BillingAccountsAddPaymentTermsResponse,
      OperationState<BillingAccountsAddPaymentTermsResponse>
    >(lro, {
      restoreFrom: options?.resumeFrom,
      intervalInMs: options?.updateIntervalInMs,
      resourceLocationConfig: "location",
    });
    await poller.poll();
    return poller;
  }

  /**
   * Adds payment terms to all the billing profiles under the billing account. Currently, payment terms
   * can be added only on billing accounts that have Agreement Type as 'Microsoft Customer Agreement' and
   * AccountType as 'Enterprise'. This action needs pre-authorization and only Field Sellers are
   * authorized to add the payment terms and is not a self-serve action.
   * @param billingAccountName The ID that uniquely identifies a billing account.
   * @param parameters The properties of payment term.
   * @param options The options parameters.
   */
  async beginAddPaymentTermsAndWait(
    billingAccountName: string,
    parameters: PaymentTerm[],
    options?: BillingAccountsAddPaymentTermsOptionalParams,
  ): Promise<BillingAccountsAddPaymentTermsResponse> {
    const poller = await this.beginAddPaymentTerms(
      billingAccountName,
      parameters,
      options,
    );
    return poller.pollUntilDone();
  }

  /**
   * Cancels all the payment terms on billing account that falls after the cancellation date in the
   * request. Currently, cancel payment terms is only served by admin actions and is not a self-serve
   * action.
   * @param billingAccountName The ID that uniquely identifies a billing account.
   * @param parameters Date after which any payment terms that needs to be cancelled.
   * @param options The options parameters.
   */
  async beginCancelPaymentTerms(
    billingAccountName: string,
    parameters: Date,
    options?: BillingAccountsCancelPaymentTermsOptionalParams,
  ): Promise<
    SimplePollerLike<
      OperationState<BillingAccountsCancelPaymentTermsResponse>,
      BillingAccountsCancelPaymentTermsResponse
    >
  > {
    const directSendOperation = async (
      args: coreClient.OperationArguments,
      spec: coreClient.OperationSpec,
    ): Promise<BillingAccountsCancelPaymentTermsResponse> => {
      return this.client.sendOperationRequest(args, spec);
    };
    const sendOperationFn = async (
      args: coreClient.OperationArguments,
      spec: coreClient.OperationSpec,
    ) => {
      let currentRawResponse: coreClient.FullOperationResponse | undefined =
        undefined;
      const providedCallback = args.options?.onResponse;
      const callback: coreClient.RawResponseCallback = (
        rawResponse: coreClient.FullOperationResponse,
        flatResponse: unknown,
      ) => {
        currentRawResponse = rawResponse;
        providedCallback?.(rawResponse, flatResponse);
      };
      const updatedArgs = {
        ...args,
        options: {
          ...args.options,
          onResponse: callback,
        },
      };
      const flatResponse = await directSendOperation(updatedArgs, spec);
      return {
        flatResponse,
        rawResponse: {
          statusCode: currentRawResponse!.status,
          body: currentRawResponse!.parsedBody,
          headers: currentRawResponse!.headers.toJSON(),
        },
      };
    };

    const lro = createLroSpec({
      sendOperationFn,
      args: { billingAccountName, parameters, options },
      spec: cancelPaymentTermsOperationSpec,
    });
    const poller = await createHttpPoller<
      BillingAccountsCancelPaymentTermsResponse,
      OperationState<BillingAccountsCancelPaymentTermsResponse>
    >(lro, {
      restoreFrom: options?.resumeFrom,
      intervalInMs: options?.updateIntervalInMs,
      resourceLocationConfig: "location",
    });
    await poller.poll();
    return poller;
  }

  /**
   * Cancels all the payment terms on billing account that falls after the cancellation date in the
   * request. Currently, cancel payment terms is only served by admin actions and is not a self-serve
   * action.
   * @param billingAccountName The ID that uniquely identifies a billing account.
   * @param parameters Date after which any payment terms that needs to be cancelled.
   * @param options The options parameters.
   */
  async beginCancelPaymentTermsAndWait(
    billingAccountName: string,
    parameters: Date,
    options?: BillingAccountsCancelPaymentTermsOptionalParams,
  ): Promise<BillingAccountsCancelPaymentTermsResponse> {
    const poller = await this.beginCancelPaymentTerms(
      billingAccountName,
      parameters,
      options,
    );
    return poller.pollUntilDone();
  }

  /**
   * Gets the transition details for a billing account that has transitioned from agreement type
   * Microsoft Online Services Program to agreement type Microsoft Customer Agreement.
   * @param billingAccountName The ID that uniquely identifies a billing account.
   * @param options The options parameters.
   */
  confirmTransition(
    billingAccountName: string,
    options?: BillingAccountsConfirmTransitionOptionalParams,
  ): Promise<BillingAccountsConfirmTransitionResponse> {
    return this.client.sendOperationRequest(
      { billingAccountName, options },
      confirmTransitionOperationSpec,
    );
  }

  /**
   * Lists the invoice sections for which the user has permission to create Azure subscriptions. The
   * operation is supported only for billing accounts with agreement type Microsoft Customer Agreement.
   * @param billingAccountName The ID that uniquely identifies a billing account.
   * @param options The options parameters.
   */
  private _listInvoiceSectionsByCreateSubscriptionPermission(
    billingAccountName: string,
    options?: BillingAccountsListInvoiceSectionsByCreateSubscriptionPermissionOptionalParams,
  ): Promise<BillingAccountsListInvoiceSectionsByCreateSubscriptionPermissionResponse> {
    return this.client.sendOperationRequest(
      { billingAccountName, options },
      listInvoiceSectionsByCreateSubscriptionPermissionOperationSpec,
    );
  }

  /**
   * Validates payment terms on a billing account with agreement type 'Microsoft Customer Agreement' and
   * account type 'Enterprise'.
   * @param billingAccountName The ID that uniquely identifies a billing account.
   * @param parameters The properties of payment term.
   * @param options The options parameters.
   */
  validatePaymentTerms(
    billingAccountName: string,
    parameters: PaymentTerm[],
    options?: BillingAccountsValidatePaymentTermsOptionalParams,
  ): Promise<BillingAccountsValidatePaymentTermsResponse> {
    return this.client.sendOperationRequest(
      { billingAccountName, parameters, options },
      validatePaymentTermsOperationSpec,
    );
  }

  /**
   * Gets a billing account by its ID.
   * @param billingAccountName The ID that uniquely identifies a billing account.
   * @param options The options parameters.
   */
  get(
    billingAccountName: string,
    options?: BillingAccountsGetOptionalParams,
  ): Promise<BillingAccountsGetResponse> {
    return this.client.sendOperationRequest(
      { billingAccountName, options },
      getOperationSpec,
    );
  }

  /**
   * Updates the properties of a billing account. Currently, displayName and address can be updated for
   * billing accounts with agreement type Microsoft Customer Agreement. Currently address and
   * notification email address can be updated for billing accounts with agreement type Microsoft Online
   * Services Agreement. Currently, purchase order number can be edited for billing accounts with
   * agreement type Enterprise Agreement.
   * @param billingAccountName The ID that uniquely identifies a billing account.
   * @param parameters A billing account.
   * @param options The options parameters.
   */
  async beginUpdate(
    billingAccountName: string,
    parameters: BillingAccountPatch,
    options?: BillingAccountsUpdateOptionalParams,
  ): Promise<
    SimplePollerLike<
      OperationState<BillingAccountsUpdateResponse>,
      BillingAccountsUpdateResponse
    >
  > {
    const directSendOperation = async (
      args: coreClient.OperationArguments,
      spec: coreClient.OperationSpec,
    ): Promise<BillingAccountsUpdateResponse> => {
      return this.client.sendOperationRequest(args, spec);
    };
    const sendOperationFn = async (
      args: coreClient.OperationArguments,
      spec: coreClient.OperationSpec,
    ) => {
      let currentRawResponse: coreClient.FullOperationResponse | undefined =
        undefined;
      const providedCallback = args.options?.onResponse;
      const callback: coreClient.RawResponseCallback = (
        rawResponse: coreClient.FullOperationResponse,
        flatResponse: unknown,
      ) => {
        currentRawResponse = rawResponse;
        providedCallback?.(rawResponse, flatResponse);
      };
      const updatedArgs = {
        ...args,
        options: {
          ...args.options,
          onResponse: callback,
        },
      };
      const flatResponse = await directSendOperation(updatedArgs, spec);
      return {
        flatResponse,
        rawResponse: {
          statusCode: currentRawResponse!.status,
          body: currentRawResponse!.parsedBody,
          headers: currentRawResponse!.headers.toJSON(),
        },
      };
    };

    const lro = createLroSpec({
      sendOperationFn,
      args: { billingAccountName, parameters, options },
      spec: updateOperationSpec,
    });
    const poller = await createHttpPoller<
      BillingAccountsUpdateResponse,
      OperationState<BillingAccountsUpdateResponse>
    >(lro, {
      restoreFrom: options?.resumeFrom,
      intervalInMs: options?.updateIntervalInMs,
      resourceLocationConfig: "location",
    });
    await poller.poll();
    return poller;
  }

  /**
   * Updates the properties of a billing account. Currently, displayName and address can be updated for
   * billing accounts with agreement type Microsoft Customer Agreement. Currently address and
   * notification email address can be updated for billing accounts with agreement type Microsoft Online
   * Services Agreement. Currently, purchase order number can be edited for billing accounts with
   * agreement type Enterprise Agreement.
   * @param billingAccountName The ID that uniquely identifies a billing account.
   * @param parameters A billing account.
   * @param options The options parameters.
   */
  async beginUpdateAndWait(
    billingAccountName: string,
    parameters: BillingAccountPatch,
    options?: BillingAccountsUpdateOptionalParams,
  ): Promise<BillingAccountsUpdateResponse> {
    const poller = await this.beginUpdate(
      billingAccountName,
      parameters,
      options,
    );
    return poller.pollUntilDone();
  }

  /**
   * Lists the billing accounts that a user has access to.
   * @param options The options parameters.
   */
  private _list(
    options?: BillingAccountsListOptionalParams,
  ): Promise<BillingAccountsListResponse> {
    return this.client.sendOperationRequest({ options }, listOperationSpec);
  }

  /**
   * ListInvoiceSectionsByCreateSubscriptionPermissionNext
   * @param billingAccountName The ID that uniquely identifies a billing account.
   * @param nextLink The nextLink from the previous successful call to the
   *                 ListInvoiceSectionsByCreateSubscriptionPermission method.
   * @param options The options parameters.
   */
  private _listInvoiceSectionsByCreateSubscriptionPermissionNext(
    billingAccountName: string,
    nextLink: string,
    options?: BillingAccountsListInvoiceSectionsByCreateSubscriptionPermissionNextOptionalParams,
  ): Promise<BillingAccountsListInvoiceSectionsByCreateSubscriptionPermissionNextResponse> {
    return this.client.sendOperationRequest(
      { billingAccountName, nextLink, options },
      listInvoiceSectionsByCreateSubscriptionPermissionNextOperationSpec,
    );
  }

  /**
   * ListNext
   * @param nextLink The nextLink from the previous successful call to the List method.
   * @param options The options parameters.
   */
  private _listNext(
    nextLink: string,
    options?: BillingAccountsListNextOptionalParams,
  ): Promise<BillingAccountsListNextResponse> {
    return this.client.sendOperationRequest(
      { nextLink, options },
      listNextOperationSpec,
    );
  }
}
// Operation Specifications
const serializer = coreClient.createSerializer(Mappers, /* isXml */ false);

const addPaymentTermsOperationSpec: coreClient.OperationSpec = {
  path: "/providers/Microsoft.Billing/billingAccounts/{billingAccountName}/addPaymentTerms",
  httpMethod: "POST",
  responses: {
    200: {
      bodyMapper: Mappers.BillingAccount,
    },
    201: {
      bodyMapper: Mappers.BillingAccount,
    },
    202: {
      bodyMapper: Mappers.BillingAccount,
    },
    204: {
      bodyMapper: Mappers.BillingAccount,
    },
    default: {
      bodyMapper: Mappers.ErrorResponse,
    },
  },
  requestBody: Parameters.parameters1,
  queryParameters: [Parameters.apiVersion],
  urlParameters: [Parameters.$host, Parameters.billingAccountName],
  headerParameters: [Parameters.accept, Parameters.contentType],
  mediaType: "json",
  serializer,
};
const cancelPaymentTermsOperationSpec: coreClient.OperationSpec = {
  path: "/providers/Microsoft.Billing/billingAccounts/{billingAccountName}/cancelPaymentTerms",
  httpMethod: "POST",
  responses: {
    200: {
      bodyMapper: Mappers.BillingAccount,
    },
    201: {
      bodyMapper: Mappers.BillingAccount,
    },
    202: {
      bodyMapper: Mappers.BillingAccount,
    },
    204: {
      bodyMapper: Mappers.BillingAccount,
    },
    default: {
      bodyMapper: Mappers.ErrorResponse,
    },
  },
  requestBody: Parameters.parameters2,
  queryParameters: [Parameters.apiVersion],
  urlParameters: [Parameters.$host, Parameters.billingAccountName],
  headerParameters: [Parameters.accept, Parameters.contentType],
  mediaType: "json",
  serializer,
};
const confirmTransitionOperationSpec: coreClient.OperationSpec = {
  path: "/providers/Microsoft.Billing/billingAccounts/{billingAccountName}/confirmTransition",
  httpMethod: "POST",
  responses: {
    200: {
      bodyMapper: Mappers.TransitionDetails,
    },
    default: {
      bodyMapper: Mappers.ErrorResponse,
    },
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [Parameters.$host, Parameters.billingAccountName],
  headerParameters: [Parameters.accept],
  serializer,
};
const listInvoiceSectionsByCreateSubscriptionPermissionOperationSpec: coreClient.OperationSpec =
  {
    path: "/providers/Microsoft.Billing/billingAccounts/{billingAccountName}/listInvoiceSectionsWithCreateSubscriptionPermission",
    httpMethod: "POST",
    responses: {
      200: {
        bodyMapper: Mappers.InvoiceSectionWithCreateSubPermissionListResult,
      },
      default: {
        bodyMapper: Mappers.ErrorResponse,
      },
    },
    queryParameters: [Parameters.apiVersion, Parameters.filter],
    urlParameters: [Parameters.$host, Parameters.billingAccountName],
    headerParameters: [Parameters.accept],
    serializer,
  };
const validatePaymentTermsOperationSpec: coreClient.OperationSpec = {
  path: "/providers/Microsoft.Billing/billingAccounts/{billingAccountName}/validatePaymentTerms",
  httpMethod: "POST",
  responses: {
    200: {
      bodyMapper: Mappers.PaymentTermsEligibilityResult,
    },
    default: {
      bodyMapper: Mappers.ErrorResponse,
    },
  },
  requestBody: Parameters.parameters1,
  queryParameters: [Parameters.apiVersion],
  urlParameters: [Parameters.$host, Parameters.billingAccountName],
  headerParameters: [Parameters.accept, Parameters.contentType],
  mediaType: "json",
  serializer,
};
const getOperationSpec: coreClient.OperationSpec = {
  path: "/providers/Microsoft.Billing/billingAccounts/{billingAccountName}",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.BillingAccount,
    },
    default: {
      bodyMapper: Mappers.ErrorResponse,
    },
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [Parameters.$host, Parameters.billingAccountName],
  headerParameters: [Parameters.accept],
  serializer,
};
const updateOperationSpec: coreClient.OperationSpec = {
  path: "/providers/Microsoft.Billing/billingAccounts/{billingAccountName}",
  httpMethod: "PATCH",
  responses: {
    200: {
      bodyMapper: Mappers.BillingAccount,
    },
    201: {
      bodyMapper: Mappers.BillingAccount,
    },
    202: {
      bodyMapper: Mappers.BillingAccount,
    },
    204: {
      bodyMapper: Mappers.BillingAccount,
    },
    default: {
      bodyMapper: Mappers.ErrorResponse,
    },
  },
  requestBody: Parameters.parameters3,
  queryParameters: [Parameters.apiVersion],
  urlParameters: [Parameters.$host, Parameters.billingAccountName],
  headerParameters: [Parameters.accept, Parameters.contentType],
  mediaType: "json",
  serializer,
};
const listOperationSpec: coreClient.OperationSpec = {
  path: "/providers/Microsoft.Billing/billingAccounts",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.BillingAccountListResult,
    },
    default: {
      bodyMapper: Mappers.ErrorResponse,
    },
  },
  queryParameters: [
    Parameters.apiVersion,
    Parameters.expand,
    Parameters.filter,
    Parameters.top,
    Parameters.skip,
    Parameters.search,
    Parameters.includeAll,
    Parameters.includeAllWithoutBillingProfiles,
    Parameters.includeDeleted,
    Parameters.includePendingAgreement,
    Parameters.includeResellee,
    Parameters.legalOwnerTID,
    Parameters.legalOwnerOID,
  ],
  urlParameters: [Parameters.$host],
  headerParameters: [Parameters.accept],
  serializer,
};
const listInvoiceSectionsByCreateSubscriptionPermissionNextOperationSpec: coreClient.OperationSpec =
  {
    path: "{nextLink}",
    httpMethod: "GET",
    responses: {
      200: {
        bodyMapper: Mappers.InvoiceSectionWithCreateSubPermissionListResult,
      },
      default: {
        bodyMapper: Mappers.ErrorResponse,
      },
    },
    urlParameters: [
      Parameters.$host,
      Parameters.billingAccountName,
      Parameters.nextLink,
    ],
    headerParameters: [Parameters.accept],
    serializer,
  };
const listNextOperationSpec: coreClient.OperationSpec = {
  path: "{nextLink}",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.BillingAccountListResult,
    },
    default: {
      bodyMapper: Mappers.ErrorResponse,
    },
  },
  urlParameters: [Parameters.$host, Parameters.nextLink],
  headerParameters: [Parameters.accept],
  serializer,
};
