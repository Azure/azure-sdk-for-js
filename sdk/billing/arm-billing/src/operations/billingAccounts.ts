/*
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is
 * regenerated.
 */

import * as coreHttp from "@azure/core-http";
import * as coreArm from "@azure/core-arm";
import * as Models from "../models";
import * as Mappers from "../models/billingAccountsMappers";
import * as Parameters from "../models/parameters";
import { BillingManagementClientContext } from "../billingManagementClientContext";

/** Class representing a BillingAccounts. */
export class BillingAccounts {
  private readonly client: BillingManagementClientContext;

  /**
   * Create a BillingAccounts.
   * @param {BillingManagementClientContext} client Reference to the service client.
   */
  constructor(client: BillingManagementClientContext) {
    this.client = client;
  }

  /**
   * Lists all billing accounts for which a user has access.
   * @param [options] The optional parameters
   * @returns Promise<Models.BillingAccountsListResponse>
   */
  list(options?: Models.BillingAccountsListOptionalParams): Promise<Models.BillingAccountsListResponse>;
  /**
   * @param callback The callback
   */
  list(callback: coreHttp.ServiceCallback<Models.BillingAccountListResult>): void;
  /**
   * @param options The optional parameters
   * @param callback The callback
   */
  list(options: Models.BillingAccountsListOptionalParams, callback: coreHttp.ServiceCallback<Models.BillingAccountListResult>): void;
  list(options?: Models.BillingAccountsListOptionalParams | coreHttp.ServiceCallback<Models.BillingAccountListResult>, callback?: coreHttp.ServiceCallback<Models.BillingAccountListResult>): Promise<Models.BillingAccountsListResponse> {
    return this.client.sendOperationRequest(
      {
        options
      },
      listOperationSpec,
      callback) as Promise<Models.BillingAccountsListResponse>;
  }

  /**
   * Get the billing account by id.
   * @param billingAccountName Billing Account Id.
   * @param [options] The optional parameters
   * @returns Promise<Models.BillingAccountsGetResponse>
   */
  get(billingAccountName: string, options?: Models.BillingAccountsGetOptionalParams): Promise<Models.BillingAccountsGetResponse>;
  /**
   * @param billingAccountName Billing Account Id.
   * @param callback The callback
   */
  get(billingAccountName: string, callback: coreHttp.ServiceCallback<Models.BillingAccount>): void;
  /**
   * @param billingAccountName Billing Account Id.
   * @param options The optional parameters
   * @param callback The callback
   */
  get(billingAccountName: string, options: Models.BillingAccountsGetOptionalParams, callback: coreHttp.ServiceCallback<Models.BillingAccount>): void;
  get(billingAccountName: string, options?: Models.BillingAccountsGetOptionalParams | coreHttp.ServiceCallback<Models.BillingAccount>, callback?: coreHttp.ServiceCallback<Models.BillingAccount>): Promise<Models.BillingAccountsGetResponse> {
    return this.client.sendOperationRequest(
      {
        billingAccountName,
        options
      },
      getOperationSpec,
      callback) as Promise<Models.BillingAccountsGetResponse>;
  }

  /**
   * The operation to update a billing account.
   * @param billingAccountName Billing Account Id.
   * @param parameters Parameters supplied to the update billing account operation.
   * @param [options] The optional parameters
   * @returns Promise<Models.BillingAccountsUpdateResponse>
   */
  update(billingAccountName: string, parameters: Models.BillingAccountUpdateProperties, options?: coreHttp.RequestOptionsBase): Promise<Models.BillingAccountsUpdateResponse> {
    return this.beginUpdate(billingAccountName,parameters,options)
      .then(lroPoller => lroPoller.pollUntilFinished()) as Promise<Models.BillingAccountsUpdateResponse>;
  }

  /**
   * The operation to update a billing account.
   * @param billingAccountName Billing Account Id.
   * @param parameters Parameters supplied to the update billing account operation.
   * @param [options] The optional parameters
   * @returns Promise<coreArm.LROPoller>
   */
  beginUpdate(billingAccountName: string, parameters: Models.BillingAccountUpdateProperties, options?: coreHttp.RequestOptionsBase): Promise<coreArm.LROPoller> {
    return this.client.sendLRORequest(
      {
        billingAccountName,
        parameters,
        options
      },
      beginUpdateOperationSpec,
      options);
  }

  /**
   * Lists all billing accounts for which a user has access.
   * @param nextPageLink The NextLink from the previous successful call to List operation.
   * @param [options] The optional parameters
   * @returns Promise<Models.BillingAccountsListNextResponse>
   */
  listNext(nextPageLink: string, options?: coreHttp.RequestOptionsBase): Promise<Models.BillingAccountsListNextResponse>;
  /**
   * @param nextPageLink The NextLink from the previous successful call to List operation.
   * @param callback The callback
   */
  listNext(nextPageLink: string, callback: coreHttp.ServiceCallback<Models.BillingAccountListResult>): void;
  /**
   * @param nextPageLink The NextLink from the previous successful call to List operation.
   * @param options The optional parameters
   * @param callback The callback
   */
  listNext(nextPageLink: string, options: coreHttp.RequestOptionsBase, callback: coreHttp.ServiceCallback<Models.BillingAccountListResult>): void;
  listNext(nextPageLink: string, options?: coreHttp.RequestOptionsBase | coreHttp.ServiceCallback<Models.BillingAccountListResult>, callback?: coreHttp.ServiceCallback<Models.BillingAccountListResult>): Promise<Models.BillingAccountsListNextResponse> {
    return this.client.sendOperationRequest(
      {
        nextPageLink,
        options
      },
      listNextOperationSpec,
      callback) as Promise<Models.BillingAccountsListNextResponse>;
  }
}

// Operation Specifications
const serializer = new coreHttp.Serializer(Mappers);
const listOperationSpec: coreHttp.OperationSpec = {
  httpMethod: "GET",
  path: "providers/Microsoft.Billing/billingAccounts",
  queryParameters: [
    Parameters.apiVersion,
    Parameters.expand
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    200: {
      bodyMapper: Mappers.BillingAccountListResult
    },
    default: {
      bodyMapper: Mappers.ErrorResponse
    }
  },
  serializer
};

const getOperationSpec: coreHttp.OperationSpec = {
  httpMethod: "GET",
  path: "providers/Microsoft.Billing/billingAccounts/{billingAccountName}",
  urlParameters: [
    Parameters.billingAccountName
  ],
  queryParameters: [
    Parameters.apiVersion,
    Parameters.expand
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    200: {
      bodyMapper: Mappers.BillingAccount
    },
    default: {
      bodyMapper: Mappers.ErrorResponse
    }
  },
  serializer
};

const beginUpdateOperationSpec: coreHttp.OperationSpec = {
  httpMethod: "PATCH",
  path: "providers/Microsoft.Billing/billingAccounts/{billingAccountName}",
  urlParameters: [
    Parameters.billingAccountName
  ],
  queryParameters: [
    Parameters.apiVersion
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  requestBody: {
    parameterPath: "parameters",
    mapper: {
      ...Mappers.BillingAccountUpdateProperties,
      required: true
    }
  },
  responses: {
    200: {
      bodyMapper: Mappers.BillingAccount
    },
    202: {},
    default: {
      bodyMapper: Mappers.ErrorResponse
    }
  },
  serializer
};

const listNextOperationSpec: coreHttp.OperationSpec = {
  httpMethod: "GET",
  baseUrl: "https://management.azure.com",
  path: "{nextLink}",
  urlParameters: [
    Parameters.nextPageLink
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    200: {
      bodyMapper: Mappers.BillingAccountListResult
    },
    default: {
      bodyMapper: Mappers.ErrorResponse
    }
  },
  serializer
};
