/*
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is
 * regenerated.
 */

import * as msRest from "@azure/ms-rest-js";
import * as Models from "../models";
import * as Mappers from "../models/billingPropertyOperationsMappers";
import * as Parameters from "../models/parameters";
import { BillingManagementClientContext } from "../billingManagementClientContext";

/** Class representing a BillingPropertyOperations. */
export class BillingPropertyOperations {
  private readonly client: BillingManagementClientContext;

  /**
   * Create a BillingPropertyOperations.
   * @param {BillingManagementClientContext} client Reference to the service client.
   */
  constructor(client: BillingManagementClientContext) {
    this.client = client;
  }

  /**
   * Get the billing properties for a subscription. This operation is not supported for billing
   * accounts with agreement type Enterprise Agreement.
   * @param [options] The optional parameters
   * @returns Promise<Models.BillingPropertyGetResponse>
   */
  get(options?: msRest.RequestOptionsBase): Promise<Models.BillingPropertyGetResponse>;
  /**
   * @param callback The callback
   */
  get(callback: msRest.ServiceCallback<Models.BillingProperty>): void;
  /**
   * @param options The optional parameters
   * @param callback The callback
   */
  get(options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.BillingProperty>): void;
  get(options?: msRest.RequestOptionsBase | msRest.ServiceCallback<Models.BillingProperty>, callback?: msRest.ServiceCallback<Models.BillingProperty>): Promise<Models.BillingPropertyGetResponse> {
    return this.client.sendOperationRequest(
      {
        options
      },
      getOperationSpec,
      callback) as Promise<Models.BillingPropertyGetResponse>;
  }

  /**
   * Updates the billing property of a subscription. Currently, cost center can be updated. The
   * operation is supported only for billing accounts with agreement type Microsoft Customer
   * Agreement.
   * @param [options] The optional parameters
   * @returns Promise<Models.BillingPropertyUpdateResponse>
   */
  update(options?: Models.BillingPropertyUpdateOptionalParams): Promise<Models.BillingPropertyUpdateResponse>;
  /**
   * @param callback The callback
   */
  update(callback: msRest.ServiceCallback<Models.BillingProperty>): void;
  /**
   * @param options The optional parameters
   * @param callback The callback
   */
  update(options: Models.BillingPropertyUpdateOptionalParams, callback: msRest.ServiceCallback<Models.BillingProperty>): void;
  update(options?: Models.BillingPropertyUpdateOptionalParams | msRest.ServiceCallback<Models.BillingProperty>, callback?: msRest.ServiceCallback<Models.BillingProperty>): Promise<Models.BillingPropertyUpdateResponse> {
    return this.client.sendOperationRequest(
      {
        options
      },
      updateOperationSpec,
      callback) as Promise<Models.BillingPropertyUpdateResponse>;
  }
}

// Operation Specifications
const serializer = new msRest.Serializer(Mappers);
const getOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "subscriptions/{subscriptionId}/providers/Microsoft.Billing/billingProperty/default",
  urlParameters: [
    Parameters.subscriptionId
  ],
  queryParameters: [
    Parameters.apiVersion0
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    200: {
      bodyMapper: Mappers.BillingProperty
    },
    default: {
      bodyMapper: Mappers.ErrorResponse
    }
  },
  serializer
};

const updateOperationSpec: msRest.OperationSpec = {
  httpMethod: "PATCH",
  path: "subscriptions/{subscriptionId}/providers/Microsoft.Billing/billingProperty/default",
  urlParameters: [
    Parameters.subscriptionId
  ],
  queryParameters: [
    Parameters.apiVersion0
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  requestBody: {
    parameterPath: {
      costCenter: [
        "options",
        "costCenter"
      ]
    },
    mapper: {
      ...Mappers.BillingProperty,
      required: true
    }
  },
  responses: {
    200: {
      bodyMapper: Mappers.BillingProperty
    },
    default: {
      bodyMapper: Mappers.ErrorResponse
    }
  },
  serializer
};
