/*
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is
 * regenerated.
 */

import * as msRest from "@azure/ms-rest-js";
import * as Models from "../models";
import * as Mappers from "../models/policiesMappers";
import * as Parameters from "../models/parameters";
import { BillingManagementClientContext } from "../billingManagementClientContext";

/** Class representing a Policies. */
export class Policies {
  private readonly client: BillingManagementClientContext;

  /**
   * Create a Policies.
   * @param {BillingManagementClientContext} client Reference to the service client.
   */
  constructor(client: BillingManagementClientContext) {
    this.client = client;
  }

  /**
   * The policy for a given billing account name and billing profile name.
   * @param billingAccountName billing Account Id.
   * @param billingProfileName Billing Profile Id.
   * @param [options] The optional parameters
   * @returns Promise<Models.PoliciesGetByBillingProfileResponse>
   */
  getByBillingProfile(billingAccountName: string, billingProfileName: string, options?: msRest.RequestOptionsBase): Promise<Models.PoliciesGetByBillingProfileResponse>;
  /**
   * @param billingAccountName billing Account Id.
   * @param billingProfileName Billing Profile Id.
   * @param callback The callback
   */
  getByBillingProfile(billingAccountName: string, billingProfileName: string, callback: msRest.ServiceCallback<Models.Policy>): void;
  /**
   * @param billingAccountName billing Account Id.
   * @param billingProfileName Billing Profile Id.
   * @param options The optional parameters
   * @param callback The callback
   */
  getByBillingProfile(billingAccountName: string, billingProfileName: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.Policy>): void;
  getByBillingProfile(billingAccountName: string, billingProfileName: string, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<Models.Policy>, callback?: msRest.ServiceCallback<Models.Policy>): Promise<Models.PoliciesGetByBillingProfileResponse> {
    return this.client.sendOperationRequest(
      {
        billingAccountName,
        billingProfileName,
        options
      },
      getByBillingProfileOperationSpec,
      callback) as Promise<Models.PoliciesGetByBillingProfileResponse>;
  }

  /**
   * The operation to update a policy.
   * @param billingAccountName billing Account Id.
   * @param billingProfileName Billing Profile Id.
   * @param parameters Parameters supplied to the update policy operation.
   * @param [options] The optional parameters
   * @returns Promise<Models.PoliciesUpdateResponse>
   */
  update(billingAccountName: string, billingProfileName: string, parameters: Models.Policy, options?: msRest.RequestOptionsBase): Promise<Models.PoliciesUpdateResponse>;
  /**
   * @param billingAccountName billing Account Id.
   * @param billingProfileName Billing Profile Id.
   * @param parameters Parameters supplied to the update policy operation.
   * @param callback The callback
   */
  update(billingAccountName: string, billingProfileName: string, parameters: Models.Policy, callback: msRest.ServiceCallback<Models.Policy>): void;
  /**
   * @param billingAccountName billing Account Id.
   * @param billingProfileName Billing Profile Id.
   * @param parameters Parameters supplied to the update policy operation.
   * @param options The optional parameters
   * @param callback The callback
   */
  update(billingAccountName: string, billingProfileName: string, parameters: Models.Policy, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.Policy>): void;
  update(billingAccountName: string, billingProfileName: string, parameters: Models.Policy, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<Models.Policy>, callback?: msRest.ServiceCallback<Models.Policy>): Promise<Models.PoliciesUpdateResponse> {
    return this.client.sendOperationRequest(
      {
        billingAccountName,
        billingProfileName,
        parameters,
        options
      },
      updateOperationSpec,
      callback) as Promise<Models.PoliciesUpdateResponse>;
  }

  /**
   * The policy for a given billing account name and customer name.
   * @param billingAccountName billing Account Id.
   * @param customerName Customer name.
   * @param [options] The optional parameters
   * @returns Promise<Models.PoliciesGetByCustomerResponse>
   */
  getByCustomer(billingAccountName: string, customerName: string, options?: msRest.RequestOptionsBase): Promise<Models.PoliciesGetByCustomerResponse>;
  /**
   * @param billingAccountName billing Account Id.
   * @param customerName Customer name.
   * @param callback The callback
   */
  getByCustomer(billingAccountName: string, customerName: string, callback: msRest.ServiceCallback<Models.CustomerPolicy>): void;
  /**
   * @param billingAccountName billing Account Id.
   * @param customerName Customer name.
   * @param options The optional parameters
   * @param callback The callback
   */
  getByCustomer(billingAccountName: string, customerName: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.CustomerPolicy>): void;
  getByCustomer(billingAccountName: string, customerName: string, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<Models.CustomerPolicy>, callback?: msRest.ServiceCallback<Models.CustomerPolicy>): Promise<Models.PoliciesGetByCustomerResponse> {
    return this.client.sendOperationRequest(
      {
        billingAccountName,
        customerName,
        options
      },
      getByCustomerOperationSpec,
      callback) as Promise<Models.PoliciesGetByCustomerResponse>;
  }

  /**
   * The operation to update a Customer policy.
   * @param billingAccountName billing Account Id.
   * @param customerName Customer name.
   * @param [options] The optional parameters
   * @returns Promise<Models.PoliciesUpdateCustomerResponse>
   */
  updateCustomer(billingAccountName: string, customerName: string, options?: Models.PoliciesUpdateCustomerOptionalParams): Promise<Models.PoliciesUpdateCustomerResponse>;
  /**
   * @param billingAccountName billing Account Id.
   * @param customerName Customer name.
   * @param callback The callback
   */
  updateCustomer(billingAccountName: string, customerName: string, callback: msRest.ServiceCallback<Models.CustomerPolicy>): void;
  /**
   * @param billingAccountName billing Account Id.
   * @param customerName Customer name.
   * @param options The optional parameters
   * @param callback The callback
   */
  updateCustomer(billingAccountName: string, customerName: string, options: Models.PoliciesUpdateCustomerOptionalParams, callback: msRest.ServiceCallback<Models.CustomerPolicy>): void;
  updateCustomer(billingAccountName: string, customerName: string, options?: Models.PoliciesUpdateCustomerOptionalParams | msRest.ServiceCallback<Models.CustomerPolicy>, callback?: msRest.ServiceCallback<Models.CustomerPolicy>): Promise<Models.PoliciesUpdateCustomerResponse> {
    return this.client.sendOperationRequest(
      {
        billingAccountName,
        customerName,
        options
      },
      updateCustomerOperationSpec,
      callback) as Promise<Models.PoliciesUpdateCustomerResponse>;
  }
}

// Operation Specifications
const serializer = new msRest.Serializer(Mappers);
const getByBillingProfileOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "providers/Microsoft.Billing/billingAccounts/{billingAccountName}/billingProfiles/{billingProfileName}/policies/default",
  urlParameters: [
    Parameters.billingAccountName,
    Parameters.billingProfileName
  ],
  queryParameters: [
    Parameters.apiVersion
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    200: {
      bodyMapper: Mappers.Policy
    },
    default: {
      bodyMapper: Mappers.ErrorResponse
    }
  },
  serializer
};

const updateOperationSpec: msRest.OperationSpec = {
  httpMethod: "PUT",
  path: "providers/Microsoft.Billing/billingAccounts/{billingAccountName}/billingProfiles/{billingProfileName}/policies/default",
  urlParameters: [
    Parameters.billingAccountName,
    Parameters.billingProfileName
  ],
  queryParameters: [
    Parameters.apiVersion
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  requestBody: {
    parameterPath: "parameters",
    mapper: {
      ...Mappers.Policy,
      required: true
    }
  },
  responses: {
    200: {
      bodyMapper: Mappers.Policy
    },
    default: {
      bodyMapper: Mappers.ErrorResponse
    }
  },
  serializer
};

const getByCustomerOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "providers/Microsoft.Billing/billingAccounts/{billingAccountName}/customers/{customerName}/policies/default",
  urlParameters: [
    Parameters.billingAccountName,
    Parameters.customerName
  ],
  queryParameters: [
    Parameters.apiVersion
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    200: {
      bodyMapper: Mappers.CustomerPolicy
    },
    default: {
      bodyMapper: Mappers.ErrorResponse
    }
  },
  serializer
};

const updateCustomerOperationSpec: msRest.OperationSpec = {
  httpMethod: "PUT",
  path: "providers/Microsoft.Billing/billingAccounts/{billingAccountName}/customers/{customerName}/policies/default",
  urlParameters: [
    Parameters.billingAccountName,
    Parameters.customerName
  ],
  queryParameters: [
    Parameters.apiVersion
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  requestBody: {
    parameterPath: {
      viewCharges: [
        "options",
        "viewCharges"
      ]
    },
    mapper: {
      ...Mappers.CustomerPolicy,
      required: true
    }
  },
  responses: {
    200: {
      bodyMapper: Mappers.CustomerPolicy
    },
    default: {
      bodyMapper: Mappers.ErrorResponse
    }
  },
  serializer
};
