/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */

import { PagedAsyncIterableIterator, PageSettings } from "@azure/core-paging";
import { setContinuationToken } from "../pagingHelper";
import { Invoices } from "../operationsInterfaces";
import * as coreClient from "@azure/core-client";
import * as Mappers from "../models/mappers";
import * as Parameters from "../models/parameters";
import { BillingManagementClient } from "../billingManagementClient";
import { PollerLike, PollOperationState, LroEngine } from "@azure/core-lro";
import { LroImpl } from "../lroImpl";
import {
  Invoice,
  InvoicesListByBillingAccountNextOptionalParams,
  InvoicesListByBillingAccountOptionalParams,
  InvoicesListByBillingAccountResponse,
  InvoicesListByBillingProfileNextOptionalParams,
  InvoicesListByBillingProfileOptionalParams,
  InvoicesListByBillingProfileResponse,
  InvoicesListByBillingSubscriptionNextOptionalParams,
  InvoicesListByBillingSubscriptionOptionalParams,
  InvoicesListByBillingSubscriptionResponse,
  InvoicesGetOptionalParams,
  InvoicesGetResponse,
  InvoicesGetByIdOptionalParams,
  InvoicesGetByIdResponse,
  InvoicesDownloadInvoiceOptionalParams,
  InvoicesDownloadInvoiceResponse,
  InvoicesDownloadMultipleBillingProfileInvoicesOptionalParams,
  InvoicesDownloadMultipleBillingProfileInvoicesResponse,
  InvoicesGetBySubscriptionAndInvoiceIdOptionalParams,
  InvoicesGetBySubscriptionAndInvoiceIdResponse,
  InvoicesDownloadBillingSubscriptionInvoiceOptionalParams,
  InvoicesDownloadBillingSubscriptionInvoiceResponse,
  InvoicesDownloadMultipleBillingSubscriptionInvoicesOptionalParams,
  InvoicesDownloadMultipleBillingSubscriptionInvoicesResponse,
  InvoicesListByBillingAccountNextResponse,
  InvoicesListByBillingProfileNextResponse,
  InvoicesListByBillingSubscriptionNextResponse
} from "../models";

/// <reference lib="esnext.asynciterable" />
/** Class containing Invoices operations. */
export class InvoicesImpl implements Invoices {
  private readonly client: BillingManagementClient;

  /**
   * Initialize a new instance of the class Invoices class.
   * @param client Reference to the service client
   */
  constructor(client: BillingManagementClient) {
    this.client = client;
  }

  /**
   * Lists the invoices for a billing account for a given start date and end date. The operation is
   * supported for billing accounts with agreement type Microsoft Partner Agreement or Microsoft Customer
   * Agreement.
   * @param billingAccountName The ID that uniquely identifies a billing account.
   * @param periodStartDate The start date to fetch the invoices. The date should be specified in
   *                        MM-DD-YYYY format.
   * @param periodEndDate The end date to fetch the invoices. The date should be specified in MM-DD-YYYY
   *                      format.
   * @param options The options parameters.
   */
  public listByBillingAccount(
    billingAccountName: string,
    periodStartDate: string,
    periodEndDate: string,
    options?: InvoicesListByBillingAccountOptionalParams
  ): PagedAsyncIterableIterator<Invoice> {
    const iter = this.listByBillingAccountPagingAll(
      billingAccountName,
      periodStartDate,
      periodEndDate,
      options
    );
    return {
      next() {
        return iter.next();
      },
      [Symbol.asyncIterator]() {
        return this;
      },
      byPage: (settings?: PageSettings) => {
        if (settings?.maxPageSize) {
          throw new Error("maxPageSize is not supported by this operation.");
        }
        return this.listByBillingAccountPagingPage(
          billingAccountName,
          periodStartDate,
          periodEndDate,
          options,
          settings
        );
      }
    };
  }

  private async *listByBillingAccountPagingPage(
    billingAccountName: string,
    periodStartDate: string,
    periodEndDate: string,
    options?: InvoicesListByBillingAccountOptionalParams,
    settings?: PageSettings
  ): AsyncIterableIterator<Invoice[]> {
    let result: InvoicesListByBillingAccountResponse;
    let continuationToken = settings?.continuationToken;
    if (!continuationToken) {
      result = await this._listByBillingAccount(
        billingAccountName,
        periodStartDate,
        periodEndDate,
        options
      );
      let page = result.value || [];
      continuationToken = result.nextLink;
      setContinuationToken(page, continuationToken);
      yield page;
    }
    while (continuationToken) {
      result = await this._listByBillingAccountNext(
        billingAccountName,
        periodStartDate,
        periodEndDate,
        continuationToken,
        options
      );
      continuationToken = result.nextLink;
      let page = result.value || [];
      setContinuationToken(page, continuationToken);
      yield page;
    }
  }

  private async *listByBillingAccountPagingAll(
    billingAccountName: string,
    periodStartDate: string,
    periodEndDate: string,
    options?: InvoicesListByBillingAccountOptionalParams
  ): AsyncIterableIterator<Invoice> {
    for await (const page of this.listByBillingAccountPagingPage(
      billingAccountName,
      periodStartDate,
      periodEndDate,
      options
    )) {
      yield* page;
    }
  }

  /**
   * Lists the invoices for a billing profile for a given start date and end date. The operation is
   * supported for billing accounts with agreement type Microsoft Partner Agreement or Microsoft Customer
   * Agreement.
   * @param billingAccountName The ID that uniquely identifies a billing account.
   * @param billingProfileName The ID that uniquely identifies a billing profile.
   * @param periodStartDate The start date to fetch the invoices. The date should be specified in
   *                        MM-DD-YYYY format.
   * @param periodEndDate The end date to fetch the invoices. The date should be specified in MM-DD-YYYY
   *                      format.
   * @param options The options parameters.
   */
  public listByBillingProfile(
    billingAccountName: string,
    billingProfileName: string,
    periodStartDate: string,
    periodEndDate: string,
    options?: InvoicesListByBillingProfileOptionalParams
  ): PagedAsyncIterableIterator<Invoice> {
    const iter = this.listByBillingProfilePagingAll(
      billingAccountName,
      billingProfileName,
      periodStartDate,
      periodEndDate,
      options
    );
    return {
      next() {
        return iter.next();
      },
      [Symbol.asyncIterator]() {
        return this;
      },
      byPage: (settings?: PageSettings) => {
        if (settings?.maxPageSize) {
          throw new Error("maxPageSize is not supported by this operation.");
        }
        return this.listByBillingProfilePagingPage(
          billingAccountName,
          billingProfileName,
          periodStartDate,
          periodEndDate,
          options,
          settings
        );
      }
    };
  }

  private async *listByBillingProfilePagingPage(
    billingAccountName: string,
    billingProfileName: string,
    periodStartDate: string,
    periodEndDate: string,
    options?: InvoicesListByBillingProfileOptionalParams,
    settings?: PageSettings
  ): AsyncIterableIterator<Invoice[]> {
    let result: InvoicesListByBillingProfileResponse;
    let continuationToken = settings?.continuationToken;
    if (!continuationToken) {
      result = await this._listByBillingProfile(
        billingAccountName,
        billingProfileName,
        periodStartDate,
        periodEndDate,
        options
      );
      let page = result.value || [];
      continuationToken = result.nextLink;
      setContinuationToken(page, continuationToken);
      yield page;
    }
    while (continuationToken) {
      result = await this._listByBillingProfileNext(
        billingAccountName,
        billingProfileName,
        periodStartDate,
        periodEndDate,
        continuationToken,
        options
      );
      continuationToken = result.nextLink;
      let page = result.value || [];
      setContinuationToken(page, continuationToken);
      yield page;
    }
  }

  private async *listByBillingProfilePagingAll(
    billingAccountName: string,
    billingProfileName: string,
    periodStartDate: string,
    periodEndDate: string,
    options?: InvoicesListByBillingProfileOptionalParams
  ): AsyncIterableIterator<Invoice> {
    for await (const page of this.listByBillingProfilePagingPage(
      billingAccountName,
      billingProfileName,
      periodStartDate,
      periodEndDate,
      options
    )) {
      yield* page;
    }
  }

  /**
   * Lists the invoices for a subscription.
   * @param periodStartDate Invoice period start date.
   * @param periodEndDate Invoice period end date.
   * @param options The options parameters.
   */
  public listByBillingSubscription(
    periodStartDate: string,
    periodEndDate: string,
    options?: InvoicesListByBillingSubscriptionOptionalParams
  ): PagedAsyncIterableIterator<Invoice> {
    const iter = this.listByBillingSubscriptionPagingAll(
      periodStartDate,
      periodEndDate,
      options
    );
    return {
      next() {
        return iter.next();
      },
      [Symbol.asyncIterator]() {
        return this;
      },
      byPage: (settings?: PageSettings) => {
        if (settings?.maxPageSize) {
          throw new Error("maxPageSize is not supported by this operation.");
        }
        return this.listByBillingSubscriptionPagingPage(
          periodStartDate,
          periodEndDate,
          options,
          settings
        );
      }
    };
  }

  private async *listByBillingSubscriptionPagingPage(
    periodStartDate: string,
    periodEndDate: string,
    options?: InvoicesListByBillingSubscriptionOptionalParams,
    settings?: PageSettings
  ): AsyncIterableIterator<Invoice[]> {
    let result: InvoicesListByBillingSubscriptionResponse;
    let continuationToken = settings?.continuationToken;
    if (!continuationToken) {
      result = await this._listByBillingSubscription(
        periodStartDate,
        periodEndDate,
        options
      );
      let page = result.value || [];
      continuationToken = result.nextLink;
      setContinuationToken(page, continuationToken);
      yield page;
    }
    while (continuationToken) {
      result = await this._listByBillingSubscriptionNext(
        periodStartDate,
        periodEndDate,
        continuationToken,
        options
      );
      continuationToken = result.nextLink;
      let page = result.value || [];
      setContinuationToken(page, continuationToken);
      yield page;
    }
  }

  private async *listByBillingSubscriptionPagingAll(
    periodStartDate: string,
    periodEndDate: string,
    options?: InvoicesListByBillingSubscriptionOptionalParams
  ): AsyncIterableIterator<Invoice> {
    for await (const page of this.listByBillingSubscriptionPagingPage(
      periodStartDate,
      periodEndDate,
      options
    )) {
      yield* page;
    }
  }

  /**
   * Lists the invoices for a billing account for a given start date and end date. The operation is
   * supported for billing accounts with agreement type Microsoft Partner Agreement or Microsoft Customer
   * Agreement.
   * @param billingAccountName The ID that uniquely identifies a billing account.
   * @param periodStartDate The start date to fetch the invoices. The date should be specified in
   *                        MM-DD-YYYY format.
   * @param periodEndDate The end date to fetch the invoices. The date should be specified in MM-DD-YYYY
   *                      format.
   * @param options The options parameters.
   */
  private _listByBillingAccount(
    billingAccountName: string,
    periodStartDate: string,
    periodEndDate: string,
    options?: InvoicesListByBillingAccountOptionalParams
  ): Promise<InvoicesListByBillingAccountResponse> {
    return this.client.sendOperationRequest(
      { billingAccountName, periodStartDate, periodEndDate, options },
      listByBillingAccountOperationSpec
    );
  }

  /**
   * Lists the invoices for a billing profile for a given start date and end date. The operation is
   * supported for billing accounts with agreement type Microsoft Partner Agreement or Microsoft Customer
   * Agreement.
   * @param billingAccountName The ID that uniquely identifies a billing account.
   * @param billingProfileName The ID that uniquely identifies a billing profile.
   * @param periodStartDate The start date to fetch the invoices. The date should be specified in
   *                        MM-DD-YYYY format.
   * @param periodEndDate The end date to fetch the invoices. The date should be specified in MM-DD-YYYY
   *                      format.
   * @param options The options parameters.
   */
  private _listByBillingProfile(
    billingAccountName: string,
    billingProfileName: string,
    periodStartDate: string,
    periodEndDate: string,
    options?: InvoicesListByBillingProfileOptionalParams
  ): Promise<InvoicesListByBillingProfileResponse> {
    return this.client.sendOperationRequest(
      {
        billingAccountName,
        billingProfileName,
        periodStartDate,
        periodEndDate,
        options
      },
      listByBillingProfileOperationSpec
    );
  }

  /**
   * Gets an invoice by billing account name and ID. The operation is supported for billing accounts with
   * agreement type Microsoft Partner Agreement or Microsoft Customer Agreement.
   * @param billingAccountName The ID that uniquely identifies a billing account.
   * @param invoiceName The ID that uniquely identifies an invoice.
   * @param options The options parameters.
   */
  get(
    billingAccountName: string,
    invoiceName: string,
    options?: InvoicesGetOptionalParams
  ): Promise<InvoicesGetResponse> {
    return this.client.sendOperationRequest(
      { billingAccountName, invoiceName, options },
      getOperationSpec
    );
  }

  /**
   * Gets an invoice by ID. The operation is supported for billing accounts with agreement type Microsoft
   * Partner Agreement or Microsoft Customer Agreement.
   * @param invoiceName The ID that uniquely identifies an invoice.
   * @param options The options parameters.
   */
  getById(
    invoiceName: string,
    options?: InvoicesGetByIdOptionalParams
  ): Promise<InvoicesGetByIdResponse> {
    return this.client.sendOperationRequest(
      { invoiceName, options },
      getByIdOperationSpec
    );
  }

  /**
   * Gets a URL to download an invoice. The operation is supported for billing accounts with agreement
   * type Microsoft Partner Agreement or Microsoft Customer Agreement.
   * @param billingAccountName The ID that uniquely identifies a billing account.
   * @param invoiceName The ID that uniquely identifies an invoice.
   * @param downloadToken Download token with document source and document ID.
   * @param options The options parameters.
   */
  async beginDownloadInvoice(
    billingAccountName: string,
    invoiceName: string,
    downloadToken: string,
    options?: InvoicesDownloadInvoiceOptionalParams
  ): Promise<
    PollerLike<
      PollOperationState<InvoicesDownloadInvoiceResponse>,
      InvoicesDownloadInvoiceResponse
    >
  > {
    const directSendOperation = async (
      args: coreClient.OperationArguments,
      spec: coreClient.OperationSpec
    ): Promise<InvoicesDownloadInvoiceResponse> => {
      return this.client.sendOperationRequest(args, spec);
    };
    const sendOperation = async (
      args: coreClient.OperationArguments,
      spec: coreClient.OperationSpec
    ) => {
      let currentRawResponse:
        | coreClient.FullOperationResponse
        | undefined = undefined;
      const providedCallback = args.options?.onResponse;
      const callback: coreClient.RawResponseCallback = (
        rawResponse: coreClient.FullOperationResponse,
        flatResponse: unknown
      ) => {
        currentRawResponse = rawResponse;
        providedCallback?.(rawResponse, flatResponse);
      };
      const updatedArgs = {
        ...args,
        options: {
          ...args.options,
          onResponse: callback
        }
      };
      const flatResponse = await directSendOperation(updatedArgs, spec);
      return {
        flatResponse,
        rawResponse: {
          statusCode: currentRawResponse!.status,
          body: currentRawResponse!.parsedBody,
          headers: currentRawResponse!.headers.toJSON()
        }
      };
    };

    const lro = new LroImpl(
      sendOperation,
      { billingAccountName, invoiceName, downloadToken, options },
      downloadInvoiceOperationSpec
    );
    const poller = new LroEngine(lro, {
      resumeFrom: options?.resumeFrom,
      intervalInMs: options?.updateIntervalInMs,
      lroResourceLocationConfig: "location"
    });
    await poller.poll();
    return poller;
  }

  /**
   * Gets a URL to download an invoice. The operation is supported for billing accounts with agreement
   * type Microsoft Partner Agreement or Microsoft Customer Agreement.
   * @param billingAccountName The ID that uniquely identifies a billing account.
   * @param invoiceName The ID that uniquely identifies an invoice.
   * @param downloadToken Download token with document source and document ID.
   * @param options The options parameters.
   */
  async beginDownloadInvoiceAndWait(
    billingAccountName: string,
    invoiceName: string,
    downloadToken: string,
    options?: InvoicesDownloadInvoiceOptionalParams
  ): Promise<InvoicesDownloadInvoiceResponse> {
    const poller = await this.beginDownloadInvoice(
      billingAccountName,
      invoiceName,
      downloadToken,
      options
    );
    return poller.pollUntilDone();
  }

  /**
   * Gets a URL to download multiple invoice documents (invoice pdf, tax receipts, credit notes) as a zip
   * file. The operation is supported for billing accounts with agreement type Microsoft Partner
   * Agreement or Microsoft Customer Agreement.
   * @param billingAccountName The ID that uniquely identifies a billing account.
   * @param downloadUrls An array of download urls for individual documents
   * @param options The options parameters.
   */
  async beginDownloadMultipleBillingProfileInvoices(
    billingAccountName: string,
    downloadUrls: string[],
    options?: InvoicesDownloadMultipleBillingProfileInvoicesOptionalParams
  ): Promise<
    PollerLike<
      PollOperationState<
        InvoicesDownloadMultipleBillingProfileInvoicesResponse
      >,
      InvoicesDownloadMultipleBillingProfileInvoicesResponse
    >
  > {
    const directSendOperation = async (
      args: coreClient.OperationArguments,
      spec: coreClient.OperationSpec
    ): Promise<InvoicesDownloadMultipleBillingProfileInvoicesResponse> => {
      return this.client.sendOperationRequest(args, spec);
    };
    const sendOperation = async (
      args: coreClient.OperationArguments,
      spec: coreClient.OperationSpec
    ) => {
      let currentRawResponse:
        | coreClient.FullOperationResponse
        | undefined = undefined;
      const providedCallback = args.options?.onResponse;
      const callback: coreClient.RawResponseCallback = (
        rawResponse: coreClient.FullOperationResponse,
        flatResponse: unknown
      ) => {
        currentRawResponse = rawResponse;
        providedCallback?.(rawResponse, flatResponse);
      };
      const updatedArgs = {
        ...args,
        options: {
          ...args.options,
          onResponse: callback
        }
      };
      const flatResponse = await directSendOperation(updatedArgs, spec);
      return {
        flatResponse,
        rawResponse: {
          statusCode: currentRawResponse!.status,
          body: currentRawResponse!.parsedBody,
          headers: currentRawResponse!.headers.toJSON()
        }
      };
    };

    const lro = new LroImpl(
      sendOperation,
      { billingAccountName, downloadUrls, options },
      downloadMultipleBillingProfileInvoicesOperationSpec
    );
    const poller = new LroEngine(lro, {
      resumeFrom: options?.resumeFrom,
      intervalInMs: options?.updateIntervalInMs,
      lroResourceLocationConfig: "location"
    });
    await poller.poll();
    return poller;
  }

  /**
   * Gets a URL to download multiple invoice documents (invoice pdf, tax receipts, credit notes) as a zip
   * file. The operation is supported for billing accounts with agreement type Microsoft Partner
   * Agreement or Microsoft Customer Agreement.
   * @param billingAccountName The ID that uniquely identifies a billing account.
   * @param downloadUrls An array of download urls for individual documents
   * @param options The options parameters.
   */
  async beginDownloadMultipleBillingProfileInvoicesAndWait(
    billingAccountName: string,
    downloadUrls: string[],
    options?: InvoicesDownloadMultipleBillingProfileInvoicesOptionalParams
  ): Promise<InvoicesDownloadMultipleBillingProfileInvoicesResponse> {
    const poller = await this.beginDownloadMultipleBillingProfileInvoices(
      billingAccountName,
      downloadUrls,
      options
    );
    return poller.pollUntilDone();
  }

  /**
   * Lists the invoices for a subscription.
   * @param periodStartDate Invoice period start date.
   * @param periodEndDate Invoice period end date.
   * @param options The options parameters.
   */
  private _listByBillingSubscription(
    periodStartDate: string,
    periodEndDate: string,
    options?: InvoicesListByBillingSubscriptionOptionalParams
  ): Promise<InvoicesListByBillingSubscriptionResponse> {
    return this.client.sendOperationRequest(
      { periodStartDate, periodEndDate, options },
      listByBillingSubscriptionOperationSpec
    );
  }

  /**
   * Gets an invoice by subscription ID and invoice ID.
   * @param invoiceName The ID that uniquely identifies an invoice.
   * @param options The options parameters.
   */
  getBySubscriptionAndInvoiceId(
    invoiceName: string,
    options?: InvoicesGetBySubscriptionAndInvoiceIdOptionalParams
  ): Promise<InvoicesGetBySubscriptionAndInvoiceIdResponse> {
    return this.client.sendOperationRequest(
      { invoiceName, options },
      getBySubscriptionAndInvoiceIdOperationSpec
    );
  }

  /**
   * Gets a URL to download an invoice.
   * @param invoiceName The ID that uniquely identifies an invoice.
   * @param downloadToken Download token with document source and document ID.
   * @param options The options parameters.
   */
  async beginDownloadBillingSubscriptionInvoice(
    invoiceName: string,
    downloadToken: string,
    options?: InvoicesDownloadBillingSubscriptionInvoiceOptionalParams
  ): Promise<
    PollerLike<
      PollOperationState<InvoicesDownloadBillingSubscriptionInvoiceResponse>,
      InvoicesDownloadBillingSubscriptionInvoiceResponse
    >
  > {
    const directSendOperation = async (
      args: coreClient.OperationArguments,
      spec: coreClient.OperationSpec
    ): Promise<InvoicesDownloadBillingSubscriptionInvoiceResponse> => {
      return this.client.sendOperationRequest(args, spec);
    };
    const sendOperation = async (
      args: coreClient.OperationArguments,
      spec: coreClient.OperationSpec
    ) => {
      let currentRawResponse:
        | coreClient.FullOperationResponse
        | undefined = undefined;
      const providedCallback = args.options?.onResponse;
      const callback: coreClient.RawResponseCallback = (
        rawResponse: coreClient.FullOperationResponse,
        flatResponse: unknown
      ) => {
        currentRawResponse = rawResponse;
        providedCallback?.(rawResponse, flatResponse);
      };
      const updatedArgs = {
        ...args,
        options: {
          ...args.options,
          onResponse: callback
        }
      };
      const flatResponse = await directSendOperation(updatedArgs, spec);
      return {
        flatResponse,
        rawResponse: {
          statusCode: currentRawResponse!.status,
          body: currentRawResponse!.parsedBody,
          headers: currentRawResponse!.headers.toJSON()
        }
      };
    };

    const lro = new LroImpl(
      sendOperation,
      { invoiceName, downloadToken, options },
      downloadBillingSubscriptionInvoiceOperationSpec
    );
    const poller = new LroEngine(lro, {
      resumeFrom: options?.resumeFrom,
      intervalInMs: options?.updateIntervalInMs,
      lroResourceLocationConfig: "location"
    });
    await poller.poll();
    return poller;
  }

  /**
   * Gets a URL to download an invoice.
   * @param invoiceName The ID that uniquely identifies an invoice.
   * @param downloadToken Download token with document source and document ID.
   * @param options The options parameters.
   */
  async beginDownloadBillingSubscriptionInvoiceAndWait(
    invoiceName: string,
    downloadToken: string,
    options?: InvoicesDownloadBillingSubscriptionInvoiceOptionalParams
  ): Promise<InvoicesDownloadBillingSubscriptionInvoiceResponse> {
    const poller = await this.beginDownloadBillingSubscriptionInvoice(
      invoiceName,
      downloadToken,
      options
    );
    return poller.pollUntilDone();
  }

  /**
   * Gets a URL to download multiple invoice documents (invoice pdf, tax receipts, credit notes) as a zip
   * file.
   * @param downloadUrls An array of download urls for individual documents
   * @param options The options parameters.
   */
  async beginDownloadMultipleBillingSubscriptionInvoices(
    downloadUrls: string[],
    options?: InvoicesDownloadMultipleBillingSubscriptionInvoicesOptionalParams
  ): Promise<
    PollerLike<
      PollOperationState<
        InvoicesDownloadMultipleBillingSubscriptionInvoicesResponse
      >,
      InvoicesDownloadMultipleBillingSubscriptionInvoicesResponse
    >
  > {
    const directSendOperation = async (
      args: coreClient.OperationArguments,
      spec: coreClient.OperationSpec
    ): Promise<InvoicesDownloadMultipleBillingSubscriptionInvoicesResponse> => {
      return this.client.sendOperationRequest(args, spec);
    };
    const sendOperation = async (
      args: coreClient.OperationArguments,
      spec: coreClient.OperationSpec
    ) => {
      let currentRawResponse:
        | coreClient.FullOperationResponse
        | undefined = undefined;
      const providedCallback = args.options?.onResponse;
      const callback: coreClient.RawResponseCallback = (
        rawResponse: coreClient.FullOperationResponse,
        flatResponse: unknown
      ) => {
        currentRawResponse = rawResponse;
        providedCallback?.(rawResponse, flatResponse);
      };
      const updatedArgs = {
        ...args,
        options: {
          ...args.options,
          onResponse: callback
        }
      };
      const flatResponse = await directSendOperation(updatedArgs, spec);
      return {
        flatResponse,
        rawResponse: {
          statusCode: currentRawResponse!.status,
          body: currentRawResponse!.parsedBody,
          headers: currentRawResponse!.headers.toJSON()
        }
      };
    };

    const lro = new LroImpl(
      sendOperation,
      { downloadUrls, options },
      downloadMultipleBillingSubscriptionInvoicesOperationSpec
    );
    const poller = new LroEngine(lro, {
      resumeFrom: options?.resumeFrom,
      intervalInMs: options?.updateIntervalInMs,
      lroResourceLocationConfig: "location"
    });
    await poller.poll();
    return poller;
  }

  /**
   * Gets a URL to download multiple invoice documents (invoice pdf, tax receipts, credit notes) as a zip
   * file.
   * @param downloadUrls An array of download urls for individual documents
   * @param options The options parameters.
   */
  async beginDownloadMultipleBillingSubscriptionInvoicesAndWait(
    downloadUrls: string[],
    options?: InvoicesDownloadMultipleBillingSubscriptionInvoicesOptionalParams
  ): Promise<InvoicesDownloadMultipleBillingSubscriptionInvoicesResponse> {
    const poller = await this.beginDownloadMultipleBillingSubscriptionInvoices(
      downloadUrls,
      options
    );
    return poller.pollUntilDone();
  }

  /**
   * ListByBillingAccountNext
   * @param billingAccountName The ID that uniquely identifies a billing account.
   * @param periodStartDate The start date to fetch the invoices. The date should be specified in
   *                        MM-DD-YYYY format.
   * @param periodEndDate The end date to fetch the invoices. The date should be specified in MM-DD-YYYY
   *                      format.
   * @param nextLink The nextLink from the previous successful call to the ListByBillingAccount method.
   * @param options The options parameters.
   */
  private _listByBillingAccountNext(
    billingAccountName: string,
    periodStartDate: string,
    periodEndDate: string,
    nextLink: string,
    options?: InvoicesListByBillingAccountNextOptionalParams
  ): Promise<InvoicesListByBillingAccountNextResponse> {
    return this.client.sendOperationRequest(
      { billingAccountName, periodStartDate, periodEndDate, nextLink, options },
      listByBillingAccountNextOperationSpec
    );
  }

  /**
   * ListByBillingProfileNext
   * @param billingAccountName The ID that uniquely identifies a billing account.
   * @param billingProfileName The ID that uniquely identifies a billing profile.
   * @param periodStartDate The start date to fetch the invoices. The date should be specified in
   *                        MM-DD-YYYY format.
   * @param periodEndDate The end date to fetch the invoices. The date should be specified in MM-DD-YYYY
   *                      format.
   * @param nextLink The nextLink from the previous successful call to the ListByBillingProfile method.
   * @param options The options parameters.
   */
  private _listByBillingProfileNext(
    billingAccountName: string,
    billingProfileName: string,
    periodStartDate: string,
    periodEndDate: string,
    nextLink: string,
    options?: InvoicesListByBillingProfileNextOptionalParams
  ): Promise<InvoicesListByBillingProfileNextResponse> {
    return this.client.sendOperationRequest(
      {
        billingAccountName,
        billingProfileName,
        periodStartDate,
        periodEndDate,
        nextLink,
        options
      },
      listByBillingProfileNextOperationSpec
    );
  }

  /**
   * ListByBillingSubscriptionNext
   * @param periodStartDate Invoice period start date.
   * @param periodEndDate Invoice period end date.
   * @param nextLink The nextLink from the previous successful call to the ListByBillingSubscription
   *                 method.
   * @param options The options parameters.
   */
  private _listByBillingSubscriptionNext(
    periodStartDate: string,
    periodEndDate: string,
    nextLink: string,
    options?: InvoicesListByBillingSubscriptionNextOptionalParams
  ): Promise<InvoicesListByBillingSubscriptionNextResponse> {
    return this.client.sendOperationRequest(
      { periodStartDate, periodEndDate, nextLink, options },
      listByBillingSubscriptionNextOperationSpec
    );
  }
}
// Operation Specifications
const serializer = coreClient.createSerializer(Mappers, /* isXml */ false);

const listByBillingAccountOperationSpec: coreClient.OperationSpec = {
  path:
    "/providers/Microsoft.Billing/billingAccounts/{billingAccountName}/invoices",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.InvoiceListResult
    },
    default: {
      bodyMapper: Mappers.ErrorResponse
    }
  },
  queryParameters: [
    Parameters.apiVersion,
    Parameters.periodStartDate,
    Parameters.periodEndDate
  ],
  urlParameters: [Parameters.$host, Parameters.billingAccountName],
  headerParameters: [Parameters.accept],
  serializer
};
const listByBillingProfileOperationSpec: coreClient.OperationSpec = {
  path:
    "/providers/Microsoft.Billing/billingAccounts/{billingAccountName}/billingProfiles/{billingProfileName}/invoices",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.InvoiceListResult
    },
    default: {
      bodyMapper: Mappers.ErrorResponse
    }
  },
  queryParameters: [
    Parameters.apiVersion,
    Parameters.periodStartDate,
    Parameters.periodEndDate
  ],
  urlParameters: [
    Parameters.$host,
    Parameters.billingAccountName,
    Parameters.billingProfileName
  ],
  headerParameters: [Parameters.accept],
  serializer
};
const getOperationSpec: coreClient.OperationSpec = {
  path:
    "/providers/Microsoft.Billing/billingAccounts/{billingAccountName}/invoices/{invoiceName}",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.Invoice
    },
    default: {
      bodyMapper: Mappers.ErrorResponse
    }
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.billingAccountName,
    Parameters.invoiceName
  ],
  headerParameters: [Parameters.accept],
  serializer
};
const getByIdOperationSpec: coreClient.OperationSpec = {
  path:
    "/providers/Microsoft.Billing/billingAccounts/default/invoices/{invoiceName}",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.Invoice
    },
    default: {
      bodyMapper: Mappers.ErrorResponse
    }
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [Parameters.$host, Parameters.invoiceName],
  headerParameters: [Parameters.accept],
  serializer
};
const downloadInvoiceOperationSpec: coreClient.OperationSpec = {
  path:
    "/providers/Microsoft.Billing/billingAccounts/{billingAccountName}/invoices/{invoiceName}/download",
  httpMethod: "POST",
  responses: {
    200: {
      bodyMapper: Mappers.DownloadUrl
    },
    201: {
      bodyMapper: Mappers.DownloadUrl
    },
    202: {
      bodyMapper: Mappers.DownloadUrl
    },
    204: {
      bodyMapper: Mappers.DownloadUrl
    },
    default: {
      bodyMapper: Mappers.ErrorResponse
    }
  },
  queryParameters: [Parameters.apiVersion, Parameters.downloadToken],
  urlParameters: [
    Parameters.$host,
    Parameters.billingAccountName,
    Parameters.invoiceName
  ],
  headerParameters: [Parameters.accept],
  serializer
};
const downloadMultipleBillingProfileInvoicesOperationSpec: coreClient.OperationSpec = {
  path:
    "/providers/Microsoft.Billing/billingAccounts/{billingAccountName}/downloadDocuments",
  httpMethod: "POST",
  responses: {
    200: {
      bodyMapper: Mappers.DownloadUrl
    },
    201: {
      bodyMapper: Mappers.DownloadUrl
    },
    202: {
      bodyMapper: Mappers.DownloadUrl
    },
    204: {
      bodyMapper: Mappers.DownloadUrl
    },
    default: {
      bodyMapper: Mappers.ErrorResponse
    }
  },
  requestBody: Parameters.downloadUrls,
  queryParameters: [Parameters.apiVersion],
  urlParameters: [Parameters.$host, Parameters.billingAccountName],
  headerParameters: [Parameters.accept, Parameters.contentType],
  mediaType: "json",
  serializer
};
const listByBillingSubscriptionOperationSpec: coreClient.OperationSpec = {
  path:
    "/providers/Microsoft.Billing/billingAccounts/default/billingSubscriptions/{subscriptionId}/invoices",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.InvoiceListResult
    },
    default: {
      bodyMapper: Mappers.ErrorResponse
    }
  },
  queryParameters: [
    Parameters.apiVersion,
    Parameters.periodStartDate,
    Parameters.periodEndDate
  ],
  urlParameters: [Parameters.$host, Parameters.subscriptionId],
  headerParameters: [Parameters.accept],
  serializer
};
const getBySubscriptionAndInvoiceIdOperationSpec: coreClient.OperationSpec = {
  path:
    "/providers/Microsoft.Billing/billingAccounts/default/billingSubscriptions/{subscriptionId}/invoices/{invoiceName}",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.Invoice
    },
    default: {
      bodyMapper: Mappers.ErrorResponse
    }
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.invoiceName
  ],
  headerParameters: [Parameters.accept],
  serializer
};
const downloadBillingSubscriptionInvoiceOperationSpec: coreClient.OperationSpec = {
  path:
    "/providers/Microsoft.Billing/billingAccounts/default/billingSubscriptions/{subscriptionId}/invoices/{invoiceName}/download",
  httpMethod: "POST",
  responses: {
    200: {
      bodyMapper: Mappers.DownloadUrl
    },
    201: {
      bodyMapper: Mappers.DownloadUrl
    },
    202: {
      bodyMapper: Mappers.DownloadUrl
    },
    204: {
      bodyMapper: Mappers.DownloadUrl
    },
    default: {
      bodyMapper: Mappers.ErrorResponse
    }
  },
  queryParameters: [Parameters.apiVersion, Parameters.downloadToken],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.invoiceName
  ],
  headerParameters: [Parameters.accept],
  serializer
};
const downloadMultipleBillingSubscriptionInvoicesOperationSpec: coreClient.OperationSpec = {
  path:
    "/providers/Microsoft.Billing/billingAccounts/default/billingSubscriptions/{subscriptionId}/downloadDocuments",
  httpMethod: "POST",
  responses: {
    200: {
      bodyMapper: Mappers.DownloadUrl
    },
    201: {
      bodyMapper: Mappers.DownloadUrl
    },
    202: {
      bodyMapper: Mappers.DownloadUrl
    },
    204: {
      bodyMapper: Mappers.DownloadUrl
    },
    default: {
      bodyMapper: Mappers.ErrorResponse
    }
  },
  requestBody: Parameters.downloadUrls,
  queryParameters: [Parameters.apiVersion],
  urlParameters: [Parameters.$host, Parameters.subscriptionId],
  headerParameters: [Parameters.accept, Parameters.contentType],
  mediaType: "json",
  serializer
};
const listByBillingAccountNextOperationSpec: coreClient.OperationSpec = {
  path: "{nextLink}",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.InvoiceListResult
    },
    default: {
      bodyMapper: Mappers.ErrorResponse
    }
  },
  queryParameters: [
    Parameters.apiVersion,
    Parameters.periodStartDate,
    Parameters.periodEndDate
  ],
  urlParameters: [
    Parameters.$host,
    Parameters.billingAccountName,
    Parameters.nextLink
  ],
  headerParameters: [Parameters.accept],
  serializer
};
const listByBillingProfileNextOperationSpec: coreClient.OperationSpec = {
  path: "{nextLink}",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.InvoiceListResult
    },
    default: {
      bodyMapper: Mappers.ErrorResponse
    }
  },
  queryParameters: [
    Parameters.apiVersion,
    Parameters.periodStartDate,
    Parameters.periodEndDate
  ],
  urlParameters: [
    Parameters.$host,
    Parameters.billingAccountName,
    Parameters.nextLink,
    Parameters.billingProfileName
  ],
  headerParameters: [Parameters.accept],
  serializer
};
const listByBillingSubscriptionNextOperationSpec: coreClient.OperationSpec = {
  path: "{nextLink}",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.InvoiceListResult
    },
    default: {
      bodyMapper: Mappers.ErrorResponse
    }
  },
  queryParameters: [
    Parameters.apiVersion,
    Parameters.periodStartDate,
    Parameters.periodEndDate
  ],
  urlParameters: [
    Parameters.$host,
    Parameters.nextLink,
    Parameters.subscriptionId
  ],
  headerParameters: [Parameters.accept],
  serializer
};
