/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */

import { PagedAsyncIterableIterator } from "@azure/core-paging";
import { BillingPermissions } from "../operationsInterfaces";
import * as coreClient from "@azure/core-client";
import * as Mappers from "../models/mappers";
import * as Parameters from "../models/parameters";
import { BillingManagementClient } from "../billingManagementClient";
import {
  BillingPermissionsProperties,
  BillingPermissionsListByCustomerNextOptionalParams,
  BillingPermissionsListByCustomerOptionalParams,
  BillingPermissionsListByBillingAccountNextOptionalParams,
  BillingPermissionsListByBillingAccountOptionalParams,
  BillingPermissionsListByInvoiceSectionsNextOptionalParams,
  BillingPermissionsListByInvoiceSectionsOptionalParams,
  BillingPermissionsListByBillingProfileNextOptionalParams,
  BillingPermissionsListByBillingProfileOptionalParams,
  BillingPermissionsListByCustomerResponse,
  BillingPermissionsListByBillingAccountResponse,
  BillingPermissionsListByInvoiceSectionsResponse,
  BillingPermissionsListByBillingProfileResponse,
  BillingPermissionsListByCustomerNextResponse,
  BillingPermissionsListByBillingAccountNextResponse,
  BillingPermissionsListByInvoiceSectionsNextResponse,
  BillingPermissionsListByBillingProfileNextResponse
} from "../models";

/// <reference lib="esnext.asynciterable" />
/** Class containing BillingPermissions operations. */
export class BillingPermissionsImpl implements BillingPermissions {
  private readonly client: BillingManagementClient;

  /**
   * Initialize a new instance of the class BillingPermissions class.
   * @param client Reference to the service client
   */
  constructor(client: BillingManagementClient) {
    this.client = client;
  }

  /**
   * Lists the billing permissions the caller has for a customer.
   * @param billingAccountName The ID that uniquely identifies a billing account.
   * @param customerName The ID that uniquely identifies a customer.
   * @param options The options parameters.
   */
  public listByCustomer(
    billingAccountName: string,
    customerName: string,
    options?: BillingPermissionsListByCustomerOptionalParams
  ): PagedAsyncIterableIterator<BillingPermissionsProperties> {
    const iter = this.listByCustomerPagingAll(
      billingAccountName,
      customerName,
      options
    );
    return {
      next() {
        return iter.next();
      },
      [Symbol.asyncIterator]() {
        return this;
      },
      byPage: () => {
        return this.listByCustomerPagingPage(
          billingAccountName,
          customerName,
          options
        );
      }
    };
  }

  private async *listByCustomerPagingPage(
    billingAccountName: string,
    customerName: string,
    options?: BillingPermissionsListByCustomerOptionalParams
  ): AsyncIterableIterator<BillingPermissionsProperties[]> {
    let result = await this._listByCustomer(
      billingAccountName,
      customerName,
      options
    );
    yield result.value || [];
    let continuationToken = result.nextLink;
    while (continuationToken) {
      result = await this._listByCustomerNext(
        billingAccountName,
        customerName,
        continuationToken,
        options
      );
      continuationToken = result.nextLink;
      yield result.value || [];
    }
  }

  private async *listByCustomerPagingAll(
    billingAccountName: string,
    customerName: string,
    options?: BillingPermissionsListByCustomerOptionalParams
  ): AsyncIterableIterator<BillingPermissionsProperties> {
    for await (const page of this.listByCustomerPagingPage(
      billingAccountName,
      customerName,
      options
    )) {
      yield* page;
    }
  }

  /**
   * Lists the billing permissions the caller has on a billing account.
   * @param billingAccountName The ID that uniquely identifies a billing account.
   * @param options The options parameters.
   */
  public listByBillingAccount(
    billingAccountName: string,
    options?: BillingPermissionsListByBillingAccountOptionalParams
  ): PagedAsyncIterableIterator<BillingPermissionsProperties> {
    const iter = this.listByBillingAccountPagingAll(
      billingAccountName,
      options
    );
    return {
      next() {
        return iter.next();
      },
      [Symbol.asyncIterator]() {
        return this;
      },
      byPage: () => {
        return this.listByBillingAccountPagingPage(billingAccountName, options);
      }
    };
  }

  private async *listByBillingAccountPagingPage(
    billingAccountName: string,
    options?: BillingPermissionsListByBillingAccountOptionalParams
  ): AsyncIterableIterator<BillingPermissionsProperties[]> {
    let result = await this._listByBillingAccount(billingAccountName, options);
    yield result.value || [];
    let continuationToken = result.nextLink;
    while (continuationToken) {
      result = await this._listByBillingAccountNext(
        billingAccountName,
        continuationToken,
        options
      );
      continuationToken = result.nextLink;
      yield result.value || [];
    }
  }

  private async *listByBillingAccountPagingAll(
    billingAccountName: string,
    options?: BillingPermissionsListByBillingAccountOptionalParams
  ): AsyncIterableIterator<BillingPermissionsProperties> {
    for await (const page of this.listByBillingAccountPagingPage(
      billingAccountName,
      options
    )) {
      yield* page;
    }
  }

  /**
   * Lists the billing permissions the caller has on an invoice section.
   * @param billingAccountName The ID that uniquely identifies a billing account.
   * @param billingProfileName The ID that uniquely identifies a billing profile.
   * @param invoiceSectionName The ID that uniquely identifies an invoice section.
   * @param options The options parameters.
   */
  public listByInvoiceSections(
    billingAccountName: string,
    billingProfileName: string,
    invoiceSectionName: string,
    options?: BillingPermissionsListByInvoiceSectionsOptionalParams
  ): PagedAsyncIterableIterator<BillingPermissionsProperties> {
    const iter = this.listByInvoiceSectionsPagingAll(
      billingAccountName,
      billingProfileName,
      invoiceSectionName,
      options
    );
    return {
      next() {
        return iter.next();
      },
      [Symbol.asyncIterator]() {
        return this;
      },
      byPage: () => {
        return this.listByInvoiceSectionsPagingPage(
          billingAccountName,
          billingProfileName,
          invoiceSectionName,
          options
        );
      }
    };
  }

  private async *listByInvoiceSectionsPagingPage(
    billingAccountName: string,
    billingProfileName: string,
    invoiceSectionName: string,
    options?: BillingPermissionsListByInvoiceSectionsOptionalParams
  ): AsyncIterableIterator<BillingPermissionsProperties[]> {
    let result = await this._listByInvoiceSections(
      billingAccountName,
      billingProfileName,
      invoiceSectionName,
      options
    );
    yield result.value || [];
    let continuationToken = result.nextLink;
    while (continuationToken) {
      result = await this._listByInvoiceSectionsNext(
        billingAccountName,
        billingProfileName,
        invoiceSectionName,
        continuationToken,
        options
      );
      continuationToken = result.nextLink;
      yield result.value || [];
    }
  }

  private async *listByInvoiceSectionsPagingAll(
    billingAccountName: string,
    billingProfileName: string,
    invoiceSectionName: string,
    options?: BillingPermissionsListByInvoiceSectionsOptionalParams
  ): AsyncIterableIterator<BillingPermissionsProperties> {
    for await (const page of this.listByInvoiceSectionsPagingPage(
      billingAccountName,
      billingProfileName,
      invoiceSectionName,
      options
    )) {
      yield* page;
    }
  }

  /**
   * Lists the billing permissions the caller has on a billing profile.
   * @param billingAccountName The ID that uniquely identifies a billing account.
   * @param billingProfileName The ID that uniquely identifies a billing profile.
   * @param options The options parameters.
   */
  public listByBillingProfile(
    billingAccountName: string,
    billingProfileName: string,
    options?: BillingPermissionsListByBillingProfileOptionalParams
  ): PagedAsyncIterableIterator<BillingPermissionsProperties> {
    const iter = this.listByBillingProfilePagingAll(
      billingAccountName,
      billingProfileName,
      options
    );
    return {
      next() {
        return iter.next();
      },
      [Symbol.asyncIterator]() {
        return this;
      },
      byPage: () => {
        return this.listByBillingProfilePagingPage(
          billingAccountName,
          billingProfileName,
          options
        );
      }
    };
  }

  private async *listByBillingProfilePagingPage(
    billingAccountName: string,
    billingProfileName: string,
    options?: BillingPermissionsListByBillingProfileOptionalParams
  ): AsyncIterableIterator<BillingPermissionsProperties[]> {
    let result = await this._listByBillingProfile(
      billingAccountName,
      billingProfileName,
      options
    );
    yield result.value || [];
    let continuationToken = result.nextLink;
    while (continuationToken) {
      result = await this._listByBillingProfileNext(
        billingAccountName,
        billingProfileName,
        continuationToken,
        options
      );
      continuationToken = result.nextLink;
      yield result.value || [];
    }
  }

  private async *listByBillingProfilePagingAll(
    billingAccountName: string,
    billingProfileName: string,
    options?: BillingPermissionsListByBillingProfileOptionalParams
  ): AsyncIterableIterator<BillingPermissionsProperties> {
    for await (const page of this.listByBillingProfilePagingPage(
      billingAccountName,
      billingProfileName,
      options
    )) {
      yield* page;
    }
  }

  /**
   * Lists the billing permissions the caller has for a customer.
   * @param billingAccountName The ID that uniquely identifies a billing account.
   * @param customerName The ID that uniquely identifies a customer.
   * @param options The options parameters.
   */
  private _listByCustomer(
    billingAccountName: string,
    customerName: string,
    options?: BillingPermissionsListByCustomerOptionalParams
  ): Promise<BillingPermissionsListByCustomerResponse> {
    return this.client.sendOperationRequest(
      { billingAccountName, customerName, options },
      listByCustomerOperationSpec
    );
  }

  /**
   * Lists the billing permissions the caller has on a billing account.
   * @param billingAccountName The ID that uniquely identifies a billing account.
   * @param options The options parameters.
   */
  private _listByBillingAccount(
    billingAccountName: string,
    options?: BillingPermissionsListByBillingAccountOptionalParams
  ): Promise<BillingPermissionsListByBillingAccountResponse> {
    return this.client.sendOperationRequest(
      { billingAccountName, options },
      listByBillingAccountOperationSpec
    );
  }

  /**
   * Lists the billing permissions the caller has on an invoice section.
   * @param billingAccountName The ID that uniquely identifies a billing account.
   * @param billingProfileName The ID that uniquely identifies a billing profile.
   * @param invoiceSectionName The ID that uniquely identifies an invoice section.
   * @param options The options parameters.
   */
  private _listByInvoiceSections(
    billingAccountName: string,
    billingProfileName: string,
    invoiceSectionName: string,
    options?: BillingPermissionsListByInvoiceSectionsOptionalParams
  ): Promise<BillingPermissionsListByInvoiceSectionsResponse> {
    return this.client.sendOperationRequest(
      { billingAccountName, billingProfileName, invoiceSectionName, options },
      listByInvoiceSectionsOperationSpec
    );
  }

  /**
   * Lists the billing permissions the caller has on a billing profile.
   * @param billingAccountName The ID that uniquely identifies a billing account.
   * @param billingProfileName The ID that uniquely identifies a billing profile.
   * @param options The options parameters.
   */
  private _listByBillingProfile(
    billingAccountName: string,
    billingProfileName: string,
    options?: BillingPermissionsListByBillingProfileOptionalParams
  ): Promise<BillingPermissionsListByBillingProfileResponse> {
    return this.client.sendOperationRequest(
      { billingAccountName, billingProfileName, options },
      listByBillingProfileOperationSpec
    );
  }

  /**
   * ListByCustomerNext
   * @param billingAccountName The ID that uniquely identifies a billing account.
   * @param customerName The ID that uniquely identifies a customer.
   * @param nextLink The nextLink from the previous successful call to the ListByCustomer method.
   * @param options The options parameters.
   */
  private _listByCustomerNext(
    billingAccountName: string,
    customerName: string,
    nextLink: string,
    options?: BillingPermissionsListByCustomerNextOptionalParams
  ): Promise<BillingPermissionsListByCustomerNextResponse> {
    return this.client.sendOperationRequest(
      { billingAccountName, customerName, nextLink, options },
      listByCustomerNextOperationSpec
    );
  }

  /**
   * ListByBillingAccountNext
   * @param billingAccountName The ID that uniquely identifies a billing account.
   * @param nextLink The nextLink from the previous successful call to the ListByBillingAccount method.
   * @param options The options parameters.
   */
  private _listByBillingAccountNext(
    billingAccountName: string,
    nextLink: string,
    options?: BillingPermissionsListByBillingAccountNextOptionalParams
  ): Promise<BillingPermissionsListByBillingAccountNextResponse> {
    return this.client.sendOperationRequest(
      { billingAccountName, nextLink, options },
      listByBillingAccountNextOperationSpec
    );
  }

  /**
   * ListByInvoiceSectionsNext
   * @param billingAccountName The ID that uniquely identifies a billing account.
   * @param billingProfileName The ID that uniquely identifies a billing profile.
   * @param invoiceSectionName The ID that uniquely identifies an invoice section.
   * @param nextLink The nextLink from the previous successful call to the ListByInvoiceSections method.
   * @param options The options parameters.
   */
  private _listByInvoiceSectionsNext(
    billingAccountName: string,
    billingProfileName: string,
    invoiceSectionName: string,
    nextLink: string,
    options?: BillingPermissionsListByInvoiceSectionsNextOptionalParams
  ): Promise<BillingPermissionsListByInvoiceSectionsNextResponse> {
    return this.client.sendOperationRequest(
      {
        billingAccountName,
        billingProfileName,
        invoiceSectionName,
        nextLink,
        options
      },
      listByInvoiceSectionsNextOperationSpec
    );
  }

  /**
   * ListByBillingProfileNext
   * @param billingAccountName The ID that uniquely identifies a billing account.
   * @param billingProfileName The ID that uniquely identifies a billing profile.
   * @param nextLink The nextLink from the previous successful call to the ListByBillingProfile method.
   * @param options The options parameters.
   */
  private _listByBillingProfileNext(
    billingAccountName: string,
    billingProfileName: string,
    nextLink: string,
    options?: BillingPermissionsListByBillingProfileNextOptionalParams
  ): Promise<BillingPermissionsListByBillingProfileNextResponse> {
    return this.client.sendOperationRequest(
      { billingAccountName, billingProfileName, nextLink, options },
      listByBillingProfileNextOperationSpec
    );
  }
}
// Operation Specifications
const serializer = coreClient.createSerializer(Mappers, /* isXml */ false);

const listByCustomerOperationSpec: coreClient.OperationSpec = {
  path:
    "/providers/Microsoft.Billing/billingAccounts/{billingAccountName}/customers/{customerName}/billingPermissions",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.BillingPermissionsListResult
    },
    default: {
      bodyMapper: Mappers.ErrorResponse
    }
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.billingAccountName,
    Parameters.customerName
  ],
  headerParameters: [Parameters.accept],
  serializer
};
const listByBillingAccountOperationSpec: coreClient.OperationSpec = {
  path:
    "/providers/Microsoft.Billing/billingAccounts/{billingAccountName}/billingPermissions",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.BillingPermissionsListResult
    },
    default: {
      bodyMapper: Mappers.ErrorResponse
    }
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [Parameters.$host, Parameters.billingAccountName],
  headerParameters: [Parameters.accept],
  serializer
};
const listByInvoiceSectionsOperationSpec: coreClient.OperationSpec = {
  path:
    "/providers/Microsoft.Billing/billingAccounts/{billingAccountName}/billingProfiles/{billingProfileName}/invoiceSections/{invoiceSectionName}/billingPermissions",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.BillingPermissionsListResult
    },
    default: {
      bodyMapper: Mappers.ErrorResponse
    }
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.billingAccountName,
    Parameters.billingProfileName,
    Parameters.invoiceSectionName
  ],
  headerParameters: [Parameters.accept],
  serializer
};
const listByBillingProfileOperationSpec: coreClient.OperationSpec = {
  path:
    "/providers/Microsoft.Billing/billingAccounts/{billingAccountName}/billingProfiles/{billingProfileName}/billingPermissions",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.BillingPermissionsListResult
    },
    default: {
      bodyMapper: Mappers.ErrorResponse
    }
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.billingAccountName,
    Parameters.billingProfileName
  ],
  headerParameters: [Parameters.accept],
  serializer
};
const listByCustomerNextOperationSpec: coreClient.OperationSpec = {
  path: "{nextLink}",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.BillingPermissionsListResult
    },
    default: {
      bodyMapper: Mappers.ErrorResponse
    }
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.billingAccountName,
    Parameters.nextLink,
    Parameters.customerName
  ],
  headerParameters: [Parameters.accept],
  serializer
};
const listByBillingAccountNextOperationSpec: coreClient.OperationSpec = {
  path: "{nextLink}",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.BillingPermissionsListResult
    },
    default: {
      bodyMapper: Mappers.ErrorResponse
    }
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.billingAccountName,
    Parameters.nextLink
  ],
  headerParameters: [Parameters.accept],
  serializer
};
const listByInvoiceSectionsNextOperationSpec: coreClient.OperationSpec = {
  path: "{nextLink}",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.BillingPermissionsListResult
    },
    default: {
      bodyMapper: Mappers.ErrorResponse
    }
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.billingAccountName,
    Parameters.nextLink,
    Parameters.billingProfileName,
    Parameters.invoiceSectionName
  ],
  headerParameters: [Parameters.accept],
  serializer
};
const listByBillingProfileNextOperationSpec: coreClient.OperationSpec = {
  path: "{nextLink}",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.BillingPermissionsListResult
    },
    default: {
      bodyMapper: Mappers.ErrorResponse
    }
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.billingAccountName,
    Parameters.nextLink,
    Parameters.billingProfileName
  ],
  headerParameters: [Parameters.accept],
  serializer
};
