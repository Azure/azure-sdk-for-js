/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */

import { PagedAsyncIterableIterator, PageSettings } from "@azure/core-paging";
import { setContinuationToken } from "../pagingHelper";
import { RecipientTransfers } from "../operationsInterfaces";
import * as coreClient from "@azure/core-client";
import * as Mappers from "../models/mappers";
import * as Parameters from "../models/parameters";
import { BillingManagementClient } from "../billingManagementClient";
import {
  RecipientTransferDetails,
  RecipientTransfersListNextOptionalParams,
  RecipientTransfersListOptionalParams,
  RecipientTransfersListResponse,
  AcceptTransferRequest,
  RecipientTransfersAcceptOptionalParams,
  RecipientTransfersAcceptResponse,
  RecipientTransfersValidateOptionalParams,
  RecipientTransfersValidateResponse,
  RecipientTransfersDeclineOptionalParams,
  RecipientTransfersDeclineResponse,
  RecipientTransfersGetOptionalParams,
  RecipientTransfersGetResponse,
  RecipientTransfersListNextResponse,
} from "../models";

/// <reference lib="esnext.asynciterable" />
/** Class containing RecipientTransfers operations. */
export class RecipientTransfersImpl implements RecipientTransfers {
  private readonly client: BillingManagementClient;

  /**
   * Initialize a new instance of the class RecipientTransfers class.
   * @param client Reference to the service client
   */
  constructor(client: BillingManagementClient) {
    this.client = client;
  }

  /**
   * Lists the transfer requests received by the caller.
   * @param options The options parameters.
   */
  public list(
    options?: RecipientTransfersListOptionalParams,
  ): PagedAsyncIterableIterator<RecipientTransferDetails> {
    const iter = this.listPagingAll(options);
    return {
      next() {
        return iter.next();
      },
      [Symbol.asyncIterator]() {
        return this;
      },
      byPage: (settings?: PageSettings) => {
        if (settings?.maxPageSize) {
          throw new Error("maxPageSize is not supported by this operation.");
        }
        return this.listPagingPage(options, settings);
      },
    };
  }

  private async *listPagingPage(
    options?: RecipientTransfersListOptionalParams,
    settings?: PageSettings,
  ): AsyncIterableIterator<RecipientTransferDetails[]> {
    let result: RecipientTransfersListResponse;
    let continuationToken = settings?.continuationToken;
    if (!continuationToken) {
      result = await this._list(options);
      let page = result.value || [];
      continuationToken = result.nextLink;
      setContinuationToken(page, continuationToken);
      yield page;
    }
    while (continuationToken) {
      result = await this._listNext(continuationToken, options);
      continuationToken = result.nextLink;
      let page = result.value || [];
      setContinuationToken(page, continuationToken);
      yield page;
    }
  }

  private async *listPagingAll(
    options?: RecipientTransfersListOptionalParams,
  ): AsyncIterableIterator<RecipientTransferDetails> {
    for await (const page of this.listPagingPage(options)) {
      yield* page;
    }
  }

  /**
   * Accepts a transfer request.
   * @param transferName The ID that uniquely identifies a transfer request.
   * @param parameters Request parameters that are provided to the accept transfer operation.
   * @param options The options parameters.
   */
  accept(
    transferName: string,
    parameters: AcceptTransferRequest,
    options?: RecipientTransfersAcceptOptionalParams,
  ): Promise<RecipientTransfersAcceptResponse> {
    return this.client.sendOperationRequest(
      { transferName, parameters, options },
      acceptOperationSpec,
    );
  }

  /**
   * Validates if a subscription or a reservation can be transferred. Use this operation to validate your
   * subscriptions or reservation before using the accept transfer operation.
   * @param transferName The ID that uniquely identifies a transfer request.
   * @param parameters Request parameters that are provided to the validate transfer operation.
   * @param options The options parameters.
   */
  validate(
    transferName: string,
    parameters: AcceptTransferRequest,
    options?: RecipientTransfersValidateOptionalParams,
  ): Promise<RecipientTransfersValidateResponse> {
    return this.client.sendOperationRequest(
      { transferName, parameters, options },
      validateOperationSpec,
    );
  }

  /**
   * Declines a transfer request.
   * @param transferName The ID that uniquely identifies a transfer request.
   * @param options The options parameters.
   */
  decline(
    transferName: string,
    options?: RecipientTransfersDeclineOptionalParams,
  ): Promise<RecipientTransfersDeclineResponse> {
    return this.client.sendOperationRequest(
      { transferName, options },
      declineOperationSpec,
    );
  }

  /**
   * Gets a transfer request by ID. The caller must be the recipient of the transfer request.
   * @param transferName The ID that uniquely identifies a transfer request.
   * @param options The options parameters.
   */
  get(
    transferName: string,
    options?: RecipientTransfersGetOptionalParams,
  ): Promise<RecipientTransfersGetResponse> {
    return this.client.sendOperationRequest(
      { transferName, options },
      getOperationSpec,
    );
  }

  /**
   * Lists the transfer requests received by the caller.
   * @param options The options parameters.
   */
  private _list(
    options?: RecipientTransfersListOptionalParams,
  ): Promise<RecipientTransfersListResponse> {
    return this.client.sendOperationRequest({ options }, listOperationSpec);
  }

  /**
   * ListNext
   * @param nextLink The nextLink from the previous successful call to the List method.
   * @param options The options parameters.
   */
  private _listNext(
    nextLink: string,
    options?: RecipientTransfersListNextOptionalParams,
  ): Promise<RecipientTransfersListNextResponse> {
    return this.client.sendOperationRequest(
      { nextLink, options },
      listNextOperationSpec,
    );
  }
}
// Operation Specifications
const serializer = coreClient.createSerializer(Mappers, /* isXml */ false);

const acceptOperationSpec: coreClient.OperationSpec = {
  path: "/providers/Microsoft.Billing/transfers/{transferName}/accept",
  httpMethod: "POST",
  responses: {
    200: {
      bodyMapper: Mappers.RecipientTransferDetails,
    },
    default: {
      bodyMapper: Mappers.ErrorResponse,
    },
  },
  requestBody: Parameters.parameters26,
  queryParameters: [Parameters.apiVersion],
  urlParameters: [Parameters.$host, Parameters.transferName],
  headerParameters: [Parameters.accept, Parameters.contentType],
  mediaType: "json",
  serializer,
};
const validateOperationSpec: coreClient.OperationSpec = {
  path: "/providers/Microsoft.Billing/transfers/{transferName}/validate",
  httpMethod: "POST",
  responses: {
    200: {
      bodyMapper: Mappers.ValidateTransferListResponse,
    },
    default: {
      bodyMapper: Mappers.ErrorResponse,
    },
  },
  requestBody: Parameters.parameters26,
  queryParameters: [Parameters.apiVersion],
  urlParameters: [Parameters.$host, Parameters.transferName],
  headerParameters: [Parameters.accept, Parameters.contentType],
  mediaType: "json",
  serializer,
};
const declineOperationSpec: coreClient.OperationSpec = {
  path: "/providers/Microsoft.Billing/transfers/{transferName}/decline",
  httpMethod: "POST",
  responses: {
    200: {
      bodyMapper: Mappers.RecipientTransferDetails,
    },
    default: {
      bodyMapper: Mappers.ErrorResponse,
    },
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [Parameters.$host, Parameters.transferName],
  headerParameters: [Parameters.accept],
  serializer,
};
const getOperationSpec: coreClient.OperationSpec = {
  path: "/providers/Microsoft.Billing/transfers/{transferName}",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.RecipientTransferDetails,
    },
    default: {
      bodyMapper: Mappers.ErrorResponse,
    },
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [Parameters.$host, Parameters.transferName],
  headerParameters: [Parameters.accept],
  serializer,
};
const listOperationSpec: coreClient.OperationSpec = {
  path: "/providers/Microsoft.Billing/transfers",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.RecipientTransferDetailsListResult,
    },
    default: {
      bodyMapper: Mappers.ErrorResponse,
    },
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [Parameters.$host],
  headerParameters: [Parameters.accept],
  serializer,
};
const listNextOperationSpec: coreClient.OperationSpec = {
  path: "{nextLink}",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.RecipientTransferDetailsListResult,
    },
    default: {
      bodyMapper: Mappers.ErrorResponse,
    },
  },
  urlParameters: [Parameters.$host, Parameters.nextLink],
  headerParameters: [Parameters.accept],
  serializer,
};
