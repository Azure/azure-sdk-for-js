/*
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is
 * regenerated.
 */

import * as msRest from "@azure/ms-rest-js";
import * as Models from "../models";
import * as Mappers from "../models/recipientTransfersMappers";
import * as Parameters from "../models/parameters";
import { BillingManagementClientContext } from "../billingManagementClientContext";

/** Class representing a RecipientTransfers. */
export class RecipientTransfers {
  private readonly client: BillingManagementClientContext;

  /**
   * Create a RecipientTransfers.
   * @param {BillingManagementClientContext} client Reference to the service client.
   */
  constructor(client: BillingManagementClientContext) {
    this.client = client;
  }

  /**
   * @summary Accepts the transfer with given transfer Id.
   * @param transferName Transfer Name.
   * @param [options] The optional parameters
   * @returns Promise<Models.RecipientTransfersAcceptResponse>
   */
  accept(transferName: string, options?: Models.RecipientTransfersAcceptOptionalParams): Promise<Models.RecipientTransfersAcceptResponse>;
  /**
   * @param transferName Transfer Name.
   * @param callback The callback
   */
  accept(transferName: string, callback: msRest.ServiceCallback<Models.RecipientTransferDetails>): void;
  /**
   * @param transferName Transfer Name.
   * @param options The optional parameters
   * @param callback The callback
   */
  accept(transferName: string, options: Models.RecipientTransfersAcceptOptionalParams, callback: msRest.ServiceCallback<Models.RecipientTransferDetails>): void;
  accept(transferName: string, options?: Models.RecipientTransfersAcceptOptionalParams | msRest.ServiceCallback<Models.RecipientTransferDetails>, callback?: msRest.ServiceCallback<Models.RecipientTransferDetails>): Promise<Models.RecipientTransfersAcceptResponse> {
    return this.client.sendOperationRequest(
      {
        transferName,
        options
      },
      acceptOperationSpec,
      callback) as Promise<Models.RecipientTransfersAcceptResponse>;
  }

  /**
   * @summary Validates if the products can be transferred in the context of the given transfer name.
   * @param transferName Transfer Name.
   * @param [options] The optional parameters
   * @returns Promise<Models.RecipientTransfersValidateResponse>
   */
  validate(transferName: string, options?: Models.RecipientTransfersValidateOptionalParams): Promise<Models.RecipientTransfersValidateResponse>;
  /**
   * @param transferName Transfer Name.
   * @param callback The callback
   */
  validate(transferName: string, callback: msRest.ServiceCallback<Models.ValidateTransferListResponse>): void;
  /**
   * @param transferName Transfer Name.
   * @param options The optional parameters
   * @param callback The callback
   */
  validate(transferName: string, options: Models.RecipientTransfersValidateOptionalParams, callback: msRest.ServiceCallback<Models.ValidateTransferListResponse>): void;
  validate(transferName: string, options?: Models.RecipientTransfersValidateOptionalParams | msRest.ServiceCallback<Models.ValidateTransferListResponse>, callback?: msRest.ServiceCallback<Models.ValidateTransferListResponse>): Promise<Models.RecipientTransfersValidateResponse> {
    return this.client.sendOperationRequest(
      {
        transferName,
        options
      },
      validateOperationSpec,
      callback) as Promise<Models.RecipientTransfersValidateResponse>;
  }

  /**
   * @summary Declines the transfer with given transfer Id.
   * @param transferName Transfer Name.
   * @param [options] The optional parameters
   * @returns Promise<Models.RecipientTransfersDeclineResponse>
   */
  decline(transferName: string, options?: msRest.RequestOptionsBase): Promise<Models.RecipientTransfersDeclineResponse>;
  /**
   * @param transferName Transfer Name.
   * @param callback The callback
   */
  decline(transferName: string, callback: msRest.ServiceCallback<Models.RecipientTransferDetails>): void;
  /**
   * @param transferName Transfer Name.
   * @param options The optional parameters
   * @param callback The callback
   */
  decline(transferName: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.RecipientTransferDetails>): void;
  decline(transferName: string, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<Models.RecipientTransferDetails>, callback?: msRest.ServiceCallback<Models.RecipientTransferDetails>): Promise<Models.RecipientTransfersDeclineResponse> {
    return this.client.sendOperationRequest(
      {
        transferName,
        options
      },
      declineOperationSpec,
      callback) as Promise<Models.RecipientTransfersDeclineResponse>;
  }

  /**
   * @summary Gets the transfer with given transfer Id.
   * @param transferName Transfer Name.
   * @param [options] The optional parameters
   * @returns Promise<Models.RecipientTransfersGetResponse>
   */
  get(transferName: string, options?: msRest.RequestOptionsBase): Promise<Models.RecipientTransfersGetResponse>;
  /**
   * @param transferName Transfer Name.
   * @param callback The callback
   */
  get(transferName: string, callback: msRest.ServiceCallback<Models.RecipientTransferDetails>): void;
  /**
   * @param transferName Transfer Name.
   * @param options The optional parameters
   * @param callback The callback
   */
  get(transferName: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.RecipientTransferDetails>): void;
  get(transferName: string, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<Models.RecipientTransferDetails>, callback?: msRest.ServiceCallback<Models.RecipientTransferDetails>): Promise<Models.RecipientTransfersGetResponse> {
    return this.client.sendOperationRequest(
      {
        transferName,
        options
      },
      getOperationSpec,
      callback) as Promise<Models.RecipientTransfersGetResponse>;
  }

  /**
   * @summary Lists the transfers received by caller.
   * @param [options] The optional parameters
   * @returns Promise<Models.RecipientTransfersListResponse>
   */
  list(options?: msRest.RequestOptionsBase): Promise<Models.RecipientTransfersListResponse>;
  /**
   * @param callback The callback
   */
  list(callback: msRest.ServiceCallback<Models.RecipientTransferDetailsListResult>): void;
  /**
   * @param options The optional parameters
   * @param callback The callback
   */
  list(options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.RecipientTransferDetailsListResult>): void;
  list(options?: msRest.RequestOptionsBase | msRest.ServiceCallback<Models.RecipientTransferDetailsListResult>, callback?: msRest.ServiceCallback<Models.RecipientTransferDetailsListResult>): Promise<Models.RecipientTransfersListResponse> {
    return this.client.sendOperationRequest(
      {
        options
      },
      listOperationSpec,
      callback) as Promise<Models.RecipientTransfersListResponse>;
  }

  /**
   * @summary Lists the transfers received by caller.
   * @param nextPageLink The NextLink from the previous successful call to List operation.
   * @param [options] The optional parameters
   * @returns Promise<Models.RecipientTransfersListNextResponse>
   */
  listNext(nextPageLink: string, options?: msRest.RequestOptionsBase): Promise<Models.RecipientTransfersListNextResponse>;
  /**
   * @param nextPageLink The NextLink from the previous successful call to List operation.
   * @param callback The callback
   */
  listNext(nextPageLink: string, callback: msRest.ServiceCallback<Models.RecipientTransferDetailsListResult>): void;
  /**
   * @param nextPageLink The NextLink from the previous successful call to List operation.
   * @param options The optional parameters
   * @param callback The callback
   */
  listNext(nextPageLink: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.RecipientTransferDetailsListResult>): void;
  listNext(nextPageLink: string, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<Models.RecipientTransferDetailsListResult>, callback?: msRest.ServiceCallback<Models.RecipientTransferDetailsListResult>): Promise<Models.RecipientTransfersListNextResponse> {
    return this.client.sendOperationRequest(
      {
        nextPageLink,
        options
      },
      listNextOperationSpec,
      callback) as Promise<Models.RecipientTransfersListNextResponse>;
  }
}

// Operation Specifications
const serializer = new msRest.Serializer(Mappers);
const acceptOperationSpec: msRest.OperationSpec = {
  httpMethod: "POST",
  path: "providers/Microsoft.Billing/transfers/{transferName}/acceptTransfer",
  urlParameters: [
    Parameters.transferName
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  requestBody: {
    parameterPath: {
      productDetails: [
        "options",
        "productDetails"
      ]
    },
    mapper: {
      ...Mappers.AcceptTransferRequest,
      required: true
    }
  },
  responses: {
    200: {
      bodyMapper: Mappers.RecipientTransferDetails
    },
    default: {
      bodyMapper: Mappers.ErrorResponse
    }
  },
  serializer
};

const validateOperationSpec: msRest.OperationSpec = {
  httpMethod: "POST",
  path: "providers/Microsoft.Billing/transfers/{transferName}/validateTransfer",
  urlParameters: [
    Parameters.transferName
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  requestBody: {
    parameterPath: {
      productDetails: [
        "options",
        "productDetails"
      ]
    },
    mapper: {
      ...Mappers.AcceptTransferRequest,
      required: true
    }
  },
  responses: {
    200: {
      bodyMapper: Mappers.ValidateTransferListResponse
    },
    default: {
      bodyMapper: Mappers.ErrorResponse
    }
  },
  serializer
};

const declineOperationSpec: msRest.OperationSpec = {
  httpMethod: "POST",
  path: "providers/Microsoft.Billing/transfers/{transferName}/declineTransfer",
  urlParameters: [
    Parameters.transferName
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    200: {
      bodyMapper: Mappers.RecipientTransferDetails
    },
    default: {
      bodyMapper: Mappers.ErrorResponse
    }
  },
  serializer
};

const getOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "providers/Microsoft.Billing/transfers/{transferName}",
  urlParameters: [
    Parameters.transferName
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    200: {
      bodyMapper: Mappers.RecipientTransferDetails
    },
    default: {
      bodyMapper: Mappers.ErrorResponse
    }
  },
  serializer
};

const listOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "providers/Microsoft.Billing/transfers",
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    200: {
      bodyMapper: Mappers.RecipientTransferDetailsListResult
    },
    default: {
      bodyMapper: Mappers.ErrorResponse
    }
  },
  serializer
};

const listNextOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  baseUrl: "https://management.azure.com",
  path: "{nextLink}",
  urlParameters: [
    Parameters.nextPageLink
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    200: {
      bodyMapper: Mappers.RecipientTransferDetailsListResult
    },
    default: {
      bodyMapper: Mappers.ErrorResponse
    }
  },
  serializer
};
