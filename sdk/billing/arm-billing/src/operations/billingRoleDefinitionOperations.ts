/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */

import { PagedAsyncIterableIterator, PageSettings } from "@azure/core-paging";
import { setContinuationToken } from "../pagingHelper";
import { BillingRoleDefinitionOperations } from "../operationsInterfaces";
import * as coreClient from "@azure/core-client";
import * as Mappers from "../models/mappers";
import * as Parameters from "../models/parameters";
import { BillingManagementClient } from "../billingManagementClient";
import {
  BillingRoleDefinition,
  BillingRoleDefinitionListByBillingProfileNextOptionalParams,
  BillingRoleDefinitionListByBillingProfileOptionalParams,
  BillingRoleDefinitionListByBillingProfileResponse,
  BillingRoleDefinitionListByCustomerNextOptionalParams,
  BillingRoleDefinitionListByCustomerOptionalParams,
  BillingRoleDefinitionListByCustomerResponse,
  BillingRoleDefinitionListByInvoiceSectionNextOptionalParams,
  BillingRoleDefinitionListByInvoiceSectionOptionalParams,
  BillingRoleDefinitionListByInvoiceSectionResponse,
  BillingRoleDefinitionListByBillingAccountNextOptionalParams,
  BillingRoleDefinitionListByBillingAccountOptionalParams,
  BillingRoleDefinitionListByBillingAccountResponse,
  BillingRoleDefinitionListByDepartmentNextOptionalParams,
  BillingRoleDefinitionListByDepartmentOptionalParams,
  BillingRoleDefinitionListByDepartmentResponse,
  BillingRoleDefinitionListByEnrollmentAccountNextOptionalParams,
  BillingRoleDefinitionListByEnrollmentAccountOptionalParams,
  BillingRoleDefinitionListByEnrollmentAccountResponse,
  BillingRoleDefinitionGetByBillingProfileOptionalParams,
  BillingRoleDefinitionGetByBillingProfileResponse,
  BillingRoleDefinitionGetByCustomerOptionalParams,
  BillingRoleDefinitionGetByCustomerResponse,
  BillingRoleDefinitionGetByInvoiceSectionOptionalParams,
  BillingRoleDefinitionGetByInvoiceSectionResponse,
  BillingRoleDefinitionGetByBillingAccountOptionalParams,
  BillingRoleDefinitionGetByBillingAccountResponse,
  BillingRoleDefinitionGetByDepartmentOptionalParams,
  BillingRoleDefinitionGetByDepartmentResponse,
  BillingRoleDefinitionGetByEnrollmentAccountOptionalParams,
  BillingRoleDefinitionGetByEnrollmentAccountResponse,
  BillingRoleDefinitionListByBillingProfileNextResponse,
  BillingRoleDefinitionListByCustomerNextResponse,
  BillingRoleDefinitionListByInvoiceSectionNextResponse,
  BillingRoleDefinitionListByBillingAccountNextResponse,
  BillingRoleDefinitionListByDepartmentNextResponse,
  BillingRoleDefinitionListByEnrollmentAccountNextResponse,
} from "../models";

/// <reference lib="esnext.asynciterable" />
/** Class containing BillingRoleDefinitionOperations operations. */
export class BillingRoleDefinitionOperationsImpl
  implements BillingRoleDefinitionOperations
{
  private readonly client: BillingManagementClient;

  /**
   * Initialize a new instance of the class BillingRoleDefinitionOperations class.
   * @param client Reference to the service client
   */
  constructor(client: BillingManagementClient) {
    this.client = client;
  }

  /**
   * Lists the role definitions for a billing profile. The operation is supported for billing accounts
   * with agreement type Microsoft Partner Agreement, Microsoft Customer Agreement or Enterprise
   * Agreement.
   * @param billingAccountName The ID that uniquely identifies a billing account.
   * @param billingProfileName The ID that uniquely identifies a billing profile.
   * @param options The options parameters.
   */
  public listByBillingProfile(
    billingAccountName: string,
    billingProfileName: string,
    options?: BillingRoleDefinitionListByBillingProfileOptionalParams,
  ): PagedAsyncIterableIterator<BillingRoleDefinition> {
    const iter = this.listByBillingProfilePagingAll(
      billingAccountName,
      billingProfileName,
      options,
    );
    return {
      next() {
        return iter.next();
      },
      [Symbol.asyncIterator]() {
        return this;
      },
      byPage: (settings?: PageSettings) => {
        if (settings?.maxPageSize) {
          throw new Error("maxPageSize is not supported by this operation.");
        }
        return this.listByBillingProfilePagingPage(
          billingAccountName,
          billingProfileName,
          options,
          settings,
        );
      },
    };
  }

  private async *listByBillingProfilePagingPage(
    billingAccountName: string,
    billingProfileName: string,
    options?: BillingRoleDefinitionListByBillingProfileOptionalParams,
    settings?: PageSettings,
  ): AsyncIterableIterator<BillingRoleDefinition[]> {
    let result: BillingRoleDefinitionListByBillingProfileResponse;
    let continuationToken = settings?.continuationToken;
    if (!continuationToken) {
      result = await this._listByBillingProfile(
        billingAccountName,
        billingProfileName,
        options,
      );
      let page = result.value || [];
      continuationToken = result.nextLink;
      setContinuationToken(page, continuationToken);
      yield page;
    }
    while (continuationToken) {
      result = await this._listByBillingProfileNext(
        billingAccountName,
        billingProfileName,
        continuationToken,
        options,
      );
      continuationToken = result.nextLink;
      let page = result.value || [];
      setContinuationToken(page, continuationToken);
      yield page;
    }
  }

  private async *listByBillingProfilePagingAll(
    billingAccountName: string,
    billingProfileName: string,
    options?: BillingRoleDefinitionListByBillingProfileOptionalParams,
  ): AsyncIterableIterator<BillingRoleDefinition> {
    for await (const page of this.listByBillingProfilePagingPage(
      billingAccountName,
      billingProfileName,
      options,
    )) {
      yield* page;
    }
  }

  /**
   * Lists the role definitions for a customer. The operation is supported for billing accounts with
   * agreement type Microsoft Partner Agreement.
   * @param billingAccountName The ID that uniquely identifies a billing account.
   * @param billingProfileName The ID that uniquely identifies a billing profile.
   * @param customerName The ID that uniquely identifies a customer.
   * @param options The options parameters.
   */
  public listByCustomer(
    billingAccountName: string,
    billingProfileName: string,
    customerName: string,
    options?: BillingRoleDefinitionListByCustomerOptionalParams,
  ): PagedAsyncIterableIterator<BillingRoleDefinition> {
    const iter = this.listByCustomerPagingAll(
      billingAccountName,
      billingProfileName,
      customerName,
      options,
    );
    return {
      next() {
        return iter.next();
      },
      [Symbol.asyncIterator]() {
        return this;
      },
      byPage: (settings?: PageSettings) => {
        if (settings?.maxPageSize) {
          throw new Error("maxPageSize is not supported by this operation.");
        }
        return this.listByCustomerPagingPage(
          billingAccountName,
          billingProfileName,
          customerName,
          options,
          settings,
        );
      },
    };
  }

  private async *listByCustomerPagingPage(
    billingAccountName: string,
    billingProfileName: string,
    customerName: string,
    options?: BillingRoleDefinitionListByCustomerOptionalParams,
    settings?: PageSettings,
  ): AsyncIterableIterator<BillingRoleDefinition[]> {
    let result: BillingRoleDefinitionListByCustomerResponse;
    let continuationToken = settings?.continuationToken;
    if (!continuationToken) {
      result = await this._listByCustomer(
        billingAccountName,
        billingProfileName,
        customerName,
        options,
      );
      let page = result.value || [];
      continuationToken = result.nextLink;
      setContinuationToken(page, continuationToken);
      yield page;
    }
    while (continuationToken) {
      result = await this._listByCustomerNext(
        billingAccountName,
        billingProfileName,
        customerName,
        continuationToken,
        options,
      );
      continuationToken = result.nextLink;
      let page = result.value || [];
      setContinuationToken(page, continuationToken);
      yield page;
    }
  }

  private async *listByCustomerPagingAll(
    billingAccountName: string,
    billingProfileName: string,
    customerName: string,
    options?: BillingRoleDefinitionListByCustomerOptionalParams,
  ): AsyncIterableIterator<BillingRoleDefinition> {
    for await (const page of this.listByCustomerPagingPage(
      billingAccountName,
      billingProfileName,
      customerName,
      options,
    )) {
      yield* page;
    }
  }

  /**
   * Lists the role definitions for an invoice section. The operation is supported for billing accounts
   * with agreement type Microsoft Partner Agreement or Microsoft Customer Agreement.
   * @param billingAccountName The ID that uniquely identifies a billing account.
   * @param billingProfileName The ID that uniquely identifies a billing profile.
   * @param invoiceSectionName The ID that uniquely identifies an invoice section.
   * @param options The options parameters.
   */
  public listByInvoiceSection(
    billingAccountName: string,
    billingProfileName: string,
    invoiceSectionName: string,
    options?: BillingRoleDefinitionListByInvoiceSectionOptionalParams,
  ): PagedAsyncIterableIterator<BillingRoleDefinition> {
    const iter = this.listByInvoiceSectionPagingAll(
      billingAccountName,
      billingProfileName,
      invoiceSectionName,
      options,
    );
    return {
      next() {
        return iter.next();
      },
      [Symbol.asyncIterator]() {
        return this;
      },
      byPage: (settings?: PageSettings) => {
        if (settings?.maxPageSize) {
          throw new Error("maxPageSize is not supported by this operation.");
        }
        return this.listByInvoiceSectionPagingPage(
          billingAccountName,
          billingProfileName,
          invoiceSectionName,
          options,
          settings,
        );
      },
    };
  }

  private async *listByInvoiceSectionPagingPage(
    billingAccountName: string,
    billingProfileName: string,
    invoiceSectionName: string,
    options?: BillingRoleDefinitionListByInvoiceSectionOptionalParams,
    settings?: PageSettings,
  ): AsyncIterableIterator<BillingRoleDefinition[]> {
    let result: BillingRoleDefinitionListByInvoiceSectionResponse;
    let continuationToken = settings?.continuationToken;
    if (!continuationToken) {
      result = await this._listByInvoiceSection(
        billingAccountName,
        billingProfileName,
        invoiceSectionName,
        options,
      );
      let page = result.value || [];
      continuationToken = result.nextLink;
      setContinuationToken(page, continuationToken);
      yield page;
    }
    while (continuationToken) {
      result = await this._listByInvoiceSectionNext(
        billingAccountName,
        billingProfileName,
        invoiceSectionName,
        continuationToken,
        options,
      );
      continuationToken = result.nextLink;
      let page = result.value || [];
      setContinuationToken(page, continuationToken);
      yield page;
    }
  }

  private async *listByInvoiceSectionPagingAll(
    billingAccountName: string,
    billingProfileName: string,
    invoiceSectionName: string,
    options?: BillingRoleDefinitionListByInvoiceSectionOptionalParams,
  ): AsyncIterableIterator<BillingRoleDefinition> {
    for await (const page of this.listByInvoiceSectionPagingPage(
      billingAccountName,
      billingProfileName,
      invoiceSectionName,
      options,
    )) {
      yield* page;
    }
  }

  /**
   * Lists the role definitions for a billing account. The operation is supported for billing accounts
   * with agreement type Microsoft Partner Agreement, Microsoft Customer Agreement or Enterprise
   * Agreement.
   * @param billingAccountName The ID that uniquely identifies a billing account.
   * @param options The options parameters.
   */
  public listByBillingAccount(
    billingAccountName: string,
    options?: BillingRoleDefinitionListByBillingAccountOptionalParams,
  ): PagedAsyncIterableIterator<BillingRoleDefinition> {
    const iter = this.listByBillingAccountPagingAll(
      billingAccountName,
      options,
    );
    return {
      next() {
        return iter.next();
      },
      [Symbol.asyncIterator]() {
        return this;
      },
      byPage: (settings?: PageSettings) => {
        if (settings?.maxPageSize) {
          throw new Error("maxPageSize is not supported by this operation.");
        }
        return this.listByBillingAccountPagingPage(
          billingAccountName,
          options,
          settings,
        );
      },
    };
  }

  private async *listByBillingAccountPagingPage(
    billingAccountName: string,
    options?: BillingRoleDefinitionListByBillingAccountOptionalParams,
    settings?: PageSettings,
  ): AsyncIterableIterator<BillingRoleDefinition[]> {
    let result: BillingRoleDefinitionListByBillingAccountResponse;
    let continuationToken = settings?.continuationToken;
    if (!continuationToken) {
      result = await this._listByBillingAccount(billingAccountName, options);
      let page = result.value || [];
      continuationToken = result.nextLink;
      setContinuationToken(page, continuationToken);
      yield page;
    }
    while (continuationToken) {
      result = await this._listByBillingAccountNext(
        billingAccountName,
        continuationToken,
        options,
      );
      continuationToken = result.nextLink;
      let page = result.value || [];
      setContinuationToken(page, continuationToken);
      yield page;
    }
  }

  private async *listByBillingAccountPagingAll(
    billingAccountName: string,
    options?: BillingRoleDefinitionListByBillingAccountOptionalParams,
  ): AsyncIterableIterator<BillingRoleDefinition> {
    for await (const page of this.listByBillingAccountPagingPage(
      billingAccountName,
      options,
    )) {
      yield* page;
    }
  }

  /**
   * List the definition for a department. The operation is supported for billing accounts with agreement
   * type Enterprise Agreement.
   * @param billingAccountName The ID that uniquely identifies a billing account.
   * @param departmentName The name of the department.
   * @param options The options parameters.
   */
  public listByDepartment(
    billingAccountName: string,
    departmentName: string,
    options?: BillingRoleDefinitionListByDepartmentOptionalParams,
  ): PagedAsyncIterableIterator<BillingRoleDefinition> {
    const iter = this.listByDepartmentPagingAll(
      billingAccountName,
      departmentName,
      options,
    );
    return {
      next() {
        return iter.next();
      },
      [Symbol.asyncIterator]() {
        return this;
      },
      byPage: (settings?: PageSettings) => {
        if (settings?.maxPageSize) {
          throw new Error("maxPageSize is not supported by this operation.");
        }
        return this.listByDepartmentPagingPage(
          billingAccountName,
          departmentName,
          options,
          settings,
        );
      },
    };
  }

  private async *listByDepartmentPagingPage(
    billingAccountName: string,
    departmentName: string,
    options?: BillingRoleDefinitionListByDepartmentOptionalParams,
    settings?: PageSettings,
  ): AsyncIterableIterator<BillingRoleDefinition[]> {
    let result: BillingRoleDefinitionListByDepartmentResponse;
    let continuationToken = settings?.continuationToken;
    if (!continuationToken) {
      result = await this._listByDepartment(
        billingAccountName,
        departmentName,
        options,
      );
      let page = result.value || [];
      continuationToken = result.nextLink;
      setContinuationToken(page, continuationToken);
      yield page;
    }
    while (continuationToken) {
      result = await this._listByDepartmentNext(
        billingAccountName,
        departmentName,
        continuationToken,
        options,
      );
      continuationToken = result.nextLink;
      let page = result.value || [];
      setContinuationToken(page, continuationToken);
      yield page;
    }
  }

  private async *listByDepartmentPagingAll(
    billingAccountName: string,
    departmentName: string,
    options?: BillingRoleDefinitionListByDepartmentOptionalParams,
  ): AsyncIterableIterator<BillingRoleDefinition> {
    for await (const page of this.listByDepartmentPagingPage(
      billingAccountName,
      departmentName,
      options,
    )) {
      yield* page;
    }
  }

  /**
   * List the definition for an enrollment account. The operation is supported for billing accounts with
   * agreement type Enterprise Agreement.
   * @param billingAccountName The ID that uniquely identifies a billing account.
   * @param enrollmentAccountName The name of the enrollment account.
   * @param options The options parameters.
   */
  public listByEnrollmentAccount(
    billingAccountName: string,
    enrollmentAccountName: string,
    options?: BillingRoleDefinitionListByEnrollmentAccountOptionalParams,
  ): PagedAsyncIterableIterator<BillingRoleDefinition> {
    const iter = this.listByEnrollmentAccountPagingAll(
      billingAccountName,
      enrollmentAccountName,
      options,
    );
    return {
      next() {
        return iter.next();
      },
      [Symbol.asyncIterator]() {
        return this;
      },
      byPage: (settings?: PageSettings) => {
        if (settings?.maxPageSize) {
          throw new Error("maxPageSize is not supported by this operation.");
        }
        return this.listByEnrollmentAccountPagingPage(
          billingAccountName,
          enrollmentAccountName,
          options,
          settings,
        );
      },
    };
  }

  private async *listByEnrollmentAccountPagingPage(
    billingAccountName: string,
    enrollmentAccountName: string,
    options?: BillingRoleDefinitionListByEnrollmentAccountOptionalParams,
    settings?: PageSettings,
  ): AsyncIterableIterator<BillingRoleDefinition[]> {
    let result: BillingRoleDefinitionListByEnrollmentAccountResponse;
    let continuationToken = settings?.continuationToken;
    if (!continuationToken) {
      result = await this._listByEnrollmentAccount(
        billingAccountName,
        enrollmentAccountName,
        options,
      );
      let page = result.value || [];
      continuationToken = result.nextLink;
      setContinuationToken(page, continuationToken);
      yield page;
    }
    while (continuationToken) {
      result = await this._listByEnrollmentAccountNext(
        billingAccountName,
        enrollmentAccountName,
        continuationToken,
        options,
      );
      continuationToken = result.nextLink;
      let page = result.value || [];
      setContinuationToken(page, continuationToken);
      yield page;
    }
  }

  private async *listByEnrollmentAccountPagingAll(
    billingAccountName: string,
    enrollmentAccountName: string,
    options?: BillingRoleDefinitionListByEnrollmentAccountOptionalParams,
  ): AsyncIterableIterator<BillingRoleDefinition> {
    for await (const page of this.listByEnrollmentAccountPagingPage(
      billingAccountName,
      enrollmentAccountName,
      options,
    )) {
      yield* page;
    }
  }

  /**
   * Gets the definition for a role on a billing profile. The operation is supported for billing accounts
   * with agreement type Microsoft Partner Agreement or Microsoft Customer Agreement.
   * @param billingAccountName The ID that uniquely identifies a billing account.
   * @param billingProfileName The ID that uniquely identifies a billing profile.
   * @param roleDefinitionName The ID that uniquely identifies a role definition.
   * @param options The options parameters.
   */
  getByBillingProfile(
    billingAccountName: string,
    billingProfileName: string,
    roleDefinitionName: string,
    options?: BillingRoleDefinitionGetByBillingProfileOptionalParams,
  ): Promise<BillingRoleDefinitionGetByBillingProfileResponse> {
    return this.client.sendOperationRequest(
      { billingAccountName, billingProfileName, roleDefinitionName, options },
      getByBillingProfileOperationSpec,
    );
  }

  /**
   * Lists the role definitions for a billing profile. The operation is supported for billing accounts
   * with agreement type Microsoft Partner Agreement, Microsoft Customer Agreement or Enterprise
   * Agreement.
   * @param billingAccountName The ID that uniquely identifies a billing account.
   * @param billingProfileName The ID that uniquely identifies a billing profile.
   * @param options The options parameters.
   */
  private _listByBillingProfile(
    billingAccountName: string,
    billingProfileName: string,
    options?: BillingRoleDefinitionListByBillingProfileOptionalParams,
  ): Promise<BillingRoleDefinitionListByBillingProfileResponse> {
    return this.client.sendOperationRequest(
      { billingAccountName, billingProfileName, options },
      listByBillingProfileOperationSpec,
    );
  }

  /**
   * Gets the definition for a role on a customer. The operation is supported only for billing accounts
   * with agreement type Microsoft Partner Agreement.
   * @param billingAccountName The ID that uniquely identifies a billing account.
   * @param billingProfileName The ID that uniquely identifies a billing profile.
   * @param customerName The ID that uniquely identifies a customer.
   * @param roleDefinitionName The ID that uniquely identifies a role definition.
   * @param options The options parameters.
   */
  getByCustomer(
    billingAccountName: string,
    billingProfileName: string,
    customerName: string,
    roleDefinitionName: string,
    options?: BillingRoleDefinitionGetByCustomerOptionalParams,
  ): Promise<BillingRoleDefinitionGetByCustomerResponse> {
    return this.client.sendOperationRequest(
      {
        billingAccountName,
        billingProfileName,
        customerName,
        roleDefinitionName,
        options,
      },
      getByCustomerOperationSpec,
    );
  }

  /**
   * Lists the role definitions for a customer. The operation is supported for billing accounts with
   * agreement type Microsoft Partner Agreement.
   * @param billingAccountName The ID that uniquely identifies a billing account.
   * @param billingProfileName The ID that uniquely identifies a billing profile.
   * @param customerName The ID that uniquely identifies a customer.
   * @param options The options parameters.
   */
  private _listByCustomer(
    billingAccountName: string,
    billingProfileName: string,
    customerName: string,
    options?: BillingRoleDefinitionListByCustomerOptionalParams,
  ): Promise<BillingRoleDefinitionListByCustomerResponse> {
    return this.client.sendOperationRequest(
      { billingAccountName, billingProfileName, customerName, options },
      listByCustomerOperationSpec,
    );
  }

  /**
   * Gets the definition for a role on an invoice section. The operation is supported only for billing
   * accounts with agreement type Microsoft Customer Agreement.
   * @param billingAccountName The ID that uniquely identifies a billing account.
   * @param billingProfileName The ID that uniquely identifies a billing profile.
   * @param invoiceSectionName The ID that uniquely identifies an invoice section.
   * @param roleDefinitionName The ID that uniquely identifies a role definition.
   * @param options The options parameters.
   */
  getByInvoiceSection(
    billingAccountName: string,
    billingProfileName: string,
    invoiceSectionName: string,
    roleDefinitionName: string,
    options?: BillingRoleDefinitionGetByInvoiceSectionOptionalParams,
  ): Promise<BillingRoleDefinitionGetByInvoiceSectionResponse> {
    return this.client.sendOperationRequest(
      {
        billingAccountName,
        billingProfileName,
        invoiceSectionName,
        roleDefinitionName,
        options,
      },
      getByInvoiceSectionOperationSpec,
    );
  }

  /**
   * Lists the role definitions for an invoice section. The operation is supported for billing accounts
   * with agreement type Microsoft Partner Agreement or Microsoft Customer Agreement.
   * @param billingAccountName The ID that uniquely identifies a billing account.
   * @param billingProfileName The ID that uniquely identifies a billing profile.
   * @param invoiceSectionName The ID that uniquely identifies an invoice section.
   * @param options The options parameters.
   */
  private _listByInvoiceSection(
    billingAccountName: string,
    billingProfileName: string,
    invoiceSectionName: string,
    options?: BillingRoleDefinitionListByInvoiceSectionOptionalParams,
  ): Promise<BillingRoleDefinitionListByInvoiceSectionResponse> {
    return this.client.sendOperationRequest(
      { billingAccountName, billingProfileName, invoiceSectionName, options },
      listByInvoiceSectionOperationSpec,
    );
  }

  /**
   * Gets the definition for a role on a billing account. The operation is supported for billing accounts
   * with agreement type Microsoft Partner Agreement, Microsoft Customer Agreement or Enterprise
   * Agreement.
   * @param billingAccountName The ID that uniquely identifies a billing account.
   * @param roleDefinitionName The ID that uniquely identifies a role definition.
   * @param options The options parameters.
   */
  getByBillingAccount(
    billingAccountName: string,
    roleDefinitionName: string,
    options?: BillingRoleDefinitionGetByBillingAccountOptionalParams,
  ): Promise<BillingRoleDefinitionGetByBillingAccountResponse> {
    return this.client.sendOperationRequest(
      { billingAccountName, roleDefinitionName, options },
      getByBillingAccountOperationSpec,
    );
  }

  /**
   * Lists the role definitions for a billing account. The operation is supported for billing accounts
   * with agreement type Microsoft Partner Agreement, Microsoft Customer Agreement or Enterprise
   * Agreement.
   * @param billingAccountName The ID that uniquely identifies a billing account.
   * @param options The options parameters.
   */
  private _listByBillingAccount(
    billingAccountName: string,
    options?: BillingRoleDefinitionListByBillingAccountOptionalParams,
  ): Promise<BillingRoleDefinitionListByBillingAccountResponse> {
    return this.client.sendOperationRequest(
      { billingAccountName, options },
      listByBillingAccountOperationSpec,
    );
  }

  /**
   * Gets the definition for a role on a department. The operation is supported for billing accounts with
   * agreement type Enterprise Agreement.
   * @param billingAccountName The ID that uniquely identifies a billing account.
   * @param departmentName The name of the department.
   * @param roleDefinitionName The ID that uniquely identifies a role definition.
   * @param options The options parameters.
   */
  getByDepartment(
    billingAccountName: string,
    departmentName: string,
    roleDefinitionName: string,
    options?: BillingRoleDefinitionGetByDepartmentOptionalParams,
  ): Promise<BillingRoleDefinitionGetByDepartmentResponse> {
    return this.client.sendOperationRequest(
      { billingAccountName, departmentName, roleDefinitionName, options },
      getByDepartmentOperationSpec,
    );
  }

  /**
   * List the definition for a department. The operation is supported for billing accounts with agreement
   * type Enterprise Agreement.
   * @param billingAccountName The ID that uniquely identifies a billing account.
   * @param departmentName The name of the department.
   * @param options The options parameters.
   */
  private _listByDepartment(
    billingAccountName: string,
    departmentName: string,
    options?: BillingRoleDefinitionListByDepartmentOptionalParams,
  ): Promise<BillingRoleDefinitionListByDepartmentResponse> {
    return this.client.sendOperationRequest(
      { billingAccountName, departmentName, options },
      listByDepartmentOperationSpec,
    );
  }

  /**
   * Gets the definition for a role on an enrollment account. The operation is supported for billing
   * accounts with agreement type Enterprise Agreement.
   * @param billingAccountName The ID that uniquely identifies a billing account.
   * @param enrollmentAccountName The name of the enrollment account.
   * @param roleDefinitionName The ID that uniquely identifies a role definition.
   * @param options The options parameters.
   */
  getByEnrollmentAccount(
    billingAccountName: string,
    enrollmentAccountName: string,
    roleDefinitionName: string,
    options?: BillingRoleDefinitionGetByEnrollmentAccountOptionalParams,
  ): Promise<BillingRoleDefinitionGetByEnrollmentAccountResponse> {
    return this.client.sendOperationRequest(
      {
        billingAccountName,
        enrollmentAccountName,
        roleDefinitionName,
        options,
      },
      getByEnrollmentAccountOperationSpec,
    );
  }

  /**
   * List the definition for an enrollment account. The operation is supported for billing accounts with
   * agreement type Enterprise Agreement.
   * @param billingAccountName The ID that uniquely identifies a billing account.
   * @param enrollmentAccountName The name of the enrollment account.
   * @param options The options parameters.
   */
  private _listByEnrollmentAccount(
    billingAccountName: string,
    enrollmentAccountName: string,
    options?: BillingRoleDefinitionListByEnrollmentAccountOptionalParams,
  ): Promise<BillingRoleDefinitionListByEnrollmentAccountResponse> {
    return this.client.sendOperationRequest(
      { billingAccountName, enrollmentAccountName, options },
      listByEnrollmentAccountOperationSpec,
    );
  }

  /**
   * ListByBillingProfileNext
   * @param billingAccountName The ID that uniquely identifies a billing account.
   * @param billingProfileName The ID that uniquely identifies a billing profile.
   * @param nextLink The nextLink from the previous successful call to the ListByBillingProfile method.
   * @param options The options parameters.
   */
  private _listByBillingProfileNext(
    billingAccountName: string,
    billingProfileName: string,
    nextLink: string,
    options?: BillingRoleDefinitionListByBillingProfileNextOptionalParams,
  ): Promise<BillingRoleDefinitionListByBillingProfileNextResponse> {
    return this.client.sendOperationRequest(
      { billingAccountName, billingProfileName, nextLink, options },
      listByBillingProfileNextOperationSpec,
    );
  }

  /**
   * ListByCustomerNext
   * @param billingAccountName The ID that uniquely identifies a billing account.
   * @param billingProfileName The ID that uniquely identifies a billing profile.
   * @param customerName The ID that uniquely identifies a customer.
   * @param nextLink The nextLink from the previous successful call to the ListByCustomer method.
   * @param options The options parameters.
   */
  private _listByCustomerNext(
    billingAccountName: string,
    billingProfileName: string,
    customerName: string,
    nextLink: string,
    options?: BillingRoleDefinitionListByCustomerNextOptionalParams,
  ): Promise<BillingRoleDefinitionListByCustomerNextResponse> {
    return this.client.sendOperationRequest(
      {
        billingAccountName,
        billingProfileName,
        customerName,
        nextLink,
        options,
      },
      listByCustomerNextOperationSpec,
    );
  }

  /**
   * ListByInvoiceSectionNext
   * @param billingAccountName The ID that uniquely identifies a billing account.
   * @param billingProfileName The ID that uniquely identifies a billing profile.
   * @param invoiceSectionName The ID that uniquely identifies an invoice section.
   * @param nextLink The nextLink from the previous successful call to the ListByInvoiceSection method.
   * @param options The options parameters.
   */
  private _listByInvoiceSectionNext(
    billingAccountName: string,
    billingProfileName: string,
    invoiceSectionName: string,
    nextLink: string,
    options?: BillingRoleDefinitionListByInvoiceSectionNextOptionalParams,
  ): Promise<BillingRoleDefinitionListByInvoiceSectionNextResponse> {
    return this.client.sendOperationRequest(
      {
        billingAccountName,
        billingProfileName,
        invoiceSectionName,
        nextLink,
        options,
      },
      listByInvoiceSectionNextOperationSpec,
    );
  }

  /**
   * ListByBillingAccountNext
   * @param billingAccountName The ID that uniquely identifies a billing account.
   * @param nextLink The nextLink from the previous successful call to the ListByBillingAccount method.
   * @param options The options parameters.
   */
  private _listByBillingAccountNext(
    billingAccountName: string,
    nextLink: string,
    options?: BillingRoleDefinitionListByBillingAccountNextOptionalParams,
  ): Promise<BillingRoleDefinitionListByBillingAccountNextResponse> {
    return this.client.sendOperationRequest(
      { billingAccountName, nextLink, options },
      listByBillingAccountNextOperationSpec,
    );
  }

  /**
   * ListByDepartmentNext
   * @param billingAccountName The ID that uniquely identifies a billing account.
   * @param departmentName The name of the department.
   * @param nextLink The nextLink from the previous successful call to the ListByDepartment method.
   * @param options The options parameters.
   */
  private _listByDepartmentNext(
    billingAccountName: string,
    departmentName: string,
    nextLink: string,
    options?: BillingRoleDefinitionListByDepartmentNextOptionalParams,
  ): Promise<BillingRoleDefinitionListByDepartmentNextResponse> {
    return this.client.sendOperationRequest(
      { billingAccountName, departmentName, nextLink, options },
      listByDepartmentNextOperationSpec,
    );
  }

  /**
   * ListByEnrollmentAccountNext
   * @param billingAccountName The ID that uniquely identifies a billing account.
   * @param enrollmentAccountName The name of the enrollment account.
   * @param nextLink The nextLink from the previous successful call to the ListByEnrollmentAccount
   *                 method.
   * @param options The options parameters.
   */
  private _listByEnrollmentAccountNext(
    billingAccountName: string,
    enrollmentAccountName: string,
    nextLink: string,
    options?: BillingRoleDefinitionListByEnrollmentAccountNextOptionalParams,
  ): Promise<BillingRoleDefinitionListByEnrollmentAccountNextResponse> {
    return this.client.sendOperationRequest(
      { billingAccountName, enrollmentAccountName, nextLink, options },
      listByEnrollmentAccountNextOperationSpec,
    );
  }
}
// Operation Specifications
const serializer = coreClient.createSerializer(Mappers, /* isXml */ false);

const getByBillingProfileOperationSpec: coreClient.OperationSpec = {
  path: "/providers/Microsoft.Billing/billingAccounts/{billingAccountName}/billingProfiles/{billingProfileName}/billingRoleDefinitions/{roleDefinitionName}",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.BillingRoleDefinition,
    },
    default: {
      bodyMapper: Mappers.ErrorResponse,
    },
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.billingAccountName,
    Parameters.billingProfileName,
    Parameters.roleDefinitionName,
  ],
  headerParameters: [Parameters.accept],
  serializer,
};
const listByBillingProfileOperationSpec: coreClient.OperationSpec = {
  path: "/providers/Microsoft.Billing/billingAccounts/{billingAccountName}/billingProfiles/{billingProfileName}/billingRoleDefinitions",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.BillingRoleDefinitionListResult,
    },
    default: {
      bodyMapper: Mappers.ErrorResponse,
    },
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.billingAccountName,
    Parameters.billingProfileName,
  ],
  headerParameters: [Parameters.accept],
  serializer,
};
const getByCustomerOperationSpec: coreClient.OperationSpec = {
  path: "/providers/Microsoft.Billing/billingAccounts/{billingAccountName}/billingProfiles/{billingProfileName}/customers/{customerName}/billingRoleDefinitions/{roleDefinitionName}",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.BillingRoleDefinition,
    },
    default: {
      bodyMapper: Mappers.ErrorResponse,
    },
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.billingAccountName,
    Parameters.billingProfileName,
    Parameters.customerName,
    Parameters.roleDefinitionName,
  ],
  headerParameters: [Parameters.accept],
  serializer,
};
const listByCustomerOperationSpec: coreClient.OperationSpec = {
  path: "/providers/Microsoft.Billing/billingAccounts/{billingAccountName}/billingProfiles/{billingProfileName}/customers/{customerName}/billingRoleDefinitions",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.BillingRoleDefinitionListResult,
    },
    default: {
      bodyMapper: Mappers.ErrorResponse,
    },
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.billingAccountName,
    Parameters.billingProfileName,
    Parameters.customerName,
  ],
  headerParameters: [Parameters.accept],
  serializer,
};
const getByInvoiceSectionOperationSpec: coreClient.OperationSpec = {
  path: "/providers/Microsoft.Billing/billingAccounts/{billingAccountName}/billingProfiles/{billingProfileName}/invoiceSections/{invoiceSectionName}/billingRoleDefinitions/{roleDefinitionName}",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.BillingRoleDefinition,
    },
    default: {
      bodyMapper: Mappers.ErrorResponse,
    },
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.billingAccountName,
    Parameters.billingProfileName,
    Parameters.invoiceSectionName,
    Parameters.roleDefinitionName,
  ],
  headerParameters: [Parameters.accept],
  serializer,
};
const listByInvoiceSectionOperationSpec: coreClient.OperationSpec = {
  path: "/providers/Microsoft.Billing/billingAccounts/{billingAccountName}/billingProfiles/{billingProfileName}/invoiceSections/{invoiceSectionName}/billingRoleDefinitions",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.BillingRoleDefinitionListResult,
    },
    default: {
      bodyMapper: Mappers.ErrorResponse,
    },
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.billingAccountName,
    Parameters.billingProfileName,
    Parameters.invoiceSectionName,
  ],
  headerParameters: [Parameters.accept],
  serializer,
};
const getByBillingAccountOperationSpec: coreClient.OperationSpec = {
  path: "/providers/Microsoft.Billing/billingAccounts/{billingAccountName}/billingRoleDefinitions/{roleDefinitionName}",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.BillingRoleDefinition,
    },
    default: {
      bodyMapper: Mappers.ErrorResponse,
    },
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.billingAccountName,
    Parameters.roleDefinitionName,
  ],
  headerParameters: [Parameters.accept],
  serializer,
};
const listByBillingAccountOperationSpec: coreClient.OperationSpec = {
  path: "/providers/Microsoft.Billing/billingAccounts/{billingAccountName}/billingRoleDefinitions",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.BillingRoleDefinitionListResult,
    },
    default: {
      bodyMapper: Mappers.ErrorResponse,
    },
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [Parameters.$host, Parameters.billingAccountName],
  headerParameters: [Parameters.accept],
  serializer,
};
const getByDepartmentOperationSpec: coreClient.OperationSpec = {
  path: "/providers/Microsoft.Billing/billingAccounts/{billingAccountName}/departments/{departmentName}/billingRoleDefinitions/{roleDefinitionName}",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.BillingRoleDefinition,
    },
    default: {
      bodyMapper: Mappers.ErrorResponse,
    },
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.billingAccountName,
    Parameters.departmentName,
    Parameters.roleDefinitionName,
  ],
  headerParameters: [Parameters.accept],
  serializer,
};
const listByDepartmentOperationSpec: coreClient.OperationSpec = {
  path: "/providers/Microsoft.Billing/billingAccounts/{billingAccountName}/departments/{departmentName}/billingRoleDefinitions",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.BillingRoleDefinitionListResult,
    },
    default: {
      bodyMapper: Mappers.ErrorResponse,
    },
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.billingAccountName,
    Parameters.departmentName,
  ],
  headerParameters: [Parameters.accept],
  serializer,
};
const getByEnrollmentAccountOperationSpec: coreClient.OperationSpec = {
  path: "/providers/Microsoft.Billing/billingAccounts/{billingAccountName}/enrollmentAccounts/{enrollmentAccountName}/billingRoleDefinitions/{roleDefinitionName}",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.BillingRoleDefinition,
    },
    default: {
      bodyMapper: Mappers.ErrorResponse,
    },
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.billingAccountName,
    Parameters.enrollmentAccountName,
    Parameters.roleDefinitionName,
  ],
  headerParameters: [Parameters.accept],
  serializer,
};
const listByEnrollmentAccountOperationSpec: coreClient.OperationSpec = {
  path: "/providers/Microsoft.Billing/billingAccounts/{billingAccountName}/enrollmentAccounts/{enrollmentAccountName}/billingRoleDefinitions",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.BillingRoleDefinitionListResult,
    },
    default: {
      bodyMapper: Mappers.ErrorResponse,
    },
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.billingAccountName,
    Parameters.enrollmentAccountName,
  ],
  headerParameters: [Parameters.accept],
  serializer,
};
const listByBillingProfileNextOperationSpec: coreClient.OperationSpec = {
  path: "{nextLink}",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.BillingRoleDefinitionListResult,
    },
    default: {
      bodyMapper: Mappers.ErrorResponse,
    },
  },
  urlParameters: [
    Parameters.$host,
    Parameters.billingAccountName,
    Parameters.nextLink,
    Parameters.billingProfileName,
  ],
  headerParameters: [Parameters.accept],
  serializer,
};
const listByCustomerNextOperationSpec: coreClient.OperationSpec = {
  path: "{nextLink}",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.BillingRoleDefinitionListResult,
    },
    default: {
      bodyMapper: Mappers.ErrorResponse,
    },
  },
  urlParameters: [
    Parameters.$host,
    Parameters.billingAccountName,
    Parameters.nextLink,
    Parameters.billingProfileName,
    Parameters.customerName,
  ],
  headerParameters: [Parameters.accept],
  serializer,
};
const listByInvoiceSectionNextOperationSpec: coreClient.OperationSpec = {
  path: "{nextLink}",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.BillingRoleDefinitionListResult,
    },
    default: {
      bodyMapper: Mappers.ErrorResponse,
    },
  },
  urlParameters: [
    Parameters.$host,
    Parameters.billingAccountName,
    Parameters.nextLink,
    Parameters.billingProfileName,
    Parameters.invoiceSectionName,
  ],
  headerParameters: [Parameters.accept],
  serializer,
};
const listByBillingAccountNextOperationSpec: coreClient.OperationSpec = {
  path: "{nextLink}",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.BillingRoleDefinitionListResult,
    },
    default: {
      bodyMapper: Mappers.ErrorResponse,
    },
  },
  urlParameters: [
    Parameters.$host,
    Parameters.billingAccountName,
    Parameters.nextLink,
  ],
  headerParameters: [Parameters.accept],
  serializer,
};
const listByDepartmentNextOperationSpec: coreClient.OperationSpec = {
  path: "{nextLink}",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.BillingRoleDefinitionListResult,
    },
    default: {
      bodyMapper: Mappers.ErrorResponse,
    },
  },
  urlParameters: [
    Parameters.$host,
    Parameters.billingAccountName,
    Parameters.nextLink,
    Parameters.departmentName,
  ],
  headerParameters: [Parameters.accept],
  serializer,
};
const listByEnrollmentAccountNextOperationSpec: coreClient.OperationSpec = {
  path: "{nextLink}",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.BillingRoleDefinitionListResult,
    },
    default: {
      bodyMapper: Mappers.ErrorResponse,
    },
  },
  urlParameters: [
    Parameters.$host,
    Parameters.billingAccountName,
    Parameters.nextLink,
    Parameters.enrollmentAccountName,
  ],
  headerParameters: [Parameters.accept],
  serializer,
};
