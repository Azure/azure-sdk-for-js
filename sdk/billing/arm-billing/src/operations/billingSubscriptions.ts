/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */

import { PagedAsyncIterableIterator, PageSettings } from "@azure/core-paging";
import { setContinuationToken } from "../pagingHelper";
import { BillingSubscriptions } from "../operationsInterfaces";
import * as coreClient from "@azure/core-client";
import * as Mappers from "../models/mappers";
import * as Parameters from "../models/parameters";
import { BillingManagementClient } from "../billingManagementClient";
import {
  SimplePollerLike,
  OperationState,
  createHttpPoller,
} from "@azure/core-lro";
import { createLroSpec } from "../lroImpl";
import {
  BillingSubscription,
  BillingSubscriptionsListByBillingProfileNextOptionalParams,
  BillingSubscriptionsListByBillingProfileOptionalParams,
  BillingSubscriptionsListByBillingProfileResponse,
  BillingSubscriptionsListByCustomerNextOptionalParams,
  BillingSubscriptionsListByCustomerOptionalParams,
  BillingSubscriptionsListByCustomerResponse,
  BillingSubscriptionsListByInvoiceSectionNextOptionalParams,
  BillingSubscriptionsListByInvoiceSectionOptionalParams,
  BillingSubscriptionsListByInvoiceSectionResponse,
  BillingSubscriptionsListByBillingAccountNextOptionalParams,
  BillingSubscriptionsListByBillingAccountOptionalParams,
  BillingSubscriptionsListByBillingAccountResponse,
  BillingSubscriptionsListByCustomerAtBillingAccountNextOptionalParams,
  BillingSubscriptionsListByCustomerAtBillingAccountOptionalParams,
  BillingSubscriptionsListByCustomerAtBillingAccountResponse,
  BillingSubscriptionsListByEnrollmentAccountNextOptionalParams,
  BillingSubscriptionsListByEnrollmentAccountOptionalParams,
  BillingSubscriptionsListByEnrollmentAccountResponse,
  BillingSubscriptionsGetByBillingProfileOptionalParams,
  BillingSubscriptionsGetByBillingProfileResponse,
  CancelSubscriptionRequest,
  BillingSubscriptionsCancelOptionalParams,
  BillingSubscriptionsCancelResponse,
  BillingSubscriptionMergeRequest,
  BillingSubscriptionsMergeOptionalParams,
  BillingSubscriptionsMergeResponse,
  MoveBillingSubscriptionRequest,
  BillingSubscriptionsMoveOptionalParams,
  BillingSubscriptionsMoveResponse,
  BillingSubscriptionSplitRequest,
  BillingSubscriptionsSplitOptionalParams,
  BillingSubscriptionsSplitResponse,
  BillingSubscriptionsValidateMoveEligibilityOptionalParams,
  BillingSubscriptionsValidateMoveEligibilityResponse,
  BillingSubscriptionsDeleteOptionalParams,
  BillingSubscriptionsDeleteResponse,
  BillingSubscriptionsGetOptionalParams,
  BillingSubscriptionsGetResponse,
  BillingSubscriptionPatch,
  BillingSubscriptionsUpdateOptionalParams,
  BillingSubscriptionsUpdateResponse,
  BillingSubscriptionsListByBillingProfileNextResponse,
  BillingSubscriptionsListByCustomerNextResponse,
  BillingSubscriptionsListByInvoiceSectionNextResponse,
  BillingSubscriptionsListByBillingAccountNextResponse,
  BillingSubscriptionsListByCustomerAtBillingAccountNextResponse,
  BillingSubscriptionsListByEnrollmentAccountNextResponse,
} from "../models";

/// <reference lib="esnext.asynciterable" />
/** Class containing BillingSubscriptions operations. */
export class BillingSubscriptionsImpl implements BillingSubscriptions {
  private readonly client: BillingManagementClient;

  /**
   * Initialize a new instance of the class BillingSubscriptions class.
   * @param client Reference to the service client
   */
  constructor(client: BillingManagementClient) {
    this.client = client;
  }

  /**
   * Lists the subscriptions that are billed to a billing profile. The operation is supported for billing
   * accounts with agreement type Microsoft Customer Agreement or Microsoft Partner Agreement.
   * @param billingAccountName The ID that uniquely identifies a billing account.
   * @param billingProfileName The ID that uniquely identifies a billing profile.
   * @param options The options parameters.
   */
  public listByBillingProfile(
    billingAccountName: string,
    billingProfileName: string,
    options?: BillingSubscriptionsListByBillingProfileOptionalParams,
  ): PagedAsyncIterableIterator<BillingSubscription> {
    const iter = this.listByBillingProfilePagingAll(
      billingAccountName,
      billingProfileName,
      options,
    );
    return {
      next() {
        return iter.next();
      },
      [Symbol.asyncIterator]() {
        return this;
      },
      byPage: (settings?: PageSettings) => {
        if (settings?.maxPageSize) {
          throw new Error("maxPageSize is not supported by this operation.");
        }
        return this.listByBillingProfilePagingPage(
          billingAccountName,
          billingProfileName,
          options,
          settings,
        );
      },
    };
  }

  private async *listByBillingProfilePagingPage(
    billingAccountName: string,
    billingProfileName: string,
    options?: BillingSubscriptionsListByBillingProfileOptionalParams,
    settings?: PageSettings,
  ): AsyncIterableIterator<BillingSubscription[]> {
    let result: BillingSubscriptionsListByBillingProfileResponse;
    let continuationToken = settings?.continuationToken;
    if (!continuationToken) {
      result = await this._listByBillingProfile(
        billingAccountName,
        billingProfileName,
        options,
      );
      let page = result.value || [];
      continuationToken = result.nextLink;
      setContinuationToken(page, continuationToken);
      yield page;
    }
    while (continuationToken) {
      result = await this._listByBillingProfileNext(
        billingAccountName,
        billingProfileName,
        continuationToken,
        options,
      );
      continuationToken = result.nextLink;
      let page = result.value || [];
      setContinuationToken(page, continuationToken);
      yield page;
    }
  }

  private async *listByBillingProfilePagingAll(
    billingAccountName: string,
    billingProfileName: string,
    options?: BillingSubscriptionsListByBillingProfileOptionalParams,
  ): AsyncIterableIterator<BillingSubscription> {
    for await (const page of this.listByBillingProfilePagingPage(
      billingAccountName,
      billingProfileName,
      options,
    )) {
      yield* page;
    }
  }

  /**
   * Lists the subscriptions for a customer. The operation is supported only for billing accounts with
   * agreement type Microsoft Partner Agreement.
   * @param billingAccountName The ID that uniquely identifies a billing account.
   * @param billingProfileName The ID that uniquely identifies a billing profile.
   * @param customerName The ID that uniquely identifies a customer.
   * @param options The options parameters.
   */
  public listByCustomer(
    billingAccountName: string,
    billingProfileName: string,
    customerName: string,
    options?: BillingSubscriptionsListByCustomerOptionalParams,
  ): PagedAsyncIterableIterator<BillingSubscription> {
    const iter = this.listByCustomerPagingAll(
      billingAccountName,
      billingProfileName,
      customerName,
      options,
    );
    return {
      next() {
        return iter.next();
      },
      [Symbol.asyncIterator]() {
        return this;
      },
      byPage: (settings?: PageSettings) => {
        if (settings?.maxPageSize) {
          throw new Error("maxPageSize is not supported by this operation.");
        }
        return this.listByCustomerPagingPage(
          billingAccountName,
          billingProfileName,
          customerName,
          options,
          settings,
        );
      },
    };
  }

  private async *listByCustomerPagingPage(
    billingAccountName: string,
    billingProfileName: string,
    customerName: string,
    options?: BillingSubscriptionsListByCustomerOptionalParams,
    settings?: PageSettings,
  ): AsyncIterableIterator<BillingSubscription[]> {
    let result: BillingSubscriptionsListByCustomerResponse;
    let continuationToken = settings?.continuationToken;
    if (!continuationToken) {
      result = await this._listByCustomer(
        billingAccountName,
        billingProfileName,
        customerName,
        options,
      );
      let page = result.value || [];
      continuationToken = result.nextLink;
      setContinuationToken(page, continuationToken);
      yield page;
    }
    while (continuationToken) {
      result = await this._listByCustomerNext(
        billingAccountName,
        billingProfileName,
        customerName,
        continuationToken,
        options,
      );
      continuationToken = result.nextLink;
      let page = result.value || [];
      setContinuationToken(page, continuationToken);
      yield page;
    }
  }

  private async *listByCustomerPagingAll(
    billingAccountName: string,
    billingProfileName: string,
    customerName: string,
    options?: BillingSubscriptionsListByCustomerOptionalParams,
  ): AsyncIterableIterator<BillingSubscription> {
    for await (const page of this.listByCustomerPagingPage(
      billingAccountName,
      billingProfileName,
      customerName,
      options,
    )) {
      yield* page;
    }
  }

  /**
   * Lists the subscriptions that are billed to an invoice section. The operation is supported only for
   * billing accounts with agreement type Microsoft Customer Agreement.
   * @param billingAccountName The ID that uniquely identifies a billing account.
   * @param billingProfileName The ID that uniquely identifies a billing profile.
   * @param invoiceSectionName The ID that uniquely identifies an invoice section.
   * @param options The options parameters.
   */
  public listByInvoiceSection(
    billingAccountName: string,
    billingProfileName: string,
    invoiceSectionName: string,
    options?: BillingSubscriptionsListByInvoiceSectionOptionalParams,
  ): PagedAsyncIterableIterator<BillingSubscription> {
    const iter = this.listByInvoiceSectionPagingAll(
      billingAccountName,
      billingProfileName,
      invoiceSectionName,
      options,
    );
    return {
      next() {
        return iter.next();
      },
      [Symbol.asyncIterator]() {
        return this;
      },
      byPage: (settings?: PageSettings) => {
        if (settings?.maxPageSize) {
          throw new Error("maxPageSize is not supported by this operation.");
        }
        return this.listByInvoiceSectionPagingPage(
          billingAccountName,
          billingProfileName,
          invoiceSectionName,
          options,
          settings,
        );
      },
    };
  }

  private async *listByInvoiceSectionPagingPage(
    billingAccountName: string,
    billingProfileName: string,
    invoiceSectionName: string,
    options?: BillingSubscriptionsListByInvoiceSectionOptionalParams,
    settings?: PageSettings,
  ): AsyncIterableIterator<BillingSubscription[]> {
    let result: BillingSubscriptionsListByInvoiceSectionResponse;
    let continuationToken = settings?.continuationToken;
    if (!continuationToken) {
      result = await this._listByInvoiceSection(
        billingAccountName,
        billingProfileName,
        invoiceSectionName,
        options,
      );
      let page = result.value || [];
      continuationToken = result.nextLink;
      setContinuationToken(page, continuationToken);
      yield page;
    }
    while (continuationToken) {
      result = await this._listByInvoiceSectionNext(
        billingAccountName,
        billingProfileName,
        invoiceSectionName,
        continuationToken,
        options,
      );
      continuationToken = result.nextLink;
      let page = result.value || [];
      setContinuationToken(page, continuationToken);
      yield page;
    }
  }

  private async *listByInvoiceSectionPagingAll(
    billingAccountName: string,
    billingProfileName: string,
    invoiceSectionName: string,
    options?: BillingSubscriptionsListByInvoiceSectionOptionalParams,
  ): AsyncIterableIterator<BillingSubscription> {
    for await (const page of this.listByInvoiceSectionPagingPage(
      billingAccountName,
      billingProfileName,
      invoiceSectionName,
      options,
    )) {
      yield* page;
    }
  }

  /**
   * Lists the subscriptions for a billing account.
   * @param billingAccountName The ID that uniquely identifies a billing account.
   * @param options The options parameters.
   */
  public listByBillingAccount(
    billingAccountName: string,
    options?: BillingSubscriptionsListByBillingAccountOptionalParams,
  ): PagedAsyncIterableIterator<BillingSubscription> {
    const iter = this.listByBillingAccountPagingAll(
      billingAccountName,
      options,
    );
    return {
      next() {
        return iter.next();
      },
      [Symbol.asyncIterator]() {
        return this;
      },
      byPage: (settings?: PageSettings) => {
        if (settings?.maxPageSize) {
          throw new Error("maxPageSize is not supported by this operation.");
        }
        return this.listByBillingAccountPagingPage(
          billingAccountName,
          options,
          settings,
        );
      },
    };
  }

  private async *listByBillingAccountPagingPage(
    billingAccountName: string,
    options?: BillingSubscriptionsListByBillingAccountOptionalParams,
    settings?: PageSettings,
  ): AsyncIterableIterator<BillingSubscription[]> {
    let result: BillingSubscriptionsListByBillingAccountResponse;
    let continuationToken = settings?.continuationToken;
    if (!continuationToken) {
      result = await this._listByBillingAccount(billingAccountName, options);
      let page = result.value || [];
      continuationToken = result.nextLink;
      setContinuationToken(page, continuationToken);
      yield page;
    }
    while (continuationToken) {
      result = await this._listByBillingAccountNext(
        billingAccountName,
        continuationToken,
        options,
      );
      continuationToken = result.nextLink;
      let page = result.value || [];
      setContinuationToken(page, continuationToken);
      yield page;
    }
  }

  private async *listByBillingAccountPagingAll(
    billingAccountName: string,
    options?: BillingSubscriptionsListByBillingAccountOptionalParams,
  ): AsyncIterableIterator<BillingSubscription> {
    for await (const page of this.listByBillingAccountPagingPage(
      billingAccountName,
      options,
    )) {
      yield* page;
    }
  }

  /**
   * Lists the subscriptions for a customer at billing account level. The operation is supported only for
   * billing accounts with agreement type Microsoft Partner Agreement.
   * @param billingAccountName The ID that uniquely identifies a billing account.
   * @param customerName The ID that uniquely identifies a customer.
   * @param options The options parameters.
   */
  public listByCustomerAtBillingAccount(
    billingAccountName: string,
    customerName: string,
    options?: BillingSubscriptionsListByCustomerAtBillingAccountOptionalParams,
  ): PagedAsyncIterableIterator<BillingSubscription> {
    const iter = this.listByCustomerAtBillingAccountPagingAll(
      billingAccountName,
      customerName,
      options,
    );
    return {
      next() {
        return iter.next();
      },
      [Symbol.asyncIterator]() {
        return this;
      },
      byPage: (settings?: PageSettings) => {
        if (settings?.maxPageSize) {
          throw new Error("maxPageSize is not supported by this operation.");
        }
        return this.listByCustomerAtBillingAccountPagingPage(
          billingAccountName,
          customerName,
          options,
          settings,
        );
      },
    };
  }

  private async *listByCustomerAtBillingAccountPagingPage(
    billingAccountName: string,
    customerName: string,
    options?: BillingSubscriptionsListByCustomerAtBillingAccountOptionalParams,
    settings?: PageSettings,
  ): AsyncIterableIterator<BillingSubscription[]> {
    let result: BillingSubscriptionsListByCustomerAtBillingAccountResponse;
    let continuationToken = settings?.continuationToken;
    if (!continuationToken) {
      result = await this._listByCustomerAtBillingAccount(
        billingAccountName,
        customerName,
        options,
      );
      let page = result.value || [];
      continuationToken = result.nextLink;
      setContinuationToken(page, continuationToken);
      yield page;
    }
    while (continuationToken) {
      result = await this._listByCustomerAtBillingAccountNext(
        billingAccountName,
        customerName,
        continuationToken,
        options,
      );
      continuationToken = result.nextLink;
      let page = result.value || [];
      setContinuationToken(page, continuationToken);
      yield page;
    }
  }

  private async *listByCustomerAtBillingAccountPagingAll(
    billingAccountName: string,
    customerName: string,
    options?: BillingSubscriptionsListByCustomerAtBillingAccountOptionalParams,
  ): AsyncIterableIterator<BillingSubscription> {
    for await (const page of this.listByCustomerAtBillingAccountPagingPage(
      billingAccountName,
      customerName,
      options,
    )) {
      yield* page;
    }
  }

  /**
   * Lists the subscriptions for an enrollment account. The operation is supported for billing accounts
   * with agreement type Enterprise Agreement.
   * @param billingAccountName The ID that uniquely identifies a billing account.
   * @param enrollmentAccountName The name of the enrollment account.
   * @param options The options parameters.
   */
  public listByEnrollmentAccount(
    billingAccountName: string,
    enrollmentAccountName: string,
    options?: BillingSubscriptionsListByEnrollmentAccountOptionalParams,
  ): PagedAsyncIterableIterator<BillingSubscription> {
    const iter = this.listByEnrollmentAccountPagingAll(
      billingAccountName,
      enrollmentAccountName,
      options,
    );
    return {
      next() {
        return iter.next();
      },
      [Symbol.asyncIterator]() {
        return this;
      },
      byPage: (settings?: PageSettings) => {
        if (settings?.maxPageSize) {
          throw new Error("maxPageSize is not supported by this operation.");
        }
        return this.listByEnrollmentAccountPagingPage(
          billingAccountName,
          enrollmentAccountName,
          options,
          settings,
        );
      },
    };
  }

  private async *listByEnrollmentAccountPagingPage(
    billingAccountName: string,
    enrollmentAccountName: string,
    options?: BillingSubscriptionsListByEnrollmentAccountOptionalParams,
    settings?: PageSettings,
  ): AsyncIterableIterator<BillingSubscription[]> {
    let result: BillingSubscriptionsListByEnrollmentAccountResponse;
    let continuationToken = settings?.continuationToken;
    if (!continuationToken) {
      result = await this._listByEnrollmentAccount(
        billingAccountName,
        enrollmentAccountName,
        options,
      );
      let page = result.value || [];
      continuationToken = result.nextLink;
      setContinuationToken(page, continuationToken);
      yield page;
    }
    while (continuationToken) {
      result = await this._listByEnrollmentAccountNext(
        billingAccountName,
        enrollmentAccountName,
        continuationToken,
        options,
      );
      continuationToken = result.nextLink;
      let page = result.value || [];
      setContinuationToken(page, continuationToken);
      yield page;
    }
  }

  private async *listByEnrollmentAccountPagingAll(
    billingAccountName: string,
    enrollmentAccountName: string,
    options?: BillingSubscriptionsListByEnrollmentAccountOptionalParams,
  ): AsyncIterableIterator<BillingSubscription> {
    for await (const page of this.listByEnrollmentAccountPagingPage(
      billingAccountName,
      enrollmentAccountName,
      options,
    )) {
      yield* page;
    }
  }

  /**
   * Gets a subscription by its billing profile and ID. The operation is supported for billing accounts
   * with agreement type Enterprise Agreement.
   * @param billingAccountName The ID that uniquely identifies a billing account.
   * @param billingProfileName The ID that uniquely identifies a billing profile.
   * @param billingSubscriptionName The ID that uniquely identifies a subscription.
   * @param options The options parameters.
   */
  getByBillingProfile(
    billingAccountName: string,
    billingProfileName: string,
    billingSubscriptionName: string,
    options?: BillingSubscriptionsGetByBillingProfileOptionalParams,
  ): Promise<BillingSubscriptionsGetByBillingProfileResponse> {
    return this.client.sendOperationRequest(
      {
        billingAccountName,
        billingProfileName,
        billingSubscriptionName,
        options,
      },
      getByBillingProfileOperationSpec,
    );
  }

  /**
   * Lists the subscriptions that are billed to a billing profile. The operation is supported for billing
   * accounts with agreement type Microsoft Customer Agreement or Microsoft Partner Agreement.
   * @param billingAccountName The ID that uniquely identifies a billing account.
   * @param billingProfileName The ID that uniquely identifies a billing profile.
   * @param options The options parameters.
   */
  private _listByBillingProfile(
    billingAccountName: string,
    billingProfileName: string,
    options?: BillingSubscriptionsListByBillingProfileOptionalParams,
  ): Promise<BillingSubscriptionsListByBillingProfileResponse> {
    return this.client.sendOperationRequest(
      { billingAccountName, billingProfileName, options },
      listByBillingProfileOperationSpec,
    );
  }

  /**
   * Lists the subscriptions for a customer. The operation is supported only for billing accounts with
   * agreement type Microsoft Partner Agreement.
   * @param billingAccountName The ID that uniquely identifies a billing account.
   * @param billingProfileName The ID that uniquely identifies a billing profile.
   * @param customerName The ID that uniquely identifies a customer.
   * @param options The options parameters.
   */
  private _listByCustomer(
    billingAccountName: string,
    billingProfileName: string,
    customerName: string,
    options?: BillingSubscriptionsListByCustomerOptionalParams,
  ): Promise<BillingSubscriptionsListByCustomerResponse> {
    return this.client.sendOperationRequest(
      { billingAccountName, billingProfileName, customerName, options },
      listByCustomerOperationSpec,
    );
  }

  /**
   * Lists the subscriptions that are billed to an invoice section. The operation is supported only for
   * billing accounts with agreement type Microsoft Customer Agreement.
   * @param billingAccountName The ID that uniquely identifies a billing account.
   * @param billingProfileName The ID that uniquely identifies a billing profile.
   * @param invoiceSectionName The ID that uniquely identifies an invoice section.
   * @param options The options parameters.
   */
  private _listByInvoiceSection(
    billingAccountName: string,
    billingProfileName: string,
    invoiceSectionName: string,
    options?: BillingSubscriptionsListByInvoiceSectionOptionalParams,
  ): Promise<BillingSubscriptionsListByInvoiceSectionResponse> {
    return this.client.sendOperationRequest(
      { billingAccountName, billingProfileName, invoiceSectionName, options },
      listByInvoiceSectionOperationSpec,
    );
  }

  /**
   * Cancels a usage-based subscription. This operation is supported only for billing accounts of type
   * Microsoft Partner Agreement.
   * @param billingAccountName The ID that uniquely identifies a billing account.
   * @param billingSubscriptionName The ID that uniquely identifies a subscription.
   * @param parameters Request parameters for cancel customer subscription.
   * @param options The options parameters.
   */
  async beginCancel(
    billingAccountName: string,
    billingSubscriptionName: string,
    parameters: CancelSubscriptionRequest,
    options?: BillingSubscriptionsCancelOptionalParams,
  ): Promise<
    SimplePollerLike<
      OperationState<BillingSubscriptionsCancelResponse>,
      BillingSubscriptionsCancelResponse
    >
  > {
    const directSendOperation = async (
      args: coreClient.OperationArguments,
      spec: coreClient.OperationSpec,
    ): Promise<BillingSubscriptionsCancelResponse> => {
      return this.client.sendOperationRequest(args, spec);
    };
    const sendOperationFn = async (
      args: coreClient.OperationArguments,
      spec: coreClient.OperationSpec,
    ) => {
      let currentRawResponse: coreClient.FullOperationResponse | undefined =
        undefined;
      const providedCallback = args.options?.onResponse;
      const callback: coreClient.RawResponseCallback = (
        rawResponse: coreClient.FullOperationResponse,
        flatResponse: unknown,
      ) => {
        currentRawResponse = rawResponse;
        providedCallback?.(rawResponse, flatResponse);
      };
      const updatedArgs = {
        ...args,
        options: {
          ...args.options,
          onResponse: callback,
        },
      };
      const flatResponse = await directSendOperation(updatedArgs, spec);
      return {
        flatResponse,
        rawResponse: {
          statusCode: currentRawResponse!.status,
          body: currentRawResponse!.parsedBody,
          headers: currentRawResponse!.headers.toJSON(),
        },
      };
    };

    const lro = createLroSpec({
      sendOperationFn,
      args: {
        billingAccountName,
        billingSubscriptionName,
        parameters,
        options,
      },
      spec: cancelOperationSpec,
    });
    const poller = await createHttpPoller<
      BillingSubscriptionsCancelResponse,
      OperationState<BillingSubscriptionsCancelResponse>
    >(lro, {
      restoreFrom: options?.resumeFrom,
      intervalInMs: options?.updateIntervalInMs,
      resourceLocationConfig: "location",
    });
    await poller.poll();
    return poller;
  }

  /**
   * Cancels a usage-based subscription. This operation is supported only for billing accounts of type
   * Microsoft Partner Agreement.
   * @param billingAccountName The ID that uniquely identifies a billing account.
   * @param billingSubscriptionName The ID that uniquely identifies a subscription.
   * @param parameters Request parameters for cancel customer subscription.
   * @param options The options parameters.
   */
  async beginCancelAndWait(
    billingAccountName: string,
    billingSubscriptionName: string,
    parameters: CancelSubscriptionRequest,
    options?: BillingSubscriptionsCancelOptionalParams,
  ): Promise<BillingSubscriptionsCancelResponse> {
    const poller = await this.beginCancel(
      billingAccountName,
      billingSubscriptionName,
      parameters,
      options,
    );
    return poller.pollUntilDone();
  }

  /**
   * Merges the billing subscription provided in the request with a target billing subscription.
   * @param billingAccountName The ID that uniquely identifies a billing account.
   * @param billingSubscriptionName The ID that uniquely identifies a subscription.
   * @param parameters Request parameters that are provided to merge the two billing subscriptions.
   * @param options The options parameters.
   */
  async beginMerge(
    billingAccountName: string,
    billingSubscriptionName: string,
    parameters: BillingSubscriptionMergeRequest,
    options?: BillingSubscriptionsMergeOptionalParams,
  ): Promise<
    SimplePollerLike<
      OperationState<BillingSubscriptionsMergeResponse>,
      BillingSubscriptionsMergeResponse
    >
  > {
    const directSendOperation = async (
      args: coreClient.OperationArguments,
      spec: coreClient.OperationSpec,
    ): Promise<BillingSubscriptionsMergeResponse> => {
      return this.client.sendOperationRequest(args, spec);
    };
    const sendOperationFn = async (
      args: coreClient.OperationArguments,
      spec: coreClient.OperationSpec,
    ) => {
      let currentRawResponse: coreClient.FullOperationResponse | undefined =
        undefined;
      const providedCallback = args.options?.onResponse;
      const callback: coreClient.RawResponseCallback = (
        rawResponse: coreClient.FullOperationResponse,
        flatResponse: unknown,
      ) => {
        currentRawResponse = rawResponse;
        providedCallback?.(rawResponse, flatResponse);
      };
      const updatedArgs = {
        ...args,
        options: {
          ...args.options,
          onResponse: callback,
        },
      };
      const flatResponse = await directSendOperation(updatedArgs, spec);
      return {
        flatResponse,
        rawResponse: {
          statusCode: currentRawResponse!.status,
          body: currentRawResponse!.parsedBody,
          headers: currentRawResponse!.headers.toJSON(),
        },
      };
    };

    const lro = createLroSpec({
      sendOperationFn,
      args: {
        billingAccountName,
        billingSubscriptionName,
        parameters,
        options,
      },
      spec: mergeOperationSpec,
    });
    const poller = await createHttpPoller<
      BillingSubscriptionsMergeResponse,
      OperationState<BillingSubscriptionsMergeResponse>
    >(lro, {
      restoreFrom: options?.resumeFrom,
      intervalInMs: options?.updateIntervalInMs,
      resourceLocationConfig: "location",
    });
    await poller.poll();
    return poller;
  }

  /**
   * Merges the billing subscription provided in the request with a target billing subscription.
   * @param billingAccountName The ID that uniquely identifies a billing account.
   * @param billingSubscriptionName The ID that uniquely identifies a subscription.
   * @param parameters Request parameters that are provided to merge the two billing subscriptions.
   * @param options The options parameters.
   */
  async beginMergeAndWait(
    billingAccountName: string,
    billingSubscriptionName: string,
    parameters: BillingSubscriptionMergeRequest,
    options?: BillingSubscriptionsMergeOptionalParams,
  ): Promise<BillingSubscriptionsMergeResponse> {
    const poller = await this.beginMerge(
      billingAccountName,
      billingSubscriptionName,
      parameters,
      options,
    );
    return poller.pollUntilDone();
  }

  /**
   * Moves charges for a subscription to a new invoice section. The new invoice section must belong to
   * the same billing profile as the existing invoice section. This operation is supported for billing
   * accounts with agreement type Microsoft Customer Agreement.
   * @param billingAccountName The ID that uniquely identifies a billing account.
   * @param billingSubscriptionName The ID that uniquely identifies a subscription.
   * @param parameters Request parameters to transfer billing subscription.
   * @param options The options parameters.
   */
  async beginMove(
    billingAccountName: string,
    billingSubscriptionName: string,
    parameters: MoveBillingSubscriptionRequest,
    options?: BillingSubscriptionsMoveOptionalParams,
  ): Promise<
    SimplePollerLike<
      OperationState<BillingSubscriptionsMoveResponse>,
      BillingSubscriptionsMoveResponse
    >
  > {
    const directSendOperation = async (
      args: coreClient.OperationArguments,
      spec: coreClient.OperationSpec,
    ): Promise<BillingSubscriptionsMoveResponse> => {
      return this.client.sendOperationRequest(args, spec);
    };
    const sendOperationFn = async (
      args: coreClient.OperationArguments,
      spec: coreClient.OperationSpec,
    ) => {
      let currentRawResponse: coreClient.FullOperationResponse | undefined =
        undefined;
      const providedCallback = args.options?.onResponse;
      const callback: coreClient.RawResponseCallback = (
        rawResponse: coreClient.FullOperationResponse,
        flatResponse: unknown,
      ) => {
        currentRawResponse = rawResponse;
        providedCallback?.(rawResponse, flatResponse);
      };
      const updatedArgs = {
        ...args,
        options: {
          ...args.options,
          onResponse: callback,
        },
      };
      const flatResponse = await directSendOperation(updatedArgs, spec);
      return {
        flatResponse,
        rawResponse: {
          statusCode: currentRawResponse!.status,
          body: currentRawResponse!.parsedBody,
          headers: currentRawResponse!.headers.toJSON(),
        },
      };
    };

    const lro = createLroSpec({
      sendOperationFn,
      args: {
        billingAccountName,
        billingSubscriptionName,
        parameters,
        options,
      },
      spec: moveOperationSpec,
    });
    const poller = await createHttpPoller<
      BillingSubscriptionsMoveResponse,
      OperationState<BillingSubscriptionsMoveResponse>
    >(lro, {
      restoreFrom: options?.resumeFrom,
      intervalInMs: options?.updateIntervalInMs,
      resourceLocationConfig: "location",
    });
    await poller.poll();
    return poller;
  }

  /**
   * Moves charges for a subscription to a new invoice section. The new invoice section must belong to
   * the same billing profile as the existing invoice section. This operation is supported for billing
   * accounts with agreement type Microsoft Customer Agreement.
   * @param billingAccountName The ID that uniquely identifies a billing account.
   * @param billingSubscriptionName The ID that uniquely identifies a subscription.
   * @param parameters Request parameters to transfer billing subscription.
   * @param options The options parameters.
   */
  async beginMoveAndWait(
    billingAccountName: string,
    billingSubscriptionName: string,
    parameters: MoveBillingSubscriptionRequest,
    options?: BillingSubscriptionsMoveOptionalParams,
  ): Promise<BillingSubscriptionsMoveResponse> {
    const poller = await this.beginMove(
      billingAccountName,
      billingSubscriptionName,
      parameters,
      options,
    );
    return poller.pollUntilDone();
  }

  /**
   * Splits a subscription into a new subscription with quantity less than current subscription quantity
   * and not equal to 0.
   * @param billingAccountName The ID that uniquely identifies a billing account.
   * @param billingSubscriptionName The ID that uniquely identifies a subscription.
   * @param parameters Request parameters that are provided to split the billing subscription.
   * @param options The options parameters.
   */
  async beginSplit(
    billingAccountName: string,
    billingSubscriptionName: string,
    parameters: BillingSubscriptionSplitRequest,
    options?: BillingSubscriptionsSplitOptionalParams,
  ): Promise<
    SimplePollerLike<
      OperationState<BillingSubscriptionsSplitResponse>,
      BillingSubscriptionsSplitResponse
    >
  > {
    const directSendOperation = async (
      args: coreClient.OperationArguments,
      spec: coreClient.OperationSpec,
    ): Promise<BillingSubscriptionsSplitResponse> => {
      return this.client.sendOperationRequest(args, spec);
    };
    const sendOperationFn = async (
      args: coreClient.OperationArguments,
      spec: coreClient.OperationSpec,
    ) => {
      let currentRawResponse: coreClient.FullOperationResponse | undefined =
        undefined;
      const providedCallback = args.options?.onResponse;
      const callback: coreClient.RawResponseCallback = (
        rawResponse: coreClient.FullOperationResponse,
        flatResponse: unknown,
      ) => {
        currentRawResponse = rawResponse;
        providedCallback?.(rawResponse, flatResponse);
      };
      const updatedArgs = {
        ...args,
        options: {
          ...args.options,
          onResponse: callback,
        },
      };
      const flatResponse = await directSendOperation(updatedArgs, spec);
      return {
        flatResponse,
        rawResponse: {
          statusCode: currentRawResponse!.status,
          body: currentRawResponse!.parsedBody,
          headers: currentRawResponse!.headers.toJSON(),
        },
      };
    };

    const lro = createLroSpec({
      sendOperationFn,
      args: {
        billingAccountName,
        billingSubscriptionName,
        parameters,
        options,
      },
      spec: splitOperationSpec,
    });
    const poller = await createHttpPoller<
      BillingSubscriptionsSplitResponse,
      OperationState<BillingSubscriptionsSplitResponse>
    >(lro, {
      restoreFrom: options?.resumeFrom,
      intervalInMs: options?.updateIntervalInMs,
      resourceLocationConfig: "location",
    });
    await poller.poll();
    return poller;
  }

  /**
   * Splits a subscription into a new subscription with quantity less than current subscription quantity
   * and not equal to 0.
   * @param billingAccountName The ID that uniquely identifies a billing account.
   * @param billingSubscriptionName The ID that uniquely identifies a subscription.
   * @param parameters Request parameters that are provided to split the billing subscription.
   * @param options The options parameters.
   */
  async beginSplitAndWait(
    billingAccountName: string,
    billingSubscriptionName: string,
    parameters: BillingSubscriptionSplitRequest,
    options?: BillingSubscriptionsSplitOptionalParams,
  ): Promise<BillingSubscriptionsSplitResponse> {
    const poller = await this.beginSplit(
      billingAccountName,
      billingSubscriptionName,
      parameters,
      options,
    );
    return poller.pollUntilDone();
  }

  /**
   * Validates if charges for a subscription can be moved to a new invoice section. This operation is
   * supported for billing accounts with agreement type Microsoft Customer Agreement.
   * @param billingAccountName The ID that uniquely identifies a billing account.
   * @param billingSubscriptionName The ID that uniquely identifies a subscription.
   * @param parameters Request parameters to transfer billing subscription.
   * @param options The options parameters.
   */
  validateMoveEligibility(
    billingAccountName: string,
    billingSubscriptionName: string,
    parameters: MoveBillingSubscriptionRequest,
    options?: BillingSubscriptionsValidateMoveEligibilityOptionalParams,
  ): Promise<BillingSubscriptionsValidateMoveEligibilityResponse> {
    return this.client.sendOperationRequest(
      { billingAccountName, billingSubscriptionName, parameters, options },
      validateMoveEligibilityOperationSpec,
    );
  }

  /**
   * Cancels a billing subscription. This operation is supported only for billing accounts of type
   * Microsoft Partner Agreement or Microsoft Customer Agreement.
   * @param billingAccountName The ID that uniquely identifies a billing account.
   * @param billingSubscriptionName The ID that uniquely identifies a subscription.
   * @param options The options parameters.
   */
  async beginDelete(
    billingAccountName: string,
    billingSubscriptionName: string,
    options?: BillingSubscriptionsDeleteOptionalParams,
  ): Promise<
    SimplePollerLike<
      OperationState<BillingSubscriptionsDeleteResponse>,
      BillingSubscriptionsDeleteResponse
    >
  > {
    const directSendOperation = async (
      args: coreClient.OperationArguments,
      spec: coreClient.OperationSpec,
    ): Promise<BillingSubscriptionsDeleteResponse> => {
      return this.client.sendOperationRequest(args, spec);
    };
    const sendOperationFn = async (
      args: coreClient.OperationArguments,
      spec: coreClient.OperationSpec,
    ) => {
      let currentRawResponse: coreClient.FullOperationResponse | undefined =
        undefined;
      const providedCallback = args.options?.onResponse;
      const callback: coreClient.RawResponseCallback = (
        rawResponse: coreClient.FullOperationResponse,
        flatResponse: unknown,
      ) => {
        currentRawResponse = rawResponse;
        providedCallback?.(rawResponse, flatResponse);
      };
      const updatedArgs = {
        ...args,
        options: {
          ...args.options,
          onResponse: callback,
        },
      };
      const flatResponse = await directSendOperation(updatedArgs, spec);
      return {
        flatResponse,
        rawResponse: {
          statusCode: currentRawResponse!.status,
          body: currentRawResponse!.parsedBody,
          headers: currentRawResponse!.headers.toJSON(),
        },
      };
    };

    const lro = createLroSpec({
      sendOperationFn,
      args: { billingAccountName, billingSubscriptionName, options },
      spec: deleteOperationSpec,
    });
    const poller = await createHttpPoller<
      BillingSubscriptionsDeleteResponse,
      OperationState<BillingSubscriptionsDeleteResponse>
    >(lro, {
      restoreFrom: options?.resumeFrom,
      intervalInMs: options?.updateIntervalInMs,
      resourceLocationConfig: "location",
    });
    await poller.poll();
    return poller;
  }

  /**
   * Cancels a billing subscription. This operation is supported only for billing accounts of type
   * Microsoft Partner Agreement or Microsoft Customer Agreement.
   * @param billingAccountName The ID that uniquely identifies a billing account.
   * @param billingSubscriptionName The ID that uniquely identifies a subscription.
   * @param options The options parameters.
   */
  async beginDeleteAndWait(
    billingAccountName: string,
    billingSubscriptionName: string,
    options?: BillingSubscriptionsDeleteOptionalParams,
  ): Promise<BillingSubscriptionsDeleteResponse> {
    const poller = await this.beginDelete(
      billingAccountName,
      billingSubscriptionName,
      options,
    );
    return poller.pollUntilDone();
  }

  /**
   * Gets a subscription by its ID. The operation is supported for billing accounts with agreement type
   * Microsoft Customer Agreement,  Microsoft Partner Agreement, and Enterprise Agreement.
   * @param billingAccountName The ID that uniquely identifies a billing account.
   * @param billingSubscriptionName The ID that uniquely identifies a subscription.
   * @param options The options parameters.
   */
  get(
    billingAccountName: string,
    billingSubscriptionName: string,
    options?: BillingSubscriptionsGetOptionalParams,
  ): Promise<BillingSubscriptionsGetResponse> {
    return this.client.sendOperationRequest(
      { billingAccountName, billingSubscriptionName, options },
      getOperationSpec,
    );
  }

  /**
   * Updates the properties of a billing subscription.
   * @param billingAccountName The ID that uniquely identifies a billing account.
   * @param billingSubscriptionName The ID that uniquely identifies a subscription.
   * @param parameters The billing properties of a subscription.
   * @param options The options parameters.
   */
  async beginUpdate(
    billingAccountName: string,
    billingSubscriptionName: string,
    parameters: BillingSubscriptionPatch,
    options?: BillingSubscriptionsUpdateOptionalParams,
  ): Promise<
    SimplePollerLike<
      OperationState<BillingSubscriptionsUpdateResponse>,
      BillingSubscriptionsUpdateResponse
    >
  > {
    const directSendOperation = async (
      args: coreClient.OperationArguments,
      spec: coreClient.OperationSpec,
    ): Promise<BillingSubscriptionsUpdateResponse> => {
      return this.client.sendOperationRequest(args, spec);
    };
    const sendOperationFn = async (
      args: coreClient.OperationArguments,
      spec: coreClient.OperationSpec,
    ) => {
      let currentRawResponse: coreClient.FullOperationResponse | undefined =
        undefined;
      const providedCallback = args.options?.onResponse;
      const callback: coreClient.RawResponseCallback = (
        rawResponse: coreClient.FullOperationResponse,
        flatResponse: unknown,
      ) => {
        currentRawResponse = rawResponse;
        providedCallback?.(rawResponse, flatResponse);
      };
      const updatedArgs = {
        ...args,
        options: {
          ...args.options,
          onResponse: callback,
        },
      };
      const flatResponse = await directSendOperation(updatedArgs, spec);
      return {
        flatResponse,
        rawResponse: {
          statusCode: currentRawResponse!.status,
          body: currentRawResponse!.parsedBody,
          headers: currentRawResponse!.headers.toJSON(),
        },
      };
    };

    const lro = createLroSpec({
      sendOperationFn,
      args: {
        billingAccountName,
        billingSubscriptionName,
        parameters,
        options,
      },
      spec: updateOperationSpec,
    });
    const poller = await createHttpPoller<
      BillingSubscriptionsUpdateResponse,
      OperationState<BillingSubscriptionsUpdateResponse>
    >(lro, {
      restoreFrom: options?.resumeFrom,
      intervalInMs: options?.updateIntervalInMs,
      resourceLocationConfig: "location",
    });
    await poller.poll();
    return poller;
  }

  /**
   * Updates the properties of a billing subscription.
   * @param billingAccountName The ID that uniquely identifies a billing account.
   * @param billingSubscriptionName The ID that uniquely identifies a subscription.
   * @param parameters The billing properties of a subscription.
   * @param options The options parameters.
   */
  async beginUpdateAndWait(
    billingAccountName: string,
    billingSubscriptionName: string,
    parameters: BillingSubscriptionPatch,
    options?: BillingSubscriptionsUpdateOptionalParams,
  ): Promise<BillingSubscriptionsUpdateResponse> {
    const poller = await this.beginUpdate(
      billingAccountName,
      billingSubscriptionName,
      parameters,
      options,
    );
    return poller.pollUntilDone();
  }

  /**
   * Lists the subscriptions for a billing account.
   * @param billingAccountName The ID that uniquely identifies a billing account.
   * @param options The options parameters.
   */
  private _listByBillingAccount(
    billingAccountName: string,
    options?: BillingSubscriptionsListByBillingAccountOptionalParams,
  ): Promise<BillingSubscriptionsListByBillingAccountResponse> {
    return this.client.sendOperationRequest(
      { billingAccountName, options },
      listByBillingAccountOperationSpec,
    );
  }

  /**
   * Lists the subscriptions for a customer at billing account level. The operation is supported only for
   * billing accounts with agreement type Microsoft Partner Agreement.
   * @param billingAccountName The ID that uniquely identifies a billing account.
   * @param customerName The ID that uniquely identifies a customer.
   * @param options The options parameters.
   */
  private _listByCustomerAtBillingAccount(
    billingAccountName: string,
    customerName: string,
    options?: BillingSubscriptionsListByCustomerAtBillingAccountOptionalParams,
  ): Promise<BillingSubscriptionsListByCustomerAtBillingAccountResponse> {
    return this.client.sendOperationRequest(
      { billingAccountName, customerName, options },
      listByCustomerAtBillingAccountOperationSpec,
    );
  }

  /**
   * Lists the subscriptions for an enrollment account. The operation is supported for billing accounts
   * with agreement type Enterprise Agreement.
   * @param billingAccountName The ID that uniquely identifies a billing account.
   * @param enrollmentAccountName The name of the enrollment account.
   * @param options The options parameters.
   */
  private _listByEnrollmentAccount(
    billingAccountName: string,
    enrollmentAccountName: string,
    options?: BillingSubscriptionsListByEnrollmentAccountOptionalParams,
  ): Promise<BillingSubscriptionsListByEnrollmentAccountResponse> {
    return this.client.sendOperationRequest(
      { billingAccountName, enrollmentAccountName, options },
      listByEnrollmentAccountOperationSpec,
    );
  }

  /**
   * ListByBillingProfileNext
   * @param billingAccountName The ID that uniquely identifies a billing account.
   * @param billingProfileName The ID that uniquely identifies a billing profile.
   * @param nextLink The nextLink from the previous successful call to the ListByBillingProfile method.
   * @param options The options parameters.
   */
  private _listByBillingProfileNext(
    billingAccountName: string,
    billingProfileName: string,
    nextLink: string,
    options?: BillingSubscriptionsListByBillingProfileNextOptionalParams,
  ): Promise<BillingSubscriptionsListByBillingProfileNextResponse> {
    return this.client.sendOperationRequest(
      { billingAccountName, billingProfileName, nextLink, options },
      listByBillingProfileNextOperationSpec,
    );
  }

  /**
   * ListByCustomerNext
   * @param billingAccountName The ID that uniquely identifies a billing account.
   * @param billingProfileName The ID that uniquely identifies a billing profile.
   * @param customerName The ID that uniquely identifies a customer.
   * @param nextLink The nextLink from the previous successful call to the ListByCustomer method.
   * @param options The options parameters.
   */
  private _listByCustomerNext(
    billingAccountName: string,
    billingProfileName: string,
    customerName: string,
    nextLink: string,
    options?: BillingSubscriptionsListByCustomerNextOptionalParams,
  ): Promise<BillingSubscriptionsListByCustomerNextResponse> {
    return this.client.sendOperationRequest(
      {
        billingAccountName,
        billingProfileName,
        customerName,
        nextLink,
        options,
      },
      listByCustomerNextOperationSpec,
    );
  }

  /**
   * ListByInvoiceSectionNext
   * @param billingAccountName The ID that uniquely identifies a billing account.
   * @param billingProfileName The ID that uniquely identifies a billing profile.
   * @param invoiceSectionName The ID that uniquely identifies an invoice section.
   * @param nextLink The nextLink from the previous successful call to the ListByInvoiceSection method.
   * @param options The options parameters.
   */
  private _listByInvoiceSectionNext(
    billingAccountName: string,
    billingProfileName: string,
    invoiceSectionName: string,
    nextLink: string,
    options?: BillingSubscriptionsListByInvoiceSectionNextOptionalParams,
  ): Promise<BillingSubscriptionsListByInvoiceSectionNextResponse> {
    return this.client.sendOperationRequest(
      {
        billingAccountName,
        billingProfileName,
        invoiceSectionName,
        nextLink,
        options,
      },
      listByInvoiceSectionNextOperationSpec,
    );
  }

  /**
   * ListByBillingAccountNext
   * @param billingAccountName The ID that uniquely identifies a billing account.
   * @param nextLink The nextLink from the previous successful call to the ListByBillingAccount method.
   * @param options The options parameters.
   */
  private _listByBillingAccountNext(
    billingAccountName: string,
    nextLink: string,
    options?: BillingSubscriptionsListByBillingAccountNextOptionalParams,
  ): Promise<BillingSubscriptionsListByBillingAccountNextResponse> {
    return this.client.sendOperationRequest(
      { billingAccountName, nextLink, options },
      listByBillingAccountNextOperationSpec,
    );
  }

  /**
   * ListByCustomerAtBillingAccountNext
   * @param billingAccountName The ID that uniquely identifies a billing account.
   * @param customerName The ID that uniquely identifies a customer.
   * @param nextLink The nextLink from the previous successful call to the ListByCustomerAtBillingAccount
   *                 method.
   * @param options The options parameters.
   */
  private _listByCustomerAtBillingAccountNext(
    billingAccountName: string,
    customerName: string,
    nextLink: string,
    options?: BillingSubscriptionsListByCustomerAtBillingAccountNextOptionalParams,
  ): Promise<BillingSubscriptionsListByCustomerAtBillingAccountNextResponse> {
    return this.client.sendOperationRequest(
      { billingAccountName, customerName, nextLink, options },
      listByCustomerAtBillingAccountNextOperationSpec,
    );
  }

  /**
   * ListByEnrollmentAccountNext
   * @param billingAccountName The ID that uniquely identifies a billing account.
   * @param enrollmentAccountName The name of the enrollment account.
   * @param nextLink The nextLink from the previous successful call to the ListByEnrollmentAccount
   *                 method.
   * @param options The options parameters.
   */
  private _listByEnrollmentAccountNext(
    billingAccountName: string,
    enrollmentAccountName: string,
    nextLink: string,
    options?: BillingSubscriptionsListByEnrollmentAccountNextOptionalParams,
  ): Promise<BillingSubscriptionsListByEnrollmentAccountNextResponse> {
    return this.client.sendOperationRequest(
      { billingAccountName, enrollmentAccountName, nextLink, options },
      listByEnrollmentAccountNextOperationSpec,
    );
  }
}
// Operation Specifications
const serializer = coreClient.createSerializer(Mappers, /* isXml */ false);

const getByBillingProfileOperationSpec: coreClient.OperationSpec = {
  path: "/providers/Microsoft.Billing/billingAccounts/{billingAccountName}/billingProfiles/{billingProfileName}/billingSubscriptions/{billingSubscriptionName}",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.BillingSubscription,
    },
    default: {
      bodyMapper: Mappers.ErrorResponse,
    },
  },
  queryParameters: [Parameters.apiVersion, Parameters.expand],
  urlParameters: [
    Parameters.$host,
    Parameters.billingAccountName1,
    Parameters.billingProfileName1,
    Parameters.billingSubscriptionName,
  ],
  headerParameters: [Parameters.accept],
  serializer,
};
const listByBillingProfileOperationSpec: coreClient.OperationSpec = {
  path: "/providers/Microsoft.Billing/billingAccounts/{billingAccountName}/billingProfiles/{billingProfileName}/billingSubscriptions",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.BillingSubscriptionListResult,
    },
    default: {
      bodyMapper: Mappers.ErrorResponse,
    },
  },
  queryParameters: [
    Parameters.apiVersion,
    Parameters.expand,
    Parameters.filter,
    Parameters.orderBy,
    Parameters.top,
    Parameters.skip,
    Parameters.count,
    Parameters.search,
    Parameters.includeDeleted,
  ],
  urlParameters: [
    Parameters.$host,
    Parameters.billingAccountName1,
    Parameters.billingProfileName1,
  ],
  headerParameters: [Parameters.accept],
  serializer,
};
const listByCustomerOperationSpec: coreClient.OperationSpec = {
  path: "/providers/Microsoft.Billing/billingAccounts/{billingAccountName}/billingProfiles/{billingProfileName}/customers/{customerName}/billingSubscriptions",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.BillingSubscriptionListResult,
    },
    default: {
      bodyMapper: Mappers.ErrorResponse,
    },
  },
  queryParameters: [
    Parameters.apiVersion,
    Parameters.expand,
    Parameters.filter,
    Parameters.orderBy,
    Parameters.top,
    Parameters.skip,
    Parameters.count,
    Parameters.search,
    Parameters.includeDeleted,
  ],
  urlParameters: [
    Parameters.$host,
    Parameters.billingAccountName1,
    Parameters.billingProfileName1,
    Parameters.customerName1,
  ],
  headerParameters: [Parameters.accept],
  serializer,
};
const listByInvoiceSectionOperationSpec: coreClient.OperationSpec = {
  path: "/providers/Microsoft.Billing/billingAccounts/{billingAccountName}/billingProfiles/{billingProfileName}/invoiceSections/{invoiceSectionName}/billingSubscriptions",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.BillingSubscriptionListResult,
    },
    default: {
      bodyMapper: Mappers.ErrorResponse,
    },
  },
  queryParameters: [
    Parameters.apiVersion,
    Parameters.expand,
    Parameters.filter,
    Parameters.orderBy,
    Parameters.top,
    Parameters.skip,
    Parameters.count,
    Parameters.search,
    Parameters.includeDeleted,
  ],
  urlParameters: [
    Parameters.$host,
    Parameters.billingAccountName1,
    Parameters.billingProfileName1,
    Parameters.invoiceSectionName1,
  ],
  headerParameters: [Parameters.accept],
  serializer,
};
const cancelOperationSpec: coreClient.OperationSpec = {
  path: "/providers/Microsoft.Billing/billingAccounts/{billingAccountName}/billingSubscriptions/{billingSubscriptionName}/cancel",
  httpMethod: "POST",
  responses: {
    200: {
      headersMapper: Mappers.BillingSubscriptionsCancelHeaders,
    },
    201: {
      headersMapper: Mappers.BillingSubscriptionsCancelHeaders,
    },
    202: {
      headersMapper: Mappers.BillingSubscriptionsCancelHeaders,
    },
    204: {
      headersMapper: Mappers.BillingSubscriptionsCancelHeaders,
    },
    default: {
      bodyMapper: Mappers.ErrorResponse,
    },
  },
  requestBody: Parameters.parameters11,
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.billingAccountName1,
    Parameters.billingSubscriptionName,
  ],
  headerParameters: [Parameters.accept, Parameters.contentType],
  mediaType: "json",
  serializer,
};
const mergeOperationSpec: coreClient.OperationSpec = {
  path: "/providers/Microsoft.Billing/billingAccounts/{billingAccountName}/billingSubscriptions/{billingSubscriptionName}/merge",
  httpMethod: "POST",
  responses: {
    200: {
      bodyMapper: Mappers.BillingSubscription,
    },
    201: {
      bodyMapper: Mappers.BillingSubscription,
    },
    202: {
      bodyMapper: Mappers.BillingSubscription,
    },
    204: {
      bodyMapper: Mappers.BillingSubscription,
    },
    default: {
      bodyMapper: Mappers.ErrorResponse,
    },
  },
  requestBody: Parameters.parameters12,
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.billingAccountName1,
    Parameters.billingSubscriptionName,
  ],
  headerParameters: [Parameters.accept, Parameters.contentType],
  mediaType: "json",
  serializer,
};
const moveOperationSpec: coreClient.OperationSpec = {
  path: "/providers/Microsoft.Billing/billingAccounts/{billingAccountName}/billingSubscriptions/{billingSubscriptionName}/move",
  httpMethod: "POST",
  responses: {
    200: {
      bodyMapper: Mappers.BillingSubscription,
    },
    201: {
      bodyMapper: Mappers.BillingSubscription,
    },
    202: {
      bodyMapper: Mappers.BillingSubscription,
    },
    204: {
      bodyMapper: Mappers.BillingSubscription,
    },
    default: {
      bodyMapper: Mappers.ErrorResponse,
    },
  },
  requestBody: Parameters.parameters13,
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.billingAccountName1,
    Parameters.billingSubscriptionName,
  ],
  headerParameters: [Parameters.accept, Parameters.contentType],
  mediaType: "json",
  serializer,
};
const splitOperationSpec: coreClient.OperationSpec = {
  path: "/providers/Microsoft.Billing/billingAccounts/{billingAccountName}/billingSubscriptions/{billingSubscriptionName}/split",
  httpMethod: "POST",
  responses: {
    200: {
      bodyMapper: Mappers.BillingSubscription,
    },
    201: {
      bodyMapper: Mappers.BillingSubscription,
    },
    202: {
      bodyMapper: Mappers.BillingSubscription,
    },
    204: {
      bodyMapper: Mappers.BillingSubscription,
    },
    default: {
      bodyMapper: Mappers.ErrorResponse,
    },
  },
  requestBody: Parameters.parameters14,
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.billingAccountName1,
    Parameters.billingSubscriptionName,
  ],
  headerParameters: [Parameters.accept, Parameters.contentType],
  mediaType: "json",
  serializer,
};
const validateMoveEligibilityOperationSpec: coreClient.OperationSpec = {
  path: "/providers/Microsoft.Billing/billingAccounts/{billingAccountName}/billingSubscriptions/{billingSubscriptionName}/validateMoveEligibility",
  httpMethod: "POST",
  responses: {
    200: {
      bodyMapper: Mappers.MoveBillingSubscriptionEligibilityResult,
    },
    default: {
      bodyMapper: Mappers.ErrorResponse,
    },
  },
  requestBody: Parameters.parameters13,
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.billingAccountName1,
    Parameters.billingSubscriptionName,
  ],
  headerParameters: [Parameters.accept, Parameters.contentType],
  mediaType: "json",
  serializer,
};
const deleteOperationSpec: coreClient.OperationSpec = {
  path: "/providers/Microsoft.Billing/billingAccounts/{billingAccountName}/billingSubscriptions/{billingSubscriptionName}",
  httpMethod: "DELETE",
  responses: {
    200: {
      headersMapper: Mappers.BillingSubscriptionsDeleteHeaders,
    },
    201: {
      headersMapper: Mappers.BillingSubscriptionsDeleteHeaders,
    },
    202: {
      headersMapper: Mappers.BillingSubscriptionsDeleteHeaders,
    },
    204: {
      headersMapper: Mappers.BillingSubscriptionsDeleteHeaders,
    },
    default: {
      bodyMapper: Mappers.ErrorResponse,
    },
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.billingAccountName1,
    Parameters.billingSubscriptionName,
  ],
  headerParameters: [Parameters.accept],
  serializer,
};
const getOperationSpec: coreClient.OperationSpec = {
  path: "/providers/Microsoft.Billing/billingAccounts/{billingAccountName}/billingSubscriptions/{billingSubscriptionName}",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.BillingSubscription,
    },
    default: {
      bodyMapper: Mappers.ErrorResponse,
    },
  },
  queryParameters: [Parameters.apiVersion, Parameters.expand],
  urlParameters: [
    Parameters.$host,
    Parameters.billingAccountName1,
    Parameters.billingSubscriptionName,
  ],
  headerParameters: [Parameters.accept],
  serializer,
};
const updateOperationSpec: coreClient.OperationSpec = {
  path: "/providers/Microsoft.Billing/billingAccounts/{billingAccountName}/billingSubscriptions/{billingSubscriptionName}",
  httpMethod: "PATCH",
  responses: {
    200: {
      bodyMapper: Mappers.BillingSubscription,
    },
    201: {
      bodyMapper: Mappers.BillingSubscription,
    },
    202: {
      bodyMapper: Mappers.BillingSubscription,
    },
    204: {
      bodyMapper: Mappers.BillingSubscription,
    },
    default: {
      bodyMapper: Mappers.ErrorResponse,
    },
  },
  requestBody: Parameters.parameters15,
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.billingAccountName1,
    Parameters.billingSubscriptionName,
  ],
  headerParameters: [Parameters.accept, Parameters.contentType],
  mediaType: "json",
  serializer,
};
const listByBillingAccountOperationSpec: coreClient.OperationSpec = {
  path: "/providers/Microsoft.Billing/billingAccounts/{billingAccountName}/billingSubscriptions",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.BillingSubscriptionListResult,
    },
    default: {
      bodyMapper: Mappers.ErrorResponse,
    },
  },
  queryParameters: [
    Parameters.apiVersion,
    Parameters.expand,
    Parameters.filter,
    Parameters.orderBy,
    Parameters.top,
    Parameters.skip,
    Parameters.count,
    Parameters.search,
    Parameters.includeDeleted,
    Parameters.includeTenantSubscriptions,
    Parameters.includeFailed,
  ],
  urlParameters: [Parameters.$host, Parameters.billingAccountName1],
  headerParameters: [Parameters.accept],
  serializer,
};
const listByCustomerAtBillingAccountOperationSpec: coreClient.OperationSpec = {
  path: "/providers/Microsoft.Billing/billingAccounts/{billingAccountName}/customers/{customerName}/billingSubscriptions",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.BillingSubscriptionListResult,
    },
    default: {
      bodyMapper: Mappers.ErrorResponse,
    },
  },
  queryParameters: [
    Parameters.apiVersion,
    Parameters.expand,
    Parameters.filter,
    Parameters.orderBy,
    Parameters.top,
    Parameters.skip,
    Parameters.count,
    Parameters.search,
    Parameters.includeDeleted,
  ],
  urlParameters: [
    Parameters.$host,
    Parameters.billingAccountName1,
    Parameters.customerName1,
  ],
  headerParameters: [Parameters.accept],
  serializer,
};
const listByEnrollmentAccountOperationSpec: coreClient.OperationSpec = {
  path: "/providers/Microsoft.Billing/billingAccounts/{billingAccountName}/enrollmentAccounts/{enrollmentAccountName}/billingSubscriptions",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.BillingSubscriptionListResult,
    },
    default: {
      bodyMapper: Mappers.ErrorResponse,
    },
  },
  queryParameters: [
    Parameters.apiVersion,
    Parameters.filter,
    Parameters.orderBy,
    Parameters.top,
    Parameters.skip,
    Parameters.count,
    Parameters.search,
  ],
  urlParameters: [
    Parameters.$host,
    Parameters.enrollmentAccountName,
    Parameters.billingAccountName1,
  ],
  headerParameters: [Parameters.accept],
  serializer,
};
const listByBillingProfileNextOperationSpec: coreClient.OperationSpec = {
  path: "{nextLink}",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.BillingSubscriptionListResult,
    },
    default: {
      bodyMapper: Mappers.ErrorResponse,
    },
  },
  urlParameters: [
    Parameters.$host,
    Parameters.nextLink,
    Parameters.billingAccountName1,
    Parameters.billingProfileName1,
  ],
  headerParameters: [Parameters.accept],
  serializer,
};
const listByCustomerNextOperationSpec: coreClient.OperationSpec = {
  path: "{nextLink}",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.BillingSubscriptionListResult,
    },
    default: {
      bodyMapper: Mappers.ErrorResponse,
    },
  },
  urlParameters: [
    Parameters.$host,
    Parameters.nextLink,
    Parameters.billingAccountName1,
    Parameters.billingProfileName1,
    Parameters.customerName1,
  ],
  headerParameters: [Parameters.accept],
  serializer,
};
const listByInvoiceSectionNextOperationSpec: coreClient.OperationSpec = {
  path: "{nextLink}",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.BillingSubscriptionListResult,
    },
    default: {
      bodyMapper: Mappers.ErrorResponse,
    },
  },
  urlParameters: [
    Parameters.$host,
    Parameters.nextLink,
    Parameters.billingAccountName1,
    Parameters.billingProfileName1,
    Parameters.invoiceSectionName1,
  ],
  headerParameters: [Parameters.accept],
  serializer,
};
const listByBillingAccountNextOperationSpec: coreClient.OperationSpec = {
  path: "{nextLink}",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.BillingSubscriptionListResult,
    },
    default: {
      bodyMapper: Mappers.ErrorResponse,
    },
  },
  urlParameters: [
    Parameters.$host,
    Parameters.nextLink,
    Parameters.billingAccountName1,
  ],
  headerParameters: [Parameters.accept],
  serializer,
};
const listByCustomerAtBillingAccountNextOperationSpec: coreClient.OperationSpec =
  {
    path: "{nextLink}",
    httpMethod: "GET",
    responses: {
      200: {
        bodyMapper: Mappers.BillingSubscriptionListResult,
      },
      default: {
        bodyMapper: Mappers.ErrorResponse,
      },
    },
    urlParameters: [
      Parameters.$host,
      Parameters.nextLink,
      Parameters.billingAccountName1,
      Parameters.customerName1,
    ],
    headerParameters: [Parameters.accept],
    serializer,
  };
const listByEnrollmentAccountNextOperationSpec: coreClient.OperationSpec = {
  path: "{nextLink}",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.BillingSubscriptionListResult,
    },
    default: {
      bodyMapper: Mappers.ErrorResponse,
    },
  },
  urlParameters: [
    Parameters.$host,
    Parameters.nextLink,
    Parameters.enrollmentAccountName,
    Parameters.billingAccountName1,
  ],
  headerParameters: [Parameters.accept],
  serializer,
};
