/*
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is
 * regenerated.
 */

import * as coreHttp from "@azure/core-http";
import * as coreArm from "@azure/core-arm";
import * as Models from "../models";
import * as Mappers from "../models/billingSubscriptionsMappers";
import * as Parameters from "../models/parameters";
import { BillingManagementClientContext } from "../billingManagementClientContext";

/** Class representing a BillingSubscriptions. */
export class BillingSubscriptions {
  private readonly client: BillingManagementClientContext;

  /**
   * Create a BillingSubscriptions.
   * @param {BillingManagementClientContext} client Reference to the service client.
   */
  constructor(client: BillingManagementClientContext) {
    this.client = client;
  }

  /**
   * Lists billing subscriptions by billing account name.
   * @param billingAccountName Billing Account Id.
   * @param [options] The optional parameters
   * @returns Promise<Models.BillingSubscriptionsListByBillingAccountNameResponse>
   */
  listByBillingAccountName(billingAccountName: string, options?: coreHttp.RequestOptionsBase): Promise<Models.BillingSubscriptionsListByBillingAccountNameResponse>;
  /**
   * @param billingAccountName Billing Account Id.
   * @param callback The callback
   */
  listByBillingAccountName(billingAccountName: string, callback: coreHttp.ServiceCallback<Models.BillingSubscriptionsListResult>): void;
  /**
   * @param billingAccountName Billing Account Id.
   * @param options The optional parameters
   * @param callback The callback
   */
  listByBillingAccountName(billingAccountName: string, options: coreHttp.RequestOptionsBase, callback: coreHttp.ServiceCallback<Models.BillingSubscriptionsListResult>): void;
  listByBillingAccountName(billingAccountName: string, options?: coreHttp.RequestOptionsBase | coreHttp.ServiceCallback<Models.BillingSubscriptionsListResult>, callback?: coreHttp.ServiceCallback<Models.BillingSubscriptionsListResult>): Promise<Models.BillingSubscriptionsListByBillingAccountNameResponse> {
    return this.client.sendOperationRequest(
      {
        billingAccountName,
        options
      },
      listByBillingAccountNameOperationSpec,
      callback) as Promise<Models.BillingSubscriptionsListByBillingAccountNameResponse>;
  }

  /**
   * Lists billing subscriptions by billing profile name.
   * @param billingAccountName Billing Account Id.
   * @param billingProfileName Billing Profile Id.
   * @param [options] The optional parameters
   * @returns Promise<Models.BillingSubscriptionsListByBillingProfileNameResponse>
   */
  listByBillingProfileName(billingAccountName: string, billingProfileName: string, options?: coreHttp.RequestOptionsBase): Promise<Models.BillingSubscriptionsListByBillingProfileNameResponse>;
  /**
   * @param billingAccountName Billing Account Id.
   * @param billingProfileName Billing Profile Id.
   * @param callback The callback
   */
  listByBillingProfileName(billingAccountName: string, billingProfileName: string, callback: coreHttp.ServiceCallback<Models.BillingSubscriptionsListResult>): void;
  /**
   * @param billingAccountName Billing Account Id.
   * @param billingProfileName Billing Profile Id.
   * @param options The optional parameters
   * @param callback The callback
   */
  listByBillingProfileName(billingAccountName: string, billingProfileName: string, options: coreHttp.RequestOptionsBase, callback: coreHttp.ServiceCallback<Models.BillingSubscriptionsListResult>): void;
  listByBillingProfileName(billingAccountName: string, billingProfileName: string, options?: coreHttp.RequestOptionsBase | coreHttp.ServiceCallback<Models.BillingSubscriptionsListResult>, callback?: coreHttp.ServiceCallback<Models.BillingSubscriptionsListResult>): Promise<Models.BillingSubscriptionsListByBillingProfileNameResponse> {
    return this.client.sendOperationRequest(
      {
        billingAccountName,
        billingProfileName,
        options
      },
      listByBillingProfileNameOperationSpec,
      callback) as Promise<Models.BillingSubscriptionsListByBillingProfileNameResponse>;
  }

  /**
   * Lists billing subscription by customer name.
   * @param billingAccountName Billing Account Id.
   * @param customerName Customer Id.
   * @param [options] The optional parameters
   * @returns Promise<Models.BillingSubscriptionsListByCustomerNameResponse>
   */
  listByCustomerName(billingAccountName: string, customerName: string, options?: coreHttp.RequestOptionsBase): Promise<Models.BillingSubscriptionsListByCustomerNameResponse>;
  /**
   * @param billingAccountName Billing Account Id.
   * @param customerName Customer Id.
   * @param callback The callback
   */
  listByCustomerName(billingAccountName: string, customerName: string, callback: coreHttp.ServiceCallback<Models.BillingSubscriptionsListResult>): void;
  /**
   * @param billingAccountName Billing Account Id.
   * @param customerName Customer Id.
   * @param options The optional parameters
   * @param callback The callback
   */
  listByCustomerName(billingAccountName: string, customerName: string, options: coreHttp.RequestOptionsBase, callback: coreHttp.ServiceCallback<Models.BillingSubscriptionsListResult>): void;
  listByCustomerName(billingAccountName: string, customerName: string, options?: coreHttp.RequestOptionsBase | coreHttp.ServiceCallback<Models.BillingSubscriptionsListResult>, callback?: coreHttp.ServiceCallback<Models.BillingSubscriptionsListResult>): Promise<Models.BillingSubscriptionsListByCustomerNameResponse> {
    return this.client.sendOperationRequest(
      {
        billingAccountName,
        customerName,
        options
      },
      listByCustomerNameOperationSpec,
      callback) as Promise<Models.BillingSubscriptionsListByCustomerNameResponse>;
  }

  /**
   * Get a single billing subscription by name.
   * @param billingAccountName Billing Account Id.
   * @param customerName Customer Id.
   * @param billingSubscriptionName Billing Subscription Id.
   * @param [options] The optional parameters
   * @returns Promise<Models.BillingSubscriptionsGetByCustomerNameResponse>
   */
  getByCustomerName(billingAccountName: string, customerName: string, billingSubscriptionName: string, options?: coreHttp.RequestOptionsBase): Promise<Models.BillingSubscriptionsGetByCustomerNameResponse>;
  /**
   * @param billingAccountName Billing Account Id.
   * @param customerName Customer Id.
   * @param billingSubscriptionName Billing Subscription Id.
   * @param callback The callback
   */
  getByCustomerName(billingAccountName: string, customerName: string, billingSubscriptionName: string, callback: coreHttp.ServiceCallback<Models.BillingSubscriptionSummary>): void;
  /**
   * @param billingAccountName Billing Account Id.
   * @param customerName Customer Id.
   * @param billingSubscriptionName Billing Subscription Id.
   * @param options The optional parameters
   * @param callback The callback
   */
  getByCustomerName(billingAccountName: string, customerName: string, billingSubscriptionName: string, options: coreHttp.RequestOptionsBase, callback: coreHttp.ServiceCallback<Models.BillingSubscriptionSummary>): void;
  getByCustomerName(billingAccountName: string, customerName: string, billingSubscriptionName: string, options?: coreHttp.RequestOptionsBase | coreHttp.ServiceCallback<Models.BillingSubscriptionSummary>, callback?: coreHttp.ServiceCallback<Models.BillingSubscriptionSummary>): Promise<Models.BillingSubscriptionsGetByCustomerNameResponse> {
    return this.client.sendOperationRequest(
      {
        billingAccountName,
        customerName,
        billingSubscriptionName,
        options
      },
      getByCustomerNameOperationSpec,
      callback) as Promise<Models.BillingSubscriptionsGetByCustomerNameResponse>;
  }

  /**
   * Lists billing subscription by invoice section name.
   * @param billingAccountName Billing Account Id.
   * @param invoiceSectionName InvoiceSection Id.
   * @param [options] The optional parameters
   * @returns Promise<Models.BillingSubscriptionsListByInvoiceSectionNameResponse>
   */
  listByInvoiceSectionName(billingAccountName: string, invoiceSectionName: string, options?: coreHttp.RequestOptionsBase): Promise<Models.BillingSubscriptionsListByInvoiceSectionNameResponse>;
  /**
   * @param billingAccountName Billing Account Id.
   * @param invoiceSectionName InvoiceSection Id.
   * @param callback The callback
   */
  listByInvoiceSectionName(billingAccountName: string, invoiceSectionName: string, callback: coreHttp.ServiceCallback<Models.BillingSubscriptionsListResult>): void;
  /**
   * @param billingAccountName Billing Account Id.
   * @param invoiceSectionName InvoiceSection Id.
   * @param options The optional parameters
   * @param callback The callback
   */
  listByInvoiceSectionName(billingAccountName: string, invoiceSectionName: string, options: coreHttp.RequestOptionsBase, callback: coreHttp.ServiceCallback<Models.BillingSubscriptionsListResult>): void;
  listByInvoiceSectionName(billingAccountName: string, invoiceSectionName: string, options?: coreHttp.RequestOptionsBase | coreHttp.ServiceCallback<Models.BillingSubscriptionsListResult>, callback?: coreHttp.ServiceCallback<Models.BillingSubscriptionsListResult>): Promise<Models.BillingSubscriptionsListByInvoiceSectionNameResponse> {
    return this.client.sendOperationRequest(
      {
        billingAccountName,
        invoiceSectionName,
        options
      },
      listByInvoiceSectionNameOperationSpec,
      callback) as Promise<Models.BillingSubscriptionsListByInvoiceSectionNameResponse>;
  }

  /**
   * Get a single billing subscription by name.
   * @param billingAccountName Billing Account Id.
   * @param invoiceSectionName InvoiceSection Id.
   * @param billingSubscriptionName Billing Subscription Id.
   * @param [options] The optional parameters
   * @returns Promise<Models.BillingSubscriptionsGetResponse>
   */
  get(billingAccountName: string, invoiceSectionName: string, billingSubscriptionName: string, options?: coreHttp.RequestOptionsBase): Promise<Models.BillingSubscriptionsGetResponse>;
  /**
   * @param billingAccountName Billing Account Id.
   * @param invoiceSectionName InvoiceSection Id.
   * @param billingSubscriptionName Billing Subscription Id.
   * @param callback The callback
   */
  get(billingAccountName: string, invoiceSectionName: string, billingSubscriptionName: string, callback: coreHttp.ServiceCallback<Models.BillingSubscriptionSummary>): void;
  /**
   * @param billingAccountName Billing Account Id.
   * @param invoiceSectionName InvoiceSection Id.
   * @param billingSubscriptionName Billing Subscription Id.
   * @param options The optional parameters
   * @param callback The callback
   */
  get(billingAccountName: string, invoiceSectionName: string, billingSubscriptionName: string, options: coreHttp.RequestOptionsBase, callback: coreHttp.ServiceCallback<Models.BillingSubscriptionSummary>): void;
  get(billingAccountName: string, invoiceSectionName: string, billingSubscriptionName: string, options?: coreHttp.RequestOptionsBase | coreHttp.ServiceCallback<Models.BillingSubscriptionSummary>, callback?: coreHttp.ServiceCallback<Models.BillingSubscriptionSummary>): Promise<Models.BillingSubscriptionsGetResponse> {
    return this.client.sendOperationRequest(
      {
        billingAccountName,
        invoiceSectionName,
        billingSubscriptionName,
        options
      },
      getOperationSpec,
      callback) as Promise<Models.BillingSubscriptionsGetResponse>;
  }

  /**
   * Transfers the subscription from one invoice section to another within a billing account.
   * @param billingAccountName Billing Account Id.
   * @param invoiceSectionName InvoiceSection Id.
   * @param billingSubscriptionName Billing Subscription Id.
   * @param parameters Parameters supplied to the Transfer Billing Subscription operation.
   * @param [options] The optional parameters
   * @returns Promise<Models.BillingSubscriptionsTransferResponse>
   */
  transfer(billingAccountName: string, invoiceSectionName: string, billingSubscriptionName: string, parameters: Models.TransferBillingSubscriptionRequestProperties, options?: coreHttp.RequestOptionsBase): Promise<Models.BillingSubscriptionsTransferResponse> {
    return this.beginTransfer(billingAccountName,invoiceSectionName,billingSubscriptionName,parameters,options)
      .then(lroPoller => lroPoller.pollUntilFinished()) as Promise<Models.BillingSubscriptionsTransferResponse>;
  }

  /**
   * Validates the transfer of billing subscriptions across invoice sections.
   * @param billingAccountName Billing Account Id.
   * @param invoiceSectionName InvoiceSection Id.
   * @param billingSubscriptionName Billing Subscription Id.
   * @param parameters Parameters supplied to the Transfer Billing Subscription operation.
   * @param [options] The optional parameters
   * @returns Promise<Models.BillingSubscriptionsValidateTransferResponse>
   */
  validateTransfer(billingAccountName: string, invoiceSectionName: string, billingSubscriptionName: string, parameters: Models.TransferBillingSubscriptionRequestProperties, options?: coreHttp.RequestOptionsBase): Promise<Models.BillingSubscriptionsValidateTransferResponse>;
  /**
   * @param billingAccountName Billing Account Id.
   * @param invoiceSectionName InvoiceSection Id.
   * @param billingSubscriptionName Billing Subscription Id.
   * @param parameters Parameters supplied to the Transfer Billing Subscription operation.
   * @param callback The callback
   */
  validateTransfer(billingAccountName: string, invoiceSectionName: string, billingSubscriptionName: string, parameters: Models.TransferBillingSubscriptionRequestProperties, callback: coreHttp.ServiceCallback<Models.ValidateSubscriptionTransferEligibilityResult>): void;
  /**
   * @param billingAccountName Billing Account Id.
   * @param invoiceSectionName InvoiceSection Id.
   * @param billingSubscriptionName Billing Subscription Id.
   * @param parameters Parameters supplied to the Transfer Billing Subscription operation.
   * @param options The optional parameters
   * @param callback The callback
   */
  validateTransfer(billingAccountName: string, invoiceSectionName: string, billingSubscriptionName: string, parameters: Models.TransferBillingSubscriptionRequestProperties, options: coreHttp.RequestOptionsBase, callback: coreHttp.ServiceCallback<Models.ValidateSubscriptionTransferEligibilityResult>): void;
  validateTransfer(billingAccountName: string, invoiceSectionName: string, billingSubscriptionName: string, parameters: Models.TransferBillingSubscriptionRequestProperties, options?: coreHttp.RequestOptionsBase | coreHttp.ServiceCallback<Models.ValidateSubscriptionTransferEligibilityResult>, callback?: coreHttp.ServiceCallback<Models.ValidateSubscriptionTransferEligibilityResult>): Promise<Models.BillingSubscriptionsValidateTransferResponse> {
    return this.client.sendOperationRequest(
      {
        billingAccountName,
        invoiceSectionName,
        billingSubscriptionName,
        parameters,
        options
      },
      validateTransferOperationSpec,
      callback) as Promise<Models.BillingSubscriptionsValidateTransferResponse>;
  }

  /**
   * Transfers the subscription from one invoice section to another within a billing account.
   * @param billingAccountName Billing Account Id.
   * @param invoiceSectionName InvoiceSection Id.
   * @param billingSubscriptionName Billing Subscription Id.
   * @param parameters Parameters supplied to the Transfer Billing Subscription operation.
   * @param [options] The optional parameters
   * @returns Promise<coreArm.LROPoller>
   */
  beginTransfer(billingAccountName: string, invoiceSectionName: string, billingSubscriptionName: string, parameters: Models.TransferBillingSubscriptionRequestProperties, options?: coreHttp.RequestOptionsBase): Promise<coreArm.LROPoller> {
    return this.client.sendLRORequest(
      {
        billingAccountName,
        invoiceSectionName,
        billingSubscriptionName,
        parameters,
        options
      },
      beginTransferOperationSpec,
      options);
  }

  /**
   * Lists billing subscriptions by billing account name.
   * @param nextPageLink The NextLink from the previous successful call to List operation.
   * @param [options] The optional parameters
   * @returns Promise<Models.BillingSubscriptionsListByBillingAccountNameNextResponse>
   */
  listByBillingAccountNameNext(nextPageLink: string, options?: coreHttp.RequestOptionsBase): Promise<Models.BillingSubscriptionsListByBillingAccountNameNextResponse>;
  /**
   * @param nextPageLink The NextLink from the previous successful call to List operation.
   * @param callback The callback
   */
  listByBillingAccountNameNext(nextPageLink: string, callback: coreHttp.ServiceCallback<Models.BillingSubscriptionsListResult>): void;
  /**
   * @param nextPageLink The NextLink from the previous successful call to List operation.
   * @param options The optional parameters
   * @param callback The callback
   */
  listByBillingAccountNameNext(nextPageLink: string, options: coreHttp.RequestOptionsBase, callback: coreHttp.ServiceCallback<Models.BillingSubscriptionsListResult>): void;
  listByBillingAccountNameNext(nextPageLink: string, options?: coreHttp.RequestOptionsBase | coreHttp.ServiceCallback<Models.BillingSubscriptionsListResult>, callback?: coreHttp.ServiceCallback<Models.BillingSubscriptionsListResult>): Promise<Models.BillingSubscriptionsListByBillingAccountNameNextResponse> {
    return this.client.sendOperationRequest(
      {
        nextPageLink,
        options
      },
      listByBillingAccountNameNextOperationSpec,
      callback) as Promise<Models.BillingSubscriptionsListByBillingAccountNameNextResponse>;
  }

  /**
   * Lists billing subscriptions by billing profile name.
   * @param nextPageLink The NextLink from the previous successful call to List operation.
   * @param [options] The optional parameters
   * @returns Promise<Models.BillingSubscriptionsListByBillingProfileNameNextResponse>
   */
  listByBillingProfileNameNext(nextPageLink: string, options?: coreHttp.RequestOptionsBase): Promise<Models.BillingSubscriptionsListByBillingProfileNameNextResponse>;
  /**
   * @param nextPageLink The NextLink from the previous successful call to List operation.
   * @param callback The callback
   */
  listByBillingProfileNameNext(nextPageLink: string, callback: coreHttp.ServiceCallback<Models.BillingSubscriptionsListResult>): void;
  /**
   * @param nextPageLink The NextLink from the previous successful call to List operation.
   * @param options The optional parameters
   * @param callback The callback
   */
  listByBillingProfileNameNext(nextPageLink: string, options: coreHttp.RequestOptionsBase, callback: coreHttp.ServiceCallback<Models.BillingSubscriptionsListResult>): void;
  listByBillingProfileNameNext(nextPageLink: string, options?: coreHttp.RequestOptionsBase | coreHttp.ServiceCallback<Models.BillingSubscriptionsListResult>, callback?: coreHttp.ServiceCallback<Models.BillingSubscriptionsListResult>): Promise<Models.BillingSubscriptionsListByBillingProfileNameNextResponse> {
    return this.client.sendOperationRequest(
      {
        nextPageLink,
        options
      },
      listByBillingProfileNameNextOperationSpec,
      callback) as Promise<Models.BillingSubscriptionsListByBillingProfileNameNextResponse>;
  }

  /**
   * Lists billing subscription by customer name.
   * @param nextPageLink The NextLink from the previous successful call to List operation.
   * @param [options] The optional parameters
   * @returns Promise<Models.BillingSubscriptionsListByCustomerNameNextResponse>
   */
  listByCustomerNameNext(nextPageLink: string, options?: coreHttp.RequestOptionsBase): Promise<Models.BillingSubscriptionsListByCustomerNameNextResponse>;
  /**
   * @param nextPageLink The NextLink from the previous successful call to List operation.
   * @param callback The callback
   */
  listByCustomerNameNext(nextPageLink: string, callback: coreHttp.ServiceCallback<Models.BillingSubscriptionsListResult>): void;
  /**
   * @param nextPageLink The NextLink from the previous successful call to List operation.
   * @param options The optional parameters
   * @param callback The callback
   */
  listByCustomerNameNext(nextPageLink: string, options: coreHttp.RequestOptionsBase, callback: coreHttp.ServiceCallback<Models.BillingSubscriptionsListResult>): void;
  listByCustomerNameNext(nextPageLink: string, options?: coreHttp.RequestOptionsBase | coreHttp.ServiceCallback<Models.BillingSubscriptionsListResult>, callback?: coreHttp.ServiceCallback<Models.BillingSubscriptionsListResult>): Promise<Models.BillingSubscriptionsListByCustomerNameNextResponse> {
    return this.client.sendOperationRequest(
      {
        nextPageLink,
        options
      },
      listByCustomerNameNextOperationSpec,
      callback) as Promise<Models.BillingSubscriptionsListByCustomerNameNextResponse>;
  }

  /**
   * Lists billing subscription by invoice section name.
   * @param nextPageLink The NextLink from the previous successful call to List operation.
   * @param [options] The optional parameters
   * @returns Promise<Models.BillingSubscriptionsListByInvoiceSectionNameNextResponse>
   */
  listByInvoiceSectionNameNext(nextPageLink: string, options?: coreHttp.RequestOptionsBase): Promise<Models.BillingSubscriptionsListByInvoiceSectionNameNextResponse>;
  /**
   * @param nextPageLink The NextLink from the previous successful call to List operation.
   * @param callback The callback
   */
  listByInvoiceSectionNameNext(nextPageLink: string, callback: coreHttp.ServiceCallback<Models.BillingSubscriptionsListResult>): void;
  /**
   * @param nextPageLink The NextLink from the previous successful call to List operation.
   * @param options The optional parameters
   * @param callback The callback
   */
  listByInvoiceSectionNameNext(nextPageLink: string, options: coreHttp.RequestOptionsBase, callback: coreHttp.ServiceCallback<Models.BillingSubscriptionsListResult>): void;
  listByInvoiceSectionNameNext(nextPageLink: string, options?: coreHttp.RequestOptionsBase | coreHttp.ServiceCallback<Models.BillingSubscriptionsListResult>, callback?: coreHttp.ServiceCallback<Models.BillingSubscriptionsListResult>): Promise<Models.BillingSubscriptionsListByInvoiceSectionNameNextResponse> {
    return this.client.sendOperationRequest(
      {
        nextPageLink,
        options
      },
      listByInvoiceSectionNameNextOperationSpec,
      callback) as Promise<Models.BillingSubscriptionsListByInvoiceSectionNameNextResponse>;
  }
}

// Operation Specifications
const serializer = new coreHttp.Serializer(Mappers);
const listByBillingAccountNameOperationSpec: coreHttp.OperationSpec = {
  httpMethod: "GET",
  path: "providers/Microsoft.Billing/billingAccounts/{billingAccountName}/billingSubscriptions",
  urlParameters: [
    Parameters.billingAccountName
  ],
  queryParameters: [
    Parameters.apiVersion
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    200: {
      bodyMapper: Mappers.BillingSubscriptionsListResult
    },
    default: {
      bodyMapper: Mappers.ErrorResponse
    }
  },
  serializer
};

const listByBillingProfileNameOperationSpec: coreHttp.OperationSpec = {
  httpMethod: "GET",
  path: "providers/Microsoft.Billing/billingAccounts/{billingAccountName}/billingProfiles/{billingProfileName}/billingSubscriptions",
  urlParameters: [
    Parameters.billingAccountName,
    Parameters.billingProfileName
  ],
  queryParameters: [
    Parameters.apiVersion
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    200: {
      bodyMapper: Mappers.BillingSubscriptionsListResult
    },
    default: {
      bodyMapper: Mappers.ErrorResponse
    }
  },
  serializer
};

const listByCustomerNameOperationSpec: coreHttp.OperationSpec = {
  httpMethod: "GET",
  path: "providers/Microsoft.Billing/billingAccounts/{billingAccountName}/customers/{customerName}/billingSubscriptions",
  urlParameters: [
    Parameters.billingAccountName,
    Parameters.customerName
  ],
  queryParameters: [
    Parameters.apiVersion
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    200: {
      bodyMapper: Mappers.BillingSubscriptionsListResult
    },
    default: {
      bodyMapper: Mappers.ErrorResponse
    }
  },
  serializer
};

const getByCustomerNameOperationSpec: coreHttp.OperationSpec = {
  httpMethod: "GET",
  path: "providers/Microsoft.Billing/billingAccounts/{billingAccountName}/customers/{customerName}/billingSubscriptions/{billingSubscriptionName}",
  urlParameters: [
    Parameters.billingAccountName,
    Parameters.customerName,
    Parameters.billingSubscriptionName
  ],
  queryParameters: [
    Parameters.apiVersion
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    200: {
      bodyMapper: Mappers.BillingSubscriptionSummary
    },
    default: {
      bodyMapper: Mappers.ErrorResponse
    }
  },
  serializer
};

const listByInvoiceSectionNameOperationSpec: coreHttp.OperationSpec = {
  httpMethod: "GET",
  path: "providers/Microsoft.Billing/billingAccounts/{billingAccountName}/invoiceSections/{invoiceSectionName}/billingSubscriptions",
  urlParameters: [
    Parameters.billingAccountName,
    Parameters.invoiceSectionName
  ],
  queryParameters: [
    Parameters.apiVersion
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    200: {
      bodyMapper: Mappers.BillingSubscriptionsListResult
    },
    default: {
      bodyMapper: Mappers.ErrorResponse
    }
  },
  serializer
};

const getOperationSpec: coreHttp.OperationSpec = {
  httpMethod: "GET",
  path: "providers/Microsoft.Billing/billingAccounts/{billingAccountName}/invoiceSections/{invoiceSectionName}/billingSubscriptions/{billingSubscriptionName}",
  urlParameters: [
    Parameters.billingAccountName,
    Parameters.invoiceSectionName,
    Parameters.billingSubscriptionName
  ],
  queryParameters: [
    Parameters.apiVersion
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    200: {
      bodyMapper: Mappers.BillingSubscriptionSummary
    },
    default: {
      bodyMapper: Mappers.ErrorResponse
    }
  },
  serializer
};

const validateTransferOperationSpec: coreHttp.OperationSpec = {
  httpMethod: "POST",
  path: "providers/Microsoft.Billing/billingAccounts/{billingAccountName}/invoiceSections/{invoiceSectionName}/billingSubscriptions/{billingSubscriptionName}/validateTransferEligibility",
  urlParameters: [
    Parameters.billingAccountName,
    Parameters.invoiceSectionName,
    Parameters.billingSubscriptionName
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  requestBody: {
    parameterPath: "parameters",
    mapper: {
      ...Mappers.TransferBillingSubscriptionRequestProperties,
      required: true
    }
  },
  responses: {
    200: {
      bodyMapper: Mappers.ValidateSubscriptionTransferEligibilityResult
    },
    default: {
      bodyMapper: Mappers.ErrorResponse
    }
  },
  serializer
};

const beginTransferOperationSpec: coreHttp.OperationSpec = {
  httpMethod: "POST",
  path: "providers/Microsoft.Billing/billingAccounts/{billingAccountName}/invoiceSections/{invoiceSectionName}/billingSubscriptions/{billingSubscriptionName}/transfer",
  urlParameters: [
    Parameters.billingAccountName,
    Parameters.invoiceSectionName,
    Parameters.billingSubscriptionName
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  requestBody: {
    parameterPath: "parameters",
    mapper: {
      ...Mappers.TransferBillingSubscriptionRequestProperties,
      required: true
    }
  },
  responses: {
    200: {
      bodyMapper: Mappers.TransferBillingSubscriptionResult,
      headersMapper: Mappers.BillingSubscriptionsTransferHeaders
    },
    202: {
      headersMapper: Mappers.BillingSubscriptionsTransferHeaders
    },
    default: {
      bodyMapper: Mappers.ErrorResponse
    }
  },
  serializer
};

const listByBillingAccountNameNextOperationSpec: coreHttp.OperationSpec = {
  httpMethod: "GET",
  baseUrl: "https://management.azure.com",
  path: "{nextLink}",
  urlParameters: [
    Parameters.nextPageLink
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    200: {
      bodyMapper: Mappers.BillingSubscriptionsListResult
    },
    default: {
      bodyMapper: Mappers.ErrorResponse
    }
  },
  serializer
};

const listByBillingProfileNameNextOperationSpec: coreHttp.OperationSpec = {
  httpMethod: "GET",
  baseUrl: "https://management.azure.com",
  path: "{nextLink}",
  urlParameters: [
    Parameters.nextPageLink
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    200: {
      bodyMapper: Mappers.BillingSubscriptionsListResult
    },
    default: {
      bodyMapper: Mappers.ErrorResponse
    }
  },
  serializer
};

const listByCustomerNameNextOperationSpec: coreHttp.OperationSpec = {
  httpMethod: "GET",
  baseUrl: "https://management.azure.com",
  path: "{nextLink}",
  urlParameters: [
    Parameters.nextPageLink
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    200: {
      bodyMapper: Mappers.BillingSubscriptionsListResult
    },
    default: {
      bodyMapper: Mappers.ErrorResponse
    }
  },
  serializer
};

const listByInvoiceSectionNameNextOperationSpec: coreHttp.OperationSpec = {
  httpMethod: "GET",
  baseUrl: "https://management.azure.com",
  path: "{nextLink}",
  urlParameters: [
    Parameters.nextPageLink
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    200: {
      bodyMapper: Mappers.BillingSubscriptionsListResult
    },
    default: {
      bodyMapper: Mappers.ErrorResponse
    }
  },
  serializer
};
