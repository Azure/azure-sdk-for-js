/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */

import * as coreClient from "@azure/core-client";
import * as coreAuth from "@azure/core-auth";
import {
  BillingAccountsImpl,
  AddressImpl,
  AvailableBalancesImpl,
  InstructionsImpl,
  BillingProfilesImpl,
  CustomersImpl,
  InvoiceSectionsImpl,
  BillingPermissionsImpl,
  BillingSubscriptionsImpl,
  ProductsImpl,
  InvoicesImpl,
  TransactionsImpl,
  PoliciesImpl,
  BillingPropertyOperationsImpl,
  OperationsImpl,
  BillingRoleDefinitionsImpl,
  BillingRoleAssignmentsImpl,
  AgreementsImpl,
  ReservationsImpl,
  EnrollmentAccountsImpl,
  BillingPeriodsImpl
} from "./operations";
import {
  BillingAccounts,
  Address,
  AvailableBalances,
  Instructions,
  BillingProfiles,
  Customers,
  InvoiceSections,
  BillingPermissions,
  BillingSubscriptions,
  Products,
  Invoices,
  Transactions,
  Policies,
  BillingPropertyOperations,
  Operations,
  BillingRoleDefinitions,
  BillingRoleAssignments,
  Agreements,
  Reservations,
  EnrollmentAccounts,
  BillingPeriods
} from "./operationsInterfaces";
import { BillingManagementClientOptionalParams } from "./models";

export class BillingManagementClient extends coreClient.ServiceClient {
  $host: string;
  subscriptionId: string;

  /**
   * Initializes a new instance of the BillingManagementClient class.
   * @param credentials Subscription credentials which uniquely identify client subscription.
   * @param subscriptionId The ID that uniquely identifies an Azure subscription.
   * @param options The parameter options
   */
  constructor(
    credentials: coreAuth.TokenCredential,
    subscriptionId: string,
    options?: BillingManagementClientOptionalParams
  ) {
    if (credentials === undefined) {
      throw new Error("'credentials' cannot be null");
    }
    if (subscriptionId === undefined) {
      throw new Error("'subscriptionId' cannot be null");
    }

    // Initializing default values for options
    if (!options) {
      options = {};
    }
    const defaults: BillingManagementClientOptionalParams = {
      requestContentType: "application/json; charset=utf-8",
      credential: credentials
    };

    const packageDetails = `azsdk-js-arm-billing/4.0.2`;
    const userAgentPrefix =
      options.userAgentOptions && options.userAgentOptions.userAgentPrefix
        ? `${options.userAgentOptions.userAgentPrefix} ${packageDetails}`
        : `${packageDetails}`;

    if (!options.credentialScopes) {
      options.credentialScopes = ["https://management.azure.com/.default"];
    }
    const optionsWithDefaults = {
      ...defaults,
      ...options,
      userAgentOptions: {
        userAgentPrefix
      },
      baseUri:
        options.endpoint ?? options.baseUri ?? "https://management.azure.com"
    };
    super(optionsWithDefaults);
    // Parameter assignments
    this.subscriptionId = subscriptionId;

    // Assigning values to Constant parameters
    this.$host = options.$host || "https://management.azure.com";
    this.billingAccounts = new BillingAccountsImpl(this);
    this.address = new AddressImpl(this);
    this.availableBalances = new AvailableBalancesImpl(this);
    this.instructions = new InstructionsImpl(this);
    this.billingProfiles = new BillingProfilesImpl(this);
    this.customers = new CustomersImpl(this);
    this.invoiceSections = new InvoiceSectionsImpl(this);
    this.billingPermissions = new BillingPermissionsImpl(this);
    this.billingSubscriptions = new BillingSubscriptionsImpl(this);
    this.products = new ProductsImpl(this);
    this.invoices = new InvoicesImpl(this);
    this.transactions = new TransactionsImpl(this);
    this.policies = new PoliciesImpl(this);
    this.billingPropertyOperations = new BillingPropertyOperationsImpl(this);
    this.operations = new OperationsImpl(this);
    this.billingRoleDefinitions = new BillingRoleDefinitionsImpl(this);
    this.billingRoleAssignments = new BillingRoleAssignmentsImpl(this);
    this.agreements = new AgreementsImpl(this);
    this.reservations = new ReservationsImpl(this);
    this.enrollmentAccounts = new EnrollmentAccountsImpl(this);
    this.billingPeriods = new BillingPeriodsImpl(this);
  }

  billingAccounts: BillingAccounts;
  address: Address;
  availableBalances: AvailableBalances;
  instructions: Instructions;
  billingProfiles: BillingProfiles;
  customers: Customers;
  invoiceSections: InvoiceSections;
  billingPermissions: BillingPermissions;
  billingSubscriptions: BillingSubscriptions;
  products: Products;
  invoices: Invoices;
  transactions: Transactions;
  policies: Policies;
  billingPropertyOperations: BillingPropertyOperations;
  operations: Operations;
  billingRoleDefinitions: BillingRoleDefinitions;
  billingRoleAssignments: BillingRoleAssignments;
  agreements: Agreements;
  reservations: Reservations;
  enrollmentAccounts: EnrollmentAccounts;
  billingPeriods: BillingPeriods;
}
