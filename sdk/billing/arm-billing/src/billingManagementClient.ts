/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */

import * as coreClient from "@azure/core-client";
import * as coreRestPipeline from "@azure/core-rest-pipeline";
import {
  PipelineRequest,
  PipelineResponse,
  SendRequest,
} from "@azure/core-rest-pipeline";
import * as coreAuth from "@azure/core-auth";
import {
  AgreementsImpl,
  AssociatedTenantsImpl,
  AvailableBalancesImpl,
  BillingAccountsImpl,
  AddressImpl,
  BillingPermissionsImpl,
  BillingProfilesImpl,
  BillingPropertyOperationsImpl,
  BillingRequestsImpl,
  BillingRoleAssignmentsImpl,
  BillingRoleDefinitionOperationsImpl,
  SavingsPlanOrdersImpl,
  SavingsPlansImpl,
  BillingSubscriptionsImpl,
  BillingSubscriptionsAliasesImpl,
  CustomersImpl,
  DepartmentsImpl,
  EnrollmentAccountsImpl,
  InvoicesImpl,
  InvoiceSectionsImpl,
  OperationsImpl,
  PaymentMethodsImpl,
  PoliciesImpl,
  ProductsImpl,
  ReservationsImpl,
  ReservationOrdersImpl,
  TransactionsImpl,
  TransfersImpl,
  PartnerTransfersImpl,
  RecipientTransfersImpl,
} from "./operations";
import {
  Agreements,
  AssociatedTenants,
  AvailableBalances,
  BillingAccounts,
  Address,
  BillingPermissions,
  BillingProfiles,
  BillingPropertyOperations,
  BillingRequests,
  BillingRoleAssignments,
  BillingRoleDefinitionOperations,
  SavingsPlanOrders,
  SavingsPlans,
  BillingSubscriptions,
  BillingSubscriptionsAliases,
  Customers,
  Departments,
  EnrollmentAccounts,
  Invoices,
  InvoiceSections,
  Operations,
  PaymentMethods,
  Policies,
  Products,
  Reservations,
  ReservationOrders,
  Transactions,
  Transfers,
  PartnerTransfers,
  RecipientTransfers,
} from "./operationsInterfaces";
import { BillingManagementClientOptionalParams } from "./models";

export class BillingManagementClient extends coreClient.ServiceClient {
  $host: string;
  apiVersion: string;
  subscriptionId?: string;

  /**
   * Initializes a new instance of the BillingManagementClient class.
   * @param credentials Subscription credentials which uniquely identify client subscription.
   * @param subscriptionId The ID that uniquely identifies a billing subscription.
   * @param options The parameter options
   */
  constructor(
    credentials: coreAuth.TokenCredential,
    subscriptionId: string,
    options?: BillingManagementClientOptionalParams,
  );
  constructor(
    credentials: coreAuth.TokenCredential,
    options?: BillingManagementClientOptionalParams,
  );
  constructor(
    credentials: coreAuth.TokenCredential,
    subscriptionIdOrOptions?: BillingManagementClientOptionalParams | string,
    options?: BillingManagementClientOptionalParams,
  ) {
    if (credentials === undefined) {
      throw new Error("'credentials' cannot be null");
    }

    let subscriptionId: string | undefined;

    if (typeof subscriptionIdOrOptions === "string") {
      subscriptionId = subscriptionIdOrOptions;
    } else if (typeof subscriptionIdOrOptions === "object") {
      options = subscriptionIdOrOptions;
    }

    // Initializing default values for options
    if (!options) {
      options = {};
    }
    const defaults: BillingManagementClientOptionalParams = {
      requestContentType: "application/json; charset=utf-8",
      credential: credentials,
    };

    const packageDetails = `azsdk-js-arm-billing/5.0.1`;
    const userAgentPrefix =
      options.userAgentOptions && options.userAgentOptions.userAgentPrefix
        ? `${options.userAgentOptions.userAgentPrefix} ${packageDetails}`
        : `${packageDetails}`;

    const optionsWithDefaults = {
      ...defaults,
      ...options,
      userAgentOptions: {
        userAgentPrefix,
      },
      endpoint:
        options.endpoint ?? options.baseUri ?? "https://management.azure.com",
    };
    super(optionsWithDefaults);

    let bearerTokenAuthenticationPolicyFound: boolean = false;
    if (options?.pipeline && options.pipeline.getOrderedPolicies().length > 0) {
      const pipelinePolicies: coreRestPipeline.PipelinePolicy[] =
        options.pipeline.getOrderedPolicies();
      bearerTokenAuthenticationPolicyFound = pipelinePolicies.some(
        (pipelinePolicy) =>
          pipelinePolicy.name ===
          coreRestPipeline.bearerTokenAuthenticationPolicyName,
      );
    }
    if (
      !options ||
      !options.pipeline ||
      options.pipeline.getOrderedPolicies().length == 0 ||
      !bearerTokenAuthenticationPolicyFound
    ) {
      this.pipeline.removePolicy({
        name: coreRestPipeline.bearerTokenAuthenticationPolicyName,
      });
      this.pipeline.addPolicy(
        coreRestPipeline.bearerTokenAuthenticationPolicy({
          credential: credentials,
          scopes:
            optionsWithDefaults.credentialScopes ??
            `${optionsWithDefaults.endpoint}/.default`,
          challengeCallbacks: {
            authorizeRequestOnChallenge:
              coreClient.authorizeRequestOnClaimChallenge,
          },
        }),
      );
    }
    // Parameter assignments
    this.subscriptionId = subscriptionId;

    // Assigning values to Constant parameters
    this.$host = options.$host || "https://management.azure.com";
    this.apiVersion = options.apiVersion || "2024-04-01";
    this.agreements = new AgreementsImpl(this);
    this.associatedTenants = new AssociatedTenantsImpl(this);
    this.availableBalances = new AvailableBalancesImpl(this);
    this.billingAccounts = new BillingAccountsImpl(this);
    this.address = new AddressImpl(this);
    this.billingPermissions = new BillingPermissionsImpl(this);
    this.billingProfiles = new BillingProfilesImpl(this);
    this.billingPropertyOperations = new BillingPropertyOperationsImpl(this);
    this.billingRequests = new BillingRequestsImpl(this);
    this.billingRoleAssignments = new BillingRoleAssignmentsImpl(this);
    this.billingRoleDefinitionOperations =
      new BillingRoleDefinitionOperationsImpl(this);
    this.savingsPlanOrders = new SavingsPlanOrdersImpl(this);
    this.savingsPlans = new SavingsPlansImpl(this);
    this.billingSubscriptions = new BillingSubscriptionsImpl(this);
    this.billingSubscriptionsAliases = new BillingSubscriptionsAliasesImpl(
      this,
    );
    this.customers = new CustomersImpl(this);
    this.departments = new DepartmentsImpl(this);
    this.enrollmentAccounts = new EnrollmentAccountsImpl(this);
    this.invoices = new InvoicesImpl(this);
    this.invoiceSections = new InvoiceSectionsImpl(this);
    this.operations = new OperationsImpl(this);
    this.paymentMethods = new PaymentMethodsImpl(this);
    this.policies = new PoliciesImpl(this);
    this.products = new ProductsImpl(this);
    this.reservations = new ReservationsImpl(this);
    this.reservationOrders = new ReservationOrdersImpl(this);
    this.transactions = new TransactionsImpl(this);
    this.transfers = new TransfersImpl(this);
    this.partnerTransfers = new PartnerTransfersImpl(this);
    this.recipientTransfers = new RecipientTransfersImpl(this);
    this.addCustomApiVersionPolicy(options.apiVersion);
  }

  /** A function that adds a policy that sets the api-version (or equivalent) to reflect the library version. */
  private addCustomApiVersionPolicy(apiVersion?: string) {
    if (!apiVersion) {
      return;
    }
    const apiVersionPolicy = {
      name: "CustomApiVersionPolicy",
      async sendRequest(
        request: PipelineRequest,
        next: SendRequest,
      ): Promise<PipelineResponse> {
        const param = request.url.split("?");
        if (param.length > 1) {
          const newParams = param[1].split("&").map((item) => {
            if (item.indexOf("api-version") > -1) {
              return "api-version=" + apiVersion;
            } else {
              return item;
            }
          });
          request.url = param[0] + "?" + newParams.join("&");
        }
        return next(request);
      },
    };
    this.pipeline.addPolicy(apiVersionPolicy);
  }

  agreements: Agreements;
  associatedTenants: AssociatedTenants;
  availableBalances: AvailableBalances;
  billingAccounts: BillingAccounts;
  address: Address;
  billingPermissions: BillingPermissions;
  billingProfiles: BillingProfiles;
  billingPropertyOperations: BillingPropertyOperations;
  billingRequests: BillingRequests;
  billingRoleAssignments: BillingRoleAssignments;
  billingRoleDefinitionOperations: BillingRoleDefinitionOperations;
  savingsPlanOrders: SavingsPlanOrders;
  savingsPlans: SavingsPlans;
  billingSubscriptions: BillingSubscriptions;
  billingSubscriptionsAliases: BillingSubscriptionsAliases;
  customers: Customers;
  departments: Departments;
  enrollmentAccounts: EnrollmentAccounts;
  invoices: Invoices;
  invoiceSections: InvoiceSections;
  operations: Operations;
  paymentMethods: PaymentMethods;
  policies: Policies;
  products: Products;
  reservations: Reservations;
  reservationOrders: ReservationOrders;
  transactions: Transactions;
  transfers: Transfers;
  partnerTransfers: PartnerTransfers;
  recipientTransfers: RecipientTransfers;
}
