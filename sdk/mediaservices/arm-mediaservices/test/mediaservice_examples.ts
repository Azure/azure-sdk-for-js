/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */

import {
  env,
  record,
  RecorderEnvironmentSetup,
  Recorder
} from "@azure-tools/test-recorder";
import * as assert from "assert";
import { ClientSecretCredential } from "@azure/identity";
import { AzureMediaServices } from "../src/azureMediaServices";
import { StorageManagementClient,StorageAccountCreateParameters} from "@azure/arm-storage";

const recorderEnvSetup: RecorderEnvironmentSetup = {
  replaceableVariables: {
    AZURE_CLIENT_ID: "azure_client_id",
    AZURE_CLIENT_SECRET: "azure_client_secret",
    AZURE_TENANT_ID: "88888888-8888-8888-8888-888888888888",
    SUBSCRIPTION_ID: "azure_subscription_id"
  },
  customizationsOnRecordings: [
    (recording: any): any =>
      recording.replace(
        /"access_token":"[^"]*"/g,
        `"access_token":"access_token"`
      )
  ],
  queryParametersToSkip: []
};

describe("MediaServices test", () => {
  let recorder: Recorder;
  let subscriptionId: string;
  let client: AzureMediaServices;
  let storage_client: StorageManagementClient;
  let location: string;
  let resourceGroup: string;
  let mediaName: string;
  let storageAccountName: string;

  beforeEach(async function() {
    recorder = record(this, recorderEnvSetup);
    subscriptionId = env.SUBSCRIPTION_ID;
    // This is an example of how the environment variables are used
    const credential = new ClientSecretCredential(
      env.AZURE_TENANT_ID,
      env.AZURE_CLIENT_ID,
      env.AZURE_CLIENT_SECRET
    );
    client = new AzureMediaServices(credential, subscriptionId);
    storage_client = new StorageManagementClient(credential,subscriptionId);
    location = "eastus";
    resourceGroup = "myjstest";
    mediaName = "mymediaxxx";
    storageAccountName = "storageaccountzzzxxx";
  });

  afterEach(async function() {
    await recorder.stop();
  });

  // storageAccounts.beginCreateAndWait
  async function storageAccounts_beginCreateAndWait() {
      const parameter: StorageAccountCreateParameters = {
        sku: {
          name: "Standard_GRS",
        },
        kind: "StorageV2",
        location: "westeurope",
        encryption: {
          services: {
            file: {
              keyType: "Account",
              enabled: true,
            },
            blob: {
              keyType: "Account",
              enabled: true,
            },
          },
          keySource: "Microsoft.Storage",
        },
        tags: {
          key1: "value1",
          key2: "value2",
        },
      };
      const storageaccount = await storage_client.storageAccounts.beginCreateAndWait(
        resourceGroup,
        storageAccountName,
        parameter
      );
      return storageaccount;
  }

  it("mediaservices create test", async function() {
    const storageAccount = await storageAccounts_beginCreateAndWait();
    const res = await client.mediaservices.createOrUpdate(resourceGroup,mediaName,{
      location: location,
        storageAccounts: [
            {
                id: storageAccount.id,
                type: "Primary"
            }
        ]
    });
    assert.equal(res.name,mediaName);
  }).timeout(3600000);

  it("mediaservices get test", async function() {
    const res = await client.mediaservices.get(resourceGroup,mediaName);
    assert.equal(res.name,mediaName);
  });

  it("mediaservices list test", async function() {
    const resArray = new Array();
    for await (let item of client.mediaservices.list(resourceGroup)){
        resArray.push(item);
    }
    assert.equal(resArray.length,1);
  });

  it("mediaservices delete test", async function() {
    const res = await client.mediaservices.delete(resourceGroup,mediaName);
    const resArray = new Array();
    for await (let item of client.mediaservices.list(resourceGroup)){
        resArray.push(item);
    }
    assert.equal(resArray.length,0);
  });
});
