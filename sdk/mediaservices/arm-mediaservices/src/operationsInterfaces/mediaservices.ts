/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */

import { PagedAsyncIterableIterator } from "@azure/core-paging";
import { PollerLike, PollOperationState } from "@azure/core-lro";
import {
  MediaService,
  MediaservicesListOptionalParams,
  MediaservicesListBySubscriptionOptionalParams,
  MediaservicesGetOptionalParams,
  MediaservicesGetResponse,
  MediaservicesCreateOrUpdateOptionalParams,
  MediaservicesCreateOrUpdateResponse,
  MediaservicesDeleteOptionalParams,
  MediaServiceUpdate,
  MediaservicesUpdateOptionalParams,
  MediaservicesUpdateResponse,
  SyncStorageKeysInput,
  MediaservicesSyncStorageKeysOptionalParams,
  ListEdgePoliciesInput,
  MediaservicesListEdgePoliciesOptionalParams,
  MediaservicesListEdgePoliciesResponse
} from "../models";

/// <reference lib="esnext.asynciterable" />
/** Interface representing a Mediaservices. */
export interface Mediaservices {
  /**
   * List Media Services accounts in the resource group
   * @param resourceGroupName The name of the resource group within the Azure subscription.
   * @param options The options parameters.
   */
  list(
    resourceGroupName: string,
    options?: MediaservicesListOptionalParams
  ): PagedAsyncIterableIterator<MediaService>;
  /**
   * List Media Services accounts in the subscription.
   * @param options The options parameters.
   */
  listBySubscription(
    options?: MediaservicesListBySubscriptionOptionalParams
  ): PagedAsyncIterableIterator<MediaService>;
  /**
   * Get the details of a Media Services account
   * @param resourceGroupName The name of the resource group within the Azure subscription.
   * @param accountName The Media Services account name.
   * @param options The options parameters.
   */
  get(
    resourceGroupName: string,
    accountName: string,
    options?: MediaservicesGetOptionalParams
  ): Promise<MediaservicesGetResponse>;
  /**
   * Creates or updates a Media Services account
   * @param resourceGroupName The name of the resource group within the Azure subscription.
   * @param accountName The Media Services account name.
   * @param parameters The request parameters
   * @param options The options parameters.
   */
  beginCreateOrUpdate(
    resourceGroupName: string,
    accountName: string,
    parameters: MediaService,
    options?: MediaservicesCreateOrUpdateOptionalParams
  ): Promise<
    PollerLike<
      PollOperationState<MediaservicesCreateOrUpdateResponse>,
      MediaservicesCreateOrUpdateResponse
    >
  >;
  /**
   * Creates or updates a Media Services account
   * @param resourceGroupName The name of the resource group within the Azure subscription.
   * @param accountName The Media Services account name.
   * @param parameters The request parameters
   * @param options The options parameters.
   */
  beginCreateOrUpdateAndWait(
    resourceGroupName: string,
    accountName: string,
    parameters: MediaService,
    options?: MediaservicesCreateOrUpdateOptionalParams
  ): Promise<MediaservicesCreateOrUpdateResponse>;
  /**
   * Deletes a Media Services account
   * @param resourceGroupName The name of the resource group within the Azure subscription.
   * @param accountName The Media Services account name.
   * @param options The options parameters.
   */
  delete(
    resourceGroupName: string,
    accountName: string,
    options?: MediaservicesDeleteOptionalParams
  ): Promise<void>;
  /**
   * Updates an existing Media Services account
   * @param resourceGroupName The name of the resource group within the Azure subscription.
   * @param accountName The Media Services account name.
   * @param parameters The request parameters
   * @param options The options parameters.
   */
  beginUpdate(
    resourceGroupName: string,
    accountName: string,
    parameters: MediaServiceUpdate,
    options?: MediaservicesUpdateOptionalParams
  ): Promise<
    PollerLike<
      PollOperationState<MediaservicesUpdateResponse>,
      MediaservicesUpdateResponse
    >
  >;
  /**
   * Updates an existing Media Services account
   * @param resourceGroupName The name of the resource group within the Azure subscription.
   * @param accountName The Media Services account name.
   * @param parameters The request parameters
   * @param options The options parameters.
   */
  beginUpdateAndWait(
    resourceGroupName: string,
    accountName: string,
    parameters: MediaServiceUpdate,
    options?: MediaservicesUpdateOptionalParams
  ): Promise<MediaservicesUpdateResponse>;
  /**
   * Synchronizes storage account keys for a storage account associated with the Media Service account.
   * @param resourceGroupName The name of the resource group within the Azure subscription.
   * @param accountName The Media Services account name.
   * @param parameters The request parameters
   * @param options The options parameters.
   */
  syncStorageKeys(
    resourceGroupName: string,
    accountName: string,
    parameters: SyncStorageKeysInput,
    options?: MediaservicesSyncStorageKeysOptionalParams
  ): Promise<void>;
  /**
   * List all the media edge policies associated with the Media Services account.
   * @param resourceGroupName The name of the resource group within the Azure subscription.
   * @param accountName The Media Services account name.
   * @param parameters The request parameters
   * @param options The options parameters.
   */
  listEdgePolicies(
    resourceGroupName: string,
    accountName: string,
    parameters: ListEdgePoliciesInput,
    options?: MediaservicesListEdgePoliciesOptionalParams
  ): Promise<MediaservicesListEdgePoliciesResponse>;
}
