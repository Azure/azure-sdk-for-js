/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */

import { PagedAsyncIterableIterator } from "@azure/core-paging";
import { SimplePollerLike, OperationState } from "@azure/core-lro";
import {
  LiveEvent,
  LiveEventsListOptionalParams,
  LiveEventStatus,
  LiveEventsListGetStatusOptionalParams,
  LiveEventStreamEvent,
  LiveEventsListGetStreamEventsOptionalParams,
  LiveEventTrackEvent,
  LiveEventsListGetTrackIngestHeartbeatsOptionalParams,
  LiveEventsGetOptionalParams,
  LiveEventsGetResponse,
  LiveEventsCreateOptionalParams,
  LiveEventsCreateResponse,
  LiveEventsUpdateOptionalParams,
  LiveEventsUpdateResponse,
  LiveEventsDeleteOptionalParams,
  LiveEventsAllocateOptionalParams,
  LiveEventsStartOptionalParams,
  LiveEventActionInput,
  LiveEventsStopOptionalParams,
  LiveEventsResetOptionalParams,
  LiveEventsAsyncOperationOptionalParams,
  LiveEventsAsyncOperationResponse,
  LiveEventsOperationLocationOptionalParams,
  LiveEventsOperationLocationResponse
} from "../models";

/// <reference lib="esnext.asynciterable" />
/** Interface representing a LiveEvents. */
export interface LiveEvents {
  /**
   * Lists all the live events in the account.
   * @param resourceGroupName The name of the resource group within the Azure subscription.
   * @param accountName The Media Services account name.
   * @param options The options parameters.
   */
  list(
    resourceGroupName: string,
    accountName: string,
    options?: LiveEventsListOptionalParams
  ): PagedAsyncIterableIterator<LiveEvent>;
  /**
   * Gets status telemetry of a live event.
   * @param resourceGroupName The name of the resource group within the Azure subscription.
   * @param accountName The Media Services account name.
   * @param liveEventName The name of the live event, maximum length is 32.
   * @param options The options parameters.
   */
  beginListGetStatusAndWait(
    resourceGroupName: string,
    accountName: string,
    liveEventName: string,
    options?: LiveEventsListGetStatusOptionalParams
  ): PagedAsyncIterableIterator<LiveEventStatus>;
  /**
   * Get stream events telemetry of a live event.
   * @param resourceGroupName The name of the resource group within the Azure subscription.
   * @param accountName The Media Services account name.
   * @param liveEventName The name of the live event, maximum length is 32.
   * @param options The options parameters.
   */
  beginListGetStreamEventsAndWait(
    resourceGroupName: string,
    accountName: string,
    liveEventName: string,
    options?: LiveEventsListGetStreamEventsOptionalParams
  ): PagedAsyncIterableIterator<LiveEventStreamEvent>;
  /**
   * Get track ingest heartbeat events telemetry of a live event.
   * @param resourceGroupName The name of the resource group within the Azure subscription.
   * @param accountName The Media Services account name.
   * @param liveEventName The name of the live event, maximum length is 32.
   * @param options The options parameters.
   */
  beginListGetTrackIngestHeartbeatsAndWait(
    resourceGroupName: string,
    accountName: string,
    liveEventName: string,
    options?: LiveEventsListGetTrackIngestHeartbeatsOptionalParams
  ): PagedAsyncIterableIterator<LiveEventTrackEvent>;
  /**
   * Gets properties of a live event.
   * @param resourceGroupName The name of the resource group within the Azure subscription.
   * @param accountName The Media Services account name.
   * @param liveEventName The name of the live event, maximum length is 32.
   * @param options The options parameters.
   */
  get(
    resourceGroupName: string,
    accountName: string,
    liveEventName: string,
    options?: LiveEventsGetOptionalParams
  ): Promise<LiveEventsGetResponse>;
  /**
   * Creates a new live event.
   * @param resourceGroupName The name of the resource group within the Azure subscription.
   * @param accountName The Media Services account name.
   * @param liveEventName The name of the live event, maximum length is 32.
   * @param parameters Live event properties needed for creation.
   * @param options The options parameters.
   */
  beginCreate(
    resourceGroupName: string,
    accountName: string,
    liveEventName: string,
    parameters: LiveEvent,
    options?: LiveEventsCreateOptionalParams
  ): Promise<
    SimplePollerLike<
      OperationState<LiveEventsCreateResponse>,
      LiveEventsCreateResponse
    >
  >;
  /**
   * Creates a new live event.
   * @param resourceGroupName The name of the resource group within the Azure subscription.
   * @param accountName The Media Services account name.
   * @param liveEventName The name of the live event, maximum length is 32.
   * @param parameters Live event properties needed for creation.
   * @param options The options parameters.
   */
  beginCreateAndWait(
    resourceGroupName: string,
    accountName: string,
    liveEventName: string,
    parameters: LiveEvent,
    options?: LiveEventsCreateOptionalParams
  ): Promise<LiveEventsCreateResponse>;
  /**
   * Updates settings on an existing live event.
   * @param resourceGroupName The name of the resource group within the Azure subscription.
   * @param accountName The Media Services account name.
   * @param liveEventName The name of the live event, maximum length is 32.
   * @param parameters Live event properties needed for patch.
   * @param options The options parameters.
   */
  beginUpdate(
    resourceGroupName: string,
    accountName: string,
    liveEventName: string,
    parameters: LiveEvent,
    options?: LiveEventsUpdateOptionalParams
  ): Promise<
    SimplePollerLike<
      OperationState<LiveEventsUpdateResponse>,
      LiveEventsUpdateResponse
    >
  >;
  /**
   * Updates settings on an existing live event.
   * @param resourceGroupName The name of the resource group within the Azure subscription.
   * @param accountName The Media Services account name.
   * @param liveEventName The name of the live event, maximum length is 32.
   * @param parameters Live event properties needed for patch.
   * @param options The options parameters.
   */
  beginUpdateAndWait(
    resourceGroupName: string,
    accountName: string,
    liveEventName: string,
    parameters: LiveEvent,
    options?: LiveEventsUpdateOptionalParams
  ): Promise<LiveEventsUpdateResponse>;
  /**
   * Deletes a live event.
   * @param resourceGroupName The name of the resource group within the Azure subscription.
   * @param accountName The Media Services account name.
   * @param liveEventName The name of the live event, maximum length is 32.
   * @param options The options parameters.
   */
  beginDelete(
    resourceGroupName: string,
    accountName: string,
    liveEventName: string,
    options?: LiveEventsDeleteOptionalParams
  ): Promise<SimplePollerLike<OperationState<void>, void>>;
  /**
   * Deletes a live event.
   * @param resourceGroupName The name of the resource group within the Azure subscription.
   * @param accountName The Media Services account name.
   * @param liveEventName The name of the live event, maximum length is 32.
   * @param options The options parameters.
   */
  beginDeleteAndWait(
    resourceGroupName: string,
    accountName: string,
    liveEventName: string,
    options?: LiveEventsDeleteOptionalParams
  ): Promise<void>;
  /**
   * A live event is in StandBy state after allocation completes, and is ready to start.
   * @param resourceGroupName The name of the resource group within the Azure subscription.
   * @param accountName The Media Services account name.
   * @param liveEventName The name of the live event, maximum length is 32.
   * @param options The options parameters.
   */
  beginAllocate(
    resourceGroupName: string,
    accountName: string,
    liveEventName: string,
    options?: LiveEventsAllocateOptionalParams
  ): Promise<SimplePollerLike<OperationState<void>, void>>;
  /**
   * A live event is in StandBy state after allocation completes, and is ready to start.
   * @param resourceGroupName The name of the resource group within the Azure subscription.
   * @param accountName The Media Services account name.
   * @param liveEventName The name of the live event, maximum length is 32.
   * @param options The options parameters.
   */
  beginAllocateAndWait(
    resourceGroupName: string,
    accountName: string,
    liveEventName: string,
    options?: LiveEventsAllocateOptionalParams
  ): Promise<void>;
  /**
   * A live event in Stopped or StandBy state will be in Running state after the start operation
   * completes.
   * @param resourceGroupName The name of the resource group within the Azure subscription.
   * @param accountName The Media Services account name.
   * @param liveEventName The name of the live event, maximum length is 32.
   * @param options The options parameters.
   */
  beginStart(
    resourceGroupName: string,
    accountName: string,
    liveEventName: string,
    options?: LiveEventsStartOptionalParams
  ): Promise<SimplePollerLike<OperationState<void>, void>>;
  /**
   * A live event in Stopped or StandBy state will be in Running state after the start operation
   * completes.
   * @param resourceGroupName The name of the resource group within the Azure subscription.
   * @param accountName The Media Services account name.
   * @param liveEventName The name of the live event, maximum length is 32.
   * @param options The options parameters.
   */
  beginStartAndWait(
    resourceGroupName: string,
    accountName: string,
    liveEventName: string,
    options?: LiveEventsStartOptionalParams
  ): Promise<void>;
  /**
   * Stops a running live event.
   * @param resourceGroupName The name of the resource group within the Azure subscription.
   * @param accountName The Media Services account name.
   * @param liveEventName The name of the live event, maximum length is 32.
   * @param parameters LiveEvent stop parameters
   * @param options The options parameters.
   */
  beginStop(
    resourceGroupName: string,
    accountName: string,
    liveEventName: string,
    parameters: LiveEventActionInput,
    options?: LiveEventsStopOptionalParams
  ): Promise<SimplePollerLike<OperationState<void>, void>>;
  /**
   * Stops a running live event.
   * @param resourceGroupName The name of the resource group within the Azure subscription.
   * @param accountName The Media Services account name.
   * @param liveEventName The name of the live event, maximum length is 32.
   * @param parameters LiveEvent stop parameters
   * @param options The options parameters.
   */
  beginStopAndWait(
    resourceGroupName: string,
    accountName: string,
    liveEventName: string,
    parameters: LiveEventActionInput,
    options?: LiveEventsStopOptionalParams
  ): Promise<void>;
  /**
   * Resets an existing live event. All live outputs for the live event are deleted and the live event is
   * stopped and will be started again. All assets used by the live outputs and streaming locators
   * created on these assets are unaffected.
   * @param resourceGroupName The name of the resource group within the Azure subscription.
   * @param accountName The Media Services account name.
   * @param liveEventName The name of the live event, maximum length is 32.
   * @param options The options parameters.
   */
  beginReset(
    resourceGroupName: string,
    accountName: string,
    liveEventName: string,
    options?: LiveEventsResetOptionalParams
  ): Promise<SimplePollerLike<OperationState<void>, void>>;
  /**
   * Resets an existing live event. All live outputs for the live event are deleted and the live event is
   * stopped and will be started again. All assets used by the live outputs and streaming locators
   * created on these assets are unaffected.
   * @param resourceGroupName The name of the resource group within the Azure subscription.
   * @param accountName The Media Services account name.
   * @param liveEventName The name of the live event, maximum length is 32.
   * @param options The options parameters.
   */
  beginResetAndWait(
    resourceGroupName: string,
    accountName: string,
    liveEventName: string,
    options?: LiveEventsResetOptionalParams
  ): Promise<void>;
  /**
   * Get a live event operation status.
   * @param resourceGroupName The name of the resource group within the Azure subscription.
   * @param accountName The Media Services account name.
   * @param operationId The ID of an ongoing async operation.
   * @param options The options parameters.
   */
  asyncOperation(
    resourceGroupName: string,
    accountName: string,
    operationId: string,
    options?: LiveEventsAsyncOperationOptionalParams
  ): Promise<LiveEventsAsyncOperationResponse>;
  /**
   * Get a live event operation status.
   * @param resourceGroupName The name of the resource group within the Azure subscription.
   * @param accountName The Media Services account name.
   * @param liveEventName The name of the live event, maximum length is 32.
   * @param operationId The ID of an ongoing async operation.
   * @param options The options parameters.
   */
  operationLocation(
    resourceGroupName: string,
    accountName: string,
    liveEventName: string,
    operationId: string,
    options?: LiveEventsOperationLocationOptionalParams
  ): Promise<LiveEventsOperationLocationResponse>;
}
