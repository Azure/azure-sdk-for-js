/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */

import { CloudErrorMapper, BaseResourceMapper } from "@azure/ms-rest-azure-js";
import * as msRest from "@azure/ms-rest-js";

export const CloudError = CloudErrorMapper;
export const BaseResource = BaseResourceMapper;

export const OperationDisplay: msRest.CompositeMapper = {
  serializedName: "OperationDisplay",
  type: {
    name: "Composite",
    className: "OperationDisplay",
    modelProperties: {
      provider: {
        serializedName: "provider",
        type: {
          name: "String"
        }
      },
      resource: {
        serializedName: "resource",
        type: {
          name: "String"
        }
      },
      operation: {
        serializedName: "operation",
        type: {
          name: "String"
        }
      },
      description: {
        serializedName: "description",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const MetricDimension: msRest.CompositeMapper = {
  serializedName: "MetricDimension",
  type: {
    name: "Composite",
    className: "MetricDimension",
    modelProperties: {
      name: {
        readOnly: true,
        serializedName: "name",
        type: {
          name: "String"
        }
      },
      displayName: {
        readOnly: true,
        serializedName: "displayName",
        type: {
          name: "String"
        }
      },
      toBeExportedForShoebox: {
        nullable: false,
        readOnly: true,
        serializedName: "toBeExportedForShoebox",
        type: {
          name: "Boolean"
        }
      }
    }
  }
};

export const MetricSpecification: msRest.CompositeMapper = {
  serializedName: "MetricSpecification",
  type: {
    name: "Composite",
    className: "MetricSpecification",
    modelProperties: {
      name: {
        readOnly: true,
        serializedName: "name",
        type: {
          name: "String"
        }
      },
      displayName: {
        readOnly: true,
        serializedName: "displayName",
        type: {
          name: "String"
        }
      },
      displayDescription: {
        readOnly: true,
        serializedName: "displayDescription",
        type: {
          name: "String"
        }
      },
      unit: {
        nullable: false,
        readOnly: true,
        serializedName: "unit",
        type: {
          name: "String"
        }
      },
      aggregationType: {
        nullable: false,
        readOnly: true,
        serializedName: "aggregationType",
        type: {
          name: "String"
        }
      },
      lockAggregationType: {
        nullable: true,
        readOnly: true,
        serializedName: "lockAggregationType",
        type: {
          name: "String"
        }
      },
      supportedAggregationTypes: {
        serializedName: "supportedAggregationTypes",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "String"
            }
          }
        }
      },
      dimensions: {
        readOnly: true,
        serializedName: "dimensions",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "MetricDimension"
            }
          }
        }
      },
      enableRegionalMdmAccount: {
        nullable: false,
        readOnly: true,
        serializedName: "enableRegionalMdmAccount",
        type: {
          name: "Boolean"
        }
      },
      sourceMdmAccount: {
        readOnly: true,
        serializedName: "sourceMdmAccount",
        type: {
          name: "String"
        }
      },
      sourceMdmNamespace: {
        readOnly: true,
        serializedName: "sourceMdmNamespace",
        type: {
          name: "String"
        }
      },
      supportedTimeGrainTypes: {
        readOnly: true,
        serializedName: "supportedTimeGrainTypes",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "String"
            }
          }
        }
      }
    }
  }
};

export const LogSpecification: msRest.CompositeMapper = {
  serializedName: "LogSpecification",
  type: {
    name: "Composite",
    className: "LogSpecification",
    modelProperties: {
      name: {
        readOnly: true,
        serializedName: "name",
        type: {
          name: "String"
        }
      },
      displayName: {
        readOnly: true,
        serializedName: "displayName",
        type: {
          name: "String"
        }
      },
      blobDuration: {
        readOnly: true,
        serializedName: "blobDuration",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const ServiceSpecification: msRest.CompositeMapper = {
  serializedName: "ServiceSpecification",
  type: {
    name: "Composite",
    className: "ServiceSpecification",
    modelProperties: {
      logSpecifications: {
        readOnly: true,
        serializedName: "logSpecifications",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "LogSpecification"
            }
          }
        }
      },
      metricSpecifications: {
        readOnly: true,
        serializedName: "metricSpecifications",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "MetricSpecification"
            }
          }
        }
      }
    }
  }
};

export const Properties: msRest.CompositeMapper = {
  serializedName: "Properties",
  type: {
    name: "Composite",
    className: "Properties",
    modelProperties: {
      serviceSpecification: {
        readOnly: true,
        serializedName: "serviceSpecification",
        type: {
          name: "Composite",
          className: "ServiceSpecification"
        }
      }
    }
  }
};

export const Operation: msRest.CompositeMapper = {
  serializedName: "Operation",
  type: {
    name: "Composite",
    className: "Operation",
    modelProperties: {
      name: {
        required: true,
        serializedName: "name",
        type: {
          name: "String"
        }
      },
      display: {
        serializedName: "display",
        type: {
          name: "Composite",
          className: "OperationDisplay"
        }
      },
      origin: {
        serializedName: "origin",
        type: {
          name: "String"
        }
      },
      properties: {
        serializedName: "properties",
        type: {
          name: "Composite",
          className: "Properties"
        }
      },
      isDataAction: {
        nullable: true,
        serializedName: "isDataAction",
        type: {
          name: "Boolean"
        }
      },
      actionType: {
        nullable: true,
        serializedName: "actionType",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const EntityNameAvailabilityCheckOutput: msRest.CompositeMapper = {
  serializedName: "EntityNameAvailabilityCheckOutput",
  type: {
    name: "Composite",
    className: "EntityNameAvailabilityCheckOutput",
    modelProperties: {
      nameAvailable: {
        required: true,
        serializedName: "nameAvailable",
        type: {
          name: "Boolean"
        }
      },
      reason: {
        serializedName: "reason",
        type: {
          name: "String"
        }
      },
      message: {
        serializedName: "message",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const ResourceIdentity: msRest.CompositeMapper = {
  serializedName: "ResourceIdentity",
  type: {
    name: "Composite",
    className: "ResourceIdentity",
    modelProperties: {
      userAssignedIdentity: {
        serializedName: "userAssignedIdentity",
        type: {
          name: "String"
        }
      },
      useSystemAssignedIdentity: {
        required: true,
        serializedName: "useSystemAssignedIdentity",
        type: {
          name: "Boolean"
        }
      }
    }
  }
};

export const StorageAccount: msRest.CompositeMapper = {
  serializedName: "StorageAccount",
  type: {
    name: "Composite",
    className: "StorageAccount",
    modelProperties: {
      id: {
        serializedName: "id",
        type: {
          name: "String"
        }
      },
      type: {
        required: true,
        serializedName: "type",
        type: {
          name: "String"
        }
      },
      identity: {
        serializedName: "identity",
        type: {
          name: "Composite",
          className: "ResourceIdentity"
        }
      },
      status: {
        readOnly: true,
        serializedName: "status",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const SyncStorageKeysInput: msRest.CompositeMapper = {
  serializedName: "SyncStorageKeysInput",
  type: {
    name: "Composite",
    className: "SyncStorageKeysInput",
    modelProperties: {
      id: {
        serializedName: "id",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const KeyVaultProperties: msRest.CompositeMapper = {
  serializedName: "KeyVaultProperties",
  type: {
    name: "Composite",
    className: "KeyVaultProperties",
    modelProperties: {
      keyIdentifier: {
        serializedName: "keyIdentifier",
        type: {
          name: "String"
        }
      },
      currentKeyIdentifier: {
        readOnly: true,
        serializedName: "currentKeyIdentifier",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const AccountEncryption: msRest.CompositeMapper = {
  serializedName: "AccountEncryption",
  type: {
    name: "Composite",
    className: "AccountEncryption",
    modelProperties: {
      type: {
        required: true,
        serializedName: "type",
        type: {
          name: "String"
        }
      },
      keyVaultProperties: {
        serializedName: "keyVaultProperties",
        type: {
          name: "Composite",
          className: "KeyVaultProperties"
        }
      },
      identity: {
        serializedName: "identity",
        type: {
          name: "Composite",
          className: "ResourceIdentity"
        }
      },
      status: {
        readOnly: true,
        serializedName: "status",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const AccessControl: msRest.CompositeMapper = {
  serializedName: "AccessControl",
  type: {
    name: "Composite",
    className: "AccessControl",
    modelProperties: {
      defaultAction: {
        serializedName: "defaultAction",
        type: {
          name: "String"
        }
      },
      ipAllowList: {
        serializedName: "ipAllowList",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "String"
            }
          }
        }
      }
    }
  }
};

export const KeyDelivery: msRest.CompositeMapper = {
  serializedName: "KeyDelivery",
  type: {
    name: "Composite",
    className: "KeyDelivery",
    modelProperties: {
      accessControl: {
        serializedName: "accessControl",
        type: {
          name: "Composite",
          className: "AccessControl"
        }
      }
    }
  }
};

export const UserAssignedManagedIdentity: msRest.CompositeMapper = {
  serializedName: "UserAssignedManagedIdentity",
  type: {
    name: "Composite",
    className: "UserAssignedManagedIdentity",
    modelProperties: {
      clientId: {
        nullable: true,
        readOnly: true,
        serializedName: "clientId",
        type: {
          name: "Uuid"
        }
      },
      principalId: {
        nullable: true,
        readOnly: true,
        serializedName: "principalId",
        type: {
          name: "Uuid"
        }
      }
    }
  }
};

export const MediaServiceIdentity: msRest.CompositeMapper = {
  serializedName: "MediaServiceIdentity",
  type: {
    name: "Composite",
    className: "MediaServiceIdentity",
    modelProperties: {
      type: {
        required: true,
        serializedName: "type",
        type: {
          name: "String"
        }
      },
      principalId: {
        nullable: true,
        readOnly: true,
        serializedName: "principalId",
        type: {
          name: "Uuid"
        }
      },
      tenantId: {
        nullable: true,
        readOnly: true,
        serializedName: "tenantId",
        type: {
          name: "Uuid"
        }
      },
      userAssignedIdentities: {
        serializedName: "userAssignedIdentities",
        type: {
          name: "Dictionary",
          value: {
            type: {
              name: "Composite",
              className: "UserAssignedManagedIdentity"
            }
          }
        }
      }
    }
  }
};

export const SystemData: msRest.CompositeMapper = {
  serializedName: "systemData",
  type: {
    name: "Composite",
    className: "SystemData",
    modelProperties: {
      createdBy: {
        serializedName: "createdBy",
        type: {
          name: "String"
        }
      },
      createdByType: {
        serializedName: "createdByType",
        type: {
          name: "String"
        }
      },
      createdAt: {
        serializedName: "createdAt",
        type: {
          name: "DateTime"
        }
      },
      lastModifiedBy: {
        serializedName: "lastModifiedBy",
        type: {
          name: "String"
        }
      },
      lastModifiedByType: {
        serializedName: "lastModifiedByType",
        type: {
          name: "String"
        }
      },
      lastModifiedAt: {
        serializedName: "lastModifiedAt",
        type: {
          name: "DateTime"
        }
      }
    }
  }
};

export const Resource: msRest.CompositeMapper = {
  serializedName: "Resource",
  type: {
    name: "Composite",
    className: "Resource",
    modelProperties: {
      id: {
        readOnly: true,
        serializedName: "id",
        type: {
          name: "String"
        }
      },
      name: {
        readOnly: true,
        serializedName: "name",
        type: {
          name: "String"
        }
      },
      type: {
        readOnly: true,
        serializedName: "type",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const TrackedResource: msRest.CompositeMapper = {
  serializedName: "TrackedResource",
  type: {
    name: "Composite",
    className: "TrackedResource",
    modelProperties: {
      ...Resource.type.modelProperties,
      tags: {
        serializedName: "tags",
        type: {
          name: "Dictionary",
          value: {
            type: {
              name: "String"
            }
          }
        }
      },
      location: {
        required: true,
        serializedName: "location",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const MediaService: msRest.CompositeMapper = {
  serializedName: "MediaService",
  type: {
    name: "Composite",
    className: "MediaService",
    modelProperties: {
      ...TrackedResource.type.modelProperties,
      mediaServiceId: {
        nullable: false,
        readOnly: true,
        serializedName: "properties.mediaServiceId",
        type: {
          name: "Uuid"
        }
      },
      storageAccounts: {
        serializedName: "properties.storageAccounts",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "StorageAccount"
            }
          }
        }
      },
      storageAuthentication: {
        nullable: true,
        serializedName: "properties.storageAuthentication",
        type: {
          name: "String"
        }
      },
      encryption: {
        serializedName: "properties.encryption",
        type: {
          name: "Composite",
          className: "AccountEncryption"
        }
      },
      keyDelivery: {
        serializedName: "properties.keyDelivery",
        type: {
          name: "Composite",
          className: "KeyDelivery"
        }
      },
      publicNetworkAccess: {
        nullable: true,
        serializedName: "properties.publicNetworkAccess",
        type: {
          name: "String"
        }
      },
      identity: {
        serializedName: "identity",
        type: {
          name: "Composite",
          className: "MediaServiceIdentity"
        }
      },
      systemData: {
        readOnly: true,
        serializedName: "systemData",
        type: {
          name: "Composite",
          className: "SystemData"
        }
      }
    }
  }
};

export const MediaServiceUpdate: msRest.CompositeMapper = {
  serializedName: "MediaServiceUpdate",
  type: {
    name: "Composite",
    className: "MediaServiceUpdate",
    modelProperties: {
      tags: {
        serializedName: "tags",
        type: {
          name: "Dictionary",
          value: {
            type: {
              name: "String"
            }
          }
        }
      },
      mediaServiceId: {
        nullable: false,
        readOnly: true,
        serializedName: "properties.mediaServiceId",
        type: {
          name: "Uuid"
        }
      },
      storageAccounts: {
        serializedName: "properties.storageAccounts",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "StorageAccount"
            }
          }
        }
      },
      storageAuthentication: {
        nullable: true,
        serializedName: "properties.storageAuthentication",
        type: {
          name: "String"
        }
      },
      encryption: {
        serializedName: "properties.encryption",
        type: {
          name: "Composite",
          className: "AccountEncryption"
        }
      },
      keyDelivery: {
        serializedName: "properties.keyDelivery",
        type: {
          name: "Composite",
          className: "KeyDelivery"
        }
      },
      publicNetworkAccess: {
        nullable: true,
        serializedName: "properties.publicNetworkAccess",
        type: {
          name: "String"
        }
      },
      identity: {
        serializedName: "identity",
        type: {
          name: "Composite",
          className: "MediaServiceIdentity"
        }
      }
    }
  }
};

export const ListEdgePoliciesInput: msRest.CompositeMapper = {
  serializedName: "ListEdgePoliciesInput",
  type: {
    name: "Composite",
    className: "ListEdgePoliciesInput",
    modelProperties: {
      deviceId: {
        serializedName: "deviceId",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const EdgeUsageDataEventHub: msRest.CompositeMapper = {
  serializedName: "EdgeUsageDataEventHub",
  type: {
    name: "Composite",
    className: "EdgeUsageDataEventHub",
    modelProperties: {
      name: {
        serializedName: "name",
        type: {
          name: "String"
        }
      },
      namespace: {
        serializedName: "namespace",
        type: {
          name: "String"
        }
      },
      token: {
        serializedName: "token",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const EdgeUsageDataCollectionPolicy: msRest.CompositeMapper = {
  serializedName: "EdgeUsageDataCollectionPolicy",
  type: {
    name: "Composite",
    className: "EdgeUsageDataCollectionPolicy",
    modelProperties: {
      dataCollectionFrequency: {
        serializedName: "dataCollectionFrequency",
        type: {
          name: "String"
        }
      },
      dataReportingFrequency: {
        serializedName: "dataReportingFrequency",
        type: {
          name: "String"
        }
      },
      maxAllowedUnreportedUsageDuration: {
        serializedName: "maxAllowedUnreportedUsageDuration",
        type: {
          name: "String"
        }
      },
      eventHubDetails: {
        serializedName: "eventHubDetails",
        type: {
          name: "Composite",
          className: "EdgeUsageDataEventHub"
        }
      }
    }
  }
};

export const EdgePolicies: msRest.CompositeMapper = {
  serializedName: "EdgePolicies",
  type: {
    name: "Composite",
    className: "EdgePolicies",
    modelProperties: {
      usageDataCollectionPolicy: {
        serializedName: "usageDataCollectionPolicy",
        type: {
          name: "Composite",
          className: "EdgeUsageDataCollectionPolicy"
        }
      }
    }
  }
};

export const OperationCollection: msRest.CompositeMapper = {
  serializedName: "OperationCollection",
  type: {
    name: "Composite",
    className: "OperationCollection",
    modelProperties: {
      value: {
        serializedName: "value",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "Operation"
            }
          }
        }
      }
    }
  }
};

export const CheckNameAvailabilityInput: msRest.CompositeMapper = {
  serializedName: "CheckNameAvailabilityInput",
  type: {
    name: "Composite",
    className: "CheckNameAvailabilityInput",
    modelProperties: {
      name: {
        serializedName: "name",
        type: {
          name: "String"
        }
      },
      type: {
        serializedName: "type",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const ErrorAdditionalInfo: msRest.CompositeMapper = {
  serializedName: "ErrorAdditionalInfo",
  type: {
    name: "Composite",
    className: "ErrorAdditionalInfo",
    modelProperties: {
      type: {
        readOnly: true,
        serializedName: "type",
        type: {
          name: "String"
        }
      },
      info: {
        readOnly: true,
        serializedName: "info",
        type: {
          name: "Object"
        }
      }
    }
  }
};

export const ErrorDetail: msRest.CompositeMapper = {
  serializedName: "ErrorDetail",
  type: {
    name: "Composite",
    className: "ErrorDetail",
    modelProperties: {
      code: {
        readOnly: true,
        serializedName: "code",
        type: {
          name: "String"
        }
      },
      message: {
        readOnly: true,
        serializedName: "message",
        type: {
          name: "String"
        }
      },
      target: {
        readOnly: true,
        serializedName: "target",
        type: {
          name: "String"
        }
      },
      details: {
        readOnly: true,
        serializedName: "details",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "ErrorDetail"
            }
          }
        }
      },
      additionalInfo: {
        readOnly: true,
        serializedName: "additionalInfo",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "ErrorAdditionalInfo"
            }
          }
        }
      }
    }
  }
};

export const ErrorResponse: msRest.CompositeMapper = {
  serializedName: "ErrorResponse",
  type: {
    name: "Composite",
    className: "ErrorResponse",
    modelProperties: {
      error: {
        serializedName: "error",
        type: {
          name: "Composite",
          className: "ErrorDetail"
        }
      }
    }
  }
};

export const ProxyResource: msRest.CompositeMapper = {
  serializedName: "ProxyResource",
  type: {
    name: "Composite",
    className: "ProxyResource",
    modelProperties: {
      ...Resource.type.modelProperties
    }
  }
};

export const AzureEntityResource: msRest.CompositeMapper = {
  serializedName: "AzureEntityResource",
  type: {
    name: "Composite",
    className: "AzureEntityResource",
    modelProperties: {
      ...Resource.type.modelProperties,
      etag: {
        readOnly: true,
        serializedName: "etag",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const PrivateLinkServiceConnectionState: msRest.CompositeMapper = {
  serializedName: "PrivateLinkServiceConnectionState",
  type: {
    name: "Composite",
    className: "PrivateLinkServiceConnectionState",
    modelProperties: {
      status: {
        serializedName: "status",
        type: {
          name: "String"
        }
      },
      description: {
        serializedName: "description",
        type: {
          name: "String"
        }
      },
      actionsRequired: {
        serializedName: "actionsRequired",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const PrivateEndpoint: msRest.CompositeMapper = {
  serializedName: "PrivateEndpoint",
  type: {
    name: "Composite",
    className: "PrivateEndpoint",
    modelProperties: {
      id: {
        readOnly: true,
        serializedName: "id",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const PrivateEndpointConnection: msRest.CompositeMapper = {
  serializedName: "PrivateEndpointConnection",
  type: {
    name: "Composite",
    className: "PrivateEndpointConnection",
    modelProperties: {
      ...Resource.type.modelProperties,
      privateEndpoint: {
        serializedName: "properties.privateEndpoint",
        type: {
          name: "Composite",
          className: "PrivateEndpoint"
        }
      },
      privateLinkServiceConnectionState: {
        required: true,
        serializedName: "properties.privateLinkServiceConnectionState",
        type: {
          name: "Composite",
          className: "PrivateLinkServiceConnectionState"
        }
      },
      provisioningState: {
        serializedName: "properties.provisioningState",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const PrivateEndpointConnectionListResult: msRest.CompositeMapper = {
  serializedName: "PrivateEndpointConnectionListResult",
  type: {
    name: "Composite",
    className: "PrivateEndpointConnectionListResult",
    modelProperties: {
      value: {
        serializedName: "value",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "PrivateEndpointConnection"
            }
          }
        }
      }
    }
  }
};

export const PrivateLinkResource: msRest.CompositeMapper = {
  serializedName: "PrivateLinkResource",
  type: {
    name: "Composite",
    className: "PrivateLinkResource",
    modelProperties: {
      ...Resource.type.modelProperties,
      groupId: {
        readOnly: true,
        serializedName: "properties.groupId",
        type: {
          name: "String"
        }
      },
      requiredMembers: {
        readOnly: true,
        serializedName: "properties.requiredMembers",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "String"
            }
          }
        }
      },
      requiredZoneNames: {
        serializedName: "properties.requiredZoneNames",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "String"
            }
          }
        }
      }
    }
  }
};

export const PrivateLinkResourceListResult: msRest.CompositeMapper = {
  serializedName: "PrivateLinkResourceListResult",
  type: {
    name: "Composite",
    className: "PrivateLinkResourceListResult",
    modelProperties: {
      value: {
        serializedName: "value",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "PrivateLinkResource"
            }
          }
        }
      }
    }
  }
};

export const PresentationTimeRange: msRest.CompositeMapper = {
  serializedName: "PresentationTimeRange",
  type: {
    name: "Composite",
    className: "PresentationTimeRange",
    modelProperties: {
      startTimestamp: {
        serializedName: "startTimestamp",
        type: {
          name: "Number"
        }
      },
      endTimestamp: {
        serializedName: "endTimestamp",
        type: {
          name: "Number"
        }
      },
      presentationWindowDuration: {
        serializedName: "presentationWindowDuration",
        type: {
          name: "Number"
        }
      },
      liveBackoffDuration: {
        serializedName: "liveBackoffDuration",
        type: {
          name: "Number"
        }
      },
      timescale: {
        serializedName: "timescale",
        type: {
          name: "Number"
        }
      },
      forceEndTimestamp: {
        serializedName: "forceEndTimestamp",
        type: {
          name: "Boolean"
        }
      }
    }
  }
};

export const FilterTrackPropertyCondition: msRest.CompositeMapper = {
  serializedName: "FilterTrackPropertyCondition",
  type: {
    name: "Composite",
    className: "FilterTrackPropertyCondition",
    modelProperties: {
      property: {
        required: true,
        serializedName: "property",
        type: {
          name: "String"
        }
      },
      value: {
        required: true,
        serializedName: "value",
        type: {
          name: "String"
        }
      },
      operation: {
        required: true,
        serializedName: "operation",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const FirstQuality: msRest.CompositeMapper = {
  serializedName: "FirstQuality",
  type: {
    name: "Composite",
    className: "FirstQuality",
    modelProperties: {
      bitrate: {
        required: true,
        serializedName: "bitrate",
        type: {
          name: "Number"
        }
      }
    }
  }
};

export const FilterTrackSelection: msRest.CompositeMapper = {
  serializedName: "FilterTrackSelection",
  type: {
    name: "Composite",
    className: "FilterTrackSelection",
    modelProperties: {
      trackSelections: {
        required: true,
        serializedName: "trackSelections",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "FilterTrackPropertyCondition"
            }
          }
        }
      }
    }
  }
};

export const AccountFilter: msRest.CompositeMapper = {
  serializedName: "AccountFilter",
  type: {
    name: "Composite",
    className: "AccountFilter",
    modelProperties: {
      ...ProxyResource.type.modelProperties,
      presentationTimeRange: {
        serializedName: "properties.presentationTimeRange",
        type: {
          name: "Composite",
          className: "PresentationTimeRange"
        }
      },
      firstQuality: {
        serializedName: "properties.firstQuality",
        type: {
          name: "Composite",
          className: "FirstQuality"
        }
      },
      tracks: {
        serializedName: "properties.tracks",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "FilterTrackSelection"
            }
          }
        }
      },
      systemData: {
        readOnly: true,
        serializedName: "systemData",
        type: {
          name: "Composite",
          className: "SystemData"
        }
      }
    }
  }
};

export const AssetContainerSas: msRest.CompositeMapper = {
  serializedName: "AssetContainerSas",
  type: {
    name: "Composite",
    className: "AssetContainerSas",
    modelProperties: {
      assetContainerSasUrls: {
        serializedName: "assetContainerSasUrls",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "String"
            }
          }
        }
      }
    }
  }
};

export const AssetFileEncryptionMetadata: msRest.CompositeMapper = {
  serializedName: "AssetFileEncryptionMetadata",
  type: {
    name: "Composite",
    className: "AssetFileEncryptionMetadata",
    modelProperties: {
      initializationVector: {
        serializedName: "initializationVector",
        type: {
          name: "String"
        }
      },
      assetFileName: {
        serializedName: "assetFileName",
        type: {
          name: "String"
        }
      },
      assetFileId: {
        required: true,
        serializedName: "assetFileId",
        type: {
          name: "Uuid"
        }
      }
    }
  }
};

export const StorageEncryptedAssetDecryptionData: msRest.CompositeMapper = {
  serializedName: "StorageEncryptedAssetDecryptionData",
  type: {
    name: "Composite",
    className: "StorageEncryptedAssetDecryptionData",
    modelProperties: {
      key: {
        serializedName: "key",
        type: {
          name: "ByteArray"
        }
      },
      assetFileEncryptionMetadata: {
        serializedName: "assetFileEncryptionMetadata",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "AssetFileEncryptionMetadata"
            }
          }
        }
      }
    }
  }
};

export const AssetStreamingLocator: msRest.CompositeMapper = {
  serializedName: "AssetStreamingLocator",
  type: {
    name: "Composite",
    className: "AssetStreamingLocator",
    modelProperties: {
      name: {
        readOnly: true,
        serializedName: "name",
        type: {
          name: "String"
        }
      },
      assetName: {
        readOnly: true,
        serializedName: "assetName",
        type: {
          name: "String"
        }
      },
      created: {
        nullable: false,
        readOnly: true,
        serializedName: "created",
        type: {
          name: "DateTime"
        }
      },
      startTime: {
        nullable: false,
        readOnly: true,
        serializedName: "startTime",
        type: {
          name: "DateTime"
        }
      },
      endTime: {
        nullable: false,
        readOnly: true,
        serializedName: "endTime",
        type: {
          name: "DateTime"
        }
      },
      streamingLocatorId: {
        nullable: false,
        readOnly: true,
        serializedName: "streamingLocatorId",
        type: {
          name: "Uuid"
        }
      },
      streamingPolicyName: {
        readOnly: true,
        serializedName: "streamingPolicyName",
        type: {
          name: "String"
        }
      },
      defaultContentKeyPolicyName: {
        readOnly: true,
        serializedName: "defaultContentKeyPolicyName",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const ListStreamingLocatorsResponse: msRest.CompositeMapper = {
  serializedName: "ListStreamingLocatorsResponse",
  type: {
    name: "Composite",
    className: "ListStreamingLocatorsResponse",
    modelProperties: {
      streamingLocators: {
        readOnly: true,
        serializedName: "streamingLocators",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "AssetStreamingLocator"
            }
          }
        }
      }
    }
  }
};

export const Asset: msRest.CompositeMapper = {
  serializedName: "Asset",
  type: {
    name: "Composite",
    className: "Asset",
    modelProperties: {
      ...ProxyResource.type.modelProperties,
      assetId: {
        nullable: false,
        readOnly: true,
        serializedName: "properties.assetId",
        type: {
          name: "Uuid"
        }
      },
      created: {
        nullable: false,
        readOnly: true,
        serializedName: "properties.created",
        type: {
          name: "DateTime"
        }
      },
      lastModified: {
        nullable: false,
        readOnly: true,
        serializedName: "properties.lastModified",
        type: {
          name: "DateTime"
        }
      },
      alternateId: {
        serializedName: "properties.alternateId",
        type: {
          name: "String"
        }
      },
      description: {
        serializedName: "properties.description",
        type: {
          name: "String"
        }
      },
      container: {
        serializedName: "properties.container",
        type: {
          name: "String"
        }
      },
      storageAccountName: {
        serializedName: "properties.storageAccountName",
        type: {
          name: "String"
        }
      },
      storageEncryptionFormat: {
        nullable: false,
        readOnly: true,
        serializedName: "properties.storageEncryptionFormat",
        type: {
          name: "String"
        }
      },
      systemData: {
        readOnly: true,
        serializedName: "systemData",
        type: {
          name: "Composite",
          className: "SystemData"
        }
      }
    }
  }
};

export const AssetFilter: msRest.CompositeMapper = {
  serializedName: "AssetFilter",
  type: {
    name: "Composite",
    className: "AssetFilter",
    modelProperties: {
      ...ProxyResource.type.modelProperties,
      presentationTimeRange: {
        serializedName: "properties.presentationTimeRange",
        type: {
          name: "Composite",
          className: "PresentationTimeRange"
        }
      },
      firstQuality: {
        serializedName: "properties.firstQuality",
        type: {
          name: "Composite",
          className: "FirstQuality"
        }
      },
      tracks: {
        serializedName: "properties.tracks",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "FilterTrackSelection"
            }
          }
        }
      },
      systemData: {
        readOnly: true,
        serializedName: "systemData",
        type: {
          name: "Composite",
          className: "SystemData"
        }
      }
    }
  }
};

export const ListContainerSasInput: msRest.CompositeMapper = {
  serializedName: "ListContainerSasInput",
  type: {
    name: "Composite",
    className: "ListContainerSasInput",
    modelProperties: {
      permissions: {
        serializedName: "permissions",
        type: {
          name: "String"
        }
      },
      expiryTime: {
        serializedName: "expiryTime",
        type: {
          name: "DateTime"
        }
      }
    }
  }
};

export const ContentKeyPolicyPlayReadyExplicitAnalogTelevisionRestriction: msRest.CompositeMapper = {
  serializedName: "ContentKeyPolicyPlayReadyExplicitAnalogTelevisionRestriction",
  type: {
    name: "Composite",
    className: "ContentKeyPolicyPlayReadyExplicitAnalogTelevisionRestriction",
    modelProperties: {
      bestEffort: {
        required: true,
        serializedName: "bestEffort",
        type: {
          name: "Boolean"
        }
      },
      configurationData: {
        required: true,
        serializedName: "configurationData",
        type: {
          name: "Number"
        }
      }
    }
  }
};

export const ContentKeyPolicyPlayReadyContentKeyLocation: msRest.CompositeMapper = {
  serializedName: "ContentKeyPolicyPlayReadyContentKeyLocation",
  type: {
    name: "Composite",
    polymorphicDiscriminator: {
      serializedName: "@odata.type",
      clientName: "odatatype"
    },
    uberParent: "ContentKeyPolicyPlayReadyContentKeyLocation",
    className: "ContentKeyPolicyPlayReadyContentKeyLocation",
    modelProperties: {
      odatatype: {
        required: true,
        serializedName: "@odata\\.type",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const ContentKeyPolicyPlayReadyContentEncryptionKeyFromHeader: msRest.CompositeMapper = {
  serializedName: "#Microsoft.Media.ContentKeyPolicyPlayReadyContentEncryptionKeyFromHeader",
  type: {
    name: "Composite",
    polymorphicDiscriminator: ContentKeyPolicyPlayReadyContentKeyLocation.type.polymorphicDiscriminator,
    uberParent: "ContentKeyPolicyPlayReadyContentKeyLocation",
    className: "ContentKeyPolicyPlayReadyContentEncryptionKeyFromHeader",
    modelProperties: {
      ...ContentKeyPolicyPlayReadyContentKeyLocation.type.modelProperties
    }
  }
};

export const ContentKeyPolicyPlayReadyContentEncryptionKeyFromKeyIdentifier: msRest.CompositeMapper = {
  serializedName: "#Microsoft.Media.ContentKeyPolicyPlayReadyContentEncryptionKeyFromKeyIdentifier",
  type: {
    name: "Composite",
    polymorphicDiscriminator: ContentKeyPolicyPlayReadyContentKeyLocation.type.polymorphicDiscriminator,
    uberParent: "ContentKeyPolicyPlayReadyContentKeyLocation",
    className: "ContentKeyPolicyPlayReadyContentEncryptionKeyFromKeyIdentifier",
    modelProperties: {
      ...ContentKeyPolicyPlayReadyContentKeyLocation.type.modelProperties,
      keyId: {
        required: true,
        nullable: true,
        serializedName: "keyId",
        type: {
          name: "Uuid"
        }
      }
    }
  }
};

export const ContentKeyPolicyPlayReadyPlayRight: msRest.CompositeMapper = {
  serializedName: "ContentKeyPolicyPlayReadyPlayRight",
  type: {
    name: "Composite",
    className: "ContentKeyPolicyPlayReadyPlayRight",
    modelProperties: {
      firstPlayExpiration: {
        serializedName: "firstPlayExpiration",
        type: {
          name: "TimeSpan"
        }
      },
      scmsRestriction: {
        serializedName: "scmsRestriction",
        type: {
          name: "Number"
        }
      },
      agcAndColorStripeRestriction: {
        serializedName: "agcAndColorStripeRestriction",
        type: {
          name: "Number"
        }
      },
      explicitAnalogTelevisionOutputRestriction: {
        serializedName: "explicitAnalogTelevisionOutputRestriction",
        type: {
          name: "Composite",
          className: "ContentKeyPolicyPlayReadyExplicitAnalogTelevisionRestriction"
        }
      },
      digitalVideoOnlyContentRestriction: {
        required: true,
        serializedName: "digitalVideoOnlyContentRestriction",
        type: {
          name: "Boolean"
        }
      },
      imageConstraintForAnalogComponentVideoRestriction: {
        required: true,
        serializedName: "imageConstraintForAnalogComponentVideoRestriction",
        type: {
          name: "Boolean"
        }
      },
      imageConstraintForAnalogComputerMonitorRestriction: {
        required: true,
        serializedName: "imageConstraintForAnalogComputerMonitorRestriction",
        type: {
          name: "Boolean"
        }
      },
      allowPassingVideoContentToUnknownOutput: {
        required: true,
        serializedName: "allowPassingVideoContentToUnknownOutput",
        type: {
          name: "String"
        }
      },
      uncompressedDigitalVideoOpl: {
        serializedName: "uncompressedDigitalVideoOpl",
        type: {
          name: "Number"
        }
      },
      compressedDigitalVideoOpl: {
        serializedName: "compressedDigitalVideoOpl",
        type: {
          name: "Number"
        }
      },
      analogVideoOpl: {
        serializedName: "analogVideoOpl",
        type: {
          name: "Number"
        }
      },
      compressedDigitalAudioOpl: {
        serializedName: "compressedDigitalAudioOpl",
        type: {
          name: "Number"
        }
      },
      uncompressedDigitalAudioOpl: {
        serializedName: "uncompressedDigitalAudioOpl",
        type: {
          name: "Number"
        }
      }
    }
  }
};

export const ContentKeyPolicyTokenClaim: msRest.CompositeMapper = {
  serializedName: "ContentKeyPolicyTokenClaim",
  type: {
    name: "Composite",
    className: "ContentKeyPolicyTokenClaim",
    modelProperties: {
      claimType: {
        serializedName: "claimType",
        type: {
          name: "String"
        }
      },
      claimValue: {
        serializedName: "claimValue",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const ContentKeyPolicyPlayReadyLicense: msRest.CompositeMapper = {
  serializedName: "ContentKeyPolicyPlayReadyLicense",
  type: {
    name: "Composite",
    className: "ContentKeyPolicyPlayReadyLicense",
    modelProperties: {
      allowTestDevices: {
        required: true,
        serializedName: "allowTestDevices",
        type: {
          name: "Boolean"
        }
      },
      beginDate: {
        serializedName: "beginDate",
        type: {
          name: "DateTime"
        }
      },
      expirationDate: {
        serializedName: "expirationDate",
        type: {
          name: "DateTime"
        }
      },
      relativeBeginDate: {
        serializedName: "relativeBeginDate",
        type: {
          name: "TimeSpan"
        }
      },
      relativeExpirationDate: {
        serializedName: "relativeExpirationDate",
        type: {
          name: "TimeSpan"
        }
      },
      gracePeriod: {
        serializedName: "gracePeriod",
        type: {
          name: "TimeSpan"
        }
      },
      playRight: {
        serializedName: "playRight",
        type: {
          name: "Composite",
          className: "ContentKeyPolicyPlayReadyPlayRight"
        }
      },
      licenseType: {
        required: true,
        serializedName: "licenseType",
        type: {
          name: "String"
        }
      },
      contentKeyLocation: {
        required: true,
        serializedName: "contentKeyLocation",
        type: {
          name: "Composite",
          className: "ContentKeyPolicyPlayReadyContentKeyLocation"
        }
      },
      contentType: {
        required: true,
        serializedName: "contentType",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const ContentKeyPolicyRestriction: msRest.CompositeMapper = {
  serializedName: "ContentKeyPolicyRestriction",
  type: {
    name: "Composite",
    polymorphicDiscriminator: {
      serializedName: "@odata.type",
      clientName: "odatatype"
    },
    uberParent: "ContentKeyPolicyRestriction",
    className: "ContentKeyPolicyRestriction",
    modelProperties: {
      odatatype: {
        required: true,
        serializedName: "@odata\\.type",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const ContentKeyPolicyOpenRestriction: msRest.CompositeMapper = {
  serializedName: "#Microsoft.Media.ContentKeyPolicyOpenRestriction",
  type: {
    name: "Composite",
    polymorphicDiscriminator: ContentKeyPolicyRestriction.type.polymorphicDiscriminator,
    uberParent: "ContentKeyPolicyRestriction",
    className: "ContentKeyPolicyOpenRestriction",
    modelProperties: {
      ...ContentKeyPolicyRestriction.type.modelProperties
    }
  }
};

export const ContentKeyPolicyUnknownRestriction: msRest.CompositeMapper = {
  serializedName: "#Microsoft.Media.ContentKeyPolicyUnknownRestriction",
  type: {
    name: "Composite",
    polymorphicDiscriminator: ContentKeyPolicyRestriction.type.polymorphicDiscriminator,
    uberParent: "ContentKeyPolicyRestriction",
    className: "ContentKeyPolicyUnknownRestriction",
    modelProperties: {
      ...ContentKeyPolicyRestriction.type.modelProperties
    }
  }
};

export const ContentKeyPolicyConfiguration: msRest.CompositeMapper = {
  serializedName: "ContentKeyPolicyConfiguration",
  type: {
    name: "Composite",
    polymorphicDiscriminator: {
      serializedName: "@odata.type",
      clientName: "odatatype"
    },
    uberParent: "ContentKeyPolicyConfiguration",
    className: "ContentKeyPolicyConfiguration",
    modelProperties: {
      odatatype: {
        required: true,
        serializedName: "@odata\\.type",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const ContentKeyPolicyRestrictionTokenKey: msRest.CompositeMapper = {
  serializedName: "ContentKeyPolicyRestrictionTokenKey",
  type: {
    name: "Composite",
    polymorphicDiscriminator: {
      serializedName: "@odata.type",
      clientName: "odatatype"
    },
    uberParent: "ContentKeyPolicyRestrictionTokenKey",
    className: "ContentKeyPolicyRestrictionTokenKey",
    modelProperties: {
      odatatype: {
        required: true,
        serializedName: "@odata\\.type",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const ContentKeyPolicySymmetricTokenKey: msRest.CompositeMapper = {
  serializedName: "#Microsoft.Media.ContentKeyPolicySymmetricTokenKey",
  type: {
    name: "Composite",
    polymorphicDiscriminator: ContentKeyPolicyRestrictionTokenKey.type.polymorphicDiscriminator,
    uberParent: "ContentKeyPolicyRestrictionTokenKey",
    className: "ContentKeyPolicySymmetricTokenKey",
    modelProperties: {
      ...ContentKeyPolicyRestrictionTokenKey.type.modelProperties,
      keyValue: {
        required: true,
        nullable: true,
        serializedName: "keyValue",
        type: {
          name: "ByteArray"
        }
      }
    }
  }
};

export const ContentKeyPolicyRsaTokenKey: msRest.CompositeMapper = {
  serializedName: "#Microsoft.Media.ContentKeyPolicyRsaTokenKey",
  type: {
    name: "Composite",
    polymorphicDiscriminator: ContentKeyPolicyRestrictionTokenKey.type.polymorphicDiscriminator,
    uberParent: "ContentKeyPolicyRestrictionTokenKey",
    className: "ContentKeyPolicyRsaTokenKey",
    modelProperties: {
      ...ContentKeyPolicyRestrictionTokenKey.type.modelProperties,
      exponent: {
        required: true,
        nullable: true,
        serializedName: "exponent",
        type: {
          name: "ByteArray"
        }
      },
      modulus: {
        required: true,
        nullable: true,
        serializedName: "modulus",
        type: {
          name: "ByteArray"
        }
      }
    }
  }
};

export const ContentKeyPolicyX509CertificateTokenKey: msRest.CompositeMapper = {
  serializedName: "#Microsoft.Media.ContentKeyPolicyX509CertificateTokenKey",
  type: {
    name: "Composite",
    polymorphicDiscriminator: ContentKeyPolicyRestrictionTokenKey.type.polymorphicDiscriminator,
    uberParent: "ContentKeyPolicyRestrictionTokenKey",
    className: "ContentKeyPolicyX509CertificateTokenKey",
    modelProperties: {
      ...ContentKeyPolicyRestrictionTokenKey.type.modelProperties,
      rawBody: {
        required: true,
        nullable: true,
        serializedName: "rawBody",
        type: {
          name: "ByteArray"
        }
      }
    }
  }
};

export const ContentKeyPolicyTokenRestriction: msRest.CompositeMapper = {
  serializedName: "#Microsoft.Media.ContentKeyPolicyTokenRestriction",
  type: {
    name: "Composite",
    polymorphicDiscriminator: ContentKeyPolicyRestriction.type.polymorphicDiscriminator,
    uberParent: "ContentKeyPolicyRestriction",
    className: "ContentKeyPolicyTokenRestriction",
    modelProperties: {
      ...ContentKeyPolicyRestriction.type.modelProperties,
      issuer: {
        required: true,
        serializedName: "issuer",
        type: {
          name: "String"
        }
      },
      audience: {
        required: true,
        serializedName: "audience",
        type: {
          name: "String"
        }
      },
      primaryVerificationKey: {
        required: true,
        serializedName: "primaryVerificationKey",
        type: {
          name: "Composite",
          className: "ContentKeyPolicyRestrictionTokenKey"
        }
      },
      alternateVerificationKeys: {
        serializedName: "alternateVerificationKeys",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "ContentKeyPolicyRestrictionTokenKey"
            }
          }
        }
      },
      requiredClaims: {
        serializedName: "requiredClaims",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "ContentKeyPolicyTokenClaim"
            }
          }
        }
      },
      restrictionTokenType: {
        required: true,
        serializedName: "restrictionTokenType",
        type: {
          name: "String"
        }
      },
      openIdConnectDiscoveryDocument: {
        serializedName: "openIdConnectDiscoveryDocument",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const ContentKeyPolicyClearKeyConfiguration: msRest.CompositeMapper = {
  serializedName: "#Microsoft.Media.ContentKeyPolicyClearKeyConfiguration",
  type: {
    name: "Composite",
    polymorphicDiscriminator: ContentKeyPolicyConfiguration.type.polymorphicDiscriminator,
    uberParent: "ContentKeyPolicyConfiguration",
    className: "ContentKeyPolicyClearKeyConfiguration",
    modelProperties: {
      ...ContentKeyPolicyConfiguration.type.modelProperties
    }
  }
};

export const ContentKeyPolicyUnknownConfiguration: msRest.CompositeMapper = {
  serializedName: "#Microsoft.Media.ContentKeyPolicyUnknownConfiguration",
  type: {
    name: "Composite",
    polymorphicDiscriminator: ContentKeyPolicyConfiguration.type.polymorphicDiscriminator,
    uberParent: "ContentKeyPolicyConfiguration",
    className: "ContentKeyPolicyUnknownConfiguration",
    modelProperties: {
      ...ContentKeyPolicyConfiguration.type.modelProperties
    }
  }
};

export const ContentKeyPolicyWidevineConfiguration: msRest.CompositeMapper = {
  serializedName: "#Microsoft.Media.ContentKeyPolicyWidevineConfiguration",
  type: {
    name: "Composite",
    polymorphicDiscriminator: ContentKeyPolicyConfiguration.type.polymorphicDiscriminator,
    uberParent: "ContentKeyPolicyConfiguration",
    className: "ContentKeyPolicyWidevineConfiguration",
    modelProperties: {
      ...ContentKeyPolicyConfiguration.type.modelProperties,
      widevineTemplate: {
        required: true,
        serializedName: "widevineTemplate",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const ContentKeyPolicyPlayReadyConfiguration: msRest.CompositeMapper = {
  serializedName: "#Microsoft.Media.ContentKeyPolicyPlayReadyConfiguration",
  type: {
    name: "Composite",
    polymorphicDiscriminator: ContentKeyPolicyConfiguration.type.polymorphicDiscriminator,
    uberParent: "ContentKeyPolicyConfiguration",
    className: "ContentKeyPolicyPlayReadyConfiguration",
    modelProperties: {
      ...ContentKeyPolicyConfiguration.type.modelProperties,
      licenses: {
        required: true,
        serializedName: "licenses",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "ContentKeyPolicyPlayReadyLicense"
            }
          }
        }
      },
      responseCustomData: {
        serializedName: "responseCustomData",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const ContentKeyPolicyFairPlayOfflineRentalConfiguration: msRest.CompositeMapper = {
  serializedName: "ContentKeyPolicyFairPlayOfflineRentalConfiguration",
  type: {
    name: "Composite",
    className: "ContentKeyPolicyFairPlayOfflineRentalConfiguration",
    modelProperties: {
      playbackDurationSeconds: {
        required: true,
        serializedName: "playbackDurationSeconds",
        type: {
          name: "Number"
        }
      },
      storageDurationSeconds: {
        required: true,
        serializedName: "storageDurationSeconds",
        type: {
          name: "Number"
        }
      }
    }
  }
};

export const ContentKeyPolicyFairPlayConfiguration: msRest.CompositeMapper = {
  serializedName: "#Microsoft.Media.ContentKeyPolicyFairPlayConfiguration",
  type: {
    name: "Composite",
    polymorphicDiscriminator: ContentKeyPolicyConfiguration.type.polymorphicDiscriminator,
    uberParent: "ContentKeyPolicyConfiguration",
    className: "ContentKeyPolicyFairPlayConfiguration",
    modelProperties: {
      ...ContentKeyPolicyConfiguration.type.modelProperties,
      ask: {
        required: true,
        nullable: true,
        serializedName: "ask",
        type: {
          name: "ByteArray"
        }
      },
      fairPlayPfxPassword: {
        required: true,
        nullable: true,
        serializedName: "fairPlayPfxPassword",
        type: {
          name: "String"
        }
      },
      fairPlayPfx: {
        required: true,
        nullable: true,
        serializedName: "fairPlayPfx",
        type: {
          name: "String"
        }
      },
      rentalAndLeaseKeyType: {
        required: true,
        serializedName: "rentalAndLeaseKeyType",
        type: {
          name: "String"
        }
      },
      rentalDuration: {
        required: true,
        serializedName: "rentalDuration",
        type: {
          name: "Number"
        }
      },
      offlineRentalConfiguration: {
        serializedName: "offlineRentalConfiguration",
        type: {
          name: "Composite",
          className: "ContentKeyPolicyFairPlayOfflineRentalConfiguration"
        }
      }
    }
  }
};

export const ContentKeyPolicyOption: msRest.CompositeMapper = {
  serializedName: "ContentKeyPolicyOption",
  type: {
    name: "Composite",
    className: "ContentKeyPolicyOption",
    modelProperties: {
      policyOptionId: {
        nullable: false,
        readOnly: true,
        serializedName: "policyOptionId",
        type: {
          name: "Uuid"
        }
      },
      name: {
        serializedName: "name",
        type: {
          name: "String"
        }
      },
      configuration: {
        required: true,
        serializedName: "configuration",
        type: {
          name: "Composite",
          className: "ContentKeyPolicyConfiguration"
        }
      },
      restriction: {
        required: true,
        serializedName: "restriction",
        type: {
          name: "Composite",
          className: "ContentKeyPolicyRestriction"
        }
      }
    }
  }
};

export const ContentKeyPolicyProperties: msRest.CompositeMapper = {
  serializedName: "ContentKeyPolicyProperties",
  type: {
    name: "Composite",
    className: "ContentKeyPolicyProperties",
    modelProperties: {
      policyId: {
        nullable: false,
        readOnly: true,
        serializedName: "policyId",
        type: {
          name: "Uuid"
        }
      },
      created: {
        nullable: false,
        readOnly: true,
        serializedName: "created",
        type: {
          name: "DateTime"
        }
      },
      lastModified: {
        nullable: false,
        readOnly: true,
        serializedName: "lastModified",
        type: {
          name: "DateTime"
        }
      },
      description: {
        serializedName: "description",
        type: {
          name: "String"
        }
      },
      options: {
        required: true,
        serializedName: "options",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "ContentKeyPolicyOption"
            }
          }
        }
      }
    }
  }
};

export const ContentKeyPolicy: msRest.CompositeMapper = {
  serializedName: "ContentKeyPolicy",
  type: {
    name: "Composite",
    className: "ContentKeyPolicy",
    modelProperties: {
      ...ProxyResource.type.modelProperties,
      policyId: {
        nullable: false,
        readOnly: true,
        serializedName: "properties.policyId",
        type: {
          name: "Uuid"
        }
      },
      created: {
        nullable: false,
        readOnly: true,
        serializedName: "properties.created",
        type: {
          name: "DateTime"
        }
      },
      lastModified: {
        nullable: false,
        readOnly: true,
        serializedName: "properties.lastModified",
        type: {
          name: "DateTime"
        }
      },
      description: {
        serializedName: "properties.description",
        type: {
          name: "String"
        }
      },
      options: {
        required: true,
        serializedName: "properties.options",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "ContentKeyPolicyOption"
            }
          }
        }
      },
      systemData: {
        readOnly: true,
        serializedName: "systemData",
        type: {
          name: "Composite",
          className: "SystemData"
        }
      }
    }
  }
};

export const TrackPropertyCondition: msRest.CompositeMapper = {
  serializedName: "TrackPropertyCondition",
  type: {
    name: "Composite",
    className: "TrackPropertyCondition",
    modelProperties: {
      property: {
        required: true,
        serializedName: "property",
        type: {
          name: "String"
        }
      },
      operation: {
        required: true,
        serializedName: "operation",
        type: {
          name: "String"
        }
      },
      value: {
        serializedName: "value",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const TrackSelection: msRest.CompositeMapper = {
  serializedName: "TrackSelection",
  type: {
    name: "Composite",
    className: "TrackSelection",
    modelProperties: {
      trackSelections: {
        serializedName: "trackSelections",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "TrackPropertyCondition"
            }
          }
        }
      }
    }
  }
};

export const DefaultKey: msRest.CompositeMapper = {
  serializedName: "DefaultKey",
  type: {
    name: "Composite",
    className: "DefaultKey",
    modelProperties: {
      label: {
        serializedName: "label",
        type: {
          name: "String"
        }
      },
      policyName: {
        serializedName: "policyName",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const StreamingPolicyContentKey: msRest.CompositeMapper = {
  serializedName: "StreamingPolicyContentKey",
  type: {
    name: "Composite",
    className: "StreamingPolicyContentKey",
    modelProperties: {
      label: {
        serializedName: "label",
        type: {
          name: "String"
        }
      },
      policyName: {
        serializedName: "policyName",
        type: {
          name: "String"
        }
      },
      tracks: {
        serializedName: "tracks",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "TrackSelection"
            }
          }
        }
      }
    }
  }
};

export const StreamingPolicyContentKeys: msRest.CompositeMapper = {
  serializedName: "StreamingPolicyContentKeys",
  type: {
    name: "Composite",
    className: "StreamingPolicyContentKeys",
    modelProperties: {
      defaultKey: {
        serializedName: "defaultKey",
        type: {
          name: "Composite",
          className: "DefaultKey"
        }
      },
      keyToTrackMappings: {
        serializedName: "keyToTrackMappings",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "StreamingPolicyContentKey"
            }
          }
        }
      }
    }
  }
};

export const StreamingPolicyPlayReadyConfiguration: msRest.CompositeMapper = {
  serializedName: "StreamingPolicyPlayReadyConfiguration",
  type: {
    name: "Composite",
    className: "StreamingPolicyPlayReadyConfiguration",
    modelProperties: {
      customLicenseAcquisitionUrlTemplate: {
        serializedName: "customLicenseAcquisitionUrlTemplate",
        type: {
          name: "String"
        }
      },
      playReadyCustomAttributes: {
        serializedName: "playReadyCustomAttributes",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const StreamingPolicyWidevineConfiguration: msRest.CompositeMapper = {
  serializedName: "StreamingPolicyWidevineConfiguration",
  type: {
    name: "Composite",
    className: "StreamingPolicyWidevineConfiguration",
    modelProperties: {
      customLicenseAcquisitionUrlTemplate: {
        serializedName: "customLicenseAcquisitionUrlTemplate",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const StreamingPolicyFairPlayConfiguration: msRest.CompositeMapper = {
  serializedName: "StreamingPolicyFairPlayConfiguration",
  type: {
    name: "Composite",
    className: "StreamingPolicyFairPlayConfiguration",
    modelProperties: {
      customLicenseAcquisitionUrlTemplate: {
        serializedName: "customLicenseAcquisitionUrlTemplate",
        type: {
          name: "String"
        }
      },
      allowPersistentLicense: {
        required: true,
        serializedName: "allowPersistentLicense",
        type: {
          name: "Boolean"
        }
      }
    }
  }
};

export const CbcsDrmConfiguration: msRest.CompositeMapper = {
  serializedName: "CbcsDrmConfiguration",
  type: {
    name: "Composite",
    className: "CbcsDrmConfiguration",
    modelProperties: {
      fairPlay: {
        serializedName: "fairPlay",
        type: {
          name: "Composite",
          className: "StreamingPolicyFairPlayConfiguration"
        }
      },
      playReady: {
        serializedName: "playReady",
        type: {
          name: "Composite",
          className: "StreamingPolicyPlayReadyConfiguration"
        }
      },
      widevine: {
        serializedName: "widevine",
        type: {
          name: "Composite",
          className: "StreamingPolicyWidevineConfiguration"
        }
      }
    }
  }
};

export const CencDrmConfiguration: msRest.CompositeMapper = {
  serializedName: "CencDrmConfiguration",
  type: {
    name: "Composite",
    className: "CencDrmConfiguration",
    modelProperties: {
      playReady: {
        serializedName: "playReady",
        type: {
          name: "Composite",
          className: "StreamingPolicyPlayReadyConfiguration"
        }
      },
      widevine: {
        serializedName: "widevine",
        type: {
          name: "Composite",
          className: "StreamingPolicyWidevineConfiguration"
        }
      }
    }
  }
};

export const EnabledProtocols: msRest.CompositeMapper = {
  serializedName: "EnabledProtocols",
  type: {
    name: "Composite",
    className: "EnabledProtocols",
    modelProperties: {
      download: {
        required: true,
        serializedName: "download",
        type: {
          name: "Boolean"
        }
      },
      dash: {
        required: true,
        serializedName: "dash",
        type: {
          name: "Boolean"
        }
      },
      hls: {
        required: true,
        serializedName: "hls",
        type: {
          name: "Boolean"
        }
      },
      smoothStreaming: {
        required: true,
        serializedName: "smoothStreaming",
        type: {
          name: "Boolean"
        }
      }
    }
  }
};

export const NoEncryption: msRest.CompositeMapper = {
  serializedName: "NoEncryption",
  type: {
    name: "Composite",
    className: "NoEncryption",
    modelProperties: {
      enabledProtocols: {
        serializedName: "enabledProtocols",
        type: {
          name: "Composite",
          className: "EnabledProtocols"
        }
      }
    }
  }
};

export const EnvelopeEncryption: msRest.CompositeMapper = {
  serializedName: "EnvelopeEncryption",
  type: {
    name: "Composite",
    className: "EnvelopeEncryption",
    modelProperties: {
      enabledProtocols: {
        serializedName: "enabledProtocols",
        type: {
          name: "Composite",
          className: "EnabledProtocols"
        }
      },
      clearTracks: {
        serializedName: "clearTracks",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "TrackSelection"
            }
          }
        }
      },
      contentKeys: {
        serializedName: "contentKeys",
        type: {
          name: "Composite",
          className: "StreamingPolicyContentKeys"
        }
      },
      customKeyAcquisitionUrlTemplate: {
        serializedName: "customKeyAcquisitionUrlTemplate",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const CommonEncryptionCenc: msRest.CompositeMapper = {
  serializedName: "CommonEncryptionCenc",
  type: {
    name: "Composite",
    className: "CommonEncryptionCenc",
    modelProperties: {
      enabledProtocols: {
        serializedName: "enabledProtocols",
        type: {
          name: "Composite",
          className: "EnabledProtocols"
        }
      },
      clearTracks: {
        serializedName: "clearTracks",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "TrackSelection"
            }
          }
        }
      },
      contentKeys: {
        serializedName: "contentKeys",
        type: {
          name: "Composite",
          className: "StreamingPolicyContentKeys"
        }
      },
      drm: {
        serializedName: "drm",
        type: {
          name: "Composite",
          className: "CencDrmConfiguration"
        }
      }
    }
  }
};

export const CommonEncryptionCbcs: msRest.CompositeMapper = {
  serializedName: "CommonEncryptionCbcs",
  type: {
    name: "Composite",
    className: "CommonEncryptionCbcs",
    modelProperties: {
      enabledProtocols: {
        serializedName: "enabledProtocols",
        type: {
          name: "Composite",
          className: "EnabledProtocols"
        }
      },
      clearTracks: {
        serializedName: "clearTracks",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "TrackSelection"
            }
          }
        }
      },
      contentKeys: {
        serializedName: "contentKeys",
        type: {
          name: "Composite",
          className: "StreamingPolicyContentKeys"
        }
      },
      drm: {
        serializedName: "drm",
        type: {
          name: "Composite",
          className: "CbcsDrmConfiguration"
        }
      }
    }
  }
};

export const StreamingPolicy: msRest.CompositeMapper = {
  serializedName: "StreamingPolicy",
  type: {
    name: "Composite",
    className: "StreamingPolicy",
    modelProperties: {
      ...ProxyResource.type.modelProperties,
      created: {
        nullable: false,
        readOnly: true,
        serializedName: "properties.created",
        type: {
          name: "DateTime"
        }
      },
      defaultContentKeyPolicyName: {
        serializedName: "properties.defaultContentKeyPolicyName",
        type: {
          name: "String"
        }
      },
      envelopeEncryption: {
        serializedName: "properties.envelopeEncryption",
        type: {
          name: "Composite",
          className: "EnvelopeEncryption"
        }
      },
      commonEncryptionCenc: {
        serializedName: "properties.commonEncryptionCenc",
        type: {
          name: "Composite",
          className: "CommonEncryptionCenc"
        }
      },
      commonEncryptionCbcs: {
        serializedName: "properties.commonEncryptionCbcs",
        type: {
          name: "Composite",
          className: "CommonEncryptionCbcs"
        }
      },
      noEncryption: {
        serializedName: "properties.noEncryption",
        type: {
          name: "Composite",
          className: "NoEncryption"
        }
      },
      systemData: {
        readOnly: true,
        serializedName: "systemData",
        type: {
          name: "Composite",
          className: "SystemData"
        }
      }
    }
  }
};

export const StreamingLocatorContentKey: msRest.CompositeMapper = {
  serializedName: "StreamingLocatorContentKey",
  type: {
    name: "Composite",
    className: "StreamingLocatorContentKey",
    modelProperties: {
      id: {
        required: true,
        serializedName: "id",
        type: {
          name: "Uuid"
        }
      },
      type: {
        nullable: false,
        readOnly: true,
        serializedName: "type",
        type: {
          name: "String"
        }
      },
      labelReferenceInStreamingPolicy: {
        serializedName: "labelReferenceInStreamingPolicy",
        type: {
          name: "String"
        }
      },
      value: {
        serializedName: "value",
        type: {
          name: "String"
        }
      },
      policyName: {
        readOnly: true,
        serializedName: "policyName",
        type: {
          name: "String"
        }
      },
      tracks: {
        readOnly: true,
        serializedName: "tracks",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "TrackSelection"
            }
          }
        }
      }
    }
  }
};

export const StreamingPath: msRest.CompositeMapper = {
  serializedName: "StreamingPath",
  type: {
    name: "Composite",
    className: "StreamingPath",
    modelProperties: {
      streamingProtocol: {
        required: true,
        serializedName: "streamingProtocol",
        type: {
          name: "String"
        }
      },
      encryptionScheme: {
        required: true,
        serializedName: "encryptionScheme",
        type: {
          name: "String"
        }
      },
      paths: {
        serializedName: "paths",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "String"
            }
          }
        }
      }
    }
  }
};

export const ListContentKeysResponse: msRest.CompositeMapper = {
  serializedName: "ListContentKeysResponse",
  type: {
    name: "Composite",
    className: "ListContentKeysResponse",
    modelProperties: {
      contentKeys: {
        serializedName: "contentKeys",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "StreamingLocatorContentKey"
            }
          }
        }
      }
    }
  }
};

export const ListPathsResponse: msRest.CompositeMapper = {
  serializedName: "ListPathsResponse",
  type: {
    name: "Composite",
    className: "ListPathsResponse",
    modelProperties: {
      streamingPaths: {
        serializedName: "streamingPaths",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "StreamingPath"
            }
          }
        }
      },
      downloadPaths: {
        serializedName: "downloadPaths",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "String"
            }
          }
        }
      }
    }
  }
};

export const StreamingLocator: msRest.CompositeMapper = {
  serializedName: "StreamingLocator",
  type: {
    name: "Composite",
    className: "StreamingLocator",
    modelProperties: {
      ...ProxyResource.type.modelProperties,
      assetName: {
        required: true,
        serializedName: "properties.assetName",
        type: {
          name: "String"
        }
      },
      created: {
        nullable: false,
        readOnly: true,
        serializedName: "properties.created",
        type: {
          name: "DateTime"
        }
      },
      startTime: {
        serializedName: "properties.startTime",
        type: {
          name: "DateTime"
        }
      },
      endTime: {
        serializedName: "properties.endTime",
        type: {
          name: "DateTime"
        }
      },
      streamingLocatorId: {
        serializedName: "properties.streamingLocatorId",
        type: {
          name: "Uuid"
        }
      },
      streamingPolicyName: {
        required: true,
        serializedName: "properties.streamingPolicyName",
        type: {
          name: "String"
        }
      },
      defaultContentKeyPolicyName: {
        serializedName: "properties.defaultContentKeyPolicyName",
        type: {
          name: "String"
        }
      },
      contentKeys: {
        serializedName: "properties.contentKeys",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "StreamingLocatorContentKey"
            }
          }
        }
      },
      alternativeMediaId: {
        serializedName: "properties.alternativeMediaId",
        type: {
          name: "String"
        }
      },
      filters: {
        serializedName: "properties.filters",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "String"
            }
          }
        }
      },
      systemData: {
        readOnly: true,
        serializedName: "systemData",
        type: {
          name: "Composite",
          className: "SystemData"
        }
      }
    }
  }
};

export const Hls: msRest.CompositeMapper = {
  serializedName: "Hls",
  type: {
    name: "Composite",
    className: "Hls",
    modelProperties: {
      fragmentsPerTsSegment: {
        serializedName: "fragmentsPerTsSegment",
        type: {
          name: "Number"
        }
      }
    }
  }
};

export const LiveOutput: msRest.CompositeMapper = {
  serializedName: "LiveOutput",
  type: {
    name: "Composite",
    className: "LiveOutput",
    modelProperties: {
      ...ProxyResource.type.modelProperties,
      description: {
        serializedName: "properties.description",
        type: {
          name: "String"
        }
      },
      assetName: {
        required: true,
        serializedName: "properties.assetName",
        type: {
          name: "String"
        }
      },
      archiveWindowLength: {
        required: true,
        serializedName: "properties.archiveWindowLength",
        type: {
          name: "TimeSpan"
        }
      },
      manifestName: {
        serializedName: "properties.manifestName",
        type: {
          name: "String"
        }
      },
      hls: {
        serializedName: "properties.hls",
        type: {
          name: "Composite",
          className: "Hls"
        }
      },
      outputSnapTime: {
        serializedName: "properties.outputSnapTime",
        type: {
          name: "Number"
        }
      },
      created: {
        readOnly: true,
        serializedName: "properties.created",
        type: {
          name: "DateTime"
        }
      },
      lastModified: {
        readOnly: true,
        serializedName: "properties.lastModified",
        type: {
          name: "DateTime"
        }
      },
      provisioningState: {
        readOnly: true,
        serializedName: "properties.provisioningState",
        type: {
          name: "String"
        }
      },
      resourceState: {
        readOnly: true,
        serializedName: "properties.resourceState",
        type: {
          name: "String"
        }
      },
      systemData: {
        readOnly: true,
        serializedName: "systemData",
        type: {
          name: "Composite",
          className: "SystemData"
        }
      }
    }
  }
};

export const LiveEventEndpoint: msRest.CompositeMapper = {
  serializedName: "LiveEventEndpoint",
  type: {
    name: "Composite",
    className: "LiveEventEndpoint",
    modelProperties: {
      protocol: {
        serializedName: "protocol",
        type: {
          name: "String"
        }
      },
      url: {
        serializedName: "url",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const IPRange: msRest.CompositeMapper = {
  serializedName: "IPRange",
  type: {
    name: "Composite",
    className: "IPRange",
    modelProperties: {
      name: {
        serializedName: "name",
        type: {
          name: "String"
        }
      },
      address: {
        serializedName: "address",
        type: {
          name: "String"
        }
      },
      subnetPrefixLength: {
        serializedName: "subnetPrefixLength",
        type: {
          name: "Number"
        }
      }
    }
  }
};

export const IPAccessControl: msRest.CompositeMapper = {
  serializedName: "IPAccessControl",
  type: {
    name: "Composite",
    className: "IPAccessControl",
    modelProperties: {
      allow: {
        serializedName: "allow",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "IPRange"
            }
          }
        }
      }
    }
  }
};

export const LiveEventInputAccessControl: msRest.CompositeMapper = {
  serializedName: "LiveEventInputAccessControl",
  type: {
    name: "Composite",
    className: "LiveEventInputAccessControl",
    modelProperties: {
      ip: {
        serializedName: "ip",
        type: {
          name: "Composite",
          className: "IPAccessControl"
        }
      }
    }
  }
};

export const LiveEventInput: msRest.CompositeMapper = {
  serializedName: "LiveEventInput",
  type: {
    name: "Composite",
    className: "LiveEventInput",
    modelProperties: {
      streamingProtocol: {
        required: true,
        serializedName: "streamingProtocol",
        type: {
          name: "String"
        }
      },
      accessControl: {
        serializedName: "accessControl",
        type: {
          name: "Composite",
          className: "LiveEventInputAccessControl"
        }
      },
      keyFrameIntervalDuration: {
        serializedName: "keyFrameIntervalDuration",
        type: {
          name: "String"
        }
      },
      accessToken: {
        serializedName: "accessToken",
        type: {
          name: "String"
        }
      },
      endpoints: {
        serializedName: "endpoints",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "LiveEventEndpoint"
            }
          }
        }
      }
    }
  }
};

export const LiveEventPreviewAccessControl: msRest.CompositeMapper = {
  serializedName: "LiveEventPreviewAccessControl",
  type: {
    name: "Composite",
    className: "LiveEventPreviewAccessControl",
    modelProperties: {
      ip: {
        serializedName: "ip",
        type: {
          name: "Composite",
          className: "IPAccessControl"
        }
      }
    }
  }
};

export const LiveEventPreview: msRest.CompositeMapper = {
  serializedName: "LiveEventPreview",
  type: {
    name: "Composite",
    className: "LiveEventPreview",
    modelProperties: {
      endpoints: {
        serializedName: "endpoints",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "LiveEventEndpoint"
            }
          }
        }
      },
      accessControl: {
        serializedName: "accessControl",
        type: {
          name: "Composite",
          className: "LiveEventPreviewAccessControl"
        }
      },
      previewLocator: {
        serializedName: "previewLocator",
        type: {
          name: "String"
        }
      },
      streamingPolicyName: {
        serializedName: "streamingPolicyName",
        type: {
          name: "String"
        }
      },
      alternativeMediaId: {
        serializedName: "alternativeMediaId",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const LiveEventEncoding: msRest.CompositeMapper = {
  serializedName: "LiveEventEncoding",
  type: {
    name: "Composite",
    className: "LiveEventEncoding",
    modelProperties: {
      encodingType: {
        serializedName: "encodingType",
        type: {
          name: "String"
        }
      },
      presetName: {
        serializedName: "presetName",
        type: {
          name: "String"
        }
      },
      stretchMode: {
        serializedName: "stretchMode",
        type: {
          name: "String"
        }
      },
      keyFrameInterval: {
        serializedName: "keyFrameInterval",
        type: {
          name: "TimeSpan"
        }
      }
    }
  }
};

export const LiveEventInputTrackSelection: msRest.CompositeMapper = {
  serializedName: "LiveEventInputTrackSelection",
  type: {
    name: "Composite",
    className: "LiveEventInputTrackSelection",
    modelProperties: {
      property: {
        serializedName: "property",
        type: {
          name: "String"
        }
      },
      operation: {
        serializedName: "operation",
        type: {
          name: "String"
        }
      },
      value: {
        serializedName: "value",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const LiveEventOutputTranscriptionTrack: msRest.CompositeMapper = {
  serializedName: "LiveEventOutputTranscriptionTrack",
  type: {
    name: "Composite",
    className: "LiveEventOutputTranscriptionTrack",
    modelProperties: {
      trackName: {
        required: true,
        serializedName: "trackName",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const LiveEventTranscription: msRest.CompositeMapper = {
  serializedName: "LiveEventTranscription",
  type: {
    name: "Composite",
    className: "LiveEventTranscription",
    modelProperties: {
      language: {
        serializedName: "language",
        type: {
          name: "String"
        }
      },
      inputTrackSelection: {
        serializedName: "inputTrackSelection",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "LiveEventInputTrackSelection"
            }
          }
        }
      },
      outputTranscriptionTrack: {
        serializedName: "outputTranscriptionTrack",
        type: {
          name: "Composite",
          className: "LiveEventOutputTranscriptionTrack"
        }
      }
    }
  }
};

export const CrossSiteAccessPolicies: msRest.CompositeMapper = {
  serializedName: "CrossSiteAccessPolicies",
  type: {
    name: "Composite",
    className: "CrossSiteAccessPolicies",
    modelProperties: {
      clientAccessPolicy: {
        serializedName: "clientAccessPolicy",
        type: {
          name: "String"
        }
      },
      crossDomainPolicy: {
        serializedName: "crossDomainPolicy",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const LiveEventActionInput: msRest.CompositeMapper = {
  serializedName: "LiveEventActionInput",
  type: {
    name: "Composite",
    className: "LiveEventActionInput",
    modelProperties: {
      removeOutputsOnStop: {
        serializedName: "removeOutputsOnStop",
        type: {
          name: "Boolean"
        }
      }
    }
  }
};

export const LiveEvent: msRest.CompositeMapper = {
  serializedName: "LiveEvent",
  type: {
    name: "Composite",
    className: "LiveEvent",
    modelProperties: {
      ...TrackedResource.type.modelProperties,
      description: {
        serializedName: "properties.description",
        type: {
          name: "String"
        }
      },
      input: {
        required: true,
        serializedName: "properties.input",
        type: {
          name: "Composite",
          className: "LiveEventInput"
        }
      },
      preview: {
        serializedName: "properties.preview",
        type: {
          name: "Composite",
          className: "LiveEventPreview"
        }
      },
      encoding: {
        serializedName: "properties.encoding",
        type: {
          name: "Composite",
          className: "LiveEventEncoding"
        }
      },
      transcriptions: {
        serializedName: "properties.transcriptions",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "LiveEventTranscription"
            }
          }
        }
      },
      provisioningState: {
        readOnly: true,
        serializedName: "properties.provisioningState",
        type: {
          name: "String"
        }
      },
      resourceState: {
        readOnly: true,
        serializedName: "properties.resourceState",
        type: {
          name: "String"
        }
      },
      crossSiteAccessPolicies: {
        serializedName: "properties.crossSiteAccessPolicies",
        type: {
          name: "Composite",
          className: "CrossSiteAccessPolicies"
        }
      },
      useStaticHostname: {
        serializedName: "properties.useStaticHostname",
        type: {
          name: "Boolean"
        }
      },
      hostnamePrefix: {
        serializedName: "properties.hostnamePrefix",
        type: {
          name: "String"
        }
      },
      streamOptions: {
        serializedName: "properties.streamOptions",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "String"
            }
          }
        }
      },
      created: {
        readOnly: true,
        serializedName: "properties.created",
        type: {
          name: "DateTime"
        }
      },
      lastModified: {
        readOnly: true,
        serializedName: "properties.lastModified",
        type: {
          name: "DateTime"
        }
      },
      systemData: {
        readOnly: true,
        serializedName: "systemData",
        type: {
          name: "Composite",
          className: "SystemData"
        }
      }
    }
  }
};

export const AkamaiSignatureHeaderAuthenticationKey: msRest.CompositeMapper = {
  serializedName: "AkamaiSignatureHeaderAuthenticationKey",
  type: {
    name: "Composite",
    className: "AkamaiSignatureHeaderAuthenticationKey",
    modelProperties: {
      identifier: {
        serializedName: "identifier",
        type: {
          name: "String"
        }
      },
      base64Key: {
        serializedName: "base64Key",
        type: {
          name: "String"
        }
      },
      expiration: {
        serializedName: "expiration",
        type: {
          name: "DateTime"
        }
      }
    }
  }
};

export const AkamaiAccessControl: msRest.CompositeMapper = {
  serializedName: "AkamaiAccessControl",
  type: {
    name: "Composite",
    className: "AkamaiAccessControl",
    modelProperties: {
      akamaiSignatureHeaderAuthenticationKeyList: {
        serializedName: "akamaiSignatureHeaderAuthenticationKeyList",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "AkamaiSignatureHeaderAuthenticationKey"
            }
          }
        }
      }
    }
  }
};

export const StreamingEndpointAccessControl: msRest.CompositeMapper = {
  serializedName: "StreamingEndpointAccessControl",
  type: {
    name: "Composite",
    className: "StreamingEndpointAccessControl",
    modelProperties: {
      akamai: {
        serializedName: "akamai",
        type: {
          name: "Composite",
          className: "AkamaiAccessControl"
        }
      },
      ip: {
        serializedName: "ip",
        type: {
          name: "Composite",
          className: "IPAccessControl"
        }
      }
    }
  }
};

export const StreamingEntityScaleUnit: msRest.CompositeMapper = {
  serializedName: "StreamingEntityScaleUnit",
  type: {
    name: "Composite",
    className: "StreamingEntityScaleUnit",
    modelProperties: {
      scaleUnit: {
        serializedName: "scaleUnit",
        type: {
          name: "Number"
        }
      }
    }
  }
};

export const StreamingEndpoint: msRest.CompositeMapper = {
  serializedName: "StreamingEndpoint",
  type: {
    name: "Composite",
    className: "StreamingEndpoint",
    modelProperties: {
      ...TrackedResource.type.modelProperties,
      description: {
        serializedName: "properties.description",
        type: {
          name: "String"
        }
      },
      scaleUnits: {
        required: true,
        serializedName: "properties.scaleUnits",
        type: {
          name: "Number"
        }
      },
      availabilitySetName: {
        serializedName: "properties.availabilitySetName",
        type: {
          name: "String"
        }
      },
      accessControl: {
        serializedName: "properties.accessControl",
        type: {
          name: "Composite",
          className: "StreamingEndpointAccessControl"
        }
      },
      maxCacheAge: {
        serializedName: "properties.maxCacheAge",
        type: {
          name: "Number"
        }
      },
      customHostNames: {
        serializedName: "properties.customHostNames",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "String"
            }
          }
        }
      },
      hostName: {
        readOnly: true,
        serializedName: "properties.hostName",
        type: {
          name: "String"
        }
      },
      cdnEnabled: {
        serializedName: "properties.cdnEnabled",
        type: {
          name: "Boolean"
        }
      },
      cdnProvider: {
        serializedName: "properties.cdnProvider",
        type: {
          name: "String"
        }
      },
      cdnProfile: {
        serializedName: "properties.cdnProfile",
        type: {
          name: "String"
        }
      },
      provisioningState: {
        readOnly: true,
        serializedName: "properties.provisioningState",
        type: {
          name: "String"
        }
      },
      resourceState: {
        readOnly: true,
        serializedName: "properties.resourceState",
        type: {
          name: "String"
        }
      },
      crossSiteAccessPolicies: {
        serializedName: "properties.crossSiteAccessPolicies",
        type: {
          name: "Composite",
          className: "CrossSiteAccessPolicies"
        }
      },
      freeTrialEndTime: {
        readOnly: true,
        serializedName: "properties.freeTrialEndTime",
        type: {
          name: "DateTime"
        }
      },
      created: {
        readOnly: true,
        serializedName: "properties.created",
        type: {
          name: "DateTime"
        }
      },
      lastModified: {
        readOnly: true,
        serializedName: "properties.lastModified",
        type: {
          name: "DateTime"
        }
      },
      systemData: {
        readOnly: true,
        serializedName: "systemData",
        type: {
          name: "Composite",
          className: "SystemData"
        }
      }
    }
  }
};

export const MediaServiceCollection: msRest.CompositeMapper = {
  serializedName: "MediaServiceCollection",
  type: {
    name: "Composite",
    className: "MediaServiceCollection",
    modelProperties: {
      value: {
        serializedName: "",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "MediaService"
            }
          }
        }
      },
      odatanextLink: {
        serializedName: "@odata\\.nextLink",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const AccountFilterCollection: msRest.CompositeMapper = {
  serializedName: "AccountFilterCollection",
  type: {
    name: "Composite",
    className: "AccountFilterCollection",
    modelProperties: {
      value: {
        serializedName: "",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "AccountFilter"
            }
          }
        }
      },
      odatanextLink: {
        serializedName: "@odata\\.nextLink",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const AssetCollection: msRest.CompositeMapper = {
  serializedName: "AssetCollection",
  type: {
    name: "Composite",
    className: "AssetCollection",
    modelProperties: {
      value: {
        serializedName: "",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "Asset"
            }
          }
        }
      },
      odatanextLink: {
        serializedName: "@odata\\.nextLink",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const AssetFilterCollection: msRest.CompositeMapper = {
  serializedName: "AssetFilterCollection",
  type: {
    name: "Composite",
    className: "AssetFilterCollection",
    modelProperties: {
      value: {
        serializedName: "",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "AssetFilter"
            }
          }
        }
      },
      odatanextLink: {
        serializedName: "@odata\\.nextLink",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const ContentKeyPolicyCollection: msRest.CompositeMapper = {
  serializedName: "ContentKeyPolicyCollection",
  type: {
    name: "Composite",
    className: "ContentKeyPolicyCollection",
    modelProperties: {
      value: {
        serializedName: "",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "ContentKeyPolicy"
            }
          }
        }
      },
      odatanextLink: {
        serializedName: "@odata\\.nextLink",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const StreamingPolicyCollection: msRest.CompositeMapper = {
  serializedName: "StreamingPolicyCollection",
  type: {
    name: "Composite",
    className: "StreamingPolicyCollection",
    modelProperties: {
      value: {
        serializedName: "",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "StreamingPolicy"
            }
          }
        }
      },
      odatanextLink: {
        serializedName: "@odata\\.nextLink",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const StreamingLocatorCollection: msRest.CompositeMapper = {
  serializedName: "StreamingLocatorCollection",
  type: {
    name: "Composite",
    className: "StreamingLocatorCollection",
    modelProperties: {
      value: {
        serializedName: "",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "StreamingLocator"
            }
          }
        }
      },
      odatanextLink: {
        serializedName: "@odata\\.nextLink",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const LiveEventListResult: msRest.CompositeMapper = {
  serializedName: "LiveEventListResult",
  type: {
    name: "Composite",
    className: "LiveEventListResult",
    modelProperties: {
      value: {
        serializedName: "",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "LiveEvent"
            }
          }
        }
      },
      odatacount: {
        serializedName: "@odata\\.count",
        type: {
          name: "Number"
        }
      },
      odatanextLink: {
        serializedName: "@odata\\.nextLink",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const LiveOutputListResult: msRest.CompositeMapper = {
  serializedName: "LiveOutputListResult",
  type: {
    name: "Composite",
    className: "LiveOutputListResult",
    modelProperties: {
      value: {
        serializedName: "",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "LiveOutput"
            }
          }
        }
      },
      odatacount: {
        serializedName: "@odata\\.count",
        type: {
          name: "Number"
        }
      },
      odatanextLink: {
        serializedName: "@odata\\.nextLink",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const StreamingEndpointListResult: msRest.CompositeMapper = {
  serializedName: "StreamingEndpointListResult",
  type: {
    name: "Composite",
    className: "StreamingEndpointListResult",
    modelProperties: {
      value: {
        serializedName: "",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "StreamingEndpoint"
            }
          }
        }
      },
      odatacount: {
        serializedName: "@odata\\.count",
        type: {
          name: "Number"
        }
      },
      odatanextLink: {
        serializedName: "@odata\\.nextLink",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const discriminators = {
  'ContentKeyPolicyPlayReadyContentKeyLocation' : ContentKeyPolicyPlayReadyContentKeyLocation,
  'ContentKeyPolicyPlayReadyContentKeyLocation.#Microsoft.Media.ContentKeyPolicyPlayReadyContentEncryptionKeyFromHeader' : ContentKeyPolicyPlayReadyContentEncryptionKeyFromHeader,
  'ContentKeyPolicyPlayReadyContentKeyLocation.#Microsoft.Media.ContentKeyPolicyPlayReadyContentEncryptionKeyFromKeyIdentifier' : ContentKeyPolicyPlayReadyContentEncryptionKeyFromKeyIdentifier,
  'ContentKeyPolicyRestriction' : ContentKeyPolicyRestriction,
  'ContentKeyPolicyRestriction.#Microsoft.Media.ContentKeyPolicyOpenRestriction' : ContentKeyPolicyOpenRestriction,
  'ContentKeyPolicyRestriction.#Microsoft.Media.ContentKeyPolicyUnknownRestriction' : ContentKeyPolicyUnknownRestriction,
  'ContentKeyPolicyConfiguration' : ContentKeyPolicyConfiguration,
  'ContentKeyPolicyRestrictionTokenKey' : ContentKeyPolicyRestrictionTokenKey,
  'ContentKeyPolicyRestrictionTokenKey.#Microsoft.Media.ContentKeyPolicySymmetricTokenKey' : ContentKeyPolicySymmetricTokenKey,
  'ContentKeyPolicyRestrictionTokenKey.#Microsoft.Media.ContentKeyPolicyRsaTokenKey' : ContentKeyPolicyRsaTokenKey,
  'ContentKeyPolicyRestrictionTokenKey.#Microsoft.Media.ContentKeyPolicyX509CertificateTokenKey' : ContentKeyPolicyX509CertificateTokenKey,
  'ContentKeyPolicyRestriction.#Microsoft.Media.ContentKeyPolicyTokenRestriction' : ContentKeyPolicyTokenRestriction,
  'ContentKeyPolicyConfiguration.#Microsoft.Media.ContentKeyPolicyClearKeyConfiguration' : ContentKeyPolicyClearKeyConfiguration,
  'ContentKeyPolicyConfiguration.#Microsoft.Media.ContentKeyPolicyUnknownConfiguration' : ContentKeyPolicyUnknownConfiguration,
  'ContentKeyPolicyConfiguration.#Microsoft.Media.ContentKeyPolicyWidevineConfiguration' : ContentKeyPolicyWidevineConfiguration,
  'ContentKeyPolicyConfiguration.#Microsoft.Media.ContentKeyPolicyPlayReadyConfiguration' : ContentKeyPolicyPlayReadyConfiguration,
  'ContentKeyPolicyConfiguration.#Microsoft.Media.ContentKeyPolicyFairPlayConfiguration' : ContentKeyPolicyFairPlayConfiguration

};
