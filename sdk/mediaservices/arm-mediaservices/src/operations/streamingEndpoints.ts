/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is
 * regenerated.
 */

import * as msRest from "@azure/ms-rest-js";
import * as msRestAzure from "@azure/ms-rest-azure-js";
import * as Models from "../models";
import * as Mappers from "../models/streamingEndpointsMappers";
import * as Parameters from "../models/parameters";
import { AzureMediaServicesContext } from "../azureMediaServicesContext";

/** Class representing a StreamingEndpoints. */
export class StreamingEndpoints {
  private readonly client: AzureMediaServicesContext;

  /**
   * Create a StreamingEndpoints.
   * @param {AzureMediaServicesContext} client Reference to the service client.
   */
  constructor(client: AzureMediaServicesContext) {
    this.client = client;
  }

  /**
   * Lists the streaming endpoints in the account.
   * @summary List StreamingEndpoints
   * @param resourceGroupName The name of the resource group within the Azure subscription.
   * @param accountName The Media Services account name.
   * @param [options] The optional parameters
   * @returns Promise<Models.StreamingEndpointsListResponse>
   */
  list(resourceGroupName: string, accountName: string, options?: msRest.RequestOptionsBase): Promise<Models.StreamingEndpointsListResponse>;
  /**
   * @param resourceGroupName The name of the resource group within the Azure subscription.
   * @param accountName The Media Services account name.
   * @param callback The callback
   */
  list(resourceGroupName: string, accountName: string, callback: msRest.ServiceCallback<Models.StreamingEndpointListResult>): void;
  /**
   * @param resourceGroupName The name of the resource group within the Azure subscription.
   * @param accountName The Media Services account name.
   * @param options The optional parameters
   * @param callback The callback
   */
  list(resourceGroupName: string, accountName: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.StreamingEndpointListResult>): void;
  list(resourceGroupName: string, accountName: string, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<Models.StreamingEndpointListResult>, callback?: msRest.ServiceCallback<Models.StreamingEndpointListResult>): Promise<Models.StreamingEndpointsListResponse> {
    return this.client.sendOperationRequest(
      {
        resourceGroupName,
        accountName,
        options
      },
      listOperationSpec,
      callback) as Promise<Models.StreamingEndpointsListResponse>;
  }

  /**
   * Gets a streaming endpoint.
   * @summary Get StreamingEndpoint
   * @param resourceGroupName The name of the resource group within the Azure subscription.
   * @param accountName The Media Services account name.
   * @param streamingEndpointName The name of the streaming endpoint, maximum length is 24.
   * @param [options] The optional parameters
   * @returns Promise<Models.StreamingEndpointsGetResponse>
   */
  get(resourceGroupName: string, accountName: string, streamingEndpointName: string, options?: msRest.RequestOptionsBase): Promise<Models.StreamingEndpointsGetResponse>;
  /**
   * @param resourceGroupName The name of the resource group within the Azure subscription.
   * @param accountName The Media Services account name.
   * @param streamingEndpointName The name of the streaming endpoint, maximum length is 24.
   * @param callback The callback
   */
  get(resourceGroupName: string, accountName: string, streamingEndpointName: string, callback: msRest.ServiceCallback<Models.StreamingEndpoint>): void;
  /**
   * @param resourceGroupName The name of the resource group within the Azure subscription.
   * @param accountName The Media Services account name.
   * @param streamingEndpointName The name of the streaming endpoint, maximum length is 24.
   * @param options The optional parameters
   * @param callback The callback
   */
  get(resourceGroupName: string, accountName: string, streamingEndpointName: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.StreamingEndpoint>): void;
  get(resourceGroupName: string, accountName: string, streamingEndpointName: string, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<Models.StreamingEndpoint>, callback?: msRest.ServiceCallback<Models.StreamingEndpoint>): Promise<Models.StreamingEndpointsGetResponse> {
    return this.client.sendOperationRequest(
      {
        resourceGroupName,
        accountName,
        streamingEndpointName,
        options
      },
      getOperationSpec,
      callback) as Promise<Models.StreamingEndpointsGetResponse>;
  }

  /**
   * Creates a streaming endpoint.
   * @summary Create StreamingEndpoint
   * @param resourceGroupName The name of the resource group within the Azure subscription.
   * @param accountName The Media Services account name.
   * @param streamingEndpointName The name of the streaming endpoint, maximum length is 24.
   * @param parameters Streaming endpoint properties needed for creation.
   * @param [options] The optional parameters
   * @returns Promise<Models.StreamingEndpointsCreateResponse>
   */
  create(resourceGroupName: string, accountName: string, streamingEndpointName: string, parameters: Models.StreamingEndpoint, options?: Models.StreamingEndpointsCreateOptionalParams): Promise<Models.StreamingEndpointsCreateResponse> {
    return this.beginCreate(resourceGroupName,accountName,streamingEndpointName,parameters,options)
      .then(lroPoller => lroPoller.pollUntilFinished()) as Promise<Models.StreamingEndpointsCreateResponse>;
  }

  /**
   * Updates a existing streaming endpoint.
   * @summary Update StreamingEndpoint
   * @param resourceGroupName The name of the resource group within the Azure subscription.
   * @param accountName The Media Services account name.
   * @param streamingEndpointName The name of the streaming endpoint, maximum length is 24.
   * @param parameters Streaming endpoint properties needed for creation.
   * @param [options] The optional parameters
   * @returns Promise<Models.StreamingEndpointsUpdateResponse>
   */
  update(resourceGroupName: string, accountName: string, streamingEndpointName: string, parameters: Models.StreamingEndpoint, options?: msRest.RequestOptionsBase): Promise<Models.StreamingEndpointsUpdateResponse> {
    return this.beginUpdate(resourceGroupName,accountName,streamingEndpointName,parameters,options)
      .then(lroPoller => lroPoller.pollUntilFinished()) as Promise<Models.StreamingEndpointsUpdateResponse>;
  }

  /**
   * Deletes a streaming endpoint.
   * @summary Delete StreamingEndpoint
   * @param resourceGroupName The name of the resource group within the Azure subscription.
   * @param accountName The Media Services account name.
   * @param streamingEndpointName The name of the streaming endpoint, maximum length is 24.
   * @param [options] The optional parameters
   * @returns Promise<msRest.RestResponse>
   */
  deleteMethod(resourceGroupName: string, accountName: string, streamingEndpointName: string, options?: msRest.RequestOptionsBase): Promise<msRest.RestResponse> {
    return this.beginDeleteMethod(resourceGroupName,accountName,streamingEndpointName,options)
      .then(lroPoller => lroPoller.pollUntilFinished());
  }

  /**
   * Starts an existing streaming endpoint.
   * @summary Start StreamingEndpoint
   * @param resourceGroupName The name of the resource group within the Azure subscription.
   * @param accountName The Media Services account name.
   * @param streamingEndpointName The name of the streaming endpoint, maximum length is 24.
   * @param [options] The optional parameters
   * @returns Promise<msRest.RestResponse>
   */
  start(resourceGroupName: string, accountName: string, streamingEndpointName: string, options?: msRest.RequestOptionsBase): Promise<msRest.RestResponse> {
    return this.beginStart(resourceGroupName,accountName,streamingEndpointName,options)
      .then(lroPoller => lroPoller.pollUntilFinished());
  }

  /**
   * Stops an existing streaming endpoint.
   * @summary Stop StreamingEndpoint
   * @param resourceGroupName The name of the resource group within the Azure subscription.
   * @param accountName The Media Services account name.
   * @param streamingEndpointName The name of the streaming endpoint, maximum length is 24.
   * @param [options] The optional parameters
   * @returns Promise<msRest.RestResponse>
   */
  stop(resourceGroupName: string, accountName: string, streamingEndpointName: string, options?: msRest.RequestOptionsBase): Promise<msRest.RestResponse> {
    return this.beginStop(resourceGroupName,accountName,streamingEndpointName,options)
      .then(lroPoller => lroPoller.pollUntilFinished());
  }

  /**
   * Scales an existing streaming endpoint.
   * @summary Scale StreamingEndpoint
   * @param resourceGroupName The name of the resource group within the Azure subscription.
   * @param accountName The Media Services account name.
   * @param streamingEndpointName The name of the streaming endpoint, maximum length is 24.
   * @param parameters Streaming endpoint scale parameters
   * @param [options] The optional parameters
   * @returns Promise<msRest.RestResponse>
   */
  scale(resourceGroupName: string, accountName: string, streamingEndpointName: string, parameters: Models.StreamingEntityScaleUnit, options?: msRest.RequestOptionsBase): Promise<msRest.RestResponse> {
    return this.beginScale(resourceGroupName,accountName,streamingEndpointName,parameters,options)
      .then(lroPoller => lroPoller.pollUntilFinished());
  }

  /**
   * Creates a streaming endpoint.
   * @summary Create StreamingEndpoint
   * @param resourceGroupName The name of the resource group within the Azure subscription.
   * @param accountName The Media Services account name.
   * @param streamingEndpointName The name of the streaming endpoint, maximum length is 24.
   * @param parameters Streaming endpoint properties needed for creation.
   * @param [options] The optional parameters
   * @returns Promise<msRestAzure.LROPoller>
   */
  beginCreate(resourceGroupName: string, accountName: string, streamingEndpointName: string, parameters: Models.StreamingEndpoint, options?: Models.StreamingEndpointsBeginCreateOptionalParams): Promise<msRestAzure.LROPoller> {
    return this.client.sendLRORequest(
      {
        resourceGroupName,
        accountName,
        streamingEndpointName,
        parameters,
        options
      },
      beginCreateOperationSpec,
      options);
  }

  /**
   * Updates a existing streaming endpoint.
   * @summary Update StreamingEndpoint
   * @param resourceGroupName The name of the resource group within the Azure subscription.
   * @param accountName The Media Services account name.
   * @param streamingEndpointName The name of the streaming endpoint, maximum length is 24.
   * @param parameters Streaming endpoint properties needed for creation.
   * @param [options] The optional parameters
   * @returns Promise<msRestAzure.LROPoller>
   */
  beginUpdate(resourceGroupName: string, accountName: string, streamingEndpointName: string, parameters: Models.StreamingEndpoint, options?: msRest.RequestOptionsBase): Promise<msRestAzure.LROPoller> {
    return this.client.sendLRORequest(
      {
        resourceGroupName,
        accountName,
        streamingEndpointName,
        parameters,
        options
      },
      beginUpdateOperationSpec,
      options);
  }

  /**
   * Deletes a streaming endpoint.
   * @summary Delete StreamingEndpoint
   * @param resourceGroupName The name of the resource group within the Azure subscription.
   * @param accountName The Media Services account name.
   * @param streamingEndpointName The name of the streaming endpoint, maximum length is 24.
   * @param [options] The optional parameters
   * @returns Promise<msRestAzure.LROPoller>
   */
  beginDeleteMethod(resourceGroupName: string, accountName: string, streamingEndpointName: string, options?: msRest.RequestOptionsBase): Promise<msRestAzure.LROPoller> {
    return this.client.sendLRORequest(
      {
        resourceGroupName,
        accountName,
        streamingEndpointName,
        options
      },
      beginDeleteMethodOperationSpec,
      options);
  }

  /**
   * Starts an existing streaming endpoint.
   * @summary Start StreamingEndpoint
   * @param resourceGroupName The name of the resource group within the Azure subscription.
   * @param accountName The Media Services account name.
   * @param streamingEndpointName The name of the streaming endpoint, maximum length is 24.
   * @param [options] The optional parameters
   * @returns Promise<msRestAzure.LROPoller>
   */
  beginStart(resourceGroupName: string, accountName: string, streamingEndpointName: string, options?: msRest.RequestOptionsBase): Promise<msRestAzure.LROPoller> {
    return this.client.sendLRORequest(
      {
        resourceGroupName,
        accountName,
        streamingEndpointName,
        options
      },
      beginStartOperationSpec,
      options);
  }

  /**
   * Stops an existing streaming endpoint.
   * @summary Stop StreamingEndpoint
   * @param resourceGroupName The name of the resource group within the Azure subscription.
   * @param accountName The Media Services account name.
   * @param streamingEndpointName The name of the streaming endpoint, maximum length is 24.
   * @param [options] The optional parameters
   * @returns Promise<msRestAzure.LROPoller>
   */
  beginStop(resourceGroupName: string, accountName: string, streamingEndpointName: string, options?: msRest.RequestOptionsBase): Promise<msRestAzure.LROPoller> {
    return this.client.sendLRORequest(
      {
        resourceGroupName,
        accountName,
        streamingEndpointName,
        options
      },
      beginStopOperationSpec,
      options);
  }

  /**
   * Scales an existing streaming endpoint.
   * @summary Scale StreamingEndpoint
   * @param resourceGroupName The name of the resource group within the Azure subscription.
   * @param accountName The Media Services account name.
   * @param streamingEndpointName The name of the streaming endpoint, maximum length is 24.
   * @param parameters Streaming endpoint scale parameters
   * @param [options] The optional parameters
   * @returns Promise<msRestAzure.LROPoller>
   */
  beginScale(resourceGroupName: string, accountName: string, streamingEndpointName: string, parameters: Models.StreamingEntityScaleUnit, options?: msRest.RequestOptionsBase): Promise<msRestAzure.LROPoller> {
    return this.client.sendLRORequest(
      {
        resourceGroupName,
        accountName,
        streamingEndpointName,
        parameters,
        options
      },
      beginScaleOperationSpec,
      options);
  }

  /**
   * Lists the streaming endpoints in the account.
   * @summary List StreamingEndpoints
   * @param nextPageLink The NextLink from the previous successful call to List operation.
   * @param [options] The optional parameters
   * @returns Promise<Models.StreamingEndpointsListNextResponse>
   */
  listNext(nextPageLink: string, options?: msRest.RequestOptionsBase): Promise<Models.StreamingEndpointsListNextResponse>;
  /**
   * @param nextPageLink The NextLink from the previous successful call to List operation.
   * @param callback The callback
   */
  listNext(nextPageLink: string, callback: msRest.ServiceCallback<Models.StreamingEndpointListResult>): void;
  /**
   * @param nextPageLink The NextLink from the previous successful call to List operation.
   * @param options The optional parameters
   * @param callback The callback
   */
  listNext(nextPageLink: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.StreamingEndpointListResult>): void;
  listNext(nextPageLink: string, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<Models.StreamingEndpointListResult>, callback?: msRest.ServiceCallback<Models.StreamingEndpointListResult>): Promise<Models.StreamingEndpointsListNextResponse> {
    return this.client.sendOperationRequest(
      {
        nextPageLink,
        options
      },
      listNextOperationSpec,
      callback) as Promise<Models.StreamingEndpointsListNextResponse>;
  }
}

// Operation Specifications
const serializer = new msRest.Serializer(Mappers);
const listOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Media/mediaservices/{accountName}/streamingEndpoints",
  urlParameters: [
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.accountName
  ],
  queryParameters: [
    Parameters.apiVersion
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    200: {
      bodyMapper: Mappers.StreamingEndpointListResult
    },
    default: {
      bodyMapper: Mappers.ApiError
    }
  },
  serializer
};

const getOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Media/mediaservices/{accountName}/streamingEndpoints/{streamingEndpointName}",
  urlParameters: [
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.accountName,
    Parameters.streamingEndpointName
  ],
  queryParameters: [
    Parameters.apiVersion
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    200: {
      bodyMapper: Mappers.StreamingEndpoint
    },
    404: {},
    default: {
      bodyMapper: Mappers.ApiError
    }
  },
  serializer
};

const beginCreateOperationSpec: msRest.OperationSpec = {
  httpMethod: "PUT",
  path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Media/mediaservices/{accountName}/streamingEndpoints/{streamingEndpointName}",
  urlParameters: [
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.accountName,
    Parameters.streamingEndpointName
  ],
  queryParameters: [
    Parameters.apiVersion,
    Parameters.autoStart
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  requestBody: {
    parameterPath: "parameters",
    mapper: {
      ...Mappers.StreamingEndpoint,
      required: true
    }
  },
  responses: {
    200: {
      bodyMapper: Mappers.StreamingEndpoint
    },
    201: {
      bodyMapper: Mappers.StreamingEndpoint
    },
    default: {
      bodyMapper: Mappers.ApiError
    }
  },
  serializer
};

const beginUpdateOperationSpec: msRest.OperationSpec = {
  httpMethod: "PATCH",
  path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Media/mediaservices/{accountName}/streamingEndpoints/{streamingEndpointName}",
  urlParameters: [
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.accountName,
    Parameters.streamingEndpointName
  ],
  queryParameters: [
    Parameters.apiVersion
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  requestBody: {
    parameterPath: "parameters",
    mapper: {
      ...Mappers.StreamingEndpoint,
      required: true
    }
  },
  responses: {
    200: {
      bodyMapper: Mappers.StreamingEndpoint
    },
    202: {
      bodyMapper: Mappers.StreamingEndpoint
    },
    default: {
      bodyMapper: Mappers.ApiError
    }
  },
  serializer
};

const beginDeleteMethodOperationSpec: msRest.OperationSpec = {
  httpMethod: "DELETE",
  path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Media/mediaservices/{accountName}/streamingEndpoints/{streamingEndpointName}",
  urlParameters: [
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.accountName,
    Parameters.streamingEndpointName
  ],
  queryParameters: [
    Parameters.apiVersion
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    200: {},
    202: {},
    204: {},
    default: {
      bodyMapper: Mappers.ApiError
    }
  },
  serializer
};

const beginStartOperationSpec: msRest.OperationSpec = {
  httpMethod: "POST",
  path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Media/mediaservices/{accountName}/streamingEndpoints/{streamingEndpointName}/start",
  urlParameters: [
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.accountName,
    Parameters.streamingEndpointName
  ],
  queryParameters: [
    Parameters.apiVersion
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    200: {},
    202: {},
    default: {
      bodyMapper: Mappers.ApiError
    }
  },
  serializer
};

const beginStopOperationSpec: msRest.OperationSpec = {
  httpMethod: "POST",
  path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Media/mediaservices/{accountName}/streamingEndpoints/{streamingEndpointName}/stop",
  urlParameters: [
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.accountName,
    Parameters.streamingEndpointName
  ],
  queryParameters: [
    Parameters.apiVersion
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    200: {},
    202: {},
    default: {
      bodyMapper: Mappers.ApiError
    }
  },
  serializer
};

const beginScaleOperationSpec: msRest.OperationSpec = {
  httpMethod: "POST",
  path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Media/mediaservices/{accountName}/streamingEndpoints/{streamingEndpointName}/scale",
  urlParameters: [
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.accountName,
    Parameters.streamingEndpointName
  ],
  queryParameters: [
    Parameters.apiVersion
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  requestBody: {
    parameterPath: "parameters",
    mapper: {
      ...Mappers.StreamingEntityScaleUnit,
      required: true
    }
  },
  responses: {
    200: {},
    202: {},
    default: {
      bodyMapper: Mappers.ApiError
    }
  },
  serializer
};

const listNextOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  baseUrl: "https://management.azure.com",
  path: "{nextLink}",
  urlParameters: [
    Parameters.nextPageLink
  ],
  queryParameters: [
    Parameters.apiVersion
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    200: {
      bodyMapper: Mappers.StreamingEndpointListResult
    },
    default: {
      bodyMapper: Mappers.ApiError
    }
  },
  serializer
};
