/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is
 * regenerated.
 */

import * as msRest from "@azure/ms-rest-js";
import * as Models from "../models";
import * as Mappers from "../models/assetsMappers";
import * as Parameters from "../models/parameters";
import { AzureMediaServicesContext } from "../azureMediaServicesContext";

/** Class representing a Assets. */
export class Assets {
  private readonly client: AzureMediaServicesContext;

  /**
   * Create a Assets.
   * @param {AzureMediaServicesContext} client Reference to the service client.
   */
  constructor(client: AzureMediaServicesContext) {
    this.client = client;
  }

  /**
   * List Assets in the Media Services account with optional filtering and ordering
   * @summary List Assets
   * @param resourceGroupName The name of the resource group within the Azure subscription.
   * @param accountName The Media Services account name.
   * @param [options] The optional parameters
   * @returns Promise<Models.AssetsListResponse>
   */
  list(resourceGroupName: string, accountName: string, options?: Models.AssetsListOptionalParams): Promise<Models.AssetsListResponse>;
  /**
   * @param resourceGroupName The name of the resource group within the Azure subscription.
   * @param accountName The Media Services account name.
   * @param callback The callback
   */
  list(resourceGroupName: string, accountName: string, callback: msRest.ServiceCallback<Models.AssetCollection>): void;
  /**
   * @param resourceGroupName The name of the resource group within the Azure subscription.
   * @param accountName The Media Services account name.
   * @param options The optional parameters
   * @param callback The callback
   */
  list(resourceGroupName: string, accountName: string, options: Models.AssetsListOptionalParams, callback: msRest.ServiceCallback<Models.AssetCollection>): void;
  list(resourceGroupName: string, accountName: string, options?: Models.AssetsListOptionalParams | msRest.ServiceCallback<Models.AssetCollection>, callback?: msRest.ServiceCallback<Models.AssetCollection>): Promise<Models.AssetsListResponse> {
    return this.client.sendOperationRequest(
      {
        resourceGroupName,
        accountName,
        options
      },
      listOperationSpec,
      callback) as Promise<Models.AssetsListResponse>;
  }

  /**
   * Get the details of an Asset in the Media Services account
   * @summary Get an Asset
   * @param resourceGroupName The name of the resource group within the Azure subscription.
   * @param accountName The Media Services account name.
   * @param assetName The Asset name.
   * @param [options] The optional parameters
   * @returns Promise<Models.AssetsGetResponse>
   */
  get(resourceGroupName: string, accountName: string, assetName: string, options?: msRest.RequestOptionsBase): Promise<Models.AssetsGetResponse>;
  /**
   * @param resourceGroupName The name of the resource group within the Azure subscription.
   * @param accountName The Media Services account name.
   * @param assetName The Asset name.
   * @param callback The callback
   */
  get(resourceGroupName: string, accountName: string, assetName: string, callback: msRest.ServiceCallback<Models.Asset>): void;
  /**
   * @param resourceGroupName The name of the resource group within the Azure subscription.
   * @param accountName The Media Services account name.
   * @param assetName The Asset name.
   * @param options The optional parameters
   * @param callback The callback
   */
  get(resourceGroupName: string, accountName: string, assetName: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.Asset>): void;
  get(resourceGroupName: string, accountName: string, assetName: string, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<Models.Asset>, callback?: msRest.ServiceCallback<Models.Asset>): Promise<Models.AssetsGetResponse> {
    return this.client.sendOperationRequest(
      {
        resourceGroupName,
        accountName,
        assetName,
        options
      },
      getOperationSpec,
      callback) as Promise<Models.AssetsGetResponse>;
  }

  /**
   * Creates or updates an Asset in the Media Services account
   * @summary Create or update an Asset
   * @param resourceGroupName The name of the resource group within the Azure subscription.
   * @param accountName The Media Services account name.
   * @param assetName The Asset name.
   * @param parameters The request parameters
   * @param [options] The optional parameters
   * @returns Promise<Models.AssetsCreateOrUpdateResponse>
   */
  createOrUpdate(resourceGroupName: string, accountName: string, assetName: string, parameters: Models.Asset, options?: msRest.RequestOptionsBase): Promise<Models.AssetsCreateOrUpdateResponse>;
  /**
   * @param resourceGroupName The name of the resource group within the Azure subscription.
   * @param accountName The Media Services account name.
   * @param assetName The Asset name.
   * @param parameters The request parameters
   * @param callback The callback
   */
  createOrUpdate(resourceGroupName: string, accountName: string, assetName: string, parameters: Models.Asset, callback: msRest.ServiceCallback<Models.Asset>): void;
  /**
   * @param resourceGroupName The name of the resource group within the Azure subscription.
   * @param accountName The Media Services account name.
   * @param assetName The Asset name.
   * @param parameters The request parameters
   * @param options The optional parameters
   * @param callback The callback
   */
  createOrUpdate(resourceGroupName: string, accountName: string, assetName: string, parameters: Models.Asset, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.Asset>): void;
  createOrUpdate(resourceGroupName: string, accountName: string, assetName: string, parameters: Models.Asset, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<Models.Asset>, callback?: msRest.ServiceCallback<Models.Asset>): Promise<Models.AssetsCreateOrUpdateResponse> {
    return this.client.sendOperationRequest(
      {
        resourceGroupName,
        accountName,
        assetName,
        parameters,
        options
      },
      createOrUpdateOperationSpec,
      callback) as Promise<Models.AssetsCreateOrUpdateResponse>;
  }

  /**
   * Deletes an Asset in the Media Services account
   * @summary Delete an Asset.
   * @param resourceGroupName The name of the resource group within the Azure subscription.
   * @param accountName The Media Services account name.
   * @param assetName The Asset name.
   * @param [options] The optional parameters
   * @returns Promise<msRest.RestResponse>
   */
  deleteMethod(resourceGroupName: string, accountName: string, assetName: string, options?: msRest.RequestOptionsBase): Promise<msRest.RestResponse>;
  /**
   * @param resourceGroupName The name of the resource group within the Azure subscription.
   * @param accountName The Media Services account name.
   * @param assetName The Asset name.
   * @param callback The callback
   */
  deleteMethod(resourceGroupName: string, accountName: string, assetName: string, callback: msRest.ServiceCallback<void>): void;
  /**
   * @param resourceGroupName The name of the resource group within the Azure subscription.
   * @param accountName The Media Services account name.
   * @param assetName The Asset name.
   * @param options The optional parameters
   * @param callback The callback
   */
  deleteMethod(resourceGroupName: string, accountName: string, assetName: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<void>): void;
  deleteMethod(resourceGroupName: string, accountName: string, assetName: string, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<void>, callback?: msRest.ServiceCallback<void>): Promise<msRest.RestResponse> {
    return this.client.sendOperationRequest(
      {
        resourceGroupName,
        accountName,
        assetName,
        options
      },
      deleteMethodOperationSpec,
      callback);
  }

  /**
   * Updates an existing Asset in the Media Services account
   * @summary Update an Asset
   * @param resourceGroupName The name of the resource group within the Azure subscription.
   * @param accountName The Media Services account name.
   * @param assetName The Asset name.
   * @param parameters The request parameters
   * @param [options] The optional parameters
   * @returns Promise<Models.AssetsUpdateResponse>
   */
  update(resourceGroupName: string, accountName: string, assetName: string, parameters: Models.Asset, options?: msRest.RequestOptionsBase): Promise<Models.AssetsUpdateResponse>;
  /**
   * @param resourceGroupName The name of the resource group within the Azure subscription.
   * @param accountName The Media Services account name.
   * @param assetName The Asset name.
   * @param parameters The request parameters
   * @param callback The callback
   */
  update(resourceGroupName: string, accountName: string, assetName: string, parameters: Models.Asset, callback: msRest.ServiceCallback<Models.Asset>): void;
  /**
   * @param resourceGroupName The name of the resource group within the Azure subscription.
   * @param accountName The Media Services account name.
   * @param assetName The Asset name.
   * @param parameters The request parameters
   * @param options The optional parameters
   * @param callback The callback
   */
  update(resourceGroupName: string, accountName: string, assetName: string, parameters: Models.Asset, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.Asset>): void;
  update(resourceGroupName: string, accountName: string, assetName: string, parameters: Models.Asset, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<Models.Asset>, callback?: msRest.ServiceCallback<Models.Asset>): Promise<Models.AssetsUpdateResponse> {
    return this.client.sendOperationRequest(
      {
        resourceGroupName,
        accountName,
        assetName,
        parameters,
        options
      },
      updateOperationSpec,
      callback) as Promise<Models.AssetsUpdateResponse>;
  }

  /**
   * Lists storage container URLs with shared access signatures (SAS) for uploading and downloading
   * Asset content. The signatures are derived from the storage account keys.
   * @summary List the Asset URLs
   * @param resourceGroupName The name of the resource group within the Azure subscription.
   * @param accountName The Media Services account name.
   * @param assetName The Asset name.
   * @param parameters The request parameters
   * @param [options] The optional parameters
   * @returns Promise<Models.AssetsListContainerSasResponse>
   */
  listContainerSas(resourceGroupName: string, accountName: string, assetName: string, parameters: Models.ListContainerSasInput, options?: msRest.RequestOptionsBase): Promise<Models.AssetsListContainerSasResponse>;
  /**
   * @param resourceGroupName The name of the resource group within the Azure subscription.
   * @param accountName The Media Services account name.
   * @param assetName The Asset name.
   * @param parameters The request parameters
   * @param callback The callback
   */
  listContainerSas(resourceGroupName: string, accountName: string, assetName: string, parameters: Models.ListContainerSasInput, callback: msRest.ServiceCallback<Models.AssetContainerSas>): void;
  /**
   * @param resourceGroupName The name of the resource group within the Azure subscription.
   * @param accountName The Media Services account name.
   * @param assetName The Asset name.
   * @param parameters The request parameters
   * @param options The optional parameters
   * @param callback The callback
   */
  listContainerSas(resourceGroupName: string, accountName: string, assetName: string, parameters: Models.ListContainerSasInput, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.AssetContainerSas>): void;
  listContainerSas(resourceGroupName: string, accountName: string, assetName: string, parameters: Models.ListContainerSasInput, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<Models.AssetContainerSas>, callback?: msRest.ServiceCallback<Models.AssetContainerSas>): Promise<Models.AssetsListContainerSasResponse> {
    return this.client.sendOperationRequest(
      {
        resourceGroupName,
        accountName,
        assetName,
        parameters,
        options
      },
      listContainerSasOperationSpec,
      callback) as Promise<Models.AssetsListContainerSasResponse>;
  }

  /**
   * Gets the Asset storage encryption keys used to decrypt content created by version 2 of the Media
   * Services API
   * @summary Gets the Asset storage key
   * @param resourceGroupName The name of the resource group within the Azure subscription.
   * @param accountName The Media Services account name.
   * @param assetName The Asset name.
   * @param [options] The optional parameters
   * @returns Promise<Models.AssetsGetEncryptionKeyResponse>
   */
  getEncryptionKey(resourceGroupName: string, accountName: string, assetName: string, options?: msRest.RequestOptionsBase): Promise<Models.AssetsGetEncryptionKeyResponse>;
  /**
   * @param resourceGroupName The name of the resource group within the Azure subscription.
   * @param accountName The Media Services account name.
   * @param assetName The Asset name.
   * @param callback The callback
   */
  getEncryptionKey(resourceGroupName: string, accountName: string, assetName: string, callback: msRest.ServiceCallback<Models.StorageEncryptedAssetDecryptionData>): void;
  /**
   * @param resourceGroupName The name of the resource group within the Azure subscription.
   * @param accountName The Media Services account name.
   * @param assetName The Asset name.
   * @param options The optional parameters
   * @param callback The callback
   */
  getEncryptionKey(resourceGroupName: string, accountName: string, assetName: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.StorageEncryptedAssetDecryptionData>): void;
  getEncryptionKey(resourceGroupName: string, accountName: string, assetName: string, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<Models.StorageEncryptedAssetDecryptionData>, callback?: msRest.ServiceCallback<Models.StorageEncryptedAssetDecryptionData>): Promise<Models.AssetsGetEncryptionKeyResponse> {
    return this.client.sendOperationRequest(
      {
        resourceGroupName,
        accountName,
        assetName,
        options
      },
      getEncryptionKeyOperationSpec,
      callback) as Promise<Models.AssetsGetEncryptionKeyResponse>;
  }

  /**
   * Lists Streaming Locators which are associated with this asset.
   * @summary List Streaming Locators
   * @param resourceGroupName The name of the resource group within the Azure subscription.
   * @param accountName The Media Services account name.
   * @param assetName The Asset name.
   * @param [options] The optional parameters
   * @returns Promise<Models.AssetsListStreamingLocatorsResponse>
   */
  listStreamingLocators(resourceGroupName: string, accountName: string, assetName: string, options?: msRest.RequestOptionsBase): Promise<Models.AssetsListStreamingLocatorsResponse>;
  /**
   * @param resourceGroupName The name of the resource group within the Azure subscription.
   * @param accountName The Media Services account name.
   * @param assetName The Asset name.
   * @param callback The callback
   */
  listStreamingLocators(resourceGroupName: string, accountName: string, assetName: string, callback: msRest.ServiceCallback<Models.ListStreamingLocatorsResponse>): void;
  /**
   * @param resourceGroupName The name of the resource group within the Azure subscription.
   * @param accountName The Media Services account name.
   * @param assetName The Asset name.
   * @param options The optional parameters
   * @param callback The callback
   */
  listStreamingLocators(resourceGroupName: string, accountName: string, assetName: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.ListStreamingLocatorsResponse>): void;
  listStreamingLocators(resourceGroupName: string, accountName: string, assetName: string, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<Models.ListStreamingLocatorsResponse>, callback?: msRest.ServiceCallback<Models.ListStreamingLocatorsResponse>): Promise<Models.AssetsListStreamingLocatorsResponse> {
    return this.client.sendOperationRequest(
      {
        resourceGroupName,
        accountName,
        assetName,
        options
      },
      listStreamingLocatorsOperationSpec,
      callback) as Promise<Models.AssetsListStreamingLocatorsResponse>;
  }

  /**
   * List Assets in the Media Services account with optional filtering and ordering
   * @summary List Assets
   * @param nextPageLink The NextLink from the previous successful call to List operation.
   * @param [options] The optional parameters
   * @returns Promise<Models.AssetsListNextResponse>
   */
  listNext(nextPageLink: string, options?: Models.AssetsListNextOptionalParams): Promise<Models.AssetsListNextResponse>;
  /**
   * @param nextPageLink The NextLink from the previous successful call to List operation.
   * @param callback The callback
   */
  listNext(nextPageLink: string, callback: msRest.ServiceCallback<Models.AssetCollection>): void;
  /**
   * @param nextPageLink The NextLink from the previous successful call to List operation.
   * @param options The optional parameters
   * @param callback The callback
   */
  listNext(nextPageLink: string, options: Models.AssetsListNextOptionalParams, callback: msRest.ServiceCallback<Models.AssetCollection>): void;
  listNext(nextPageLink: string, options?: Models.AssetsListNextOptionalParams | msRest.ServiceCallback<Models.AssetCollection>, callback?: msRest.ServiceCallback<Models.AssetCollection>): Promise<Models.AssetsListNextResponse> {
    return this.client.sendOperationRequest(
      {
        nextPageLink,
        options
      },
      listNextOperationSpec,
      callback) as Promise<Models.AssetsListNextResponse>;
  }
}

// Operation Specifications
const serializer = new msRest.Serializer(Mappers);
const listOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Media/mediaServices/{accountName}/assets",
  urlParameters: [
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.accountName
  ],
  queryParameters: [
    Parameters.apiVersion,
    Parameters.filter,
    Parameters.top,
    Parameters.orderby
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    200: {
      bodyMapper: Mappers.AssetCollection
    },
    default: {
      bodyMapper: Mappers.ApiError
    }
  },
  serializer
};

const getOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Media/mediaServices/{accountName}/assets/{assetName}",
  urlParameters: [
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.accountName,
    Parameters.assetName
  ],
  queryParameters: [
    Parameters.apiVersion
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    200: {
      bodyMapper: Mappers.Asset
    },
    404: {},
    default: {
      bodyMapper: Mappers.ApiError
    }
  },
  serializer
};

const createOrUpdateOperationSpec: msRest.OperationSpec = {
  httpMethod: "PUT",
  path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Media/mediaServices/{accountName}/assets/{assetName}",
  urlParameters: [
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.accountName,
    Parameters.assetName
  ],
  queryParameters: [
    Parameters.apiVersion
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  requestBody: {
    parameterPath: "parameters",
    mapper: {
      ...Mappers.Asset,
      required: true
    }
  },
  responses: {
    200: {
      bodyMapper: Mappers.Asset
    },
    201: {
      bodyMapper: Mappers.Asset
    },
    default: {
      bodyMapper: Mappers.ApiError
    }
  },
  serializer
};

const deleteMethodOperationSpec: msRest.OperationSpec = {
  httpMethod: "DELETE",
  path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Media/mediaServices/{accountName}/assets/{assetName}",
  urlParameters: [
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.accountName,
    Parameters.assetName
  ],
  queryParameters: [
    Parameters.apiVersion
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    200: {},
    204: {},
    default: {
      bodyMapper: Mappers.ApiError
    }
  },
  serializer
};

const updateOperationSpec: msRest.OperationSpec = {
  httpMethod: "PATCH",
  path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Media/mediaServices/{accountName}/assets/{assetName}",
  urlParameters: [
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.accountName,
    Parameters.assetName
  ],
  queryParameters: [
    Parameters.apiVersion
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  requestBody: {
    parameterPath: "parameters",
    mapper: {
      ...Mappers.Asset,
      required: true
    }
  },
  responses: {
    200: {
      bodyMapper: Mappers.Asset
    },
    default: {
      bodyMapper: Mappers.ApiError
    }
  },
  serializer
};

const listContainerSasOperationSpec: msRest.OperationSpec = {
  httpMethod: "POST",
  path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Media/mediaServices/{accountName}/assets/{assetName}/listContainerSas",
  urlParameters: [
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.accountName,
    Parameters.assetName
  ],
  queryParameters: [
    Parameters.apiVersion
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  requestBody: {
    parameterPath: "parameters",
    mapper: {
      ...Mappers.ListContainerSasInput,
      required: true
    }
  },
  responses: {
    200: {
      bodyMapper: Mappers.AssetContainerSas
    },
    default: {
      bodyMapper: Mappers.ApiError
    }
  },
  serializer
};

const getEncryptionKeyOperationSpec: msRest.OperationSpec = {
  httpMethod: "POST",
  path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Media/mediaServices/{accountName}/assets/{assetName}/getEncryptionKey",
  urlParameters: [
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.accountName,
    Parameters.assetName
  ],
  queryParameters: [
    Parameters.apiVersion
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    200: {
      bodyMapper: Mappers.StorageEncryptedAssetDecryptionData
    },
    default: {
      bodyMapper: Mappers.ApiError
    }
  },
  serializer
};

const listStreamingLocatorsOperationSpec: msRest.OperationSpec = {
  httpMethod: "POST",
  path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Media/mediaServices/{accountName}/assets/{assetName}/listStreamingLocators",
  urlParameters: [
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.accountName,
    Parameters.assetName
  ],
  queryParameters: [
    Parameters.apiVersion
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    200: {
      bodyMapper: Mappers.ListStreamingLocatorsResponse
    },
    default: {
      bodyMapper: Mappers.ApiError
    }
  },
  serializer
};

const listNextOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  baseUrl: "https://management.azure.com",
  path: "{nextLink}",
  urlParameters: [
    Parameters.nextPageLink
  ],
  queryParameters: [
    Parameters.apiVersion,
    Parameters.filter,
    Parameters.top,
    Parameters.orderby
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    200: {
      bodyMapper: Mappers.AssetCollection
    },
    default: {
      bodyMapper: Mappers.ApiError
    }
  },
  serializer
};
