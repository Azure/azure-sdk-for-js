/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is
 * regenerated.
 */

import * as msRest from "@azure/ms-rest-js";
import * as Models from "../models";
import * as Mappers from "../models/streamingLocatorsMappers";
import * as Parameters from "../models/parameters";
import { AzureMediaServicesContext } from "../azureMediaServicesContext";

/** Class representing a StreamingLocators. */
export class StreamingLocators {
  private readonly client: AzureMediaServicesContext;

  /**
   * Create a StreamingLocators.
   * @param {AzureMediaServicesContext} client Reference to the service client.
   */
  constructor(client: AzureMediaServicesContext) {
    this.client = client;
  }

  /**
   * Lists the Streaming Locators in the account
   * @summary List Streaming Locators
   * @param resourceGroupName The name of the resource group within the Azure subscription.
   * @param accountName The Media Services account name.
   * @param [options] The optional parameters
   * @returns Promise<Models.StreamingLocatorsListResponse>
   */
  list(resourceGroupName: string, accountName: string, options?: Models.StreamingLocatorsListOptionalParams): Promise<Models.StreamingLocatorsListResponse>;
  /**
   * @param resourceGroupName The name of the resource group within the Azure subscription.
   * @param accountName The Media Services account name.
   * @param callback The callback
   */
  list(resourceGroupName: string, accountName: string, callback: msRest.ServiceCallback<Models.StreamingLocatorCollection>): void;
  /**
   * @param resourceGroupName The name of the resource group within the Azure subscription.
   * @param accountName The Media Services account name.
   * @param options The optional parameters
   * @param callback The callback
   */
  list(resourceGroupName: string, accountName: string, options: Models.StreamingLocatorsListOptionalParams, callback: msRest.ServiceCallback<Models.StreamingLocatorCollection>): void;
  list(resourceGroupName: string, accountName: string, options?: Models.StreamingLocatorsListOptionalParams | msRest.ServiceCallback<Models.StreamingLocatorCollection>, callback?: msRest.ServiceCallback<Models.StreamingLocatorCollection>): Promise<Models.StreamingLocatorsListResponse> {
    return this.client.sendOperationRequest(
      {
        resourceGroupName,
        accountName,
        options
      },
      listOperationSpec,
      callback) as Promise<Models.StreamingLocatorsListResponse>;
  }

  /**
   * Get the details of a Streaming Locator in the Media Services account
   * @summary Get a Streaming Locator
   * @param resourceGroupName The name of the resource group within the Azure subscription.
   * @param accountName The Media Services account name.
   * @param streamingLocatorName The Streaming Locator name.
   * @param [options] The optional parameters
   * @returns Promise<Models.StreamingLocatorsGetResponse>
   */
  get(resourceGroupName: string, accountName: string, streamingLocatorName: string, options?: msRest.RequestOptionsBase): Promise<Models.StreamingLocatorsGetResponse>;
  /**
   * @param resourceGroupName The name of the resource group within the Azure subscription.
   * @param accountName The Media Services account name.
   * @param streamingLocatorName The Streaming Locator name.
   * @param callback The callback
   */
  get(resourceGroupName: string, accountName: string, streamingLocatorName: string, callback: msRest.ServiceCallback<Models.StreamingLocator>): void;
  /**
   * @param resourceGroupName The name of the resource group within the Azure subscription.
   * @param accountName The Media Services account name.
   * @param streamingLocatorName The Streaming Locator name.
   * @param options The optional parameters
   * @param callback The callback
   */
  get(resourceGroupName: string, accountName: string, streamingLocatorName: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.StreamingLocator>): void;
  get(resourceGroupName: string, accountName: string, streamingLocatorName: string, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<Models.StreamingLocator>, callback?: msRest.ServiceCallback<Models.StreamingLocator>): Promise<Models.StreamingLocatorsGetResponse> {
    return this.client.sendOperationRequest(
      {
        resourceGroupName,
        accountName,
        streamingLocatorName,
        options
      },
      getOperationSpec,
      callback) as Promise<Models.StreamingLocatorsGetResponse>;
  }

  /**
   * Create a Streaming Locator in the Media Services account
   * @summary Create a Streaming Locator
   * @param resourceGroupName The name of the resource group within the Azure subscription.
   * @param accountName The Media Services account name.
   * @param streamingLocatorName The Streaming Locator name.
   * @param parameters The request parameters
   * @param [options] The optional parameters
   * @returns Promise<Models.StreamingLocatorsCreateResponse>
   */
  create(resourceGroupName: string, accountName: string, streamingLocatorName: string, parameters: Models.StreamingLocator, options?: msRest.RequestOptionsBase): Promise<Models.StreamingLocatorsCreateResponse>;
  /**
   * @param resourceGroupName The name of the resource group within the Azure subscription.
   * @param accountName The Media Services account name.
   * @param streamingLocatorName The Streaming Locator name.
   * @param parameters The request parameters
   * @param callback The callback
   */
  create(resourceGroupName: string, accountName: string, streamingLocatorName: string, parameters: Models.StreamingLocator, callback: msRest.ServiceCallback<Models.StreamingLocator>): void;
  /**
   * @param resourceGroupName The name of the resource group within the Azure subscription.
   * @param accountName The Media Services account name.
   * @param streamingLocatorName The Streaming Locator name.
   * @param parameters The request parameters
   * @param options The optional parameters
   * @param callback The callback
   */
  create(resourceGroupName: string, accountName: string, streamingLocatorName: string, parameters: Models.StreamingLocator, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.StreamingLocator>): void;
  create(resourceGroupName: string, accountName: string, streamingLocatorName: string, parameters: Models.StreamingLocator, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<Models.StreamingLocator>, callback?: msRest.ServiceCallback<Models.StreamingLocator>): Promise<Models.StreamingLocatorsCreateResponse> {
    return this.client.sendOperationRequest(
      {
        resourceGroupName,
        accountName,
        streamingLocatorName,
        parameters,
        options
      },
      createOperationSpec,
      callback) as Promise<Models.StreamingLocatorsCreateResponse>;
  }

  /**
   * Deletes a Streaming Locator in the Media Services account
   * @summary Delete a Streaming Locator
   * @param resourceGroupName The name of the resource group within the Azure subscription.
   * @param accountName The Media Services account name.
   * @param streamingLocatorName The Streaming Locator name.
   * @param [options] The optional parameters
   * @returns Promise<msRest.RestResponse>
   */
  deleteMethod(resourceGroupName: string, accountName: string, streamingLocatorName: string, options?: msRest.RequestOptionsBase): Promise<msRest.RestResponse>;
  /**
   * @param resourceGroupName The name of the resource group within the Azure subscription.
   * @param accountName The Media Services account name.
   * @param streamingLocatorName The Streaming Locator name.
   * @param callback The callback
   */
  deleteMethod(resourceGroupName: string, accountName: string, streamingLocatorName: string, callback: msRest.ServiceCallback<void>): void;
  /**
   * @param resourceGroupName The name of the resource group within the Azure subscription.
   * @param accountName The Media Services account name.
   * @param streamingLocatorName The Streaming Locator name.
   * @param options The optional parameters
   * @param callback The callback
   */
  deleteMethod(resourceGroupName: string, accountName: string, streamingLocatorName: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<void>): void;
  deleteMethod(resourceGroupName: string, accountName: string, streamingLocatorName: string, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<void>, callback?: msRest.ServiceCallback<void>): Promise<msRest.RestResponse> {
    return this.client.sendOperationRequest(
      {
        resourceGroupName,
        accountName,
        streamingLocatorName,
        options
      },
      deleteMethodOperationSpec,
      callback);
  }

  /**
   * List Content Keys used by this Streaming Locator
   * @summary List Content Keys
   * @param resourceGroupName The name of the resource group within the Azure subscription.
   * @param accountName The Media Services account name.
   * @param streamingLocatorName The Streaming Locator name.
   * @param [options] The optional parameters
   * @returns Promise<Models.StreamingLocatorsListContentKeysResponse>
   */
  listContentKeys(resourceGroupName: string, accountName: string, streamingLocatorName: string, options?: msRest.RequestOptionsBase): Promise<Models.StreamingLocatorsListContentKeysResponse>;
  /**
   * @param resourceGroupName The name of the resource group within the Azure subscription.
   * @param accountName The Media Services account name.
   * @param streamingLocatorName The Streaming Locator name.
   * @param callback The callback
   */
  listContentKeys(resourceGroupName: string, accountName: string, streamingLocatorName: string, callback: msRest.ServiceCallback<Models.ListContentKeysResponse>): void;
  /**
   * @param resourceGroupName The name of the resource group within the Azure subscription.
   * @param accountName The Media Services account name.
   * @param streamingLocatorName The Streaming Locator name.
   * @param options The optional parameters
   * @param callback The callback
   */
  listContentKeys(resourceGroupName: string, accountName: string, streamingLocatorName: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.ListContentKeysResponse>): void;
  listContentKeys(resourceGroupName: string, accountName: string, streamingLocatorName: string, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<Models.ListContentKeysResponse>, callback?: msRest.ServiceCallback<Models.ListContentKeysResponse>): Promise<Models.StreamingLocatorsListContentKeysResponse> {
    return this.client.sendOperationRequest(
      {
        resourceGroupName,
        accountName,
        streamingLocatorName,
        options
      },
      listContentKeysOperationSpec,
      callback) as Promise<Models.StreamingLocatorsListContentKeysResponse>;
  }

  /**
   * List Paths supported by this Streaming Locator
   * @summary List Paths
   * @param resourceGroupName The name of the resource group within the Azure subscription.
   * @param accountName The Media Services account name.
   * @param streamingLocatorName The Streaming Locator name.
   * @param [options] The optional parameters
   * @returns Promise<Models.StreamingLocatorsListPathsResponse>
   */
  listPaths(resourceGroupName: string, accountName: string, streamingLocatorName: string, options?: msRest.RequestOptionsBase): Promise<Models.StreamingLocatorsListPathsResponse>;
  /**
   * @param resourceGroupName The name of the resource group within the Azure subscription.
   * @param accountName The Media Services account name.
   * @param streamingLocatorName The Streaming Locator name.
   * @param callback The callback
   */
  listPaths(resourceGroupName: string, accountName: string, streamingLocatorName: string, callback: msRest.ServiceCallback<Models.ListPathsResponse>): void;
  /**
   * @param resourceGroupName The name of the resource group within the Azure subscription.
   * @param accountName The Media Services account name.
   * @param streamingLocatorName The Streaming Locator name.
   * @param options The optional parameters
   * @param callback The callback
   */
  listPaths(resourceGroupName: string, accountName: string, streamingLocatorName: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.ListPathsResponse>): void;
  listPaths(resourceGroupName: string, accountName: string, streamingLocatorName: string, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<Models.ListPathsResponse>, callback?: msRest.ServiceCallback<Models.ListPathsResponse>): Promise<Models.StreamingLocatorsListPathsResponse> {
    return this.client.sendOperationRequest(
      {
        resourceGroupName,
        accountName,
        streamingLocatorName,
        options
      },
      listPathsOperationSpec,
      callback) as Promise<Models.StreamingLocatorsListPathsResponse>;
  }

  /**
   * Lists the Streaming Locators in the account
   * @summary List Streaming Locators
   * @param nextPageLink The NextLink from the previous successful call to List operation.
   * @param [options] The optional parameters
   * @returns Promise<Models.StreamingLocatorsListNextResponse>
   */
  listNext(nextPageLink: string, options?: Models.StreamingLocatorsListNextOptionalParams): Promise<Models.StreamingLocatorsListNextResponse>;
  /**
   * @param nextPageLink The NextLink from the previous successful call to List operation.
   * @param callback The callback
   */
  listNext(nextPageLink: string, callback: msRest.ServiceCallback<Models.StreamingLocatorCollection>): void;
  /**
   * @param nextPageLink The NextLink from the previous successful call to List operation.
   * @param options The optional parameters
   * @param callback The callback
   */
  listNext(nextPageLink: string, options: Models.StreamingLocatorsListNextOptionalParams, callback: msRest.ServiceCallback<Models.StreamingLocatorCollection>): void;
  listNext(nextPageLink: string, options?: Models.StreamingLocatorsListNextOptionalParams | msRest.ServiceCallback<Models.StreamingLocatorCollection>, callback?: msRest.ServiceCallback<Models.StreamingLocatorCollection>): Promise<Models.StreamingLocatorsListNextResponse> {
    return this.client.sendOperationRequest(
      {
        nextPageLink,
        options
      },
      listNextOperationSpec,
      callback) as Promise<Models.StreamingLocatorsListNextResponse>;
  }
}

// Operation Specifications
const serializer = new msRest.Serializer(Mappers);
const listOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Media/mediaServices/{accountName}/streamingLocators",
  urlParameters: [
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.accountName
  ],
  queryParameters: [
    Parameters.apiVersion,
    Parameters.filter,
    Parameters.top,
    Parameters.orderby
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    200: {
      bodyMapper: Mappers.StreamingLocatorCollection
    },
    default: {
      bodyMapper: Mappers.ApiError
    }
  },
  serializer
};

const getOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Media/mediaServices/{accountName}/streamingLocators/{streamingLocatorName}",
  urlParameters: [
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.accountName,
    Parameters.streamingLocatorName
  ],
  queryParameters: [
    Parameters.apiVersion
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    200: {
      bodyMapper: Mappers.StreamingLocator
    },
    404: {},
    default: {
      bodyMapper: Mappers.ApiError
    }
  },
  serializer
};

const createOperationSpec: msRest.OperationSpec = {
  httpMethod: "PUT",
  path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Media/mediaServices/{accountName}/streamingLocators/{streamingLocatorName}",
  urlParameters: [
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.accountName,
    Parameters.streamingLocatorName
  ],
  queryParameters: [
    Parameters.apiVersion
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  requestBody: {
    parameterPath: "parameters",
    mapper: {
      ...Mappers.StreamingLocator,
      required: true
    }
  },
  responses: {
    201: {
      bodyMapper: Mappers.StreamingLocator
    },
    default: {
      bodyMapper: Mappers.ApiError
    }
  },
  serializer
};

const deleteMethodOperationSpec: msRest.OperationSpec = {
  httpMethod: "DELETE",
  path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Media/mediaServices/{accountName}/streamingLocators/{streamingLocatorName}",
  urlParameters: [
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.accountName,
    Parameters.streamingLocatorName
  ],
  queryParameters: [
    Parameters.apiVersion
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    200: {},
    204: {},
    default: {
      bodyMapper: Mappers.ApiError
    }
  },
  serializer
};

const listContentKeysOperationSpec: msRest.OperationSpec = {
  httpMethod: "POST",
  path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Media/mediaServices/{accountName}/streamingLocators/{streamingLocatorName}/listContentKeys",
  urlParameters: [
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.accountName,
    Parameters.streamingLocatorName
  ],
  queryParameters: [
    Parameters.apiVersion
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    200: {
      bodyMapper: Mappers.ListContentKeysResponse
    },
    default: {
      bodyMapper: Mappers.ApiError
    }
  },
  serializer
};

const listPathsOperationSpec: msRest.OperationSpec = {
  httpMethod: "POST",
  path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Media/mediaServices/{accountName}/streamingLocators/{streamingLocatorName}/listPaths",
  urlParameters: [
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.accountName,
    Parameters.streamingLocatorName
  ],
  queryParameters: [
    Parameters.apiVersion
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    200: {
      bodyMapper: Mappers.ListPathsResponse
    },
    default: {
      bodyMapper: Mappers.ApiError
    }
  },
  serializer
};

const listNextOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  baseUrl: "https://management.azure.com",
  path: "{nextLink}",
  urlParameters: [
    Parameters.nextPageLink
  ],
  queryParameters: [
    Parameters.apiVersion,
    Parameters.filter,
    Parameters.top,
    Parameters.orderby
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    200: {
      bodyMapper: Mappers.StreamingLocatorCollection
    },
    default: {
      bodyMapper: Mappers.ApiError
    }
  },
  serializer
};
