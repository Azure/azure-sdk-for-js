/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is
 * regenerated.
 */

import * as msRest from "@azure/ms-rest-js";
import * as Models from "../models";
import * as Mappers from "../models/jobsMappers";
import * as Parameters from "../models/parameters";
import { AzureMediaServicesContext } from "../azureMediaServicesContext";

/** Class representing a Jobs. */
export class Jobs {
  private readonly client: AzureMediaServicesContext;

  /**
   * Create a Jobs.
   * @param {AzureMediaServicesContext} client Reference to the service client.
   */
  constructor(client: AzureMediaServicesContext) {
    this.client = client;
  }

  /**
   * Lists all of the Jobs for the Transform.
   * @summary List Jobs
   * @param resourceGroupName The name of the resource group within the Azure subscription.
   * @param accountName The Media Services account name.
   * @param transformName The Transform name.
   * @param [options] The optional parameters
   * @returns Promise<Models.JobsListResponse>
   */
  list(resourceGroupName: string, accountName: string, transformName: string, options?: Models.JobsListOptionalParams): Promise<Models.JobsListResponse>;
  /**
   * @param resourceGroupName The name of the resource group within the Azure subscription.
   * @param accountName The Media Services account name.
   * @param transformName The Transform name.
   * @param callback The callback
   */
  list(resourceGroupName: string, accountName: string, transformName: string, callback: msRest.ServiceCallback<Models.JobCollection>): void;
  /**
   * @param resourceGroupName The name of the resource group within the Azure subscription.
   * @param accountName The Media Services account name.
   * @param transformName The Transform name.
   * @param options The optional parameters
   * @param callback The callback
   */
  list(resourceGroupName: string, accountName: string, transformName: string, options: Models.JobsListOptionalParams, callback: msRest.ServiceCallback<Models.JobCollection>): void;
  list(resourceGroupName: string, accountName: string, transformName: string, options?: Models.JobsListOptionalParams | msRest.ServiceCallback<Models.JobCollection>, callback?: msRest.ServiceCallback<Models.JobCollection>): Promise<Models.JobsListResponse> {
    return this.client.sendOperationRequest(
      {
        resourceGroupName,
        accountName,
        transformName,
        options
      },
      listOperationSpec,
      callback) as Promise<Models.JobsListResponse>;
  }

  /**
   * Gets a Job.
   * @summary Get Job
   * @param resourceGroupName The name of the resource group within the Azure subscription.
   * @param accountName The Media Services account name.
   * @param transformName The Transform name.
   * @param jobName The Job name.
   * @param [options] The optional parameters
   * @returns Promise<Models.JobsGetResponse>
   */
  get(resourceGroupName: string, accountName: string, transformName: string, jobName: string, options?: msRest.RequestOptionsBase): Promise<Models.JobsGetResponse>;
  /**
   * @param resourceGroupName The name of the resource group within the Azure subscription.
   * @param accountName The Media Services account name.
   * @param transformName The Transform name.
   * @param jobName The Job name.
   * @param callback The callback
   */
  get(resourceGroupName: string, accountName: string, transformName: string, jobName: string, callback: msRest.ServiceCallback<Models.Job>): void;
  /**
   * @param resourceGroupName The name of the resource group within the Azure subscription.
   * @param accountName The Media Services account name.
   * @param transformName The Transform name.
   * @param jobName The Job name.
   * @param options The optional parameters
   * @param callback The callback
   */
  get(resourceGroupName: string, accountName: string, transformName: string, jobName: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.Job>): void;
  get(resourceGroupName: string, accountName: string, transformName: string, jobName: string, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<Models.Job>, callback?: msRest.ServiceCallback<Models.Job>): Promise<Models.JobsGetResponse> {
    return this.client.sendOperationRequest(
      {
        resourceGroupName,
        accountName,
        transformName,
        jobName,
        options
      },
      getOperationSpec,
      callback) as Promise<Models.JobsGetResponse>;
  }

  /**
   * Creates a Job.
   * @summary Create Job
   * @param resourceGroupName The name of the resource group within the Azure subscription.
   * @param accountName The Media Services account name.
   * @param transformName The Transform name.
   * @param jobName The Job name.
   * @param parameters The request parameters
   * @param [options] The optional parameters
   * @returns Promise<Models.JobsCreateResponse>
   */
  create(resourceGroupName: string, accountName: string, transformName: string, jobName: string, parameters: Models.Job, options?: msRest.RequestOptionsBase): Promise<Models.JobsCreateResponse>;
  /**
   * @param resourceGroupName The name of the resource group within the Azure subscription.
   * @param accountName The Media Services account name.
   * @param transformName The Transform name.
   * @param jobName The Job name.
   * @param parameters The request parameters
   * @param callback The callback
   */
  create(resourceGroupName: string, accountName: string, transformName: string, jobName: string, parameters: Models.Job, callback: msRest.ServiceCallback<Models.Job>): void;
  /**
   * @param resourceGroupName The name of the resource group within the Azure subscription.
   * @param accountName The Media Services account name.
   * @param transformName The Transform name.
   * @param jobName The Job name.
   * @param parameters The request parameters
   * @param options The optional parameters
   * @param callback The callback
   */
  create(resourceGroupName: string, accountName: string, transformName: string, jobName: string, parameters: Models.Job, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.Job>): void;
  create(resourceGroupName: string, accountName: string, transformName: string, jobName: string, parameters: Models.Job, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<Models.Job>, callback?: msRest.ServiceCallback<Models.Job>): Promise<Models.JobsCreateResponse> {
    return this.client.sendOperationRequest(
      {
        resourceGroupName,
        accountName,
        transformName,
        jobName,
        parameters,
        options
      },
      createOperationSpec,
      callback) as Promise<Models.JobsCreateResponse>;
  }

  /**
   * Deletes a Job.
   * @summary Delete Job
   * @param resourceGroupName The name of the resource group within the Azure subscription.
   * @param accountName The Media Services account name.
   * @param transformName The Transform name.
   * @param jobName The Job name.
   * @param [options] The optional parameters
   * @returns Promise<msRest.RestResponse>
   */
  deleteMethod(resourceGroupName: string, accountName: string, transformName: string, jobName: string, options?: msRest.RequestOptionsBase): Promise<msRest.RestResponse>;
  /**
   * @param resourceGroupName The name of the resource group within the Azure subscription.
   * @param accountName The Media Services account name.
   * @param transformName The Transform name.
   * @param jobName The Job name.
   * @param callback The callback
   */
  deleteMethod(resourceGroupName: string, accountName: string, transformName: string, jobName: string, callback: msRest.ServiceCallback<void>): void;
  /**
   * @param resourceGroupName The name of the resource group within the Azure subscription.
   * @param accountName The Media Services account name.
   * @param transformName The Transform name.
   * @param jobName The Job name.
   * @param options The optional parameters
   * @param callback The callback
   */
  deleteMethod(resourceGroupName: string, accountName: string, transformName: string, jobName: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<void>): void;
  deleteMethod(resourceGroupName: string, accountName: string, transformName: string, jobName: string, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<void>, callback?: msRest.ServiceCallback<void>): Promise<msRest.RestResponse> {
    return this.client.sendOperationRequest(
      {
        resourceGroupName,
        accountName,
        transformName,
        jobName,
        options
      },
      deleteMethodOperationSpec,
      callback);
  }

  /**
   * Update is only supported for description and priority. Updating Priority will take effect when
   * the Job state is Queued or Scheduled and depending on the timing the priority update may be
   * ignored.
   * @summary Update Job
   * @param resourceGroupName The name of the resource group within the Azure subscription.
   * @param accountName The Media Services account name.
   * @param transformName The Transform name.
   * @param jobName The Job name.
   * @param parameters The request parameters
   * @param [options] The optional parameters
   * @returns Promise<Models.JobsUpdateResponse>
   */
  update(resourceGroupName: string, accountName: string, transformName: string, jobName: string, parameters: Models.Job, options?: msRest.RequestOptionsBase): Promise<Models.JobsUpdateResponse>;
  /**
   * @param resourceGroupName The name of the resource group within the Azure subscription.
   * @param accountName The Media Services account name.
   * @param transformName The Transform name.
   * @param jobName The Job name.
   * @param parameters The request parameters
   * @param callback The callback
   */
  update(resourceGroupName: string, accountName: string, transformName: string, jobName: string, parameters: Models.Job, callback: msRest.ServiceCallback<Models.Job>): void;
  /**
   * @param resourceGroupName The name of the resource group within the Azure subscription.
   * @param accountName The Media Services account name.
   * @param transformName The Transform name.
   * @param jobName The Job name.
   * @param parameters The request parameters
   * @param options The optional parameters
   * @param callback The callback
   */
  update(resourceGroupName: string, accountName: string, transformName: string, jobName: string, parameters: Models.Job, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.Job>): void;
  update(resourceGroupName: string, accountName: string, transformName: string, jobName: string, parameters: Models.Job, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<Models.Job>, callback?: msRest.ServiceCallback<Models.Job>): Promise<Models.JobsUpdateResponse> {
    return this.client.sendOperationRequest(
      {
        resourceGroupName,
        accountName,
        transformName,
        jobName,
        parameters,
        options
      },
      updateOperationSpec,
      callback) as Promise<Models.JobsUpdateResponse>;
  }

  /**
   * Cancel a Job.
   * @summary Cancel Job
   * @param resourceGroupName The name of the resource group within the Azure subscription.
   * @param accountName The Media Services account name.
   * @param transformName The Transform name.
   * @param jobName The Job name.
   * @param [options] The optional parameters
   * @returns Promise<msRest.RestResponse>
   */
  cancelJob(resourceGroupName: string, accountName: string, transformName: string, jobName: string, options?: msRest.RequestOptionsBase): Promise<msRest.RestResponse>;
  /**
   * @param resourceGroupName The name of the resource group within the Azure subscription.
   * @param accountName The Media Services account name.
   * @param transformName The Transform name.
   * @param jobName The Job name.
   * @param callback The callback
   */
  cancelJob(resourceGroupName: string, accountName: string, transformName: string, jobName: string, callback: msRest.ServiceCallback<void>): void;
  /**
   * @param resourceGroupName The name of the resource group within the Azure subscription.
   * @param accountName The Media Services account name.
   * @param transformName The Transform name.
   * @param jobName The Job name.
   * @param options The optional parameters
   * @param callback The callback
   */
  cancelJob(resourceGroupName: string, accountName: string, transformName: string, jobName: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<void>): void;
  cancelJob(resourceGroupName: string, accountName: string, transformName: string, jobName: string, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<void>, callback?: msRest.ServiceCallback<void>): Promise<msRest.RestResponse> {
    return this.client.sendOperationRequest(
      {
        resourceGroupName,
        accountName,
        transformName,
        jobName,
        options
      },
      cancelJobOperationSpec,
      callback);
  }

  /**
   * Lists all of the Jobs for the Transform.
   * @summary List Jobs
   * @param nextPageLink The NextLink from the previous successful call to List operation.
   * @param [options] The optional parameters
   * @returns Promise<Models.JobsListNextResponse>
   */
  listNext(nextPageLink: string, options?: Models.JobsListNextOptionalParams): Promise<Models.JobsListNextResponse>;
  /**
   * @param nextPageLink The NextLink from the previous successful call to List operation.
   * @param callback The callback
   */
  listNext(nextPageLink: string, callback: msRest.ServiceCallback<Models.JobCollection>): void;
  /**
   * @param nextPageLink The NextLink from the previous successful call to List operation.
   * @param options The optional parameters
   * @param callback The callback
   */
  listNext(nextPageLink: string, options: Models.JobsListNextOptionalParams, callback: msRest.ServiceCallback<Models.JobCollection>): void;
  listNext(nextPageLink: string, options?: Models.JobsListNextOptionalParams | msRest.ServiceCallback<Models.JobCollection>, callback?: msRest.ServiceCallback<Models.JobCollection>): Promise<Models.JobsListNextResponse> {
    return this.client.sendOperationRequest(
      {
        nextPageLink,
        options
      },
      listNextOperationSpec,
      callback) as Promise<Models.JobsListNextResponse>;
  }
}

// Operation Specifications
const serializer = new msRest.Serializer(Mappers);
const listOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Media/mediaServices/{accountName}/transforms/{transformName}/jobs",
  urlParameters: [
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.accountName,
    Parameters.transformName
  ],
  queryParameters: [
    Parameters.apiVersion,
    Parameters.filter,
    Parameters.orderby
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    200: {
      bodyMapper: Mappers.JobCollection
    },
    default: {
      bodyMapper: Mappers.ApiError
    }
  },
  serializer
};

const getOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Media/mediaServices/{accountName}/transforms/{transformName}/jobs/{jobName}",
  urlParameters: [
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.accountName,
    Parameters.transformName,
    Parameters.jobName
  ],
  queryParameters: [
    Parameters.apiVersion
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    200: {
      bodyMapper: Mappers.Job
    },
    404: {},
    default: {
      bodyMapper: Mappers.ApiError
    }
  },
  serializer
};

const createOperationSpec: msRest.OperationSpec = {
  httpMethod: "PUT",
  path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Media/mediaServices/{accountName}/transforms/{transformName}/jobs/{jobName}",
  urlParameters: [
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.accountName,
    Parameters.transformName,
    Parameters.jobName
  ],
  queryParameters: [
    Parameters.apiVersion
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  requestBody: {
    parameterPath: "parameters",
    mapper: {
      ...Mappers.Job,
      required: true
    }
  },
  responses: {
    201: {
      bodyMapper: Mappers.Job
    },
    default: {
      bodyMapper: Mappers.ApiError
    }
  },
  serializer
};

const deleteMethodOperationSpec: msRest.OperationSpec = {
  httpMethod: "DELETE",
  path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Media/mediaServices/{accountName}/transforms/{transformName}/jobs/{jobName}",
  urlParameters: [
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.accountName,
    Parameters.transformName,
    Parameters.jobName
  ],
  queryParameters: [
    Parameters.apiVersion
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    200: {},
    204: {},
    default: {
      bodyMapper: Mappers.ApiError
    }
  },
  serializer
};

const updateOperationSpec: msRest.OperationSpec = {
  httpMethod: "PATCH",
  path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Media/mediaServices/{accountName}/transforms/{transformName}/jobs/{jobName}",
  urlParameters: [
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.accountName,
    Parameters.transformName,
    Parameters.jobName
  ],
  queryParameters: [
    Parameters.apiVersion
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  requestBody: {
    parameterPath: "parameters",
    mapper: {
      ...Mappers.Job,
      required: true
    }
  },
  responses: {
    200: {
      bodyMapper: Mappers.Job
    },
    default: {
      bodyMapper: Mappers.ApiError
    }
  },
  serializer
};

const cancelJobOperationSpec: msRest.OperationSpec = {
  httpMethod: "POST",
  path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Media/mediaServices/{accountName}/transforms/{transformName}/jobs/{jobName}/cancelJob",
  urlParameters: [
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.accountName,
    Parameters.transformName,
    Parameters.jobName
  ],
  queryParameters: [
    Parameters.apiVersion
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    200: {},
    default: {
      bodyMapper: Mappers.ApiError
    }
  },
  serializer
};

const listNextOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  baseUrl: "https://management.azure.com",
  path: "{nextLink}",
  urlParameters: [
    Parameters.nextPageLink
  ],
  queryParameters: [
    Parameters.apiVersion,
    Parameters.filter,
    Parameters.orderby
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    200: {
      bodyMapper: Mappers.JobCollection
    },
    default: {
      bodyMapper: Mappers.ApiError
    }
  },
  serializer
};
