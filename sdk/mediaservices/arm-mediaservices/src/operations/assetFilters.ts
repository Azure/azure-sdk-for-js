/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */

import { PagedAsyncIterableIterator, PageSettings } from "@azure/core-paging";
import { setContinuationToken } from "../pagingHelper";
import { AssetFilters } from "../operationsInterfaces";
import * as coreClient from "@azure/core-client";
import * as Mappers from "../models/mappers";
import * as Parameters from "../models/parameters";
import { AzureMediaServices } from "../azureMediaServices";
import {
  AssetFilter,
  AssetFiltersListNextOptionalParams,
  AssetFiltersListOptionalParams,
  AssetFiltersListResponse,
  AssetFiltersGetOptionalParams,
  AssetFiltersGetResponse,
  AssetFiltersCreateOrUpdateOptionalParams,
  AssetFiltersCreateOrUpdateResponse,
  AssetFiltersDeleteOptionalParams,
  AssetFiltersUpdateOptionalParams,
  AssetFiltersUpdateResponse,
  AssetFiltersListNextResponse
} from "../models";

/// <reference lib="esnext.asynciterable" />
/** Class containing AssetFilters operations. */
export class AssetFiltersImpl implements AssetFilters {
  private readonly client: AzureMediaServices;

  /**
   * Initialize a new instance of the class AssetFilters class.
   * @param client Reference to the service client
   */
  constructor(client: AzureMediaServices) {
    this.client = client;
  }

  /**
   * List Asset Filters associated with the specified Asset.
   * @param resourceGroupName The name of the resource group within the Azure subscription.
   * @param accountName The Media Services account name.
   * @param assetName The Asset name.
   * @param options The options parameters.
   */
  public list(
    resourceGroupName: string,
    accountName: string,
    assetName: string,
    options?: AssetFiltersListOptionalParams
  ): PagedAsyncIterableIterator<AssetFilter> {
    const iter = this.listPagingAll(
      resourceGroupName,
      accountName,
      assetName,
      options
    );
    return {
      next() {
        return iter.next();
      },
      [Symbol.asyncIterator]() {
        return this;
      },
      byPage: (settings?: PageSettings) => {
        if (settings?.maxPageSize) {
          throw new Error("maxPageSize is not supported by this operation.");
        }
        return this.listPagingPage(
          resourceGroupName,
          accountName,
          assetName,
          options,
          settings
        );
      }
    };
  }

  private async *listPagingPage(
    resourceGroupName: string,
    accountName: string,
    assetName: string,
    options?: AssetFiltersListOptionalParams,
    settings?: PageSettings
  ): AsyncIterableIterator<AssetFilter[]> {
    let result: AssetFiltersListResponse;
    let continuationToken = settings?.continuationToken;
    if (!continuationToken) {
      result = await this._list(
        resourceGroupName,
        accountName,
        assetName,
        options
      );
      let page = result.value || [];
      continuationToken = result.odataNextLink;
      setContinuationToken(page, continuationToken);
      yield page;
    }
    while (continuationToken) {
      result = await this._listNext(
        resourceGroupName,
        accountName,
        assetName,
        continuationToken,
        options
      );
      continuationToken = result.odataNextLink;
      let page = result.value || [];
      setContinuationToken(page, continuationToken);
      yield page;
    }
  }

  private async *listPagingAll(
    resourceGroupName: string,
    accountName: string,
    assetName: string,
    options?: AssetFiltersListOptionalParams
  ): AsyncIterableIterator<AssetFilter> {
    for await (const page of this.listPagingPage(
      resourceGroupName,
      accountName,
      assetName,
      options
    )) {
      yield* page;
    }
  }

  /**
   * List Asset Filters associated with the specified Asset.
   * @param resourceGroupName The name of the resource group within the Azure subscription.
   * @param accountName The Media Services account name.
   * @param assetName The Asset name.
   * @param options The options parameters.
   */
  private _list(
    resourceGroupName: string,
    accountName: string,
    assetName: string,
    options?: AssetFiltersListOptionalParams
  ): Promise<AssetFiltersListResponse> {
    return this.client.sendOperationRequest(
      { resourceGroupName, accountName, assetName, options },
      listOperationSpec
    );
  }

  /**
   * Get the details of an Asset Filter associated with the specified Asset.
   * @param resourceGroupName The name of the resource group within the Azure subscription.
   * @param accountName The Media Services account name.
   * @param assetName The Asset name.
   * @param filterName The Asset Filter name
   * @param options The options parameters.
   */
  get(
    resourceGroupName: string,
    accountName: string,
    assetName: string,
    filterName: string,
    options?: AssetFiltersGetOptionalParams
  ): Promise<AssetFiltersGetResponse> {
    return this.client.sendOperationRequest(
      { resourceGroupName, accountName, assetName, filterName, options },
      getOperationSpec
    );
  }

  /**
   * Creates or updates an Asset Filter associated with the specified Asset.
   * @param resourceGroupName The name of the resource group within the Azure subscription.
   * @param accountName The Media Services account name.
   * @param assetName The Asset name.
   * @param filterName The Asset Filter name
   * @param parameters The request parameters
   * @param options The options parameters.
   */
  createOrUpdate(
    resourceGroupName: string,
    accountName: string,
    assetName: string,
    filterName: string,
    parameters: AssetFilter,
    options?: AssetFiltersCreateOrUpdateOptionalParams
  ): Promise<AssetFiltersCreateOrUpdateResponse> {
    return this.client.sendOperationRequest(
      {
        resourceGroupName,
        accountName,
        assetName,
        filterName,
        parameters,
        options
      },
      createOrUpdateOperationSpec
    );
  }

  /**
   * Deletes an Asset Filter associated with the specified Asset.
   * @param resourceGroupName The name of the resource group within the Azure subscription.
   * @param accountName The Media Services account name.
   * @param assetName The Asset name.
   * @param filterName The Asset Filter name
   * @param options The options parameters.
   */
  delete(
    resourceGroupName: string,
    accountName: string,
    assetName: string,
    filterName: string,
    options?: AssetFiltersDeleteOptionalParams
  ): Promise<void> {
    return this.client.sendOperationRequest(
      { resourceGroupName, accountName, assetName, filterName, options },
      deleteOperationSpec
    );
  }

  /**
   * Updates an existing Asset Filter associated with the specified Asset.
   * @param resourceGroupName The name of the resource group within the Azure subscription.
   * @param accountName The Media Services account name.
   * @param assetName The Asset name.
   * @param filterName The Asset Filter name
   * @param parameters The request parameters
   * @param options The options parameters.
   */
  update(
    resourceGroupName: string,
    accountName: string,
    assetName: string,
    filterName: string,
    parameters: AssetFilter,
    options?: AssetFiltersUpdateOptionalParams
  ): Promise<AssetFiltersUpdateResponse> {
    return this.client.sendOperationRequest(
      {
        resourceGroupName,
        accountName,
        assetName,
        filterName,
        parameters,
        options
      },
      updateOperationSpec
    );
  }

  /**
   * ListNext
   * @param resourceGroupName The name of the resource group within the Azure subscription.
   * @param accountName The Media Services account name.
   * @param assetName The Asset name.
   * @param nextLink The nextLink from the previous successful call to the List method.
   * @param options The options parameters.
   */
  private _listNext(
    resourceGroupName: string,
    accountName: string,
    assetName: string,
    nextLink: string,
    options?: AssetFiltersListNextOptionalParams
  ): Promise<AssetFiltersListNextResponse> {
    return this.client.sendOperationRequest(
      { resourceGroupName, accountName, assetName, nextLink, options },
      listNextOperationSpec
    );
  }
}
// Operation Specifications
const serializer = coreClient.createSerializer(Mappers, /* isXml */ false);

const listOperationSpec: coreClient.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Media/mediaServices/{accountName}/assets/{assetName}/assetFilters",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.AssetFilterCollection
    },
    default: {
      bodyMapper: Mappers.ErrorResponse
    }
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.accountName,
    Parameters.assetName
  ],
  headerParameters: [Parameters.accept],
  serializer
};
const getOperationSpec: coreClient.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Media/mediaServices/{accountName}/assets/{assetName}/assetFilters/{filterName}",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.AssetFilter
    },
    default: {
      bodyMapper: Mappers.ErrorResponse
    }
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.accountName,
    Parameters.filterName,
    Parameters.assetName
  ],
  headerParameters: [Parameters.accept],
  serializer
};
const createOrUpdateOperationSpec: coreClient.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Media/mediaServices/{accountName}/assets/{assetName}/assetFilters/{filterName}",
  httpMethod: "PUT",
  responses: {
    200: {
      bodyMapper: Mappers.AssetFilter
    },
    201: {
      bodyMapper: Mappers.AssetFilter
    },
    default: {
      bodyMapper: Mappers.ErrorResponse
    }
  },
  requestBody: Parameters.parameters9,
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.accountName,
    Parameters.filterName,
    Parameters.assetName
  ],
  headerParameters: [Parameters.accept, Parameters.contentType],
  mediaType: "json",
  serializer
};
const deleteOperationSpec: coreClient.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Media/mediaServices/{accountName}/assets/{assetName}/assetFilters/{filterName}",
  httpMethod: "DELETE",
  responses: {
    200: {},
    204: {},
    default: {
      bodyMapper: Mappers.ErrorResponse
    }
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.accountName,
    Parameters.filterName,
    Parameters.assetName
  ],
  headerParameters: [Parameters.accept],
  serializer
};
const updateOperationSpec: coreClient.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Media/mediaServices/{accountName}/assets/{assetName}/assetFilters/{filterName}",
  httpMethod: "PATCH",
  responses: {
    200: {
      bodyMapper: Mappers.AssetFilter
    },
    default: {
      bodyMapper: Mappers.ErrorResponse
    }
  },
  requestBody: Parameters.parameters9,
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.accountName,
    Parameters.filterName,
    Parameters.assetName
  ],
  headerParameters: [Parameters.accept, Parameters.contentType],
  mediaType: "json",
  serializer
};
const listNextOperationSpec: coreClient.OperationSpec = {
  path: "{nextLink}",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.AssetFilterCollection
    },
    default: {
      bodyMapper: Mappers.ErrorResponse
    }
  },
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.resourceGroupName,
    Parameters.accountName,
    Parameters.nextLink,
    Parameters.assetName
  ],
  headerParameters: [Parameters.accept],
  serializer
};
