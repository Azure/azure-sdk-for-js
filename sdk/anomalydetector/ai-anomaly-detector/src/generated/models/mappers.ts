/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */

import * as coreHttp from "@azure/core-http";

export const DetectRequest: coreHttp.CompositeMapper = {
  type: {
    name: "Composite",
    className: "DetectRequest",
    modelProperties: {
      series: {
        serializedName: "series",
        required: true,
        type: {
          name: "Sequence",
          element: { type: { name: "Composite", className: "TimeSeriesPoint" } }
        }
      },
      granularity: {
        serializedName: "granularity",
        required: true,
        type: {
          name: "Enum",
          allowedValues: [
            "yearly",
            "monthly",
            "weekly",
            "daily",
            "hourly",
            "minutely",
            "secondly"
          ]
        }
      },
      customInterval: {
        serializedName: "customInterval",
        type: {
          name: "Number"
        }
      },
      period: {
        serializedName: "period",
        type: {
          name: "Number"
        }
      },
      maxAnomalyRatio: {
        serializedName: "maxAnomalyRatio",
        type: {
          name: "Number"
        }
      },
      sensitivity: {
        serializedName: "sensitivity",
        type: {
          name: "Number"
        }
      }
    }
  }
};

export const TimeSeriesPoint: coreHttp.CompositeMapper = {
  type: {
    name: "Composite",
    className: "TimeSeriesPoint",
    modelProperties: {
      timestamp: {
        serializedName: "timestamp",
        required: true,
        type: {
          name: "DateTime"
        }
      },
      value: {
        serializedName: "value",
        required: true,
        type: {
          name: "Number"
        }
      }
    }
  }
};

export const DetectEntireResponse: coreHttp.CompositeMapper = {
  type: {
    name: "Composite",
    className: "DetectEntireResponse",
    modelProperties: {
      period: {
        serializedName: "period",
        required: true,
        type: {
          name: "Number"
        }
      },
      expectedValues: {
        serializedName: "expectedValues",
        required: true,
        type: {
          name: "Sequence",
          element: { type: { name: "Number" } }
        }
      },
      upperMargins: {
        serializedName: "upperMargins",
        required: true,
        type: {
          name: "Sequence",
          element: { type: { name: "Number" } }
        }
      },
      lowerMargins: {
        serializedName: "lowerMargins",
        required: true,
        type: {
          name: "Sequence",
          element: { type: { name: "Number" } }
        }
      },
      isAnomaly: {
        serializedName: "isAnomaly",
        required: true,
        type: {
          name: "Sequence",
          element: { type: { name: "Boolean" } }
        }
      },
      isNegativeAnomaly: {
        serializedName: "isNegativeAnomaly",
        required: true,
        type: {
          name: "Sequence",
          element: { type: { name: "Boolean" } }
        }
      },
      isPositiveAnomaly: {
        serializedName: "isPositiveAnomaly",
        required: true,
        type: {
          name: "Sequence",
          element: { type: { name: "Boolean" } }
        }
      }
    }
  }
};

export const AnomalyDetectorError: coreHttp.CompositeMapper = {
  type: {
    name: "Composite",
    className: "AnomalyDetectorError",
    modelProperties: {
      code: {
        serializedName: "code",
        type: {
          name: "String"
        }
      },
      message: {
        serializedName: "message",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const DetectLastPointResponse: coreHttp.CompositeMapper = {
  type: {
    name: "Composite",
    className: "DetectLastPointResponse",
    modelProperties: {
      period: {
        serializedName: "period",
        required: true,
        type: {
          name: "Number"
        }
      },
      suggestedWindow: {
        serializedName: "suggestedWindow",
        required: true,
        type: {
          name: "Number"
        }
      },
      expectedValue: {
        serializedName: "expectedValue",
        required: true,
        type: {
          name: "Number"
        }
      },
      upperMargin: {
        serializedName: "upperMargin",
        required: true,
        type: {
          name: "Number"
        }
      },
      lowerMargin: {
        serializedName: "lowerMargin",
        required: true,
        type: {
          name: "Number"
        }
      },
      isAnomaly: {
        serializedName: "isAnomaly",
        required: true,
        type: {
          name: "Boolean"
        }
      },
      isNegativeAnomaly: {
        serializedName: "isNegativeAnomaly",
        required: true,
        type: {
          name: "Boolean"
        }
      },
      isPositiveAnomaly: {
        serializedName: "isPositiveAnomaly",
        required: true,
        type: {
          name: "Boolean"
        }
      }
    }
  }
};

export const DetectChangePointRequest: coreHttp.CompositeMapper = {
  type: {
    name: "Composite",
    className: "DetectChangePointRequest",
    modelProperties: {
      series: {
        serializedName: "series",
        required: true,
        type: {
          name: "Sequence",
          element: { type: { name: "Composite", className: "TimeSeriesPoint" } }
        }
      },
      granularity: {
        serializedName: "granularity",
        required: true,
        type: {
          name: "Enum",
          allowedValues: [
            "yearly",
            "monthly",
            "weekly",
            "daily",
            "hourly",
            "minutely",
            "secondly"
          ]
        }
      },
      customInterval: {
        serializedName: "customInterval",
        type: {
          name: "Number"
        }
      },
      period: {
        serializedName: "period",
        type: {
          name: "Number"
        }
      },
      stableTrendWindow: {
        serializedName: "stableTrendWindow",
        type: {
          name: "Number"
        }
      },
      threshold: {
        serializedName: "threshold",
        type: {
          name: "Number"
        }
      }
    }
  }
};

export const DetectChangePointResponse: coreHttp.CompositeMapper = {
  type: {
    name: "Composite",
    className: "DetectChangePointResponse",
    modelProperties: {
      period: {
        serializedName: "period",
        required: true,
        type: {
          name: "Number"
        }
      },
      isChangePoint: {
        serializedName: "isChangePoint",
        required: true,
        type: {
          name: "Sequence",
          element: { type: { name: "Boolean" } }
        }
      },
      confidenceScores: {
        serializedName: "confidenceScores",
        required: true,
        type: {
          name: "Sequence",
          element: { type: { name: "Number" } }
        }
      }
    }
  }
};
