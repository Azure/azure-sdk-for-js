/*
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is
 * regenerated.
 */

import * as msRest from "@azure/ms-rest-js";
import * as Models from "./models";
import * as Mappers from "./models/mappers";
import * as Parameters from "./models/parameters";
import * as operations from "./operations";
import { WebSiteManagementClientContext } from "./webSiteManagementClientContext";


class WebSiteManagementClient extends WebSiteManagementClientContext {
  // Operation groups
  appServiceCertificateOrders: operations.AppServiceCertificateOrders;
  certificateRegistrationProvider: operations.CertificateRegistrationProvider;
  domains: operations.Domains;
  topLevelDomains: operations.TopLevelDomains;
  domainRegistrationProvider: operations.DomainRegistrationProvider;
  certificates: operations.Certificates;
  deletedWebApps: operations.DeletedWebApps;
  diagnostics: operations.Diagnostics;
  provider: operations.Provider;
  recommendations: operations.Recommendations;
  webApps: operations.WebApps;
  staticSites: operations.StaticSites;
  appServiceEnvironments: operations.AppServiceEnvironments;
  appServicePlans: operations.AppServicePlans;
  resourceHealthMetadata: operations.ResourceHealthMetadataOperations;

  /**
   * Initializes a new instance of the WebSiteManagementClient class.
   * @param credentials Credentials needed for the client to connect to Azure.
   * @param subscriptionId Your Azure subscription ID. This is a GUID-formatted string (e.g.
   * 00000000-0000-0000-0000-000000000000).
   * @param [options] The parameter options
   */
  constructor(credentials: msRest.ServiceClientCredentials, subscriptionId: string, options?: Models.WebSiteManagementClientOptions) {
    super(credentials, subscriptionId, options);
    this.appServiceCertificateOrders = new operations.AppServiceCertificateOrders(this);
    this.certificateRegistrationProvider = new operations.CertificateRegistrationProvider(this);
    this.domains = new operations.Domains(this);
    this.topLevelDomains = new operations.TopLevelDomains(this);
    this.domainRegistrationProvider = new operations.DomainRegistrationProvider(this);
    this.certificates = new operations.Certificates(this);
    this.deletedWebApps = new operations.DeletedWebApps(this);
    this.diagnostics = new operations.Diagnostics(this);
    this.provider = new operations.Provider(this);
    this.recommendations = new operations.Recommendations(this);
    this.webApps = new operations.WebApps(this);
    this.staticSites = new operations.StaticSites(this);
    this.appServiceEnvironments = new operations.AppServiceEnvironments(this);
    this.appServicePlans = new operations.AppServicePlans(this);
    this.resourceHealthMetadata = new operations.ResourceHealthMetadataOperations(this);
  }

  /**
   * Description for Gets publishing user
   * @summary Gets publishing user
   * @param [options] The optional parameters
   * @returns Promise<Models.GetPublishingUserResponse>
   */
  getPublishingUser(options?: msRest.RequestOptionsBase): Promise<Models.GetPublishingUserResponse>;
  /**
   * @param callback The callback
   */
  getPublishingUser(callback: msRest.ServiceCallback<Models.User>): void;
  /**
   * @param options The optional parameters
   * @param callback The callback
   */
  getPublishingUser(options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.User>): void;
  getPublishingUser(options?: msRest.RequestOptionsBase | msRest.ServiceCallback<Models.User>, callback?: msRest.ServiceCallback<Models.User>): Promise<Models.GetPublishingUserResponse> {
    return this.sendOperationRequest(
      {
        options
      },
      getPublishingUserOperationSpec,
      callback) as Promise<Models.GetPublishingUserResponse>;
  }

  /**
   * Description for Updates publishing user
   * @summary Updates publishing user
   * @param userDetails Details of publishing user
   * @param [options] The optional parameters
   * @returns Promise<Models.UpdatePublishingUserResponse>
   */
  updatePublishingUser(userDetails: Models.User, options?: msRest.RequestOptionsBase): Promise<Models.UpdatePublishingUserResponse>;
  /**
   * @param userDetails Details of publishing user
   * @param callback The callback
   */
  updatePublishingUser(userDetails: Models.User, callback: msRest.ServiceCallback<Models.User>): void;
  /**
   * @param userDetails Details of publishing user
   * @param options The optional parameters
   * @param callback The callback
   */
  updatePublishingUser(userDetails: Models.User, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.User>): void;
  updatePublishingUser(userDetails: Models.User, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<Models.User>, callback?: msRest.ServiceCallback<Models.User>): Promise<Models.UpdatePublishingUserResponse> {
    return this.sendOperationRequest(
      {
        userDetails,
        options
      },
      updatePublishingUserOperationSpec,
      callback) as Promise<Models.UpdatePublishingUserResponse>;
  }

  /**
   * Description for Gets the source controls available for Azure websites.
   * @summary Gets the source controls available for Azure websites.
   * @param [options] The optional parameters
   * @returns Promise<Models.ListSourceControlsResponse>
   */
  listSourceControls(options?: msRest.RequestOptionsBase): Promise<Models.ListSourceControlsResponse>;
  /**
   * @param callback The callback
   */
  listSourceControls(callback: msRest.ServiceCallback<Models.SourceControlCollection>): void;
  /**
   * @param options The optional parameters
   * @param callback The callback
   */
  listSourceControls(options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.SourceControlCollection>): void;
  listSourceControls(options?: msRest.RequestOptionsBase | msRest.ServiceCallback<Models.SourceControlCollection>, callback?: msRest.ServiceCallback<Models.SourceControlCollection>): Promise<Models.ListSourceControlsResponse> {
    return this.sendOperationRequest(
      {
        options
      },
      listSourceControlsOperationSpec,
      callback) as Promise<Models.ListSourceControlsResponse>;
  }

  /**
   * Description for Gets source control token
   * @summary Gets source control token
   * @param sourceControlType Type of source control
   * @param [options] The optional parameters
   * @returns Promise<Models.GetSourceControlResponse>
   */
  getSourceControl(sourceControlType: string, options?: msRest.RequestOptionsBase): Promise<Models.GetSourceControlResponse>;
  /**
   * @param sourceControlType Type of source control
   * @param callback The callback
   */
  getSourceControl(sourceControlType: string, callback: msRest.ServiceCallback<Models.SourceControl>): void;
  /**
   * @param sourceControlType Type of source control
   * @param options The optional parameters
   * @param callback The callback
   */
  getSourceControl(sourceControlType: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.SourceControl>): void;
  getSourceControl(sourceControlType: string, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<Models.SourceControl>, callback?: msRest.ServiceCallback<Models.SourceControl>): Promise<Models.GetSourceControlResponse> {
    return this.sendOperationRequest(
      {
        sourceControlType,
        options
      },
      getSourceControlOperationSpec,
      callback) as Promise<Models.GetSourceControlResponse>;
  }

  /**
   * Description for Updates source control token
   * @summary Updates source control token
   * @param sourceControlType Type of source control
   * @param requestMessage Source control token information
   * @param [options] The optional parameters
   * @returns Promise<Models.UpdateSourceControlResponse>
   */
  updateSourceControl(sourceControlType: string, requestMessage: Models.SourceControl, options?: msRest.RequestOptionsBase): Promise<Models.UpdateSourceControlResponse>;
  /**
   * @param sourceControlType Type of source control
   * @param requestMessage Source control token information
   * @param callback The callback
   */
  updateSourceControl(sourceControlType: string, requestMessage: Models.SourceControl, callback: msRest.ServiceCallback<Models.SourceControl>): void;
  /**
   * @param sourceControlType Type of source control
   * @param requestMessage Source control token information
   * @param options The optional parameters
   * @param callback The callback
   */
  updateSourceControl(sourceControlType: string, requestMessage: Models.SourceControl, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.SourceControl>): void;
  updateSourceControl(sourceControlType: string, requestMessage: Models.SourceControl, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<Models.SourceControl>, callback?: msRest.ServiceCallback<Models.SourceControl>): Promise<Models.UpdateSourceControlResponse> {
    return this.sendOperationRequest(
      {
        sourceControlType,
        requestMessage,
        options
      },
      updateSourceControlOperationSpec,
      callback) as Promise<Models.UpdateSourceControlResponse>;
  }

  /**
   * Description for Gets a list of meters for a given location.
   * @summary Gets a list of meters for a given location.
   * @param [options] The optional parameters
   * @returns Promise<Models.ListBillingMetersResponse>
   */
  listBillingMeters(options?: Models.WebSiteManagementClientListBillingMetersOptionalParams): Promise<Models.ListBillingMetersResponse>;
  /**
   * @param callback The callback
   */
  listBillingMeters(callback: msRest.ServiceCallback<Models.BillingMeterCollection>): void;
  /**
   * @param options The optional parameters
   * @param callback The callback
   */
  listBillingMeters(options: Models.WebSiteManagementClientListBillingMetersOptionalParams, callback: msRest.ServiceCallback<Models.BillingMeterCollection>): void;
  listBillingMeters(options?: Models.WebSiteManagementClientListBillingMetersOptionalParams | msRest.ServiceCallback<Models.BillingMeterCollection>, callback?: msRest.ServiceCallback<Models.BillingMeterCollection>): Promise<Models.ListBillingMetersResponse> {
    return this.sendOperationRequest(
      {
        options
      },
      listBillingMetersOperationSpec,
      callback) as Promise<Models.ListBillingMetersResponse>;
  }

  /**
   * Description for Check if a resource name is available.
   * @summary Check if a resource name is available.
   * @param name Resource name to verify.
   * @param type Resource type used for verification. Possible values include: 'Site', 'Slot',
   * 'HostingEnvironment', 'PublishingUser', 'Microsoft.Web/sites', 'Microsoft.Web/sites/slots',
   * 'Microsoft.Web/hostingEnvironments', 'Microsoft.Web/publishingUsers'
   * @param [options] The optional parameters
   * @returns Promise<Models.CheckNameAvailabilityResponse>
   */
  checkNameAvailability(name: string, type: Models.CheckNameResourceTypes, options?: Models.WebSiteManagementClientCheckNameAvailabilityOptionalParams): Promise<Models.CheckNameAvailabilityResponse>;
  /**
   * @param name Resource name to verify.
   * @param type Resource type used for verification. Possible values include: 'Site', 'Slot',
   * 'HostingEnvironment', 'PublishingUser', 'Microsoft.Web/sites', 'Microsoft.Web/sites/slots',
   * 'Microsoft.Web/hostingEnvironments', 'Microsoft.Web/publishingUsers'
   * @param callback The callback
   */
  checkNameAvailability(name: string, type: Models.CheckNameResourceTypes, callback: msRest.ServiceCallback<Models.ResourceNameAvailability>): void;
  /**
   * @param name Resource name to verify.
   * @param type Resource type used for verification. Possible values include: 'Site', 'Slot',
   * 'HostingEnvironment', 'PublishingUser', 'Microsoft.Web/sites', 'Microsoft.Web/sites/slots',
   * 'Microsoft.Web/hostingEnvironments', 'Microsoft.Web/publishingUsers'
   * @param options The optional parameters
   * @param callback The callback
   */
  checkNameAvailability(name: string, type: Models.CheckNameResourceTypes, options: Models.WebSiteManagementClientCheckNameAvailabilityOptionalParams, callback: msRest.ServiceCallback<Models.ResourceNameAvailability>): void;
  checkNameAvailability(name: string, type: Models.CheckNameResourceTypes, options?: Models.WebSiteManagementClientCheckNameAvailabilityOptionalParams | msRest.ServiceCallback<Models.ResourceNameAvailability>, callback?: msRest.ServiceCallback<Models.ResourceNameAvailability>): Promise<Models.CheckNameAvailabilityResponse> {
    return this.sendOperationRequest(
      {
        name,
        type,
        options
      },
      checkNameAvailabilityOperationSpec,
      callback) as Promise<Models.CheckNameAvailabilityResponse>;
  }

  /**
   * Description for Gets list of available geo regions plus ministamps
   * @summary Gets list of available geo regions plus ministamps
   * @param [options] The optional parameters
   * @returns Promise<Models.GetSubscriptionDeploymentLocationsResponse>
   */
  getSubscriptionDeploymentLocations(options?: msRest.RequestOptionsBase): Promise<Models.GetSubscriptionDeploymentLocationsResponse>;
  /**
   * @param callback The callback
   */
  getSubscriptionDeploymentLocations(callback: msRest.ServiceCallback<Models.DeploymentLocations>): void;
  /**
   * @param options The optional parameters
   * @param callback The callback
   */
  getSubscriptionDeploymentLocations(options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.DeploymentLocations>): void;
  getSubscriptionDeploymentLocations(options?: msRest.RequestOptionsBase | msRest.ServiceCallback<Models.DeploymentLocations>, callback?: msRest.ServiceCallback<Models.DeploymentLocations>): Promise<Models.GetSubscriptionDeploymentLocationsResponse> {
    return this.sendOperationRequest(
      {
        options
      },
      getSubscriptionDeploymentLocationsOperationSpec,
      callback) as Promise<Models.GetSubscriptionDeploymentLocationsResponse>;
  }

  /**
   * Description for Get a list of available geographical regions.
   * @summary Get a list of available geographical regions.
   * @param [options] The optional parameters
   * @returns Promise<Models.ListGeoRegionsResponse>
   */
  listGeoRegions(options?: Models.WebSiteManagementClientListGeoRegionsOptionalParams): Promise<Models.ListGeoRegionsResponse>;
  /**
   * @param callback The callback
   */
  listGeoRegions(callback: msRest.ServiceCallback<Models.GeoRegionCollection>): void;
  /**
   * @param options The optional parameters
   * @param callback The callback
   */
  listGeoRegions(options: Models.WebSiteManagementClientListGeoRegionsOptionalParams, callback: msRest.ServiceCallback<Models.GeoRegionCollection>): void;
  listGeoRegions(options?: Models.WebSiteManagementClientListGeoRegionsOptionalParams | msRest.ServiceCallback<Models.GeoRegionCollection>, callback?: msRest.ServiceCallback<Models.GeoRegionCollection>): Promise<Models.ListGeoRegionsResponse> {
    return this.sendOperationRequest(
      {
        options
      },
      listGeoRegionsOperationSpec,
      callback) as Promise<Models.ListGeoRegionsResponse>;
  }

  /**
   * Description for List all apps that are assigned to a hostname.
   * @summary List all apps that are assigned to a hostname.
   * @param [options] The optional parameters
   * @returns Promise<Models.ListSiteIdentifiersAssignedToHostNameResponse>
   */
  listSiteIdentifiersAssignedToHostName(options?: Models.WebSiteManagementClientListSiteIdentifiersAssignedToHostNameOptionalParams): Promise<Models.ListSiteIdentifiersAssignedToHostNameResponse>;
  /**
   * @param callback The callback
   */
  listSiteIdentifiersAssignedToHostName(callback: msRest.ServiceCallback<Models.IdentifierCollection>): void;
  /**
   * @param options The optional parameters
   * @param callback The callback
   */
  listSiteIdentifiersAssignedToHostName(options: Models.WebSiteManagementClientListSiteIdentifiersAssignedToHostNameOptionalParams, callback: msRest.ServiceCallback<Models.IdentifierCollection>): void;
  listSiteIdentifiersAssignedToHostName(options?: Models.WebSiteManagementClientListSiteIdentifiersAssignedToHostNameOptionalParams | msRest.ServiceCallback<Models.IdentifierCollection>, callback?: msRest.ServiceCallback<Models.IdentifierCollection>): Promise<Models.ListSiteIdentifiersAssignedToHostNameResponse> {
    return this.sendOperationRequest(
      {
        options
      },
      listSiteIdentifiersAssignedToHostNameOperationSpec,
      callback) as Promise<Models.ListSiteIdentifiersAssignedToHostNameResponse>;
  }

  /**
   * Description for List all premier add-on offers.
   * @summary List all premier add-on offers.
   * @param [options] The optional parameters
   * @returns Promise<Models.ListPremierAddOnOffersResponse>
   */
  listPremierAddOnOffers(options?: msRest.RequestOptionsBase): Promise<Models.ListPremierAddOnOffersResponse>;
  /**
   * @param callback The callback
   */
  listPremierAddOnOffers(callback: msRest.ServiceCallback<Models.PremierAddOnOfferCollection>): void;
  /**
   * @param options The optional parameters
   * @param callback The callback
   */
  listPremierAddOnOffers(options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.PremierAddOnOfferCollection>): void;
  listPremierAddOnOffers(options?: msRest.RequestOptionsBase | msRest.ServiceCallback<Models.PremierAddOnOfferCollection>, callback?: msRest.ServiceCallback<Models.PremierAddOnOfferCollection>): Promise<Models.ListPremierAddOnOffersResponse> {
    return this.sendOperationRequest(
      {
        options
      },
      listPremierAddOnOffersOperationSpec,
      callback) as Promise<Models.ListPremierAddOnOffersResponse>;
  }

  /**
   * Description for List all SKUs.
   * @summary List all SKUs.
   * @param [options] The optional parameters
   * @returns Promise<Models.ListSkusResponse>
   */
  listSkus(options?: msRest.RequestOptionsBase): Promise<Models.ListSkusResponse>;
  /**
   * @param callback The callback
   */
  listSkus(callback: msRest.ServiceCallback<Models.SkuInfos>): void;
  /**
   * @param options The optional parameters
   * @param callback The callback
   */
  listSkus(options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.SkuInfos>): void;
  listSkus(options?: msRest.RequestOptionsBase | msRest.ServiceCallback<Models.SkuInfos>, callback?: msRest.ServiceCallback<Models.SkuInfos>): Promise<Models.ListSkusResponse> {
    return this.sendOperationRequest(
      {
        options
      },
      listSkusOperationSpec,
      callback) as Promise<Models.ListSkusResponse>;
  }

  /**
   * Description for Verifies if this VNET is compatible with an App Service Environment by analyzing
   * the Network Security Group rules.
   * @summary Verifies if this VNET is compatible with an App Service Environment by analyzing the
   * Network Security Group rules.
   * @param parameters VNET information
   * @param [options] The optional parameters
   * @returns Promise<Models.VerifyHostingEnvironmentVnetResponse>
   */
  verifyHostingEnvironmentVnet(parameters: Models.VnetParameters, options?: msRest.RequestOptionsBase): Promise<Models.VerifyHostingEnvironmentVnetResponse>;
  /**
   * @param parameters VNET information
   * @param callback The callback
   */
  verifyHostingEnvironmentVnet(parameters: Models.VnetParameters, callback: msRest.ServiceCallback<Models.VnetValidationFailureDetails>): void;
  /**
   * @param parameters VNET information
   * @param options The optional parameters
   * @param callback The callback
   */
  verifyHostingEnvironmentVnet(parameters: Models.VnetParameters, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.VnetValidationFailureDetails>): void;
  verifyHostingEnvironmentVnet(parameters: Models.VnetParameters, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<Models.VnetValidationFailureDetails>, callback?: msRest.ServiceCallback<Models.VnetValidationFailureDetails>): Promise<Models.VerifyHostingEnvironmentVnetResponse> {
    return this.sendOperationRequest(
      {
        parameters,
        options
      },
      verifyHostingEnvironmentVnetOperationSpec,
      callback) as Promise<Models.VerifyHostingEnvironmentVnetResponse>;
  }

  /**
   * Description for Move resources between resource groups.
   * @summary Move resources between resource groups.
   * @param resourceGroupName Name of the resource group to which the resource belongs.
   * @param moveResourceEnvelope Object that represents the resource to move.
   * @param [options] The optional parameters
   * @returns Promise<msRest.RestResponse>
   */
  move(resourceGroupName: string, moveResourceEnvelope: Models.CsmMoveResourceEnvelope, options?: msRest.RequestOptionsBase): Promise<msRest.RestResponse>;
  /**
   * @param resourceGroupName Name of the resource group to which the resource belongs.
   * @param moveResourceEnvelope Object that represents the resource to move.
   * @param callback The callback
   */
  move(resourceGroupName: string, moveResourceEnvelope: Models.CsmMoveResourceEnvelope, callback: msRest.ServiceCallback<void>): void;
  /**
   * @param resourceGroupName Name of the resource group to which the resource belongs.
   * @param moveResourceEnvelope Object that represents the resource to move.
   * @param options The optional parameters
   * @param callback The callback
   */
  move(resourceGroupName: string, moveResourceEnvelope: Models.CsmMoveResourceEnvelope, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<void>): void;
  move(resourceGroupName: string, moveResourceEnvelope: Models.CsmMoveResourceEnvelope, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<void>, callback?: msRest.ServiceCallback<void>): Promise<msRest.RestResponse> {
    return this.sendOperationRequest(
      {
        resourceGroupName,
        moveResourceEnvelope,
        options
      },
      moveOperationSpec,
      callback);
  }

  /**
   * Description for Validate if a resource can be created.
   * @summary Validate if a resource can be created.
   * @param resourceGroupName Name of the resource group to which the resource belongs.
   * @param validateRequest Request with the resources to validate.
   * @param [options] The optional parameters
   * @returns Promise<Models.ValidateResponse2>
   */
  validate(resourceGroupName: string, validateRequest: Models.ValidateRequest, options?: msRest.RequestOptionsBase): Promise<Models.ValidateResponse2>;
  /**
   * @param resourceGroupName Name of the resource group to which the resource belongs.
   * @param validateRequest Request with the resources to validate.
   * @param callback The callback
   */
  validate(resourceGroupName: string, validateRequest: Models.ValidateRequest, callback: msRest.ServiceCallback<Models.ValidateResponse>): void;
  /**
   * @param resourceGroupName Name of the resource group to which the resource belongs.
   * @param validateRequest Request with the resources to validate.
   * @param options The optional parameters
   * @param callback The callback
   */
  validate(resourceGroupName: string, validateRequest: Models.ValidateRequest, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.ValidateResponse>): void;
  validate(resourceGroupName: string, validateRequest: Models.ValidateRequest, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<Models.ValidateResponse>, callback?: msRest.ServiceCallback<Models.ValidateResponse>): Promise<Models.ValidateResponse2> {
    return this.sendOperationRequest(
      {
        resourceGroupName,
        validateRequest,
        options
      },
      validateOperationSpec,
      callback) as Promise<Models.ValidateResponse2>;
  }

  /**
   * Description for Validate whether a resource can be moved.
   * @summary Validate whether a resource can be moved.
   * @param resourceGroupName Name of the resource group to which the resource belongs.
   * @param moveResourceEnvelope Object that represents the resource to move.
   * @param [options] The optional parameters
   * @returns Promise<msRest.RestResponse>
   */
  validateMove(resourceGroupName: string, moveResourceEnvelope: Models.CsmMoveResourceEnvelope, options?: msRest.RequestOptionsBase): Promise<msRest.RestResponse>;
  /**
   * @param resourceGroupName Name of the resource group to which the resource belongs.
   * @param moveResourceEnvelope Object that represents the resource to move.
   * @param callback The callback
   */
  validateMove(resourceGroupName: string, moveResourceEnvelope: Models.CsmMoveResourceEnvelope, callback: msRest.ServiceCallback<void>): void;
  /**
   * @param resourceGroupName Name of the resource group to which the resource belongs.
   * @param moveResourceEnvelope Object that represents the resource to move.
   * @param options The optional parameters
   * @param callback The callback
   */
  validateMove(resourceGroupName: string, moveResourceEnvelope: Models.CsmMoveResourceEnvelope, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<void>): void;
  validateMove(resourceGroupName: string, moveResourceEnvelope: Models.CsmMoveResourceEnvelope, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<void>, callback?: msRest.ServiceCallback<void>): Promise<msRest.RestResponse> {
    return this.sendOperationRequest(
      {
        resourceGroupName,
        moveResourceEnvelope,
        options
      },
      validateMoveOperationSpec,
      callback);
  }

  /**
   * Description for Gets the source controls available for Azure websites.
   * @summary Gets the source controls available for Azure websites.
   * @param nextPageLink The NextLink from the previous successful call to List operation.
   * @param [options] The optional parameters
   * @returns Promise<Models.ListSourceControlsNextResponse>
   */
  listSourceControlsNext(nextPageLink: string, options?: msRest.RequestOptionsBase): Promise<Models.ListSourceControlsNextResponse>;
  /**
   * @param nextPageLink The NextLink from the previous successful call to List operation.
   * @param callback The callback
   */
  listSourceControlsNext(nextPageLink: string, callback: msRest.ServiceCallback<Models.SourceControlCollection>): void;
  /**
   * @param nextPageLink The NextLink from the previous successful call to List operation.
   * @param options The optional parameters
   * @param callback The callback
   */
  listSourceControlsNext(nextPageLink: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.SourceControlCollection>): void;
  listSourceControlsNext(nextPageLink: string, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<Models.SourceControlCollection>, callback?: msRest.ServiceCallback<Models.SourceControlCollection>): Promise<Models.ListSourceControlsNextResponse> {
    return this.sendOperationRequest(
      {
        nextPageLink,
        options
      },
      listSourceControlsNextOperationSpec,
      callback) as Promise<Models.ListSourceControlsNextResponse>;
  }

  /**
   * Description for Gets a list of meters for a given location.
   * @summary Gets a list of meters for a given location.
   * @param nextPageLink The NextLink from the previous successful call to List operation.
   * @param [options] The optional parameters
   * @returns Promise<Models.ListBillingMetersNextResponse>
   */
  listBillingMetersNext(nextPageLink: string, options?: msRest.RequestOptionsBase): Promise<Models.ListBillingMetersNextResponse>;
  /**
   * @param nextPageLink The NextLink from the previous successful call to List operation.
   * @param callback The callback
   */
  listBillingMetersNext(nextPageLink: string, callback: msRest.ServiceCallback<Models.BillingMeterCollection>): void;
  /**
   * @param nextPageLink The NextLink from the previous successful call to List operation.
   * @param options The optional parameters
   * @param callback The callback
   */
  listBillingMetersNext(nextPageLink: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.BillingMeterCollection>): void;
  listBillingMetersNext(nextPageLink: string, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<Models.BillingMeterCollection>, callback?: msRest.ServiceCallback<Models.BillingMeterCollection>): Promise<Models.ListBillingMetersNextResponse> {
    return this.sendOperationRequest(
      {
        nextPageLink,
        options
      },
      listBillingMetersNextOperationSpec,
      callback) as Promise<Models.ListBillingMetersNextResponse>;
  }

  /**
   * Description for Get a list of available geographical regions.
   * @summary Get a list of available geographical regions.
   * @param nextPageLink The NextLink from the previous successful call to List operation.
   * @param [options] The optional parameters
   * @returns Promise<Models.ListGeoRegionsNextResponse>
   */
  listGeoRegionsNext(nextPageLink: string, options?: msRest.RequestOptionsBase): Promise<Models.ListGeoRegionsNextResponse>;
  /**
   * @param nextPageLink The NextLink from the previous successful call to List operation.
   * @param callback The callback
   */
  listGeoRegionsNext(nextPageLink: string, callback: msRest.ServiceCallback<Models.GeoRegionCollection>): void;
  /**
   * @param nextPageLink The NextLink from the previous successful call to List operation.
   * @param options The optional parameters
   * @param callback The callback
   */
  listGeoRegionsNext(nextPageLink: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.GeoRegionCollection>): void;
  listGeoRegionsNext(nextPageLink: string, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<Models.GeoRegionCollection>, callback?: msRest.ServiceCallback<Models.GeoRegionCollection>): Promise<Models.ListGeoRegionsNextResponse> {
    return this.sendOperationRequest(
      {
        nextPageLink,
        options
      },
      listGeoRegionsNextOperationSpec,
      callback) as Promise<Models.ListGeoRegionsNextResponse>;
  }

  /**
   * Description for List all apps that are assigned to a hostname.
   * @summary List all apps that are assigned to a hostname.
   * @param nextPageLink The NextLink from the previous successful call to List operation.
   * @param [options] The optional parameters
   * @returns Promise<Models.ListSiteIdentifiersAssignedToHostNameNextResponse>
   */
  listSiteIdentifiersAssignedToHostNameNext(nextPageLink: string, options?: msRest.RequestOptionsBase): Promise<Models.ListSiteIdentifiersAssignedToHostNameNextResponse>;
  /**
   * @param nextPageLink The NextLink from the previous successful call to List operation.
   * @param callback The callback
   */
  listSiteIdentifiersAssignedToHostNameNext(nextPageLink: string, callback: msRest.ServiceCallback<Models.IdentifierCollection>): void;
  /**
   * @param nextPageLink The NextLink from the previous successful call to List operation.
   * @param options The optional parameters
   * @param callback The callback
   */
  listSiteIdentifiersAssignedToHostNameNext(nextPageLink: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.IdentifierCollection>): void;
  listSiteIdentifiersAssignedToHostNameNext(nextPageLink: string, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<Models.IdentifierCollection>, callback?: msRest.ServiceCallback<Models.IdentifierCollection>): Promise<Models.ListSiteIdentifiersAssignedToHostNameNextResponse> {
    return this.sendOperationRequest(
      {
        nextPageLink,
        options
      },
      listSiteIdentifiersAssignedToHostNameNextOperationSpec,
      callback) as Promise<Models.ListSiteIdentifiersAssignedToHostNameNextResponse>;
  }

  /**
   * Description for List all premier add-on offers.
   * @summary List all premier add-on offers.
   * @param nextPageLink The NextLink from the previous successful call to List operation.
   * @param [options] The optional parameters
   * @returns Promise<Models.ListPremierAddOnOffersNextResponse>
   */
  listPremierAddOnOffersNext(nextPageLink: string, options?: msRest.RequestOptionsBase): Promise<Models.ListPremierAddOnOffersNextResponse>;
  /**
   * @param nextPageLink The NextLink from the previous successful call to List operation.
   * @param callback The callback
   */
  listPremierAddOnOffersNext(nextPageLink: string, callback: msRest.ServiceCallback<Models.PremierAddOnOfferCollection>): void;
  /**
   * @param nextPageLink The NextLink from the previous successful call to List operation.
   * @param options The optional parameters
   * @param callback The callback
   */
  listPremierAddOnOffersNext(nextPageLink: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.PremierAddOnOfferCollection>): void;
  listPremierAddOnOffersNext(nextPageLink: string, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<Models.PremierAddOnOfferCollection>, callback?: msRest.ServiceCallback<Models.PremierAddOnOfferCollection>): Promise<Models.ListPremierAddOnOffersNextResponse> {
    return this.sendOperationRequest(
      {
        nextPageLink,
        options
      },
      listPremierAddOnOffersNextOperationSpec,
      callback) as Promise<Models.ListPremierAddOnOffersNextResponse>;
  }
}

// Operation Specifications
const serializer = new msRest.Serializer(Mappers);
const getPublishingUserOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "providers/Microsoft.Web/publishingUsers/web",
  queryParameters: [
    Parameters.apiVersion
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    200: {
      bodyMapper: Mappers.User
    },
    default: {
      bodyMapper: Mappers.DefaultErrorResponse
    }
  },
  serializer
};

const updatePublishingUserOperationSpec: msRest.OperationSpec = {
  httpMethod: "PUT",
  path: "providers/Microsoft.Web/publishingUsers/web",
  queryParameters: [
    Parameters.apiVersion
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  requestBody: {
    parameterPath: "userDetails",
    mapper: {
      ...Mappers.User,
      required: true
    }
  },
  responses: {
    200: {
      bodyMapper: Mappers.User
    },
    default: {
      bodyMapper: Mappers.DefaultErrorResponse
    }
  },
  serializer
};

const listSourceControlsOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "providers/Microsoft.Web/sourcecontrols",
  queryParameters: [
    Parameters.apiVersion
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    200: {
      bodyMapper: Mappers.SourceControlCollection
    },
    default: {
      bodyMapper: Mappers.DefaultErrorResponse
    }
  },
  serializer
};

const getSourceControlOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "providers/Microsoft.Web/sourcecontrols/{sourceControlType}",
  urlParameters: [
    Parameters.sourceControlType
  ],
  queryParameters: [
    Parameters.apiVersion
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    200: {
      bodyMapper: Mappers.SourceControl
    },
    default: {
      bodyMapper: Mappers.DefaultErrorResponse
    }
  },
  serializer
};

const updateSourceControlOperationSpec: msRest.OperationSpec = {
  httpMethod: "PUT",
  path: "providers/Microsoft.Web/sourcecontrols/{sourceControlType}",
  urlParameters: [
    Parameters.sourceControlType
  ],
  queryParameters: [
    Parameters.apiVersion
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  requestBody: {
    parameterPath: "requestMessage",
    mapper: {
      ...Mappers.SourceControl,
      required: true
    }
  },
  responses: {
    200: {
      bodyMapper: Mappers.SourceControl
    },
    default: {
      bodyMapper: Mappers.DefaultErrorResponse
    }
  },
  serializer
};

const listBillingMetersOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "subscriptions/{subscriptionId}/providers/Microsoft.Web/billingMeters",
  urlParameters: [
    Parameters.subscriptionId
  ],
  queryParameters: [
    Parameters.billingLocation,
    Parameters.osType,
    Parameters.apiVersion
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    200: {
      bodyMapper: Mappers.BillingMeterCollection
    },
    default: {
      bodyMapper: Mappers.DefaultErrorResponse
    }
  },
  serializer
};

const checkNameAvailabilityOperationSpec: msRest.OperationSpec = {
  httpMethod: "POST",
  path: "subscriptions/{subscriptionId}/providers/Microsoft.Web/checknameavailability",
  urlParameters: [
    Parameters.subscriptionId
  ],
  queryParameters: [
    Parameters.apiVersion
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  requestBody: {
    parameterPath: {
      name: "name",
      type: "type",
      isFqdn: [
        "options",
        "isFqdn"
      ]
    },
    mapper: {
      ...Mappers.ResourceNameAvailabilityRequest,
      required: true
    }
  },
  responses: {
    200: {
      bodyMapper: Mappers.ResourceNameAvailability
    },
    default: {
      bodyMapper: Mappers.DefaultErrorResponse
    }
  },
  serializer
};

const getSubscriptionDeploymentLocationsOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "subscriptions/{subscriptionId}/providers/Microsoft.Web/deploymentLocations",
  urlParameters: [
    Parameters.subscriptionId
  ],
  queryParameters: [
    Parameters.apiVersion
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    200: {
      bodyMapper: Mappers.DeploymentLocations
    },
    default: {
      bodyMapper: Mappers.DefaultErrorResponse
    }
  },
  serializer
};

const listGeoRegionsOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "subscriptions/{subscriptionId}/providers/Microsoft.Web/geoRegions",
  urlParameters: [
    Parameters.subscriptionId
  ],
  queryParameters: [
    Parameters.sku,
    Parameters.linuxWorkersEnabled,
    Parameters.xenonWorkersEnabled,
    Parameters.linuxDynamicWorkersEnabled,
    Parameters.apiVersion
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    200: {
      bodyMapper: Mappers.GeoRegionCollection
    },
    default: {
      bodyMapper: Mappers.DefaultErrorResponse
    }
  },
  serializer
};

const listSiteIdentifiersAssignedToHostNameOperationSpec: msRest.OperationSpec = {
  httpMethod: "POST",
  path: "subscriptions/{subscriptionId}/providers/Microsoft.Web/listSitesAssignedToHostName",
  urlParameters: [
    Parameters.subscriptionId
  ],
  queryParameters: [
    Parameters.apiVersion
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  requestBody: {
    parameterPath: {
      name: [
        "options",
        "name"
      ]
    },
    mapper: {
      ...Mappers.NameIdentifier,
      required: true
    }
  },
  responses: {
    200: {
      bodyMapper: Mappers.IdentifierCollection
    },
    default: {
      bodyMapper: Mappers.DefaultErrorResponse
    }
  },
  serializer
};

const listPremierAddOnOffersOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "subscriptions/{subscriptionId}/providers/Microsoft.Web/premieraddonoffers",
  urlParameters: [
    Parameters.subscriptionId
  ],
  queryParameters: [
    Parameters.apiVersion
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    200: {
      bodyMapper: Mappers.PremierAddOnOfferCollection
    },
    default: {
      bodyMapper: Mappers.DefaultErrorResponse
    }
  },
  serializer
};

const listSkusOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "subscriptions/{subscriptionId}/providers/Microsoft.Web/skus",
  urlParameters: [
    Parameters.subscriptionId
  ],
  queryParameters: [
    Parameters.apiVersion
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    200: {
      bodyMapper: Mappers.SkuInfos
    },
    default: {
      bodyMapper: Mappers.DefaultErrorResponse
    }
  },
  serializer
};

const verifyHostingEnvironmentVnetOperationSpec: msRest.OperationSpec = {
  httpMethod: "POST",
  path: "subscriptions/{subscriptionId}/providers/Microsoft.Web/verifyHostingEnvironmentVnet",
  urlParameters: [
    Parameters.subscriptionId
  ],
  queryParameters: [
    Parameters.apiVersion
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  requestBody: {
    parameterPath: "parameters",
    mapper: {
      ...Mappers.VnetParameters,
      required: true
    }
  },
  responses: {
    200: {
      bodyMapper: Mappers.VnetValidationFailureDetails
    },
    default: {
      bodyMapper: Mappers.DefaultErrorResponse
    }
  },
  serializer
};

const moveOperationSpec: msRest.OperationSpec = {
  httpMethod: "POST",
  path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/moveResources",
  urlParameters: [
    Parameters.resourceGroupName,
    Parameters.subscriptionId
  ],
  queryParameters: [
    Parameters.apiVersion
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  requestBody: {
    parameterPath: "moveResourceEnvelope",
    mapper: {
      ...Mappers.CsmMoveResourceEnvelope,
      required: true
    }
  },
  responses: {
    204: {},
    default: {
      bodyMapper: Mappers.DefaultErrorResponse
    }
  },
  serializer
};

const validateOperationSpec: msRest.OperationSpec = {
  httpMethod: "POST",
  path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/validate",
  urlParameters: [
    Parameters.resourceGroupName,
    Parameters.subscriptionId
  ],
  queryParameters: [
    Parameters.apiVersion
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  requestBody: {
    parameterPath: "validateRequest",
    mapper: {
      ...Mappers.ValidateRequest,
      required: true
    }
  },
  responses: {
    200: {
      bodyMapper: Mappers.ValidateResponse
    },
    default: {
      bodyMapper: Mappers.DefaultErrorResponse
    }
  },
  serializer
};

const validateMoveOperationSpec: msRest.OperationSpec = {
  httpMethod: "POST",
  path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/validateMoveResources",
  urlParameters: [
    Parameters.resourceGroupName,
    Parameters.subscriptionId
  ],
  queryParameters: [
    Parameters.apiVersion
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  requestBody: {
    parameterPath: "moveResourceEnvelope",
    mapper: {
      ...Mappers.CsmMoveResourceEnvelope,
      required: true
    }
  },
  responses: {
    204: {},
    default: {
      bodyMapper: Mappers.DefaultErrorResponse
    }
  },
  serializer
};

const listSourceControlsNextOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  baseUrl: "https://management.azure.com",
  path: "{nextLink}",
  urlParameters: [
    Parameters.nextPageLink
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    200: {
      bodyMapper: Mappers.SourceControlCollection
    },
    default: {
      bodyMapper: Mappers.DefaultErrorResponse
    }
  },
  serializer
};

const listBillingMetersNextOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  baseUrl: "https://management.azure.com",
  path: "{nextLink}",
  urlParameters: [
    Parameters.nextPageLink
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    200: {
      bodyMapper: Mappers.BillingMeterCollection
    },
    default: {
      bodyMapper: Mappers.DefaultErrorResponse
    }
  },
  serializer
};

const listGeoRegionsNextOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  baseUrl: "https://management.azure.com",
  path: "{nextLink}",
  urlParameters: [
    Parameters.nextPageLink
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    200: {
      bodyMapper: Mappers.GeoRegionCollection
    },
    default: {
      bodyMapper: Mappers.DefaultErrorResponse
    }
  },
  serializer
};

const listSiteIdentifiersAssignedToHostNameNextOperationSpec: msRest.OperationSpec = {
  httpMethod: "POST",
  baseUrl: "https://management.azure.com",
  path: "{nextLink}",
  urlParameters: [
    Parameters.nextPageLink
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    200: {
      bodyMapper: Mappers.IdentifierCollection
    },
    default: {
      bodyMapper: Mappers.DefaultErrorResponse
    }
  },
  serializer
};

const listPremierAddOnOffersNextOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  baseUrl: "https://management.azure.com",
  path: "{nextLink}",
  urlParameters: [
    Parameters.nextPageLink
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    200: {
      bodyMapper: Mappers.PremierAddOnOfferCollection
    },
    default: {
      bodyMapper: Mappers.DefaultErrorResponse
    }
  },
  serializer
};

export {
  WebSiteManagementClient,
  WebSiteManagementClientContext,
  Models as WebSiteManagementModels,
  Mappers as WebSiteManagementMappers
};
export * from "./operations";
