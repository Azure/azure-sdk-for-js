/*
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is
 * regenerated.
 */

import * as msRest from "@azure/ms-rest-js";
import * as Models from "../models";
import * as Mappers from "../models/diagnosticsMappers";
import * as Parameters from "../models/parameters";
import { WebSiteManagementClientContext } from "../webSiteManagementClientContext";

/** Class representing a Diagnostics. */
export class Diagnostics {
  private readonly client: WebSiteManagementClientContext;

  /**
   * Create a Diagnostics.
   * @param {WebSiteManagementClientContext} client Reference to the service client.
   */
  constructor(client: WebSiteManagementClientContext) {
    this.client = client;
  }

  /**
   * Description for List Hosting Environment Detector Responses
   * @summary List Hosting Environment Detector Responses
   * @param resourceGroupName Name of the resource group to which the resource belongs.
   * @param name Site Name
   * @param [options] The optional parameters
   * @returns Promise<Models.DiagnosticsListHostingEnvironmentDetectorResponsesResponse>
   */
  listHostingEnvironmentDetectorResponses(resourceGroupName: string, name: string, options?: msRest.RequestOptionsBase): Promise<Models.DiagnosticsListHostingEnvironmentDetectorResponsesResponse>;
  /**
   * @param resourceGroupName Name of the resource group to which the resource belongs.
   * @param name Site Name
   * @param callback The callback
   */
  listHostingEnvironmentDetectorResponses(resourceGroupName: string, name: string, callback: msRest.ServiceCallback<Models.DetectorResponseCollection>): void;
  /**
   * @param resourceGroupName Name of the resource group to which the resource belongs.
   * @param name Site Name
   * @param options The optional parameters
   * @param callback The callback
   */
  listHostingEnvironmentDetectorResponses(resourceGroupName: string, name: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.DetectorResponseCollection>): void;
  listHostingEnvironmentDetectorResponses(resourceGroupName: string, name: string, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<Models.DetectorResponseCollection>, callback?: msRest.ServiceCallback<Models.DetectorResponseCollection>): Promise<Models.DiagnosticsListHostingEnvironmentDetectorResponsesResponse> {
    return this.client.sendOperationRequest(
      {
        resourceGroupName,
        name,
        options
      },
      listHostingEnvironmentDetectorResponsesOperationSpec,
      callback) as Promise<Models.DiagnosticsListHostingEnvironmentDetectorResponsesResponse>;
  }

  /**
   * Description for Get Hosting Environment Detector Response
   * @summary Get Hosting Environment Detector Response
   * @param resourceGroupName Name of the resource group to which the resource belongs.
   * @param name App Service Environment Name
   * @param detectorName Detector Resource Name
   * @param [options] The optional parameters
   * @returns Promise<Models.DiagnosticsGetHostingEnvironmentDetectorResponseResponse>
   */
  getHostingEnvironmentDetectorResponse(resourceGroupName: string, name: string, detectorName: string, options?: Models.DiagnosticsGetHostingEnvironmentDetectorResponseOptionalParams): Promise<Models.DiagnosticsGetHostingEnvironmentDetectorResponseResponse>;
  /**
   * @param resourceGroupName Name of the resource group to which the resource belongs.
   * @param name App Service Environment Name
   * @param detectorName Detector Resource Name
   * @param callback The callback
   */
  getHostingEnvironmentDetectorResponse(resourceGroupName: string, name: string, detectorName: string, callback: msRest.ServiceCallback<Models.DetectorResponse>): void;
  /**
   * @param resourceGroupName Name of the resource group to which the resource belongs.
   * @param name App Service Environment Name
   * @param detectorName Detector Resource Name
   * @param options The optional parameters
   * @param callback The callback
   */
  getHostingEnvironmentDetectorResponse(resourceGroupName: string, name: string, detectorName: string, options: Models.DiagnosticsGetHostingEnvironmentDetectorResponseOptionalParams, callback: msRest.ServiceCallback<Models.DetectorResponse>): void;
  getHostingEnvironmentDetectorResponse(resourceGroupName: string, name: string, detectorName: string, options?: Models.DiagnosticsGetHostingEnvironmentDetectorResponseOptionalParams | msRest.ServiceCallback<Models.DetectorResponse>, callback?: msRest.ServiceCallback<Models.DetectorResponse>): Promise<Models.DiagnosticsGetHostingEnvironmentDetectorResponseResponse> {
    return this.client.sendOperationRequest(
      {
        resourceGroupName,
        name,
        detectorName,
        options
      },
      getHostingEnvironmentDetectorResponseOperationSpec,
      callback) as Promise<Models.DiagnosticsGetHostingEnvironmentDetectorResponseResponse>;
  }

  /**
   * Description for List Site Detector Responses
   * @summary List Site Detector Responses
   * @param resourceGroupName Name of the resource group to which the resource belongs.
   * @param siteName Site Name
   * @param [options] The optional parameters
   * @returns Promise<Models.DiagnosticsListSiteDetectorResponsesResponse>
   */
  listSiteDetectorResponses(resourceGroupName: string, siteName: string, options?: msRest.RequestOptionsBase): Promise<Models.DiagnosticsListSiteDetectorResponsesResponse>;
  /**
   * @param resourceGroupName Name of the resource group to which the resource belongs.
   * @param siteName Site Name
   * @param callback The callback
   */
  listSiteDetectorResponses(resourceGroupName: string, siteName: string, callback: msRest.ServiceCallback<Models.DetectorResponseCollection>): void;
  /**
   * @param resourceGroupName Name of the resource group to which the resource belongs.
   * @param siteName Site Name
   * @param options The optional parameters
   * @param callback The callback
   */
  listSiteDetectorResponses(resourceGroupName: string, siteName: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.DetectorResponseCollection>): void;
  listSiteDetectorResponses(resourceGroupName: string, siteName: string, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<Models.DetectorResponseCollection>, callback?: msRest.ServiceCallback<Models.DetectorResponseCollection>): Promise<Models.DiagnosticsListSiteDetectorResponsesResponse> {
    return this.client.sendOperationRequest(
      {
        resourceGroupName,
        siteName,
        options
      },
      listSiteDetectorResponsesOperationSpec,
      callback) as Promise<Models.DiagnosticsListSiteDetectorResponsesResponse>;
  }

  /**
   * Description for Get site detector response
   * @summary Get site detector response
   * @param resourceGroupName Name of the resource group to which the resource belongs.
   * @param siteName Site Name
   * @param detectorName Detector Resource Name
   * @param [options] The optional parameters
   * @returns Promise<Models.DiagnosticsGetSiteDetectorResponseResponse>
   */
  getSiteDetectorResponse(resourceGroupName: string, siteName: string, detectorName: string, options?: Models.DiagnosticsGetSiteDetectorResponseOptionalParams): Promise<Models.DiagnosticsGetSiteDetectorResponseResponse>;
  /**
   * @param resourceGroupName Name of the resource group to which the resource belongs.
   * @param siteName Site Name
   * @param detectorName Detector Resource Name
   * @param callback The callback
   */
  getSiteDetectorResponse(resourceGroupName: string, siteName: string, detectorName: string, callback: msRest.ServiceCallback<Models.DetectorResponse>): void;
  /**
   * @param resourceGroupName Name of the resource group to which the resource belongs.
   * @param siteName Site Name
   * @param detectorName Detector Resource Name
   * @param options The optional parameters
   * @param callback The callback
   */
  getSiteDetectorResponse(resourceGroupName: string, siteName: string, detectorName: string, options: Models.DiagnosticsGetSiteDetectorResponseOptionalParams, callback: msRest.ServiceCallback<Models.DetectorResponse>): void;
  getSiteDetectorResponse(resourceGroupName: string, siteName: string, detectorName: string, options?: Models.DiagnosticsGetSiteDetectorResponseOptionalParams | msRest.ServiceCallback<Models.DetectorResponse>, callback?: msRest.ServiceCallback<Models.DetectorResponse>): Promise<Models.DiagnosticsGetSiteDetectorResponseResponse> {
    return this.client.sendOperationRequest(
      {
        resourceGroupName,
        siteName,
        detectorName,
        options
      },
      getSiteDetectorResponseOperationSpec,
      callback) as Promise<Models.DiagnosticsGetSiteDetectorResponseResponse>;
  }

  /**
   * Description for Get Diagnostics Categories
   * @summary Get Diagnostics Categories
   * @param resourceGroupName Name of the resource group to which the resource belongs.
   * @param siteName Site Name
   * @param [options] The optional parameters
   * @returns Promise<Models.DiagnosticsListSiteDiagnosticCategoriesResponse>
   */
  listSiteDiagnosticCategories(resourceGroupName: string, siteName: string, options?: msRest.RequestOptionsBase): Promise<Models.DiagnosticsListSiteDiagnosticCategoriesResponse>;
  /**
   * @param resourceGroupName Name of the resource group to which the resource belongs.
   * @param siteName Site Name
   * @param callback The callback
   */
  listSiteDiagnosticCategories(resourceGroupName: string, siteName: string, callback: msRest.ServiceCallback<Models.DiagnosticCategoryCollection>): void;
  /**
   * @param resourceGroupName Name of the resource group to which the resource belongs.
   * @param siteName Site Name
   * @param options The optional parameters
   * @param callback The callback
   */
  listSiteDiagnosticCategories(resourceGroupName: string, siteName: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.DiagnosticCategoryCollection>): void;
  listSiteDiagnosticCategories(resourceGroupName: string, siteName: string, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<Models.DiagnosticCategoryCollection>, callback?: msRest.ServiceCallback<Models.DiagnosticCategoryCollection>): Promise<Models.DiagnosticsListSiteDiagnosticCategoriesResponse> {
    return this.client.sendOperationRequest(
      {
        resourceGroupName,
        siteName,
        options
      },
      listSiteDiagnosticCategoriesOperationSpec,
      callback) as Promise<Models.DiagnosticsListSiteDiagnosticCategoriesResponse>;
  }

  /**
   * Description for Get Diagnostics Category
   * @summary Get Diagnostics Category
   * @param resourceGroupName Name of the resource group to which the resource belongs.
   * @param siteName Site Name
   * @param diagnosticCategory Diagnostic Category
   * @param [options] The optional parameters
   * @returns Promise<Models.DiagnosticsGetSiteDiagnosticCategoryResponse>
   */
  getSiteDiagnosticCategory(resourceGroupName: string, siteName: string, diagnosticCategory: string, options?: msRest.RequestOptionsBase): Promise<Models.DiagnosticsGetSiteDiagnosticCategoryResponse>;
  /**
   * @param resourceGroupName Name of the resource group to which the resource belongs.
   * @param siteName Site Name
   * @param diagnosticCategory Diagnostic Category
   * @param callback The callback
   */
  getSiteDiagnosticCategory(resourceGroupName: string, siteName: string, diagnosticCategory: string, callback: msRest.ServiceCallback<Models.DiagnosticCategory>): void;
  /**
   * @param resourceGroupName Name of the resource group to which the resource belongs.
   * @param siteName Site Name
   * @param diagnosticCategory Diagnostic Category
   * @param options The optional parameters
   * @param callback The callback
   */
  getSiteDiagnosticCategory(resourceGroupName: string, siteName: string, diagnosticCategory: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.DiagnosticCategory>): void;
  getSiteDiagnosticCategory(resourceGroupName: string, siteName: string, diagnosticCategory: string, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<Models.DiagnosticCategory>, callback?: msRest.ServiceCallback<Models.DiagnosticCategory>): Promise<Models.DiagnosticsGetSiteDiagnosticCategoryResponse> {
    return this.client.sendOperationRequest(
      {
        resourceGroupName,
        siteName,
        diagnosticCategory,
        options
      },
      getSiteDiagnosticCategoryOperationSpec,
      callback) as Promise<Models.DiagnosticsGetSiteDiagnosticCategoryResponse>;
  }

  /**
   * Description for Get Site Analyses
   * @summary Get Site Analyses
   * @param resourceGroupName Name of the resource group to which the resource belongs.
   * @param siteName Site Name
   * @param diagnosticCategory Diagnostic Category
   * @param [options] The optional parameters
   * @returns Promise<Models.DiagnosticsListSiteAnalysesResponse>
   */
  listSiteAnalyses(resourceGroupName: string, siteName: string, diagnosticCategory: string, options?: msRest.RequestOptionsBase): Promise<Models.DiagnosticsListSiteAnalysesResponse>;
  /**
   * @param resourceGroupName Name of the resource group to which the resource belongs.
   * @param siteName Site Name
   * @param diagnosticCategory Diagnostic Category
   * @param callback The callback
   */
  listSiteAnalyses(resourceGroupName: string, siteName: string, diagnosticCategory: string, callback: msRest.ServiceCallback<Models.DiagnosticAnalysisCollection>): void;
  /**
   * @param resourceGroupName Name of the resource group to which the resource belongs.
   * @param siteName Site Name
   * @param diagnosticCategory Diagnostic Category
   * @param options The optional parameters
   * @param callback The callback
   */
  listSiteAnalyses(resourceGroupName: string, siteName: string, diagnosticCategory: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.DiagnosticAnalysisCollection>): void;
  listSiteAnalyses(resourceGroupName: string, siteName: string, diagnosticCategory: string, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<Models.DiagnosticAnalysisCollection>, callback?: msRest.ServiceCallback<Models.DiagnosticAnalysisCollection>): Promise<Models.DiagnosticsListSiteAnalysesResponse> {
    return this.client.sendOperationRequest(
      {
        resourceGroupName,
        siteName,
        diagnosticCategory,
        options
      },
      listSiteAnalysesOperationSpec,
      callback) as Promise<Models.DiagnosticsListSiteAnalysesResponse>;
  }

  /**
   * Description for Get Site Analysis
   * @summary Get Site Analysis
   * @param resourceGroupName Name of the resource group to which the resource belongs.
   * @param siteName Site Name
   * @param diagnosticCategory Diagnostic Category
   * @param analysisName Analysis Name
   * @param [options] The optional parameters
   * @returns Promise<Models.DiagnosticsGetSiteAnalysisResponse>
   */
  getSiteAnalysis(resourceGroupName: string, siteName: string, diagnosticCategory: string, analysisName: string, options?: msRest.RequestOptionsBase): Promise<Models.DiagnosticsGetSiteAnalysisResponse>;
  /**
   * @param resourceGroupName Name of the resource group to which the resource belongs.
   * @param siteName Site Name
   * @param diagnosticCategory Diagnostic Category
   * @param analysisName Analysis Name
   * @param callback The callback
   */
  getSiteAnalysis(resourceGroupName: string, siteName: string, diagnosticCategory: string, analysisName: string, callback: msRest.ServiceCallback<Models.AnalysisDefinition>): void;
  /**
   * @param resourceGroupName Name of the resource group to which the resource belongs.
   * @param siteName Site Name
   * @param diagnosticCategory Diagnostic Category
   * @param analysisName Analysis Name
   * @param options The optional parameters
   * @param callback The callback
   */
  getSiteAnalysis(resourceGroupName: string, siteName: string, diagnosticCategory: string, analysisName: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.AnalysisDefinition>): void;
  getSiteAnalysis(resourceGroupName: string, siteName: string, diagnosticCategory: string, analysisName: string, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<Models.AnalysisDefinition>, callback?: msRest.ServiceCallback<Models.AnalysisDefinition>): Promise<Models.DiagnosticsGetSiteAnalysisResponse> {
    return this.client.sendOperationRequest(
      {
        resourceGroupName,
        siteName,
        diagnosticCategory,
        analysisName,
        options
      },
      getSiteAnalysisOperationSpec,
      callback) as Promise<Models.DiagnosticsGetSiteAnalysisResponse>;
  }

  /**
   * Description for Execute Analysis
   * @summary Execute Analysis
   * @param resourceGroupName Name of the resource group to which the resource belongs.
   * @param siteName Site Name
   * @param diagnosticCategory Category Name
   * @param analysisName Analysis Resource Name
   * @param [options] The optional parameters
   * @returns Promise<Models.DiagnosticsExecuteSiteAnalysisResponse>
   */
  executeSiteAnalysis(resourceGroupName: string, siteName: string, diagnosticCategory: string, analysisName: string, options?: Models.DiagnosticsExecuteSiteAnalysisOptionalParams): Promise<Models.DiagnosticsExecuteSiteAnalysisResponse>;
  /**
   * @param resourceGroupName Name of the resource group to which the resource belongs.
   * @param siteName Site Name
   * @param diagnosticCategory Category Name
   * @param analysisName Analysis Resource Name
   * @param callback The callback
   */
  executeSiteAnalysis(resourceGroupName: string, siteName: string, diagnosticCategory: string, analysisName: string, callback: msRest.ServiceCallback<Models.DiagnosticAnalysis>): void;
  /**
   * @param resourceGroupName Name of the resource group to which the resource belongs.
   * @param siteName Site Name
   * @param diagnosticCategory Category Name
   * @param analysisName Analysis Resource Name
   * @param options The optional parameters
   * @param callback The callback
   */
  executeSiteAnalysis(resourceGroupName: string, siteName: string, diagnosticCategory: string, analysisName: string, options: Models.DiagnosticsExecuteSiteAnalysisOptionalParams, callback: msRest.ServiceCallback<Models.DiagnosticAnalysis>): void;
  executeSiteAnalysis(resourceGroupName: string, siteName: string, diagnosticCategory: string, analysisName: string, options?: Models.DiagnosticsExecuteSiteAnalysisOptionalParams | msRest.ServiceCallback<Models.DiagnosticAnalysis>, callback?: msRest.ServiceCallback<Models.DiagnosticAnalysis>): Promise<Models.DiagnosticsExecuteSiteAnalysisResponse> {
    return this.client.sendOperationRequest(
      {
        resourceGroupName,
        siteName,
        diagnosticCategory,
        analysisName,
        options
      },
      executeSiteAnalysisOperationSpec,
      callback) as Promise<Models.DiagnosticsExecuteSiteAnalysisResponse>;
  }

  /**
   * Description for Get Detectors
   * @summary Get Detectors
   * @param resourceGroupName Name of the resource group to which the resource belongs.
   * @param siteName Site Name
   * @param diagnosticCategory Diagnostic Category
   * @param [options] The optional parameters
   * @returns Promise<Models.DiagnosticsListSiteDetectorsResponse>
   */
  listSiteDetectors(resourceGroupName: string, siteName: string, diagnosticCategory: string, options?: msRest.RequestOptionsBase): Promise<Models.DiagnosticsListSiteDetectorsResponse>;
  /**
   * @param resourceGroupName Name of the resource group to which the resource belongs.
   * @param siteName Site Name
   * @param diagnosticCategory Diagnostic Category
   * @param callback The callback
   */
  listSiteDetectors(resourceGroupName: string, siteName: string, diagnosticCategory: string, callback: msRest.ServiceCallback<Models.DiagnosticDetectorCollection>): void;
  /**
   * @param resourceGroupName Name of the resource group to which the resource belongs.
   * @param siteName Site Name
   * @param diagnosticCategory Diagnostic Category
   * @param options The optional parameters
   * @param callback The callback
   */
  listSiteDetectors(resourceGroupName: string, siteName: string, diagnosticCategory: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.DiagnosticDetectorCollection>): void;
  listSiteDetectors(resourceGroupName: string, siteName: string, diagnosticCategory: string, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<Models.DiagnosticDetectorCollection>, callback?: msRest.ServiceCallback<Models.DiagnosticDetectorCollection>): Promise<Models.DiagnosticsListSiteDetectorsResponse> {
    return this.client.sendOperationRequest(
      {
        resourceGroupName,
        siteName,
        diagnosticCategory,
        options
      },
      listSiteDetectorsOperationSpec,
      callback) as Promise<Models.DiagnosticsListSiteDetectorsResponse>;
  }

  /**
   * Description for Get Detector
   * @summary Get Detector
   * @param resourceGroupName Name of the resource group to which the resource belongs.
   * @param siteName Site Name
   * @param diagnosticCategory Diagnostic Category
   * @param detectorName Detector Name
   * @param [options] The optional parameters
   * @returns Promise<Models.DiagnosticsGetSiteDetectorResponse>
   */
  getSiteDetector(resourceGroupName: string, siteName: string, diagnosticCategory: string, detectorName: string, options?: msRest.RequestOptionsBase): Promise<Models.DiagnosticsGetSiteDetectorResponse>;
  /**
   * @param resourceGroupName Name of the resource group to which the resource belongs.
   * @param siteName Site Name
   * @param diagnosticCategory Diagnostic Category
   * @param detectorName Detector Name
   * @param callback The callback
   */
  getSiteDetector(resourceGroupName: string, siteName: string, diagnosticCategory: string, detectorName: string, callback: msRest.ServiceCallback<Models.DetectorDefinition>): void;
  /**
   * @param resourceGroupName Name of the resource group to which the resource belongs.
   * @param siteName Site Name
   * @param diagnosticCategory Diagnostic Category
   * @param detectorName Detector Name
   * @param options The optional parameters
   * @param callback The callback
   */
  getSiteDetector(resourceGroupName: string, siteName: string, diagnosticCategory: string, detectorName: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.DetectorDefinition>): void;
  getSiteDetector(resourceGroupName: string, siteName: string, diagnosticCategory: string, detectorName: string, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<Models.DetectorDefinition>, callback?: msRest.ServiceCallback<Models.DetectorDefinition>): Promise<Models.DiagnosticsGetSiteDetectorResponse> {
    return this.client.sendOperationRequest(
      {
        resourceGroupName,
        siteName,
        diagnosticCategory,
        detectorName,
        options
      },
      getSiteDetectorOperationSpec,
      callback) as Promise<Models.DiagnosticsGetSiteDetectorResponse>;
  }

  /**
   * Description for Execute Detector
   * @summary Execute Detector
   * @param resourceGroupName Name of the resource group to which the resource belongs.
   * @param siteName Site Name
   * @param detectorName Detector Resource Name
   * @param diagnosticCategory Category Name
   * @param [options] The optional parameters
   * @returns Promise<Models.DiagnosticsExecuteSiteDetectorResponse>
   */
  executeSiteDetector(resourceGroupName: string, siteName: string, detectorName: string, diagnosticCategory: string, options?: Models.DiagnosticsExecuteSiteDetectorOptionalParams): Promise<Models.DiagnosticsExecuteSiteDetectorResponse>;
  /**
   * @param resourceGroupName Name of the resource group to which the resource belongs.
   * @param siteName Site Name
   * @param detectorName Detector Resource Name
   * @param diagnosticCategory Category Name
   * @param callback The callback
   */
  executeSiteDetector(resourceGroupName: string, siteName: string, detectorName: string, diagnosticCategory: string, callback: msRest.ServiceCallback<Models.DiagnosticDetectorResponse>): void;
  /**
   * @param resourceGroupName Name of the resource group to which the resource belongs.
   * @param siteName Site Name
   * @param detectorName Detector Resource Name
   * @param diagnosticCategory Category Name
   * @param options The optional parameters
   * @param callback The callback
   */
  executeSiteDetector(resourceGroupName: string, siteName: string, detectorName: string, diagnosticCategory: string, options: Models.DiagnosticsExecuteSiteDetectorOptionalParams, callback: msRest.ServiceCallback<Models.DiagnosticDetectorResponse>): void;
  executeSiteDetector(resourceGroupName: string, siteName: string, detectorName: string, diagnosticCategory: string, options?: Models.DiagnosticsExecuteSiteDetectorOptionalParams | msRest.ServiceCallback<Models.DiagnosticDetectorResponse>, callback?: msRest.ServiceCallback<Models.DiagnosticDetectorResponse>): Promise<Models.DiagnosticsExecuteSiteDetectorResponse> {
    return this.client.sendOperationRequest(
      {
        resourceGroupName,
        siteName,
        detectorName,
        diagnosticCategory,
        options
      },
      executeSiteDetectorOperationSpec,
      callback) as Promise<Models.DiagnosticsExecuteSiteDetectorResponse>;
  }

  /**
   * Description for List Site Detector Responses
   * @summary List Site Detector Responses
   * @param resourceGroupName Name of the resource group to which the resource belongs.
   * @param siteName Site Name
   * @param slot Slot Name
   * @param [options] The optional parameters
   * @returns Promise<Models.DiagnosticsListSiteDetectorResponsesSlotResponse>
   */
  listSiteDetectorResponsesSlot(resourceGroupName: string, siteName: string, slot: string, options?: msRest.RequestOptionsBase): Promise<Models.DiagnosticsListSiteDetectorResponsesSlotResponse>;
  /**
   * @param resourceGroupName Name of the resource group to which the resource belongs.
   * @param siteName Site Name
   * @param slot Slot Name
   * @param callback The callback
   */
  listSiteDetectorResponsesSlot(resourceGroupName: string, siteName: string, slot: string, callback: msRest.ServiceCallback<Models.DetectorResponseCollection>): void;
  /**
   * @param resourceGroupName Name of the resource group to which the resource belongs.
   * @param siteName Site Name
   * @param slot Slot Name
   * @param options The optional parameters
   * @param callback The callback
   */
  listSiteDetectorResponsesSlot(resourceGroupName: string, siteName: string, slot: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.DetectorResponseCollection>): void;
  listSiteDetectorResponsesSlot(resourceGroupName: string, siteName: string, slot: string, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<Models.DetectorResponseCollection>, callback?: msRest.ServiceCallback<Models.DetectorResponseCollection>): Promise<Models.DiagnosticsListSiteDetectorResponsesSlotResponse> {
    return this.client.sendOperationRequest(
      {
        resourceGroupName,
        siteName,
        slot,
        options
      },
      listSiteDetectorResponsesSlotOperationSpec,
      callback) as Promise<Models.DiagnosticsListSiteDetectorResponsesSlotResponse>;
  }

  /**
   * Description for Get site detector response
   * @summary Get site detector response
   * @param resourceGroupName Name of the resource group to which the resource belongs.
   * @param siteName Site Name
   * @param detectorName Detector Resource Name
   * @param slot Slot Name
   * @param [options] The optional parameters
   * @returns Promise<Models.DiagnosticsGetSiteDetectorResponseSlotResponse>
   */
  getSiteDetectorResponseSlot(resourceGroupName: string, siteName: string, detectorName: string, slot: string, options?: Models.DiagnosticsGetSiteDetectorResponseSlotOptionalParams): Promise<Models.DiagnosticsGetSiteDetectorResponseSlotResponse>;
  /**
   * @param resourceGroupName Name of the resource group to which the resource belongs.
   * @param siteName Site Name
   * @param detectorName Detector Resource Name
   * @param slot Slot Name
   * @param callback The callback
   */
  getSiteDetectorResponseSlot(resourceGroupName: string, siteName: string, detectorName: string, slot: string, callback: msRest.ServiceCallback<Models.DetectorResponse>): void;
  /**
   * @param resourceGroupName Name of the resource group to which the resource belongs.
   * @param siteName Site Name
   * @param detectorName Detector Resource Name
   * @param slot Slot Name
   * @param options The optional parameters
   * @param callback The callback
   */
  getSiteDetectorResponseSlot(resourceGroupName: string, siteName: string, detectorName: string, slot: string, options: Models.DiagnosticsGetSiteDetectorResponseSlotOptionalParams, callback: msRest.ServiceCallback<Models.DetectorResponse>): void;
  getSiteDetectorResponseSlot(resourceGroupName: string, siteName: string, detectorName: string, slot: string, options?: Models.DiagnosticsGetSiteDetectorResponseSlotOptionalParams | msRest.ServiceCallback<Models.DetectorResponse>, callback?: msRest.ServiceCallback<Models.DetectorResponse>): Promise<Models.DiagnosticsGetSiteDetectorResponseSlotResponse> {
    return this.client.sendOperationRequest(
      {
        resourceGroupName,
        siteName,
        detectorName,
        slot,
        options
      },
      getSiteDetectorResponseSlotOperationSpec,
      callback) as Promise<Models.DiagnosticsGetSiteDetectorResponseSlotResponse>;
  }

  /**
   * Description for Get Diagnostics Categories
   * @summary Get Diagnostics Categories
   * @param resourceGroupName Name of the resource group to which the resource belongs.
   * @param siteName Site Name
   * @param slot Slot Name
   * @param [options] The optional parameters
   * @returns Promise<Models.DiagnosticsListSiteDiagnosticCategoriesSlotResponse>
   */
  listSiteDiagnosticCategoriesSlot(resourceGroupName: string, siteName: string, slot: string, options?: msRest.RequestOptionsBase): Promise<Models.DiagnosticsListSiteDiagnosticCategoriesSlotResponse>;
  /**
   * @param resourceGroupName Name of the resource group to which the resource belongs.
   * @param siteName Site Name
   * @param slot Slot Name
   * @param callback The callback
   */
  listSiteDiagnosticCategoriesSlot(resourceGroupName: string, siteName: string, slot: string, callback: msRest.ServiceCallback<Models.DiagnosticCategoryCollection>): void;
  /**
   * @param resourceGroupName Name of the resource group to which the resource belongs.
   * @param siteName Site Name
   * @param slot Slot Name
   * @param options The optional parameters
   * @param callback The callback
   */
  listSiteDiagnosticCategoriesSlot(resourceGroupName: string, siteName: string, slot: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.DiagnosticCategoryCollection>): void;
  listSiteDiagnosticCategoriesSlot(resourceGroupName: string, siteName: string, slot: string, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<Models.DiagnosticCategoryCollection>, callback?: msRest.ServiceCallback<Models.DiagnosticCategoryCollection>): Promise<Models.DiagnosticsListSiteDiagnosticCategoriesSlotResponse> {
    return this.client.sendOperationRequest(
      {
        resourceGroupName,
        siteName,
        slot,
        options
      },
      listSiteDiagnosticCategoriesSlotOperationSpec,
      callback) as Promise<Models.DiagnosticsListSiteDiagnosticCategoriesSlotResponse>;
  }

  /**
   * Description for Get Diagnostics Category
   * @summary Get Diagnostics Category
   * @param resourceGroupName Name of the resource group to which the resource belongs.
   * @param siteName Site Name
   * @param diagnosticCategory Diagnostic Category
   * @param slot Slot Name
   * @param [options] The optional parameters
   * @returns Promise<Models.DiagnosticsGetSiteDiagnosticCategorySlotResponse>
   */
  getSiteDiagnosticCategorySlot(resourceGroupName: string, siteName: string, diagnosticCategory: string, slot: string, options?: msRest.RequestOptionsBase): Promise<Models.DiagnosticsGetSiteDiagnosticCategorySlotResponse>;
  /**
   * @param resourceGroupName Name of the resource group to which the resource belongs.
   * @param siteName Site Name
   * @param diagnosticCategory Diagnostic Category
   * @param slot Slot Name
   * @param callback The callback
   */
  getSiteDiagnosticCategorySlot(resourceGroupName: string, siteName: string, diagnosticCategory: string, slot: string, callback: msRest.ServiceCallback<Models.DiagnosticCategory>): void;
  /**
   * @param resourceGroupName Name of the resource group to which the resource belongs.
   * @param siteName Site Name
   * @param diagnosticCategory Diagnostic Category
   * @param slot Slot Name
   * @param options The optional parameters
   * @param callback The callback
   */
  getSiteDiagnosticCategorySlot(resourceGroupName: string, siteName: string, diagnosticCategory: string, slot: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.DiagnosticCategory>): void;
  getSiteDiagnosticCategorySlot(resourceGroupName: string, siteName: string, diagnosticCategory: string, slot: string, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<Models.DiagnosticCategory>, callback?: msRest.ServiceCallback<Models.DiagnosticCategory>): Promise<Models.DiagnosticsGetSiteDiagnosticCategorySlotResponse> {
    return this.client.sendOperationRequest(
      {
        resourceGroupName,
        siteName,
        diagnosticCategory,
        slot,
        options
      },
      getSiteDiagnosticCategorySlotOperationSpec,
      callback) as Promise<Models.DiagnosticsGetSiteDiagnosticCategorySlotResponse>;
  }

  /**
   * Description for Get Site Analyses
   * @summary Get Site Analyses
   * @param resourceGroupName Name of the resource group to which the resource belongs.
   * @param siteName Site Name
   * @param diagnosticCategory Diagnostic Category
   * @param slot Slot Name
   * @param [options] The optional parameters
   * @returns Promise<Models.DiagnosticsListSiteAnalysesSlotResponse>
   */
  listSiteAnalysesSlot(resourceGroupName: string, siteName: string, diagnosticCategory: string, slot: string, options?: msRest.RequestOptionsBase): Promise<Models.DiagnosticsListSiteAnalysesSlotResponse>;
  /**
   * @param resourceGroupName Name of the resource group to which the resource belongs.
   * @param siteName Site Name
   * @param diagnosticCategory Diagnostic Category
   * @param slot Slot Name
   * @param callback The callback
   */
  listSiteAnalysesSlot(resourceGroupName: string, siteName: string, diagnosticCategory: string, slot: string, callback: msRest.ServiceCallback<Models.DiagnosticAnalysisCollection>): void;
  /**
   * @param resourceGroupName Name of the resource group to which the resource belongs.
   * @param siteName Site Name
   * @param diagnosticCategory Diagnostic Category
   * @param slot Slot Name
   * @param options The optional parameters
   * @param callback The callback
   */
  listSiteAnalysesSlot(resourceGroupName: string, siteName: string, diagnosticCategory: string, slot: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.DiagnosticAnalysisCollection>): void;
  listSiteAnalysesSlot(resourceGroupName: string, siteName: string, diagnosticCategory: string, slot: string, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<Models.DiagnosticAnalysisCollection>, callback?: msRest.ServiceCallback<Models.DiagnosticAnalysisCollection>): Promise<Models.DiagnosticsListSiteAnalysesSlotResponse> {
    return this.client.sendOperationRequest(
      {
        resourceGroupName,
        siteName,
        diagnosticCategory,
        slot,
        options
      },
      listSiteAnalysesSlotOperationSpec,
      callback) as Promise<Models.DiagnosticsListSiteAnalysesSlotResponse>;
  }

  /**
   * Description for Get Site Analysis
   * @summary Get Site Analysis
   * @param resourceGroupName Name of the resource group to which the resource belongs.
   * @param siteName Site Name
   * @param diagnosticCategory Diagnostic Category
   * @param analysisName Analysis Name
   * @param slot Slot - optional
   * @param [options] The optional parameters
   * @returns Promise<Models.DiagnosticsGetSiteAnalysisSlotResponse>
   */
  getSiteAnalysisSlot(resourceGroupName: string, siteName: string, diagnosticCategory: string, analysisName: string, slot: string, options?: msRest.RequestOptionsBase): Promise<Models.DiagnosticsGetSiteAnalysisSlotResponse>;
  /**
   * @param resourceGroupName Name of the resource group to which the resource belongs.
   * @param siteName Site Name
   * @param diagnosticCategory Diagnostic Category
   * @param analysisName Analysis Name
   * @param slot Slot - optional
   * @param callback The callback
   */
  getSiteAnalysisSlot(resourceGroupName: string, siteName: string, diagnosticCategory: string, analysisName: string, slot: string, callback: msRest.ServiceCallback<Models.AnalysisDefinition>): void;
  /**
   * @param resourceGroupName Name of the resource group to which the resource belongs.
   * @param siteName Site Name
   * @param diagnosticCategory Diagnostic Category
   * @param analysisName Analysis Name
   * @param slot Slot - optional
   * @param options The optional parameters
   * @param callback The callback
   */
  getSiteAnalysisSlot(resourceGroupName: string, siteName: string, diagnosticCategory: string, analysisName: string, slot: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.AnalysisDefinition>): void;
  getSiteAnalysisSlot(resourceGroupName: string, siteName: string, diagnosticCategory: string, analysisName: string, slot: string, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<Models.AnalysisDefinition>, callback?: msRest.ServiceCallback<Models.AnalysisDefinition>): Promise<Models.DiagnosticsGetSiteAnalysisSlotResponse> {
    return this.client.sendOperationRequest(
      {
        resourceGroupName,
        siteName,
        diagnosticCategory,
        analysisName,
        slot,
        options
      },
      getSiteAnalysisSlotOperationSpec,
      callback) as Promise<Models.DiagnosticsGetSiteAnalysisSlotResponse>;
  }

  /**
   * Description for Execute Analysis
   * @summary Execute Analysis
   * @param resourceGroupName Name of the resource group to which the resource belongs.
   * @param siteName Site Name
   * @param diagnosticCategory Category Name
   * @param analysisName Analysis Resource Name
   * @param slot Slot Name
   * @param [options] The optional parameters
   * @returns Promise<Models.DiagnosticsExecuteSiteAnalysisSlotResponse>
   */
  executeSiteAnalysisSlot(resourceGroupName: string, siteName: string, diagnosticCategory: string, analysisName: string, slot: string, options?: Models.DiagnosticsExecuteSiteAnalysisSlotOptionalParams): Promise<Models.DiagnosticsExecuteSiteAnalysisSlotResponse>;
  /**
   * @param resourceGroupName Name of the resource group to which the resource belongs.
   * @param siteName Site Name
   * @param diagnosticCategory Category Name
   * @param analysisName Analysis Resource Name
   * @param slot Slot Name
   * @param callback The callback
   */
  executeSiteAnalysisSlot(resourceGroupName: string, siteName: string, diagnosticCategory: string, analysisName: string, slot: string, callback: msRest.ServiceCallback<Models.DiagnosticAnalysis>): void;
  /**
   * @param resourceGroupName Name of the resource group to which the resource belongs.
   * @param siteName Site Name
   * @param diagnosticCategory Category Name
   * @param analysisName Analysis Resource Name
   * @param slot Slot Name
   * @param options The optional parameters
   * @param callback The callback
   */
  executeSiteAnalysisSlot(resourceGroupName: string, siteName: string, diagnosticCategory: string, analysisName: string, slot: string, options: Models.DiagnosticsExecuteSiteAnalysisSlotOptionalParams, callback: msRest.ServiceCallback<Models.DiagnosticAnalysis>): void;
  executeSiteAnalysisSlot(resourceGroupName: string, siteName: string, diagnosticCategory: string, analysisName: string, slot: string, options?: Models.DiagnosticsExecuteSiteAnalysisSlotOptionalParams | msRest.ServiceCallback<Models.DiagnosticAnalysis>, callback?: msRest.ServiceCallback<Models.DiagnosticAnalysis>): Promise<Models.DiagnosticsExecuteSiteAnalysisSlotResponse> {
    return this.client.sendOperationRequest(
      {
        resourceGroupName,
        siteName,
        diagnosticCategory,
        analysisName,
        slot,
        options
      },
      executeSiteAnalysisSlotOperationSpec,
      callback) as Promise<Models.DiagnosticsExecuteSiteAnalysisSlotResponse>;
  }

  /**
   * Description for Get Detectors
   * @summary Get Detectors
   * @param resourceGroupName Name of the resource group to which the resource belongs.
   * @param siteName Site Name
   * @param diagnosticCategory Diagnostic Category
   * @param slot Slot Name
   * @param [options] The optional parameters
   * @returns Promise<Models.DiagnosticsListSiteDetectorsSlotResponse>
   */
  listSiteDetectorsSlot(resourceGroupName: string, siteName: string, diagnosticCategory: string, slot: string, options?: msRest.RequestOptionsBase): Promise<Models.DiagnosticsListSiteDetectorsSlotResponse>;
  /**
   * @param resourceGroupName Name of the resource group to which the resource belongs.
   * @param siteName Site Name
   * @param diagnosticCategory Diagnostic Category
   * @param slot Slot Name
   * @param callback The callback
   */
  listSiteDetectorsSlot(resourceGroupName: string, siteName: string, diagnosticCategory: string, slot: string, callback: msRest.ServiceCallback<Models.DiagnosticDetectorCollection>): void;
  /**
   * @param resourceGroupName Name of the resource group to which the resource belongs.
   * @param siteName Site Name
   * @param diagnosticCategory Diagnostic Category
   * @param slot Slot Name
   * @param options The optional parameters
   * @param callback The callback
   */
  listSiteDetectorsSlot(resourceGroupName: string, siteName: string, diagnosticCategory: string, slot: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.DiagnosticDetectorCollection>): void;
  listSiteDetectorsSlot(resourceGroupName: string, siteName: string, diagnosticCategory: string, slot: string, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<Models.DiagnosticDetectorCollection>, callback?: msRest.ServiceCallback<Models.DiagnosticDetectorCollection>): Promise<Models.DiagnosticsListSiteDetectorsSlotResponse> {
    return this.client.sendOperationRequest(
      {
        resourceGroupName,
        siteName,
        diagnosticCategory,
        slot,
        options
      },
      listSiteDetectorsSlotOperationSpec,
      callback) as Promise<Models.DiagnosticsListSiteDetectorsSlotResponse>;
  }

  /**
   * Description for Get Detector
   * @summary Get Detector
   * @param resourceGroupName Name of the resource group to which the resource belongs.
   * @param siteName Site Name
   * @param diagnosticCategory Diagnostic Category
   * @param detectorName Detector Name
   * @param slot Slot Name
   * @param [options] The optional parameters
   * @returns Promise<Models.DiagnosticsGetSiteDetectorSlotResponse>
   */
  getSiteDetectorSlot(resourceGroupName: string, siteName: string, diagnosticCategory: string, detectorName: string, slot: string, options?: msRest.RequestOptionsBase): Promise<Models.DiagnosticsGetSiteDetectorSlotResponse>;
  /**
   * @param resourceGroupName Name of the resource group to which the resource belongs.
   * @param siteName Site Name
   * @param diagnosticCategory Diagnostic Category
   * @param detectorName Detector Name
   * @param slot Slot Name
   * @param callback The callback
   */
  getSiteDetectorSlot(resourceGroupName: string, siteName: string, diagnosticCategory: string, detectorName: string, slot: string, callback: msRest.ServiceCallback<Models.DetectorDefinition>): void;
  /**
   * @param resourceGroupName Name of the resource group to which the resource belongs.
   * @param siteName Site Name
   * @param diagnosticCategory Diagnostic Category
   * @param detectorName Detector Name
   * @param slot Slot Name
   * @param options The optional parameters
   * @param callback The callback
   */
  getSiteDetectorSlot(resourceGroupName: string, siteName: string, diagnosticCategory: string, detectorName: string, slot: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.DetectorDefinition>): void;
  getSiteDetectorSlot(resourceGroupName: string, siteName: string, diagnosticCategory: string, detectorName: string, slot: string, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<Models.DetectorDefinition>, callback?: msRest.ServiceCallback<Models.DetectorDefinition>): Promise<Models.DiagnosticsGetSiteDetectorSlotResponse> {
    return this.client.sendOperationRequest(
      {
        resourceGroupName,
        siteName,
        diagnosticCategory,
        detectorName,
        slot,
        options
      },
      getSiteDetectorSlotOperationSpec,
      callback) as Promise<Models.DiagnosticsGetSiteDetectorSlotResponse>;
  }

  /**
   * Description for Execute Detector
   * @summary Execute Detector
   * @param resourceGroupName Name of the resource group to which the resource belongs.
   * @param siteName Site Name
   * @param detectorName Detector Resource Name
   * @param diagnosticCategory Category Name
   * @param slot Slot Name
   * @param [options] The optional parameters
   * @returns Promise<Models.DiagnosticsExecuteSiteDetectorSlotResponse>
   */
  executeSiteDetectorSlot(resourceGroupName: string, siteName: string, detectorName: string, diagnosticCategory: string, slot: string, options?: Models.DiagnosticsExecuteSiteDetectorSlotOptionalParams): Promise<Models.DiagnosticsExecuteSiteDetectorSlotResponse>;
  /**
   * @param resourceGroupName Name of the resource group to which the resource belongs.
   * @param siteName Site Name
   * @param detectorName Detector Resource Name
   * @param diagnosticCategory Category Name
   * @param slot Slot Name
   * @param callback The callback
   */
  executeSiteDetectorSlot(resourceGroupName: string, siteName: string, detectorName: string, diagnosticCategory: string, slot: string, callback: msRest.ServiceCallback<Models.DiagnosticDetectorResponse>): void;
  /**
   * @param resourceGroupName Name of the resource group to which the resource belongs.
   * @param siteName Site Name
   * @param detectorName Detector Resource Name
   * @param diagnosticCategory Category Name
   * @param slot Slot Name
   * @param options The optional parameters
   * @param callback The callback
   */
  executeSiteDetectorSlot(resourceGroupName: string, siteName: string, detectorName: string, diagnosticCategory: string, slot: string, options: Models.DiagnosticsExecuteSiteDetectorSlotOptionalParams, callback: msRest.ServiceCallback<Models.DiagnosticDetectorResponse>): void;
  executeSiteDetectorSlot(resourceGroupName: string, siteName: string, detectorName: string, diagnosticCategory: string, slot: string, options?: Models.DiagnosticsExecuteSiteDetectorSlotOptionalParams | msRest.ServiceCallback<Models.DiagnosticDetectorResponse>, callback?: msRest.ServiceCallback<Models.DiagnosticDetectorResponse>): Promise<Models.DiagnosticsExecuteSiteDetectorSlotResponse> {
    return this.client.sendOperationRequest(
      {
        resourceGroupName,
        siteName,
        detectorName,
        diagnosticCategory,
        slot,
        options
      },
      executeSiteDetectorSlotOperationSpec,
      callback) as Promise<Models.DiagnosticsExecuteSiteDetectorSlotResponse>;
  }

  /**
   * Description for List Hosting Environment Detector Responses
   * @summary List Hosting Environment Detector Responses
   * @param nextPageLink The NextLink from the previous successful call to List operation.
   * @param [options] The optional parameters
   * @returns Promise<Models.DiagnosticsListHostingEnvironmentDetectorResponsesNextResponse>
   */
  listHostingEnvironmentDetectorResponsesNext(nextPageLink: string, options?: msRest.RequestOptionsBase): Promise<Models.DiagnosticsListHostingEnvironmentDetectorResponsesNextResponse>;
  /**
   * @param nextPageLink The NextLink from the previous successful call to List operation.
   * @param callback The callback
   */
  listHostingEnvironmentDetectorResponsesNext(nextPageLink: string, callback: msRest.ServiceCallback<Models.DetectorResponseCollection>): void;
  /**
   * @param nextPageLink The NextLink from the previous successful call to List operation.
   * @param options The optional parameters
   * @param callback The callback
   */
  listHostingEnvironmentDetectorResponsesNext(nextPageLink: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.DetectorResponseCollection>): void;
  listHostingEnvironmentDetectorResponsesNext(nextPageLink: string, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<Models.DetectorResponseCollection>, callback?: msRest.ServiceCallback<Models.DetectorResponseCollection>): Promise<Models.DiagnosticsListHostingEnvironmentDetectorResponsesNextResponse> {
    return this.client.sendOperationRequest(
      {
        nextPageLink,
        options
      },
      listHostingEnvironmentDetectorResponsesNextOperationSpec,
      callback) as Promise<Models.DiagnosticsListHostingEnvironmentDetectorResponsesNextResponse>;
  }

  /**
   * Description for List Site Detector Responses
   * @summary List Site Detector Responses
   * @param nextPageLink The NextLink from the previous successful call to List operation.
   * @param [options] The optional parameters
   * @returns Promise<Models.DiagnosticsListSiteDetectorResponsesNextResponse>
   */
  listSiteDetectorResponsesNext(nextPageLink: string, options?: msRest.RequestOptionsBase): Promise<Models.DiagnosticsListSiteDetectorResponsesNextResponse>;
  /**
   * @param nextPageLink The NextLink from the previous successful call to List operation.
   * @param callback The callback
   */
  listSiteDetectorResponsesNext(nextPageLink: string, callback: msRest.ServiceCallback<Models.DetectorResponseCollection>): void;
  /**
   * @param nextPageLink The NextLink from the previous successful call to List operation.
   * @param options The optional parameters
   * @param callback The callback
   */
  listSiteDetectorResponsesNext(nextPageLink: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.DetectorResponseCollection>): void;
  listSiteDetectorResponsesNext(nextPageLink: string, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<Models.DetectorResponseCollection>, callback?: msRest.ServiceCallback<Models.DetectorResponseCollection>): Promise<Models.DiagnosticsListSiteDetectorResponsesNextResponse> {
    return this.client.sendOperationRequest(
      {
        nextPageLink,
        options
      },
      listSiteDetectorResponsesNextOperationSpec,
      callback) as Promise<Models.DiagnosticsListSiteDetectorResponsesNextResponse>;
  }

  /**
   * Description for Get Diagnostics Categories
   * @summary Get Diagnostics Categories
   * @param nextPageLink The NextLink from the previous successful call to List operation.
   * @param [options] The optional parameters
   * @returns Promise<Models.DiagnosticsListSiteDiagnosticCategoriesNextResponse>
   */
  listSiteDiagnosticCategoriesNext(nextPageLink: string, options?: msRest.RequestOptionsBase): Promise<Models.DiagnosticsListSiteDiagnosticCategoriesNextResponse>;
  /**
   * @param nextPageLink The NextLink from the previous successful call to List operation.
   * @param callback The callback
   */
  listSiteDiagnosticCategoriesNext(nextPageLink: string, callback: msRest.ServiceCallback<Models.DiagnosticCategoryCollection>): void;
  /**
   * @param nextPageLink The NextLink from the previous successful call to List operation.
   * @param options The optional parameters
   * @param callback The callback
   */
  listSiteDiagnosticCategoriesNext(nextPageLink: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.DiagnosticCategoryCollection>): void;
  listSiteDiagnosticCategoriesNext(nextPageLink: string, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<Models.DiagnosticCategoryCollection>, callback?: msRest.ServiceCallback<Models.DiagnosticCategoryCollection>): Promise<Models.DiagnosticsListSiteDiagnosticCategoriesNextResponse> {
    return this.client.sendOperationRequest(
      {
        nextPageLink,
        options
      },
      listSiteDiagnosticCategoriesNextOperationSpec,
      callback) as Promise<Models.DiagnosticsListSiteDiagnosticCategoriesNextResponse>;
  }

  /**
   * Description for Get Site Analyses
   * @summary Get Site Analyses
   * @param nextPageLink The NextLink from the previous successful call to List operation.
   * @param [options] The optional parameters
   * @returns Promise<Models.DiagnosticsListSiteAnalysesNextResponse>
   */
  listSiteAnalysesNext(nextPageLink: string, options?: msRest.RequestOptionsBase): Promise<Models.DiagnosticsListSiteAnalysesNextResponse>;
  /**
   * @param nextPageLink The NextLink from the previous successful call to List operation.
   * @param callback The callback
   */
  listSiteAnalysesNext(nextPageLink: string, callback: msRest.ServiceCallback<Models.DiagnosticAnalysisCollection>): void;
  /**
   * @param nextPageLink The NextLink from the previous successful call to List operation.
   * @param options The optional parameters
   * @param callback The callback
   */
  listSiteAnalysesNext(nextPageLink: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.DiagnosticAnalysisCollection>): void;
  listSiteAnalysesNext(nextPageLink: string, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<Models.DiagnosticAnalysisCollection>, callback?: msRest.ServiceCallback<Models.DiagnosticAnalysisCollection>): Promise<Models.DiagnosticsListSiteAnalysesNextResponse> {
    return this.client.sendOperationRequest(
      {
        nextPageLink,
        options
      },
      listSiteAnalysesNextOperationSpec,
      callback) as Promise<Models.DiagnosticsListSiteAnalysesNextResponse>;
  }

  /**
   * Description for Get Detectors
   * @summary Get Detectors
   * @param nextPageLink The NextLink from the previous successful call to List operation.
   * @param [options] The optional parameters
   * @returns Promise<Models.DiagnosticsListSiteDetectorsNextResponse>
   */
  listSiteDetectorsNext(nextPageLink: string, options?: msRest.RequestOptionsBase): Promise<Models.DiagnosticsListSiteDetectorsNextResponse>;
  /**
   * @param nextPageLink The NextLink from the previous successful call to List operation.
   * @param callback The callback
   */
  listSiteDetectorsNext(nextPageLink: string, callback: msRest.ServiceCallback<Models.DiagnosticDetectorCollection>): void;
  /**
   * @param nextPageLink The NextLink from the previous successful call to List operation.
   * @param options The optional parameters
   * @param callback The callback
   */
  listSiteDetectorsNext(nextPageLink: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.DiagnosticDetectorCollection>): void;
  listSiteDetectorsNext(nextPageLink: string, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<Models.DiagnosticDetectorCollection>, callback?: msRest.ServiceCallback<Models.DiagnosticDetectorCollection>): Promise<Models.DiagnosticsListSiteDetectorsNextResponse> {
    return this.client.sendOperationRequest(
      {
        nextPageLink,
        options
      },
      listSiteDetectorsNextOperationSpec,
      callback) as Promise<Models.DiagnosticsListSiteDetectorsNextResponse>;
  }

  /**
   * Description for List Site Detector Responses
   * @summary List Site Detector Responses
   * @param nextPageLink The NextLink from the previous successful call to List operation.
   * @param [options] The optional parameters
   * @returns Promise<Models.DiagnosticsListSiteDetectorResponsesSlotNextResponse>
   */
  listSiteDetectorResponsesSlotNext(nextPageLink: string, options?: msRest.RequestOptionsBase): Promise<Models.DiagnosticsListSiteDetectorResponsesSlotNextResponse>;
  /**
   * @param nextPageLink The NextLink from the previous successful call to List operation.
   * @param callback The callback
   */
  listSiteDetectorResponsesSlotNext(nextPageLink: string, callback: msRest.ServiceCallback<Models.DetectorResponseCollection>): void;
  /**
   * @param nextPageLink The NextLink from the previous successful call to List operation.
   * @param options The optional parameters
   * @param callback The callback
   */
  listSiteDetectorResponsesSlotNext(nextPageLink: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.DetectorResponseCollection>): void;
  listSiteDetectorResponsesSlotNext(nextPageLink: string, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<Models.DetectorResponseCollection>, callback?: msRest.ServiceCallback<Models.DetectorResponseCollection>): Promise<Models.DiagnosticsListSiteDetectorResponsesSlotNextResponse> {
    return this.client.sendOperationRequest(
      {
        nextPageLink,
        options
      },
      listSiteDetectorResponsesSlotNextOperationSpec,
      callback) as Promise<Models.DiagnosticsListSiteDetectorResponsesSlotNextResponse>;
  }

  /**
   * Description for Get Diagnostics Categories
   * @summary Get Diagnostics Categories
   * @param nextPageLink The NextLink from the previous successful call to List operation.
   * @param [options] The optional parameters
   * @returns Promise<Models.DiagnosticsListSiteDiagnosticCategoriesSlotNextResponse>
   */
  listSiteDiagnosticCategoriesSlotNext(nextPageLink: string, options?: msRest.RequestOptionsBase): Promise<Models.DiagnosticsListSiteDiagnosticCategoriesSlotNextResponse>;
  /**
   * @param nextPageLink The NextLink from the previous successful call to List operation.
   * @param callback The callback
   */
  listSiteDiagnosticCategoriesSlotNext(nextPageLink: string, callback: msRest.ServiceCallback<Models.DiagnosticCategoryCollection>): void;
  /**
   * @param nextPageLink The NextLink from the previous successful call to List operation.
   * @param options The optional parameters
   * @param callback The callback
   */
  listSiteDiagnosticCategoriesSlotNext(nextPageLink: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.DiagnosticCategoryCollection>): void;
  listSiteDiagnosticCategoriesSlotNext(nextPageLink: string, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<Models.DiagnosticCategoryCollection>, callback?: msRest.ServiceCallback<Models.DiagnosticCategoryCollection>): Promise<Models.DiagnosticsListSiteDiagnosticCategoriesSlotNextResponse> {
    return this.client.sendOperationRequest(
      {
        nextPageLink,
        options
      },
      listSiteDiagnosticCategoriesSlotNextOperationSpec,
      callback) as Promise<Models.DiagnosticsListSiteDiagnosticCategoriesSlotNextResponse>;
  }

  /**
   * Description for Get Site Analyses
   * @summary Get Site Analyses
   * @param nextPageLink The NextLink from the previous successful call to List operation.
   * @param [options] The optional parameters
   * @returns Promise<Models.DiagnosticsListSiteAnalysesSlotNextResponse>
   */
  listSiteAnalysesSlotNext(nextPageLink: string, options?: msRest.RequestOptionsBase): Promise<Models.DiagnosticsListSiteAnalysesSlotNextResponse>;
  /**
   * @param nextPageLink The NextLink from the previous successful call to List operation.
   * @param callback The callback
   */
  listSiteAnalysesSlotNext(nextPageLink: string, callback: msRest.ServiceCallback<Models.DiagnosticAnalysisCollection>): void;
  /**
   * @param nextPageLink The NextLink from the previous successful call to List operation.
   * @param options The optional parameters
   * @param callback The callback
   */
  listSiteAnalysesSlotNext(nextPageLink: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.DiagnosticAnalysisCollection>): void;
  listSiteAnalysesSlotNext(nextPageLink: string, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<Models.DiagnosticAnalysisCollection>, callback?: msRest.ServiceCallback<Models.DiagnosticAnalysisCollection>): Promise<Models.DiagnosticsListSiteAnalysesSlotNextResponse> {
    return this.client.sendOperationRequest(
      {
        nextPageLink,
        options
      },
      listSiteAnalysesSlotNextOperationSpec,
      callback) as Promise<Models.DiagnosticsListSiteAnalysesSlotNextResponse>;
  }

  /**
   * Description for Get Detectors
   * @summary Get Detectors
   * @param nextPageLink The NextLink from the previous successful call to List operation.
   * @param [options] The optional parameters
   * @returns Promise<Models.DiagnosticsListSiteDetectorsSlotNextResponse>
   */
  listSiteDetectorsSlotNext(nextPageLink: string, options?: msRest.RequestOptionsBase): Promise<Models.DiagnosticsListSiteDetectorsSlotNextResponse>;
  /**
   * @param nextPageLink The NextLink from the previous successful call to List operation.
   * @param callback The callback
   */
  listSiteDetectorsSlotNext(nextPageLink: string, callback: msRest.ServiceCallback<Models.DiagnosticDetectorCollection>): void;
  /**
   * @param nextPageLink The NextLink from the previous successful call to List operation.
   * @param options The optional parameters
   * @param callback The callback
   */
  listSiteDetectorsSlotNext(nextPageLink: string, options: msRest.RequestOptionsBase, callback: msRest.ServiceCallback<Models.DiagnosticDetectorCollection>): void;
  listSiteDetectorsSlotNext(nextPageLink: string, options?: msRest.RequestOptionsBase | msRest.ServiceCallback<Models.DiagnosticDetectorCollection>, callback?: msRest.ServiceCallback<Models.DiagnosticDetectorCollection>): Promise<Models.DiagnosticsListSiteDetectorsSlotNextResponse> {
    return this.client.sendOperationRequest(
      {
        nextPageLink,
        options
      },
      listSiteDetectorsSlotNextOperationSpec,
      callback) as Promise<Models.DiagnosticsListSiteDetectorsSlotNextResponse>;
  }
}

// Operation Specifications
const serializer = new msRest.Serializer(Mappers);
const listHostingEnvironmentDetectorResponsesOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/hostingEnvironments/{name}/detectors",
  urlParameters: [
    Parameters.resourceGroupName,
    Parameters.name,
    Parameters.subscriptionId
  ],
  queryParameters: [
    Parameters.apiVersion
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    200: {
      bodyMapper: Mappers.DetectorResponseCollection
    },
    default: {
      bodyMapper: Mappers.DefaultErrorResponse
    }
  },
  serializer
};

const getHostingEnvironmentDetectorResponseOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/hostingEnvironments/{name}/detectors/{detectorName}",
  urlParameters: [
    Parameters.resourceGroupName,
    Parameters.name,
    Parameters.detectorName,
    Parameters.subscriptionId
  ],
  queryParameters: [
    Parameters.startTime,
    Parameters.endTime,
    Parameters.timeGrain,
    Parameters.apiVersion
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    200: {
      bodyMapper: Mappers.DetectorResponse
    },
    default: {
      bodyMapper: Mappers.DefaultErrorResponse
    }
  },
  serializer
};

const listSiteDetectorResponsesOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{siteName}/detectors",
  urlParameters: [
    Parameters.resourceGroupName,
    Parameters.siteName,
    Parameters.subscriptionId
  ],
  queryParameters: [
    Parameters.apiVersion
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    200: {
      bodyMapper: Mappers.DetectorResponseCollection
    },
    default: {
      bodyMapper: Mappers.DefaultErrorResponse
    }
  },
  serializer
};

const getSiteDetectorResponseOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{siteName}/detectors/{detectorName}",
  urlParameters: [
    Parameters.resourceGroupName,
    Parameters.siteName,
    Parameters.detectorName,
    Parameters.subscriptionId
  ],
  queryParameters: [
    Parameters.startTime,
    Parameters.endTime,
    Parameters.timeGrain,
    Parameters.apiVersion
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    200: {
      bodyMapper: Mappers.DetectorResponse
    },
    default: {
      bodyMapper: Mappers.DefaultErrorResponse
    }
  },
  serializer
};

const listSiteDiagnosticCategoriesOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{siteName}/diagnostics",
  urlParameters: [
    Parameters.resourceGroupName,
    Parameters.siteName,
    Parameters.subscriptionId
  ],
  queryParameters: [
    Parameters.apiVersion
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    200: {
      bodyMapper: Mappers.DiagnosticCategoryCollection
    },
    default: {
      bodyMapper: Mappers.DefaultErrorResponse
    }
  },
  serializer
};

const getSiteDiagnosticCategoryOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{siteName}/diagnostics/{diagnosticCategory}",
  urlParameters: [
    Parameters.resourceGroupName,
    Parameters.siteName,
    Parameters.diagnosticCategory,
    Parameters.subscriptionId
  ],
  queryParameters: [
    Parameters.apiVersion
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    200: {
      bodyMapper: Mappers.DiagnosticCategory
    },
    default: {
      bodyMapper: Mappers.DefaultErrorResponse
    }
  },
  serializer
};

const listSiteAnalysesOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{siteName}/diagnostics/{diagnosticCategory}/analyses",
  urlParameters: [
    Parameters.resourceGroupName,
    Parameters.siteName,
    Parameters.diagnosticCategory,
    Parameters.subscriptionId
  ],
  queryParameters: [
    Parameters.apiVersion
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    200: {
      bodyMapper: Mappers.DiagnosticAnalysisCollection
    },
    default: {
      bodyMapper: Mappers.DefaultErrorResponse
    }
  },
  serializer
};

const getSiteAnalysisOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{siteName}/diagnostics/{diagnosticCategory}/analyses/{analysisName}",
  urlParameters: [
    Parameters.resourceGroupName,
    Parameters.siteName,
    Parameters.diagnosticCategory,
    Parameters.analysisName,
    Parameters.subscriptionId
  ],
  queryParameters: [
    Parameters.apiVersion
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    200: {
      bodyMapper: Mappers.AnalysisDefinition
    },
    default: {
      bodyMapper: Mappers.DefaultErrorResponse
    }
  },
  serializer
};

const executeSiteAnalysisOperationSpec: msRest.OperationSpec = {
  httpMethod: "POST",
  path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{siteName}/diagnostics/{diagnosticCategory}/analyses/{analysisName}/execute",
  urlParameters: [
    Parameters.resourceGroupName,
    Parameters.siteName,
    Parameters.diagnosticCategory,
    Parameters.analysisName,
    Parameters.subscriptionId
  ],
  queryParameters: [
    Parameters.startTime,
    Parameters.endTime,
    Parameters.timeGrain,
    Parameters.apiVersion
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    200: {
      bodyMapper: Mappers.DiagnosticAnalysis
    },
    default: {
      bodyMapper: Mappers.DefaultErrorResponse
    }
  },
  serializer
};

const listSiteDetectorsOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{siteName}/diagnostics/{diagnosticCategory}/detectors",
  urlParameters: [
    Parameters.resourceGroupName,
    Parameters.siteName,
    Parameters.diagnosticCategory,
    Parameters.subscriptionId
  ],
  queryParameters: [
    Parameters.apiVersion
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    200: {
      bodyMapper: Mappers.DiagnosticDetectorCollection
    },
    default: {
      bodyMapper: Mappers.DefaultErrorResponse
    }
  },
  serializer
};

const getSiteDetectorOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{siteName}/diagnostics/{diagnosticCategory}/detectors/{detectorName}",
  urlParameters: [
    Parameters.resourceGroupName,
    Parameters.siteName,
    Parameters.diagnosticCategory,
    Parameters.detectorName,
    Parameters.subscriptionId
  ],
  queryParameters: [
    Parameters.apiVersion
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    200: {
      bodyMapper: Mappers.DetectorDefinition
    },
    default: {
      bodyMapper: Mappers.DefaultErrorResponse
    }
  },
  serializer
};

const executeSiteDetectorOperationSpec: msRest.OperationSpec = {
  httpMethod: "POST",
  path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{siteName}/diagnostics/{diagnosticCategory}/detectors/{detectorName}/execute",
  urlParameters: [
    Parameters.resourceGroupName,
    Parameters.siteName,
    Parameters.detectorName,
    Parameters.diagnosticCategory,
    Parameters.subscriptionId
  ],
  queryParameters: [
    Parameters.startTime,
    Parameters.endTime,
    Parameters.timeGrain,
    Parameters.apiVersion
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    200: {
      bodyMapper: Mappers.DiagnosticDetectorResponse
    },
    default: {
      bodyMapper: Mappers.DefaultErrorResponse
    }
  },
  serializer
};

const listSiteDetectorResponsesSlotOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{siteName}/slots/{slot}/detectors",
  urlParameters: [
    Parameters.resourceGroupName,
    Parameters.siteName,
    Parameters.slot,
    Parameters.subscriptionId
  ],
  queryParameters: [
    Parameters.apiVersion
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    200: {
      bodyMapper: Mappers.DetectorResponseCollection
    },
    default: {
      bodyMapper: Mappers.DefaultErrorResponse
    }
  },
  serializer
};

const getSiteDetectorResponseSlotOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{siteName}/slots/{slot}/detectors/{detectorName}",
  urlParameters: [
    Parameters.resourceGroupName,
    Parameters.siteName,
    Parameters.detectorName,
    Parameters.slot,
    Parameters.subscriptionId
  ],
  queryParameters: [
    Parameters.startTime,
    Parameters.endTime,
    Parameters.timeGrain,
    Parameters.apiVersion
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    200: {
      bodyMapper: Mappers.DetectorResponse
    },
    default: {
      bodyMapper: Mappers.DefaultErrorResponse
    }
  },
  serializer
};

const listSiteDiagnosticCategoriesSlotOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{siteName}/slots/{slot}/diagnostics",
  urlParameters: [
    Parameters.resourceGroupName,
    Parameters.siteName,
    Parameters.slot,
    Parameters.subscriptionId
  ],
  queryParameters: [
    Parameters.apiVersion
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    200: {
      bodyMapper: Mappers.DiagnosticCategoryCollection
    },
    default: {
      bodyMapper: Mappers.DefaultErrorResponse
    }
  },
  serializer
};

const getSiteDiagnosticCategorySlotOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{siteName}/slots/{slot}/diagnostics/{diagnosticCategory}",
  urlParameters: [
    Parameters.resourceGroupName,
    Parameters.siteName,
    Parameters.diagnosticCategory,
    Parameters.slot,
    Parameters.subscriptionId
  ],
  queryParameters: [
    Parameters.apiVersion
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    200: {
      bodyMapper: Mappers.DiagnosticCategory
    },
    default: {
      bodyMapper: Mappers.DefaultErrorResponse
    }
  },
  serializer
};

const listSiteAnalysesSlotOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{siteName}/slots/{slot}/diagnostics/{diagnosticCategory}/analyses",
  urlParameters: [
    Parameters.resourceGroupName,
    Parameters.siteName,
    Parameters.diagnosticCategory,
    Parameters.slot,
    Parameters.subscriptionId
  ],
  queryParameters: [
    Parameters.apiVersion
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    200: {
      bodyMapper: Mappers.DiagnosticAnalysisCollection
    },
    default: {
      bodyMapper: Mappers.DefaultErrorResponse
    }
  },
  serializer
};

const getSiteAnalysisSlotOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{siteName}/slots/{slot}/diagnostics/{diagnosticCategory}/analyses/{analysisName}",
  urlParameters: [
    Parameters.resourceGroupName,
    Parameters.siteName,
    Parameters.diagnosticCategory,
    Parameters.analysisName,
    Parameters.slot,
    Parameters.subscriptionId
  ],
  queryParameters: [
    Parameters.apiVersion
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    200: {
      bodyMapper: Mappers.AnalysisDefinition
    },
    default: {
      bodyMapper: Mappers.DefaultErrorResponse
    }
  },
  serializer
};

const executeSiteAnalysisSlotOperationSpec: msRest.OperationSpec = {
  httpMethod: "POST",
  path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{siteName}/slots/{slot}/diagnostics/{diagnosticCategory}/analyses/{analysisName}/execute",
  urlParameters: [
    Parameters.resourceGroupName,
    Parameters.siteName,
    Parameters.diagnosticCategory,
    Parameters.analysisName,
    Parameters.slot,
    Parameters.subscriptionId
  ],
  queryParameters: [
    Parameters.startTime,
    Parameters.endTime,
    Parameters.timeGrain,
    Parameters.apiVersion
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    200: {
      bodyMapper: Mappers.DiagnosticAnalysis
    },
    default: {
      bodyMapper: Mappers.DefaultErrorResponse
    }
  },
  serializer
};

const listSiteDetectorsSlotOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{siteName}/slots/{slot}/diagnostics/{diagnosticCategory}/detectors",
  urlParameters: [
    Parameters.resourceGroupName,
    Parameters.siteName,
    Parameters.diagnosticCategory,
    Parameters.slot,
    Parameters.subscriptionId
  ],
  queryParameters: [
    Parameters.apiVersion
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    200: {
      bodyMapper: Mappers.DiagnosticDetectorCollection
    },
    default: {
      bodyMapper: Mappers.DefaultErrorResponse
    }
  },
  serializer
};

const getSiteDetectorSlotOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{siteName}/slots/{slot}/diagnostics/{diagnosticCategory}/detectors/{detectorName}",
  urlParameters: [
    Parameters.resourceGroupName,
    Parameters.siteName,
    Parameters.diagnosticCategory,
    Parameters.detectorName,
    Parameters.slot,
    Parameters.subscriptionId
  ],
  queryParameters: [
    Parameters.apiVersion
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    200: {
      bodyMapper: Mappers.DetectorDefinition
    },
    default: {
      bodyMapper: Mappers.DefaultErrorResponse
    }
  },
  serializer
};

const executeSiteDetectorSlotOperationSpec: msRest.OperationSpec = {
  httpMethod: "POST",
  path: "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Web/sites/{siteName}/slots/{slot}/diagnostics/{diagnosticCategory}/detectors/{detectorName}/execute",
  urlParameters: [
    Parameters.resourceGroupName,
    Parameters.siteName,
    Parameters.detectorName,
    Parameters.diagnosticCategory,
    Parameters.slot,
    Parameters.subscriptionId
  ],
  queryParameters: [
    Parameters.startTime,
    Parameters.endTime,
    Parameters.timeGrain,
    Parameters.apiVersion
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    200: {
      bodyMapper: Mappers.DiagnosticDetectorResponse
    },
    default: {
      bodyMapper: Mappers.DefaultErrorResponse
    }
  },
  serializer
};

const listHostingEnvironmentDetectorResponsesNextOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  baseUrl: "https://management.azure.com",
  path: "{nextLink}",
  urlParameters: [
    Parameters.nextPageLink
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    200: {
      bodyMapper: Mappers.DetectorResponseCollection
    },
    default: {
      bodyMapper: Mappers.DefaultErrorResponse
    }
  },
  serializer
};

const listSiteDetectorResponsesNextOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  baseUrl: "https://management.azure.com",
  path: "{nextLink}",
  urlParameters: [
    Parameters.nextPageLink
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    200: {
      bodyMapper: Mappers.DetectorResponseCollection
    },
    default: {
      bodyMapper: Mappers.DefaultErrorResponse
    }
  },
  serializer
};

const listSiteDiagnosticCategoriesNextOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  baseUrl: "https://management.azure.com",
  path: "{nextLink}",
  urlParameters: [
    Parameters.nextPageLink
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    200: {
      bodyMapper: Mappers.DiagnosticCategoryCollection
    },
    default: {
      bodyMapper: Mappers.DefaultErrorResponse
    }
  },
  serializer
};

const listSiteAnalysesNextOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  baseUrl: "https://management.azure.com",
  path: "{nextLink}",
  urlParameters: [
    Parameters.nextPageLink
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    200: {
      bodyMapper: Mappers.DiagnosticAnalysisCollection
    },
    default: {
      bodyMapper: Mappers.DefaultErrorResponse
    }
  },
  serializer
};

const listSiteDetectorsNextOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  baseUrl: "https://management.azure.com",
  path: "{nextLink}",
  urlParameters: [
    Parameters.nextPageLink
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    200: {
      bodyMapper: Mappers.DiagnosticDetectorCollection
    },
    default: {
      bodyMapper: Mappers.DefaultErrorResponse
    }
  },
  serializer
};

const listSiteDetectorResponsesSlotNextOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  baseUrl: "https://management.azure.com",
  path: "{nextLink}",
  urlParameters: [
    Parameters.nextPageLink
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    200: {
      bodyMapper: Mappers.DetectorResponseCollection
    },
    default: {
      bodyMapper: Mappers.DefaultErrorResponse
    }
  },
  serializer
};

const listSiteDiagnosticCategoriesSlotNextOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  baseUrl: "https://management.azure.com",
  path: "{nextLink}",
  urlParameters: [
    Parameters.nextPageLink
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    200: {
      bodyMapper: Mappers.DiagnosticCategoryCollection
    },
    default: {
      bodyMapper: Mappers.DefaultErrorResponse
    }
  },
  serializer
};

const listSiteAnalysesSlotNextOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  baseUrl: "https://management.azure.com",
  path: "{nextLink}",
  urlParameters: [
    Parameters.nextPageLink
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    200: {
      bodyMapper: Mappers.DiagnosticAnalysisCollection
    },
    default: {
      bodyMapper: Mappers.DefaultErrorResponse
    }
  },
  serializer
};

const listSiteDetectorsSlotNextOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  baseUrl: "https://management.azure.com",
  path: "{nextLink}",
  urlParameters: [
    Parameters.nextPageLink
  ],
  headerParameters: [
    Parameters.acceptLanguage
  ],
  responses: {
    200: {
      bodyMapper: Mappers.DiagnosticDetectorCollection
    },
    default: {
      bodyMapper: Mappers.DefaultErrorResponse
    }
  },
  serializer
};
