/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */

import * as coreClient from "@azure/core-client";

export const CertificateCollection: coreClient.CompositeMapper = {
  serializedName: "CertificateCollection",
  type: {
    name: "Composite",
    className: "CertificateCollection",
    modelProperties: {
      value: {
        serializedName: "value",
        required: true,
        xmlName: "value",
        xmlElementName: "Certificate",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "Certificate"
            }
          }
        }
      },
      nextLink: {
        serializedName: "nextLink",
        readOnly: true,
        xmlName: "nextLink",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const HostingEnvironmentProfile: coreClient.CompositeMapper = {
  serializedName: "HostingEnvironmentProfile",
  type: {
    name: "Composite",
    className: "HostingEnvironmentProfile",
    modelProperties: {
      id: {
        serializedName: "id",
        xmlName: "id",
        type: {
          name: "String"
        }
      },
      name: {
        serializedName: "name",
        readOnly: true,
        xmlName: "name",
        type: {
          name: "String"
        }
      },
      type: {
        serializedName: "type",
        readOnly: true,
        xmlName: "type",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const Resource: coreClient.CompositeMapper = {
  serializedName: "Resource",
  type: {
    name: "Composite",
    className: "Resource",
    modelProperties: {
      id: {
        serializedName: "id",
        readOnly: true,
        xmlName: "id",
        type: {
          name: "String"
        }
      },
      name: {
        serializedName: "name",
        readOnly: true,
        xmlName: "name",
        type: {
          name: "String"
        }
      },
      kind: {
        serializedName: "kind",
        xmlName: "kind",
        type: {
          name: "String"
        }
      },
      location: {
        serializedName: "location",
        required: true,
        xmlName: "location",
        type: {
          name: "String"
        }
      },
      type: {
        serializedName: "type",
        readOnly: true,
        xmlName: "type",
        type: {
          name: "String"
        }
      },
      tags: {
        serializedName: "tags",
        xmlName: "tags",
        type: {
          name: "Dictionary",
          value: { type: { name: "String" } }
        }
      }
    }
  }
};

export const DefaultErrorResponse: coreClient.CompositeMapper = {
  serializedName: "DefaultErrorResponse",
  type: {
    name: "Composite",
    className: "DefaultErrorResponse",
    modelProperties: {
      error: {
        serializedName: "error",
        xmlName: "error",
        type: {
          name: "Composite",
          className: "DefaultErrorResponseError"
        }
      }
    }
  }
};

export const DefaultErrorResponseError: coreClient.CompositeMapper = {
  serializedName: "DefaultErrorResponseError",
  type: {
    name: "Composite",
    className: "DefaultErrorResponseError",
    modelProperties: {
      code: {
        serializedName: "code",
        readOnly: true,
        xmlName: "code",
        type: {
          name: "String"
        }
      },
      message: {
        serializedName: "message",
        readOnly: true,
        xmlName: "message",
        type: {
          name: "String"
        }
      },
      target: {
        serializedName: "target",
        readOnly: true,
        xmlName: "target",
        type: {
          name: "String"
        }
      },
      details: {
        serializedName: "details",
        xmlName: "details",
        xmlElementName: "DefaultErrorResponseErrorDetailsItem",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "DefaultErrorResponseErrorDetailsItem"
            }
          }
        }
      },
      innererror: {
        serializedName: "innererror",
        readOnly: true,
        xmlName: "innererror",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const DefaultErrorResponseErrorDetailsItem: coreClient.CompositeMapper = {
  serializedName: "DefaultErrorResponseErrorDetailsItem",
  type: {
    name: "Composite",
    className: "DefaultErrorResponseErrorDetailsItem",
    modelProperties: {
      code: {
        serializedName: "code",
        readOnly: true,
        xmlName: "code",
        type: {
          name: "String"
        }
      },
      message: {
        serializedName: "message",
        readOnly: true,
        xmlName: "message",
        type: {
          name: "String"
        }
      },
      target: {
        serializedName: "target",
        readOnly: true,
        xmlName: "target",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const ProxyOnlyResource: coreClient.CompositeMapper = {
  serializedName: "ProxyOnlyResource",
  type: {
    name: "Composite",
    className: "ProxyOnlyResource",
    modelProperties: {
      id: {
        serializedName: "id",
        readOnly: true,
        xmlName: "id",
        type: {
          name: "String"
        }
      },
      name: {
        serializedName: "name",
        readOnly: true,
        xmlName: "name",
        type: {
          name: "String"
        }
      },
      kind: {
        serializedName: "kind",
        xmlName: "kind",
        type: {
          name: "String"
        }
      },
      type: {
        serializedName: "type",
        readOnly: true,
        xmlName: "type",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const WebAppCollection: coreClient.CompositeMapper = {
  serializedName: "WebAppCollection",
  type: {
    name: "Composite",
    className: "WebAppCollection",
    modelProperties: {
      value: {
        serializedName: "value",
        required: true,
        xmlName: "value",
        xmlElementName: "Site",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "Site"
            }
          }
        }
      },
      nextLink: {
        serializedName: "nextLink",
        readOnly: true,
        xmlName: "nextLink",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const HostNameSslState: coreClient.CompositeMapper = {
  serializedName: "HostNameSslState",
  type: {
    name: "Composite",
    className: "HostNameSslState",
    modelProperties: {
      name: {
        serializedName: "name",
        xmlName: "name",
        type: {
          name: "String"
        }
      },
      sslState: {
        serializedName: "sslState",
        xmlName: "sslState",
        type: {
          name: "Enum",
          allowedValues: ["Disabled", "SniEnabled", "IpBasedEnabled"]
        }
      },
      virtualIP: {
        serializedName: "virtualIP",
        xmlName: "virtualIP",
        type: {
          name: "String"
        }
      },
      thumbprint: {
        serializedName: "thumbprint",
        xmlName: "thumbprint",
        type: {
          name: "String"
        }
      },
      toUpdate: {
        serializedName: "toUpdate",
        xmlName: "toUpdate",
        type: {
          name: "Boolean"
        }
      },
      hostType: {
        serializedName: "hostType",
        xmlName: "hostType",
        type: {
          name: "Enum",
          allowedValues: ["Standard", "Repository"]
        }
      }
    }
  }
};

export const SiteConfig: coreClient.CompositeMapper = {
  serializedName: "SiteConfig",
  type: {
    name: "Composite",
    className: "SiteConfig",
    modelProperties: {
      numberOfWorkers: {
        serializedName: "numberOfWorkers",
        xmlName: "numberOfWorkers",
        type: {
          name: "Number"
        }
      },
      defaultDocuments: {
        serializedName: "defaultDocuments",
        xmlName: "defaultDocuments",
        xmlElementName: "SiteConfigDefaultDocumentsItem",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "String"
            }
          }
        }
      },
      netFrameworkVersion: {
        defaultValue: "v4.6",
        serializedName: "netFrameworkVersion",
        xmlName: "netFrameworkVersion",
        type: {
          name: "String"
        }
      },
      phpVersion: {
        serializedName: "phpVersion",
        xmlName: "phpVersion",
        type: {
          name: "String"
        }
      },
      pythonVersion: {
        serializedName: "pythonVersion",
        xmlName: "pythonVersion",
        type: {
          name: "String"
        }
      },
      nodeVersion: {
        serializedName: "nodeVersion",
        xmlName: "nodeVersion",
        type: {
          name: "String"
        }
      },
      linuxFxVersion: {
        serializedName: "linuxFxVersion",
        xmlName: "linuxFxVersion",
        type: {
          name: "String"
        }
      },
      windowsFxVersion: {
        serializedName: "windowsFxVersion",
        xmlName: "windowsFxVersion",
        type: {
          name: "String"
        }
      },
      requestTracingEnabled: {
        serializedName: "requestTracingEnabled",
        xmlName: "requestTracingEnabled",
        type: {
          name: "Boolean"
        }
      },
      requestTracingExpirationTime: {
        serializedName: "requestTracingExpirationTime",
        xmlName: "requestTracingExpirationTime",
        type: {
          name: "DateTime"
        }
      },
      remoteDebuggingEnabled: {
        serializedName: "remoteDebuggingEnabled",
        xmlName: "remoteDebuggingEnabled",
        type: {
          name: "Boolean"
        }
      },
      remoteDebuggingVersion: {
        serializedName: "remoteDebuggingVersion",
        xmlName: "remoteDebuggingVersion",
        type: {
          name: "String"
        }
      },
      httpLoggingEnabled: {
        serializedName: "httpLoggingEnabled",
        xmlName: "httpLoggingEnabled",
        type: {
          name: "Boolean"
        }
      },
      logsDirectorySizeLimit: {
        serializedName: "logsDirectorySizeLimit",
        xmlName: "logsDirectorySizeLimit",
        type: {
          name: "Number"
        }
      },
      detailedErrorLoggingEnabled: {
        serializedName: "detailedErrorLoggingEnabled",
        xmlName: "detailedErrorLoggingEnabled",
        type: {
          name: "Boolean"
        }
      },
      publishingUsername: {
        serializedName: "publishingUsername",
        xmlName: "publishingUsername",
        type: {
          name: "String"
        }
      },
      appSettings: {
        serializedName: "appSettings",
        xmlName: "appSettings",
        xmlElementName: "NameValuePair",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "NameValuePair"
            }
          }
        }
      },
      azureStorageAccounts: {
        serializedName: "azureStorageAccounts",
        xmlName: "azureStorageAccounts",
        type: {
          name: "Dictionary",
          value: {
            type: { name: "Composite", className: "AzureStorageInfoValue" }
          }
        }
      },
      connectionStrings: {
        serializedName: "connectionStrings",
        xmlName: "connectionStrings",
        xmlElementName: "ConnStringInfo",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "ConnStringInfo"
            }
          }
        }
      },
      machineKey: {
        serializedName: "machineKey",
        xmlName: "machineKey",
        type: {
          name: "Composite",
          className: "SiteMachineKey"
        }
      },
      handlerMappings: {
        serializedName: "handlerMappings",
        xmlName: "handlerMappings",
        xmlElementName: "HandlerMapping",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "HandlerMapping"
            }
          }
        }
      },
      documentRoot: {
        serializedName: "documentRoot",
        xmlName: "documentRoot",
        type: {
          name: "String"
        }
      },
      scmType: {
        serializedName: "scmType",
        xmlName: "scmType",
        type: {
          name: "String"
        }
      },
      use32BitWorkerProcess: {
        serializedName: "use32BitWorkerProcess",
        xmlName: "use32BitWorkerProcess",
        type: {
          name: "Boolean"
        }
      },
      webSocketsEnabled: {
        serializedName: "webSocketsEnabled",
        xmlName: "webSocketsEnabled",
        type: {
          name: "Boolean"
        }
      },
      alwaysOn: {
        serializedName: "alwaysOn",
        xmlName: "alwaysOn",
        type: {
          name: "Boolean"
        }
      },
      javaVersion: {
        serializedName: "javaVersion",
        xmlName: "javaVersion",
        type: {
          name: "String"
        }
      },
      javaContainer: {
        serializedName: "javaContainer",
        xmlName: "javaContainer",
        type: {
          name: "String"
        }
      },
      javaContainerVersion: {
        serializedName: "javaContainerVersion",
        xmlName: "javaContainerVersion",
        type: {
          name: "String"
        }
      },
      appCommandLine: {
        serializedName: "appCommandLine",
        xmlName: "appCommandLine",
        type: {
          name: "String"
        }
      },
      managedPipelineMode: {
        serializedName: "managedPipelineMode",
        xmlName: "managedPipelineMode",
        type: {
          name: "Enum",
          allowedValues: ["Integrated", "Classic"]
        }
      },
      virtualApplications: {
        serializedName: "virtualApplications",
        xmlName: "virtualApplications",
        xmlElementName: "VirtualApplication",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "VirtualApplication"
            }
          }
        }
      },
      loadBalancing: {
        serializedName: "loadBalancing",
        xmlName: "loadBalancing",
        type: {
          name: "Enum",
          allowedValues: [
            "WeightedRoundRobin",
            "LeastRequests",
            "LeastResponseTime",
            "WeightedTotalTraffic",
            "RequestHash"
          ]
        }
      },
      experiments: {
        serializedName: "experiments",
        xmlName: "experiments",
        type: {
          name: "Composite",
          className: "Experiments"
        }
      },
      limits: {
        serializedName: "limits",
        xmlName: "limits",
        type: {
          name: "Composite",
          className: "SiteLimits"
        }
      },
      autoHealEnabled: {
        serializedName: "autoHealEnabled",
        xmlName: "autoHealEnabled",
        type: {
          name: "Boolean"
        }
      },
      autoHealRules: {
        serializedName: "autoHealRules",
        xmlName: "autoHealRules",
        type: {
          name: "Composite",
          className: "AutoHealRules"
        }
      },
      tracingOptions: {
        serializedName: "tracingOptions",
        xmlName: "tracingOptions",
        type: {
          name: "String"
        }
      },
      vnetName: {
        serializedName: "vnetName",
        xmlName: "vnetName",
        type: {
          name: "String"
        }
      },
      cors: {
        serializedName: "cors",
        xmlName: "cors",
        type: {
          name: "Composite",
          className: "CorsSettings"
        }
      },
      push: {
        serializedName: "push",
        xmlName: "push",
        type: {
          name: "Composite",
          className: "PushSettings"
        }
      },
      apiDefinition: {
        serializedName: "apiDefinition",
        xmlName: "apiDefinition",
        type: {
          name: "Composite",
          className: "ApiDefinitionInfo"
        }
      },
      autoSwapSlotName: {
        serializedName: "autoSwapSlotName",
        xmlName: "autoSwapSlotName",
        type: {
          name: "String"
        }
      },
      localMySqlEnabled: {
        defaultValue: false,
        serializedName: "localMySqlEnabled",
        xmlName: "localMySqlEnabled",
        type: {
          name: "Boolean"
        }
      },
      managedServiceIdentityId: {
        serializedName: "managedServiceIdentityId",
        xmlName: "managedServiceIdentityId",
        type: {
          name: "Number"
        }
      },
      xManagedServiceIdentityId: {
        serializedName: "xManagedServiceIdentityId",
        xmlName: "xManagedServiceIdentityId",
        type: {
          name: "Number"
        }
      },
      ipSecurityRestrictions: {
        serializedName: "ipSecurityRestrictions",
        xmlName: "ipSecurityRestrictions",
        xmlElementName: "IpSecurityRestriction",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "IpSecurityRestriction"
            }
          }
        }
      },
      scmIpSecurityRestrictions: {
        serializedName: "scmIpSecurityRestrictions",
        xmlName: "scmIpSecurityRestrictions",
        xmlElementName: "IpSecurityRestriction",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "IpSecurityRestriction"
            }
          }
        }
      },
      scmIpSecurityRestrictionsUseMain: {
        serializedName: "scmIpSecurityRestrictionsUseMain",
        xmlName: "scmIpSecurityRestrictionsUseMain",
        type: {
          name: "Boolean"
        }
      },
      http20Enabled: {
        defaultValue: true,
        serializedName: "http20Enabled",
        xmlName: "http20Enabled",
        type: {
          name: "Boolean"
        }
      },
      minTlsVersion: {
        serializedName: "minTlsVersion",
        xmlName: "minTlsVersion",
        type: {
          name: "String"
        }
      },
      ftpsState: {
        serializedName: "ftpsState",
        xmlName: "ftpsState",
        type: {
          name: "String"
        }
      },
      reservedInstanceCount: {
        constraints: {
          InclusiveMaximum: 10,
          InclusiveMinimum: 0
        },
        serializedName: "reservedInstanceCount",
        xmlName: "reservedInstanceCount",
        type: {
          name: "Number"
        }
      }
    }
  }
};

export const NameValuePair: coreClient.CompositeMapper = {
  serializedName: "NameValuePair",
  type: {
    name: "Composite",
    className: "NameValuePair",
    modelProperties: {
      name: {
        serializedName: "name",
        xmlName: "name",
        type: {
          name: "String"
        }
      },
      value: {
        serializedName: "value",
        xmlName: "value",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const AzureStorageInfoValue: coreClient.CompositeMapper = {
  serializedName: "AzureStorageInfoValue",
  type: {
    name: "Composite",
    className: "AzureStorageInfoValue",
    modelProperties: {
      type: {
        serializedName: "type",
        xmlName: "type",
        type: {
          name: "Enum",
          allowedValues: ["AzureFiles", "AzureBlob"]
        }
      },
      accountName: {
        serializedName: "accountName",
        xmlName: "accountName",
        type: {
          name: "String"
        }
      },
      shareName: {
        serializedName: "shareName",
        xmlName: "shareName",
        type: {
          name: "String"
        }
      },
      accessKey: {
        serializedName: "accessKey",
        xmlName: "accessKey",
        type: {
          name: "String"
        }
      },
      mountPath: {
        serializedName: "mountPath",
        xmlName: "mountPath",
        type: {
          name: "String"
        }
      },
      state: {
        serializedName: "state",
        readOnly: true,
        xmlName: "state",
        type: {
          name: "Enum",
          allowedValues: ["Ok", "InvalidCredentials", "InvalidShare"]
        }
      }
    }
  }
};

export const ConnStringInfo: coreClient.CompositeMapper = {
  serializedName: "ConnStringInfo",
  type: {
    name: "Composite",
    className: "ConnStringInfo",
    modelProperties: {
      name: {
        serializedName: "name",
        xmlName: "name",
        type: {
          name: "String"
        }
      },
      connectionString: {
        serializedName: "connectionString",
        xmlName: "connectionString",
        type: {
          name: "String"
        }
      },
      type: {
        serializedName: "type",
        xmlName: "type",
        type: {
          name: "Enum",
          allowedValues: [
            "MySql",
            "SQLServer",
            "SQLAzure",
            "Custom",
            "NotificationHub",
            "ServiceBus",
            "EventHub",
            "ApiHub",
            "DocDb",
            "RedisCache",
            "PostgreSQL"
          ]
        }
      }
    }
  }
};

export const SiteMachineKey: coreClient.CompositeMapper = {
  serializedName: "SiteMachineKey",
  type: {
    name: "Composite",
    className: "SiteMachineKey",
    modelProperties: {
      validation: {
        serializedName: "validation",
        xmlName: "validation",
        type: {
          name: "String"
        }
      },
      validationKey: {
        serializedName: "validationKey",
        xmlName: "validationKey",
        type: {
          name: "String"
        }
      },
      decryption: {
        serializedName: "decryption",
        xmlName: "decryption",
        type: {
          name: "String"
        }
      },
      decryptionKey: {
        serializedName: "decryptionKey",
        xmlName: "decryptionKey",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const HandlerMapping: coreClient.CompositeMapper = {
  serializedName: "HandlerMapping",
  type: {
    name: "Composite",
    className: "HandlerMapping",
    modelProperties: {
      extension: {
        serializedName: "extension",
        xmlName: "extension",
        type: {
          name: "String"
        }
      },
      scriptProcessor: {
        serializedName: "scriptProcessor",
        xmlName: "scriptProcessor",
        type: {
          name: "String"
        }
      },
      arguments: {
        serializedName: "arguments",
        xmlName: "arguments",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const VirtualApplication: coreClient.CompositeMapper = {
  serializedName: "VirtualApplication",
  type: {
    name: "Composite",
    className: "VirtualApplication",
    modelProperties: {
      virtualPath: {
        serializedName: "virtualPath",
        xmlName: "virtualPath",
        type: {
          name: "String"
        }
      },
      physicalPath: {
        serializedName: "physicalPath",
        xmlName: "physicalPath",
        type: {
          name: "String"
        }
      },
      preloadEnabled: {
        serializedName: "preloadEnabled",
        xmlName: "preloadEnabled",
        type: {
          name: "Boolean"
        }
      },
      virtualDirectories: {
        serializedName: "virtualDirectories",
        xmlName: "virtualDirectories",
        xmlElementName: "VirtualDirectory",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "VirtualDirectory"
            }
          }
        }
      }
    }
  }
};

export const VirtualDirectory: coreClient.CompositeMapper = {
  serializedName: "VirtualDirectory",
  type: {
    name: "Composite",
    className: "VirtualDirectory",
    modelProperties: {
      virtualPath: {
        serializedName: "virtualPath",
        xmlName: "virtualPath",
        type: {
          name: "String"
        }
      },
      physicalPath: {
        serializedName: "physicalPath",
        xmlName: "physicalPath",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const Experiments: coreClient.CompositeMapper = {
  serializedName: "Experiments",
  type: {
    name: "Composite",
    className: "Experiments",
    modelProperties: {
      rampUpRules: {
        serializedName: "rampUpRules",
        xmlName: "rampUpRules",
        xmlElementName: "RampUpRule",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "RampUpRule"
            }
          }
        }
      }
    }
  }
};

export const RampUpRule: coreClient.CompositeMapper = {
  serializedName: "RampUpRule",
  type: {
    name: "Composite",
    className: "RampUpRule",
    modelProperties: {
      actionHostName: {
        serializedName: "actionHostName",
        xmlName: "actionHostName",
        type: {
          name: "String"
        }
      },
      reroutePercentage: {
        serializedName: "reroutePercentage",
        xmlName: "reroutePercentage",
        type: {
          name: "Number"
        }
      },
      changeStep: {
        serializedName: "changeStep",
        xmlName: "changeStep",
        type: {
          name: "Number"
        }
      },
      changeIntervalInMinutes: {
        serializedName: "changeIntervalInMinutes",
        xmlName: "changeIntervalInMinutes",
        type: {
          name: "Number"
        }
      },
      minReroutePercentage: {
        serializedName: "minReroutePercentage",
        xmlName: "minReroutePercentage",
        type: {
          name: "Number"
        }
      },
      maxReroutePercentage: {
        serializedName: "maxReroutePercentage",
        xmlName: "maxReroutePercentage",
        type: {
          name: "Number"
        }
      },
      changeDecisionCallbackUrl: {
        serializedName: "changeDecisionCallbackUrl",
        xmlName: "changeDecisionCallbackUrl",
        type: {
          name: "String"
        }
      },
      name: {
        serializedName: "name",
        xmlName: "name",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const SiteLimits: coreClient.CompositeMapper = {
  serializedName: "SiteLimits",
  type: {
    name: "Composite",
    className: "SiteLimits",
    modelProperties: {
      maxPercentageCpu: {
        serializedName: "maxPercentageCpu",
        xmlName: "maxPercentageCpu",
        type: {
          name: "Number"
        }
      },
      maxMemoryInMb: {
        serializedName: "maxMemoryInMb",
        xmlName: "maxMemoryInMb",
        type: {
          name: "Number"
        }
      },
      maxDiskSizeInMb: {
        serializedName: "maxDiskSizeInMb",
        xmlName: "maxDiskSizeInMb",
        type: {
          name: "Number"
        }
      }
    }
  }
};

export const AutoHealRules: coreClient.CompositeMapper = {
  serializedName: "AutoHealRules",
  type: {
    name: "Composite",
    className: "AutoHealRules",
    modelProperties: {
      triggers: {
        serializedName: "triggers",
        xmlName: "triggers",
        type: {
          name: "Composite",
          className: "AutoHealTriggers"
        }
      },
      actions: {
        serializedName: "actions",
        xmlName: "actions",
        type: {
          name: "Composite",
          className: "AutoHealActions"
        }
      }
    }
  }
};

export const AutoHealTriggers: coreClient.CompositeMapper = {
  serializedName: "AutoHealTriggers",
  type: {
    name: "Composite",
    className: "AutoHealTriggers",
    modelProperties: {
      requests: {
        serializedName: "requests",
        xmlName: "requests",
        type: {
          name: "Composite",
          className: "RequestsBasedTrigger"
        }
      },
      privateBytesInKB: {
        serializedName: "privateBytesInKB",
        xmlName: "privateBytesInKB",
        type: {
          name: "Number"
        }
      },
      statusCodes: {
        serializedName: "statusCodes",
        xmlName: "statusCodes",
        xmlElementName: "StatusCodesBasedTrigger",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "StatusCodesBasedTrigger"
            }
          }
        }
      },
      slowRequests: {
        serializedName: "slowRequests",
        xmlName: "slowRequests",
        type: {
          name: "Composite",
          className: "SlowRequestsBasedTrigger"
        }
      }
    }
  }
};

export const RequestsBasedTrigger: coreClient.CompositeMapper = {
  serializedName: "RequestsBasedTrigger",
  type: {
    name: "Composite",
    className: "RequestsBasedTrigger",
    modelProperties: {
      count: {
        serializedName: "count",
        xmlName: "count",
        type: {
          name: "Number"
        }
      },
      timeInterval: {
        serializedName: "timeInterval",
        xmlName: "timeInterval",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const StatusCodesBasedTrigger: coreClient.CompositeMapper = {
  serializedName: "StatusCodesBasedTrigger",
  type: {
    name: "Composite",
    className: "StatusCodesBasedTrigger",
    modelProperties: {
      status: {
        serializedName: "status",
        xmlName: "status",
        type: {
          name: "Number"
        }
      },
      subStatus: {
        serializedName: "subStatus",
        xmlName: "subStatus",
        type: {
          name: "Number"
        }
      },
      win32Status: {
        serializedName: "win32Status",
        xmlName: "win32Status",
        type: {
          name: "Number"
        }
      },
      count: {
        serializedName: "count",
        xmlName: "count",
        type: {
          name: "Number"
        }
      },
      timeInterval: {
        serializedName: "timeInterval",
        xmlName: "timeInterval",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const SlowRequestsBasedTrigger: coreClient.CompositeMapper = {
  serializedName: "SlowRequestsBasedTrigger",
  type: {
    name: "Composite",
    className: "SlowRequestsBasedTrigger",
    modelProperties: {
      timeTaken: {
        serializedName: "timeTaken",
        xmlName: "timeTaken",
        type: {
          name: "String"
        }
      },
      count: {
        serializedName: "count",
        xmlName: "count",
        type: {
          name: "Number"
        }
      },
      timeInterval: {
        serializedName: "timeInterval",
        xmlName: "timeInterval",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const AutoHealActions: coreClient.CompositeMapper = {
  serializedName: "AutoHealActions",
  type: {
    name: "Composite",
    className: "AutoHealActions",
    modelProperties: {
      actionType: {
        serializedName: "actionType",
        xmlName: "actionType",
        type: {
          name: "Enum",
          allowedValues: ["Recycle", "LogEvent", "CustomAction"]
        }
      },
      customAction: {
        serializedName: "customAction",
        xmlName: "customAction",
        type: {
          name: "Composite",
          className: "AutoHealCustomAction"
        }
      },
      minProcessExecutionTime: {
        serializedName: "minProcessExecutionTime",
        xmlName: "minProcessExecutionTime",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const AutoHealCustomAction: coreClient.CompositeMapper = {
  serializedName: "AutoHealCustomAction",
  type: {
    name: "Composite",
    className: "AutoHealCustomAction",
    modelProperties: {
      exe: {
        serializedName: "exe",
        xmlName: "exe",
        type: {
          name: "String"
        }
      },
      parameters: {
        serializedName: "parameters",
        xmlName: "parameters",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const CorsSettings: coreClient.CompositeMapper = {
  serializedName: "CorsSettings",
  type: {
    name: "Composite",
    className: "CorsSettings",
    modelProperties: {
      allowedOrigins: {
        serializedName: "allowedOrigins",
        xmlName: "allowedOrigins",
        xmlElementName: "CorsSettingsAllowedOriginsItem",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "String"
            }
          }
        }
      },
      supportCredentials: {
        serializedName: "supportCredentials",
        xmlName: "supportCredentials",
        type: {
          name: "Boolean"
        }
      }
    }
  }
};

export const ApiDefinitionInfo: coreClient.CompositeMapper = {
  serializedName: "ApiDefinitionInfo",
  type: {
    name: "Composite",
    className: "ApiDefinitionInfo",
    modelProperties: {
      url: {
        serializedName: "url",
        xmlName: "url",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const IpSecurityRestriction: coreClient.CompositeMapper = {
  serializedName: "IpSecurityRestriction",
  type: {
    name: "Composite",
    className: "IpSecurityRestriction",
    modelProperties: {
      ipAddress: {
        serializedName: "ipAddress",
        xmlName: "ipAddress",
        type: {
          name: "String"
        }
      },
      subnetMask: {
        serializedName: "subnetMask",
        xmlName: "subnetMask",
        type: {
          name: "String"
        }
      },
      vnetSubnetResourceId: {
        serializedName: "vnetSubnetResourceId",
        xmlName: "vnetSubnetResourceId",
        type: {
          name: "String"
        }
      },
      vnetTrafficTag: {
        serializedName: "vnetTrafficTag",
        xmlName: "vnetTrafficTag",
        type: {
          name: "Number"
        }
      },
      subnetTrafficTag: {
        serializedName: "subnetTrafficTag",
        xmlName: "subnetTrafficTag",
        type: {
          name: "Number"
        }
      },
      action: {
        serializedName: "action",
        xmlName: "action",
        type: {
          name: "String"
        }
      },
      tag: {
        serializedName: "tag",
        xmlName: "tag",
        type: {
          name: "Enum",
          allowedValues: ["Default", "XffProxy"]
        }
      },
      priority: {
        serializedName: "priority",
        xmlName: "priority",
        type: {
          name: "Number"
        }
      },
      name: {
        serializedName: "name",
        xmlName: "name",
        type: {
          name: "String"
        }
      },
      description: {
        serializedName: "description",
        xmlName: "description",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const CloningInfo: coreClient.CompositeMapper = {
  serializedName: "CloningInfo",
  type: {
    name: "Composite",
    className: "CloningInfo",
    modelProperties: {
      correlationId: {
        serializedName: "correlationId",
        xmlName: "correlationId",
        type: {
          name: "Uuid"
        }
      },
      overwrite: {
        serializedName: "overwrite",
        xmlName: "overwrite",
        type: {
          name: "Boolean"
        }
      },
      cloneCustomHostNames: {
        serializedName: "cloneCustomHostNames",
        xmlName: "cloneCustomHostNames",
        type: {
          name: "Boolean"
        }
      },
      cloneSourceControl: {
        serializedName: "cloneSourceControl",
        xmlName: "cloneSourceControl",
        type: {
          name: "Boolean"
        }
      },
      sourceWebAppId: {
        serializedName: "sourceWebAppId",
        required: true,
        xmlName: "sourceWebAppId",
        type: {
          name: "String"
        }
      },
      sourceWebAppLocation: {
        serializedName: "sourceWebAppLocation",
        xmlName: "sourceWebAppLocation",
        type: {
          name: "String"
        }
      },
      hostingEnvironment: {
        serializedName: "hostingEnvironment",
        xmlName: "hostingEnvironment",
        type: {
          name: "String"
        }
      },
      appSettingsOverrides: {
        serializedName: "appSettingsOverrides",
        xmlName: "appSettingsOverrides",
        type: {
          name: "Dictionary",
          value: { type: { name: "String" } }
        }
      },
      configureLoadBalancing: {
        serializedName: "configureLoadBalancing",
        xmlName: "configureLoadBalancing",
        type: {
          name: "Boolean"
        }
      },
      trafficManagerProfileId: {
        serializedName: "trafficManagerProfileId",
        xmlName: "trafficManagerProfileId",
        type: {
          name: "String"
        }
      },
      trafficManagerProfileName: {
        serializedName: "trafficManagerProfileName",
        xmlName: "trafficManagerProfileName",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const SlotSwapStatus: coreClient.CompositeMapper = {
  serializedName: "SlotSwapStatus",
  type: {
    name: "Composite",
    className: "SlotSwapStatus",
    modelProperties: {
      timestampUtc: {
        serializedName: "timestampUtc",
        readOnly: true,
        xmlName: "timestampUtc",
        type: {
          name: "DateTime"
        }
      },
      sourceSlotName: {
        serializedName: "sourceSlotName",
        readOnly: true,
        xmlName: "sourceSlotName",
        type: {
          name: "String"
        }
      },
      destinationSlotName: {
        serializedName: "destinationSlotName",
        readOnly: true,
        xmlName: "destinationSlotName",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const GeoDistribution: coreClient.CompositeMapper = {
  serializedName: "GeoDistribution",
  type: {
    name: "Composite",
    className: "GeoDistribution",
    modelProperties: {
      location: {
        serializedName: "location",
        xmlName: "location",
        type: {
          name: "String"
        }
      },
      numberOfWorkers: {
        serializedName: "numberOfWorkers",
        xmlName: "numberOfWorkers",
        type: {
          name: "Number"
        }
      }
    }
  }
};

export const ManagedServiceIdentity: coreClient.CompositeMapper = {
  serializedName: "ManagedServiceIdentity",
  type: {
    name: "Composite",
    className: "ManagedServiceIdentity",
    modelProperties: {
      type: {
        serializedName: "type",
        xmlName: "type",
        type: {
          name: "String"
        }
      },
      tenantId: {
        serializedName: "tenantId",
        readOnly: true,
        xmlName: "tenantId",
        type: {
          name: "String"
        }
      },
      principalId: {
        serializedName: "principalId",
        readOnly: true,
        xmlName: "principalId",
        type: {
          name: "String"
        }
      },
      userAssignedIdentities: {
        serializedName: "userAssignedIdentities",
        xmlName: "userAssignedIdentities",
        type: {
          name: "Dictionary",
          value: {
            type: {
              name: "Composite",
              className:
                "Components1Jq1T4ISchemasManagedserviceidentityPropertiesUserassignedidentitiesAdditionalproperties"
            }
          }
        }
      }
    }
  }
};

export const Components1Jq1T4ISchemasManagedserviceidentityPropertiesUserassignedidentitiesAdditionalproperties: coreClient.CompositeMapper = {
  serializedName:
    "Components1Jq1T4ISchemasManagedserviceidentityPropertiesUserassignedidentitiesAdditionalproperties",
  type: {
    name: "Composite",
    className:
      "Components1Jq1T4ISchemasManagedserviceidentityPropertiesUserassignedidentitiesAdditionalproperties",
    modelProperties: {
      principalId: {
        serializedName: "principalId",
        readOnly: true,
        xmlName: "principalId",
        type: {
          name: "String"
        }
      },
      clientId: {
        serializedName: "clientId",
        readOnly: true,
        xmlName: "clientId",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const ErrorEntity: coreClient.CompositeMapper = {
  serializedName: "ErrorEntity",
  type: {
    name: "Composite",
    className: "ErrorEntity",
    modelProperties: {
      extendedCode: {
        serializedName: "extendedCode",
        xmlName: "extendedCode",
        type: {
          name: "String"
        }
      },
      messageTemplate: {
        serializedName: "messageTemplate",
        xmlName: "messageTemplate",
        type: {
          name: "String"
        }
      },
      parameters: {
        serializedName: "parameters",
        xmlName: "parameters",
        xmlElementName: "ErrorEntityParametersItem",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "String"
            }
          }
        }
      },
      innerErrors: {
        serializedName: "innerErrors",
        xmlName: "innerErrors",
        xmlElementName: "ErrorEntity",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "ErrorEntity"
            }
          }
        }
      },
      code: {
        serializedName: "code",
        xmlName: "code",
        type: {
          name: "String"
        }
      },
      message: {
        serializedName: "message",
        xmlName: "message",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const CsmSlotEntity: coreClient.CompositeMapper = {
  serializedName: "CsmSlotEntity",
  type: {
    name: "Composite",
    className: "CsmSlotEntity",
    modelProperties: {
      targetSlot: {
        serializedName: "targetSlot",
        required: true,
        xmlName: "targetSlot",
        type: {
          name: "String"
        }
      },
      preserveVnet: {
        serializedName: "preserveVnet",
        required: true,
        xmlName: "preserveVnet",
        type: {
          name: "Boolean"
        }
      }
    }
  }
};

export const BackupSchedule: coreClient.CompositeMapper = {
  serializedName: "BackupSchedule",
  type: {
    name: "Composite",
    className: "BackupSchedule",
    modelProperties: {
      frequencyInterval: {
        defaultValue: 7,
        serializedName: "frequencyInterval",
        required: true,
        xmlName: "frequencyInterval",
        type: {
          name: "Number"
        }
      },
      frequencyUnit: {
        defaultValue: "Day",
        serializedName: "frequencyUnit",
        required: true,
        xmlName: "frequencyUnit",
        type: {
          name: "Enum",
          allowedValues: ["Day", "Hour"]
        }
      },
      keepAtLeastOneBackup: {
        defaultValue: true,
        serializedName: "keepAtLeastOneBackup",
        required: true,
        xmlName: "keepAtLeastOneBackup",
        type: {
          name: "Boolean"
        }
      },
      retentionPeriodInDays: {
        defaultValue: 30,
        serializedName: "retentionPeriodInDays",
        required: true,
        xmlName: "retentionPeriodInDays",
        type: {
          name: "Number"
        }
      },
      startTime: {
        serializedName: "startTime",
        xmlName: "startTime",
        type: {
          name: "DateTime"
        }
      },
      lastExecutionTime: {
        serializedName: "lastExecutionTime",
        readOnly: true,
        xmlName: "lastExecutionTime",
        type: {
          name: "DateTime"
        }
      }
    }
  }
};

export const DatabaseBackupSetting: coreClient.CompositeMapper = {
  serializedName: "DatabaseBackupSetting",
  type: {
    name: "Composite",
    className: "DatabaseBackupSetting",
    modelProperties: {
      databaseType: {
        serializedName: "databaseType",
        required: true,
        xmlName: "databaseType",
        type: {
          name: "String"
        }
      },
      name: {
        serializedName: "name",
        xmlName: "name",
        type: {
          name: "String"
        }
      },
      connectionStringName: {
        serializedName: "connectionStringName",
        xmlName: "connectionStringName",
        type: {
          name: "String"
        }
      },
      connectionString: {
        serializedName: "connectionString",
        xmlName: "connectionString",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const BackupItemCollection: coreClient.CompositeMapper = {
  serializedName: "BackupItemCollection",
  type: {
    name: "Composite",
    className: "BackupItemCollection",
    modelProperties: {
      value: {
        serializedName: "value",
        required: true,
        xmlName: "value",
        xmlElementName: "BackupItem",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "BackupItem"
            }
          }
        }
      },
      nextLink: {
        serializedName: "nextLink",
        readOnly: true,
        xmlName: "nextLink",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const SiteConfigResourceCollection: coreClient.CompositeMapper = {
  serializedName: "SiteConfigResourceCollection",
  type: {
    name: "Composite",
    className: "SiteConfigResourceCollection",
    modelProperties: {
      value: {
        serializedName: "value",
        required: true,
        xmlName: "value",
        xmlElementName: "SiteConfigResource",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "SiteConfigResource"
            }
          }
        }
      },
      nextLink: {
        serializedName: "nextLink",
        readOnly: true,
        xmlName: "nextLink",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const ConnStringValueTypePair: coreClient.CompositeMapper = {
  serializedName: "ConnStringValueTypePair",
  type: {
    name: "Composite",
    className: "ConnStringValueTypePair",
    modelProperties: {
      value: {
        serializedName: "value",
        required: true,
        xmlName: "value",
        type: {
          name: "String"
        }
      },
      type: {
        serializedName: "type",
        required: true,
        xmlName: "type",
        type: {
          name: "Enum",
          allowedValues: [
            "MySql",
            "SQLServer",
            "SQLAzure",
            "Custom",
            "NotificationHub",
            "ServiceBus",
            "EventHub",
            "ApiHub",
            "DocDb",
            "RedisCache",
            "PostgreSQL"
          ]
        }
      }
    }
  }
};

export const ApplicationLogsConfig: coreClient.CompositeMapper = {
  serializedName: "ApplicationLogsConfig",
  type: {
    name: "Composite",
    className: "ApplicationLogsConfig",
    modelProperties: {
      fileSystem: {
        serializedName: "fileSystem",
        xmlName: "fileSystem",
        type: {
          name: "Composite",
          className: "FileSystemApplicationLogsConfig"
        }
      },
      azureTableStorage: {
        serializedName: "azureTableStorage",
        xmlName: "azureTableStorage",
        type: {
          name: "Composite",
          className: "AzureTableStorageApplicationLogsConfig"
        }
      },
      azureBlobStorage: {
        serializedName: "azureBlobStorage",
        xmlName: "azureBlobStorage",
        type: {
          name: "Composite",
          className: "AzureBlobStorageApplicationLogsConfig"
        }
      }
    }
  }
};

export const FileSystemApplicationLogsConfig: coreClient.CompositeMapper = {
  serializedName: "FileSystemApplicationLogsConfig",
  type: {
    name: "Composite",
    className: "FileSystemApplicationLogsConfig",
    modelProperties: {
      level: {
        serializedName: "level",
        xmlName: "level",
        type: {
          name: "Enum",
          allowedValues: ["Off", "Verbose", "Information", "Warning", "Error"]
        }
      }
    }
  }
};

export const AzureTableStorageApplicationLogsConfig: coreClient.CompositeMapper = {
  serializedName: "AzureTableStorageApplicationLogsConfig",
  type: {
    name: "Composite",
    className: "AzureTableStorageApplicationLogsConfig",
    modelProperties: {
      level: {
        serializedName: "level",
        xmlName: "level",
        type: {
          name: "Enum",
          allowedValues: ["Off", "Verbose", "Information", "Warning", "Error"]
        }
      },
      sasUrl: {
        serializedName: "sasUrl",
        required: true,
        xmlName: "sasUrl",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const AzureBlobStorageApplicationLogsConfig: coreClient.CompositeMapper = {
  serializedName: "AzureBlobStorageApplicationLogsConfig",
  type: {
    name: "Composite",
    className: "AzureBlobStorageApplicationLogsConfig",
    modelProperties: {
      level: {
        serializedName: "level",
        xmlName: "level",
        type: {
          name: "Enum",
          allowedValues: ["Off", "Verbose", "Information", "Warning", "Error"]
        }
      },
      sasUrl: {
        serializedName: "sasUrl",
        xmlName: "sasUrl",
        type: {
          name: "String"
        }
      },
      retentionInDays: {
        serializedName: "retentionInDays",
        xmlName: "retentionInDays",
        type: {
          name: "Number"
        }
      }
    }
  }
};

export const HttpLogsConfig: coreClient.CompositeMapper = {
  serializedName: "HttpLogsConfig",
  type: {
    name: "Composite",
    className: "HttpLogsConfig",
    modelProperties: {
      fileSystem: {
        serializedName: "fileSystem",
        xmlName: "fileSystem",
        type: {
          name: "Composite",
          className: "FileSystemHttpLogsConfig"
        }
      },
      azureBlobStorage: {
        serializedName: "azureBlobStorage",
        xmlName: "azureBlobStorage",
        type: {
          name: "Composite",
          className: "AzureBlobStorageHttpLogsConfig"
        }
      }
    }
  }
};

export const FileSystemHttpLogsConfig: coreClient.CompositeMapper = {
  serializedName: "FileSystemHttpLogsConfig",
  type: {
    name: "Composite",
    className: "FileSystemHttpLogsConfig",
    modelProperties: {
      retentionInMb: {
        constraints: {
          InclusiveMaximum: 100,
          InclusiveMinimum: 25
        },
        serializedName: "retentionInMb",
        xmlName: "retentionInMb",
        type: {
          name: "Number"
        }
      },
      retentionInDays: {
        serializedName: "retentionInDays",
        xmlName: "retentionInDays",
        type: {
          name: "Number"
        }
      },
      enabled: {
        serializedName: "enabled",
        xmlName: "enabled",
        type: {
          name: "Boolean"
        }
      }
    }
  }
};

export const AzureBlobStorageHttpLogsConfig: coreClient.CompositeMapper = {
  serializedName: "AzureBlobStorageHttpLogsConfig",
  type: {
    name: "Composite",
    className: "AzureBlobStorageHttpLogsConfig",
    modelProperties: {
      sasUrl: {
        serializedName: "sasUrl",
        xmlName: "sasUrl",
        type: {
          name: "String"
        }
      },
      retentionInDays: {
        serializedName: "retentionInDays",
        xmlName: "retentionInDays",
        type: {
          name: "Number"
        }
      },
      enabled: {
        serializedName: "enabled",
        xmlName: "enabled",
        type: {
          name: "Boolean"
        }
      }
    }
  }
};

export const EnabledConfig: coreClient.CompositeMapper = {
  serializedName: "EnabledConfig",
  type: {
    name: "Composite",
    className: "EnabledConfig",
    modelProperties: {
      enabled: {
        serializedName: "enabled",
        xmlName: "enabled",
        type: {
          name: "Boolean"
        }
      }
    }
  }
};

export const SiteConfigurationSnapshotInfoCollection: coreClient.CompositeMapper = {
  serializedName: "SiteConfigurationSnapshotInfoCollection",
  type: {
    name: "Composite",
    className: "SiteConfigurationSnapshotInfoCollection",
    modelProperties: {
      value: {
        serializedName: "value",
        required: true,
        xmlName: "value",
        xmlElementName: "SiteConfigurationSnapshotInfo",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "SiteConfigurationSnapshotInfo"
            }
          }
        }
      },
      nextLink: {
        serializedName: "nextLink",
        readOnly: true,
        xmlName: "nextLink",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const ContinuousWebJobCollection: coreClient.CompositeMapper = {
  serializedName: "ContinuousWebJobCollection",
  type: {
    name: "Composite",
    className: "ContinuousWebJobCollection",
    modelProperties: {
      value: {
        serializedName: "value",
        required: true,
        xmlName: "value",
        xmlElementName: "ContinuousWebJob",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "ContinuousWebJob"
            }
          }
        }
      },
      nextLink: {
        serializedName: "nextLink",
        readOnly: true,
        xmlName: "nextLink",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const DeploymentCollection: coreClient.CompositeMapper = {
  serializedName: "DeploymentCollection",
  type: {
    name: "Composite",
    className: "DeploymentCollection",
    modelProperties: {
      value: {
        serializedName: "value",
        required: true,
        xmlName: "value",
        xmlElementName: "Deployment",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "Deployment"
            }
          }
        }
      },
      nextLink: {
        serializedName: "nextLink",
        readOnly: true,
        xmlName: "nextLink",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const IdentifierCollection: coreClient.CompositeMapper = {
  serializedName: "IdentifierCollection",
  type: {
    name: "Composite",
    className: "IdentifierCollection",
    modelProperties: {
      value: {
        serializedName: "value",
        required: true,
        xmlName: "value",
        xmlElementName: "Identifier",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "Identifier"
            }
          }
        }
      },
      nextLink: {
        serializedName: "nextLink",
        readOnly: true,
        xmlName: "nextLink",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const MSDeployLogEntry: coreClient.CompositeMapper = {
  serializedName: "MSDeployLogEntry",
  type: {
    name: "Composite",
    className: "MSDeployLogEntry",
    modelProperties: {
      time: {
        serializedName: "time",
        readOnly: true,
        xmlName: "time",
        type: {
          name: "DateTime"
        }
      },
      type: {
        serializedName: "type",
        readOnly: true,
        xmlName: "type",
        type: {
          name: "Enum",
          allowedValues: ["Message", "Warning", "Error"]
        }
      },
      message: {
        serializedName: "message",
        readOnly: true,
        xmlName: "message",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const FunctionEnvelopeCollection: coreClient.CompositeMapper = {
  serializedName: "FunctionEnvelopeCollection",
  type: {
    name: "Composite",
    className: "FunctionEnvelopeCollection",
    modelProperties: {
      value: {
        serializedName: "value",
        required: true,
        xmlName: "value",
        xmlElementName: "FunctionEnvelope",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "FunctionEnvelope"
            }
          }
        }
      },
      nextLink: {
        serializedName: "nextLink",
        readOnly: true,
        xmlName: "nextLink",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const KeyInfo: coreClient.CompositeMapper = {
  serializedName: "KeyInfo",
  type: {
    name: "Composite",
    className: "KeyInfo",
    modelProperties: {
      name: {
        serializedName: "name",
        xmlName: "name",
        type: {
          name: "String"
        }
      },
      value: {
        serializedName: "value",
        xmlName: "value",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const HostKeys: coreClient.CompositeMapper = {
  serializedName: "HostKeys",
  type: {
    name: "Composite",
    className: "HostKeys",
    modelProperties: {
      masterKey: {
        serializedName: "masterKey",
        xmlName: "masterKey",
        type: {
          name: "String"
        }
      },
      functionKeys: {
        serializedName: "functionKeys",
        xmlName: "functionKeys",
        type: {
          name: "Dictionary",
          value: { type: { name: "String" } }
        }
      },
      systemKeys: {
        serializedName: "systemKeys",
        xmlName: "systemKeys",
        type: {
          name: "Dictionary",
          value: { type: { name: "String" } }
        }
      }
    }
  }
};

export const HostNameBindingCollection: coreClient.CompositeMapper = {
  serializedName: "HostNameBindingCollection",
  type: {
    name: "Composite",
    className: "HostNameBindingCollection",
    modelProperties: {
      value: {
        serializedName: "value",
        required: true,
        xmlName: "value",
        xmlElementName: "HostNameBinding",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "HostNameBinding"
            }
          }
        }
      },
      nextLink: {
        serializedName: "nextLink",
        readOnly: true,
        xmlName: "nextLink",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const WebAppInstanceCollection: coreClient.CompositeMapper = {
  serializedName: "WebAppInstanceCollection",
  type: {
    name: "Composite",
    className: "WebAppInstanceCollection",
    modelProperties: {
      value: {
        serializedName: "value",
        required: true,
        xmlName: "value",
        xmlElementName: "SiteInstance",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "SiteInstance"
            }
          }
        }
      },
      nextLink: {
        serializedName: "nextLink",
        readOnly: true,
        xmlName: "nextLink",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const ProcessInfoCollection: coreClient.CompositeMapper = {
  serializedName: "ProcessInfoCollection",
  type: {
    name: "Composite",
    className: "ProcessInfoCollection",
    modelProperties: {
      value: {
        serializedName: "value",
        required: true,
        xmlName: "value",
        xmlElementName: "ProcessInfo",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "ProcessInfo"
            }
          }
        }
      },
      nextLink: {
        serializedName: "nextLink",
        readOnly: true,
        xmlName: "nextLink",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const ProcessModuleInfoCollection: coreClient.CompositeMapper = {
  serializedName: "ProcessModuleInfoCollection",
  type: {
    name: "Composite",
    className: "ProcessModuleInfoCollection",
    modelProperties: {
      value: {
        serializedName: "value",
        required: true,
        xmlName: "value",
        xmlElementName: "ProcessModuleInfo",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "ProcessModuleInfo"
            }
          }
        }
      },
      nextLink: {
        serializedName: "nextLink",
        readOnly: true,
        xmlName: "nextLink",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const ProcessThreadInfoCollection: coreClient.CompositeMapper = {
  serializedName: "ProcessThreadInfoCollection",
  type: {
    name: "Composite",
    className: "ProcessThreadInfoCollection",
    modelProperties: {
      value: {
        serializedName: "value",
        required: true,
        xmlName: "value",
        xmlElementName: "ProcessThreadInfo",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "ProcessThreadInfo"
            }
          }
        }
      },
      nextLink: {
        serializedName: "nextLink",
        readOnly: true,
        xmlName: "nextLink",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const SiteCloneability: coreClient.CompositeMapper = {
  serializedName: "SiteCloneability",
  type: {
    name: "Composite",
    className: "SiteCloneability",
    modelProperties: {
      result: {
        serializedName: "result",
        xmlName: "result",
        type: {
          name: "Enum",
          allowedValues: ["Cloneable", "PartiallyCloneable", "NotCloneable"]
        }
      },
      blockingFeatures: {
        serializedName: "blockingFeatures",
        xmlName: "blockingFeatures",
        xmlElementName: "SiteCloneabilityCriterion",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "SiteCloneabilityCriterion"
            }
          }
        }
      },
      unsupportedFeatures: {
        serializedName: "unsupportedFeatures",
        xmlName: "unsupportedFeatures",
        xmlElementName: "SiteCloneabilityCriterion",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "SiteCloneabilityCriterion"
            }
          }
        }
      },
      blockingCharacteristics: {
        serializedName: "blockingCharacteristics",
        xmlName: "blockingCharacteristics",
        xmlElementName: "SiteCloneabilityCriterion",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "SiteCloneabilityCriterion"
            }
          }
        }
      }
    }
  }
};

export const SiteCloneabilityCriterion: coreClient.CompositeMapper = {
  serializedName: "SiteCloneabilityCriterion",
  type: {
    name: "Composite",
    className: "SiteCloneabilityCriterion",
    modelProperties: {
      name: {
        serializedName: "name",
        xmlName: "name",
        type: {
          name: "String"
        }
      },
      description: {
        serializedName: "description",
        xmlName: "description",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const ResourceMetricDefinitionCollection: coreClient.CompositeMapper = {
  serializedName: "ResourceMetricDefinitionCollection",
  type: {
    name: "Composite",
    className: "ResourceMetricDefinitionCollection",
    modelProperties: {
      value: {
        serializedName: "value",
        required: true,
        xmlName: "value",
        xmlElementName: "ResourceMetricDefinition",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "ResourceMetricDefinition"
            }
          }
        }
      },
      nextLink: {
        serializedName: "nextLink",
        readOnly: true,
        xmlName: "nextLink",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const ResourceMetricAvailability: coreClient.CompositeMapper = {
  serializedName: "ResourceMetricAvailability",
  type: {
    name: "Composite",
    className: "ResourceMetricAvailability",
    modelProperties: {
      timeGrain: {
        serializedName: "timeGrain",
        readOnly: true,
        xmlName: "timeGrain",
        type: {
          name: "String"
        }
      },
      retention: {
        serializedName: "retention",
        readOnly: true,
        xmlName: "retention",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const ResourceMetricCollection: coreClient.CompositeMapper = {
  serializedName: "ResourceMetricCollection",
  type: {
    name: "Composite",
    className: "ResourceMetricCollection",
    modelProperties: {
      value: {
        serializedName: "value",
        required: true,
        xmlName: "value",
        xmlElementName: "ResourceMetric",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "ResourceMetric"
            }
          }
        }
      },
      nextLink: {
        serializedName: "nextLink",
        readOnly: true,
        xmlName: "nextLink",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const ResourceMetric: coreClient.CompositeMapper = {
  serializedName: "ResourceMetric",
  type: {
    name: "Composite",
    className: "ResourceMetric",
    modelProperties: {
      name: {
        serializedName: "name",
        xmlName: "name",
        type: {
          name: "Composite",
          className: "ResourceMetricName"
        }
      },
      unit: {
        serializedName: "unit",
        readOnly: true,
        xmlName: "unit",
        type: {
          name: "String"
        }
      },
      timeGrain: {
        serializedName: "timeGrain",
        readOnly: true,
        xmlName: "timeGrain",
        type: {
          name: "String"
        }
      },
      startTime: {
        serializedName: "startTime",
        readOnly: true,
        xmlName: "startTime",
        type: {
          name: "DateTime"
        }
      },
      endTime: {
        serializedName: "endTime",
        readOnly: true,
        xmlName: "endTime",
        type: {
          name: "DateTime"
        }
      },
      resourceId: {
        serializedName: "resourceId",
        readOnly: true,
        xmlName: "resourceId",
        type: {
          name: "String"
        }
      },
      id: {
        serializedName: "id",
        readOnly: true,
        xmlName: "id",
        type: {
          name: "String"
        }
      },
      metricValues: {
        serializedName: "metricValues",
        readOnly: true,
        xmlName: "metricValues",
        xmlElementName: "ResourceMetricValue",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "ResourceMetricValue"
            }
          }
        }
      },
      properties: {
        serializedName: "properties",
        readOnly: true,
        xmlName: "properties",
        xmlElementName: "ResourceMetricProperty",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "ResourceMetricProperty"
            }
          }
        }
      }
    }
  }
};

export const ResourceMetricName: coreClient.CompositeMapper = {
  serializedName: "ResourceMetricName",
  type: {
    name: "Composite",
    className: "ResourceMetricName",
    modelProperties: {
      value: {
        serializedName: "value",
        readOnly: true,
        xmlName: "value",
        type: {
          name: "String"
        }
      },
      localizedValue: {
        serializedName: "localizedValue",
        readOnly: true,
        xmlName: "localizedValue",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const ResourceMetricValue: coreClient.CompositeMapper = {
  serializedName: "ResourceMetricValue",
  type: {
    name: "Composite",
    className: "ResourceMetricValue",
    modelProperties: {
      timestamp: {
        serializedName: "timestamp",
        readOnly: true,
        xmlName: "timestamp",
        type: {
          name: "String"
        }
      },
      average: {
        serializedName: "average",
        readOnly: true,
        xmlName: "average",
        type: {
          name: "Number"
        }
      },
      minimum: {
        serializedName: "minimum",
        readOnly: true,
        xmlName: "minimum",
        type: {
          name: "Number"
        }
      },
      maximum: {
        serializedName: "maximum",
        readOnly: true,
        xmlName: "maximum",
        type: {
          name: "Number"
        }
      },
      total: {
        serializedName: "total",
        readOnly: true,
        xmlName: "total",
        type: {
          name: "Number"
        }
      },
      count: {
        serializedName: "count",
        readOnly: true,
        xmlName: "count",
        type: {
          name: "Number"
        }
      },
      properties: {
        serializedName: "properties",
        readOnly: true,
        xmlName: "properties",
        xmlElementName: "ResourceMetricProperty",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "ResourceMetricProperty"
            }
          }
        }
      }
    }
  }
};

export const ResourceMetricProperty: coreClient.CompositeMapper = {
  serializedName: "ResourceMetricProperty",
  type: {
    name: "Composite",
    className: "ResourceMetricProperty",
    modelProperties: {
      key: {
        serializedName: "key",
        xmlName: "key",
        type: {
          name: "String"
        }
      },
      value: {
        serializedName: "value",
        xmlName: "value",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const Operation: coreClient.CompositeMapper = {
  serializedName: "Operation",
  type: {
    name: "Composite",
    className: "Operation",
    modelProperties: {
      id: {
        serializedName: "id",
        xmlName: "id",
        type: {
          name: "String"
        }
      },
      name: {
        serializedName: "name",
        xmlName: "name",
        type: {
          name: "String"
        }
      },
      status: {
        serializedName: "status",
        xmlName: "status",
        type: {
          name: "Enum",
          allowedValues: [
            "InProgress",
            "Failed",
            "Succeeded",
            "TimedOut",
            "Created"
          ]
        }
      },
      errors: {
        serializedName: "errors",
        xmlName: "errors",
        xmlElementName: "ErrorEntity",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "ErrorEntity"
            }
          }
        }
      },
      createdTime: {
        serializedName: "createdTime",
        xmlName: "createdTime",
        type: {
          name: "DateTime"
        }
      },
      modifiedTime: {
        serializedName: "modifiedTime",
        xmlName: "modifiedTime",
        type: {
          name: "DateTime"
        }
      },
      expirationTime: {
        serializedName: "expirationTime",
        xmlName: "expirationTime",
        type: {
          name: "DateTime"
        }
      },
      geoMasterOperationId: {
        serializedName: "geoMasterOperationId",
        xmlName: "geoMasterOperationId",
        type: {
          name: "Uuid"
        }
      }
    }
  }
};

export const NetworkTrace: coreClient.CompositeMapper = {
  serializedName: "NetworkTrace",
  type: {
    name: "Composite",
    className: "NetworkTrace",
    modelProperties: {
      path: {
        serializedName: "path",
        xmlName: "path",
        type: {
          name: "String"
        }
      },
      status: {
        serializedName: "status",
        xmlName: "status",
        type: {
          name: "String"
        }
      },
      message: {
        serializedName: "message",
        xmlName: "message",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const PerfMonCounterCollection: coreClient.CompositeMapper = {
  serializedName: "PerfMonCounterCollection",
  type: {
    name: "Composite",
    className: "PerfMonCounterCollection",
    modelProperties: {
      value: {
        serializedName: "value",
        required: true,
        xmlName: "value",
        xmlElementName: "PerfMonResponse",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "PerfMonResponse"
            }
          }
        }
      },
      nextLink: {
        serializedName: "nextLink",
        readOnly: true,
        xmlName: "nextLink",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const PerfMonResponse: coreClient.CompositeMapper = {
  serializedName: "PerfMonResponse",
  type: {
    name: "Composite",
    className: "PerfMonResponse",
    modelProperties: {
      code: {
        serializedName: "code",
        xmlName: "code",
        type: {
          name: "String"
        }
      },
      message: {
        serializedName: "message",
        xmlName: "message",
        type: {
          name: "String"
        }
      },
      data: {
        serializedName: "data",
        xmlName: "data",
        type: {
          name: "Composite",
          className: "PerfMonSet"
        }
      }
    }
  }
};

export const PerfMonSet: coreClient.CompositeMapper = {
  serializedName: "PerfMonSet",
  type: {
    name: "Composite",
    className: "PerfMonSet",
    modelProperties: {
      name: {
        serializedName: "name",
        xmlName: "name",
        type: {
          name: "String"
        }
      },
      startTime: {
        serializedName: "startTime",
        xmlName: "startTime",
        type: {
          name: "DateTime"
        }
      },
      endTime: {
        serializedName: "endTime",
        xmlName: "endTime",
        type: {
          name: "DateTime"
        }
      },
      timeGrain: {
        serializedName: "timeGrain",
        xmlName: "timeGrain",
        type: {
          name: "String"
        }
      },
      values: {
        serializedName: "values",
        xmlName: "values",
        xmlElementName: "PerfMonSample",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "PerfMonSample"
            }
          }
        }
      }
    }
  }
};

export const PerfMonSample: coreClient.CompositeMapper = {
  serializedName: "PerfMonSample",
  type: {
    name: "Composite",
    className: "PerfMonSample",
    modelProperties: {
      time: {
        serializedName: "time",
        xmlName: "time",
        type: {
          name: "DateTime"
        }
      },
      instanceName: {
        serializedName: "instanceName",
        xmlName: "instanceName",
        type: {
          name: "String"
        }
      },
      value: {
        serializedName: "value",
        xmlName: "value",
        type: {
          name: "Number"
        }
      }
    }
  }
};

export const PrivateAccessVirtualNetwork: coreClient.CompositeMapper = {
  serializedName: "PrivateAccessVirtualNetwork",
  type: {
    name: "Composite",
    className: "PrivateAccessVirtualNetwork",
    modelProperties: {
      name: {
        serializedName: "name",
        xmlName: "name",
        type: {
          name: "String"
        }
      },
      key: {
        serializedName: "key",
        xmlName: "key",
        type: {
          name: "Number"
        }
      },
      resourceId: {
        serializedName: "resourceId",
        xmlName: "resourceId",
        type: {
          name: "String"
        }
      },
      subnets: {
        serializedName: "subnets",
        xmlName: "subnets",
        xmlElementName: "PrivateAccessSubnet",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "PrivateAccessSubnet"
            }
          }
        }
      }
    }
  }
};

export const PrivateAccessSubnet: coreClient.CompositeMapper = {
  serializedName: "PrivateAccessSubnet",
  type: {
    name: "Composite",
    className: "PrivateAccessSubnet",
    modelProperties: {
      name: {
        serializedName: "name",
        xmlName: "name",
        type: {
          name: "String"
        }
      },
      key: {
        serializedName: "key",
        xmlName: "key",
        type: {
          name: "Number"
        }
      }
    }
  }
};

export const PublicCertificateCollection: coreClient.CompositeMapper = {
  serializedName: "PublicCertificateCollection",
  type: {
    name: "Composite",
    className: "PublicCertificateCollection",
    modelProperties: {
      value: {
        serializedName: "value",
        required: true,
        xmlName: "value",
        xmlElementName: "PublicCertificate",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "PublicCertificate"
            }
          }
        }
      },
      nextLink: {
        serializedName: "nextLink",
        readOnly: true,
        xmlName: "nextLink",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const CsmPublishingProfileOptions: coreClient.CompositeMapper = {
  serializedName: "CsmPublishingProfileOptions",
  type: {
    name: "Composite",
    className: "CsmPublishingProfileOptions",
    modelProperties: {
      format: {
        serializedName: "format",
        xmlName: "format",
        type: {
          name: "String"
        }
      },
      includeDisasterRecoveryEndpoints: {
        serializedName: "includeDisasterRecoveryEndpoints",
        xmlName: "includeDisasterRecoveryEndpoints",
        type: {
          name: "Boolean"
        }
      }
    }
  }
};

export const SnapshotRecoverySource: coreClient.CompositeMapper = {
  serializedName: "SnapshotRecoverySource",
  type: {
    name: "Composite",
    className: "SnapshotRecoverySource",
    modelProperties: {
      location: {
        serializedName: "location",
        xmlName: "location",
        type: {
          name: "String"
        }
      },
      id: {
        serializedName: "id",
        xmlName: "id",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const SiteExtensionInfoCollection: coreClient.CompositeMapper = {
  serializedName: "SiteExtensionInfoCollection",
  type: {
    name: "Composite",
    className: "SiteExtensionInfoCollection",
    modelProperties: {
      value: {
        serializedName: "value",
        required: true,
        xmlName: "value",
        xmlElementName: "SiteExtensionInfo",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "SiteExtensionInfo"
            }
          }
        }
      },
      nextLink: {
        serializedName: "nextLink",
        readOnly: true,
        xmlName: "nextLink",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const SlotDifferenceCollection: coreClient.CompositeMapper = {
  serializedName: "SlotDifferenceCollection",
  type: {
    name: "Composite",
    className: "SlotDifferenceCollection",
    modelProperties: {
      value: {
        serializedName: "value",
        required: true,
        xmlName: "value",
        xmlElementName: "SlotDifference",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "SlotDifference"
            }
          }
        }
      },
      nextLink: {
        serializedName: "nextLink",
        readOnly: true,
        xmlName: "nextLink",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const SnapshotCollection: coreClient.CompositeMapper = {
  serializedName: "SnapshotCollection",
  type: {
    name: "Composite",
    className: "SnapshotCollection",
    modelProperties: {
      value: {
        serializedName: "value",
        required: true,
        xmlName: "value",
        xmlElementName: "Snapshot",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "Snapshot"
            }
          }
        }
      },
      nextLink: {
        serializedName: "nextLink",
        readOnly: true,
        xmlName: "nextLink",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const TriggeredWebJobCollection: coreClient.CompositeMapper = {
  serializedName: "TriggeredWebJobCollection",
  type: {
    name: "Composite",
    className: "TriggeredWebJobCollection",
    modelProperties: {
      value: {
        serializedName: "value",
        required: true,
        xmlName: "value",
        xmlElementName: "TriggeredWebJob",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "TriggeredWebJob"
            }
          }
        }
      },
      nextLink: {
        serializedName: "nextLink",
        readOnly: true,
        xmlName: "nextLink",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const TriggeredJobHistoryCollection: coreClient.CompositeMapper = {
  serializedName: "TriggeredJobHistoryCollection",
  type: {
    name: "Composite",
    className: "TriggeredJobHistoryCollection",
    modelProperties: {
      value: {
        serializedName: "value",
        required: true,
        xmlName: "value",
        xmlElementName: "TriggeredJobHistory",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "TriggeredJobHistory"
            }
          }
        }
      },
      nextLink: {
        serializedName: "nextLink",
        readOnly: true,
        xmlName: "nextLink",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const CsmUsageQuotaCollection: coreClient.CompositeMapper = {
  serializedName: "CsmUsageQuotaCollection",
  type: {
    name: "Composite",
    className: "CsmUsageQuotaCollection",
    modelProperties: {
      value: {
        serializedName: "value",
        required: true,
        xmlName: "value",
        xmlElementName: "CsmUsageQuota",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "CsmUsageQuota"
            }
          }
        }
      },
      nextLink: {
        serializedName: "nextLink",
        readOnly: true,
        xmlName: "nextLink",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const CsmUsageQuota: coreClient.CompositeMapper = {
  serializedName: "CsmUsageQuota",
  type: {
    name: "Composite",
    className: "CsmUsageQuota",
    modelProperties: {
      unit: {
        serializedName: "unit",
        xmlName: "unit",
        type: {
          name: "String"
        }
      },
      nextResetTime: {
        serializedName: "nextResetTime",
        xmlName: "nextResetTime",
        type: {
          name: "DateTime"
        }
      },
      currentValue: {
        serializedName: "currentValue",
        xmlName: "currentValue",
        type: {
          name: "Number"
        }
      },
      limit: {
        serializedName: "limit",
        xmlName: "limit",
        type: {
          name: "Number"
        }
      },
      name: {
        serializedName: "name",
        xmlName: "name",
        type: {
          name: "Composite",
          className: "LocalizableString"
        }
      }
    }
  }
};

export const LocalizableString: coreClient.CompositeMapper = {
  serializedName: "LocalizableString",
  type: {
    name: "Composite",
    className: "LocalizableString",
    modelProperties: {
      value: {
        serializedName: "value",
        xmlName: "value",
        type: {
          name: "String"
        }
      },
      localizedValue: {
        serializedName: "localizedValue",
        xmlName: "localizedValue",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const WebJobCollection: coreClient.CompositeMapper = {
  serializedName: "WebJobCollection",
  type: {
    name: "Composite",
    className: "WebJobCollection",
    modelProperties: {
      value: {
        serializedName: "value",
        required: true,
        xmlName: "value",
        xmlElementName: "WebJob",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "WebJob"
            }
          }
        }
      },
      nextLink: {
        serializedName: "nextLink",
        readOnly: true,
        xmlName: "nextLink",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const SourceControlCollection: coreClient.CompositeMapper = {
  serializedName: "SourceControlCollection",
  type: {
    name: "Composite",
    className: "SourceControlCollection",
    modelProperties: {
      value: {
        serializedName: "value",
        required: true,
        xmlName: "value",
        xmlElementName: "SourceControl",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "SourceControl"
            }
          }
        }
      },
      nextLink: {
        serializedName: "nextLink",
        readOnly: true,
        xmlName: "nextLink",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const BillingMeterCollection: coreClient.CompositeMapper = {
  serializedName: "BillingMeterCollection",
  type: {
    name: "Composite",
    className: "BillingMeterCollection",
    modelProperties: {
      value: {
        serializedName: "value",
        required: true,
        xmlName: "value",
        xmlElementName: "BillingMeter",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "BillingMeter"
            }
          }
        }
      },
      nextLink: {
        serializedName: "nextLink",
        readOnly: true,
        xmlName: "nextLink",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const ResourceNameAvailabilityRequest: coreClient.CompositeMapper = {
  serializedName: "ResourceNameAvailabilityRequest",
  type: {
    name: "Composite",
    className: "ResourceNameAvailabilityRequest",
    modelProperties: {
      name: {
        serializedName: "name",
        required: true,
        xmlName: "name",
        type: {
          name: "String"
        }
      },
      typeParam: {
        serializedName: "type",
        required: true,
        xmlName: "type",
        type: {
          name: "String"
        }
      },
      isFqdn: {
        serializedName: "isFqdn",
        xmlName: "isFqdn",
        type: {
          name: "Boolean"
        }
      }
    }
  }
};

export const ResourceNameAvailability: coreClient.CompositeMapper = {
  serializedName: "ResourceNameAvailability",
  type: {
    name: "Composite",
    className: "ResourceNameAvailability",
    modelProperties: {
      nameAvailable: {
        serializedName: "nameAvailable",
        xmlName: "nameAvailable",
        type: {
          name: "Boolean"
        }
      },
      reason: {
        serializedName: "reason",
        xmlName: "reason",
        type: {
          name: "String"
        }
      },
      message: {
        serializedName: "message",
        xmlName: "message",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const DeploymentLocations: coreClient.CompositeMapper = {
  serializedName: "DeploymentLocations",
  type: {
    name: "Composite",
    className: "DeploymentLocations",
    modelProperties: {
      locations: {
        serializedName: "locations",
        xmlName: "locations",
        xmlElementName: "GeoRegion",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "GeoRegion"
            }
          }
        }
      },
      hostingEnvironments: {
        serializedName: "hostingEnvironments",
        xmlName: "hostingEnvironments",
        xmlElementName: "AppServiceEnvironment",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "AppServiceEnvironment"
            }
          }
        }
      },
      hostingEnvironmentDeploymentInfos: {
        serializedName: "hostingEnvironmentDeploymentInfos",
        xmlName: "hostingEnvironmentDeploymentInfos",
        xmlElementName: "HostingEnvironmentDeploymentInfo",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "HostingEnvironmentDeploymentInfo"
            }
          }
        }
      }
    }
  }
};

export const AppServiceEnvironment: coreClient.CompositeMapper = {
  serializedName: "AppServiceEnvironment",
  type: {
    name: "Composite",
    className: "AppServiceEnvironment",
    modelProperties: {
      name: {
        serializedName: "name",
        required: true,
        xmlName: "name",
        type: {
          name: "String"
        }
      },
      location: {
        serializedName: "location",
        required: true,
        xmlName: "location",
        type: {
          name: "String"
        }
      },
      provisioningState: {
        serializedName: "provisioningState",
        readOnly: true,
        xmlName: "provisioningState",
        type: {
          name: "Enum",
          allowedValues: [
            "Succeeded",
            "Failed",
            "Canceled",
            "InProgress",
            "Deleting"
          ]
        }
      },
      status: {
        serializedName: "status",
        readOnly: true,
        xmlName: "status",
        type: {
          name: "Enum",
          allowedValues: ["Preparing", "Ready", "Scaling", "Deleting"]
        }
      },
      vnetName: {
        serializedName: "vnetName",
        xmlName: "vnetName",
        type: {
          name: "String"
        }
      },
      vnetResourceGroupName: {
        serializedName: "vnetResourceGroupName",
        xmlName: "vnetResourceGroupName",
        type: {
          name: "String"
        }
      },
      vnetSubnetName: {
        serializedName: "vnetSubnetName",
        xmlName: "vnetSubnetName",
        type: {
          name: "String"
        }
      },
      virtualNetwork: {
        serializedName: "virtualNetwork",
        xmlName: "virtualNetwork",
        type: {
          name: "Composite",
          className: "VirtualNetworkProfile"
        }
      },
      internalLoadBalancingMode: {
        serializedName: "internalLoadBalancingMode",
        xmlName: "internalLoadBalancingMode",
        type: {
          name: "Enum",
          allowedValues: ["None", "Web", "Publishing"]
        }
      },
      multiSize: {
        serializedName: "multiSize",
        xmlName: "multiSize",
        type: {
          name: "String"
        }
      },
      multiRoleCount: {
        serializedName: "multiRoleCount",
        xmlName: "multiRoleCount",
        type: {
          name: "Number"
        }
      },
      workerPools: {
        serializedName: "workerPools",
        required: true,
        xmlName: "workerPools",
        xmlElementName: "WorkerPool",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "WorkerPool"
            }
          }
        }
      },
      ipsslAddressCount: {
        serializedName: "ipsslAddressCount",
        xmlName: "ipsslAddressCount",
        type: {
          name: "Number"
        }
      },
      databaseEdition: {
        serializedName: "databaseEdition",
        readOnly: true,
        xmlName: "databaseEdition",
        type: {
          name: "String"
        }
      },
      databaseServiceObjective: {
        serializedName: "databaseServiceObjective",
        readOnly: true,
        xmlName: "databaseServiceObjective",
        type: {
          name: "String"
        }
      },
      upgradeDomains: {
        serializedName: "upgradeDomains",
        readOnly: true,
        xmlName: "upgradeDomains",
        type: {
          name: "Number"
        }
      },
      subscriptionId: {
        serializedName: "subscriptionId",
        readOnly: true,
        xmlName: "subscriptionId",
        type: {
          name: "String"
        }
      },
      dnsSuffix: {
        serializedName: "dnsSuffix",
        xmlName: "dnsSuffix",
        type: {
          name: "String"
        }
      },
      lastAction: {
        serializedName: "lastAction",
        readOnly: true,
        xmlName: "lastAction",
        type: {
          name: "String"
        }
      },
      lastActionResult: {
        serializedName: "lastActionResult",
        readOnly: true,
        xmlName: "lastActionResult",
        type: {
          name: "String"
        }
      },
      allowedMultiSizes: {
        serializedName: "allowedMultiSizes",
        readOnly: true,
        xmlName: "allowedMultiSizes",
        type: {
          name: "String"
        }
      },
      allowedWorkerSizes: {
        serializedName: "allowedWorkerSizes",
        readOnly: true,
        xmlName: "allowedWorkerSizes",
        type: {
          name: "String"
        }
      },
      maximumNumberOfMachines: {
        serializedName: "maximumNumberOfMachines",
        readOnly: true,
        xmlName: "maximumNumberOfMachines",
        type: {
          name: "Number"
        }
      },
      vipMappings: {
        serializedName: "vipMappings",
        readOnly: true,
        xmlName: "vipMappings",
        xmlElementName: "VirtualIPMapping",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "VirtualIPMapping"
            }
          }
        }
      },
      environmentCapacities: {
        serializedName: "environmentCapacities",
        readOnly: true,
        xmlName: "environmentCapacities",
        xmlElementName: "StampCapacity",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "StampCapacity"
            }
          }
        }
      },
      networkAccessControlList: {
        serializedName: "networkAccessControlList",
        xmlName: "networkAccessControlList",
        xmlElementName: "NetworkAccessControlEntry",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "NetworkAccessControlEntry"
            }
          }
        }
      },
      environmentIsHealthy: {
        serializedName: "environmentIsHealthy",
        readOnly: true,
        xmlName: "environmentIsHealthy",
        type: {
          name: "Boolean"
        }
      },
      environmentStatus: {
        serializedName: "environmentStatus",
        readOnly: true,
        xmlName: "environmentStatus",
        type: {
          name: "String"
        }
      },
      resourceGroup: {
        serializedName: "resourceGroup",
        readOnly: true,
        xmlName: "resourceGroup",
        type: {
          name: "String"
        }
      },
      frontEndScaleFactor: {
        serializedName: "frontEndScaleFactor",
        xmlName: "frontEndScaleFactor",
        type: {
          name: "Number"
        }
      },
      defaultFrontEndScaleFactor: {
        serializedName: "defaultFrontEndScaleFactor",
        readOnly: true,
        xmlName: "defaultFrontEndScaleFactor",
        type: {
          name: "Number"
        }
      },
      apiManagementAccountId: {
        serializedName: "apiManagementAccountId",
        xmlName: "apiManagementAccountId",
        type: {
          name: "String"
        }
      },
      suspended: {
        serializedName: "suspended",
        xmlName: "suspended",
        type: {
          name: "Boolean"
        }
      },
      dynamicCacheEnabled: {
        serializedName: "dynamicCacheEnabled",
        xmlName: "dynamicCacheEnabled",
        type: {
          name: "Boolean"
        }
      },
      clusterSettings: {
        serializedName: "clusterSettings",
        xmlName: "clusterSettings",
        xmlElementName: "NameValuePair",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "NameValuePair"
            }
          }
        }
      },
      userWhitelistedIpRanges: {
        serializedName: "userWhitelistedIpRanges",
        xmlName: "userWhitelistedIpRanges",
        xmlElementName: "AppServiceEnvironmentUserWhitelistedIpRangesItem",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "String"
            }
          }
        }
      },
      hasLinuxWorkers: {
        serializedName: "hasLinuxWorkers",
        xmlName: "hasLinuxWorkers",
        type: {
          name: "Boolean"
        }
      },
      sslCertKeyVaultId: {
        serializedName: "sslCertKeyVaultId",
        xmlName: "sslCertKeyVaultId",
        type: {
          name: "String"
        }
      },
      sslCertKeyVaultSecretName: {
        serializedName: "sslCertKeyVaultSecretName",
        xmlName: "sslCertKeyVaultSecretName",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const VirtualNetworkProfile: coreClient.CompositeMapper = {
  serializedName: "VirtualNetworkProfile",
  type: {
    name: "Composite",
    className: "VirtualNetworkProfile",
    modelProperties: {
      id: {
        serializedName: "id",
        xmlName: "id",
        type: {
          name: "String"
        }
      },
      name: {
        serializedName: "name",
        readOnly: true,
        xmlName: "name",
        type: {
          name: "String"
        }
      },
      type: {
        serializedName: "type",
        readOnly: true,
        xmlName: "type",
        type: {
          name: "String"
        }
      },
      subnet: {
        serializedName: "subnet",
        xmlName: "subnet",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const WorkerPool: coreClient.CompositeMapper = {
  serializedName: "WorkerPool",
  type: {
    name: "Composite",
    className: "WorkerPool",
    modelProperties: {
      workerSizeId: {
        serializedName: "workerSizeId",
        xmlName: "workerSizeId",
        type: {
          name: "Number"
        }
      },
      computeMode: {
        serializedName: "computeMode",
        xmlName: "computeMode",
        type: {
          name: "Enum",
          allowedValues: ["Shared", "Dedicated", "Dynamic"]
        }
      },
      workerSize: {
        serializedName: "workerSize",
        xmlName: "workerSize",
        type: {
          name: "String"
        }
      },
      workerCount: {
        serializedName: "workerCount",
        xmlName: "workerCount",
        type: {
          name: "Number"
        }
      },
      instanceNames: {
        serializedName: "instanceNames",
        readOnly: true,
        xmlName: "instanceNames",
        xmlElementName: "WorkerPoolInstanceNamesItem",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "String"
            }
          }
        }
      }
    }
  }
};

export const VirtualIPMapping: coreClient.CompositeMapper = {
  serializedName: "VirtualIPMapping",
  type: {
    name: "Composite",
    className: "VirtualIPMapping",
    modelProperties: {
      virtualIP: {
        serializedName: "virtualIP",
        xmlName: "virtualIP",
        type: {
          name: "String"
        }
      },
      internalHttpPort: {
        serializedName: "internalHttpPort",
        xmlName: "internalHttpPort",
        type: {
          name: "Number"
        }
      },
      internalHttpsPort: {
        serializedName: "internalHttpsPort",
        xmlName: "internalHttpsPort",
        type: {
          name: "Number"
        }
      },
      inUse: {
        serializedName: "inUse",
        xmlName: "inUse",
        type: {
          name: "Boolean"
        }
      }
    }
  }
};

export const StampCapacity: coreClient.CompositeMapper = {
  serializedName: "StampCapacity",
  type: {
    name: "Composite",
    className: "StampCapacity",
    modelProperties: {
      name: {
        serializedName: "name",
        xmlName: "name",
        type: {
          name: "String"
        }
      },
      availableCapacity: {
        serializedName: "availableCapacity",
        xmlName: "availableCapacity",
        type: {
          name: "Number"
        }
      },
      totalCapacity: {
        serializedName: "totalCapacity",
        xmlName: "totalCapacity",
        type: {
          name: "Number"
        }
      },
      unit: {
        serializedName: "unit",
        xmlName: "unit",
        type: {
          name: "String"
        }
      },
      computeMode: {
        serializedName: "computeMode",
        xmlName: "computeMode",
        type: {
          name: "Enum",
          allowedValues: ["Shared", "Dedicated", "Dynamic"]
        }
      },
      workerSize: {
        serializedName: "workerSize",
        xmlName: "workerSize",
        type: {
          name: "Enum",
          allowedValues: [
            "Small",
            "Medium",
            "Large",
            "D1",
            "D2",
            "D3",
            "Default"
          ]
        }
      },
      workerSizeId: {
        serializedName: "workerSizeId",
        xmlName: "workerSizeId",
        type: {
          name: "Number"
        }
      },
      excludeFromCapacityAllocation: {
        serializedName: "excludeFromCapacityAllocation",
        xmlName: "excludeFromCapacityAllocation",
        type: {
          name: "Boolean"
        }
      },
      isApplicableForAllComputeModes: {
        serializedName: "isApplicableForAllComputeModes",
        xmlName: "isApplicableForAllComputeModes",
        type: {
          name: "Boolean"
        }
      },
      siteMode: {
        serializedName: "siteMode",
        xmlName: "siteMode",
        type: {
          name: "String"
        }
      },
      isLinux: {
        serializedName: "isLinux",
        xmlName: "isLinux",
        type: {
          name: "Boolean"
        }
      }
    }
  }
};

export const NetworkAccessControlEntry: coreClient.CompositeMapper = {
  serializedName: "NetworkAccessControlEntry",
  type: {
    name: "Composite",
    className: "NetworkAccessControlEntry",
    modelProperties: {
      action: {
        serializedName: "action",
        xmlName: "action",
        type: {
          name: "Enum",
          allowedValues: ["Permit", "Deny"]
        }
      },
      description: {
        serializedName: "description",
        xmlName: "description",
        type: {
          name: "String"
        }
      },
      order: {
        serializedName: "order",
        xmlName: "order",
        type: {
          name: "Number"
        }
      },
      remoteSubnet: {
        serializedName: "remoteSubnet",
        xmlName: "remoteSubnet",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const HostingEnvironmentDeploymentInfo: coreClient.CompositeMapper = {
  serializedName: "HostingEnvironmentDeploymentInfo",
  type: {
    name: "Composite",
    className: "HostingEnvironmentDeploymentInfo",
    modelProperties: {
      name: {
        serializedName: "name",
        xmlName: "name",
        type: {
          name: "String"
        }
      },
      location: {
        serializedName: "location",
        xmlName: "location",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const GeoRegionCollection: coreClient.CompositeMapper = {
  serializedName: "GeoRegionCollection",
  type: {
    name: "Composite",
    className: "GeoRegionCollection",
    modelProperties: {
      value: {
        serializedName: "value",
        required: true,
        xmlName: "value",
        xmlElementName: "GeoRegion",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "GeoRegion"
            }
          }
        }
      },
      nextLink: {
        serializedName: "nextLink",
        readOnly: true,
        xmlName: "nextLink",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const NameIdentifier: coreClient.CompositeMapper = {
  serializedName: "NameIdentifier",
  type: {
    name: "Composite",
    className: "NameIdentifier",
    modelProperties: {
      name: {
        serializedName: "name",
        xmlName: "name",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const PremierAddOnOfferCollection: coreClient.CompositeMapper = {
  serializedName: "PremierAddOnOfferCollection",
  type: {
    name: "Composite",
    className: "PremierAddOnOfferCollection",
    modelProperties: {
      value: {
        serializedName: "value",
        required: true,
        xmlName: "value",
        xmlElementName: "PremierAddOnOffer",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "PremierAddOnOffer"
            }
          }
        }
      },
      nextLink: {
        serializedName: "nextLink",
        readOnly: true,
        xmlName: "nextLink",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const SkuInfos: coreClient.CompositeMapper = {
  serializedName: "SkuInfos",
  type: {
    name: "Composite",
    className: "SkuInfos",
    modelProperties: {
      resourceType: {
        serializedName: "resourceType",
        xmlName: "resourceType",
        type: {
          name: "String"
        }
      },
      skus: {
        serializedName: "skus",
        xmlName: "skus",
        xmlElementName: "GlobalCsmSkuDescription",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "GlobalCsmSkuDescription"
            }
          }
        }
      }
    }
  }
};

export const GlobalCsmSkuDescription: coreClient.CompositeMapper = {
  serializedName: "GlobalCsmSkuDescription",
  type: {
    name: "Composite",
    className: "GlobalCsmSkuDescription",
    modelProperties: {
      name: {
        serializedName: "name",
        xmlName: "name",
        type: {
          name: "String"
        }
      },
      tier: {
        serializedName: "tier",
        xmlName: "tier",
        type: {
          name: "String"
        }
      },
      size: {
        serializedName: "size",
        xmlName: "size",
        type: {
          name: "String"
        }
      },
      family: {
        serializedName: "family",
        xmlName: "family",
        type: {
          name: "String"
        }
      },
      capacity: {
        serializedName: "capacity",
        xmlName: "capacity",
        type: {
          name: "Composite",
          className: "SkuCapacity"
        }
      },
      locations: {
        serializedName: "locations",
        xmlName: "locations",
        xmlElementName: "GlobalCsmSkuDescriptionLocationsItem",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "String"
            }
          }
        }
      },
      capabilities: {
        serializedName: "capabilities",
        xmlName: "capabilities",
        xmlElementName: "Capability",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "Capability"
            }
          }
        }
      }
    }
  }
};

export const SkuCapacity: coreClient.CompositeMapper = {
  serializedName: "SkuCapacity",
  type: {
    name: "Composite",
    className: "SkuCapacity",
    modelProperties: {
      minimum: {
        serializedName: "minimum",
        xmlName: "minimum",
        type: {
          name: "Number"
        }
      },
      maximum: {
        serializedName: "maximum",
        xmlName: "maximum",
        type: {
          name: "Number"
        }
      },
      default: {
        serializedName: "default",
        xmlName: "default",
        type: {
          name: "Number"
        }
      },
      scaleType: {
        serializedName: "scaleType",
        xmlName: "scaleType",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const Capability: coreClient.CompositeMapper = {
  serializedName: "Capability",
  type: {
    name: "Composite",
    className: "Capability",
    modelProperties: {
      name: {
        serializedName: "name",
        xmlName: "name",
        type: {
          name: "String"
        }
      },
      value: {
        serializedName: "value",
        xmlName: "value",
        type: {
          name: "String"
        }
      },
      reason: {
        serializedName: "reason",
        xmlName: "reason",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const CsmMoveResourceEnvelope: coreClient.CompositeMapper = {
  serializedName: "CsmMoveResourceEnvelope",
  type: {
    name: "Composite",
    className: "CsmMoveResourceEnvelope",
    modelProperties: {
      targetResourceGroup: {
        constraints: {
          Pattern: new RegExp(" ^[-\\w\\._\\(\\)]+[^\\.]$"),
          MaxLength: 90,
          MinLength: 1
        },
        serializedName: "targetResourceGroup",
        xmlName: "targetResourceGroup",
        type: {
          name: "String"
        }
      },
      resources: {
        serializedName: "resources",
        xmlName: "resources",
        xmlElementName: "CsmMoveResourceEnvelopeResourcesItem",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "String"
            }
          }
        }
      }
    }
  }
};

export const ValidateRequest: coreClient.CompositeMapper = {
  serializedName: "ValidateRequest",
  type: {
    name: "Composite",
    className: "ValidateRequest",
    modelProperties: {
      name: {
        serializedName: "name",
        required: true,
        xmlName: "name",
        type: {
          name: "String"
        }
      },
      type: {
        serializedName: "type",
        required: true,
        xmlName: "type",
        type: {
          name: "String"
        }
      },
      location: {
        serializedName: "location",
        required: true,
        xmlName: "location",
        type: {
          name: "String"
        }
      },
      serverFarmId: {
        serializedName: "properties.serverFarmId",
        xmlName: "properties.serverFarmId",
        type: {
          name: "String"
        }
      },
      skuName: {
        serializedName: "properties.skuName",
        xmlName: "properties.skuName",
        type: {
          name: "String"
        }
      },
      needLinuxWorkers: {
        serializedName: "properties.needLinuxWorkers",
        xmlName: "properties.needLinuxWorkers",
        type: {
          name: "Boolean"
        }
      },
      isSpot: {
        serializedName: "properties.isSpot",
        xmlName: "properties.isSpot",
        type: {
          name: "Boolean"
        }
      },
      capacity: {
        constraints: {
          InclusiveMinimum: 1
        },
        serializedName: "properties.capacity",
        xmlName: "properties.capacity",
        type: {
          name: "Number"
        }
      },
      hostingEnvironment: {
        serializedName: "properties.hostingEnvironment",
        xmlName: "properties.hostingEnvironment",
        type: {
          name: "String"
        }
      },
      isXenon: {
        serializedName: "properties.isXenon",
        xmlName: "properties.isXenon",
        type: {
          name: "Boolean"
        }
      }
    }
  }
};

export const ValidateResponse: coreClient.CompositeMapper = {
  serializedName: "ValidateResponse",
  type: {
    name: "Composite",
    className: "ValidateResponse",
    modelProperties: {
      status: {
        serializedName: "status",
        xmlName: "status",
        type: {
          name: "String"
        }
      },
      error: {
        serializedName: "error",
        xmlName: "error",
        type: {
          name: "Composite",
          className: "ValidateResponseError"
        }
      }
    }
  }
};

export const ValidateResponseError: coreClient.CompositeMapper = {
  serializedName: "ValidateResponseError",
  type: {
    name: "Composite",
    className: "ValidateResponseError",
    modelProperties: {
      code: {
        serializedName: "code",
        xmlName: "code",
        type: {
          name: "String"
        }
      },
      message: {
        serializedName: "message",
        xmlName: "message",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const ValidateContainerSettingsRequest: coreClient.CompositeMapper = {
  serializedName: "ValidateContainerSettingsRequest",
  type: {
    name: "Composite",
    className: "ValidateContainerSettingsRequest",
    modelProperties: {
      baseUrl: {
        serializedName: "baseUrl",
        xmlName: "baseUrl",
        type: {
          name: "String"
        }
      },
      username: {
        serializedName: "username",
        xmlName: "username",
        type: {
          name: "String"
        }
      },
      password: {
        serializedName: "password",
        xmlName: "password",
        type: {
          name: "String"
        }
      },
      repository: {
        serializedName: "repository",
        xmlName: "repository",
        type: {
          name: "String"
        }
      },
      tag: {
        serializedName: "tag",
        xmlName: "tag",
        type: {
          name: "String"
        }
      },
      platform: {
        serializedName: "platform",
        xmlName: "platform",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const AppServicePlanCollection: coreClient.CompositeMapper = {
  serializedName: "AppServicePlanCollection",
  type: {
    name: "Composite",
    className: "AppServicePlanCollection",
    modelProperties: {
      value: {
        serializedName: "value",
        required: true,
        xmlName: "value",
        xmlElementName: "AppServicePlan",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "AppServicePlan"
            }
          }
        }
      },
      nextLink: {
        serializedName: "nextLink",
        readOnly: true,
        xmlName: "nextLink",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const SkuDescription: coreClient.CompositeMapper = {
  serializedName: "SkuDescription",
  type: {
    name: "Composite",
    className: "SkuDescription",
    modelProperties: {
      name: {
        serializedName: "name",
        xmlName: "name",
        type: {
          name: "String"
        }
      },
      tier: {
        serializedName: "tier",
        xmlName: "tier",
        type: {
          name: "String"
        }
      },
      size: {
        serializedName: "size",
        xmlName: "size",
        type: {
          name: "String"
        }
      },
      family: {
        serializedName: "family",
        xmlName: "family",
        type: {
          name: "String"
        }
      },
      capacity: {
        serializedName: "capacity",
        xmlName: "capacity",
        type: {
          name: "Number"
        }
      },
      skuCapacity: {
        serializedName: "skuCapacity",
        xmlName: "skuCapacity",
        type: {
          name: "Composite",
          className: "SkuCapacity"
        }
      },
      locations: {
        serializedName: "locations",
        xmlName: "locations",
        xmlElementName: "SkuDescriptionLocationsItem",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "String"
            }
          }
        }
      },
      capabilities: {
        serializedName: "capabilities",
        xmlName: "capabilities",
        xmlElementName: "Capability",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "Capability"
            }
          }
        }
      }
    }
  }
};

export const ResourceCollection: coreClient.CompositeMapper = {
  serializedName: "ResourceCollection",
  type: {
    name: "Composite",
    className: "ResourceCollection",
    modelProperties: {
      value: {
        serializedName: "value",
        required: true,
        xmlName: "value",
        xmlElementName: "ResourceCollectionValueItem",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "String"
            }
          }
        }
      },
      nextLink: {
        serializedName: "nextLink",
        readOnly: true,
        xmlName: "nextLink",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const HybridConnectionCollection: coreClient.CompositeMapper = {
  serializedName: "HybridConnectionCollection",
  type: {
    name: "Composite",
    className: "HybridConnectionCollection",
    modelProperties: {
      value: {
        serializedName: "value",
        required: true,
        xmlName: "value",
        xmlElementName: "HybridConnection",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "HybridConnection"
            }
          }
        }
      },
      nextLink: {
        serializedName: "nextLink",
        readOnly: true,
        xmlName: "nextLink",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const ApplicationStackCollection: coreClient.CompositeMapper = {
  serializedName: "ApplicationStackCollection",
  type: {
    name: "Composite",
    className: "ApplicationStackCollection",
    modelProperties: {
      value: {
        serializedName: "value",
        required: true,
        xmlName: "value",
        xmlElementName: "ApplicationStack",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "ApplicationStack"
            }
          }
        }
      },
      nextLink: {
        serializedName: "nextLink",
        readOnly: true,
        xmlName: "nextLink",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const ApplicationStack: coreClient.CompositeMapper = {
  serializedName: "ApplicationStack",
  type: {
    name: "Composite",
    className: "ApplicationStack",
    modelProperties: {
      name: {
        serializedName: "name",
        xmlName: "name",
        type: {
          name: "String"
        }
      },
      display: {
        serializedName: "display",
        xmlName: "display",
        type: {
          name: "String"
        }
      },
      dependency: {
        serializedName: "dependency",
        xmlName: "dependency",
        type: {
          name: "String"
        }
      },
      majorVersions: {
        serializedName: "majorVersions",
        xmlName: "majorVersions",
        xmlElementName: "StackMajorVersion",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "StackMajorVersion"
            }
          }
        }
      },
      frameworks: {
        serializedName: "frameworks",
        xmlName: "frameworks",
        xmlElementName: "ApplicationStack",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "ApplicationStack"
            }
          }
        }
      }
    }
  }
};

export const StackMajorVersion: coreClient.CompositeMapper = {
  serializedName: "StackMajorVersion",
  type: {
    name: "Composite",
    className: "StackMajorVersion",
    modelProperties: {
      displayVersion: {
        serializedName: "displayVersion",
        xmlName: "displayVersion",
        type: {
          name: "String"
        }
      },
      runtimeVersion: {
        serializedName: "runtimeVersion",
        xmlName: "runtimeVersion",
        type: {
          name: "String"
        }
      },
      isDefault: {
        serializedName: "isDefault",
        xmlName: "isDefault",
        type: {
          name: "Boolean"
        }
      },
      minorVersions: {
        serializedName: "minorVersions",
        xmlName: "minorVersions",
        xmlElementName: "StackMinorVersion",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "StackMinorVersion"
            }
          }
        }
      },
      applicationInsights: {
        serializedName: "applicationInsights",
        xmlName: "applicationInsights",
        type: {
          name: "Boolean"
        }
      }
    }
  }
};

export const StackMinorVersion: coreClient.CompositeMapper = {
  serializedName: "StackMinorVersion",
  type: {
    name: "Composite",
    className: "StackMinorVersion",
    modelProperties: {
      displayVersion: {
        serializedName: "displayVersion",
        xmlName: "displayVersion",
        type: {
          name: "String"
        }
      },
      runtimeVersion: {
        serializedName: "runtimeVersion",
        xmlName: "runtimeVersion",
        type: {
          name: "String"
        }
      },
      isDefault: {
        serializedName: "isDefault",
        xmlName: "isDefault",
        type: {
          name: "Boolean"
        }
      },
      isRemoteDebuggingEnabled: {
        serializedName: "isRemoteDebuggingEnabled",
        xmlName: "isRemoteDebuggingEnabled",
        type: {
          name: "Boolean"
        }
      }
    }
  }
};

export const CsmOperationCollection: coreClient.CompositeMapper = {
  serializedName: "CsmOperationCollection",
  type: {
    name: "Composite",
    className: "CsmOperationCollection",
    modelProperties: {
      value: {
        serializedName: "value",
        required: true,
        xmlName: "value",
        xmlElementName: "CsmOperationDescription",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "CsmOperationDescription"
            }
          }
        }
      },
      nextLink: {
        serializedName: "nextLink",
        readOnly: true,
        xmlName: "nextLink",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const CsmOperationDescription: coreClient.CompositeMapper = {
  serializedName: "CsmOperationDescription",
  type: {
    name: "Composite",
    className: "CsmOperationDescription",
    modelProperties: {
      name: {
        serializedName: "name",
        xmlName: "name",
        type: {
          name: "String"
        }
      },
      display: {
        serializedName: "display",
        xmlName: "display",
        type: {
          name: "Composite",
          className: "CsmOperationDisplay"
        }
      },
      origin: {
        serializedName: "origin",
        xmlName: "origin",
        type: {
          name: "String"
        }
      },
      properties: {
        serializedName: "properties",
        xmlName: "properties",
        type: {
          name: "Composite",
          className: "CsmOperationDescriptionProperties"
        }
      }
    }
  }
};

export const CsmOperationDisplay: coreClient.CompositeMapper = {
  serializedName: "CsmOperationDisplay",
  type: {
    name: "Composite",
    className: "CsmOperationDisplay",
    modelProperties: {
      provider: {
        serializedName: "provider",
        xmlName: "provider",
        type: {
          name: "String"
        }
      },
      resource: {
        serializedName: "resource",
        xmlName: "resource",
        type: {
          name: "String"
        }
      },
      operation: {
        serializedName: "operation",
        xmlName: "operation",
        type: {
          name: "String"
        }
      },
      description: {
        serializedName: "description",
        xmlName: "description",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const CsmOperationDescriptionProperties: coreClient.CompositeMapper = {
  serializedName: "CsmOperationDescriptionProperties",
  type: {
    name: "Composite",
    className: "CsmOperationDescriptionProperties",
    modelProperties: {
      serviceSpecification: {
        serializedName: "serviceSpecification",
        xmlName: "serviceSpecification",
        type: {
          name: "Composite",
          className: "ServiceSpecification"
        }
      }
    }
  }
};

export const ServiceSpecification: coreClient.CompositeMapper = {
  serializedName: "ServiceSpecification",
  type: {
    name: "Composite",
    className: "ServiceSpecification",
    modelProperties: {
      metricSpecifications: {
        serializedName: "metricSpecifications",
        xmlName: "metricSpecifications",
        xmlElementName: "MetricSpecification",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "MetricSpecification"
            }
          }
        }
      },
      logSpecifications: {
        serializedName: "logSpecifications",
        xmlName: "logSpecifications",
        xmlElementName: "LogSpecification",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "LogSpecification"
            }
          }
        }
      }
    }
  }
};

export const MetricSpecification: coreClient.CompositeMapper = {
  serializedName: "MetricSpecification",
  type: {
    name: "Composite",
    className: "MetricSpecification",
    modelProperties: {
      name: {
        serializedName: "name",
        xmlName: "name",
        type: {
          name: "String"
        }
      },
      displayName: {
        serializedName: "displayName",
        xmlName: "displayName",
        type: {
          name: "String"
        }
      },
      displayDescription: {
        serializedName: "displayDescription",
        xmlName: "displayDescription",
        type: {
          name: "String"
        }
      },
      unit: {
        serializedName: "unit",
        xmlName: "unit",
        type: {
          name: "String"
        }
      },
      aggregationType: {
        serializedName: "aggregationType",
        xmlName: "aggregationType",
        type: {
          name: "String"
        }
      },
      supportsInstanceLevelAggregation: {
        serializedName: "supportsInstanceLevelAggregation",
        xmlName: "supportsInstanceLevelAggregation",
        type: {
          name: "Boolean"
        }
      },
      enableRegionalMdmAccount: {
        serializedName: "enableRegionalMdmAccount",
        xmlName: "enableRegionalMdmAccount",
        type: {
          name: "Boolean"
        }
      },
      sourceMdmAccount: {
        serializedName: "sourceMdmAccount",
        xmlName: "sourceMdmAccount",
        type: {
          name: "String"
        }
      },
      sourceMdmNamespace: {
        serializedName: "sourceMdmNamespace",
        xmlName: "sourceMdmNamespace",
        type: {
          name: "String"
        }
      },
      metricFilterPattern: {
        serializedName: "metricFilterPattern",
        xmlName: "metricFilterPattern",
        type: {
          name: "String"
        }
      },
      fillGapWithZero: {
        serializedName: "fillGapWithZero",
        xmlName: "fillGapWithZero",
        type: {
          name: "Boolean"
        }
      },
      isInternal: {
        serializedName: "isInternal",
        xmlName: "isInternal",
        type: {
          name: "Boolean"
        }
      },
      dimensions: {
        serializedName: "dimensions",
        xmlName: "dimensions",
        xmlElementName: "Dimension",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "Dimension"
            }
          }
        }
      },
      category: {
        serializedName: "category",
        xmlName: "category",
        type: {
          name: "String"
        }
      },
      availabilities: {
        serializedName: "availabilities",
        xmlName: "availabilities",
        xmlElementName: "MetricAvailability",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "MetricAvailability"
            }
          }
        }
      }
    }
  }
};

export const Dimension: coreClient.CompositeMapper = {
  serializedName: "Dimension",
  type: {
    name: "Composite",
    className: "Dimension",
    modelProperties: {
      name: {
        serializedName: "name",
        xmlName: "name",
        type: {
          name: "String"
        }
      },
      displayName: {
        serializedName: "displayName",
        xmlName: "displayName",
        type: {
          name: "String"
        }
      },
      internalName: {
        serializedName: "internalName",
        xmlName: "internalName",
        type: {
          name: "String"
        }
      },
      toBeExportedForShoebox: {
        serializedName: "toBeExportedForShoebox",
        xmlName: "toBeExportedForShoebox",
        type: {
          name: "Boolean"
        }
      }
    }
  }
};

export const MetricAvailability: coreClient.CompositeMapper = {
  serializedName: "MetricAvailability",
  type: {
    name: "Composite",
    className: "MetricAvailability",
    modelProperties: {
      timeGrain: {
        serializedName: "timeGrain",
        xmlName: "timeGrain",
        type: {
          name: "String"
        }
      },
      blobDuration: {
        serializedName: "blobDuration",
        xmlName: "blobDuration",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const LogSpecification: coreClient.CompositeMapper = {
  serializedName: "LogSpecification",
  type: {
    name: "Composite",
    className: "LogSpecification",
    modelProperties: {
      name: {
        serializedName: "name",
        xmlName: "name",
        type: {
          name: "String"
        }
      },
      displayName: {
        serializedName: "displayName",
        xmlName: "displayName",
        type: {
          name: "String"
        }
      },
      blobDuration: {
        serializedName: "blobDuration",
        xmlName: "blobDuration",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const RecommendationCollection: coreClient.CompositeMapper = {
  serializedName: "RecommendationCollection",
  type: {
    name: "Composite",
    className: "RecommendationCollection",
    modelProperties: {
      value: {
        serializedName: "value",
        required: true,
        xmlName: "value",
        xmlElementName: "Recommendation",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "Recommendation"
            }
          }
        }
      },
      nextLink: {
        serializedName: "nextLink",
        readOnly: true,
        xmlName: "nextLink",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const Certificate: coreClient.CompositeMapper = {
  serializedName: "Certificate",
  type: {
    name: "Composite",
    className: "Certificate",
    modelProperties: {
      ...Resource.type.modelProperties,
      friendlyName: {
        serializedName: "properties.friendlyName",
        readOnly: true,
        xmlName: "properties.friendlyName",
        type: {
          name: "String"
        }
      },
      subjectName: {
        serializedName: "properties.subjectName",
        readOnly: true,
        xmlName: "properties.subjectName",
        type: {
          name: "String"
        }
      },
      hostNames: {
        serializedName: "properties.hostNames",
        xmlName: "properties.hostNames",
        xmlElementName: "CertificatePropertiesHostNamesItem",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "String"
            }
          }
        }
      },
      pfxBlob: {
        serializedName: "properties.pfxBlob",
        xmlName: "properties.pfxBlob",
        type: {
          name: "ByteArray"
        }
      },
      siteName: {
        serializedName: "properties.siteName",
        readOnly: true,
        xmlName: "properties.siteName",
        type: {
          name: "String"
        }
      },
      selfLink: {
        serializedName: "properties.selfLink",
        readOnly: true,
        xmlName: "properties.selfLink",
        type: {
          name: "String"
        }
      },
      issuer: {
        serializedName: "properties.issuer",
        readOnly: true,
        xmlName: "properties.issuer",
        type: {
          name: "String"
        }
      },
      issueDate: {
        serializedName: "properties.issueDate",
        readOnly: true,
        xmlName: "properties.issueDate",
        type: {
          name: "DateTime"
        }
      },
      expirationDate: {
        serializedName: "properties.expirationDate",
        readOnly: true,
        xmlName: "properties.expirationDate",
        type: {
          name: "DateTime"
        }
      },
      password: {
        serializedName: "properties.password",
        xmlName: "properties.password",
        type: {
          name: "String"
        }
      },
      thumbprint: {
        serializedName: "properties.thumbprint",
        readOnly: true,
        xmlName: "properties.thumbprint",
        type: {
          name: "String"
        }
      },
      valid: {
        serializedName: "properties.valid",
        readOnly: true,
        xmlName: "properties.valid",
        type: {
          name: "Boolean"
        }
      },
      cerBlob: {
        serializedName: "properties.cerBlob",
        readOnly: true,
        xmlName: "properties.cerBlob",
        type: {
          name: "ByteArray"
        }
      },
      publicKeyHash: {
        serializedName: "properties.publicKeyHash",
        readOnly: true,
        xmlName: "properties.publicKeyHash",
        type: {
          name: "String"
        }
      },
      hostingEnvironmentProfile: {
        serializedName: "properties.hostingEnvironmentProfile",
        xmlName: "properties.hostingEnvironmentProfile",
        type: {
          name: "Composite",
          className: "HostingEnvironmentProfile"
        }
      },
      keyVaultId: {
        serializedName: "properties.keyVaultId",
        xmlName: "properties.keyVaultId",
        type: {
          name: "String"
        }
      },
      keyVaultSecretName: {
        serializedName: "properties.keyVaultSecretName",
        xmlName: "properties.keyVaultSecretName",
        type: {
          name: "String"
        }
      },
      keyVaultSecretStatus: {
        serializedName: "properties.keyVaultSecretStatus",
        readOnly: true,
        xmlName: "properties.keyVaultSecretStatus",
        type: {
          name: "Enum",
          allowedValues: [
            "Initialized",
            "WaitingOnCertificateOrder",
            "Succeeded",
            "CertificateOrderFailed",
            "OperationNotPermittedOnKeyVault",
            "AzureServiceUnauthorizedToAccessKeyVault",
            "KeyVaultDoesNotExist",
            "KeyVaultSecretDoesNotExist",
            "UnknownError",
            "ExternalPrivateKey",
            "Unknown"
          ]
        }
      },
      serverFarmId: {
        serializedName: "properties.serverFarmId",
        xmlName: "properties.serverFarmId",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const Site: coreClient.CompositeMapper = {
  serializedName: "Site",
  type: {
    name: "Composite",
    className: "Site",
    modelProperties: {
      ...Resource.type.modelProperties,
      identity: {
        serializedName: "identity",
        xmlName: "identity",
        type: {
          name: "Composite",
          className: "ManagedServiceIdentity"
        }
      },
      state: {
        serializedName: "properties.state",
        readOnly: true,
        xmlName: "properties.state",
        type: {
          name: "String"
        }
      },
      hostNames: {
        serializedName: "properties.hostNames",
        readOnly: true,
        xmlName: "properties.hostNames",
        xmlElementName: "SitePropertiesHostNamesItem",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "String"
            }
          }
        }
      },
      repositorySiteName: {
        serializedName: "properties.repositorySiteName",
        readOnly: true,
        xmlName: "properties.repositorySiteName",
        type: {
          name: "String"
        }
      },
      usageState: {
        serializedName: "properties.usageState",
        readOnly: true,
        xmlName: "properties.usageState",
        type: {
          name: "Enum",
          allowedValues: ["Normal", "Exceeded"]
        }
      },
      enabled: {
        serializedName: "properties.enabled",
        xmlName: "properties.enabled",
        type: {
          name: "Boolean"
        }
      },
      enabledHostNames: {
        serializedName: "properties.enabledHostNames",
        readOnly: true,
        xmlName: "properties.enabledHostNames",
        xmlElementName: "SitePropertiesEnabledHostNamesItem",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "String"
            }
          }
        }
      },
      availabilityState: {
        serializedName: "properties.availabilityState",
        readOnly: true,
        xmlName: "properties.availabilityState",
        type: {
          name: "Enum",
          allowedValues: ["Normal", "Limited", "DisasterRecoveryMode"]
        }
      },
      hostNameSslStates: {
        serializedName: "properties.hostNameSslStates",
        xmlName: "properties.hostNameSslStates",
        xmlElementName: "HostNameSslState",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "HostNameSslState"
            }
          }
        }
      },
      serverFarmId: {
        serializedName: "properties.serverFarmId",
        xmlName: "properties.serverFarmId",
        type: {
          name: "String"
        }
      },
      reserved: {
        defaultValue: false,
        serializedName: "properties.reserved",
        xmlName: "properties.reserved",
        type: {
          name: "Boolean"
        }
      },
      isXenon: {
        defaultValue: false,
        serializedName: "properties.isXenon",
        xmlName: "properties.isXenon",
        type: {
          name: "Boolean"
        }
      },
      hyperV: {
        defaultValue: false,
        serializedName: "properties.hyperV",
        xmlName: "properties.hyperV",
        type: {
          name: "Boolean"
        }
      },
      lastModifiedTimeUtc: {
        serializedName: "properties.lastModifiedTimeUtc",
        readOnly: true,
        xmlName: "properties.lastModifiedTimeUtc",
        type: {
          name: "DateTime"
        }
      },
      siteConfig: {
        serializedName: "properties.siteConfig",
        xmlName: "properties.siteConfig",
        type: {
          name: "Composite",
          className: "SiteConfig"
        }
      },
      trafficManagerHostNames: {
        serializedName: "properties.trafficManagerHostNames",
        readOnly: true,
        xmlName: "properties.trafficManagerHostNames",
        xmlElementName: "SitePropertiesTrafficManagerHostNamesItem",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "String"
            }
          }
        }
      },
      scmSiteAlsoStopped: {
        defaultValue: false,
        serializedName: "properties.scmSiteAlsoStopped",
        xmlName: "properties.scmSiteAlsoStopped",
        type: {
          name: "Boolean"
        }
      },
      targetSwapSlot: {
        serializedName: "properties.targetSwapSlot",
        readOnly: true,
        xmlName: "properties.targetSwapSlot",
        type: {
          name: "String"
        }
      },
      hostingEnvironmentProfile: {
        serializedName: "properties.hostingEnvironmentProfile",
        xmlName: "properties.hostingEnvironmentProfile",
        type: {
          name: "Composite",
          className: "HostingEnvironmentProfile"
        }
      },
      clientAffinityEnabled: {
        serializedName: "properties.clientAffinityEnabled",
        xmlName: "properties.clientAffinityEnabled",
        type: {
          name: "Boolean"
        }
      },
      clientCertEnabled: {
        serializedName: "properties.clientCertEnabled",
        xmlName: "properties.clientCertEnabled",
        type: {
          name: "Boolean"
        }
      },
      clientCertExclusionPaths: {
        serializedName: "properties.clientCertExclusionPaths",
        xmlName: "properties.clientCertExclusionPaths",
        type: {
          name: "String"
        }
      },
      hostNamesDisabled: {
        serializedName: "properties.hostNamesDisabled",
        xmlName: "properties.hostNamesDisabled",
        type: {
          name: "Boolean"
        }
      },
      outboundIpAddresses: {
        serializedName: "properties.outboundIpAddresses",
        readOnly: true,
        xmlName: "properties.outboundIpAddresses",
        type: {
          name: "String"
        }
      },
      possibleOutboundIpAddresses: {
        serializedName: "properties.possibleOutboundIpAddresses",
        readOnly: true,
        xmlName: "properties.possibleOutboundIpAddresses",
        type: {
          name: "String"
        }
      },
      containerSize: {
        serializedName: "properties.containerSize",
        xmlName: "properties.containerSize",
        type: {
          name: "Number"
        }
      },
      dailyMemoryTimeQuota: {
        serializedName: "properties.dailyMemoryTimeQuota",
        xmlName: "properties.dailyMemoryTimeQuota",
        type: {
          name: "Number"
        }
      },
      suspendedTill: {
        serializedName: "properties.suspendedTill",
        readOnly: true,
        xmlName: "properties.suspendedTill",
        type: {
          name: "DateTime"
        }
      },
      maxNumberOfWorkers: {
        serializedName: "properties.maxNumberOfWorkers",
        readOnly: true,
        xmlName: "properties.maxNumberOfWorkers",
        type: {
          name: "Number"
        }
      },
      cloningInfo: {
        serializedName: "properties.cloningInfo",
        xmlName: "properties.cloningInfo",
        type: {
          name: "Composite",
          className: "CloningInfo"
        }
      },
      resourceGroup: {
        serializedName: "properties.resourceGroup",
        readOnly: true,
        xmlName: "properties.resourceGroup",
        type: {
          name: "String"
        }
      },
      isDefaultContainer: {
        serializedName: "properties.isDefaultContainer",
        readOnly: true,
        xmlName: "properties.isDefaultContainer",
        type: {
          name: "Boolean"
        }
      },
      defaultHostName: {
        serializedName: "properties.defaultHostName",
        readOnly: true,
        xmlName: "properties.defaultHostName",
        type: {
          name: "String"
        }
      },
      slotSwapStatus: {
        serializedName: "properties.slotSwapStatus",
        xmlName: "properties.slotSwapStatus",
        type: {
          name: "Composite",
          className: "SlotSwapStatus"
        }
      },
      httpsOnly: {
        serializedName: "properties.httpsOnly",
        xmlName: "properties.httpsOnly",
        type: {
          name: "Boolean"
        }
      },
      redundancyMode: {
        serializedName: "properties.redundancyMode",
        xmlName: "properties.redundancyMode",
        type: {
          name: "Enum",
          allowedValues: [
            "None",
            "Manual",
            "Failover",
            "ActiveActive",
            "GeoRedundant"
          ]
        }
      },
      inProgressOperationId: {
        serializedName: "properties.inProgressOperationId",
        readOnly: true,
        xmlName: "properties.inProgressOperationId",
        type: {
          name: "Uuid"
        }
      },
      geoDistributions: {
        serializedName: "properties.geoDistributions",
        xmlName: "properties.geoDistributions",
        xmlElementName: "GeoDistribution",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "GeoDistribution"
            }
          }
        }
      }
    }
  }
};

export const PremierAddOn: coreClient.CompositeMapper = {
  serializedName: "PremierAddOn",
  type: {
    name: "Composite",
    className: "PremierAddOn",
    modelProperties: {
      ...Resource.type.modelProperties,
      sku: {
        serializedName: "properties.sku",
        xmlName: "properties.sku",
        type: {
          name: "String"
        }
      },
      product: {
        serializedName: "properties.product",
        xmlName: "properties.product",
        type: {
          name: "String"
        }
      },
      vendor: {
        serializedName: "properties.vendor",
        xmlName: "properties.vendor",
        type: {
          name: "String"
        }
      },
      marketplacePublisher: {
        serializedName: "properties.marketplacePublisher",
        xmlName: "properties.marketplacePublisher",
        type: {
          name: "String"
        }
      },
      marketplaceOffer: {
        serializedName: "properties.marketplaceOffer",
        xmlName: "properties.marketplaceOffer",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const AppServicePlan: coreClient.CompositeMapper = {
  serializedName: "AppServicePlan",
  type: {
    name: "Composite",
    className: "AppServicePlan",
    modelProperties: {
      ...Resource.type.modelProperties,
      sku: {
        serializedName: "sku",
        xmlName: "sku",
        type: {
          name: "Composite",
          className: "SkuDescription"
        }
      },
      workerTierName: {
        serializedName: "properties.workerTierName",
        xmlName: "properties.workerTierName",
        type: {
          name: "String"
        }
      },
      status: {
        serializedName: "properties.status",
        readOnly: true,
        xmlName: "properties.status",
        type: {
          name: "Enum",
          allowedValues: ["Ready", "Pending", "Creating"]
        }
      },
      subscription: {
        serializedName: "properties.subscription",
        readOnly: true,
        xmlName: "properties.subscription",
        type: {
          name: "String"
        }
      },
      hostingEnvironmentProfile: {
        serializedName: "properties.hostingEnvironmentProfile",
        xmlName: "properties.hostingEnvironmentProfile",
        type: {
          name: "Composite",
          className: "HostingEnvironmentProfile"
        }
      },
      maximumNumberOfWorkers: {
        serializedName: "properties.maximumNumberOfWorkers",
        readOnly: true,
        xmlName: "properties.maximumNumberOfWorkers",
        type: {
          name: "Number"
        }
      },
      geoRegion: {
        serializedName: "properties.geoRegion",
        readOnly: true,
        xmlName: "properties.geoRegion",
        type: {
          name: "String"
        }
      },
      perSiteScaling: {
        defaultValue: false,
        serializedName: "properties.perSiteScaling",
        xmlName: "properties.perSiteScaling",
        type: {
          name: "Boolean"
        }
      },
      maximumElasticWorkerCount: {
        serializedName: "properties.maximumElasticWorkerCount",
        xmlName: "properties.maximumElasticWorkerCount",
        type: {
          name: "Number"
        }
      },
      numberOfSites: {
        serializedName: "properties.numberOfSites",
        readOnly: true,
        xmlName: "properties.numberOfSites",
        type: {
          name: "Number"
        }
      },
      isSpot: {
        serializedName: "properties.isSpot",
        xmlName: "properties.isSpot",
        type: {
          name: "Boolean"
        }
      },
      spotExpirationTime: {
        serializedName: "properties.spotExpirationTime",
        xmlName: "properties.spotExpirationTime",
        type: {
          name: "DateTime"
        }
      },
      freeOfferExpirationTime: {
        serializedName: "properties.freeOfferExpirationTime",
        xmlName: "properties.freeOfferExpirationTime",
        type: {
          name: "DateTime"
        }
      },
      resourceGroup: {
        serializedName: "properties.resourceGroup",
        readOnly: true,
        xmlName: "properties.resourceGroup",
        type: {
          name: "String"
        }
      },
      reserved: {
        defaultValue: false,
        serializedName: "properties.reserved",
        xmlName: "properties.reserved",
        type: {
          name: "Boolean"
        }
      },
      isXenon: {
        defaultValue: false,
        serializedName: "properties.isXenon",
        xmlName: "properties.isXenon",
        type: {
          name: "Boolean"
        }
      },
      hyperV: {
        defaultValue: false,
        serializedName: "properties.hyperV",
        xmlName: "properties.hyperV",
        type: {
          name: "Boolean"
        }
      },
      targetWorkerCount: {
        serializedName: "properties.targetWorkerCount",
        xmlName: "properties.targetWorkerCount",
        type: {
          name: "Number"
        }
      },
      targetWorkerSizeId: {
        serializedName: "properties.targetWorkerSizeId",
        xmlName: "properties.targetWorkerSizeId",
        type: {
          name: "Number"
        }
      },
      provisioningState: {
        serializedName: "properties.provisioningState",
        readOnly: true,
        xmlName: "properties.provisioningState",
        type: {
          name: "Enum",
          allowedValues: [
            "Succeeded",
            "Failed",
            "Canceled",
            "InProgress",
            "Deleting"
          ]
        }
      }
    }
  }
};

export const CertificatePatchResource: coreClient.CompositeMapper = {
  serializedName: "CertificatePatchResource",
  type: {
    name: "Composite",
    className: "CertificatePatchResource",
    modelProperties: {
      ...ProxyOnlyResource.type.modelProperties,
      friendlyName: {
        serializedName: "properties.friendlyName",
        readOnly: true,
        xmlName: "properties.friendlyName",
        type: {
          name: "String"
        }
      },
      subjectName: {
        serializedName: "properties.subjectName",
        readOnly: true,
        xmlName: "properties.subjectName",
        type: {
          name: "String"
        }
      },
      hostNames: {
        serializedName: "properties.hostNames",
        xmlName: "properties.hostNames",
        xmlElementName: "CertificatePatchResourcePropertiesHostNamesItem",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "String"
            }
          }
        }
      },
      pfxBlob: {
        serializedName: "properties.pfxBlob",
        xmlName: "properties.pfxBlob",
        type: {
          name: "ByteArray"
        }
      },
      siteName: {
        serializedName: "properties.siteName",
        readOnly: true,
        xmlName: "properties.siteName",
        type: {
          name: "String"
        }
      },
      selfLink: {
        serializedName: "properties.selfLink",
        readOnly: true,
        xmlName: "properties.selfLink",
        type: {
          name: "String"
        }
      },
      issuer: {
        serializedName: "properties.issuer",
        readOnly: true,
        xmlName: "properties.issuer",
        type: {
          name: "String"
        }
      },
      issueDate: {
        serializedName: "properties.issueDate",
        readOnly: true,
        xmlName: "properties.issueDate",
        type: {
          name: "DateTime"
        }
      },
      expirationDate: {
        serializedName: "properties.expirationDate",
        readOnly: true,
        xmlName: "properties.expirationDate",
        type: {
          name: "DateTime"
        }
      },
      password: {
        serializedName: "properties.password",
        xmlName: "properties.password",
        type: {
          name: "String"
        }
      },
      thumbprint: {
        serializedName: "properties.thumbprint",
        readOnly: true,
        xmlName: "properties.thumbprint",
        type: {
          name: "String"
        }
      },
      valid: {
        serializedName: "properties.valid",
        readOnly: true,
        xmlName: "properties.valid",
        type: {
          name: "Boolean"
        }
      },
      cerBlob: {
        serializedName: "properties.cerBlob",
        readOnly: true,
        xmlName: "properties.cerBlob",
        type: {
          name: "ByteArray"
        }
      },
      publicKeyHash: {
        serializedName: "properties.publicKeyHash",
        readOnly: true,
        xmlName: "properties.publicKeyHash",
        type: {
          name: "String"
        }
      },
      hostingEnvironmentProfile: {
        serializedName: "properties.hostingEnvironmentProfile",
        xmlName: "properties.hostingEnvironmentProfile",
        type: {
          name: "Composite",
          className: "HostingEnvironmentProfile"
        }
      },
      keyVaultId: {
        serializedName: "properties.keyVaultId",
        xmlName: "properties.keyVaultId",
        type: {
          name: "String"
        }
      },
      keyVaultSecretName: {
        serializedName: "properties.keyVaultSecretName",
        xmlName: "properties.keyVaultSecretName",
        type: {
          name: "String"
        }
      },
      keyVaultSecretStatus: {
        serializedName: "properties.keyVaultSecretStatus",
        readOnly: true,
        xmlName: "properties.keyVaultSecretStatus",
        type: {
          name: "Enum",
          allowedValues: [
            "Initialized",
            "WaitingOnCertificateOrder",
            "Succeeded",
            "CertificateOrderFailed",
            "OperationNotPermittedOnKeyVault",
            "AzureServiceUnauthorizedToAccessKeyVault",
            "KeyVaultDoesNotExist",
            "KeyVaultSecretDoesNotExist",
            "UnknownError",
            "ExternalPrivateKey",
            "Unknown"
          ]
        }
      },
      serverFarmId: {
        serializedName: "properties.serverFarmId",
        xmlName: "properties.serverFarmId",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const PushSettings: coreClient.CompositeMapper = {
  serializedName: "PushSettings",
  type: {
    name: "Composite",
    className: "PushSettings",
    modelProperties: {
      ...ProxyOnlyResource.type.modelProperties,
      isPushEnabled: {
        serializedName: "properties.isPushEnabled",
        xmlName: "properties.isPushEnabled",
        type: {
          name: "Boolean"
        }
      },
      tagWhitelistJson: {
        serializedName: "properties.tagWhitelistJson",
        xmlName: "properties.tagWhitelistJson",
        type: {
          name: "String"
        }
      },
      tagsRequiringAuth: {
        serializedName: "properties.tagsRequiringAuth",
        xmlName: "properties.tagsRequiringAuth",
        type: {
          name: "String"
        }
      },
      dynamicTagsJson: {
        serializedName: "properties.dynamicTagsJson",
        xmlName: "properties.dynamicTagsJson",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const SitePatchResource: coreClient.CompositeMapper = {
  serializedName: "SitePatchResource",
  type: {
    name: "Composite",
    className: "SitePatchResource",
    modelProperties: {
      ...ProxyOnlyResource.type.modelProperties,
      identity: {
        serializedName: "identity",
        xmlName: "identity",
        type: {
          name: "Composite",
          className: "ManagedServiceIdentity"
        }
      },
      state: {
        serializedName: "properties.state",
        readOnly: true,
        xmlName: "properties.state",
        type: {
          name: "String"
        }
      },
      hostNames: {
        serializedName: "properties.hostNames",
        readOnly: true,
        xmlName: "properties.hostNames",
        xmlElementName: "SitePatchResourcePropertiesHostNamesItem",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "String"
            }
          }
        }
      },
      repositorySiteName: {
        serializedName: "properties.repositorySiteName",
        readOnly: true,
        xmlName: "properties.repositorySiteName",
        type: {
          name: "String"
        }
      },
      usageState: {
        serializedName: "properties.usageState",
        readOnly: true,
        xmlName: "properties.usageState",
        type: {
          name: "Enum",
          allowedValues: ["Normal", "Exceeded"]
        }
      },
      enabled: {
        serializedName: "properties.enabled",
        xmlName: "properties.enabled",
        type: {
          name: "Boolean"
        }
      },
      enabledHostNames: {
        serializedName: "properties.enabledHostNames",
        readOnly: true,
        xmlName: "properties.enabledHostNames",
        xmlElementName: "SitePatchResourcePropertiesEnabledHostNamesItem",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "String"
            }
          }
        }
      },
      availabilityState: {
        serializedName: "properties.availabilityState",
        readOnly: true,
        xmlName: "properties.availabilityState",
        type: {
          name: "Enum",
          allowedValues: ["Normal", "Limited", "DisasterRecoveryMode"]
        }
      },
      hostNameSslStates: {
        serializedName: "properties.hostNameSslStates",
        xmlName: "properties.hostNameSslStates",
        xmlElementName: "HostNameSslState",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "HostNameSslState"
            }
          }
        }
      },
      serverFarmId: {
        serializedName: "properties.serverFarmId",
        xmlName: "properties.serverFarmId",
        type: {
          name: "String"
        }
      },
      reserved: {
        defaultValue: false,
        serializedName: "properties.reserved",
        xmlName: "properties.reserved",
        type: {
          name: "Boolean"
        }
      },
      isXenon: {
        defaultValue: false,
        serializedName: "properties.isXenon",
        xmlName: "properties.isXenon",
        type: {
          name: "Boolean"
        }
      },
      hyperV: {
        defaultValue: false,
        serializedName: "properties.hyperV",
        xmlName: "properties.hyperV",
        type: {
          name: "Boolean"
        }
      },
      lastModifiedTimeUtc: {
        serializedName: "properties.lastModifiedTimeUtc",
        readOnly: true,
        xmlName: "properties.lastModifiedTimeUtc",
        type: {
          name: "DateTime"
        }
      },
      siteConfig: {
        serializedName: "properties.siteConfig",
        xmlName: "properties.siteConfig",
        type: {
          name: "Composite",
          className: "SiteConfig"
        }
      },
      trafficManagerHostNames: {
        serializedName: "properties.trafficManagerHostNames",
        readOnly: true,
        xmlName: "properties.trafficManagerHostNames",
        xmlElementName:
          "SitePatchResourcePropertiesTrafficManagerHostNamesItem",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "String"
            }
          }
        }
      },
      scmSiteAlsoStopped: {
        defaultValue: false,
        serializedName: "properties.scmSiteAlsoStopped",
        xmlName: "properties.scmSiteAlsoStopped",
        type: {
          name: "Boolean"
        }
      },
      targetSwapSlot: {
        serializedName: "properties.targetSwapSlot",
        readOnly: true,
        xmlName: "properties.targetSwapSlot",
        type: {
          name: "String"
        }
      },
      hostingEnvironmentProfile: {
        serializedName: "properties.hostingEnvironmentProfile",
        xmlName: "properties.hostingEnvironmentProfile",
        type: {
          name: "Composite",
          className: "HostingEnvironmentProfile"
        }
      },
      clientAffinityEnabled: {
        serializedName: "properties.clientAffinityEnabled",
        xmlName: "properties.clientAffinityEnabled",
        type: {
          name: "Boolean"
        }
      },
      clientCertEnabled: {
        serializedName: "properties.clientCertEnabled",
        xmlName: "properties.clientCertEnabled",
        type: {
          name: "Boolean"
        }
      },
      clientCertExclusionPaths: {
        serializedName: "properties.clientCertExclusionPaths",
        xmlName: "properties.clientCertExclusionPaths",
        type: {
          name: "String"
        }
      },
      hostNamesDisabled: {
        serializedName: "properties.hostNamesDisabled",
        xmlName: "properties.hostNamesDisabled",
        type: {
          name: "Boolean"
        }
      },
      outboundIpAddresses: {
        serializedName: "properties.outboundIpAddresses",
        readOnly: true,
        xmlName: "properties.outboundIpAddresses",
        type: {
          name: "String"
        }
      },
      possibleOutboundIpAddresses: {
        serializedName: "properties.possibleOutboundIpAddresses",
        readOnly: true,
        xmlName: "properties.possibleOutboundIpAddresses",
        type: {
          name: "String"
        }
      },
      containerSize: {
        serializedName: "properties.containerSize",
        xmlName: "properties.containerSize",
        type: {
          name: "Number"
        }
      },
      dailyMemoryTimeQuota: {
        serializedName: "properties.dailyMemoryTimeQuota",
        xmlName: "properties.dailyMemoryTimeQuota",
        type: {
          name: "Number"
        }
      },
      suspendedTill: {
        serializedName: "properties.suspendedTill",
        readOnly: true,
        xmlName: "properties.suspendedTill",
        type: {
          name: "DateTime"
        }
      },
      maxNumberOfWorkers: {
        serializedName: "properties.maxNumberOfWorkers",
        readOnly: true,
        xmlName: "properties.maxNumberOfWorkers",
        type: {
          name: "Number"
        }
      },
      cloningInfo: {
        serializedName: "properties.cloningInfo",
        xmlName: "properties.cloningInfo",
        type: {
          name: "Composite",
          className: "CloningInfo"
        }
      },
      resourceGroup: {
        serializedName: "properties.resourceGroup",
        readOnly: true,
        xmlName: "properties.resourceGroup",
        type: {
          name: "String"
        }
      },
      isDefaultContainer: {
        serializedName: "properties.isDefaultContainer",
        readOnly: true,
        xmlName: "properties.isDefaultContainer",
        type: {
          name: "Boolean"
        }
      },
      defaultHostName: {
        serializedName: "properties.defaultHostName",
        readOnly: true,
        xmlName: "properties.defaultHostName",
        type: {
          name: "String"
        }
      },
      slotSwapStatus: {
        serializedName: "properties.slotSwapStatus",
        xmlName: "properties.slotSwapStatus",
        type: {
          name: "Composite",
          className: "SlotSwapStatus"
        }
      },
      httpsOnly: {
        serializedName: "properties.httpsOnly",
        xmlName: "properties.httpsOnly",
        type: {
          name: "Boolean"
        }
      },
      redundancyMode: {
        serializedName: "properties.redundancyMode",
        xmlName: "properties.redundancyMode",
        type: {
          name: "Enum",
          allowedValues: [
            "None",
            "Manual",
            "Failover",
            "ActiveActive",
            "GeoRedundant"
          ]
        }
      },
      inProgressOperationId: {
        serializedName: "properties.inProgressOperationId",
        readOnly: true,
        xmlName: "properties.inProgressOperationId",
        type: {
          name: "Uuid"
        }
      },
      geoDistributions: {
        serializedName: "properties.geoDistributions",
        xmlName: "properties.geoDistributions",
        xmlElementName: "GeoDistribution",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "GeoDistribution"
            }
          }
        }
      }
    }
  }
};

export const CustomHostnameAnalysisResult: coreClient.CompositeMapper = {
  serializedName: "CustomHostnameAnalysisResult",
  type: {
    name: "Composite",
    className: "CustomHostnameAnalysisResult",
    modelProperties: {
      ...ProxyOnlyResource.type.modelProperties,
      isHostnameAlreadyVerified: {
        serializedName: "properties.isHostnameAlreadyVerified",
        readOnly: true,
        xmlName: "properties.isHostnameAlreadyVerified",
        type: {
          name: "Boolean"
        }
      },
      customDomainVerificationTest: {
        serializedName: "properties.customDomainVerificationTest",
        readOnly: true,
        xmlName: "properties.customDomainVerificationTest",
        type: {
          name: "Enum",
          allowedValues: ["Passed", "Failed", "Skipped"]
        }
      },
      customDomainVerificationFailureInfo: {
        serializedName: "properties.customDomainVerificationFailureInfo",
        xmlName: "properties.customDomainVerificationFailureInfo",
        type: {
          name: "Composite",
          className: "ErrorEntity"
        }
      },
      hasConflictOnScaleUnit: {
        serializedName: "properties.hasConflictOnScaleUnit",
        readOnly: true,
        xmlName: "properties.hasConflictOnScaleUnit",
        type: {
          name: "Boolean"
        }
      },
      hasConflictAcrossSubscription: {
        serializedName: "properties.hasConflictAcrossSubscription",
        readOnly: true,
        xmlName: "properties.hasConflictAcrossSubscription",
        type: {
          name: "Boolean"
        }
      },
      conflictingAppResourceId: {
        serializedName: "properties.conflictingAppResourceId",
        readOnly: true,
        xmlName: "properties.conflictingAppResourceId",
        type: {
          name: "String"
        }
      },
      cNameRecords: {
        serializedName: "properties.cNameRecords",
        xmlName: "properties.cNameRecords",
        xmlElementName:
          "CustomHostnameAnalysisResultPropertiesCNameRecordsItem",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "String"
            }
          }
        }
      },
      txtRecords: {
        serializedName: "properties.txtRecords",
        xmlName: "properties.txtRecords",
        xmlElementName: "CustomHostnameAnalysisResultPropertiesTxtRecordsItem",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "String"
            }
          }
        }
      },
      aRecords: {
        serializedName: "properties.aRecords",
        xmlName: "properties.aRecords",
        xmlElementName: "CustomHostnameAnalysisResultPropertiesARecordsItem",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "String"
            }
          }
        }
      },
      alternateCNameRecords: {
        serializedName: "properties.alternateCNameRecords",
        xmlName: "properties.alternateCNameRecords",
        xmlElementName:
          "CustomHostnameAnalysisResultPropertiesAlternateCNameRecordsItem",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "String"
            }
          }
        }
      },
      alternateTxtRecords: {
        serializedName: "properties.alternateTxtRecords",
        xmlName: "properties.alternateTxtRecords",
        xmlElementName:
          "CustomHostnameAnalysisResultPropertiesAlternateTxtRecordsItem",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "String"
            }
          }
        }
      }
    }
  }
};

export const BackupRequest: coreClient.CompositeMapper = {
  serializedName: "BackupRequest",
  type: {
    name: "Composite",
    className: "BackupRequest",
    modelProperties: {
      ...ProxyOnlyResource.type.modelProperties,
      backupName: {
        serializedName: "properties.backupName",
        xmlName: "properties.backupName",
        type: {
          name: "String"
        }
      },
      enabled: {
        serializedName: "properties.enabled",
        xmlName: "properties.enabled",
        type: {
          name: "Boolean"
        }
      },
      storageAccountUrl: {
        serializedName: "properties.storageAccountUrl",
        xmlName: "properties.storageAccountUrl",
        type: {
          name: "String"
        }
      },
      backupSchedule: {
        serializedName: "properties.backupSchedule",
        xmlName: "properties.backupSchedule",
        type: {
          name: "Composite",
          className: "BackupSchedule"
        }
      },
      databases: {
        serializedName: "properties.databases",
        xmlName: "properties.databases",
        xmlElementName: "DatabaseBackupSetting",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "DatabaseBackupSetting"
            }
          }
        }
      }
    }
  }
};

export const BackupItem: coreClient.CompositeMapper = {
  serializedName: "BackupItem",
  type: {
    name: "Composite",
    className: "BackupItem",
    modelProperties: {
      ...ProxyOnlyResource.type.modelProperties,
      backupId: {
        serializedName: "properties.id",
        readOnly: true,
        xmlName: "properties.id",
        type: {
          name: "Number"
        }
      },
      storageAccountUrl: {
        serializedName: "properties.storageAccountUrl",
        readOnly: true,
        xmlName: "properties.storageAccountUrl",
        type: {
          name: "String"
        }
      },
      blobName: {
        serializedName: "properties.blobName",
        readOnly: true,
        xmlName: "properties.blobName",
        type: {
          name: "String"
        }
      },
      namePropertiesName: {
        serializedName: "properties.name",
        readOnly: true,
        xmlName: "properties.name",
        type: {
          name: "String"
        }
      },
      status: {
        serializedName: "properties.status",
        readOnly: true,
        xmlName: "properties.status",
        type: {
          name: "Enum",
          allowedValues: [
            "InProgress",
            "Failed",
            "Succeeded",
            "TimedOut",
            "Created",
            "Skipped",
            "PartiallySucceeded",
            "DeleteInProgress",
            "DeleteFailed",
            "Deleted"
          ]
        }
      },
      sizeInBytes: {
        serializedName: "properties.sizeInBytes",
        readOnly: true,
        xmlName: "properties.sizeInBytes",
        type: {
          name: "Number"
        }
      },
      created: {
        serializedName: "properties.created",
        readOnly: true,
        xmlName: "properties.created",
        type: {
          name: "DateTime"
        }
      },
      log: {
        serializedName: "properties.log",
        readOnly: true,
        xmlName: "properties.log",
        type: {
          name: "String"
        }
      },
      databases: {
        serializedName: "properties.databases",
        readOnly: true,
        xmlName: "properties.databases",
        xmlElementName: "DatabaseBackupSetting",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "DatabaseBackupSetting"
            }
          }
        }
      },
      scheduled: {
        serializedName: "properties.scheduled",
        readOnly: true,
        xmlName: "properties.scheduled",
        type: {
          name: "Boolean"
        }
      },
      lastRestoreTimeStamp: {
        serializedName: "properties.lastRestoreTimeStamp",
        readOnly: true,
        xmlName: "properties.lastRestoreTimeStamp",
        type: {
          name: "DateTime"
        }
      },
      finishedTimeStamp: {
        serializedName: "properties.finishedTimeStamp",
        readOnly: true,
        xmlName: "properties.finishedTimeStamp",
        type: {
          name: "DateTime"
        }
      },
      correlationId: {
        serializedName: "properties.correlationId",
        readOnly: true,
        xmlName: "properties.correlationId",
        type: {
          name: "String"
        }
      },
      websiteSizeInBytes: {
        serializedName: "properties.websiteSizeInBytes",
        readOnly: true,
        xmlName: "properties.websiteSizeInBytes",
        type: {
          name: "Number"
        }
      }
    }
  }
};

export const RestoreRequest: coreClient.CompositeMapper = {
  serializedName: "RestoreRequest",
  type: {
    name: "Composite",
    className: "RestoreRequest",
    modelProperties: {
      ...ProxyOnlyResource.type.modelProperties,
      storageAccountUrl: {
        serializedName: "properties.storageAccountUrl",
        xmlName: "properties.storageAccountUrl",
        type: {
          name: "String"
        }
      },
      blobName: {
        serializedName: "properties.blobName",
        xmlName: "properties.blobName",
        type: {
          name: "String"
        }
      },
      overwrite: {
        serializedName: "properties.overwrite",
        xmlName: "properties.overwrite",
        type: {
          name: "Boolean"
        }
      },
      siteName: {
        serializedName: "properties.siteName",
        xmlName: "properties.siteName",
        type: {
          name: "String"
        }
      },
      databases: {
        serializedName: "properties.databases",
        xmlName: "properties.databases",
        xmlElementName: "DatabaseBackupSetting",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "DatabaseBackupSetting"
            }
          }
        }
      },
      ignoreConflictingHostNames: {
        defaultValue: false,
        serializedName: "properties.ignoreConflictingHostNames",
        xmlName: "properties.ignoreConflictingHostNames",
        type: {
          name: "Boolean"
        }
      },
      ignoreDatabases: {
        defaultValue: false,
        serializedName: "properties.ignoreDatabases",
        xmlName: "properties.ignoreDatabases",
        type: {
          name: "Boolean"
        }
      },
      appServicePlan: {
        serializedName: "properties.appServicePlan",
        xmlName: "properties.appServicePlan",
        type: {
          name: "String"
        }
      },
      operationType: {
        defaultValue: "Default",
        serializedName: "properties.operationType",
        xmlName: "properties.operationType",
        type: {
          name: "Enum",
          allowedValues: [
            "Default",
            "Clone",
            "Relocation",
            "Snapshot",
            "CloudFS"
          ]
        }
      },
      adjustConnectionStrings: {
        serializedName: "properties.adjustConnectionStrings",
        xmlName: "properties.adjustConnectionStrings",
        type: {
          name: "Boolean"
        }
      },
      hostingEnvironment: {
        serializedName: "properties.hostingEnvironment",
        xmlName: "properties.hostingEnvironment",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const SiteConfigResource: coreClient.CompositeMapper = {
  serializedName: "SiteConfigResource",
  type: {
    name: "Composite",
    className: "SiteConfigResource",
    modelProperties: {
      ...ProxyOnlyResource.type.modelProperties,
      numberOfWorkers: {
        serializedName: "properties.numberOfWorkers",
        xmlName: "properties.numberOfWorkers",
        type: {
          name: "Number"
        }
      },
      defaultDocuments: {
        serializedName: "properties.defaultDocuments",
        xmlName: "properties.defaultDocuments",
        xmlElementName: "SiteConfigDefaultDocumentsItem",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "String"
            }
          }
        }
      },
      netFrameworkVersion: {
        defaultValue: "v4.6",
        serializedName: "properties.netFrameworkVersion",
        xmlName: "properties.netFrameworkVersion",
        type: {
          name: "String"
        }
      },
      phpVersion: {
        serializedName: "properties.phpVersion",
        xmlName: "properties.phpVersion",
        type: {
          name: "String"
        }
      },
      pythonVersion: {
        serializedName: "properties.pythonVersion",
        xmlName: "properties.pythonVersion",
        type: {
          name: "String"
        }
      },
      nodeVersion: {
        serializedName: "properties.nodeVersion",
        xmlName: "properties.nodeVersion",
        type: {
          name: "String"
        }
      },
      linuxFxVersion: {
        serializedName: "properties.linuxFxVersion",
        xmlName: "properties.linuxFxVersion",
        type: {
          name: "String"
        }
      },
      windowsFxVersion: {
        serializedName: "properties.windowsFxVersion",
        xmlName: "properties.windowsFxVersion",
        type: {
          name: "String"
        }
      },
      requestTracingEnabled: {
        serializedName: "properties.requestTracingEnabled",
        xmlName: "properties.requestTracingEnabled",
        type: {
          name: "Boolean"
        }
      },
      requestTracingExpirationTime: {
        serializedName: "properties.requestTracingExpirationTime",
        xmlName: "properties.requestTracingExpirationTime",
        type: {
          name: "DateTime"
        }
      },
      remoteDebuggingEnabled: {
        serializedName: "properties.remoteDebuggingEnabled",
        xmlName: "properties.remoteDebuggingEnabled",
        type: {
          name: "Boolean"
        }
      },
      remoteDebuggingVersion: {
        serializedName: "properties.remoteDebuggingVersion",
        xmlName: "properties.remoteDebuggingVersion",
        type: {
          name: "String"
        }
      },
      httpLoggingEnabled: {
        serializedName: "properties.httpLoggingEnabled",
        xmlName: "properties.httpLoggingEnabled",
        type: {
          name: "Boolean"
        }
      },
      logsDirectorySizeLimit: {
        serializedName: "properties.logsDirectorySizeLimit",
        xmlName: "properties.logsDirectorySizeLimit",
        type: {
          name: "Number"
        }
      },
      detailedErrorLoggingEnabled: {
        serializedName: "properties.detailedErrorLoggingEnabled",
        xmlName: "properties.detailedErrorLoggingEnabled",
        type: {
          name: "Boolean"
        }
      },
      publishingUsername: {
        serializedName: "properties.publishingUsername",
        xmlName: "properties.publishingUsername",
        type: {
          name: "String"
        }
      },
      appSettings: {
        serializedName: "properties.appSettings",
        xmlName: "properties.appSettings",
        xmlElementName: "NameValuePair",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "NameValuePair"
            }
          }
        }
      },
      azureStorageAccounts: {
        serializedName: "properties.azureStorageAccounts",
        xmlName: "properties.azureStorageAccounts",
        type: {
          name: "Dictionary",
          value: {
            type: { name: "Composite", className: "AzureStorageInfoValue" }
          }
        }
      },
      connectionStrings: {
        serializedName: "properties.connectionStrings",
        xmlName: "properties.connectionStrings",
        xmlElementName: "ConnStringInfo",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "ConnStringInfo"
            }
          }
        }
      },
      machineKey: {
        serializedName: "properties.machineKey",
        xmlName: "properties.machineKey",
        type: {
          name: "Composite",
          className: "SiteMachineKey"
        }
      },
      handlerMappings: {
        serializedName: "properties.handlerMappings",
        xmlName: "properties.handlerMappings",
        xmlElementName: "HandlerMapping",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "HandlerMapping"
            }
          }
        }
      },
      documentRoot: {
        serializedName: "properties.documentRoot",
        xmlName: "properties.documentRoot",
        type: {
          name: "String"
        }
      },
      scmType: {
        serializedName: "properties.scmType",
        xmlName: "properties.scmType",
        type: {
          name: "String"
        }
      },
      use32BitWorkerProcess: {
        serializedName: "properties.use32BitWorkerProcess",
        xmlName: "properties.use32BitWorkerProcess",
        type: {
          name: "Boolean"
        }
      },
      webSocketsEnabled: {
        serializedName: "properties.webSocketsEnabled",
        xmlName: "properties.webSocketsEnabled",
        type: {
          name: "Boolean"
        }
      },
      alwaysOn: {
        serializedName: "properties.alwaysOn",
        xmlName: "properties.alwaysOn",
        type: {
          name: "Boolean"
        }
      },
      javaVersion: {
        serializedName: "properties.javaVersion",
        xmlName: "properties.javaVersion",
        type: {
          name: "String"
        }
      },
      javaContainer: {
        serializedName: "properties.javaContainer",
        xmlName: "properties.javaContainer",
        type: {
          name: "String"
        }
      },
      javaContainerVersion: {
        serializedName: "properties.javaContainerVersion",
        xmlName: "properties.javaContainerVersion",
        type: {
          name: "String"
        }
      },
      appCommandLine: {
        serializedName: "properties.appCommandLine",
        xmlName: "properties.appCommandLine",
        type: {
          name: "String"
        }
      },
      managedPipelineMode: {
        serializedName: "properties.managedPipelineMode",
        xmlName: "properties.managedPipelineMode",
        type: {
          name: "Enum",
          allowedValues: ["Integrated", "Classic"]
        }
      },
      virtualApplications: {
        serializedName: "properties.virtualApplications",
        xmlName: "properties.virtualApplications",
        xmlElementName: "VirtualApplication",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "VirtualApplication"
            }
          }
        }
      },
      loadBalancing: {
        serializedName: "properties.loadBalancing",
        xmlName: "properties.loadBalancing",
        type: {
          name: "Enum",
          allowedValues: [
            "WeightedRoundRobin",
            "LeastRequests",
            "LeastResponseTime",
            "WeightedTotalTraffic",
            "RequestHash"
          ]
        }
      },
      experiments: {
        serializedName: "properties.experiments",
        xmlName: "properties.experiments",
        type: {
          name: "Composite",
          className: "Experiments"
        }
      },
      limits: {
        serializedName: "properties.limits",
        xmlName: "properties.limits",
        type: {
          name: "Composite",
          className: "SiteLimits"
        }
      },
      autoHealEnabled: {
        serializedName: "properties.autoHealEnabled",
        xmlName: "properties.autoHealEnabled",
        type: {
          name: "Boolean"
        }
      },
      autoHealRules: {
        serializedName: "properties.autoHealRules",
        xmlName: "properties.autoHealRules",
        type: {
          name: "Composite",
          className: "AutoHealRules"
        }
      },
      tracingOptions: {
        serializedName: "properties.tracingOptions",
        xmlName: "properties.tracingOptions",
        type: {
          name: "String"
        }
      },
      vnetName: {
        serializedName: "properties.vnetName",
        xmlName: "properties.vnetName",
        type: {
          name: "String"
        }
      },
      cors: {
        serializedName: "properties.cors",
        xmlName: "properties.cors",
        type: {
          name: "Composite",
          className: "CorsSettings"
        }
      },
      push: {
        serializedName: "properties.push",
        xmlName: "properties.push",
        type: {
          name: "Composite",
          className: "PushSettings"
        }
      },
      apiDefinition: {
        serializedName: "properties.apiDefinition",
        xmlName: "properties.apiDefinition",
        type: {
          name: "Composite",
          className: "ApiDefinitionInfo"
        }
      },
      autoSwapSlotName: {
        serializedName: "properties.autoSwapSlotName",
        xmlName: "properties.autoSwapSlotName",
        type: {
          name: "String"
        }
      },
      localMySqlEnabled: {
        defaultValue: false,
        serializedName: "properties.localMySqlEnabled",
        xmlName: "properties.localMySqlEnabled",
        type: {
          name: "Boolean"
        }
      },
      managedServiceIdentityId: {
        serializedName: "properties.managedServiceIdentityId",
        xmlName: "properties.managedServiceIdentityId",
        type: {
          name: "Number"
        }
      },
      xManagedServiceIdentityId: {
        serializedName: "properties.xManagedServiceIdentityId",
        xmlName: "properties.xManagedServiceIdentityId",
        type: {
          name: "Number"
        }
      },
      ipSecurityRestrictions: {
        serializedName: "properties.ipSecurityRestrictions",
        xmlName: "properties.ipSecurityRestrictions",
        xmlElementName: "IpSecurityRestriction",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "IpSecurityRestriction"
            }
          }
        }
      },
      scmIpSecurityRestrictions: {
        serializedName: "properties.scmIpSecurityRestrictions",
        xmlName: "properties.scmIpSecurityRestrictions",
        xmlElementName: "IpSecurityRestriction",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "IpSecurityRestriction"
            }
          }
        }
      },
      scmIpSecurityRestrictionsUseMain: {
        serializedName: "properties.scmIpSecurityRestrictionsUseMain",
        xmlName: "properties.scmIpSecurityRestrictionsUseMain",
        type: {
          name: "Boolean"
        }
      },
      http20Enabled: {
        defaultValue: true,
        serializedName: "properties.http20Enabled",
        xmlName: "properties.http20Enabled",
        type: {
          name: "Boolean"
        }
      },
      minTlsVersion: {
        serializedName: "properties.minTlsVersion",
        xmlName: "properties.minTlsVersion",
        type: {
          name: "String"
        }
      },
      ftpsState: {
        serializedName: "properties.ftpsState",
        xmlName: "properties.ftpsState",
        type: {
          name: "String"
        }
      },
      reservedInstanceCount: {
        constraints: {
          InclusiveMaximum: 10,
          InclusiveMinimum: 0
        },
        serializedName: "properties.reservedInstanceCount",
        xmlName: "properties.reservedInstanceCount",
        type: {
          name: "Number"
        }
      }
    }
  }
};

export const StringDictionary: coreClient.CompositeMapper = {
  serializedName: "StringDictionary",
  type: {
    name: "Composite",
    className: "StringDictionary",
    modelProperties: {
      ...ProxyOnlyResource.type.modelProperties,
      properties: {
        serializedName: "properties",
        xmlName: "properties",
        type: {
          name: "Dictionary",
          value: { type: { name: "String" } }
        }
      }
    }
  }
};

export const SiteAuthSettings: coreClient.CompositeMapper = {
  serializedName: "SiteAuthSettings",
  type: {
    name: "Composite",
    className: "SiteAuthSettings",
    modelProperties: {
      ...ProxyOnlyResource.type.modelProperties,
      enabled: {
        serializedName: "properties.enabled",
        xmlName: "properties.enabled",
        type: {
          name: "Boolean"
        }
      },
      runtimeVersion: {
        serializedName: "properties.runtimeVersion",
        xmlName: "properties.runtimeVersion",
        type: {
          name: "String"
        }
      },
      unauthenticatedClientAction: {
        serializedName: "properties.unauthenticatedClientAction",
        xmlName: "properties.unauthenticatedClientAction",
        type: {
          name: "Enum",
          allowedValues: ["RedirectToLoginPage", "AllowAnonymous"]
        }
      },
      tokenStoreEnabled: {
        serializedName: "properties.tokenStoreEnabled",
        xmlName: "properties.tokenStoreEnabled",
        type: {
          name: "Boolean"
        }
      },
      allowedExternalRedirectUrls: {
        serializedName: "properties.allowedExternalRedirectUrls",
        xmlName: "properties.allowedExternalRedirectUrls",
        xmlElementName:
          "SiteAuthSettingsPropertiesAllowedExternalRedirectUrlsItem",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "String"
            }
          }
        }
      },
      defaultProvider: {
        serializedName: "properties.defaultProvider",
        xmlName: "properties.defaultProvider",
        type: {
          name: "Enum",
          allowedValues: [
            "AzureActiveDirectory",
            "Facebook",
            "Google",
            "MicrosoftAccount",
            "Twitter"
          ]
        }
      },
      tokenRefreshExtensionHours: {
        serializedName: "properties.tokenRefreshExtensionHours",
        xmlName: "properties.tokenRefreshExtensionHours",
        type: {
          name: "Number"
        }
      },
      clientId: {
        serializedName: "properties.clientId",
        xmlName: "properties.clientId",
        type: {
          name: "String"
        }
      },
      clientSecret: {
        serializedName: "properties.clientSecret",
        xmlName: "properties.clientSecret",
        type: {
          name: "String"
        }
      },
      clientSecretCertificateThumbprint: {
        serializedName: "properties.clientSecretCertificateThumbprint",
        xmlName: "properties.clientSecretCertificateThumbprint",
        type: {
          name: "String"
        }
      },
      issuer: {
        serializedName: "properties.issuer",
        xmlName: "properties.issuer",
        type: {
          name: "String"
        }
      },
      validateIssuer: {
        serializedName: "properties.validateIssuer",
        xmlName: "properties.validateIssuer",
        type: {
          name: "Boolean"
        }
      },
      allowedAudiences: {
        serializedName: "properties.allowedAudiences",
        xmlName: "properties.allowedAudiences",
        xmlElementName: "SiteAuthSettingsPropertiesAllowedAudiencesItem",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "String"
            }
          }
        }
      },
      additionalLoginParams: {
        serializedName: "properties.additionalLoginParams",
        xmlName: "properties.additionalLoginParams",
        xmlElementName: "SiteAuthSettingsPropertiesAdditionalLoginParamsItem",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "String"
            }
          }
        }
      },
      googleClientId: {
        serializedName: "properties.googleClientId",
        xmlName: "properties.googleClientId",
        type: {
          name: "String"
        }
      },
      googleClientSecret: {
        serializedName: "properties.googleClientSecret",
        xmlName: "properties.googleClientSecret",
        type: {
          name: "String"
        }
      },
      googleOAuthScopes: {
        serializedName: "properties.googleOAuthScopes",
        xmlName: "properties.googleOAuthScopes",
        xmlElementName: "SiteAuthSettingsPropertiesGoogleOAuthScopesItem",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "String"
            }
          }
        }
      },
      facebookAppId: {
        serializedName: "properties.facebookAppId",
        xmlName: "properties.facebookAppId",
        type: {
          name: "String"
        }
      },
      facebookAppSecret: {
        serializedName: "properties.facebookAppSecret",
        xmlName: "properties.facebookAppSecret",
        type: {
          name: "String"
        }
      },
      facebookOAuthScopes: {
        serializedName: "properties.facebookOAuthScopes",
        xmlName: "properties.facebookOAuthScopes",
        xmlElementName: "SiteAuthSettingsPropertiesFacebookOAuthScopesItem",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "String"
            }
          }
        }
      },
      twitterConsumerKey: {
        serializedName: "properties.twitterConsumerKey",
        xmlName: "properties.twitterConsumerKey",
        type: {
          name: "String"
        }
      },
      twitterConsumerSecret: {
        serializedName: "properties.twitterConsumerSecret",
        xmlName: "properties.twitterConsumerSecret",
        type: {
          name: "String"
        }
      },
      microsoftAccountClientId: {
        serializedName: "properties.microsoftAccountClientId",
        xmlName: "properties.microsoftAccountClientId",
        type: {
          name: "String"
        }
      },
      microsoftAccountClientSecret: {
        serializedName: "properties.microsoftAccountClientSecret",
        xmlName: "properties.microsoftAccountClientSecret",
        type: {
          name: "String"
        }
      },
      microsoftAccountOAuthScopes: {
        serializedName: "properties.microsoftAccountOAuthScopes",
        xmlName: "properties.microsoftAccountOAuthScopes",
        xmlElementName:
          "SiteAuthSettingsPropertiesMicrosoftAccountOAuthScopesItem",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "String"
            }
          }
        }
      }
    }
  }
};

export const AzureStoragePropertyDictionaryResource: coreClient.CompositeMapper = {
  serializedName: "AzureStoragePropertyDictionaryResource",
  type: {
    name: "Composite",
    className: "AzureStoragePropertyDictionaryResource",
    modelProperties: {
      ...ProxyOnlyResource.type.modelProperties,
      properties: {
        serializedName: "properties",
        xmlName: "properties",
        type: {
          name: "Dictionary",
          value: {
            type: { name: "Composite", className: "AzureStorageInfoValue" }
          }
        }
      }
    }
  }
};

export const ConnectionStringDictionary: coreClient.CompositeMapper = {
  serializedName: "ConnectionStringDictionary",
  type: {
    name: "Composite",
    className: "ConnectionStringDictionary",
    modelProperties: {
      ...ProxyOnlyResource.type.modelProperties,
      properties: {
        serializedName: "properties",
        xmlName: "properties",
        type: {
          name: "Dictionary",
          value: {
            type: { name: "Composite", className: "ConnStringValueTypePair" }
          }
        }
      }
    }
  }
};

export const SiteLogsConfig: coreClient.CompositeMapper = {
  serializedName: "SiteLogsConfig",
  type: {
    name: "Composite",
    className: "SiteLogsConfig",
    modelProperties: {
      ...ProxyOnlyResource.type.modelProperties,
      applicationLogs: {
        serializedName: "properties.applicationLogs",
        xmlName: "properties.applicationLogs",
        type: {
          name: "Composite",
          className: "ApplicationLogsConfig"
        }
      },
      httpLogs: {
        serializedName: "properties.httpLogs",
        xmlName: "properties.httpLogs",
        type: {
          name: "Composite",
          className: "HttpLogsConfig"
        }
      },
      failedRequestsTracing: {
        serializedName: "properties.failedRequestsTracing",
        xmlName: "properties.failedRequestsTracing",
        type: {
          name: "Composite",
          className: "EnabledConfig"
        }
      },
      detailedErrorMessages: {
        serializedName: "properties.detailedErrorMessages",
        xmlName: "properties.detailedErrorMessages",
        type: {
          name: "Composite",
          className: "EnabledConfig"
        }
      }
    }
  }
};

export const User: coreClient.CompositeMapper = {
  serializedName: "User",
  type: {
    name: "Composite",
    className: "User",
    modelProperties: {
      ...ProxyOnlyResource.type.modelProperties,
      publishingUserName: {
        serializedName: "properties.publishingUserName",
        xmlName: "properties.publishingUserName",
        type: {
          name: "String"
        }
      },
      publishingPassword: {
        serializedName: "properties.publishingPassword",
        xmlName: "properties.publishingPassword",
        type: {
          name: "String"
        }
      },
      publishingPasswordHash: {
        serializedName: "properties.publishingPasswordHash",
        xmlName: "properties.publishingPasswordHash",
        type: {
          name: "String"
        }
      },
      publishingPasswordHashSalt: {
        serializedName: "properties.publishingPasswordHashSalt",
        xmlName: "properties.publishingPasswordHashSalt",
        type: {
          name: "String"
        }
      },
      scmUri: {
        serializedName: "properties.scmUri",
        xmlName: "properties.scmUri",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const SlotConfigNamesResource: coreClient.CompositeMapper = {
  serializedName: "SlotConfigNamesResource",
  type: {
    name: "Composite",
    className: "SlotConfigNamesResource",
    modelProperties: {
      ...ProxyOnlyResource.type.modelProperties,
      connectionStringNames: {
        serializedName: "properties.connectionStringNames",
        xmlName: "properties.connectionStringNames",
        xmlElementName: "SlotConfigNamesConnectionStringNamesItem",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "String"
            }
          }
        }
      },
      appSettingNames: {
        serializedName: "properties.appSettingNames",
        xmlName: "properties.appSettingNames",
        xmlElementName: "SlotConfigNamesAppSettingNamesItem",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "String"
            }
          }
        }
      },
      azureStorageConfigNames: {
        serializedName: "properties.azureStorageConfigNames",
        xmlName: "properties.azureStorageConfigNames",
        xmlElementName: "SlotConfigNamesAzureStorageConfigNamesItem",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "String"
            }
          }
        }
      }
    }
  }
};

export const SiteConfigurationSnapshotInfo: coreClient.CompositeMapper = {
  serializedName: "SiteConfigurationSnapshotInfo",
  type: {
    name: "Composite",
    className: "SiteConfigurationSnapshotInfo",
    modelProperties: {
      ...ProxyOnlyResource.type.modelProperties,
      time: {
        serializedName: "properties.time",
        readOnly: true,
        xmlName: "properties.time",
        type: {
          name: "DateTime"
        }
      },
      snapshotId: {
        serializedName: "properties.snapshotId",
        readOnly: true,
        xmlName: "properties.snapshotId",
        type: {
          name: "Number"
        }
      }
    }
  }
};

export const ContinuousWebJob: coreClient.CompositeMapper = {
  serializedName: "ContinuousWebJob",
  type: {
    name: "Composite",
    className: "ContinuousWebJob",
    modelProperties: {
      ...ProxyOnlyResource.type.modelProperties,
      status: {
        serializedName: "properties.status",
        xmlName: "properties.status",
        type: {
          name: "Enum",
          allowedValues: [
            "Initializing",
            "Starting",
            "Running",
            "PendingRestart",
            "Stopped"
          ]
        }
      },
      detailedStatus: {
        serializedName: "properties.detailed_status",
        xmlName: "properties.detailed_status",
        type: {
          name: "String"
        }
      },
      logUrl: {
        serializedName: "properties.log_url",
        xmlName: "properties.log_url",
        type: {
          name: "String"
        }
      },
      runCommand: {
        serializedName: "properties.run_command",
        xmlName: "properties.run_command",
        type: {
          name: "String"
        }
      },
      url: {
        serializedName: "properties.url",
        xmlName: "properties.url",
        type: {
          name: "String"
        }
      },
      extraInfoUrl: {
        serializedName: "properties.extra_info_url",
        xmlName: "properties.extra_info_url",
        type: {
          name: "String"
        }
      },
      webJobType: {
        serializedName: "properties.web_job_type",
        xmlName: "properties.web_job_type",
        type: {
          name: "Enum",
          allowedValues: ["Continuous", "Triggered"]
        }
      },
      error: {
        serializedName: "properties.error",
        xmlName: "properties.error",
        type: {
          name: "String"
        }
      },
      usingSdk: {
        serializedName: "properties.using_sdk",
        xmlName: "properties.using_sdk",
        type: {
          name: "Boolean"
        }
      },
      settings: {
        serializedName: "properties.settings",
        xmlName: "properties.settings",
        type: {
          name: "Dictionary",
          value: {
            type: { name: "Dictionary", value: { type: { name: "any" } } }
          }
        }
      }
    }
  }
};

export const Deployment: coreClient.CompositeMapper = {
  serializedName: "Deployment",
  type: {
    name: "Composite",
    className: "Deployment",
    modelProperties: {
      ...ProxyOnlyResource.type.modelProperties,
      status: {
        serializedName: "properties.status",
        xmlName: "properties.status",
        type: {
          name: "Number"
        }
      },
      message: {
        serializedName: "properties.message",
        xmlName: "properties.message",
        type: {
          name: "String"
        }
      },
      author: {
        serializedName: "properties.author",
        xmlName: "properties.author",
        type: {
          name: "String"
        }
      },
      deployer: {
        serializedName: "properties.deployer",
        xmlName: "properties.deployer",
        type: {
          name: "String"
        }
      },
      authorEmail: {
        serializedName: "properties.author_email",
        xmlName: "properties.author_email",
        type: {
          name: "String"
        }
      },
      startTime: {
        serializedName: "properties.start_time",
        xmlName: "properties.start_time",
        type: {
          name: "DateTime"
        }
      },
      endTime: {
        serializedName: "properties.end_time",
        xmlName: "properties.end_time",
        type: {
          name: "DateTime"
        }
      },
      active: {
        serializedName: "properties.active",
        xmlName: "properties.active",
        type: {
          name: "Boolean"
        }
      },
      details: {
        serializedName: "properties.details",
        xmlName: "properties.details",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const Identifier: coreClient.CompositeMapper = {
  serializedName: "Identifier",
  type: {
    name: "Composite",
    className: "Identifier",
    modelProperties: {
      ...ProxyOnlyResource.type.modelProperties,
      idPropertiesId: {
        serializedName: "properties.id",
        xmlName: "properties.id",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const MSDeployStatus: coreClient.CompositeMapper = {
  serializedName: "MSDeployStatus",
  type: {
    name: "Composite",
    className: "MSDeployStatus",
    modelProperties: {
      ...ProxyOnlyResource.type.modelProperties,
      deployer: {
        serializedName: "properties.deployer",
        readOnly: true,
        xmlName: "properties.deployer",
        type: {
          name: "String"
        }
      },
      provisioningState: {
        serializedName: "properties.provisioningState",
        readOnly: true,
        xmlName: "properties.provisioningState",
        type: {
          name: "Enum",
          allowedValues: [
            "accepted",
            "running",
            "succeeded",
            "failed",
            "canceled"
          ]
        }
      },
      startTime: {
        serializedName: "properties.startTime",
        readOnly: true,
        xmlName: "properties.startTime",
        type: {
          name: "DateTime"
        }
      },
      endTime: {
        serializedName: "properties.endTime",
        readOnly: true,
        xmlName: "properties.endTime",
        type: {
          name: "DateTime"
        }
      },
      complete: {
        serializedName: "properties.complete",
        readOnly: true,
        xmlName: "properties.complete",
        type: {
          name: "Boolean"
        }
      }
    }
  }
};

export const MSDeploy: coreClient.CompositeMapper = {
  serializedName: "MSDeploy",
  type: {
    name: "Composite",
    className: "MSDeploy",
    modelProperties: {
      ...ProxyOnlyResource.type.modelProperties,
      packageUri: {
        serializedName: "properties.packageUri",
        xmlName: "properties.packageUri",
        type: {
          name: "String"
        }
      },
      connectionString: {
        serializedName: "properties.connectionString",
        xmlName: "properties.connectionString",
        type: {
          name: "String"
        }
      },
      dbType: {
        serializedName: "properties.dbType",
        xmlName: "properties.dbType",
        type: {
          name: "String"
        }
      },
      setParametersXmlFileUri: {
        serializedName: "properties.setParametersXmlFileUri",
        xmlName: "properties.setParametersXmlFileUri",
        type: {
          name: "String"
        }
      },
      setParameters: {
        serializedName: "properties.setParameters",
        xmlName: "properties.setParameters",
        type: {
          name: "Dictionary",
          value: { type: { name: "String" } }
        }
      },
      skipAppData: {
        serializedName: "properties.skipAppData",
        xmlName: "properties.skipAppData",
        type: {
          name: "Boolean"
        }
      },
      appOffline: {
        serializedName: "properties.appOffline",
        xmlName: "properties.appOffline",
        type: {
          name: "Boolean"
        }
      }
    }
  }
};

export const MSDeployLog: coreClient.CompositeMapper = {
  serializedName: "MSDeployLog",
  type: {
    name: "Composite",
    className: "MSDeployLog",
    modelProperties: {
      ...ProxyOnlyResource.type.modelProperties,
      entries: {
        serializedName: "properties.entries",
        readOnly: true,
        xmlName: "properties.entries",
        xmlElementName: "MSDeployLogEntry",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "MSDeployLogEntry"
            }
          }
        }
      }
    }
  }
};

export const FunctionEnvelope: coreClient.CompositeMapper = {
  serializedName: "FunctionEnvelope",
  type: {
    name: "Composite",
    className: "FunctionEnvelope",
    modelProperties: {
      ...ProxyOnlyResource.type.modelProperties,
      functionAppId: {
        serializedName: "properties.function_app_id",
        xmlName: "properties.function_app_id",
        type: {
          name: "String"
        }
      },
      scriptRootPathHref: {
        serializedName: "properties.script_root_path_href",
        xmlName: "properties.script_root_path_href",
        type: {
          name: "String"
        }
      },
      scriptHref: {
        serializedName: "properties.script_href",
        xmlName: "properties.script_href",
        type: {
          name: "String"
        }
      },
      configHref: {
        serializedName: "properties.config_href",
        xmlName: "properties.config_href",
        type: {
          name: "String"
        }
      },
      testDataHref: {
        serializedName: "properties.test_data_href",
        xmlName: "properties.test_data_href",
        type: {
          name: "String"
        }
      },
      secretsFileHref: {
        serializedName: "properties.secrets_file_href",
        xmlName: "properties.secrets_file_href",
        type: {
          name: "String"
        }
      },
      href: {
        serializedName: "properties.href",
        xmlName: "properties.href",
        type: {
          name: "String"
        }
      },
      config: {
        serializedName: "properties.config",
        xmlName: "properties.config",
        type: {
          name: "Dictionary",
          value: { type: { name: "any" } }
        }
      },
      files: {
        serializedName: "properties.files",
        xmlName: "properties.files",
        type: {
          name: "Dictionary",
          value: { type: { name: "String" } }
        }
      },
      testData: {
        serializedName: "properties.test_data",
        xmlName: "properties.test_data",
        type: {
          name: "String"
        }
      },
      invokeUrlTemplate: {
        serializedName: "properties.invoke_url_template",
        xmlName: "properties.invoke_url_template",
        type: {
          name: "String"
        }
      },
      language: {
        serializedName: "properties.language",
        xmlName: "properties.language",
        type: {
          name: "String"
        }
      },
      isDisabled: {
        serializedName: "properties.isDisabled",
        xmlName: "properties.isDisabled",
        type: {
          name: "Boolean"
        }
      }
    }
  }
};

export const FunctionSecrets: coreClient.CompositeMapper = {
  serializedName: "FunctionSecrets",
  type: {
    name: "Composite",
    className: "FunctionSecrets",
    modelProperties: {
      ...ProxyOnlyResource.type.modelProperties,
      key: {
        serializedName: "properties.key",
        xmlName: "properties.key",
        type: {
          name: "String"
        }
      },
      triggerUrl: {
        serializedName: "properties.trigger_url",
        xmlName: "properties.trigger_url",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const HostNameBinding: coreClient.CompositeMapper = {
  serializedName: "HostNameBinding",
  type: {
    name: "Composite",
    className: "HostNameBinding",
    modelProperties: {
      ...ProxyOnlyResource.type.modelProperties,
      siteName: {
        serializedName: "properties.siteName",
        xmlName: "properties.siteName",
        type: {
          name: "String"
        }
      },
      domainId: {
        serializedName: "properties.domainId",
        xmlName: "properties.domainId",
        type: {
          name: "String"
        }
      },
      azureResourceName: {
        serializedName: "properties.azureResourceName",
        xmlName: "properties.azureResourceName",
        type: {
          name: "String"
        }
      },
      azureResourceType: {
        serializedName: "properties.azureResourceType",
        xmlName: "properties.azureResourceType",
        type: {
          name: "Enum",
          allowedValues: ["Website", "TrafficManager"]
        }
      },
      customHostNameDnsRecordType: {
        serializedName: "properties.customHostNameDnsRecordType",
        xmlName: "properties.customHostNameDnsRecordType",
        type: {
          name: "Enum",
          allowedValues: ["CName", "A"]
        }
      },
      hostNameType: {
        serializedName: "properties.hostNameType",
        xmlName: "properties.hostNameType",
        type: {
          name: "Enum",
          allowedValues: ["Verified", "Managed"]
        }
      },
      sslState: {
        serializedName: "properties.sslState",
        xmlName: "properties.sslState",
        type: {
          name: "Enum",
          allowedValues: ["Disabled", "SniEnabled", "IpBasedEnabled"]
        }
      },
      thumbprint: {
        serializedName: "properties.thumbprint",
        xmlName: "properties.thumbprint",
        type: {
          name: "String"
        }
      },
      virtualIP: {
        serializedName: "properties.virtualIP",
        readOnly: true,
        xmlName: "properties.virtualIP",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const HybridConnection: coreClient.CompositeMapper = {
  serializedName: "HybridConnection",
  type: {
    name: "Composite",
    className: "HybridConnection",
    modelProperties: {
      ...ProxyOnlyResource.type.modelProperties,
      serviceBusNamespace: {
        serializedName: "properties.serviceBusNamespace",
        xmlName: "properties.serviceBusNamespace",
        type: {
          name: "String"
        }
      },
      relayName: {
        serializedName: "properties.relayName",
        xmlName: "properties.relayName",
        type: {
          name: "String"
        }
      },
      relayArmUri: {
        serializedName: "properties.relayArmUri",
        xmlName: "properties.relayArmUri",
        type: {
          name: "String"
        }
      },
      hostname: {
        serializedName: "properties.hostname",
        xmlName: "properties.hostname",
        type: {
          name: "String"
        }
      },
      port: {
        serializedName: "properties.port",
        xmlName: "properties.port",
        type: {
          name: "Number"
        }
      },
      sendKeyName: {
        serializedName: "properties.sendKeyName",
        xmlName: "properties.sendKeyName",
        type: {
          name: "String"
        }
      },
      sendKeyValue: {
        serializedName: "properties.sendKeyValue",
        xmlName: "properties.sendKeyValue",
        type: {
          name: "String"
        }
      },
      serviceBusSuffix: {
        serializedName: "properties.serviceBusSuffix",
        xmlName: "properties.serviceBusSuffix",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const HybridConnectionKey: coreClient.CompositeMapper = {
  serializedName: "HybridConnectionKey",
  type: {
    name: "Composite",
    className: "HybridConnectionKey",
    modelProperties: {
      ...ProxyOnlyResource.type.modelProperties,
      sendKeyName: {
        serializedName: "properties.sendKeyName",
        readOnly: true,
        xmlName: "properties.sendKeyName",
        type: {
          name: "String"
        }
      },
      sendKeyValue: {
        serializedName: "properties.sendKeyValue",
        readOnly: true,
        xmlName: "properties.sendKeyValue",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const RelayServiceConnectionEntity: coreClient.CompositeMapper = {
  serializedName: "RelayServiceConnectionEntity",
  type: {
    name: "Composite",
    className: "RelayServiceConnectionEntity",
    modelProperties: {
      ...ProxyOnlyResource.type.modelProperties,
      entityName: {
        serializedName: "properties.entityName",
        xmlName: "properties.entityName",
        type: {
          name: "String"
        }
      },
      entityConnectionString: {
        serializedName: "properties.entityConnectionString",
        xmlName: "properties.entityConnectionString",
        type: {
          name: "String"
        }
      },
      resourceType: {
        serializedName: "properties.resourceType",
        xmlName: "properties.resourceType",
        type: {
          name: "String"
        }
      },
      resourceConnectionString: {
        serializedName: "properties.resourceConnectionString",
        xmlName: "properties.resourceConnectionString",
        type: {
          name: "String"
        }
      },
      hostname: {
        serializedName: "properties.hostname",
        xmlName: "properties.hostname",
        type: {
          name: "String"
        }
      },
      port: {
        serializedName: "properties.port",
        xmlName: "properties.port",
        type: {
          name: "Number"
        }
      },
      biztalkUri: {
        serializedName: "properties.biztalkUri",
        xmlName: "properties.biztalkUri",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const SiteInstance: coreClient.CompositeMapper = {
  serializedName: "SiteInstance",
  type: {
    name: "Composite",
    className: "SiteInstance",
    modelProperties: {
      ...ProxyOnlyResource.type.modelProperties,
      siteInstanceName: {
        serializedName: "properties.siteInstanceName",
        readOnly: true,
        xmlName: "properties.siteInstanceName",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const ProcessThreadInfo: coreClient.CompositeMapper = {
  serializedName: "ProcessThreadInfo",
  type: {
    name: "Composite",
    className: "ProcessThreadInfo",
    modelProperties: {
      ...ProxyOnlyResource.type.modelProperties,
      identifier: {
        serializedName: "properties.identifier",
        readOnly: true,
        xmlName: "properties.identifier",
        type: {
          name: "Number"
        }
      },
      href: {
        serializedName: "properties.href",
        xmlName: "properties.href",
        type: {
          name: "String"
        }
      },
      process: {
        serializedName: "properties.process",
        xmlName: "properties.process",
        type: {
          name: "String"
        }
      },
      startAddress: {
        serializedName: "properties.start_address",
        xmlName: "properties.start_address",
        type: {
          name: "String"
        }
      },
      currentPriority: {
        serializedName: "properties.current_priority",
        xmlName: "properties.current_priority",
        type: {
          name: "Number"
        }
      },
      priorityLevel: {
        serializedName: "properties.priority_level",
        xmlName: "properties.priority_level",
        type: {
          name: "String"
        }
      },
      basePriority: {
        serializedName: "properties.base_priority",
        xmlName: "properties.base_priority",
        type: {
          name: "Number"
        }
      },
      startTime: {
        serializedName: "properties.start_time",
        xmlName: "properties.start_time",
        type: {
          name: "DateTime"
        }
      },
      totalProcessorTime: {
        serializedName: "properties.total_processor_time",
        xmlName: "properties.total_processor_time",
        type: {
          name: "String"
        }
      },
      userProcessorTime: {
        serializedName: "properties.user_processor_time",
        xmlName: "properties.user_processor_time",
        type: {
          name: "String"
        }
      },
      priviledgedProcessorTime: {
        serializedName: "properties.priviledged_processor_time",
        xmlName: "properties.priviledged_processor_time",
        type: {
          name: "String"
        }
      },
      state: {
        serializedName: "properties.state",
        xmlName: "properties.state",
        type: {
          name: "String"
        }
      },
      waitReason: {
        serializedName: "properties.wait_reason",
        xmlName: "properties.wait_reason",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const ProcessModuleInfo: coreClient.CompositeMapper = {
  serializedName: "ProcessModuleInfo",
  type: {
    name: "Composite",
    className: "ProcessModuleInfo",
    modelProperties: {
      ...ProxyOnlyResource.type.modelProperties,
      baseAddress: {
        serializedName: "properties.base_address",
        xmlName: "properties.base_address",
        type: {
          name: "String"
        }
      },
      fileName: {
        serializedName: "properties.file_name",
        xmlName: "properties.file_name",
        type: {
          name: "String"
        }
      },
      href: {
        serializedName: "properties.href",
        xmlName: "properties.href",
        type: {
          name: "String"
        }
      },
      filePath: {
        serializedName: "properties.file_path",
        xmlName: "properties.file_path",
        type: {
          name: "String"
        }
      },
      moduleMemorySize: {
        serializedName: "properties.module_memory_size",
        xmlName: "properties.module_memory_size",
        type: {
          name: "Number"
        }
      },
      fileVersion: {
        serializedName: "properties.file_version",
        xmlName: "properties.file_version",
        type: {
          name: "String"
        }
      },
      fileDescription: {
        serializedName: "properties.file_description",
        xmlName: "properties.file_description",
        type: {
          name: "String"
        }
      },
      product: {
        serializedName: "properties.product",
        xmlName: "properties.product",
        type: {
          name: "String"
        }
      },
      productVersion: {
        serializedName: "properties.product_version",
        xmlName: "properties.product_version",
        type: {
          name: "String"
        }
      },
      isDebug: {
        serializedName: "properties.is_debug",
        xmlName: "properties.is_debug",
        type: {
          name: "Boolean"
        }
      },
      language: {
        serializedName: "properties.language",
        xmlName: "properties.language",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const ProcessInfo: coreClient.CompositeMapper = {
  serializedName: "ProcessInfo",
  type: {
    name: "Composite",
    className: "ProcessInfo",
    modelProperties: {
      ...ProxyOnlyResource.type.modelProperties,
      identifier: {
        serializedName: "properties.identifier",
        readOnly: true,
        xmlName: "properties.identifier",
        type: {
          name: "Number"
        }
      },
      deploymentName: {
        serializedName: "properties.deployment_name",
        xmlName: "properties.deployment_name",
        type: {
          name: "String"
        }
      },
      href: {
        serializedName: "properties.href",
        xmlName: "properties.href",
        type: {
          name: "String"
        }
      },
      minidump: {
        serializedName: "properties.minidump",
        xmlName: "properties.minidump",
        type: {
          name: "String"
        }
      },
      isProfileRunning: {
        serializedName: "properties.is_profile_running",
        xmlName: "properties.is_profile_running",
        type: {
          name: "Boolean"
        }
      },
      isIisProfileRunning: {
        serializedName: "properties.is_iis_profile_running",
        xmlName: "properties.is_iis_profile_running",
        type: {
          name: "Boolean"
        }
      },
      iisProfileTimeoutInSeconds: {
        serializedName: "properties.iis_profile_timeout_in_seconds",
        xmlName: "properties.iis_profile_timeout_in_seconds",
        type: {
          name: "Number"
        }
      },
      parent: {
        serializedName: "properties.parent",
        xmlName: "properties.parent",
        type: {
          name: "String"
        }
      },
      children: {
        serializedName: "properties.children",
        xmlName: "properties.children",
        xmlElementName: "ProcessInfoPropertiesChildrenItem",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "String"
            }
          }
        }
      },
      threads: {
        serializedName: "properties.threads",
        xmlName: "properties.threads",
        xmlElementName: "ProcessThreadInfo",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "ProcessThreadInfo"
            }
          }
        }
      },
      openFileHandles: {
        serializedName: "properties.open_file_handles",
        xmlName: "properties.open_file_handles",
        xmlElementName: "ProcessInfoPropertiesOpenFileHandlesItem",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "String"
            }
          }
        }
      },
      modules: {
        serializedName: "properties.modules",
        xmlName: "properties.modules",
        xmlElementName: "ProcessModuleInfo",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "ProcessModuleInfo"
            }
          }
        }
      },
      fileName: {
        serializedName: "properties.file_name",
        xmlName: "properties.file_name",
        type: {
          name: "String"
        }
      },
      commandLine: {
        serializedName: "properties.command_line",
        xmlName: "properties.command_line",
        type: {
          name: "String"
        }
      },
      userName: {
        serializedName: "properties.user_name",
        xmlName: "properties.user_name",
        type: {
          name: "String"
        }
      },
      handleCount: {
        serializedName: "properties.handle_count",
        xmlName: "properties.handle_count",
        type: {
          name: "Number"
        }
      },
      moduleCount: {
        serializedName: "properties.module_count",
        xmlName: "properties.module_count",
        type: {
          name: "Number"
        }
      },
      threadCount: {
        serializedName: "properties.thread_count",
        xmlName: "properties.thread_count",
        type: {
          name: "Number"
        }
      },
      startTime: {
        serializedName: "properties.start_time",
        xmlName: "properties.start_time",
        type: {
          name: "DateTime"
        }
      },
      totalCpuTime: {
        serializedName: "properties.total_cpu_time",
        xmlName: "properties.total_cpu_time",
        type: {
          name: "String"
        }
      },
      userCpuTime: {
        serializedName: "properties.user_cpu_time",
        xmlName: "properties.user_cpu_time",
        type: {
          name: "String"
        }
      },
      privilegedCpuTime: {
        serializedName: "properties.privileged_cpu_time",
        xmlName: "properties.privileged_cpu_time",
        type: {
          name: "String"
        }
      },
      workingSet: {
        serializedName: "properties.working_set",
        xmlName: "properties.working_set",
        type: {
          name: "Number"
        }
      },
      peakWorkingSet: {
        serializedName: "properties.peak_working_set",
        xmlName: "properties.peak_working_set",
        type: {
          name: "Number"
        }
      },
      privateMemory: {
        serializedName: "properties.private_memory",
        xmlName: "properties.private_memory",
        type: {
          name: "Number"
        }
      },
      virtualMemory: {
        serializedName: "properties.virtual_memory",
        xmlName: "properties.virtual_memory",
        type: {
          name: "Number"
        }
      },
      peakVirtualMemory: {
        serializedName: "properties.peak_virtual_memory",
        xmlName: "properties.peak_virtual_memory",
        type: {
          name: "Number"
        }
      },
      pagedSystemMemory: {
        serializedName: "properties.paged_system_memory",
        xmlName: "properties.paged_system_memory",
        type: {
          name: "Number"
        }
      },
      nonPagedSystemMemory: {
        serializedName: "properties.non_paged_system_memory",
        xmlName: "properties.non_paged_system_memory",
        type: {
          name: "Number"
        }
      },
      pagedMemory: {
        serializedName: "properties.paged_memory",
        xmlName: "properties.paged_memory",
        type: {
          name: "Number"
        }
      },
      peakPagedMemory: {
        serializedName: "properties.peak_paged_memory",
        xmlName: "properties.peak_paged_memory",
        type: {
          name: "Number"
        }
      },
      timeStamp: {
        serializedName: "properties.time_stamp",
        xmlName: "properties.time_stamp",
        type: {
          name: "DateTime"
        }
      },
      environmentVariables: {
        serializedName: "properties.environment_variables",
        xmlName: "properties.environment_variables",
        type: {
          name: "Dictionary",
          value: { type: { name: "String" } }
        }
      },
      isScmSite: {
        serializedName: "properties.is_scm_site",
        xmlName: "properties.is_scm_site",
        type: {
          name: "Boolean"
        }
      },
      isWebjob: {
        serializedName: "properties.is_webjob",
        xmlName: "properties.is_webjob",
        type: {
          name: "Boolean"
        }
      },
      description: {
        serializedName: "properties.description",
        xmlName: "properties.description",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const ResourceMetricDefinition: coreClient.CompositeMapper = {
  serializedName: "ResourceMetricDefinition",
  type: {
    name: "Composite",
    className: "ResourceMetricDefinition",
    modelProperties: {
      ...ProxyOnlyResource.type.modelProperties,
      unit: {
        serializedName: "properties.unit",
        readOnly: true,
        xmlName: "properties.unit",
        type: {
          name: "String"
        }
      },
      primaryAggregationType: {
        serializedName: "properties.primaryAggregationType",
        readOnly: true,
        xmlName: "properties.primaryAggregationType",
        type: {
          name: "String"
        }
      },
      metricAvailabilities: {
        serializedName: "properties.metricAvailabilities",
        readOnly: true,
        xmlName: "properties.metricAvailabilities",
        xmlElementName: "ResourceMetricAvailability",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "ResourceMetricAvailability"
            }
          }
        }
      },
      resourceUri: {
        serializedName: "properties.resourceUri",
        readOnly: true,
        xmlName: "properties.resourceUri",
        type: {
          name: "String"
        }
      },
      properties: {
        serializedName: "properties.properties",
        readOnly: true,
        xmlName: "properties.properties",
        type: {
          name: "Dictionary",
          value: { type: { name: "String" } }
        }
      }
    }
  }
};

export const StorageMigrationOptions: coreClient.CompositeMapper = {
  serializedName: "StorageMigrationOptions",
  type: {
    name: "Composite",
    className: "StorageMigrationOptions",
    modelProperties: {
      ...ProxyOnlyResource.type.modelProperties,
      azurefilesConnectionString: {
        serializedName: "properties.azurefilesConnectionString",
        xmlName: "properties.azurefilesConnectionString",
        type: {
          name: "String"
        }
      },
      azurefilesShare: {
        serializedName: "properties.azurefilesShare",
        xmlName: "properties.azurefilesShare",
        type: {
          name: "String"
        }
      },
      switchSiteAfterMigration: {
        defaultValue: false,
        serializedName: "properties.switchSiteAfterMigration",
        xmlName: "properties.switchSiteAfterMigration",
        type: {
          name: "Boolean"
        }
      },
      blockWriteAccessToSite: {
        defaultValue: false,
        serializedName: "properties.blockWriteAccessToSite",
        xmlName: "properties.blockWriteAccessToSite",
        type: {
          name: "Boolean"
        }
      }
    }
  }
};

export const StorageMigrationResponse: coreClient.CompositeMapper = {
  serializedName: "StorageMigrationResponse",
  type: {
    name: "Composite",
    className: "StorageMigrationResponse",
    modelProperties: {
      ...ProxyOnlyResource.type.modelProperties,
      operationId: {
        serializedName: "properties.operationId",
        readOnly: true,
        xmlName: "properties.operationId",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const MigrateMySqlRequest: coreClient.CompositeMapper = {
  serializedName: "MigrateMySqlRequest",
  type: {
    name: "Composite",
    className: "MigrateMySqlRequest",
    modelProperties: {
      ...ProxyOnlyResource.type.modelProperties,
      connectionString: {
        serializedName: "properties.connectionString",
        xmlName: "properties.connectionString",
        type: {
          name: "String"
        }
      },
      migrationType: {
        serializedName: "properties.migrationType",
        xmlName: "properties.migrationType",
        type: {
          name: "Enum",
          allowedValues: ["LocalToRemote", "RemoteToLocal"]
        }
      }
    }
  }
};

export const MigrateMySqlStatus: coreClient.CompositeMapper = {
  serializedName: "MigrateMySqlStatus",
  type: {
    name: "Composite",
    className: "MigrateMySqlStatus",
    modelProperties: {
      ...ProxyOnlyResource.type.modelProperties,
      migrationOperationStatus: {
        serializedName: "properties.migrationOperationStatus",
        readOnly: true,
        xmlName: "properties.migrationOperationStatus",
        type: {
          name: "Enum",
          allowedValues: [
            "InProgress",
            "Failed",
            "Succeeded",
            "TimedOut",
            "Created"
          ]
        }
      },
      operationId: {
        serializedName: "properties.operationId",
        readOnly: true,
        xmlName: "properties.operationId",
        type: {
          name: "String"
        }
      },
      localMySqlEnabled: {
        serializedName: "properties.localMySqlEnabled",
        readOnly: true,
        xmlName: "properties.localMySqlEnabled",
        type: {
          name: "Boolean"
        }
      }
    }
  }
};

export const SwiftVirtualNetwork: coreClient.CompositeMapper = {
  serializedName: "SwiftVirtualNetwork",
  type: {
    name: "Composite",
    className: "SwiftVirtualNetwork",
    modelProperties: {
      ...ProxyOnlyResource.type.modelProperties,
      subnetResourceId: {
        serializedName: "properties.subnetResourceId",
        xmlName: "properties.subnetResourceId",
        type: {
          name: "String"
        }
      },
      swiftSupported: {
        serializedName: "properties.swiftSupported",
        xmlName: "properties.swiftSupported",
        type: {
          name: "Boolean"
        }
      }
    }
  }
};

export const VnetRoute: coreClient.CompositeMapper = {
  serializedName: "VnetRoute",
  type: {
    name: "Composite",
    className: "VnetRoute",
    modelProperties: {
      ...ProxyOnlyResource.type.modelProperties,
      startAddress: {
        serializedName: "properties.startAddress",
        xmlName: "properties.startAddress",
        type: {
          name: "String"
        }
      },
      endAddress: {
        serializedName: "properties.endAddress",
        xmlName: "properties.endAddress",
        type: {
          name: "String"
        }
      },
      routeType: {
        serializedName: "properties.routeType",
        xmlName: "properties.routeType",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const VnetInfo: coreClient.CompositeMapper = {
  serializedName: "VnetInfo",
  type: {
    name: "Composite",
    className: "VnetInfo",
    modelProperties: {
      ...ProxyOnlyResource.type.modelProperties,
      vnetResourceId: {
        serializedName: "properties.vnetResourceId",
        xmlName: "properties.vnetResourceId",
        type: {
          name: "String"
        }
      },
      certThumbprint: {
        serializedName: "properties.certThumbprint",
        readOnly: true,
        xmlName: "properties.certThumbprint",
        type: {
          name: "String"
        }
      },
      certBlob: {
        serializedName: "properties.certBlob",
        xmlName: "properties.certBlob",
        type: {
          name: "String"
        }
      },
      routes: {
        serializedName: "properties.routes",
        readOnly: true,
        xmlName: "properties.routes",
        xmlElementName: "VnetRoute",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "VnetRoute"
            }
          }
        }
      },
      resyncRequired: {
        serializedName: "properties.resyncRequired",
        readOnly: true,
        xmlName: "properties.resyncRequired",
        type: {
          name: "Boolean"
        }
      },
      dnsServers: {
        serializedName: "properties.dnsServers",
        xmlName: "properties.dnsServers",
        type: {
          name: "String"
        }
      },
      isSwift: {
        serializedName: "properties.isSwift",
        xmlName: "properties.isSwift",
        type: {
          name: "Boolean"
        }
      }
    }
  }
};

export const NetworkFeatures: coreClient.CompositeMapper = {
  serializedName: "NetworkFeatures",
  type: {
    name: "Composite",
    className: "NetworkFeatures",
    modelProperties: {
      ...ProxyOnlyResource.type.modelProperties,
      virtualNetworkName: {
        serializedName: "properties.virtualNetworkName",
        readOnly: true,
        xmlName: "properties.virtualNetworkName",
        type: {
          name: "String"
        }
      },
      virtualNetworkConnection: {
        serializedName: "properties.virtualNetworkConnection",
        xmlName: "properties.virtualNetworkConnection",
        type: {
          name: "Composite",
          className: "VnetInfo"
        }
      },
      hybridConnections: {
        serializedName: "properties.hybridConnections",
        readOnly: true,
        xmlName: "properties.hybridConnections",
        xmlElementName: "RelayServiceConnectionEntity",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "RelayServiceConnectionEntity"
            }
          }
        }
      },
      hybridConnectionsV2: {
        serializedName: "properties.hybridConnectionsV2",
        readOnly: true,
        xmlName: "properties.hybridConnectionsV2",
        xmlElementName: "HybridConnection",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "HybridConnection"
            }
          }
        }
      }
    }
  }
};

export const SitePhpErrorLogFlag: coreClient.CompositeMapper = {
  serializedName: "SitePhpErrorLogFlag",
  type: {
    name: "Composite",
    className: "SitePhpErrorLogFlag",
    modelProperties: {
      ...ProxyOnlyResource.type.modelProperties,
      localLogErrors: {
        serializedName: "properties.localLogErrors",
        xmlName: "properties.localLogErrors",
        type: {
          name: "String"
        }
      },
      masterLogErrors: {
        serializedName: "properties.masterLogErrors",
        xmlName: "properties.masterLogErrors",
        type: {
          name: "String"
        }
      },
      localLogErrorsMaxLength: {
        serializedName: "properties.localLogErrorsMaxLength",
        xmlName: "properties.localLogErrorsMaxLength",
        type: {
          name: "String"
        }
      },
      masterLogErrorsMaxLength: {
        serializedName: "properties.masterLogErrorsMaxLength",
        xmlName: "properties.masterLogErrorsMaxLength",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const PremierAddOnPatchResource: coreClient.CompositeMapper = {
  serializedName: "PremierAddOnPatchResource",
  type: {
    name: "Composite",
    className: "PremierAddOnPatchResource",
    modelProperties: {
      ...ProxyOnlyResource.type.modelProperties,
      sku: {
        serializedName: "properties.sku",
        xmlName: "properties.sku",
        type: {
          name: "String"
        }
      },
      product: {
        serializedName: "properties.product",
        xmlName: "properties.product",
        type: {
          name: "String"
        }
      },
      vendor: {
        serializedName: "properties.vendor",
        xmlName: "properties.vendor",
        type: {
          name: "String"
        }
      },
      marketplacePublisher: {
        serializedName: "properties.marketplacePublisher",
        xmlName: "properties.marketplacePublisher",
        type: {
          name: "String"
        }
      },
      marketplaceOffer: {
        serializedName: "properties.marketplaceOffer",
        xmlName: "properties.marketplaceOffer",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const PrivateAccess: coreClient.CompositeMapper = {
  serializedName: "PrivateAccess",
  type: {
    name: "Composite",
    className: "PrivateAccess",
    modelProperties: {
      ...ProxyOnlyResource.type.modelProperties,
      enabled: {
        serializedName: "properties.enabled",
        xmlName: "properties.enabled",
        type: {
          name: "Boolean"
        }
      },
      virtualNetworks: {
        serializedName: "properties.virtualNetworks",
        xmlName: "properties.virtualNetworks",
        xmlElementName: "PrivateAccessVirtualNetwork",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "PrivateAccessVirtualNetwork"
            }
          }
        }
      }
    }
  }
};

export const PublicCertificate: coreClient.CompositeMapper = {
  serializedName: "PublicCertificate",
  type: {
    name: "Composite",
    className: "PublicCertificate",
    modelProperties: {
      ...ProxyOnlyResource.type.modelProperties,
      blob: {
        serializedName: "properties.blob",
        xmlName: "properties.blob",
        type: {
          name: "ByteArray"
        }
      },
      publicCertificateLocation: {
        serializedName: "properties.publicCertificateLocation",
        xmlName: "properties.publicCertificateLocation",
        type: {
          name: "Enum",
          allowedValues: ["CurrentUserMy", "LocalMachineMy", "Unknown"]
        }
      },
      thumbprint: {
        serializedName: "properties.thumbprint",
        readOnly: true,
        xmlName: "properties.thumbprint",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const DeletedAppRestoreRequest: coreClient.CompositeMapper = {
  serializedName: "DeletedAppRestoreRequest",
  type: {
    name: "Composite",
    className: "DeletedAppRestoreRequest",
    modelProperties: {
      ...ProxyOnlyResource.type.modelProperties,
      deletedSiteId: {
        serializedName: "properties.deletedSiteId",
        xmlName: "properties.deletedSiteId",
        type: {
          name: "String"
        }
      },
      recoverConfiguration: {
        serializedName: "properties.recoverConfiguration",
        xmlName: "properties.recoverConfiguration",
        type: {
          name: "Boolean"
        }
      },
      snapshotTime: {
        serializedName: "properties.snapshotTime",
        xmlName: "properties.snapshotTime",
        type: {
          name: "String"
        }
      },
      useDRSecondary: {
        serializedName: "properties.useDRSecondary",
        xmlName: "properties.useDRSecondary",
        type: {
          name: "Boolean"
        }
      }
    }
  }
};

export const SnapshotRestoreRequest: coreClient.CompositeMapper = {
  serializedName: "SnapshotRestoreRequest",
  type: {
    name: "Composite",
    className: "SnapshotRestoreRequest",
    modelProperties: {
      ...ProxyOnlyResource.type.modelProperties,
      snapshotTime: {
        serializedName: "properties.snapshotTime",
        xmlName: "properties.snapshotTime",
        type: {
          name: "String"
        }
      },
      recoverySource: {
        serializedName: "properties.recoverySource",
        xmlName: "properties.recoverySource",
        type: {
          name: "Composite",
          className: "SnapshotRecoverySource"
        }
      },
      overwrite: {
        serializedName: "properties.overwrite",
        xmlName: "properties.overwrite",
        type: {
          name: "Boolean"
        }
      },
      recoverConfiguration: {
        serializedName: "properties.recoverConfiguration",
        xmlName: "properties.recoverConfiguration",
        type: {
          name: "Boolean"
        }
      },
      ignoreConflictingHostNames: {
        serializedName: "properties.ignoreConflictingHostNames",
        xmlName: "properties.ignoreConflictingHostNames",
        type: {
          name: "Boolean"
        }
      },
      useDRSecondary: {
        serializedName: "properties.useDRSecondary",
        xmlName: "properties.useDRSecondary",
        type: {
          name: "Boolean"
        }
      }
    }
  }
};

export const SiteExtensionInfo: coreClient.CompositeMapper = {
  serializedName: "SiteExtensionInfo",
  type: {
    name: "Composite",
    className: "SiteExtensionInfo",
    modelProperties: {
      ...ProxyOnlyResource.type.modelProperties,
      extensionId: {
        serializedName: "properties.extension_id",
        xmlName: "properties.extension_id",
        type: {
          name: "String"
        }
      },
      title: {
        serializedName: "properties.title",
        xmlName: "properties.title",
        type: {
          name: "String"
        }
      },
      extensionType: {
        serializedName: "properties.extension_type",
        xmlName: "properties.extension_type",
        type: {
          name: "Enum",
          allowedValues: ["Gallery", "WebRoot"]
        }
      },
      summary: {
        serializedName: "properties.summary",
        xmlName: "properties.summary",
        type: {
          name: "String"
        }
      },
      description: {
        serializedName: "properties.description",
        xmlName: "properties.description",
        type: {
          name: "String"
        }
      },
      version: {
        serializedName: "properties.version",
        xmlName: "properties.version",
        type: {
          name: "String"
        }
      },
      extensionUrl: {
        serializedName: "properties.extension_url",
        xmlName: "properties.extension_url",
        type: {
          name: "String"
        }
      },
      projectUrl: {
        serializedName: "properties.project_url",
        xmlName: "properties.project_url",
        type: {
          name: "String"
        }
      },
      iconUrl: {
        serializedName: "properties.icon_url",
        xmlName: "properties.icon_url",
        type: {
          name: "String"
        }
      },
      licenseUrl: {
        serializedName: "properties.license_url",
        xmlName: "properties.license_url",
        type: {
          name: "String"
        }
      },
      feedUrl: {
        serializedName: "properties.feed_url",
        xmlName: "properties.feed_url",
        type: {
          name: "String"
        }
      },
      authors: {
        serializedName: "properties.authors",
        xmlName: "properties.authors",
        xmlElementName: "SiteExtensionInfoPropertiesAuthorsItem",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "String"
            }
          }
        }
      },
      installerCommandLineParams: {
        serializedName: "properties.installer_command_line_params",
        xmlName: "properties.installer_command_line_params",
        type: {
          name: "String"
        }
      },
      publishedDateTime: {
        serializedName: "properties.published_date_time",
        xmlName: "properties.published_date_time",
        type: {
          name: "DateTime"
        }
      },
      downloadCount: {
        serializedName: "properties.download_count",
        xmlName: "properties.download_count",
        type: {
          name: "Number"
        }
      },
      localIsLatestVersion: {
        serializedName: "properties.local_is_latest_version",
        xmlName: "properties.local_is_latest_version",
        type: {
          name: "Boolean"
        }
      },
      localPath: {
        serializedName: "properties.local_path",
        xmlName: "properties.local_path",
        type: {
          name: "String"
        }
      },
      installedDateTime: {
        serializedName: "properties.installed_date_time",
        xmlName: "properties.installed_date_time",
        type: {
          name: "DateTime"
        }
      },
      provisioningState: {
        serializedName: "properties.provisioningState",
        xmlName: "properties.provisioningState",
        type: {
          name: "String"
        }
      },
      comment: {
        serializedName: "properties.comment",
        xmlName: "properties.comment",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const SlotDifference: coreClient.CompositeMapper = {
  serializedName: "SlotDifference",
  type: {
    name: "Composite",
    className: "SlotDifference",
    modelProperties: {
      ...ProxyOnlyResource.type.modelProperties,
      level: {
        serializedName: "properties.level",
        readOnly: true,
        xmlName: "properties.level",
        type: {
          name: "String"
        }
      },
      settingType: {
        serializedName: "properties.settingType",
        readOnly: true,
        xmlName: "properties.settingType",
        type: {
          name: "String"
        }
      },
      diffRule: {
        serializedName: "properties.diffRule",
        readOnly: true,
        xmlName: "properties.diffRule",
        type: {
          name: "String"
        }
      },
      settingName: {
        serializedName: "properties.settingName",
        readOnly: true,
        xmlName: "properties.settingName",
        type: {
          name: "String"
        }
      },
      valueInCurrentSlot: {
        serializedName: "properties.valueInCurrentSlot",
        readOnly: true,
        xmlName: "properties.valueInCurrentSlot",
        type: {
          name: "String"
        }
      },
      valueInTargetSlot: {
        serializedName: "properties.valueInTargetSlot",
        readOnly: true,
        xmlName: "properties.valueInTargetSlot",
        type: {
          name: "String"
        }
      },
      description: {
        serializedName: "properties.description",
        readOnly: true,
        xmlName: "properties.description",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const Snapshot: coreClient.CompositeMapper = {
  serializedName: "Snapshot",
  type: {
    name: "Composite",
    className: "Snapshot",
    modelProperties: {
      ...ProxyOnlyResource.type.modelProperties,
      time: {
        serializedName: "properties.time",
        readOnly: true,
        xmlName: "properties.time",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const SiteSourceControl: coreClient.CompositeMapper = {
  serializedName: "SiteSourceControl",
  type: {
    name: "Composite",
    className: "SiteSourceControl",
    modelProperties: {
      ...ProxyOnlyResource.type.modelProperties,
      repoUrl: {
        serializedName: "properties.repoUrl",
        xmlName: "properties.repoUrl",
        type: {
          name: "String"
        }
      },
      branch: {
        serializedName: "properties.branch",
        xmlName: "properties.branch",
        type: {
          name: "String"
        }
      },
      isManualIntegration: {
        serializedName: "properties.isManualIntegration",
        xmlName: "properties.isManualIntegration",
        type: {
          name: "Boolean"
        }
      },
      deploymentRollbackEnabled: {
        serializedName: "properties.deploymentRollbackEnabled",
        xmlName: "properties.deploymentRollbackEnabled",
        type: {
          name: "Boolean"
        }
      },
      isMercurial: {
        serializedName: "properties.isMercurial",
        xmlName: "properties.isMercurial",
        type: {
          name: "Boolean"
        }
      }
    }
  }
};

export const TriggeredJobRun: coreClient.CompositeMapper = {
  serializedName: "TriggeredJobRun",
  type: {
    name: "Composite",
    className: "TriggeredJobRun",
    modelProperties: {
      ...ProxyOnlyResource.type.modelProperties,
      webJobId: {
        serializedName: "properties.web_job_id",
        xmlName: "properties.web_job_id",
        type: {
          name: "String"
        }
      },
      webJobName: {
        serializedName: "properties.web_job_name",
        xmlName: "properties.web_job_name",
        type: {
          name: "String"
        }
      },
      status: {
        serializedName: "properties.status",
        xmlName: "properties.status",
        type: {
          name: "Enum",
          allowedValues: ["Success", "Failed", "Error"]
        }
      },
      startTime: {
        serializedName: "properties.start_time",
        xmlName: "properties.start_time",
        type: {
          name: "DateTime"
        }
      },
      endTime: {
        serializedName: "properties.end_time",
        xmlName: "properties.end_time",
        type: {
          name: "DateTime"
        }
      },
      duration: {
        serializedName: "properties.duration",
        xmlName: "properties.duration",
        type: {
          name: "String"
        }
      },
      outputUrl: {
        serializedName: "properties.output_url",
        xmlName: "properties.output_url",
        type: {
          name: "String"
        }
      },
      errorUrl: {
        serializedName: "properties.error_url",
        xmlName: "properties.error_url",
        type: {
          name: "String"
        }
      },
      url: {
        serializedName: "properties.url",
        xmlName: "properties.url",
        type: {
          name: "String"
        }
      },
      jobName: {
        serializedName: "properties.job_name",
        xmlName: "properties.job_name",
        type: {
          name: "String"
        }
      },
      trigger: {
        serializedName: "properties.trigger",
        xmlName: "properties.trigger",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const TriggeredWebJob: coreClient.CompositeMapper = {
  serializedName: "TriggeredWebJob",
  type: {
    name: "Composite",
    className: "TriggeredWebJob",
    modelProperties: {
      ...ProxyOnlyResource.type.modelProperties,
      latestRun: {
        serializedName: "properties.latest_run",
        xmlName: "properties.latest_run",
        type: {
          name: "Composite",
          className: "TriggeredJobRun"
        }
      },
      historyUrl: {
        serializedName: "properties.history_url",
        xmlName: "properties.history_url",
        type: {
          name: "String"
        }
      },
      schedulerLogsUrl: {
        serializedName: "properties.scheduler_logs_url",
        xmlName: "properties.scheduler_logs_url",
        type: {
          name: "String"
        }
      },
      runCommand: {
        serializedName: "properties.run_command",
        xmlName: "properties.run_command",
        type: {
          name: "String"
        }
      },
      url: {
        serializedName: "properties.url",
        xmlName: "properties.url",
        type: {
          name: "String"
        }
      },
      extraInfoUrl: {
        serializedName: "properties.extra_info_url",
        xmlName: "properties.extra_info_url",
        type: {
          name: "String"
        }
      },
      webJobType: {
        serializedName: "properties.web_job_type",
        xmlName: "properties.web_job_type",
        type: {
          name: "Enum",
          allowedValues: ["Continuous", "Triggered"]
        }
      },
      error: {
        serializedName: "properties.error",
        xmlName: "properties.error",
        type: {
          name: "String"
        }
      },
      usingSdk: {
        serializedName: "properties.using_sdk",
        xmlName: "properties.using_sdk",
        type: {
          name: "Boolean"
        }
      },
      settings: {
        serializedName: "properties.settings",
        xmlName: "properties.settings",
        type: {
          name: "Dictionary",
          value: {
            type: { name: "Dictionary", value: { type: { name: "any" } } }
          }
        }
      }
    }
  }
};

export const TriggeredJobHistory: coreClient.CompositeMapper = {
  serializedName: "TriggeredJobHistory",
  type: {
    name: "Composite",
    className: "TriggeredJobHistory",
    modelProperties: {
      ...ProxyOnlyResource.type.modelProperties,
      runs: {
        serializedName: "properties.runs",
        xmlName: "properties.runs",
        xmlElementName: "TriggeredJobRun",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "TriggeredJobRun"
            }
          }
        }
      }
    }
  }
};

export const VnetGateway: coreClient.CompositeMapper = {
  serializedName: "VnetGateway",
  type: {
    name: "Composite",
    className: "VnetGateway",
    modelProperties: {
      ...ProxyOnlyResource.type.modelProperties,
      vnetName: {
        serializedName: "properties.vnetName",
        xmlName: "properties.vnetName",
        type: {
          name: "String"
        }
      },
      vpnPackageUri: {
        serializedName: "properties.vpnPackageUri",
        xmlName: "properties.vpnPackageUri",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const WebJob: coreClient.CompositeMapper = {
  serializedName: "WebJob",
  type: {
    name: "Composite",
    className: "WebJob",
    modelProperties: {
      ...ProxyOnlyResource.type.modelProperties,
      runCommand: {
        serializedName: "properties.run_command",
        xmlName: "properties.run_command",
        type: {
          name: "String"
        }
      },
      url: {
        serializedName: "properties.url",
        xmlName: "properties.url",
        type: {
          name: "String"
        }
      },
      extraInfoUrl: {
        serializedName: "properties.extra_info_url",
        xmlName: "properties.extra_info_url",
        type: {
          name: "String"
        }
      },
      webJobType: {
        serializedName: "properties.web_job_type",
        xmlName: "properties.web_job_type",
        type: {
          name: "Enum",
          allowedValues: ["Continuous", "Triggered"]
        }
      },
      error: {
        serializedName: "properties.error",
        xmlName: "properties.error",
        type: {
          name: "String"
        }
      },
      usingSdk: {
        serializedName: "properties.using_sdk",
        xmlName: "properties.using_sdk",
        type: {
          name: "Boolean"
        }
      },
      settings: {
        serializedName: "properties.settings",
        xmlName: "properties.settings",
        type: {
          name: "Dictionary",
          value: {
            type: { name: "Dictionary", value: { type: { name: "any" } } }
          }
        }
      }
    }
  }
};

export const SourceControl: coreClient.CompositeMapper = {
  serializedName: "SourceControl",
  type: {
    name: "Composite",
    className: "SourceControl",
    modelProperties: {
      ...ProxyOnlyResource.type.modelProperties,
      token: {
        serializedName: "properties.token",
        xmlName: "properties.token",
        type: {
          name: "String"
        }
      },
      tokenSecret: {
        serializedName: "properties.tokenSecret",
        xmlName: "properties.tokenSecret",
        type: {
          name: "String"
        }
      },
      refreshToken: {
        serializedName: "properties.refreshToken",
        xmlName: "properties.refreshToken",
        type: {
          name: "String"
        }
      },
      expirationTime: {
        serializedName: "properties.expirationTime",
        xmlName: "properties.expirationTime",
        type: {
          name: "DateTime"
        }
      }
    }
  }
};

export const BillingMeter: coreClient.CompositeMapper = {
  serializedName: "BillingMeter",
  type: {
    name: "Composite",
    className: "BillingMeter",
    modelProperties: {
      ...ProxyOnlyResource.type.modelProperties,
      meterId: {
        serializedName: "properties.meterId",
        xmlName: "properties.meterId",
        type: {
          name: "String"
        }
      },
      billingLocation: {
        serializedName: "properties.billingLocation",
        xmlName: "properties.billingLocation",
        type: {
          name: "String"
        }
      },
      shortName: {
        serializedName: "properties.shortName",
        xmlName: "properties.shortName",
        type: {
          name: "String"
        }
      },
      friendlyName: {
        serializedName: "properties.friendlyName",
        xmlName: "properties.friendlyName",
        type: {
          name: "String"
        }
      },
      resourceType: {
        serializedName: "properties.resourceType",
        xmlName: "properties.resourceType",
        type: {
          name: "String"
        }
      },
      osType: {
        serializedName: "properties.osType",
        xmlName: "properties.osType",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const GeoRegion: coreClient.CompositeMapper = {
  serializedName: "GeoRegion",
  type: {
    name: "Composite",
    className: "GeoRegion",
    modelProperties: {
      ...ProxyOnlyResource.type.modelProperties,
      description: {
        serializedName: "properties.description",
        readOnly: true,
        xmlName: "properties.description",
        type: {
          name: "String"
        }
      },
      displayName: {
        serializedName: "properties.displayName",
        readOnly: true,
        xmlName: "properties.displayName",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const PremierAddOnOffer: coreClient.CompositeMapper = {
  serializedName: "PremierAddOnOffer",
  type: {
    name: "Composite",
    className: "PremierAddOnOffer",
    modelProperties: {
      ...ProxyOnlyResource.type.modelProperties,
      sku: {
        serializedName: "properties.sku",
        xmlName: "properties.sku",
        type: {
          name: "String"
        }
      },
      product: {
        serializedName: "properties.product",
        xmlName: "properties.product",
        type: {
          name: "String"
        }
      },
      vendor: {
        serializedName: "properties.vendor",
        xmlName: "properties.vendor",
        type: {
          name: "String"
        }
      },
      promoCodeRequired: {
        serializedName: "properties.promoCodeRequired",
        xmlName: "properties.promoCodeRequired",
        type: {
          name: "Boolean"
        }
      },
      quota: {
        serializedName: "properties.quota",
        xmlName: "properties.quota",
        type: {
          name: "Number"
        }
      },
      webHostingPlanRestrictions: {
        serializedName: "properties.webHostingPlanRestrictions",
        xmlName: "properties.webHostingPlanRestrictions",
        type: {
          name: "Enum",
          allowedValues: [
            "None",
            "Free",
            "Shared",
            "Basic",
            "Standard",
            "Premium"
          ]
        }
      },
      privacyPolicyUrl: {
        serializedName: "properties.privacyPolicyUrl",
        xmlName: "properties.privacyPolicyUrl",
        type: {
          name: "String"
        }
      },
      legalTermsUrl: {
        serializedName: "properties.legalTermsUrl",
        xmlName: "properties.legalTermsUrl",
        type: {
          name: "String"
        }
      },
      marketplacePublisher: {
        serializedName: "properties.marketplacePublisher",
        xmlName: "properties.marketplacePublisher",
        type: {
          name: "String"
        }
      },
      marketplaceOffer: {
        serializedName: "properties.marketplaceOffer",
        xmlName: "properties.marketplaceOffer",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const VnetParameters: coreClient.CompositeMapper = {
  serializedName: "VnetParameters",
  type: {
    name: "Composite",
    className: "VnetParameters",
    modelProperties: {
      ...ProxyOnlyResource.type.modelProperties,
      vnetResourceGroup: {
        serializedName: "properties.vnetResourceGroup",
        xmlName: "properties.vnetResourceGroup",
        type: {
          name: "String"
        }
      },
      vnetName: {
        serializedName: "properties.vnetName",
        xmlName: "properties.vnetName",
        type: {
          name: "String"
        }
      },
      vnetSubnetName: {
        serializedName: "properties.vnetSubnetName",
        xmlName: "properties.vnetSubnetName",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const VnetValidationTestFailure: coreClient.CompositeMapper = {
  serializedName: "VnetValidationTestFailure",
  type: {
    name: "Composite",
    className: "VnetValidationTestFailure",
    modelProperties: {
      ...ProxyOnlyResource.type.modelProperties,
      testName: {
        serializedName: "properties.testName",
        xmlName: "properties.testName",
        type: {
          name: "String"
        }
      },
      details: {
        serializedName: "properties.details",
        xmlName: "properties.details",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const VnetValidationFailureDetails: coreClient.CompositeMapper = {
  serializedName: "VnetValidationFailureDetails",
  type: {
    name: "Composite",
    className: "VnetValidationFailureDetails",
    modelProperties: {
      ...ProxyOnlyResource.type.modelProperties,
      failed: {
        serializedName: "properties.failed",
        xmlName: "properties.failed",
        type: {
          name: "Boolean"
        }
      },
      failedTests: {
        serializedName: "properties.failedTests",
        xmlName: "properties.failedTests",
        xmlElementName: "VnetValidationTestFailure",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "VnetValidationTestFailure"
            }
          }
        }
      }
    }
  }
};

export const AppServicePlanPatchResource: coreClient.CompositeMapper = {
  serializedName: "AppServicePlanPatchResource",
  type: {
    name: "Composite",
    className: "AppServicePlanPatchResource",
    modelProperties: {
      ...ProxyOnlyResource.type.modelProperties,
      workerTierName: {
        serializedName: "properties.workerTierName",
        xmlName: "properties.workerTierName",
        type: {
          name: "String"
        }
      },
      status: {
        serializedName: "properties.status",
        readOnly: true,
        xmlName: "properties.status",
        type: {
          name: "Enum",
          allowedValues: ["Ready", "Pending", "Creating"]
        }
      },
      subscription: {
        serializedName: "properties.subscription",
        readOnly: true,
        xmlName: "properties.subscription",
        type: {
          name: "String"
        }
      },
      hostingEnvironmentProfile: {
        serializedName: "properties.hostingEnvironmentProfile",
        xmlName: "properties.hostingEnvironmentProfile",
        type: {
          name: "Composite",
          className: "HostingEnvironmentProfile"
        }
      },
      maximumNumberOfWorkers: {
        serializedName: "properties.maximumNumberOfWorkers",
        readOnly: true,
        xmlName: "properties.maximumNumberOfWorkers",
        type: {
          name: "Number"
        }
      },
      geoRegion: {
        serializedName: "properties.geoRegion",
        readOnly: true,
        xmlName: "properties.geoRegion",
        type: {
          name: "String"
        }
      },
      perSiteScaling: {
        defaultValue: false,
        serializedName: "properties.perSiteScaling",
        xmlName: "properties.perSiteScaling",
        type: {
          name: "Boolean"
        }
      },
      maximumElasticWorkerCount: {
        serializedName: "properties.maximumElasticWorkerCount",
        xmlName: "properties.maximumElasticWorkerCount",
        type: {
          name: "Number"
        }
      },
      numberOfSites: {
        serializedName: "properties.numberOfSites",
        readOnly: true,
        xmlName: "properties.numberOfSites",
        type: {
          name: "Number"
        }
      },
      isSpot: {
        serializedName: "properties.isSpot",
        xmlName: "properties.isSpot",
        type: {
          name: "Boolean"
        }
      },
      spotExpirationTime: {
        serializedName: "properties.spotExpirationTime",
        xmlName: "properties.spotExpirationTime",
        type: {
          name: "DateTime"
        }
      },
      freeOfferExpirationTime: {
        serializedName: "properties.freeOfferExpirationTime",
        xmlName: "properties.freeOfferExpirationTime",
        type: {
          name: "DateTime"
        }
      },
      resourceGroup: {
        serializedName: "properties.resourceGroup",
        readOnly: true,
        xmlName: "properties.resourceGroup",
        type: {
          name: "String"
        }
      },
      reserved: {
        defaultValue: false,
        serializedName: "properties.reserved",
        xmlName: "properties.reserved",
        type: {
          name: "Boolean"
        }
      },
      isXenon: {
        defaultValue: false,
        serializedName: "properties.isXenon",
        xmlName: "properties.isXenon",
        type: {
          name: "Boolean"
        }
      },
      hyperV: {
        defaultValue: false,
        serializedName: "properties.hyperV",
        xmlName: "properties.hyperV",
        type: {
          name: "Boolean"
        }
      },
      targetWorkerCount: {
        serializedName: "properties.targetWorkerCount",
        xmlName: "properties.targetWorkerCount",
        type: {
          name: "Number"
        }
      },
      targetWorkerSizeId: {
        serializedName: "properties.targetWorkerSizeId",
        xmlName: "properties.targetWorkerSizeId",
        type: {
          name: "Number"
        }
      },
      provisioningState: {
        serializedName: "properties.provisioningState",
        readOnly: true,
        xmlName: "properties.provisioningState",
        type: {
          name: "Enum",
          allowedValues: [
            "Succeeded",
            "Failed",
            "Canceled",
            "InProgress",
            "Deleting"
          ]
        }
      }
    }
  }
};

export const HybridConnectionLimits: coreClient.CompositeMapper = {
  serializedName: "HybridConnectionLimits",
  type: {
    name: "Composite",
    className: "HybridConnectionLimits",
    modelProperties: {
      ...ProxyOnlyResource.type.modelProperties,
      current: {
        serializedName: "properties.current",
        readOnly: true,
        xmlName: "properties.current",
        type: {
          name: "Number"
        }
      },
      maximum: {
        serializedName: "properties.maximum",
        readOnly: true,
        xmlName: "properties.maximum",
        type: {
          name: "Number"
        }
      }
    }
  }
};

export const Recommendation: coreClient.CompositeMapper = {
  serializedName: "Recommendation",
  type: {
    name: "Composite",
    className: "Recommendation",
    modelProperties: {
      ...ProxyOnlyResource.type.modelProperties,
      creationTime: {
        serializedName: "properties.creationTime",
        xmlName: "properties.creationTime",
        type: {
          name: "DateTime"
        }
      },
      recommendationId: {
        serializedName: "properties.recommendationId",
        xmlName: "properties.recommendationId",
        type: {
          name: "Uuid"
        }
      },
      resourceId: {
        serializedName: "properties.resourceId",
        xmlName: "properties.resourceId",
        type: {
          name: "String"
        }
      },
      resourceScope: {
        serializedName: "properties.resourceScope",
        xmlName: "properties.resourceScope",
        type: {
          name: "String"
        }
      },
      ruleName: {
        serializedName: "properties.ruleName",
        xmlName: "properties.ruleName",
        type: {
          name: "String"
        }
      },
      displayName: {
        serializedName: "properties.displayName",
        xmlName: "properties.displayName",
        type: {
          name: "String"
        }
      },
      message: {
        serializedName: "properties.message",
        xmlName: "properties.message",
        type: {
          name: "String"
        }
      },
      level: {
        serializedName: "properties.level",
        xmlName: "properties.level",
        type: {
          name: "Enum",
          allowedValues: [
            "Critical",
            "Warning",
            "Information",
            "NonUrgentSuggestion"
          ]
        }
      },
      channels: {
        serializedName: "properties.channels",
        xmlName: "properties.channels",
        type: {
          name: "Enum",
          allowedValues: ["Notification", "Api", "Email", "Webhook", "All"]
        }
      },
      categoryTags: {
        serializedName: "properties.categoryTags",
        readOnly: true,
        xmlName: "properties.categoryTags",
        xmlElementName: "RecommendationPropertiesCategoryTagsItem",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "String"
            }
          }
        }
      },
      actionName: {
        serializedName: "properties.actionName",
        xmlName: "properties.actionName",
        type: {
          name: "String"
        }
      },
      enabled: {
        serializedName: "properties.enabled",
        xmlName: "properties.enabled",
        type: {
          name: "Number"
        }
      },
      states: {
        serializedName: "properties.states",
        xmlName: "properties.states",
        xmlElementName: "RecommendationPropertiesStatesItem",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "String"
            }
          }
        }
      },
      startTime: {
        serializedName: "properties.startTime",
        xmlName: "properties.startTime",
        type: {
          name: "DateTime"
        }
      },
      endTime: {
        serializedName: "properties.endTime",
        xmlName: "properties.endTime",
        type: {
          name: "DateTime"
        }
      },
      nextNotificationTime: {
        serializedName: "properties.nextNotificationTime",
        xmlName: "properties.nextNotificationTime",
        type: {
          name: "DateTime"
        }
      },
      notificationExpirationTime: {
        serializedName: "properties.notificationExpirationTime",
        xmlName: "properties.notificationExpirationTime",
        type: {
          name: "DateTime"
        }
      },
      notifiedTime: {
        serializedName: "properties.notifiedTime",
        xmlName: "properties.notifiedTime",
        type: {
          name: "DateTime"
        }
      },
      score: {
        serializedName: "properties.score",
        xmlName: "properties.score",
        type: {
          name: "Number"
        }
      },
      isDynamic: {
        serializedName: "properties.isDynamic",
        xmlName: "properties.isDynamic",
        type: {
          name: "Boolean"
        }
      },
      extensionName: {
        serializedName: "properties.extensionName",
        xmlName: "properties.extensionName",
        type: {
          name: "String"
        }
      },
      bladeName: {
        serializedName: "properties.bladeName",
        xmlName: "properties.bladeName",
        type: {
          name: "String"
        }
      },
      forwardLink: {
        serializedName: "properties.forwardLink",
        xmlName: "properties.forwardLink",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const RecommendationRule: coreClient.CompositeMapper = {
  serializedName: "RecommendationRule",
  type: {
    name: "Composite",
    className: "RecommendationRule",
    modelProperties: {
      ...ProxyOnlyResource.type.modelProperties,
      recommendationName: {
        serializedName: "properties.recommendationName",
        xmlName: "properties.recommendationName",
        type: {
          name: "String"
        }
      },
      displayName: {
        serializedName: "properties.displayName",
        xmlName: "properties.displayName",
        type: {
          name: "String"
        }
      },
      message: {
        serializedName: "properties.message",
        xmlName: "properties.message",
        type: {
          name: "String"
        }
      },
      recommendationId: {
        serializedName: "properties.recommendationId",
        xmlName: "properties.recommendationId",
        type: {
          name: "Uuid"
        }
      },
      description: {
        serializedName: "properties.description",
        xmlName: "properties.description",
        type: {
          name: "String"
        }
      },
      actionName: {
        serializedName: "properties.actionName",
        xmlName: "properties.actionName",
        type: {
          name: "String"
        }
      },
      level: {
        serializedName: "properties.level",
        xmlName: "properties.level",
        type: {
          name: "Enum",
          allowedValues: [
            "Critical",
            "Warning",
            "Information",
            "NonUrgentSuggestion"
          ]
        }
      },
      channels: {
        serializedName: "properties.channels",
        xmlName: "properties.channels",
        type: {
          name: "Enum",
          allowedValues: ["Notification", "Api", "Email", "Webhook", "All"]
        }
      },
      categoryTags: {
        serializedName: "properties.categoryTags",
        readOnly: true,
        xmlName: "properties.categoryTags",
        xmlElementName: "RecommendationRulePropertiesCategoryTagsItem",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "String"
            }
          }
        }
      },
      isDynamic: {
        serializedName: "properties.isDynamic",
        xmlName: "properties.isDynamic",
        type: {
          name: "Boolean"
        }
      },
      extensionName: {
        serializedName: "properties.extensionName",
        xmlName: "properties.extensionName",
        type: {
          name: "String"
        }
      },
      bladeName: {
        serializedName: "properties.bladeName",
        xmlName: "properties.bladeName",
        type: {
          name: "String"
        }
      },
      forwardLink: {
        serializedName: "properties.forwardLink",
        xmlName: "properties.forwardLink",
        type: {
          name: "String"
        }
      }
    }
  }
};
