/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */

import {
  env,
  record,
  RecorderEnvironmentSetup,
  Recorder,
  isPlaybackMode,
} from "@azure-tools/test-recorder";
import { assert } from "chai";
import { ClientSecretCredential } from "@azure/identity";
import WebSiteClient, { WebSiteManagementClient, paginate, getLongRunningPoller } from "../../src/index";

const recorderEnvSetup: RecorderEnvironmentSetup = {
  replaceableVariables: {
    AZURE_CLIENT_ID: "azure_client_id",
    AZURE_CLIENT_SECRET: "azure_client_secret",
    AZURE_TENANT_ID: "88888888-8888-8888-8888-888888888888",
    SUBSCRIPTION_ID: "azure_subscription_id",
  },
  customizationsOnRecordings: [
    (recording: any): any =>
      recording.replace(/"access_token":"[^"]*"/g, `"access_token":"access_token"`),
  ],
  queryParametersToSkip: [],
};

export const testPollingOptions = {
  intervalInMs: isPlaybackMode() ? 0 : undefined,
};

describe("Web test", () => {
  let recorder: Recorder;
  let subscriptionId: string;
  let client: WebSiteManagementClient;
  let resourceGroup: string;
  let appservicePlanName: string;
  let name: string;

  beforeEach(async function () {
    recorder = record(this, recorderEnvSetup);
    subscriptionId = env.SUBSCRIPTION_ID;
    // This is an example of how the environment variables are used
    const credential = new ClientSecretCredential(
      env.AZURE_TENANT_ID,
      env.AZURE_CLIENT_ID,
      env.AZURE_CLIENT_SECRET
    );
    client = WebSiteClient(credential);
    resourceGroup = "myjstest";
    appservicePlanName = "myappserviceplanxxx";
    name = "mysitexxxx";
  });

  afterEach(async function () {
    await recorder.stop();
  });

  it("appServicePlans create test", async function () {
    const initialResponse = await client.appServicePlans.createOrUpdate(
      subscriptionId,
      resourceGroup,
      appservicePlanName,
      {
        body: {
          location: "eastus",
          sku: {
            name: "S1",
            tier: "STANDARD",
            capacity: 1,
          },
          properties: {
            perSiteScaling: false,
            isXenon: false,
          },
        },
      }
    );
    const poller = getLongRunningPoller(client, initialResponse, testPollingOptions);
    const res = await poller.pollUntilDone();
    assert.strictEqual(res.status, "200");
    assert.isTrue(res.body !== undefined);
  });

  it("webApps create test", async function () {
    const initialResponse = await client.webApps.createOrUpdate(subscriptionId, resourceGroup, name, {
      body: {
        location: "eastus",
        properties: {
          serverFarmId:
            "/subscriptions/" +
            subscriptionId +
            "/resourceGroups/myjstest/providers/Microsoft.Web/serverfarms/myappserviceplanxxx",
          reserved: false,
          isXenon: false,
          hyperV: false,
          siteConfig: {
            netFrameworkVersion: "v4.6",
            appSettings: [
              {
                name: "WEBSITE_NODE_DEFAULT_VERSION",
                value: "10.14",
              },
            ],
            localMySqlEnabled: false,
            http20Enabled: true,
          },
          scmSiteAlsoStopped: false,
          httpsOnly: false,
        },
      },
    });
    const poller = getLongRunningPoller(client, initialResponse, testPollingOptions);
    const res = await poller.pollUntilDone();
    assert.strictEqual(res.status, "200");
    assert.isTrue(res.body !== undefined);
  });

  it("appServicePlans get test", async function () {
    const res = await client.appServicePlans.get(subscriptionId, resourceGroup, appservicePlanName);
    assert.strictEqual(res.status, "200");
  });

  it("webApps get test", async function () {
    const res = await client.webApps.get(subscriptionId, resourceGroup, name);
    assert.strictEqual(res.status, "200");
  });

  it.skip("appServicePlans list test", async function () {
    const resArray = new Array();
    const initialResposne = await client.appServicePlans.listByResourceGroup(
      subscriptionId,
      resourceGroup
    );
    /**
     *  {
          status: '200',
          body: { value: [ [Object] ], nextLink: null, id: null }
        }
    */
    // console.log(initialResposne);
    // Body Property nextLink should be a string or undefined
    const res = paginate(client, initialResposne);
    for await (let item of res) {
      resArray.push(item);
    }
    assert.equal(resArray.length, 1);
  });

  it("webApps list test", async function () {
    const resArray = new Array();
    const initialResposne = await client.webApps.list(subscriptionId);
    const res = paginate(client, initialResposne);
    for await (let item of res) {
      resArray.push(item);
    }
    assert.equal(resArray.length, 1);
  });

  it("webApps update test", async function () {
    const res = await client.webApps.update(subscriptionId, resourceGroup, name, {
      body: {
        properties: {
          serverFarmId:
            "/subscriptions/" +
            subscriptionId +
            "/resourceGroups/myjstest/providers/Microsoft.Web/serverfarms/myappserviceplanxxx",
          reserved: false,
          isXenon: false,
          hyperV: false,
          siteConfig: {
            netFrameworkVersion: "v4.6",
            localMySqlEnabled: false,
            http20Enabled: true,
          },
          scmSiteAlsoStopped: false,
        },
      },
    });
    assert.strictEqual(res.status, "200");
    assert.isTrue(res.body !== undefined);
  });

  it("webApps delete test", async function () {
    await client.webApps.delete(subscriptionId, resourceGroup, name);
    const resArray = new Array();
    const initialResposne = await client.webApps.list(subscriptionId);
    const result = paginate(client, initialResposne);
    for await (let item of result) {
      resArray.push(item);
    }
    assert.equal(resArray.length, 0);
  });

  it("appServicePlans delete test", async function () {
    await client.appServicePlans.delete(subscriptionId, resourceGroup, appservicePlanName);
    const resArray = new Array();
    const initialResposne = await client.appServicePlans.listByResourceGroup(subscriptionId, resourceGroup);
    const result = paginate(client, initialResposne);
    for await (let item of result) {
      resArray.push(item);
    }
    assert.equal(resArray.length, 0);
  });
});
