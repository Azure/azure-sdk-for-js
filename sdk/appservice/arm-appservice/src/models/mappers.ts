/*
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for license information.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */

import { CloudErrorMapper, BaseResourceMapper } from "@azure/ms-rest-azure-js";
import * as msRest from "@azure/ms-rest-js";

export const CloudError = CloudErrorMapper;
export const BaseResource = BaseResourceMapper;

export const AppServiceCertificate: msRest.CompositeMapper = {
  serializedName: "AppServiceCertificate",
  type: {
    name: "Composite",
    className: "AppServiceCertificate",
    modelProperties: {
      keyVaultId: {
        serializedName: "keyVaultId",
        type: {
          name: "String"
        }
      },
      keyVaultSecretName: {
        serializedName: "keyVaultSecretName",
        type: {
          name: "String"
        }
      },
      provisioningState: {
        readOnly: true,
        serializedName: "provisioningState",
        type: {
          name: "Enum",
          allowedValues: [
            "Initialized",
            "WaitingOnCertificateOrder",
            "Succeeded",
            "CertificateOrderFailed",
            "OperationNotPermittedOnKeyVault",
            "AzureServiceUnauthorizedToAccessKeyVault",
            "KeyVaultDoesNotExist",
            "KeyVaultSecretDoesNotExist",
            "UnknownError",
            "ExternalPrivateKey",
            "Unknown"
          ]
        }
      }
    }
  }
};

export const Resource: msRest.CompositeMapper = {
  serializedName: "Resource",
  type: {
    name: "Composite",
    className: "Resource",
    modelProperties: {
      id: {
        readOnly: true,
        serializedName: "id",
        type: {
          name: "String"
        }
      },
      name: {
        readOnly: true,
        serializedName: "name",
        type: {
          name: "String"
        }
      },
      kind: {
        serializedName: "kind",
        type: {
          name: "String"
        }
      },
      location: {
        required: true,
        serializedName: "location",
        type: {
          name: "String"
        }
      },
      type: {
        readOnly: true,
        serializedName: "type",
        type: {
          name: "String"
        }
      },
      tags: {
        serializedName: "tags",
        type: {
          name: "Dictionary",
          value: {
            type: {
              name: "String"
            }
          }
        }
      }
    }
  }
};

export const AppServiceCertificateResource: msRest.CompositeMapper = {
  serializedName: "AppServiceCertificateResource",
  type: {
    name: "Composite",
    className: "AppServiceCertificateResource",
    modelProperties: {
      ...Resource.type.modelProperties,
      keyVaultId: {
        serializedName: "properties.keyVaultId",
        type: {
          name: "String"
        }
      },
      keyVaultSecretName: {
        serializedName: "properties.keyVaultSecretName",
        type: {
          name: "String"
        }
      },
      provisioningState: {
        readOnly: true,
        serializedName: "properties.provisioningState",
        type: {
          name: "Enum",
          allowedValues: [
            "Initialized",
            "WaitingOnCertificateOrder",
            "Succeeded",
            "CertificateOrderFailed",
            "OperationNotPermittedOnKeyVault",
            "AzureServiceUnauthorizedToAccessKeyVault",
            "KeyVaultDoesNotExist",
            "KeyVaultSecretDoesNotExist",
            "UnknownError",
            "ExternalPrivateKey",
            "Unknown"
          ]
        }
      }
    }
  }
};

export const CertificateDetails: msRest.CompositeMapper = {
  serializedName: "CertificateDetails",
  type: {
    name: "Composite",
    className: "CertificateDetails",
    modelProperties: {
      version: {
        readOnly: true,
        serializedName: "version",
        type: {
          name: "Number"
        }
      },
      serialNumber: {
        readOnly: true,
        serializedName: "serialNumber",
        type: {
          name: "String"
        }
      },
      thumbprint: {
        readOnly: true,
        serializedName: "thumbprint",
        type: {
          name: "String"
        }
      },
      subject: {
        readOnly: true,
        serializedName: "subject",
        type: {
          name: "String"
        }
      },
      notBefore: {
        readOnly: true,
        serializedName: "notBefore",
        type: {
          name: "DateTime"
        }
      },
      notAfter: {
        readOnly: true,
        serializedName: "notAfter",
        type: {
          name: "DateTime"
        }
      },
      signatureAlgorithm: {
        readOnly: true,
        serializedName: "signatureAlgorithm",
        type: {
          name: "String"
        }
      },
      issuer: {
        readOnly: true,
        serializedName: "issuer",
        type: {
          name: "String"
        }
      },
      rawData: {
        readOnly: true,
        serializedName: "rawData",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const AppServiceCertificateOrder: msRest.CompositeMapper = {
  serializedName: "AppServiceCertificateOrder",
  type: {
    name: "Composite",
    className: "AppServiceCertificateOrder",
    modelProperties: {
      ...Resource.type.modelProperties,
      certificates: {
        serializedName: "properties.certificates",
        type: {
          name: "Dictionary",
          value: {
            type: {
              name: "Composite",
              className: "AppServiceCertificate"
            }
          }
        }
      },
      distinguishedName: {
        serializedName: "properties.distinguishedName",
        type: {
          name: "String"
        }
      },
      domainVerificationToken: {
        readOnly: true,
        serializedName: "properties.domainVerificationToken",
        type: {
          name: "String"
        }
      },
      validityInYears: {
        serializedName: "properties.validityInYears",
        defaultValue: 1,
        constraints: {
          InclusiveMaximum: 3,
          InclusiveMinimum: 1
        },
        type: {
          name: "Number"
        }
      },
      keySize: {
        serializedName: "properties.keySize",
        defaultValue: 2048,
        type: {
          name: "Number"
        }
      },
      productType: {
        required: true,
        serializedName: "properties.productType",
        type: {
          name: "Enum",
          allowedValues: [
            "StandardDomainValidatedSsl",
            "StandardDomainValidatedWildCardSsl"
          ]
        }
      },
      autoRenew: {
        serializedName: "properties.autoRenew",
        defaultValue: true,
        type: {
          name: "Boolean"
        }
      },
      provisioningState: {
        readOnly: true,
        serializedName: "properties.provisioningState",
        type: {
          name: "Enum",
          allowedValues: [
            "Succeeded",
            "Failed",
            "Canceled",
            "InProgress",
            "Deleting"
          ]
        }
      },
      status: {
        readOnly: true,
        serializedName: "properties.status",
        type: {
          name: "Enum",
          allowedValues: [
            "Pendingissuance",
            "Issued",
            "Revoked",
            "Canceled",
            "Denied",
            "Pendingrevocation",
            "PendingRekey",
            "Unused",
            "Expired",
            "NotSubmitted"
          ]
        }
      },
      signedCertificate: {
        readOnly: true,
        serializedName: "properties.signedCertificate",
        type: {
          name: "Composite",
          className: "CertificateDetails"
        }
      },
      csr: {
        serializedName: "properties.csr",
        type: {
          name: "String"
        }
      },
      intermediate: {
        readOnly: true,
        serializedName: "properties.intermediate",
        type: {
          name: "Composite",
          className: "CertificateDetails"
        }
      },
      root: {
        readOnly: true,
        serializedName: "properties.root",
        type: {
          name: "Composite",
          className: "CertificateDetails"
        }
      },
      serialNumber: {
        readOnly: true,
        serializedName: "properties.serialNumber",
        type: {
          name: "String"
        }
      },
      lastCertificateIssuanceTime: {
        readOnly: true,
        serializedName: "properties.lastCertificateIssuanceTime",
        type: {
          name: "DateTime"
        }
      },
      expirationTime: {
        readOnly: true,
        serializedName: "properties.expirationTime",
        type: {
          name: "DateTime"
        }
      },
      isPrivateKeyExternal: {
        readOnly: true,
        serializedName: "properties.isPrivateKeyExternal",
        type: {
          name: "Boolean"
        }
      },
      appServiceCertificateNotRenewableReasons: {
        readOnly: true,
        serializedName: "properties.appServiceCertificateNotRenewableReasons",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "String"
            }
          }
        }
      },
      nextAutoRenewalTimeStamp: {
        readOnly: true,
        serializedName: "properties.nextAutoRenewalTimeStamp",
        type: {
          name: "DateTime"
        }
      }
    }
  }
};

export const ProxyOnlyResource: msRest.CompositeMapper = {
  serializedName: "ProxyOnlyResource",
  type: {
    name: "Composite",
    className: "ProxyOnlyResource",
    modelProperties: {
      id: {
        readOnly: true,
        serializedName: "id",
        type: {
          name: "String"
        }
      },
      name: {
        readOnly: true,
        serializedName: "name",
        type: {
          name: "String"
        }
      },
      kind: {
        serializedName: "kind",
        type: {
          name: "String"
        }
      },
      type: {
        readOnly: true,
        serializedName: "type",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const AppServiceCertificateOrderPatchResource: msRest.CompositeMapper = {
  serializedName: "AppServiceCertificateOrderPatchResource",
  type: {
    name: "Composite",
    className: "AppServiceCertificateOrderPatchResource",
    modelProperties: {
      ...ProxyOnlyResource.type.modelProperties,
      certificates: {
        serializedName: "properties.certificates",
        type: {
          name: "Dictionary",
          value: {
            type: {
              name: "Composite",
              className: "AppServiceCertificate"
            }
          }
        }
      },
      distinguishedName: {
        serializedName: "properties.distinguishedName",
        type: {
          name: "String"
        }
      },
      domainVerificationToken: {
        readOnly: true,
        serializedName: "properties.domainVerificationToken",
        type: {
          name: "String"
        }
      },
      validityInYears: {
        serializedName: "properties.validityInYears",
        defaultValue: 1,
        constraints: {
          InclusiveMaximum: 3,
          InclusiveMinimum: 1
        },
        type: {
          name: "Number"
        }
      },
      keySize: {
        serializedName: "properties.keySize",
        defaultValue: 2048,
        type: {
          name: "Number"
        }
      },
      productType: {
        required: true,
        serializedName: "properties.productType",
        type: {
          name: "Enum",
          allowedValues: [
            "StandardDomainValidatedSsl",
            "StandardDomainValidatedWildCardSsl"
          ]
        }
      },
      autoRenew: {
        serializedName: "properties.autoRenew",
        defaultValue: true,
        type: {
          name: "Boolean"
        }
      },
      provisioningState: {
        readOnly: true,
        serializedName: "properties.provisioningState",
        type: {
          name: "Enum",
          allowedValues: [
            "Succeeded",
            "Failed",
            "Canceled",
            "InProgress",
            "Deleting"
          ]
        }
      },
      status: {
        readOnly: true,
        serializedName: "properties.status",
        type: {
          name: "Enum",
          allowedValues: [
            "Pendingissuance",
            "Issued",
            "Revoked",
            "Canceled",
            "Denied",
            "Pendingrevocation",
            "PendingRekey",
            "Unused",
            "Expired",
            "NotSubmitted"
          ]
        }
      },
      signedCertificate: {
        readOnly: true,
        serializedName: "properties.signedCertificate",
        type: {
          name: "Composite",
          className: "CertificateDetails"
        }
      },
      csr: {
        serializedName: "properties.csr",
        type: {
          name: "String"
        }
      },
      intermediate: {
        readOnly: true,
        serializedName: "properties.intermediate",
        type: {
          name: "Composite",
          className: "CertificateDetails"
        }
      },
      root: {
        readOnly: true,
        serializedName: "properties.root",
        type: {
          name: "Composite",
          className: "CertificateDetails"
        }
      },
      serialNumber: {
        readOnly: true,
        serializedName: "properties.serialNumber",
        type: {
          name: "String"
        }
      },
      lastCertificateIssuanceTime: {
        readOnly: true,
        serializedName: "properties.lastCertificateIssuanceTime",
        type: {
          name: "DateTime"
        }
      },
      expirationTime: {
        readOnly: true,
        serializedName: "properties.expirationTime",
        type: {
          name: "DateTime"
        }
      },
      isPrivateKeyExternal: {
        readOnly: true,
        serializedName: "properties.isPrivateKeyExternal",
        type: {
          name: "Boolean"
        }
      },
      appServiceCertificateNotRenewableReasons: {
        readOnly: true,
        serializedName: "properties.appServiceCertificateNotRenewableReasons",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "String"
            }
          }
        }
      },
      nextAutoRenewalTimeStamp: {
        readOnly: true,
        serializedName: "properties.nextAutoRenewalTimeStamp",
        type: {
          name: "DateTime"
        }
      }
    }
  }
};

export const AppServiceCertificatePatchResource: msRest.CompositeMapper = {
  serializedName: "AppServiceCertificatePatchResource",
  type: {
    name: "Composite",
    className: "AppServiceCertificatePatchResource",
    modelProperties: {
      ...ProxyOnlyResource.type.modelProperties,
      keyVaultId: {
        serializedName: "properties.keyVaultId",
        type: {
          name: "String"
        }
      },
      keyVaultSecretName: {
        serializedName: "properties.keyVaultSecretName",
        type: {
          name: "String"
        }
      },
      provisioningState: {
        readOnly: true,
        serializedName: "properties.provisioningState",
        type: {
          name: "Enum",
          allowedValues: [
            "Initialized",
            "WaitingOnCertificateOrder",
            "Succeeded",
            "CertificateOrderFailed",
            "OperationNotPermittedOnKeyVault",
            "AzureServiceUnauthorizedToAccessKeyVault",
            "KeyVaultDoesNotExist",
            "KeyVaultSecretDoesNotExist",
            "UnknownError",
            "ExternalPrivateKey",
            "Unknown"
          ]
        }
      }
    }
  }
};

export const CertificateEmail: msRest.CompositeMapper = {
  serializedName: "CertificateEmail",
  type: {
    name: "Composite",
    className: "CertificateEmail",
    modelProperties: {
      ...ProxyOnlyResource.type.modelProperties,
      emailId: {
        serializedName: "properties.emailId",
        type: {
          name: "String"
        }
      },
      timeStamp: {
        serializedName: "properties.timeStamp",
        type: {
          name: "DateTime"
        }
      }
    }
  }
};

export const CertificateOrderAction: msRest.CompositeMapper = {
  serializedName: "CertificateOrderAction",
  type: {
    name: "Composite",
    className: "CertificateOrderAction",
    modelProperties: {
      ...ProxyOnlyResource.type.modelProperties,
      actionType: {
        readOnly: true,
        serializedName: "properties.actionType",
        type: {
          name: "Enum",
          allowedValues: [
            "CertificateIssued",
            "CertificateOrderCanceled",
            "CertificateOrderCreated",
            "CertificateRevoked",
            "DomainValidationComplete",
            "FraudDetected",
            "OrgNameChange",
            "OrgValidationComplete",
            "SanDrop",
            "FraudCleared",
            "CertificateExpired",
            "CertificateExpirationWarning",
            "FraudDocumentationRequired",
            "Unknown"
          ]
        }
      },
      createdAt: {
        readOnly: true,
        serializedName: "properties.createdAt",
        type: {
          name: "DateTime"
        }
      }
    }
  }
};

export const ReissueCertificateOrderRequest: msRest.CompositeMapper = {
  serializedName: "ReissueCertificateOrderRequest",
  type: {
    name: "Composite",
    className: "ReissueCertificateOrderRequest",
    modelProperties: {
      ...ProxyOnlyResource.type.modelProperties,
      keySize: {
        serializedName: "properties.keySize",
        type: {
          name: "Number"
        }
      },
      delayExistingRevokeInHours: {
        serializedName: "properties.delayExistingRevokeInHours",
        type: {
          name: "Number"
        }
      },
      csr: {
        serializedName: "properties.csr",
        type: {
          name: "String"
        }
      },
      isPrivateKeyExternal: {
        serializedName: "properties.isPrivateKeyExternal",
        type: {
          name: "Boolean"
        }
      }
    }
  }
};

export const RenewCertificateOrderRequest: msRest.CompositeMapper = {
  serializedName: "RenewCertificateOrderRequest",
  type: {
    name: "Composite",
    className: "RenewCertificateOrderRequest",
    modelProperties: {
      ...ProxyOnlyResource.type.modelProperties,
      keySize: {
        serializedName: "properties.keySize",
        type: {
          name: "Number"
        }
      },
      csr: {
        serializedName: "properties.csr",
        type: {
          name: "String"
        }
      },
      isPrivateKeyExternal: {
        serializedName: "properties.isPrivateKeyExternal",
        type: {
          name: "Boolean"
        }
      }
    }
  }
};

export const SiteSeal: msRest.CompositeMapper = {
  serializedName: "SiteSeal",
  type: {
    name: "Composite",
    className: "SiteSeal",
    modelProperties: {
      html: {
        required: true,
        serializedName: "html",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const SiteSealRequest: msRest.CompositeMapper = {
  serializedName: "SiteSealRequest",
  type: {
    name: "Composite",
    className: "SiteSealRequest",
    modelProperties: {
      lightTheme: {
        serializedName: "lightTheme",
        type: {
          name: "Boolean"
        }
      },
      locale: {
        serializedName: "locale",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const VnetRoute: msRest.CompositeMapper = {
  serializedName: "VnetRoute",
  type: {
    name: "Composite",
    className: "VnetRoute",
    modelProperties: {
      ...ProxyOnlyResource.type.modelProperties,
      startAddress: {
        serializedName: "properties.startAddress",
        type: {
          name: "String"
        }
      },
      endAddress: {
        serializedName: "properties.endAddress",
        type: {
          name: "String"
        }
      },
      routeType: {
        serializedName: "properties.routeType",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const VnetInfo: msRest.CompositeMapper = {
  serializedName: "VnetInfo",
  type: {
    name: "Composite",
    className: "VnetInfo",
    modelProperties: {
      ...ProxyOnlyResource.type.modelProperties,
      vnetResourceId: {
        serializedName: "properties.vnetResourceId",
        type: {
          name: "String"
        }
      },
      certThumbprint: {
        readOnly: true,
        serializedName: "properties.certThumbprint",
        type: {
          name: "String"
        }
      },
      certBlob: {
        serializedName: "properties.certBlob",
        type: {
          name: "String"
        }
      },
      routes: {
        readOnly: true,
        serializedName: "properties.routes",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "VnetRoute"
            }
          }
        }
      },
      resyncRequired: {
        readOnly: true,
        serializedName: "properties.resyncRequired",
        type: {
          name: "Boolean"
        }
      },
      dnsServers: {
        serializedName: "properties.dnsServers",
        type: {
          name: "String"
        }
      },
      isSwift: {
        serializedName: "properties.isSwift",
        type: {
          name: "Boolean"
        }
      }
    }
  }
};

export const VnetGateway: msRest.CompositeMapper = {
  serializedName: "VnetGateway",
  type: {
    name: "Composite",
    className: "VnetGateway",
    modelProperties: {
      ...ProxyOnlyResource.type.modelProperties,
      vnetName: {
        serializedName: "properties.vnetName",
        type: {
          name: "String"
        }
      },
      vpnPackageUri: {
        required: true,
        serializedName: "properties.vpnPackageUri",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const User: msRest.CompositeMapper = {
  serializedName: "User",
  type: {
    name: "Composite",
    className: "User",
    modelProperties: {
      ...ProxyOnlyResource.type.modelProperties,
      publishingUserName: {
        required: true,
        serializedName: "properties.publishingUserName",
        type: {
          name: "String"
        }
      },
      publishingPassword: {
        serializedName: "properties.publishingPassword",
        type: {
          name: "String"
        }
      },
      publishingPasswordHash: {
        serializedName: "properties.publishingPasswordHash",
        type: {
          name: "String"
        }
      },
      publishingPasswordHashSalt: {
        serializedName: "properties.publishingPasswordHashSalt",
        type: {
          name: "String"
        }
      },
      scmUri: {
        serializedName: "properties.scmUri",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const StringDictionary: msRest.CompositeMapper = {
  serializedName: "StringDictionary",
  type: {
    name: "Composite",
    className: "StringDictionary",
    modelProperties: {
      ...ProxyOnlyResource.type.modelProperties,
      properties: {
        serializedName: "properties",
        type: {
          name: "Dictionary",
          value: {
            type: {
              name: "String"
            }
          }
        }
      }
    }
  }
};

export const Snapshot: msRest.CompositeMapper = {
  serializedName: "Snapshot",
  type: {
    name: "Composite",
    className: "Snapshot",
    modelProperties: {
      ...ProxyOnlyResource.type.modelProperties,
      time: {
        readOnly: true,
        serializedName: "properties.time",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const PushSettings: msRest.CompositeMapper = {
  serializedName: "PushSettings",
  type: {
    name: "Composite",
    className: "PushSettings",
    modelProperties: {
      ...ProxyOnlyResource.type.modelProperties,
      isPushEnabled: {
        required: true,
        serializedName: "properties.isPushEnabled",
        type: {
          name: "Boolean"
        }
      },
      tagWhitelistJson: {
        serializedName: "properties.tagWhitelistJson",
        type: {
          name: "String"
        }
      },
      tagsRequiringAuth: {
        serializedName: "properties.tagsRequiringAuth",
        type: {
          name: "String"
        }
      },
      dynamicTagsJson: {
        serializedName: "properties.dynamicTagsJson",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const Identifier: msRest.CompositeMapper = {
  serializedName: "Identifier",
  type: {
    name: "Composite",
    className: "Identifier",
    modelProperties: {
      ...ProxyOnlyResource.type.modelProperties,
      value: {
        serializedName: "properties.id",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const HybridConnection: msRest.CompositeMapper = {
  serializedName: "HybridConnection",
  type: {
    name: "Composite",
    className: "HybridConnection",
    modelProperties: {
      ...ProxyOnlyResource.type.modelProperties,
      serviceBusNamespace: {
        serializedName: "properties.serviceBusNamespace",
        type: {
          name: "String"
        }
      },
      relayName: {
        serializedName: "properties.relayName",
        type: {
          name: "String"
        }
      },
      relayArmUri: {
        serializedName: "properties.relayArmUri",
        type: {
          name: "String"
        }
      },
      hostname: {
        serializedName: "properties.hostname",
        type: {
          name: "String"
        }
      },
      port: {
        serializedName: "properties.port",
        type: {
          name: "Number"
        }
      },
      sendKeyName: {
        serializedName: "properties.sendKeyName",
        type: {
          name: "String"
        }
      },
      sendKeyValue: {
        serializedName: "properties.sendKeyValue",
        type: {
          name: "String"
        }
      },
      serviceBusSuffix: {
        serializedName: "properties.serviceBusSuffix",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const DeletedSite: msRest.CompositeMapper = {
  serializedName: "DeletedSite",
  type: {
    name: "Composite",
    className: "DeletedSite",
    modelProperties: {
      ...ProxyOnlyResource.type.modelProperties,
      deletedSiteId: {
        readOnly: true,
        serializedName: "properties.deletedSiteId",
        type: {
          name: "Number"
        }
      },
      deletedTimestamp: {
        readOnly: true,
        serializedName: "properties.deletedTimestamp",
        type: {
          name: "String"
        }
      },
      subscription: {
        readOnly: true,
        serializedName: "properties.subscription",
        type: {
          name: "String"
        }
      },
      resourceGroup: {
        readOnly: true,
        serializedName: "properties.resourceGroup",
        type: {
          name: "String"
        }
      },
      deletedSiteName: {
        readOnly: true,
        serializedName: "properties.deletedSiteName",
        type: {
          name: "String"
        }
      },
      slot: {
        readOnly: true,
        serializedName: "properties.slot",
        type: {
          name: "String"
        }
      },
      deletedSiteKind: {
        readOnly: true,
        serializedName: "properties.kind",
        type: {
          name: "String"
        }
      },
      geoRegionName: {
        readOnly: true,
        serializedName: "properties.geoRegionName",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const ManagedServiceIdentityUserAssignedIdentitiesValue: msRest.CompositeMapper = {
  serializedName: "ManagedServiceIdentity_userAssignedIdentitiesValue",
  type: {
    name: "Composite",
    className: "ManagedServiceIdentityUserAssignedIdentitiesValue",
    modelProperties: {
      principalId: {
        readOnly: true,
        serializedName: "principalId",
        type: {
          name: "String"
        }
      },
      clientId: {
        readOnly: true,
        serializedName: "clientId",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const ManagedServiceIdentity: msRest.CompositeMapper = {
  serializedName: "ManagedServiceIdentity",
  type: {
    name: "Composite",
    className: "ManagedServiceIdentity",
    modelProperties: {
      type: {
        serializedName: "type",
        type: {
          name: "Enum",
          allowedValues: [
            "None",
            "SystemAssigned",
            "UserAssigned"
          ]
        }
      },
      tenantId: {
        readOnly: true,
        serializedName: "tenantId",
        type: {
          name: "String"
        }
      },
      principalId: {
        readOnly: true,
        serializedName: "principalId",
        type: {
          name: "String"
        }
      },
      userAssignedIdentities: {
        serializedName: "userAssignedIdentities",
        type: {
          name: "Dictionary",
          value: {
            type: {
              name: "Composite",
              className: "ManagedServiceIdentityUserAssignedIdentitiesValue"
            }
          }
        }
      }
    }
  }
};

export const SlotSwapStatus: msRest.CompositeMapper = {
  serializedName: "SlotSwapStatus",
  type: {
    name: "Composite",
    className: "SlotSwapStatus",
    modelProperties: {
      timestampUtc: {
        readOnly: true,
        serializedName: "timestampUtc",
        type: {
          name: "DateTime"
        }
      },
      sourceSlotName: {
        readOnly: true,
        serializedName: "sourceSlotName",
        type: {
          name: "String"
        }
      },
      destinationSlotName: {
        readOnly: true,
        serializedName: "destinationSlotName",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const CloningInfo: msRest.CompositeMapper = {
  serializedName: "CloningInfo",
  type: {
    name: "Composite",
    className: "CloningInfo",
    modelProperties: {
      correlationId: {
        serializedName: "correlationId",
        type: {
          name: "Uuid"
        }
      },
      overwrite: {
        serializedName: "overwrite",
        type: {
          name: "Boolean"
        }
      },
      cloneCustomHostNames: {
        serializedName: "cloneCustomHostNames",
        type: {
          name: "Boolean"
        }
      },
      cloneSourceControl: {
        serializedName: "cloneSourceControl",
        type: {
          name: "Boolean"
        }
      },
      sourceWebAppId: {
        required: true,
        serializedName: "sourceWebAppId",
        type: {
          name: "String"
        }
      },
      sourceWebAppLocation: {
        serializedName: "sourceWebAppLocation",
        type: {
          name: "String"
        }
      },
      hostingEnvironment: {
        serializedName: "hostingEnvironment",
        type: {
          name: "String"
        }
      },
      appSettingsOverrides: {
        serializedName: "appSettingsOverrides",
        type: {
          name: "Dictionary",
          value: {
            type: {
              name: "String"
            }
          }
        }
      },
      configureLoadBalancing: {
        serializedName: "configureLoadBalancing",
        type: {
          name: "Boolean"
        }
      },
      trafficManagerProfileId: {
        serializedName: "trafficManagerProfileId",
        type: {
          name: "String"
        }
      },
      trafficManagerProfileName: {
        serializedName: "trafficManagerProfileName",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const HostingEnvironmentProfile: msRest.CompositeMapper = {
  serializedName: "HostingEnvironmentProfile",
  type: {
    name: "Composite",
    className: "HostingEnvironmentProfile",
    modelProperties: {
      id: {
        serializedName: "id",
        type: {
          name: "String"
        }
      },
      name: {
        readOnly: true,
        serializedName: "name",
        type: {
          name: "String"
        }
      },
      type: {
        readOnly: true,
        serializedName: "type",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const IpSecurityRestriction: msRest.CompositeMapper = {
  serializedName: "IpSecurityRestriction",
  type: {
    name: "Composite",
    className: "IpSecurityRestriction",
    modelProperties: {
      ipAddress: {
        serializedName: "ipAddress",
        type: {
          name: "String"
        }
      },
      subnetMask: {
        serializedName: "subnetMask",
        type: {
          name: "String"
        }
      },
      vnetSubnetResourceId: {
        serializedName: "vnetSubnetResourceId",
        type: {
          name: "String"
        }
      },
      vnetTrafficTag: {
        serializedName: "vnetTrafficTag",
        type: {
          name: "Number"
        }
      },
      subnetTrafficTag: {
        serializedName: "subnetTrafficTag",
        type: {
          name: "Number"
        }
      },
      action: {
        serializedName: "action",
        type: {
          name: "String"
        }
      },
      tag: {
        serializedName: "tag",
        type: {
          name: "Enum",
          allowedValues: [
            "Default",
            "XffProxy"
          ]
        }
      },
      priority: {
        serializedName: "priority",
        type: {
          name: "Number"
        }
      },
      name: {
        serializedName: "name",
        type: {
          name: "String"
        }
      },
      description: {
        serializedName: "description",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const ApiManagementConfig: msRest.CompositeMapper = {
  serializedName: "ApiManagementConfig",
  type: {
    name: "Composite",
    className: "ApiManagementConfig",
    modelProperties: {
      id: {
        serializedName: "id",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const ApiDefinitionInfo: msRest.CompositeMapper = {
  serializedName: "ApiDefinitionInfo",
  type: {
    name: "Composite",
    className: "ApiDefinitionInfo",
    modelProperties: {
      url: {
        serializedName: "url",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const CorsSettings: msRest.CompositeMapper = {
  serializedName: "CorsSettings",
  type: {
    name: "Composite",
    className: "CorsSettings",
    modelProperties: {
      allowedOrigins: {
        serializedName: "allowedOrigins",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "String"
            }
          }
        }
      },
      supportCredentials: {
        serializedName: "supportCredentials",
        type: {
          name: "Boolean"
        }
      }
    }
  }
};

export const AutoHealCustomAction: msRest.CompositeMapper = {
  serializedName: "AutoHealCustomAction",
  type: {
    name: "Composite",
    className: "AutoHealCustomAction",
    modelProperties: {
      exe: {
        serializedName: "exe",
        type: {
          name: "String"
        }
      },
      parameters: {
        serializedName: "parameters",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const AutoHealActions: msRest.CompositeMapper = {
  serializedName: "AutoHealActions",
  type: {
    name: "Composite",
    className: "AutoHealActions",
    modelProperties: {
      actionType: {
        serializedName: "actionType",
        type: {
          name: "Enum",
          allowedValues: [
            "Recycle",
            "LogEvent",
            "CustomAction"
          ]
        }
      },
      customAction: {
        serializedName: "customAction",
        type: {
          name: "Composite",
          className: "AutoHealCustomAction"
        }
      },
      minProcessExecutionTime: {
        serializedName: "minProcessExecutionTime",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const SlowRequestsBasedTrigger: msRest.CompositeMapper = {
  serializedName: "SlowRequestsBasedTrigger",
  type: {
    name: "Composite",
    className: "SlowRequestsBasedTrigger",
    modelProperties: {
      timeTaken: {
        serializedName: "timeTaken",
        type: {
          name: "String"
        }
      },
      count: {
        serializedName: "count",
        type: {
          name: "Number"
        }
      },
      timeInterval: {
        serializedName: "timeInterval",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const StatusCodesBasedTrigger: msRest.CompositeMapper = {
  serializedName: "StatusCodesBasedTrigger",
  type: {
    name: "Composite",
    className: "StatusCodesBasedTrigger",
    modelProperties: {
      status: {
        serializedName: "status",
        type: {
          name: "Number"
        }
      },
      subStatus: {
        serializedName: "subStatus",
        type: {
          name: "Number"
        }
      },
      win32Status: {
        serializedName: "win32Status",
        type: {
          name: "Number"
        }
      },
      count: {
        serializedName: "count",
        type: {
          name: "Number"
        }
      },
      timeInterval: {
        serializedName: "timeInterval",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const RequestsBasedTrigger: msRest.CompositeMapper = {
  serializedName: "RequestsBasedTrigger",
  type: {
    name: "Composite",
    className: "RequestsBasedTrigger",
    modelProperties: {
      count: {
        serializedName: "count",
        type: {
          name: "Number"
        }
      },
      timeInterval: {
        serializedName: "timeInterval",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const AutoHealTriggers: msRest.CompositeMapper = {
  serializedName: "AutoHealTriggers",
  type: {
    name: "Composite",
    className: "AutoHealTriggers",
    modelProperties: {
      requests: {
        serializedName: "requests",
        type: {
          name: "Composite",
          className: "RequestsBasedTrigger"
        }
      },
      privateBytesInKB: {
        serializedName: "privateBytesInKB",
        type: {
          name: "Number"
        }
      },
      statusCodes: {
        serializedName: "statusCodes",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "StatusCodesBasedTrigger"
            }
          }
        }
      },
      slowRequests: {
        serializedName: "slowRequests",
        type: {
          name: "Composite",
          className: "SlowRequestsBasedTrigger"
        }
      }
    }
  }
};

export const AutoHealRules: msRest.CompositeMapper = {
  serializedName: "AutoHealRules",
  type: {
    name: "Composite",
    className: "AutoHealRules",
    modelProperties: {
      triggers: {
        serializedName: "triggers",
        type: {
          name: "Composite",
          className: "AutoHealTriggers"
        }
      },
      actions: {
        serializedName: "actions",
        type: {
          name: "Composite",
          className: "AutoHealActions"
        }
      }
    }
  }
};

export const SiteLimits: msRest.CompositeMapper = {
  serializedName: "SiteLimits",
  type: {
    name: "Composite",
    className: "SiteLimits",
    modelProperties: {
      maxPercentageCpu: {
        serializedName: "maxPercentageCpu",
        type: {
          name: "Number"
        }
      },
      maxMemoryInMb: {
        serializedName: "maxMemoryInMb",
        type: {
          name: "Number"
        }
      },
      maxDiskSizeInMb: {
        serializedName: "maxDiskSizeInMb",
        type: {
          name: "Number"
        }
      }
    }
  }
};

export const RampUpRule: msRest.CompositeMapper = {
  serializedName: "RampUpRule",
  type: {
    name: "Composite",
    className: "RampUpRule",
    modelProperties: {
      actionHostName: {
        serializedName: "actionHostName",
        type: {
          name: "String"
        }
      },
      reroutePercentage: {
        serializedName: "reroutePercentage",
        type: {
          name: "Number"
        }
      },
      changeStep: {
        serializedName: "changeStep",
        type: {
          name: "Number"
        }
      },
      changeIntervalInMinutes: {
        serializedName: "changeIntervalInMinutes",
        type: {
          name: "Number"
        }
      },
      minReroutePercentage: {
        serializedName: "minReroutePercentage",
        type: {
          name: "Number"
        }
      },
      maxReroutePercentage: {
        serializedName: "maxReroutePercentage",
        type: {
          name: "Number"
        }
      },
      changeDecisionCallbackUrl: {
        serializedName: "changeDecisionCallbackUrl",
        type: {
          name: "String"
        }
      },
      name: {
        serializedName: "name",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const Experiments: msRest.CompositeMapper = {
  serializedName: "Experiments",
  type: {
    name: "Composite",
    className: "Experiments",
    modelProperties: {
      rampUpRules: {
        serializedName: "rampUpRules",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "RampUpRule"
            }
          }
        }
      }
    }
  }
};

export const VirtualDirectory: msRest.CompositeMapper = {
  serializedName: "VirtualDirectory",
  type: {
    name: "Composite",
    className: "VirtualDirectory",
    modelProperties: {
      virtualPath: {
        serializedName: "virtualPath",
        type: {
          name: "String"
        }
      },
      physicalPath: {
        serializedName: "physicalPath",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const VirtualApplication: msRest.CompositeMapper = {
  serializedName: "VirtualApplication",
  type: {
    name: "Composite",
    className: "VirtualApplication",
    modelProperties: {
      virtualPath: {
        serializedName: "virtualPath",
        type: {
          name: "String"
        }
      },
      physicalPath: {
        serializedName: "physicalPath",
        type: {
          name: "String"
        }
      },
      preloadEnabled: {
        serializedName: "preloadEnabled",
        type: {
          name: "Boolean"
        }
      },
      virtualDirectories: {
        serializedName: "virtualDirectories",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "VirtualDirectory"
            }
          }
        }
      }
    }
  }
};

export const HandlerMapping: msRest.CompositeMapper = {
  serializedName: "HandlerMapping",
  type: {
    name: "Composite",
    className: "HandlerMapping",
    modelProperties: {
      extension: {
        serializedName: "extension",
        type: {
          name: "String"
        }
      },
      scriptProcessor: {
        serializedName: "scriptProcessor",
        type: {
          name: "String"
        }
      },
      argumentsProperty: {
        serializedName: "arguments",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const SiteMachineKey: msRest.CompositeMapper = {
  serializedName: "SiteMachineKey",
  type: {
    name: "Composite",
    className: "SiteMachineKey",
    modelProperties: {
      validation: {
        serializedName: "validation",
        type: {
          name: "String"
        }
      },
      validationKey: {
        serializedName: "validationKey",
        type: {
          name: "String"
        }
      },
      decryption: {
        serializedName: "decryption",
        type: {
          name: "String"
        }
      },
      decryptionKey: {
        serializedName: "decryptionKey",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const ConnStringInfo: msRest.CompositeMapper = {
  serializedName: "ConnStringInfo",
  type: {
    name: "Composite",
    className: "ConnStringInfo",
    modelProperties: {
      name: {
        serializedName: "name",
        type: {
          name: "String"
        }
      },
      connectionString: {
        serializedName: "connectionString",
        type: {
          name: "String"
        }
      },
      type: {
        serializedName: "type",
        type: {
          name: "Enum",
          allowedValues: [
            "MySql",
            "SQLServer",
            "SQLAzure",
            "Custom",
            "NotificationHub",
            "ServiceBus",
            "EventHub",
            "ApiHub",
            "DocDb",
            "RedisCache",
            "PostgreSQL"
          ]
        }
      }
    }
  }
};

export const NameValuePair: msRest.CompositeMapper = {
  serializedName: "NameValuePair",
  type: {
    name: "Composite",
    className: "NameValuePair",
    modelProperties: {
      name: {
        serializedName: "name",
        type: {
          name: "String"
        }
      },
      value: {
        serializedName: "value",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const SiteConfig: msRest.CompositeMapper = {
  serializedName: "SiteConfig",
  type: {
    name: "Composite",
    className: "SiteConfig",
    modelProperties: {
      numberOfWorkers: {
        serializedName: "numberOfWorkers",
        type: {
          name: "Number"
        }
      },
      defaultDocuments: {
        serializedName: "defaultDocuments",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "String"
            }
          }
        }
      },
      netFrameworkVersion: {
        serializedName: "netFrameworkVersion",
        defaultValue: 'v4.6',
        type: {
          name: "String"
        }
      },
      phpVersion: {
        serializedName: "phpVersion",
        type: {
          name: "String"
        }
      },
      pythonVersion: {
        serializedName: "pythonVersion",
        type: {
          name: "String"
        }
      },
      nodeVersion: {
        serializedName: "nodeVersion",
        type: {
          name: "String"
        }
      },
      linuxFxVersion: {
        serializedName: "linuxFxVersion",
        type: {
          name: "String"
        }
      },
      windowsFxVersion: {
        serializedName: "windowsFxVersion",
        type: {
          name: "String"
        }
      },
      requestTracingEnabled: {
        serializedName: "requestTracingEnabled",
        type: {
          name: "Boolean"
        }
      },
      requestTracingExpirationTime: {
        serializedName: "requestTracingExpirationTime",
        type: {
          name: "DateTime"
        }
      },
      remoteDebuggingEnabled: {
        serializedName: "remoteDebuggingEnabled",
        type: {
          name: "Boolean"
        }
      },
      remoteDebuggingVersion: {
        serializedName: "remoteDebuggingVersion",
        type: {
          name: "String"
        }
      },
      httpLoggingEnabled: {
        serializedName: "httpLoggingEnabled",
        type: {
          name: "Boolean"
        }
      },
      logsDirectorySizeLimit: {
        serializedName: "logsDirectorySizeLimit",
        type: {
          name: "Number"
        }
      },
      detailedErrorLoggingEnabled: {
        serializedName: "detailedErrorLoggingEnabled",
        type: {
          name: "Boolean"
        }
      },
      publishingUsername: {
        serializedName: "publishingUsername",
        type: {
          name: "String"
        }
      },
      appSettings: {
        serializedName: "appSettings",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "NameValuePair"
            }
          }
        }
      },
      connectionStrings: {
        serializedName: "connectionStrings",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "ConnStringInfo"
            }
          }
        }
      },
      machineKey: {
        readOnly: true,
        serializedName: "machineKey",
        type: {
          name: "Composite",
          className: "SiteMachineKey"
        }
      },
      handlerMappings: {
        serializedName: "handlerMappings",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "HandlerMapping"
            }
          }
        }
      },
      documentRoot: {
        serializedName: "documentRoot",
        type: {
          name: "String"
        }
      },
      scmType: {
        serializedName: "scmType",
        type: {
          name: "String"
        }
      },
      use32BitWorkerProcess: {
        serializedName: "use32BitWorkerProcess",
        type: {
          name: "Boolean"
        }
      },
      webSocketsEnabled: {
        serializedName: "webSocketsEnabled",
        type: {
          name: "Boolean"
        }
      },
      alwaysOn: {
        serializedName: "alwaysOn",
        type: {
          name: "Boolean"
        }
      },
      javaVersion: {
        serializedName: "javaVersion",
        type: {
          name: "String"
        }
      },
      javaContainer: {
        serializedName: "javaContainer",
        type: {
          name: "String"
        }
      },
      javaContainerVersion: {
        serializedName: "javaContainerVersion",
        type: {
          name: "String"
        }
      },
      appCommandLine: {
        serializedName: "appCommandLine",
        type: {
          name: "String"
        }
      },
      managedPipelineMode: {
        serializedName: "managedPipelineMode",
        type: {
          name: "Enum",
          allowedValues: [
            "Integrated",
            "Classic"
          ]
        }
      },
      virtualApplications: {
        serializedName: "virtualApplications",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "VirtualApplication"
            }
          }
        }
      },
      loadBalancing: {
        serializedName: "loadBalancing",
        type: {
          name: "Enum",
          allowedValues: [
            "WeightedRoundRobin",
            "LeastRequests",
            "LeastResponseTime",
            "WeightedTotalTraffic",
            "RequestHash"
          ]
        }
      },
      experiments: {
        serializedName: "experiments",
        type: {
          name: "Composite",
          className: "Experiments"
        }
      },
      limits: {
        serializedName: "limits",
        type: {
          name: "Composite",
          className: "SiteLimits"
        }
      },
      autoHealEnabled: {
        serializedName: "autoHealEnabled",
        type: {
          name: "Boolean"
        }
      },
      autoHealRules: {
        serializedName: "autoHealRules",
        type: {
          name: "Composite",
          className: "AutoHealRules"
        }
      },
      tracingOptions: {
        serializedName: "tracingOptions",
        type: {
          name: "String"
        }
      },
      vnetName: {
        serializedName: "vnetName",
        type: {
          name: "String"
        }
      },
      cors: {
        serializedName: "cors",
        type: {
          name: "Composite",
          className: "CorsSettings"
        }
      },
      push: {
        serializedName: "push",
        type: {
          name: "Composite",
          className: "PushSettings"
        }
      },
      apiDefinition: {
        serializedName: "apiDefinition",
        type: {
          name: "Composite",
          className: "ApiDefinitionInfo"
        }
      },
      apiManagementConfig: {
        serializedName: "apiManagementConfig",
        type: {
          name: "Composite",
          className: "ApiManagementConfig"
        }
      },
      autoSwapSlotName: {
        serializedName: "autoSwapSlotName",
        type: {
          name: "String"
        }
      },
      localMySqlEnabled: {
        serializedName: "localMySqlEnabled",
        defaultValue: false,
        type: {
          name: "Boolean"
        }
      },
      managedServiceIdentityId: {
        serializedName: "managedServiceIdentityId",
        type: {
          name: "Number"
        }
      },
      xManagedServiceIdentityId: {
        serializedName: "xManagedServiceIdentityId",
        type: {
          name: "Number"
        }
      },
      ipSecurityRestrictions: {
        serializedName: "ipSecurityRestrictions",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "IpSecurityRestriction"
            }
          }
        }
      },
      scmIpSecurityRestrictions: {
        serializedName: "scmIpSecurityRestrictions",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "IpSecurityRestriction"
            }
          }
        }
      },
      scmIpSecurityRestrictionsUseMain: {
        serializedName: "scmIpSecurityRestrictionsUseMain",
        type: {
          name: "Boolean"
        }
      },
      http20Enabled: {
        serializedName: "http20Enabled",
        defaultValue: true,
        type: {
          name: "Boolean"
        }
      },
      minTlsVersion: {
        serializedName: "minTlsVersion",
        type: {
          name: "String"
        }
      },
      ftpsState: {
        serializedName: "ftpsState",
        type: {
          name: "String"
        }
      },
      preWarmedInstanceCount: {
        serializedName: "preWarmedInstanceCount",
        constraints: {
          InclusiveMaximum: 10,
          InclusiveMinimum: 0
        },
        type: {
          name: "Number"
        }
      },
      healthCheckPath: {
        serializedName: "healthCheckPath",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const HostNameSslState: msRest.CompositeMapper = {
  serializedName: "HostNameSslState",
  type: {
    name: "Composite",
    className: "HostNameSslState",
    modelProperties: {
      name: {
        serializedName: "name",
        type: {
          name: "String"
        }
      },
      sslState: {
        serializedName: "sslState",
        type: {
          name: "Enum",
          allowedValues: [
            "Disabled",
            "SniEnabled",
            "IpBasedEnabled"
          ]
        }
      },
      virtualIP: {
        serializedName: "virtualIP",
        type: {
          name: "String"
        }
      },
      thumbprint: {
        serializedName: "thumbprint",
        type: {
          name: "String"
        }
      },
      toUpdate: {
        serializedName: "toUpdate",
        type: {
          name: "Boolean"
        }
      },
      hostType: {
        serializedName: "hostType",
        type: {
          name: "Enum",
          allowedValues: [
            "Standard",
            "Repository"
          ]
        }
      }
    }
  }
};

export const Site: msRest.CompositeMapper = {
  serializedName: "Site",
  type: {
    name: "Composite",
    className: "Site",
    modelProperties: {
      ...Resource.type.modelProperties,
      state: {
        readOnly: true,
        serializedName: "properties.state",
        type: {
          name: "String"
        }
      },
      hostNames: {
        readOnly: true,
        serializedName: "properties.hostNames",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "String"
            }
          }
        }
      },
      repositorySiteName: {
        readOnly: true,
        serializedName: "properties.repositorySiteName",
        type: {
          name: "String"
        }
      },
      usageState: {
        readOnly: true,
        serializedName: "properties.usageState",
        type: {
          name: "Enum",
          allowedValues: [
            "Normal",
            "Exceeded"
          ]
        }
      },
      enabled: {
        serializedName: "properties.enabled",
        type: {
          name: "Boolean"
        }
      },
      enabledHostNames: {
        readOnly: true,
        serializedName: "properties.enabledHostNames",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "String"
            }
          }
        }
      },
      availabilityState: {
        readOnly: true,
        serializedName: "properties.availabilityState",
        type: {
          name: "Enum",
          allowedValues: [
            "Normal",
            "Limited",
            "DisasterRecoveryMode"
          ]
        }
      },
      hostNameSslStates: {
        serializedName: "properties.hostNameSslStates",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "HostNameSslState"
            }
          }
        }
      },
      serverFarmId: {
        serializedName: "properties.serverFarmId",
        type: {
          name: "String"
        }
      },
      reserved: {
        serializedName: "properties.reserved",
        defaultValue: false,
        type: {
          name: "Boolean"
        }
      },
      isXenon: {
        serializedName: "properties.isXenon",
        defaultValue: false,
        type: {
          name: "Boolean"
        }
      },
      hyperV: {
        serializedName: "properties.hyperV",
        defaultValue: false,
        type: {
          name: "Boolean"
        }
      },
      lastModifiedTimeUtc: {
        readOnly: true,
        serializedName: "properties.lastModifiedTimeUtc",
        type: {
          name: "DateTime"
        }
      },
      siteConfig: {
        serializedName: "properties.siteConfig",
        type: {
          name: "Composite",
          className: "SiteConfig"
        }
      },
      trafficManagerHostNames: {
        readOnly: true,
        serializedName: "properties.trafficManagerHostNames",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "String"
            }
          }
        }
      },
      scmSiteAlsoStopped: {
        serializedName: "properties.scmSiteAlsoStopped",
        defaultValue: false,
        type: {
          name: "Boolean"
        }
      },
      targetSwapSlot: {
        readOnly: true,
        serializedName: "properties.targetSwapSlot",
        type: {
          name: "String"
        }
      },
      hostingEnvironmentProfile: {
        serializedName: "properties.hostingEnvironmentProfile",
        type: {
          name: "Composite",
          className: "HostingEnvironmentProfile"
        }
      },
      clientAffinityEnabled: {
        serializedName: "properties.clientAffinityEnabled",
        type: {
          name: "Boolean"
        }
      },
      clientCertEnabled: {
        serializedName: "properties.clientCertEnabled",
        type: {
          name: "Boolean"
        }
      },
      clientCertExclusionPaths: {
        serializedName: "properties.clientCertExclusionPaths",
        type: {
          name: "String"
        }
      },
      hostNamesDisabled: {
        serializedName: "properties.hostNamesDisabled",
        type: {
          name: "Boolean"
        }
      },
      outboundIpAddresses: {
        readOnly: true,
        serializedName: "properties.outboundIpAddresses",
        type: {
          name: "String"
        }
      },
      possibleOutboundIpAddresses: {
        readOnly: true,
        serializedName: "properties.possibleOutboundIpAddresses",
        type: {
          name: "String"
        }
      },
      containerSize: {
        serializedName: "properties.containerSize",
        type: {
          name: "Number"
        }
      },
      dailyMemoryTimeQuota: {
        serializedName: "properties.dailyMemoryTimeQuota",
        type: {
          name: "Number"
        }
      },
      suspendedTill: {
        readOnly: true,
        serializedName: "properties.suspendedTill",
        type: {
          name: "DateTime"
        }
      },
      maxNumberOfWorkers: {
        readOnly: true,
        serializedName: "properties.maxNumberOfWorkers",
        type: {
          name: "Number"
        }
      },
      cloningInfo: {
        serializedName: "properties.cloningInfo",
        type: {
          name: "Composite",
          className: "CloningInfo"
        }
      },
      resourceGroup: {
        readOnly: true,
        serializedName: "properties.resourceGroup",
        type: {
          name: "String"
        }
      },
      isDefaultContainer: {
        readOnly: true,
        serializedName: "properties.isDefaultContainer",
        type: {
          name: "Boolean"
        }
      },
      defaultHostName: {
        readOnly: true,
        serializedName: "properties.defaultHostName",
        type: {
          name: "String"
        }
      },
      slotSwapStatus: {
        readOnly: true,
        serializedName: "properties.slotSwapStatus",
        type: {
          name: "Composite",
          className: "SlotSwapStatus"
        }
      },
      httpsOnly: {
        serializedName: "properties.httpsOnly",
        type: {
          name: "Boolean"
        }
      },
      redundancyMode: {
        serializedName: "properties.redundancyMode",
        type: {
          name: "Enum",
          allowedValues: [
            "None",
            "Manual",
            "Failover",
            "ActiveActive",
            "GeoRedundant"
          ]
        }
      },
      inProgressOperationId: {
        readOnly: true,
        serializedName: "properties.inProgressOperationId",
        type: {
          name: "Uuid"
        }
      },
      identity: {
        serializedName: "identity",
        type: {
          name: "Composite",
          className: "ManagedServiceIdentity"
        }
      }
    }
  }
};

export const Capability: msRest.CompositeMapper = {
  serializedName: "Capability",
  type: {
    name: "Composite",
    className: "Capability",
    modelProperties: {
      name: {
        serializedName: "name",
        type: {
          name: "String"
        }
      },
      value: {
        serializedName: "value",
        type: {
          name: "String"
        }
      },
      reason: {
        serializedName: "reason",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const SkuCapacity: msRest.CompositeMapper = {
  serializedName: "SkuCapacity",
  type: {
    name: "Composite",
    className: "SkuCapacity",
    modelProperties: {
      minimum: {
        serializedName: "minimum",
        type: {
          name: "Number"
        }
      },
      maximum: {
        serializedName: "maximum",
        type: {
          name: "Number"
        }
      },
      default: {
        serializedName: "default",
        type: {
          name: "Number"
        }
      },
      scaleType: {
        serializedName: "scaleType",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const SkuDescription: msRest.CompositeMapper = {
  serializedName: "SkuDescription",
  type: {
    name: "Composite",
    className: "SkuDescription",
    modelProperties: {
      name: {
        serializedName: "name",
        type: {
          name: "String"
        }
      },
      tier: {
        serializedName: "tier",
        type: {
          name: "String"
        }
      },
      size: {
        serializedName: "size",
        type: {
          name: "String"
        }
      },
      family: {
        serializedName: "family",
        type: {
          name: "String"
        }
      },
      capacity: {
        serializedName: "capacity",
        type: {
          name: "Number"
        }
      },
      skuCapacity: {
        serializedName: "skuCapacity",
        type: {
          name: "Composite",
          className: "SkuCapacity"
        }
      },
      locations: {
        serializedName: "locations",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "String"
            }
          }
        }
      },
      capabilities: {
        serializedName: "capabilities",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "Capability"
            }
          }
        }
      }
    }
  }
};

export const AppServicePlan: msRest.CompositeMapper = {
  serializedName: "AppServicePlan",
  type: {
    name: "Composite",
    className: "AppServicePlan",
    modelProperties: {
      ...Resource.type.modelProperties,
      workerTierName: {
        serializedName: "properties.workerTierName",
        type: {
          name: "String"
        }
      },
      status: {
        readOnly: true,
        serializedName: "properties.status",
        type: {
          name: "Enum",
          allowedValues: [
            "Ready",
            "Pending",
            "Creating"
          ]
        }
      },
      subscription: {
        readOnly: true,
        serializedName: "properties.subscription",
        type: {
          name: "String"
        }
      },
      hostingEnvironmentProfile: {
        serializedName: "properties.hostingEnvironmentProfile",
        type: {
          name: "Composite",
          className: "HostingEnvironmentProfile"
        }
      },
      maximumNumberOfWorkers: {
        readOnly: true,
        serializedName: "properties.maximumNumberOfWorkers",
        type: {
          name: "Number"
        }
      },
      geoRegion: {
        readOnly: true,
        serializedName: "properties.geoRegion",
        type: {
          name: "String"
        }
      },
      perSiteScaling: {
        serializedName: "properties.perSiteScaling",
        defaultValue: false,
        type: {
          name: "Boolean"
        }
      },
      maximumElasticWorkerCount: {
        serializedName: "properties.maximumElasticWorkerCount",
        type: {
          name: "Number"
        }
      },
      numberOfSites: {
        readOnly: true,
        serializedName: "properties.numberOfSites",
        type: {
          name: "Number"
        }
      },
      isSpot: {
        serializedName: "properties.isSpot",
        type: {
          name: "Boolean"
        }
      },
      spotExpirationTime: {
        serializedName: "properties.spotExpirationTime",
        type: {
          name: "DateTime"
        }
      },
      freeOfferExpirationTime: {
        serializedName: "properties.freeOfferExpirationTime",
        type: {
          name: "DateTime"
        }
      },
      resourceGroup: {
        readOnly: true,
        serializedName: "properties.resourceGroup",
        type: {
          name: "String"
        }
      },
      reserved: {
        serializedName: "properties.reserved",
        defaultValue: false,
        type: {
          name: "Boolean"
        }
      },
      isXenon: {
        serializedName: "properties.isXenon",
        defaultValue: false,
        type: {
          name: "Boolean"
        }
      },
      hyperV: {
        serializedName: "properties.hyperV",
        defaultValue: false,
        type: {
          name: "Boolean"
        }
      },
      targetWorkerCount: {
        serializedName: "properties.targetWorkerCount",
        type: {
          name: "Number"
        }
      },
      targetWorkerSizeId: {
        serializedName: "properties.targetWorkerSizeId",
        type: {
          name: "Number"
        }
      },
      provisioningState: {
        readOnly: true,
        serializedName: "properties.provisioningState",
        type: {
          name: "Enum",
          allowedValues: [
            "Succeeded",
            "Failed",
            "Canceled",
            "InProgress",
            "Deleting"
          ]
        }
      },
      sku: {
        serializedName: "sku",
        type: {
          name: "Composite",
          className: "SkuDescription"
        }
      }
    }
  }
};

export const DefaultErrorResponseErrorDetailsItem: msRest.CompositeMapper = {
  serializedName: "DefaultErrorResponse_error_detailsItem",
  type: {
    name: "Composite",
    className: "DefaultErrorResponseErrorDetailsItem",
    modelProperties: {
      code: {
        readOnly: true,
        serializedName: "code",
        type: {
          name: "String"
        }
      },
      message: {
        readOnly: true,
        serializedName: "message",
        type: {
          name: "String"
        }
      },
      target: {
        readOnly: true,
        serializedName: "target",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const DefaultErrorResponseError: msRest.CompositeMapper = {
  serializedName: "DefaultErrorResponse_error",
  type: {
    name: "Composite",
    className: "DefaultErrorResponseError",
    modelProperties: {
      code: {
        readOnly: true,
        serializedName: "code",
        type: {
          name: "String"
        }
      },
      message: {
        readOnly: true,
        serializedName: "message",
        type: {
          name: "String"
        }
      },
      target: {
        readOnly: true,
        serializedName: "target",
        type: {
          name: "String"
        }
      },
      details: {
        serializedName: "details",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "DefaultErrorResponseErrorDetailsItem"
            }
          }
        }
      },
      innererror: {
        readOnly: true,
        serializedName: "innererror",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const DefaultErrorResponse: msRest.CompositeMapper = {
  serializedName: "DefaultErrorResponse",
  type: {
    name: "Composite",
    className: "DefaultErrorResponse",
    modelProperties: {
      error: {
        readOnly: true,
        serializedName: "error",
        type: {
          name: "Composite",
          className: "DefaultErrorResponseError"
        }
      }
    }
  }
};

export const NameIdentifier: msRest.CompositeMapper = {
  serializedName: "NameIdentifier",
  type: {
    name: "Composite",
    className: "NameIdentifier",
    modelProperties: {
      name: {
        serializedName: "name",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const LogSpecification: msRest.CompositeMapper = {
  serializedName: "LogSpecification",
  type: {
    name: "Composite",
    className: "LogSpecification",
    modelProperties: {
      name: {
        serializedName: "name",
        type: {
          name: "String"
        }
      },
      displayName: {
        serializedName: "displayName",
        type: {
          name: "String"
        }
      },
      blobDuration: {
        serializedName: "blobDuration",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const MetricAvailability: msRest.CompositeMapper = {
  serializedName: "MetricAvailability",
  type: {
    name: "Composite",
    className: "MetricAvailability",
    modelProperties: {
      timeGrain: {
        serializedName: "timeGrain",
        type: {
          name: "String"
        }
      },
      blobDuration: {
        serializedName: "blobDuration",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const Dimension: msRest.CompositeMapper = {
  serializedName: "Dimension",
  type: {
    name: "Composite",
    className: "Dimension",
    modelProperties: {
      name: {
        serializedName: "name",
        type: {
          name: "String"
        }
      },
      displayName: {
        serializedName: "displayName",
        type: {
          name: "String"
        }
      },
      internalName: {
        serializedName: "internalName",
        type: {
          name: "String"
        }
      },
      toBeExportedForShoebox: {
        serializedName: "toBeExportedForShoebox",
        type: {
          name: "Boolean"
        }
      }
    }
  }
};

export const MetricSpecification: msRest.CompositeMapper = {
  serializedName: "MetricSpecification",
  type: {
    name: "Composite",
    className: "MetricSpecification",
    modelProperties: {
      name: {
        serializedName: "name",
        type: {
          name: "String"
        }
      },
      displayName: {
        serializedName: "displayName",
        type: {
          name: "String"
        }
      },
      displayDescription: {
        serializedName: "displayDescription",
        type: {
          name: "String"
        }
      },
      unit: {
        serializedName: "unit",
        type: {
          name: "String"
        }
      },
      aggregationType: {
        serializedName: "aggregationType",
        type: {
          name: "String"
        }
      },
      supportsInstanceLevelAggregation: {
        serializedName: "supportsInstanceLevelAggregation",
        type: {
          name: "Boolean"
        }
      },
      enableRegionalMdmAccount: {
        serializedName: "enableRegionalMdmAccount",
        type: {
          name: "Boolean"
        }
      },
      sourceMdmAccount: {
        serializedName: "sourceMdmAccount",
        type: {
          name: "String"
        }
      },
      sourceMdmNamespace: {
        serializedName: "sourceMdmNamespace",
        type: {
          name: "String"
        }
      },
      metricFilterPattern: {
        serializedName: "metricFilterPattern",
        type: {
          name: "String"
        }
      },
      fillGapWithZero: {
        serializedName: "fillGapWithZero",
        type: {
          name: "Boolean"
        }
      },
      isInternal: {
        serializedName: "isInternal",
        type: {
          name: "Boolean"
        }
      },
      dimensions: {
        serializedName: "dimensions",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "Dimension"
            }
          }
        }
      },
      category: {
        serializedName: "category",
        type: {
          name: "String"
        }
      },
      availabilities: {
        serializedName: "availabilities",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "MetricAvailability"
            }
          }
        }
      },
      supportedTimeGrainTypes: {
        serializedName: "supportedTimeGrainTypes",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "String"
            }
          }
        }
      }
    }
  }
};

export const ServiceSpecification: msRest.CompositeMapper = {
  serializedName: "ServiceSpecification",
  type: {
    name: "Composite",
    className: "ServiceSpecification",
    modelProperties: {
      metricSpecifications: {
        serializedName: "metricSpecifications",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "MetricSpecification"
            }
          }
        }
      },
      logSpecifications: {
        serializedName: "logSpecifications",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "LogSpecification"
            }
          }
        }
      }
    }
  }
};

export const CsmOperationDescriptionProperties: msRest.CompositeMapper = {
  serializedName: "CsmOperationDescriptionProperties",
  type: {
    name: "Composite",
    className: "CsmOperationDescriptionProperties",
    modelProperties: {
      serviceSpecification: {
        serializedName: "serviceSpecification",
        type: {
          name: "Composite",
          className: "ServiceSpecification"
        }
      }
    }
  }
};

export const CsmOperationDisplay: msRest.CompositeMapper = {
  serializedName: "CsmOperationDisplay",
  type: {
    name: "Composite",
    className: "CsmOperationDisplay",
    modelProperties: {
      provider: {
        serializedName: "provider",
        type: {
          name: "String"
        }
      },
      resource: {
        serializedName: "resource",
        type: {
          name: "String"
        }
      },
      operation: {
        serializedName: "operation",
        type: {
          name: "String"
        }
      },
      description: {
        serializedName: "description",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const CsmOperationDescription: msRest.CompositeMapper = {
  serializedName: "CsmOperationDescription",
  type: {
    name: "Composite",
    className: "CsmOperationDescription",
    modelProperties: {
      name: {
        serializedName: "name",
        type: {
          name: "String"
        }
      },
      display: {
        serializedName: "display",
        type: {
          name: "Composite",
          className: "CsmOperationDisplay"
        }
      },
      origin: {
        serializedName: "origin",
        type: {
          name: "String"
        }
      },
      properties: {
        serializedName: "properties",
        type: {
          name: "Composite",
          className: "CsmOperationDescriptionProperties"
        }
      }
    }
  }
};

export const Address: msRest.CompositeMapper = {
  serializedName: "Address",
  type: {
    name: "Composite",
    className: "Address",
    modelProperties: {
      address1: {
        required: true,
        serializedName: "address1",
        type: {
          name: "String"
        }
      },
      address2: {
        serializedName: "address2",
        type: {
          name: "String"
        }
      },
      city: {
        required: true,
        serializedName: "city",
        type: {
          name: "String"
        }
      },
      country: {
        required: true,
        serializedName: "country",
        type: {
          name: "String"
        }
      },
      postalCode: {
        required: true,
        serializedName: "postalCode",
        type: {
          name: "String"
        }
      },
      state: {
        required: true,
        serializedName: "state",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const Contact: msRest.CompositeMapper = {
  serializedName: "Contact",
  type: {
    name: "Composite",
    className: "Contact",
    modelProperties: {
      addressMailing: {
        serializedName: "addressMailing",
        type: {
          name: "Composite",
          className: "Address"
        }
      },
      email: {
        required: true,
        serializedName: "email",
        type: {
          name: "String"
        }
      },
      fax: {
        serializedName: "fax",
        type: {
          name: "String"
        }
      },
      jobTitle: {
        serializedName: "jobTitle",
        type: {
          name: "String"
        }
      },
      nameFirst: {
        required: true,
        serializedName: "nameFirst",
        type: {
          name: "String"
        }
      },
      nameLast: {
        required: true,
        serializedName: "nameLast",
        type: {
          name: "String"
        }
      },
      nameMiddle: {
        serializedName: "nameMiddle",
        type: {
          name: "String"
        }
      },
      organization: {
        serializedName: "organization",
        type: {
          name: "String"
        }
      },
      phone: {
        required: true,
        serializedName: "phone",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const HostName: msRest.CompositeMapper = {
  serializedName: "HostName",
  type: {
    name: "Composite",
    className: "HostName",
    modelProperties: {
      name: {
        serializedName: "name",
        type: {
          name: "String"
        }
      },
      siteNames: {
        serializedName: "siteNames",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "String"
            }
          }
        }
      },
      azureResourceName: {
        serializedName: "azureResourceName",
        type: {
          name: "String"
        }
      },
      azureResourceType: {
        serializedName: "azureResourceType",
        type: {
          name: "Enum",
          allowedValues: [
            "Website",
            "TrafficManager"
          ]
        }
      },
      customHostNameDnsRecordType: {
        serializedName: "customHostNameDnsRecordType",
        type: {
          name: "Enum",
          allowedValues: [
            "CName",
            "A"
          ]
        }
      },
      hostNameType: {
        serializedName: "hostNameType",
        type: {
          name: "Enum",
          allowedValues: [
            "Verified",
            "Managed"
          ]
        }
      }
    }
  }
};

export const DomainPurchaseConsent: msRest.CompositeMapper = {
  serializedName: "DomainPurchaseConsent",
  type: {
    name: "Composite",
    className: "DomainPurchaseConsent",
    modelProperties: {
      agreementKeys: {
        serializedName: "agreementKeys",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "String"
            }
          }
        }
      },
      agreedBy: {
        serializedName: "agreedBy",
        type: {
          name: "String"
        }
      },
      agreedAt: {
        serializedName: "agreedAt",
        type: {
          name: "DateTime"
        }
      }
    }
  }
};

export const Domain: msRest.CompositeMapper = {
  serializedName: "Domain",
  type: {
    name: "Composite",
    className: "Domain",
    modelProperties: {
      ...Resource.type.modelProperties,
      contactAdmin: {
        required: true,
        serializedName: "properties.contactAdmin",
        type: {
          name: "Composite",
          className: "Contact"
        }
      },
      contactBilling: {
        required: true,
        serializedName: "properties.contactBilling",
        type: {
          name: "Composite",
          className: "Contact"
        }
      },
      contactRegistrant: {
        required: true,
        serializedName: "properties.contactRegistrant",
        type: {
          name: "Composite",
          className: "Contact"
        }
      },
      contactTech: {
        required: true,
        serializedName: "properties.contactTech",
        type: {
          name: "Composite",
          className: "Contact"
        }
      },
      registrationStatus: {
        readOnly: true,
        serializedName: "properties.registrationStatus",
        type: {
          name: "Enum",
          allowedValues: [
            "Active",
            "Awaiting",
            "Cancelled",
            "Confiscated",
            "Disabled",
            "Excluded",
            "Expired",
            "Failed",
            "Held",
            "Locked",
            "Parked",
            "Pending",
            "Reserved",
            "Reverted",
            "Suspended",
            "Transferred",
            "Unknown",
            "Unlocked",
            "Unparked",
            "Updated",
            "JsonConverterFailed"
          ]
        }
      },
      provisioningState: {
        readOnly: true,
        serializedName: "properties.provisioningState",
        type: {
          name: "Enum",
          allowedValues: [
            "Succeeded",
            "Failed",
            "Canceled",
            "InProgress",
            "Deleting"
          ]
        }
      },
      nameServers: {
        readOnly: true,
        serializedName: "properties.nameServers",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "String"
            }
          }
        }
      },
      privacy: {
        serializedName: "properties.privacy",
        type: {
          name: "Boolean"
        }
      },
      createdTime: {
        readOnly: true,
        serializedName: "properties.createdTime",
        type: {
          name: "DateTime"
        }
      },
      expirationTime: {
        readOnly: true,
        serializedName: "properties.expirationTime",
        type: {
          name: "DateTime"
        }
      },
      lastRenewedTime: {
        readOnly: true,
        serializedName: "properties.lastRenewedTime",
        type: {
          name: "DateTime"
        }
      },
      autoRenew: {
        serializedName: "properties.autoRenew",
        defaultValue: true,
        type: {
          name: "Boolean"
        }
      },
      readyForDnsRecordManagement: {
        readOnly: true,
        serializedName: "properties.readyForDnsRecordManagement",
        type: {
          name: "Boolean"
        }
      },
      managedHostNames: {
        readOnly: true,
        serializedName: "properties.managedHostNames",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "HostName"
            }
          }
        }
      },
      consent: {
        required: true,
        serializedName: "properties.consent",
        type: {
          name: "Composite",
          className: "DomainPurchaseConsent"
        }
      },
      domainNotRenewableReasons: {
        readOnly: true,
        serializedName: "properties.domainNotRenewableReasons",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "String"
            }
          }
        }
      },
      dnsType: {
        serializedName: "properties.dnsType",
        type: {
          name: "Enum",
          allowedValues: [
            "AzureDns",
            "DefaultDomainRegistrarDns"
          ]
        }
      },
      dnsZoneId: {
        serializedName: "properties.dnsZoneId",
        type: {
          name: "String"
        }
      },
      targetDnsType: {
        serializedName: "properties.targetDnsType",
        type: {
          name: "Enum",
          allowedValues: [
            "AzureDns",
            "DefaultDomainRegistrarDns"
          ]
        }
      },
      authCode: {
        serializedName: "properties.authCode",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const DomainAvailabilityCheckResult: msRest.CompositeMapper = {
  serializedName: "DomainAvailabilityCheckResult",
  type: {
    name: "Composite",
    className: "DomainAvailabilityCheckResult",
    modelProperties: {
      name: {
        serializedName: "name",
        type: {
          name: "String"
        }
      },
      available: {
        serializedName: "available",
        type: {
          name: "Boolean"
        }
      },
      domainType: {
        serializedName: "domainType",
        type: {
          name: "Enum",
          allowedValues: [
            "Regular",
            "SoftDeleted"
          ]
        }
      }
    }
  }
};

export const DomainControlCenterSsoRequest: msRest.CompositeMapper = {
  serializedName: "DomainControlCenterSsoRequest",
  type: {
    name: "Composite",
    className: "DomainControlCenterSsoRequest",
    modelProperties: {
      url: {
        readOnly: true,
        serializedName: "url",
        type: {
          name: "String"
        }
      },
      postParameterKey: {
        readOnly: true,
        serializedName: "postParameterKey",
        type: {
          name: "String"
        }
      },
      postParameterValue: {
        readOnly: true,
        serializedName: "postParameterValue",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const DomainOwnershipIdentifier: msRest.CompositeMapper = {
  serializedName: "DomainOwnershipIdentifier",
  type: {
    name: "Composite",
    className: "DomainOwnershipIdentifier",
    modelProperties: {
      ...ProxyOnlyResource.type.modelProperties,
      ownershipId: {
        serializedName: "properties.ownershipId",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const DomainPatchResource: msRest.CompositeMapper = {
  serializedName: "DomainPatchResource",
  type: {
    name: "Composite",
    className: "DomainPatchResource",
    modelProperties: {
      ...ProxyOnlyResource.type.modelProperties,
      contactAdmin: {
        required: true,
        serializedName: "properties.contactAdmin",
        type: {
          name: "Composite",
          className: "Contact"
        }
      },
      contactBilling: {
        required: true,
        serializedName: "properties.contactBilling",
        type: {
          name: "Composite",
          className: "Contact"
        }
      },
      contactRegistrant: {
        required: true,
        serializedName: "properties.contactRegistrant",
        type: {
          name: "Composite",
          className: "Contact"
        }
      },
      contactTech: {
        required: true,
        serializedName: "properties.contactTech",
        type: {
          name: "Composite",
          className: "Contact"
        }
      },
      registrationStatus: {
        readOnly: true,
        serializedName: "properties.registrationStatus",
        type: {
          name: "Enum",
          allowedValues: [
            "Active",
            "Awaiting",
            "Cancelled",
            "Confiscated",
            "Disabled",
            "Excluded",
            "Expired",
            "Failed",
            "Held",
            "Locked",
            "Parked",
            "Pending",
            "Reserved",
            "Reverted",
            "Suspended",
            "Transferred",
            "Unknown",
            "Unlocked",
            "Unparked",
            "Updated",
            "JsonConverterFailed"
          ]
        }
      },
      provisioningState: {
        readOnly: true,
        serializedName: "properties.provisioningState",
        type: {
          name: "Enum",
          allowedValues: [
            "Succeeded",
            "Failed",
            "Canceled",
            "InProgress",
            "Deleting"
          ]
        }
      },
      nameServers: {
        readOnly: true,
        serializedName: "properties.nameServers",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "String"
            }
          }
        }
      },
      privacy: {
        serializedName: "properties.privacy",
        type: {
          name: "Boolean"
        }
      },
      createdTime: {
        readOnly: true,
        serializedName: "properties.createdTime",
        type: {
          name: "DateTime"
        }
      },
      expirationTime: {
        readOnly: true,
        serializedName: "properties.expirationTime",
        type: {
          name: "DateTime"
        }
      },
      lastRenewedTime: {
        readOnly: true,
        serializedName: "properties.lastRenewedTime",
        type: {
          name: "DateTime"
        }
      },
      autoRenew: {
        serializedName: "properties.autoRenew",
        defaultValue: true,
        type: {
          name: "Boolean"
        }
      },
      readyForDnsRecordManagement: {
        readOnly: true,
        serializedName: "properties.readyForDnsRecordManagement",
        type: {
          name: "Boolean"
        }
      },
      managedHostNames: {
        readOnly: true,
        serializedName: "properties.managedHostNames",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "HostName"
            }
          }
        }
      },
      consent: {
        required: true,
        serializedName: "properties.consent",
        type: {
          name: "Composite",
          className: "DomainPurchaseConsent"
        }
      },
      domainNotRenewableReasons: {
        readOnly: true,
        serializedName: "properties.domainNotRenewableReasons",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "String"
            }
          }
        }
      },
      dnsType: {
        serializedName: "properties.dnsType",
        type: {
          name: "Enum",
          allowedValues: [
            "AzureDns",
            "DefaultDomainRegistrarDns"
          ]
        }
      },
      dnsZoneId: {
        serializedName: "properties.dnsZoneId",
        type: {
          name: "String"
        }
      },
      targetDnsType: {
        serializedName: "properties.targetDnsType",
        type: {
          name: "Enum",
          allowedValues: [
            "AzureDns",
            "DefaultDomainRegistrarDns"
          ]
        }
      },
      authCode: {
        serializedName: "properties.authCode",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const DomainRecommendationSearchParameters: msRest.CompositeMapper = {
  serializedName: "DomainRecommendationSearchParameters",
  type: {
    name: "Composite",
    className: "DomainRecommendationSearchParameters",
    modelProperties: {
      keywords: {
        serializedName: "keywords",
        type: {
          name: "String"
        }
      },
      maxDomainRecommendations: {
        serializedName: "maxDomainRecommendations",
        type: {
          name: "Number"
        }
      }
    }
  }
};

export const TldLegalAgreement: msRest.CompositeMapper = {
  serializedName: "TldLegalAgreement",
  type: {
    name: "Composite",
    className: "TldLegalAgreement",
    modelProperties: {
      agreementKey: {
        required: true,
        serializedName: "agreementKey",
        type: {
          name: "String"
        }
      },
      title: {
        required: true,
        serializedName: "title",
        type: {
          name: "String"
        }
      },
      content: {
        required: true,
        serializedName: "content",
        type: {
          name: "String"
        }
      },
      url: {
        serializedName: "url",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const TopLevelDomain: msRest.CompositeMapper = {
  serializedName: "TopLevelDomain",
  type: {
    name: "Composite",
    className: "TopLevelDomain",
    modelProperties: {
      ...ProxyOnlyResource.type.modelProperties,
      privacy: {
        serializedName: "properties.privacy",
        type: {
          name: "Boolean"
        }
      }
    }
  }
};

export const TopLevelDomainAgreementOption: msRest.CompositeMapper = {
  serializedName: "TopLevelDomainAgreementOption",
  type: {
    name: "Composite",
    className: "TopLevelDomainAgreementOption",
    modelProperties: {
      includePrivacy: {
        serializedName: "includePrivacy",
        type: {
          name: "Boolean"
        }
      },
      forTransfer: {
        serializedName: "forTransfer",
        type: {
          name: "Boolean"
        }
      }
    }
  }
};

export const Certificate: msRest.CompositeMapper = {
  serializedName: "Certificate",
  type: {
    name: "Composite",
    className: "Certificate",
    modelProperties: {
      ...Resource.type.modelProperties,
      friendlyName: {
        readOnly: true,
        serializedName: "properties.friendlyName",
        type: {
          name: "String"
        }
      },
      subjectName: {
        readOnly: true,
        serializedName: "properties.subjectName",
        type: {
          name: "String"
        }
      },
      hostNames: {
        serializedName: "properties.hostNames",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "String"
            }
          }
        }
      },
      pfxBlob: {
        serializedName: "properties.pfxBlob",
        type: {
          name: "ByteArray"
        }
      },
      siteName: {
        readOnly: true,
        serializedName: "properties.siteName",
        type: {
          name: "String"
        }
      },
      selfLink: {
        readOnly: true,
        serializedName: "properties.selfLink",
        type: {
          name: "String"
        }
      },
      issuer: {
        readOnly: true,
        serializedName: "properties.issuer",
        type: {
          name: "String"
        }
      },
      issueDate: {
        readOnly: true,
        serializedName: "properties.issueDate",
        type: {
          name: "DateTime"
        }
      },
      expirationDate: {
        readOnly: true,
        serializedName: "properties.expirationDate",
        type: {
          name: "DateTime"
        }
      },
      password: {
        required: true,
        serializedName: "properties.password",
        type: {
          name: "String"
        }
      },
      thumbprint: {
        readOnly: true,
        serializedName: "properties.thumbprint",
        type: {
          name: "String"
        }
      },
      valid: {
        readOnly: true,
        serializedName: "properties.valid",
        type: {
          name: "Boolean"
        }
      },
      cerBlob: {
        readOnly: true,
        serializedName: "properties.cerBlob",
        type: {
          name: "ByteArray"
        }
      },
      publicKeyHash: {
        readOnly: true,
        serializedName: "properties.publicKeyHash",
        type: {
          name: "String"
        }
      },
      hostingEnvironmentProfile: {
        readOnly: true,
        serializedName: "properties.hostingEnvironmentProfile",
        type: {
          name: "Composite",
          className: "HostingEnvironmentProfile"
        }
      },
      keyVaultId: {
        serializedName: "properties.keyVaultId",
        type: {
          name: "String"
        }
      },
      keyVaultSecretName: {
        serializedName: "properties.keyVaultSecretName",
        type: {
          name: "String"
        }
      },
      keyVaultSecretStatus: {
        readOnly: true,
        serializedName: "properties.keyVaultSecretStatus",
        type: {
          name: "Enum",
          allowedValues: [
            "Initialized",
            "WaitingOnCertificateOrder",
            "Succeeded",
            "CertificateOrderFailed",
            "OperationNotPermittedOnKeyVault",
            "AzureServiceUnauthorizedToAccessKeyVault",
            "KeyVaultDoesNotExist",
            "KeyVaultSecretDoesNotExist",
            "UnknownError",
            "ExternalPrivateKey",
            "Unknown"
          ]
        }
      },
      serverFarmId: {
        serializedName: "properties.serverFarmId",
        type: {
          name: "String"
        }
      },
      canonicalName: {
        serializedName: "properties.canonicalName",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const CertificatePatchResource: msRest.CompositeMapper = {
  serializedName: "CertificatePatchResource",
  type: {
    name: "Composite",
    className: "CertificatePatchResource",
    modelProperties: {
      ...ProxyOnlyResource.type.modelProperties,
      friendlyName: {
        readOnly: true,
        serializedName: "properties.friendlyName",
        type: {
          name: "String"
        }
      },
      subjectName: {
        readOnly: true,
        serializedName: "properties.subjectName",
        type: {
          name: "String"
        }
      },
      hostNames: {
        serializedName: "properties.hostNames",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "String"
            }
          }
        }
      },
      pfxBlob: {
        serializedName: "properties.pfxBlob",
        type: {
          name: "ByteArray"
        }
      },
      siteName: {
        readOnly: true,
        serializedName: "properties.siteName",
        type: {
          name: "String"
        }
      },
      selfLink: {
        readOnly: true,
        serializedName: "properties.selfLink",
        type: {
          name: "String"
        }
      },
      issuer: {
        readOnly: true,
        serializedName: "properties.issuer",
        type: {
          name: "String"
        }
      },
      issueDate: {
        readOnly: true,
        serializedName: "properties.issueDate",
        type: {
          name: "DateTime"
        }
      },
      expirationDate: {
        readOnly: true,
        serializedName: "properties.expirationDate",
        type: {
          name: "DateTime"
        }
      },
      password: {
        required: true,
        serializedName: "properties.password",
        type: {
          name: "String"
        }
      },
      thumbprint: {
        readOnly: true,
        serializedName: "properties.thumbprint",
        type: {
          name: "String"
        }
      },
      valid: {
        readOnly: true,
        serializedName: "properties.valid",
        type: {
          name: "Boolean"
        }
      },
      cerBlob: {
        readOnly: true,
        serializedName: "properties.cerBlob",
        type: {
          name: "ByteArray"
        }
      },
      publicKeyHash: {
        readOnly: true,
        serializedName: "properties.publicKeyHash",
        type: {
          name: "String"
        }
      },
      hostingEnvironmentProfile: {
        readOnly: true,
        serializedName: "properties.hostingEnvironmentProfile",
        type: {
          name: "Composite",
          className: "HostingEnvironmentProfile"
        }
      },
      keyVaultId: {
        serializedName: "properties.keyVaultId",
        type: {
          name: "String"
        }
      },
      keyVaultSecretName: {
        serializedName: "properties.keyVaultSecretName",
        type: {
          name: "String"
        }
      },
      keyVaultSecretStatus: {
        readOnly: true,
        serializedName: "properties.keyVaultSecretStatus",
        type: {
          name: "Enum",
          allowedValues: [
            "Initialized",
            "WaitingOnCertificateOrder",
            "Succeeded",
            "CertificateOrderFailed",
            "OperationNotPermittedOnKeyVault",
            "AzureServiceUnauthorizedToAccessKeyVault",
            "KeyVaultDoesNotExist",
            "KeyVaultSecretDoesNotExist",
            "UnknownError",
            "ExternalPrivateKey",
            "Unknown"
          ]
        }
      },
      serverFarmId: {
        serializedName: "properties.serverFarmId",
        type: {
          name: "String"
        }
      },
      canonicalName: {
        serializedName: "properties.canonicalName",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const VirtualNetworkProfile: msRest.CompositeMapper = {
  serializedName: "VirtualNetworkProfile",
  type: {
    name: "Composite",
    className: "VirtualNetworkProfile",
    modelProperties: {
      id: {
        serializedName: "id",
        type: {
          name: "String"
        }
      },
      name: {
        readOnly: true,
        serializedName: "name",
        type: {
          name: "String"
        }
      },
      type: {
        readOnly: true,
        serializedName: "type",
        type: {
          name: "String"
        }
      },
      subnet: {
        serializedName: "subnet",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const WorkerPool: msRest.CompositeMapper = {
  serializedName: "WorkerPool",
  type: {
    name: "Composite",
    className: "WorkerPool",
    modelProperties: {
      workerSizeId: {
        serializedName: "workerSizeId",
        type: {
          name: "Number"
        }
      },
      computeMode: {
        serializedName: "computeMode",
        type: {
          name: "Enum",
          allowedValues: [
            "Shared",
            "Dedicated",
            "Dynamic"
          ]
        }
      },
      workerSize: {
        serializedName: "workerSize",
        type: {
          name: "String"
        }
      },
      workerCount: {
        serializedName: "workerCount",
        type: {
          name: "Number"
        }
      },
      instanceNames: {
        readOnly: true,
        serializedName: "instanceNames",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "String"
            }
          }
        }
      }
    }
  }
};

export const VirtualIPMapping: msRest.CompositeMapper = {
  serializedName: "VirtualIPMapping",
  type: {
    name: "Composite",
    className: "VirtualIPMapping",
    modelProperties: {
      virtualIP: {
        serializedName: "virtualIP",
        type: {
          name: "String"
        }
      },
      internalHttpPort: {
        serializedName: "internalHttpPort",
        type: {
          name: "Number"
        }
      },
      internalHttpsPort: {
        serializedName: "internalHttpsPort",
        type: {
          name: "Number"
        }
      },
      inUse: {
        serializedName: "inUse",
        type: {
          name: "Boolean"
        }
      },
      serviceName: {
        serializedName: "serviceName",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const StampCapacity: msRest.CompositeMapper = {
  serializedName: "StampCapacity",
  type: {
    name: "Composite",
    className: "StampCapacity",
    modelProperties: {
      name: {
        serializedName: "name",
        type: {
          name: "String"
        }
      },
      availableCapacity: {
        serializedName: "availableCapacity",
        type: {
          name: "Number"
        }
      },
      totalCapacity: {
        serializedName: "totalCapacity",
        type: {
          name: "Number"
        }
      },
      unit: {
        serializedName: "unit",
        type: {
          name: "String"
        }
      },
      computeMode: {
        serializedName: "computeMode",
        type: {
          name: "Enum",
          allowedValues: [
            "Shared",
            "Dedicated",
            "Dynamic"
          ]
        }
      },
      workerSize: {
        serializedName: "workerSize",
        type: {
          name: "Enum",
          allowedValues: [
            "Small",
            "Medium",
            "Large",
            "D1",
            "D2",
            "D3",
            "NestedSmall",
            "Default"
          ]
        }
      },
      workerSizeId: {
        serializedName: "workerSizeId",
        type: {
          name: "Number"
        }
      },
      excludeFromCapacityAllocation: {
        serializedName: "excludeFromCapacityAllocation",
        type: {
          name: "Boolean"
        }
      },
      isApplicableForAllComputeModes: {
        serializedName: "isApplicableForAllComputeModes",
        type: {
          name: "Boolean"
        }
      },
      siteMode: {
        serializedName: "siteMode",
        type: {
          name: "String"
        }
      },
      isLinux: {
        serializedName: "isLinux",
        type: {
          name: "Boolean"
        }
      }
    }
  }
};

export const NetworkAccessControlEntry: msRest.CompositeMapper = {
  serializedName: "NetworkAccessControlEntry",
  type: {
    name: "Composite",
    className: "NetworkAccessControlEntry",
    modelProperties: {
      action: {
        serializedName: "action",
        type: {
          name: "Enum",
          allowedValues: [
            "Permit",
            "Deny"
          ]
        }
      },
      description: {
        serializedName: "description",
        type: {
          name: "String"
        }
      },
      order: {
        serializedName: "order",
        type: {
          name: "Number"
        }
      },
      remoteSubnet: {
        serializedName: "remoteSubnet",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const AppServiceEnvironment: msRest.CompositeMapper = {
  serializedName: "AppServiceEnvironment",
  type: {
    name: "Composite",
    className: "AppServiceEnvironment",
    modelProperties: {
      name: {
        required: true,
        serializedName: "name",
        type: {
          name: "String"
        }
      },
      location: {
        required: true,
        serializedName: "location",
        type: {
          name: "String"
        }
      },
      provisioningState: {
        readOnly: true,
        serializedName: "provisioningState",
        type: {
          name: "Enum",
          allowedValues: [
            "Succeeded",
            "Failed",
            "Canceled",
            "InProgress",
            "Deleting"
          ]
        }
      },
      status: {
        readOnly: true,
        serializedName: "status",
        type: {
          name: "Enum",
          allowedValues: [
            "Preparing",
            "Ready",
            "Scaling",
            "Deleting"
          ]
        }
      },
      vnetName: {
        serializedName: "vnetName",
        type: {
          name: "String"
        }
      },
      vnetResourceGroupName: {
        serializedName: "vnetResourceGroupName",
        type: {
          name: "String"
        }
      },
      vnetSubnetName: {
        serializedName: "vnetSubnetName",
        type: {
          name: "String"
        }
      },
      virtualNetwork: {
        required: true,
        serializedName: "virtualNetwork",
        type: {
          name: "Composite",
          className: "VirtualNetworkProfile"
        }
      },
      internalLoadBalancingMode: {
        serializedName: "internalLoadBalancingMode",
        type: {
          name: "Enum",
          allowedValues: [
            "None",
            "Web",
            "Publishing"
          ]
        }
      },
      multiSize: {
        serializedName: "multiSize",
        type: {
          name: "String"
        }
      },
      multiRoleCount: {
        serializedName: "multiRoleCount",
        type: {
          name: "Number"
        }
      },
      workerPools: {
        required: true,
        serializedName: "workerPools",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "WorkerPool"
            }
          }
        }
      },
      ipsslAddressCount: {
        serializedName: "ipsslAddressCount",
        type: {
          name: "Number"
        }
      },
      databaseEdition: {
        readOnly: true,
        serializedName: "databaseEdition",
        type: {
          name: "String"
        }
      },
      databaseServiceObjective: {
        readOnly: true,
        serializedName: "databaseServiceObjective",
        type: {
          name: "String"
        }
      },
      upgradeDomains: {
        readOnly: true,
        serializedName: "upgradeDomains",
        type: {
          name: "Number"
        }
      },
      subscriptionId: {
        readOnly: true,
        serializedName: "subscriptionId",
        type: {
          name: "String"
        }
      },
      dnsSuffix: {
        serializedName: "dnsSuffix",
        type: {
          name: "String"
        }
      },
      lastAction: {
        readOnly: true,
        serializedName: "lastAction",
        type: {
          name: "String"
        }
      },
      lastActionResult: {
        readOnly: true,
        serializedName: "lastActionResult",
        type: {
          name: "String"
        }
      },
      allowedMultiSizes: {
        readOnly: true,
        serializedName: "allowedMultiSizes",
        type: {
          name: "String"
        }
      },
      allowedWorkerSizes: {
        readOnly: true,
        serializedName: "allowedWorkerSizes",
        type: {
          name: "String"
        }
      },
      maximumNumberOfMachines: {
        readOnly: true,
        serializedName: "maximumNumberOfMachines",
        type: {
          name: "Number"
        }
      },
      vipMappings: {
        readOnly: true,
        serializedName: "vipMappings",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "VirtualIPMapping"
            }
          }
        }
      },
      environmentCapacities: {
        readOnly: true,
        serializedName: "environmentCapacities",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "StampCapacity"
            }
          }
        }
      },
      networkAccessControlList: {
        serializedName: "networkAccessControlList",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "NetworkAccessControlEntry"
            }
          }
        }
      },
      environmentIsHealthy: {
        readOnly: true,
        serializedName: "environmentIsHealthy",
        type: {
          name: "Boolean"
        }
      },
      environmentStatus: {
        readOnly: true,
        serializedName: "environmentStatus",
        type: {
          name: "String"
        }
      },
      resourceGroup: {
        readOnly: true,
        serializedName: "resourceGroup",
        type: {
          name: "String"
        }
      },
      frontEndScaleFactor: {
        serializedName: "frontEndScaleFactor",
        type: {
          name: "Number"
        }
      },
      defaultFrontEndScaleFactor: {
        readOnly: true,
        serializedName: "defaultFrontEndScaleFactor",
        type: {
          name: "Number"
        }
      },
      apiManagementAccountId: {
        serializedName: "apiManagementAccountId",
        type: {
          name: "String"
        }
      },
      suspended: {
        serializedName: "suspended",
        type: {
          name: "Boolean"
        }
      },
      dynamicCacheEnabled: {
        serializedName: "dynamicCacheEnabled",
        type: {
          name: "Boolean"
        }
      },
      clusterSettings: {
        serializedName: "clusterSettings",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "NameValuePair"
            }
          }
        }
      },
      userWhitelistedIpRanges: {
        serializedName: "userWhitelistedIpRanges",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "String"
            }
          }
        }
      },
      hasLinuxWorkers: {
        serializedName: "hasLinuxWorkers",
        type: {
          name: "Boolean"
        }
      },
      sslCertKeyVaultId: {
        serializedName: "sslCertKeyVaultId",
        type: {
          name: "String"
        }
      },
      sslCertKeyVaultSecretName: {
        serializedName: "sslCertKeyVaultSecretName",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const LocalizableString: msRest.CompositeMapper = {
  serializedName: "LocalizableString",
  type: {
    name: "Composite",
    className: "LocalizableString",
    modelProperties: {
      value: {
        serializedName: "value",
        type: {
          name: "String"
        }
      },
      localizedValue: {
        serializedName: "localizedValue",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const CsmUsageQuota: msRest.CompositeMapper = {
  serializedName: "CsmUsageQuota",
  type: {
    name: "Composite",
    className: "CsmUsageQuota",
    modelProperties: {
      unit: {
        serializedName: "unit",
        type: {
          name: "String"
        }
      },
      nextResetTime: {
        serializedName: "nextResetTime",
        type: {
          name: "DateTime"
        }
      },
      currentValue: {
        serializedName: "currentValue",
        type: {
          name: "Number"
        }
      },
      limit: {
        serializedName: "limit",
        type: {
          name: "Number"
        }
      },
      name: {
        serializedName: "name",
        type: {
          name: "Composite",
          className: "LocalizableString"
        }
      }
    }
  }
};

export const ErrorEntity: msRest.CompositeMapper = {
  serializedName: "ErrorEntity",
  type: {
    name: "Composite",
    className: "ErrorEntity",
    modelProperties: {
      extendedCode: {
        serializedName: "extendedCode",
        type: {
          name: "String"
        }
      },
      messageTemplate: {
        serializedName: "messageTemplate",
        type: {
          name: "String"
        }
      },
      parameters: {
        serializedName: "parameters",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "String"
            }
          }
        }
      },
      innerErrors: {
        serializedName: "innerErrors",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "ErrorEntity"
            }
          }
        }
      },
      code: {
        serializedName: "code",
        type: {
          name: "String"
        }
      },
      message: {
        serializedName: "message",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const Operation: msRest.CompositeMapper = {
  serializedName: "Operation",
  type: {
    name: "Composite",
    className: "Operation",
    modelProperties: {
      id: {
        serializedName: "id",
        type: {
          name: "String"
        }
      },
      name: {
        serializedName: "name",
        type: {
          name: "String"
        }
      },
      status: {
        serializedName: "status",
        type: {
          name: "Enum",
          allowedValues: [
            "InProgress",
            "Failed",
            "Succeeded",
            "TimedOut",
            "Created"
          ]
        }
      },
      errors: {
        serializedName: "errors",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "ErrorEntity"
            }
          }
        }
      },
      createdTime: {
        serializedName: "createdTime",
        type: {
          name: "DateTime"
        }
      },
      modifiedTime: {
        serializedName: "modifiedTime",
        type: {
          name: "DateTime"
        }
      },
      expirationTime: {
        serializedName: "expirationTime",
        type: {
          name: "DateTime"
        }
      },
      geoMasterOperationId: {
        serializedName: "geoMasterOperationId",
        type: {
          name: "Uuid"
        }
      }
    }
  }
};

export const Solution: msRest.CompositeMapper = {
  serializedName: "Solution",
  type: {
    name: "Composite",
    className: "Solution",
    modelProperties: {
      id: {
        serializedName: "id",
        type: {
          name: "Number"
        }
      },
      displayName: {
        serializedName: "displayName",
        type: {
          name: "String"
        }
      },
      order: {
        serializedName: "order",
        type: {
          name: "Number"
        }
      },
      description: {
        serializedName: "description",
        type: {
          name: "String"
        }
      },
      type: {
        serializedName: "type",
        type: {
          name: "Enum",
          allowedValues: [
            "QuickSolution",
            "DeepInvestigation",
            "BestPractices"
          ]
        }
      },
      data: {
        serializedName: "data",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Sequence",
              element: {
                type: {
                  name: "Composite",
                  className: "NameValuePair"
                }
              }
            }
          }
        }
      },
      metadata: {
        serializedName: "metadata",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Sequence",
              element: {
                type: {
                  name: "Composite",
                  className: "NameValuePair"
                }
              }
            }
          }
        }
      }
    }
  }
};

export const DetectorAbnormalTimePeriod: msRest.CompositeMapper = {
  serializedName: "DetectorAbnormalTimePeriod",
  type: {
    name: "Composite",
    className: "DetectorAbnormalTimePeriod",
    modelProperties: {
      startTime: {
        serializedName: "startTime",
        type: {
          name: "DateTime"
        }
      },
      endTime: {
        serializedName: "endTime",
        type: {
          name: "DateTime"
        }
      },
      message: {
        serializedName: "message",
        type: {
          name: "String"
        }
      },
      source: {
        serializedName: "source",
        type: {
          name: "String"
        }
      },
      priority: {
        serializedName: "priority",
        type: {
          name: "Number"
        }
      },
      metaData: {
        serializedName: "metaData",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Sequence",
              element: {
                type: {
                  name: "Composite",
                  className: "NameValuePair"
                }
              }
            }
          }
        }
      },
      type: {
        serializedName: "type",
        type: {
          name: "Enum",
          allowedValues: [
            "ServiceIncident",
            "AppDeployment",
            "AppCrash",
            "RuntimeIssueDetected",
            "AseDeployment",
            "UserIssue",
            "PlatformIssue",
            "Other"
          ]
        }
      },
      solutions: {
        serializedName: "solutions",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "Solution"
            }
          }
        }
      }
    }
  }
};

export const AbnormalTimePeriod: msRest.CompositeMapper = {
  serializedName: "AbnormalTimePeriod",
  type: {
    name: "Composite",
    className: "AbnormalTimePeriod",
    modelProperties: {
      startTime: {
        serializedName: "startTime",
        type: {
          name: "DateTime"
        }
      },
      endTime: {
        serializedName: "endTime",
        type: {
          name: "DateTime"
        }
      },
      events: {
        serializedName: "events",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "DetectorAbnormalTimePeriod"
            }
          }
        }
      },
      solutions: {
        serializedName: "solutions",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "Solution"
            }
          }
        }
      }
    }
  }
};

export const DetectorDefinition: msRest.CompositeMapper = {
  serializedName: "DetectorDefinition",
  type: {
    name: "Composite",
    className: "DetectorDefinition",
    modelProperties: {
      ...ProxyOnlyResource.type.modelProperties,
      displayName: {
        readOnly: true,
        serializedName: "properties.displayName",
        type: {
          name: "String"
        }
      },
      description: {
        readOnly: true,
        serializedName: "properties.description",
        type: {
          name: "String"
        }
      },
      rank: {
        readOnly: true,
        serializedName: "properties.rank",
        type: {
          name: "Number"
        }
      },
      isEnabled: {
        readOnly: true,
        serializedName: "properties.isEnabled",
        type: {
          name: "Boolean"
        }
      }
    }
  }
};

export const DiagnosticMetricSample: msRest.CompositeMapper = {
  serializedName: "DiagnosticMetricSample",
  type: {
    name: "Composite",
    className: "DiagnosticMetricSample",
    modelProperties: {
      timestamp: {
        serializedName: "timestamp",
        type: {
          name: "DateTime"
        }
      },
      roleInstance: {
        serializedName: "roleInstance",
        type: {
          name: "String"
        }
      },
      total: {
        serializedName: "total",
        type: {
          name: "Number"
        }
      },
      maximum: {
        serializedName: "maximum",
        type: {
          name: "Number"
        }
      },
      minimum: {
        serializedName: "minimum",
        type: {
          name: "Number"
        }
      },
      isAggregated: {
        serializedName: "isAggregated",
        type: {
          name: "Boolean"
        }
      }
    }
  }
};

export const DiagnosticMetricSet: msRest.CompositeMapper = {
  serializedName: "DiagnosticMetricSet",
  type: {
    name: "Composite",
    className: "DiagnosticMetricSet",
    modelProperties: {
      name: {
        serializedName: "name",
        type: {
          name: "String"
        }
      },
      unit: {
        serializedName: "unit",
        type: {
          name: "String"
        }
      },
      startTime: {
        serializedName: "startTime",
        type: {
          name: "DateTime"
        }
      },
      endTime: {
        serializedName: "endTime",
        type: {
          name: "DateTime"
        }
      },
      timeGrain: {
        serializedName: "timeGrain",
        type: {
          name: "String"
        }
      },
      values: {
        serializedName: "values",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "DiagnosticMetricSample"
            }
          }
        }
      }
    }
  }
};

export const DataSource: msRest.CompositeMapper = {
  serializedName: "DataSource",
  type: {
    name: "Composite",
    className: "DataSource",
    modelProperties: {
      instructions: {
        serializedName: "instructions",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "String"
            }
          }
        }
      },
      dataSourceUri: {
        serializedName: "dataSourceUri",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "NameValuePair"
            }
          }
        }
      }
    }
  }
};

export const ResponseMetaData: msRest.CompositeMapper = {
  serializedName: "ResponseMetaData",
  type: {
    name: "Composite",
    className: "ResponseMetaData",
    modelProperties: {
      dataSource: {
        serializedName: "dataSource",
        type: {
          name: "Composite",
          className: "DataSource"
        }
      }
    }
  }
};

export const AnalysisData: msRest.CompositeMapper = {
  serializedName: "AnalysisData",
  type: {
    name: "Composite",
    className: "AnalysisData",
    modelProperties: {
      source: {
        serializedName: "source",
        type: {
          name: "String"
        }
      },
      detectorDefinition: {
        serializedName: "detectorDefinition",
        type: {
          name: "Composite",
          className: "DetectorDefinition"
        }
      },
      metrics: {
        serializedName: "metrics",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "DiagnosticMetricSet"
            }
          }
        }
      },
      data: {
        serializedName: "data",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Sequence",
              element: {
                type: {
                  name: "Composite",
                  className: "NameValuePair"
                }
              }
            }
          }
        }
      },
      detectorMetaData: {
        serializedName: "detectorMetaData",
        type: {
          name: "Composite",
          className: "ResponseMetaData"
        }
      }
    }
  }
};

export const AnalysisDefinition: msRest.CompositeMapper = {
  serializedName: "AnalysisDefinition",
  type: {
    name: "Composite",
    className: "AnalysisDefinition",
    modelProperties: {
      ...ProxyOnlyResource.type.modelProperties,
      description: {
        readOnly: true,
        serializedName: "properties.description",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const DataTableResponseColumn: msRest.CompositeMapper = {
  serializedName: "DataTableResponseColumn",
  type: {
    name: "Composite",
    className: "DataTableResponseColumn",
    modelProperties: {
      columnName: {
        serializedName: "columnName",
        type: {
          name: "String"
        }
      },
      dataType: {
        serializedName: "dataType",
        type: {
          name: "String"
        }
      },
      columnType: {
        serializedName: "columnType",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const DataTableResponseObject: msRest.CompositeMapper = {
  serializedName: "DataTableResponseObject",
  type: {
    name: "Composite",
    className: "DataTableResponseObject",
    modelProperties: {
      tableName: {
        serializedName: "tableName",
        type: {
          name: "String"
        }
      },
      columns: {
        serializedName: "columns",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "DataTableResponseColumn"
            }
          }
        }
      },
      rows: {
        serializedName: "rows",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Sequence",
              element: {
                type: {
                  name: "String"
                }
              }
            }
          }
        }
      }
    }
  }
};

export const DetectorInfo: msRest.CompositeMapper = {
  serializedName: "DetectorInfo",
  type: {
    name: "Composite",
    className: "DetectorInfo",
    modelProperties: {
      description: {
        readOnly: true,
        serializedName: "description",
        type: {
          name: "String"
        }
      },
      category: {
        readOnly: true,
        serializedName: "category",
        type: {
          name: "String"
        }
      },
      subCategory: {
        readOnly: true,
        serializedName: "subCategory",
        type: {
          name: "String"
        }
      },
      supportTopicId: {
        readOnly: true,
        serializedName: "supportTopicId",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const Rendering: msRest.CompositeMapper = {
  serializedName: "Rendering",
  type: {
    name: "Composite",
    className: "Rendering",
    modelProperties: {
      type: {
        serializedName: "type",
        type: {
          name: "Enum",
          allowedValues: [
            "NoGraph",
            "Table",
            "TimeSeries",
            "TimeSeriesPerInstance"
          ]
        }
      },
      title: {
        serializedName: "title",
        type: {
          name: "String"
        }
      },
      description: {
        serializedName: "description",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const DiagnosticData: msRest.CompositeMapper = {
  serializedName: "DiagnosticData",
  type: {
    name: "Composite",
    className: "DiagnosticData",
    modelProperties: {
      table: {
        serializedName: "table",
        type: {
          name: "Composite",
          className: "DataTableResponseObject"
        }
      },
      renderingProperties: {
        serializedName: "renderingProperties",
        type: {
          name: "Composite",
          className: "Rendering"
        }
      }
    }
  }
};

export const DetectorResponse: msRest.CompositeMapper = {
  serializedName: "DetectorResponse",
  type: {
    name: "Composite",
    className: "DetectorResponse",
    modelProperties: {
      ...ProxyOnlyResource.type.modelProperties,
      metadata: {
        serializedName: "properties.metadata",
        type: {
          name: "Composite",
          className: "DetectorInfo"
        }
      },
      dataset: {
        serializedName: "properties.dataset",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "DiagnosticData"
            }
          }
        }
      }
    }
  }
};

export const DiagnosticAnalysis: msRest.CompositeMapper = {
  serializedName: "DiagnosticAnalysis",
  type: {
    name: "Composite",
    className: "DiagnosticAnalysis",
    modelProperties: {
      ...ProxyOnlyResource.type.modelProperties,
      startTime: {
        serializedName: "properties.startTime",
        type: {
          name: "DateTime"
        }
      },
      endTime: {
        serializedName: "properties.endTime",
        type: {
          name: "DateTime"
        }
      },
      abnormalTimePeriods: {
        serializedName: "properties.abnormalTimePeriods",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "AbnormalTimePeriod"
            }
          }
        }
      },
      payload: {
        serializedName: "properties.payload",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "AnalysisData"
            }
          }
        }
      },
      nonCorrelatedDetectors: {
        serializedName: "properties.nonCorrelatedDetectors",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "DetectorDefinition"
            }
          }
        }
      }
    }
  }
};

export const DiagnosticCategory: msRest.CompositeMapper = {
  serializedName: "DiagnosticCategory",
  type: {
    name: "Composite",
    className: "DiagnosticCategory",
    modelProperties: {
      ...ProxyOnlyResource.type.modelProperties,
      description: {
        readOnly: true,
        serializedName: "properties.description",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const DiagnosticDetectorResponse: msRest.CompositeMapper = {
  serializedName: "DiagnosticDetectorResponse",
  type: {
    name: "Composite",
    className: "DiagnosticDetectorResponse",
    modelProperties: {
      ...ProxyOnlyResource.type.modelProperties,
      startTime: {
        serializedName: "properties.startTime",
        type: {
          name: "DateTime"
        }
      },
      endTime: {
        serializedName: "properties.endTime",
        type: {
          name: "DateTime"
        }
      },
      issueDetected: {
        serializedName: "properties.issueDetected",
        type: {
          name: "Boolean"
        }
      },
      detectorDefinition: {
        serializedName: "properties.detectorDefinition",
        type: {
          name: "Composite",
          className: "DetectorDefinition"
        }
      },
      metrics: {
        serializedName: "properties.metrics",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "DiagnosticMetricSet"
            }
          }
        }
      },
      abnormalTimePeriods: {
        serializedName: "properties.abnormalTimePeriods",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "DetectorAbnormalTimePeriod"
            }
          }
        }
      },
      data: {
        serializedName: "properties.data",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Sequence",
              element: {
                type: {
                  name: "Composite",
                  className: "NameValuePair"
                }
              }
            }
          }
        }
      },
      responseMetaData: {
        serializedName: "properties.responseMetaData",
        type: {
          name: "Composite",
          className: "ResponseMetaData"
        }
      }
    }
  }
};

export const StackMinorVersion: msRest.CompositeMapper = {
  serializedName: "StackMinorVersion",
  type: {
    name: "Composite",
    className: "StackMinorVersion",
    modelProperties: {
      displayVersion: {
        serializedName: "displayVersion",
        type: {
          name: "String"
        }
      },
      runtimeVersion: {
        serializedName: "runtimeVersion",
        type: {
          name: "String"
        }
      },
      isDefault: {
        serializedName: "isDefault",
        type: {
          name: "Boolean"
        }
      },
      isRemoteDebuggingEnabled: {
        serializedName: "isRemoteDebuggingEnabled",
        type: {
          name: "Boolean"
        }
      }
    }
  }
};

export const StackMajorVersion: msRest.CompositeMapper = {
  serializedName: "StackMajorVersion",
  type: {
    name: "Composite",
    className: "StackMajorVersion",
    modelProperties: {
      displayVersion: {
        serializedName: "displayVersion",
        type: {
          name: "String"
        }
      },
      runtimeVersion: {
        serializedName: "runtimeVersion",
        type: {
          name: "String"
        }
      },
      isDefault: {
        serializedName: "isDefault",
        type: {
          name: "Boolean"
        }
      },
      minorVersions: {
        serializedName: "minorVersions",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "StackMinorVersion"
            }
          }
        }
      },
      applicationInsights: {
        serializedName: "applicationInsights",
        type: {
          name: "Boolean"
        }
      },
      isPreview: {
        serializedName: "isPreview",
        type: {
          name: "Boolean"
        }
      },
      isDeprecated: {
        serializedName: "isDeprecated",
        type: {
          name: "Boolean"
        }
      },
      isHidden: {
        serializedName: "isHidden",
        type: {
          name: "Boolean"
        }
      }
    }
  }
};

export const ApplicationStack: msRest.CompositeMapper = {
  serializedName: "ApplicationStack",
  type: {
    name: "Composite",
    className: "ApplicationStack",
    modelProperties: {
      name: {
        serializedName: "name",
        type: {
          name: "String"
        }
      },
      display: {
        serializedName: "display",
        type: {
          name: "String"
        }
      },
      dependency: {
        serializedName: "dependency",
        type: {
          name: "String"
        }
      },
      majorVersions: {
        serializedName: "majorVersions",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "StackMajorVersion"
            }
          }
        }
      },
      frameworks: {
        serializedName: "frameworks",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "ApplicationStack"
            }
          }
        }
      }
    }
  }
};

export const ApplicationStackResource: msRest.CompositeMapper = {
  serializedName: "ApplicationStackResource",
  type: {
    name: "Composite",
    className: "ApplicationStackResource",
    modelProperties: {
      ...ProxyOnlyResource.type.modelProperties,
      applicationStackResourceName: {
        serializedName: "properties.name",
        type: {
          name: "String"
        }
      },
      display: {
        serializedName: "properties.display",
        type: {
          name: "String"
        }
      },
      dependency: {
        serializedName: "properties.dependency",
        type: {
          name: "String"
        }
      },
      majorVersions: {
        serializedName: "properties.majorVersions",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "StackMajorVersion"
            }
          }
        }
      },
      frameworks: {
        serializedName: "properties.frameworks",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "ApplicationStack"
            }
          }
        }
      }
    }
  }
};

export const Recommendation: msRest.CompositeMapper = {
  serializedName: "Recommendation",
  type: {
    name: "Composite",
    className: "Recommendation",
    modelProperties: {
      ...ProxyOnlyResource.type.modelProperties,
      creationTime: {
        serializedName: "properties.creationTime",
        type: {
          name: "DateTime"
        }
      },
      recommendationId: {
        serializedName: "properties.recommendationId",
        type: {
          name: "Uuid"
        }
      },
      resourceId: {
        serializedName: "properties.resourceId",
        type: {
          name: "String"
        }
      },
      resourceScope: {
        serializedName: "properties.resourceScope",
        type: {
          name: "String"
        }
      },
      ruleName: {
        serializedName: "properties.ruleName",
        type: {
          name: "String"
        }
      },
      displayName: {
        serializedName: "properties.displayName",
        type: {
          name: "String"
        }
      },
      message: {
        serializedName: "properties.message",
        type: {
          name: "String"
        }
      },
      level: {
        serializedName: "properties.level",
        type: {
          name: "Enum",
          allowedValues: [
            "Critical",
            "Warning",
            "Information",
            "NonUrgentSuggestion"
          ]
        }
      },
      channels: {
        serializedName: "properties.channels",
        type: {
          name: "Enum",
          allowedValues: [
            "Notification",
            "Api",
            "Email",
            "Webhook",
            "All"
          ]
        }
      },
      categoryTags: {
        readOnly: true,
        serializedName: "properties.categoryTags",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "String"
            }
          }
        }
      },
      actionName: {
        serializedName: "properties.actionName",
        type: {
          name: "String"
        }
      },
      enabled: {
        serializedName: "properties.enabled",
        type: {
          name: "Number"
        }
      },
      states: {
        serializedName: "properties.states",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "String"
            }
          }
        }
      },
      startTime: {
        serializedName: "properties.startTime",
        type: {
          name: "DateTime"
        }
      },
      endTime: {
        serializedName: "properties.endTime",
        type: {
          name: "DateTime"
        }
      },
      nextNotificationTime: {
        serializedName: "properties.nextNotificationTime",
        type: {
          name: "DateTime"
        }
      },
      notificationExpirationTime: {
        serializedName: "properties.notificationExpirationTime",
        type: {
          name: "DateTime"
        }
      },
      notifiedTime: {
        serializedName: "properties.notifiedTime",
        type: {
          name: "DateTime"
        }
      },
      score: {
        serializedName: "properties.score",
        type: {
          name: "Number"
        }
      },
      isDynamic: {
        serializedName: "properties.isDynamic",
        type: {
          name: "Boolean"
        }
      },
      extensionName: {
        serializedName: "properties.extensionName",
        type: {
          name: "String"
        }
      },
      bladeName: {
        serializedName: "properties.bladeName",
        type: {
          name: "String"
        }
      },
      forwardLink: {
        serializedName: "properties.forwardLink",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const RecommendationRule: msRest.CompositeMapper = {
  serializedName: "RecommendationRule",
  type: {
    name: "Composite",
    className: "RecommendationRule",
    modelProperties: {
      ...ProxyOnlyResource.type.modelProperties,
      recommendationName: {
        serializedName: "properties.recommendationName",
        type: {
          name: "String"
        }
      },
      displayName: {
        serializedName: "properties.displayName",
        type: {
          name: "String"
        }
      },
      message: {
        serializedName: "properties.message",
        type: {
          name: "String"
        }
      },
      recommendationId: {
        serializedName: "properties.recommendationId",
        type: {
          name: "Uuid"
        }
      },
      description: {
        serializedName: "properties.description",
        type: {
          name: "String"
        }
      },
      actionName: {
        serializedName: "properties.actionName",
        type: {
          name: "String"
        }
      },
      level: {
        serializedName: "properties.level",
        type: {
          name: "Enum",
          allowedValues: [
            "Critical",
            "Warning",
            "Information",
            "NonUrgentSuggestion"
          ]
        }
      },
      channels: {
        serializedName: "properties.channels",
        type: {
          name: "Enum",
          allowedValues: [
            "Notification",
            "Api",
            "Email",
            "Webhook",
            "All"
          ]
        }
      },
      categoryTags: {
        readOnly: true,
        serializedName: "properties.categoryTags",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "String"
            }
          }
        }
      },
      isDynamic: {
        serializedName: "properties.isDynamic",
        type: {
          name: "Boolean"
        }
      },
      extensionName: {
        serializedName: "properties.extensionName",
        type: {
          name: "String"
        }
      },
      bladeName: {
        serializedName: "properties.bladeName",
        type: {
          name: "String"
        }
      },
      forwardLink: {
        serializedName: "properties.forwardLink",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const BillingMeter: msRest.CompositeMapper = {
  serializedName: "BillingMeter",
  type: {
    name: "Composite",
    className: "BillingMeter",
    modelProperties: {
      ...ProxyOnlyResource.type.modelProperties,
      meterId: {
        serializedName: "properties.meterId",
        type: {
          name: "String"
        }
      },
      billingLocation: {
        serializedName: "properties.billingLocation",
        type: {
          name: "String"
        }
      },
      shortName: {
        serializedName: "properties.shortName",
        type: {
          name: "String"
        }
      },
      friendlyName: {
        serializedName: "properties.friendlyName",
        type: {
          name: "String"
        }
      },
      resourceType: {
        serializedName: "properties.resourceType",
        type: {
          name: "String"
        }
      },
      osType: {
        serializedName: "properties.osType",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const CsmMoveResourceEnvelope: msRest.CompositeMapper = {
  serializedName: "CsmMoveResourceEnvelope",
  type: {
    name: "Composite",
    className: "CsmMoveResourceEnvelope",
    modelProperties: {
      targetResourceGroup: {
        serializedName: "targetResourceGroup",
        constraints: {
          MaxLength: 90,
          MinLength: 1,
          Pattern: / ^[-\w\._\(\)]+[^\.]$/
        },
        type: {
          name: "String"
        }
      },
      resources: {
        serializedName: "resources",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "String"
            }
          }
        }
      }
    }
  }
};

export const GeoRegion: msRest.CompositeMapper = {
  serializedName: "GeoRegion",
  type: {
    name: "Composite",
    className: "GeoRegion",
    modelProperties: {
      ...ProxyOnlyResource.type.modelProperties,
      description: {
        readOnly: true,
        serializedName: "properties.description",
        type: {
          name: "String"
        }
      },
      displayName: {
        readOnly: true,
        serializedName: "properties.displayName",
        type: {
          name: "String"
        }
      },
      orgDomain: {
        readOnly: true,
        serializedName: "properties.orgDomain",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const HostingEnvironmentDeploymentInfo: msRest.CompositeMapper = {
  serializedName: "HostingEnvironmentDeploymentInfo",
  type: {
    name: "Composite",
    className: "HostingEnvironmentDeploymentInfo",
    modelProperties: {
      name: {
        serializedName: "name",
        type: {
          name: "String"
        }
      },
      location: {
        serializedName: "location",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const DeploymentLocations: msRest.CompositeMapper = {
  serializedName: "DeploymentLocations",
  type: {
    name: "Composite",
    className: "DeploymentLocations",
    modelProperties: {
      locations: {
        serializedName: "locations",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "GeoRegion"
            }
          }
        }
      },
      hostingEnvironments: {
        serializedName: "hostingEnvironments",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "AppServiceEnvironment"
            }
          }
        }
      },
      hostingEnvironmentDeploymentInfos: {
        serializedName: "hostingEnvironmentDeploymentInfos",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "HostingEnvironmentDeploymentInfo"
            }
          }
        }
      }
    }
  }
};

export const GlobalCsmSkuDescription: msRest.CompositeMapper = {
  serializedName: "GlobalCsmSkuDescription",
  type: {
    name: "Composite",
    className: "GlobalCsmSkuDescription",
    modelProperties: {
      name: {
        serializedName: "name",
        type: {
          name: "String"
        }
      },
      tier: {
        serializedName: "tier",
        type: {
          name: "String"
        }
      },
      size: {
        serializedName: "size",
        type: {
          name: "String"
        }
      },
      family: {
        serializedName: "family",
        type: {
          name: "String"
        }
      },
      capacity: {
        serializedName: "capacity",
        type: {
          name: "Composite",
          className: "SkuCapacity"
        }
      },
      locations: {
        serializedName: "locations",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "String"
            }
          }
        }
      },
      capabilities: {
        serializedName: "capabilities",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "Capability"
            }
          }
        }
      }
    }
  }
};

export const PremierAddOnOffer: msRest.CompositeMapper = {
  serializedName: "PremierAddOnOffer",
  type: {
    name: "Composite",
    className: "PremierAddOnOffer",
    modelProperties: {
      ...ProxyOnlyResource.type.modelProperties,
      sku: {
        serializedName: "properties.sku",
        type: {
          name: "String"
        }
      },
      product: {
        serializedName: "properties.product",
        type: {
          name: "String"
        }
      },
      vendor: {
        serializedName: "properties.vendor",
        type: {
          name: "String"
        }
      },
      promoCodeRequired: {
        serializedName: "properties.promoCodeRequired",
        type: {
          name: "Boolean"
        }
      },
      quota: {
        serializedName: "properties.quota",
        type: {
          name: "Number"
        }
      },
      webHostingPlanRestrictions: {
        serializedName: "properties.webHostingPlanRestrictions",
        type: {
          name: "Enum",
          allowedValues: [
            "None",
            "Free",
            "Shared",
            "Basic",
            "Standard",
            "Premium"
          ]
        }
      },
      privacyPolicyUrl: {
        serializedName: "properties.privacyPolicyUrl",
        type: {
          name: "String"
        }
      },
      legalTermsUrl: {
        serializedName: "properties.legalTermsUrl",
        type: {
          name: "String"
        }
      },
      marketplacePublisher: {
        serializedName: "properties.marketplacePublisher",
        type: {
          name: "String"
        }
      },
      marketplaceOffer: {
        serializedName: "properties.marketplaceOffer",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const ResourceNameAvailability: msRest.CompositeMapper = {
  serializedName: "ResourceNameAvailability",
  type: {
    name: "Composite",
    className: "ResourceNameAvailability",
    modelProperties: {
      nameAvailable: {
        serializedName: "nameAvailable",
        type: {
          name: "Boolean"
        }
      },
      reason: {
        serializedName: "reason",
        type: {
          name: "String"
        }
      },
      message: {
        serializedName: "message",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const ResourceNameAvailabilityRequest: msRest.CompositeMapper = {
  serializedName: "ResourceNameAvailabilityRequest",
  type: {
    name: "Composite",
    className: "ResourceNameAvailabilityRequest",
    modelProperties: {
      name: {
        required: true,
        serializedName: "name",
        type: {
          name: "String"
        }
      },
      type: {
        required: true,
        serializedName: "type",
        type: {
          name: "String"
        }
      },
      isFqdn: {
        serializedName: "isFqdn",
        type: {
          name: "Boolean"
        }
      }
    }
  }
};

export const SkuInfos: msRest.CompositeMapper = {
  serializedName: "SkuInfos",
  type: {
    name: "Composite",
    className: "SkuInfos",
    modelProperties: {
      resourceType: {
        serializedName: "resourceType",
        type: {
          name: "String"
        }
      },
      skus: {
        serializedName: "skus",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "GlobalCsmSkuDescription"
            }
          }
        }
      }
    }
  }
};

export const SourceControl: msRest.CompositeMapper = {
  serializedName: "SourceControl",
  type: {
    name: "Composite",
    className: "SourceControl",
    modelProperties: {
      ...ProxyOnlyResource.type.modelProperties,
      token: {
        serializedName: "properties.token",
        type: {
          name: "String"
        }
      },
      tokenSecret: {
        serializedName: "properties.tokenSecret",
        type: {
          name: "String"
        }
      },
      refreshToken: {
        serializedName: "properties.refreshToken",
        type: {
          name: "String"
        }
      },
      expirationTime: {
        serializedName: "properties.expirationTime",
        type: {
          name: "DateTime"
        }
      }
    }
  }
};

export const ValidateRequest: msRest.CompositeMapper = {
  serializedName: "ValidateRequest",
  type: {
    name: "Composite",
    className: "ValidateRequest",
    modelProperties: {
      name: {
        required: true,
        serializedName: "name",
        type: {
          name: "String"
        }
      },
      type: {
        required: true,
        serializedName: "type",
        type: {
          name: "String"
        }
      },
      location: {
        required: true,
        serializedName: "location",
        type: {
          name: "String"
        }
      },
      serverFarmId: {
        serializedName: "properties.serverFarmId",
        type: {
          name: "String"
        }
      },
      skuName: {
        serializedName: "properties.skuName",
        type: {
          name: "String"
        }
      },
      needLinuxWorkers: {
        serializedName: "properties.needLinuxWorkers",
        type: {
          name: "Boolean"
        }
      },
      isSpot: {
        serializedName: "properties.isSpot",
        type: {
          name: "Boolean"
        }
      },
      capacity: {
        serializedName: "properties.capacity",
        constraints: {
          InclusiveMinimum: 1
        },
        type: {
          name: "Number"
        }
      },
      hostingEnvironment: {
        serializedName: "properties.hostingEnvironment",
        type: {
          name: "String"
        }
      },
      isXenon: {
        serializedName: "properties.isXenon",
        type: {
          name: "Boolean"
        }
      },
      containerRegistryBaseUrl: {
        serializedName: "properties.containerRegistryBaseUrl",
        type: {
          name: "String"
        }
      },
      containerRegistryUsername: {
        serializedName: "properties.containerRegistryUsername",
        type: {
          name: "String"
        }
      },
      containerRegistryPassword: {
        serializedName: "properties.containerRegistryPassword",
        type: {
          name: "String"
        }
      },
      containerImageRepository: {
        serializedName: "properties.containerImageRepository",
        type: {
          name: "String"
        }
      },
      containerImageTag: {
        serializedName: "properties.containerImageTag",
        type: {
          name: "String"
        }
      },
      containerImagePlatform: {
        serializedName: "properties.containerImagePlatform",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const ValidateResponseError: msRest.CompositeMapper = {
  serializedName: "ValidateResponseError",
  type: {
    name: "Composite",
    className: "ValidateResponseError",
    modelProperties: {
      code: {
        serializedName: "code",
        type: {
          name: "String"
        }
      },
      message: {
        serializedName: "message",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const ValidateResponse: msRest.CompositeMapper = {
  serializedName: "ValidateResponse",
  type: {
    name: "Composite",
    className: "ValidateResponse",
    modelProperties: {
      status: {
        serializedName: "status",
        type: {
          name: "String"
        }
      },
      error: {
        serializedName: "error",
        type: {
          name: "Composite",
          className: "ValidateResponseError"
        }
      }
    }
  }
};

export const VnetParameters: msRest.CompositeMapper = {
  serializedName: "VnetParameters",
  type: {
    name: "Composite",
    className: "VnetParameters",
    modelProperties: {
      ...ProxyOnlyResource.type.modelProperties,
      vnetResourceGroup: {
        serializedName: "properties.vnetResourceGroup",
        type: {
          name: "String"
        }
      },
      vnetName: {
        serializedName: "properties.vnetName",
        type: {
          name: "String"
        }
      },
      vnetSubnetName: {
        serializedName: "properties.vnetSubnetName",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const VnetValidationTestFailure: msRest.CompositeMapper = {
  serializedName: "VnetValidationTestFailure",
  type: {
    name: "Composite",
    className: "VnetValidationTestFailure",
    modelProperties: {
      ...ProxyOnlyResource.type.modelProperties,
      testName: {
        serializedName: "properties.testName",
        type: {
          name: "String"
        }
      },
      details: {
        serializedName: "properties.details",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const VnetValidationFailureDetails: msRest.CompositeMapper = {
  serializedName: "VnetValidationFailureDetails",
  type: {
    name: "Composite",
    className: "VnetValidationFailureDetails",
    modelProperties: {
      ...ProxyOnlyResource.type.modelProperties,
      failed: {
        serializedName: "properties.failed",
        type: {
          name: "Boolean"
        }
      },
      failedTests: {
        serializedName: "properties.failedTests",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "VnetValidationTestFailure"
            }
          }
        }
      }
    }
  }
};

export const ApiKVReference: msRest.CompositeMapper = {
  serializedName: "ApiKVReference",
  type: {
    name: "Composite",
    className: "ApiKVReference",
    modelProperties: {
      reference: {
        serializedName: "reference",
        type: {
          name: "String"
        }
      },
      status: {
        serializedName: "status",
        type: {
          name: "Enum",
          allowedValues: [
            "Initialized",
            "Resolved",
            "InvalidSyntax",
            "MSINotEnabled",
            "VaultNotFound",
            "SecretNotFound",
            "SecretVersionNotFound",
            "AccessToKeyVaultDenied",
            "OtherReasons"
          ]
        }
      },
      vaultName: {
        serializedName: "vaultName",
        type: {
          name: "String"
        }
      },
      secretName: {
        serializedName: "secretName",
        type: {
          name: "String"
        }
      },
      secretVersion: {
        serializedName: "secretVersion",
        type: {
          name: "String"
        }
      },
      identityType: {
        serializedName: "identityType",
        type: {
          name: "Enum",
          allowedValues: [
            "None",
            "SystemAssigned",
            "UserAssigned"
          ]
        }
      },
      details: {
        serializedName: "details",
        type: {
          name: "String"
        }
      },
      source: {
        serializedName: "source",
        type: {
          name: "Enum",
          allowedValues: [
            "KeyVault"
          ]
        }
      },
      location: {
        serializedName: "location",
        type: {
          name: "Enum",
          allowedValues: [
            "ApplicationSetting"
          ]
        }
      }
    }
  }
};

export const FileSystemApplicationLogsConfig: msRest.CompositeMapper = {
  serializedName: "FileSystemApplicationLogsConfig",
  type: {
    name: "Composite",
    className: "FileSystemApplicationLogsConfig",
    modelProperties: {
      level: {
        serializedName: "level",
        defaultValue: 'Off',
        type: {
          name: "Enum",
          allowedValues: [
            "Off",
            "Verbose",
            "Information",
            "Warning",
            "Error"
          ]
        }
      }
    }
  }
};

export const AzureTableStorageApplicationLogsConfig: msRest.CompositeMapper = {
  serializedName: "AzureTableStorageApplicationLogsConfig",
  type: {
    name: "Composite",
    className: "AzureTableStorageApplicationLogsConfig",
    modelProperties: {
      level: {
        serializedName: "level",
        type: {
          name: "Enum",
          allowedValues: [
            "Off",
            "Verbose",
            "Information",
            "Warning",
            "Error"
          ]
        }
      },
      sasUrl: {
        required: true,
        serializedName: "sasUrl",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const AzureBlobStorageApplicationLogsConfig: msRest.CompositeMapper = {
  serializedName: "AzureBlobStorageApplicationLogsConfig",
  type: {
    name: "Composite",
    className: "AzureBlobStorageApplicationLogsConfig",
    modelProperties: {
      level: {
        serializedName: "level",
        type: {
          name: "Enum",
          allowedValues: [
            "Off",
            "Verbose",
            "Information",
            "Warning",
            "Error"
          ]
        }
      },
      sasUrl: {
        serializedName: "sasUrl",
        type: {
          name: "String"
        }
      },
      retentionInDays: {
        serializedName: "retentionInDays",
        type: {
          name: "Number"
        }
      }
    }
  }
};

export const ApplicationLogsConfig: msRest.CompositeMapper = {
  serializedName: "ApplicationLogsConfig",
  type: {
    name: "Composite",
    className: "ApplicationLogsConfig",
    modelProperties: {
      fileSystem: {
        serializedName: "fileSystem",
        type: {
          name: "Composite",
          className: "FileSystemApplicationLogsConfig"
        }
      },
      azureTableStorage: {
        serializedName: "azureTableStorage",
        type: {
          name: "Composite",
          className: "AzureTableStorageApplicationLogsConfig"
        }
      },
      azureBlobStorage: {
        serializedName: "azureBlobStorage",
        type: {
          name: "Composite",
          className: "AzureBlobStorageApplicationLogsConfig"
        }
      }
    }
  }
};

export const AzureBlobStorageHttpLogsConfig: msRest.CompositeMapper = {
  serializedName: "AzureBlobStorageHttpLogsConfig",
  type: {
    name: "Composite",
    className: "AzureBlobStorageHttpLogsConfig",
    modelProperties: {
      sasUrl: {
        serializedName: "sasUrl",
        type: {
          name: "String"
        }
      },
      retentionInDays: {
        serializedName: "retentionInDays",
        type: {
          name: "Number"
        }
      },
      enabled: {
        serializedName: "enabled",
        type: {
          name: "Boolean"
        }
      }
    }
  }
};

export const AzureStorageInfoValue: msRest.CompositeMapper = {
  serializedName: "AzureStorageInfoValue",
  type: {
    name: "Composite",
    className: "AzureStorageInfoValue",
    modelProperties: {
      type: {
        serializedName: "type",
        type: {
          name: "Enum",
          allowedValues: [
            "AzureFiles",
            "AzureBlob"
          ]
        }
      },
      accountName: {
        serializedName: "accountName",
        type: {
          name: "String"
        }
      },
      shareName: {
        serializedName: "shareName",
        type: {
          name: "String"
        }
      },
      accessKey: {
        serializedName: "accessKey",
        type: {
          name: "String"
        }
      },
      mountPath: {
        serializedName: "mountPath",
        type: {
          name: "String"
        }
      },
      state: {
        readOnly: true,
        serializedName: "state",
        type: {
          name: "Enum",
          allowedValues: [
            "Ok",
            "InvalidCredentials",
            "InvalidShare"
          ]
        }
      }
    }
  }
};

export const AzureStoragePropertyDictionaryResource: msRest.CompositeMapper = {
  serializedName: "AzureStoragePropertyDictionaryResource",
  type: {
    name: "Composite",
    className: "AzureStoragePropertyDictionaryResource",
    modelProperties: {
      ...ProxyOnlyResource.type.modelProperties,
      properties: {
        serializedName: "properties",
        type: {
          name: "Dictionary",
          value: {
            type: {
              name: "Composite",
              className: "AzureStorageInfoValue"
            }
          }
        }
      }
    }
  }
};

export const DatabaseBackupSetting: msRest.CompositeMapper = {
  serializedName: "DatabaseBackupSetting",
  type: {
    name: "Composite",
    className: "DatabaseBackupSetting",
    modelProperties: {
      databaseType: {
        required: true,
        serializedName: "databaseType",
        type: {
          name: "String"
        }
      },
      name: {
        serializedName: "name",
        type: {
          name: "String"
        }
      },
      connectionStringName: {
        serializedName: "connectionStringName",
        type: {
          name: "String"
        }
      },
      connectionString: {
        serializedName: "connectionString",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const BackupItem: msRest.CompositeMapper = {
  serializedName: "BackupItem",
  type: {
    name: "Composite",
    className: "BackupItem",
    modelProperties: {
      ...ProxyOnlyResource.type.modelProperties,
      backupId: {
        readOnly: true,
        serializedName: "properties.id",
        type: {
          name: "Number"
        }
      },
      storageAccountUrl: {
        readOnly: true,
        serializedName: "properties.storageAccountUrl",
        type: {
          name: "String"
        }
      },
      blobName: {
        readOnly: true,
        serializedName: "properties.blobName",
        type: {
          name: "String"
        }
      },
      backupItemName: {
        readOnly: true,
        serializedName: "properties.name",
        type: {
          name: "String"
        }
      },
      status: {
        readOnly: true,
        serializedName: "properties.status",
        type: {
          name: "Enum",
          allowedValues: [
            "InProgress",
            "Failed",
            "Succeeded",
            "TimedOut",
            "Created",
            "Skipped",
            "PartiallySucceeded",
            "DeleteInProgress",
            "DeleteFailed",
            "Deleted"
          ]
        }
      },
      sizeInBytes: {
        readOnly: true,
        serializedName: "properties.sizeInBytes",
        type: {
          name: "Number"
        }
      },
      created: {
        readOnly: true,
        serializedName: "properties.created",
        type: {
          name: "DateTime"
        }
      },
      log: {
        readOnly: true,
        serializedName: "properties.log",
        type: {
          name: "String"
        }
      },
      databases: {
        readOnly: true,
        serializedName: "properties.databases",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "DatabaseBackupSetting"
            }
          }
        }
      },
      scheduled: {
        readOnly: true,
        serializedName: "properties.scheduled",
        type: {
          name: "Boolean"
        }
      },
      lastRestoreTimeStamp: {
        readOnly: true,
        serializedName: "properties.lastRestoreTimeStamp",
        type: {
          name: "DateTime"
        }
      },
      finishedTimeStamp: {
        readOnly: true,
        serializedName: "properties.finishedTimeStamp",
        type: {
          name: "DateTime"
        }
      },
      correlationId: {
        readOnly: true,
        serializedName: "properties.correlationId",
        type: {
          name: "String"
        }
      },
      websiteSizeInBytes: {
        readOnly: true,
        serializedName: "properties.websiteSizeInBytes",
        type: {
          name: "Number"
        }
      }
    }
  }
};

export const BackupSchedule: msRest.CompositeMapper = {
  serializedName: "BackupSchedule",
  type: {
    name: "Composite",
    className: "BackupSchedule",
    modelProperties: {
      frequencyInterval: {
        required: true,
        serializedName: "frequencyInterval",
        defaultValue: 7,
        type: {
          name: "Number"
        }
      },
      frequencyUnit: {
        required: true,
        serializedName: "frequencyUnit",
        defaultValue: 'Day',
        type: {
          name: "Enum",
          allowedValues: [
            "Day",
            "Hour"
          ]
        }
      },
      keepAtLeastOneBackup: {
        required: true,
        serializedName: "keepAtLeastOneBackup",
        defaultValue: true,
        type: {
          name: "Boolean"
        }
      },
      retentionPeriodInDays: {
        required: true,
        serializedName: "retentionPeriodInDays",
        defaultValue: 30,
        type: {
          name: "Number"
        }
      },
      startTime: {
        serializedName: "startTime",
        type: {
          name: "DateTime"
        }
      },
      lastExecutionTime: {
        readOnly: true,
        serializedName: "lastExecutionTime",
        type: {
          name: "DateTime"
        }
      }
    }
  }
};

export const BackupRequest: msRest.CompositeMapper = {
  serializedName: "BackupRequest",
  type: {
    name: "Composite",
    className: "BackupRequest",
    modelProperties: {
      ...ProxyOnlyResource.type.modelProperties,
      backupName: {
        serializedName: "properties.backupName",
        type: {
          name: "String"
        }
      },
      enabled: {
        serializedName: "properties.enabled",
        type: {
          name: "Boolean"
        }
      },
      storageAccountUrl: {
        required: true,
        serializedName: "properties.storageAccountUrl",
        type: {
          name: "String"
        }
      },
      backupSchedule: {
        serializedName: "properties.backupSchedule",
        type: {
          name: "Composite",
          className: "BackupSchedule"
        }
      },
      databases: {
        serializedName: "properties.databases",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "DatabaseBackupSetting"
            }
          }
        }
      }
    }
  }
};

export const ConnStringValueTypePair: msRest.CompositeMapper = {
  serializedName: "ConnStringValueTypePair",
  type: {
    name: "Composite",
    className: "ConnStringValueTypePair",
    modelProperties: {
      value: {
        required: true,
        serializedName: "value",
        type: {
          name: "String"
        }
      },
      type: {
        required: true,
        serializedName: "type",
        type: {
          name: "Enum",
          allowedValues: [
            "MySql",
            "SQLServer",
            "SQLAzure",
            "Custom",
            "NotificationHub",
            "ServiceBus",
            "EventHub",
            "ApiHub",
            "DocDb",
            "RedisCache",
            "PostgreSQL"
          ]
        }
      }
    }
  }
};

export const ConnectionStringDictionary: msRest.CompositeMapper = {
  serializedName: "ConnectionStringDictionary",
  type: {
    name: "Composite",
    className: "ConnectionStringDictionary",
    modelProperties: {
      ...ProxyOnlyResource.type.modelProperties,
      properties: {
        serializedName: "properties",
        type: {
          name: "Dictionary",
          value: {
            type: {
              name: "Composite",
              className: "ConnStringValueTypePair"
            }
          }
        }
      }
    }
  }
};

export const ContainerCpuUsage: msRest.CompositeMapper = {
  serializedName: "ContainerCpuUsage",
  type: {
    name: "Composite",
    className: "ContainerCpuUsage",
    modelProperties: {
      totalUsage: {
        serializedName: "totalUsage",
        type: {
          name: "Number"
        }
      },
      perCpuUsage: {
        serializedName: "perCpuUsage",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Number"
            }
          }
        }
      },
      kernelModeUsage: {
        serializedName: "kernelModeUsage",
        type: {
          name: "Number"
        }
      },
      userModeUsage: {
        serializedName: "userModeUsage",
        type: {
          name: "Number"
        }
      }
    }
  }
};

export const ContainerThrottlingData: msRest.CompositeMapper = {
  serializedName: "ContainerThrottlingData",
  type: {
    name: "Composite",
    className: "ContainerThrottlingData",
    modelProperties: {
      periods: {
        serializedName: "periods",
        type: {
          name: "Number"
        }
      },
      throttledPeriods: {
        serializedName: "throttledPeriods",
        type: {
          name: "Number"
        }
      },
      throttledTime: {
        serializedName: "throttledTime",
        type: {
          name: "Number"
        }
      }
    }
  }
};

export const ContainerCpuStatistics: msRest.CompositeMapper = {
  serializedName: "ContainerCpuStatistics",
  type: {
    name: "Composite",
    className: "ContainerCpuStatistics",
    modelProperties: {
      cpuUsage: {
        serializedName: "cpuUsage",
        type: {
          name: "Composite",
          className: "ContainerCpuUsage"
        }
      },
      systemCpuUsage: {
        serializedName: "systemCpuUsage",
        type: {
          name: "Number"
        }
      },
      onlineCpuCount: {
        serializedName: "onlineCpuCount",
        type: {
          name: "Number"
        }
      },
      throttlingData: {
        serializedName: "throttlingData",
        type: {
          name: "Composite",
          className: "ContainerThrottlingData"
        }
      }
    }
  }
};

export const ContainerMemoryStatistics: msRest.CompositeMapper = {
  serializedName: "ContainerMemoryStatistics",
  type: {
    name: "Composite",
    className: "ContainerMemoryStatistics",
    modelProperties: {
      usage: {
        serializedName: "usage",
        type: {
          name: "Number"
        }
      },
      maxUsage: {
        serializedName: "maxUsage",
        type: {
          name: "Number"
        }
      },
      limit: {
        serializedName: "limit",
        type: {
          name: "Number"
        }
      }
    }
  }
};

export const ContainerNetworkInterfaceStatistics: msRest.CompositeMapper = {
  serializedName: "ContainerNetworkInterfaceStatistics",
  type: {
    name: "Composite",
    className: "ContainerNetworkInterfaceStatistics",
    modelProperties: {
      rxBytes: {
        serializedName: "rxBytes",
        type: {
          name: "Number"
        }
      },
      rxPackets: {
        serializedName: "rxPackets",
        type: {
          name: "Number"
        }
      },
      rxErrors: {
        serializedName: "rxErrors",
        type: {
          name: "Number"
        }
      },
      rxDropped: {
        serializedName: "rxDropped",
        type: {
          name: "Number"
        }
      },
      txBytes: {
        serializedName: "txBytes",
        type: {
          name: "Number"
        }
      },
      txPackets: {
        serializedName: "txPackets",
        type: {
          name: "Number"
        }
      },
      txErrors: {
        serializedName: "txErrors",
        type: {
          name: "Number"
        }
      },
      txDropped: {
        serializedName: "txDropped",
        type: {
          name: "Number"
        }
      }
    }
  }
};

export const ContainerInfo: msRest.CompositeMapper = {
  serializedName: "ContainerInfo",
  type: {
    name: "Composite",
    className: "ContainerInfo",
    modelProperties: {
      currentTimeStamp: {
        serializedName: "currentTimeStamp",
        type: {
          name: "DateTime"
        }
      },
      previousTimeStamp: {
        serializedName: "previousTimeStamp",
        type: {
          name: "DateTime"
        }
      },
      currentCpuStats: {
        serializedName: "currentCpuStats",
        type: {
          name: "Composite",
          className: "ContainerCpuStatistics"
        }
      },
      previousCpuStats: {
        serializedName: "previousCpuStats",
        type: {
          name: "Composite",
          className: "ContainerCpuStatistics"
        }
      },
      memoryStats: {
        serializedName: "memoryStats",
        type: {
          name: "Composite",
          className: "ContainerMemoryStatistics"
        }
      },
      name: {
        serializedName: "name",
        type: {
          name: "String"
        }
      },
      id: {
        serializedName: "id",
        type: {
          name: "String"
        }
      },
      eth0: {
        serializedName: "eth0",
        type: {
          name: "Composite",
          className: "ContainerNetworkInterfaceStatistics"
        }
      }
    }
  }
};

export const ContinuousWebJob: msRest.CompositeMapper = {
  serializedName: "ContinuousWebJob",
  type: {
    name: "Composite",
    className: "ContinuousWebJob",
    modelProperties: {
      ...ProxyOnlyResource.type.modelProperties,
      status: {
        serializedName: "properties.status",
        type: {
          name: "Enum",
          allowedValues: [
            "Initializing",
            "Starting",
            "Running",
            "PendingRestart",
            "Stopped"
          ]
        }
      },
      detailedStatus: {
        serializedName: "properties.detailed_status",
        type: {
          name: "String"
        }
      },
      logUrl: {
        serializedName: "properties.log_url",
        type: {
          name: "String"
        }
      },
      runCommand: {
        serializedName: "properties.run_command",
        type: {
          name: "String"
        }
      },
      url: {
        serializedName: "properties.url",
        type: {
          name: "String"
        }
      },
      extraInfoUrl: {
        serializedName: "properties.extra_info_url",
        type: {
          name: "String"
        }
      },
      webJobType: {
        serializedName: "properties.web_job_type",
        type: {
          name: "Enum",
          allowedValues: [
            "Continuous",
            "Triggered"
          ]
        }
      },
      error: {
        serializedName: "properties.error",
        type: {
          name: "String"
        }
      },
      usingSdk: {
        serializedName: "properties.using_sdk",
        type: {
          name: "Boolean"
        }
      },
      settings: {
        serializedName: "properties.settings",
        type: {
          name: "Dictionary",
          value: {
            type: {
              name: "Object"
            }
          }
        }
      }
    }
  }
};

export const CsmCopySlotEntity: msRest.CompositeMapper = {
  serializedName: "CsmCopySlotEntity",
  type: {
    name: "Composite",
    className: "CsmCopySlotEntity",
    modelProperties: {
      targetSlot: {
        required: true,
        serializedName: "targetSlot",
        type: {
          name: "String"
        }
      },
      siteConfig: {
        required: true,
        serializedName: "siteConfig",
        type: {
          name: "Composite",
          className: "SiteConfig"
        }
      }
    }
  }
};

export const CsmPublishingProfileOptions: msRest.CompositeMapper = {
  serializedName: "CsmPublishingProfileOptions",
  type: {
    name: "Composite",
    className: "CsmPublishingProfileOptions",
    modelProperties: {
      format: {
        serializedName: "format",
        type: {
          name: "String"
        }
      },
      includeDisasterRecoveryEndpoints: {
        serializedName: "includeDisasterRecoveryEndpoints",
        type: {
          name: "Boolean"
        }
      }
    }
  }
};

export const CsmSlotEntity: msRest.CompositeMapper = {
  serializedName: "CsmSlotEntity",
  type: {
    name: "Composite",
    className: "CsmSlotEntity",
    modelProperties: {
      targetSlot: {
        required: true,
        serializedName: "targetSlot",
        type: {
          name: "String"
        }
      },
      preserveVnet: {
        required: true,
        serializedName: "preserveVnet",
        type: {
          name: "Boolean"
        }
      }
    }
  }
};

export const CustomHostnameAnalysisResult: msRest.CompositeMapper = {
  serializedName: "CustomHostnameAnalysisResult",
  type: {
    name: "Composite",
    className: "CustomHostnameAnalysisResult",
    modelProperties: {
      ...ProxyOnlyResource.type.modelProperties,
      isHostnameAlreadyVerified: {
        readOnly: true,
        serializedName: "properties.isHostnameAlreadyVerified",
        type: {
          name: "Boolean"
        }
      },
      customDomainVerificationTest: {
        readOnly: true,
        serializedName: "properties.customDomainVerificationTest",
        type: {
          name: "Enum",
          allowedValues: [
            "Passed",
            "Failed",
            "Skipped"
          ]
        }
      },
      customDomainVerificationFailureInfo: {
        readOnly: true,
        serializedName: "properties.customDomainVerificationFailureInfo",
        type: {
          name: "Composite",
          className: "ErrorEntity"
        }
      },
      hasConflictOnScaleUnit: {
        readOnly: true,
        serializedName: "properties.hasConflictOnScaleUnit",
        type: {
          name: "Boolean"
        }
      },
      hasConflictAcrossSubscription: {
        readOnly: true,
        serializedName: "properties.hasConflictAcrossSubscription",
        type: {
          name: "Boolean"
        }
      },
      conflictingAppResourceId: {
        readOnly: true,
        serializedName: "properties.conflictingAppResourceId",
        type: {
          name: "String"
        }
      },
      cNameRecords: {
        serializedName: "properties.cNameRecords",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "String"
            }
          }
        }
      },
      txtRecords: {
        serializedName: "properties.txtRecords",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "String"
            }
          }
        }
      },
      aRecords: {
        serializedName: "properties.aRecords",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "String"
            }
          }
        }
      },
      alternateCNameRecords: {
        serializedName: "properties.alternateCNameRecords",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "String"
            }
          }
        }
      },
      alternateTxtRecords: {
        serializedName: "properties.alternateTxtRecords",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "String"
            }
          }
        }
      }
    }
  }
};

export const DeletedAppRestoreRequest: msRest.CompositeMapper = {
  serializedName: "DeletedAppRestoreRequest",
  type: {
    name: "Composite",
    className: "DeletedAppRestoreRequest",
    modelProperties: {
      ...ProxyOnlyResource.type.modelProperties,
      deletedSiteId: {
        serializedName: "properties.deletedSiteId",
        type: {
          name: "String"
        }
      },
      recoverConfiguration: {
        serializedName: "properties.recoverConfiguration",
        type: {
          name: "Boolean"
        }
      },
      snapshotTime: {
        serializedName: "properties.snapshotTime",
        type: {
          name: "String"
        }
      },
      useDRSecondary: {
        serializedName: "properties.useDRSecondary",
        type: {
          name: "Boolean"
        }
      }
    }
  }
};

export const Deployment: msRest.CompositeMapper = {
  serializedName: "Deployment",
  type: {
    name: "Composite",
    className: "Deployment",
    modelProperties: {
      ...ProxyOnlyResource.type.modelProperties,
      status: {
        serializedName: "properties.status",
        type: {
          name: "Number"
        }
      },
      message: {
        serializedName: "properties.message",
        type: {
          name: "String"
        }
      },
      author: {
        serializedName: "properties.author",
        type: {
          name: "String"
        }
      },
      deployer: {
        serializedName: "properties.deployer",
        type: {
          name: "String"
        }
      },
      authorEmail: {
        serializedName: "properties.author_email",
        type: {
          name: "String"
        }
      },
      startTime: {
        serializedName: "properties.start_time",
        type: {
          name: "DateTime"
        }
      },
      endTime: {
        serializedName: "properties.end_time",
        type: {
          name: "DateTime"
        }
      },
      active: {
        serializedName: "properties.active",
        type: {
          name: "Boolean"
        }
      },
      details: {
        serializedName: "properties.details",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const EnabledConfig: msRest.CompositeMapper = {
  serializedName: "EnabledConfig",
  type: {
    name: "Composite",
    className: "EnabledConfig",
    modelProperties: {
      enabled: {
        serializedName: "enabled",
        type: {
          name: "Boolean"
        }
      }
    }
  }
};

export const FileSystemHttpLogsConfig: msRest.CompositeMapper = {
  serializedName: "FileSystemHttpLogsConfig",
  type: {
    name: "Composite",
    className: "FileSystemHttpLogsConfig",
    modelProperties: {
      retentionInMb: {
        serializedName: "retentionInMb",
        constraints: {
          InclusiveMaximum: 100,
          InclusiveMinimum: 25
        },
        type: {
          name: "Number"
        }
      },
      retentionInDays: {
        serializedName: "retentionInDays",
        type: {
          name: "Number"
        }
      },
      enabled: {
        serializedName: "enabled",
        type: {
          name: "Boolean"
        }
      }
    }
  }
};

export const FunctionEnvelope: msRest.CompositeMapper = {
  serializedName: "FunctionEnvelope",
  type: {
    name: "Composite",
    className: "FunctionEnvelope",
    modelProperties: {
      ...ProxyOnlyResource.type.modelProperties,
      functionAppId: {
        serializedName: "properties.function_app_id",
        type: {
          name: "String"
        }
      },
      scriptRootPathHref: {
        serializedName: "properties.script_root_path_href",
        type: {
          name: "String"
        }
      },
      scriptHref: {
        serializedName: "properties.script_href",
        type: {
          name: "String"
        }
      },
      configHref: {
        serializedName: "properties.config_href",
        type: {
          name: "String"
        }
      },
      testDataHref: {
        serializedName: "properties.test_data_href",
        type: {
          name: "String"
        }
      },
      secretsFileHref: {
        serializedName: "properties.secrets_file_href",
        type: {
          name: "String"
        }
      },
      href: {
        serializedName: "properties.href",
        type: {
          name: "String"
        }
      },
      config: {
        serializedName: "properties.config",
        type: {
          name: "Object"
        }
      },
      files: {
        serializedName: "properties.files",
        type: {
          name: "Dictionary",
          value: {
            type: {
              name: "String"
            }
          }
        }
      },
      testData: {
        serializedName: "properties.test_data",
        type: {
          name: "String"
        }
      },
      invokeUrlTemplate: {
        serializedName: "properties.invoke_url_template",
        type: {
          name: "String"
        }
      },
      language: {
        serializedName: "properties.language",
        type: {
          name: "String"
        }
      },
      isDisabled: {
        serializedName: "properties.isDisabled",
        type: {
          name: "Boolean"
        }
      }
    }
  }
};

export const FunctionSecrets: msRest.CompositeMapper = {
  serializedName: "FunctionSecrets",
  type: {
    name: "Composite",
    className: "FunctionSecrets",
    modelProperties: {
      ...ProxyOnlyResource.type.modelProperties,
      key: {
        serializedName: "properties.key",
        type: {
          name: "String"
        }
      },
      triggerUrl: {
        serializedName: "properties.trigger_url",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const HostKeys: msRest.CompositeMapper = {
  serializedName: "HostKeys",
  type: {
    name: "Composite",
    className: "HostKeys",
    modelProperties: {
      masterKey: {
        serializedName: "masterKey",
        type: {
          name: "String"
        }
      },
      functionKeys: {
        serializedName: "functionKeys",
        type: {
          name: "Dictionary",
          value: {
            type: {
              name: "String"
            }
          }
        }
      },
      systemKeys: {
        serializedName: "systemKeys",
        type: {
          name: "Dictionary",
          value: {
            type: {
              name: "String"
            }
          }
        }
      }
    }
  }
};

export const HostNameBinding: msRest.CompositeMapper = {
  serializedName: "HostNameBinding",
  type: {
    name: "Composite",
    className: "HostNameBinding",
    modelProperties: {
      ...ProxyOnlyResource.type.modelProperties,
      siteName: {
        serializedName: "properties.siteName",
        type: {
          name: "String"
        }
      },
      domainId: {
        serializedName: "properties.domainId",
        type: {
          name: "String"
        }
      },
      azureResourceName: {
        serializedName: "properties.azureResourceName",
        type: {
          name: "String"
        }
      },
      azureResourceType: {
        serializedName: "properties.azureResourceType",
        type: {
          name: "Enum",
          allowedValues: [
            "Website",
            "TrafficManager"
          ]
        }
      },
      customHostNameDnsRecordType: {
        serializedName: "properties.customHostNameDnsRecordType",
        type: {
          name: "Enum",
          allowedValues: [
            "CName",
            "A"
          ]
        }
      },
      hostNameType: {
        serializedName: "properties.hostNameType",
        type: {
          name: "Enum",
          allowedValues: [
            "Verified",
            "Managed"
          ]
        }
      },
      sslState: {
        serializedName: "properties.sslState",
        type: {
          name: "Enum",
          allowedValues: [
            "Disabled",
            "SniEnabled",
            "IpBasedEnabled"
          ]
        }
      },
      thumbprint: {
        serializedName: "properties.thumbprint",
        type: {
          name: "String"
        }
      },
      virtualIP: {
        readOnly: true,
        serializedName: "properties.virtualIP",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const HttpLogsConfig: msRest.CompositeMapper = {
  serializedName: "HttpLogsConfig",
  type: {
    name: "Composite",
    className: "HttpLogsConfig",
    modelProperties: {
      fileSystem: {
        serializedName: "fileSystem",
        type: {
          name: "Composite",
          className: "FileSystemHttpLogsConfig"
        }
      },
      azureBlobStorage: {
        serializedName: "azureBlobStorage",
        type: {
          name: "Composite",
          className: "AzureBlobStorageHttpLogsConfig"
        }
      }
    }
  }
};

export const KeyInfo: msRest.CompositeMapper = {
  serializedName: "KeyInfo",
  type: {
    name: "Composite",
    className: "KeyInfo",
    modelProperties: {
      name: {
        serializedName: "name",
        type: {
          name: "String"
        }
      },
      value: {
        serializedName: "value",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const KeyVaultReferenceCollection: msRest.CompositeMapper = {
  serializedName: "KeyVaultReferenceCollection",
  type: {
    name: "Composite",
    className: "KeyVaultReferenceCollection",
    modelProperties: {
      ...ProxyOnlyResource.type.modelProperties,
      keyToReferenceStatuses: {
        serializedName: "properties.keyToReferenceStatuses",
        type: {
          name: "Dictionary",
          value: {
            type: {
              name: "Composite",
              className: "ApiKVReference"
            }
          }
        }
      }
    }
  }
};

export const KeyVaultReferenceResource: msRest.CompositeMapper = {
  serializedName: "KeyVaultReferenceResource",
  type: {
    name: "Composite",
    className: "KeyVaultReferenceResource",
    modelProperties: {
      ...ProxyOnlyResource.type.modelProperties,
      reference: {
        serializedName: "properties.reference",
        type: {
          name: "String"
        }
      },
      status: {
        serializedName: "properties.status",
        type: {
          name: "Enum",
          allowedValues: [
            "Initialized",
            "Resolved",
            "InvalidSyntax",
            "MSINotEnabled",
            "VaultNotFound",
            "SecretNotFound",
            "SecretVersionNotFound",
            "AccessToKeyVaultDenied",
            "OtherReasons"
          ]
        }
      },
      vaultName: {
        serializedName: "properties.vaultName",
        type: {
          name: "String"
        }
      },
      secretName: {
        serializedName: "properties.secretName",
        type: {
          name: "String"
        }
      },
      secretVersion: {
        serializedName: "properties.secretVersion",
        type: {
          name: "String"
        }
      },
      identityType: {
        serializedName: "properties.identityType",
        type: {
          name: "Enum",
          allowedValues: [
            "None",
            "SystemAssigned",
            "UserAssigned"
          ]
        }
      },
      details: {
        serializedName: "properties.details",
        type: {
          name: "String"
        }
      },
      source: {
        serializedName: "properties.source",
        type: {
          name: "Enum",
          allowedValues: [
            "KeyVault"
          ]
        }
      },
      location: {
        serializedName: "properties.location",
        type: {
          name: "Enum",
          allowedValues: [
            "ApplicationSetting"
          ]
        }
      }
    }
  }
};

export const MSDeploy: msRest.CompositeMapper = {
  serializedName: "MSDeploy",
  type: {
    name: "Composite",
    className: "MSDeploy",
    modelProperties: {
      ...ProxyOnlyResource.type.modelProperties,
      packageUri: {
        serializedName: "properties.packageUri",
        type: {
          name: "String"
        }
      },
      connectionString: {
        serializedName: "properties.connectionString",
        type: {
          name: "String"
        }
      },
      dbType: {
        serializedName: "properties.dbType",
        type: {
          name: "String"
        }
      },
      setParametersXmlFileUri: {
        serializedName: "properties.setParametersXmlFileUri",
        type: {
          name: "String"
        }
      },
      setParameters: {
        serializedName: "properties.setParameters",
        type: {
          name: "Dictionary",
          value: {
            type: {
              name: "String"
            }
          }
        }
      },
      skipAppData: {
        serializedName: "properties.skipAppData",
        type: {
          name: "Boolean"
        }
      },
      appOffline: {
        serializedName: "properties.appOffline",
        type: {
          name: "Boolean"
        }
      }
    }
  }
};

export const MSDeployLogEntry: msRest.CompositeMapper = {
  serializedName: "MSDeployLogEntry",
  type: {
    name: "Composite",
    className: "MSDeployLogEntry",
    modelProperties: {
      time: {
        readOnly: true,
        serializedName: "time",
        type: {
          name: "DateTime"
        }
      },
      type: {
        readOnly: true,
        serializedName: "type",
        type: {
          name: "Enum",
          allowedValues: [
            "Message",
            "Warning",
            "Error"
          ]
        }
      },
      message: {
        readOnly: true,
        serializedName: "message",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const MSDeployLog: msRest.CompositeMapper = {
  serializedName: "MSDeployLog",
  type: {
    name: "Composite",
    className: "MSDeployLog",
    modelProperties: {
      ...ProxyOnlyResource.type.modelProperties,
      entries: {
        readOnly: true,
        serializedName: "properties.entries",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "MSDeployLogEntry"
            }
          }
        }
      }
    }
  }
};

export const MSDeployStatus: msRest.CompositeMapper = {
  serializedName: "MSDeployStatus",
  type: {
    name: "Composite",
    className: "MSDeployStatus",
    modelProperties: {
      ...ProxyOnlyResource.type.modelProperties,
      deployer: {
        readOnly: true,
        serializedName: "properties.deployer",
        type: {
          name: "String"
        }
      },
      provisioningState: {
        readOnly: true,
        serializedName: "properties.provisioningState",
        type: {
          name: "Enum",
          allowedValues: [
            "accepted",
            "running",
            "succeeded",
            "failed",
            "canceled"
          ]
        }
      },
      startTime: {
        readOnly: true,
        serializedName: "properties.startTime",
        type: {
          name: "DateTime"
        }
      },
      endTime: {
        readOnly: true,
        serializedName: "properties.endTime",
        type: {
          name: "DateTime"
        }
      },
      complete: {
        readOnly: true,
        serializedName: "properties.complete",
        type: {
          name: "Boolean"
        }
      }
    }
  }
};

export const MigrateMySqlRequest: msRest.CompositeMapper = {
  serializedName: "MigrateMySqlRequest",
  type: {
    name: "Composite",
    className: "MigrateMySqlRequest",
    modelProperties: {
      ...ProxyOnlyResource.type.modelProperties,
      connectionString: {
        required: true,
        serializedName: "properties.connectionString",
        type: {
          name: "String"
        }
      },
      migrationType: {
        required: true,
        serializedName: "properties.migrationType",
        type: {
          name: "Enum",
          allowedValues: [
            "LocalToRemote",
            "RemoteToLocal"
          ]
        }
      }
    }
  }
};

export const MigrateMySqlStatus: msRest.CompositeMapper = {
  serializedName: "MigrateMySqlStatus",
  type: {
    name: "Composite",
    className: "MigrateMySqlStatus",
    modelProperties: {
      ...ProxyOnlyResource.type.modelProperties,
      migrationOperationStatus: {
        readOnly: true,
        serializedName: "properties.migrationOperationStatus",
        type: {
          name: "Enum",
          allowedValues: [
            "InProgress",
            "Failed",
            "Succeeded",
            "TimedOut",
            "Created"
          ]
        }
      },
      operationId: {
        readOnly: true,
        serializedName: "properties.operationId",
        type: {
          name: "String"
        }
      },
      localMySqlEnabled: {
        readOnly: true,
        serializedName: "properties.localMySqlEnabled",
        type: {
          name: "Boolean"
        }
      }
    }
  }
};

export const RelayServiceConnectionEntity: msRest.CompositeMapper = {
  serializedName: "RelayServiceConnectionEntity",
  type: {
    name: "Composite",
    className: "RelayServiceConnectionEntity",
    modelProperties: {
      ...ProxyOnlyResource.type.modelProperties,
      entityName: {
        serializedName: "properties.entityName",
        type: {
          name: "String"
        }
      },
      entityConnectionString: {
        serializedName: "properties.entityConnectionString",
        type: {
          name: "String"
        }
      },
      resourceType: {
        serializedName: "properties.resourceType",
        type: {
          name: "String"
        }
      },
      resourceConnectionString: {
        serializedName: "properties.resourceConnectionString",
        type: {
          name: "String"
        }
      },
      hostname: {
        serializedName: "properties.hostname",
        type: {
          name: "String"
        }
      },
      port: {
        serializedName: "properties.port",
        type: {
          name: "Number"
        }
      },
      biztalkUri: {
        serializedName: "properties.biztalkUri",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const NetworkFeatures: msRest.CompositeMapper = {
  serializedName: "NetworkFeatures",
  type: {
    name: "Composite",
    className: "NetworkFeatures",
    modelProperties: {
      ...ProxyOnlyResource.type.modelProperties,
      virtualNetworkName: {
        readOnly: true,
        serializedName: "properties.virtualNetworkName",
        type: {
          name: "String"
        }
      },
      virtualNetworkConnection: {
        readOnly: true,
        serializedName: "properties.virtualNetworkConnection",
        type: {
          name: "Composite",
          className: "VnetInfo"
        }
      },
      hybridConnections: {
        readOnly: true,
        serializedName: "properties.hybridConnections",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "RelayServiceConnectionEntity"
            }
          }
        }
      },
      hybridConnectionsV2: {
        readOnly: true,
        serializedName: "properties.hybridConnectionsV2",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "HybridConnection"
            }
          }
        }
      }
    }
  }
};

export const NetworkTrace: msRest.CompositeMapper = {
  serializedName: "NetworkTrace",
  type: {
    name: "Composite",
    className: "NetworkTrace",
    modelProperties: {
      path: {
        serializedName: "path",
        type: {
          name: "String"
        }
      },
      status: {
        serializedName: "status",
        type: {
          name: "String"
        }
      },
      message: {
        serializedName: "message",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const PerfMonSample: msRest.CompositeMapper = {
  serializedName: "PerfMonSample",
  type: {
    name: "Composite",
    className: "PerfMonSample",
    modelProperties: {
      time: {
        serializedName: "time",
        type: {
          name: "DateTime"
        }
      },
      instanceName: {
        serializedName: "instanceName",
        type: {
          name: "String"
        }
      },
      value: {
        serializedName: "value",
        type: {
          name: "Number"
        }
      }
    }
  }
};

export const PerfMonSet: msRest.CompositeMapper = {
  serializedName: "PerfMonSet",
  type: {
    name: "Composite",
    className: "PerfMonSet",
    modelProperties: {
      name: {
        serializedName: "name",
        type: {
          name: "String"
        }
      },
      startTime: {
        serializedName: "startTime",
        type: {
          name: "DateTime"
        }
      },
      endTime: {
        serializedName: "endTime",
        type: {
          name: "DateTime"
        }
      },
      timeGrain: {
        serializedName: "timeGrain",
        type: {
          name: "String"
        }
      },
      values: {
        serializedName: "values",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "PerfMonSample"
            }
          }
        }
      }
    }
  }
};

export const PerfMonResponse: msRest.CompositeMapper = {
  serializedName: "PerfMonResponse",
  type: {
    name: "Composite",
    className: "PerfMonResponse",
    modelProperties: {
      code: {
        serializedName: "code",
        type: {
          name: "String"
        }
      },
      message: {
        serializedName: "message",
        type: {
          name: "String"
        }
      },
      data: {
        serializedName: "data",
        type: {
          name: "Composite",
          className: "PerfMonSet"
        }
      }
    }
  }
};

export const PremierAddOn: msRest.CompositeMapper = {
  serializedName: "PremierAddOn",
  type: {
    name: "Composite",
    className: "PremierAddOn",
    modelProperties: {
      ...Resource.type.modelProperties,
      sku: {
        serializedName: "properties.sku",
        type: {
          name: "String"
        }
      },
      product: {
        serializedName: "properties.product",
        type: {
          name: "String"
        }
      },
      vendor: {
        serializedName: "properties.vendor",
        type: {
          name: "String"
        }
      },
      marketplacePublisher: {
        serializedName: "properties.marketplacePublisher",
        type: {
          name: "String"
        }
      },
      marketplaceOffer: {
        serializedName: "properties.marketplaceOffer",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const PremierAddOnPatchResource: msRest.CompositeMapper = {
  serializedName: "PremierAddOnPatchResource",
  type: {
    name: "Composite",
    className: "PremierAddOnPatchResource",
    modelProperties: {
      ...ProxyOnlyResource.type.modelProperties,
      sku: {
        serializedName: "properties.sku",
        type: {
          name: "String"
        }
      },
      product: {
        serializedName: "properties.product",
        type: {
          name: "String"
        }
      },
      vendor: {
        serializedName: "properties.vendor",
        type: {
          name: "String"
        }
      },
      marketplacePublisher: {
        serializedName: "properties.marketplacePublisher",
        type: {
          name: "String"
        }
      },
      marketplaceOffer: {
        serializedName: "properties.marketplaceOffer",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const PrivateAccessSubnet: msRest.CompositeMapper = {
  serializedName: "PrivateAccessSubnet",
  type: {
    name: "Composite",
    className: "PrivateAccessSubnet",
    modelProperties: {
      name: {
        serializedName: "name",
        type: {
          name: "String"
        }
      },
      key: {
        serializedName: "key",
        type: {
          name: "Number"
        }
      }
    }
  }
};

export const PrivateAccessVirtualNetwork: msRest.CompositeMapper = {
  serializedName: "PrivateAccessVirtualNetwork",
  type: {
    name: "Composite",
    className: "PrivateAccessVirtualNetwork",
    modelProperties: {
      name: {
        serializedName: "name",
        type: {
          name: "String"
        }
      },
      key: {
        serializedName: "key",
        type: {
          name: "Number"
        }
      },
      resourceId: {
        serializedName: "resourceId",
        type: {
          name: "String"
        }
      },
      subnets: {
        serializedName: "subnets",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "PrivateAccessSubnet"
            }
          }
        }
      }
    }
  }
};

export const PrivateAccess: msRest.CompositeMapper = {
  serializedName: "PrivateAccess",
  type: {
    name: "Composite",
    className: "PrivateAccess",
    modelProperties: {
      ...ProxyOnlyResource.type.modelProperties,
      enabled: {
        serializedName: "properties.enabled",
        type: {
          name: "Boolean"
        }
      },
      virtualNetworks: {
        serializedName: "properties.virtualNetworks",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "PrivateAccessVirtualNetwork"
            }
          }
        }
      }
    }
  }
};

export const ProcessThreadInfo: msRest.CompositeMapper = {
  serializedName: "ProcessThreadInfo",
  type: {
    name: "Composite",
    className: "ProcessThreadInfo",
    modelProperties: {
      ...ProxyOnlyResource.type.modelProperties,
      identifier: {
        readOnly: true,
        serializedName: "properties.identifier",
        type: {
          name: "Number"
        }
      },
      href: {
        serializedName: "properties.href",
        type: {
          name: "String"
        }
      },
      process: {
        serializedName: "properties.process",
        type: {
          name: "String"
        }
      },
      startAddress: {
        serializedName: "properties.start_address",
        type: {
          name: "String"
        }
      },
      currentPriority: {
        serializedName: "properties.current_priority",
        type: {
          name: "Number"
        }
      },
      priorityLevel: {
        serializedName: "properties.priority_level",
        type: {
          name: "String"
        }
      },
      basePriority: {
        serializedName: "properties.base_priority",
        type: {
          name: "Number"
        }
      },
      startTime: {
        serializedName: "properties.start_time",
        type: {
          name: "DateTime"
        }
      },
      totalProcessorTime: {
        serializedName: "properties.total_processor_time",
        type: {
          name: "String"
        }
      },
      userProcessorTime: {
        serializedName: "properties.user_processor_time",
        type: {
          name: "String"
        }
      },
      state: {
        serializedName: "properties.state",
        type: {
          name: "String"
        }
      },
      waitReason: {
        serializedName: "properties.wait_reason",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const ProcessModuleInfo: msRest.CompositeMapper = {
  serializedName: "ProcessModuleInfo",
  type: {
    name: "Composite",
    className: "ProcessModuleInfo",
    modelProperties: {
      ...ProxyOnlyResource.type.modelProperties,
      baseAddress: {
        serializedName: "properties.base_address",
        type: {
          name: "String"
        }
      },
      fileName: {
        serializedName: "properties.file_name",
        type: {
          name: "String"
        }
      },
      href: {
        serializedName: "properties.href",
        type: {
          name: "String"
        }
      },
      filePath: {
        serializedName: "properties.file_path",
        type: {
          name: "String"
        }
      },
      moduleMemorySize: {
        serializedName: "properties.module_memory_size",
        type: {
          name: "Number"
        }
      },
      fileVersion: {
        serializedName: "properties.file_version",
        type: {
          name: "String"
        }
      },
      fileDescription: {
        serializedName: "properties.file_description",
        type: {
          name: "String"
        }
      },
      product: {
        serializedName: "properties.product",
        type: {
          name: "String"
        }
      },
      productVersion: {
        serializedName: "properties.product_version",
        type: {
          name: "String"
        }
      },
      isDebug: {
        serializedName: "properties.is_debug",
        type: {
          name: "Boolean"
        }
      },
      language: {
        serializedName: "properties.language",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const ProcessInfo: msRest.CompositeMapper = {
  serializedName: "ProcessInfo",
  type: {
    name: "Composite",
    className: "ProcessInfo",
    modelProperties: {
      ...ProxyOnlyResource.type.modelProperties,
      identifier: {
        readOnly: true,
        serializedName: "properties.identifier",
        type: {
          name: "Number"
        }
      },
      deploymentName: {
        serializedName: "properties.deployment_name",
        type: {
          name: "String"
        }
      },
      href: {
        serializedName: "properties.href",
        type: {
          name: "String"
        }
      },
      minidump: {
        serializedName: "properties.minidump",
        type: {
          name: "String"
        }
      },
      isProfileRunning: {
        serializedName: "properties.is_profile_running",
        type: {
          name: "Boolean"
        }
      },
      isIisProfileRunning: {
        serializedName: "properties.is_iis_profile_running",
        type: {
          name: "Boolean"
        }
      },
      iisProfileTimeoutInSeconds: {
        serializedName: "properties.iis_profile_timeout_in_seconds",
        type: {
          name: "Number"
        }
      },
      parent: {
        serializedName: "properties.parent",
        type: {
          name: "String"
        }
      },
      children: {
        serializedName: "properties.children",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "String"
            }
          }
        }
      },
      threads: {
        serializedName: "properties.threads",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "ProcessThreadInfo"
            }
          }
        }
      },
      openFileHandles: {
        serializedName: "properties.open_file_handles",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "String"
            }
          }
        }
      },
      modules: {
        serializedName: "properties.modules",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "ProcessModuleInfo"
            }
          }
        }
      },
      fileName: {
        serializedName: "properties.file_name",
        type: {
          name: "String"
        }
      },
      commandLine: {
        serializedName: "properties.command_line",
        type: {
          name: "String"
        }
      },
      userName: {
        serializedName: "properties.user_name",
        type: {
          name: "String"
        }
      },
      handleCount: {
        serializedName: "properties.handle_count",
        type: {
          name: "Number"
        }
      },
      moduleCount: {
        serializedName: "properties.module_count",
        type: {
          name: "Number"
        }
      },
      threadCount: {
        serializedName: "properties.thread_count",
        type: {
          name: "Number"
        }
      },
      startTime: {
        serializedName: "properties.start_time",
        type: {
          name: "DateTime"
        }
      },
      totalCpuTime: {
        serializedName: "properties.total_cpu_time",
        type: {
          name: "String"
        }
      },
      userCpuTime: {
        serializedName: "properties.user_cpu_time",
        type: {
          name: "String"
        }
      },
      privilegedCpuTime: {
        serializedName: "properties.privileged_cpu_time",
        type: {
          name: "String"
        }
      },
      workingSet: {
        serializedName: "properties.working_set",
        type: {
          name: "Number"
        }
      },
      peakWorkingSet: {
        serializedName: "properties.peak_working_set",
        type: {
          name: "Number"
        }
      },
      privateMemory: {
        serializedName: "properties.private_memory",
        type: {
          name: "Number"
        }
      },
      virtualMemory: {
        serializedName: "properties.virtual_memory",
        type: {
          name: "Number"
        }
      },
      peakVirtualMemory: {
        serializedName: "properties.peak_virtual_memory",
        type: {
          name: "Number"
        }
      },
      pagedSystemMemory: {
        serializedName: "properties.paged_system_memory",
        type: {
          name: "Number"
        }
      },
      nonPagedSystemMemory: {
        serializedName: "properties.non_paged_system_memory",
        type: {
          name: "Number"
        }
      },
      pagedMemory: {
        serializedName: "properties.paged_memory",
        type: {
          name: "Number"
        }
      },
      peakPagedMemory: {
        serializedName: "properties.peak_paged_memory",
        type: {
          name: "Number"
        }
      },
      timeStamp: {
        serializedName: "properties.time_stamp",
        type: {
          name: "DateTime"
        }
      },
      environmentVariables: {
        serializedName: "properties.environment_variables",
        type: {
          name: "Dictionary",
          value: {
            type: {
              name: "String"
            }
          }
        }
      },
      isScmSite: {
        serializedName: "properties.is_scm_site",
        type: {
          name: "Boolean"
        }
      },
      isWebjob: {
        serializedName: "properties.is_webjob",
        type: {
          name: "Boolean"
        }
      },
      description: {
        serializedName: "properties.description",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const PublicCertificate: msRest.CompositeMapper = {
  serializedName: "PublicCertificate",
  type: {
    name: "Composite",
    className: "PublicCertificate",
    modelProperties: {
      ...ProxyOnlyResource.type.modelProperties,
      blob: {
        serializedName: "properties.blob",
        type: {
          name: "ByteArray"
        }
      },
      publicCertificateLocation: {
        serializedName: "properties.publicCertificateLocation",
        type: {
          name: "Enum",
          allowedValues: [
            "CurrentUserMy",
            "LocalMachineMy",
            "Unknown"
          ]
        }
      },
      thumbprint: {
        readOnly: true,
        serializedName: "properties.thumbprint",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const RestoreRequest: msRest.CompositeMapper = {
  serializedName: "RestoreRequest",
  type: {
    name: "Composite",
    className: "RestoreRequest",
    modelProperties: {
      ...ProxyOnlyResource.type.modelProperties,
      storageAccountUrl: {
        required: true,
        serializedName: "properties.storageAccountUrl",
        type: {
          name: "String"
        }
      },
      blobName: {
        serializedName: "properties.blobName",
        type: {
          name: "String"
        }
      },
      overwrite: {
        required: true,
        serializedName: "properties.overwrite",
        type: {
          name: "Boolean"
        }
      },
      siteName: {
        serializedName: "properties.siteName",
        type: {
          name: "String"
        }
      },
      databases: {
        serializedName: "properties.databases",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "DatabaseBackupSetting"
            }
          }
        }
      },
      ignoreConflictingHostNames: {
        serializedName: "properties.ignoreConflictingHostNames",
        defaultValue: false,
        type: {
          name: "Boolean"
        }
      },
      ignoreDatabases: {
        serializedName: "properties.ignoreDatabases",
        defaultValue: false,
        type: {
          name: "Boolean"
        }
      },
      appServicePlan: {
        serializedName: "properties.appServicePlan",
        type: {
          name: "String"
        }
      },
      operationType: {
        serializedName: "properties.operationType",
        defaultValue: 'Default',
        type: {
          name: "Enum",
          allowedValues: [
            "Default",
            "Clone",
            "Relocation",
            "Snapshot",
            "CloudFS"
          ]
        }
      },
      adjustConnectionStrings: {
        serializedName: "properties.adjustConnectionStrings",
        type: {
          name: "Boolean"
        }
      },
      hostingEnvironment: {
        serializedName: "properties.hostingEnvironment",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const SiteAuthSettings: msRest.CompositeMapper = {
  serializedName: "SiteAuthSettings",
  type: {
    name: "Composite",
    className: "SiteAuthSettings",
    modelProperties: {
      ...ProxyOnlyResource.type.modelProperties,
      enabled: {
        serializedName: "properties.enabled",
        type: {
          name: "Boolean"
        }
      },
      runtimeVersion: {
        serializedName: "properties.runtimeVersion",
        type: {
          name: "String"
        }
      },
      unauthenticatedClientAction: {
        serializedName: "properties.unauthenticatedClientAction",
        type: {
          name: "Enum",
          allowedValues: [
            "RedirectToLoginPage",
            "AllowAnonymous"
          ]
        }
      },
      tokenStoreEnabled: {
        serializedName: "properties.tokenStoreEnabled",
        type: {
          name: "Boolean"
        }
      },
      allowedExternalRedirectUrls: {
        serializedName: "properties.allowedExternalRedirectUrls",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "String"
            }
          }
        }
      },
      defaultProvider: {
        serializedName: "properties.defaultProvider",
        type: {
          name: "Enum",
          allowedValues: [
            "AzureActiveDirectory",
            "Facebook",
            "Google",
            "MicrosoftAccount",
            "Twitter"
          ]
        }
      },
      tokenRefreshExtensionHours: {
        serializedName: "properties.tokenRefreshExtensionHours",
        type: {
          name: "Number"
        }
      },
      clientId: {
        serializedName: "properties.clientId",
        type: {
          name: "String"
        }
      },
      clientSecret: {
        serializedName: "properties.clientSecret",
        type: {
          name: "String"
        }
      },
      clientSecretCertificateThumbprint: {
        serializedName: "properties.clientSecretCertificateThumbprint",
        type: {
          name: "String"
        }
      },
      issuer: {
        serializedName: "properties.issuer",
        type: {
          name: "String"
        }
      },
      validateIssuer: {
        serializedName: "properties.validateIssuer",
        type: {
          name: "Boolean"
        }
      },
      allowedAudiences: {
        serializedName: "properties.allowedAudiences",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "String"
            }
          }
        }
      },
      additionalLoginParams: {
        serializedName: "properties.additionalLoginParams",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "String"
            }
          }
        }
      },
      googleClientId: {
        serializedName: "properties.googleClientId",
        type: {
          name: "String"
        }
      },
      googleClientSecret: {
        serializedName: "properties.googleClientSecret",
        type: {
          name: "String"
        }
      },
      googleOAuthScopes: {
        serializedName: "properties.googleOAuthScopes",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "String"
            }
          }
        }
      },
      facebookAppId: {
        serializedName: "properties.facebookAppId",
        type: {
          name: "String"
        }
      },
      facebookAppSecret: {
        serializedName: "properties.facebookAppSecret",
        type: {
          name: "String"
        }
      },
      facebookOAuthScopes: {
        serializedName: "properties.facebookOAuthScopes",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "String"
            }
          }
        }
      },
      twitterConsumerKey: {
        serializedName: "properties.twitterConsumerKey",
        type: {
          name: "String"
        }
      },
      twitterConsumerSecret: {
        serializedName: "properties.twitterConsumerSecret",
        type: {
          name: "String"
        }
      },
      microsoftAccountClientId: {
        serializedName: "properties.microsoftAccountClientId",
        type: {
          name: "String"
        }
      },
      microsoftAccountClientSecret: {
        serializedName: "properties.microsoftAccountClientSecret",
        type: {
          name: "String"
        }
      },
      microsoftAccountOAuthScopes: {
        serializedName: "properties.microsoftAccountOAuthScopes",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "String"
            }
          }
        }
      }
    }
  }
};

export const SiteCloneabilityCriterion: msRest.CompositeMapper = {
  serializedName: "SiteCloneabilityCriterion",
  type: {
    name: "Composite",
    className: "SiteCloneabilityCriterion",
    modelProperties: {
      name: {
        serializedName: "name",
        type: {
          name: "String"
        }
      },
      description: {
        serializedName: "description",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const SiteCloneability: msRest.CompositeMapper = {
  serializedName: "SiteCloneability",
  type: {
    name: "Composite",
    className: "SiteCloneability",
    modelProperties: {
      result: {
        serializedName: "result",
        type: {
          name: "Enum",
          allowedValues: [
            "Cloneable",
            "PartiallyCloneable",
            "NotCloneable"
          ]
        }
      },
      blockingFeatures: {
        serializedName: "blockingFeatures",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "SiteCloneabilityCriterion"
            }
          }
        }
      },
      unsupportedFeatures: {
        serializedName: "unsupportedFeatures",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "SiteCloneabilityCriterion"
            }
          }
        }
      },
      blockingCharacteristics: {
        serializedName: "blockingCharacteristics",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "SiteCloneabilityCriterion"
            }
          }
        }
      }
    }
  }
};

export const SiteConfigResource: msRest.CompositeMapper = {
  serializedName: "SiteConfigResource",
  type: {
    name: "Composite",
    className: "SiteConfigResource",
    modelProperties: {
      ...ProxyOnlyResource.type.modelProperties,
      numberOfWorkers: {
        serializedName: "properties.numberOfWorkers",
        type: {
          name: "Number"
        }
      },
      defaultDocuments: {
        serializedName: "properties.defaultDocuments",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "String"
            }
          }
        }
      },
      netFrameworkVersion: {
        serializedName: "properties.netFrameworkVersion",
        defaultValue: 'v4.6',
        type: {
          name: "String"
        }
      },
      phpVersion: {
        serializedName: "properties.phpVersion",
        type: {
          name: "String"
        }
      },
      pythonVersion: {
        serializedName: "properties.pythonVersion",
        type: {
          name: "String"
        }
      },
      nodeVersion: {
        serializedName: "properties.nodeVersion",
        type: {
          name: "String"
        }
      },
      linuxFxVersion: {
        serializedName: "properties.linuxFxVersion",
        type: {
          name: "String"
        }
      },
      windowsFxVersion: {
        serializedName: "properties.windowsFxVersion",
        type: {
          name: "String"
        }
      },
      requestTracingEnabled: {
        serializedName: "properties.requestTracingEnabled",
        type: {
          name: "Boolean"
        }
      },
      requestTracingExpirationTime: {
        serializedName: "properties.requestTracingExpirationTime",
        type: {
          name: "DateTime"
        }
      },
      remoteDebuggingEnabled: {
        serializedName: "properties.remoteDebuggingEnabled",
        type: {
          name: "Boolean"
        }
      },
      remoteDebuggingVersion: {
        serializedName: "properties.remoteDebuggingVersion",
        type: {
          name: "String"
        }
      },
      httpLoggingEnabled: {
        serializedName: "properties.httpLoggingEnabled",
        type: {
          name: "Boolean"
        }
      },
      logsDirectorySizeLimit: {
        serializedName: "properties.logsDirectorySizeLimit",
        type: {
          name: "Number"
        }
      },
      detailedErrorLoggingEnabled: {
        serializedName: "properties.detailedErrorLoggingEnabled",
        type: {
          name: "Boolean"
        }
      },
      publishingUsername: {
        serializedName: "properties.publishingUsername",
        type: {
          name: "String"
        }
      },
      appSettings: {
        serializedName: "properties.appSettings",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "NameValuePair"
            }
          }
        }
      },
      connectionStrings: {
        serializedName: "properties.connectionStrings",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "ConnStringInfo"
            }
          }
        }
      },
      machineKey: {
        readOnly: true,
        serializedName: "properties.machineKey",
        type: {
          name: "Composite",
          className: "SiteMachineKey"
        }
      },
      handlerMappings: {
        serializedName: "properties.handlerMappings",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "HandlerMapping"
            }
          }
        }
      },
      documentRoot: {
        serializedName: "properties.documentRoot",
        type: {
          name: "String"
        }
      },
      scmType: {
        serializedName: "properties.scmType",
        type: {
          name: "String"
        }
      },
      use32BitWorkerProcess: {
        serializedName: "properties.use32BitWorkerProcess",
        type: {
          name: "Boolean"
        }
      },
      webSocketsEnabled: {
        serializedName: "properties.webSocketsEnabled",
        type: {
          name: "Boolean"
        }
      },
      alwaysOn: {
        serializedName: "properties.alwaysOn",
        type: {
          name: "Boolean"
        }
      },
      javaVersion: {
        serializedName: "properties.javaVersion",
        type: {
          name: "String"
        }
      },
      javaContainer: {
        serializedName: "properties.javaContainer",
        type: {
          name: "String"
        }
      },
      javaContainerVersion: {
        serializedName: "properties.javaContainerVersion",
        type: {
          name: "String"
        }
      },
      appCommandLine: {
        serializedName: "properties.appCommandLine",
        type: {
          name: "String"
        }
      },
      managedPipelineMode: {
        serializedName: "properties.managedPipelineMode",
        type: {
          name: "Enum",
          allowedValues: [
            "Integrated",
            "Classic"
          ]
        }
      },
      virtualApplications: {
        serializedName: "properties.virtualApplications",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "VirtualApplication"
            }
          }
        }
      },
      loadBalancing: {
        serializedName: "properties.loadBalancing",
        type: {
          name: "Enum",
          allowedValues: [
            "WeightedRoundRobin",
            "LeastRequests",
            "LeastResponseTime",
            "WeightedTotalTraffic",
            "RequestHash"
          ]
        }
      },
      experiments: {
        serializedName: "properties.experiments",
        type: {
          name: "Composite",
          className: "Experiments"
        }
      },
      limits: {
        serializedName: "properties.limits",
        type: {
          name: "Composite",
          className: "SiteLimits"
        }
      },
      autoHealEnabled: {
        serializedName: "properties.autoHealEnabled",
        type: {
          name: "Boolean"
        }
      },
      autoHealRules: {
        serializedName: "properties.autoHealRules",
        type: {
          name: "Composite",
          className: "AutoHealRules"
        }
      },
      tracingOptions: {
        serializedName: "properties.tracingOptions",
        type: {
          name: "String"
        }
      },
      vnetName: {
        serializedName: "properties.vnetName",
        type: {
          name: "String"
        }
      },
      cors: {
        serializedName: "properties.cors",
        type: {
          name: "Composite",
          className: "CorsSettings"
        }
      },
      push: {
        serializedName: "properties.push",
        type: {
          name: "Composite",
          className: "PushSettings"
        }
      },
      apiDefinition: {
        serializedName: "properties.apiDefinition",
        type: {
          name: "Composite",
          className: "ApiDefinitionInfo"
        }
      },
      apiManagementConfig: {
        serializedName: "properties.apiManagementConfig",
        type: {
          name: "Composite",
          className: "ApiManagementConfig"
        }
      },
      autoSwapSlotName: {
        serializedName: "properties.autoSwapSlotName",
        type: {
          name: "String"
        }
      },
      localMySqlEnabled: {
        serializedName: "properties.localMySqlEnabled",
        defaultValue: false,
        type: {
          name: "Boolean"
        }
      },
      managedServiceIdentityId: {
        serializedName: "properties.managedServiceIdentityId",
        type: {
          name: "Number"
        }
      },
      xManagedServiceIdentityId: {
        serializedName: "properties.xManagedServiceIdentityId",
        type: {
          name: "Number"
        }
      },
      ipSecurityRestrictions: {
        serializedName: "properties.ipSecurityRestrictions",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "IpSecurityRestriction"
            }
          }
        }
      },
      scmIpSecurityRestrictions: {
        serializedName: "properties.scmIpSecurityRestrictions",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "IpSecurityRestriction"
            }
          }
        }
      },
      scmIpSecurityRestrictionsUseMain: {
        serializedName: "properties.scmIpSecurityRestrictionsUseMain",
        type: {
          name: "Boolean"
        }
      },
      http20Enabled: {
        serializedName: "properties.http20Enabled",
        defaultValue: true,
        type: {
          name: "Boolean"
        }
      },
      minTlsVersion: {
        serializedName: "properties.minTlsVersion",
        type: {
          name: "String"
        }
      },
      ftpsState: {
        serializedName: "properties.ftpsState",
        type: {
          name: "String"
        }
      },
      preWarmedInstanceCount: {
        serializedName: "properties.preWarmedInstanceCount",
        constraints: {
          InclusiveMaximum: 10,
          InclusiveMinimum: 0
        },
        type: {
          name: "Number"
        }
      },
      healthCheckPath: {
        serializedName: "properties.healthCheckPath",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const SiteConfigurationSnapshotInfo: msRest.CompositeMapper = {
  serializedName: "SiteConfigurationSnapshotInfo",
  type: {
    name: "Composite",
    className: "SiteConfigurationSnapshotInfo",
    modelProperties: {
      ...ProxyOnlyResource.type.modelProperties,
      time: {
        readOnly: true,
        serializedName: "properties.time",
        type: {
          name: "DateTime"
        }
      },
      snapshotId: {
        readOnly: true,
        serializedName: "properties.snapshotId",
        type: {
          name: "Number"
        }
      }
    }
  }
};

export const SiteExtensionInfo: msRest.CompositeMapper = {
  serializedName: "SiteExtensionInfo",
  type: {
    name: "Composite",
    className: "SiteExtensionInfo",
    modelProperties: {
      ...ProxyOnlyResource.type.modelProperties,
      extensionId: {
        serializedName: "properties.extension_id",
        type: {
          name: "String"
        }
      },
      title: {
        serializedName: "properties.title",
        type: {
          name: "String"
        }
      },
      extensionType: {
        serializedName: "properties.extension_type",
        type: {
          name: "Enum",
          allowedValues: [
            "Gallery",
            "WebRoot"
          ]
        }
      },
      summary: {
        serializedName: "properties.summary",
        type: {
          name: "String"
        }
      },
      description: {
        serializedName: "properties.description",
        type: {
          name: "String"
        }
      },
      version: {
        serializedName: "properties.version",
        type: {
          name: "String"
        }
      },
      extensionUrl: {
        serializedName: "properties.extension_url",
        type: {
          name: "String"
        }
      },
      projectUrl: {
        serializedName: "properties.project_url",
        type: {
          name: "String"
        }
      },
      iconUrl: {
        serializedName: "properties.icon_url",
        type: {
          name: "String"
        }
      },
      licenseUrl: {
        serializedName: "properties.license_url",
        type: {
          name: "String"
        }
      },
      feedUrl: {
        serializedName: "properties.feed_url",
        type: {
          name: "String"
        }
      },
      authors: {
        serializedName: "properties.authors",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "String"
            }
          }
        }
      },
      installerCommandLineParams: {
        serializedName: "properties.installer_command_line_params",
        type: {
          name: "String"
        }
      },
      publishedDateTime: {
        serializedName: "properties.published_date_time",
        type: {
          name: "DateTime"
        }
      },
      downloadCount: {
        serializedName: "properties.download_count",
        type: {
          name: "Number"
        }
      },
      localIsLatestVersion: {
        serializedName: "properties.local_is_latest_version",
        type: {
          name: "Boolean"
        }
      },
      localPath: {
        serializedName: "properties.local_path",
        type: {
          name: "String"
        }
      },
      installedDateTime: {
        serializedName: "properties.installed_date_time",
        type: {
          name: "DateTime"
        }
      },
      provisioningState: {
        serializedName: "properties.provisioningState",
        type: {
          name: "String"
        }
      },
      comment: {
        serializedName: "properties.comment",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const SiteInstance: msRest.CompositeMapper = {
  serializedName: "SiteInstance",
  type: {
    name: "Composite",
    className: "SiteInstance",
    modelProperties: {
      ...ProxyOnlyResource.type.modelProperties,
      siteInstanceName: {
        readOnly: true,
        serializedName: "properties.siteInstanceName",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const SiteLogsConfig: msRest.CompositeMapper = {
  serializedName: "SiteLogsConfig",
  type: {
    name: "Composite",
    className: "SiteLogsConfig",
    modelProperties: {
      ...ProxyOnlyResource.type.modelProperties,
      applicationLogs: {
        serializedName: "properties.applicationLogs",
        type: {
          name: "Composite",
          className: "ApplicationLogsConfig"
        }
      },
      httpLogs: {
        serializedName: "properties.httpLogs",
        type: {
          name: "Composite",
          className: "HttpLogsConfig"
        }
      },
      failedRequestsTracing: {
        serializedName: "properties.failedRequestsTracing",
        type: {
          name: "Composite",
          className: "EnabledConfig"
        }
      },
      detailedErrorMessages: {
        serializedName: "properties.detailedErrorMessages",
        type: {
          name: "Composite",
          className: "EnabledConfig"
        }
      }
    }
  }
};

export const SitePatchResource: msRest.CompositeMapper = {
  serializedName: "SitePatchResource",
  type: {
    name: "Composite",
    className: "SitePatchResource",
    modelProperties: {
      ...ProxyOnlyResource.type.modelProperties,
      state: {
        readOnly: true,
        serializedName: "properties.state",
        type: {
          name: "String"
        }
      },
      hostNames: {
        readOnly: true,
        serializedName: "properties.hostNames",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "String"
            }
          }
        }
      },
      repositorySiteName: {
        readOnly: true,
        serializedName: "properties.repositorySiteName",
        type: {
          name: "String"
        }
      },
      usageState: {
        readOnly: true,
        serializedName: "properties.usageState",
        type: {
          name: "Enum",
          allowedValues: [
            "Normal",
            "Exceeded"
          ]
        }
      },
      enabled: {
        serializedName: "properties.enabled",
        type: {
          name: "Boolean"
        }
      },
      enabledHostNames: {
        readOnly: true,
        serializedName: "properties.enabledHostNames",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "String"
            }
          }
        }
      },
      availabilityState: {
        readOnly: true,
        serializedName: "properties.availabilityState",
        type: {
          name: "Enum",
          allowedValues: [
            "Normal",
            "Limited",
            "DisasterRecoveryMode"
          ]
        }
      },
      hostNameSslStates: {
        serializedName: "properties.hostNameSslStates",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "HostNameSslState"
            }
          }
        }
      },
      serverFarmId: {
        serializedName: "properties.serverFarmId",
        type: {
          name: "String"
        }
      },
      reserved: {
        serializedName: "properties.reserved",
        defaultValue: false,
        type: {
          name: "Boolean"
        }
      },
      isXenon: {
        serializedName: "properties.isXenon",
        defaultValue: false,
        type: {
          name: "Boolean"
        }
      },
      hyperV: {
        serializedName: "properties.hyperV",
        defaultValue: false,
        type: {
          name: "Boolean"
        }
      },
      lastModifiedTimeUtc: {
        readOnly: true,
        serializedName: "properties.lastModifiedTimeUtc",
        type: {
          name: "DateTime"
        }
      },
      siteConfig: {
        serializedName: "properties.siteConfig",
        type: {
          name: "Composite",
          className: "SiteConfig"
        }
      },
      trafficManagerHostNames: {
        readOnly: true,
        serializedName: "properties.trafficManagerHostNames",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "String"
            }
          }
        }
      },
      scmSiteAlsoStopped: {
        serializedName: "properties.scmSiteAlsoStopped",
        defaultValue: false,
        type: {
          name: "Boolean"
        }
      },
      targetSwapSlot: {
        readOnly: true,
        serializedName: "properties.targetSwapSlot",
        type: {
          name: "String"
        }
      },
      hostingEnvironmentProfile: {
        serializedName: "properties.hostingEnvironmentProfile",
        type: {
          name: "Composite",
          className: "HostingEnvironmentProfile"
        }
      },
      clientAffinityEnabled: {
        serializedName: "properties.clientAffinityEnabled",
        type: {
          name: "Boolean"
        }
      },
      clientCertEnabled: {
        serializedName: "properties.clientCertEnabled",
        type: {
          name: "Boolean"
        }
      },
      clientCertExclusionPaths: {
        serializedName: "properties.clientCertExclusionPaths",
        type: {
          name: "String"
        }
      },
      hostNamesDisabled: {
        serializedName: "properties.hostNamesDisabled",
        type: {
          name: "Boolean"
        }
      },
      outboundIpAddresses: {
        readOnly: true,
        serializedName: "properties.outboundIpAddresses",
        type: {
          name: "String"
        }
      },
      possibleOutboundIpAddresses: {
        readOnly: true,
        serializedName: "properties.possibleOutboundIpAddresses",
        type: {
          name: "String"
        }
      },
      containerSize: {
        serializedName: "properties.containerSize",
        type: {
          name: "Number"
        }
      },
      dailyMemoryTimeQuota: {
        serializedName: "properties.dailyMemoryTimeQuota",
        type: {
          name: "Number"
        }
      },
      suspendedTill: {
        readOnly: true,
        serializedName: "properties.suspendedTill",
        type: {
          name: "DateTime"
        }
      },
      maxNumberOfWorkers: {
        readOnly: true,
        serializedName: "properties.maxNumberOfWorkers",
        type: {
          name: "Number"
        }
      },
      cloningInfo: {
        serializedName: "properties.cloningInfo",
        type: {
          name: "Composite",
          className: "CloningInfo"
        }
      },
      resourceGroup: {
        readOnly: true,
        serializedName: "properties.resourceGroup",
        type: {
          name: "String"
        }
      },
      isDefaultContainer: {
        readOnly: true,
        serializedName: "properties.isDefaultContainer",
        type: {
          name: "Boolean"
        }
      },
      defaultHostName: {
        readOnly: true,
        serializedName: "properties.defaultHostName",
        type: {
          name: "String"
        }
      },
      slotSwapStatus: {
        readOnly: true,
        serializedName: "properties.slotSwapStatus",
        type: {
          name: "Composite",
          className: "SlotSwapStatus"
        }
      },
      httpsOnly: {
        serializedName: "properties.httpsOnly",
        type: {
          name: "Boolean"
        }
      },
      redundancyMode: {
        serializedName: "properties.redundancyMode",
        type: {
          name: "Enum",
          allowedValues: [
            "None",
            "Manual",
            "Failover",
            "ActiveActive",
            "GeoRedundant"
          ]
        }
      },
      inProgressOperationId: {
        readOnly: true,
        serializedName: "properties.inProgressOperationId",
        type: {
          name: "Uuid"
        }
      },
      identity: {
        serializedName: "identity",
        type: {
          name: "Composite",
          className: "ManagedServiceIdentity"
        }
      }
    }
  }
};

export const SitePhpErrorLogFlag: msRest.CompositeMapper = {
  serializedName: "SitePhpErrorLogFlag",
  type: {
    name: "Composite",
    className: "SitePhpErrorLogFlag",
    modelProperties: {
      ...ProxyOnlyResource.type.modelProperties,
      localLogErrors: {
        serializedName: "properties.localLogErrors",
        type: {
          name: "String"
        }
      },
      masterLogErrors: {
        serializedName: "properties.masterLogErrors",
        type: {
          name: "String"
        }
      },
      localLogErrorsMaxLength: {
        serializedName: "properties.localLogErrorsMaxLength",
        type: {
          name: "String"
        }
      },
      masterLogErrorsMaxLength: {
        serializedName: "properties.masterLogErrorsMaxLength",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const SiteSourceControl: msRest.CompositeMapper = {
  serializedName: "SiteSourceControl",
  type: {
    name: "Composite",
    className: "SiteSourceControl",
    modelProperties: {
      ...ProxyOnlyResource.type.modelProperties,
      repoUrl: {
        serializedName: "properties.repoUrl",
        type: {
          name: "String"
        }
      },
      branch: {
        serializedName: "properties.branch",
        type: {
          name: "String"
        }
      },
      isManualIntegration: {
        serializedName: "properties.isManualIntegration",
        type: {
          name: "Boolean"
        }
      },
      deploymentRollbackEnabled: {
        serializedName: "properties.deploymentRollbackEnabled",
        type: {
          name: "Boolean"
        }
      },
      isMercurial: {
        serializedName: "properties.isMercurial",
        type: {
          name: "Boolean"
        }
      }
    }
  }
};

export const SlotConfigNamesResource: msRest.CompositeMapper = {
  serializedName: "SlotConfigNamesResource",
  type: {
    name: "Composite",
    className: "SlotConfigNamesResource",
    modelProperties: {
      ...ProxyOnlyResource.type.modelProperties,
      connectionStringNames: {
        serializedName: "properties.connectionStringNames",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "String"
            }
          }
        }
      },
      appSettingNames: {
        serializedName: "properties.appSettingNames",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "String"
            }
          }
        }
      },
      azureStorageConfigNames: {
        serializedName: "properties.azureStorageConfigNames",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "String"
            }
          }
        }
      }
    }
  }
};

export const SlotDifference: msRest.CompositeMapper = {
  serializedName: "SlotDifference",
  type: {
    name: "Composite",
    className: "SlotDifference",
    modelProperties: {
      ...ProxyOnlyResource.type.modelProperties,
      level: {
        readOnly: true,
        serializedName: "properties.level",
        type: {
          name: "String"
        }
      },
      settingType: {
        readOnly: true,
        serializedName: "properties.settingType",
        type: {
          name: "String"
        }
      },
      diffRule: {
        readOnly: true,
        serializedName: "properties.diffRule",
        type: {
          name: "String"
        }
      },
      settingName: {
        readOnly: true,
        serializedName: "properties.settingName",
        type: {
          name: "String"
        }
      },
      valueInCurrentSlot: {
        readOnly: true,
        serializedName: "properties.valueInCurrentSlot",
        type: {
          name: "String"
        }
      },
      valueInTargetSlot: {
        readOnly: true,
        serializedName: "properties.valueInTargetSlot",
        type: {
          name: "String"
        }
      },
      description: {
        readOnly: true,
        serializedName: "properties.description",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const SnapshotRecoverySource: msRest.CompositeMapper = {
  serializedName: "SnapshotRecoverySource",
  type: {
    name: "Composite",
    className: "SnapshotRecoverySource",
    modelProperties: {
      location: {
        serializedName: "location",
        type: {
          name: "String"
        }
      },
      id: {
        serializedName: "id",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const SnapshotRestoreRequest: msRest.CompositeMapper = {
  serializedName: "SnapshotRestoreRequest",
  type: {
    name: "Composite",
    className: "SnapshotRestoreRequest",
    modelProperties: {
      ...ProxyOnlyResource.type.modelProperties,
      snapshotTime: {
        serializedName: "properties.snapshotTime",
        type: {
          name: "String"
        }
      },
      recoverySource: {
        serializedName: "properties.recoverySource",
        type: {
          name: "Composite",
          className: "SnapshotRecoverySource"
        }
      },
      overwrite: {
        required: true,
        serializedName: "properties.overwrite",
        type: {
          name: "Boolean"
        }
      },
      recoverConfiguration: {
        serializedName: "properties.recoverConfiguration",
        type: {
          name: "Boolean"
        }
      },
      ignoreConflictingHostNames: {
        serializedName: "properties.ignoreConflictingHostNames",
        type: {
          name: "Boolean"
        }
      },
      useDRSecondary: {
        serializedName: "properties.useDRSecondary",
        type: {
          name: "Boolean"
        }
      }
    }
  }
};

export const StorageMigrationOptions: msRest.CompositeMapper = {
  serializedName: "StorageMigrationOptions",
  type: {
    name: "Composite",
    className: "StorageMigrationOptions",
    modelProperties: {
      ...ProxyOnlyResource.type.modelProperties,
      azurefilesConnectionString: {
        required: true,
        serializedName: "properties.azurefilesConnectionString",
        type: {
          name: "String"
        }
      },
      azurefilesShare: {
        required: true,
        serializedName: "properties.azurefilesShare",
        type: {
          name: "String"
        }
      },
      switchSiteAfterMigration: {
        serializedName: "properties.switchSiteAfterMigration",
        defaultValue: false,
        type: {
          name: "Boolean"
        }
      },
      blockWriteAccessToSite: {
        serializedName: "properties.blockWriteAccessToSite",
        defaultValue: false,
        type: {
          name: "Boolean"
        }
      }
    }
  }
};

export const StorageMigrationResponse: msRest.CompositeMapper = {
  serializedName: "StorageMigrationResponse",
  type: {
    name: "Composite",
    className: "StorageMigrationResponse",
    modelProperties: {
      ...ProxyOnlyResource.type.modelProperties,
      operationId: {
        readOnly: true,
        serializedName: "properties.operationId",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const SwiftVirtualNetwork: msRest.CompositeMapper = {
  serializedName: "SwiftVirtualNetwork",
  type: {
    name: "Composite",
    className: "SwiftVirtualNetwork",
    modelProperties: {
      ...ProxyOnlyResource.type.modelProperties,
      subnetResourceId: {
        serializedName: "properties.subnetResourceId",
        type: {
          name: "String"
        }
      },
      swiftSupported: {
        serializedName: "properties.swiftSupported",
        type: {
          name: "Boolean"
        }
      }
    }
  }
};

export const TriggeredJobRun: msRest.CompositeMapper = {
  serializedName: "TriggeredJobRun",
  type: {
    name: "Composite",
    className: "TriggeredJobRun",
    modelProperties: {
      ...ProxyOnlyResource.type.modelProperties,
      webJobId: {
        serializedName: "properties.web_job_id",
        type: {
          name: "String"
        }
      },
      webJobName: {
        serializedName: "properties.web_job_name",
        type: {
          name: "String"
        }
      },
      status: {
        serializedName: "properties.status",
        type: {
          name: "Enum",
          allowedValues: [
            "Success",
            "Failed",
            "Error"
          ]
        }
      },
      startTime: {
        serializedName: "properties.start_time",
        type: {
          name: "DateTime"
        }
      },
      endTime: {
        serializedName: "properties.end_time",
        type: {
          name: "DateTime"
        }
      },
      duration: {
        serializedName: "properties.duration",
        type: {
          name: "String"
        }
      },
      outputUrl: {
        serializedName: "properties.output_url",
        type: {
          name: "String"
        }
      },
      errorUrl: {
        serializedName: "properties.error_url",
        type: {
          name: "String"
        }
      },
      url: {
        serializedName: "properties.url",
        type: {
          name: "String"
        }
      },
      jobName: {
        serializedName: "properties.job_name",
        type: {
          name: "String"
        }
      },
      trigger: {
        serializedName: "properties.trigger",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const TriggeredJobHistory: msRest.CompositeMapper = {
  serializedName: "TriggeredJobHistory",
  type: {
    name: "Composite",
    className: "TriggeredJobHistory",
    modelProperties: {
      ...ProxyOnlyResource.type.modelProperties,
      runs: {
        serializedName: "properties.runs",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "TriggeredJobRun"
            }
          }
        }
      }
    }
  }
};

export const TriggeredWebJob: msRest.CompositeMapper = {
  serializedName: "TriggeredWebJob",
  type: {
    name: "Composite",
    className: "TriggeredWebJob",
    modelProperties: {
      ...ProxyOnlyResource.type.modelProperties,
      latestRun: {
        serializedName: "properties.latest_run",
        type: {
          name: "Composite",
          className: "TriggeredJobRun"
        }
      },
      historyUrl: {
        serializedName: "properties.history_url",
        type: {
          name: "String"
        }
      },
      schedulerLogsUrl: {
        serializedName: "properties.scheduler_logs_url",
        type: {
          name: "String"
        }
      },
      runCommand: {
        serializedName: "properties.run_command",
        type: {
          name: "String"
        }
      },
      url: {
        serializedName: "properties.url",
        type: {
          name: "String"
        }
      },
      extraInfoUrl: {
        serializedName: "properties.extra_info_url",
        type: {
          name: "String"
        }
      },
      webJobType: {
        serializedName: "properties.web_job_type",
        type: {
          name: "Enum",
          allowedValues: [
            "Continuous",
            "Triggered"
          ]
        }
      },
      error: {
        serializedName: "properties.error",
        type: {
          name: "String"
        }
      },
      usingSdk: {
        serializedName: "properties.using_sdk",
        type: {
          name: "Boolean"
        }
      },
      settings: {
        serializedName: "properties.settings",
        type: {
          name: "Dictionary",
          value: {
            type: {
              name: "Object"
            }
          }
        }
      }
    }
  }
};

export const WebJob: msRest.CompositeMapper = {
  serializedName: "WebJob",
  type: {
    name: "Composite",
    className: "WebJob",
    modelProperties: {
      ...ProxyOnlyResource.type.modelProperties,
      runCommand: {
        serializedName: "properties.run_command",
        type: {
          name: "String"
        }
      },
      url: {
        serializedName: "properties.url",
        type: {
          name: "String"
        }
      },
      extraInfoUrl: {
        serializedName: "properties.extra_info_url",
        type: {
          name: "String"
        }
      },
      webJobType: {
        serializedName: "properties.web_job_type",
        type: {
          name: "Enum",
          allowedValues: [
            "Continuous",
            "Triggered"
          ]
        }
      },
      error: {
        serializedName: "properties.error",
        type: {
          name: "String"
        }
      },
      usingSdk: {
        serializedName: "properties.using_sdk",
        type: {
          name: "Boolean"
        }
      },
      settings: {
        serializedName: "properties.settings",
        type: {
          name: "Dictionary",
          value: {
            type: {
              name: "Object"
            }
          }
        }
      }
    }
  }
};

export const WebSiteInstanceStatus: msRest.CompositeMapper = {
  serializedName: "WebSiteInstanceStatus",
  type: {
    name: "Composite",
    className: "WebSiteInstanceStatus",
    modelProperties: {
      ...ProxyOnlyResource.type.modelProperties,
      state: {
        serializedName: "properties.state",
        type: {
          name: "Enum",
          allowedValues: [
            "READY",
            "STOPPED",
            "UNKNOWN"
          ]
        }
      },
      statusUrl: {
        serializedName: "properties.statusUrl",
        type: {
          name: "String"
        }
      },
      detectorUrl: {
        serializedName: "properties.detectorUrl",
        type: {
          name: "String"
        }
      },
      consoleUrl: {
        serializedName: "properties.consoleUrl",
        type: {
          name: "String"
        }
      },
      containers: {
        serializedName: "properties.containers",
        type: {
          name: "Dictionary",
          value: {
            type: {
              name: "Composite",
              className: "ContainerInfo"
            }
          }
        }
      }
    }
  }
};

export const StaticSiteBuildProperties: msRest.CompositeMapper = {
  serializedName: "StaticSiteBuildProperties",
  type: {
    name: "Composite",
    className: "StaticSiteBuildProperties",
    modelProperties: {
      appLocation: {
        serializedName: "appLocation",
        type: {
          name: "String"
        }
      },
      apiLocation: {
        serializedName: "apiLocation",
        type: {
          name: "String"
        }
      },
      appArtifactLocation: {
        serializedName: "appArtifactLocation",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const StaticSiteARMResource: msRest.CompositeMapper = {
  serializedName: "StaticSiteARMResource",
  type: {
    name: "Composite",
    className: "StaticSiteARMResource",
    modelProperties: {
      ...Resource.type.modelProperties,
      defaultHostname: {
        readOnly: true,
        serializedName: "properties.defaultHostname",
        type: {
          name: "String"
        }
      },
      repositoryUrl: {
        serializedName: "properties.repositoryUrl",
        type: {
          name: "String"
        }
      },
      branch: {
        serializedName: "properties.branch",
        type: {
          name: "String"
        }
      },
      customDomains: {
        readOnly: true,
        serializedName: "properties.customDomains",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "String"
            }
          }
        }
      },
      repositoryToken: {
        serializedName: "properties.repositoryToken",
        type: {
          name: "String"
        }
      },
      buildProperties: {
        serializedName: "properties.buildProperties",
        type: {
          name: "Composite",
          className: "StaticSiteBuildProperties"
        }
      },
      sku: {
        serializedName: "sku",
        type: {
          name: "Composite",
          className: "SkuDescription"
        }
      }
    }
  }
};

export const StaticSiteBuildARMResource: msRest.CompositeMapper = {
  serializedName: "StaticSiteBuildARMResource",
  type: {
    name: "Composite",
    className: "StaticSiteBuildARMResource",
    modelProperties: {
      ...ProxyOnlyResource.type.modelProperties,
      buildId: {
        readOnly: true,
        serializedName: "properties.buildId",
        type: {
          name: "String"
        }
      },
      sourceBranch: {
        readOnly: true,
        serializedName: "properties.sourceBranch",
        type: {
          name: "String"
        }
      },
      pullRequestTitle: {
        readOnly: true,
        serializedName: "properties.pullRequestTitle",
        type: {
          name: "String"
        }
      },
      hostname: {
        readOnly: true,
        serializedName: "properties.hostname",
        type: {
          name: "String"
        }
      },
      createdTimeUtc: {
        readOnly: true,
        serializedName: "properties.createdTimeUtc",
        type: {
          name: "DateTime"
        }
      },
      lastUpdatedOn: {
        readOnly: true,
        serializedName: "properties.lastUpdatedOn",
        type: {
          name: "DateTime"
        }
      },
      status: {
        readOnly: true,
        serializedName: "properties.status",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const StaticSiteCustomDomainOverviewARMResource: msRest.CompositeMapper = {
  serializedName: "StaticSiteCustomDomainOverviewARMResource",
  type: {
    name: "Composite",
    className: "StaticSiteCustomDomainOverviewARMResource",
    modelProperties: {
      ...ProxyOnlyResource.type.modelProperties,
      domainName: {
        readOnly: true,
        serializedName: "properties.domainName",
        type: {
          name: "String"
        }
      },
      createdOn: {
        readOnly: true,
        serializedName: "properties.createdOn",
        type: {
          name: "DateTime"
        }
      }
    }
  }
};

export const StaticSiteFunctionOverviewARMResource: msRest.CompositeMapper = {
  serializedName: "StaticSiteFunctionOverviewARMResource",
  type: {
    name: "Composite",
    className: "StaticSiteFunctionOverviewARMResource",
    modelProperties: {
      ...ProxyOnlyResource.type.modelProperties,
      functionName: {
        readOnly: true,
        serializedName: "properties.functionName",
        type: {
          name: "String"
        }
      },
      triggerType: {
        readOnly: true,
        serializedName: "properties.triggerType",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const StaticSitePatchResource: msRest.CompositeMapper = {
  serializedName: "StaticSitePatchResource",
  type: {
    name: "Composite",
    className: "StaticSitePatchResource",
    modelProperties: {
      ...ProxyOnlyResource.type.modelProperties,
      defaultHostname: {
        readOnly: true,
        serializedName: "properties.defaultHostname",
        type: {
          name: "String"
        }
      },
      repositoryUrl: {
        serializedName: "properties.repositoryUrl",
        type: {
          name: "String"
        }
      },
      branch: {
        serializedName: "properties.branch",
        type: {
          name: "String"
        }
      },
      customDomains: {
        readOnly: true,
        serializedName: "properties.customDomains",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "String"
            }
          }
        }
      },
      repositoryToken: {
        serializedName: "properties.repositoryToken",
        type: {
          name: "String"
        }
      },
      buildProperties: {
        serializedName: "properties.buildProperties",
        type: {
          name: "Composite",
          className: "StaticSiteBuildProperties"
        }
      }
    }
  }
};

export const StaticSiteResetPropertiesARMResource: msRest.CompositeMapper = {
  serializedName: "StaticSiteResetPropertiesARMResource",
  type: {
    name: "Composite",
    className: "StaticSiteResetPropertiesARMResource",
    modelProperties: {
      ...ProxyOnlyResource.type.modelProperties,
      repositoryToken: {
        serializedName: "properties.repositoryToken",
        type: {
          name: "String"
        }
      },
      shouldUpdateRepository: {
        serializedName: "properties.shouldUpdateRepository",
        type: {
          name: "Boolean"
        }
      }
    }
  }
};

export const StaticSiteUserARMResource: msRest.CompositeMapper = {
  serializedName: "StaticSiteUserARMResource",
  type: {
    name: "Composite",
    className: "StaticSiteUserARMResource",
    modelProperties: {
      ...ProxyOnlyResource.type.modelProperties,
      provider: {
        readOnly: true,
        serializedName: "properties.provider",
        type: {
          name: "String"
        }
      },
      userId: {
        readOnly: true,
        serializedName: "properties.userId",
        type: {
          name: "String"
        }
      },
      displayName: {
        readOnly: true,
        serializedName: "properties.displayName",
        type: {
          name: "String"
        }
      },
      roles: {
        serializedName: "properties.roles",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const StaticSiteUserInvitationRequestResource: msRest.CompositeMapper = {
  serializedName: "StaticSiteUserInvitationRequestResource",
  type: {
    name: "Composite",
    className: "StaticSiteUserInvitationRequestResource",
    modelProperties: {
      ...ProxyOnlyResource.type.modelProperties,
      domain: {
        serializedName: "properties.domain",
        type: {
          name: "String"
        }
      },
      provider: {
        serializedName: "properties.provider",
        type: {
          name: "String"
        }
      },
      userDetails: {
        serializedName: "properties.userDetails",
        type: {
          name: "String"
        }
      },
      roles: {
        serializedName: "properties.roles",
        type: {
          name: "String"
        }
      },
      numHoursToExpiration: {
        serializedName: "properties.numHoursToExpiration",
        type: {
          name: "Number"
        }
      }
    }
  }
};

export const StaticSiteUserInvitationResponseResource: msRest.CompositeMapper = {
  serializedName: "StaticSiteUserInvitationResponseResource",
  type: {
    name: "Composite",
    className: "StaticSiteUserInvitationResponseResource",
    modelProperties: {
      ...ProxyOnlyResource.type.modelProperties,
      expiresOn: {
        readOnly: true,
        serializedName: "properties.expiresOn",
        type: {
          name: "DateTime"
        }
      },
      invitationUrl: {
        readOnly: true,
        serializedName: "properties.invitationUrl",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const AddressResponse: msRest.CompositeMapper = {
  serializedName: "AddressResponse",
  type: {
    name: "Composite",
    className: "AddressResponse",
    modelProperties: {
      ...ProxyOnlyResource.type.modelProperties,
      serviceIpAddress: {
        serializedName: "properties.serviceIpAddress",
        type: {
          name: "String"
        }
      },
      internalIpAddress: {
        serializedName: "properties.internalIpAddress",
        type: {
          name: "String"
        }
      },
      outboundIpAddresses: {
        serializedName: "properties.outboundIpAddresses",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "String"
            }
          }
        }
      },
      vipMappings: {
        serializedName: "properties.vipMappings",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "VirtualIPMapping"
            }
          }
        }
      }
    }
  }
};

export const AppServiceEnvironmentResource: msRest.CompositeMapper = {
  serializedName: "AppServiceEnvironmentResource",
  type: {
    name: "Composite",
    className: "AppServiceEnvironmentResource",
    modelProperties: {
      ...Resource.type.modelProperties,
      appServiceEnvironmentResourceName: {
        required: true,
        serializedName: "properties.name",
        type: {
          name: "String"
        }
      },
      appServiceEnvironmentResourceLocation: {
        required: true,
        serializedName: "properties.location",
        type: {
          name: "String"
        }
      },
      provisioningState: {
        readOnly: true,
        serializedName: "properties.provisioningState",
        type: {
          name: "Enum",
          allowedValues: [
            "Succeeded",
            "Failed",
            "Canceled",
            "InProgress",
            "Deleting"
          ]
        }
      },
      status: {
        readOnly: true,
        serializedName: "properties.status",
        type: {
          name: "Enum",
          allowedValues: [
            "Preparing",
            "Ready",
            "Scaling",
            "Deleting"
          ]
        }
      },
      vnetName: {
        serializedName: "properties.vnetName",
        type: {
          name: "String"
        }
      },
      vnetResourceGroupName: {
        serializedName: "properties.vnetResourceGroupName",
        type: {
          name: "String"
        }
      },
      vnetSubnetName: {
        serializedName: "properties.vnetSubnetName",
        type: {
          name: "String"
        }
      },
      virtualNetwork: {
        required: true,
        serializedName: "properties.virtualNetwork",
        type: {
          name: "Composite",
          className: "VirtualNetworkProfile"
        }
      },
      internalLoadBalancingMode: {
        serializedName: "properties.internalLoadBalancingMode",
        type: {
          name: "Enum",
          allowedValues: [
            "None",
            "Web",
            "Publishing"
          ]
        }
      },
      multiSize: {
        serializedName: "properties.multiSize",
        type: {
          name: "String"
        }
      },
      multiRoleCount: {
        serializedName: "properties.multiRoleCount",
        type: {
          name: "Number"
        }
      },
      workerPools: {
        required: true,
        serializedName: "properties.workerPools",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "WorkerPool"
            }
          }
        }
      },
      ipsslAddressCount: {
        serializedName: "properties.ipsslAddressCount",
        type: {
          name: "Number"
        }
      },
      databaseEdition: {
        readOnly: true,
        serializedName: "properties.databaseEdition",
        type: {
          name: "String"
        }
      },
      databaseServiceObjective: {
        readOnly: true,
        serializedName: "properties.databaseServiceObjective",
        type: {
          name: "String"
        }
      },
      upgradeDomains: {
        readOnly: true,
        serializedName: "properties.upgradeDomains",
        type: {
          name: "Number"
        }
      },
      subscriptionId: {
        readOnly: true,
        serializedName: "properties.subscriptionId",
        type: {
          name: "String"
        }
      },
      dnsSuffix: {
        serializedName: "properties.dnsSuffix",
        type: {
          name: "String"
        }
      },
      lastAction: {
        readOnly: true,
        serializedName: "properties.lastAction",
        type: {
          name: "String"
        }
      },
      lastActionResult: {
        readOnly: true,
        serializedName: "properties.lastActionResult",
        type: {
          name: "String"
        }
      },
      allowedMultiSizes: {
        readOnly: true,
        serializedName: "properties.allowedMultiSizes",
        type: {
          name: "String"
        }
      },
      allowedWorkerSizes: {
        readOnly: true,
        serializedName: "properties.allowedWorkerSizes",
        type: {
          name: "String"
        }
      },
      maximumNumberOfMachines: {
        readOnly: true,
        serializedName: "properties.maximumNumberOfMachines",
        type: {
          name: "Number"
        }
      },
      vipMappings: {
        readOnly: true,
        serializedName: "properties.vipMappings",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "VirtualIPMapping"
            }
          }
        }
      },
      environmentCapacities: {
        readOnly: true,
        serializedName: "properties.environmentCapacities",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "StampCapacity"
            }
          }
        }
      },
      networkAccessControlList: {
        serializedName: "properties.networkAccessControlList",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "NetworkAccessControlEntry"
            }
          }
        }
      },
      environmentIsHealthy: {
        readOnly: true,
        serializedName: "properties.environmentIsHealthy",
        type: {
          name: "Boolean"
        }
      },
      environmentStatus: {
        readOnly: true,
        serializedName: "properties.environmentStatus",
        type: {
          name: "String"
        }
      },
      resourceGroup: {
        readOnly: true,
        serializedName: "properties.resourceGroup",
        type: {
          name: "String"
        }
      },
      frontEndScaleFactor: {
        serializedName: "properties.frontEndScaleFactor",
        type: {
          name: "Number"
        }
      },
      defaultFrontEndScaleFactor: {
        readOnly: true,
        serializedName: "properties.defaultFrontEndScaleFactor",
        type: {
          name: "Number"
        }
      },
      apiManagementAccountId: {
        serializedName: "properties.apiManagementAccountId",
        type: {
          name: "String"
        }
      },
      suspended: {
        serializedName: "properties.suspended",
        type: {
          name: "Boolean"
        }
      },
      dynamicCacheEnabled: {
        serializedName: "properties.dynamicCacheEnabled",
        type: {
          name: "Boolean"
        }
      },
      clusterSettings: {
        serializedName: "properties.clusterSettings",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "NameValuePair"
            }
          }
        }
      },
      userWhitelistedIpRanges: {
        serializedName: "properties.userWhitelistedIpRanges",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "String"
            }
          }
        }
      },
      hasLinuxWorkers: {
        serializedName: "properties.hasLinuxWorkers",
        type: {
          name: "Boolean"
        }
      },
      sslCertKeyVaultId: {
        serializedName: "properties.sslCertKeyVaultId",
        type: {
          name: "String"
        }
      },
      sslCertKeyVaultSecretName: {
        serializedName: "properties.sslCertKeyVaultSecretName",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const AppServiceEnvironmentPatchResource: msRest.CompositeMapper = {
  serializedName: "AppServiceEnvironmentPatchResource",
  type: {
    name: "Composite",
    className: "AppServiceEnvironmentPatchResource",
    modelProperties: {
      ...ProxyOnlyResource.type.modelProperties,
      appServiceEnvironmentPatchResourceName: {
        required: true,
        serializedName: "properties.name",
        type: {
          name: "String"
        }
      },
      location: {
        required: true,
        serializedName: "properties.location",
        type: {
          name: "String"
        }
      },
      provisioningState: {
        readOnly: true,
        serializedName: "properties.provisioningState",
        type: {
          name: "Enum",
          allowedValues: [
            "Succeeded",
            "Failed",
            "Canceled",
            "InProgress",
            "Deleting"
          ]
        }
      },
      status: {
        readOnly: true,
        serializedName: "properties.status",
        type: {
          name: "Enum",
          allowedValues: [
            "Preparing",
            "Ready",
            "Scaling",
            "Deleting"
          ]
        }
      },
      vnetName: {
        serializedName: "properties.vnetName",
        type: {
          name: "String"
        }
      },
      vnetResourceGroupName: {
        serializedName: "properties.vnetResourceGroupName",
        type: {
          name: "String"
        }
      },
      vnetSubnetName: {
        serializedName: "properties.vnetSubnetName",
        type: {
          name: "String"
        }
      },
      virtualNetwork: {
        required: true,
        serializedName: "properties.virtualNetwork",
        type: {
          name: "Composite",
          className: "VirtualNetworkProfile"
        }
      },
      internalLoadBalancingMode: {
        serializedName: "properties.internalLoadBalancingMode",
        type: {
          name: "Enum",
          allowedValues: [
            "None",
            "Web",
            "Publishing"
          ]
        }
      },
      multiSize: {
        serializedName: "properties.multiSize",
        type: {
          name: "String"
        }
      },
      multiRoleCount: {
        serializedName: "properties.multiRoleCount",
        type: {
          name: "Number"
        }
      },
      workerPools: {
        required: true,
        serializedName: "properties.workerPools",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "WorkerPool"
            }
          }
        }
      },
      ipsslAddressCount: {
        serializedName: "properties.ipsslAddressCount",
        type: {
          name: "Number"
        }
      },
      databaseEdition: {
        readOnly: true,
        serializedName: "properties.databaseEdition",
        type: {
          name: "String"
        }
      },
      databaseServiceObjective: {
        readOnly: true,
        serializedName: "properties.databaseServiceObjective",
        type: {
          name: "String"
        }
      },
      upgradeDomains: {
        readOnly: true,
        serializedName: "properties.upgradeDomains",
        type: {
          name: "Number"
        }
      },
      subscriptionId: {
        readOnly: true,
        serializedName: "properties.subscriptionId",
        type: {
          name: "String"
        }
      },
      dnsSuffix: {
        serializedName: "properties.dnsSuffix",
        type: {
          name: "String"
        }
      },
      lastAction: {
        readOnly: true,
        serializedName: "properties.lastAction",
        type: {
          name: "String"
        }
      },
      lastActionResult: {
        readOnly: true,
        serializedName: "properties.lastActionResult",
        type: {
          name: "String"
        }
      },
      allowedMultiSizes: {
        readOnly: true,
        serializedName: "properties.allowedMultiSizes",
        type: {
          name: "String"
        }
      },
      allowedWorkerSizes: {
        readOnly: true,
        serializedName: "properties.allowedWorkerSizes",
        type: {
          name: "String"
        }
      },
      maximumNumberOfMachines: {
        readOnly: true,
        serializedName: "properties.maximumNumberOfMachines",
        type: {
          name: "Number"
        }
      },
      vipMappings: {
        readOnly: true,
        serializedName: "properties.vipMappings",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "VirtualIPMapping"
            }
          }
        }
      },
      environmentCapacities: {
        readOnly: true,
        serializedName: "properties.environmentCapacities",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "StampCapacity"
            }
          }
        }
      },
      networkAccessControlList: {
        serializedName: "properties.networkAccessControlList",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "NetworkAccessControlEntry"
            }
          }
        }
      },
      environmentIsHealthy: {
        readOnly: true,
        serializedName: "properties.environmentIsHealthy",
        type: {
          name: "Boolean"
        }
      },
      environmentStatus: {
        readOnly: true,
        serializedName: "properties.environmentStatus",
        type: {
          name: "String"
        }
      },
      resourceGroup: {
        readOnly: true,
        serializedName: "properties.resourceGroup",
        type: {
          name: "String"
        }
      },
      frontEndScaleFactor: {
        serializedName: "properties.frontEndScaleFactor",
        type: {
          name: "Number"
        }
      },
      defaultFrontEndScaleFactor: {
        readOnly: true,
        serializedName: "properties.defaultFrontEndScaleFactor",
        type: {
          name: "Number"
        }
      },
      apiManagementAccountId: {
        serializedName: "properties.apiManagementAccountId",
        type: {
          name: "String"
        }
      },
      suspended: {
        serializedName: "properties.suspended",
        type: {
          name: "Boolean"
        }
      },
      dynamicCacheEnabled: {
        serializedName: "properties.dynamicCacheEnabled",
        type: {
          name: "Boolean"
        }
      },
      clusterSettings: {
        serializedName: "properties.clusterSettings",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "NameValuePair"
            }
          }
        }
      },
      userWhitelistedIpRanges: {
        serializedName: "properties.userWhitelistedIpRanges",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "String"
            }
          }
        }
      },
      hasLinuxWorkers: {
        serializedName: "properties.hasLinuxWorkers",
        type: {
          name: "Boolean"
        }
      },
      sslCertKeyVaultId: {
        serializedName: "properties.sslCertKeyVaultId",
        type: {
          name: "String"
        }
      },
      sslCertKeyVaultSecretName: {
        serializedName: "properties.sslCertKeyVaultSecretName",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const EndpointDetail: msRest.CompositeMapper = {
  serializedName: "EndpointDetail",
  type: {
    name: "Composite",
    className: "EndpointDetail",
    modelProperties: {
      ipAddress: {
        serializedName: "ipAddress",
        type: {
          name: "String"
        }
      },
      port: {
        serializedName: "port",
        type: {
          name: "Number"
        }
      },
      latency: {
        serializedName: "latency",
        type: {
          name: "Number"
        }
      },
      isAccessible: {
        serializedName: "isAccessible",
        type: {
          name: "Boolean"
        }
      }
    }
  }
};

export const EndpointDependency: msRest.CompositeMapper = {
  serializedName: "EndpointDependency",
  type: {
    name: "Composite",
    className: "EndpointDependency",
    modelProperties: {
      domainName: {
        serializedName: "domainName",
        type: {
          name: "String"
        }
      },
      endpointDetails: {
        serializedName: "endpointDetails",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "EndpointDetail"
            }
          }
        }
      }
    }
  }
};

export const HostingEnvironmentDiagnostics: msRest.CompositeMapper = {
  serializedName: "HostingEnvironmentDiagnostics",
  type: {
    name: "Composite",
    className: "HostingEnvironmentDiagnostics",
    modelProperties: {
      name: {
        serializedName: "name",
        type: {
          name: "String"
        }
      },
      diagnosticsOutput: {
        serializedName: "diagnosticsOutput",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const InboundEnvironmentEndpoint: msRest.CompositeMapper = {
  serializedName: "InboundEnvironmentEndpoint",
  type: {
    name: "Composite",
    className: "InboundEnvironmentEndpoint",
    modelProperties: {
      description: {
        serializedName: "description",
        type: {
          name: "String"
        }
      },
      endpoints: {
        serializedName: "endpoints",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "String"
            }
          }
        }
      },
      ports: {
        serializedName: "ports",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "String"
            }
          }
        }
      }
    }
  }
};

export const OutboundEnvironmentEndpoint: msRest.CompositeMapper = {
  serializedName: "OutboundEnvironmentEndpoint",
  type: {
    name: "Composite",
    className: "OutboundEnvironmentEndpoint",
    modelProperties: {
      category: {
        serializedName: "category",
        type: {
          name: "String"
        }
      },
      endpoints: {
        serializedName: "endpoints",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "EndpointDependency"
            }
          }
        }
      }
    }
  }
};

export const ResourceMetricAvailability: msRest.CompositeMapper = {
  serializedName: "ResourceMetricAvailability",
  type: {
    name: "Composite",
    className: "ResourceMetricAvailability",
    modelProperties: {
      timeGrain: {
        readOnly: true,
        serializedName: "timeGrain",
        type: {
          name: "String"
        }
      },
      retention: {
        readOnly: true,
        serializedName: "retention",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const ResourceMetricDefinition: msRest.CompositeMapper = {
  serializedName: "ResourceMetricDefinition",
  type: {
    name: "Composite",
    className: "ResourceMetricDefinition",
    modelProperties: {
      ...ProxyOnlyResource.type.modelProperties,
      unit: {
        readOnly: true,
        serializedName: "properties.unit",
        type: {
          name: "String"
        }
      },
      primaryAggregationType: {
        readOnly: true,
        serializedName: "properties.primaryAggregationType",
        type: {
          name: "String"
        }
      },
      metricAvailabilities: {
        readOnly: true,
        serializedName: "properties.metricAvailabilities",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "ResourceMetricAvailability"
            }
          }
        }
      },
      resourceUri: {
        readOnly: true,
        serializedName: "properties.resourceUri",
        type: {
          name: "String"
        }
      },
      properties: {
        readOnly: true,
        serializedName: "properties.properties",
        type: {
          name: "Dictionary",
          value: {
            type: {
              name: "String"
            }
          }
        }
      }
    }
  }
};

export const SkuInfo: msRest.CompositeMapper = {
  serializedName: "SkuInfo",
  type: {
    name: "Composite",
    className: "SkuInfo",
    modelProperties: {
      resourceType: {
        serializedName: "resourceType",
        type: {
          name: "String"
        }
      },
      sku: {
        serializedName: "sku",
        type: {
          name: "Composite",
          className: "SkuDescription"
        }
      },
      capacity: {
        serializedName: "capacity",
        type: {
          name: "Composite",
          className: "SkuCapacity"
        }
      }
    }
  }
};

export const Usage: msRest.CompositeMapper = {
  serializedName: "Usage",
  type: {
    name: "Composite",
    className: "Usage",
    modelProperties: {
      ...ProxyOnlyResource.type.modelProperties,
      displayName: {
        readOnly: true,
        serializedName: "properties.displayName",
        type: {
          name: "String"
        }
      },
      resourceName: {
        readOnly: true,
        serializedName: "properties.resourceName",
        type: {
          name: "String"
        }
      },
      unit: {
        readOnly: true,
        serializedName: "properties.unit",
        type: {
          name: "String"
        }
      },
      currentValue: {
        readOnly: true,
        serializedName: "properties.currentValue",
        type: {
          name: "Number"
        }
      },
      limit: {
        readOnly: true,
        serializedName: "properties.limit",
        type: {
          name: "Number"
        }
      },
      nextResetTime: {
        readOnly: true,
        serializedName: "properties.nextResetTime",
        type: {
          name: "DateTime"
        }
      },
      computeMode: {
        readOnly: true,
        serializedName: "properties.computeMode",
        type: {
          name: "Enum",
          allowedValues: [
            "Shared",
            "Dedicated",
            "Dynamic"
          ]
        }
      },
      siteMode: {
        readOnly: true,
        serializedName: "properties.siteMode",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const WorkerPoolResource: msRest.CompositeMapper = {
  serializedName: "WorkerPoolResource",
  type: {
    name: "Composite",
    className: "WorkerPoolResource",
    modelProperties: {
      ...ProxyOnlyResource.type.modelProperties,
      workerSizeId: {
        serializedName: "properties.workerSizeId",
        type: {
          name: "Number"
        }
      },
      computeMode: {
        serializedName: "properties.computeMode",
        type: {
          name: "Enum",
          allowedValues: [
            "Shared",
            "Dedicated",
            "Dynamic"
          ]
        }
      },
      workerSize: {
        serializedName: "properties.workerSize",
        type: {
          name: "String"
        }
      },
      workerCount: {
        serializedName: "properties.workerCount",
        type: {
          name: "Number"
        }
      },
      instanceNames: {
        readOnly: true,
        serializedName: "properties.instanceNames",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "String"
            }
          }
        }
      },
      sku: {
        serializedName: "sku",
        type: {
          name: "Composite",
          className: "SkuDescription"
        }
      }
    }
  }
};

export const AppServicePlanPatchResource: msRest.CompositeMapper = {
  serializedName: "AppServicePlanPatchResource",
  type: {
    name: "Composite",
    className: "AppServicePlanPatchResource",
    modelProperties: {
      ...ProxyOnlyResource.type.modelProperties,
      workerTierName: {
        serializedName: "properties.workerTierName",
        type: {
          name: "String"
        }
      },
      status: {
        readOnly: true,
        serializedName: "properties.status",
        type: {
          name: "Enum",
          allowedValues: [
            "Ready",
            "Pending",
            "Creating"
          ]
        }
      },
      subscription: {
        readOnly: true,
        serializedName: "properties.subscription",
        type: {
          name: "String"
        }
      },
      hostingEnvironmentProfile: {
        serializedName: "properties.hostingEnvironmentProfile",
        type: {
          name: "Composite",
          className: "HostingEnvironmentProfile"
        }
      },
      maximumNumberOfWorkers: {
        readOnly: true,
        serializedName: "properties.maximumNumberOfWorkers",
        type: {
          name: "Number"
        }
      },
      geoRegion: {
        readOnly: true,
        serializedName: "properties.geoRegion",
        type: {
          name: "String"
        }
      },
      perSiteScaling: {
        serializedName: "properties.perSiteScaling",
        defaultValue: false,
        type: {
          name: "Boolean"
        }
      },
      maximumElasticWorkerCount: {
        serializedName: "properties.maximumElasticWorkerCount",
        type: {
          name: "Number"
        }
      },
      numberOfSites: {
        readOnly: true,
        serializedName: "properties.numberOfSites",
        type: {
          name: "Number"
        }
      },
      isSpot: {
        serializedName: "properties.isSpot",
        type: {
          name: "Boolean"
        }
      },
      spotExpirationTime: {
        serializedName: "properties.spotExpirationTime",
        type: {
          name: "DateTime"
        }
      },
      freeOfferExpirationTime: {
        serializedName: "properties.freeOfferExpirationTime",
        type: {
          name: "DateTime"
        }
      },
      resourceGroup: {
        readOnly: true,
        serializedName: "properties.resourceGroup",
        type: {
          name: "String"
        }
      },
      reserved: {
        serializedName: "properties.reserved",
        defaultValue: false,
        type: {
          name: "Boolean"
        }
      },
      isXenon: {
        serializedName: "properties.isXenon",
        defaultValue: false,
        type: {
          name: "Boolean"
        }
      },
      hyperV: {
        serializedName: "properties.hyperV",
        defaultValue: false,
        type: {
          name: "Boolean"
        }
      },
      targetWorkerCount: {
        serializedName: "properties.targetWorkerCount",
        type: {
          name: "Number"
        }
      },
      targetWorkerSizeId: {
        serializedName: "properties.targetWorkerSizeId",
        type: {
          name: "Number"
        }
      },
      provisioningState: {
        readOnly: true,
        serializedName: "properties.provisioningState",
        type: {
          name: "Enum",
          allowedValues: [
            "Succeeded",
            "Failed",
            "Canceled",
            "InProgress",
            "Deleting"
          ]
        }
      }
    }
  }
};

export const HybridConnectionKey: msRest.CompositeMapper = {
  serializedName: "HybridConnectionKey",
  type: {
    name: "Composite",
    className: "HybridConnectionKey",
    modelProperties: {
      ...ProxyOnlyResource.type.modelProperties,
      sendKeyName: {
        readOnly: true,
        serializedName: "properties.sendKeyName",
        type: {
          name: "String"
        }
      },
      sendKeyValue: {
        readOnly: true,
        serializedName: "properties.sendKeyValue",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const HybridConnectionLimits: msRest.CompositeMapper = {
  serializedName: "HybridConnectionLimits",
  type: {
    name: "Composite",
    className: "HybridConnectionLimits",
    modelProperties: {
      ...ProxyOnlyResource.type.modelProperties,
      current: {
        readOnly: true,
        serializedName: "properties.current",
        type: {
          name: "Number"
        }
      },
      maximum: {
        readOnly: true,
        serializedName: "properties.maximum",
        type: {
          name: "Number"
        }
      }
    }
  }
};

export const ResourceHealthMetadata: msRest.CompositeMapper = {
  serializedName: "ResourceHealthMetadata",
  type: {
    name: "Composite",
    className: "ResourceHealthMetadata",
    modelProperties: {
      ...ProxyOnlyResource.type.modelProperties,
      category: {
        serializedName: "properties.category",
        type: {
          name: "String"
        }
      },
      signalAvailability: {
        serializedName: "properties.signalAvailability",
        type: {
          name: "Boolean"
        }
      }
    }
  }
};

export const AppServiceCertificateOrderCollection: msRest.CompositeMapper = {
  serializedName: "AppServiceCertificateOrderCollection",
  type: {
    name: "Composite",
    className: "AppServiceCertificateOrderCollection",
    modelProperties: {
      value: {
        required: true,
        serializedName: "",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "AppServiceCertificateOrder"
            }
          }
        }
      },
      nextLink: {
        readOnly: true,
        serializedName: "nextLink",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const AppServiceCertificateCollection: msRest.CompositeMapper = {
  serializedName: "AppServiceCertificateCollection",
  type: {
    name: "Composite",
    className: "AppServiceCertificateCollection",
    modelProperties: {
      value: {
        required: true,
        serializedName: "",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "AppServiceCertificateResource"
            }
          }
        }
      },
      nextLink: {
        readOnly: true,
        serializedName: "nextLink",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const CsmOperationCollection: msRest.CompositeMapper = {
  serializedName: "CsmOperationCollection",
  type: {
    name: "Composite",
    className: "CsmOperationCollection",
    modelProperties: {
      value: {
        required: true,
        serializedName: "",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "CsmOperationDescription"
            }
          }
        }
      },
      nextLink: {
        readOnly: true,
        serializedName: "nextLink",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const DomainCollection: msRest.CompositeMapper = {
  serializedName: "DomainCollection",
  type: {
    name: "Composite",
    className: "DomainCollection",
    modelProperties: {
      value: {
        required: true,
        serializedName: "",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "Domain"
            }
          }
        }
      },
      nextLink: {
        readOnly: true,
        serializedName: "nextLink",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const NameIdentifierCollection: msRest.CompositeMapper = {
  serializedName: "NameIdentifierCollection",
  type: {
    name: "Composite",
    className: "NameIdentifierCollection",
    modelProperties: {
      value: {
        required: true,
        serializedName: "",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "NameIdentifier"
            }
          }
        }
      },
      nextLink: {
        readOnly: true,
        serializedName: "nextLink",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const DomainOwnershipIdentifierCollection: msRest.CompositeMapper = {
  serializedName: "DomainOwnershipIdentifierCollection",
  type: {
    name: "Composite",
    className: "DomainOwnershipIdentifierCollection",
    modelProperties: {
      value: {
        required: true,
        serializedName: "",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "DomainOwnershipIdentifier"
            }
          }
        }
      },
      nextLink: {
        readOnly: true,
        serializedName: "nextLink",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const TopLevelDomainCollection: msRest.CompositeMapper = {
  serializedName: "TopLevelDomainCollection",
  type: {
    name: "Composite",
    className: "TopLevelDomainCollection",
    modelProperties: {
      value: {
        required: true,
        serializedName: "",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "TopLevelDomain"
            }
          }
        }
      },
      nextLink: {
        readOnly: true,
        serializedName: "nextLink",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const TldLegalAgreementCollection: msRest.CompositeMapper = {
  serializedName: "TldLegalAgreementCollection",
  type: {
    name: "Composite",
    className: "TldLegalAgreementCollection",
    modelProperties: {
      value: {
        required: true,
        serializedName: "",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "TldLegalAgreement"
            }
          }
        }
      },
      nextLink: {
        readOnly: true,
        serializedName: "nextLink",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const CertificateCollection: msRest.CompositeMapper = {
  serializedName: "CertificateCollection",
  type: {
    name: "Composite",
    className: "CertificateCollection",
    modelProperties: {
      value: {
        required: true,
        serializedName: "",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "Certificate"
            }
          }
        }
      },
      nextLink: {
        readOnly: true,
        serializedName: "nextLink",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const DeletedWebAppCollection: msRest.CompositeMapper = {
  serializedName: "DeletedWebAppCollection",
  type: {
    name: "Composite",
    className: "DeletedWebAppCollection",
    modelProperties: {
      value: {
        required: true,
        serializedName: "",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "DeletedSite"
            }
          }
        }
      },
      nextLink: {
        readOnly: true,
        serializedName: "nextLink",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const DetectorResponseCollection: msRest.CompositeMapper = {
  serializedName: "DetectorResponseCollection",
  type: {
    name: "Composite",
    className: "DetectorResponseCollection",
    modelProperties: {
      value: {
        required: true,
        serializedName: "",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "DetectorResponse"
            }
          }
        }
      },
      nextLink: {
        readOnly: true,
        serializedName: "nextLink",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const DiagnosticCategoryCollection: msRest.CompositeMapper = {
  serializedName: "DiagnosticCategoryCollection",
  type: {
    name: "Composite",
    className: "DiagnosticCategoryCollection",
    modelProperties: {
      value: {
        required: true,
        serializedName: "",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "DiagnosticCategory"
            }
          }
        }
      },
      nextLink: {
        readOnly: true,
        serializedName: "nextLink",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const DiagnosticAnalysisCollection: msRest.CompositeMapper = {
  serializedName: "DiagnosticAnalysisCollection",
  type: {
    name: "Composite",
    className: "DiagnosticAnalysisCollection",
    modelProperties: {
      value: {
        required: true,
        serializedName: "",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "AnalysisDefinition"
            }
          }
        }
      },
      nextLink: {
        readOnly: true,
        serializedName: "nextLink",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const DiagnosticDetectorCollection: msRest.CompositeMapper = {
  serializedName: "DiagnosticDetectorCollection",
  type: {
    name: "Composite",
    className: "DiagnosticDetectorCollection",
    modelProperties: {
      value: {
        required: true,
        serializedName: "",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "DetectorDefinition"
            }
          }
        }
      },
      nextLink: {
        readOnly: true,
        serializedName: "nextLink",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const ApplicationStackCollection: msRest.CompositeMapper = {
  serializedName: "ApplicationStackCollection",
  type: {
    name: "Composite",
    className: "ApplicationStackCollection",
    modelProperties: {
      value: {
        required: true,
        serializedName: "",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "ApplicationStackResource"
            }
          }
        }
      },
      nextLink: {
        readOnly: true,
        serializedName: "nextLink",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const RecommendationCollection: msRest.CompositeMapper = {
  serializedName: "RecommendationCollection",
  type: {
    name: "Composite",
    className: "RecommendationCollection",
    modelProperties: {
      value: {
        required: true,
        serializedName: "",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "Recommendation"
            }
          }
        }
      },
      nextLink: {
        readOnly: true,
        serializedName: "nextLink",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const SourceControlCollection: msRest.CompositeMapper = {
  serializedName: "SourceControlCollection",
  type: {
    name: "Composite",
    className: "SourceControlCollection",
    modelProperties: {
      value: {
        required: true,
        serializedName: "",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "SourceControl"
            }
          }
        }
      },
      nextLink: {
        readOnly: true,
        serializedName: "nextLink",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const BillingMeterCollection: msRest.CompositeMapper = {
  serializedName: "BillingMeterCollection",
  type: {
    name: "Composite",
    className: "BillingMeterCollection",
    modelProperties: {
      value: {
        required: true,
        serializedName: "",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "BillingMeter"
            }
          }
        }
      },
      nextLink: {
        readOnly: true,
        serializedName: "nextLink",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const GeoRegionCollection: msRest.CompositeMapper = {
  serializedName: "GeoRegionCollection",
  type: {
    name: "Composite",
    className: "GeoRegionCollection",
    modelProperties: {
      value: {
        required: true,
        serializedName: "",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "GeoRegion"
            }
          }
        }
      },
      nextLink: {
        readOnly: true,
        serializedName: "nextLink",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const IdentifierCollection: msRest.CompositeMapper = {
  serializedName: "IdentifierCollection",
  type: {
    name: "Composite",
    className: "IdentifierCollection",
    modelProperties: {
      value: {
        required: true,
        serializedName: "",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "Identifier"
            }
          }
        }
      },
      nextLink: {
        readOnly: true,
        serializedName: "nextLink",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const PremierAddOnOfferCollection: msRest.CompositeMapper = {
  serializedName: "PremierAddOnOfferCollection",
  type: {
    name: "Composite",
    className: "PremierAddOnOfferCollection",
    modelProperties: {
      value: {
        required: true,
        serializedName: "",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "PremierAddOnOffer"
            }
          }
        }
      },
      nextLink: {
        readOnly: true,
        serializedName: "nextLink",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const WebAppCollection: msRest.CompositeMapper = {
  serializedName: "WebAppCollection",
  type: {
    name: "Composite",
    className: "WebAppCollection",
    modelProperties: {
      value: {
        required: true,
        serializedName: "",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "Site"
            }
          }
        }
      },
      nextLink: {
        readOnly: true,
        serializedName: "nextLink",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const BackupItemCollection: msRest.CompositeMapper = {
  serializedName: "BackupItemCollection",
  type: {
    name: "Composite",
    className: "BackupItemCollection",
    modelProperties: {
      value: {
        required: true,
        serializedName: "",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "BackupItem"
            }
          }
        }
      },
      nextLink: {
        readOnly: true,
        serializedName: "nextLink",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const SiteConfigResourceCollection: msRest.CompositeMapper = {
  serializedName: "SiteConfigResourceCollection",
  type: {
    name: "Composite",
    className: "SiteConfigResourceCollection",
    modelProperties: {
      value: {
        required: true,
        serializedName: "",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "SiteConfigResource"
            }
          }
        }
      },
      nextLink: {
        readOnly: true,
        serializedName: "nextLink",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const SiteConfigurationSnapshotInfoCollection: msRest.CompositeMapper = {
  serializedName: "SiteConfigurationSnapshotInfoCollection",
  type: {
    name: "Composite",
    className: "SiteConfigurationSnapshotInfoCollection",
    modelProperties: {
      value: {
        required: true,
        serializedName: "",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "SiteConfigurationSnapshotInfo"
            }
          }
        }
      },
      nextLink: {
        readOnly: true,
        serializedName: "nextLink",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const ContinuousWebJobCollection: msRest.CompositeMapper = {
  serializedName: "ContinuousWebJobCollection",
  type: {
    name: "Composite",
    className: "ContinuousWebJobCollection",
    modelProperties: {
      value: {
        required: true,
        serializedName: "",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "ContinuousWebJob"
            }
          }
        }
      },
      nextLink: {
        readOnly: true,
        serializedName: "nextLink",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const DeploymentCollection: msRest.CompositeMapper = {
  serializedName: "DeploymentCollection",
  type: {
    name: "Composite",
    className: "DeploymentCollection",
    modelProperties: {
      value: {
        required: true,
        serializedName: "",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "Deployment"
            }
          }
        }
      },
      nextLink: {
        readOnly: true,
        serializedName: "nextLink",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const FunctionEnvelopeCollection: msRest.CompositeMapper = {
  serializedName: "FunctionEnvelopeCollection",
  type: {
    name: "Composite",
    className: "FunctionEnvelopeCollection",
    modelProperties: {
      value: {
        required: true,
        serializedName: "",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "FunctionEnvelope"
            }
          }
        }
      },
      nextLink: {
        readOnly: true,
        serializedName: "nextLink",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const HostNameBindingCollection: msRest.CompositeMapper = {
  serializedName: "HostNameBindingCollection",
  type: {
    name: "Composite",
    className: "HostNameBindingCollection",
    modelProperties: {
      value: {
        required: true,
        serializedName: "",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "HostNameBinding"
            }
          }
        }
      },
      nextLink: {
        readOnly: true,
        serializedName: "nextLink",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const WebAppInstanceCollection: msRest.CompositeMapper = {
  serializedName: "WebAppInstanceCollection",
  type: {
    name: "Composite",
    className: "WebAppInstanceCollection",
    modelProperties: {
      value: {
        required: true,
        serializedName: "",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "SiteInstance"
            }
          }
        }
      },
      nextLink: {
        readOnly: true,
        serializedName: "nextLink",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const ProcessInfoCollection: msRest.CompositeMapper = {
  serializedName: "ProcessInfoCollection",
  type: {
    name: "Composite",
    className: "ProcessInfoCollection",
    modelProperties: {
      value: {
        required: true,
        serializedName: "",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "ProcessInfo"
            }
          }
        }
      },
      nextLink: {
        readOnly: true,
        serializedName: "nextLink",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const ProcessModuleInfoCollection: msRest.CompositeMapper = {
  serializedName: "ProcessModuleInfoCollection",
  type: {
    name: "Composite",
    className: "ProcessModuleInfoCollection",
    modelProperties: {
      value: {
        required: true,
        serializedName: "",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "ProcessModuleInfo"
            }
          }
        }
      },
      nextLink: {
        readOnly: true,
        serializedName: "nextLink",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const ProcessThreadInfoCollection: msRest.CompositeMapper = {
  serializedName: "ProcessThreadInfoCollection",
  type: {
    name: "Composite",
    className: "ProcessThreadInfoCollection",
    modelProperties: {
      value: {
        required: true,
        serializedName: "",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "ProcessThreadInfo"
            }
          }
        }
      },
      nextLink: {
        readOnly: true,
        serializedName: "nextLink",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const PerfMonCounterCollection: msRest.CompositeMapper = {
  serializedName: "PerfMonCounterCollection",
  type: {
    name: "Composite",
    className: "PerfMonCounterCollection",
    modelProperties: {
      value: {
        required: true,
        serializedName: "",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "PerfMonResponse"
            }
          }
        }
      },
      nextLink: {
        readOnly: true,
        serializedName: "nextLink",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const PublicCertificateCollection: msRest.CompositeMapper = {
  serializedName: "PublicCertificateCollection",
  type: {
    name: "Composite",
    className: "PublicCertificateCollection",
    modelProperties: {
      value: {
        required: true,
        serializedName: "",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "PublicCertificate"
            }
          }
        }
      },
      nextLink: {
        readOnly: true,
        serializedName: "nextLink",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const SiteExtensionInfoCollection: msRest.CompositeMapper = {
  serializedName: "SiteExtensionInfoCollection",
  type: {
    name: "Composite",
    className: "SiteExtensionInfoCollection",
    modelProperties: {
      value: {
        required: true,
        serializedName: "",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "SiteExtensionInfo"
            }
          }
        }
      },
      nextLink: {
        readOnly: true,
        serializedName: "nextLink",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const SlotDifferenceCollection: msRest.CompositeMapper = {
  serializedName: "SlotDifferenceCollection",
  type: {
    name: "Composite",
    className: "SlotDifferenceCollection",
    modelProperties: {
      value: {
        required: true,
        serializedName: "",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "SlotDifference"
            }
          }
        }
      },
      nextLink: {
        readOnly: true,
        serializedName: "nextLink",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const SnapshotCollection: msRest.CompositeMapper = {
  serializedName: "SnapshotCollection",
  type: {
    name: "Composite",
    className: "SnapshotCollection",
    modelProperties: {
      value: {
        required: true,
        serializedName: "",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "Snapshot"
            }
          }
        }
      },
      nextLink: {
        readOnly: true,
        serializedName: "nextLink",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const TriggeredWebJobCollection: msRest.CompositeMapper = {
  serializedName: "TriggeredWebJobCollection",
  type: {
    name: "Composite",
    className: "TriggeredWebJobCollection",
    modelProperties: {
      value: {
        required: true,
        serializedName: "",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "TriggeredWebJob"
            }
          }
        }
      },
      nextLink: {
        readOnly: true,
        serializedName: "nextLink",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const TriggeredJobHistoryCollection: msRest.CompositeMapper = {
  serializedName: "TriggeredJobHistoryCollection",
  type: {
    name: "Composite",
    className: "TriggeredJobHistoryCollection",
    modelProperties: {
      value: {
        required: true,
        serializedName: "",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "TriggeredJobHistory"
            }
          }
        }
      },
      nextLink: {
        readOnly: true,
        serializedName: "nextLink",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const CsmUsageQuotaCollection: msRest.CompositeMapper = {
  serializedName: "CsmUsageQuotaCollection",
  type: {
    name: "Composite",
    className: "CsmUsageQuotaCollection",
    modelProperties: {
      value: {
        required: true,
        serializedName: "",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "CsmUsageQuota"
            }
          }
        }
      },
      nextLink: {
        readOnly: true,
        serializedName: "nextLink",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const WebJobCollection: msRest.CompositeMapper = {
  serializedName: "WebJobCollection",
  type: {
    name: "Composite",
    className: "WebJobCollection",
    modelProperties: {
      value: {
        required: true,
        serializedName: "",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "WebJob"
            }
          }
        }
      },
      nextLink: {
        readOnly: true,
        serializedName: "nextLink",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const StaticSiteCollection: msRest.CompositeMapper = {
  serializedName: "StaticSiteCollection",
  type: {
    name: "Composite",
    className: "StaticSiteCollection",
    modelProperties: {
      value: {
        required: true,
        serializedName: "",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "StaticSiteARMResource"
            }
          }
        }
      },
      nextLink: {
        readOnly: true,
        serializedName: "nextLink",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const StaticSiteUserCollection: msRest.CompositeMapper = {
  serializedName: "StaticSiteUserCollection",
  type: {
    name: "Composite",
    className: "StaticSiteUserCollection",
    modelProperties: {
      value: {
        required: true,
        serializedName: "",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "StaticSiteUserARMResource"
            }
          }
        }
      },
      nextLink: {
        readOnly: true,
        serializedName: "nextLink",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const StaticSiteBuildCollection: msRest.CompositeMapper = {
  serializedName: "StaticSiteBuildCollection",
  type: {
    name: "Composite",
    className: "StaticSiteBuildCollection",
    modelProperties: {
      value: {
        required: true,
        serializedName: "",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "StaticSiteBuildARMResource"
            }
          }
        }
      },
      nextLink: {
        readOnly: true,
        serializedName: "nextLink",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const StaticSiteFunctionOverviewCollection: msRest.CompositeMapper = {
  serializedName: "StaticSiteFunctionOverviewCollection",
  type: {
    name: "Composite",
    className: "StaticSiteFunctionOverviewCollection",
    modelProperties: {
      value: {
        required: true,
        serializedName: "",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "StaticSiteFunctionOverviewARMResource"
            }
          }
        }
      },
      nextLink: {
        readOnly: true,
        serializedName: "nextLink",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const StaticSiteCustomDomainOverviewCollection: msRest.CompositeMapper = {
  serializedName: "StaticSiteCustomDomainOverviewCollection",
  type: {
    name: "Composite",
    className: "StaticSiteCustomDomainOverviewCollection",
    modelProperties: {
      value: {
        required: true,
        serializedName: "",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "StaticSiteCustomDomainOverviewARMResource"
            }
          }
        }
      },
      nextLink: {
        readOnly: true,
        serializedName: "nextLink",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const AppServiceEnvironmentCollection: msRest.CompositeMapper = {
  serializedName: "AppServiceEnvironmentCollection",
  type: {
    name: "Composite",
    className: "AppServiceEnvironmentCollection",
    modelProperties: {
      value: {
        required: true,
        serializedName: "",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "AppServiceEnvironmentResource"
            }
          }
        }
      },
      nextLink: {
        readOnly: true,
        serializedName: "nextLink",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const StampCapacityCollection: msRest.CompositeMapper = {
  serializedName: "StampCapacityCollection",
  type: {
    name: "Composite",
    className: "StampCapacityCollection",
    modelProperties: {
      value: {
        required: true,
        serializedName: "",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "StampCapacity"
            }
          }
        }
      },
      nextLink: {
        readOnly: true,
        serializedName: "nextLink",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const InboundEnvironmentEndpointCollection: msRest.CompositeMapper = {
  serializedName: "InboundEnvironmentEndpointCollection",
  type: {
    name: "Composite",
    className: "InboundEnvironmentEndpointCollection",
    modelProperties: {
      value: {
        required: true,
        serializedName: "",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "InboundEnvironmentEndpoint"
            }
          }
        }
      },
      nextLink: {
        readOnly: true,
        serializedName: "nextLink",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const WorkerPoolCollection: msRest.CompositeMapper = {
  serializedName: "WorkerPoolCollection",
  type: {
    name: "Composite",
    className: "WorkerPoolCollection",
    modelProperties: {
      value: {
        required: true,
        serializedName: "",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "WorkerPoolResource"
            }
          }
        }
      },
      nextLink: {
        readOnly: true,
        serializedName: "nextLink",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const ResourceMetricDefinitionCollection: msRest.CompositeMapper = {
  serializedName: "ResourceMetricDefinitionCollection",
  type: {
    name: "Composite",
    className: "ResourceMetricDefinitionCollection",
    modelProperties: {
      value: {
        required: true,
        serializedName: "",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "ResourceMetricDefinition"
            }
          }
        }
      },
      nextLink: {
        readOnly: true,
        serializedName: "nextLink",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const SkuInfoCollection: msRest.CompositeMapper = {
  serializedName: "SkuInfoCollection",
  type: {
    name: "Composite",
    className: "SkuInfoCollection",
    modelProperties: {
      value: {
        required: true,
        serializedName: "",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "SkuInfo"
            }
          }
        }
      },
      nextLink: {
        readOnly: true,
        serializedName: "nextLink",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const UsageCollection: msRest.CompositeMapper = {
  serializedName: "UsageCollection",
  type: {
    name: "Composite",
    className: "UsageCollection",
    modelProperties: {
      value: {
        required: true,
        serializedName: "",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "Usage"
            }
          }
        }
      },
      nextLink: {
        readOnly: true,
        serializedName: "nextLink",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const OutboundEnvironmentEndpointCollection: msRest.CompositeMapper = {
  serializedName: "OutboundEnvironmentEndpointCollection",
  type: {
    name: "Composite",
    className: "OutboundEnvironmentEndpointCollection",
    modelProperties: {
      value: {
        required: true,
        serializedName: "",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "OutboundEnvironmentEndpoint"
            }
          }
        }
      },
      nextLink: {
        readOnly: true,
        serializedName: "nextLink",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const AppServicePlanCollection: msRest.CompositeMapper = {
  serializedName: "AppServicePlanCollection",
  type: {
    name: "Composite",
    className: "AppServicePlanCollection",
    modelProperties: {
      value: {
        required: true,
        serializedName: "",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "AppServicePlan"
            }
          }
        }
      },
      nextLink: {
        readOnly: true,
        serializedName: "nextLink",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const ResourceCollection: msRest.CompositeMapper = {
  serializedName: "ResourceCollection",
  type: {
    name: "Composite",
    className: "ResourceCollection",
    modelProperties: {
      value: {
        required: true,
        serializedName: "",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "String"
            }
          }
        }
      },
      nextLink: {
        readOnly: true,
        serializedName: "nextLink",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const HybridConnectionCollection: msRest.CompositeMapper = {
  serializedName: "HybridConnectionCollection",
  type: {
    name: "Composite",
    className: "HybridConnectionCollection",
    modelProperties: {
      value: {
        required: true,
        serializedName: "",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "HybridConnection"
            }
          }
        }
      },
      nextLink: {
        readOnly: true,
        serializedName: "nextLink",
        type: {
          name: "String"
        }
      }
    }
  }
};

export const ResourceHealthMetadataCollection: msRest.CompositeMapper = {
  serializedName: "ResourceHealthMetadataCollection",
  type: {
    name: "Composite",
    className: "ResourceHealthMetadataCollection",
    modelProperties: {
      value: {
        required: true,
        serializedName: "",
        type: {
          name: "Sequence",
          element: {
            type: {
              name: "Composite",
              className: "ResourceHealthMetadata"
            }
          }
        }
      },
      nextLink: {
        readOnly: true,
        serializedName: "nextLink",
        type: {
          name: "String"
        }
      }
    }
  }
};
