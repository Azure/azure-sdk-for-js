/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is regenerated.
 */

import { Global } from "../operationsInterfaces";
import * as coreClient from "@azure/core-client";
import * as Mappers from "../models/mappers";
import * as Parameters from "../models/parameters";
import { WebSiteManagementClient } from "../webSiteManagementClient";
import {
  GlobalGetDeletedWebAppOptionalParams,
  GlobalGetDeletedWebAppResponse,
  GlobalGetDeletedWebAppSnapshotsOptionalParams,
  GlobalGetDeletedWebAppSnapshotsResponse,
  GlobalGetSubscriptionOperationWithAsyncResponseOptionalParams
} from "../models";

/** Class containing Global operations. */
export class GlobalImpl implements Global {
  private readonly client: WebSiteManagementClient;

  /**
   * Initialize a new instance of the class Global class.
   * @param client Reference to the service client
   */
  constructor(client: WebSiteManagementClient) {
    this.client = client;
  }

  /**
   * Description for Get deleted app for a subscription.
   * @param deletedSiteId The numeric ID of the deleted app, e.g. 12345
   * @param options The options parameters.
   */
  getDeletedWebApp(
    deletedSiteId: string,
    options?: GlobalGetDeletedWebAppOptionalParams
  ): Promise<GlobalGetDeletedWebAppResponse> {
    return this.client.sendOperationRequest(
      { deletedSiteId, options },
      getDeletedWebAppOperationSpec
    );
  }

  /**
   * Description for Get all deleted apps for a subscription.
   * @param deletedSiteId The numeric ID of the deleted app, e.g. 12345
   * @param options The options parameters.
   */
  getDeletedWebAppSnapshots(
    deletedSiteId: string,
    options?: GlobalGetDeletedWebAppSnapshotsOptionalParams
  ): Promise<GlobalGetDeletedWebAppSnapshotsResponse> {
    return this.client.sendOperationRequest(
      { deletedSiteId, options },
      getDeletedWebAppSnapshotsOperationSpec
    );
  }

  /**
   * Description for Gets an operation in a subscription and given region
   * @param location Location name
   * @param operationId Operation Id
   * @param options The options parameters.
   */
  getSubscriptionOperationWithAsyncResponse(
    location: string,
    operationId: string,
    options?: GlobalGetSubscriptionOperationWithAsyncResponseOptionalParams
  ): Promise<void> {
    return this.client.sendOperationRequest(
      { location, operationId, options },
      getSubscriptionOperationWithAsyncResponseOperationSpec
    );
  }
}
// Operation Specifications
const serializer = coreClient.createSerializer(Mappers, /* isXml */ false);

const getDeletedWebAppOperationSpec: coreClient.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/providers/Microsoft.Web/deletedSites/{deletedSiteId}",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: Mappers.DeletedSite
    },
    default: {
      bodyMapper: Mappers.DefaultErrorResponse
    }
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.deletedSiteId
  ],
  headerParameters: [Parameters.accept],
  serializer
};
const getDeletedWebAppSnapshotsOperationSpec: coreClient.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/providers/Microsoft.Web/deletedSites/{deletedSiteId}/snapshots",
  httpMethod: "GET",
  responses: {
    200: {
      bodyMapper: {
        type: {
          name: "Sequence",
          element: { type: { name: "Composite", className: "Snapshot" } }
        }
      }
    },
    default: {
      bodyMapper: Mappers.DefaultErrorResponse
    }
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.deletedSiteId
  ],
  headerParameters: [Parameters.accept],
  serializer
};
const getSubscriptionOperationWithAsyncResponseOperationSpec: coreClient.OperationSpec = {
  path:
    "/subscriptions/{subscriptionId}/providers/Microsoft.Web/locations/{location}/operations/{operationId}",
  httpMethod: "GET",
  responses: {
    204: {},
    default: {
      bodyMapper: Mappers.DefaultErrorResponse
    }
  },
  queryParameters: [Parameters.apiVersion],
  urlParameters: [
    Parameters.$host,
    Parameters.subscriptionId,
    Parameters.location,
    Parameters.operationId
  ],
  headerParameters: [Parameters.accept],
  serializer
};
