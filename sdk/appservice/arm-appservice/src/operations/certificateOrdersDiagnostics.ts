/*
 * Copyright (c) Microsoft Corporation.
 * Licensed under the MIT License.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is
 * regenerated.
 */

import * as msRest from "@azure/ms-rest-js";
import * as Models from "../models";
import * as Mappers from "../models/certificateOrdersDiagnosticsMappers";
import * as Parameters from "../models/parameters";
import { WebSiteManagementClientContext } from "../webSiteManagementClientContext";

/** Class representing a CertificateOrdersDiagnostics. */
export class CertificateOrdersDiagnostics {
  private readonly client: WebSiteManagementClientContext;

  /**
   * Create a CertificateOrdersDiagnostics.
   * @param {WebSiteManagementClientContext} client Reference to the service client.
   */
  constructor(client: WebSiteManagementClientContext) {
    this.client = client;
  }

  /**
   * Description for Microsoft.CertificateRegistration to get the list of detectors for this RP.
   * @summary Microsoft.CertificateRegistration to get the list of detectors for this RP.
   * @param resourceGroupName Name of the resource group to which the resource belongs.
   * @param certificateOrderName The certificate order name for which the response is needed.
   * @param [options] The optional parameters
   * @returns
   * Promise<Models.CertificateOrdersDiagnosticsListAppServiceCertificateOrderDetectorResponseResponse>
   */
  listAppServiceCertificateOrderDetectorResponse(
    resourceGroupName: string,
    certificateOrderName: string,
    options?: msRest.RequestOptionsBase
  ): Promise<
    Models.CertificateOrdersDiagnosticsListAppServiceCertificateOrderDetectorResponseResponse
  >;
  /**
   * @param resourceGroupName Name of the resource group to which the resource belongs.
   * @param certificateOrderName The certificate order name for which the response is needed.
   * @param callback The callback
   */
  listAppServiceCertificateOrderDetectorResponse(
    resourceGroupName: string,
    certificateOrderName: string,
    callback: msRest.ServiceCallback<Models.DetectorResponseCollection>
  ): void;
  /**
   * @param resourceGroupName Name of the resource group to which the resource belongs.
   * @param certificateOrderName The certificate order name for which the response is needed.
   * @param options The optional parameters
   * @param callback The callback
   */
  listAppServiceCertificateOrderDetectorResponse(
    resourceGroupName: string,
    certificateOrderName: string,
    options: msRest.RequestOptionsBase,
    callback: msRest.ServiceCallback<Models.DetectorResponseCollection>
  ): void;
  listAppServiceCertificateOrderDetectorResponse(
    resourceGroupName: string,
    certificateOrderName: string,
    options?: msRest.RequestOptionsBase | msRest.ServiceCallback<Models.DetectorResponseCollection>,
    callback?: msRest.ServiceCallback<Models.DetectorResponseCollection>
  ): Promise<
    Models.CertificateOrdersDiagnosticsListAppServiceCertificateOrderDetectorResponseResponse
  > {
    return this.client.sendOperationRequest(
      {
        resourceGroupName,
        certificateOrderName,
        options
      },
      listAppServiceCertificateOrderDetectorResponseOperationSpec,
      callback
    ) as Promise<
      Models.CertificateOrdersDiagnosticsListAppServiceCertificateOrderDetectorResponseResponse
    >;
  }

  /**
   * Description for Microsoft.CertificateRegistration call to get a detector response from App Lens.
   * @summary Microsoft.CertificateRegistration call to get a detector response from App Lens.
   * @param resourceGroupName Name of the resource group to which the resource belongs.
   * @param certificateOrderName The certificate order name for which the response is needed.
   * @param detectorName The detector name which needs to be run.
   * @param [options] The optional parameters
   * @returns
   * Promise<Models.CertificateOrdersDiagnosticsGetAppServiceCertificateOrderDetectorResponseResponse>
   */
  getAppServiceCertificateOrderDetectorResponse(
    resourceGroupName: string,
    certificateOrderName: string,
    detectorName: string,
    options?: Models.CertificateOrdersDiagnosticsGetAppServiceCertificateOrderDetectorResponseOptionalParams
  ): Promise<
    Models.CertificateOrdersDiagnosticsGetAppServiceCertificateOrderDetectorResponseResponse
  >;
  /**
   * @param resourceGroupName Name of the resource group to which the resource belongs.
   * @param certificateOrderName The certificate order name for which the response is needed.
   * @param detectorName The detector name which needs to be run.
   * @param callback The callback
   */
  getAppServiceCertificateOrderDetectorResponse(
    resourceGroupName: string,
    certificateOrderName: string,
    detectorName: string,
    callback: msRest.ServiceCallback<Models.DetectorResponse>
  ): void;
  /**
   * @param resourceGroupName Name of the resource group to which the resource belongs.
   * @param certificateOrderName The certificate order name for which the response is needed.
   * @param detectorName The detector name which needs to be run.
   * @param options The optional parameters
   * @param callback The callback
   */
  getAppServiceCertificateOrderDetectorResponse(
    resourceGroupName: string,
    certificateOrderName: string,
    detectorName: string,
    options: Models.CertificateOrdersDiagnosticsGetAppServiceCertificateOrderDetectorResponseOptionalParams,
    callback: msRest.ServiceCallback<Models.DetectorResponse>
  ): void;
  getAppServiceCertificateOrderDetectorResponse(
    resourceGroupName: string,
    certificateOrderName: string,
    detectorName: string,
    options?:
      | Models.CertificateOrdersDiagnosticsGetAppServiceCertificateOrderDetectorResponseOptionalParams
      | msRest.ServiceCallback<Models.DetectorResponse>,
    callback?: msRest.ServiceCallback<Models.DetectorResponse>
  ): Promise<
    Models.CertificateOrdersDiagnosticsGetAppServiceCertificateOrderDetectorResponseResponse
  > {
    return this.client.sendOperationRequest(
      {
        resourceGroupName,
        certificateOrderName,
        detectorName,
        options
      },
      getAppServiceCertificateOrderDetectorResponseOperationSpec,
      callback
    ) as Promise<
      Models.CertificateOrdersDiagnosticsGetAppServiceCertificateOrderDetectorResponseResponse
    >;
  }

  /**
   * Description for Microsoft.CertificateRegistration to get the list of detectors for this RP.
   * @summary Microsoft.CertificateRegistration to get the list of detectors for this RP.
   * @param nextPageLink The NextLink from the previous successful call to List operation.
   * @param [options] The optional parameters
   * @returns
   * Promise<Models.CertificateOrdersDiagnosticsListAppServiceCertificateOrderDetectorResponseNextResponse>
   */
  listAppServiceCertificateOrderDetectorResponseNext(
    nextPageLink: string,
    options?: msRest.RequestOptionsBase
  ): Promise<
    Models.CertificateOrdersDiagnosticsListAppServiceCertificateOrderDetectorResponseNextResponse
  >;
  /**
   * @param nextPageLink The NextLink from the previous successful call to List operation.
   * @param callback The callback
   */
  listAppServiceCertificateOrderDetectorResponseNext(
    nextPageLink: string,
    callback: msRest.ServiceCallback<Models.DetectorResponseCollection>
  ): void;
  /**
   * @param nextPageLink The NextLink from the previous successful call to List operation.
   * @param options The optional parameters
   * @param callback The callback
   */
  listAppServiceCertificateOrderDetectorResponseNext(
    nextPageLink: string,
    options: msRest.RequestOptionsBase,
    callback: msRest.ServiceCallback<Models.DetectorResponseCollection>
  ): void;
  listAppServiceCertificateOrderDetectorResponseNext(
    nextPageLink: string,
    options?: msRest.RequestOptionsBase | msRest.ServiceCallback<Models.DetectorResponseCollection>,
    callback?: msRest.ServiceCallback<Models.DetectorResponseCollection>
  ): Promise<
    Models.CertificateOrdersDiagnosticsListAppServiceCertificateOrderDetectorResponseNextResponse
  > {
    return this.client.sendOperationRequest(
      {
        nextPageLink,
        options
      },
      listAppServiceCertificateOrderDetectorResponseNextOperationSpec,
      callback
    ) as Promise<
      Models.CertificateOrdersDiagnosticsListAppServiceCertificateOrderDetectorResponseNextResponse
    >;
  }
}

// Operation Specifications
const serializer = new msRest.Serializer(Mappers);
const listAppServiceCertificateOrderDetectorResponseOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path:
    "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.CertificateRegistration/certificateOrders/{certificateOrderName}/detectors",
  urlParameters: [
    Parameters.resourceGroupName,
    Parameters.certificateOrderName,
    Parameters.subscriptionId
  ],
  queryParameters: [Parameters.apiVersion],
  headerParameters: [Parameters.acceptLanguage],
  responses: {
    200: {
      bodyMapper: Mappers.DetectorResponseCollection
    },
    default: {
      bodyMapper: Mappers.DefaultErrorResponse
    }
  },
  serializer
};

const getAppServiceCertificateOrderDetectorResponseOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  path:
    "subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.CertificateRegistration/certificateOrders/{certificateOrderName}/detectors/{detectorName}",
  urlParameters: [
    Parameters.resourceGroupName,
    Parameters.certificateOrderName,
    Parameters.detectorName,
    Parameters.subscriptionId
  ],
  queryParameters: [
    Parameters.startTime,
    Parameters.endTime,
    Parameters.timeGrain,
    Parameters.apiVersion
  ],
  headerParameters: [Parameters.acceptLanguage],
  responses: {
    200: {
      bodyMapper: Mappers.DetectorResponse
    },
    default: {
      bodyMapper: Mappers.DefaultErrorResponse
    }
  },
  serializer
};

const listAppServiceCertificateOrderDetectorResponseNextOperationSpec: msRest.OperationSpec = {
  httpMethod: "GET",
  baseUrl: "https://management.azure.com",
  path: "{nextLink}",
  urlParameters: [Parameters.nextPageLink],
  queryParameters: [Parameters.apiVersion],
  headerParameters: [Parameters.acceptLanguage],
  responses: {
    200: {
      bodyMapper: Mappers.DetectorResponseCollection
    },
    default: {
      bodyMapper: Mappers.DefaultErrorResponse
    }
  },
  serializer
};
